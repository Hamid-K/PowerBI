using System;

namespace Microsoft.Mashup.Engine1.Library.Action
{
	// Token: 0x02001029 RID: 4137
	internal class ActionModuleSource
	{
		// Token: 0x04003C24 RID: 15396
		public const string Source = "// Copyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nsection ActionModule;\r\n\r\n// TODO (Versions): Remove this function after updating DFE\r\nshared ValueAction.BeginTransaction = (values as record) => let\r\n    field = Record.ToTable(values){0},\r\n    createVersion = Action.Sequence(\r\n    {\r\n        () => TableAction.InsertRows(Value.Versions(field[Value]), #table({\"Version\"}, {{Text.NewGuid()}})),\r\n            (newVersion) => Action.Return(Record.FromTable(#table({\"Name\", \"Value\"}, {{field[Name], newVersion{0}[Data]}})))\r\n    })\r\nin\r\n    if (Record.FieldCount(values) = 1) then createVersion\r\n    else [Reason = \"Expression.Error\", Message = LibraryModule!UICulture.GetString(\"ValueAction_Transaction_NotSupported\"), Detail = values];\r\n\r\n// TODO (Versions): Remove this function after updating DFE\r\nshared ValueAction.CommitTransaction = (values as record) => let\r\n    field = Record.ToTable(values){0},\r\n    publishVersion = Action.Sequence(\r\n    {\r\n        () => TableAction.UpdateRows(\r\n                Table.SelectRows(Value.Versions(field[Value]), each [Version] = Value.VersionIdentity(field[Value])),\r\n                {{\"Published\", each true}}),\r\n        Action.DoNothing\r\n    })\r\nin\r\n    if (Record.FieldCount(values) = 1) then publishVersion\r\n    else [Reason = \"Expression.Error\", Message = LibraryModule!UICulture.GetString(\"ValueAction_Transaction_NotSupported\"), Detail = values];\r\n\r\nHandlers.FromAction = (action as nullable action) as record =>\r\n[\r\n    GetExpression = () => Action!Value.Expression(action),\r\n\r\n    OnBind = (binding) => Action.Sequence({action, binding}),\r\n    OnExecute = () => action,\r\n\r\n    OnInvoke = (function, arguments, index) => Function.Invoke(function, List.ReplaceRange(arguments, index, 1, {action}))\r\n];\r\n\r\nshared Action.View = (\r\n    action as nullable action,\r\n    handlers as record\r\n) as action =>\r\n    let\r\n        defaultHandlers = if (action <> null) then Handlers.FromAction(action) else [],\r\n\r\n        // NOTE: Do not automatically forward Value.Expression to the action as it breaks encapsulation\r\n        defaultHandlersWithoutExpression =\r\n            if (defaultHandlers[GetExpression]? <> null) then defaultHandlers & [GetExpression = () => null]\r\n            else defaultHandlers,\r\n\r\n        viewHandlers = defaultHandlersWithoutExpression & handlers,\r\n        view = Action!Action.FromHandlers(viewHandlers)\r\n    in\r\n        view;\r\n\r\nshared Action.ViewFunction = Value.ViewFunction;\r\n\r\nshared Action.ViewError = Value.ViewError;\r\n\r\n    ";
	}
}
