<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessControlEntry_ConditionContextType" xml:space="preserve">
    <value>The authorization context against which an access control entry (ACE) condition is evaluated.</value>
  </data>
  <data name="AccessControlEntry_ConditionToIdentities" xml:space="preserve">
    <value>Returns a list of identities that the condition will accept.</value>
  </data>
  <data name="AccessControlEntry_ConditionToIdentities_Description" xml:space="preserve">
    <value>&lt;p&gt;Using the specified {0}, converts the {1} into the list of identities for which {1} would return &lt;code&gt;true&lt;/code&gt; in all authorization contexts with {0} as the identity provider. An error is raised if it is not possible to convert {1} into a list of identities, for example if {1} consults attributes other than user or group identities to make a decision.&lt;/p&gt;
    &lt;p&gt;Note that the list of identities represents the identities as they appear in {1} and no normalization (such as group expansion) is performed on them.&lt;/p&gt;
</value>
  </data>
  <data name="AccessControlEntry_Type" xml:space="preserve">
    <value>A table of access control entries (ACEs).</value>
  </data>
  <data name="AccessControlEntry_Type_Description" xml:space="preserve">
    <value>An ordered table of access control entries (ACEs) representing authorization rules. Each row is evaluated against the current authorization context (in order) and the first row for which the &lt;code&gt;Condition&lt;/code&gt; expression returns true determines which rule applies. The &lt;code&gt;Action&lt;/code&gt; column represents the kind of action to which the rule applies. The &lt;code&gt;AccessControlKind&lt;/code&gt; column determines whether access should be allowed or denied for the action.</value>
  </data>
  <data name="AccessControlKind_Allow" xml:space="preserve">
    <value>Access is allowed.</value>
  </data>
  <data name="AccessControlKind_Deny" xml:space="preserve">
    <value>Access is denied.</value>
  </data>
  <data name="AccessControlKind_Type" xml:space="preserve">
    <value>Specifies the kind of access control.</value>
  </data>
  <data name="Access_Database" xml:space="preserve">
    <value>Returns a structural representation of an Access database.</value>
  </data>
  <data name="Access_Database_Description" xml:space="preserve">
    <value>Returns a structural representation of an Access database, {0}. An optional record parameter, {1}, may be specified to control the following options:
    {1:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] for example.</value>
  </data>
  <data name="Action_DoNothing" xml:space="preserve">
    <value>An action that performs no action when executed and returns &lt;code&gt;null&lt;/code&gt; as its result.</value>
  </data>
  <data name="Action_DoNothing_Description" xml:space="preserve">
    <value>An action that performs no action when executed and returns &lt;code&gt;null&lt;/code&gt; as its result.</value>
  </data>
  <data name="Action_Return" xml:space="preserve">
    <value>Creates an action that performs no action when executed and returns the specified value as its result.</value>
  </data>
  <data name="Action_Return_Description" xml:space="preserve">
    <value>Creates an action that performs no action when executed and returns {0} as its result.</value>
  </data>
  <data name="Action_Return_Example1" xml:space="preserve">
    <value>Creates an action that, when executed, performs no action and returns the value &lt;code&gt;"hello world!"&lt;/code&gt; as its result.</value>
  </data>
  <data name="Action_Sequence" xml:space="preserve">
    <value>Creates an action that executes a sequence of actions in order.</value>
  </data>
  <data name="Action_Sequence_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates an action that executes the sequence of elements in {0} in order.&lt;/p&gt;
&lt;p&gt;Each element of {0} is either an action or a function that returns an action. An element in the list is executed only after all of the elements preceding it in the list are executed. In the case of an element that is a function, "executed" means that the function is evaluated and the action it returns is executed.&lt;/p&gt;
&lt;p&gt;If an element of the list is a function then it must be either a 0 or 1-argument function that returns an action. The result of the execution of the preceding element is provided as the input to the function if it is a 1-argument function. The initial result (i.e. the result available to the first function in the sequence) is &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Any element in the list that depends on a side effect or result of executing a preceding element must be expressed using a function.&lt;/p&gt;
&lt;p&gt;The result of &lt;code&gt;Action.Sequence&lt;/code&gt; is the result of executing the last element in the list (or &lt;code&gt;null&lt;/code&gt; if the sequence is empty).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; A function in the list is not guaranteed to observe the side effects from the execution of the preceding elements in the list if the function references variables declared outside of its body (due to capture of free variables when the function is constructed). To ensure that updated data is observed by the function after an earlier element in the list executes, use an expression or function that directly accesses the affected data sources.&lt;/p&gt;</value>
  </data>
  <data name="Action_Sequence_Example1" xml:space="preserve">
    <value>Creates an action that, when executed, will execute the first action (which returns &lt;code&gt;"hello"&lt;/code&gt;), combine its result with the string &lt;code&gt;"world!"&lt;/code&gt; to create a second action, and then execute the second action to produce a result of &lt;code&gt;"hello world!"&lt;/code&gt;.</value>
  </data>
  <data name="Action_Try" xml:space="preserve">
    <value>Creates an action that executes the specified action, catching and returning any errors that occur during its execution.</value>
  </data>
  <data name="Action_Try_Description" xml:space="preserve">
    <value>Creates an action that executes {0}, catches any errors that occur while executing the action, and returns a record containing a &lt;code&gt;HasError&lt;/code&gt; field and either a &lt;code&gt;Value&lt;/code&gt; or &lt;code&gt;Error&lt;/code&gt; field depending on whether the action executed successfully.</value>
  </data>
  <data name="Action_Try_Example1" xml:space="preserve">
    <value>&lt;p&gt;Creates an action that will try the execution of a second action that throws an error. The result of the &lt;code&gt;Try&lt;/code&gt; action is the error record:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[HasError = true, Error = [Reason = "Expression.Error", Message = "Error!", Detail = null]&lt;/code&gt;&lt;/p&gt;</value>
  </data>
  <data name="Action_Try_Example2" xml:space="preserve">
    <value>&lt;p&gt;Creates an action that will try the execution of a second action that returns a result. The result of the &lt;code&gt;Try&lt;/code&gt; action is a success record:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[HasError = false, Value = "Success!"]&lt;/code&gt;&lt;/p&gt;
    </value>
  </data>
  <data name="Action_Type" xml:space="preserve">
    <value>The type that represents all actions.</value>
  </data>
  <data name="Action_View" xml:space="preserve">
    <value>Creates or extends an action with user-defined handlers for query and action operations.</value>
  </data>
  <data name="Action_ViewError" xml:space="preserve">
    <value>Creates a modified error record which won't trigger a fallback when thrown by a handler defined on a view (via Action.View).</value>
  </data>
  <data name="Action_ViewError_Description" xml:space="preserve">
    <value>Creates a modified error record from {0} which won't trigger a fallback when thrown by a handler defined on a view (via Action.View).</value>
  </data>
  <data name="Action_ViewFunction" xml:space="preserve">
    <value>Creates a function that can be intercepted by a handler defined on a view (via Binary.View).</value>
  </data>
  <data name="Action_ViewFunction_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates a view function based on {0} that can be handled in a view created by &lt;code&gt;Action.View&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OnInvoke&lt;/code&gt; handler of &lt;code&gt;Action.View&lt;/code&gt; can be used to define a handler for the view function.&lt;/p&gt;
&lt;p&gt;As with the handlers for built-in operations, if no &lt;code&gt;OnInvoke&lt;/code&gt; handler is specified, or if it does not handle the view function, or if an error is raised by the handler, {0} is applied on top of the view.&lt;/p&gt;
&lt;p&gt;Refer to the published Power Query custom connector documentation for a more complete description of &lt;code&gt;Action.View&lt;/code&gt; and custom view functions.&lt;/p&gt;</value>
  </data>
  <data name="Action_View_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a view of {0} where the functions specified in {1} are used in lieu of the default behavior of an operation when the operation is applied to the view.&lt;/p&gt;
&lt;p&gt;If {0} is provided, all handler functions are optional. If {0} isn't provided, the &lt;code&gt;OnExecute&lt;/code&gt; handler function is required. If a handler function isn't specified for an operation, the default behavior of the operation is applied to {0} instead (except in the case of &lt;code&gt;GetExpression&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Handler functions must return a value that is semantically equivalent to the result of applying the operation against {0} (or the resulting view in the case of &lt;code&gt;GetExpression&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If a handler function raises an error, the default behavior of the operation is applied to the view.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Action.View&lt;/code&gt; can be used to implement folding to a data source – the translation of M queries into source-specific operations (for example, to insert rows into a table).&lt;/p&gt;
&lt;p&gt;Refer to the published Power Query custom connector documentation for a more complete description of &lt;code&gt;Action.View&lt;/code&gt;.&lt;/p&gt;</value>
  </data>
  <data name="Action_WithErrorContext" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Action_WithErrorContext_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="ActiveDirectory_Domains" xml:space="preserve">
    <value>Returns a list of Active Directory domains in the same forest as the specified domain or of the current machine's domain if none is specified.</value>
  </data>
  <data name="AdoDotNet_DataSource" xml:space="preserve">
    <value>Returns the schema collection for an ADO.NET data source.</value>
  </data>
  <data name="AdoDotNet_DataSource_Description" xml:space="preserve">
    <value>Returns the schema collection for the ADO.NET data source with provider name {0} and connection string {1}. {1} can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, {2}, may be provided to specify additional properties. The record can contain the following fields:
    {2:type}</value>
  </data>
  <data name="AdoDotNet_Query" xml:space="preserve">
    <value>Returns the result of running a native query on an ADO.NET data source.</value>
  </data>
  <data name="AdoDotNet_Query_Description" xml:space="preserve">
    <value>Returns the result of running {2} with the connection string {1} using the ADO.NET provider {0}. {1} can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, {3}, may be provided to specify additional properties. The record can contain the following fields:
    {3:type}</value>
  </data>
  <data name="AdobeAnalytics_Cubes" xml:space="preserve">
    <value>Returns the report suites in Adobe Analytics.</value>
  </data>
  <data name="AdobeAnalytics_Cubes_Description" xml:space="preserve">
    <value>Returns a table of multidimensional packages from Adobe Analytics. An optional record parameter, {0}, may be specified to control the following options:
    {0:type}
    </value>
  </data>
  <data name="AnalysisServices_Database" xml:space="preserve">
    <value>Returns a table of multidimensional cubes or tabular models from the Analysis Services database.</value>
  </data>
  <data name="AnalysisServices_Database_Description" xml:space="preserve">
    <value>Returns a table of multidimensional cubes or tabular models from the Analysis Services database {1} on server {0}. An optional record parameter, {2}, may be specified to control the following options:
    {2:type}
    </value>
  </data>
  <data name="AnalysisServices_Databases" xml:space="preserve">
    <value>Returns the Analysis Services databases on a particular host.</value>
  </data>
  <data name="AnalysisServices_Databases_Description" xml:space="preserve">
    <value>Returns databases on an Analysis Services instance, {0}.  An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields:
    {1:type}
    </value>
  </data>
  <data name="Any_Type" xml:space="preserve">
    <value>The type that represents all values.</value>
  </data>
  <data name="AzureStorage_BlobContents" xml:space="preserve">
    <value>Returns the content of the specified blob from an Azure storage vault.</value>
  </data>
  <data name="AzureStorage_BlobContents_Description" xml:space="preserve">
    <value>Returns the content of the blob at the URL, {0}, from an Azure storage vault. {1} may be specified to control the following options:
    {1:type}</value>
  </data>
  <data name="AzureStorage_Blobs" xml:space="preserve">
    <value>Returns a navigational table containing the containers found in the specified account from an Azure storage vault.</value>
  </data>
  <data name="AzureStorage_Blobs_Description" xml:space="preserve">
    <value>Returns a navigational table containing a row for each container found at the account URL, {0}, from an Azure storage vault. Each row contains a link to the container blobs. {1} may be specified to control the following options:
    {1:type}</value>
  </data>
  <data name="AzureStorage_DataLake" xml:space="preserve">
    <value>Returns a navigational table containing the documents found in the specified container and its subfolders from Azure Data Lake Storage.</value>
  </data>
  <data name="AzureStorage_DataLakeContents" xml:space="preserve">
    <value>Returns the content of the specified file from an Azure Data Lake Storage filesystem.</value>
  </data>
  <data name="AzureStorage_DataLakeContents_Description" xml:space="preserve">
    <value>Returns the content of the file at the URL, {0}, from an Azure Data Lake Storage filesystem. {1} may be specified to control the following options:
    {1:type}</value>
  </data>
  <data name="AzureStorage_DataLake_Description" xml:space="preserve">
    <value>Returns a navigational table containing the documents found in the specified container and its subfolders at the account URL, {0}, from an Azure Data Lake Storage filesystem. {1} may be specified to control the following options:
    {1:type}</value>
  </data>
  <data name="AzureStorage_Tables" xml:space="preserve">
    <value>Returns a navigational table containing the tables found in the specified account from an Azure storage vault.</value>
  </data>
  <data name="AzureStorage_Tables_Description" xml:space="preserve">
    <value>Returns a navigational table containing a row for each table found at the account URL, {0}, from an Azure storage vault. Each row contains a link to the azure table. An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields :
    {1:type}</value>
  </data>
  <data name="BinaryEncoding_Base64" xml:space="preserve">
    <value>Constant to use as the encoding type when base-64 encoding is required.</value>
  </data>
  <data name="BinaryEncoding_Hex" xml:space="preserve">
    <value>Constant to use as the encoding type when hexadecimal encoding is required.</value>
  </data>
  <data name="BinaryEncoding_Type" xml:space="preserve">
    <value>Specifies the type of binary encoding.</value>
  </data>
  <data name="BinaryFormat_7BitEncodedSignedInteger" xml:space="preserve">
    <value>A binary format that reads a 64-bit signed integer that was encoded using a 7-bit variable-length encoding.</value>
  </data>
  <data name="BinaryFormat_7BitEncodedUnsignedInteger" xml:space="preserve">
    <value>A binary format that reads a 64-bit unsigned integer that was encoded using a 7-bit variable-length encoding.</value>
  </data>
  <data name="BinaryFormat_Binary" xml:space="preserve">
    <value>Returns a binary format that reads a binary value.</value>
  </data>
  <data name="BinaryFormat_Binary_Description" xml:space="preserve">
    <value>Returns a binary format that reads a binary value.  If {0} is specified, the binary value will contain that many bytes.  If {0} is not specified, the binary value will contain the remaining bytes.  The {0} can be specified either as a number, or as a binary format of the length that precedes the binary data.</value>
  </data>
  <data name="BinaryFormat_Byte" xml:space="preserve">
    <value>A binary format that reads an 8-bit unsigned integer.</value>
  </data>
  <data name="BinaryFormat_ByteOrder" xml:space="preserve">
    <value>Returns a binary format with the byte order specified by a function.</value>
  </data>
  <data name="BinaryFormat_ByteOrder_Description" xml:space="preserve">
    <value>Returns a binary format with the byte order specified by {0}.  The default byte order is &lt;code&gt;ByteOrder.BigEndian&lt;/code&gt;.</value>
  </data>
  <data name="BinaryFormat_Choice" xml:space="preserve">
    <value>Returns a binary format that chooses the next binary format based on a value that has already been read.</value>
  </data>
  <data name="BinaryFormat_Choice_Description" xml:space="preserve">
    <value>Returns a binary format that chooses the next binary format based on a value that has already been read.  The binary format value produced by this function works in stages:&lt;ul&gt;
&lt;li&gt;The binary format specified by the {0} parameter is used to read a value.&lt;/li&gt;
&lt;li&gt;The value is passed to the choice function specified by the {1} parameter.&lt;/li&gt;
&lt;li&gt;The choice function inspects the value and returns a second binary format.&lt;/li&gt;
&lt;li&gt;The second binary format is used to read a second value.&lt;/li&gt;
&lt;li&gt;If the combine function is specified, then the first and second values are passed to the combine function, and the resulting value is returned.&lt;/li&gt;
&lt;li&gt;If the combine function is not specified, the second value is returned.&lt;/li&gt;
&lt;li&gt;The second value is returned.&lt;/li&gt;
&lt;/ul&gt;The optional {2} parameter indicates the type of binary format that will be returned by the choice function.  Either &lt;code&gt;type any&lt;/code&gt;, &lt;code&gt;type list&lt;/code&gt;, or &lt;code&gt;type binary&lt;/code&gt; may be specified.  If the {2} parameter is not specified, then &lt;code&gt;type any&lt;/code&gt; is used.   If &lt;code&gt;type list&lt;/code&gt; or &lt;code&gt;type binary&lt;/code&gt; is used, then the system may be able to return a streaming &lt;code&gt;binary&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt; value instead of a buffered one, which may reduce the amount of memory necessary to read the format.</value>
  </data>
  <data name="BinaryFormat_Choice_Example1" xml:space="preserve">
    <value>Read a list of bytes where the number of elements is determined by the first byte.</value>
  </data>
  <data name="BinaryFormat_Choice_Example2" xml:space="preserve">
    <value>Read a list of bytes where the number of elements is determined by the first byte, and preserve the first byte read.</value>
  </data>
  <data name="BinaryFormat_Choice_Example3" xml:space="preserve">
    <value>Read a list of bytes where the number of elements is determined by the first byte using a streaming list.</value>
  </data>
  <data name="BinaryFormat_Decimal" xml:space="preserve">
    <value>A binary format that reads a .NET 16-byte decimal value.</value>
  </data>
  <data name="BinaryFormat_Double" xml:space="preserve">
    <value>A binary format that reads an 8-byte IEEE double-precision floating point value.</value>
  </data>
  <data name="BinaryFormat_Group" xml:space="preserve">
    <value>Returns a binary format that reads a group of items.</value>
  </data>
  <data name="BinaryFormat_Group_Description" xml:space="preserve">
    <value>The parameters are as follows:
&lt;ul&gt;
&lt;li&gt;The {0} parameter specifies the binary format of the key value.&lt;/li&gt;
&lt;li&gt;The {1} parameter provides information about the group of known items.&lt;/li&gt;
&lt;li&gt;The optional {2} parameter can be used to specify a function that will return a binary format value for the value following any key that was unexpected.  If the {2} parameter is not specified, then an error will be raised if there are unexpected key values.&lt;/li&gt;
&lt;/ul&gt;
The {1} parameter specifies a list of item definitions.  Each item definition is a list, containing 3-5 values, as follows:
&lt;ul&gt;
&lt;li&gt;Key value.  The value of the key that corresponds to the item.  This must be unique within the set of items.&lt;/li&gt;
&lt;li&gt;Item format.  The binary format corresponding to the value of the item.  This allows each item to have a different format. &lt;/li&gt;
&lt;li&gt;Item occurrence.  The &lt;code&gt;BinaryOccurrence.Type&lt;/code&gt; value for how many times the item is expected to appear in the group.   Required items that are not present cause an error.  Required or optional duplicate items are handled like unexpected key values.&lt;/li&gt;
&lt;li&gt;Default item value (optional).  If the default item value appears in the item definition list and is not null, then it will be used instead of the default.  The default for repeating or optional items is null, and the default for repeating values is an empty list {{ }}.&lt;/li&gt;
&lt;li&gt;Item value transform (optional).   If the item value transform function is present in the item definition list and is not null, then it will be called to transform the item value before it is returned.  The transform function is only called if the item appears in the input (it will never be called with the default value). &lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="BinaryFormat_Group_Example1" xml:space="preserve">
    <value>The following assumes a key value that is a single byte, with 4 expected items in the group, all of which have a byte of data following the key.  The items appear in the input as follows:
&lt;ul&gt;
&lt;li&gt;Key 1 is required, and does appear with value 11.&lt;/li&gt;
&lt;li&gt;Key 2 repeats, and appears twice with value 22, and results in a value of { 22, 22 }.&lt;/li&gt;
&lt;li&gt;Key 3 is optional, and does not appear, and results in a value of null.&lt;/li&gt;
&lt;li&gt;Key 4 repeats, but does not appear, and results in a value of { }.&lt;/li&gt;
&lt;li&gt;Key 5 is not part of the group, but appears once with value 55.  The extra function is called with the key value 5, and returns the format corresponding to that value (BinaryFormat.Byte).  The value 55 is read and discarded.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="BinaryFormat_Group_Example2" xml:space="preserve">
    <value>The following example illustrates the item value transform and default item value.   The repeating item with key 1 sums the list of values read using List.Sum.  The optional item with key 2 has a default value of 123 instead of null.</value>
  </data>
  <data name="BinaryFormat_Length" xml:space="preserve">
    <value>Returns a binary format that limits the amount of data that can be read.</value>
  </data>
  <data name="BinaryFormat_Length_Description" xml:space="preserve">
    <value>Returns a binary format that limits the amount of data that can be read.  Both &lt;code&gt;BinaryFormat.List&lt;/code&gt; and &lt;code&gt;BinaryFormat.Binary&lt;/code&gt; can be used to read until end of the data.  &lt;code&gt;BinaryFormat.Length&lt;/code&gt; can be used to limit the number of bytes that are read.  The {0} parameter specifes the binary format to limit.  The {1} parameter specifies the number of bytes to read.  The {1} parameter may either be a number value, or a binary format value that specifies the format of the length value that appears that precedes the value being read.</value>
  </data>
  <data name="BinaryFormat_Length_Example1" xml:space="preserve">
    <value>Limit the number of bytes read to 2 when reading a list of bytes.</value>
  </data>
  <data name="BinaryFormat_Length_Example2" xml:space="preserve">
    <value>Limit the number of byte read when reading a list of bytes to the byte value preceding the list.</value>
  </data>
  <data name="BinaryFormat_List" xml:space="preserve">
    <value>Returns a binary format that reads a sequence of items and returns a list.</value>
  </data>
  <data name="BinaryFormat_List_Description" xml:space="preserve">
    <value>Returns a binary format that reads a sequence of items and returns a &lt;code&gt;list&lt;/code&gt;.  The {0} parameter specifies the binary format of each item.  There are three ways to determine the number of items read: &lt;ul&gt;&lt;li&gt;If the {1} is not specified, then the binary format will read until there are no more items.&lt;/li&gt;&lt;li&gt;If the {1} is a number, then the binary format will read that many items.&lt;/li&gt;&lt;li&gt;If the {1} is a function, then that function will be invoked for each item read.  The function returns true to continue, and false to stop reading items.  The final item is included in the list.&lt;/li&gt;&lt;li&gt;If the {1} is a binary format, then the count of items is expected to precede the list, and the specified format is used to read the count.&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="BinaryFormat_List_Example1" xml:space="preserve">
    <value>Read bytes until the end of the data.</value>
  </data>
  <data name="BinaryFormat_List_Example2" xml:space="preserve">
    <value>Read two bytes.</value>
  </data>
  <data name="BinaryFormat_List_Example3" xml:space="preserve">
    <value>Read bytes until the byte value is greater than or equal to two.</value>
  </data>
  <data name="BinaryFormat_Null" xml:space="preserve">
    <value>A binary format that reads zero bytes and returns null.</value>
  </data>
  <data name="BinaryFormat_Null_Description" xml:space="preserve">
    <value>A binary format that reads zero bytes and returns null.</value>
  </data>
  <data name="BinaryFormat_Record" xml:space="preserve">
    <value>Returns a binary format that reads a record.</value>
  </data>
  <data name="BinaryFormat_Record_Description" xml:space="preserve">
    <value>Returns a binary format that reads a record.  The {0} parameter specifies the format of the record.  Each field in the record can have a different binary format.  If a field contains a value that is not a binary format value, then no data is read for that field, and the field value is echoed to the result.</value>
  </data>
  <data name="BinaryFormat_Record_Example1" xml:space="preserve">
    <value>Read a record containing one 16-bit integer and one 32-bit integer.</value>
  </data>
  <data name="BinaryFormat_SignedInteger16" xml:space="preserve">
    <value>A binary format that reads a 16-bit signed integer.</value>
  </data>
  <data name="BinaryFormat_SignedInteger32" xml:space="preserve">
    <value>A binary format that reads a 32-bit signed integer.</value>
  </data>
  <data name="BinaryFormat_SignedInteger64" xml:space="preserve">
    <value>A binary format that reads a 64-bit signed integer.</value>
  </data>
  <data name="BinaryFormat_Single" xml:space="preserve">
    <value>A binary format that reads a 4-byte IEEE single-precision floating point value.</value>
  </data>
  <data name="BinaryFormat_Text" xml:space="preserve">
    <value>Returns a binary format that reads a text value.</value>
  </data>
  <data name="BinaryFormat_Text_Description" xml:space="preserve">
    <value>Returns a binary format that reads a text value.  The {0} specifies the number of bytes to decode, or the binary format of the length that precedes the text.  The optional {1} value specifies the encoding of the text.  If the {1} is not specified, then the encoding is determined from the Unicode byte order marks.  If no byte order marks are present, then &lt;code&gt;TextEncoding.Utf8&lt;/code&gt; is used.</value>
  </data>
  <data name="BinaryFormat_Text_Example1" xml:space="preserve">
    <value>Decode two bytes as ASCII text.</value>
  </data>
  <data name="BinaryFormat_Text_Example2" xml:space="preserve">
    <value>Decode ASCII text where the length of the text in bytes appears before the text as a byte.</value>
  </data>
  <data name="BinaryFormat_Transform" xml:space="preserve">
    <value>Returns a binary format that will transform the values read by another binary format.</value>
  </data>
  <data name="BinaryFormat_Transform_Description" xml:space="preserve">
    <value>Returns a binary format that will transform the values read by another binary format.  The {0} parameter specifies the binary format that will be used to read the value.  The {1} is invoked with the value read, and returns the transformed value.</value>
  </data>
  <data name="BinaryFormat_Transform_Example1" xml:space="preserve">
    <value>Read a byte and add one to it.</value>
  </data>
  <data name="BinaryFormat_UnsignedInteger16" xml:space="preserve">
    <value>A binary format that reads a 16-bit unsigned integer.</value>
  </data>
  <data name="BinaryFormat_UnsignedInteger32" xml:space="preserve">
    <value>A binary format that reads a 32-bit unsigned integer.</value>
  </data>
  <data name="BinaryFormat_UnsignedInteger64" xml:space="preserve">
    <value>A binary format that reads a 64-bit unsigned integer.</value>
  </data>
  <data name="BinaryOccurrence_Optional" xml:space="preserve">
    <value>The item is expected to appear zero or one time in the input.</value>
  </data>
  <data name="BinaryOccurrence_Repeating" xml:space="preserve">
    <value>The item is expected to appear zero or more times in the input.</value>
  </data>
  <data name="BinaryOccurrence_Required" xml:space="preserve">
    <value>The item is expected to appear once in the input.</value>
  </data>
  <data name="BinaryOccurrence_Type" xml:space="preserve">
    <value>Specifies how many times the item is expected to appear in the group.</value>
  </data>
  <data name="Binary_ApproximateLength" xml:space="preserve">
    <value>Returns the approximate length of the binary.</value>
  </data>
  <data name="Binary_ApproximateLength_Description" xml:space="preserve">
    <value>Returns the approximate length of {0}, or an error if the data source doesn't support an approximate length.</value>
  </data>
  <data name="Binary_ApproximateLength_Example1" xml:space="preserve">
    <value>Get the approximate length of the binary value.</value>
  </data>
  <data name="Binary_Buffer" xml:space="preserve">
    <value>Buffers the binary value in memory.</value>
  </data>
  <data name="Binary_Buffer_Description" xml:space="preserve">
    <value>Buffers the binary value in memory.  The result of this call is a stable binary value, which means it will have a deterministic length and order of bytes.</value>
  </data>
  <data name="Binary_Buffer_Example1" xml:space="preserve">
    <value>Create a stable version of the binary value.</value>
  </data>
  <data name="Binary_Combine" xml:space="preserve">
    <value>Combines a list of binaries into a single binary.</value>
  </data>
  <data name="Binary_Compress" xml:space="preserve">
    <value>Compresses a binary value using the given compression type.</value>
  </data>
  <data name="Binary_Compress_Description" xml:space="preserve">
    <value>Compresses a binary value using the given compression type.  The result of this call is a compressed copy of the input. Compression types include:
  &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;Compression.GZip&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Compression.Deflate&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Binary_Compress_Example1" xml:space="preserve">
    <value>Compress the binary value.</value>
  </data>
  <data name="Binary_Decompress" xml:space="preserve">
    <value>Decompresses a binary value using the given compression type.</value>
  </data>
  <data name="Binary_Decompress_Description" xml:space="preserve">
    <value>Decompresses a binary value using the given compression type.  The result of this call is a decompressed copy of the input. Compression types include:
  &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;Compression.GZip&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Compression.Deflate&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Binary_Decompress_Example1" xml:space="preserve">
    <value>Decompress the binary value.</value>
  </data>
  <data name="Binary_End" xml:space="preserve">
    <value>Returns the end of a binary value.</value>
  </data>
  <data name="Binary_End_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a binary value corresponding to the end of {0}. The returned value is always empty (i.e. it is 0 bytes in length).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Binary.End&lt;/code&gt; can be used to append to a binary value by replacing the end of the binary value.&lt;/p&gt;</value>
  </data>
  <data name="Binary_End_Example1" xml:space="preserve">
    <value>Return the end of a binary value.</value>
  </data>
  <data name="Binary_From" xml:space="preserve">
    <value>Creates a binary from the given value</value>
  </data>
  <data name="Binary_FromList" xml:space="preserve">
    <value>Converts a list of numbers into a binary value.</value>
  </data>
  <data name="Binary_FromText" xml:space="preserve">
    <value>Decodes data from a text form into binary.</value>
  </data>
  <data name="Binary_FromText_Description" xml:space="preserve">
    <value>Returns the result of converting text value {0} to a binary (list of &lt;code&gt;number&lt;/code&gt;). {1} may be specified to indicate the encoding used in the text value.
      The following &lt;code&gt;BinaryEncoding&lt;/code&gt; values may be used for {1}.
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;BinaryEncoding.Base64&lt;/code&gt;: Base 64 encoding&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;BinaryEncoding.Hex&lt;/code&gt;: Hex encoding&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Binary_FromText_Example1" xml:space="preserve">
    <value>Decode "1011" into binary.</value>
  </data>
  <data name="Binary_FromText_Example2" xml:space="preserve">
    <value>Decode "1011" into binary with Hex encoding.</value>
  </data>
  <data name="Binary_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;binary&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Binary.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;binary&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;binary&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;binary&lt;/code&gt; value from the text representation. Refer to &lt;code&gt;Binary.FromText&lt;/code&gt; for details.&lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="Binary_From_Example1" xml:space="preserve">
    <value>Get the &lt;code&gt;binary&lt;/code&gt; value of &lt;code&gt;"1011"&lt;/code&gt;.</value>
  </data>
  <data name="Binary_InferContentType" xml:space="preserve">
    <value>Reads the binary stream and tries to determine the content type and format information of the stream.</value>
  </data>
  <data name="Binary_InferContentType_Description" xml:space="preserve">
    <value>Returns a record with field Content.Type that contains the inferred MIME-type.
    If the inferred content type is text/*, and an encoding code page is detected, then additionally returns field Content.Encoding that contains the encoding of the stream.
    If the inferred content type is text/csv, and the format is delimited, additionally returns field Csv.PotentialDelimiter containing a table for analysis of potential delimiters.
    If the inferred content type is text/csv, and the format is fixed-width, additionally returns field Csv.PotentialPositions containing a list for analysis of potential fixed width column positions.</value>
  </data>
  <data name="Binary_Length" xml:space="preserve">
    <value>Returns the number of characters.</value>
  </data>
  <data name="Binary_Range" xml:space="preserve">
    <value>Returns a subset of the binary value beginning at an offset.</value>
  </data>
  <data name="Binary_Range_Description" xml:space="preserve">
    <value>Returns a subset of the binary value beginning at the offset {0}. An optional parameter, {1}, sets the maximum length of the subset.</value>
  </data>
  <data name="Binary_Range_Example1" xml:space="preserve">
    <value>Returns a subset of the binary value starting at offset 6.</value>
  </data>
  <data name="Binary_Range_Example2" xml:space="preserve">
    <value>Returns a subset of length 2 from offset 6 of the binary value.</value>
  </data>
  <data name="Binary_Split" xml:space="preserve">
    <value>Splits the specified binary into a list of binaries using the specified page size.</value>
  </data>
  <data name="Binary_Split_Description" xml:space="preserve">
    <value>Splits {0} into a list of binaries where the first element of the output list is a binary containing the first {1} bytes from
    the source binary, the next element of the output list is a binary containing the next {1} bytes from the source binary, and so on.</value>
  </data>
  <data name="Binary_ToList" xml:space="preserve">
    <value>Converts a binary value into a list of numbers.</value>
  </data>
  <data name="Binary_ToText" xml:space="preserve">
    <value>Encodes binary data into a text form.</value>
  </data>
  <data name="Binary_ToText_Description" xml:space="preserve">
    <value>Returns the result of converting a binary list of numbers {0} into a text value. Optionally, {1} may be specified to indicate the encoding to be used in the text value produced
      The following &lt;code&gt;BinaryEncoding&lt;/code&gt; values may be used for {1}.
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;BinaryEncoding.Base64&lt;/code&gt;: Base 64 encoding&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;BinaryEncoding.Hex&lt;/code&gt;: Hex encoding&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Binary_Type" xml:space="preserve">
    <value>The type that represents all binary values.</value>
  </data>
  <data name="Binary_View" xml:space="preserve">
    <value>Creates or extends a binary with user-defined handlers for query and action operations.</value>
  </data>
  <data name="Binary_ViewError" xml:space="preserve">
    <value>Creates a modified error record which won't trigger a fallback when thrown by a handler defined on a view (via Binary.View).</value>
  </data>
  <data name="Binary_ViewError_Description" xml:space="preserve">
    <value>Creates a modified error record from {0} which won't trigger a fallback when thrown by a handler defined on a view (via Binary.View).</value>
  </data>
  <data name="Binary_ViewFunction" xml:space="preserve">
    <value>Creates a function that can be intercepted by a handler defined on a view (via Binary.View).</value>
  </data>
  <data name="Binary_ViewFunction_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates a view function based on {0} that can be handled in a view created by &lt;code&gt;Binary.View&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OnInvoke&lt;/code&gt; handler of &lt;code&gt;Binary.View&lt;/code&gt; can be used to define a handler for the view function.&lt;/p&gt;
&lt;p&gt;As with the handlers for built-in operations, if no &lt;code&gt;OnInvoke&lt;/code&gt; handler is specified, or if it does not handle the view function, or if an error is raised by the handler, {0} is applied on top of the view.&lt;/p&gt;
&lt;p&gt;Refer to the published Power Query custom connector documentation for a more complete description of &lt;code&gt;Binary.View&lt;/code&gt; and custom view functions.&lt;/p&gt;</value>
  </data>
  <data name="Binary_View_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a view of {0} where the functions specified in {1} are used in lieu of the default behavior of an operation when the operation is applied to the view.&lt;/p&gt;
&lt;p&gt;If {0} is provided, all handler functions are optional. If {0} isn't provided, the &lt;code&gt;GetStream&lt;/code&gt; handler function is required. If a handler function isn't specified for an operation, the default behavior of the operation is applied to {0} instead (except in the case of &lt;code&gt;GetExpression&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Handler functions must return a value that is semantically equivalent to the result of applying the operation against {0} (or the resulting view in the case of &lt;code&gt;GetExpression&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If a handler function raises an error, the default behavior of the operation is applied to the view.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Binary.View&lt;/code&gt; can be used to implement folding to a data source – the translation of M queries into source-specific operations (for example, to download a section of a file).&lt;/p&gt;
&lt;p&gt;Refer to the published Power Query custom connector documentation for a more complete description of &lt;code&gt;Binary.View&lt;/code&gt;.&lt;/p&gt;</value>
  </data>
  <data name="Binary_View_Example1" xml:space="preserve">
    <value>Create a basic view that doesn't require accessing the data in order to determine the length.</value>
  </data>
  <data name="BufferMode_Delayed" xml:space="preserve">
    <value>The type of the value is computed immediately but its contents aren't buffered until data is needed, at which point the entire value is immediately buffered.</value>
  </data>
  <data name="BufferMode_Eager" xml:space="preserve">
    <value>The entire value is immediately buffered in memory before continuing.</value>
  </data>
  <data name="BufferMode_Streaming" xml:space="preserve">
    <value>The type of the value is computed immediately and its contents are buffered only as they are needed by subsequent computations.</value>
  </data>
  <data name="BufferMode_Type" xml:space="preserve">
    <value>Describes the type of buffering to be performed.</value>
  </data>
  <data name="ByteOrder_BigEndian" xml:space="preserve">
    <value>A possible value for the &lt;code&gt;byteOrder&lt;/code&gt; parameter in &lt;code&gt;BinaryFormat.ByteOrder&lt;/code&gt;. The most significant byte appears first in Big Endian byte order.</value>
  </data>
  <data name="ByteOrder_LittleEndian" xml:space="preserve">
    <value>A possible value for the &lt;code&gt;byteOrder&lt;/code&gt; parameter in &lt;code&gt;BinaryFormat.ByteOrder&lt;/code&gt;. The least significant byte appears first in Little Endian byte order.</value>
  </data>
  <data name="ByteOrder_Type" xml:space="preserve">
    <value>Specifies the byte order.</value>
  </data>
  <data name="Byte_From" xml:space="preserve">
    <value>Creates an 8-bit integer from the given value.</value>
  </data>
  <data name="Byte_From_Description" xml:space="preserve">
    <value>Returns an 8-bit integer &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Byte.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;. If the given {0} is a &lt;code&gt;number&lt;/code&gt; within the range of an 8-bit integer without a fractional part, {0} is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is &lt;code&gt;RoundingMode.ToEven&lt;/code&gt;. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. Refer to &lt;code&gt;Number.Round&lt;/code&gt; for the available rounding modes. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Byte_From_Example1" xml:space="preserve">
    <value>Get the 8-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Byte_From_Example2" xml:space="preserve">
    <value>Get the 8-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4.5"&lt;/code&gt; using &lt;code&gt;RoundingMode.AwayFromZero&lt;/code&gt;.</value>
  </data>
  <data name="Byte_Type" xml:space="preserve">
    <value>The type that represents all bytes.</value>
  </data>
  <data name="CacheManager_Cache" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="CacheManager_Cache_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="CacheManager_Caches" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="CacheManager_Caches_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="CacheManager_InvokeWithCaches" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="CacheManager_InvokeWithCaches_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Cdm_Contents_Description" xml:space="preserve">
    <value>This function is unavailable because it requires .NET 4.5.</value>
  </data>
  <data name="Cdpa_Database" xml:space="preserve">
    <value>Provides access to a CDPA database.</value>
  </data>
  <data name="Cdpa_Database_Description" xml:space="preserve">
    <value>Provides access to a CDPA database.</value>
  </data>
  <data name="Character_FromNumber" xml:space="preserve">
    <value>Converts a number to a text character.</value>
  </data>
  <data name="Character_FromNumber_Description" xml:space="preserve">
    <value>Returns the character equivalent of the number.&lt;br&gt;
    &lt;br&gt;
    The provided {0} should be a 21-bit Unicode code point.</value>
  </data>
  <data name="Character_FromNumber_Example1" xml:space="preserve">
    <value>Convert a number to its equivalent character value.</value>
  </data>
  <data name="Character_FromNumber_Example2" xml:space="preserve">
    <value>Convert a character to a number and back again.</value>
  </data>
  <data name="Character_FromNumber_Example3" xml:space="preserve">
    <value>Convert the hexadecimal code point for the "grinning face" emoticon to its equivalent UTF-16 surrogate pair.</value>
  </data>
  <data name="Character_ToNumber" xml:space="preserve">
    <value>Converts a character to a number value.</value>
  </data>
  <data name="Character_ToNumber_Description" xml:space="preserve">
    <value>Returns the number equivalent of the {0}.&lt;br&gt;
    &lt;br&gt;
    The result will be the 21-bit Unicode code point represented by the provided character or surrogate pair.
  </value>
  </data>
  <data name="Character_ToNumber_Example1" xml:space="preserve">
    <value>Convert a character to its equivalent number value.</value>
  </data>
  <data name="Character_ToNumber_Example2" xml:space="preserve">
    <value>Convert the UTF-16 surrogate pair for the "grinning face" emoticon to its equivalent hexadecimal code point.</value>
  </data>
  <data name="Character_Type" xml:space="preserve">
    <value>The type that represents all characters.</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter" xml:space="preserve">
    <value>Returns a function that combines a list of text using the specified delimiter.</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Description" xml:space="preserve">
    <value>Returns a function that combines a list of text values into a single text value using the specified delimiter.</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Example1" xml:space="preserve">
    <value>Combine a list of text values using a semicolon delimiter.</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Example2" xml:space="preserve">
    <value>Combine the text of two columns using a comma delimiter and CSV-style quoting.</value>
  </data>
  <data name="Combiner_CombineTextByEachDelimiter" xml:space="preserve">
    <value>Returns a function that combines a list of text using a sequence of delimiters.</value>
  </data>
  <data name="Combiner_CombineTextByEachDelimiter_Description" xml:space="preserve">
    <value>Returns a function that combines a list of text values into a single text value using a sequence of delimiters.</value>
  </data>
  <data name="Combiner_CombineTextByEachDelimiter_Example1" xml:space="preserve">
    <value>Combine a list of text values using a sequence of delimiters.</value>
  </data>
  <data name="Combiner_CombineTextByLengths" xml:space="preserve">
    <value>Returns a function that combines a list of text using the specified lengths.</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Description" xml:space="preserve">
    <value>Returns a function that combines a list of text values into a single text value using the specified lengths.</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Example1" xml:space="preserve">
    <value>Combine a list of text values by extracting the specified numbers of characters from each input value.</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Example2" xml:space="preserve">
    <value>Combine a list of text values by extracting the specified numbers of characters, after first pre-filling the result with the template text.</value>
  </data>
  <data name="Combiner_CombineTextByPositions" xml:space="preserve">
    <value>Returns a function that combines a list of text using the specified output positions.</value>
  </data>
  <data name="Combiner_CombineTextByPositions_Description" xml:space="preserve">
    <value>Returns a function that combines a list of text values into a single text value using the specified output positions.</value>
  </data>
  <data name="Combiner_CombineTextByPositions_Example1" xml:space="preserve">
    <value>Combine a list of text values by placing them in the output at the specified positions.</value>
  </data>
  <data name="Combiner_CombineTextByRanges" xml:space="preserve">
    <value>Returns a function that combines a list of text using the specified positions and lengths.</value>
  </data>
  <data name="Combiner_CombineTextByRanges_Description" xml:space="preserve">
    <value>Returns a function that combines a list of text values into a single text value using the specified output positions and lengths. A null length indicates that the entire text value should be included.</value>
  </data>
  <data name="Combiner_CombineTextByRanges_Example1" xml:space="preserve">
    <value>Combine a list of text values using the specified output positions and lengths.</value>
  </data>
  <data name="Comparer_Equals" xml:space="preserve">
    <value>Returns a logical value based on the equality check over the two given values.</value>
  </data>
  <data name="Comparer_Equals_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;logical&lt;/code&gt; value based on the equality check over the two given values, {1} and {2}, using the provided {0}.
      &lt;div&gt;
        {0} is a &lt;code&gt;Comparer&lt;/code&gt; which is used to control the comparison.
        A comparer is a function that accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.
        Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.
      &lt;/div&gt;
      &lt;div&gt;
        The following built-in comparers are available in the formula language:
      &lt;/div&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;Comparer.Ordinal&lt;/code&gt;: Used to perform an exact ordinal comparison&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Comparer.OrdinalIgnoreCase&lt;/code&gt;: Used to perform an exact ordinal case-insensitive comparison&lt;/li&gt;
        &lt;li&gt; &lt;code&gt;Comparer.FromCulture&lt;/code&gt;: Used to perform a culture-aware comparison&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Comparer_Equals_Example1" xml:space="preserve">
    <value>Compare "1" and "A" using "en-US" locale to determine if the values are equal.</value>
  </data>
  <data name="Comparer_FromCulture" xml:space="preserve">
    <value>Returns a comparer function based on the specified culture and case-sensitivity.</value>
  </data>
  <data name="Comparer_FromCulture_Description" xml:space="preserve">
    <value>Returns a comparer function that uses the {0} and the case-sensitivity specified by {1} to perform comparisons.&lt;br&gt;
      &lt;br&gt;
      A comparer function accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.&lt;br&gt;
      &lt;br&gt;
      The default value for {1} is false. The {0} should be one of the locales supported by the .NET framework (for example, "en-US").
    </value>
  </data>
  <data name="Comparer_FromCulture_Example1" xml:space="preserve">
    <value>Compare "a" and "A" using "en-US" locale to determine if the values are equal.</value>
  </data>
  <data name="Comparer_FromCulture_Example2" xml:space="preserve">
    <value>Compare "a" and "A" using "en-US" locale ignoring the case to determine if the values are equal.</value>
  </data>
  <data name="Comparer_Ordinal" xml:space="preserve">
    <value>Returns a comparer function which uses Ordinal rules to compare values.</value>
  </data>
  <data name="Comparer_OrdinalIgnoreCase" xml:space="preserve">
    <value>Returns a case-insensitive comparer function which uses Ordinal rules to compare values.</value>
  </data>
  <data name="Comparer_OrdinalIgnoreCase_Description" xml:space="preserve">
    <value>Returns a case-insensitive comparer function which uses Ordinal rules to compare the provided values {0} and {1}.&lt;br&gt;
        &lt;br&gt;
        A comparer function accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.
    </value>
  </data>
  <data name="Comparer_OrdinalIgnoreCase_Example1" xml:space="preserve">
    <value>Using case-insensitive Ordinal rules, compare "Abc" with "abc". Note "Abc" is less than "abc" using &lt;code&gt;Comparer.Ordinal&lt;/code&gt;. </value>
  </data>
  <data name="Comparer_Ordinal_Description" xml:space="preserve">
    <value>Returns a comparer function which uses Ordinal rules to compare the provided values {0} and {1}.&lt;br&gt;
      &lt;br&gt;
      A comparer function accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.
    </value>
  </data>
  <data name="Comparer_Ordinal_Example1" xml:space="preserve">
    <value>Using Ordinal rules, compare if "encyclopædia" and "encyclopaedia" are equivalent. Note these are equivalent using &lt;code&gt;Comparer.FromCulture("en-US")&lt;/code&gt;. </value>
  </data>
  <data name="Compression_Brotli" xml:space="preserve">
    <value>The compressed data is in the 'Brotli' format.</value>
  </data>
  <data name="Compression_Deflate" xml:space="preserve">
    <value>The compressed data is in the 'Deflate' format.</value>
  </data>
  <data name="Compression_GZip" xml:space="preserve">
    <value>The compressed data is in the 'GZip' format.</value>
  </data>
  <data name="Compression_LZ4" xml:space="preserve">
    <value>The compressed data is in the 'LZ4' format.</value>
  </data>
  <data name="Compression_None" xml:space="preserve">
    <value>The data is uncompressed.</value>
  </data>
  <data name="Compression_Snappy" xml:space="preserve">
    <value>The compressed data is in the 'Snappy' format.</value>
  </data>
  <data name="Compression_Type" xml:space="preserve">
    <value>Specifies the type of compression.</value>
  </data>
  <data name="Compression_Zstandard" xml:space="preserve">
    <value>The compressed data is in the 'Zstandard' format.</value>
  </data>
  <data name="CryptoAlgorithm_Type" xml:space="preserve">
    <value>Specifies which crypto algorithm to be used.</value>
  </data>
  <data name="CsvStyle_QuoteAfterDelimiter" xml:space="preserve">
    <value>Quotes in a field are only significant immediately following the delimiter.</value>
  </data>
  <data name="CsvStyle_QuoteAlways" xml:space="preserve">
    <value>Quotes in a field are always significant regardless of where they appear.</value>
  </data>
  <data name="CsvStyle_Type" xml:space="preserve">
    <value>Specifies the significance of quotes in Csv documents.</value>
  </data>
  <data name="Csv_Document" xml:space="preserve">
    <value>Returns the contents of the CSV document as a table.</value>
  </data>
  <data name="Csv_Document_Description" xml:space="preserve">
    <value>Returns the contents of the CSV document as a table.
    &lt;ul&gt;
      &lt;li&gt;
        {1} can be null, the number of columns, a list of column names, a table type, or an options record.
      &lt;/li&gt;
      &lt;li&gt;
        {2} can be a single character, a list of characters, or the value &lt;code&gt;""&lt;/code&gt;, which indicates rows should be split by consecutive whitespace characters. Default: &lt;code&gt;","&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        Refer to &lt;code&gt;ExtraValues.Type&lt;/code&gt; for the supported values of {3}.
      &lt;/li&gt;
      &lt;li&gt;
        {4} specifies the text encoding type.
      &lt;/li&gt;
    &lt;/ul&gt;

    If a record is specified for {1} (and {2}, {3}, and {4} are null), the following record fields may be provided:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;code&gt;Delimiter&lt;/code&gt;: A single character column delimiter. Default: &lt;code&gt;","&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;code&gt;Columns&lt;/code&gt;: Can be null, the number of columns, a list of column names, or a table type. If the number of columns is lower than the number found in the input, the additional columns will be ignored. If the number of columns is higher than the number found in the input, the additional columns will be null. When not specified, the number of columns will be determined by what is found in the input.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;code&gt;Encoding&lt;/code&gt;: The text encoding of the file. Default: 65001 (UTF-8).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;code&gt;CsvStyle&lt;/code&gt;: Specifies how quotes are handled.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;CsvStyle.QuoteAfterDelimiter&lt;/code&gt; (default): Quotes in a field are only significant immediately following the delimiter.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;CsvStyle.QuoteAlways&lt;/code&gt;: Quotes in a field are always significant, regardless of where they appear.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;code&gt;QuoteStyle&lt;/code&gt;: Specifies how quoted line breaks are handled.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;QuoteStyle.Csv&lt;/code&gt; (default): Quoted line breaks are treated as part of the data, not as the end of the current row.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;QuoteStyle.None&lt;/code&gt;: All line breaks are treated as the end of the current row, even when they occur inside a quoted value.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  </value>
  </data>
  <data name="Csv_Document_Example1" xml:space="preserve">
    <value>Process CSV text with column headers.</value>
  </data>
  <data name="Csv_Document_Example2" xml:space="preserve">
    <value />
  </data>
  <data name="Cube_AddAndExpandDimensionColumn" xml:space="preserve">
    <value>Merges the specified dimension table into the cube’s filter context and changes the dimensional granularity of the filter context by expanding the specified set of dimension attributes.</value>
  </data>
  <data name="Cube_AddAndExpandDimensionColumn_Description" xml:space="preserve">
    <value>Merges the specified dimension table, {1}, into the cube’s, {0}, filter context and changes the dimensional granularity by expanding the specified set, {2}, of dimension attributes. The dimension attributes are added to the tabular view with columns named {3}, or {2} if not specified.</value>
  </data>
  <data name="Cube_AddMeasureColumn" xml:space="preserve">
    <value>Adds a column to the cube that contains the results of the measure applied in the row context of each row.</value>
  </data>
  <data name="Cube_AddMeasureColumn_Description" xml:space="preserve">
    <value>Adds a column with the name {1} to the {0} that contains the results of the measure {2} applied in the row context of each row. Measure application is affected by changes to dimension granularity and slicing. Measure values will be adjusted after certain cube operations are performed.</value>
  </data>
  <data name="Cube_ApplyParameter" xml:space="preserve">
    <value>Returns a cube after applying a parameter to it.</value>
  </data>
  <data name="Cube_ApplyParameter_Description" xml:space="preserve">
    <value>Returns a cube after applying {1} with {2} to {0}.</value>
  </data>
  <data name="Cube_AttributeMemberId" xml:space="preserve">
    <value>Returns the unique member identifier from members property value.</value>
  </data>
  <data name="Cube_AttributeMemberId_Description" xml:space="preserve">
    <value>Returns the unique member identifier from a member property value. {0}. Returns null for any other values.</value>
  </data>
  <data name="Cube_AttributeMemberProperty" xml:space="preserve">
    <value>Returns a property of a dimension attribute.</value>
  </data>
  <data name="Cube_AttributeMemberProperty_Description" xml:space="preserve">
    <value>Returns the property {1} of dimension attribute {0}.</value>
  </data>
  <data name="Cube_CollapseAndRemoveColumns" xml:space="preserve">
    <value>Changes the dimensional granularity of the filter context for the cube by collapsing the attributes mapped to the specified columns.</value>
  </data>
  <data name="Cube_CollapseAndRemoveColumns_Description" xml:space="preserve">
    <value>Changes the dimensional granularity of the filter context for the {0} by collapsing the attributes mapped to the specified columns {1}. The columns are also removed from the tabular view of the cube.</value>
  </data>
  <data name="Cube_Dimensions" xml:space="preserve">
    <value>Returns a table containing the set of available dimensions.</value>
  </data>
  <data name="Cube_Dimensions_Description" xml:space="preserve">
    <value>Returns a table containing the set of available dimensions within the {0}. Each dimension is a table containing a set of dimension attributes and each dimension attribute is represented as a column in the dimension table. Dimensions can be expanded in the cube using Cube.AddAndExpandDimensionColumn. </value>
  </data>
  <data name="Cube_DisplayFolders" xml:space="preserve">
    <value>Returns a nested tree of tables representing the display folder hierarchy of the objects (for example, dimensions and measures).</value>
  </data>
  <data name="Cube_DisplayFolders_Description" xml:space="preserve">
    <value>Returns a nested tree of tables representing the display folder hierarchy of the objects (for example, dimensions and measures) available for use in the {0}.</value>
  </data>
  <data name="Cube_MeasureProperties" xml:space="preserve">
    <value>Returns a table containing the set of available measure properties that are expanded in the cube.</value>
  </data>
  <data name="Cube_MeasureProperties_Description" xml:space="preserve">
    <value>Returns a table containing the set of available properties for measures that are expanded in the cube.</value>
  </data>
  <data name="Cube_MeasureProperty" xml:space="preserve">
    <value>Returns a property of a measure (cell property).</value>
  </data>
  <data name="Cube_MeasureProperty_Description" xml:space="preserve">
    <value>Returns the property {1} of measure {0}.</value>
  </data>
  <data name="Cube_Measures" xml:space="preserve">
    <value>Returns a table containing the set of available measures.</value>
  </data>
  <data name="Cube_Measures_Description" xml:space="preserve">
    <value>Returns a table containing the set of available measures within the {0}.
    Each measure is represented as a function. Measures can be applied to the cube using Cube.AddMeasureColumn.</value>
  </data>
  <data name="Cube_Parameters" xml:space="preserve">
    <value>Returns a table containing the set of parameters that can be applied to the cube.</value>
  </data>
  <data name="Cube_Parameters_Description" xml:space="preserve">
    <value>Returns a table containing the set of parameters that can be applied to {0}. Each parameter is a function that can be invoked to get {0} with the parameter and its arguments applied.</value>
  </data>
  <data name="Cube_Properties" xml:space="preserve">
    <value>Returns a table containing the set of available properties for dimensions that are expanded in the cube.</value>
  </data>
  <data name="Cube_Properties_Description" xml:space="preserve">
    <value>Returns a table containing the set of available properties for dimensions that are expanded in the cube.</value>
  </data>
  <data name="Cube_PropertyKey" xml:space="preserve">
    <value>Returns the key of a property.</value>
  </data>
  <data name="Cube_PropertyKey_Description" xml:space="preserve">
    <value>Returns the key of property {0}.</value>
  </data>
  <data name="Cube_ReplaceDimensions" xml:space="preserve">
    <value>Replaces the set of dimensions returned by Cube.Dimensions.</value>
  </data>
  <data name="Cube_ReplaceDimensions_Description" xml:space="preserve">
    <value>Replaces the set of dimensions returned by &lt;code&gt;Cube.Dimensions&lt;/code&gt;.
    For example, this function can be used to add an ID column to a dimension attribute, so that the data source can group on the ID rather than the displayed value.</value>
  </data>
  <data name="Cube_Transform" xml:space="preserve">
    <value>Applies a list of cube functions.</value>
  </data>
  <data name="Cube_Transform_Description" xml:space="preserve">
    <value>Applies the list cube functions, {1}, on the {0}.</value>
  </data>
  <data name="Culture_Current" xml:space="preserve">
    <value>Returns the name of the current culture for the application.</value>
  </data>
  <data name="Currency_From" xml:space="preserve">
    <value>Returns a currency value from the given value.</value>
  </data>
  <data name="Currency_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;currency&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Currency.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of currency, fractional part of the {0} is rounded to 4 decimal digits and returned. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. Valid range for currency is &lt;code&gt;-922,337,203,685,477.5808&lt;/code&gt; to &lt;code&gt;922,337,203,685,477.5807&lt;/code&gt;. Refer to &lt;code&gt;Number.Round&lt;/code&gt; for the available rounding modes. The default is &lt;code&gt;RoundingMode.ToEven&lt;/code&gt;. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Currency_From_Example1" xml:space="preserve">
    <value>Get the &lt;code&gt;currency&lt;/code&gt; value of &lt;code&gt;"1.23455"&lt;/code&gt;.</value>
  </data>
  <data name="Currency_From_Example2" xml:space="preserve">
    <value>Get the &lt;code&gt;currency&lt;/code&gt; value of &lt;code&gt;"1.23455"&lt;/code&gt; using &lt;code&gt;RoundingMode.Down&lt;/code&gt;.</value>
  </data>
  <data name="Currency_Type" xml:space="preserve">
    <value>The type that represents currency value.</value>
  </data>
  <data name="DB2_Database" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in a Db2 database.</value>
  </data>
  <data name="DB2_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in a Db2 database on server {0} in the database instance named {1}. The port may be optionally specified with the server, separated by a colon. An optional record parameter, {2}, may be specified to control the following options:
    {2:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="DataSource_TestConnection" xml:space="preserve">
    <value>Returns whether a connection to a datasource can be established and credentials are correct.</value>
  </data>
  <data name="DataSource_TestConnection_Description" xml:space="preserve">
    <value>Returns true if a connection to {0}'s data source can be established or an error otherwise.
Will not run or demand permissions for user native queries when {0} is a direct data source function invocation.
In general, checks the connection of a table, record, list, or binary value by reading the first value.</value>
  </data>
  <data name="DateTimeZone_FixedLocalNow" xml:space="preserve">
    <value>Returns the current date &amp; time in the local timezone. This value is fixed and will not change with successive calls.</value>
  </data>
  <data name="DateTimeZone_FixedLocalNow_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;datetime&lt;/code&gt; value set to the current date and time on the system. The returned value contains timezone information representing the local timezone. This value is fixed and will not change with successive calls, unlike DateTimeZone.LocalNow, which may return different values over the course of execution of an expression.</value>
  </data>
  <data name="DateTimeZone_FixedUtcNow" xml:space="preserve">
    <value>Returns the current date and time in UTC (the GMT timezone). This value is fixed and will not change with successive calls.</value>
  </data>
  <data name="DateTimeZone_From" xml:space="preserve">
    <value>Creates a datetimezone from the given value.</value>
  </data>
  <data name="DateTimeZone_FromFileTime" xml:space="preserve">
    <value>Creates a datetimezone from a 64 bits long number.</value>
  </data>
  <data name="DateTimeZone_FromFileTime_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;datetimezone&lt;/code&gt; value from the {0} value and converts it to the local time zone. The filetime is a Windows file time value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
    </value>
  </data>
  <data name="DateTimeZone_FromFileTime_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;129876402529842245&lt;/code&gt; into a datetimezone value.</value>
  </data>
  <data name="DateTimeZone_FromText" xml:space="preserve">
    <value>Creates a datetimezone from local, universal, and custom datetimezone formats.</value>
  </data>
  <data name="DateTimeZone_FromText_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;datetimezone&lt;/code&gt; value from a textual representation, {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in parsing the date using a best effort.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"Jan", "Feb", "Mar", ...&lt;/code&gt;, while in &lt;code&gt;"ru-RU"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"янв", "фев", "мар", ...&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} may also be a text value. This has the same behavior as if {1}&lt;code&gt; = [Format = null, Culture = {1}]&lt;/code&gt;.</value>
  </data>
  <data name="DateTimeZone_FromText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;"2010-12-31T01:30:00-08:00"&lt;/code&gt; into a &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="DateTimeZone_FromText_Example2" xml:space="preserve">
    <value>Convert using a custom format and the German culture.</value>
  </data>
  <data name="DateTimeZone_FromText_Example3" xml:space="preserve">
    <value>Convert using ISO 8601.</value>
  </data>
  <data name="DateTimeZone_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;datetimezone&lt;/code&gt; value from the given {0}. An optional {1} may also be provided (for example, "en-US").
If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;DateTimeZone.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;. If the given {0} is &lt;code&gt;datetimezone&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;datetimezone&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;datetimezone&lt;/code&gt; value from textual representation. Refer to &lt;code&gt;DateTimeZone.FromText&lt;/code&gt; for details.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;date&lt;/code&gt;: A &lt;code&gt;datetimezone&lt;/code&gt; with {0} as the date component, &lt;code&gt;12:00:00 AM&lt;/code&gt; as the time component, and the offset corresponding the local time zone.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;: A &lt;code&gt;datetimezone&lt;/code&gt; with {0} as the datetime and the offset corresponding the local time zone.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;time&lt;/code&gt;: A &lt;code&gt;datetimezone&lt;/code&gt; with the date equivalent of the OLE Automation Date of &lt;code&gt;0&lt;/code&gt; as the date component, {0} as the time component, and the offset corresponding the local time zone.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;number&lt;/code&gt;: A &lt;code&gt;datetimezone&lt;/code&gt; with the datetime equivalent of the OLE Automation Date expressed by {0} and the offset corresponding the local time zone.&lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="DateTimeZone_From_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;"2020-10-30T01:30:00-08:00"&lt;/code&gt; to a &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="DateTimeZone_LocalNow" xml:space="preserve">
    <value>Returns the current date &amp; time in the local timezone.</value>
  </data>
  <data name="DateTimeZone_LocalNow_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;datetimezone&lt;/code&gt; value set to the current date and time on the system.
    The returned value contains timezone information representing the local timezone.</value>
  </data>
  <data name="DateTimeZone_RemoveZone" xml:space="preserve">
    <value>Removes timezone information from the given datetimezone value.</value>
  </data>
  <data name="DateTimeZone_RemoveZone_Description" xml:space="preserve">
    <value>Returns a #datetime value from {0} with timezone information removed.</value>
  </data>
  <data name="DateTimeZone_RemoveZone_Example1" xml:space="preserve">
    <value>Remove timezone information from the value  #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).</value>
  </data>
  <data name="DateTimeZone_SwitchZone" xml:space="preserve">
    <value>Changes the timezone of the value.</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Description" xml:space="preserve">
    <value>Changes timezone information to on the datetimezone value {0} to the new timezone information provided by {1} and optionally {2}.
    If {0} does not have a timezone component, an exception is thrown.</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Example1" xml:space="preserve">
    <value>Change timezone information for #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) to 8 hours.</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Example2" xml:space="preserve">
    <value>Change timezone information for #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) to -30 minutes.</value>
  </data>
  <data name="DateTimeZone_ToLocal" xml:space="preserve">
    <value>Converts the timezone component to the local timezone.</value>
  </data>
  <data name="DateTimeZone_ToLocal_Description" xml:space="preserve">
    <value>Changes timezone information of the datetimezone value {0} to the local timezone information.
    If {0} does not have a timezone component, the local timezone information is added.</value>
  </data>
  <data name="DateTimeZone_ToLocal_Example1" xml:space="preserve">
    <value>Change timezone information for #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) to local timezone (assuming PST).</value>
  </data>
  <data name="DateTimeZone_ToRecord" xml:space="preserve">
    <value>Returns a record containing the datetimezone value's parts.</value>
  </data>
  <data name="DateTimeZone_ToRecord_Description" xml:space="preserve">
    <value>Returns a record containing the parts of the given datetimezone value, {0}.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;datetimezone&lt;/code&gt; value for from which the record of its parts is to be calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTimeZone_ToRecord_Example1" xml:space="preserve">
    <value>Convert the &lt;code&gt;#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)&lt;/code&gt; value into a record containing Date, Time, and Zone values.</value>
  </data>
  <data name="DateTimeZone_ToText" xml:space="preserve">
    <value>Returns a textual representation of the datetimezone value.</value>
  </data>
  <data name="DateTimeZone_ToText_Description" xml:space="preserve">
    <value>Returns a textual representation of {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. {2} is only used for legacy workflows. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in formatting the date using the default defined by &lt;code&gt;Culture&lt;/code&gt;.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"Jan", "Feb", "Mar", ...&lt;/code&gt;, while in &lt;code&gt;"ru-RU"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"янв", "фев", "мар", ...&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} and {2} may also be text values. This has the same behavior as if {1}&lt;code&gt; = [Format = {1}, Culture = {2}]&lt;/code&gt;.</value>
  </data>
  <data name="DateTimeZone_ToText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)&lt;/code&gt; into a &lt;code&gt;text&lt;/code&gt; value. &lt;i&gt;Result output may vary depending on current culture.&lt;/i&gt;</value>
  </data>
  <data name="DateTimeZone_ToText_Example2" xml:space="preserve">
    <value>Convert using a custom format and the German culture.</value>
  </data>
  <data name="DateTimeZone_ToText_Example3" xml:space="preserve">
    <value>Convert using the ISO 8601 pattern.</value>
  </data>
  <data name="DateTimeZone_ToUtc" xml:space="preserve">
    <value>Converts the timezone component to UTC timezone.</value>
  </data>
  <data name="DateTimeZone_ToUtc_Description" xml:space="preserve">
    <value>Changes timezone information of the datetime value {0} to the UTC or Universal Time timezone information.
    If {0} does not have a timezone component, the UTC timezone information is added.</value>
  </data>
  <data name="DateTimeZone_ToUtc_Example1" xml:space="preserve">
    <value>Change timezone information for #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) to UTC timezone.</value>
  </data>
  <data name="DateTimeZone_Type" xml:space="preserve">
    <value>The type that represents all date and time values relative to a timezone.</value>
  </data>
  <data name="DateTimeZone_UtcNow" xml:space="preserve">
    <value>Returns the current date and time in UTC (the GMT timezone).</value>
  </data>
  <data name="DateTimeZone_UtcNow_Example1" xml:space="preserve">
    <value>Get the current date &amp; time in UTC.</value>
  </data>
  <data name="DateTimeZone_ZoneHours" xml:space="preserve">
    <value>Changes the timezone of the value.</value>
  </data>
  <data name="DateTimeZone_ZoneMinutes" xml:space="preserve">
    <value>Changes the timezone of the value.</value>
  </data>
  <data name="DateTime_AddZone" xml:space="preserve">
    <value>Adds timezone information to the datetime value.</value>
  </data>
  <data name="DateTime_AddZone_Description" xml:space="preserve">
    <value>Adds timezone information to the {0} value. The timezone information includes {1} and optionally {2}, which specify the desired offset from UTC time.</value>
  </data>
  <data name="DateTime_AddZone_Example1" xml:space="preserve">
    <value>Set the timezone to UTC+7:30 (7 hours and 30 minutes past UTC).</value>
  </data>
  <data name="DateTime_Date" xml:space="preserve">
    <value>Returns the date component of the given date, datetime, or datetimezone value.</value>
  </data>
  <data name="DateTime_Date_Description" xml:space="preserve">
    <value>Returns the date component of the {0} parameter if the parameter is a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value, or &lt;code&gt;null&lt;/code&gt; if the parameter is &lt;code&gt;null&lt;/code&gt;.</value>
  </data>
  <data name="DateTime_Date_Example1" xml:space="preserve">
    <value>Find date value of #datetime(2010, 12, 31, 11, 56, 02).</value>
  </data>
  <data name="DateTime_FixedLocalNow" xml:space="preserve">
    <value>Returns the current date and time in the local timezone. This value is fixed and will not change with successive calls.</value>
  </data>
  <data name="DateTime_FixedLocalNow_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;datetime&lt;/code&gt; value set to the current date and time on the system. This value is fixed and will not change with successive calls, unlike DateTime.LocalNow, which may return different values over the course of execution of an expression.</value>
  </data>
  <data name="DateTime_From" xml:space="preserve">
    <value>Creates a datetime from the given value.</value>
  </data>
  <data name="DateTime_FromFileTime" xml:space="preserve">
    <value>Creates a datetime from a 64 bits long number.</value>
  </data>
  <data name="DateTime_FromFileTime_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;datetime&lt;/code&gt; value from the {0} value and converts it to the local time zone. The filetime is a Windows file time value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).
</value>
  </data>
  <data name="DateTime_FromFileTime_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;129876402529842245&lt;/code&gt; into a datetime value.</value>
  </data>
  <data name="DateTime_FromText" xml:space="preserve">
    <value>Creates a datetimezone from local and universal datetime formats.</value>
  </data>
  <data name="DateTime_FromText_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;datetime&lt;/code&gt; value from a textual representation, {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in parsing the date using a best effort.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"Jan", "Feb", "Mar", ...&lt;/code&gt;, while in &lt;code&gt;"ru-RU"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"янв", "фев", "мар", ...&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} may also be a text value. This has the same behavior as if {1}&lt;code&gt; = [Format = null, Culture = {1}]&lt;/code&gt;.</value>
  </data>
  <data name="DateTime_FromText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;"2010-12-31T01:30:00"&lt;/code&gt; into a datetime value.</value>
  </data>
  <data name="DateTime_FromText_Example2" xml:space="preserve">
    <value>Convert &lt;code&gt;"2010-12-31T01:30:00.121212"&lt;/code&gt; into a datetime value.</value>
  </data>
  <data name="DateTime_FromText_Example3" xml:space="preserve">
    <value>Convert &lt;code&gt;"2010-12-31T01:30:00"&lt;/code&gt; into a datetime value.</value>
  </data>
  <data name="DateTime_FromText_Example4" xml:space="preserve">
    <value>Convert &lt;code&gt;"20101231T013000"&lt;/code&gt; into a datetime value.</value>
  </data>
  <data name="DateTime_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;datetime&lt;/code&gt; value from the given {0}. An optional {1} may also be provided (for example, "en-US").
If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;DateTime.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;. If the given {0} is &lt;code&gt;datetime&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;datetime&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;datetime&lt;/code&gt; value from textual representation. Refer to &lt;code&gt;DateTime.FromText&lt;/code&gt; for details.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;date&lt;/code&gt;: A &lt;code&gt;datetime&lt;/code&gt; with {0} as the date component and &lt;code&gt;12:00:00 AM&lt;/code&gt; as the time component.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetimezone&lt;/code&gt;: The local &lt;code&gt;datetime&lt;/code&gt; equivalent of {0}.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;time&lt;/code&gt;: A &lt;code&gt;datetime&lt;/code&gt; with the date equivalent of the OLE Automation Date of &lt;code&gt;0&lt;/code&gt; as the date component and {0} as the time component.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;number&lt;/code&gt;: A &lt;code&gt;datetime&lt;/code&gt; equivalent of the OLE Automation Date expressed by {0}. &lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="DateTime_From_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;#time(06, 45, 12)&lt;/code&gt; to a &lt;code&gt;datetime&lt;/code&gt; value.</value>
  </data>
  <data name="DateTime_From_Example2" xml:space="preserve">
    <value>Convert &lt;code&gt;#date(1975, 4, 4)&lt;/code&gt; to a &lt;code&gt;datetime&lt;/code&gt; value.</value>
  </data>
  <data name="DateTime_IsInCurrentHour" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the current hour, as determined by the current date and time on the system.</value>
  </data>
  <data name="DateTime_IsInCurrentHour_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current hour, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInCurrentHour_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current hour.</value>
  </data>
  <data name="DateTime_IsInCurrentMinute" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the current minute, as determined by the current date and time on the system.</value>
  </data>
  <data name="DateTime_IsInCurrentMinute_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current minute, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInCurrentMinute_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current minute.</value>
  </data>
  <data name="DateTime_IsInCurrentSecond" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the current second, as determined by the current date and time on the system.</value>
  </data>
  <data name="DateTime_IsInCurrentSecond_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current second, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInCurrentSecond_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current second.</value>
  </data>
  <data name="DateTime_IsInNextHour" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the next hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.</value>
  </data>
  <data name="DateTime_IsInNextHour_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInNextHour_Example1" xml:space="preserve">
    <value>Determine if the hour after the current system time is in the next hour.</value>
  </data>
  <data name="DateTime_IsInNextMinute" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the next minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.</value>
  </data>
  <data name="DateTime_IsInNextMinute_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInNextMinute_Example1" xml:space="preserve">
    <value>Determine if the minute after the current system time is in the next minute.</value>
  </data>
  <data name="DateTime_IsInNextNHours" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the next number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.</value>
  </data>
  <data name="DateTime_IsInNextNHours_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of hours.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInNextNHours_Example1" xml:space="preserve">
    <value>Determine if the hour after the current system time is in the next two hours.</value>
  </data>
  <data name="DateTime_IsInNextNMinutes" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the next number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.</value>
  </data>
  <data name="DateTime_IsInNextNMinutes_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of minutes.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInNextNMinutes_Example1" xml:space="preserve">
    <value>Determine if the minute after the current system time is in the next two minutes.</value>
  </data>
  <data name="DateTime_IsInNextNSeconds" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the next number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.</value>
  </data>
  <data name="DateTime_IsInNextNSeconds_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of seconds.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInNextNSeconds_Example1" xml:space="preserve">
    <value>Determine if the second after the current system time is in the next two seconds.</value>
  </data>
  <data name="DateTime_IsInNextSecond" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the next second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.</value>
  </data>
  <data name="DateTime_IsInNextSecond_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInNextSecond_Example1" xml:space="preserve">
    <value>Determine if the second after the current system time is in the next second.</value>
  </data>
  <data name="DateTime_IsInPreviousHour" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the previous hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.</value>
  </data>
  <data name="DateTime_IsInPreviousHour_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInPreviousHour_Example1" xml:space="preserve">
    <value>Determine if the hour before the current system time is in the previous hour.</value>
  </data>
  <data name="DateTime_IsInPreviousMinute" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the previous minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.</value>
  </data>
  <data name="DateTime_IsInPreviousMinute_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInPreviousMinute_Example1" xml:space="preserve">
    <value>Determine if the minute before the current system time is in the previous minute.</value>
  </data>
  <data name="DateTime_IsInPreviousNHours" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the previous number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.</value>
  </data>
  <data name="DateTime_IsInPreviousNHours_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of hours.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInPreviousNHours_Example1" xml:space="preserve">
    <value>Determine if the hour before the current system time is in the previous two hours.</value>
  </data>
  <data name="DateTime_IsInPreviousNMinutes" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the previous number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.</value>
  </data>
  <data name="DateTime_IsInPreviousNMinutes_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of minutes.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInPreviousNMinutes_Example1" xml:space="preserve">
    <value>Determine if the minute before the current system time is in the previous two minutes.</value>
  </data>
  <data name="DateTime_IsInPreviousNSeconds" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the previous number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.</value>
  </data>
  <data name="DateTime_IsInPreviousNSeconds_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of seconds.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInPreviousNSeconds_Example1" xml:space="preserve">
    <value>Determine if the second before the current system time is in the previous two seconds.</value>
  </data>
  <data name="DateTime_IsInPreviousSecond" xml:space="preserve">
    <value>Indicates whether this datetime occurs during the previous second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.</value>
  </data>
  <data name="DateTime_IsInPreviousSecond_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_IsInPreviousSecond_Example1" xml:space="preserve">
    <value>Determine if the second before the current system time is in the previous second.</value>
  </data>
  <data name="DateTime_LocalNow" xml:space="preserve">
    <value>Returns the current date and time in the local timezone.</value>
  </data>
  <data name="DateTime_LocalNow_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;datetime&lt;/code&gt; value set to the current date and time on the system.</value>
  </data>
  <data name="DateTime_Time" xml:space="preserve">
    <value>Returns the time part of the given datetime value.</value>
  </data>
  <data name="DateTime_Time_Description" xml:space="preserve">
    <value>Returns the time part of the given datetime value, {0}.</value>
  </data>
  <data name="DateTime_Time_Example1" xml:space="preserve">
    <value>Find the time value of #datetime(2010, 12, 31, 11, 56, 02).</value>
  </data>
  <data name="DateTime_ToRecord" xml:space="preserve">
    <value>Returns a record containing the datetime value's parts.</value>
  </data>
  <data name="DateTime_ToRecord_Description" xml:space="preserve">
    <value>Returns a record containing the parts of the given datetime value, {0}.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt; value for from which the record of its parts is to be calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="DateTime_ToRecord_Example1" xml:space="preserve">
    <value>Convert the &lt;code&gt;#datetime(2011, 12, 31, 11, 56, 2)&lt;/code&gt; value into a record containing Date and Time values.</value>
  </data>
  <data name="DateTime_ToText" xml:space="preserve">
    <value>Returns a textual representation of the datetime value.</value>
  </data>
  <data name="DateTime_ToText_Description" xml:space="preserve">
    <value>Returns a textual representation of {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. {2} is only used for legacy workflows. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in formatting the date using the default defined by &lt;code&gt;Culture&lt;/code&gt;.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"Jan", "Feb", "Mar", ...&lt;/code&gt;, while in &lt;code&gt;"ru-RU"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"янв", "фев", "мар", ...&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} and {2} may also be text values. This has the same behavior as if {1}&lt;code&gt; = [Format = {1}, Culture = {2}]&lt;/code&gt;.</value>
  </data>
  <data name="DateTime_ToText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;#datetime(2010, 12, 31, 01, 30, 25)&lt;/code&gt; into a &lt;code&gt;text&lt;/code&gt; value. &lt;i&gt;Result output may vary depending on current culture.&lt;/i&gt;</value>
  </data>
  <data name="DateTime_ToText_Example2" xml:space="preserve">
    <value>Convert using a custom format and the German culture.</value>
  </data>
  <data name="DateTime_ToText_Example3" xml:space="preserve">
    <value>Convert using the ISO 8601 pattern.</value>
  </data>
  <data name="DateTime_Type" xml:space="preserve">
    <value>The type that represents all date and time values without an associated timezone.</value>
  </data>
  <data name="Date_AddDays" xml:space="preserve">
    <value>Adds the specified days to the date.</value>
  </data>
  <data name="Date_AddDays_Description" xml:space="preserve">
    <value>Returns the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; result from adding {1} days to the &lt;code&gt;datetime&lt;/code&gt; value {0}.
      &lt;ul&gt;
      &lt;li&gt;{0}: The &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to which days are being added.&lt;/li&gt;
      &lt;li&gt;{1}: The number of days to add.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_AddDays_Example1" xml:space="preserve">
    <value>Add 5 days to the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date 5/14/2011.</value>
  </data>
  <data name="Date_AddMonths" xml:space="preserve">
    <value>Adds the specified months to the date.</value>
  </data>
  <data name="Date_AddMonths_Description" xml:space="preserve">
    <value>Returns the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; result from adding {1} months to the &lt;code&gt;datetime&lt;/code&gt; value {0}.
      &lt;ul&gt;
        &lt;li&gt;{0}: The &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to which months are being added.&lt;/li&gt;
        &lt;li&gt;{1}: The number of months to add.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_AddMonths_Example1" xml:space="preserve">
    <value>Add 5 months to the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date 5/14/2011.</value>
  </data>
  <data name="Date_AddMonths_Example2" xml:space="preserve">
    <value>Add 18 months to the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date and time of 5/14/2011 08:15:22 AM.</value>
  </data>
  <data name="Date_AddQuarters" xml:space="preserve">
    <value>Adds the specified quarters to the date.</value>
  </data>
  <data name="Date_AddQuarters_Description" xml:space="preserve">
    <value>Returns the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; result from adding {1} quarters to the &lt;code&gt;datetime&lt;/code&gt; value {0}.
      &lt;ul&gt;
      &lt;li&gt;{0}: The &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to which quarters are being added.&lt;/li&gt;
      &lt;li&gt;{1}: The number of quarters to add.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_AddQuarters_Example1" xml:space="preserve">
    <value>Add 1 quarter to the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date 5/14/2011.</value>
  </data>
  <data name="Date_AddWeeks" xml:space="preserve">
    <value>Adds the specified weeks to the date.</value>
  </data>
  <data name="Date_AddWeeks_Description" xml:space="preserve">
    <value>Returns the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; result from adding {1} weeks to the &lt;code&gt;datetime&lt;/code&gt; value {0}.
      &lt;ul&gt;
      &lt;li&gt;{0}: The &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to which weeks are being added.&lt;/li&gt;
      &lt;li&gt;{1}: The number of weeks to add.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_AddWeeks_Example1" xml:space="preserve">
    <value>Add 2 weeks to the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date 5/14/2011.</value>
  </data>
  <data name="Date_AddYears" xml:space="preserve">
    <value>Adds the specified years to the date.</value>
  </data>
  <data name="Date_AddYears_Description" xml:space="preserve">
    <value>Returns the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; result of adding {1} to a &lt;code&gt;datetime&lt;/code&gt; value {0}.
      &lt;ul&gt;
        &lt;li&gt;{0}: The &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to which years are added.&lt;/li&gt;
        &lt;li&gt;{1}: The number of years to add.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_AddYears_Example1" xml:space="preserve">
    <value>Add 4 years to the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date 5/14/2011.</value>
  </data>
  <data name="Date_AddYears_Example2" xml:space="preserve">
    <value>Add 10 years to the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date and time of 5/14/2011 08:15:22 AM.</value>
  </data>
  <data name="Date_Day" xml:space="preserve">
    <value>Returns the day component.</value>
  </data>
  <data name="Date_DayOfWeek" xml:space="preserve">
    <value>Returns a number (from 0 to 6) indicating the day of the week of the provided value.</value>
  </data>
  <data name="Date_DayOfWeekName" xml:space="preserve">
    <value>Returns the day of the week name.</value>
  </data>
  <data name="Date_DayOfWeekName_Description" xml:space="preserve">
    <value>Returns the day of the week name for the provided {0}. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Date_DayOfWeekName_Example1" xml:space="preserve">
    <value>Get the day of the week name.</value>
  </data>
  <data name="Date_DayOfWeek_Description" xml:space="preserve">
    <value>Returns a number (from 0 to 6) indicating the day of the week of the provided {0}.
  &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value.&lt;/li&gt;
        &lt;li&gt;{1}: A &lt;code&gt;Day&lt;/code&gt; value indicating which day should be considered the first day of the week. Allowed values are Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, or Day.Saturday. If unspecified, a culture-dependent default is used.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_DayOfWeek_Example1" xml:space="preserve">
    <value>Get the day of the week represented by Monday, February 21st, 2011, treating Sunday as the first day of the week.</value>
  </data>
  <data name="Date_DayOfWeek_Example2" xml:space="preserve">
    <value>Get the day of the week represented by Monday, February 21st, 2011, treating Monday as the first day of the week.</value>
  </data>
  <data name="Date_DayOfYear" xml:space="preserve">
    <value>Returns a number from 1 to 366 representing the day of the year.</value>
  </data>
  <data name="Date_DayOfYear_Description" xml:space="preserve">
    <value>Returns a number representing the day of the year in the provided &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value, {0}.</value>
  </data>
  <data name="Date_DayOfYear_Example1" xml:space="preserve">
    <value>The day of the year for March 1st, 2011.</value>
  </data>
  <data name="Date_Day_Description" xml:space="preserve">
    <value>Returns the day component of a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value.
      &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value from which the day component is extracted.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_Day_Example1" xml:space="preserve">
    <value>Get the day component of a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value representing the date and time of 5/14/2011 05:00:00 PM.</value>
  </data>
  <data name="Date_DaysInMonth" xml:space="preserve">
    <value>Returns a number from 28 to 31 indicating the number of days in the month.</value>
  </data>
  <data name="Date_DaysInMonth_Description" xml:space="preserve">
    <value>Returns the number of days in the month in the &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value {0}.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value for which the number of days in the month is returned.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_DaysInMonth_Example1" xml:space="preserve">
    <value>Number of days in the month December as represented by &lt;code&gt;#date(2011, 12, 01)&gt;&lt;/code&gt;.</value>
  </data>
  <data name="Date_EndOfDay" xml:space="preserve">
    <value>Returns the end of the day.</value>
  </data>
  <data name="Date_EndOfDay_Description" xml:space="preserve">
    <value>Returns the end of the day represented by {0}. Time zone information is preserved.
      &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value from from which the end of the day is calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_EndOfDay_Example1" xml:space="preserve">
    <value>Get the end of the day for 5/14/2011 05:00:00 PM.</value>
  </data>
  <data name="Date_EndOfDay_Example2" xml:space="preserve">
    <value>Get the end of the day for 5/17/2011 05:00:00 PM -7:00.</value>
  </data>
  <data name="Date_EndOfMonth" xml:space="preserve">
    <value>Returns the end of the month.</value>
  </data>
  <data name="Date_EndOfMonth_Description" xml:space="preserve">
    <value>Returns the end of the month that contains {0}.
      &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value from which the end of the month is calculated&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_EndOfMonth_Example1" xml:space="preserve">
    <value>Get the end of the month for 5/14/2011.</value>
  </data>
  <data name="Date_EndOfMonth_Example2" xml:space="preserve">
    <value>Get the end of the month for 5/17/2011 05:00:00 PM -7:00.</value>
  </data>
  <data name="Date_EndOfQuarter" xml:space="preserve">
    <value>Returns the end of the quarter.</value>
  </data>
  <data name="Date_EndOfQuarter_Description" xml:space="preserve">
    <value>Returns the end of the quarter that contains {0}. Time zone information is preserved.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value from which the end of the quarter is calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_EndOfQuarter_Example1" xml:space="preserve">
    <value>Find the end of the quarter for October 10th, 2011, 8:00AM.</value>
  </data>
  <data name="Date_EndOfWeek" xml:space="preserve">
    <value>Returns the end of the week.</value>
  </data>
  <data name="Date_EndOfWeek_Description" xml:space="preserve">
    <value>Returns the end of the week that contains {0}.
    This function takes an optional &lt;code&gt;Day&lt;/code&gt;, {1}, to set as the first day of the week for this relative calculation. The default value is &lt;code&gt;Day.Sunday&lt;/code&gt;.
      &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value from which the last day of the week is calculated&lt;/li&gt;
        &lt;li&gt;{1}: &lt;i&gt;[Optional]&lt;/i&gt; A &lt;code&gt;Day.Type&lt;/code&gt; value representing the first day of the week. Possible values are &lt;code&gt;Day.Sunday&lt;/code&gt;, &lt;code&gt;Day.Monday&lt;/code&gt;, &lt;code&gt;Day.Tuesday&lt;/code&gt;, &lt;code&gt;Day.Wednesday&lt;/code&gt;, &lt;code&gt;Day.Thursday&lt;/code&gt;, &lt;code&gt;Day.Friday&lt;/code&gt; and &lt;code&gt;Day.Saturday.&lt;/code&gt; . The default value is &lt;code&gt;Day.Sunday&lt;/code&gt;.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_EndOfWeek_Example1" xml:space="preserve">
    <value>Get the end of the week for 5/14/2011.</value>
  </data>
  <data name="Date_EndOfWeek_Example2" xml:space="preserve">
    <value>Get the end of the week for 5/17/2011 05:00:00 PM -7:00, with Sunday as the first day of the week.</value>
  </data>
  <data name="Date_EndOfYear" xml:space="preserve">
    <value>Returns the end of the year.</value>
  </data>
  <data name="Date_EndOfYear_Description" xml:space="preserve">
    <value>Returns the end of the year that contains {0}, including fractional seconds. Time zone information is preserved.
      &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value from which the end of the year is calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_EndOfYear_Example1" xml:space="preserve">
    <value>Get the end of the year for 5/14/2011 05:00:00 PM.</value>
  </data>
  <data name="Date_EndOfYear_Example2" xml:space="preserve">
    <value>Get the end of hour for 5/17/2011 05:00:00 PM -7:00.</value>
  </data>
  <data name="Date_From" xml:space="preserve">
    <value>Creates a date from the given value.</value>
  </data>
  <data name="Date_FromText" xml:space="preserve">
    <value>Creates a Date from local, universal, and custom Date formats.</value>
  </data>
  <data name="Date_FromText_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;date&lt;/code&gt; value from a textual representation, {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in parsing the date using a best effort.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"Jan", "Feb", "Mar", ...&lt;/code&gt;, while in &lt;code&gt;"ru-RU"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"янв", "фев", "мар", ...&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} may also be a text value. This has the same behavior as if {1}&lt;code&gt; = [Format = null, Culture = {1}]&lt;/code&gt;.</value>
  </data>
  <data name="Date_FromText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;"2010-12-31"&lt;/code&gt; into a &lt;code&gt;date&lt;/code&gt; value.</value>
  </data>
  <data name="Date_FromText_Example2" xml:space="preserve">
    <value>Convert using a custom format and the German culture.</value>
  </data>
  <data name="Date_FromText_Example3" xml:space="preserve">
    <value>Find the date in the Gregorian calendar that corresponds to the beginning of 1400 in the Hijri calendar.</value>
  </data>
  <data name="Date_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;date&lt;/code&gt; value from the given {0}. An optional {1} may also be provided (for example, "en-US").
If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Date.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;. If the given {0} is &lt;code&gt;date&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;date&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;date&lt;/code&gt; value from textual representation. Refer to &lt;code&gt;Date.FromText&lt;/code&gt; for details.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;: The date component of the {0}.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetimezone&lt;/code&gt;: The date component of the local datetime equivalent of {0}.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;number&lt;/code&gt;: The date component of the datetime equivalent of the OLE Automation Date expressed by {0}.&lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="Date_From_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;43910&lt;/code&gt; to a &lt;code&gt;date&lt;/code&gt; value.</value>
  </data>
  <data name="Date_From_Example2" xml:space="preserve">
    <value>Convert &lt;code&gt;#datetime(1899, 12, 30, 06, 45, 12)&lt;/code&gt; to  a &lt;code&gt;date&lt;/code&gt; value.</value>
  </data>
  <data name="Date_IsInCurrentDay" xml:space="preserve">
    <value>Indicates whether this date occurs during the current day, as determined by the current date and time on the system.</value>
  </data>
  <data name="Date_IsInCurrentDay_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current day, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInCurrentDay_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current day.</value>
  </data>
  <data name="Date_IsInCurrentMonth" xml:space="preserve">
    <value>Indicates whether this date occurs during the current month, as determined by the current date and time on the system.</value>
  </data>
  <data name="Date_IsInCurrentMonth_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current month, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInCurrentMonth_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current month.</value>
  </data>
  <data name="Date_IsInCurrentQuarter" xml:space="preserve">
    <value>Indicates whether this date occurs during the current quarter, as determined by the current date and time on the system.</value>
  </data>
  <data name="Date_IsInCurrentQuarter_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current quarter, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInCurrentQuarter_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current quarter.</value>
  </data>
  <data name="Date_IsInCurrentWeek" xml:space="preserve">
    <value>Indicates whether this date occurs during the current week, as determined by the current date and time on the system.</value>
  </data>
  <data name="Date_IsInCurrentWeek_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current week, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInCurrentWeek_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current week.</value>
  </data>
  <data name="Date_IsInCurrentYear" xml:space="preserve">
    <value>Indicates whether this date occurs during the current year, as determined by the current date and time on the system.</value>
  </data>
  <data name="Date_IsInCurrentYear_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current year, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInCurrentYear_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the current year.</value>
  </data>
  <data name="Date_IsInNextDay" xml:space="preserve">
    <value>Indicates whether this date occurs during the next day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.</value>
  </data>
  <data name="Date_IsInNextDay_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextDay_Example1" xml:space="preserve">
    <value>Determine if the day after the current system time is in the next day.</value>
  </data>
  <data name="Date_IsInNextMonth" xml:space="preserve">
    <value>Indicates whether this date occurs during the next month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.</value>
  </data>
  <data name="Date_IsInNextMonth_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextMonth_Example1" xml:space="preserve">
    <value>Determine if the month after the current system time is in the next month.</value>
  </data>
  <data name="Date_IsInNextNDays" xml:space="preserve">
    <value>Indicates whether this date occurs during the next number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.</value>
  </data>
  <data name="Date_IsInNextNDays_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of days.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextNDays_Example1" xml:space="preserve">
    <value>Determine if the day after the current system time is in the next two days.</value>
  </data>
  <data name="Date_IsInNextNMonths" xml:space="preserve">
    <value>Indicates whether this date occurs during the next number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.</value>
  </data>
  <data name="Date_IsInNextNMonths_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of months.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextNMonths_Example1" xml:space="preserve">
    <value>Determine if the month after the current system time is in the next two months.</value>
  </data>
  <data name="Date_IsInNextNQuarters" xml:space="preserve">
    <value>Indicates whether this date occurs during the next number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.</value>
  </data>
  <data name="Date_IsInNextNQuarters_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of quarters.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextNQuarters_Example1" xml:space="preserve">
    <value>Determine if the quarter after the current system time is in the next two quarters.</value>
  </data>
  <data name="Date_IsInNextNWeeks" xml:space="preserve">
    <value>Indicates whether this date occurs during the next number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.</value>
  </data>
  <data name="Date_IsInNextNWeeks_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of weeks.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextNWeeks_Example1" xml:space="preserve">
    <value>Determine if the week after the current system time is in the next two weeks.</value>
  </data>
  <data name="Date_IsInNextNYears" xml:space="preserve">
    <value>Indicates whether this date occurs during the next number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.</value>
  </data>
  <data name="Date_IsInNextNYears_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of years.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextNYears_Example1" xml:space="preserve">
    <value>Determine if the year after the current system time is in the next two years.</value>
  </data>
  <data name="Date_IsInNextQuarter" xml:space="preserve">
    <value>Indicates whether this date occurs during the next quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.</value>
  </data>
  <data name="Date_IsInNextQuarter_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextQuarter_Example1" xml:space="preserve">
    <value>Determine if the quarter after the current system time is in the next quarter.</value>
  </data>
  <data name="Date_IsInNextWeek" xml:space="preserve">
    <value>Indicates whether this date occurs during the next week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.</value>
  </data>
  <data name="Date_IsInNextWeek_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextWeek_Example1" xml:space="preserve">
    <value>Determine if the week after the current system time is in the next week.</value>
  </data>
  <data name="Date_IsInNextYear" xml:space="preserve">
    <value>Indicates whether this date occurs during the next year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.</value>
  </data>
  <data name="Date_IsInNextYear_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the next year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInNextYear_Example1" xml:space="preserve">
    <value>Determine if the year after the current system time is in the next year.</value>
  </data>
  <data name="Date_IsInPreviousDay" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.</value>
  </data>
  <data name="Date_IsInPreviousDay_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousDay_Example1" xml:space="preserve">
    <value>Determine if the day before the current system time is in the previous day.</value>
  </data>
  <data name="Date_IsInPreviousMonth" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.</value>
  </data>
  <data name="Date_IsInPreviousMonth_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousMonth_Example1" xml:space="preserve">
    <value>Determine if the month before the current system time is in the previous month.</value>
  </data>
  <data name="Date_IsInPreviousNDays" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.</value>
  </data>
  <data name="Date_IsInPreviousNDays_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of days.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousNDays_Example1" xml:space="preserve">
    <value>Determine if the day before the current system time is in the previous two days.</value>
  </data>
  <data name="Date_IsInPreviousNMonths" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.</value>
  </data>
  <data name="Date_IsInPreviousNMonths_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of months.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousNMonths_Example1" xml:space="preserve">
    <value>Determine if the month before the current system time is in the previous two months.</value>
  </data>
  <data name="Date_IsInPreviousNQuarters" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.</value>
  </data>
  <data name="Date_IsInPreviousNQuarters_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of quarters.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousNQuarters_Example1" xml:space="preserve">
    <value>Determine if the quarter before the current system time is in the previous two quarters.</value>
  </data>
  <data name="Date_IsInPreviousNWeeks" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.</value>
  </data>
  <data name="Date_IsInPreviousNWeeks_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of weeks.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousNWeeks_Example1" xml:space="preserve">
    <value>Determine if the week before the current system time is in the previous two weeks.</value>
  </data>
  <data name="Date_IsInPreviousNYears" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.</value>
  </data>
  <data name="Date_IsInPreviousNYears_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;li&gt;{1}: The number of years.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousNYears_Example1" xml:space="preserve">
    <value>Determine if the year before the current system time is in the previous two years.</value>
  </data>
  <data name="Date_IsInPreviousQuarter" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.</value>
  </data>
  <data name="Date_IsInPreviousQuarter_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousQuarter_Example1" xml:space="preserve">
    <value>Determine if the quarter before the current system time is in the previous quarter.</value>
  </data>
  <data name="Date_IsInPreviousWeek" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.</value>
  </data>
  <data name="Date_IsInPreviousWeek_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousWeek_Example1" xml:space="preserve">
    <value>Determine if the week before the current system time is in the previous week.</value>
  </data>
  <data name="Date_IsInPreviousYear" xml:space="preserve">
    <value>Indicates whether this date occurs during the previous year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.</value>
  </data>
  <data name="Date_IsInPreviousYear_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the previous year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInPreviousYear_Example1" xml:space="preserve">
    <value>Determine if the year before the current system time is in the previous year.</value>
  </data>
  <data name="Date_IsInYearToDate" xml:space="preserve">
    <value>Indicates whether this date occurs during the current year and is on or before the current day, as determined by the current date and time on the system.</value>
  </data>
  <data name="Date_IsInYearToDate_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} occurs during the current year and is on or before the current day, as determined by the current date and time on the system.
      &lt;ul&gt;
      &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsInYearToDate_Example1" xml:space="preserve">
    <value>Determine if the current system time is in the year to date.</value>
  </data>
  <data name="Date_IsLeapYear" xml:space="preserve">
    <value>Indicates whether this date falls in a leap year.</value>
  </data>
  <data name="Date_IsLeapYear_Description" xml:space="preserve">
    <value>Indicates whether the given datetime value {0} falls in is a leap year.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value to be evaluated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_IsLeapYear_Example1" xml:space="preserve">
    <value>Determine if the year 2012, as represented by &lt;code&gt;#date(2012, 01, 01)&lt;/code&gt; is a leap year.</value>
  </data>
  <data name="Date_Month" xml:space="preserve">
    <value>Returns the month component.</value>
  </data>
  <data name="Date_MonthName" xml:space="preserve">
    <value>Returns the name of the month component.</value>
  </data>
  <data name="Date_MonthName_Description" xml:space="preserve">
    <value>Returns the name of the month component for the provided {0}. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Date_MonthName_Example1" xml:space="preserve">
    <value>Get the month name.</value>
  </data>
  <data name="Date_Month_Description" xml:space="preserve">
    <value>Returns the month component of the provided &lt;code&gt;datetime&lt;/code&gt; value, {0}.</value>
  </data>
  <data name="Date_Month_Example1" xml:space="preserve">
    <value>Find the month in #datetime(2011, 12, 31, 9, 15, 36).</value>
  </data>
  <data name="Date_QuarterOfYear" xml:space="preserve">
    <value>Returns a number indicating which quarter of the year the date falls in.</value>
  </data>
  <data name="Date_QuarterOfYear_Description" xml:space="preserve">
    <value>Returns a number from 1 to 4 indicating which quarter of the year the date {0} falls in. {0} can be a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="Date_QuarterOfYear_Example1" xml:space="preserve">
    <value>Find which quarter of the year the date #date(2011, 12, 31) falls in.</value>
  </data>
  <data name="Date_StartOfDay" xml:space="preserve">
    <value>Returns the start of the day.</value>
  </data>
  <data name="Date_StartOfDay_Description" xml:space="preserve">
    <value>Returns the start of the day represented by {0}.
    {0} must be a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="Date_StartOfDay_Example1" xml:space="preserve">
    <value>Find the start of the day for October 10th, 2011, 8:00AM.</value>
  </data>
  <data name="Date_StartOfMonth" xml:space="preserve">
    <value>Returns the start of the month.</value>
  </data>
  <data name="Date_StartOfMonth_Description" xml:space="preserve">
    <value>Returns the start of the month that contains {0}.
    {0} must be a &lt;code&gt;date&lt;/code&gt; or &lt;code&gt;datetime&lt;/code&gt; value.</value>
  </data>
  <data name="Date_StartOfMonth_Example1" xml:space="preserve">
    <value>Find the start of the month for October 10th, 2011, 8:10:32AM.</value>
  </data>
  <data name="Date_StartOfQuarter" xml:space="preserve">
    <value>Returns the start of the quarter.</value>
  </data>
  <data name="Date_StartOfQuarter_Description" xml:space="preserve">
    <value>Returns the start of the quarter that contains {0}.
      {0} must be a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="Date_StartOfQuarter_Example1" xml:space="preserve">
    <value>Find the start of the quarter for October 10th, 2011, 8:00AM.</value>
  </data>
  <data name="Date_StartOfWeek" xml:space="preserve">
    <value>Returns the start of the week.</value>
  </data>
  <data name="Date_StartOfWeek_Description" xml:space="preserve">
    <value>Returns the start of the week that contains {0}.
    {0} must be a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="Date_StartOfWeek_Example1" xml:space="preserve">
    <value>Find the start of the week for Tuesday, October 11th, 2011.</value>
  </data>
  <data name="Date_StartOfWeek_Example2" xml:space="preserve">
    <value>Find the start of the week for Tuesday, October 11th, 2011, using Monday as the start of the week.</value>
  </data>
  <data name="Date_StartOfYear" xml:space="preserve">
    <value>Returns the start of the year.</value>
  </data>
  <data name="Date_StartOfYear_Description" xml:space="preserve">
    <value>Returns the start of the year that contains {0}.
    {0} must be a &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="Date_StartOfYear_Example1" xml:space="preserve">
    <value>Find the start of the year for October 10th, 2011, 8:10:32AM.</value>
  </data>
  <data name="Date_ToRecord" xml:space="preserve">
    <value>Returns a record containing parts of the date value.</value>
  </data>
  <data name="Date_ToRecord_Description" xml:space="preserve">
    <value>Returns a record containing the parts of the given date value, {0}.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;date&lt;/code&gt; value for from which the record of its parts is to be calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_ToRecord_Example1" xml:space="preserve">
    <value>Convert the &lt;code&gt;#date(2011, 12, 31)&lt;/code&gt; value into a record containing parts from the date value.</value>
  </data>
  <data name="Date_ToText" xml:space="preserve">
    <value>Returns a textual representation of the date value.</value>
  </data>
  <data name="Date_ToText_Description" xml:space="preserve">
    <value>Returns a textual representation of {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. {2} is only used for legacy workflows. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in formatting the date using the default defined by &lt;code&gt;Culture&lt;/code&gt;.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"Jan", "Feb", "Mar", ...&lt;/code&gt;, while in &lt;code&gt;"ru-RU"&lt;/code&gt; &lt;code&gt;"MMM"&lt;/code&gt; is &lt;code&gt;"янв", "фев", "мар", ...&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} and {2} may also be text values. This has the same behavior as if {1}&lt;code&gt; = [Format = {1}, Culture = {2}]&lt;/code&gt;.</value>
  </data>
  <data name="Date_ToText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;#date(2010, 12, 31)&lt;/code&gt; into a &lt;code&gt;text&lt;/code&gt; value. &lt;i&gt;Result output may vary depending on current culture.&lt;/i&gt;</value>
  </data>
  <data name="Date_ToText_Example2" xml:space="preserve">
    <value>Convert using a custom format and the German culture.</value>
  </data>
  <data name="Date_ToText_Example3" xml:space="preserve">
    <value>Find the year in the Hijri calendar that corresponds to January 1st, 2000 in the Gregorian calendar.</value>
  </data>
  <data name="Date_Type" xml:space="preserve">
    <value>The type that represents all date values.</value>
  </data>
  <data name="Date_WeekOfMonth" xml:space="preserve">
    <value>Returns a number from 1 to 6 indicating which week of the month this date falls in.</value>
  </data>
  <data name="Date_WeekOfMonth_Description" xml:space="preserve">
    <value>Returns a number from 1 to 6 indicating which week of the month the date {0} falls in.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt; value for which the week-of-the-month is determined.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_WeekOfMonth_Example1" xml:space="preserve">
    <value>Determine which week of March the 15th falls on in 2011.</value>
  </data>
  <data name="Date_WeekOfYear" xml:space="preserve">
    <value>Returns a number from 1 to 54 indicating which week of the year this date falls in.</value>
  </data>
  <data name="Date_WeekOfYear_Description" xml:space="preserve">
    <value>Returns a number from 1 to 54 indicating which week of the year the date, {0}, falls in.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;datetime&lt;/code&gt; value for which the week-of-the-year is determined.&lt;/li&gt;
        &lt;li&gt;{1}: An optional &lt;code&gt;Day.Type&lt;/code&gt; value that indicates which day is considered the start of a new week (for example, &lt;code&gt;Day.Sunday&lt;/code&gt;). If unspecified, a culture-dependent default is used.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Date_WeekOfYear_Example1" xml:space="preserve">
    <value>Determine which week of the year contains March 27th, 2011.</value>
  </data>
  <data name="Date_WeekOfYear_Example2" xml:space="preserve">
    <value>Determine which week of the year contains March 27th, 2011, using Monday as the start of the week.</value>
  </data>
  <data name="Date_Year" xml:space="preserve">
    <value>Returns the year component.</value>
  </data>
  <data name="Date_Year_Description" xml:space="preserve">
    <value>Returns the year component of the provided &lt;code&gt;datetime&lt;/code&gt; value, {0}.</value>
  </data>
  <data name="Date_Year_Example1" xml:space="preserve">
    <value>Find the year in #datetime(2011, 12, 31, 9, 15, 36).</value>
  </data>
  <data name="Day_Friday" xml:space="preserve">
    <value>Represents Friday.</value>
  </data>
  <data name="Day_Friday_Description" xml:space="preserve">
    <value>Returns 5, the number representing Friday.</value>
  </data>
  <data name="Day_Monday" xml:space="preserve">
    <value>Represents Monday.</value>
  </data>
  <data name="Day_Monday_Description" xml:space="preserve">
    <value>Returns 1, the number representing Monday.</value>
  </data>
  <data name="Day_Saturday" xml:space="preserve">
    <value>Represents Saturday.</value>
  </data>
  <data name="Day_Saturday_Description" xml:space="preserve">
    <value>Returns 6, the number representing Saturday.</value>
  </data>
  <data name="Day_Sunday" xml:space="preserve">
    <value>Represents Sunday.</value>
  </data>
  <data name="Day_Sunday_Description" xml:space="preserve">
    <value>Returns 0, the number representing Sunday.</value>
  </data>
  <data name="Day_Thursday" xml:space="preserve">
    <value>Represents Thursday.</value>
  </data>
  <data name="Day_Thursday_Description" xml:space="preserve">
    <value>Returns 4, the number representing Thursday.</value>
  </data>
  <data name="Day_Tuesday" xml:space="preserve">
    <value>Represents Tuesday.</value>
  </data>
  <data name="Day_Tuesday_Description" xml:space="preserve">
    <value>Returns 2, the number representing Tuesday.</value>
  </data>
  <data name="Day_Type" xml:space="preserve">
    <value>Specifies a day of week.</value>
  </data>
  <data name="Day_Wednesday" xml:space="preserve">
    <value>Represents Wednesday.</value>
  </data>
  <data name="Day_Wednesday_Description" xml:space="preserve">
    <value>Returns 3, the number representing Wednesday.</value>
  </data>
  <data name="Decimal_From" xml:space="preserve">
    <value>Creates a Decimal from the given value.</value>
  </data>
  <data name="Decimal_From_Description" xml:space="preserve">
    <value>Returns a Decimal &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Decimal.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of Decimal, {0} is returned, otherwise an error is returned. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Decimal_From_Example1" xml:space="preserve">
    <value>Get the Decimal &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4.5"&lt;/code&gt;.</value>
  </data>
  <data name="Decimal_Type" xml:space="preserve">
    <value>The type that represents fixed-point decimal number.</value>
  </data>
  <data name="DeltaLake_Table_Description" xml:space="preserve">
    <value>This function is unavailable because it requires .NET 4.5.</value>
  </data>
  <data name="Diagnostics_ActivityId" xml:space="preserve">
    <value>Returns an opaque identifier for the currently-running evaluation.</value>
  </data>
  <data name="Diagnostics_CorrelationId" xml:space="preserve">
    <value>Returns an opaque identifier to correlate incoming requests with outgoing ones.</value>
  </data>
  <data name="Diagnostics_Trace" xml:space="preserve">
    <value>Writes a trace entry, if tracing is enabled, and returns the value.</value>
  </data>
  <data name="Diagnostics_Trace_Description" xml:space="preserve">
    <value>Writes a trace {1}, if tracing is enabled, and returns {2}. An optional parameter {3} specifies whether to delay the evaluation of {2} until the message is traced. {0} can take one of the following values:
    &lt;code&gt;TraceLevel.Critical&lt;/code&gt;
    &lt;code&gt;TraceLevel.Error&lt;/code&gt;,
    &lt;code&gt;TraceLevel.Warning&lt;/code&gt;,
    &lt;code&gt;TraceLevel.Information&lt;/code&gt;,
    &lt;code&gt;TraceLevel.Verbose&lt;/code&gt;.
  </value>
  </data>
  <data name="Diagnostics_Trace_Example1" xml:space="preserve">
    <value>Trace the message before invoking Text.From function and return the result.</value>
  </data>
  <data name="DirectQueryCapabilities_From" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="DirectQueryCapabilities_From_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Double_From" xml:space="preserve">
    <value>Creates a Double from the given value.</value>
  </data>
  <data name="Double_From_Description" xml:space="preserve">
    <value>Returns a Double &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Double.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of Double, {0} is returned, otherwise an error is returned. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Double_From_Example1" xml:space="preserve">
    <value>Get the Double &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Double_Type" xml:space="preserve">
    <value>The type that represents double precision floating point number.</value>
  </data>
  <data name="Duration_Days" xml:space="preserve">
    <value>Returns the days portion of a duration.</value>
  </data>
  <data name="Duration_Days_Description" xml:space="preserve">
    <value>Returns the days portion of {0}.</value>
  </data>
  <data name="Duration_Days_Example1" xml:space="preserve">
    <value>Extract the number of days between two dates.</value>
  </data>
  <data name="Duration_From" xml:space="preserve">
    <value>Creates a duration from the given value.</value>
  </data>
  <data name="Duration_FromText" xml:space="preserve">
    <value>Returns a duration value from textual elapsed time forms (d.h:m:s).</value>
  </data>
  <data name="Duration_FromText_Description" xml:space="preserve">
    <value>Returns a duration value from the specified text, {0}. The following formats can be parsed by this function:
 &lt;ul&gt;
        &lt;li&gt;(-)hh:mm(:ss(.ff)) &lt;/li&gt;
        &lt;li&gt;(-)ddd(.hh:mm(:ss(.ff))) &lt;/li&gt;
 &lt;/ul&gt;
        &lt;br&gt;
        (All ranges are inclusive)&lt;br&gt;
        ddd: Number of days.&lt;br&gt;
        hh: Number of hours, between 0 and 23.&lt;br&gt;
        mm: Number of minutes, between 0 and 59.&lt;br&gt;
        ss: Number of seconds, between 0 and 59.&lt;br&gt;
        ff: Fraction of seconds, between 0 and 9999999.</value>
  </data>
  <data name="Duration_FromText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;"2.05:55:20"&lt;/code&gt; into a &lt;code&gt;duration&lt;/code&gt; value.</value>
  </data>
  <data name="Duration_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;duration&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Duration.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;duration&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;duration&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;duration&lt;/code&gt; value from textual elapsed time forms (d.h:m:s). Refer to &lt;code&gt;Duration.FromText&lt;/code&gt; for details.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;number&lt;/code&gt;: A &lt;code&gt;duration&lt;/code&gt; equivalent to the number of whole and fractional days expressed by {0}.&lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="Duration_From_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;2.525&lt;/code&gt; into a &lt;code&gt;duration&lt;/code&gt; value.</value>
  </data>
  <data name="Duration_Hours" xml:space="preserve">
    <value>Returns the hours portion of a duration.</value>
  </data>
  <data name="Duration_Hours_Description" xml:space="preserve">
    <value>Returns the hours portion of {0}.</value>
  </data>
  <data name="Duration_Hours_Example1" xml:space="preserve">
    <value>Extract the hours from a duration value.</value>
  </data>
  <data name="Duration_Minutes" xml:space="preserve">
    <value>Returns the minutes portion of a duration.</value>
  </data>
  <data name="Duration_Minutes_Description" xml:space="preserve">
    <value>Returns the minutes portion of {0}.</value>
  </data>
  <data name="Duration_Minutes_Example1" xml:space="preserve">
    <value>Extract the minutes from a duration value.</value>
  </data>
  <data name="Duration_Seconds" xml:space="preserve">
    <value>Returns the seconds portion of a duration.</value>
  </data>
  <data name="Duration_Seconds_Description" xml:space="preserve">
    <value>Returns the seconds portion of {0}.</value>
  </data>
  <data name="Duration_Seconds_Example1" xml:space="preserve">
    <value>Extract the seconds from a duration value.</value>
  </data>
  <data name="Duration_ToRecord" xml:space="preserve">
    <value>Returns a record containing the parts of the duration.</value>
  </data>
  <data name="Duration_ToRecord_Description" xml:space="preserve">
    <value>Returns a record containing the parts the duration value, {0}.
  &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;duration&lt;/code&gt; from which the record is created.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Duration_ToRecord_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;#duration(2, 5, 55, 20)&lt;/code&gt; into a record of its parts including days, hours, minutes and seconds if applicable.</value>
  </data>
  <data name="Duration_ToText" xml:space="preserve">
    <value>Returns the text of the form "d.h:m:s".</value>
  </data>
  <data name="Duration_ToText_Description" xml:space="preserve">
    <value>Returns a textual representation in the form "day.hour:mins:sec" of the given duration value, {0}.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;duration&lt;/code&gt; from which the textual representation is calculated.&lt;/li&gt;
  &lt;li&gt;{1}: &lt;i&gt;[Optional]&lt;/i&gt; Deprecated, will throw an error if not null&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Duration_ToText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;#duration(2, 5, 55, 20)&lt;/code&gt; into a text value.</value>
  </data>
  <data name="Duration_TotalDays" xml:space="preserve">
    <value>Returns the total days this duration spans.</value>
  </data>
  <data name="Duration_TotalDays_Description" xml:space="preserve">
    <value>Returns the total days spanned by {0}.</value>
  </data>
  <data name="Duration_TotalDays_Example1" xml:space="preserve">
    <value>Find the total days spanned by a duration value.</value>
  </data>
  <data name="Duration_TotalHours" xml:space="preserve">
    <value>Returns the total hours this duration spans.</value>
  </data>
  <data name="Duration_TotalHours_Description" xml:space="preserve">
    <value>Returns the total hours spanned by {0}.</value>
  </data>
  <data name="Duration_TotalHours_Example1" xml:space="preserve">
    <value>Find the total hours spanned by a duration value.</value>
  </data>
  <data name="Duration_TotalMinutes" xml:space="preserve">
    <value>Returns the total minutes this duration spans.</value>
  </data>
  <data name="Duration_TotalMinutes_Description" xml:space="preserve">
    <value>Returns the total minutes spanned by {0}.</value>
  </data>
  <data name="Duration_TotalMinutes_Example1" xml:space="preserve">
    <value>Find the total minutes spanned by a duration value.</value>
  </data>
  <data name="Duration_TotalSeconds" xml:space="preserve">
    <value>Returns the total seconds this duration spans.</value>
  </data>
  <data name="Duration_TotalSeconds_Description" xml:space="preserve">
    <value>Returns the total seconds spanned by {0}.</value>
  </data>
  <data name="Duration_TotalSeconds_Example1" xml:space="preserve">
    <value>Find the total seconds spanned by a duration value.</value>
  </data>
  <data name="Duration_Type" xml:space="preserve">
    <value>The type that represents all duration values</value>
  </data>
  <data name="Embedded_Value" xml:space="preserve">
    <value>Accesses a value by name in an embedded mashup.</value>
  </data>
  <data name="Environment_Configuration" xml:space="preserve">
    <value>Returns the value of all configuration properties set in the current environment.</value>
  </data>
  <data name="Environment_Configuration_Description" xml:space="preserve">
    <value>Returns the value of all configuration properties set in the current environment.</value>
  </data>
  <data name="Environment_FeatureSwitch" xml:space="preserve">
    <value>Returns the value of a configuration property set in the current environment.</value>
  </data>
  <data name="Environment_FeatureSwitch_Description" xml:space="preserve">
    <value>Returns the value of a configuration property set in the current environment.</value>
  </data>
  <data name="Environment_Libraries" xml:space="preserve">
    <value>Returns a table of libraries that are available in the current environment.</value>
  </data>
  <data name="Environment_Libraries_Description" xml:space="preserve">
    <value>Returns a table of libraries that are available in the current environment.</value>
  </data>
  <data name="Error_Record" xml:space="preserve">
    <value>Returns an error record from the provided text values for reason, message and detail.</value>
  </data>
  <data name="Essbase_Cubes" xml:space="preserve">
    <value>Returns the cubes in an Essbase instance grouped by Essbase server.</value>
  </data>
  <data name="Essbase_Cubes_Description" xml:space="preserve">
    <value>Returns a table of cubes grouped by Essbase server from an Essbase instance at APS server {0}. An optional record parameter, {1}, may be specified to control the following options:
    {1:type}</value>
  </data>
  <data name="Excel_CurrentWorkbook" xml:space="preserve">
    <value>Returns the contents of the current Excel workbook.</value>
  </data>
  <data name="Excel_CurrentWorkbook_Description" xml:space="preserve">
    <value>Returns the contents of the current Excel workbook. It returns tables, named ranges, and dynamic arrays. Unlike &lt;code&gt;Excel.Workbook&lt;/code&gt;, it does not return sheets.</value>
  </data>
  <data name="Excel_ShapeTable" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Excel_ShapeTable_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Excel_Workbook" xml:space="preserve">
    <value>Returns the contents of the Excel workbook.</value>
  </data>
  <data name="Excel_Workbook_Description" xml:space="preserve">
    <value>Returns the contents of the Excel workbook.
    &lt;ul&gt;
     &lt;li&gt; {1} can be null, a logical (true/false) value indicating whether the first row of each returned table should be treated as a header, or an options record. Default: false.&lt;/li&gt;
     &lt;li&gt; {2} can be null or a logical (true/false) value indicating whether the columns of each returned table should be left untyped. Default: false.&lt;/li&gt;
    &lt;/ul&gt;

    If a record is specified for {1} (and {2} is null), the following record fields may be provided:
    &lt;ul&gt;
     &lt;li&gt; &lt;code&gt;UseHeaders&lt;/code&gt;: Can be null or a logical (true/false) value indicating whether the first row of each returned table should be treated as a header. Default: false.&lt;/li&gt;
     &lt;li&gt; &lt;code&gt;DelayTypes&lt;/code&gt;: Can be null or a logical (true/false) value indicating whether the columns of each returned table should be left untyped. Default: false.&lt;/li&gt;
     &lt;li&gt; &lt;code&gt;InferSheetDimensions&lt;/code&gt;: Can be null or a logical (true/false) value indicating whether the area of a worksheet that contains data should be inferred by reading the worksheet itself, rather than by reading the dimensions metadata from the file. This can be useful in cases where the dimensions metadata is incorrect. Note that this option is only supported for Open XML Excel files, not for legacy Excel files. Default: false.&lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Excel_Workbook_Example1" xml:space="preserve">
    <value>Return the contents of Sheet1 from an Excel workbook.</value>
  </data>
  <data name="Exchange_Contents" xml:space="preserve">
    <value>Returns a table of contents from a Microsoft Exchange account.</value>
  </data>
  <data name="Exchange_Contents_Description" xml:space="preserve">
    <value>Returns a table of contents from the Microsoft Exchange account {0}. If {0} is not specified, the default account for the credential will be used.</value>
  </data>
  <data name="Expression_Constant" xml:space="preserve">
    <value>Returns the M source code representation of a constant value.</value>
  </data>
  <data name="Expression_Constant_Description" xml:space="preserve">
    <value>Returns the M source code representation of a constant value.</value>
  </data>
  <data name="Expression_Constant_Example1" xml:space="preserve">
    <value>Get the M source code representation of a number value.</value>
  </data>
  <data name="Expression_Constant_Example2" xml:space="preserve">
    <value>Get the M source code representation of a date value.</value>
  </data>
  <data name="Expression_Constant_Example3" xml:space="preserve">
    <value>Get the M source code representation of a text value.</value>
  </data>
  <data name="Expression_Evaluate" xml:space="preserve">
    <value>Returns the result of evaluating an M expression.</value>
  </data>
  <data name="Expression_Evaluate_Description" xml:space="preserve">
    <value>Returns the result of evaluating an M expression {0}, with the available identifiers that can be referenced defined by {1}.</value>
  </data>
  <data name="Expression_Evaluate_Example1" xml:space="preserve">
    <value>Evaluate a simple sum.</value>
  </data>
  <data name="Expression_Evaluate_Example2" xml:space="preserve">
    <value>Evaluate a more complex sum.</value>
  </data>
  <data name="Expression_Evaluate_Example3" xml:space="preserve">
    <value>Evaluate the concatenation of a text value with an identifier.</value>
  </data>
  <data name="Expression_Identifier" xml:space="preserve">
    <value>Returns the M source code representation of an identifier.</value>
  </data>
  <data name="Expression_Identifier_Description" xml:space="preserve">
    <value>Returns the M source code representation of an identifier {0}.</value>
  </data>
  <data name="Expression_Identifier_Example1" xml:space="preserve">
    <value>Get the M source code representation of an identifier.</value>
  </data>
  <data name="Expression_Identifier_Example2" xml:space="preserve">
    <value>Get the M source code representation of an identifier that contains a space.</value>
  </data>
  <data name="Extension_Cache" xml:space="preserve">
    <value>Returns a record with caching functions.</value>
  </data>
  <data name="Extension_Cache_Description" xml:space="preserve">
    <value>Returns a record with caching functions.</value>
  </data>
  <data name="Extension_Contents" xml:space="preserve">
    <value>Returns the contents of the specified file within the library PQX file as binary.</value>
  </data>
  <data name="Extension_Contents_Description" xml:space="preserve">
    <value>Returns the contents of the file {0} within the library PQX file as binary.</value>
  </data>
  <data name="Extension_HasPermission" xml:space="preserve">
    <value>Returns a logical value indicating whether or not the user has granted a specific permission {0}.</value>
  </data>
  <data name="Extension_HasPermission_Description" xml:space="preserve">
    <value>Returns a logical value indicating whether or not the user has granted a specific permission {0}.</value>
  </data>
  <data name="Extension_InvokeVolatileFunction" xml:space="preserve">
    <value>Invokes a volatile function even in an environment where it would not otherwise be allowed.</value>
  </data>
  <data name="Extension_InvokeWithCredentials" xml:space="preserve">
    <value>Invokes a function in the context of the provided credential handler.</value>
  </data>
  <data name="Extension_InvokeWithCredentials_Description" xml:space="preserve">
    <value>Invokes a function {1} in the context of the provided credential handler {0}. The handler must return either a valid credential for the data source, or &lt;code&gt;null&lt;/code&gt; to indicate that no credential is available.</value>
  </data>
  <data name="Extension_InvokeWithPermissions" xml:space="preserve">
    <value>Invokes a function in the context of the provided permissions handler.</value>
  </data>
  <data name="Extension_InvokeWithPermissions_Description" xml:space="preserve">
    <value>Invokes a function {1} in the context of the provided permissions handler {0}. The handler must return either a logical value to indicate whether the permission is granted (if true) or denied, or &lt;code&gt;null&lt;/code&gt; to indicate that the user should be prompted.</value>
  </data>
  <data name="Extension_LoadString" xml:space="preserve">
    <value>Returns a localized string from the library PQX file.</value>
  </data>
  <data name="Extension_LoadString_Description" xml:space="preserve">
    <value>Returns the string {0} from the current library PQX file localized for the current culture, falling back to the default culture if a localized definition is not available, or &lt;code&gt;null&lt;/code&gt; if the string is undefined.</value>
  </data>
  <data name="ExtraValues_Error" xml:space="preserve">
    <value>If the splitter function returns more columns than the table expects, an error should be raised.</value>
  </data>
  <data name="ExtraValues_Ignore" xml:space="preserve">
    <value>If the splitter function returns more columns than the table expects, they should be ignored.</value>
  </data>
  <data name="ExtraValues_List" xml:space="preserve">
    <value>If the splitter function returns more columns than the table expects, they should be collected into a list.</value>
  </data>
  <data name="ExtraValues_Type" xml:space="preserve">
    <value>Specifies the expected action for extra values in a row that contains columns more than expected.</value>
  </data>
  <data name="File_Contents" xml:space="preserve">
    <value>Returns the contents of the specified file as binary.</value>
  </data>
  <data name="File_Contents_Description" xml:space="preserve">
    <value>Returns the contents of the file, {0}, as binary. The {1} parameter is currently intended for internal use only.</value>
  </data>
  <data name="Folder_Contents" xml:space="preserve">
    <value>Returns a table containing the properties and contents of the files and folders found in the specified folder.</value>
  </data>
  <data name="Folder_Contents_Description" xml:space="preserve">
    <value>Returns a table containing a row for each folder and file found in the folder {0}. Each row contains properties of the folder or file and a link to its content. The {1} parameter is currently intended for internal use only.</value>
  </data>
  <data name="Folder_Files" xml:space="preserve">
    <value>Returns a table containing the properties and contents of the files found in the specified folder and subfolders.</value>
  </data>
  <data name="Folder_Files_Description" xml:space="preserve">
    <value>Returns a table containing a row for each file found in the folder {0} and all its subfolders. Each row contains properties of the file and a link to its content. The {1} parameter is currently intended for internal use only.</value>
  </data>
  <data name="Function_From" xml:space="preserve">
    <value>Creates a function with a specific parameter signature on top of a function that takes a single list argument</value>
  </data>
  <data name="Function_From_Description" xml:space="preserve">
    <value>Takes a unary function {1} and creates a new function with the type {0} that constructs a list out of its arguments and passes it to {1}.</value>
  </data>
  <data name="Function_From_Example1" xml:space="preserve">
    <value>Converts List.Sum into a two-argument function whose arguments are added together</value>
  </data>
  <data name="Function_From_Example2" xml:space="preserve">
    <value>Converts a function taking a list into a two-argument function</value>
  </data>
  <data name="Function_Invoke" xml:space="preserve">
    <value>Invokes the given function</value>
  </data>
  <data name="Function_InvokeAfter" xml:space="preserve">
    <value>Invokes the given function after the specified duration has passed.</value>
  </data>
  <data name="Function_InvokeAfter_Description" xml:space="preserve">
    <value>Returns the result of invoking {0} after duration {1} has passed.</value>
  </data>
  <data name="Function_InvokeWithErrorContext" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Function_InvokeWithErrorContext_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Function_Invoke_Description" xml:space="preserve">
    <value>Invokes the given function using the specified list of arguments and returns the result.</value>
  </data>
  <data name="Function_Invoke_Example1" xml:space="preserve">
    <value>Invokes Record.FieldNames with one argument [A=1,B=2]</value>
  </data>
  <data name="Function_IsDataSource" xml:space="preserve">
    <value>Returns whether or not a particular function is considered a data source.</value>
  </data>
  <data name="Function_IsDataSource_Description" xml:space="preserve">
    <value>Returns whether or not {0} is considered a data source.</value>
  </data>
  <data name="Function_ScalarVector" xml:space="preserve">
    <value>Creates a scalar function on top of a vector function, batching multiple invocations.</value>
  </data>
  <data name="Function_ScalarVector_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a scalar function of type {0} that invokes {1} with a single row of arguments and returns its single output. Additionally, when the scalar function is repeatedly applied for each row of a table of inputs, such as in Table.AddColumn, instead {1} will be applied once for all inputs.&lt;/p&gt;
&lt;p&gt;{1} will be passed a table whose columns match in name and position the parameters of {0}. Each row of this table contains the arguments for one call to the scalar function, with the columns corresponding to the parameters of {0}.&lt;/p&gt;
&lt;p&gt;{1} must return a list of the same length as the input table, whose item at each position must be the same result as evaluating the scalar function on the input row of the same position.&lt;/p&gt;
&lt;p&gt;The input table is expected to be streamed in, so {1} is expected to stream its output as input comes in, only working with one chunk of input at a time. In particular, {1} must not enumerate its input table more than once.&lt;/p&gt;</value>
  </data>
  <data name="Function_Type" xml:space="preserve">
    <value>The type that represents all functions.</value>
  </data>
  <data name="GeographyPoint_From" xml:space="preserve">
    <value>Creates a record representing a geographic point from parts.</value>
  </data>
  <data name="GeographyPoint_From_Description" xml:space="preserve">
    <value>Creates a record representing a geographic point from its constituent parts, such as longitude, latitude, and if present, elevation (Z) and measure (M). An optional spatial reference identifier (SRID) can be given if different from the default value (4326).</value>
  </data>
  <data name="Geography_FromWellKnownText" xml:space="preserve">
    <value>Translates text representing a geographic value in Well-Known Text (WKT) format into a structured record.</value>
  </data>
  <data name="Geography_FromWellKnownText_Description" xml:space="preserve">
    <value>Translates text representing a geographic value in Well-Known Text (WKT) format into a structured record. WKT is a standard format defined by the Open Geospatial Consortium (OGC) and is the typical serialization format used by databases including SQL Server.</value>
  </data>
  <data name="Geography_ToWellKnownText" xml:space="preserve">
    <value>Translates a structured geographic point value into its Well-Known Text (WKT) representation.</value>
  </data>
  <data name="Geography_ToWellKnownText_Description" xml:space="preserve">
    <value>Translates a structured geographic point value into its Well-Known Text (WKT) representation as defined by the Open Geospatial Consortium (OGC), also the serialization format used by many databases including SQL Server.</value>
  </data>
  <data name="GeometryPoint_From" xml:space="preserve">
    <value>Creates a record representing a geometric point from parts.</value>
  </data>
  <data name="GeometryPoint_From_Description" xml:space="preserve">
    <value>Creates a record representing a geometric point from its constituent parts, such as X coordinate, Y coordinate, and if present, Z coordinate and measure (M). An optional spatial reference identifier (SRID) can be given if different from the default value (0).</value>
  </data>
  <data name="Geometry_FromWellKnownText" xml:space="preserve">
    <value>Translates text representing a geometric value in Well-Known Text (WKT) format into a structured record.</value>
  </data>
  <data name="Geometry_FromWellKnownText_Description" xml:space="preserve">
    <value>Translates text representing a geometric value in Well-Known Text (WKT) format into a structured record. WKT is a standard format defined by the Open Geospatial Consortium (OGC) and is the typical serialization format used by databases including SQL Server.</value>
  </data>
  <data name="Geometry_ToWellKnownText" xml:space="preserve">
    <value>Translates a structured geometric point value into its Well-Known Text (WKT) representation.</value>
  </data>
  <data name="Geometry_ToWellKnownText_Description" xml:space="preserve">
    <value>Translates a structured geometric point value into its Well-Known Text (WKT) representation as defined by the Open Geospatial Consortium (OGC), also the serialization format used by many databases including SQL Server.</value>
  </data>
  <data name="GoogleAnalytics_Accounts" xml:space="preserve">
    <value>Returns Google Analytics accounts.</value>
  </data>
  <data name="GoogleAnalytics_Accounts_Description" xml:space="preserve">
    <value>Returns Google Analytics accounts that are accessible from the current credential.</value>
  </data>
  <data name="Graph_Nodes" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Graph_Nodes_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="GroupKind_Global" xml:space="preserve">
    <value>A global group is formed from all rows in an input table with the same key value.</value>
  </data>
  <data name="GroupKind_Local" xml:space="preserve">
    <value>A local group is formed from a consecutive sequence of rows from an input table with the same key value.</value>
  </data>
  <data name="GroupKind_Type" xml:space="preserve">
    <value>Specifies the kind of grouping.</value>
  </data>
  <data name="GroupKind_Type_Description" xml:space="preserve">
    <value>Multiple local groups may be produced with the same key value but only a single global group is produced for a given key value.</value>
  </data>
  <data name="Guid_From" xml:space="preserve">
    <value>Returns a guid value from the given value.</value>
  </data>
  <data name="Guid_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;Guid.Type&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Guid.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  A check will be performed to determine if the given {0} is in an acceptable format. Acceptable formats provided in the examples.</value>
  </data>
  <data name="Guid_From_Example1" xml:space="preserve">
    <value>The Guid can be provided as 32 contiguous hexadecimal digits.</value>
  </data>
  <data name="Guid_From_Example2" xml:space="preserve">
    <value>The Guid can be provided as 32 hexadecimal digits separated by hyphens into blocks of 8-4-4-4-12.</value>
  </data>
  <data name="Guid_From_Example3" xml:space="preserve">
    <value>The Guid can be provided as 32 hexadecimal digits separated by hyphens and enclosed in braces.</value>
  </data>
  <data name="Guid_From_Example4" xml:space="preserve">
    <value>The Guid can be provided as 32 hexadecimal digits separated by hyphens and enclosed by parentheses.</value>
  </data>
  <data name="Guid_Type" xml:space="preserve">
    <value>The type that represents a Guid value.</value>
  </data>
  <data name="HdInsight_Containers" xml:space="preserve">
    <value>Returns a navigational table containing the containers found in the specified account from an Azure storage vault.</value>
  </data>
  <data name="HdInsight_Containers_Description" xml:space="preserve">
    <value>Returns a navigational table containing a row for each container found at the account URL, {0}, from an Azure storage vault. Each row contains a link to the container blobs.</value>
  </data>
  <data name="HdInsight_Contents" xml:space="preserve">
    <value>Returns a navigational table containing the containers found in the specified account from an Azure storage vault.</value>
  </data>
  <data name="HdInsight_Contents_Description" xml:space="preserve">
    <value>Returns a navigational table containing a row for each container found at the account URL, {0}, from an Azure storage vault. Each row contains a link to the container blobs.</value>
  </data>
  <data name="HdInsight_Files" xml:space="preserve">
    <value>Returns a table containing the properties and contents of the blobs found in the specified container from an Azure storage vault.</value>
  </data>
  <data name="HdInsight_Files_Description" xml:space="preserve">
    <value>Returns a table containing a row for each blob file found at the container URL, {0}, from an Azure storage vault. Each row contains properties of the file and a link to its content.</value>
  </data>
  <data name="Hdfs_Contents" xml:space="preserve">
    <value>Returns a table containing the properties and contents of the files and folders found in the specified folder from a Hadoop file system.</value>
  </data>
  <data name="Hdfs_Contents_Description" xml:space="preserve">
    <value>Returns a table containing a row for each folder and file found at the folder URL, {0}, from a Hadoop file system. Each row contains properties of the folder or file and a link to its content.</value>
  </data>
  <data name="Hdfs_Files" xml:space="preserve">
    <value>Returns a table containing the properties and contents of the files found in the specified folder and subfolders from a Hadoop file system.</value>
  </data>
  <data name="Hdfs_Files_Description" xml:space="preserve">
    <value>Returns a table containing a row for each file found at the folder URL, {0}, and subfolders from a Hadoop file system. Each row contains properties of the file and a link to its content.</value>
  </data>
  <data name="Html_Table_Description" xml:space="preserve">
    <value>This function is unavailable because it requires .NET 4.5.</value>
  </data>
  <data name="Http_Get" xml:space="preserve">
    <value>Returns a representation of the specified web resource.</value>
  </data>
  <data name="Http_Post" xml:space="preserve">
    <value>Submits data to be processed to the specified web resource.</value>
  </data>
  <data name="IdentityProvider_Default" xml:space="preserve">
    <value>The default identity provider for the current host.</value>
  </data>
  <data name="IdentityProvider_Type" xml:space="preserve">
    <value>Defines a scope in which identities are created and compared.</value>
  </data>
  <data name="Identity_From" xml:space="preserve">
    <value>Creates an identity.</value>
  </data>
  <data name="Identity_IsMemberOf" xml:space="preserve">
    <value>Determines whether an identity is a member of an identity collection.</value>
  </data>
  <data name="Identity_Type" xml:space="preserve">
    <value>An identity represents a user, group, device, or other identifiable thing.</value>
  </data>
  <data name="Informix_Database" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in an Informix database.</value>
  </data>
  <data name="Informix_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in an Informix database on server {0} in the database instance named {1}. The port may be optionally specified with the server, separated by a colon. An optional record parameter, {2}, may be specified to control the following options:
    {2:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="Int16_From" xml:space="preserve">
    <value>Creates a 16-bit integer from the given value.</value>
  </data>
  <data name="Int16_From_Description" xml:space="preserve">
    <value>Returns a 16-bit integer &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Int16.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of 16-bit integer without a fractional part, {0} is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is &lt;code&gt;RoundingMode.ToEven&lt;/code&gt;. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. Refer to &lt;code&gt;Number.Round&lt;/code&gt; for the available rounding modes. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Int16_From_Example1" xml:space="preserve">
    <value>Get the 16-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Int16_From_Example2" xml:space="preserve">
    <value>Get the 16-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4.5"&lt;/code&gt; using &lt;code&gt;RoundingMode.AwayFromZero&lt;/code&gt;.</value>
  </data>
  <data name="Int16_Type" xml:space="preserve">
    <value>The type that represents signed 16 bit integer.</value>
  </data>
  <data name="Int32_From" xml:space="preserve">
    <value>Creates a 32-bit integer from the given value.</value>
  </data>
  <data name="Int32_From_Description" xml:space="preserve">
    <value>Returns a 32-bit integer &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Int32.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of 32-bit integer without a fractional part, {0} is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is &lt;code&gt;RoundingMode.ToEven&lt;/code&gt;. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. Refer to &lt;code&gt;Number.Round&lt;/code&gt; for the available rounding modes. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Int32_From_Example1" xml:space="preserve">
    <value>Get the 32-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Int32_From_Example2" xml:space="preserve">
    <value>Get the 32-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4.5"&lt;/code&gt; using &lt;code&gt;RoundingMode.AwayFromZero&lt;/code&gt;.</value>
  </data>
  <data name="Int32_Type" xml:space="preserve">
    <value>The type that represents signed 32 bit integer.</value>
  </data>
  <data name="Int64_From" xml:space="preserve">
    <value>Creates a 64-bit integer from the given value.</value>
  </data>
  <data name="Int64_From_Description" xml:space="preserve">
    <value>Returns a 64-bit integer &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Int64.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;. If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of 64-bit integer without a fractional part, {0} is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is &lt;code&gt;RoundingMode.ToEven&lt;/code&gt;. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. Refer to &lt;code&gt;Number.Round&lt;/code&gt; for the available rounding modes. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Int64_From_Example1" xml:space="preserve">
    <value>Get the 64-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Int64_From_Example2" xml:space="preserve">
    <value>Get the 64-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4.5"&lt;/code&gt; using &lt;code&gt;RoundingMode.AwayFromZero&lt;/code&gt;.</value>
  </data>
  <data name="Int64_Type" xml:space="preserve">
    <value>The type that represents signed 64 bit integer.</value>
  </data>
  <data name="Int8_From" xml:space="preserve">
    <value>Creates a signed 8-bit integer from the given value.</value>
  </data>
  <data name="Int8_From_Description" xml:space="preserve">
    <value>Returns a signed 8-bit integer &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Int8.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of signed 8-bit integer without a fractional part, {0} is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is &lt;code&gt;RoundingMode.ToEven&lt;/code&gt;. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. Refer to &lt;code&gt;Number.Round&lt;/code&gt; for the available rounding modes. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Int8_From_Example1" xml:space="preserve">
    <value>Get the signed 8-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Int8_From_Example2" xml:space="preserve">
    <value>Get the signed 8-bit integer &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4.5"&lt;/code&gt; using &lt;code&gt;RoundingMode.AwayFromZero&lt;/code&gt;.</value>
  </data>
  <data name="Int8_Type" xml:space="preserve">
    <value>The type that represents signed 8 bit integer.</value>
  </data>
  <data name="ItemExpression_From" xml:space="preserve">
    <value>Returns the abstract syntax tree (AST) for the body of a function.</value>
  </data>
  <data name="ItemExpression_From_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns the abstract syntax tree (AST) for the body of {0}, normalized into an &lt;i&gt;item expression&lt;/i&gt;:
&lt;ul&gt;
  &lt;li&gt;The function must be a 1-argument lambda.&lt;/li&gt;
  &lt;li&gt;All references to the function parameter are replaced with &lt;code&gt;ItemExpression.Item&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The AST will be simplified to contain only nodes of the kinds:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Invocation&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Unary&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Binary&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;If&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;FieldAccess&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/p&gt;An error is raised if an item expression AST cannot be returned for the body of {0}.&lt;/p&gt;</value>
  </data>
  <data name="ItemExpression_From_Example1" xml:space="preserve">
    <value>Returns the AST for the body of the function &lt;code&gt;each _ &lt;&gt; null&lt;/code&gt;</value>
  </data>
  <data name="ItemExpression_Item" xml:space="preserve">
    <value>An abstract syntax tree (AST) node representing the item in an item expression.</value>
  </data>
  <data name="ItemExpression_Item_Description" xml:space="preserve">
    <value>An abstract syntax tree (AST) node representing the item in an item expression.</value>
  </data>
  <data name="JoinAlgorithm_Dynamic" xml:space="preserve">
    <value>Automatically chooses a join algorithm based on inspecting the initial rows and metadata of both tables.</value>
  </data>
  <data name="JoinAlgorithm_LeftHash" xml:space="preserve">
    <value>Buffers the left rows into a lookup table and streams the right rows. For each right row, the matching left rows are found via the buffered lookup table. This algorithm is recommended when the left table is small and most of the rows from the right table are expected to match a left row.</value>
  </data>
  <data name="JoinAlgorithm_LeftIndex" xml:space="preserve">
    <value>In batches, uses the keys from the left table to do predicate-based queries against the right table. This algorithm is recommended when the right table is large, supports folding of Table.SelectRows, and contains few rows that are expected to match a left row.</value>
  </data>
  <data name="JoinAlgorithm_PairwiseHash" xml:space="preserve">
    <value>Buffers the rows of both the left and right tables until one of the tables is completely buffered, and then performs a LeftHash or RightHash, depending on which table was buffered completely. This algorithm is recommended only for small tables.</value>
  </data>
  <data name="JoinAlgorithm_RightHash" xml:space="preserve">
    <value>Buffers the right rows into a lookup table and streams the left rows. For each left row, the matching right rows are found via the buffered lookup table. This algorithm is recommended when the right table is small and most of the rows from the left table are expected to match a right row.</value>
  </data>
  <data name="JoinAlgorithm_RightIndex" xml:space="preserve">
    <value>In batches, uses the keys from the right table to do predicate-based queries against the left table. This algorithm is recommended when the left table is large, supports folding of Table.SelectRows, and contains few rows that are expected to match a right row.</value>
  </data>
  <data name="JoinAlgorithm_SortMerge" xml:space="preserve">
    <value>Performs a streaming merge based on the assumption that both tables are sorted by their join keys. While efficient, it will return incorrect results if the tables aren't sorted as expected.</value>
  </data>
  <data name="JoinAlgorithm_Type" xml:space="preserve">
    <value>Specifies the join algorithm to be used in the join operation.</value>
  </data>
  <data name="JoinKind_FullOuter" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    A full outer join ensures that all rows of both tables appear in the result. Rows that did not have a match in the other table are joined with a default row containing null values for all of its columns.</value>
  </data>
  <data name="JoinKind_Inner" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    The table resulting from an inner join contains a row for each pair of rows from the specified tables that were determined to match based on the specified key columns.</value>
  </data>
  <data name="JoinKind_LeftAnti" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    A left anti join returns all rows from the first table that do not have a match in the second table.</value>
  </data>
  <data name="JoinKind_LeftOuter" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    A left outer join ensures that all rows of the first table appear in the result.</value>
  </data>
  <data name="JoinKind_LeftSemi" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    A left semi join returns all rows from the first table that have a match in the second table.</value>
  </data>
  <data name="JoinKind_RightAnti" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    A right anti join returns all rows from the second table that do not have a match in the first table.</value>
  </data>
  <data name="JoinKind_RightOuter" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    A right outer join ensures that all rows of the second table appear in the result.</value>
  </data>
  <data name="JoinKind_RightSemi" xml:space="preserve">
    <value>A possible value for the optional &lt;code&gt;JoinKind&lt;/code&gt; parameter in &lt;code&gt;Table.Join&lt;/code&gt;.
    A right semi join returns all rows from the second table that have a match in the first table.</value>
  </data>
  <data name="JoinKind_Type" xml:space="preserve">
    <value>Specifies the kind of join operation.</value>
  </data>
  <data name="JoinSide_Left" xml:space="preserve">
    <value>Specifies the left table of a join.</value>
  </data>
  <data name="JoinSide_Right" xml:space="preserve">
    <value>Specifies the right table of a join.</value>
  </data>
  <data name="JoinSide_Type" xml:space="preserve">
    <value>Specifies the left or right table of a join.</value>
  </data>
  <data name="Json_Document" xml:space="preserve">
    <value>Returns the content of the JSON document.</value>
  </data>
  <data name="Json_FromValue" xml:space="preserve">
    <value>Produces a JSON representation of a given value.</value>
  </data>
  <data name="Json_FromValue_Description" xml:space="preserve">
    <value>&lt;p&gt;Produces a JSON representation of a given value {0} with a text encoding specified by {1}. If {1} is omitted, UTF8 is used. Values are represented as follows:&lt;/p&gt;
 &lt;ul&gt;
        &lt;li&gt;Null, text and logical values are represented as the corresponding JSON types&lt;/li&gt;
        &lt;li&gt;Numbers are represented as numbers in JSON, except that &lt;code&gt;#infinity&lt;/code&gt;, &lt;code&gt;-#infinity&lt;/code&gt; and &lt;code&gt;#nan&lt;/code&gt; are converted to null&lt;/li&gt;
        &lt;li&gt;Lists are represented as JSON arrays&lt;/li&gt;
        &lt;li&gt;Records are represnted as JSON objects&lt;/li&gt;
        &lt;li&gt;Tables are represented as an array of objects&lt;/li&gt;
        &lt;li&gt;Dates, times, datetimes, datetimezones and durations are represented as ISO-8601 text&lt;/li&gt;
        &lt;li&gt;Binary values are represented as base-64 encoded text&lt;/li&gt;
        &lt;li&gt;Types and functions produce an error&lt;/li&gt;
 &lt;/ul&gt;
    </value>
  </data>
  <data name="Json_FromValue_Example1" xml:space="preserve">
    <value>Convert a complex value to JSON.</value>
  </data>
  <data name="Language_And" xml:space="preserve">
    <value>Returns true if both sides are true.</value>
  </data>
  <data name="Language_Character" xml:space="preserve">
    <value>Characters are text values of length 1.</value>
  </data>
  <data name="Language_Compares" xml:space="preserve">
    <value>&lt;, &gt;, &lt;=, and &gt;= return true if the comparison is true.</value>
  </data>
  <data name="Language_DateFromText" xml:space="preserve">
    <value>Dates can be entered as text by calling DateTime.FromText formula.</value>
  </data>
  <data name="Language_DateLiteral" xml:space="preserve">
    <value>Dates are written as #date(year, month, day).</value>
  </data>
  <data name="Language_DateTimeLiteral" xml:space="preserve">
    <value>datetime values are written as #datetime(year, month, day, hour, minute, second).</value>
  </data>
  <data name="Language_DateTimeWithZoneLiteral" xml:space="preserve">
    <value>datetime values with timezone take an optional offset.</value>
  </data>
  <data name="Language_DateTime_Compares" xml:space="preserve">
    <value>date, time, datetime and duration values can be compared.</value>
  </data>
  <data name="Language_DateTime_Duration_Add" xml:space="preserve">
    <value>duration values can be added to date, time, and datetime values.</value>
  </data>
  <data name="Language_DateTime_Math" xml:space="preserve">
    <value>date and datetime values also support subtraction.</value>
  </data>
  <data name="Language_Date_Time_Combine" xml:space="preserve">
    <value>A date and a time can be combined together using &amp; to create a datetime.</value>
  </data>
  <data name="Language_DurationLiteral" xml:space="preserve">
    <value>duration values are written in 24-hour time form using #duration(days, hours, minutes, seconds).</value>
  </data>
  <data name="Language_Duration_Add" xml:space="preserve">
    <value>duration values can be added.</value>
  </data>
  <data name="Language_Duration_Subtract" xml:space="preserve">
    <value>duration values can be subtracted.</value>
  </data>
  <data name="Language_EachColumn" xml:space="preserve">
    <value>In an each, columns of tables can be referenced as [Column].</value>
  </data>
  <data name="Language_EachUnderscore" xml:space="preserve">
    <value>An each creates a function of one argument, specified as _.</value>
  </data>
  <data name="Language_Equals" xml:space="preserve">
    <value>= returns true if the two values are equal.</value>
  </data>
  <data name="Language_False" xml:space="preserve">
    <value>Represents the value false.</value>
  </data>
  <data name="Language_Function" xml:space="preserve">
    <value>Functions are written with parameters, a =&gt;, and an expression to be run.</value>
  </data>
  <data name="Language_If" xml:space="preserve">
    <value>An if expression tests a condition and returns the then part if true or the else part if false.</value>
  </data>
  <data name="Language_Invocation" xml:space="preserve">
    <value>To call a function, provide parenthesized comma-separated arguments.</value>
  </data>
  <data name="Language_Let" xml:space="preserve">
    <value>A let expression allows you to create variables with expressions and compute a result with them.</value>
  </data>
  <data name="Language_List_Combine" xml:space="preserve">
    <value>Lists can be combined using ampersand.</value>
  </data>
  <data name="Language_List_Lookup" xml:space="preserve">
    <value>Items from lists can be looked up by their numeric position.</value>
  </data>
  <data name="Language_List_OptionalLookup" xml:space="preserve">
    <value>If the position can be greater than the list length, use ? to return null when out of range.</value>
  </data>
  <data name="Language_Lists" xml:space="preserve">
    <value>Lists are a sequence of values. They are written using curly braces.</value>
  </data>
  <data name="Language_MixedRanges" xml:space="preserve">
    <value>Ranges and single items can both appear in a list.</value>
  </data>
  <data name="Language_NegativeNumber" xml:space="preserve">
    <value>Negative numbers can be written.</value>
  </data>
  <data name="Language_Not" xml:space="preserve">
    <value>Returns the opposite logical value.</value>
  </data>
  <data name="Language_NotEquals" xml:space="preserve">
    <value>&lt;&gt; returns true if the two values are not equal.</value>
  </data>
  <data name="Language_Number" xml:space="preserve">
    <value>Numbers can be written naturally.</value>
  </data>
  <data name="Language_Numbers_Math" xml:space="preserve">
    <value>Numbers can be added, subtracted, multiplied, and divided.</value>
  </data>
  <data name="Language_Or" xml:space="preserve">
    <value>Returns true if either side is true.</value>
  </data>
  <data name="Language_Ranges" xml:space="preserve">
    <value>Ranges are written by using two dots between values.</value>
  </data>
  <data name="Language_Record_Combine" xml:space="preserve">
    <value>Records can be combined using ampersand.</value>
  </data>
  <data name="Language_Record_Lookup" xml:space="preserve">
    <value>Values from records can be looked up by field name.</value>
  </data>
  <data name="Language_Record_MultiLookup" xml:space="preserve">
    <value>A selection of fields can be made from a record by using a series of field references, each wrapped with square brackets.</value>
  </data>
  <data name="Language_Record_OptionalLookup" xml:space="preserve">
    <value>If the field name could potentially be missing, use ? to return null when missing.</value>
  </data>
  <data name="Language_Records" xml:space="preserve">
    <value>Records are named fields and their values. They are written using brackets.</value>
  </data>
  <data name="Language_ScientificNumber" xml:space="preserve">
    <value>Numbers can be written in scientific notation. This represents 100.</value>
  </data>
  <data name="Language_Table_Lookup" xml:space="preserve">
    <value>Items from tables can be looked up by their numeric position.</value>
  </data>
  <data name="Language_Table_LookupByKey" xml:space="preserve">
    <value>Items from tables can be looked up by key.</value>
  </data>
  <data name="Language_Table_MultiProject" xml:space="preserve">
    <value>A selection of columns can be made from a table by using a series of column references, each wrapped with square brackets.</value>
  </data>
  <data name="Language_Table_Project" xml:space="preserve">
    <value>A table column can be extracted as a list of values.</value>
  </data>
  <data name="Language_Tables" xml:space="preserve">
    <value>Tables are a list of like-shaped records.</value>
  </data>
  <data name="Language_Text" xml:space="preserve">
    <value>Text values are written by using double quotes.</value>
  </data>
  <data name="Language_Text_Combine" xml:space="preserve">
    <value>Text values can be combined using ampersand.</value>
  </data>
  <data name="Language_Text_Compares" xml:space="preserve">
    <value>Text values can be compared.</value>
  </data>
  <data name="Language_TimeLiteral" xml:space="preserve">
    <value>time values are written in 24-hour time as #time(hour, minute, second).</value>
  </data>
  <data name="Language_TimeWithZoneLiteral" xml:space="preserve">
    <value>time values with timezone take an optional offset.</value>
  </data>
  <data name="Language_Time_Math" xml:space="preserve">
    <value>time values can be subtracted to produce duration values.</value>
  </data>
  <data name="Language_True" xml:space="preserve">
    <value>Returns the value true.</value>
  </data>
  <data name="LimitClauseKind_AnsiSql2008" xml:space="preserve">
    <value>This SQL dialect supports an ANSI SQL-compatible LIMIT N ROWS specifier to limit the number of rows returned.</value>
  </data>
  <data name="LimitClauseKind_Limit" xml:space="preserve">
    <value>This SQL dialect supports a LIMIT specifier to limit the number of rows returned.</value>
  </data>
  <data name="LimitClauseKind_LimitOffset" xml:space="preserve">
    <value>This SQL dialect supports LIMIT and OFFSET specifiers to limit the number of rows returned.</value>
  </data>
  <data name="LimitClauseKind_None" xml:space="preserve">
    <value>This SQL dialect does not support a limit clause.</value>
  </data>
  <data name="LimitClauseKind_Top" xml:space="preserve">
    <value>This SQL dialect supports a TOP specifier to limit the number of rows returned.</value>
  </data>
  <data name="LimitClauseKind_Type" xml:space="preserve">
    <value>Describes the type of limit clause supported by the SQL dialect used by this data source.</value>
  </data>
  <data name="Lines_FromBinary" xml:space="preserve">
    <value>Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.</value>
  </data>
  <data name="Lines_FromText" xml:space="preserve">
    <value>Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.</value>
  </data>
  <data name="Lines_FromText_Description" xml:space="preserve">
    <value>Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.
        &lt;div&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;code&gt;QuoteStyle.None:&lt;/code&gt; (default) No quoting behavior is needed.&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;QuoteStyle.Csv:&lt;/code&gt; Quoting is as per Csv. A double quote character is used to demarcate such regions, and a pair of double quote characters is used to indicate a single double quote character within such a region. &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
    </value>
  </data>
  <data name="Lines_ToBinary" xml:space="preserve">
    <value>Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.</value>
  </data>
  <data name="Lines_ToText" xml:space="preserve">
    <value>Converts a list of text into a single text.  The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.</value>
  </data>
  <data name="List_Accumulate" xml:space="preserve">
    <value>Accumulates a summary value from the items in the list.</value>
  </data>
  <data name="List_Accumulate_Description" xml:space="preserve">
    <value>Accumulates a summary value from the items in the list {0}, using {2}.
    An optional seed parameter, {1}, may be set.</value>
  </data>
  <data name="List_Accumulate_Example1" xml:space="preserve">
    <value>Accumulates the summary value from the items in the list {1, 2, 3, 4, 5} using ((state, current) =&gt; state + current ).</value>
  </data>
  <data name="List_AllTrue" xml:space="preserve">
    <value>Returns true if all expressions are true.</value>
  </data>
  <data name="List_AllTrue_Description" xml:space="preserve">
    <value>Returns true if all expressions in the list {0} are true.</value>
  </data>
  <data name="List_AllTrue_Example1" xml:space="preserve">
    <value>Determine if all the expressions in the list {true, true, 2 &gt; 0} are true.</value>
  </data>
  <data name="List_AllTrue_Example2" xml:space="preserve">
    <value>Determine if all the expressions in the list {true, true, 2 &lt; 0} are true.</value>
  </data>
  <data name="List_Alternate" xml:space="preserve">
    <value>Returns a list comprised of all the odd numbered offset elements in a list.</value>
  </data>
  <data name="List_Alternate_Description" xml:space="preserve">
    <value>Returns a list comprised of all the odd numbered offset elements in a list. Alternates between taking and skipping values from the list {0} depending on the parameters.
    &lt;ul&gt;
    &lt;li&gt;{1}: Specifies number of values that are skipped each time.&lt;/li&gt;
    &lt;li&gt;{2}: An optional repeat interval to indicate how many values are added in between the skipped values.&lt;/li&gt;
    &lt;li&gt;{3}: An option offset parameter to begin skipping the values at the initial offset.&lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="List_Alternate_Example1" xml:space="preserve">
    <value>Create a list from {1..10} that skips the first number.</value>
  </data>
  <data name="List_Alternate_Example2" xml:space="preserve">
    <value>Create a list from {1..10} that skips every other number.</value>
  </data>
  <data name="List_Alternate_Example3" xml:space="preserve">
    <value>Create a list from {1..10} that starts at 1 and skips every other number.</value>
  </data>
  <data name="List_Alternate_Example4" xml:space="preserve">
    <value>Create a list from {1..10} that starts at 1, skips one value, keeps two values, and so on.</value>
  </data>
  <data name="List_AnyTrue" xml:space="preserve">
    <value>Returns true if any expression is true.</value>
  </data>
  <data name="List_AnyTrue_Description" xml:space="preserve">
    <value>Returns true if any expression in the list {0} is true.</value>
  </data>
  <data name="List_AnyTrue_Example1" xml:space="preserve">
    <value>Determine if any of the expressions in the list {true, false, 2 &gt; 0} are true.</value>
  </data>
  <data name="List_AnyTrue_Example2" xml:space="preserve">
    <value>Determine if any of the expressions in the list {2 = 0, false, 2 &lt; 0} are true.</value>
  </data>
  <data name="List_Average" xml:space="preserve">
    <value>Returns the average of the values. Works with number, date, datetime, datetimezone and duration values.</value>
  </data>
  <data name="List_Average_Description" xml:space="preserve">
    <value>Returns the average value for the items in the list, {0}. The result is given in the same datatype as the values in the list. Only works with number, date, time, datetime, datetimezone and duration values.
    If the list is empty null is returned.</value>
  </data>
  <data name="List_Average_Example1" xml:space="preserve">
    <value>Find the average of the list of numbers, &lt;code&gt;{3, 4, 6}&lt;/code&gt;.</value>
  </data>
  <data name="List_Average_Example2" xml:space="preserve">
    <value>Find the average of the date values January 1, 2011, January 2, 2011 and January 3, 2011.</value>
  </data>
  <data name="List_Buffer" xml:space="preserve">
    <value>Buffers a list.</value>
  </data>
  <data name="List_Buffer_Description" xml:space="preserve">
    <value>Buffers the list {0} in memory. The result of this call is a stable list.</value>
  </data>
  <data name="List_Buffer_Example1" xml:space="preserve">
    <value>Create a stable copy of the list {1..10}.</value>
  </data>
  <data name="List_Combine" xml:space="preserve">
    <value>Returns a single list by combining multiple lists.</value>
  </data>
  <data name="List_Combine_Description" xml:space="preserve">
    <value>Takes a list of lists, {0}, and merges them into a single new list.</value>
  </data>
  <data name="List_Combine_Example1" xml:space="preserve">
    <value>Combine the two simple lists {1, 2} and {3, 4}.</value>
  </data>
  <data name="List_Combine_Example2" xml:space="preserve">
    <value>Combine the two lists, {1, 2} and {3, {4, 5}}, one of which contains a nested list.</value>
  </data>
  <data name="List_ConformToPageReader" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="List_ConformToPageReader_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="List_Contains" xml:space="preserve">
    <value>Indicates whether the list contains the value.</value>
  </data>
  <data name="List_ContainsAll" xml:space="preserve">
    <value>Indicates where a list includes all the values in another list.</value>
  </data>
  <data name="List_ContainsAll_Description" xml:space="preserve">
    <value>Indicates whether the list {0} includes all the values in another list, {1}.
    Returns true if value is found in the list, false otherwise. An optional equation criteria value, {2}, can be specified to control equality testing. </value>
  </data>
  <data name="List_ContainsAll_Example1" xml:space="preserve">
    <value>Find out if the list {1, 2, 3, 4, 5} contains 3 and 4.</value>
  </data>
  <data name="List_ContainsAll_Example2" xml:space="preserve">
    <value>Find out if the list {1, 2, 3, 4, 5} contains 5 and 6.</value>
  </data>
  <data name="List_ContainsAny" xml:space="preserve">
    <value>Indicates where a list includes any of the values in another list.</value>
  </data>
  <data name="List_ContainsAny_Description" xml:space="preserve">
    <value>Indicates whether the list {0} includes any of the values in another list, {1}.
        Returns true if value is found in the list, false otherwise. An optional equation criteria value, {2}, can be specified to control equality testing. </value>
  </data>
  <data name="List_ContainsAny_Example1" xml:space="preserve">
    <value>Find out if the list {1, 2, 3, 4, 5} contains 3 or 9.</value>
  </data>
  <data name="List_ContainsAny_Example2" xml:space="preserve">
    <value>Find out if the list {1, 2, 3, 4, 5} contains 6 or 7.</value>
  </data>
  <data name="List_Contains_Description" xml:space="preserve">
    <value>Indicates whether the list {0} contains the value {1}.
    Returns true if value is found in the list, false otherwise. An optional equation criteria value, {2}, can be specified to control equality testing. </value>
  </data>
  <data name="List_Contains_Example1" xml:space="preserve">
    <value>Find if the list {1, 2, 3, 4, 5} contains 3.</value>
  </data>
  <data name="List_Contains_Example2" xml:space="preserve">
    <value>Find if the list {1, 2, 3, 4, 5} contains 6.</value>
  </data>
  <data name="List_Count" xml:space="preserve">
    <value>Returns the number of items in the list.</value>
  </data>
  <data name="List_Count_Description" xml:space="preserve">
    <value>Returns the number of items in the list {0}.</value>
  </data>
  <data name="List_Count_Example1" xml:space="preserve">
    <value>Find the number of values in the list {1, 2, 3}.</value>
  </data>
  <data name="List_Covariance" xml:space="preserve">
    <value>Returns the covariance between the two lists of numbers.</value>
  </data>
  <data name="List_Covariance_Description" xml:space="preserve">
    <value>Returns the covariance between two lists, {0} and {1}. {0} and {1} must contain the same number of &lt;code&gt;number&lt;/code&gt; values.</value>
  </data>
  <data name="List_Covariance_Example1" xml:space="preserve">
    <value>Calculate the covariance between two lists.</value>
  </data>
  <data name="List_DateTimeZones" xml:space="preserve">
    <value>Generates a list of datetimezone values given an initial value, count, and incremental duration value.</value>
  </data>
  <data name="List_DateTimeZones_Description" xml:space="preserve">
    <value>Returns a list of &lt;code&gt;datetimezone&lt;/code&gt; values of size {1}, starting at {0}. The given increment, {2}, is a &lt;code&gt;duration&lt;/code&gt; value that is added to every value.</value>
  </data>
  <data name="List_DateTimeZones_Example1" xml:space="preserve">
    <value>Create a list of 10 values starting from 5 minutes before New Year's Day (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) incrementing by 1 minute (#duration(0, 0, 1, 0)).</value>
  </data>
  <data name="List_DateTimes" xml:space="preserve">
    <value>Generates a list of datetime values given an initial value, count, and incremental duration value.</value>
  </data>
  <data name="List_DateTimes_Description" xml:space="preserve">
    <value>Returns a list of &lt;code&gt;datetime&lt;/code&gt; values of size {1}, starting at {0}. The given increment, {2}, is a &lt;code&gt;duration&lt;/code&gt; value that is added to every value.</value>
  </data>
  <data name="List_DateTimes_Example1" xml:space="preserve">
    <value>Create a list of 10 values starting from 5 minutes before New Year's Day (#datetime(2011, 12, 31, 23, 55, 0)) incrementing by 1 minute (#duration(0, 0, 1, 0)).</value>
  </data>
  <data name="List_Dates" xml:space="preserve">
    <value>Generates a list of date values given an initial value, count, and incremental duration value.</value>
  </data>
  <data name="List_Dates_Description" xml:space="preserve">
    <value>Returns a list of &lt;code&gt;date&lt;/code&gt; values of size {1}, starting at {0}. The given increment, {2}, is a &lt;code&gt;duration&lt;/code&gt; value that is added to every value.</value>
  </data>
  <data name="List_Dates_Example1" xml:space="preserve">
    <value>Create a list of 5 values starting from New Year's Eve (#date(2011, 12, 31)) incrementing by 1 day(#duration(1, 0, 0, 0)).</value>
  </data>
  <data name="List_Density" xml:space="preserve">
    <value>Returns the frequencies of the values as a table.</value>
  </data>
  <data name="List_Density_Description" xml:space="preserve">
    <value>Computes the density of the list {0} by creating a table of records that reports the count for each value.
    An optional equation criteria value, {1}, can be specified to control equality testing. The first value from each equality group is chosen.</value>
  </data>
  <data name="List_Density_Example1" xml:space="preserve">
    <value>Find the frequency of each value in the following list {1, 2, "A", #date(2005, 1, 10), "A", 2, 2}.</value>
  </data>
  <data name="List_Difference" xml:space="preserve">
    <value>Returns the difference of the two given lists.</value>
  </data>
  <data name="List_Difference_Description" xml:space="preserve">
    <value>Returns the items in list {0} that do not appear in list {1}. Duplicate values are supported.
    An optional equation criteria value, {2}, can be specified to control equality testing. </value>
  </data>
  <data name="List_Difference_Example1" xml:space="preserve">
    <value>Find the items in list {1, 2, 3, 4, 5} that do not appear in {4, 5, 3}.</value>
  </data>
  <data name="List_Difference_Example2" xml:space="preserve">
    <value>Find the items in the list {1, 2} that do not appear in {1, 2, 3}.</value>
  </data>
  <data name="List_Distinct" xml:space="preserve">
    <value>Returns a list of values with duplicates removed.</value>
  </data>
  <data name="List_Distinct_Description" xml:space="preserve">
    <value>Returns a list that contains all the values in list {0} with duplicates removed. If the list is empty, the result is an empty list.</value>
  </data>
  <data name="List_Distinct_Example1" xml:space="preserve">
    <value>Remove the duplicates from the list {1, 1, 2, 3, 3, 3}.</value>
  </data>
  <data name="List_Durations" xml:space="preserve">
    <value>Generates a list of duration values given an initial value, count, and incremental duration value.</value>
  </data>
  <data name="List_Durations_Description" xml:space="preserve">
    <value>Returns a list of {1} &lt;code&gt;duration&lt;/code&gt; values, starting at {0} and incremented by the given &lt;code&gt;duration&lt;/code&gt; {2}.</value>
  </data>
  <data name="List_Durations_Example1" xml:space="preserve">
    <value>Create a list of 5 values starting with 1 hour and incrementing by an hour.</value>
  </data>
  <data name="List_FindText" xml:space="preserve">
    <value>Returns a list of values (including record fields) that contain the specified text.</value>
  </data>
  <data name="List_FindText_Description" xml:space="preserve">
    <value>Returns a list of the values from the list {0} which contained the value {1}.</value>
  </data>
  <data name="List_FindText_Example1" xml:space="preserve">
    <value>Find the text values in the list {"a", "b", "ab"} that match "a". </value>
  </data>
  <data name="List_First" xml:space="preserve">
    <value>Returns the first value of the list or the specified default if empty.</value>
  </data>
  <data name="List_FirstN" xml:space="preserve">
    <value>Returns the first set of items in the list by specifying how many items to return or a qualifying condition.</value>
  </data>
  <data name="List_FirstN_Description" xml:space="preserve">
    <value> &lt;ul&gt;
  &lt;li&gt;If a number is specified, up to that many items are returned. &lt;/li&gt;
  &lt;li&gt;If a condition is specified, all items are returned that initially meet the condition. Once an item fails the condition, no further items are considered. &lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="List_FirstN_Example1" xml:space="preserve">
    <value>Find the intial values in the list {3, 4, 5, -1, 7, 8, 2} that are greater than 0.</value>
  </data>
  <data name="List_First_Description" xml:space="preserve">
    <value>Returns the first item in the list {0}, or the optional default value, {1}, if the list is empty.
    If the list is empty and a default value is not specified, the function returns &lt;code&gt;null&lt;/code&gt;.</value>
  </data>
  <data name="List_First_Example1" xml:space="preserve">
    <value>Find the first value in the list {1, 2, 3}.</value>
  </data>
  <data name="List_First_Example2" xml:space="preserve">
    <value>Find the first value in the list {}. If the list is empty, return -1.</value>
  </data>
  <data name="List_Generate" xml:space="preserve">
    <value>Generates a list of values.</value>
  </data>
  <data name="List_Generate_Description" xml:space="preserve">
    <value>Generates a list of values using the provided functions. The {0} function generates a starting candidate value, which is then tested against {1}.
    If the candidate value is approved, then it's returned as part of the resulting list, and the next candidate value is generated by passing the newly approved value to {2}.
    Once a candidate value fails to match {1}, the list generation process stops.
    An optional parameter, {3}, may also be provided to transform the items in the resulting list.</value>
  </data>
  <data name="List_Generate_Example1" xml:space="preserve">
    <value>Create a list by starting at ten, repeatedly decrementing by one, and ensuring each item is greater than zero.</value>
  </data>
  <data name="List_Generate_Example2" xml:space="preserve">
    <value>Generate a list of records containing x and y, where x is a value and y is a list. x should remain less than 10 and represent the number of items in the list y. After the list is generated, return only the x values.</value>
  </data>
  <data name="List_Histogram" xml:space="preserve">
    <value>Produces a table of duration values with counts.</value>
  </data>
  <data name="List_Histogram_Description" xml:space="preserve">
    <value>Computes the distribution of values in the list {0}, into a table of buckets. These buckets include Start, Center, and End fields (in the unit of the datatype) and a Count of items in the bucket (a number).
    Optional parameters include:
    &lt;ul&gt;
    &lt;li&gt;{1}: the number of buckets desired. If null, the function defaults to the square root of the number of items in the list, rounded up to the next integer.&lt;/li&gt;
    &lt;li&gt;{2}: the start and end values for the entire range, encoded as a list.&lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="List_Histogram_Example1" xml:space="preserve">
    <value>Create a histogram from the list {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}.</value>
  </data>
  <data name="List_Histogram_Example2" xml:space="preserve">
    <value>Create a histogram from the list {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} using 3 buckets.</value>
  </data>
  <data name="List_Histogram_Example3" xml:space="preserve">
    <value>Create a histogram from the list {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} using 4 buckets, with the start value being 2 and the end value being 9.</value>
  </data>
  <data name="List_Index" xml:space="preserve">
    <value>Optimizes the list for lookups given the field selected by the key function.</value>
  </data>
  <data name="List_Index_Description" xml:space="preserve">
    <value>Optimizes the {0} for lookups given the field selected by the {1} function.</value>
  </data>
  <data name="List_Index_Example1" xml:space="preserve">
    <value>Use "each [A]" to use the column [A] as a key in the list {[A = 1, B = 2], [A = 2, B = 3], [A = 3, B = 4]}.</value>
  </data>
  <data name="List_InsertRange" xml:space="preserve">
    <value>Inserts values into a list at the given index.</value>
  </data>
  <data name="List_InsertRange_Description" xml:space="preserve">
    <value>Returns a new list produced by inserting the values in {2} into {0} at {1}. The first position in the list is at index 0.
      &lt;ul&gt;
        &lt;li&gt;{0}: The target list where values are to be inserted.&lt;/li&gt;
        &lt;li&gt;{1}: The index of the target list({0}) where the values are to be inserted. The first position in the list is at index 0.&lt;/li&gt;
        &lt;li&gt;{2}: The list of values which are to be inserted into {0}.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="List_InsertRange_Example1" xml:space="preserve">
    <value>Insert the list ({3, 4}) into the target list ({1, 2, 5}) at index 2.</value>
  </data>
  <data name="List_InsertRange_Example2" xml:space="preserve">
    <value>Insert a list with a nested list ({1, {1.1, 1.2}}) into a target list ({2, 3, 4}) at index 0.</value>
  </data>
  <data name="List_Intersect" xml:space="preserve">
    <value>Returns the intersection of the list values found in the input.</value>
  </data>
  <data name="List_Intersect_Description" xml:space="preserve">
    <value>Returns the intersection of the list values found in the input list {0}. An optional parameter, {1}, can be specified.</value>
  </data>
  <data name="List_Intersect_Example1" xml:space="preserve">
    <value>Find the intersection of the lists {1..5}, {2..6}, {3..7}.</value>
  </data>
  <data name="List_IsDistinct" xml:space="preserve">
    <value>Indicates whether there are duplicates in the list.</value>
  </data>
  <data name="List_IsDistinct_Description" xml:space="preserve">
    <value>Returns a logical value whether there are duplicates in the list {0}; &lt;code&gt;true&lt;/code&gt; if the list is distinct, &lt;code&gt;false&lt;/code&gt; if there are duplicate values. </value>
  </data>
  <data name="List_IsDistinct_Example1" xml:space="preserve">
    <value>Find if the list {1, 2, 3} is distinct (i.e. no duplicates).</value>
  </data>
  <data name="List_IsDistinct_Example2" xml:space="preserve">
    <value>Find if the list {1, 2, 3, 3} is distinct (i.e. no duplicates).</value>
  </data>
  <data name="List_IsEmpty" xml:space="preserve">
    <value>Returns true if the list is empty.</value>
  </data>
  <data name="List_IsEmpty_Description" xml:space="preserve">
    <value>Returns &lt;code&gt;true&lt;/code&gt; if the list, {0}, contains no values (length 0). If the list contains values (length &gt; 0), returns &lt;code&gt;false&lt;/code&gt;.</value>
  </data>
  <data name="List_IsEmpty_Example1" xml:space="preserve">
    <value>Find if the list {} is empty.</value>
  </data>
  <data name="List_IsEmpty_Example2" xml:space="preserve">
    <value>Find if the list {1, 2} is empty.</value>
  </data>
  <data name="List_Last" xml:space="preserve">
    <value>Returns the last value of the list or the specified default if empty.</value>
  </data>
  <data name="List_LastN" xml:space="preserve">
    <value>Returns the last value in the list.  Can optionally specify how many values to return or a qualifying condition.</value>
  </data>
  <data name="List_LastN_Description" xml:space="preserve">
    <value>Returns the last item of the list {0}. If the list is empty, an exception is thrown.
 This function takes an optional parameter, {1}, to support gathering multiple items or filtering items. {1} can be specified in three ways:
 &lt;ul&gt;
  &lt;li&gt;If a number is specified, up to that many items are returned. &lt;/li&gt;
  &lt;li&gt;If a condition is specified, all items are returned that initially meet the condition, starting at the end of the list. Once an item fails the condition, no further items are considered. &lt;/li&gt;
  &lt;li&gt;If this parameter is null the last item in the list is returned.&lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="List_LastN_Example1" xml:space="preserve">
    <value>Find the last value in the list {3, 4, 5, -1, 7, 8, 2}.</value>
  </data>
  <data name="List_LastN_Example2" xml:space="preserve">
    <value>Find the last values in the list {3, 4, 5, -1, 7, 8, 2} that are greater than 0.</value>
  </data>
  <data name="List_Last_Description" xml:space="preserve">
    <value>Returns the last item in the list {0}, or the optional default value, {1}, if the list is empty.
    If the list is empty and a default value is not specified, the function returns &lt;code&gt;null&lt;/code&gt;.</value>
  </data>
  <data name="List_Last_Example1" xml:space="preserve">
    <value>Find the last value in the list {1, 2, 3}.</value>
  </data>
  <data name="List_Last_Example2" xml:space="preserve">
    <value>Find the last value in the list {} or -1 if it empty.</value>
  </data>
  <data name="List_MatchesAll" xml:space="preserve">
    <value>Returns true if the condition function is satisfied by all values in the list.</value>
  </data>
  <data name="List_MatchesAll_Description" xml:space="preserve">
    <value>Returns &lt;code&gt;true&lt;/code&gt; if the condition function, {1}, is satisfied by all values in the list {0}, otherwise returns &lt;code&gt;false&lt;/code&gt;.</value>
  </data>
  <data name="List_MatchesAll_Example1" xml:space="preserve">
    <value>Determine if all the values in the list {11, 12, 13} are greater than 10.</value>
  </data>
  <data name="List_MatchesAll_Example2" xml:space="preserve">
    <value>Determine if all the values in the list {1, 2, 3} are greater than 10.</value>
  </data>
  <data name="List_MatchesAny" xml:space="preserve">
    <value>Returns true if the condition function is satisfied by any value.</value>
  </data>
  <data name="List_MatchesAny_Description" xml:space="preserve">
    <value>Returns &lt;code&gt;true&lt;/code&gt; if the condition function, {1}, is satisfied by any of values in the list {0}, otherwise returns &lt;code&gt;false&lt;/code&gt;.</value>
  </data>
  <data name="List_MatchesAny_Example1" xml:space="preserve">
    <value>Find if any of the values in the list {9, 10, 11} are greater than 10.</value>
  </data>
  <data name="List_MatchesAny_Example2" xml:space="preserve">
    <value>Find if any of the values in the list {1, 2, 3} are greater than 10.</value>
  </data>
  <data name="List_Max" xml:space="preserve">
    <value>Returns the maximum value or the default value for an empty list.</value>
  </data>
  <data name="List_MaxN" xml:space="preserve">
    <value>Returns the maximum value(s) in the list. The number of values to return or a filtering condition must be specified.</value>
  </data>
  <data name="List_MaxN_Description" xml:space="preserve">
    <value>Returns the maximum value(s) in the list, {0}.
    After the rows are sorted, optional parameters may be specified to further filter the result. The optional parameter {1} specifies the number of values to return or a filtering condition. The optional parameter {2} specifies how to compare values in the list.
 &lt;ul&gt;
        &lt;li&gt; {0}: The list of values.&lt;/li&gt;
        &lt;li&gt; {1}: If a number is specified, a list of up to {1} items in ascending order is returned. If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered.&lt;/li&gt;
&lt;li&gt;{2}: &lt;i&gt;[Optional]&lt;/i&gt; An optional {2} value can be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.
 &lt;/ul&gt;</value>
  </data>
  <data name="List_MaxN_Example2" xml:space="preserve">
    <value>Find the top 5 values in the list &lt;code&gt;{3, 4, 5, -1, 7, 8, 2}&lt;/code&gt;.</value>
  </data>
  <data name="List_Max_Description" xml:space="preserve">
    <value>Returns the maximum item in the list {0}, or the optional default value {1} if the list is empty.
    An optional comparisonCriteria value, {2}, may be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.</value>
  </data>
  <data name="List_Max_Example1" xml:space="preserve">
    <value>Find the max in the list {1, 4, 7, 3, -2, 5}.</value>
  </data>
  <data name="List_Max_Example2" xml:space="preserve">
    <value>Find the max in the list {} or return -1 if it is empty. </value>
  </data>
  <data name="List_Median" xml:space="preserve">
    <value>Returns the median value in the list.</value>
  </data>
  <data name="List_Median_Description" xml:space="preserve">
    <value>Returns the median item of the list {0}. This function returns &lt;code&gt;null&lt;/code&gt; if the list contains no non-&lt;code&gt;null&lt;/code&gt; values.
    If there is an even number of items, the function chooses the smaller of the two median items unless the list is
    comprised entirely of datetimes, durations, numbers or times, in which case it returns the average of the two items.</value>
  </data>
  <data name="List_Median_Example1" xml:space="preserve">
    <value>Find the median of the list &lt;code&gt;{5, 3, 1, 7, 9}&lt;/code&gt;.</value>
  </data>
  <data name="List_Min" xml:space="preserve">
    <value>Returns the minimum value or the default value for an empty list.</value>
  </data>
  <data name="List_MinN" xml:space="preserve">
    <value>Returns the minimum value(s) in the list. The number of values to return or a filtering condition may be specified.</value>
  </data>
  <data name="List_MinN_Description" xml:space="preserve">
    <value>Returns the minimum value(s) in the list, {0}.
    The parameter, {1}, specifies the number of values to return or a filtering condition. The optional parameter, {2}, specifies how to compare values in the list.
 &lt;ul&gt;
        &lt;li&gt; {0}: The list of values.&lt;/li&gt;
        &lt;li&gt; {1}: If a number is specified, a list of up to {1} items in ascending order is returned. If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered. If this parameter is null, the single smallest value in the list is returned.&lt;/li&gt;
&lt;li&gt;{2}: &lt;i&gt;[Optional]&lt;/i&gt; An optional {2} value can be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.
 &lt;/ul&gt;</value>
  </data>
  <data name="List_MinN_Example1" xml:space="preserve">
    <value>Find the 5 smallest values in the list &lt;code&gt;{3, 4, 5, -1, 7, 8, 2}&lt;/code&gt;.</value>
  </data>
  <data name="List_Min_Description" xml:space="preserve">
    <value>Returns the minimum item in the list {0}, or the optional default value {1} if the list is empty.
    An optional comparisonCriteria value, {2}, may be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.</value>
  </data>
  <data name="List_Min_Example1" xml:space="preserve">
    <value>Find the min in the list {1, 4, 7, 3, -2, 5}.</value>
  </data>
  <data name="List_Min_Example2" xml:space="preserve">
    <value>Find the min in the list {} or return -1 if it is empty. </value>
  </data>
  <data name="List_Mode" xml:space="preserve">
    <value>Returns the most frequent value in the list.</value>
  </data>
  <data name="List_Mode_Description" xml:space="preserve">
    <value>Returns the item that appears most frequently in the list, {0}. If the list is empty an exception is thrown. If multiple items appear with the same maximum frequency, the last one is chosen.
    An optional &lt;code&gt;comparisonCriteria&lt;/code&gt; value, {1}, can be specified to control equality testing. </value>
  </data>
  <data name="List_Mode_Example1" xml:space="preserve">
    <value>Find the item that appears most frequently in the list &lt;code&gt;{"A", 1, 2, 3, 3, 4, 5}&lt;/code&gt;.</value>
  </data>
  <data name="List_Mode_Example2" xml:space="preserve">
    <value>Find the item that appears most frequently in the list &lt;code&gt;{"A", 1, 2, 3, 3, 4, 5, 5}&lt;/code&gt;.</value>
  </data>
  <data name="List_Modes" xml:space="preserve">
    <value>Returns a list of the most frequent values in the list.</value>
  </data>
  <data name="List_Modes_Description" xml:space="preserve">
    <value>Returns the item that appears most frequently in the list, {0}. If the list is empty an exception is thrown. If multiple items appear with the same maximum frequency, the last one is chosen.
    An optional &lt;code&gt;comparisonCriteria&lt;/code&gt; value, {1}, can be specified to control equality testing. </value>
  </data>
  <data name="List_Modes_Example1" xml:space="preserve">
    <value>Find the items that appears most frequently in the list &lt;code&gt;{"A", 1, 2, 3, 3, 4, 5, 5}&lt;/code&gt;.</value>
  </data>
  <data name="List_NonNullCount" xml:space="preserve">
    <value>Returns the number of non-null items in the list.</value>
  </data>
  <data name="List_NonNullCount_Description" xml:space="preserve">
    <value>Returns the number of non-null items in the list {0}.</value>
  </data>
  <data name="List_Normalize" xml:space="preserve">
    <value>Converts a list of any count into a list of a specified count by padding the list with a default value if the list is too small, or by combining excess values into a list if the list is too large.</value>
  </data>
  <data name="List_Numbers" xml:space="preserve">
    <value>Returns a list of numbers given an initial value, count, and optional increment value.</value>
  </data>
  <data name="List_Numbers_Description" xml:space="preserve">
    <value>Returns a list of numbers given an initial value, count, and optional increment value. The default increment value is 1.
&lt;ul&gt;
   &lt;li&gt;{0}: The initial value in the list.&lt;/li&gt;
   &lt;li&gt;{1}: The number of values to create.&lt;/li&gt;
   &lt;li&gt;{2}: &lt;i&gt;[Optional]&lt;/i&gt; The value to increment by. If omitted values are incremented by 1.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="List_Numbers_Example1" xml:space="preserve">
    <value>Generate a list of 10 consecutive numbers starting at 1.</value>
  </data>
  <data name="List_Numbers_Example2" xml:space="preserve">
    <value>Generate a list of 10 numbers starting at 1, with an increment of 2 for each subsequent number.</value>
  </data>
  <data name="List_ParallelInvoke_Description" xml:space="preserve">
    <value>Evaluates the provided {0} of functions with up to {1} functions evaluated concurrently. The degree to which functions can be evaluated concurrently depends on the operations that they perform.</value>
  </data>
  <data name="List_ParallelInvoke_Example1" xml:space="preserve">
    <value>Construct the list &lt;code&gt;{1, 2, 3}&lt;code&gt; using 2 concurrent evaluations.</value>
  </data>
  <data name="List_Percentile" xml:space="preserve">
    <value>Returns one or more sample percentiles corresponding to the given probabilities.</value>
  </data>
  <data name="List_Percentile_Description" xml:space="preserve">
    <value>Returns one or more sample percentiles of the list {0}. If the value {1} is a number between 0.0 and 1.0, it will be treated as a percentile and the result will be
    a single value corresponding to that probability. If the value {1} is a list of numbers with values between 0.0 and 1.0, the result will be a list of percentiles
    corresponding to the input probability. The PercentileMode option in {2} can be used by advanced users to pick a more-specific interpolation method but is not recommended for most uses.
    Predefined symbols &lt;code&gt;PercentileMode.ExcelInc&lt;/code&gt; and &lt;code&gt;PercentileMode.ExcelExc&lt;/code&gt; match the interpolation methods used by the Excel functions
    &lt;code&gt;PERCENTILE.INC&lt;/code&gt; and &lt;code&gt;PERCENTILE.EXC&lt;/code&gt;. The default behavior matches &lt;code&gt;PercentileMode.ExcelInc&lt;/code&gt;. The symbols
    &lt;code&gt;PercentileMode.SqlCont&lt;/code&gt; and &lt;code&gt;PercentileMode.SqlDisc&lt;/code&gt; match the SQL Server behavior for &lt;code&gt;PERCENTILE_CONT&lt;/code&gt; and
    &lt;code&gt;PERCENTILE_DISC&lt;/code&gt;, respectively.
  </value>
  </data>
  <data name="List_Percentile_Example1" xml:space="preserve">
    <value>Find the first quartile of the list &lt;code&gt;{5, 3, 1, 7, 9}&lt;/code&gt;.</value>
  </data>
  <data name="List_Percentile_Example2" xml:space="preserve">
    <value>Find the quartiles of the list &lt;code&gt;{5, 3, 1, 7, 9}&lt;/code&gt; using an interpolation method matching Excel's &lt;code&gt;PERCENTILE.EXC&lt;/code&gt;.</value>
  </data>
  <data name="List_PositionOf" xml:space="preserve">
    <value>Returns the offset(s) of a value in a list.</value>
  </data>
  <data name="List_PositionOfAny" xml:space="preserve">
    <value>Returns the first offset of a value in a list.</value>
  </data>
  <data name="List_PositionOfAny_Description" xml:space="preserve">
    <value>Returns the offset in list {0} of the first occurrence of a value in a list {1}. Returns -1 if no occurrence is found.
    An optional occurrence parameter {2} can be specified.
&lt;ul&gt;
   &lt;li&gt;{2}: The maximum number of occurrences that can be returned.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="List_PositionOfAny_Example1" xml:space="preserve">
    <value>Find the first position in the list {1, 2, 3} at which the value 2 or 3 appears.</value>
  </data>
  <data name="List_PositionOf_Description" xml:space="preserve">
    <value>Returns the offset at which the value {1} appears in the list {0}. Returns -1 if the value doesn't appear.
    An optional occurrence parameter {2} can be specified.
&lt;ul&gt;
   &lt;li&gt;{2}: The maximum number of occurrences to report.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="List_PositionOf_Example1" xml:space="preserve">
    <value>Find the position in the list {1, 2, 3} at which the value 3 appears.</value>
  </data>
  <data name="List_Positions" xml:space="preserve">
    <value>Returns a list of offsets for the input.</value>
  </data>
  <data name="List_Positions_Description" xml:space="preserve">
    <value>Returns a list of offsets for the input list {0}.
    When using List.Transform to change a list, the list of positions can be used to give the transform access to the position.</value>
  </data>
  <data name="List_Positions_Example1" xml:space="preserve">
    <value>Find the offsets of values in the list {1, 2, 3, 4, null, 5}.</value>
  </data>
  <data name="List_Product" xml:space="preserve">
    <value>Returns the product of the numbers in the list.</value>
  </data>
  <data name="List_Product_Description" xml:space="preserve">
    <value>Returns the product of the non-null numbers in the list, {0}. Returns null if there are no non-null values in the list.</value>
  </data>
  <data name="List_Product_Example1" xml:space="preserve">
    <value>Find the product of the numbers in the list &lt;code&gt;{1, 2, 3, 3, 4, 5, 5}&lt;/code&gt;.</value>
  </data>
  <data name="List_Random" xml:space="preserve">
    <value>Returns a list of random numbers.</value>
  </data>
  <data name="List_Random_Description" xml:space="preserve">
    <value>Returns a list of random numbers between 0 and 1, given the number of values to generate and an optional seed value.
&lt;ul&gt;
   &lt;li&gt;{0}: The number of random values to generate.&lt;/li&gt;
   &lt;li&gt;{1}:  &lt;i&gt;[Optional]&lt;/i&gt; A numeric value used to seed the random number generator.  If omitted a unique list of random numbers is generated each time you call the function.  If you specify the seed value with a number every call to the function generates the same list of random numbers.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="List_Random_Example1" xml:space="preserve">
    <value>Create a list of 3 random numbers.</value>
  </data>
  <data name="List_Random_Example2" xml:space="preserve">
    <value>Create a list of 3 random numbers, specifying seed value.</value>
  </data>
  <data name="List_Range" xml:space="preserve">
    <value>Returns a subset of the list beginning at an offset.</value>
  </data>
  <data name="List_Range_Description" xml:space="preserve">
    <value>Returns a subset of the list beginning at the offset {0}. An optional parameter, {1}, sets the maximum number of items in the subset.</value>
  </data>
  <data name="List_Range_Example1" xml:space="preserve">
    <value>Find the subset starting at offset 6 of the list of numbers 1 through 10.</value>
  </data>
  <data name="List_Range_Example2" xml:space="preserve">
    <value>Find the subset of length 2 from offset 6, from the list of numbers 1 through 10.</value>
  </data>
  <data name="List_RemoveFirstN" xml:space="preserve">
    <value>Returns a list that skips the specified number of elements at the beginning of the list.</value>
  </data>
  <data name="List_RemoveFirstN_Description" xml:space="preserve">
    <value>Returns a list that removes the first element of list {0}. If {0} is an empty list an empty list is returned.
This function takes an optional parameter, {1}, to support removing multiple values as listed below.
 &lt;ul&gt;
 &lt;li&gt;If a number is specified, up to that many items are removed. &lt;/li&gt;
 &lt;li&gt;If a condition is specified, any consecutive matching items at the start of {0} are removed.&lt;/li&gt;
 &lt;li&gt;If this parameter is null, the default behavior is observed. &lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="List_RemoveFirstN_Example1" xml:space="preserve">
    <value>Create a list from {1, 2, 3, 4, 5} without the first 3 numbers.</value>
  </data>
  <data name="List_RemoveFirstN_Example2" xml:space="preserve">
    <value>Create a list from {5, 4, 2, 6, 1} that starts with a number less than 3.</value>
  </data>
  <data name="List_RemoveItems" xml:space="preserve">
    <value>Removes items from list1 that are present in list.</value>
  </data>
  <data name="List_RemoveItems_Description" xml:space="preserve">
    <value>Removes all occurrences of the given values in the {1} from {0}. If the values in {1} don't exist in {0}, the original list is returned.</value>
  </data>
  <data name="List_RemoveItems_Example1" xml:space="preserve">
    <value>Remove the items in the list {2, 4, 6} from the list {1, 2, 3, 4, 2, 5, 5}.</value>
  </data>
  <data name="List_RemoveLastN" xml:space="preserve">
    <value>Returns a list that removes the specified number of elements from the end of the list.</value>
  </data>
  <data name="List_RemoveLastN_Description" xml:space="preserve">
    <value>Returns a list that removes the last {1} elements from the end of list {0}. If {0} has less than {1} elements, an empty list is returned.
 &lt;ul&gt;
 &lt;li&gt;If a number is specified, up to that many items are removed. &lt;/li&gt;
 &lt;li&gt;If a condition is specified, any consecutive matching items at the end of {0} are removed.&lt;/li&gt;
 &lt;li&gt;If this parameter is null, only one item is removed. &lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="List_RemoveLastN_Example1" xml:space="preserve">
    <value>Create a list from {1, 2, 3, 4, 5} without the last 3 numbers.</value>
  </data>
  <data name="List_RemoveLastN_Example2" xml:space="preserve">
    <value>Create a list from {5, 4, 2, 6, 4} that ends with a number less than 3.</value>
  </data>
  <data name="List_RemoveMatchingItems" xml:space="preserve">
    <value>Removes all occurrences of the input values.</value>
  </data>
  <data name="List_RemoveMatchingItems_Description" xml:space="preserve">
    <value>Removes all occurrences of the given values in {1} from the list {0}. If the values in {1} don't exist in {0}, the original list is returned.
    An optional equation criteria value, {2}, can be specified to control equality testing. </value>
  </data>
  <data name="List_RemoveMatchingItems_Example1" xml:space="preserve">
    <value>Create a list from {1, 2, 3, 4, 5, 5} without {1, 5}.</value>
  </data>
  <data name="List_RemoveNulls" xml:space="preserve">
    <value>Removes all "null" values from the specified list.</value>
  </data>
  <data name="List_RemoveNulls_Description" xml:space="preserve">
    <value>Removes all occurrences of "null" values in the {0}. If there are no 'null' values in the list, the original list is returned.</value>
  </data>
  <data name="List_RemoveNulls_Example1" xml:space="preserve">
    <value>Remove the "null" values from the list {1, 2, 3, null, 4, 5, null, 6}.</value>
  </data>
  <data name="List_RemoveRange" xml:space="preserve">
    <value>Removes count number of values starting at the specified position.</value>
  </data>
  <data name="List_RemoveRange_Description" xml:space="preserve">
    <value>Removes {2} values in the {0} starting at the specified position, {1}.</value>
  </data>
  <data name="List_RemoveRange_Example1" xml:space="preserve">
    <value>Remove 3 values in the list {1, 2, 3, 4, -6, -2, -1, 5} starting at index 4.</value>
  </data>
  <data name="List_Repeat" xml:space="preserve">
    <value>Returns a list that is count repetitions of the original list.</value>
  </data>
  <data name="List_Repeat_Description" xml:space="preserve">
    <value>Returns a list that is {1} repetitions of the original list, {0}.</value>
  </data>
  <data name="List_Repeat_Example1" xml:space="preserve">
    <value>Create a list that has {1, 2} repeated 3 times.</value>
  </data>
  <data name="List_ReplaceMatchingItems" xml:space="preserve">
    <value>Applies each replacement of { old, new }.</value>
  </data>
  <data name="List_ReplaceMatchingItems_Description" xml:space="preserve">
    <value>Performs the given replacements to the list {0}. A replacement operation {1} consists of a list of two values, the old value and new value, provided in a list.
    An optional equation criteria value, {2}, can be specified to control equality testing.</value>
  </data>
  <data name="List_ReplaceMatchingItems_Example1" xml:space="preserve">
    <value>Create a list from {1, 2, 3, 4, 5} replacing the value 5 with -5, and the value 1 with -1.</value>
  </data>
  <data name="List_ReplaceRange" xml:space="preserve">
    <value>Replaces count number of values starting at position with the replacement values.</value>
  </data>
  <data name="List_ReplaceRange_Description" xml:space="preserve">
    <value>Replaces {2} values in the {0} with the list {3}, starting at specified position, {1}.</value>
  </data>
  <data name="List_ReplaceRange_Example1" xml:space="preserve">
    <value>Replace {7, 8, 9} in the list {1, 2, 7, 8, 9, 5} with {3, 4}.</value>
  </data>
  <data name="List_ReplaceValue" xml:space="preserve">
    <value>Searches a list for the specified value and replaces it.</value>
  </data>
  <data name="List_ReplaceValue_Description" xml:space="preserve">
    <value>Searches a list of values, {0}, for the value {1} and replaces each occurrence with the replacement value {2}.</value>
  </data>
  <data name="List_ReplaceValue_Example1" xml:space="preserve">
    <value>Replace all the "a" values in the list {"a", "B", "a", "a"} with "A".</value>
  </data>
  <data name="List_Reverse" xml:space="preserve">
    <value>Reverses the order of values in the list.</value>
  </data>
  <data name="List_Reverse_Description" xml:space="preserve">
    <value>Returns a list with the values in the list {0} in reversed order.</value>
  </data>
  <data name="List_Reverse_Example1" xml:space="preserve">
    <value>Create a list from {1..10} in reverse order.</value>
  </data>
  <data name="List_Select" xml:space="preserve">
    <value>Returns a list of values that match the condition.</value>
  </data>
  <data name="List_Select_Description" xml:space="preserve">
    <value>Returns a list of values from the list {0}, that match the selection condition {1}.</value>
  </data>
  <data name="List_Select_Example1" xml:space="preserve">
    <value>Find the values in the list {1, -3, 4, 9, -2} that are greater than 0.</value>
  </data>
  <data name="List_Single" xml:space="preserve">
    <value>Returns the one list item for a list of length one, otherwise throws an exception.</value>
  </data>
  <data name="List_SingleOrDefault" xml:space="preserve">
    <value>Returns the one list item for a list of length one and the default value for an empty list.</value>
  </data>
  <data name="List_SingleOrDefault_Description" xml:space="preserve">
    <value>If there is only one item in the list {0}, returns that item.
    If the list is empty, the function returns null unless an optional {1} is specified. If there is more than one item in the list, the function returns an error.</value>
  </data>
  <data name="List_SingleOrDefault_Example1" xml:space="preserve">
    <value>Find the single value in the list {1}.</value>
  </data>
  <data name="List_SingleOrDefault_Example2" xml:space="preserve">
    <value>Find the single value in the list {}.</value>
  </data>
  <data name="List_SingleOrDefault_Example3" xml:space="preserve">
    <value>Find the single value in the list {}. If is empty, return -1.</value>
  </data>
  <data name="List_Single_Description" xml:space="preserve">
    <value>If there is only one item in the list {0}, returns that item.
    If there is more than one item or the list is empty, the function throws an exception.</value>
  </data>
  <data name="List_Single_Example1" xml:space="preserve">
    <value>Find the single value in the list {1}.</value>
  </data>
  <data name="List_Single_Example2" xml:space="preserve">
    <value>Find the single value in the list {1, 2, 3}.</value>
  </data>
  <data name="List_Skip" xml:space="preserve">
    <value>Returns a list that skips the specified number of elements at the beginning of the list.</value>
  </data>
  <data name="List_Skip_Description" xml:space="preserve">
    <value>Returns a list that skips the first element of list {0}. If {0} is an empty list an empty list is returned.
This function takes an optional parameter, {1}, to support skipping multiple values as listed below.
 &lt;ul&gt;
 &lt;li&gt;If a number is specified, up to that many items are skipped. &lt;/li&gt;
 &lt;li&gt;If a condition is specified, any consecutive matching items at the start of {0} are skipped.&lt;/li&gt;
 &lt;li&gt;If this parameter is null, the default behavior is observed. &lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="List_Skip_Example1" xml:space="preserve">
    <value>Create a list from {1, 2, 3, 4, 5} without the first 3 numbers.</value>
  </data>
  <data name="List_Skip_Example2" xml:space="preserve">
    <value>Create a list from {5, 4, 2, 6, 1} that starts with a number less than 3.</value>
  </data>
  <data name="List_Sort" xml:space="preserve">
    <value>Sorts a list of data according to the criteria specified.</value>
  </data>
  <data name="List_Sort_Description" xml:space="preserve">
    <value>Sorts a list of data, {0}, according to the optional criteria specified.
    An optional parameter, {1}, can be specified as the comparison criterion. This can take the following values:
    &lt;ul&gt;
    &lt;li&gt; To control the order, the comparison criterion can be an Order enum value. (&lt;code&gt;Order.Descending&lt;/code&gt;, &lt;code&gt;Order.Ascending&lt;/code&gt;). &lt;/li&gt;
    &lt;li&gt; To compute a key to be used for sorting, a function of 1 argument can be used. &lt;/li&gt;
    &lt;li&gt; To both select a key and control order, comparison criterion can be a list containing the key and order (&lt;code&gt;{{each 1 / _, Order.Descending}}&lt;/code&gt;). &lt;/li&gt;
    &lt;li&gt; To completely control the comparison, a function of 2 arguments can be used. This function will be passed two items from the list (any two items, in any order). The function should return one of the following values:
        &lt;ul&gt;
            &lt;li&gt; &lt;code&gt;-1&lt;/code&gt;: The first item is less than the second item.&lt;/li&gt;
            &lt;li&gt; &lt;code&gt;0&lt;/code&gt;: The items are equal.&lt;/li&gt;
            &lt;li&gt; &lt;code&gt;1&lt;/code&gt;: The first item is greater than the second item.&lt;/li&gt;
        &lt;/ul&gt;
        Value.Compare is a method that can be used to delegate this logic. &lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="List_Sort_Example1" xml:space="preserve">
    <value>Sort the list {2, 3, 1}.</value>
  </data>
  <data name="List_Sort_Example2" xml:space="preserve">
    <value>Sort the list {2, 3, 1} in descending order.</value>
  </data>
  <data name="List_Sort_Example3" xml:space="preserve">
    <value>Sort the list {2, 3, 1} in descending order using the Value.Compare method.</value>
  </data>
  <data name="List_Split" xml:space="preserve">
    <value>Splits the specified list into a list of lists using the specified page size.</value>
  </data>
  <data name="List_Split_Description" xml:space="preserve">
    <value>Splits {0} into a list of lists where the first element of the output list is a list containing the first {1} elements from
    the source list, the next element of the output list is a list containing the next {1} elements from the source list, and so on.</value>
  </data>
  <data name="List_StandardDeviation" xml:space="preserve">
    <value>Returns a sample based estimate of the standard deviation.</value>
  </data>
  <data name="List_StandardDeviation_Description" xml:space="preserve">
    <value>Returns a sample based estimate of the standard deviation of the values in the list, {0}.
    If {0} is a list of numbers, a number is returned.
    An exception is thrown on an empty list or a list of items that is not type &lt;code&gt;number&lt;/code&gt;.</value>
  </data>
  <data name="List_StandardDeviation_Example1" xml:space="preserve">
    <value>Find the standard deviation of the numbers 1 through 5.</value>
  </data>
  <data name="List_Sum" xml:space="preserve">
    <value>Returns the sum of the items in the list.</value>
  </data>
  <data name="List_Sum_Description" xml:space="preserve">
    <value>Returns the sum of the non-null values in the list, {0}.  Returns null if there are no non-null values in the list.</value>
  </data>
  <data name="List_Sum_Example1" xml:space="preserve">
    <value>Find the sum of the numbers in the list &lt;code&gt;{1, 2, 3}&lt;/code&gt;.</value>
  </data>
  <data name="List_Times" xml:space="preserve">
    <value>Generates a list of time values given an initial value, count, and incremental duration value.</value>
  </data>
  <data name="List_Times_Description" xml:space="preserve">
    <value>Returns a list of &lt;code&gt;time&lt;/code&gt; values of size {1}, starting at {0}. The given increment, {2}, is a &lt;code&gt;duration&lt;/code&gt; value that is added to every value.</value>
  </data>
  <data name="List_Times_Example1" xml:space="preserve">
    <value>Create a list of 4 values starting from noon (#time(12, 0, 0)) incrementing by one hour (#duration(0, 1, 0, 0)).</value>
  </data>
  <data name="List_Transform" xml:space="preserve">
    <value>Returns a new list of values computed from this list.</value>
  </data>
  <data name="List_TransformMany" xml:space="preserve">
    <value>Returns a list whose elements are transformed from the input list using specified functions.</value>
  </data>
  <data name="List_TransformMany_Description" xml:space="preserve">
    <value>Returns a list whose elements are projected from the input list.&lt;br&gt;
    &lt;br&gt;
    The {1} function transforms each element into an intermediate list, and the {2} function receives the original element as well as an item from the intermediate list in order to construct the final result.&lt;br&gt;
    &lt;br&gt;
    The {1} function has the signature &lt;code&gt;(x as any) as list =&gt; ...&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is an element in {0}.
    The {2} function projects the shape of the result and has the signature &lt;code&gt;(x as any, y as any) as any =&gt; ...&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is an element in {0} and &lt;code&gt;y&lt;/code&gt; is an element from the list generated by passing &lt;code&gt;x&lt;/code&gt; to {1}.</value>
  </data>
  <data name="List_TransformMany_Example1" xml:space="preserve">
    <value>Flatten a list of people and their pets.</value>
  </data>
  <data name="List_Transform_Description" xml:space="preserve">
    <value>Returns a new list of values by applying the transform function {1} to the list, {0}.</value>
  </data>
  <data name="List_Transform_Example1" xml:space="preserve">
    <value>Add 1 to each value in the list {1, 2}.</value>
  </data>
  <data name="List_Type" xml:space="preserve">
    <value>The type that represents all lists.</value>
  </data>
  <data name="List_Union" xml:space="preserve">
    <value>Returns the union of the list values found in the input.</value>
  </data>
  <data name="List_Union_Description" xml:space="preserve">
    <value>Takes a list of lists {0}, unions the items in the individual lists and returns them in the output list. As a result, the returned list contains all items in any input lists.
    This operation maintains traditional bag semantics, so duplicate values are matched as part of the Union.
    An optional equation criteria value, {1}, can be specified to control equality testing. </value>
  </data>
  <data name="List_Union_Example1" xml:space="preserve">
    <value>Create a union of the list {1..5}, {2..6}, {3..7}.</value>
  </data>
  <data name="List_Zip" xml:space="preserve">
    <value>Returns a list of lists by combining items at the same position in multiple lists.</value>
  </data>
  <data name="List_Zip_Description" xml:space="preserve">
    <value>Takes a list of lists, {0}, and returns a list of lists combining items at the same position.</value>
  </data>
  <data name="List_Zip_Example1" xml:space="preserve">
    <value>Zips the two simple lists {1, 2} and {3, 4}.</value>
  </data>
  <data name="List_Zip_Example2" xml:space="preserve">
    <value>Zips the two simple lists of different lengths {1, 2} and {3}.</value>
  </data>
  <data name="LogLevel_Type" xml:space="preserve">
    <value>Specifies the tracing level.</value>
  </data>
  <data name="Logical_Constants_False" xml:space="preserve">
    <value>Returns the value false.</value>
  </data>
  <data name="Logical_Constants_True" xml:space="preserve">
    <value>Returns the value true.</value>
  </data>
  <data name="Logical_From" xml:space="preserve">
    <value>Creates a logical from the given value.</value>
  </data>
  <data name="Logical_FromText" xml:space="preserve">
    <value>Creates a logical value from the text values "true" and "false".</value>
  </data>
  <data name="Logical_FromText_Description" xml:space="preserve">
    <value>Creates a logical value from the text value {0}, either "true" or "false". If {0} contains a different string, an exception is thrown. The text value {0} is case insensitive.</value>
  </data>
  <data name="Logical_FromText_Example1" xml:space="preserve">
    <value>Create a logical value from the text string "true".</value>
  </data>
  <data name="Logical_FromText_Example2" xml:space="preserve">
    <value>Create a logical value from the text string "a".</value>
  </data>
  <data name="Logical_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;logical&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Logical.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;logical&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;logical&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;logical&lt;/code&gt; value from the text value, either &lt;code&gt;"true"&lt;/code&gt; or &lt;code&gt;"false"&lt;/code&gt;. Refer to &lt;code&gt;Logical.FromText&lt;/code&gt; for details.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;number&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt; if {0} equals &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; otherwise.&lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="Logical_From_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;2&lt;/code&gt; to a &lt;code&gt;logical&lt;/code&gt; value.</value>
  </data>
  <data name="Logical_ToText" xml:space="preserve">
    <value>Returns the text "true" or "false" given a logical value.</value>
  </data>
  <data name="Logical_ToText_Description" xml:space="preserve">
    <value>Creates a text value from the logical value {0}, either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. If {0} is not a logical value, an exception is thrown.</value>
  </data>
  <data name="Logical_ToText_Example1" xml:space="preserve">
    <value>Create a text value from the logical &lt;code&gt;true&lt;/code&gt;.</value>
  </data>
  <data name="Logical_Type" xml:space="preserve">
    <value>The type that represents all logical values.</value>
  </data>
  <data name="MQ_Queue" xml:space="preserve">
    <value>Returns a table of messages available in the queue via a non-destructive read.</value>
  </data>
  <data name="MQ_Queue_Description" xml:space="preserve">
    <value>Returns a table that defines the IBM WebSphere MQ Server information required for reading and writing messages. It requires the following parameters:
    &lt;ul&gt;
    &lt;li&gt; &lt;code&gt;Server&lt;/code&gt; name or address with an optional port number, separated by a colon, {0} (port 1414 will be used by default).&lt;/li&gt;
    &lt;li&gt; The name of the &lt;code&gt;queue manager&lt;/code&gt;, {1} on the MQ server.&lt;/li&gt;
    &lt;li&gt; The name of the &lt;code&gt;channel&lt;/code&gt;, {2} for the queue manager on the MQ server.&lt;/li&gt;
    &lt;li&gt; The name of the &lt;code&gt;queue&lt;/code&gt;, {3} to be accessed.&lt;/li&gt;
    &lt;/ul&gt;

    When this function is enumerated it returns a table containing messages in the queue via a non-destructive read.

    An optional record parameter, {4}, may be specified to control the following options:
    &lt;ul&gt;
    &lt;li&gt; &lt;code&gt;BinaryDisplayEncoding&lt;/code&gt; : The binary value will be returned as text with the specified encoding. Affects the following columns in the output: MessageId, CorrelationId, AccountingToken, GroupId, and MsgToken. If it's not specified, the value will be returned as a binary value. The following values may be used:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;BinaryEncoding.Base64&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;BinaryEncoding.Hex&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;TextEncoding.Utf16&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;TextEncoding.Unicode&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;TextEncoding.BigEndianUnicode&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;TextEncoding.Windows&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;TextEncoding.Ascii&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;TextEncoding.Utf8&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt; &lt;code&gt;MessageDataDisplayEncoding&lt;/code&gt; : Message Data is returned as a UTF8 representation of the underlying binary value by default. Supports the same values as the &lt;code&gt;BinaryDisplayEncoding&lt;/code&gt; option. Also supports &lt;code&gt;type binary&lt;/code&gt; to retrieve the message data as a binary value.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;Timeout&lt;/code&gt; : If a message is not in the queue, wait this amount of time for a message to appear. The default value is zero. Specified as a duration.&lt;/li&gt;
    &lt;/ul&gt;

    The record parameter is specified as [option1 = value1, option2 = value2...] or [BinaryDisplayEncoding = BinaryEncoding.Hex] for example.

    &lt;code&gt;Table.SelectRows&lt;/code&gt; may be used to filter the messages to be retrieved from the queue. The following columns will be folded into the query:
    &lt;ul&gt;
      &lt;li&gt; &lt;code&gt;MessageId&lt;/code&gt; : The message identifier of the MQ message to be retrieved. This can be a text or binary value.&lt;/li&gt;
      &lt;li&gt; &lt;code&gt;CorrelationId&lt;/code&gt; : The correlation identifier of the MQ message to be retrieved. This can be a text or binary value.&lt;/li&gt;
      &lt;li&gt; &lt;code&gt;MessageToken&lt;/code&gt; : The message token of the MQ message to be retrieved. This can be a text or binary value.&lt;/li&gt;
      &lt;li&gt; &lt;code&gt;GroupId&lt;/code&gt; : The group identifier of the MQ message to be retrieved. This can be a text or binary value.&lt;/li&gt;
      &lt;li&gt; &lt;code&gt;Offset&lt;/code&gt; : The offset of the MQ message to be retrieved. This is an integer value. (Not available on MQ z/OS).&lt;/li&gt;
      &lt;li&gt; &lt;code&gt;LogicalSequenceNumber&lt;/code&gt; : The logical sequence number of the MQ message to be retrieved. This is an integer value.&lt;/li&gt;
    &lt;/ul&gt;
    Note that when these columns are combined with other non-foldable columns the query might not be folded.

    &lt;code&gt;Table.FirstN&lt;/code&gt; may be used to limit the number of messages retrieved from the queue. When not specified, only the first 500 messages will be retrieved.

    &lt;code&gt;Table.SelectColumns&lt;/code&gt; may be used to restrict the columns returned by the function.

    &lt;code&gt;TableAction.DeleteRows&lt;/code&gt; may be used to destructively get messages from the queue.

    &lt;code&gt;TableAction.InsertRows&lt;/code&gt; may be used to send messages to the queue. The following message properties are writable:
    &lt;ul&gt;
    &lt;li&gt; &lt;code&gt;MessageData&lt;/code&gt; : Message data. This is the only required column. Can be a text or binary value.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;CorrelationId&lt;/code&gt; : The correlation identifier of the MQ message to be sent. This can be a text or binary value.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;Ccsid&lt;/code&gt; : The character set for the message. By default, the character set on the MQ Server will be used.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;MessageId&lt;/code&gt; : The message identifier of the MQ message to be sent. This can be a text or binary value.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;MessageType&lt;/code&gt; : Valid message types are "Datagram", "Reply", or "Request". The default value is "Datagram".&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;Offset&lt;/code&gt; : Message offset. The default is 0.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;ReplyToQueue&lt;/code&gt; : If the message type is "Request", then the Reply to Queue can be specified. The default is to use the queue as defined in &lt;code&gt;MQ.Queue&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;ReplyToQueueManager&lt;/code&gt; : Name of the Queue Manager for the ReplyToQueue. The default is to use the queue manager as defined in &lt;code&gt;MQ.Queue&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Mashup_Document" xml:space="preserve">
    <value>Imports the contents of a Document.</value>
  </data>
  <data name="MissingField_Error" xml:space="preserve">
    <value>An optional parameter in record and table functions indicating that missing fields should result in an error. (This is the default parameter value.)</value>
  </data>
  <data name="MissingField_Ignore" xml:space="preserve">
    <value>An optional parameter in record and table functions indicating that missing fields should be ignored.</value>
  </data>
  <data name="MissingField_Type" xml:space="preserve">
    <value>Specifies the expected action for missing values in a row that contains columns less than expected.</value>
  </data>
  <data name="MissingField_UseNull" xml:space="preserve">
    <value>An optional parameter in record and table functions indicating that missing fields should be included as null values.</value>
  </data>
  <data name="Module_Versions" xml:space="preserve">
    <value>Returns a record of module versions for the current module and its dependencies.</value>
  </data>
  <data name="Module_Versions_Description" xml:space="preserve">
    <value>Returns a record of module versions for the current module and its dependencies.</value>
  </data>
  <data name="MySQL_Database" xml:space="preserve">
    <value>Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database.</value>
  </data>
  <data name="MySQL_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database on server {0} in the database instance named {1}. The port may be optionally specified with the server, separated by a colon. An optional record parameter, {2}, may be specified to control the following options:
    {2:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="Null_Type" xml:space="preserve">
    <value>The type that represents null.</value>
  </data>
  <data name="Nullable_Type" xml:space="preserve">
    <value>The type that represents all nullable types.</value>
  </data>
  <data name="Number_Abs" xml:space="preserve">
    <value>Returns the absolute value of the number.</value>
  </data>
  <data name="Number_Abs_Description" xml:space="preserve">
    <value>Returns the absolute value of {0}. If {0} is null, &lt;code&gt;Number.Abs&lt;/code&gt; returns null.
    &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;number&lt;/code&gt; for which the absolute value is to be calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Number_Abs_Example1" xml:space="preserve">
    <value>Absolute value of -3.</value>
  </data>
  <data name="Number_Acos" xml:space="preserve">
    <value>Returns the arccosine of the number.</value>
  </data>
  <data name="Number_Acos_Description" xml:space="preserve">
    <value>Returns the arccosine of {0}.</value>
  </data>
  <data name="Number_Asin" xml:space="preserve">
    <value>Returns the arcsine of the number.</value>
  </data>
  <data name="Number_Asin_Description" xml:space="preserve">
    <value>Returns the arcsine of {0}.</value>
  </data>
  <data name="Number_Atan" xml:space="preserve">
    <value>Returns the arctangent of the number.</value>
  </data>
  <data name="Number_Atan2" xml:space="preserve">
    <value>Returns the arctangent of the division of the two numbers.</value>
  </data>
  <data name="Number_Atan2_Description" xml:space="preserve">
    <value>Returns the arctangent of the division of the two numbers, {0} and {1}. The divison will be constructed as {0}/{1}.</value>
  </data>
  <data name="Number_Atan_Description" xml:space="preserve">
    <value>Returns the arctangent of {0}.</value>
  </data>
  <data name="Number_BitwiseAnd" xml:space="preserve">
    <value>Returns the result of performing a bitwise "And" operation between the two inputs.</value>
  </data>
  <data name="Number_BitwiseAnd_Description" xml:space="preserve">
    <value>Returns the result of performing a bitwise "And" operation between {0} and {1}.</value>
  </data>
  <data name="Number_BitwiseNot" xml:space="preserve">
    <value>Returns a byte where each bit is the opposite of the input.</value>
  </data>
  <data name="Number_BitwiseNot_Description" xml:space="preserve">
    <value>Returns the result of performing a bitwise "Not" operation on {0}.</value>
  </data>
  <data name="Number_BitwiseOr" xml:space="preserve">
    <value>Returns the result of performing a bitwise "Or" between the two inputs.</value>
  </data>
  <data name="Number_BitwiseOr_Description" xml:space="preserve">
    <value>Returns the result of performing a bitwise "Or" between {0} and {1}.</value>
  </data>
  <data name="Number_BitwiseShiftLeft" xml:space="preserve">
    <value>Shifts the bits set to the left.</value>
  </data>
  <data name="Number_BitwiseShiftLeft_Description" xml:space="preserve">
    <value>Returns the result of performing a bitwise shift to the left on {0}, by the specified number of bits {1}.</value>
  </data>
  <data name="Number_BitwiseShiftRight" xml:space="preserve">
    <value>Shifts the bits set to the right.</value>
  </data>
  <data name="Number_BitwiseShiftRight_Description" xml:space="preserve">
    <value>Returns the result of performing a bitwise shift to the right on {0}, by the specified number of bits {1}.</value>
  </data>
  <data name="Number_BitwiseXor" xml:space="preserve">
    <value>Returns the result of performing a bitwise "XOR" (Exclusive-OR) between the two inputs.</value>
  </data>
  <data name="Number_BitwiseXor_Description" xml:space="preserve">
    <value>Returns the result of performing a bitwise "XOR" (Exclusive-OR) between {0} and {1}.</value>
  </data>
  <data name="Number_Combinations" xml:space="preserve">
    <value>Returns the number of unique combinations.</value>
  </data>
  <data name="Number_Combinations_Description" xml:space="preserve">
    <value>Returns the number of unique combinations from a list of items, {0} with specified combination size, {1}.
&lt;ul&gt;
    &lt;li&gt;{0}: The number of items in the list.&lt;/li&gt;
    &lt;li&gt;{1}: The number of items in each combination.&lt;/li&gt;
&lt;/ul&gt;
</value>
  </data>
  <data name="Number_Combinations_Example1" xml:space="preserve">
    <value>Find the number of combinations from a total of 5 items when each combination is a group of 3.</value>
  </data>
  <data name="Number_Cos" xml:space="preserve">
    <value>Returns the cosine of the number.</value>
  </data>
  <data name="Number_Cos_Description" xml:space="preserve">
    <value>Returns the cosine of {0}.</value>
  </data>
  <data name="Number_Cos_Example1" xml:space="preserve">
    <value>Find the cosine of the angle 0.</value>
  </data>
  <data name="Number_Cosh" xml:space="preserve">
    <value>Returns the hyperbolic cosine of the number.</value>
  </data>
  <data name="Number_Cosh_Description" xml:space="preserve">
    <value>Returns the hyperbolic cosine of {0}.</value>
  </data>
  <data name="Number_E" xml:space="preserve">
    <value>A constant value that represents e.</value>
  </data>
  <data name="Number_E_Description" xml:space="preserve">
    <value>A constant that represents 2.7182818284590451, the value for e up to 16 decimal digits.</value>
  </data>
  <data name="Number_Epsilon" xml:space="preserve">
    <value>A constant value that represents the smallest positive number a floating-point number can hold.</value>
  </data>
  <data name="Number_Exp" xml:space="preserve">
    <value>Raises e to the given power.</value>
  </data>
  <data name="Number_Exp_Description" xml:space="preserve">
    <value>Returns the result of raising e to the power of {0} (exponential function).
      &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;number&lt;/code&gt; for which the exponential function is to be calculated. If {0} is null, &lt;code&gt;Number.Exp&lt;/code&gt; returns null. &lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Number_Exp_Example1" xml:space="preserve">
    <value>Raise e to the power of 3.</value>
  </data>
  <data name="Number_Factorial" xml:space="preserve">
    <value>Returns the factorial of the number.</value>
  </data>
  <data name="Number_Factorial_Description" xml:space="preserve">
    <value>Returns the factorial of the number {0}.</value>
  </data>
  <data name="Number_Factorial_Example1" xml:space="preserve">
    <value>Find the factorial of 10.</value>
  </data>
  <data name="Number_From" xml:space="preserve">
    <value>Creates a number from the given value.</value>
  </data>
  <data name="Number_FromText" xml:space="preserve">
    <value>Creates numbers from common text formats ("15", "3,423.10", "5.0E-10").</value>
  </data>
  <data name="Number_FromText_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;number&lt;/code&gt; value from the given text value, {0}.
 &lt;ul&gt;
  &lt;li&gt;{0}: The textual representation of a number value. The representation must be in a common number format, such as "15", "3,423.10", or "5.0E-10".&lt;/li&gt;
  &lt;li&gt;{1}: An optional culture that controls how {0} is interpreted (for example, "en-US").&lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="Number_FromText_Example1" xml:space="preserve">
    <value>Get the number value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Number_FromText_Example2" xml:space="preserve">
    <value>Get the number value of &lt;code&gt;"5.0e-10"&lt;/code&gt;.</value>
  </data>
  <data name="Number_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;number&lt;/code&gt; value from the given {0}. An optional {1} may also be provided (for example, "en-US").
If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Number.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;. If the given {0} is &lt;code&gt;number&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;number&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;number&lt;/code&gt; value from textual representation. Common text formats are handled ("15", "3,423.10", "5.0E-10"). Refer to &lt;code&gt;Number.FromText&lt;/code&gt; for details.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;logical&lt;/code&gt;: 1 for &lt;code&gt;true&lt;/code&gt;, 0 for &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;: A double-precision floating-point number that contains an OLE Automation date equivalent.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetimezone&lt;/code&gt;: A double-precision floating-point number that contains an OLE Automation date equivalent of the local date and time of {0}.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;date&lt;/code&gt;: A double-precision floating-point number that contains an OLE Automation date equivalent.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;time&lt;/code&gt;:  Expressed in fractional days.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;duration&lt;/code&gt;: Expressed in whole and fractional days.&lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="Number_From_Example1" xml:space="preserve">
    <value>Get the &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"4"&lt;/code&gt;.</value>
  </data>
  <data name="Number_From_Example2" xml:space="preserve">
    <value>Get the &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;#datetime(2020, 3, 20, 6, 0, 0)&lt;/code&gt;.</value>
  </data>
  <data name="Number_From_Example3" xml:space="preserve">
    <value>Get the &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"12.3%"&lt;/code&gt;.</value>
  </data>
  <data name="Number_IntegerDivide" xml:space="preserve">
    <value>Divides two numbers and returns the integer portion of the result.</value>
  </data>
  <data name="Number_IntegerDivide_Description" xml:space="preserve">
    <value>Returns the integer portion of the result from dividing a number, {0}, by another number, {1}.
    If {0} or {1} are null, &lt;code&gt;Number.IntegerDivide&lt;/code&gt; returns null.
      &lt;ul&gt;
        &lt;li&gt;{0}: The dividend.&lt;/li&gt;
        &lt;li&gt;{1}: The divisor.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Number_IntegerDivide_Example1" xml:space="preserve">
    <value>Divide 6 by 4.</value>
  </data>
  <data name="Number_IntegerDivide_Example2" xml:space="preserve">
    <value>Divide 8.3 by 3.</value>
  </data>
  <data name="Number_IsEven" xml:space="preserve">
    <value>Indicates if the value is even.</value>
  </data>
  <data name="Number_IsEven_Description" xml:space="preserve">
    <value>Indicates if the value, {0}, is even by returning &lt;code&gt;true&lt;/code&gt; if it is even, &lt;code&gt;false&lt;/code&gt; otherwise.</value>
  </data>
  <data name="Number_IsEven_Example1" xml:space="preserve">
    <value>Check if 625 is an even number.</value>
  </data>
  <data name="Number_IsEven_Example2" xml:space="preserve">
    <value>Check if 82 is an even number.</value>
  </data>
  <data name="Number_IsNaN" xml:space="preserve">
    <value>Indicates if the value is NaN (Not a number).</value>
  </data>
  <data name="Number_IsNaN_Description" xml:space="preserve">
    <value>Indicates if the value is NaN (Not a number). Returns &lt;code&gt;true&lt;/code&gt; if {0} is equivalent to &lt;code&gt;Number.IsNaN&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</value>
  </data>
  <data name="Number_IsNaN_Example1" xml:space="preserve">
    <value>Check if 0 divided by 0 is NaN.</value>
  </data>
  <data name="Number_IsNaN_Example2" xml:space="preserve">
    <value>Check if 1 divided by 0 is NaN.</value>
  </data>
  <data name="Number_IsOdd" xml:space="preserve">
    <value>Indicates if the value is odd.</value>
  </data>
  <data name="Number_IsOdd_Description" xml:space="preserve">
    <value>Indicates if the value is odd. Returns &lt;code&gt;true&lt;/code&gt; if {0} is an odd number, &lt;code&gt;false&lt;/code&gt; otherwise.</value>
  </data>
  <data name="Number_IsOdd_Example1" xml:space="preserve">
    <value>Check if 625 is an odd number.</value>
  </data>
  <data name="Number_IsOdd_Example2" xml:space="preserve">
    <value>Check if 82 is an odd number.</value>
  </data>
  <data name="Number_Ln" xml:space="preserve">
    <value>Returns the natural logarithm of the number.</value>
  </data>
  <data name="Number_Ln_Description" xml:space="preserve">
    <value>Returns the natural logarithm of a number, {0}. If {0} is null &lt;code&gt;Number.Ln&lt;/code&gt; returns null.</value>
  </data>
  <data name="Number_Ln_Example1" xml:space="preserve">
    <value>Get the natural logarithm of 15.</value>
  </data>
  <data name="Number_Log" xml:space="preserve">
    <value>Returns the logarithm of the number to the specified base (default e).</value>
  </data>
  <data name="Number_Log10" xml:space="preserve">
    <value>Returns the base 10 logarithm of the number.</value>
  </data>
  <data name="Number_Log10_Description" xml:space="preserve">
    <value>Returns the base 10 logarithm of a number, {0}. If {0} is null &lt;code&gt;Number.Log10&lt;/code&gt; returns null.</value>
  </data>
  <data name="Number_Log10_Example1" xml:space="preserve">
    <value>Get the base 10 logarithm of 2.</value>
  </data>
  <data name="Number_Log_Description" xml:space="preserve">
    <value>Returns the logarithm of a number, {0}, to the specified {1} base. If {1} is not specified, the default value is Number.E.
    If {0} is null &lt;code&gt;Number.Log&lt;/code&gt; returns null.</value>
  </data>
  <data name="Number_Log_Example1" xml:space="preserve">
    <value>Get the base 10 logarithm of 2.</value>
  </data>
  <data name="Number_Log_Example2" xml:space="preserve">
    <value>Get the base e logarithm of 2.</value>
  </data>
  <data name="Number_Mod" xml:space="preserve">
    <value>Integer divides two numbers and returns the remainder.</value>
  </data>
  <data name="Number_Mod_Description" xml:space="preserve">
    <value>Returns the remainder resulting from the integer division of {0} by {1}.
    If {0} or {1} are null, &lt;code&gt;Number.Mod&lt;/code&gt; returns null.
      &lt;ul&gt;
        &lt;li&gt;{0}: The dividend.&lt;/li&gt;
        &lt;li&gt;{1}: The divisor.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Number_Mod_Example1" xml:space="preserve">
    <value>Find the remainder when you divide 5 by 3.</value>
  </data>
  <data name="Number_NaN" xml:space="preserve">
    <value>A constant value that represents  0 divided by 0.</value>
  </data>
  <data name="Number_NegativeInfinity" xml:space="preserve">
    <value>A constant value that represents -1 divided by 0.</value>
  </data>
  <data name="Number_PI" xml:space="preserve">
    <value>A constant that represents pi.</value>
  </data>
  <data name="Number_PI_Description" xml:space="preserve">
    <value>A constant that represents 3.1415926535897932, the value for pi up to 16 decimal digits.</value>
  </data>
  <data name="Number_Permutations" xml:space="preserve">
    <value>Returns the number of permutations.</value>
  </data>
  <data name="Number_Permutations_Description" xml:space="preserve">
    <value>Returns the number of permutations that can be generated from a number of items, {0},  with a specified permutation size, {1}.</value>
  </data>
  <data name="Number_Permutations_Example1" xml:space="preserve">
    <value>Find the number of permutations from a total of 5 items in groups of 3.</value>
  </data>
  <data name="Number_PositiveInfinity" xml:space="preserve">
    <value>A constant value that represents 1 divided by 0.</value>
  </data>
  <data name="Number_Power" xml:space="preserve">
    <value>Raises a number to the given power.</value>
  </data>
  <data name="Number_Power_Description" xml:space="preserve">
    <value>Returns the result of raising {0} to the power of {1}.
    If {0} or {1} are null, &lt;code&gt;Number.Power&lt;/code&gt; returns null.
      &lt;ul&gt;
        &lt;li&gt;{0}: The base.&lt;/li&gt;
        &lt;li&gt;{1}: The exponent.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Number_Power_Example1" xml:space="preserve">
    <value>Find the value of 5 raised to the power of 3 (5 cubed).</value>
  </data>
  <data name="Number_Random" xml:space="preserve">
    <value>Returns a random number.</value>
  </data>
  <data name="Number_RandomBetween" xml:space="preserve">
    <value>Returns a random number between two numbers.</value>
  </data>
  <data name="Number_RandomBetween_Description" xml:space="preserve">
    <value>Returns a random number between {0} and {1}.</value>
  </data>
  <data name="Number_RandomBetween_Example1" xml:space="preserve">
    <value>Get a random number between 1 and 5.</value>
  </data>
  <data name="Number_Random_Description" xml:space="preserve">
    <value>Returns a random number between 0 and 1.</value>
  </data>
  <data name="Number_Random_Example1" xml:space="preserve">
    <value>Get a random number.</value>
  </data>
  <data name="Number_Round" xml:space="preserve">
    <value>Returns the rounded number. The number of digits and rounding mode can be specified.</value>
  </data>
  <data name="Number_RoundAwayFromZero" xml:space="preserve">
    <value>Returns the result of rounding positive numbers up and negative numbers down. The number of digits can be specified.</value>
  </data>
  <data name="Number_RoundAwayFromZero_Description" xml:space="preserve">
    <value>Returns the result of rounding {0} based on the sign of the number. This function will round positive numbers up and negative numbers down.
    If {1} is specified, {0} is rounded to the {1} number of decimal digits.
  </value>
  </data>
  <data name="Number_RoundAwayFromZero_Example1" xml:space="preserve">
    <value>Round the number -1.2 away from zero.</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example2" xml:space="preserve">
    <value>Round the number 1.2 away from zero.</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example3" xml:space="preserve">
    <value>Round the number -1.234 to two decimal places away from zero.</value>
  </data>
  <data name="Number_RoundDown" xml:space="preserve">
    <value>Returns the highest previous number. The number of digits can be specified.</value>
  </data>
  <data name="Number_RoundDown_Description" xml:space="preserve">
    <value>Returns the result of rounding {0} down to the previous highest integer. If {0} is null, this function returns null.

    If {1} is provided, {0} is rounded to the specified number of decimal digits.
  </value>
  </data>
  <data name="Number_RoundDown_Example1" xml:space="preserve">
    <value>Round down 1.234 to integer.</value>
  </data>
  <data name="Number_RoundDown_Example2" xml:space="preserve">
    <value>Round down 1.999 to integer.</value>
  </data>
  <data name="Number_RoundDown_Example3" xml:space="preserve">
    <value>Round down 1.999 to two decimal places.</value>
  </data>
  <data name="Number_RoundTowardZero" xml:space="preserve">
    <value>Returns the result of rounding positive numbers down and negative numbers up. The number of digits can be specified.</value>
  </data>
  <data name="Number_RoundTowardZero_Description" xml:space="preserve">
    <value>Returns the result of rounding {0} based on the sign of the number. This function will round positive numbers down and negative numbers up.
    If {1} is specified, {0} is rounded to the {1} number of decimal digits.
  </value>
  </data>
  <data name="Number_RoundTowardZero_Example1" xml:space="preserve">
    <value>Round the number -1.2 toward zero.</value>
  </data>
  <data name="Number_RoundTowardZero_Example2" xml:space="preserve">
    <value>Round the number 1.2 toward zero.</value>
  </data>
  <data name="Number_RoundTowardZero_Example3" xml:space="preserve">
    <value>Round the number -1.234 to two decimal places toward zero.</value>
  </data>
  <data name="Number_RoundUp" xml:space="preserve">
    <value>Returns the next highest number. The number of digits can be specified.</value>
  </data>
  <data name="Number_RoundUp_Description" xml:space="preserve">
    <value>Returns the result of rounding {0} up to the next highest integer. If {0} is null, this function returns null.
    If {1} is provided, {0} is rounded to the specified number of decimal digits.
  </value>
  </data>
  <data name="Number_RoundUp_Example1" xml:space="preserve">
    <value>Round up 1.234 to integer.</value>
  </data>
  <data name="Number_RoundUp_Example2" xml:space="preserve">
    <value>Round up 1.999 to integer.</value>
  </data>
  <data name="Number_RoundUp_Example3" xml:space="preserve">
    <value>Round up 1.234 to two decimal places.</value>
  </data>
  <data name="Number_Round_Description" xml:space="preserve">
    <value>Returns the result of rounding {0} to the nearest number. If {0} is null, &lt;code&gt;Number.Round&lt;/code&gt; returns null.&lt;br&gt;
      &lt;br&gt;
      By default, {0} is rounded to the nearest integer, and ties are broken by rounding to the nearest even number (using &lt;code&gt;RoundingMode.ToEven&lt;/code&gt;, also known as "banker's rounding").&lt;br&gt;
      &lt;br&gt;
      However, these defaults can be overridden via the following optional parameters.
      &lt;ul&gt;
        &lt;li&gt;{1}: Causes {0} to be rounded to the specified number of decimal digits.&lt;/li&gt;
        &lt;li&gt;{2}: Overrides the default tie-breaking behavior when {0} is at the midpoint between two potential rounded values
      (refer to &lt;code&gt;RoundingMode.Type&lt;/code&gt; for possible values).&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Number_Round_Example1" xml:space="preserve">
    <value>Round 1.234 to the nearest integer.</value>
  </data>
  <data name="Number_Round_Example2" xml:space="preserve">
    <value>Round 1.56 to the nearest integer.</value>
  </data>
  <data name="Number_Round_Example3" xml:space="preserve">
    <value>Round 1.2345 to two decimal places.</value>
  </data>
  <data name="Number_Round_Example4" xml:space="preserve">
    <value>Round 1.2345 to three decimal places (Rounding up).</value>
  </data>
  <data name="Number_Round_Example5" xml:space="preserve">
    <value>Round 1.2345 to three decimal places (Rounding down).</value>
  </data>
  <data name="Number_Sign" xml:space="preserve">
    <value>Returns 1 if the number is positive, -1 if it is negative, and 0 if it is zero.</value>
  </data>
  <data name="Number_Sign_Description" xml:space="preserve">
    <value>Returns 1 for if {0} is a positive number, -1 if it is a negative number, and 0 if it is zero.
    If {0} is null, &lt;code&gt;Number.Sign&lt;/code&gt; returns null.</value>
  </data>
  <data name="Number_Sign_Example1" xml:space="preserve">
    <value>Determine the sign of 182.</value>
  </data>
  <data name="Number_Sign_Example2" xml:space="preserve">
    <value>Determine the sign of -182.</value>
  </data>
  <data name="Number_Sign_Example3" xml:space="preserve">
    <value>Determine the sign of 0.</value>
  </data>
  <data name="Number_Sin" xml:space="preserve">
    <value>Returns the sine of the number.</value>
  </data>
  <data name="Number_Sin_Description" xml:space="preserve">
    <value>Returns the sine of {0}.</value>
  </data>
  <data name="Number_Sin_Example1" xml:space="preserve">
    <value>Find the sine of the angle 0.</value>
  </data>
  <data name="Number_Sinh" xml:space="preserve">
    <value>Returns the hyperbolic sine of the number.</value>
  </data>
  <data name="Number_Sinh_Description" xml:space="preserve">
    <value>Returns the hyperbolic sine of {0}.</value>
  </data>
  <data name="Number_Sqrt" xml:space="preserve">
    <value>Returns the square root of the number.</value>
  </data>
  <data name="Number_Sqrt_Description" xml:space="preserve">
    <value>Returns the square root of {0}.
    If {0} is null, &lt;code&gt;Number.Sqrt&lt;/code&gt; returns null. If it is a negative value, &lt;code&gt;Number.NaN&lt;/code&gt; is returned (Not a number).</value>
  </data>
  <data name="Number_Sqrt_Example1" xml:space="preserve">
    <value>Find the square root of 625.</value>
  </data>
  <data name="Number_Sqrt_Example2" xml:space="preserve">
    <value>Find the square root of 85.</value>
  </data>
  <data name="Number_Tan" xml:space="preserve">
    <value>Returns the tangent of the number.</value>
  </data>
  <data name="Number_Tan_Description" xml:space="preserve">
    <value>Returns the tangent of {0}.</value>
  </data>
  <data name="Number_Tan_Example1" xml:space="preserve">
    <value>Find the tangent of the angle 1.</value>
  </data>
  <data name="Number_Tanh" xml:space="preserve">
    <value>Returns the hyperbolic tangent of the number.</value>
  </data>
  <data name="Number_Tanh_Description" xml:space="preserve">
    <value>Returns the hyperbolic tangent of {0}.</value>
  </data>
  <data name="Number_ToText" xml:space="preserve">
    <value>Converts the given number to text.</value>
  </data>
  <data name="Number_ToText_Description" xml:space="preserve">
    <value>Converts the numeric value {0} to a text value according to the format specified by {1}.&lt;br&gt;
    &lt;br&gt;
    The format is a text value indicating how the number should be converted. For more details on the supported format values, go to https://go.microsoft.com/fwlink/?linkid=2241210 and https://go.microsoft.com/fwlink/?linkid=2240884.&lt;br&gt;
    &lt;br&gt;
    An optional {2} may also be provided (for example, "en-US") to control the culture-dependent behavior of {1}.</value>
  </data>
  <data name="Number_ToText_Example1" xml:space="preserve">
    <value>Convert a number to text without specifying a format.</value>
  </data>
  <data name="Number_ToText_Example2" xml:space="preserve">
    <value>Convert a number to exponential format.</value>
  </data>
  <data name="Number_ToText_Example3" xml:space="preserve">
    <value>Convert a number to percentage format with only one decimal place.</value>
  </data>
  <data name="Number_Type" xml:space="preserve">
    <value>The type that represents all numbers.</value>
  </data>
  <data name="ODataOmitValues_Nulls" xml:space="preserve">
    <value>Allows the OData service to omit null values.</value>
  </data>
  <data name="ODataOmitValues_Type" xml:space="preserve">
    <value>Specifies the kinds of values an OData service can omit.</value>
  </data>
  <data name="OData_Feed" xml:space="preserve">
    <value>Returns a table of OData feeds offered by an OData service.</value>
  </data>
  <data name="OData_Feed_Description" xml:space="preserve">
    <value>Returns a table of OData feeds offered by an OData service from a uri {0}, headers {1}. A boolean value specifying whether to use concurrent connections or an optional record parameter, {2}, may be specified to control the following options:
    &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;Query&lt;/code&gt;: Programmatically add query parameters to the URL without having to worry about escaping. &lt;/li&gt;
    &lt;li&gt; &lt;code&gt;Headers&lt;/code&gt; : Specifying this value as a record will supply additional headers to an HTTP request.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;ExcludedFromCacheKey&lt;/code&gt;: Specifying this value as a list will exclude these HTTP header keys from being part of the calculation for caching data.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;ApiKeyName&lt;/code&gt; : If the target site has a notion of an API key, this parameter can be used to specify the name (not the value) of the key parameter that must be used in the URL. The actual key value is provided in the credential.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;Timeout&lt;/code&gt; : Specifying this value as a duration will change the timeout for an HTTP request. The default value is 600 seconds.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;EnableBatch&lt;/code&gt; : A logical (true/false) that sets whether to allow generation of an OData $batch request if the MaxUriLength is exceeded (default is false).&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;MaxUriLength&lt;/code&gt; : A number that indicates the max length of an allowed uri sent to an OData service. If exceeded and EnableBatch is true then the request will be made to an OData $batch endpoint, otherwise it will fail (default is 2048).&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;Concurrent&lt;/code&gt; : A logical (true/false) when set to true, requests to the service will be made concurrently. When set to false, requests will be made sequentially. When not specified, the value will be determined by the service’s AsynchronousRequestsSupported annotation. If the service does not specify whether AsynchronousRequestsSupported is supported, requests will be made sequentially.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;ODataVersion&lt;/code&gt; : A number (3 or 4) that specifies the OData protocol version to use for this OData service. When not specified, all supported versions will be requested. The service version will be determined by the OData-Version header returned by the service.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;FunctionOverloads&lt;/code&gt; : A logical (true/false) when set to true, function import overloads will be listed in the navigator as separate entries, when set to false, function import overloads will be listed as one union function in the navigator. Default value for V3: false. Default value for V4: true.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;MoreColumns&lt;/code&gt; : A logical (true/false) when set to true, adds a "More Columns" column to each entity feed containing open types and polymorphic types. This will contain the fields not declared in the base type. When false, this field is not present. Defaults to false.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;IncludeAnnotations&lt;/code&gt; : A comma separated list of namespace qualified term names or patterns to include with "*" as a wildcard. By default, none of the annotations are included.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;IncludeMetadataAnnotations&lt;/code&gt; : A comma separated list of namespace qualified term names or patterns to include on metadata document requests, with "*" as a wildcard. By default, includes the same annotations as IncludeAnnotations.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;OmitValues&lt;/code&gt; : Allows the OData service to avoid writing out certain values in responses. If acknowledged by the service, we will infer those values from the omitted fields. Options include:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;ODataOmitValues.Nulls&lt;/code&gt; : Allows the OData service to omit null values.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt; &lt;code&gt;Implementation&lt;/code&gt; : Specifies the implementation of the OData connector to use. Valid values are "2.0" or null.&lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="OData_Feed_Example1" xml:space="preserve">
    <value>Connect to the TripPin OData service.</value>
  </data>
  <data name="Occurrence_All" xml:space="preserve">
    <value>A list of positions of all occurrences of the found values is returned.</value>
  </data>
  <data name="Occurrence_First" xml:space="preserve">
    <value>The position of the first occurrence of the found value is returned.</value>
  </data>
  <data name="Occurrence_Last" xml:space="preserve">
    <value>The position of the last occurrence of the found value is returned.</value>
  </data>
  <data name="Occurrence_Optional" xml:space="preserve">
    <value>The item is expected to appear zero or one time in the input.</value>
  </data>
  <data name="Occurrence_Repeating" xml:space="preserve">
    <value>The item is expected to appear zero or more times in the input.</value>
  </data>
  <data name="Occurrence_Required" xml:space="preserve">
    <value>The item is expected to appear once in the input.</value>
  </data>
  <data name="Occurrence_Type" xml:space="preserve">
    <value>Specifies the occurrence of an element in a sequence.</value>
  </data>
  <data name="Odbc_DataSource" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the ODBC data source. </value>
  </data>
  <data name="Odbc_DataSource_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the ODBC data source specified by the connection string {0}. {0} can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields:
    {1:type}</value>
  </data>
  <data name="Odbc_DataSource_Example1" xml:space="preserve">
    <value>Return the SQL tables and views from the provided connection string.</value>
  </data>
  <data name="Odbc_InferOptions" xml:space="preserve">
    <value>Returns the result of trying to infer SQL capabilities for an ODBC driver.</value>
  </data>
  <data name="Odbc_InferOptions_Description" xml:space="preserve">
    <value>Returns the result of trying to infer SQL capbabilities with the connection string {0} using ODBC. {0} can be text or a record of property value pairs. Property values can either be text or number.</value>
  </data>
  <data name="Odbc_InferOptions_Example1" xml:space="preserve">
    <value>Return the inferred SQL capabilities for a connection string.</value>
  </data>
  <data name="Odbc_Query" xml:space="preserve">
    <value>Returns the result of running a native query on an ODBC data source.</value>
  </data>
  <data name="Odbc_Query_Description" xml:space="preserve">
    <value>Returns the result of running {1} with the connection string {0} using ODBC. {0} can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, {2}, may be provided to specify additional properties. The record can contain the following fields:
    {2:type}</value>
  </data>
  <data name="Odbc_Query_Example1" xml:space="preserve">
    <value>Return the result of running a simple query against the provided connection string.</value>
  </data>
  <data name="OleDb_DataSource" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the OLE DB data source.</value>
  </data>
  <data name="OleDb_DataSource_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the OLE DB data source specified by the connection string {0}. {0} can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields:
    {1:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.</value>
  </data>
  <data name="OleDb_Query" xml:space="preserve">
    <value>Returns the result of running a native query on an OLE DB data source.</value>
  </data>
  <data name="OleDb_Query_Description" xml:space="preserve">
    <value>Returns the result of running {1} with the connection string {0} using OLE DB. {0} can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, {2}, may be provided to specify additional properties. The record can contain the following fields:
    {2:type}</value>
  </data>
  <data name="OpenApi_Document" xml:space="preserve">
    <value>Returns a table of operations from an Open API definition.</value>
  </data>
  <data name="OpenApi_Document_Description" xml:space="preserve">
    <value>Returns a table of operations from an Open API definition. An optional record parameter, options, may be provided to specify additional properties. The record can contain the following fields:
    &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;IncludeExtensions&lt;/code&gt; : A logical (true/false). Default is true. When true, vendor extensions are included as meta record fields on the appropriate value. &lt;/li&gt;
    &lt;li&gt; &lt;code&gt;SecurityDefinition&lt;/code&gt; : A text value.  Defaults to the first definition which matches the accepted credential type (basic, apiKey).  When specified this value overrides the security definition to use for the service.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;ManualStatusHandling&lt;/code&gt; : Specifying this value as a list will prevent any builtin handling for HTTP requests whose response has one of these status codes.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;IncludeDeprecated&lt;/code&gt; : A logical (true/false). Defaults to false. When true, operations that are marked as deprecated are included in the navigation table.&lt;/li&gt;
    &lt;li&gt; &lt;code&gt;IncludeMoreColumns&lt;/code&gt; : A logical (true/false). Defaults to false. When true, the 'MoreColumns' column is enabled.&lt;/li&gt;
    </value>
  </data>
  <data name="Option_ApiKeyName_Web_Caption" xml:space="preserve">
    <value>Name of the API key query parameter</value>
  </data>
  <data name="Option_ApiKeyName_Web_Description" xml:space="preserve">
    <value>If the target site has a notion of an API key, this parameter can be used to specify the name (not the value) of the key parameter that must be used in the URL. The actual key value is provided in the credential.</value>
  </data>
  <data name="Option_ApiVersion_Salesforce_Caption" xml:space="preserve">
    <value>API version</value>
  </data>
  <data name="Option_ApiVersion_Salesforce_Description" xml:space="preserve">
    <value>The Salesforce API version to use for this query. When not specified, API version 29.0 is used.</value>
  </data>
  <data name="Option_ApiVersion_SharePoint_Caption" xml:space="preserve">
    <value>API version</value>
  </data>
  <data name="Option_ApiVersion_SharePoint_Description" xml:space="preserve">
    <value>A number (14 or 15) or the text "Auto" that specifies the SharePoint API version to use for this site. When not specified, API version 14 is used. When Auto is specified, the server version will be automatically discovered if possible, otherwise version defaults to 14. Non-English SharePoint sites require at least version 15.</value>
  </data>
  <data name="Option_BatchSize_SAPBW_Caption" xml:space="preserve">
    <value>Maximum number of rows to retrieve at one time</value>
  </data>
  <data name="Option_BatchSize_SAPBW_Description" xml:space="preserve">
    <value>Specifies the maximum number of rows that will be retrieved at one time when executing an MDX statement. A smaller number of rows will translate into more calls to the server while retrieving a large dataset. A larger number of rows may improve performance but could cause memory issues on the SAP BW server. The default value is 50000 rows. This does not affect the total number of rows returned. Only supported in Implementation '2.0'.</value>
  </data>
  <data name="Option_BinaryCodePage_Caption" xml:space="preserve">
    <value>Enable bulk insert</value>
  </data>
  <data name="Option_BinaryCodePage_Description" xml:space="preserve">
    <value>A number for the CCSID (Coded Character Set Identifier) to decode Db2 FOR BIT binary data into character strings. Applies to Implementation = "Microsoft". Set 0 to disable conversion (default). Set 1 to convert based on database encoding. Set other CCSID number to convert to application encoding.</value>
  </data>
  <data name="Option_BlockSize_Caption" xml:space="preserve">
    <value>The block size</value>
  </data>
  <data name="Option_BlockSize_Description" xml:space="preserve">
    <value>The number of bytes to read before waiting on the data consumer. The default value is 4 MB.</value>
  </data>
  <data name="Option_CommandTimeout_AS_Caption" xml:space="preserve">
    <value>Command timeout</value>
  </data>
  <data name="Option_CommandTimeout_AS_Description" xml:space="preserve">
    <value>A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is driver-dependent.</value>
  </data>
  <data name="Option_CommandTimeout_Caption" xml:space="preserve">
    <value>Command timeout</value>
  </data>
  <data name="Option_CommandTimeout_Description" xml:space="preserve">
    <value>A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</value>
  </data>
  <data name="Option_ConcurrentRequests_FuzzyMatch_Caption" xml:space="preserve">
    <value>Number of parallel threads to use for fuzzy matching.</value>
  </data>
  <data name="Option_ConcurrentRequests_FuzzyMatch_Description" xml:space="preserve">
    <value>A number between 1 and 8 that specifies the number of parallel threads to use for fuzzy matching. The default value is 1.</value>
  </data>
  <data name="Option_ConcurrentRequests_Stream_Caption" xml:space="preserve">
    <value>The number of data requests to be made in parallel.</value>
  </data>
  <data name="Option_ConcurrentRequests_Stream_Description" xml:space="preserve">
    <value>The ConcurrentRequests option supports faster download of data by specifying the number of requests to be made in parallel, at the cost of memory utilization. The memory required is (ConcurrentRequest * RequestSize). The default value is 16.</value>
  </data>
  <data name="Option_ConnectionTimeout_Caption" xml:space="preserve">
    <value>Connection timeout</value>
  </data>
  <data name="Option_ConnectionTimeout_Description" xml:space="preserve">
    <value>A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</value>
  </data>
  <data name="Option_ConnectionTimeout_ODBC_Caption" xml:space="preserve">
    <value>Connection timeout</value>
  </data>
  <data name="Option_ConnectionTimeout_ODBC_Description" xml:space="preserve">
    <value>A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is 15 seconds.</value>
  </data>
  <data name="Option_Content_WebAction_Caption" xml:space="preserve">
    <value>Body of the HTTP request</value>
  </data>
  <data name="Option_Content_WebAction_Description" xml:space="preserve">
    <value>Specifying this value will cause its contents to become the body of the HTTP request.</value>
  </data>
  <data name="Option_Content_Web_Caption" xml:space="preserve">
    <value>Body of the HTTP request</value>
  </data>
  <data name="Option_Content_Web_Description" xml:space="preserve">
    <value>Specifying this value changes the web request from a GET to a POST, using the value of the option as the content of the POST.</value>
  </data>
  <data name="Option_ContextInfo_Caption" xml:space="preserve">
    <value>Set SQL Server context info</value>
  </data>
  <data name="Option_ContextInfo_Description" xml:space="preserve">
    <value>A binary value that is used to set the CONTEXT_INFO before running each command.</value>
  </data>
  <data name="Option_CreateNavigationProperties_Caption" xml:space="preserve">
    <value>Generate navigation properties</value>
  </data>
  <data name="Option_CreateNavigationProperties_Description" xml:space="preserve">
    <value>A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</value>
  </data>
  <data name="Option_CreateNavigationProperties_False_Caption" xml:space="preserve">
    <value>Generate navigation properties</value>
  </data>
  <data name="Option_CreateNavigationProperties_False_Description" xml:space="preserve">
    <value>A logical (true/false) that sets whether to generate navigation properties on the returned values (default is false).</value>
  </data>
  <data name="Option_Culture_AS_Caption" xml:space="preserve">
    <value>Culture name</value>
  </data>
  <data name="Option_Culture_AS_Description" xml:space="preserve">
    <value>A culture name specifying the culture for the data. This corresponds to the 'Locale Identifier' connection string property.</value>
  </data>
  <data name="Option_Culture_FuzzyGroup_Caption" xml:space="preserve">
    <value>Allows grouping records based on culture-specific rules.</value>
  </data>
  <data name="Option_Culture_FuzzyGroup_Description" xml:space="preserve">
    <value>Allows grouping records based on culture-specific rules. It can be any valid culture name. For example, a Culture option of "ja-JP" groups records based on the Japanese culture. The default value is "", which groups based on the Invariant English culture.</value>
  </data>
  <data name="Option_Culture_FuzzyMatch_Caption" xml:space="preserve">
    <value>Allows matching records based on culture-specific rules.</value>
  </data>
  <data name="Option_Culture_FuzzyMatch_Description" xml:space="preserve">
    <value>Allows matching records based on culture-specific rules. It can be any valid culture name. For example, a Culture option of "ja-JP" matches records based on the Japanese culture. The default value is "", which matches based on the Invariant English culture.</value>
  </data>
  <data name="Option_Culture_SAP_Caption" xml:space="preserve">
    <value>Culture name</value>
  </data>
  <data name="Option_Culture_SAP_Description" xml:space="preserve">
    <value>A culture name to be mapped to the SAP Language Code. Culture and LanguageCode can't be specified at the same time.</value>
  </data>
  <data name="Option_DisableAppendNoteColumns_SharePoint_Description" xml:space="preserve">
    <value>Prevents the connector from using a separate endpoint for note columns.</value>
  </data>
  <data name="Option_Distribution_Caption" xml:space="preserve">
    <value>Distribution</value>
  </data>
  <data name="Option_Distribution_Description" xml:space="preserve">
    <value>A SapHanaDistribution that sets the value of the "Distribution" property in the connection string. Statement routing is the method of evaluating the correct server node of a distributed system before statement execution. The default value is SapHanaDistribution.All.</value>
  </data>
  <data name="Option_EnableBulkInsert_Caption" xml:space="preserve">
    <value>Enable bulk insert</value>
  </data>
  <data name="Option_EnableBulkInsert_Description" xml:space="preserve">
    <value>A logical (true/false) that sets whether to use the bulk insert API when inserting multiple records (default is false).</value>
  </data>
  <data name="Option_EnableColumnBinding_HANA_Caption" xml:space="preserve">
    <value>Enable column binding</value>
  </data>
  <data name="Option_EnableColumnBinding_HANA_Description" xml:space="preserve">
    <value>Binds variables to the columns of a SAP HANA result set when fetching data. May potentially improve performance at the cost of slightly higher memory utilization. The default value is false.</value>
  </data>
  <data name="Option_EnableCrossDatabaseFolding_Caption" xml:space="preserve">
    <value>Cross database folding</value>
  </data>
  <data name="Option_EnableCrossDatabaseFolding_Description" xml:space="preserve">
    <value>A logical (true/false) value that, if true, allows query folding across databases on the same server. The default value is false.</value>
  </data>
  <data name="Option_EnableStructures_SAPBW_Caption" xml:space="preserve">
    <value>Enable characteristic structures</value>
  </data>
  <data name="Option_EnableStructures_SAPBW_Description" xml:space="preserve">
    <value>A logical value indicating whether characteristic structures are recognized. The default value for this option is false. Only supported in Implementation '2.0'.</value>
  </data>
  <data name="Option_Encoding_MySQL_Caption" xml:space="preserve">
    <value>Encoding</value>
  </data>
  <data name="Option_Encoding_MySQL_Description" xml:space="preserve">
    <value>A TextEncoding value that specifies the character set used to encode all queries sent to the server (default is null).</value>
  </data>
  <data name="Option_ExcludedFromCacheKey_Web_Caption" xml:space="preserve">
    <value>Headers to exclude from cache key</value>
  </data>
  <data name="Option_ExcludedFromCacheKey_Web_Description" xml:space="preserve">
    <value>Specifying this value as a list will exclude these HTTP header keys from being part of the calculation for caching data.</value>
  </data>
  <data name="Option_ExecutionMode_SAPBW_Caption" xml:space="preserve">
    <value>Determines MDX interface used</value>
  </data>
  <data name="Option_ExecutionMode_SAPBW_Description" xml:space="preserve">
    <value>Specifies the MDX interface used to execute queries on the server. The default value for this option is SapBusinessWarehouseExecutionMode.BasXmlGzip. Only supported in Implementation '2.0'.</value>
  </data>
  <data name="Option_Headers_Web_Caption" xml:space="preserve">
    <value>Additional HTTP request headers</value>
  </data>
  <data name="Option_Headers_Web_Description" xml:space="preserve">
    <value>Specifying this value as a record will supply additional headers to an HTTP request.</value>
  </data>
  <data name="Option_HierarchicalNavigation_Caption" xml:space="preserve">
    <value>Navigate using full hierarchy</value>
  </data>
  <data name="Option_HierarchicalNavigation_Description" xml:space="preserve">
    <value>A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</value>
  </data>
  <data name="Option_HierarchicalNavigation_Directory_Caption" xml:space="preserve">
    <value>Return a tree-like directory view</value>
  </data>
  <data name="Option_HierarchicalNavigation_Directory_Description" xml:space="preserve">
    <value>A logical (true/false) that controls whether the files are returned in a tree-like directory view or in a flat list. The default value is false.</value>
  </data>
  <data name="Option_HierarchicalNavigation_True_Caption" xml:space="preserve">
    <value>Navigate using full hierarchy</value>
  </data>
  <data name="Option_HierarchicalNavigation_True_Description" xml:space="preserve">
    <value>A logical (true/false) that sets whether to view the tables grouped by their schema names (default is true).</value>
  </data>
  <data name="Option_IgnoreCase_FuzzyGroup_Caption" xml:space="preserve">
    <value>Enable case-insensitive key grouping.</value>
  </data>
  <data name="Option_IgnoreCase_FuzzyGroup_Description" xml:space="preserve">
    <value>A logical (true/false) value that allows case-insensitive key grouping. For example, when true, "Grapes" is grouped with "grapes". The default value is true.</value>
  </data>
  <data name="Option_IgnoreCase_FuzzyMatch_Caption" xml:space="preserve">
    <value>Enable case-insensitive key matching.</value>
  </data>
  <data name="Option_IgnoreCase_FuzzyMatch_Description" xml:space="preserve">
    <value>A logical (true/false) value that allows case-insensitive key matching. For example, when true, "Grapes" is matched with "grapes". The default value is true.</value>
  </data>
  <data name="Option_IgnoreSpace_FuzzyGroup_Caption" xml:space="preserve">
    <value>Enable combining of text parts in order to find groups.</value>
  </data>
  <data name="Option_IgnoreSpace_FuzzyGroup_Description" xml:space="preserve">
    <value>A logical (true/false) value that allows combining of text parts in order to find groups. For example, when true, "Gra pes" is grouped with "Grapes". The default value is true.</value>
  </data>
  <data name="Option_IgnoreSpace_FuzzyMatch_Caption" xml:space="preserve">
    <value>Enable combining of text parts in order to find matches.</value>
  </data>
  <data name="Option_IgnoreSpace_FuzzyMatch_Description" xml:space="preserve">
    <value>A logical (true/false) value that allows combining of text parts in order to find matches. For example, when true, "Gra pes" is matched with "Grapes". The default value is true.</value>
  </data>
  <data name="Option_Implementation_AdobeAnalytics_Description" xml:space="preserve">
    <value>Specifies Adobe Analytics API version. Valid values are: "2.0". Default uses API version 1.4.</value>
  </data>
  <data name="Option_Implementation_Caption" xml:space="preserve">
    <value>Enable bulk insert</value>
  </data>
  <data name="Option_Implementation_Description" xml:space="preserve">
    <value>Specifies the internal database provider implementation to use. Valid values are: "IBM" and "Microsoft".</value>
  </data>
  <data name="Option_Implementation_HANA_Caption" xml:space="preserve">
    <value>Enable alternate SAP HANA connector implementation</value>
  </data>
  <data name="Option_Implementation_HANA_Description" xml:space="preserve">
    <value>Specifies the implementation of the SAP HANA connector to use.</value>
  </data>
  <data name="Option_Implementation_SAPBW_Caption" xml:space="preserve">
    <value>Enable alternate SAP Business Warehouse connector implementation</value>
  </data>
  <data name="Option_Implementation_SAPBW_Description" xml:space="preserve">
    <value>Specifies the implementation of the SAP Business Warehouse connector to use.</value>
  </data>
  <data name="Option_Implementation_SharePoint_Caption" xml:space="preserve">
    <value>Implementation</value>
  </data>
  <data name="Option_Implementation_SharePoint_Description" xml:space="preserve">
    <value>Optional. Specifies which version of the SharePoint connector to use. Accepted values are "2.0" or null. If the value is "2.0", the 2.0 implementation of the SharePoint connector is used. If the value is null, the original implementation of the SharePoint connector is used.</value>
  </data>
  <data name="Option_IsRetry_Web_Caption" xml:space="preserve">
    <value>HTTP request is a retry</value>
  </data>
  <data name="Option_IsRetry_Web_Description" xml:space="preserve">
    <value>Specifying this logical value as true will ignore any existing response in the cache when fetching data.</value>
  </data>
  <data name="Option_LanguageCode_Caption" xml:space="preserve">
    <value>SAP Language Code</value>
  </data>
  <data name="Option_LanguageCode_Description" xml:space="preserve">
    <value>The SAP Language Code used for the connection.</value>
  </data>
  <data name="Option_ManualStatusHandling_Web_Caption" xml:space="preserve">
    <value>HTTP status codes to handle manually</value>
  </data>
  <data name="Option_ManualStatusHandling_Web_Description" xml:space="preserve">
    <value>Specifying this value as a list will prevent any builtin handling for HTTP requests whose response has one of these status codes.</value>
  </data>
  <data name="Option_MaxDegreeOfParallelism_Caption" xml:space="preserve">
    <value>Maximum degree of parallelism</value>
  </data>
  <data name="Option_MaxDegreeOfParallelism_Description" xml:space="preserve">
    <value>A number that sets the value of the "maxdop" query clause in the generated SQL query.</value>
  </data>
  <data name="Option_MaxRetryCount_Caption" xml:space="preserve">
    <value>Number of retries</value>
  </data>
  <data name="Option_MaxRetryCount_Description" xml:space="preserve">
    <value>The number of retries to perform when polling for the result of the query. The default value is 120.</value>
  </data>
  <data name="Option_MultiSubnetFailover_Caption" xml:space="preserve">
    <value>Enable SQL Server failover support</value>
  </data>
  <data name="Option_MultiSubnetFailover_Description" xml:space="preserve">
    <value>A logical (true/false) that sets the value of the "MultiSubnetFailover" property in the connection string (default is false).</value>
  </data>
  <data name="Option_NavigationPropertyNameGenerator_Caption" xml:space="preserve">
    <value>Navigation property name generator</value>
  </data>
  <data name="Option_NavigationPropertyNameGenerator_Description" xml:space="preserve">
    <value>A function that is used for the creation of names for navigation properties.</value>
  </data>
  <data name="Option_NumberOfMatches_FuzzyMatch_Caption" xml:space="preserve">
    <value>Specifies the maximum number of matching rows that can be returned for every input row.</value>
  </data>
  <data name="Option_NumberOfMatches_FuzzyMatch_Description" xml:space="preserve">
    <value>A whole number that specifies the maximum number of matching rows that can be returned for every input row. For example, a value of 1 will return at most one matching row for each input row. If this option is not provided, all matching rows are returned.</value>
  </data>
  <data name="Option_OldGuids_Caption" xml:space="preserve">
    <value>Enable bulk insert</value>
  </data>
  <data name="Option_OldGuids_Description" xml:space="preserve">
    <value>A logical (true/false) that sets whether char(36) columns (if false) or binary(16) columns (if true) will be treated as GUIDs. The default value is false.</value>
  </data>
  <data name="Option_OmitSRID_Caption" xml:space="preserve">
    <value>Omit SRID when producing Well-Known Text</value>
  </data>
  <data name="Option_OmitSRID_Description" xml:space="preserve">
    <value>A logical (true/false) that, if true, omits the SRID when producing Well-Known Text from geometry and geography types.</value>
  </data>
  <data name="Option_PackageCollection_Caption" xml:space="preserve">
    <value>Enable bulk insert</value>
  </data>
  <data name="Option_PackageCollection_Description" xml:space="preserve">
    <value>Specifies a string value for package collection (default is "NULLID") to enable use of shared packages required to process SQL statements. Applies to Implementation = "Microsoft".</value>
  </data>
  <data name="Option_Query_MDX_Caption" xml:space="preserve">
    <value>MDX query</value>
  </data>
  <data name="Option_Query_MDX_Description" xml:space="preserve">
    <value>A native MDX query used to retrieve data.</value>
  </data>
  <data name="Option_Query_SQL_Caption" xml:space="preserve">
    <value>SQL statement</value>
  </data>
  <data name="Option_Query_SQL_Description" xml:space="preserve">
    <value>A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</value>
  </data>
  <data name="Option_Query_Web_Caption" xml:space="preserve">
    <value>Query string parameters</value>
  </data>
  <data name="Option_Query_Web_Description" xml:space="preserve">
    <value>Programmatically add query parameters to the URL without having to worry about escaping.</value>
  </data>
  <data name="Option_RelativePath_Web_Caption" xml:space="preserve">
    <value>Relative URL path</value>
  </data>
  <data name="Option_RelativePath_Web_Description" xml:space="preserve">
    <value>Specifying this value as text appends it to the base URL before making the request.</value>
  </data>
  <data name="Option_RequestSize_Caption" xml:space="preserve">
    <value>The request size</value>
  </data>
  <data name="Option_RequestSize_Description" xml:space="preserve">
    <value>The number of bytes to try to read in a single HTTP request to the server. The default value is 4 MB.</value>
  </data>
  <data name="Option_RetryInterval_Caption" xml:space="preserve">
    <value>Delay between retries</value>
  </data>
  <data name="Option_RetryInterval_Description" xml:space="preserve">
    <value>The duration of time between retry attempts. The default value is 1 second.</value>
  </data>
  <data name="Option_ReturnSingleDatabase_Caption" xml:space="preserve">
    <value>Enable bulk insert</value>
  </data>
  <data name="Option_ReturnSingleDatabase_Description" xml:space="preserve">
    <value>A logical (true/false) that sets whether to return all tables of all databases (if false) or to return tables and views of the specified database (if true). The default value is false.</value>
  </data>
  <data name="Option_ScaleMeasures_SAPBW_Caption" xml:space="preserve">
    <value>Scale measure values</value>
  </data>
  <data name="Option_ScaleMeasures_SAPBW_Description" xml:space="preserve">
    <value>A logical value indicating whether measure values should have scaling applied. The default value for this option is true. This option is not supported in Implementation '2.0'</value>
  </data>
  <data name="Option_SimilarityColumnName_Description" xml:space="preserve">
    <value>A name for the column that shows the similarity between an input value and the representative value for that input. The default value is null, in which case a new column for similarities will not be added.</value>
  </data>
  <data name="Option_SqlCompatibleWindowsAuth_Caption" xml:space="preserve">
    <value>Windows authentication is SQL Server-compatible</value>
  </data>
  <data name="Option_SqlCompatibleWindowsAuth_Description" xml:space="preserve">
    <value>A logical (true/false) that determines whether to produce SQL Server-compatible connection string options for Windows authentication. The default value is true.</value>
  </data>
  <data name="Option_SubQueries_Caption" xml:space="preserve">
    <value>SubQueries value</value>
  </data>
  <data name="Option_SubQueries_Description" xml:space="preserve">
    <value>A number (0, 1 or 2) that sets the value of the "SubQueries" property in the connection string. This controls the behavior of calculated members on subselects or subcubes. (The default value is 2).</value>
  </data>
  <data name="Option_Threshold_FuzzyGroup_Caption" xml:space="preserve">
    <value>The similarity score at which two values will be grouped.</value>
  </data>
  <data name="Option_Threshold_FuzzyGroup_Description" xml:space="preserve">
    <value>A number between 0.00 and 1.00 that specifies the similarity score at which two values will be grouped.
    For example, "Grapes" and "Graes" (missing the "p") are grouped together only if this option is set to less than 0.90.
    A threshold of 1.00 only allows exact matches.
    (Note that a fuzzy "exact match" might ignore differences like casing, word order, and punctuation.)
    The default value is 0.80.</value>
  </data>
  <data name="Option_Threshold_FuzzyMatch_Caption" xml:space="preserve">
    <value>The similarity score at which two values will be matched.</value>
  </data>
  <data name="Option_Threshold_FuzzyMatch_Description" xml:space="preserve">
    <value>A number between 0.00 and 1.00 that specifies the similarity score at which two values will be matched.
    For example, "Grapes" and "Graes" (missing the "p") are matched only if this option is set to less than 0.90.
    A threshold of 1.00 only allows exact matches.
    (Note that a fuzzy "exact match" might ignore differences like casing, word order, and punctuation.)
    The default value is 0.80.</value>
  </data>
  <data name="Option_Timeout_Caption" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="Option_Timeout_Description" xml:space="preserve">
    <value>A duration that controls how long to wait before abandoning the request to the server. The default value is source-specific.</value>
  </data>
  <data name="Option_Timeout_Web_Caption" xml:space="preserve">
    <value>Timeout for the HTTP request</value>
  </data>
  <data name="Option_Timeout_Web_Description" xml:space="preserve">
    <value>Specifying this value as a duration will change the timeout for an HTTP request. The default value is 100 seconds.</value>
  </data>
  <data name="Option_TransformationTable_FuzzyGroup_Caption" xml:space="preserve">
    <value>Group records based on custom value mappings.</value>
  </data>
  <data name="Option_TransformationTable_FuzzyGroup_Description" xml:space="preserve">
    <value>A table that allows grouping records based on custom value mappings. It should contain "From" and "To" columns. For example, "Grapes" is grouped with "Raisins" if a transformation table is provided with the "From" column containing "Grapes" and the "To" column containing "Raisins". Note that the transformation will be applied to all occurrences of the text in the transformation table. With the above transformation table, "Grapes are sweet" will also be grouped with "Raisins are sweet".</value>
  </data>
  <data name="Option_TransformationTable_FuzzyMatch_Caption" xml:space="preserve">
    <value>Match records based on custom value mappings.</value>
  </data>
  <data name="Option_TransformationTable_FuzzyMatch_Description" xml:space="preserve">
    <value>A table that allows matching records based on custom value mappings. It should contain "From" and "To" columns. For example, "Grapes" is matched with "Raisins" if a transformation table is provided with the "From" column containing "Grapes" and the "To" column containing "Raisins". Note that the transformation will be applied to all occurrences of the text in the transformation table. With the above transformation table, "Grapes are sweet" will also be matched with "Raisins are sweet".</value>
  </data>
  <data name="Option_TreatTinyAsBoolean_Caption" xml:space="preserve">
    <value>Enable bulk insert</value>
  </data>
  <data name="Option_TreatTinyAsBoolean_Description" xml:space="preserve">
    <value>A logical (true/false) that determines whether to force tinyint columns on the server as logical values. The default value is true.</value>
  </data>
  <data name="Option_TypedMeasureColumns_Caption" xml:space="preserve">
    <value>Use typed measure columns</value>
  </data>
  <data name="Option_TypedMeasureColumns_Description" xml:space="preserve">
    <value>A logical value indicating if the types specified in the multidimensional or tabular model will be used for the types of the added measure columns. When set to false, the type "number" will be used for all measure columns. The default value for this option is false.</value>
  </data>
  <data name="Option_UnsafeTypeConversions_Caption" xml:space="preserve">
    <value>Attempt to fold unsafe type conversions</value>
  </data>
  <data name="Option_UnsafeTypeConversions_Description" xml:space="preserve">
    <value>A logical (true/false) that, if true, attempts to fold type conversions which could fail and cause the entire query to fail. Not recommended for general use.</value>
  </data>
  <data name="Option_UseDb2ConnectGateway_Caption" xml:space="preserve">
    <value>Use Db2 Connect gateway</value>
  </data>
  <data name="Option_UseDb2ConnectGateway_Description" xml:space="preserve">
    <value>Specifies whether the connection is being made through a Db2 Connect gateway. Applies to Implementation = "Microsoft".</value>
  </data>
  <data name="Option_ViewMode_SharePoint_Caption" xml:space="preserve">
    <value>View mode</value>
  </data>
  <data name="Option_ViewMode_SharePoint_Description" xml:space="preserve">
    <value>Optional. This option is only valid for implementation 2.0. Accepted values are "All" and "Default". If no value is specified, the value is set to "All". When "All" is specified, the view includes all user-created and system-defined columns. When "Default" is specified, the view will match what the user sees when looking at the list online in whichever view that user set as Default in their settings. If the user edits their default view to add or remove either user-created or system-defined columns, or by creating a new view and setting it as default, these changes will propagate through the connector.</value>
  </data>
  <data name="Oracle_Database" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the Oracle database.</value>
  </data>
  <data name="Oracle_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the Oracle database on server {0}. The port may be optionally specified with the server, separated by a colon. An optional record parameter, {1}, may be specified to control the following options:
    {1:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="Order_Ascending" xml:space="preserve">
    <value>Sorts the values in ascending order.</value>
  </data>
  <data name="Order_Descending" xml:space="preserve">
    <value>Sorts the values in descending order.</value>
  </data>
  <data name="Order_Type" xml:space="preserve">
    <value>Specifies the direction of sorting.</value>
  </data>
  <data name="Parquet_Document_Description" xml:space="preserve">
    <value>This function is unavailable because it requires .NET 4.5.</value>
  </data>
  <data name="Parquet_Metadata_Description" xml:space="preserve">
    <value>This function is unavailable because it requires .NET 4.5.</value>
  </data>
  <data name="Password_Type" xml:space="preserve">
    <value>The type that represents a text password.</value>
  </data>
  <data name="Pdf_Tables_Description" xml:space="preserve">
    <value>This function is unavailable because it requires .NET 4.5.</value>
  </data>
  <data name="Percentage_From" xml:space="preserve">
    <value>Returns a percentage value from the given value.</value>
  </data>
  <data name="Percentage_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;percentage&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Percentage.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;text&lt;/code&gt; with a trailing percent symbol, then the converted decimal number will be returned. Otherwise, the value will be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.From&lt;/code&gt;. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Percentage_From_Example1" xml:space="preserve">
    <value>Get the &lt;code&gt;percentage&lt;/code&gt; value of &lt;code&gt;"12.3%"&lt;/code&gt;.</value>
  </data>
  <data name="Percentage_Type" xml:space="preserve">
    <value>The type that represents percentage value.</value>
  </data>
  <data name="PercentileMode_ExcelExc" xml:space="preserve">
    <value>When interpolating values for &lt;code&gt;List.Percentile&lt;/code&gt;, use a method compatible with Excel's &lt;code&gt;PERCENTILE.EXC&lt;/code&gt;.</value>
  </data>
  <data name="PercentileMode_ExcelInc" xml:space="preserve">
    <value>When interpolating values for &lt;code&gt;List.Percentile&lt;/code&gt;, use a method compatible with Excel's &lt;code&gt;PERCENTILE.INC&lt;/code&gt;.</value>
  </data>
  <data name="PercentileMode_SqlCont" xml:space="preserve">
    <value>When interpolating values for &lt;code&gt;List.Percentile&lt;/code&gt;, use a method compatible with SQL Server's &lt;code&gt;PERCENTILE_CONT&lt;/code&gt;.</value>
  </data>
  <data name="PercentileMode_SqlDisc" xml:space="preserve">
    <value>When interpolating values for &lt;code&gt;List.Percentile&lt;/code&gt;, use a method compatible with SQL Server's &lt;code&gt;PERCENTILE_DISC&lt;/code&gt;.</value>
  </data>
  <data name="PercentileMode_Type" xml:space="preserve">
    <value>Specifies the percentile mode type.</value>
  </data>
  <data name="PostgreSQL_Database" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in a PostgreSQL database.</value>
  </data>
  <data name="PostgreSQL_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in a PostgreSQL database on server {0} in the database instance named {1}. The port may be optionally specified with the server, separated by a colon. An optional record parameter, {2}, may be specified to control the following options:
    {2:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="Precision_Decimal" xml:space="preserve">
    <value>An optional parameter for the built-in arthimetic operators to specify decimal precision.</value>
  </data>
  <data name="Precision_Double" xml:space="preserve">
    <value>An optional parameter for the built-in arthimetic operators to specify double precision.</value>
  </data>
  <data name="Precision_Type" xml:space="preserve">
    <value>Specifies the precision of comparison.</value>
  </data>
  <data name="Progress_DataSourceProgress" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Progress_DataSourceProgress_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="QuoteStyle_Csv" xml:space="preserve">
    <value>Quote characters indicate the start of a quoted string.  Nested quotes are indicated by two quote characters.</value>
  </data>
  <data name="QuoteStyle_None" xml:space="preserve">
    <value>Quote characters have no significance.</value>
  </data>
  <data name="QuoteStyle_Type" xml:space="preserve">
    <value>Specifies the quote style.</value>
  </data>
  <data name="RData_FromBinary" xml:space="preserve">
    <value>Returns a record of data frames from the RData file.</value>
  </data>
  <data name="RankKind_Competition" xml:space="preserve">
    <value>Items which compare as equal receive the same ranking number and then a gap is left before the next ranking.</value>
  </data>
  <data name="RankKind_Dense" xml:space="preserve">
    <value>Items which compare as equal receive the same ranking number and the next item is numbered consecutively with no gap.</value>
  </data>
  <data name="RankKind_Ordinal" xml:space="preserve">
    <value>All items are given a unique ranking number even if they compare as equal.</value>
  </data>
  <data name="RankKind_Type" xml:space="preserve">
    <value>Specifies the type of ranking.</value>
  </data>
  <data name="Record_AddField" xml:space="preserve">
    <value>Adds a field to a record.</value>
  </data>
  <data name="Record_AddField_Description" xml:space="preserve">
    <value>Adds a field to a record {0}, given the name of the field {1} and the value {2}.</value>
  </data>
  <data name="Record_AddField_Example1" xml:space="preserve">
    <value>Add the field Address to the record.</value>
  </data>
  <data name="Record_Combine" xml:space="preserve">
    <value>Combines the records in the given list.</value>
  </data>
  <data name="Record_Combine_Description" xml:space="preserve">
    <value>Combines the records in the given {0}. If the {0} contains non-record values, an error is returned.</value>
  </data>
  <data name="Record_Combine_Example1" xml:space="preserve">
    <value>Create a combined record from the records.</value>
  </data>
  <data name="Record_Field" xml:space="preserve">
    <value>Returns the value of the specified field in a record.</value>
  </data>
  <data name="Record_FieldCount" xml:space="preserve">
    <value>Returns the number of fields in the record.</value>
  </data>
  <data name="Record_FieldCount_Description" xml:space="preserve">
    <value>Returns the number of fields in the record {0}.</value>
  </data>
  <data name="Record_FieldCount_Example1" xml:space="preserve">
    <value>Find the number of fields in the record.</value>
  </data>
  <data name="Record_FieldNames" xml:space="preserve">
    <value>Returns the names of the fields.</value>
  </data>
  <data name="Record_FieldNames_Description" xml:space="preserve">
    <value>Returns the names of the fields in the record {0} as text.</value>
  </data>
  <data name="Record_FieldNames_Example1" xml:space="preserve">
    <value>Find the names of the fields in the record.</value>
  </data>
  <data name="Record_FieldOrDefault" xml:space="preserve">
    <value>Returns the value of the specified field in a record or the default value if the field is not found.</value>
  </data>
  <data name="Record_FieldOrDefault_Description" xml:space="preserve">
    <value>Returns the value of the specified field {1} in the record {0}. If the field is not found, the optional {2} is returned.</value>
  </data>
  <data name="Record_FieldOrDefault_Example1" xml:space="preserve">
    <value>Find the value of field "Phone" in the record, or return null if it doesn't exist.</value>
  </data>
  <data name="Record_FieldOrDefault_Example2" xml:space="preserve">
    <value>Find the value of field "Phone" in the record, or return the default if it doesn't exist.</value>
  </data>
  <data name="Record_FieldValues" xml:space="preserve">
    <value>Returns a list of the field values.</value>
  </data>
  <data name="Record_FieldValues_Description" xml:space="preserve">
    <value>Returns a list of the field values in record {0}.</value>
  </data>
  <data name="Record_FieldValues_Example1" xml:space="preserve">
    <value>Find the field values in the record.</value>
  </data>
  <data name="Record_Field_Description" xml:space="preserve">
    <value>Returns the value of the specified {1} in the {0}. If the field is not found, an exception is thrown.</value>
  </data>
  <data name="Record_Field_Example1" xml:space="preserve">
    <value>Find the value of field "CustomerID" in the record.</value>
  </data>
  <data name="Record_FromList" xml:space="preserve">
    <value>Returns a record given a list of field values and a set of fields.</value>
  </data>
  <data name="Record_FromList_Description" xml:space="preserve">
    <value>Returns a record given a {0} of field values and a set of fields.  The {1} can be specified either by a list of text values, or a record type.  An error is thrown if the fields are not unique.</value>
  </data>
  <data name="Record_FromList_Example1" xml:space="preserve">
    <value>Build a record from a list of field values and a list of field names.</value>
  </data>
  <data name="Record_FromList_Example2" xml:space="preserve">
    <value>Build a record from a list of field values and a record type.</value>
  </data>
  <data name="Record_FromTable" xml:space="preserve">
    <value>Creates a record from a table of the form {[Name = name, Value = value]}.</value>
  </data>
  <data name="Record_FromTable_Description" xml:space="preserve">
    <value>Returns a record from a table of records {0} containing field names and value names &lt;code&gt;{{[Name = name, Value = value]}}&lt;/code&gt;. An exception is thrown if the field names are not unique.</value>
  </data>
  <data name="Record_FromTable_Example1" xml:space="preserve">
    <value>Create a record from the table of the form Table.FromRecords({[Name = "CustomerID", Value = 1], [Name = "Name", Value = "Bob"], [Name = "Phone", Value = "123-4567"]}).</value>
  </data>
  <data name="Record_HasFields" xml:space="preserve">
    <value>Indicates whether the record has the specified fields.</value>
  </data>
  <data name="Record_HasFields_Description" xml:space="preserve">
    <value>Indicates whether the record {0} has the fields specified in {1}, by returning a logical value (true or false).
    Multiple field values can be specified using a list.</value>
  </data>
  <data name="Record_HasFields_Example1" xml:space="preserve">
    <value>Check if the record has the field "CustomerID".</value>
  </data>
  <data name="Record_HasFields_Example2" xml:space="preserve">
    <value>Check if the record has the field "CustomerID" and "Address".</value>
  </data>
  <data name="Record_RemoveFields" xml:space="preserve">
    <value>Removes the specified field(s) from the input record.</value>
  </data>
  <data name="Record_RemoveFields_Description" xml:space="preserve">
    <value>Returns a record that removes all the fields specified in list {1} from the input {0}. If the field specified does not exist, an exception is thrown.</value>
  </data>
  <data name="Record_RemoveFields_Example1" xml:space="preserve">
    <value>Remove the field "Price" from the record.</value>
  </data>
  <data name="Record_RemoveFields_Example2" xml:space="preserve">
    <value>Remove the fields "Price" and "Item" from the record.</value>
  </data>
  <data name="Record_RenameFields" xml:space="preserve">
    <value>Applies rename(s) from a list in the form { old, new }.</value>
  </data>
  <data name="Record_RenameFields_Description" xml:space="preserve">
    <value>Returns a record after renaming fields in the input {0} to the new field names specified in list {1}. For multiple renames, a nested list can be used ({{ {{old1, new1}}, {{old2, new2}} }}.</value>
  </data>
  <data name="Record_RenameFields_Example1" xml:space="preserve">
    <value>Rename the field "UnitPrice" to "Price" from the record.</value>
  </data>
  <data name="Record_RenameFields_Example2" xml:space="preserve">
    <value>Rename the fields "UnitPrice" to "Price" and "OrderNum" to "OrderID"  from the record.</value>
  </data>
  <data name="Record_ReorderFields" xml:space="preserve">
    <value>Reorders the field(s) specified into the new order.</value>
  </data>
  <data name="Record_ReorderFields_Description" xml:space="preserve">
    <value>Returns a record after reordering the fields in {0} in the order of fields specified in list {1}. Field values are maintained and fields not listed in {1} are left in their original position.</value>
  </data>
  <data name="Record_ReorderFields_Example1" xml:space="preserve">
    <value>Reorder some of the fields in the record.</value>
  </data>
  <data name="Record_SelectFields" xml:space="preserve">
    <value>Returns a record that contains only the specified fields.</value>
  </data>
  <data name="Record_SelectFields_Description" xml:space="preserve">
    <value>Returns a record which includes only the fields specified in list {1} from the input {0}.</value>
  </data>
  <data name="Record_SelectFields_Example1" xml:space="preserve">
    <value>Select the fields "Item" and "Price" in the record.</value>
  </data>
  <data name="Record_ToList" xml:space="preserve">
    <value>Returns a list of values containing the field values of the input record.</value>
  </data>
  <data name="Record_ToList_Description" xml:space="preserve">
    <value>Returns a list of values containing the field values from the input {0}.</value>
  </data>
  <data name="Record_ToList_Example1" xml:space="preserve">
    <value>Extract the field values from a record.</value>
  </data>
  <data name="Record_ToTable" xml:space="preserve">
    <value>Returns a table with each row being a field name and value of the input record.</value>
  </data>
  <data name="Record_ToTable_Description" xml:space="preserve">
    <value>Returns a table containing the columns &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; with a row for each field in {0}.</value>
  </data>
  <data name="Record_ToTable_Example1" xml:space="preserve">
    <value>Return the table from the record.</value>
  </data>
  <data name="Record_TransformFields" xml:space="preserve">
    <value>Returns a record after applying specified transformations.</value>
  </data>
  <data name="Record_TransformFields_Description" xml:space="preserve">
    <value>Returns a record after applying transformations specified in list {1} to {0}.
    One or more fields may be transformed at a given time.
      &lt;div&gt;In the case of a single field being transformed, {1} is expected to be a list with two items. The first item in {1} specifies a field name, and the second item in {1} specifies the function to be used for transformation. For example, &lt;code&gt;{{"Quantity", Number.FromText}}&lt;/code&gt;&lt;/div&gt;
      &lt;div&gt;In the case of a multiple fields being transformed, {1} is expected to be a list of lists, where each inner list is a pair of field name and transformation operation. For example, &lt;code&gt;{{{{"Quantity",Number.FromText}},{{"UnitPrice", Number.FromText}}}}&lt;/code&gt;&lt;/div&gt;</value>
  </data>
  <data name="Record_TransformFields_Example1" xml:space="preserve">
    <value>Convert "Price" field to number.</value>
  </data>
  <data name="Record_TransformFields_Example2" xml:space="preserve">
    <value>Convert "OrderID" and "Price" fields to numbers.</value>
  </data>
  <data name="Record_Type" xml:space="preserve">
    <value>The type that represents all records.</value>
  </data>
  <data name="RelativePosition_FromEnd" xml:space="preserve">
    <value>Indicates indexing should be done from the end of the input.</value>
  </data>
  <data name="RelativePosition_FromStart" xml:space="preserve">
    <value>Indicates indexing should be done from the start of the input.</value>
  </data>
  <data name="Replacer_ReplaceText" xml:space="preserve">
    <value>Replaces text within the provided input.</value>
  </data>
  <data name="Replacer_ReplaceText_Description" xml:space="preserve">
    <value>Replaces the {1} text in the original {0} with the {2} text. This replacer function can be used in &lt;code&gt;List.ReplaceValue&lt;/code&gt; and &lt;code&gt;Table.ReplaceValue&lt;/code&gt;.</value>
  </data>
  <data name="Replacer_ReplaceText_Example1" xml:space="preserve">
    <value>Replace the text "hE" with "He" in the string "hEllo world".</value>
  </data>
  <data name="Replacer_ReplaceValue" xml:space="preserve">
    <value>Replaces values within the provided input.</value>
  </data>
  <data name="Replacer_ReplaceValue_Description" xml:space="preserve">
    <value>Replaces the {1} value in the original {0} with the {2} value. This replacer function can be used in &lt;code&gt;List.ReplaceValue&lt;/code&gt; and &lt;code&gt;Table.ReplaceValue&lt;/code&gt;.</value>
  </data>
  <data name="Replacer_ReplaceValue_Example1" xml:space="preserve">
    <value>Replace the value 11 with the value 10.</value>
  </data>
  <data name="RoundingMode_AwayFromZero" xml:space="preserve">
    <value>Round away from zero when there is a tie between the possible numbers to round to.</value>
  </data>
  <data name="RoundingMode_Down" xml:space="preserve">
    <value>Round down when there is a tie between the possible numbers to round to.</value>
  </data>
  <data name="RoundingMode_ToEven" xml:space="preserve">
    <value>Round to the nearest even number when there is a tie between the possible numbers to round to.</value>
  </data>
  <data name="RoundingMode_TowardZero" xml:space="preserve">
    <value>Round toward zero when there is a tie between the possible numbers to round to.</value>
  </data>
  <data name="RoundingMode_Type" xml:space="preserve">
    <value>Specifies rounding direction when there is a tie between the possible numbers to round to.</value>
  </data>
  <data name="RoundingMode_Up" xml:space="preserve">
    <value>Round up when there is a tie between the possible numbers to round to.</value>
  </data>
  <data name="RowExpression_Column" xml:space="preserve">
    <value>Returns an abstract syntax tree (AST) that represents access to a column within a row expression.</value>
  </data>
  <data name="RowExpression_Column_Description" xml:space="preserve">
    <value>Returns an abstract syntax tree (AST) that represents access to column {0} of the row within a row expression.</value>
  </data>
  <data name="RowExpression_Column_Example1" xml:space="preserve">
    <value>Creates an AST representing access of column "CustomerName".</value>
  </data>
  <data name="RowExpression_From" xml:space="preserve">
    <value>Returns the abstract syntax tree (AST) for the body of a function.</value>
  </data>
  <data name="RowExpression_From_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns the abstract syntax tree (AST) for the body of {0}, normalized into a &lt;i&gt;row expression&lt;/i&gt;:
&lt;ul&gt;
  &lt;li&gt;The function must be a 1-argument lambda.&lt;/li&gt;
  &lt;li&gt;All references to the function parameter are replaced with &lt;code&gt;RowExpression.Row&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;All references to columns are replaced with &lt;code&gt;RowExpression.Column(&lt;i&gt;columnName&lt;/i&gt;)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The AST will be simplified to contain only nodes of the kinds:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Invocation&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Unary&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Binary&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;If&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;FieldAccess&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/p&gt;An error is raised if a row expression AST cannot be returned for the body of {0}.&lt;/p&gt;</value>
  </data>
  <data name="RowExpression_From_Example1" xml:space="preserve">
    <value>Returns the AST for the body of the function &lt;code&gt;each [CustomerID] = "ALFKI"&lt;/code&gt;</value>
  </data>
  <data name="RowExpression_Row" xml:space="preserve">
    <value>An abstract syntax tree (AST) node representing the row in a row expression.</value>
  </data>
  <data name="RowExpression_Row_Description" xml:space="preserve">
    <value>An abstract syntax tree (AST) node representing the row in a row expression.</value>
  </data>
  <data name="Salesforce_Data" xml:space="preserve">
    <value>Returns the objects from the Salesforce account.</value>
  </data>
  <data name="Salesforce_Data_Description" xml:space="preserve">
    <value>Returns the objects on the Salesforce account provided in the credentials. The account will be connected through the provided environment {0}. If no environment is provided then the account will connect to production (https://login.salesforce.com). An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields:
    {1:type}
    </value>
  </data>
  <data name="Salesforce_Reports" xml:space="preserve">
    <value>Returns the reports from the Salesforce account.</value>
  </data>
  <data name="Salesforce_Reports_Description" xml:space="preserve">
    <value>Returns the reports on the Salesforce account provided in the credentials. The account will be connected through the provided environment {0}. If no environment is provided then the account will connect to production (https://login.salesforce.com). An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields:
    {1:type}
    </value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_BasXml" xml:space="preserve">
    <value>'bXML flattening mode' option for MDX execution in SAP Business Warehouse.</value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_BasXmlGzip" xml:space="preserve">
    <value>'Gzip compressed bXML flattening mode' option for MDX execution in SAP Business Warehouse. Recommended for low latency or high volume queries.</value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_DataStream" xml:space="preserve">
    <value>'DataStream flattening mode' option for MDX execution in SAP Business Warehouse.</value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_Type" xml:space="preserve">
    <value>Valid options for SAP Business Warehouse execution mode option.</value>
  </data>
  <data name="SapBusinessWarehouse_Cubes" xml:space="preserve">
    <value>Returns the InfoCubes and queries in an SAP Business Warehouse system grouped by InfoArea.</value>
  </data>
  <data name="SapBusinessWarehouse_Cubes_Description" xml:space="preserve">
    <value>Returns a table of InfoCubes and queries grouped by InfoArea from an SAP Business Warehouse instance at server {0} with system number {1} and Client ID {2}. An optional record parameter, {3}, may be specified to control the following options:
    {3:type}
    </value>
  </data>
  <data name="SapHanaDistribution_All" xml:space="preserve">
    <value>'All' distribution option for SAP HANA.</value>
  </data>
  <data name="SapHanaDistribution_Connection" xml:space="preserve">
    <value>'Connection' distribution option for SAP HANA.</value>
  </data>
  <data name="SapHanaDistribution_Off" xml:space="preserve">
    <value>'Off' distribution option for SAP HANA.</value>
  </data>
  <data name="SapHanaDistribution_Statement" xml:space="preserve">
    <value>'Statement' distribution option for SAP HANA.</value>
  </data>
  <data name="SapHanaDistribution_Type" xml:space="preserve">
    <value>Valid options for SAP HANA distribution option.</value>
  </data>
  <data name="SapHanaRangeOperator_Between" xml:space="preserve">
    <value>'Between' range operator for SAP HANA input parameters.</value>
  </data>
  <data name="SapHanaRangeOperator_Equals" xml:space="preserve">
    <value>'Equals' range operator for SAP HANA input parameters.</value>
  </data>
  <data name="SapHanaRangeOperator_GreaterThan" xml:space="preserve">
    <value>'Greater than' range operator for SAP HANA input parameters.</value>
  </data>
  <data name="SapHanaRangeOperator_GreaterThanOrEquals" xml:space="preserve">
    <value>'Greater than or equals' range operator for SAP HANA input parameters.</value>
  </data>
  <data name="SapHanaRangeOperator_LessThan" xml:space="preserve">
    <value>'Less than' range operator for SAP HANA input parameters.</value>
  </data>
  <data name="SapHanaRangeOperator_LessThanOrEquals" xml:space="preserve">
    <value>'Less than or equals' range operator for SAP HANA input parameters.</value>
  </data>
  <data name="SapHanaRangeOperator_NotEquals" xml:space="preserve">
    <value>'Not equals' range operator for SAP HANA input parameters.</value>
  </data>
  <data name="SapHanaRangeOperator_Type" xml:space="preserve">
    <value>A range operator for SAP HANA range input parameters.</value>
  </data>
  <data name="SapHana_Database" xml:space="preserve">
    <value>Returns the packages in an SAP HANA database.</value>
  </data>
  <data name="SapHana_Database_Description" xml:space="preserve">
    <value>Returns a table of multidimensional packages from the SAP HANA database {0}. An optional record parameter, {1}, may be specified to control the following options:
    {1:type}
    </value>
  </data>
  <data name="SharePoint_Contents" xml:space="preserve">
    <value>Returns a table containing content from a SharePoint site.</value>
  </data>
  <data name="SharePoint_Contents_Description" xml:space="preserve">
    <value>Returns a table containing a row for each folder and document found at the specified SharePoint site, {0}. Each row contains properties of the folder or file and a link to its content. {1} may be specified to control the following options:
    {1:type}
    </value>
  </data>
  <data name="SharePoint_Files" xml:space="preserve">
    <value>Returns a table containing documents from a SharePoint site.</value>
  </data>
  <data name="SharePoint_Files_Description" xml:space="preserve">
    <value>Returns a table containing a row for each document found at the specified SharePoint site, {0}, and subfolders. Each row contains properties of the folder or file and a link to its content. {1} may be specified to control the following options:
    {1:type}
    </value>
  </data>
  <data name="SharePoint_Tables" xml:space="preserve">
    <value>Returns a table containing content from a SharePoint List.</value>
  </data>
  <data name="SharePoint_Tables_Description" xml:space="preserve">
    <value>Returns a table containing a row for each List item found at the specified SharePoint list, {0}. Each row contains properties of the List. {1} may be specified to control the following options:
    {1:type}
    </value>
  </data>
  <data name="Single_From" xml:space="preserve">
    <value>Creates a Single from the given value.</value>
  </data>
  <data name="Single_From_Description" xml:space="preserve">
    <value>Returns a Single &lt;code&gt;number&lt;/code&gt; value from the given {0}. If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Single.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.  If the given {0} is &lt;code&gt;number&lt;/code&gt; within the range of Single, {0} is returned, otherwise an error is returned. If {0} is of any other type, it will first be converted to a &lt;code&gt;number&lt;/code&gt; using &lt;code&gt;Number.FromText&lt;/code&gt;. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Single_From_Example1" xml:space="preserve">
    <value>Get the Single &lt;code&gt;number&lt;/code&gt; value of &lt;code&gt;"1.5"&lt;/code&gt;.</value>
  </data>
  <data name="Single_Type" xml:space="preserve">
    <value>The type that represents single precision floating point number.</value>
  </data>
  <data name="Soda_Feed" xml:space="preserve">
    <value>Returns a table from the contents at the specified URL formatted according to the SODA 2.0 API.</value>
  </data>
  <data name="Soda_Feed_Description" xml:space="preserve">
    <value>Returns a table from the contents at the specified URL {0} formatted according to the SODA 2.0 API. The URL must point to a valid SODA-compliant source that ends in a .csv extension.</value>
  </data>
  <data name="Splitter_SplitByNothing" xml:space="preserve">
    <value>Returns a function that does no splitting, returning its argument as a single element list.</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter" xml:space="preserve">
    <value>Returns a function that splits text into a list of text at any of the specified delimiters.</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter_Example1" xml:space="preserve">
    <value>Split the input by comma or semicolon, ignoring quotes and quoted delimiters and starting from the beginning of the input.</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter_Example2" xml:space="preserve">
    <value>Split the input by comma or semicolon, ignoring quotes and quoted delimiters and starting from the end of the input.</value>
  </data>
  <data name="Splitter_SplitTextByCharacterTransition" xml:space="preserve">
    <value>Returns a function that splits text into a list of text according to a transition from one kind of character to another. The {0} and {1} parameters can either be a list of characters, or a function that takes a character and returns true/false.</value>
  </data>
  <data name="Splitter_SplitTextByCharacterTransition_Example1" xml:space="preserve">
    <value>Split the input whenever an upper or lowercase letter is followed by a digit.</value>
  </data>
  <data name="Splitter_SplitTextByDelimiter" xml:space="preserve">
    <value>Returns a function that splits text into a list of text according to the specified delimiter.</value>
  </data>
  <data name="Splitter_SplitTextByDelimiter_Example1" xml:space="preserve">
    <value>Split the input by comma, ignoring quoted commas.</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter" xml:space="preserve">
    <value>Returns a function that splits text into a list of text at each specified delimiter in sequence.</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter_Example1" xml:space="preserve">
    <value>Split the input by comma, then semicolon, starting from the beginning of the input.</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter_Example2" xml:space="preserve">
    <value>Split the input by comma, then semicolon, treating quotes like any other character and starting from the end of the input.</value>
  </data>
  <data name="Splitter_SplitTextByLengths" xml:space="preserve">
    <value>Returns a function that splits text into a list of text by each specified length.</value>
  </data>
  <data name="Splitter_SplitTextByLengths_Example1" xml:space="preserve">
    <value>Split the input into the first two characters followed by the next three, starting from the beginning of the input.</value>
  </data>
  <data name="Splitter_SplitTextByLengths_Example2" xml:space="preserve">
    <value>Split the input into the first three characters followed by the next two, starting from the end of the input.</value>
  </data>
  <data name="Splitter_SplitTextByPositions" xml:space="preserve">
    <value>Returns a function that splits text into a list of text at each specified position.</value>
  </data>
  <data name="Splitter_SplitTextByPositions_Example1" xml:space="preserve">
    <value>Split the input at the specified positions, starting from the beginning of the input.</value>
  </data>
  <data name="Splitter_SplitTextByPositions_Example2" xml:space="preserve">
    <value>Split the input at the specified positions, starting from the end of the input.</value>
  </data>
  <data name="Splitter_SplitTextByRanges" xml:space="preserve">
    <value>Returns a function that splits text into a list of text according to the specified offsets and lengths.</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Description" xml:space="preserve">
    <value>Returns a function that splits text into a list of text according to the specified offsets and lengths. A null length indicates that all remaining input should be included.</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example1" xml:space="preserve">
    <value>Split the input by the specified position and length pairs, starting from the beginning of the input. Note that the ranges in this example overlap.</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example2" xml:space="preserve">
    <value>Split the input by the specified position and length pairs, starting from the end of the input.</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example3" xml:space="preserve">
    <value>Split the input into a fixed-length postal code followed by a variable-length city name.</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths" xml:space="preserve">
    <value>Returns a function that splits text into a list of text after the specified length repeatedly.</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths_Example1" xml:space="preserve">
    <value>Repeatedly split the input into chunks of three characters, starting from the beginning of the input.</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths_Example2" xml:space="preserve">
    <value>Repeatedly split the input into chunks of three characters, starting from the end of the input.</value>
  </data>
  <data name="Splitter_SplitTextByWhitespace" xml:space="preserve">
    <value>Returns a function that splits text into a list of text at whitespace.</value>
  </data>
  <data name="Splitter_SplitTextByWhitespace_Example1" xml:space="preserve">
    <value>Split the input by whitespace characters, treating quotes like any other character.</value>
  </data>
  <data name="SqlDatabase_View" xml:space="preserve">
    <value>Returns a navigation table based on SQL-like metadata.</value>
  </data>
  <data name="SqlDatabase_View_Description" xml:space="preserve">
    <value>Returns a navigation table based on SQL-like metadata where the table contents are produced by evaluating a specific SQL dialect using a supplied function.</value>
  </data>
  <data name="SqlExpression_SchemaFrom" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="SqlExpression_SchemaFrom_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="SqlExpression_ToExpression" xml:space="preserve">
    <value>Converts the provided SQL query to M code. This function is intended for internal use only.</value>
  </data>
  <data name="SqlExpression_ToExpression_Description" xml:space="preserve">
    <value>Converts the provided {0} query to M code, with the available identifiers defined by {1}. This function is intended for internal use only.</value>
  </data>
  <data name="Sql_Database" xml:space="preserve">
    <value>Returns a table of SQL tables, views, and stored functions from the SQL Server database.</value>
  </data>
  <data name="Sql_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables, views, and stored functions from the SQL Server database {1} on server {0}. The port may be optionally specified with the server, separated by a colon or a comma. An optional record parameter, {2}, may be specified to control the following options:
    {2:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="Sql_Databases" xml:space="preserve">
    <value>Returns a table of databases on a SQL Server.</value>
  </data>
  <data name="Sql_Databases_Description" xml:space="preserve">
    <value>Returns a table of databases on the specified SQL server, {0}. An optional record parameter, {1}, may be specified to control the following options:
    {1:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] for example.
    &lt;br&gt;
    Does not support setting a SQL query to run on the server. &lt;code&gt;Sql.Database&lt;/code&gt; should be used instead to run a SQL query.
    </value>
  </data>
  <data name="String" xml:space="preserve">
    <value />
  </data>
  <data name="Sybase_Database" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in a Sybase database.</value>
  </data>
  <data name="Sybase_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views available in a Sybase database on server {0} in the database instance named {1}. The port may be optionally specified with the server, separated by a colon. An optional record parameter, {2}, may be specified to control the following options:
    {2:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="TableAction_DeleteRows" xml:space="preserve">
    <value>Creates an action to delete rows from a table.</value>
  </data>
  <data name="TableAction_DeleteRows_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates an action to delete the rows in {0}. The action returns a table containing the deleted rows as they appeared in {0} before the action executed.&lt;/p&gt;
&lt;p&gt;To delete a subset of the rows in {0}, use &lt;code&gt;Table.SelectRows&lt;/code&gt; to apply a filter to {0} before using &lt;code&gt;TableAction.DeleteRows&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function raises an evaluation error if {0} is not updatable.&lt;/p&gt;
&lt;p&gt;The action raises an execution error if the operation fails.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {0} may be left in a partially updated state if an execution error occurs.&lt;/p&gt;</value>
  </data>
  <data name="TableAction_InsertRows" xml:space="preserve">
    <value>Creates an action to insert rows into a table.</value>
  </data>
  <data name="TableAction_InsertRows_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates an action that inserts {1} into {0}. The action returns a table containing the inserted rows as they appear in {0} after the action executes.&lt;/p&gt;
&lt;p&gt;Target-specific default values are used for the columns in {0} that are not specified in {1}.&lt;/p&gt;
&lt;p&gt;The function raises an evaluation error if {0} is not updatable or if {1} is not compatible with {0}.&lt;/p&gt;
&lt;p&gt;The action raises an execution error if the operation fails.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {0} may be left in a partially updated state if an execution error occurs.&lt;/p&gt;</value>
  </data>
  <data name="TableAction_Tee" xml:space="preserve">
    <value>Creates an action that executes multiple actions concurrently while reading data from a table.</value>
  </data>
  <data name="TableAction_Tee_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates an action that concurrently executes the actions specified in {1} while allowing them all to read from {0}.&lt;/p&gt;
&lt;p&gt;{1} is a list of 1-argument functions that are each invoked against {0} and must return an action to execute. The resulting list of actions is executed concurrently.&lt;/p&gt;
&lt;p&gt;Each action can read from {0} by referencing the argument provided to the function that constructed it. {0} will be enumerated at most once.&lt;/p&gt;
&lt;p&gt;When executed, the action returns a list containing the results of the actions in the order in which they were specified in {1}.&lt;/p&gt;
&lt;p&gt;If an action in {1} raises an error during execution, other actions in {1} that are still executing may be terminated. This behavior can be avoided by using &lt;code&gt;Action.Try&lt;/code&gt; in the error-raising action.&lt;/p&gt;
&lt;p&gt;NOTE: The current implementation of this function does not support {0} with non-primitive column types. Metadata on {0} is not preserved.&lt;/p&gt;</value>
  </data>
  <data name="TableAction_UpdateRows" xml:space="preserve">
    <value>Creates an action to update rows in a table.</value>
  </data>
  <data name="TableAction_UpdateRows_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates an action to update the rows in {0} based on the set of operations in {1}. The action returns a table containing the updated rows as they appear in {0} after the action executes.&lt;/p&gt;
&lt;p&gt;The value of {1} may be a single &lt;code&gt;{{columnName, columnFunction}}&lt;/code&gt; pair or a list of such pairs. For each pair, the &lt;code&gt;columnFunction&lt;/code&gt; is the function to apply to a row to compute the new value for the &lt;code&gt;columnName&lt;/code&gt; column for that row.&lt;/p&gt;
&lt;p&gt;To update a subset of the rows in {0}, use &lt;code&gt;Table.SelectRows&lt;/code&gt; to apply a filter to {0} before using &lt;code&gt;TableAction.UpdateRows&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function raises an evaluation error if {0} is not updatable or if any of the operations in {1} are incompatible with {0}.&lt;/p&gt;
&lt;p&gt;The action raises an execution error if the operation fails.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {0} may be left in a partially updated state if an execution error occurs.&lt;/p&gt;</value>
  </data>
  <data name="Table_AddColumn" xml:space="preserve">
    <value>Adds a column with the specified name. The value is computed using the specified selection function with each row taken as an input.</value>
  </data>
  <data name="Table_AddColumn_Description" xml:space="preserve">
    <value>Adds a column named {1} to the table {0}. The values for the column are computed using the specified selection function {2} with each row taken as an input.</value>
  </data>
  <data name="Table_AddColumn_Example1" xml:space="preserve">
    <value>Add a number column named "TotalPrice" to the table, with each value being the sum of the [Price] and [Shipping] columns.</value>
  </data>
  <data name="Table_AddFuzzyClusterColumn" xml:space="preserve">
    <value>Adds a new column with representative values obtained by fuzzy grouping values of the specified column in the table.</value>
  </data>
  <data name="Table_AddFuzzyClusterColumn_Description" xml:space="preserve">
    <value>Adds a new column {2} to {0} with representative values of {1}. The representatives are obtained by fuzzily matching values in {1}, for each row.
    &lt;p&gt;An optional set of {3} may be included to specify how to compare the key columns. Options include:
    {3:type}
&lt;/p&gt;
    </value>
  </data>
  <data name="Table_AddFuzzyClusterColumn_Example1" xml:space="preserve">
    <value>Find the representative values for the location of the employees.</value>
  </data>
  <data name="Table_AddIndexColumn" xml:space="preserve">
    <value>Appends a column with explicit position values.</value>
  </data>
  <data name="Table_AddIndexColumn_Description" xml:space="preserve">
    <value>Appends a column named {1} to the {0} with explicit position values.
    An optional value, {2}, the initial index value. An optional value, {3}, specifies how much to increment each index value.</value>
  </data>
  <data name="Table_AddIndexColumn_Example1" xml:space="preserve">
    <value>Add an index column named "Index" to the table.</value>
  </data>
  <data name="Table_AddIndexColumn_Example2" xml:space="preserve">
    <value>Add an index column named "index", starting at value 10 and incrementing by 5, to the table.</value>
  </data>
  <data name="Table_AddJoinColumn" xml:space="preserve">
    <value>Performs a join between tables on supplied columns and produces the join result in a new column.</value>
  </data>
  <data name="Table_AddJoinColumn_Description" xml:space="preserve">
    <value>Joins the rows of {0} with the rows of {2} based on the equality of the values of the key columns selected by {1} (for {0}) and {3} (for {2}). The results are entered into the column named {4}.
This function behaves similarly to Table.Join with a JoinKind of LeftOuter except that the join results are presented in a nested rather than flattened fashion.</value>
  </data>
  <data name="Table_AddJoinColumn_Example1" xml:space="preserve">
    <value>Add a join column to ({[saleID = 1, item = "Shirt"], [saleID = 2, item = "Hat"]}) named "price/stock" from the table ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) joined on [saleID].</value>
  </data>
  <data name="Table_AddKey" xml:space="preserve">
    <value>Adds a key to a table.</value>
  </data>
  <data name="Table_AddKey_Description" xml:space="preserve">
    <value>Adds a key to {0}, where {1} is the list of column names that define the key, and {2} specifies whether the key is primary.</value>
  </data>
  <data name="Table_AddKey_Example1" xml:space="preserve">
    <value>Add a single-column primary key to a table.</value>
  </data>
  <data name="Table_AddRankColumn" xml:space="preserve">
    <value>Appends a column with the ranking of one or more other columns.</value>
  </data>
  <data name="Table_AddRankColumn_Description" xml:space="preserve">
    <value>Appends a column named {1} to the {0} with the ranking of one or more other columns described by {2}.
The RankKind option in {3} can be used by advanced users to pick a more-specific ranking method.</value>
  </data>
  <data name="Table_AddRankColumn_Example1" xml:space="preserve">
    <value>Add a column named "RevenueRank" to the table which ranks the "Revenue" column from highest to lowest.</value>
  </data>
  <data name="Table_AggregateTableColumn" xml:space="preserve">
    <value>Aggregates a column of tables into multiple columns in the containing table.</value>
  </data>
  <data name="Table_AggregateTableColumn_Description" xml:space="preserve">
    <value>Aggregates tables in {0}[{1}] into multiple columns containing aggregate values for the tables. {2} is used to specify the columns containing the tables to aggregate, the aggregation functions to apply to the tables to generate their values, and the names of the aggregate columns to create.</value>
  </data>
  <data name="Table_AggregateTableColumn_Example1" xml:space="preserve">
    <value>Aggregate table columns in &lt;code&gt;[t]&lt;/code&gt; in the table &lt;code&gt;{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}&lt;/code&gt; into the sum of &lt;code&gt;[t.a]&lt;/code&gt;, the min and max of &lt;code&gt;[t.b]&lt;/code&gt;, and the count of values in &lt;code&gt;[t.a]&lt;/code&gt;.</value>
  </data>
  <data name="Table_AlternateRows" xml:space="preserve">
    <value>Keeps the initial offset then alternates taking and skipping the following rows.</value>
  </data>
  <data name="Table_AlternateRows_Description" xml:space="preserve">
    <value>Keeps the initial offset then alternates taking and skipping the following rows.
    &lt;ul&gt;
       &lt;li&gt;{0}: The input table.&lt;/li&gt;
       &lt;li&gt;{1}: The number of rows to keep before starting iterations.&lt;/li&gt;
       &lt;li&gt;{2}: The number of rows to remove in each iteration.&lt;/li&gt;
       &lt;li&gt;{3}: The number of rows to keep in each iteration.&lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Table_AlternateRows_Example1" xml:space="preserve">
    <value>Return a table from the table that, starting at the first row, skips 1 value and then keeps 1 value.</value>
  </data>
  <data name="Table_ApproximateRowCount" xml:space="preserve">
    <value>Returns the approximate number of rows in the table.</value>
  </data>
  <data name="Table_ApproximateRowCount_Description" xml:space="preserve">
    <value>Returns the approximate number of rows in the {0}, or an error if the data source doesn't support approximation.</value>
  </data>
  <data name="Table_ApproximateRowCount_Example1" xml:space="preserve">
    <value>Estimate the number of distinct combinations of city and state in a large table, which can be used as a cardinality estimate for the columns. Cardinality estimates are important enough that various data sources (such as SQL Server) support this particular approximation, often using an algorithm called HyperLogLog.</value>
  </data>
  <data name="Table_Buffer" xml:space="preserve">
    <value>Buffers a table in memory, isolating it from external changes during evaluation.</value>
  </data>
  <data name="Table_Buffer_Description" xml:space="preserve">
    <value>Buffers a table in memory, isolating it from external changes during evaluation.
    Buffering is shallow. It forces the evaluation of any scalar cell values, but leaves non-scalar values (records, lists, tables, and so on) as-is.
    &lt;br&gt;
    &lt;br&gt;
    Note that using this function might or might not make your queries run faster. In some cases, it can make your queries run more slowly due to the added 
    cost of reading all the data and storing it in memory, as well as the fact that buffering prevents downstream folding. If the data doesn't need to be
    buffered but you just want to prevent downstream folding, use &lt;code&gt;Table.StopFolding&lt;/code&gt; instead.</value>
  </data>
  <data name="Table_Buffer_Example1" xml:space="preserve">
    <value>Load all the rows of a SQL table into memory, so that any downstream operations will no longer be able to query the SQL server.</value>
  </data>
  <data name="Table_Column" xml:space="preserve">
    <value>Returns a specified column of data from the table as a list.</value>
  </data>
  <data name="Table_ColumnCount" xml:space="preserve">
    <value>Returns the number of columns in the table.</value>
  </data>
  <data name="Table_ColumnCount_Description" xml:space="preserve">
    <value>Returns the number of columns in the table {0}.</value>
  </data>
  <data name="Table_ColumnCount_Example1" xml:space="preserve">
    <value>Find the number of columns in the table.</value>
  </data>
  <data name="Table_ColumnNames" xml:space="preserve">
    <value>Returns the column names as a list.</value>
  </data>
  <data name="Table_ColumnNames_Description" xml:space="preserve">
    <value>Returns the column names in the table {0} as a list of text.</value>
  </data>
  <data name="Table_ColumnNames_Example1" xml:space="preserve">
    <value>Find the column names of the table.</value>
  </data>
  <data name="Table_Column_Description" xml:space="preserve">
    <value>Returns the column of data specified by {1} from the table {0} as a list.</value>
  </data>
  <data name="Table_Column_Example1" xml:space="preserve">
    <value>Returns the values from the [Name] column in the table.</value>
  </data>
  <data name="Table_ColumnsOfType" xml:space="preserve">
    <value>Returns a list with the names of the columns that match the specified types.</value>
  </data>
  <data name="Table_ColumnsOfType_Description" xml:space="preserve">
    <value>Returns a list with the names of the columns from table {0} that match the types specified in {1}.</value>
  </data>
  <data name="Table_ColumnsOfType_Example1" xml:space="preserve">
    <value>Return the names of columns of type Number.Type from the table.</value>
  </data>
  <data name="Table_Combine" xml:space="preserve">
    <value>Returns a table that is the result of merging a list of tables.</value>
  </data>
  <data name="Table_CombineColumns" xml:space="preserve">
    <value>Combines the specified columns into a new column using the specified combiner function.</value>
  </data>
  <data name="Table_CombineColumnsToRecord" xml:space="preserve">
    <value>Combines the specified columns into a new record-valued column where each record has field names and values corresponding to the column names and values of the columns that were combined.</value>
  </data>
  <data name="Table_CombineColumnsToRecord_Description" xml:space="preserve">
    <value>Combines the specified columns of {0} into a new record-valued column named {1} where each record has field names and values corresponding to the column names and values of the columns that were combined. If a record is specified for {3}, the following options may be provided:
    &lt;ul&gt;
     &lt;li&gt; &lt;code&gt;DisplayNameColumn&lt;/code&gt;: When specified as text, indicates that the given column name should be treated as the display name of the record. This need not be one of the columns in the record itself.&lt;/li&gt;
     &lt;li&gt; &lt;code&gt;TypeName&lt;/code&gt;: When specified as text, supplies a logical type name for the resulting record which can be used during data load to drive behavior by the loading environment.&lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Table_CombineColumns_Example1" xml:space="preserve">
    <value>Combine the last and first names into a new column, separated by a comma.</value>
  </data>
  <data name="Table_Combine_Description" xml:space="preserve">
    <value>Returns a table that is the result of merging a list of tables, {0}. The resulting table will have a row type structure defined by {1} or by a union of the input types if {1} is not specified.</value>
  </data>
  <data name="Table_Combine_Example1" xml:space="preserve">
    <value>Merge the three tables together.</value>
  </data>
  <data name="Table_Combine_Example2" xml:space="preserve">
    <value>Merge three tables with different structures.</value>
  </data>
  <data name="Table_Combine_Example3" xml:space="preserve">
    <value>Merge two tables and project onto the given type.</value>
  </data>
  <data name="Table_ConformToPageReader" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Table_ConformToPageReader_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Table_Contains" xml:space="preserve">
    <value>Indicates whether the specified record appears as a row in the table.</value>
  </data>
  <data name="Table_ContainsAll" xml:space="preserve">
    <value>Indicates whether all of the specified records appear as rows in the table.</value>
  </data>
  <data name="Table_ContainsAll_Description" xml:space="preserve">
    <value>Indicates whether all the specified records in the list of records {1}, appear as rows in the {0}.
    An optional parameter {2} may be specified to control comparison between the rows of the table.</value>
  </data>
  <data name="Table_ContainsAll_Example1" xml:space="preserve">
    <value>Determine if the table contains all the rows, comparing only the column [CustomerID].</value>
  </data>
  <data name="Table_ContainsAll_Example2" xml:space="preserve">
    <value>Determine if the table contains all the rows.</value>
  </data>
  <data name="Table_ContainsAny" xml:space="preserve">
    <value>Indicates whether any of the specified records appear as rows in the table.</value>
  </data>
  <data name="Table_ContainsAny_Description" xml:space="preserve">
    <value>Indicates whether any the specified records in the list of records {1}, appear as rows in the {0}.
    An optional parameter {2} may be specified to control comparison between the rows of the table.</value>
  </data>
  <data name="Table_ContainsAny_Example1" xml:space="preserve">
    <value>Determine if the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4]})&lt;/code&gt; contains the rows &lt;code&gt;[a = 1, b = 2]&lt;/code&gt; or &lt;code&gt;[a = 3, b = 5]&lt;/code&gt;.</value>
  </data>
  <data name="Table_ContainsAny_Example2" xml:space="preserve">
    <value>Determine if the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4]})&lt;/code&gt; contains the rows &lt;code&gt;[a = 1, b = 3]&lt;/code&gt; or &lt;code&gt;[a = 3, b = 5]&lt;/code&gt;.</value>
  </data>
  <data name="Table_ContainsAny_Example3" xml:space="preserve">
    <value>Determine if the table &lt;code&gt;(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))&lt;/code&gt; contains the rows &lt;code&gt;[a = 1, b = 3]&lt;/code&gt; or &lt;code&gt;[a = 3, b = 5]&lt;/code&gt; comparing only the column [a].</value>
  </data>
  <data name="Table_Contains_Description" xml:space="preserve">
    <value>Indicates whether the specified record, {1}, appears as a row in the {0}.
    An optional parameter {2} may be specified to control comparison between the rows of the table.</value>
  </data>
  <data name="Table_Contains_Example1" xml:space="preserve">
    <value>Determine if the table contains the row.</value>
  </data>
  <data name="Table_Contains_Example2" xml:space="preserve">
    <value>Determine if the table contains the row.</value>
  </data>
  <data name="Table_Contains_Example3" xml:space="preserve">
    <value>Determine if the table contains the row comparing only the column [Name].</value>
  </data>
  <data name="Table_DemoteHeaders" xml:space="preserve">
    <value>Demotes the column headers to the first row of values.</value>
  </data>
  <data name="Table_DemoteHeaders_Description" xml:space="preserve">
    <value>Demotes the column headers (i.e. column names) to the first row of values. The default column names are "Column1", "Column2" and so on.</value>
  </data>
  <data name="Table_DemoteHeaders_Example1" xml:space="preserve">
    <value>Demote the first row of values in the table.</value>
  </data>
  <data name="Table_Distinct" xml:space="preserve">
    <value>Removes duplicate rows from the table.</value>
  </data>
  <data name="Table_Distinct_Description" xml:space="preserve">
    <value>Removes duplicate rows from the table.
    An optional parameter, {1}, specifies which columns of the table are tested for duplication. If {1} is not specified, all columns are tested.&lt;br&gt;
    &lt;br&gt;
    Because Power Query sometimes offloads certain operations to backend data sources (known as "folding"), and also sometimes optimizes queries by 
    skipping operations that aren't strictly necessary, in general there's no guarantee which specific duplicate will be preserved.
    For example, you can't assume that the first row with a unique set of column values will remain, and rows further down in the table will be removed.
    If you want the duplicate removal to behave predictably, first buffer the table using &lt;code&gt;Table.Buffer&lt;/code&gt;.</value>
  </data>
  <data name="Table_Distinct_Example1" xml:space="preserve">
    <value>Remove the duplicate rows from the table.</value>
  </data>
  <data name="Table_Distinct_Example2" xml:space="preserve">
    <value>Remove the duplicate rows from column [b] in the table &lt;code&gt;({[a = "A", b = "a"], [a = "B", b = "a"], [a = "A", b = "b"]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_DuplicateColumn" xml:space="preserve">
    <value>Duplicates a column with the specified name. Values and type are copied from the source column.</value>
  </data>
  <data name="Table_DuplicateColumn_Description" xml:space="preserve">
    <value>Duplicate the column named {1} to the table {0}. The values and type for the column {2} are copied from coulmn {1}.</value>
  </data>
  <data name="Table_DuplicateColumn_Example1" xml:space="preserve">
    <value>Duplicate the column "a" to a column named "copied column" in the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_ExpandListColumn" xml:space="preserve">
    <value>Given a column of lists in a table, create a copy of a row for each value in its list.</value>
  </data>
  <data name="Table_ExpandListColumn_Description" xml:space="preserve">
    <value>Given a {0} where {1} contains a list of values, splits the list into a row for each value. Values in the other columns are duplicated in each new row created. This function can also expand nested tables by treating them as lists of records.</value>
  </data>
  <data name="Table_ExpandListColumn_Example1" xml:space="preserve">
    <value>Split the list column [Name].</value>
  </data>
  <data name="Table_ExpandListColumn_Example2" xml:space="preserve">
    <value>Split the nested table column [Components].</value>
  </data>
  <data name="Table_ExpandRecordColumn" xml:space="preserve">
    <value>Expands a column of records into columns with each of the values.</value>
  </data>
  <data name="Table_ExpandRecordColumn_Description" xml:space="preserve">
    <value>Given the {1} of records in the input {0}, creates a table with a column for each field in the record. Optionally, {3} may be specified to ensure unique names for the columns in the new table.
    &lt;ul&gt;
        &lt;li&gt;{0}: The original table with the record column to expand. &lt;/li&gt;
        &lt;li&gt;{1}: The column to expand.&lt;/li&gt;
        &lt;li&gt;{2}: The list of fields to expand into columns in the table.&lt;/li&gt;
        &lt;li&gt;{3}: The list of column names to give the new columns. The new column names cannot duplicate any column in the new table.&lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="Table_ExpandRecordColumn_Example1" xml:space="preserve">
    <value>Expand column [a] in the table &lt;code&gt;({[a = [aa = 1, bb = 2, cc = 3], b = 2]})&lt;/code&gt; into 3 columns "aa", "bb" and "cc".</value>
  </data>
  <data name="Table_ExpandTableColumn" xml:space="preserve">
    <value>Expands a column of records or a column of tables into multiple columns in the containing table.</value>
  </data>
  <data name="Table_ExpandTableColumn_Description" xml:space="preserve">
    <value>Expands tables in {0}[{1}] into multiple rows and columns. {2} is used to select the columns to expand from the inner table. Specify {3} to avoid conflicts between existing columns and new columns.</value>
  </data>
  <data name="Table_ExpandTableColumn_Example1" xml:space="preserve">
    <value>Expand table columns in &lt;code&gt;[a]&lt;/code&gt; in the table &lt;code&gt;({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})&lt;/code&gt; into 3 columns &lt;code&gt;[t.a]&lt;/code&gt;, &lt;code&gt;[t.b]&lt;/code&gt; and &lt;code&gt;[t.c]&lt;/code&gt;.</value>
  </data>
  <data name="Table_FillDown" xml:space="preserve">
    <value>Propagates the value of a previous cell to the null-valued cells below in the column.</value>
  </data>
  <data name="Table_FillDown_Description" xml:space="preserve">
    <value>Returns a table from the {0} specified where the value of a previous cell is propagated to the null-valued cells below in the {1} specified.</value>
  </data>
  <data name="Table_FillDown_Example1" xml:space="preserve">
    <value>Return a table with the null values in column [Place] filled with the value above them from the table.</value>
  </data>
  <data name="Table_FillUp" xml:space="preserve">
    <value>Propagates the value of a cell to the null-valued cells above in the column.</value>
  </data>
  <data name="Table_FillUp_Description" xml:space="preserve">
    <value>Returns a table from the {0} specified where the value of the next cell is propagated to the null-valued cells above in the {1} specified.</value>
  </data>
  <data name="Table_FillUp_Example1" xml:space="preserve">
    <value>Return a table with the null values in column [Column2] filled with the value below them from the table.</value>
  </data>
  <data name="Table_FilterWithDataTable" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Table_FilterWithDataTable_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Table_FindText" xml:space="preserve">
    <value>Returns all the rows that contain the given text in the table.</value>
  </data>
  <data name="Table_FindText_Description" xml:space="preserve">
    <value>Returns the rows in the table {0} that contain the text {1}. If the text is not found, an empty table is returned.</value>
  </data>
  <data name="Table_FindText_Example1" xml:space="preserve">
    <value>Find the rows in the table that contain "Bob".</value>
  </data>
  <data name="Table_First" xml:space="preserve">
    <value>Returns the first row or a specified default value.</value>
  </data>
  <data name="Table_FirstN" xml:space="preserve">
    <value>Returns the first count rows specified.</value>
  </data>
  <data name="Table_FirstN_Description" xml:space="preserve">
    <value>Returns the first row(s) of the table {0}, depending on the value of {1}:
    &lt;ul&gt;
    &lt;li&gt; If {1} is a number, that many rows (starting at the top) will be returned. &lt;/li&gt;
    &lt;li&gt; If {1} is a condition, the rows that meet the condition will be returned until a row does not meet the condition.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="Table_FirstN_Example1" xml:space="preserve">
    <value>Find the first two rows of the table.</value>
  </data>
  <data name="Table_FirstN_Example2" xml:space="preserve">
    <value>Find the first rows where [a] &gt; 0 in the table.</value>
  </data>
  <data name="Table_FirstValue" xml:space="preserve">
    <value>Returns the first column of the first row of the table or a specified default value.</value>
  </data>
  <data name="Table_FirstValue_Description" xml:space="preserve">
    <value>Returns the first column of the first row of the table {0} or a specified default value.</value>
  </data>
  <data name="Table_First_Description" xml:space="preserve">
    <value>Returns the first row of the {0} or an optional default value, {1}, if the table is empty.</value>
  </data>
  <data name="Table_First_Example1" xml:space="preserve">
    <value>Find the first row of the table.</value>
  </data>
  <data name="Table_First_Example2" xml:space="preserve">
    <value>Find the first row of the table &lt;code&gt;({})&lt;/code&gt; or return [a = 0, b = 0] if empty.</value>
  </data>
  <data name="Table_FromColumns" xml:space="preserve">
    <value>Creates a table from a list of columns and specified values.</value>
  </data>
  <data name="Table_FromColumns_Description" xml:space="preserve">
    <value>Creates a table of type {1} from a list {0} containing nested lists with the column names and values.
    If some columns have more values then others, the missing values will be filled with the default value, 'null', if the columns are nullable.</value>
  </data>
  <data name="Table_FromColumns_Example1" xml:space="preserve">
    <value>Return a table from a list of customer names in a list. Each value in the customer list item becomes a row value, and each list becomes a column.</value>
  </data>
  <data name="Table_FromColumns_Example2" xml:space="preserve">
    <value>Create a table from a given list of columns and a list of column names.</value>
  </data>
  <data name="Table_FromColumns_Example3" xml:space="preserve">
    <value>Create a table with different number of columns per row. The missing row value is null.</value>
  </data>
  <data name="Table_FromList" xml:space="preserve">
    <value>Converts a list into a table by applying the specified splitting function to each item in the list.</value>
  </data>
  <data name="Table_FromList_Description" xml:space="preserve">
    <value>Converts a list, {0} into a table by applying the optional splitting function, {1}, to each item in the list. By default, the list is assumed to be a list of text values that is split by commas. Optional {2} may be the number of columns, a list of columns or a TableType. Optional {3} and {4} may also be specified.</value>
  </data>
  <data name="Table_FromList_Example1" xml:space="preserve">
    <value>Create a table from a list using the default splitter.</value>
  </data>
  <data name="Table_FromList_Example2" xml:space="preserve">
    <value>Create a table from a list using a custom splitter.</value>
  </data>
  <data name="Table_FromList_Example3" xml:space="preserve">
    <value>Create a table from the list using the Record.FieldValues splitter.</value>
  </data>
  <data name="Table_FromPartitions" xml:space="preserve">
    <value>Returns a table that is the result of combining a set of partitioned tables.</value>
  </data>
  <data name="Table_FromPartitions_Description" xml:space="preserve">
    <value>Returns a table that is the result of combining a set of partitioned tables, {1}. {0} is the name of the column to add. The type of the column defaults to &lt;code&gt;any&lt;/code&gt;, but can be specified by {2}.</value>
  </data>
  <data name="Table_FromPartitions_Example1" xml:space="preserve">
    <value>Find item type from the list &lt;code&gt;{number}&lt;/code&gt;.</value>
  </data>
  <data name="Table_FromRecords" xml:space="preserve">
    <value>Converts a list of records into a table.</value>
  </data>
  <data name="Table_FromRecords_Description" xml:space="preserve">
    <value>Converts {0}, a list of records, into a table.</value>
  </data>
  <data name="Table_FromRecords_Example1" xml:space="preserve">
    <value>Create a table from records, using record field names as column names.</value>
  </data>
  <data name="Table_FromRecords_Example2" xml:space="preserve">
    <value>Create a table from records with typed columns and select the number columns.</value>
  </data>
  <data name="Table_FromRows" xml:space="preserve">
    <value>Creates a table from a list of row values and optional columns</value>
  </data>
  <data name="Table_FromRows_Description" xml:space="preserve">
    <value>Creates a table from the list {0} where each element of the list is an inner list that contains the column values for a single row.  An optional list of column names, a table type, or a number of columns could be provided for {1}.</value>
  </data>
  <data name="Table_FromRows_Example1" xml:space="preserve">
    <value>Return a table with column [CustomerID] with values {1, 2}, column [Name] with values {"Bob", "Jim"}, and column [Phone] with values {"123-4567", "987-6543"}.</value>
  </data>
  <data name="Table_FromRows_Example2" xml:space="preserve">
    <value>Return a table with column [CustomerID] with values {1, 2}, column [Name] with values {"Bob", "Jim"}, and column [Phone] with values {"123-4567", "987-6543"}, where [CustomerID] is number type, and [Name] and [Phone] are text types.</value>
  </data>
  <data name="Table_FromValue" xml:space="preserve">
    <value>Creates a table with a column from the provided value(s).</value>
  </data>
  <data name="Table_FromValue_Description" xml:space="preserve">
    <value>Creates a table with a column containing the provided value or list of values, {0}. An optional record parameter, {1}, may be specified to control the following options:
    &lt;ul&gt;
    &lt;li&gt; &lt;code&gt;DefaultColumnName&lt;/code&gt; : The column name used when constructing a table from a list or scalar value.&lt;/li&gt;
    &lt;/ul&gt;
  </value>
  </data>
  <data name="Table_FromValue_Example1" xml:space="preserve">
    <value>Create a table from the value 1.</value>
  </data>
  <data name="Table_FromValue_Example2" xml:space="preserve">
    <value>Create a table from the list.</value>
  </data>
  <data name="Table_FromValue_Example3" xml:space="preserve">
    <value>Create a table from the value 1, with a custom column name.</value>
  </data>
  <data name="Table_FuzzyGroup" xml:space="preserve">
    <value>Groups rows in the table based on fuzzy matching of keys.</value>
  </data>
  <data name="Table_FuzzyGroup_Description" xml:space="preserve">
    <value>Groups the rows of {0} by fuzzily matching values in the specified column, {1}, for each row.
    For each group, a record is constructed containing the key columns (and their values) along with any aggregated columns specified by {2}.
    This function cannot guarantee to return a fixed order of rows.
    &lt;p&gt;An optional set of {3} may be included to specify how to compare the key columns. Options include:
    {3:type}
&lt;/p&gt;
    </value>
  </data>
  <data name="Table_FuzzyGroup_Example1" xml:space="preserve">
    <value>Group the table adding an aggregate column [Count] which contains the number of employees in each location ("each Table.RowCount(_))").</value>
  </data>
  <data name="Table_FuzzyJoin" xml:space="preserve">
    <value>Joins the rows from the two tables that fuzzy match based on the given keys.</value>
  </data>
  <data name="Table_FuzzyJoin_Description" xml:space="preserve">
    <value>&lt;p&gt;Joins the rows of {0} with the rows of {2} based on a fuzzy matching of the values of the key columns selected by {1} (for {0}) and {3} (for {2}).&lt;/p&gt;
&lt;p&gt;Fuzzy matching is a comparison based on similarity of text rather than equality of text.&lt;/p&gt;
&lt;p&gt;By default, an inner join is performed, however an optional {4} may be included to specify the type of join. Options include:
    {4:type}
&lt;/p&gt;
&lt;p&gt;An optional set of {5} may be included to specify how to compare the key columns. Options include:
    {5:type}
&lt;/p&gt;
    </value>
  </data>
  <data name="Table_FuzzyJoin_Example1" xml:space="preserve">
    <value>Left inner fuzzy join of two tables based on [FirstName]</value>
  </data>
  <data name="Table_FuzzyNestedJoin" xml:space="preserve">
    <value>Performs a fuzzy join between tables on supplied columns and produces the join result in a new column.</value>
  </data>
  <data name="Table_FuzzyNestedJoin_Description" xml:space="preserve">
    <value>&lt;p&gt;Joins the rows of {0} with the rows of {2} based on a fuzzy matching of the values of the key columns selected by {1} (for {0}) and {3} (for {2}). The results are returned in a new column named {4}.&lt;/p&gt;
&lt;p&gt;Fuzzy matching is a comparison based on similarity of text rather than equality of text.&lt;/p&gt;
&lt;p&gt;The optional {5} specifies the kind of join to perform. By default, a left outer join is performed if a {5} is not specified. Options include:
    {5:type}
&lt;/p&gt;
&lt;p&gt;An optional set of {6} may be included to specify how to compare the key columns. Options include:
    {6:type}
&lt;/p&gt;
</value>
  </data>
  <data name="Table_FuzzyNestedJoin_Example1" xml:space="preserve">
    <value>Left inner fuzzy join of two tables based on [FirstName]</value>
  </data>
  <data name="Table_Group" xml:space="preserve">
    <value>Groups rows in the table that have the same key.</value>
  </data>
  <data name="Table_Group_Description" xml:space="preserve">
    <value>Groups the rows of {0} by the key columns defined by {1}. The {1} can either be a single column name, or a list of column names.
    For each group, a record is constructed containing the key columns (and their values), along with any aggregated columns specified by {2}.
    Optionally, {3} and {4} may also be specified.&lt;br&gt;
    &lt;br&gt;
    If the data is already sorted by the key columns, then a {3} of GroupKind.Local can be provided. This may improve the performance of grouping in certain cases,
    since all the rows with a given set of key values are assumed to be contiguous.&lt;br&gt;
    &lt;br&gt;
    When passing a {4}, note that if it treats differing keys as equal, a row may be placed in a group whose keys differ from its own.&lt;br&gt;
    &lt;br&gt;
    This function does not guarantee the ordering of the rows it returns.
  </value>
  </data>
  <data name="Table_Group_Example1" xml:space="preserve">
    <value>Group the table adding an aggregate column [total] which contains the sum of prices ("each List.Sum([price])").</value>
  </data>
  <data name="Table_HasColumns" xml:space="preserve">
    <value>Indicates whether the table contains the specified column(s).</value>
  </data>
  <data name="Table_HasColumns_Description" xml:space="preserve">
    <value>Indicates whether the {0} contains the specified column(s), {1}. Returns &lt;code&gt;true&lt;/code&gt; if the table contains the column(s), &lt;code&gt;false&lt;/code&gt; otherwise.</value>
  </data>
  <data name="Table_HasColumns_Example1" xml:space="preserve">
    <value>Determine if the table has the column [Name].</value>
  </data>
  <data name="Table_HasColumns_Example2" xml:space="preserve">
    <value>Find if the table has the column [Name] and [PhoneNumber].</value>
  </data>
  <data name="Table_InsertRows" xml:space="preserve">
    <value>Inserts a list of rows into the table at the specified position.</value>
  </data>
  <data name="Table_InsertRows_Description" xml:space="preserve">
    <value>Returns a table with the list of rows, {2}, inserted into the {0} at the given position, {1}. Each column in the row to insert must match the column types of the table.</value>
  </data>
  <data name="Table_InsertRows_Example1" xml:space="preserve">
    <value>Insert the row into the table at position 1.</value>
  </data>
  <data name="Table_InsertRows_Example2" xml:space="preserve">
    <value>Insert two rows into the table at position 1.</value>
  </data>
  <data name="Table_IsDistinct" xml:space="preserve">
    <value>Indicates whether the table contains only distinct rows (no duplicates).</value>
  </data>
  <data name="Table_IsDistinct_Description" xml:space="preserve">
    <value>Indicates whether the {0} contains only distinct rows (no duplicates). Returns &lt;code&gt;true&lt;/code&gt; if the rows are distinct, &lt;code&gt;false&lt;/code&gt; otherwise.
    An optional parameter, {1}, specifies which columns of the table are tested for duplication. If {1} is not specified, all columns are tested.</value>
  </data>
  <data name="Table_IsDistinct_Example1" xml:space="preserve">
    <value>Determine if the table is distinct.</value>
  </data>
  <data name="Table_IsDistinct_Example2" xml:space="preserve">
    <value>Determine if the table is distinct in column.</value>
  </data>
  <data name="Table_IsEmpty" xml:space="preserve">
    <value>Indicates whether the table contains any rows.</value>
  </data>
  <data name="Table_IsEmpty_Description" xml:space="preserve">
    <value>Indicates whether the {0} contains any rows. Returns &lt;code&gt;true&lt;/code&gt; if there are no rows (i.e. the table is empty), &lt;code&gt;false&lt;/code&gt; otherwise.</value>
  </data>
  <data name="Table_IsEmpty_Example1" xml:space="preserve">
    <value>Determine if the table is empty.</value>
  </data>
  <data name="Table_IsEmpty_Example2" xml:space="preserve">
    <value>Determine if the table &lt;code&gt;({})&lt;/code&gt; is empty.</value>
  </data>
  <data name="Table_Join" xml:space="preserve">
    <value>Joins the rows from the two tables that match based on the given keys.</value>
  </data>
  <data name="Table_Join_Description" xml:space="preserve">
    <value>&lt;p&gt;Joins the rows of {0} with the rows of {2} based on the equality of the values of the key columns selected by {1} (for {0}) and {3} (for {2}).&lt;/p&gt;
&lt;p&gt;By default, an inner join is performed, however an optional {4} may be included to specify the type of join. Options include:
    {4:type}
&lt;/p&gt;
&lt;p&gt;An optional set of {6} may be included to specify how to compare the key columns. This parameter is currently intended for internal use only.&lt;/p&gt;</value>
  </data>
  <data name="Table_Join_Example1" xml:space="preserve">
    <value>Join two tables using a single key column.</value>
  </data>
  <data name="Table_Join_Example2" xml:space="preserve">
    <value>Join two tables that have conflicting column names, using multiple key columns.</value>
  </data>
  <data name="Table_Keys" xml:space="preserve">
    <value>Returns the keys of the specified table.</value>
  </data>
  <data name="Table_Keys_Example1" xml:space="preserve">
    <value>Get the list of keys for a table.</value>
  </data>
  <data name="Table_Last" xml:space="preserve">
    <value>Returns the last row or a specified default value.</value>
  </data>
  <data name="Table_LastN" xml:space="preserve">
    <value>Returns the last specified number of rows.</value>
  </data>
  <data name="Table_LastN_Description" xml:space="preserve">
    <value>Returns the last row(s) from the table, {0}, depending on the value of {1}:
    &lt;ul&gt;
    &lt;li&gt; If {1} is a number, that many rows will be returned starting from position (end - {1}). &lt;/li&gt;
    &lt;li&gt; If {1} is a condition, the rows that meet the condition will be returned in ascending position until a row does not meet the condition.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="Table_LastN_Example1" xml:space="preserve">
    <value>Find the last two rows of the table.</value>
  </data>
  <data name="Table_LastN_Example2" xml:space="preserve">
    <value>Find the last rows where [a] &gt; 0 in the table.</value>
  </data>
  <data name="Table_Last_Description" xml:space="preserve">
    <value>Returns the last row of the {0} or an optional default value, {1}, if the table is empty.</value>
  </data>
  <data name="Table_Last_Example1" xml:space="preserve">
    <value>Find the last row of the table.</value>
  </data>
  <data name="Table_Last_Example2" xml:space="preserve">
    <value>Find the last row of the table &lt;code&gt;({})&lt;/code&gt; or return [a = 0, b = 0] if empty.</value>
  </data>
  <data name="Table_MatchesAllRows" xml:space="preserve">
    <value>Indicates whether all the rows in the table meet the given condition.</value>
  </data>
  <data name="Table_MatchesAllRows_Description" xml:space="preserve">
    <value>Indicates whether all the rows in the {0} match the given {1}. Returns &lt;code&gt;true&lt;/code&gt; if all of the rows match, &lt;code&gt;false&lt;/code&gt; otherwise.</value>
  </data>
  <data name="Table_MatchesAllRows_Example1" xml:space="preserve">
    <value>Determine whether all of the row values in column [a] are even in the table.</value>
  </data>
  <data name="Table_MatchesAllRows_Example2" xml:space="preserve">
    <value>Find if all of the row values are [a = 1, b = 2], in the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_MatchesAnyRows" xml:space="preserve">
    <value>Indicates whether any the rows in the table meet the given condition.</value>
  </data>
  <data name="Table_MatchesAnyRows_Description" xml:space="preserve">
    <value>Indicates whether any the rows in the {0} match the given {1}. Returns &lt;code&gt;true&lt;/code&gt; if any of the rows match, &lt;code&gt;false&lt;/code&gt; otherwise.</value>
  </data>
  <data name="Table_MatchesAnyRows_Example1" xml:space="preserve">
    <value>Determine whether any of the row values in column [a] are even in the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_MatchesAnyRows_Example2" xml:space="preserve">
    <value>Determine whether any of the row values are [a = 1, b = 2], in the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_Max" xml:space="preserve">
    <value>Returns the largest row or default value using the given criteria.</value>
  </data>
  <data name="Table_MaxN" xml:space="preserve">
    <value>Returns the largest row(s) using the given criteria.</value>
  </data>
  <data name="Table_MaxN_Description" xml:space="preserve">
    <value>Returns the largest row(s) in the {0}, given the {1}.
    After the rows are sorted, the {2} parameter must be specified to further filter the result. Note the sorting algorithm cannot guarantee a fixed sorted result. The {2} parameter can take multiple forms:
    &lt;ul&gt;
        &lt;li&gt; If a number is specified, a list of up to {2} items in ascending order is returned. &lt;/li&gt;
        &lt;li&gt; If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered. &lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="Table_MaxN_Example1" xml:space="preserve">
    <value>Find the row with the largest value in column [a] with the condition [a] &gt; 0, in the table. The rows are sorted before the filter is applied.</value>
  </data>
  <data name="Table_MaxN_Example2" xml:space="preserve">
    <value>Find the row with the largest value in column [a] with the condition [b] &gt; 0, in the table. The rows are sorted before the filter is applied.</value>
  </data>
  <data name="Table_Max_Description" xml:space="preserve">
    <value>Returns the largest row in the {0}, given the {1}. If the table is empty, the optional {2} value is returned. </value>
  </data>
  <data name="Table_Max_Example1" xml:space="preserve">
    <value>Find the row with the largest value in column [a] in the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_Max_Example2" xml:space="preserve">
    <value>Find the row with the largest value in column [a] in the table &lt;code&gt;({})&lt;/code&gt;. Return -1 if empty.</value>
  </data>
  <data name="Table_Min" xml:space="preserve">
    <value>Returns the smallest row or a default value using the given criteria.</value>
  </data>
  <data name="Table_MinN" xml:space="preserve">
    <value>Returns the smallest row(s) using the given criteria.</value>
  </data>
  <data name="Table_MinN_Description" xml:space="preserve">
    <value>Returns the smallest row(s) in the {0}, given the {1}. After the rows are sorted, the {2} parameter must be specified to further filter the result. Note the sorting algorithm cannot guarantee a fixed sorted result. The {2} parameter can take multiple forms:
    &lt;ul&gt;
        &lt;li&gt; If a number is specified, a list of up to {2} items in ascending order is returned. &lt;/li&gt;
        &lt;li&gt; If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered. &lt;/li&gt;
 &lt;/ul&gt;</value>
  </data>
  <data name="Table_MinN_Example1" xml:space="preserve">
    <value>Find the row with the smallest value in column [a] with the condition [a] &lt; 3, in the table. The rows are sorted before the filter is applied.</value>
  </data>
  <data name="Table_MinN_Example2" xml:space="preserve">
    <value>Find the row with the smallest value in column [a] with the condition [b] &lt; 0, in the table. The rows are sorted before the filter is applied.</value>
  </data>
  <data name="Table_Min_Description" xml:space="preserve">
    <value>Returns the smallest row in the {0}, given the {1}. If the table is empty, the optional {2} value is returned.</value>
  </data>
  <data name="Table_Min_Example1" xml:space="preserve">
    <value>Find the row with the smallest value in column [a] in the table.</value>
  </data>
  <data name="Table_Min_Example2" xml:space="preserve">
    <value>Find the row with the smallest value in column [a] in the table. Return -1 if empty.</value>
  </data>
  <data name="Table_NestedJoin" xml:space="preserve">
    <value>Performs a join between tables on supplied columns and produces the join result in a new column.</value>
  </data>
  <data name="Table_NestedJoin_Description" xml:space="preserve">
    <value>&lt;p&gt;Joins the rows of {0} with the rows of {2} based on the equality of the values of the key columns selected by {1} (for {0}) and {3} (for {2}). The results are entered into the column named {4}.&lt;/p&gt;
&lt;p&gt;The optional {5} specifies the kind of join to perform. By default, a left outer join is performed if a {5} is not specified.&lt;/p&gt;
&lt;p&gt;An optional set of {6} may be included to specify how to compare the key columns. This feature is currently intended for internal use only.&lt;/p&gt;  </value>
  </data>
  <data name="Table_NestedJoin_Example1" xml:space="preserve">
    <value>Join two tables using a single key column.</value>
  </data>
  <data name="Table_Partition" xml:space="preserve">
    <value>Partitions the table into a list of tables based on the number of groups and column specified.</value>
  </data>
  <data name="Table_PartitionValues" xml:space="preserve">
    <value>Returns information about how a table is partitioned.</value>
  </data>
  <data name="Table_PartitionValues_Description" xml:space="preserve">
    <value>Returns information about how a table is partitioned.  A table is returned where each column is a partition column in the original table, and each row corresponds to a partition in the original table.</value>
  </data>
  <data name="Table_Partition_Description" xml:space="preserve">
    <value>Partitions the {0} into a list of {2} number of tables, based on the value of the {1} and a {3} function.
    The {3} function is applied to the value of the {1} row to obtain a hash value for the row. The hash value modulo {2} determines in which of the returned tables the row will be placed.
    &lt;ul&gt;
       &lt;li&gt;{0}: The table to partition.&lt;/li&gt;
       &lt;li&gt;{1}: The column to hash to determine which returned table the row is in.&lt;/li&gt;
       &lt;li&gt;{2}: The number of tables the input table will be partitioned into.&lt;/li&gt;
       &lt;li&gt;{3}: The function applied to obtain a hash value.&lt;/li&gt;
    &lt;/ul&gt;
  </value>
  </data>
  <data name="Table_Partition_Example1" xml:space="preserve">
    <value>Partition the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})&lt;/code&gt; into 2 tables on column [a], using the value of the columns as the hash function.</value>
  </data>
  <data name="Table_Pivot" xml:space="preserve">
    <value>Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.</value>
  </data>
  <data name="Table_Pivot_Description" xml:space="preserve">
    <value>Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.</value>
  </data>
  <data name="Table_Pivot_Example1" xml:space="preserve">
    <value>Take the values "a", "b", and "c" in the attribute column of table &lt;code&gt;({ [ key = "x", attribute = "a", value = 1 ], [ key = "x", attribute = "c", value = 3 ], [ key = "y", attribute = "a", value = 2 ], [ key = "y", attribute = "b", value = 4 ] })&lt;/code&gt; and pivot them into their own column.</value>
  </data>
  <data name="Table_Pivot_Example2" xml:space="preserve">
    <value>Take the values "a", "b", and "c" in the attribute column of table &lt;code&gt;({ [ key = "x", attribute = "a", value = 1 ], [ key = "x", attribute = "c", value = 3 ], [ key = "x", attribute = "c", value = 5 ], [ key = "y", attribute = "a", value = 2 ], [ key = "y", attribute = "b", value = 4 ] })&lt;/code&gt; and pivot them into their own column.  The attribute "c" for key "x" has multiple values associated with it, so use the function List.Max to resolve the conflict.</value>
  </data>
  <data name="Table_PositionOf" xml:space="preserve">
    <value>Returns the position or positions of the row within the table.</value>
  </data>
  <data name="Table_PositionOfAny" xml:space="preserve">
    <value>Returns the position or positions of any of the specified rows within the table.</value>
  </data>
  <data name="Table_PositionOfAny_Description" xml:space="preserve">
    <value>Returns the row(s) position(s) from the {0} of the first occurrence of the list of {1}. Returns -1 if no occurrence is found.
    &lt;ul&gt;
    &lt;li&gt;{0}: The input table.&lt;/li&gt;
       &lt;li&gt;{1}:  The list of rows in the table to find the positions of.&lt;/li&gt;
       &lt;li&gt;{2}: &lt;i&gt;[Optional]&lt;/i&gt; Specifies which occurrences of the row to return.&lt;/li&gt;
       &lt;li&gt;{3}: &lt;i&gt;[Optional]&lt;/i&gt; Controls the comparison between the table rows.&lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Table_PositionOfAny_Example1" xml:space="preserve">
    <value>Find the position of the first occurrence of [a = 2, b = 4] or [a = 6, b = 8] in the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_PositionOfAny_Example2" xml:space="preserve">
    <value>Find the position of all the occurrences of [a = 2, b = 4] or [a = 6, b = 8] in the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}&lt;/code&gt;.</value>
  </data>
  <data name="Table_PositionOf_Description" xml:space="preserve">
    <value>Returns the row position of the first occurrence of the {1} in the {0} specified. Returns -1 if no occurrence is found.
    &lt;ul&gt;
       &lt;li&gt;{0}: The input table.&lt;/li&gt;
       &lt;li&gt;{1}: The row in the table to find the position of.&lt;/li&gt;
       &lt;li&gt;{2}: &lt;i&gt;[Optional]&lt;/i&gt; Specifies which occurrences of the row to return.&lt;/li&gt;
       &lt;li&gt;{3}: &lt;i&gt;[Optional]&lt;/i&gt; Controls the comparison between the table rows.&lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Table_PositionOf_Example1" xml:space="preserve">
    <value>Find the position of the first occurrence of [a = 2, b = 4] in the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_PositionOf_Example2" xml:space="preserve">
    <value>Find the position of the second occurrence of [a = 2, b = 4] in the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_PositionOf_Example3" xml:space="preserve">
    <value>Find the position of all the occurrences of [a = 2, b = 4] in the table &lt;code&gt;({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_PrefixColumns" xml:space="preserve">
    <value>Returns a table where the columns have all been prefixed with the given text.</value>
  </data>
  <data name="Table_PrefixColumns_Description" xml:space="preserve">
    <value>Returns a table where all the column names from the {0} provided are prefixed with the given text, {1}, plus a period in the form {1}&lt;code&gt;.ColumnName&lt;/code&gt;.</value>
  </data>
  <data name="Table_PrefixColumns_Example1" xml:space="preserve">
    <value>Prefix the columns with "MyTable" in the table.</value>
  </data>
  <data name="Table_Product" xml:space="preserve">
    <value>Returns the product of the numbers in the given column of the table.</value>
  </data>
  <data name="Table_Product_Description" xml:space="preserve">
    <value>Returns the product of the numbers in the given {1} of the {0}. If the column does not contain number values, an exception is thrown.
    If a single column is provided, the return value is a single value. In case multiple columns are specified, a record value is returned with fields corresponding to every columns.</value>
  </data>
  <data name="Table_Product_Example1" xml:space="preserve">
    <value>Compute the product of the values in column [a] in the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4], [a = 5, b = 6]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_Product_Example2" xml:space="preserve">
    <value>Compute the product of the values in column [a] and column [b] in the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4], [a = 5, b = 6]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_Profile" xml:space="preserve">
    <value>Returns a profile of the columns of a table.</value>
  </data>
  <data name="Table_Profile_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a profile for the columns in {0}.&lt;/p&gt;
&lt;p&gt;The following information is returned for each column (when applicable):
&lt;ul&gt;
  &lt;li&gt;minimum&lt;/li&gt;
  &lt;li&gt;maximum&lt;/li&gt;
  &lt;li&gt;average&lt;/li&gt;
  &lt;li&gt;standard deviation&lt;/li&gt;
  &lt;li&gt;count&lt;/li&gt;
  &lt;li&gt;null count&lt;/li&gt;
  &lt;li&gt;distinct count&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</value>
  </data>
  <data name="Table_PromoteHeaders" xml:space="preserve">
    <value>Promotes the first row of values as the new column headers (i.e. column names).</value>
  </data>
  <data name="Table_PromoteHeaders_Description" xml:space="preserve">
    <value>Promotes the first row of values as the new column headers (i.e. column names). By default, only text or number values are promoted to headers. Valid options:
    &lt;div&gt;
      &lt;code&gt;PromoteAllScalars&lt;/code&gt; : If set to &lt;code&gt;true&lt;/code&gt;, all the scalar values in the first row are promoted to headers using the &lt;code&gt;Culture&lt;/code&gt;, if specified (or current document locale).
    For values that cannot be converted to text, a default column name will be used.
    &lt;/div&gt;
    &lt;div&gt;
    &lt;code&gt;Culture&lt;/code&gt; : A culture name specifying the culture for the data.
    &lt;/div&gt;
  </value>
  </data>
  <data name="Table_PromoteHeaders_Example1" xml:space="preserve">
    <value>Promote the first row of values in the table.</value>
  </data>
  <data name="Table_PromoteHeaders_Example2" xml:space="preserve">
    <value>Promote all the scalars in the first row of the table to headers.</value>
  </data>
  <data name="Table_Range" xml:space="preserve">
    <value>Returns the rows beginning at the specified offset.</value>
  </data>
  <data name="Table_Range_Description" xml:space="preserve">
    <value>Returns the rows from the {0} starting at the specified {1}. An optional parameter, {2}, specifies how many rows to return. By default, all the rows after the offset are returned.</value>
  </data>
  <data name="Table_Range_Example1" xml:space="preserve">
    <value>Return all the rows starting at offset 1 in the table.</value>
  </data>
  <data name="Table_Range_Example2" xml:space="preserve">
    <value>Return one row starting at offset 1 in the table.</value>
  </data>
  <data name="Table_RemoveColumns" xml:space="preserve">
    <value>Removes the specified columns.</value>
  </data>
  <data name="Table_RemoveColumns_Description" xml:space="preserve">
    <value>Removes the specified {1} from the {0} provided.
    If the specified column doesn't exist, an error is raised unless the optional parameter {2} specifies an alternative behavior (for example, &lt;code&gt;MissingField.UseNull&lt;/code&gt; or &lt;code&gt;MissingField.Ignore&lt;/code&gt;).</value>
  </data>
  <data name="Table_RemoveColumns_Example1" xml:space="preserve">
    <value>Remove column [Phone] from the table.</value>
  </data>
  <data name="Table_RemoveColumns_Example2" xml:space="preserve">
    <value>Try to remove a non-existent column from the table.</value>
  </data>
  <data name="Table_RemoveFirstN" xml:space="preserve">
    <value>Returns a table with the first count rows skipped.</value>
  </data>
  <data name="Table_RemoveFirstN_Description" xml:space="preserve">
    <value>Returns a table that does not contain the first specified number of rows, {1}, of the table {0}.
    The number of rows removed depends on the optional parameter {1}.
    &lt;ul&gt;
    &lt;li&gt; If {1} is omitted only the first row is removed. &lt;/li&gt;
    &lt;li&gt; If {1} is a number, that many rows (starting at the top) will be removed. &lt;/li&gt;
    &lt;li&gt; If {1} is a condition, the rows that meet the condition will be removed until a row does not meet the condition.&lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="Table_RemoveFirstN_Example1" xml:space="preserve">
    <value>Remove the first row of the table.</value>
  </data>
  <data name="Table_RemoveFirstN_Example2" xml:space="preserve">
    <value>Remove the first two rows of the table.</value>
  </data>
  <data name="Table_RemoveFirstN_Example3" xml:space="preserve">
    <value>Remove the first rows where [CustomerID] &lt;=2 of the table.</value>
  </data>
  <data name="Table_RemoveLastN" xml:space="preserve">
    <value>Returns a table with the last N rows removed.</value>
  </data>
  <data name="Table_RemoveLastN_Description" xml:space="preserve">
    <value>Returns a table that does not contain the last {1} rows of the table {0}.
        The number of rows removed depends on the optional parameter {1}.
    &lt;ul&gt;
    &lt;li&gt; If {1} is omitted only the last row is removed. &lt;/li&gt;
    &lt;li&gt; If {1} is a number, that many rows (starting at the bottom) will be removed. &lt;/li&gt;
    &lt;li&gt; If {1} is a condition, the rows that meet the condition will be removed until a row does not meet the condition.&lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="Table_RemoveLastN_Example1" xml:space="preserve">
    <value>Remove the last row of the table.</value>
  </data>
  <data name="Table_RemoveLastN_Example2" xml:space="preserve">
    <value>Remove the last rows where [CustomerID] &gt; 2 of the table.</value>
  </data>
  <data name="Table_RemoveMatchingRows" xml:space="preserve">
    <value>Removes all occurrences of the specified rows from the table.</value>
  </data>
  <data name="Table_RemoveMatchingRows_Description" xml:space="preserve">
    <value>Removes all occurrences of the specified {1} from the {0}.
    An optional parameter {2} may be specified to control the comparison between the rows of the table.</value>
  </data>
  <data name="Table_RemoveMatchingRows_Example1" xml:space="preserve">
    <value>Remove any rows where [a = 1] from the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_RemoveRows" xml:space="preserve">
    <value>Removes the specified number of rows.</value>
  </data>
  <data name="Table_RemoveRowsWithErrors" xml:space="preserve">
    <value>Returns a table with the rows removed from the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.</value>
  </data>
  <data name="Table_RemoveRowsWithErrors_Example1" xml:space="preserve">
    <value>Remove error value from first row.</value>
  </data>
  <data name="Table_RemoveRows_Description" xml:space="preserve">
    <value>Removes {2} of rows from the beginning of the {0}, starting at the {1} specified. A default count of 1 is used if the {2} parameter isn't provided. </value>
  </data>
  <data name="Table_RemoveRows_Example1" xml:space="preserve">
    <value>Remove the first row from the table.</value>
  </data>
  <data name="Table_RemoveRows_Example2" xml:space="preserve">
    <value>Remove the row at position 1 from the table.</value>
  </data>
  <data name="Table_RemoveRows_Example3" xml:space="preserve">
    <value>Remove two rows starting at position 1 from the table.</value>
  </data>
  <data name="Table_RenameColumns" xml:space="preserve">
    <value>Applies rename(s) of the form {old, new}.</value>
  </data>
  <data name="Table_RenameColumns_Description" xml:space="preserve">
    <value>Performs the given renames to the columns in table {0}. A replacement operation {1} consists of a list of two values, the old column name and new column name, provided in a list.
    If the column doesn't exist, an exception is thrown unless the optional parameter {2} specifies an alternative (eg. &lt;code&gt;MissingField.UseNull&lt;/code&gt; or &lt;code&gt;MissingField.Ignore&lt;/code&gt;).</value>
  </data>
  <data name="Table_RenameColumns_Example1" xml:space="preserve">
    <value>Replace the column name "CustomerNum" with "CustomerID" in the table.</value>
  </data>
  <data name="Table_RenameColumns_Example2" xml:space="preserve">
    <value>Replace the column name "CustomerNum" with "CustomerID" and "PhoneNum" with "Phone" in the table.</value>
  </data>
  <data name="Table_RenameColumns_Example3" xml:space="preserve">
    <value>Replace the column name "NewCol" with "NewColumn" in the table, and ignore if the column doesn't exist.</value>
  </data>
  <data name="Table_ReorderColumns" xml:space="preserve">
    <value>Returns a table with the columns in the specified order.</value>
  </data>
  <data name="Table_ReorderColumns_Description" xml:space="preserve">
    <value>Returns a table from the input {0}, with the columns in the order specified by {1}. Columns that are not specified in the list will not be reordered.
     If the column doesn't exist, an exception is thrown unless the optional parameter {2} specifies an alternative (eg. &lt;code&gt;MissingField.UseNull&lt;/code&gt; or &lt;code&gt;MissingField.Ignore&lt;/code&gt;).</value>
  </data>
  <data name="Table_ReorderColumns_Example1" xml:space="preserve">
    <value>Switch the order of the columns [Phone] and [Name] in the table.</value>
  </data>
  <data name="Table_ReorderColumns_Example2" xml:space="preserve">
    <value>Switch the order of the columns [Phone] and [Address] or use "MissingField.Ignore" in the table. It doesn't change the table because column [Address] doesn't exist.</value>
  </data>
  <data name="Table_Repeat" xml:space="preserve">
    <value>Repeats the rows of the tables a specified number of times.</value>
  </data>
  <data name="Table_Repeat_Description" xml:space="preserve">
    <value>Returns a table with the rows from the input {0} repeated the specified {1} times.</value>
  </data>
  <data name="Table_Repeat_Example1" xml:space="preserve">
    <value>Repeat the rows in the table two times.</value>
  </data>
  <data name="Table_ReplaceErrorValues" xml:space="preserve">
    <value>Replaces the error values in the specified columns with the corresponding specified value.</value>
  </data>
  <data name="Table_ReplaceErrorValues_Description" xml:space="preserve">
    <value>Replaces the error values in the specified columns of the {0} with the new values in the {1} list. The format of the list is {{{{column1, value1}}, …}}. There may only be one replacement value per column, specifying the column more than once will result in an error.</value>
  </data>
  <data name="Table_ReplaceErrorValues_Example1" xml:space="preserve">
    <value>Replace the error value with the text "world" in the table.</value>
  </data>
  <data name="Table_ReplaceErrorValues_Example2" xml:space="preserve">
    <value>Replace the error value in column A with the text "hello" and in column B with the text "world" in the table.</value>
  </data>
  <data name="Table_ReplaceKeys" xml:space="preserve">
    <value>Replaces the keys of the specified table.</value>
  </data>
  <data name="Table_ReplaceKeys_Example1" xml:space="preserve">
    <value>Replace the existing keys of a table.</value>
  </data>
  <data name="Table_ReplaceMatchingRows" xml:space="preserve">
    <value>Replaces all the specified rows with the provided row(s).</value>
  </data>
  <data name="Table_ReplaceMatchingRows_Description" xml:space="preserve">
    <value>Replaces all the specified rows in the {0} with the provided ones. The rows to replace and the replacements are specified in {1}, using {{old, new}} formatting.
    An optional {2} parameter may be specified to control comparison between the rows of the table.</value>
  </data>
  <data name="Table_ReplaceMatchingRows_Example1" xml:space="preserve">
    <value>Replace the rows [a = 1, b = 2] and [a = 2, b = 3] with [a = -1, b = -2],[a = -2, b = -3] in the table.</value>
  </data>
  <data name="Table_ReplaceRelationshipIdentity" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Table_ReplaceRows" xml:space="preserve">
    <value>Replaces the specified range of rows with the provided row(s).</value>
  </data>
  <data name="Table_ReplaceRows_Description" xml:space="preserve">
    <value>Replaces a specified number of rows, {2}, in the input {0} with the specified {3}, beginning after the {1}. The {3} parameter is a list of records.
    &lt;ul&gt;
       &lt;li&gt;{0}: The table where the replacement is performed.&lt;/li&gt;
       &lt;li&gt;{1}: The number of rows to skip before making the replacement.&lt;/li&gt;
       &lt;li&gt;{2}: The number of rows to replace.&lt;/li&gt;
       &lt;li&gt;{3}: The list of row records to insert into the {0} at the location specified by the {1}.&lt;/li&gt;
    &lt;/ul&gt;
</value>
  </data>
  <data name="Table_ReplaceRows_Example1" xml:space="preserve">
    <value>Starting at position 1, replace 3 rows.</value>
  </data>
  <data name="Table_ReplaceValue" xml:space="preserve">
    <value>Replaces one value with another in the specified columns.</value>
  </data>
  <data name="Table_ReplaceValue_Description" xml:space="preserve">
    <value>Replaces {1} with {2} in the specified columns of the {0}.</value>
  </data>
  <data name="Table_ReplaceValue_Example1" xml:space="preserve">
    <value>Replace the text "goodbye" with "world" in column B, matching only the entire value.</value>
  </data>
  <data name="Table_ReplaceValue_Example2" xml:space="preserve">
    <value>Replace the text "ur" with "or" in column B, matching any part of the value.</value>
  </data>
  <data name="Table_ReplaceValue_Example3" xml:space="preserve">
    <value>Anonymize the names of US employees.</value>
  </data>
  <data name="Table_ReplaceValue_Example4" xml:space="preserve">
    <value>Anonymize all columns of US employees.</value>
  </data>
  <data name="Table_ReverseRows" xml:space="preserve">
    <value>Returns a table with the rows in reverse order.</value>
  </data>
  <data name="Table_ReverseRows_Description" xml:space="preserve">
    <value>Returns a table with the rows from the input {0} in reverse order.</value>
  </data>
  <data name="Table_ReverseRows_Example1" xml:space="preserve">
    <value>Reverse the rows in the table.</value>
  </data>
  <data name="Table_RowCount" xml:space="preserve">
    <value>Returns the number of rows in the table.</value>
  </data>
  <data name="Table_RowCount_Description" xml:space="preserve">
    <value>Returns the number of rows in the {0}.</value>
  </data>
  <data name="Table_RowCount_Example1" xml:space="preserve">
    <value>Find the number of rows in the table.</value>
  </data>
  <data name="Table_Schema" xml:space="preserve">
    <value>Returns a table containing a description of the columns (i.e. the schema) of the specified table.</value>
  </data>
  <data name="Table_Schema_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a table describing the columns of {0}.&lt;/p&gt;
&lt;p&gt;Each row in the table describes the properties of a column of {0}:&lt;/p&gt;
&lt;p&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;b&gt;Column Name&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The name of the column.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;Position&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The 0-based position of the column in {0}.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;TypeName&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The name of the type of the column.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;Kind&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The kind of the type of the column.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;IsNullable&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Whether the column can contain &lt;code&gt;null&lt;/code&gt; values.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;NumericPrecisionBase&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The numeric base (for example, base-2 or base-10) of the &lt;code&gt;NumericPrecision&lt;/code&gt; and &lt;code&gt;NumericScale&lt;/code&gt; fields.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;NumericPrecision&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The precision of a numeric column in the base specified by &lt;code&gt;NumericPrecisionBase&lt;/code&gt;. This is the maximum number of digits that can be represented by a value of this type (including fractional digits).&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;NumericScale&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The scale of a numeric column in the base specified by &lt;code&gt;NumericPrecisionBase&lt;/code&gt;. This is the number of digits in the fractional part of a value of this type. A value of &lt;code&gt;0&lt;/code&gt; indicates a fixed scale with no fractional digits. A value of &lt;code&gt;null&lt;/code&gt; indicates the scale is not known (either because it is floating or not defined).&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;DateTimePrecision&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The maximum number of fractional digits supported in the seconds portion of a date or time value.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;MaxLength&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The maximum number of characters permitted in a &lt;code&gt;text&lt;/code&gt; column, or the maximum number of bytes permitted in a &lt;code&gt;binary&lt;/code&gt; column.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;IsVariableLength&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;Indicates whether this column can vary in length (up to &lt;code&gt;MaxLength&lt;/code&gt;) or if it is of fixed size.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;NativeTypeName&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The name of the type of the column in the native type system of the source (for example, &lt;code&gt;nvarchar&lt;/code&gt; for SQL Server).&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;NativeDefaultExpression&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The default expression for a value of this column in the native expression language of the source (for example, &lt;code&gt;42&lt;/code&gt; or &lt;code&gt;newid()&lt;/code&gt; for SQL Server).&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;td&gt;&amp;nbsp;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;code&gt;Description&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;The description of the column.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;</value>
  </data>
  <data name="Table_SelectColumns" xml:space="preserve">
    <value>Returns a table with only the specified columns.</value>
  </data>
  <data name="Table_SelectColumns_Description" xml:space="preserve">
    <value>Returns the {0} with only the specified {1}.
    &lt;ul&gt;
       &lt;li&gt;{0}: The provided table.&lt;/li&gt;
       &lt;li&gt;{1}: The list of columns from the table {0} to return. Columns in the returned table are in the order listed in {1}.&lt;/li&gt;
       &lt;li&gt;{2}: &lt;i&gt;(Optional)&lt;/i&gt; What to do if the column does not exist.  Example: &lt;code&gt;MissingField.UseNull&lt;/code&gt; or &lt;code&gt;MissingField.Ignore&lt;/code&gt;.
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Table_SelectColumns_Example1" xml:space="preserve">
    <value>Only include column [Name].</value>
  </data>
  <data name="Table_SelectColumns_Example2" xml:space="preserve">
    <value>Only include columns [CustomerID] and [Name].</value>
  </data>
  <data name="Table_SelectColumns_Example3" xml:space="preserve">
    <value>If the included column does not exist, the default result is an error.</value>
  </data>
  <data name="Table_SelectColumns_Example4" xml:space="preserve">
    <value>If the included column does not exist, option &lt;code&gt;MissingField.UseNull&lt;/code&gt; creates a column of null values.</value>
  </data>
  <data name="Table_SelectRows" xml:space="preserve">
    <value>Selects the rows that meet the condition function.</value>
  </data>
  <data name="Table_SelectRowsWithErrors" xml:space="preserve">
    <value>Returns a table with only those rows of the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.</value>
  </data>
  <data name="Table_SelectRowsWithErrors_Example1" xml:space="preserve">
    <value>Select names of customers with errors in their rows.</value>
  </data>
  <data name="Table_SelectRows_Description" xml:space="preserve">
    <value>Returns a table of rows from the {0}, that matches the selection {1}.</value>
  </data>
  <data name="Table_SelectRows_Example1" xml:space="preserve">
    <value>Select the rows in the table where the values in [CustomerID] column are greater than 2.</value>
  </data>
  <data name="Table_SelectRows_Example2" xml:space="preserve">
    <value>Select the rows in the table where the names do not contain a "B".</value>
  </data>
  <data name="Table_SingleRow" xml:space="preserve">
    <value>Returns the single row in the table.</value>
  </data>
  <data name="Table_SingleRow_Description" xml:space="preserve">
    <value>Returns the single row in the one row {0}. If the {0} has more than one row, an exception is thrown.</value>
  </data>
  <data name="Table_SingleRow_Example1" xml:space="preserve">
    <value>Return the single row in the table.</value>
  </data>
  <data name="Table_Skip" xml:space="preserve">
    <value>Returns a table with the first count rows skipped.</value>
  </data>
  <data name="Table_Skip_Description" xml:space="preserve">
    <value>Returns a table that does not contain the first specified number of rows, {1}, of the table {0}.
    The number of rows skipped depends on the optional parameter {1}.
    &lt;ul&gt;
    &lt;li&gt; If {1} is omitted only the first row is skipped. &lt;/li&gt;
    &lt;li&gt; If {1} is a number, that many rows (starting at the top) will be skipped. &lt;/li&gt;
    &lt;li&gt; If {1} is a condition, the rows that meet the condition will be skipped until a row does not meet the condition.&lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="Table_Skip_Example1" xml:space="preserve">
    <value>Skip the first row of the table.</value>
  </data>
  <data name="Table_Skip_Example2" xml:space="preserve">
    <value>Skip the first two rows of the table.</value>
  </data>
  <data name="Table_Skip_Example3" xml:space="preserve">
    <value>Skip the first rows where [Price] &gt; 25 of the table.</value>
  </data>
  <data name="Table_Sort" xml:space="preserve">
    <value>Sorts the table using one or more column names and comparison criteria.</value>
  </data>
  <data name="Table_Sort_Description" xml:space="preserve">
    <value>Sorts the {0} using the list of one or more column names and optional {1} in the form {{ {{ col1, comparisonCriteria }}, {{col2}} }}.</value>
  </data>
  <data name="Table_Sort_Example1" xml:space="preserve">
    <value>Sort the table on column "OrderID".</value>
  </data>
  <data name="Table_Sort_Example2" xml:space="preserve">
    <value>Sort the table on column "OrderID" in descending order.</value>
  </data>
  <data name="Table_Sort_Example3" xml:space="preserve">
    <value>Sort the table on column "CustomerID" then "OrderID", with "CustomerID" being in ascending order.</value>
  </data>
  <data name="Table_Split" xml:space="preserve">
    <value>Splits the specified table into a list of tables using the specified page size.</value>
  </data>
  <data name="Table_SplitAt" xml:space="preserve">
    <value>Returns a list containing the first count rows specified and the remaining rows.</value>
  </data>
  <data name="Table_SplitAt_Description" xml:space="preserve">
    <value>Returns a list containing two tables: a table with the first N rows of {0} (as specified by {1}) and a table containing the remaining rows of {0}.

If the tables of the resulting list are enumerated exactly once and in order, the function will enumerate {0} only once.</value>
  </data>
  <data name="Table_SplitAt_Example1" xml:space="preserve">
    <value>Return the first two rows of the table and the remaining rows of the table.</value>
  </data>
  <data name="Table_SplitColumn" xml:space="preserve">
    <value>Splits the specified columns into a set of additional columns using the specified splitter function.</value>
  </data>
  <data name="Table_SplitColumn_Example1" xml:space="preserve">
    <value>Split the [Name] column at position of "i" into two columns</value>
  </data>
  <data name="Table_Split_Description" xml:space="preserve">
    <value>Splits {0} into a list of tables where the first element of the list is a table containing the first {1} rows from
    the source table, the next element of the list is a table containing the next {1} rows from the source table, and so on.</value>
  </data>
  <data name="Table_Split_Example1" xml:space="preserve">
    <value>Split a table of five records into tables with two records each.</value>
  </data>
  <data name="Table_StopFolding" xml:space="preserve">
    <value>Prevents any downstream operations from being run against the original source of the data.</value>
  </data>
  <data name="Table_StopFolding_Description" xml:space="preserve">
    <value>Prevents any downstream operations from being run against the original source of the data in {0}.</value>
  </data>
  <data name="Table_StopFolding_Example1" xml:space="preserve">
    <value>Fetches data from a SQL table in a way that prevents any downstream operations from running as a query on the SQL server.</value>
  </data>
  <data name="Table_ToColumns" xml:space="preserve">
    <value>Creates a list of nested lists of column values from a table.</value>
  </data>
  <data name="Table_ToColumns_Description" xml:space="preserve">
    <value>Creates a list of nested lists from the table, {0}.  Each list item is an inner list that contains the column values.</value>
  </data>
  <data name="Table_ToColumns_Example1" xml:space="preserve">
    <value>Create a list of the column values from the table.</value>
  </data>
  <data name="Table_ToList" xml:space="preserve">
    <value>Converts a table into a list by applying the specified combining function to each row of values in the table.</value>
  </data>
  <data name="Table_ToList_Example1" xml:space="preserve">
    <value>Combine the text of each row with a comma.</value>
  </data>
  <data name="Table_ToRecords" xml:space="preserve">
    <value>Converts a table to a list of records.</value>
  </data>
  <data name="Table_ToRecords_Description" xml:space="preserve">
    <value>Converts a table, {0}, to a list of records.</value>
  </data>
  <data name="Table_ToRecords_Example1" xml:space="preserve">
    <value>Convert the table to a list of records.</value>
  </data>
  <data name="Table_ToRows" xml:space="preserve">
    <value>Creates a list of nested lists of row values from a table.</value>
  </data>
  <data name="Table_ToRows_Description" xml:space="preserve">
    <value>Creates a list of nested lists from the table, {0}.  Each list item is an inner list that contains the row values.</value>
  </data>
  <data name="Table_ToRows_Example1" xml:space="preserve">
    <value>Create a list of the row values from the table.</value>
  </data>
  <data name="Table_TransformColumnNames" xml:space="preserve">
    <value>Transforms column names by using the given function.</value>
  </data>
  <data name="Table_TransformColumnNames_Description" xml:space="preserve">
    <value>Transforms column names by using the given {1} function. Valid options:
    &lt;div&gt;
      &lt;code&gt;MaxLength&lt;/code&gt; specifies the maximum length of new column names. If the given function results with a longer column name, the long name will be trimmed.
    &lt;/div&gt;
    &lt;div&gt;
      &lt;code&gt;Comparer&lt;/code&gt; is used to control the comparison while generating new column names. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.
    &lt;/div&gt;
    &lt;div&gt;
      The following built-in comparers are available in the formula language:
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;Comparer.Ordinal&lt;/code&gt;: Used to perform an exact ordinal comparison&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Comparer.OrdinalIgnoreCase&lt;/code&gt;: Used to perform an exact ordinal case-insensitive comparison&lt;/li&gt;
      &lt;li&gt; &lt;code&gt;Comparer.FromCulture&lt;/code&gt;: Used to perform a culture-aware comparison&lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Table_TransformColumnNames_Example1" xml:space="preserve">
    <value>Remove the &lt;code&gt;#(tab)&lt;/code&gt; character from column names</value>
  </data>
  <data name="Table_TransformColumnNames_Example2" xml:space="preserve">
    <value>Transform column names to generate case-insensitive names of length 6.</value>
  </data>
  <data name="Table_TransformColumnTypes" xml:space="preserve">
    <value>Applies type transformation(s) of the form { column, type } using a specific culture.</value>
  </data>
  <data name="Table_TransformColumnTypes_Description" xml:space="preserve">
    <value>Returns a table from the input {0} by applying the transform operation to the columns specified in the parameter {1} (where format is {{ column name, type name}}), using the specified culture in the optional parameter {2} (for example, "en-US").
    If the column doesn't exist, an exception is thrown.</value>
  </data>
  <data name="Table_TransformColumnTypes_Example1" xml:space="preserve">
    <value>Transform the number values in column [a] to text values from the table &lt;code&gt;({[a = 1, b = 2], [a = 3, b = 4]})&lt;/code&gt;.</value>
  </data>
  <data name="Table_TransformColumns" xml:space="preserve">
    <value>Transforms the values of one or more columns.</value>
  </data>
  <data name="Table_TransformColumns_Description" xml:space="preserve">
    <value>Transforms {0} by applying each column operation listed in {1} (where the format is {{ column name, transformation }} or {{ column name, transformation, new column type }}).
    If a {2} is specified, it will be applied to all columns not listed in {1}.
    If a column listed in {1} doesn't exist, an exception is thrown unless the optional parameter {3} specifies an alternative (for example, &lt;code&gt;MissingField.UseNull&lt;/code&gt; or &lt;code&gt;MissingField.Ignore&lt;/code&gt;).</value>
  </data>
  <data name="Table_TransformColumns_Example1" xml:space="preserve">
    <value>Convert the text values in column [A] to number values, and the number values in column [B] to text values.</value>
  </data>
  <data name="Table_TransformColumns_Example2" xml:space="preserve">
    <value>Convert the number values in missing column [X] to text values, ignoring columns which don't exist.</value>
  </data>
  <data name="Table_TransformColumns_Example3" xml:space="preserve">
    <value>Convert the number values in missing column [X] to text values, defaulting to null on columns which don't exist.</value>
  </data>
  <data name="Table_TransformColumns_Example4" xml:space="preserve">
    <value>Increment the number values in column [B] and convert them to text values, and convert all other columns to numbers.</value>
  </data>
  <data name="Table_TransformRows" xml:space="preserve">
    <value>Transforms the rows of the table using the specified transform function.</value>
  </data>
  <data name="Table_TransformRows_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;list&lt;/code&gt; by applying the {1} operation to each row in {0}.</value>
  </data>
  <data name="Table_TransformRows_Example1" xml:space="preserve">
    <value>Transform the rows of a table into a list of numbers.</value>
  </data>
  <data name="Table_TransformRows_Example2" xml:space="preserve">
    <value>Transform the rows of a numeric table into textual records.</value>
  </data>
  <data name="Table_Transpose" xml:space="preserve">
    <value>Makes columns into rows and rows into columns.</value>
  </data>
  <data name="Table_Transpose_Description" xml:space="preserve">
    <value>Makes columns into rows and rows into columns.</value>
  </data>
  <data name="Table_Transpose_Example1" xml:space="preserve">
    <value>Make the rows of the table of name-value pairs into columns.</value>
  </data>
  <data name="Table_Type" xml:space="preserve">
    <value>The type that represents all tables.</value>
  </data>
  <data name="Table_TypeFromColumns" xml:space="preserve">
    <value>Infers a table type from a list of columns and their values.</value>
  </data>
  <data name="Table_TypeFromColumns_Description" xml:space="preserve">
    <value>Infers a table type from a list of {0}, which contains the name of the columns and their values.</value>
  </data>
  <data name="Table_TypeFromColumns_Example1" xml:space="preserve">
    <value>Find the type of column [a] with values {1, 2, 3} and column [b] with the value {"abc"}.</value>
  </data>
  <data name="Table_TypeFromList" xml:space="preserve">
    <value>Infers a table type from a list of records.</value>
  </data>
  <data name="Table_TypeFromList_Description" xml:space="preserve">
    <value>Infers a table type from a {0} by computing the union of the fields names of the records and creating a set of columns from those names. The type of the column is derived by computing the union of the types of the values in the corresponding field of each record. If the record does not contain a field, "null" is used for the computation.
    Optionally, the number of records to examine may be specified using {1}. By default, all records of the list are examined.</value>
  </data>
  <data name="Table_TypeFromList_Example1" xml:space="preserve">
    <value>Find the types of the records [A = 1], [A = 1, B = "x"], [A = 3, B = 3, C = 5].</value>
  </data>
  <data name="Table_Unpivot" xml:space="preserve">
    <value>Translates a set of columns in a table into attribute-value pairs.</value>
  </data>
  <data name="Table_UnpivotOtherColumns" xml:space="preserve">
    <value>Translates all columns other than a specified set into attribute-value pairs.</value>
  </data>
  <data name="Table_UnpivotOtherColumns_Description" xml:space="preserve">
    <value>Translates all columns other than a specified set into attribute-value pairs, combined with the rest of the values in each row.</value>
  </data>
  <data name="Table_UnpivotOtherColumns_Example1" xml:space="preserve">
    <value>Translates all columns other than a specified set into attribute-value pairs, combined with the rest of the values in each row.</value>
  </data>
  <data name="Table_Unpivot_Description" xml:space="preserve">
    <value>Translates a set of columns in a table into attribute-value pairs, combined with the rest of the values in each row.</value>
  </data>
  <data name="Table_Unpivot_Example1" xml:space="preserve">
    <value>Take the columns "a", "b", and "c" in the table &lt;code&gt;({[ key = "x", a = 1, b = null, c = 3 ], [ key = "y", a = 2, b = 4, c = null ]})&lt;/code&gt; and unpivot them into attribute-value pairs.</value>
  </data>
  <data name="Table_View" xml:space="preserve">
    <value>Creates or extends a table with user-defined handlers for query and action operations.</value>
  </data>
  <data name="Table_ViewError" xml:space="preserve">
    <value>Creates a modified error record which won't trigger a fallback when thrown by a handler defined on a view (via Table.View).</value>
  </data>
  <data name="Table_ViewError_Description" xml:space="preserve">
    <value>Creates a modified error record from {0} which won't trigger a fallback when thrown by a handler defined on a view (via Table.View).</value>
  </data>
  <data name="Table_ViewFunction" xml:space="preserve">
    <value>Creates a function that can be intercepted by a handler defined on a view (via Table.View).</value>
  </data>
  <data name="Table_ViewFunction_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates a view function based on {0} that can be handled in a view created by &lt;code&gt;Table.View&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OnInvoke&lt;/code&gt; handler of &lt;code&gt;Table.View&lt;/code&gt; can be used to define a handler for the view function.&lt;/p&gt;
&lt;p&gt;As with the handlers for built-in operations, if no &lt;code&gt;OnInvoke&lt;/code&gt; handler is specified, or if it does not handle the view function, or if an error is raised by the handler, {0} is applied on top of the view.&lt;/p&gt;
&lt;p&gt;Refer to the published Power Query custom connector documentation for a more complete description of &lt;code&gt;Table.View&lt;/code&gt; and custom view functions.&lt;/p&gt;</value>
  </data>
  <data name="Table_View_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a view of {0} where the functions specified in {1} are used in lieu of the default behavior of an operation when the operation is applied to the view.&lt;/p&gt;
&lt;p&gt;If {0} is provided, all handler functions are optional. If {0} isn't provided, the &lt;code&gt;GetType&lt;/code&gt; and &lt;code&gt;GetRows&lt;/code&gt; handler functions are required. If a handler function isn't specified for an operation, the default behavior of the operation is applied to {0} instead (except in the case of &lt;code&gt;GetExpression&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Handler functions must return a value that is semantically equivalent to the result of applying the operation against {0} (or the resulting view in the case of &lt;code&gt;GetExpression&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If a handler function raises an error, the default behavior of the operation is applied to the view.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Table.View&lt;/code&gt; can be used to implement folding to a data source – the translation of M queries into source-specific queries (for example, to create T-SQL statements from M queries).&lt;/p&gt;
&lt;p&gt;Refer to the published Power Query custom connector documentation for a more complete description of &lt;code&gt;Table.View&lt;/code&gt;.&lt;/p&gt;</value>
  </data>
  <data name="Table_View_Example1" xml:space="preserve">
    <value>Create a basic view that doesn't require accessing the rows in order to determine the type or the row count.</value>
  </data>
  <data name="Table_WithErrorContext" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Table_WithErrorContext_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Tables_GetRelationships" xml:space="preserve">
    <value>Gets the relationships among a set of tables.</value>
  </data>
  <data name="Tables_GetRelationships_Description" xml:space="preserve">
    <value>Gets the relationships among a set of tables. The set {0} is assumed to have a structure similar to that of a navigation table. The column defined by {1} contains the actual data tables.</value>
  </data>
  <data name="Teradata_Database" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the Teradata database.</value>
  </data>
  <data name="Teradata_Database_Description" xml:space="preserve">
    <value>Returns a table of SQL tables and views from the Teradata database on server {0}. The port may be optionally specified with the server, separated by a colon. An optional record parameter, {1}, may be specified to control the following options:
    {1:type}
    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = "select ..."] for example.
    </value>
  </data>
  <data name="TextComparer_Default" xml:space="preserve">
    <value>Compares two texts treating upper and lower case as different.</value>
  </data>
  <data name="TextComparer_IgnoreCase" xml:space="preserve">
    <value>Compares two texts treating upper and lower case versions of the same character the same.</value>
  </data>
  <data name="TextEncoding_Ascii" xml:space="preserve">
    <value>Use to choose the ASCII binary form.</value>
  </data>
  <data name="TextEncoding_BigEndianUnicode" xml:space="preserve">
    <value>Use to choose the UTF16 big endian binary form.</value>
  </data>
  <data name="TextEncoding_Type" xml:space="preserve">
    <value>Specifies the text encoding type.</value>
  </data>
  <data name="TextEncoding_Unicode" xml:space="preserve">
    <value>Use to choose the UTF16 little endian binary form.</value>
  </data>
  <data name="TextEncoding_Utf16" xml:space="preserve">
    <value>Use to choose the UTF16 little endian binary form.</value>
  </data>
  <data name="TextEncoding_Utf8" xml:space="preserve">
    <value>Use to choose the UTF8 binary form.</value>
  </data>
  <data name="TextEncoding_Windows" xml:space="preserve">
    <value>Use to choose the Windows binary form.</value>
  </data>
  <data name="TextEquater_Default" xml:space="preserve">
    <value>Tests two text values for equality treating upper and lower case different.</value>
  </data>
  <data name="TextEquater_IgnoreCase" xml:space="preserve">
    <value>Tests two text values for equality treating upper and lower case versions of the same character the same.</value>
  </data>
  <data name="Text_AfterDelimiter_Description" xml:space="preserve">
    <value>Returns the portion of {0} after the specified {1}.
    An optional numeric {2} indicates which occurrence of the {1} should be considered.
    An optional list {2} indicates which occurrence of the {1} should be considered, as well as whether indexing should be done from the start or end of the input.</value>
  </data>
  <data name="Text_AfterDelimiter_Example1" xml:space="preserve">
    <value>Get the portion of "111-222-333" after the (first) hyphen.</value>
  </data>
  <data name="Text_AfterDelimiter_Example2" xml:space="preserve">
    <value>Get the portion of "111-222-333" after the second hyphen.</value>
  </data>
  <data name="Text_AfterDelimiter_Example3" xml:space="preserve">
    <value>Get the portion of "111-222-333" after the second hyphen from the end.</value>
  </data>
  <data name="Text_At" xml:space="preserve">
    <value>Returns the character at the specified position.</value>
  </data>
  <data name="Text_At_Description" xml:space="preserve">
    <value>Returns the character in the text value, {0} at position {1}. The first character in the text is at position 0.</value>
  </data>
  <data name="Text_At_Example1" xml:space="preserve">
    <value>Find the character at position 4 in string "Hello, World".</value>
  </data>
  <data name="Text_BeforeDelimiter_Description" xml:space="preserve">
    <value>Returns the portion of {0} before the specified {1}.
    An optional numeric {2} indicates which occurrence of the {1} should be considered.
    An optional list {2} indicates which occurrence of the {1} should be considered, as well as whether indexing should be done from the start or end of the input.</value>
  </data>
  <data name="Text_BeforeDelimiter_Example1" xml:space="preserve">
    <value>Get the portion of "111-222-333" before the (first) hyphen.</value>
  </data>
  <data name="Text_BeforeDelimiter_Example2" xml:space="preserve">
    <value>Get the portion of "111-222-333" before the second hyphen.</value>
  </data>
  <data name="Text_BeforeDelimiter_Example3" xml:space="preserve">
    <value>Get the portion of "111-222-333" before the second hyphen from the end.</value>
  </data>
  <data name="Text_BetweenDelimiters_Description" xml:space="preserve">
    <value>Returns the portion of {0} between the specified {1} and {2}.
    An optional numeric {3} indicates which occurrence of the {1} should be considered.
    An optional list {3} indicates which occurrence of the {1} should be considered, as well as whether indexing should be done from the start or end of the input.
    The {4} is similar, except that indexing is done relative to the {3}.</value>
  </data>
  <data name="Text_BetweenDelimiters_Example1" xml:space="preserve">
    <value>Get the portion of "111 (222) 333 (444)" between the (first) open parenthesis and the (first) closed parenthesis that follows it.</value>
  </data>
  <data name="Text_BetweenDelimiters_Example2" xml:space="preserve">
    <value>Get the portion of "111 (222) 333 (444)" between the second open parenthesis and the first closed parenthesis that follows it.</value>
  </data>
  <data name="Text_BetweenDelimiters_Example3" xml:space="preserve">
    <value>Get the portion of "111 (222) 333 (444)" between the second open parenthesis from the end and the second closed parenthesis that follows it.</value>
  </data>
  <data name="Text_Clean" xml:space="preserve">
    <value>Returns the text value with all control characters removed.</value>
  </data>
  <data name="Text_Clean_Description" xml:space="preserve">
    <value>Returns a text value with all control characters of {0} removed.</value>
  </data>
  <data name="Text_Clean_Example1" xml:space="preserve">
    <value>Remove line feeds and other control characters from a text value.</value>
  </data>
  <data name="Text_Combine" xml:space="preserve">
    <value>Concatenates a list of text values into one text value.</value>
  </data>
  <data name="Text_Combine_Description" xml:space="preserve">
    <value>Returns the result of combining the list of text values, {0}, into a single text value. Any &lt;code&gt;null&lt;/code&gt; values present in {0} are ignored.
    An optional {1} used in the final combined text can be specified.</value>
  </data>
  <data name="Text_Combine_Example1" xml:space="preserve">
    <value>Combine text values "Seattle" and "WA".</value>
  </data>
  <data name="Text_Combine_Example2" xml:space="preserve">
    <value>Combine text values "Seattle" and "WA", separated by a comma and a space.</value>
  </data>
  <data name="Text_Combine_Example3" xml:space="preserve">
    <value>Combine the values "Seattle", &lt;code&gt;null&lt;/code&gt;, and "WA", separated by a comma and a space. (Note that the &lt;code&gt;null&lt;/code&gt; is ignored.)</value>
  </data>
  <data name="Text_Compare" xml:space="preserve">
    <value>Returns -1, 0 or 1 based on whether the first text value is less than, equal to, or greater than the second.</value>
  </data>
  <data name="Text_Compare_Description" xml:space="preserve">
    <value>Returns -1, 0, or 1 based on whether {0} is less than, equal to, or greater than {1}, in dictionary order.
    An optional comparer function, {2} (TextComparer.IgnoreCase), can be provided to make the comparison case insensitive. The default is case sensitive.
</value>
  </data>
  <data name="Text_Compare_Example1" xml:space="preserve">
    <value>Compare text &lt;code&gt;"aB"&lt;/code&gt; to &lt;code&gt;"ab"&lt;/code&gt;. (Results show &lt;code&gt;"aB"&lt;/code&gt; is less than &lt;code&gt;"ab"&lt;/code&gt;)</value>
  </data>
  <data name="Text_Compare_Example2" xml:space="preserve">
    <value>Compare text &lt;code&gt;"aB"&lt;/code&gt; to &lt;code&gt;"ab"&lt;/code&gt; using the &lt;code&gt;TextComparer.IgnoreCase&lt;/code&gt; comparer function. (Results show &lt;code&gt;"aB"&lt;/code&gt; is equal to &lt;code&gt;"ab"&lt;/code&gt;).</value>
  </data>
  <data name="Text_Contains" xml:space="preserve">
    <value>Returns whether the text contains the substring.</value>
  </data>
  <data name="Text_Contains_Description" xml:space="preserve">
    <value>Detects whether {0} contains the value {1}. Returns true if the value is found. This function doesn't support wildcards or regular expressions.
      &lt;br&gt;
      &lt;br&gt;
      The optional argument {2} can be used to specify case-insensitive or culture and locale-aware comparisons.
      The following built-in comparers are available in the formula language:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;Comparer.Ordinal&lt;/code&gt;: Used to perform a case-sensitive ordinal comparison&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Comparer.OrdinalIgnoreCase&lt;/code&gt;: Used to perform a case-insensitive ordinal comparison&lt;/li&gt;
        &lt;li&gt; &lt;code&gt;Comparer.FromCulture&lt;/code&gt;: Used to perform a culture-aware comparison&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Text_Contains_Example1" xml:space="preserve">
    <value>Find if the text "Hello World" contains "Hello".</value>
  </data>
  <data name="Text_Contains_Example2" xml:space="preserve">
    <value>Find if the text "Hello World" contains "hello".</value>
  </data>
  <data name="Text_Contains_Example3" xml:space="preserve">
    <value>Find if the text "Hello World" contains "hello", using a case-insensitive comparer.</value>
  </data>
  <data name="Text_End" xml:space="preserve">
    <value>Returns the last characters of the text.</value>
  </data>
  <data name="Text_End_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;text&lt;/code&gt; value that is the last {1} characters of the &lt;code&gt;text&lt;/code&gt; value {0}.</value>
  </data>
  <data name="Text_End_Example1" xml:space="preserve">
    <value>Get the last 5 characters of the text "Hello, World".</value>
  </data>
  <data name="Text_EndsWith" xml:space="preserve">
    <value>Indicates whether the text ends in the specified value.</value>
  </data>
  <data name="Text_EndsWith_Description" xml:space="preserve">
    <value>Indicates whether the given text, {0}, ends with the specified value, {1}. The indication is case sensitive.

      &lt;div&gt;
        {2} is a &lt;code&gt;Comparer&lt;/code&gt; which is used to control the comparison. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.
      &lt;/div&gt;
      &lt;div&gt;
        The following built-in comparers are available in the formula language:
      &lt;/div&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;Comparer.Ordinal&lt;/code&gt;: Used to perform an exact ordinal comparison&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Comparer.OrdinalIgnoreCase&lt;/code&gt;: Used to perform an exact ordinal case-insensitive comparison&lt;/li&gt;
        &lt;li&gt; &lt;code&gt;Comparer.FromCulture&lt;/code&gt;: Used to perform a culture-aware comparison&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Text_EndsWith_Example1" xml:space="preserve">
    <value>Check if "Hello, World" ends with "world".</value>
  </data>
  <data name="Text_EndsWith_Example2" xml:space="preserve">
    <value>Check if "Hello, World" ends with "World".</value>
  </data>
  <data name="Text_Format" xml:space="preserve">
    <value>Returns formatted text from a format string and arguments.</value>
  </data>
  <data name="Text_Format_Description" xml:space="preserve">
    <value>Returns formatted text that is created by applying {1} from a list or record to a format string {0}. An optional {2} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Text_Format_Example1" xml:space="preserve">
    <value>Format a list of numbers.</value>
  </data>
  <data name="Text_Format_Example2" xml:space="preserve">
    <value>Format different data types from a record according to United States English culture.</value>
  </data>
  <data name="Text_From" xml:space="preserve">
    <value>Creates a text value from the given value.</value>
  </data>
  <data name="Text_FromBinary" xml:space="preserve">
    <value>Decodes data from a binary form into text.</value>
  </data>
  <data name="Text_FromBinary_Description" xml:space="preserve">
    <value>Decodes data, {0}, from a binary value in to a text value, using {1} type.</value>
  </data>
  <data name="Text_From_Description" xml:space="preserve">
    <value>Returns the text representation of {0}. The {0} can be a &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;datetimezone&lt;/code&gt;, &lt;code&gt;logical&lt;/code&gt;, &lt;code&gt;duration&lt;/code&gt; or &lt;code&gt;binary&lt;/code&gt; value.
    If the given value is null, &lt;code&gt;Text.From&lt;/code&gt; returns null. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Text_From_Example1" xml:space="preserve">
    <value>Create a text value from the number 3.</value>
  </data>
  <data name="Text_InferNumberType" xml:space="preserve">
    <value>Infers the granular number type (Int64.Type, Double.Type, and so on) of a number encoded in text.</value>
  </data>
  <data name="Text_InferNumberType_Description" xml:space="preserve">
    <value>Infers the granular number type (Int64.Type, Double.Type, and so on) of {0}. An error is raised if {0} is not a number. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Text_Insert" xml:space="preserve">
    <value>Inserts one text value into another at a given position.</value>
  </data>
  <data name="Text_Insert_Description" xml:space="preserve">
    <value>Returns the result of inserting text value {2} into the text value {0} at position {1}. Positions start at number 0.</value>
  </data>
  <data name="Text_Insert_Example1" xml:space="preserve">
    <value>Insert "C" between "B" and "D" in "ABD".</value>
  </data>
  <data name="Text_Length" xml:space="preserve">
    <value>Returns the number of characters.</value>
  </data>
  <data name="Text_Length_Description" xml:space="preserve">
    <value>Returns the number of characters in the text {0}.</value>
  </data>
  <data name="Text_Length_Example1" xml:space="preserve">
    <value>Find how many characters are in the text "Hello World".</value>
  </data>
  <data name="Text_Lower" xml:space="preserve">
    <value>Converts all characters to lowercase.</value>
  </data>
  <data name="Text_Lower_Description" xml:space="preserve">
    <value>Returns the result of converting all characters in {0} to lowercase. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Text_Lower_Example1" xml:space="preserve">
    <value>Get the lowercase version of "AbCd".</value>
  </data>
  <data name="Text_Middle" xml:space="preserve">
    <value>Returns the substring up to a specific length.</value>
  </data>
  <data name="Text_Middle_Description" xml:space="preserve">
    <value>Returns {2} characters, or through the end of {0}; at the offset {1}.</value>
  </data>
  <data name="Text_Middle_Example1" xml:space="preserve">
    <value>Find the substring from the text "Hello World" starting at index 6 spanning 5 characters.</value>
  </data>
  <data name="Text_Middle_Example2" xml:space="preserve">
    <value>Find the substring from the text "Hello World" starting at index 6 through the end.</value>
  </data>
  <data name="Text_NewGuid" xml:space="preserve">
    <value>Returns a new, random globally unique identifier (GUID).</value>
  </data>
  <data name="Text_PadEnd" xml:space="preserve">
    <value>Returns text of a specified length by padding the end of the given text.</value>
  </data>
  <data name="Text_PadEnd_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;text&lt;/code&gt; value padded to length {1} by inserting spaces at the end of the text value {0}.
    An optional character {2} can be used to specify the character used for padding. The default pad character is a space.</value>
  </data>
  <data name="Text_PadEnd_Example1" xml:space="preserve">
    <value>Pad the end of a text value so it is 10 characters long.</value>
  </data>
  <data name="Text_PadEnd_Example2" xml:space="preserve">
    <value>Pad the end of a text value with "|" so it is 10 characters long.</value>
  </data>
  <data name="Text_PadStart" xml:space="preserve">
    <value>Returns text of a specified length by padding the start of the given text.</value>
  </data>
  <data name="Text_PadStart_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;text&lt;/code&gt; value padded to length {1} by inserting spaces at the start of the text value {0}.
    An optional character {2} can be used to specify the character used for padding. The default pad character is a space.</value>
  </data>
  <data name="Text_PadStart_Example1" xml:space="preserve">
    <value>Pad the start of a text value so it is 10 characters long.</value>
  </data>
  <data name="Text_PadStart_Example2" xml:space="preserve">
    <value>Pad the start of a text value with "|" so it is 10 characters long.</value>
  </data>
  <data name="Text_PositionOf" xml:space="preserve">
    <value>Returns the first position of the value (-1 if not found).</value>
  </data>
  <data name="Text_PositionOfAny" xml:space="preserve">
    <value>Returns the first position in the text value of any listed character (-1 if not found).</value>
  </data>
  <data name="Text_PositionOfAny_Description" xml:space="preserve">
    <value>Returns the first position of any character in the list {1} that is found in {0}.
    An optional parameter {2} may be used to specify which occurrence position to return.</value>
  </data>
  <data name="Text_PositionOfAny_Example1" xml:space="preserve">
    <value>Find the first position of "W" or "H" in text "Hello, World!".</value>
  </data>
  <data name="Text_PositionOfAny_Example2" xml:space="preserve">
    <value>Find all the positions of "W" or "H" in text "Hello, World!".</value>
  </data>
  <data name="Text_PositionOf_Description" xml:space="preserve">
    <value>Returns the position of the specified occurrence of the text value {1} found in {0}.
    An optional parameter {2} may be used to specify which occurrence position to return (first occurrence by default).
    Returns -1 if {1} was not found.

      &lt;div&gt;
        {3} is a &lt;code&gt;Comparer&lt;/code&gt; which is used to control the comparison. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.
      &lt;/div&gt;
      &lt;div&gt;
        The following built-in comparers are available in the formula language:
      &lt;/div&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;Comparer.Ordinal&lt;/code&gt;: Used to perform an exact ordinal comparison&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Comparer.OrdinalIgnoreCase&lt;/code&gt;: Used to perform an exact ordinal case-insensitive comparison&lt;/li&gt;
        &lt;li&gt; &lt;code&gt;Comparer.FromCulture&lt;/code&gt;: Used to perform a culture-aware comparison&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Text_PositionOf_Example1" xml:space="preserve">
    <value>Get the position of the first occurrence of "World" in the text "Hello, World! Hello, World!".</value>
  </data>
  <data name="Text_PositionOf_Example2" xml:space="preserve">
    <value>Get the position of last occurrence of "World" in "Hello, World! Hello, World!".</value>
  </data>
  <data name="Text_Proper" xml:space="preserve">
    <value>Capitalizes the first letter of each word.</value>
  </data>
  <data name="Text_Proper_Description" xml:space="preserve">
    <value>Returns the result of capitalizing only the first letter of each word in text value {0}. All other letters are returned in lowercase. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Text_Proper_Example1" xml:space="preserve">
    <value>Use &lt;code&gt;Text.Proper&lt;/code&gt; on a simple sentence.</value>
  </data>
  <data name="Text_Range" xml:space="preserve">
    <value>Returns the substring found at offset.</value>
  </data>
  <data name="Text_Range_Description" xml:space="preserve">
    <value>Returns the substring from the text {0} found at the offset {1}.
    An optional parameter, {2}, can be included to specify how many characters to return. Throws an error if there aren't enough characters.</value>
  </data>
  <data name="Text_Range_Example1" xml:space="preserve">
    <value>Find the substring from the text "Hello World" starting at index 6.</value>
  </data>
  <data name="Text_Range_Example2" xml:space="preserve">
    <value>Find the substring from the text "Hello World Hello" starting at index 6 spanning 5 characters.</value>
  </data>
  <data name="Text_Remove" xml:space="preserve">
    <value>Removes all occurrences of the given character or list of characters from the input text value.</value>
  </data>
  <data name="Text_RemoveRange" xml:space="preserve">
    <value>Removes a count of characters starting at the given offset</value>
  </data>
  <data name="Text_RemoveRange_Description" xml:space="preserve">
    <value>Returns a copy of the text value {0} with all the characters from position {1} removed.
    An optional parameter, {2} can by used to specify the number of characters to remove. The default value of {2} is 1. Position values start at 0.</value>
  </data>
  <data name="Text_RemoveRange_Example1" xml:space="preserve">
    <value>Remove 1 character from the text value "ABEFC" at position 2.</value>
  </data>
  <data name="Text_RemoveRange_Example2" xml:space="preserve">
    <value>Remove two characters from the text value "ABEFC" starting at position 2.</value>
  </data>
  <data name="Text_Remove_Description" xml:space="preserve">
    <value>Returns a copy of the text value {0} with all the characters from {1} removed.  </value>
  </data>
  <data name="Text_Remove_Example1" xml:space="preserve">
    <value>Remove characters , and ; from the text value.</value>
  </data>
  <data name="Text_Repeat" xml:space="preserve">
    <value>Returns a text value composed of the input text repeated a specified number of times.</value>
  </data>
  <data name="Text_Repeat_Description" xml:space="preserve">
    <value>Returns a text value composed of the input text {0} repeated {1} times.</value>
  </data>
  <data name="Text_Repeat_Example1" xml:space="preserve">
    <value>Repeat the text "a" five times.</value>
  </data>
  <data name="Text_Repeat_Example2" xml:space="preserve">
    <value>Repeat the text "helloworld" three times.</value>
  </data>
  <data name="Text_Replace" xml:space="preserve">
    <value>Replaces all occurrences of the given substring in the text.</value>
  </data>
  <data name="Text_ReplaceRange" xml:space="preserve">
    <value>Removes a range of characters and inserts a new value at a specified position.</value>
  </data>
  <data name="Text_ReplaceRange_Description" xml:space="preserve">
    <value>Returns the result of removing a number of characters, {2}, from text value {0} beginning at position {1} and then inserting the text value {3} at the same position in {0}.</value>
  </data>
  <data name="Text_ReplaceRange_Example1" xml:space="preserve">
    <value>Replace a single character at position 2 in text value "ABGF" with new text value "CDE".</value>
  </data>
  <data name="Text_Replace_Description" xml:space="preserve">
    <value>Returns the result of replacing all occurrences of text value {1} in text value {0} with text value {2}. This function is case sensitive.</value>
  </data>
  <data name="Text_Replace_Example1" xml:space="preserve">
    <value>Replace every occurrence of "the" in a sentence with "a".</value>
  </data>
  <data name="Text_Reverse_Description" xml:space="preserve">
    <value>Reverses the provided {0}.</value>
  </data>
  <data name="Text_Reverse_Example1" xml:space="preserve">
    <value>Reverse the text "123".</value>
  </data>
  <data name="Text_Select" xml:space="preserve">
    <value>Selects all occurrences of the given character or list of characters from the input text value.</value>
  </data>
  <data name="Text_Select_Description" xml:space="preserve">
    <value>Returns a copy of the text value {0} with all the characters not in {1} removed.  </value>
  </data>
  <data name="Text_Select_Example1" xml:space="preserve">
    <value>Select all characters in the range of 'a' to 'z' from the text value.</value>
  </data>
  <data name="Text_Split" xml:space="preserve">
    <value>Splits text into a list of text values based upon a specified delimiter.</value>
  </data>
  <data name="Text_SplitAny" xml:space="preserve">
    <value>Returns a list of text values, split on any of the characters in the delimiter.</value>
  </data>
  <data name="Text_SplitAny_Description" xml:space="preserve">
    <value>Returns a list of text values resulting from the splitting a text value {0} based on any character in the specified delimiter, {1}.</value>
  </data>
  <data name="Text_SplitAny_Example1" xml:space="preserve">
    <value>Create a list from the text value "Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com".</value>
  </data>
  <data name="Text_Split_Description" xml:space="preserve">
    <value>Returns a list of text values resulting from the splitting a text value {0} based on the specified delimiter, {1}.</value>
  </data>
  <data name="Text_Split_Example1" xml:space="preserve">
    <value>Create a list from the "|" delimited text value "Name|Address|PhoneNumber".</value>
  </data>
  <data name="Text_Start" xml:space="preserve">
    <value>Returns the start of the text.</value>
  </data>
  <data name="Text_Start_Description" xml:space="preserve">
    <value>Returns the first {1} characters of {0} as a text value.</value>
  </data>
  <data name="Text_Start_Example1" xml:space="preserve">
    <value>Get the first 5 characters of "Hello, World".</value>
  </data>
  <data name="Text_StartsWith" xml:space="preserve">
    <value>Indicates whether the text starts with a specified value.</value>
  </data>
  <data name="Text_StartsWith_Description" xml:space="preserve">
    <value>Returns true if text value {0} starts with text value {1}.
      &lt;ul&gt;
        &lt;li&gt;{0}: &lt;i&gt;&lt;/i&gt; A &lt;code&gt;text&lt;/code&gt; value which is to be searched&lt;/li&gt;
        &lt;li&gt;{1}: &lt;i&gt;&lt;/i&gt; A &lt;code&gt;text&lt;/code&gt; value which is the substring to be searched for in {1}&lt;/li&gt;
        &lt;li&gt;{2}: &lt;i&gt;[Optional]&lt;/i&gt; A &lt;code&gt;Comparer&lt;/code&gt; used for controlling the comparison. For example, &lt;code&gt;Comparer.OrdinalIgnoreCase&lt;/code&gt; may be used to perform case-insensitive searches&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
        {2} is a &lt;code&gt;Comparer&lt;/code&gt; which is used to control the comparison. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.
      &lt;/div&gt;
      &lt;div&gt;
        The following built-in comparers are available in the formula language:
      &lt;/div&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;Comparer.Ordinal&lt;/code&gt;: Used to perform an exact ordinal comparison&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;Comparer.OrdinalIgnoreCase&lt;/code&gt;: Used to perform an exact ordinal case-insensitive comparison&lt;/li&gt;
        &lt;li&gt; &lt;code&gt;Comparer.FromCulture&lt;/code&gt;: Used to perform a culture-aware comparison&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Text_StartsWith_Example1" xml:space="preserve">
    <value>Check if the text "Hello, World" starts with the text "hello".</value>
  </data>
  <data name="Text_StartsWith_Example2" xml:space="preserve">
    <value>Check if the text "Hello, World" starts with the text "Hello".</value>
  </data>
  <data name="Text_ToBinary" xml:space="preserve">
    <value>Encodes text into a binary form.</value>
  </data>
  <data name="Text_ToBinary_Description" xml:space="preserve">
    <value>Encodes the given text value, {0}, into a binary value using the specified {1}.</value>
  </data>
  <data name="Text_ToList" xml:space="preserve">
    <value>Returns a list of character values from the given text value.</value>
  </data>
  <data name="Text_ToList_Description" xml:space="preserve">
    <value>Returns a list of character values from the given text value {0}.</value>
  </data>
  <data name="Text_ToList_Example1" xml:space="preserve">
    <value>Create a list of character values from the text "Hello World".</value>
  </data>
  <data name="Text_Trim" xml:space="preserve">
    <value>Removes all leading and trailing whitespace.</value>
  </data>
  <data name="Text_TrimEnd" xml:space="preserve">
    <value>Removes all trailing whitespace.</value>
  </data>
  <data name="Text_TrimEnd_Description" xml:space="preserve">
    <value>Returns the result of removing all trailing whitespace from text value {0}.</value>
  </data>
  <data name="Text_TrimEnd_Example1" xml:space="preserve">
    <value>Remove trailing whitespace from "     a b c d    ".</value>
  </data>
  <data name="Text_TrimStart" xml:space="preserve">
    <value>Removes all leading whitespace.</value>
  </data>
  <data name="Text_TrimStart_Description" xml:space="preserve">
    <value>Returns the result of removing all leading whitespace from text value {0}.</value>
  </data>
  <data name="Text_TrimStart_Example1" xml:space="preserve">
    <value>Remove leading whitespace from "     a b c d    ".</value>
  </data>
  <data name="Text_Trim_Description" xml:space="preserve">
    <value>Returns the result of removing all leading and trailing whitespace from text value {0}.</value>
  </data>
  <data name="Text_Trim_Example1" xml:space="preserve">
    <value>Remove leading and trailing whitespace from "     a b c d    ".</value>
  </data>
  <data name="Text_Type" xml:space="preserve">
    <value>The type that represents all text values.</value>
  </data>
  <data name="Text_Upper" xml:space="preserve">
    <value>Converts all characters to uppercase.</value>
  </data>
  <data name="Text_Upper_Description" xml:space="preserve">
    <value>Returns the result of converting all characters in {0} to uppercase. An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Text_Upper_Example1" xml:space="preserve">
    <value>Get the uppercase version of "aBcD".</value>
  </data>
  <data name="TimeZone_Current" xml:space="preserve">
    <value>Returns the name of the current time zone for the application.</value>
  </data>
  <data name="Time_EndOfHour" xml:space="preserve">
    <value>Returns the end of the hour.</value>
  </data>
  <data name="Time_EndOfHour_Description" xml:space="preserve">
    <value>Returns the end of the hour represented by {0}, including fractional seconds. Time zone information is preserved.
      &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value from which the end of the hour is calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Time_EndOfHour_Example1" xml:space="preserve">
    <value>Get the end of the hour for 5/14/2011 05:00:00 PM.</value>
  </data>
  <data name="Time_EndOfHour_Example2" xml:space="preserve">
    <value>Get the end of the hour for 5/17/2011 05:00:00 PM -7:00.</value>
  </data>
  <data name="Time_From" xml:space="preserve">
    <value>Creates a time from the given value.</value>
  </data>
  <data name="Time_FromText" xml:space="preserve">
    <value>Creates a Time from local and universal, and custom Time formats.</value>
  </data>
  <data name="Time_FromText_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;time&lt;/code&gt; value from a textual representation, {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in parsing the time using a best effort.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"tt"&lt;/code&gt; is &lt;code&gt;"AM" or "PM"&lt;/code&gt;, while in &lt;code&gt;"ar-EG"&lt;/code&gt; &lt;code&gt;"tt"&lt;/code&gt; is &lt;code&gt;"ص" or "م"&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} may also be a text value. This has the same behavior as if {1}&lt;code&gt; = [Format = null, Culture = {1}]&lt;/code&gt;.</value>
  </data>
  <data name="Time_FromText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;"10:12:31am"&lt;/code&gt; into a Time value.</value>
  </data>
  <data name="Time_FromText_Example2" xml:space="preserve">
    <value>Convert &lt;code&gt;"1012"&lt;/code&gt; into a Time value.</value>
  </data>
  <data name="Time_FromText_Example3" xml:space="preserve">
    <value>Convert &lt;code&gt;"10"&lt;/code&gt; into a Time value.</value>
  </data>
  <data name="Time_From_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;time&lt;/code&gt; value from the given {0}. An optional {1} may also be provided (for example, "en-US").
If the given {0} is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Time.From&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;. If the given {0} is &lt;code&gt;time&lt;/code&gt;, {0} is returned. Values of the following types can be converted to a &lt;code&gt;time&lt;/code&gt; value:
      &lt;ul&gt;
        &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A &lt;code&gt;time&lt;/code&gt; value from textual representation. Refer to &lt;code&gt;Time.FromText&lt;/code&gt; for details.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetime&lt;/code&gt;: The time component of the {0}.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;datetimezone&lt;/code&gt;: The time component of the local datetime equivalent of {0}.&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;number&lt;/code&gt;: A &lt;code&gt;time&lt;/code&gt; equivalent to the number of fractional days expressed by {0}. If {0} is negative or greater or equal to 1, an error is returned.&lt;/li&gt;
      &lt;/ul&gt;
If {0} is of any other type, an error is returned.</value>
  </data>
  <data name="Time_From_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;0.7575&lt;/code&gt; to a &lt;code&gt;time&lt;/code&gt; value.</value>
  </data>
  <data name="Time_From_Example2" xml:space="preserve">
    <value>Convert &lt;code&gt;#datetime(1899, 12, 30, 06, 45, 12)&lt;/code&gt; to a &lt;code&gt;time&lt;/code&gt; value.</value>
  </data>
  <data name="Time_Hour" xml:space="preserve">
    <value>Returns the hour component.</value>
  </data>
  <data name="Time_Hour_Description" xml:space="preserve">
    <value>Returns the hour component of the provided &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value, {0}.</value>
  </data>
  <data name="Time_Hour_Example1" xml:space="preserve">
    <value>Find the hour in #datetime(2011, 12, 31, 9, 15, 36).</value>
  </data>
  <data name="Time_Minute" xml:space="preserve">
    <value>Returns the minute component.</value>
  </data>
  <data name="Time_Minute_Description" xml:space="preserve">
    <value>Returns the minute component of the provided &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value, {0}.</value>
  </data>
  <data name="Time_Minute_Example1" xml:space="preserve">
    <value>Find the minute in #datetime(2011, 12, 31, 9, 15, 36).</value>
  </data>
  <data name="Time_Second" xml:space="preserve">
    <value>Returns the second component.</value>
  </data>
  <data name="Time_Second_Description" xml:space="preserve">
    <value>Returns the second component of the provided &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, or &lt;code&gt;datetimezone&lt;/code&gt; value, {0}.</value>
  </data>
  <data name="Time_Second_Example1" xml:space="preserve">
    <value>Find the second value from a datetime value.</value>
  </data>
  <data name="Time_StartOfHour" xml:space="preserve">
    <value>Returns the start of the hour.</value>
  </data>
  <data name="Time_StartOfHour_Description" xml:space="preserve">
    <value>Returns the start of the hour represented by {0}.
    {0} must be a &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt; or &lt;code&gt;datetimezone&lt;/code&gt; value.</value>
  </data>
  <data name="Time_StartOfHour_Example1" xml:space="preserve">
    <value>Find the start of the hour for October 10th, 2011, 8:10:32AM.</value>
  </data>
  <data name="Time_ToRecord" xml:space="preserve">
    <value>Returns a record containing the Time value's parts.</value>
  </data>
  <data name="Time_ToRecord_Description" xml:space="preserve">
    <value>Returns a record containing the parts of the given Time value, {0}.
 &lt;ul&gt;
        &lt;li&gt;{0}: A &lt;code&gt;time&lt;/code&gt; value for from which the record of its parts is to be calculated.&lt;/li&gt;
      &lt;/ul&gt;</value>
  </data>
  <data name="Time_ToRecord_Example1" xml:space="preserve">
    <value>Convert the &lt;code&gt;#time(11, 56, 2)&lt;/code&gt; value into a record containing Time values.</value>
  </data>
  <data name="Time_ToText" xml:space="preserve">
    <value>Returns a textual representation of the time value.</value>
  </data>
  <data name="Time_ToText_Description" xml:space="preserve">
    <value>Returns a textual representation of {0}. An optional &lt;code&gt;record&lt;/code&gt; parameter, {1}, may be provided to specify additional properties. {2} is only used for legacy workflows. The &lt;code&gt;record&lt;/code&gt; can contain the following fields:
&lt;ul&gt;
   &lt;li&gt;&lt;code&gt;Format&lt;/code&gt;: A &lt;code&gt;text&lt;/code&gt; value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing &lt;code&gt;null&lt;/code&gt; will result in formatting the date using the default defined by &lt;code&gt;Culture&lt;/code&gt;.&lt;/li&gt;
   &lt;li&gt;&lt;code&gt;Culture&lt;/code&gt;: When &lt;code&gt;Format&lt;/code&gt; is not null, &lt;code&gt;Culture&lt;/code&gt; controls some format specifiers. For example, in &lt;code&gt;"en-US"&lt;/code&gt; &lt;code&gt;"tt"&lt;/code&gt; is &lt;code&gt;"AM" or "PM"&lt;/code&gt;, while in &lt;code&gt;"ar-EG"&lt;/code&gt; &lt;code&gt;"tt"&lt;/code&gt; is &lt;code&gt;"ص" or "م"&lt;/code&gt;. When &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Culture&lt;/code&gt; controls the default format to use. When &lt;code&gt;Culture&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or omitted, &lt;code&gt;Culture.Current&lt;/code&gt; is used.&lt;/li&gt;
&lt;/ul&gt;
To support legacy workflows, {1} and {2} may also be text values. This has the same behavior as if {1}&lt;code&gt; = [Format = {1}, Culture = {2}]&lt;/code&gt;.</value>
  </data>
  <data name="Time_ToText_Example1" xml:space="preserve">
    <value>Convert &lt;code&gt;#time(01, 30, 25)&lt;/code&gt; into a &lt;code&gt;text&lt;/code&gt; value. &lt;i&gt;Result output may vary depending on current culture.&lt;/i&gt;</value>
  </data>
  <data name="Time_ToText_Example2" xml:space="preserve">
    <value>Convert using a custom format and the German culture.</value>
  </data>
  <data name="Time_ToText_Example3" xml:space="preserve">
    <value>Convert using standard time format.</value>
  </data>
  <data name="Time_Type" xml:space="preserve">
    <value>The type that represents all time values.</value>
  </data>
  <data name="TraceLevel_Critical" xml:space="preserve">
    <value>Specifies Critical trace level.</value>
  </data>
  <data name="TraceLevel_Critical_Description" xml:space="preserve">
    <value>Returns 1, the value for Critical trace level.</value>
  </data>
  <data name="TraceLevel_Error" xml:space="preserve">
    <value>Specifies Error trace level.</value>
  </data>
  <data name="TraceLevel_Error_Description" xml:space="preserve">
    <value>Returns 2, the value for Error trace level.</value>
  </data>
  <data name="TraceLevel_Information" xml:space="preserve">
    <value>Specifies Information trace level.</value>
  </data>
  <data name="TraceLevel_Information_Description" xml:space="preserve">
    <value>Returns 4, the value for Information trace level.</value>
  </data>
  <data name="TraceLevel_Type" xml:space="preserve">
    <value>Specifies the trace level.</value>
  </data>
  <data name="TraceLevel_Type_Description" xml:space="preserve">
    <value>Specifies the trace level.</value>
  </data>
  <data name="TraceLevel_Verbose" xml:space="preserve">
    <value>Specifies Verbose trace level.</value>
  </data>
  <data name="TraceLevel_Verbose_Description" xml:space="preserve">
    <value>Returns 5, the value for Verbose trace level.</value>
  </data>
  <data name="TraceLevel_Warning" xml:space="preserve">
    <value>Specifies Warning trace level.</value>
  </data>
  <data name="TraceLevel_Warning_Description" xml:space="preserve">
    <value>Returns 3, the value for Warning trace level.</value>
  </data>
  <data name="Type_AddTableKey" xml:space="preserve">
    <value>Adds a key to the given table type.</value>
  </data>
  <data name="Type_ClosedRecord" xml:space="preserve">
    <value>Returns a closed version of the given record type (or the same type, if it is already closed).</value>
  </data>
  <data name="Type_ClosedRecord_Description" xml:space="preserve">
    <value>Returns a closed version of the given &lt;code&gt;record&lt;/code&gt; {0} (or the same type, if it is already closed).</value>
  </data>
  <data name="Type_ClosedRecord_Example1" xml:space="preserve">
    <value>Create a closed version of &lt;code&gt;type [ A = number,…]&lt;/code&gt;.</value>
  </data>
  <data name="Type_Facets" xml:space="preserve">
    <value>Returns the facets of a type.</value>
  </data>
  <data name="Type_Facets_Description" xml:space="preserve">
    <value>Returns a record containing the facets of {0}.</value>
  </data>
  <data name="Type_ForFunction" xml:space="preserve">
    <value>Returns a type that represents functions with specific parameter and return type constraints.</value>
  </data>
  <data name="Type_ForFunction_Description" xml:space="preserve">
    <value>Creates a &lt;code&gt;function type&lt;/code&gt; from {0}, a record of &lt;code&gt;ReturnType&lt;/code&gt; and &lt;code&gt;Parameters&lt;/code&gt;, and {1}, the minimum number of arguments required to invoke the function.</value>
  </data>
  <data name="Type_ForFunction_Example1" xml:space="preserve">
    <value>Creates the type for a function that takes a number parameter named X and returns a number.</value>
  </data>
  <data name="Type_ForList" xml:space="preserve">
    <value>Returns a type that represents lists with a specific item type constraint.</value>
  </data>
  <data name="Type_ForNullable" xml:space="preserve">
    <value>Returns a type that represents the argument type plus null.</value>
  </data>
  <data name="Type_ForRecord" xml:space="preserve">
    <value>Returns a type that represents records with specific type constraints on fields.</value>
  </data>
  <data name="Type_ForRecord_Example1" xml:space="preserve">
    <value>Dynamically generate a table type.</value>
  </data>
  <data name="Type_FunctionParameters" xml:space="preserve">
    <value>Returns a record with field values set to the name of the parameters of a function type, and their values set to their corresponding types.</value>
  </data>
  <data name="Type_FunctionParameters_Description" xml:space="preserve">
    <value>Returns a record with field values set to the name of the parameters of {0}, and their values set to their corresponding types.</value>
  </data>
  <data name="Type_FunctionParameters_Example1" xml:space="preserve">
    <value>Find the types of the parameters to the function &lt;code&gt;(x as number, y as text)&lt;/code&gt;.</value>
  </data>
  <data name="Type_FunctionRequiredParameters" xml:space="preserve">
    <value>Returns a number indicating the minimum number of parameters required to invoke the type of function.</value>
  </data>
  <data name="Type_FunctionRequiredParameters_Description" xml:space="preserve">
    <value>Returns a number indicating the minimum number of parameters required to invoke the input {0} of function.</value>
  </data>
  <data name="Type_FunctionRequiredParameters_Example1" xml:space="preserve">
    <value>Find the number of required parameters to the function &lt;code&gt;(x as number, optional y as text)&lt;/code&gt;.</value>
  </data>
  <data name="Type_FunctionReturn" xml:space="preserve">
    <value>Returns a type returned by a function type.</value>
  </data>
  <data name="Type_FunctionReturn_Description" xml:space="preserve">
    <value>Returns a type returned by a function {0}.</value>
  </data>
  <data name="Type_FunctionReturn_Example1" xml:space="preserve">
    <value>Find the return type of &lt;code&gt;() as any)&lt;/code&gt;.</value>
  </data>
  <data name="Type_Is" xml:space="preserve">
    <value>Determines if a value of the first type is always compatible with the second type.</value>
  </data>
  <data name="Type_IsNullable" xml:space="preserve">
    <value>Returns true if a type is a nullable type; otherwise, false.</value>
  </data>
  <data name="Type_IsNullable_Description" xml:space="preserve">
    <value>Returns &lt;code&gt;true&lt;/code&gt; if a type is a &lt;code&gt;nullable&lt;/code&gt; type; otherwise, &lt;code&gt;false&lt;/code&gt;.</value>
  </data>
  <data name="Type_IsNullable_Example1" xml:space="preserve">
    <value>Determine if &lt;code&gt;number&lt;/code&gt; is nullable.</value>
  </data>
  <data name="Type_IsNullable_Example2" xml:space="preserve">
    <value>Determine if &lt;code&gt;type nullable number&lt;/code&gt; is nullable.</value>
  </data>
  <data name="Type_IsOpenRecord" xml:space="preserve">
    <value>Returns whether a record type is open.</value>
  </data>
  <data name="Type_IsOpenRecord_Description" xml:space="preserve">
    <value>Returns a &lt;code&gt;logical&lt;/code&gt; indicating whether a record {0} is open.</value>
  </data>
  <data name="Type_IsOpenRecord_Example1" xml:space="preserve">
    <value>Determine if the record &lt;code&gt;type [ A = number, ...]&lt;/code&gt; is open.</value>
  </data>
  <data name="Type_Is_Description" xml:space="preserve">
    <value>Determines if a value of {0} is always compatible with {1}.</value>
  </data>
  <data name="Type_Is_Example1" xml:space="preserve">
    <value>Determine if a value of type number can always also be treated as type any.</value>
  </data>
  <data name="Type_Is_Example2" xml:space="preserve">
    <value>Determine if a value of type any can always also be treated as type number.</value>
  </data>
  <data name="Type_ListItem" xml:space="preserve">
    <value>Returns an item type from a list type.</value>
  </data>
  <data name="Type_ListItem_Description" xml:space="preserve">
    <value>Returns an item type from a list {0}.</value>
  </data>
  <data name="Type_ListItem_Example1" xml:space="preserve">
    <value>Find item type from the list &lt;code&gt;{number}&lt;/code&gt;.</value>
  </data>
  <data name="Type_NonNullable" xml:space="preserve">
    <value>Returns the non nullable type from a type.</value>
  </data>
  <data name="Type_NonNullable_Description" xml:space="preserve">
    <value>Returns the non &lt;code&gt;nullable&lt;/code&gt; type from the {0}.</value>
  </data>
  <data name="Type_NonNullable_Example1" xml:space="preserve">
    <value>Return the non nullable type of &lt;code&gt;type nullable number&lt;/code&gt;.</value>
  </data>
  <data name="Type_OpenRecord" xml:space="preserve">
    <value>Returns an opened version of the given record type (or the same type, if it is already open).</value>
  </data>
  <data name="Type_OpenRecord_Description" xml:space="preserve">
    <value>Returns an opened version of the given &lt;code&gt;record&lt;/code&gt; {0} (or the same type, if it is already opened).</value>
  </data>
  <data name="Type_OpenRecord_Example1" xml:space="preserve">
    <value>Create an opened version of &lt;code&gt;type [ A = number]&lt;/code&gt;.</value>
  </data>
  <data name="Type_RecordFields" xml:space="preserve">
    <value>Returns a record describing the fields of a record type with each field of the returned record type having a corresponding name and a value.</value>
  </data>
  <data name="Type_RecordFields_Description" xml:space="preserve">
    <value>Returns a record describing the fields of a record {0}. Each field of the returned record type has a corresponding name and a value, in the form of a record &lt;code&gt;[ Type = type, Optional = logical ]&lt;/code&gt;.</value>
  </data>
  <data name="Type_RecordFields_Example1" xml:space="preserve">
    <value>Find the name and value of the record &lt;code&gt;[ A = number, optional B = any]&lt;/code&gt;.</value>
  </data>
  <data name="Type_ReplaceFacets" xml:space="preserve">
    <value>Replaces the facets of a type.</value>
  </data>
  <data name="Type_ReplaceFacets_Description" xml:space="preserve">
    <value>Replaces the facets of {0} with the facets contained in the record {1}.</value>
  </data>
  <data name="Type_ReplaceTableKeys" xml:space="preserve">
    <value>Returns a new table type with all keys replaced by the specified list of keys.</value>
  </data>
  <data name="Type_ReplaceTableKeys_Description" xml:space="preserve">
    <value>Returns a new table type with all keys replaced by the specified list of keys.&lt;br&gt;
    &lt;br&gt;
    Each key is defined using a record in the following form:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;code&gt;Columns&lt;/code&gt;: a list of the column names that define the key
      &lt;/li&gt;
      &lt;li&gt;
        &lt;code&gt;Primary&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the key is the table's primary key; otherwise, &lt;code&gt;false&lt;/code&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    The specified list of keys is validated to ensure that no more than one primary key is defined and that all key column names exist on the table type.
    </value>
  </data>
  <data name="Type_ReplaceTableKeys_Example1" xml:space="preserve">
    <value>Replace the key information on a table type.</value>
  </data>
  <data name="Type_ReplaceTableKeys_Example2" xml:space="preserve">
    <value>Clear the key information previously defined on a table type.</value>
  </data>
  <data name="Type_TableColumn" xml:space="preserve">
    <value>Returns the type of a column in a table.</value>
  </data>
  <data name="Type_TableColumn_Description" xml:space="preserve">
    <value>Returns the type of the column {1} in the table type {0}.</value>
  </data>
  <data name="Type_TableKeys" xml:space="preserve">
    <value>Returns the possibly empty list of keys for the given table type.</value>
  </data>
  <data name="Type_TableKeys_Description" xml:space="preserve">
    <value>Returns the possibly empty list of keys for the given table type.&lt;br&gt;
    &lt;br&gt;
    Each key is defined using a record in the following form:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;code&gt;Columns&lt;/code&gt;: a list of the column names that define the key
      &lt;/li&gt;
      &lt;li&gt;
        &lt;code&gt;Primary&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the key is the table's primary key; otherwise, &lt;code&gt;false&lt;/code&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    </value>
  </data>
  <data name="Type_TableKeys_Example1" xml:space="preserve">
    <value>Return the key information for a table type.</value>
  </data>
  <data name="Type_TableRow" xml:space="preserve">
    <value>Returns the row type of the table type.</value>
  </data>
  <data name="Type_TableRow_Description" xml:space="preserve">
    <value>Returns the row type of the specified table type. The result will always be a record type.</value>
  </data>
  <data name="Type_TableRow_Example1" xml:space="preserve">
    <value>Return the row type information for a simple table.</value>
  </data>
  <data name="Type_TableSchema" xml:space="preserve">
    <value>Returns a table containing a description of the columns (i.e. the schema) of the specified table type.</value>
  </data>
  <data name="Type_TableSchema_Description" xml:space="preserve">
    <value>&lt;p&gt;Returns a table describing the columns of {0}.&lt;/p&gt;
&lt;p&gt;Refer to the documentation for &lt;code&gt;Table.Schema&lt;/code&gt; for a description of the resulting table.&lt;/p&gt;</value>
  </data>
  <data name="Type_Type" xml:space="preserve">
    <value>The type that represents all types.</value>
  </data>
  <data name="Type_Union" xml:space="preserve">
    <value>Returns the union of a list of types.</value>
  </data>
  <data name="Type_Union_Description" xml:space="preserve">
    <value>Returns the union of the types in {0}.</value>
  </data>
  <data name="Uri_BuildQueryString" xml:space="preserve">
    <value>Assemble a record into a URI query string.</value>
  </data>
  <data name="Uri_BuildQueryString_Description" xml:space="preserve">
    <value>Assemble the record {0} into a URI query string, escaping characters as necessary.</value>
  </data>
  <data name="Uri_BuildQueryString_Example1" xml:space="preserve">
    <value>Encode a query string which contains some special characters.</value>
  </data>
  <data name="Uri_Combine" xml:space="preserve">
    <value>Returns an absolute URI that is the combination of the input base URI and relative URI.</value>
  </data>
  <data name="Uri_Combine_Description" xml:space="preserve">
    <value>Returns an absolute URI that is the combination of the input {0} and {1}.</value>
  </data>
  <data name="Uri_EscapeDataString" xml:space="preserve">
    <value>Encodes special characters in accordance with RFC 3986.</value>
  </data>
  <data name="Uri_EscapeDataString_Description" xml:space="preserve">
    <value>Encodes special characters in the input {0} according to the rules of RFC 3986.</value>
  </data>
  <data name="Uri_EscapeDataString_Example1" xml:space="preserve">
    <value>Encode the special characters in "+money$".</value>
  </data>
  <data name="Uri_Parts" xml:space="preserve">
    <value>Returns the parts of the input absolute URI as a record.</value>
  </data>
  <data name="Uri_Parts_Description" xml:space="preserve">
    <value>Returns the parts of the input {0} as a record, containing values such as Scheme, Host, Port, Path, Query, Fragment, UserName and Password.</value>
  </data>
  <data name="Uri_Parts_Example1" xml:space="preserve">
    <value>Find the parts of the absolute URI "www.adventure-works.com".</value>
  </data>
  <data name="Uri_Parts_Example2" xml:space="preserve">
    <value>Decode a percent-encoded string.</value>
  </data>
  <data name="Uri_Type" xml:space="preserve">
    <value>The type that represents a text URI.</value>
  </data>
  <data name="ValueAction_NativeStatement" xml:space="preserve">
    <value>Creates an action to execute a statement against a target.</value>
  </data>
  <data name="ValueAction_NativeStatement_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates an action that executes {1} against {0} using the parameters specified in {2} and the options specified in {3}.&lt;/p&gt;
&lt;p&gt;The behavior of the created action is defined by {0}.&lt;/p&gt;
&lt;p&gt;{0} provides the context for the operation described by {1}.&lt;/p&gt;
&lt;p&gt;{1} describes the action to be taken against {0}. {1} is expressed in a manner specific to {0} (for example, a T-SQL statement).&lt;/p&gt;
&lt;p&gt;The optional {2} value may contain either a list or record as appropriate to supply the parameter values expected by {1}.&lt;/p&gt;
&lt;p&gt;The optional {3} record may contain options that affect the execution behavior of {1} against {0}. These options are specific to {0}.&lt;/p&gt;
&lt;p&gt;The returned action will perform the described operation when executed. The action returns a meaningful value representing the outcome of the operation (for example, a status code, the number of rows affected, and so on).&lt;/p&gt;
&lt;p&gt;The function will raise an evaluation error if invalid input arguments are detected (before trying to perform the operation).&lt;/p&gt;
&lt;p&gt;The action will raise an execution error if the operation cannot be successfully completed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {0} may be left in an undefined state if an execution error occurs.&lt;/p&gt;</value>
  </data>
  <data name="ValueAction_Replace" xml:space="preserve">
    <value>Creates an action that replaces the content of a value with the specified value.</value>
  </data>
  <data name="ValueAction_Replace_Description" xml:space="preserve">
    <value>&lt;p&gt;Creates an action that when executed replaces the content of {0} with {1}.&lt;/p&gt;
&lt;p&gt;The function raises an evaluation error if {0} is not updatable or if {1} is not compatible with {0}.&lt;/p&gt;
&lt;p&gt;The action raises an execution error if the operation fails.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {0} may be left in a partially updated state if an execution error occurs.&lt;/p&gt;</value>
  </data>
  <data name="Value_Add" xml:space="preserve">
    <value>Returns the sum of the two values.</value>
  </data>
  <data name="Value_Add_Description" xml:space="preserve">
    <value>Returns the sum of {0} and {1}. An optional {2} parameter may be specified, by default &lt;code&gt;Precision.Double&lt;/code&gt; is used.</value>
  </data>
  <data name="Value_Alternates" xml:space="preserve">
    <value>Expresses alternate query plans.</value>
  </data>
  <data name="Value_Alternates_Description" xml:space="preserve">
    <value>Expresses alternate query plans within a query plan expression obtained through Value.Expression(Value.Optimize(...)). Not intended for other uses.</value>
  </data>
  <data name="Value_As" xml:space="preserve">
    <value>Returns the value if it is compatible with the specified type.</value>
  </data>
  <data name="Value_As_Description" xml:space="preserve">
    <value>Returns the value if it is compatible with the specified type. This is equivalent to the "as" operator in M, with the exception that it can accept identifier type references such as Number.Type.</value>
  </data>
  <data name="Value_As_Example1" xml:space="preserve">
    <value>Cast a number to a number.</value>
  </data>
  <data name="Value_As_Example2" xml:space="preserve">
    <value>Attempt to cast a text value to a number.</value>
  </data>
  <data name="Value_Compare" xml:space="preserve">
    <value>Returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.</value>
  </data>
  <data name="Value_Divide" xml:space="preserve">
    <value>Returns the result of dividing the first value by the second.</value>
  </data>
  <data name="Value_Divide_Description" xml:space="preserve">
    <value>Returns the result of dividing {0} by {1}. An optional {2} parameter may be specified, by default &lt;code&gt;Precision.Double&lt;/code&gt; is used.</value>
  </data>
  <data name="Value_Equals" xml:space="preserve">
    <value>Returns whether two values are equal.</value>
  </data>
  <data name="Value_Equals_Description" xml:space="preserve">
    <value>Returns true if value {0} is equal to value {1}, false otherwise.</value>
  </data>
  <data name="Value_Expression" xml:space="preserve">
    <value>Returns an abstract syntax tree (AST) that represents the value's expression.</value>
  </data>
  <data name="Value_Expression_Description" xml:space="preserve">
    <value>Returns an abstract syntax tree (AST) that represents the value's expression</value>
  </data>
  <data name="Value_Firewall" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_Firewall_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_FromText" xml:space="preserve">
    <value>Creates a strongly-typed value from a textual representation.</value>
  </data>
  <data name="Value_FromText_Description" xml:space="preserve">
    <value>Decodes a value from a textual representation, {0}, and interprets it as a value with an appropriate type.
    &lt;code&gt;Value.FromText&lt;/code&gt; takes a text value and returns a number, a logical value, a null value, a datetime value, a duration value, or a text value. The empty text value is interpreted as a null value.
    An optional {1} may also be provided (for example, "en-US").</value>
  </data>
  <data name="Value_Hash" xml:space="preserve">
    <value>Returns the hash code of the value.</value>
  </data>
  <data name="Value_Is" xml:space="preserve">
    <value>Determines whether a value is compatible with the specified type.</value>
  </data>
  <data name="Value_Is_Description" xml:space="preserve">
    <value>Determines whether a value is compatible with the specified type. This is equivalent to the "is" operator in M, with the exception that it can accept identifier type references such as Number.Type.</value>
  </data>
  <data name="Value_Is_Example1" xml:space="preserve">
    <value>Compare two ways of determining if a number is compatible with type number.</value>
  </data>
  <data name="Value_Lineage" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_Lineage_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_Metadata" xml:space="preserve">
    <value>Returns a record containing the input's metadata.</value>
  </data>
  <data name="Value_Multiply" xml:space="preserve">
    <value>Returns the product of the two values.</value>
  </data>
  <data name="Value_Multiply_Description" xml:space="preserve">
    <value>Returns the product of multiplying {0} by {1}. An optional {2} parameter may be specified, by default &lt;code&gt;Precision.Double&lt;/code&gt; is used.</value>
  </data>
  <data name="Value_NativeQuery" xml:space="preserve">
    <value>Evaluates a query against a target.</value>
  </data>
  <data name="Value_NativeQuery_Description" xml:space="preserve">
    <value>&lt;p&gt;Evaluates {1} against {0} using the parameters specified in {2} and the options specified in {3}.&lt;/p&gt;
&lt;p&gt;The output of the query is defined by {0}.&lt;/p&gt;
&lt;p&gt;{0} provides the context for the operation described by {1}.&lt;/p&gt;
&lt;p&gt;{1} describes the query to be executed against {0}. {1} is expressed in a manner specific to {0} (for example, a T-SQL statement).&lt;/p&gt;
&lt;p&gt;The optional {2} value may contain either a list or record as appropriate to supply the parameter values expected by {1}.&lt;/p&gt;
&lt;p&gt;The optional {3} record may contain options that affect the evaluation behavior of {1} against {0}. These options are specific to {0}.&lt;/p&gt;</value>
  </data>
  <data name="Value_NullableEquals" xml:space="preserve">
    <value>Returns whether two values are equal.</value>
  </data>
  <data name="Value_NullableEquals_Description" xml:space="preserve">
    <value>Returns null if either argument '{0}', '{1}' is null, otherwise equivalent to Value.Equals.</value>
  </data>
  <data name="Value_Optimize" xml:space="preserve">
    <value>Signals Value.Expression to return the optimized expression for a value.</value>
  </data>
  <data name="Value_Optimize_Description" xml:space="preserve">
    <value>When used within Value.Expression, if {0} represents a query that can be optimized, this function indicates that the optimized expression should be returned. Otherwise, {0} will be passed through with no effect.</value>
  </data>
  <data name="Value_RemoveMetadata" xml:space="preserve">
    <value>Strips the input of metadata.</value>
  </data>
  <data name="Value_RemoveMetadata_Example1" xml:space="preserve">
    <value>Remove all metadata from a text value.</value>
  </data>
  <data name="Value_RemoveMetadata_Example2" xml:space="preserve">
    <value>Remove only one field of metadata from a text value.</value>
  </data>
  <data name="Value_ReplaceMetadata" xml:space="preserve">
    <value>Replaces the input's metadata information.</value>
  </data>
  <data name="Value_ReplaceType" xml:space="preserve">
    <value>Replaces the value's type.</value>
  </data>
  <data name="Value_ReplaceType_Description" xml:space="preserve">
    <value>Replaces the {0}'s type with the provided {1}.</value>
  </data>
  <data name="Value_ReplaceType_Example1" xml:space="preserve">
    <value>Replace the default type of a record with a more specific type.</value>
  </data>
  <data name="Value_Subtract" xml:space="preserve">
    <value>Returns the difference of the two values.</value>
  </data>
  <data name="Value_Subtract_Description" xml:space="preserve">
    <value>Returns the difference of {0} and {1}. An optional {2} parameter may be specified, by default &lt;code&gt;Precision.Double&lt;/code&gt; is used.</value>
  </data>
  <data name="Value_Traits" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_Traits_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_Type" xml:space="preserve">
    <value>Returns the type of the given value.</value>
  </data>
  <data name="Value_ViewError" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_ViewError_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_ViewFunction" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Value_ViewFunction_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Variable_Value" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="Variable_Value_Description" xml:space="preserve">
    <value>This function is intended for internal use only.</value>
  </data>
  <data name="WebAction_Request" xml:space="preserve">
    <value>Creates an action that, when executed, will return the results of performing an HTTP request as a binary value.</value>
  </data>
  <data name="WebAction_Request_Description" xml:space="preserve">
    <value>Creates an action that, when executed, will return the results of performing a {0} request against {1} using HTTP as a binary value.
    An optional record parameter, {2}, may be provided to specify additional properties. The record can contain the following fields:
    {2:type}
    &lt;br&gt;
    Note that this function is disabled in most contexts. Consider using Web.Contents or Web.Headers instead.
    </value>
  </data>
  <data name="WebAction_Request_Example1" xml:space="preserve">
    <value>Perform a GET request against Bing.</value>
  </data>
  <data name="WebMethod_Delete" xml:space="preserve">
    <value>Specifies the DELETE method for HTTP.</value>
  </data>
  <data name="WebMethod_Get" xml:space="preserve">
    <value>Specifies the GET method for HTTP.</value>
  </data>
  <data name="WebMethod_Head" xml:space="preserve">
    <value>Specifies the HEAD method for HTTP.</value>
  </data>
  <data name="WebMethod_Patch" xml:space="preserve">
    <value>Specifies the PATCH method for HTTP.</value>
  </data>
  <data name="WebMethod_Post" xml:space="preserve">
    <value>Specifies the POST method for HTTP.</value>
  </data>
  <data name="WebMethod_Put" xml:space="preserve">
    <value>Specifies the PUT method for HTTP.</value>
  </data>
  <data name="WebMethod_Type" xml:space="preserve">
    <value>Specifies an HTTP method.</value>
  </data>
  <data name="Web_BrowserContents_Description" xml:space="preserve">
    <value>This function is unavailable because it requires .NET 4.5.</value>
  </data>
  <data name="Web_Contents" xml:space="preserve">
    <value>Returns the contents downloaded from the url as binary.</value>
  </data>
  <data name="Web_Contents_Description" xml:space="preserve">
    <value>Returns the contents downloaded from {0} as binary. An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields:
    {1:type}
    The HTTP request is made as either a GET (when no Content is specified) or a POST (when there is Content). POST requests may only be made anonymously.
    &lt;br&gt;
    The headers of the HTTP response are available as metadata on the binary result. Outside of a custom data connector context, only a subset of response headers is available (for security reasons).
    </value>
  </data>
  <data name="Web_Contents_Example1" xml:space="preserve">
    <value>Retrieve the contents of &lt;code&gt;"https://bing.com/search?q=Power+Query"&lt;/code&gt; using the RelativePath and Query options. These options can be used to dynamically query a static base URL.</value>
  </data>
  <data name="Web_Contents_Example2" xml:space="preserve">
    <value>Perform a POST against a URL, passing a binary JSON payload and parsing the response as JSON.</value>
  </data>
  <data name="Web_Contents_Example3" xml:space="preserve">
    <value>Connect to a secure URL that accepts an authentication key as part of its query string. Instead of hard-coding the secret key in M (which would pose a security risk), 
    the key can be provided securely by specifying its name (not its value) in M, choosing Web API authentication, and entering the key value as part of the Web API credential.
    When used in this way, the following example will generate a request to &lt;code&gt;"https://contoso.com/api/customers/get?api_key=******"&lt;/code&gt;.</value>
  </data>
  <data name="Web_DefaultProxy" xml:space="preserve">
    <value>Returns the HTTP proxy to be used for a particular URI.</value>
  </data>
  <data name="Web_DefaultProxy_Description" xml:space="preserve">
    <value>Returns the HTTP proxy to be used for a particular URI {0}, or null if no proxy is configured.</value>
  </data>
  <data name="Web_Headers" xml:space="preserve">
    <value>Returns the HTTP headers downloaded from the url as a record value.</value>
  </data>
  <data name="Web_Headers_Description" xml:space="preserve">
    <value>Returns the headers downloaded from {0} as a record. An optional record parameter, {1}, may be provided to specify additional properties. The record can contain the following fields:
    {1:type}
    The HTTP request is made with the HEAD method. Outside of a custom data connector context, only a subset of response headers is available (for security reasons).
    </value>
  </data>
  <data name="Web_Headers_Example1" xml:space="preserve">
    <value>Retrieve the HTTP headers for &lt;code&gt;"https://bing.com/search?q=Power+Query"&lt;/code&gt; using the RelativePath and Query options.</value>
  </data>
  <data name="Web_Page" xml:space="preserve">
    <value>Returns the contents of the HTML document broken into its constituent structures, as well as a representation of the full document and its text after removing tags.</value>
  </data>
  <data name="Web_Service" xml:space="preserve">
    <value>Returns a record of functions that can be invoked to call methods on the web service.</value>
  </data>
  <data name="Xml_Document" xml:space="preserve">
    <value>Returns the contents of the XML document as a hierarchical table.</value>
  </data>
  <data name="Xml_Tables" xml:space="preserve">
    <value>Returns the contents of the XML document as a nested collection of flattened tables.</value>
  </data>
  <data name="Xml_Tables_Example1" xml:space="preserve">
    <value>Retrieve the contents of a local xml file.</value>
  </data>
  <data name="_Pound_binary" xml:space="preserve">
    <value>Creates a binary value from numbers or text.</value>
  </data>
  <data name="_Pound_binary_Description" xml:space="preserve">
    <value>Creates a binary value from a list of numbers or a base 64 encoded text value.</value>
  </data>
  <data name="_Pound_binary_Example1" xml:space="preserve">
    <value>Create a binary value from a list of numbers.</value>
  </data>
  <data name="_Pound_binary_Example2" xml:space="preserve">
    <value>Create a binary value from a base 64 encoded text value.</value>
  </data>
  <data name="_Pound_date" xml:space="preserve">
    <value>Creates a date value from year, month, and day.</value>
  </data>
  <data name="_Pound_date_Description" xml:space="preserve">
    <value>Creates a date value from whole numbers representing the year, month, and day. Raises an error if these conditions are not true:
    &lt;ul&gt;
      &lt;li&gt; 1 ≤ year ≤ 9999 &lt;/li&gt;
      &lt;li&gt; 1 ≤ month ≤ 12 &lt;/li&gt;
      &lt;li&gt; 1 ≤ day ≤ 31 &lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="_Pound_datetime" xml:space="preserve">
    <value>Creates a datetime value from year, month, day, hour, minute, and second.</value>
  </data>
  <data name="_Pound_datetime_Description" xml:space="preserve">
    <value>Creates a datetime value from numbers representing the year, month, day, hour, minute, and (fractional) second. Raises an error if these conditions are not true:
    &lt;ul&gt;
      &lt;li&gt; 1 ≤ year ≤ 9999 &lt;/li&gt;
      &lt;li&gt; 1 ≤ month ≤ 12 &lt;/li&gt;
      &lt;li&gt; 1 ≤ day ≤ 31 &lt;/li&gt;
      &lt;li&gt; 0 ≤ hour ≤ 23 &lt;/li&gt;
      &lt;li&gt; 0 ≤ minute ≤ 59 &lt;/li&gt;
      &lt;li&gt; 0 ≤ second &lt; 60 &lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="_Pound_datetimezone" xml:space="preserve">
    <value>Creates a datetimezone value from year, month, day, hour, minute, second, offset-hours, and offset-minutes.</value>
  </data>
  <data name="_Pound_datetimezone_Description" xml:space="preserve">
    <value>Creates a datetimezone value from numbers representing the year, month, day, hour, minute, (fractional) second, (fractional) offset-hours, and offset-minutes. Raises an error if these conditions are not true:
    &lt;ul&gt;
      &lt;li&gt; 1 ≤ year ≤ 9999 &lt;/li&gt;
      &lt;li&gt; 1 ≤ month ≤ 12 &lt;/li&gt;
      &lt;li&gt; 1 ≤ day ≤ 31 &lt;/li&gt;
      &lt;li&gt; 0 ≤ hour ≤ 23 &lt;/li&gt;
      &lt;li&gt; 0 ≤ minute ≤ 59 &lt;/li&gt;
      &lt;li&gt; 0 ≤ second &lt; 60 &lt;/li&gt;
      &lt;li&gt; -14 ≤ offset-hours + offset-minutes / 60 ≤ 14 &lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
  <data name="_Pound_duration" xml:space="preserve">
    <value>Creates a duration value from days, hours, minutes, and seconds.</value>
  </data>
  <data name="_Pound_duration_Description" xml:space="preserve">
    <value>Creates a duration value from numbers representing days, hours, minutes, and (fractional) seconds.</value>
  </data>
  <data name="_Pound_table" xml:space="preserve">
    <value>Creates a table value from columns and rows.</value>
  </data>
  <data name="_Pound_table_Description" xml:space="preserve">
    <value>Creates a table value from {0} and {1}.
    The {0} value can be a list of column names, a table type, a number of columns, or null.
    The {1} value is a list of lists, where each element contains the column values for a single row.</value>
  </data>
  <data name="_Pound_table_Example1" xml:space="preserve">
    <value>Create an empty table.</value>
  </data>
  <data name="_Pound_table_Example2" xml:space="preserve">
    <value>Create a table by inferring the number of columns from the first row.</value>
  </data>
  <data name="_Pound_table_Example3" xml:space="preserve">
    <value>Create a table by specifying the number of columns.</value>
  </data>
  <data name="_Pound_table_Example4" xml:space="preserve">
    <value>Create a table by providing a list of column names.</value>
  </data>
  <data name="_Pound_table_Example5" xml:space="preserve">
    <value>Create a table with an explicit type.</value>
  </data>
  <data name="_Pound_time" xml:space="preserve">
    <value>Creates a time value from hour, minute, and second.</value>
  </data>
  <data name="_Pound_time_Description" xml:space="preserve">
    <value>Creates a time value from numbers representing the hour, minute, and (fractional) second. Raises an error if these conditions are not true:
    &lt;ul&gt;
      &lt;li&gt; 0 ≤ hour ≤ 24 &lt;/li&gt;
      &lt;li&gt; 0 ≤ minute ≤ 59 &lt;/li&gt;
      &lt;li&gt; 0 ≤ second &lt; 60 &lt;/li&gt;
      &lt;li&gt; if hour is 24, then minute and second must be 0 &lt;/li&gt;
    &lt;/ul&gt;</value>
  </data>
</root>