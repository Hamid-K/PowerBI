using System;
using System.Collections.Generic;

namespace Microsoft.Mashup.Engine1
{
	// Token: 0x02000231 RID: 561
	internal static class FunctionConstStrings
	{
		// Token: 0x06000BCD RID: 3021 RVA: 0x0001BA20 File Offset: 0x00019C20
		public static string GetString(string name)
		{
			if (FunctionConstStrings.strings == null)
			{
				FunctionConstStrings.strings = new Dictionary<string, string>
				{
					{ "_Pound_binary_Category", "Binary" },
					{ "_Pound_date_Category", "Date" },
					{ "_Pound_datetime_Category", "DateTime" },
					{ "_Pound_datetimezone_Category", "DateTimeZone" },
					{ "_Pound_duration_Category", "Duration" },
					{ "_Pound_table_Category", "Table" },
					{ "_Pound_time_Category", "Time" },
					{ "_Pound_binary_Example1_Code", "#binary({0x30, 0x31, 0x32})" },
					{ "_Pound_binary_Example1_Result", "Text.ToBinary(\"012\")" },
					{ "_Pound_binary_Example2_Code", "#binary(\"1011\")" },
					{ "_Pound_binary_Example2_Result", "Binary.FromText(\"1011\", BinaryEncoding.Base64)" },
					{ "Expression_Identifier_Category", "Expression" },
					{ "Expression_Identifier_Example1_Code", "Expression.Identifier(\"MyIdentifier\")" },
					{ "Expression_Identifier_Example1_Result", "\"MyIdentifier\"" },
					{ "Expression_Identifier_Example2_Code", "Expression.Identifier(\"My Identifier\")" },
					{ "Expression_Identifier_Example2_Result", "\"#\"\"My Identifier\"\"\"" },
					{ "Expression_Constant_Category", "Expression" },
					{ "Expression_Constant_Example1_Code", "Expression.Constant(123)" },
					{ "Expression_Constant_Example1_Result", "\"123\"" },
					{ "Expression_Constant_Example2_Code", "Expression.Constant(#date(2035, 01, 02))" },
					{ "Expression_Constant_Example2_Result", "\"#date(2035, 1, 2)\"" },
					{ "Expression_Constant_Example3_Code", "Expression.Constant(\"abc\")" },
					{ "Expression_Constant_Example3_Result", "\"\"\"abc\"\"\"" },
					{ "Expression_Evaluate_Category", "Expression" },
					{ "Expression_Evaluate_Example1_Code", "Expression.Evaluate(\"1 + 1\")" },
					{ "Expression_Evaluate_Example1_Result", "2" },
					{ "Expression_Evaluate_Example2_Code", "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])" },
					{ "Expression_Evaluate_Example2_Result", "6" },
					{ "Expression_Evaluate_Example3_Code", "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])" },
					{ "Expression_Evaluate_Example3_Result", "\"\"\"abcdef\"\"\"" },
					{ "TableAction_DeleteRows_Category", "Action" },
					{ "TableAction_UpdateRows_Category", "Action" },
					{ "TableAction_InsertRows_Category", "Action" },
					{ "WebAction_Request_Category", "Action" },
					{ "WebAction_Request_Example1_Code", "WebAction.Request(WebMethod.Get, \"https://bing.com\")" },
					{ "WebAction_Request_Example1_Result", "Action" },
					{ "WebMethod_Type_Category", "Accessing data" },
					{ "WebMethod_Delete_Category", "Accessing data" },
					{ "WebMethod_Get_Category", "Accessing data" },
					{ "WebMethod_Head_Category", "Accessing data" },
					{ "WebMethod_Patch_Category", "Accessing data" },
					{ "WebMethod_Post_Category", "Accessing data" },
					{ "WebMethod_Put_Category", "Accessing data" },
					{ "ValueAction_NativeStatement_Category", "Action" },
					{ "ValueAction_Replace_Category", "Action" },
					{ "Action_DoNothing_Category", "Action" },
					{ "Action_Try_Category", "Action" },
					{ "Action_Try_Example1_Code", "Action.Try(Action.Sequence({() => Action.Return(error \"Error!\")}))" },
					{ "Action_Try_Example1_Result", "action" },
					{ "Action_Try_Example2_Code", "Action.Try(Action.Sequence({() => Action.Return(\"Success!\")}))" },
					{ "Action_Try_Example2_Result", "action" },
					{ "Action_Return_Category", "Action" },
					{ "Action_Return_Example1_Code", "Action.Return(\"hello world!\")" },
					{ "Action_Return_Example1_Result", "action" },
					{ "Action_Sequence_Category", "Action" },
					{ "Action_Sequence_Example1_Code", "Action.Sequence({\r\n    Action.Return(\"Hello\"),\r\n    (result) => Action.Return(result & \" \" & \"world!\")\r\n})" },
					{ "Action_Sequence_Example1_Result", "action" },
					{ "Extension_LoadString_Category", "Extension" },
					{ "Extension_Contents_Category", "Extension" },
					{ "Extension_InvokeWithCredentials_Category", "Extension" },
					{ "Extension_InvokeWithPermissions_Category", "Extension" },
					{ "Extension_InvokeVolatileFunction_Category", "Extension" },
					{ "Extension_HasPermission_Category", "Extension" },
					{ "Extension_Cache_Category", "Extension" },
					{ "Date_FromText_Category", "Date" },
					{ "Date_FromText_Example1_Code", "Date.FromText(\"2010-12-31\")" },
					{ "Date_FromText_Example1_Result", "#date(2010, 12, 31)" },
					{ "Date_FromText_Example2_Code", "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])" },
					{ "Date_FromText_Example2_Result", "#date(2010, 12, 30)" },
					{ "Date_FromText_Example3_Code", "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])" },
					{ "Date_FromText_Example3_Result", "#date(1979, 11, 20)" },
					{ "Date_ToRecord_Category", "Date" },
					{ "Date_ToRecord_Example1_Code", "Date.ToRecord(#date(2011, 12, 31))" },
					{ "Date_ToRecord_Example1_Result", "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]" },
					{ "DateTimeZone_LocalNow_Category", "DateTimeZone" },
					{ "DateTimeZone_FixedLocalNow_Category", "DateTimeZone" },
					{ "Duration_ToText_Category", "Duration" },
					{ "Duration_ToText_Example1_Code", "Duration.ToText(#duration(2, 5, 55, 20))" },
					{ "Duration_ToText_Example1_Result", "\"2.05:55:20\"" },
					{ "Duration_FromText_Category", "Duration" },
					{ "Duration_FromText_Example1_Code", "Duration.FromText(\"2.05:55:20\")" },
					{ "Duration_FromText_Example1_Result", "#duration(2, 5, 55, 20)" },
					{ "Duration_ToRecord_Category", "Duration" },
					{ "Duration_ToRecord_Example1_Code", "Duration.ToRecord(#duration(2, 5, 55, 20))" },
					{ "Duration_ToRecord_Example1_Result", "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]" },
					{ "Date_DayOfWeek_Category", "Date" },
					{ "Date_DayOfWeek_Example1_Code", "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)" },
					{ "Date_DayOfWeek_Example1_Result", "1" },
					{ "Date_DayOfWeek_Example2_Code", "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)" },
					{ "Date_DayOfWeek_Example2_Result", "0" },
					{ "Date_DayOfWeekName_Category", "Date" },
					{ "Date_DayOfWeekName_Example1_Code", "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")" },
					{ "Date_DayOfWeekName_Example1_Result", "\"Saturday\"" },
					{ "Date_DayOfYear_Category", "Date" },
					{ "Date_DayOfYear_Example1_Code", "Date.DayOfYear(#date(2011, 03, 01))" },
					{ "Date_DayOfYear_Example1_Result", "60" },
					{ "Date_DaysInMonth_Category", "Date" },
					{ "Date_DaysInMonth_Example1_Code", "Date.DaysInMonth(#date(2011, 12, 01))" },
					{ "Date_DaysInMonth_Example1_Result", "31" },
					{ "Day_Friday_Category", "Date.Parameter values" },
					{ "Date_IsLeapYear_Category", "Date" },
					{ "Date_IsLeapYear_Example1_Code", "Date.IsLeapYear(#date(2012, 01, 01))" },
					{ "Date_IsLeapYear_Example1_Result", "true" },
					{ "Day_Monday_Category", "Date.Parameter values" },
					{ "Day_Saturday_Category", "Date.Parameter values" },
					{ "Day_Sunday_Category", "Date.Parameter values" },
					{ "Day_Thursday_Category", "Date.Parameter values" },
					{ "Day_Tuesday_Category", "Date.Parameter values" },
					{ "Day_Wednesday_Category", "Date.Parameter values" },
					{ "Date_WeekOfMonth_Category", "Date" },
					{ "Date_WeekOfMonth_Example1_Code", "Date.WeekOfMonth(#date(2011, 03, 15))" },
					{ "Date_WeekOfMonth_Example1_Result", "3" },
					{ "Date_WeekOfYear_Category", "Date" },
					{ "Date_WeekOfYear_Example1_Code", "Date.WeekOfYear(#date(2011, 03, 27))" },
					{ "Date_WeekOfYear_Example1_Result", "14" },
					{ "Date_WeekOfYear_Example2_Code", "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)" },
					{ "Date_WeekOfYear_Example2_Result", "13" },
					{ "Logical_Constants_False_Category", "Logical" },
					{ "Logical_Constants_True_Category", "Logical" },
					{ "List_AllTrue_Category", "List.Membership functions" },
					{ "List_AllTrue_Example1_Code", "List.AllTrue({true, true, 2 > 0})" },
					{ "List_AllTrue_Example1_Result", "true" },
					{ "List_AllTrue_Example2_Code", "List.AllTrue({true, false, 2 < 0})" },
					{ "List_AllTrue_Example2_Result", "false" },
					{ "List_AnyTrue_Category", "List.Membership functions" },
					{ "List_AnyTrue_Example1_Code", "List.AnyTrue({true, false, 2>0})" },
					{ "List_AnyTrue_Example1_Result", "true" },
					{ "List_AnyTrue_Example2_Code", "List.AnyTrue({2 = 0, false, 2 < 0})" },
					{ "List_AnyTrue_Example2_Result", "false" },
					{ "Logical_FromText_Category", "Logical" },
					{ "Logical_FromText_Example1_Code", "Logical.FromText(\"true\")" },
					{ "Logical_FromText_Example1_Result", "true" },
					{ "Logical_FromText_Example2_Code", "Logical.FromText(\"a\")" },
					{ "Logical_FromText_Example2_Result", "[Expression.Error] Could not convert to a logical." },
					{ "List_Average_Category", "List.Averages" },
					{ "List_Average_Example1_Code", "List.Average({3, 4, 6})" },
					{ "List_Average_Example1_Result", "4.333333333333333" },
					{ "List_Average_Example2_Code", "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})" },
					{ "List_Average_Example2_Result", "#date(2011, 1, 2)" },
					{ "List_MaxN_Category", "List.Ordering" },
					{ "List_MaxN_Example2_Code", "List.MaxN({3, 4, 5, -1, 7, 8, 2}, 5)" },
					{ "List_MaxN_Example2_Result", "{8, 7, 5, 4, 3}" },
					{ "List_Median_Category", "List.Ordering" },
					{ "List_Median_Example1_Code", "List.Median({5, 3, 1, 7, 9})" },
					{ "List_Median_Example1_Result", "5" },
					{ "List_MinN_Category", "List.Ordering" },
					{ "List_MinN_Example1_Code", "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)" },
					{ "List_MinN_Example1_Result", "{-1, 2, 3, 4, 5}" },
					{ "List_Mode_Category", "List.Averages" },
					{ "List_Modes_Category", "List.Averages" },
					{ "List_Modes_Example1_Code", "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})" },
					{ "List_Modes_Example1_Result", "{3, 5}" },
					{ "List_Mode_Example1_Code", "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})" },
					{ "List_Mode_Example1_Result", "3" },
					{ "List_Mode_Example2_Code", "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})" },
					{ "List_Mode_Example2_Result", "5" },
					{ "List_Percentile_Category", "List.Ordering" },
					{ "List_Percentile_Example1_Code", "List.Percentile({5, 3, 1, 7, 9}, 0.25)" },
					{ "List_Percentile_Example1_Result", "3" },
					{ "List_Percentile_Example2_Code", "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])" },
					{ "List_Percentile_Example2_Result", "{2, 5, 8}" },
					{ "PercentileMode_Type_Category", "List.Ordering" },
					{ "PercentileMode_ExcelExc_Category", "List.Ordering" },
					{ "PercentileMode_ExcelInc_Category", "List.Ordering" },
					{ "PercentileMode_SqlDisc_Category", "List.Ordering" },
					{ "PercentileMode_SqlCont_Category", "List.Ordering" },
					{ "List_Product_Category", "List.Numerics" },
					{ "List_Product_Example1_Code", "List.Product({1, 2, 3, 3, 4, 5, 5})" },
					{ "List_Product_Example1_Result", "1800" },
					{ "List_StandardDeviation_Category", "List.Averages" },
					{ "List_StandardDeviation_Example1_Code", "List.StandardDeviation({1..5})" },
					{ "List_StandardDeviation_Example1_Result", "1.5811388300841898" },
					{ "List_Sum_Category", "List.Addition" },
					{ "List_Sum_Example1_Code", "List.Sum({1, 2, 3})" },
					{ "List_Sum_Example1_Result", "6" },
					{ "Number_Abs_Category", "Number.Operations" },
					{ "Number_Abs_Example1_Code", "Number.Abs(-3)" },
					{ "Number_Abs_Example1_Result", "3" },
					{ "Number_Exp_Category", "Number.Operations" },
					{ "Number_Exp_Example1_Code", "Number.Exp(3)" },
					{ "Number_Exp_Example1_Result", "20.085536923187668" },
					{ "Number_IntegerDivide_Category", "Number.Operations" },
					{ "Number_IntegerDivide_Example1_Code", "Number.IntegerDivide(6, 4)" },
					{ "Number_IntegerDivide_Example1_Result", "1" },
					{ "Number_IntegerDivide_Example2_Code", "Number.IntegerDivide(8.3, 3)" },
					{ "Number_IntegerDivide_Example2_Result", "2" },
					{ "Number_Ln_Category", "Number.Operations" },
					{ "Number_Ln_Example1_Code", "Number.Ln(15)" },
					{ "Number_Ln_Example1_Result", "2.70805020110221" },
					{ "Number_Log_Category", "Number.Operations" },
					{ "Number_Log10_Category", "Number.Operations" },
					{ "Number_Log10_Example1_Code", "Number.Log10(2)" },
					{ "Number_Log10_Example1_Result", "0.3010299956639812" },
					{ "Number_Log_Example1_Code", "Number.Log(2, 10)" },
					{ "Number_Log_Example1_Result", "0.3010299956639812" },
					{ "Number_Log_Example2_Code", "Number.Log(2)" },
					{ "Number_Log_Example2_Result", "0.69314718055994529" },
					{ "Number_Mod_Category", "Number.Operations" },
					{ "Number_Mod_Example1_Code", "Number.Mod(5, 3)" },
					{ "Number_Mod_Example1_Result", "2" },
					{ "Number_Power_Category", "Number.Operations" },
					{ "Number_Power_Example1_Code", "Number.Power(5, 3)" },
					{ "Number_Power_Example1_Result", "125" },
					{ "Number_Round_Category", "Number.Rounding" },
					{ "Number_RoundDown_Category", "Number.Rounding" },
					{ "Number_RoundDown_Example1_Code", "Number.RoundDown(1.234)" },
					{ "Number_RoundDown_Example1_Result", "1" },
					{ "Number_RoundDown_Example2_Code", "Number.RoundDown(1.999)" },
					{ "Number_RoundDown_Example2_Result", "1" },
					{ "Number_RoundDown_Example3_Code", "Number.RoundDown(1.999, 2)" },
					{ "Number_RoundDown_Example3_Result", "1.99" },
					{ "Number_RoundUp_Category", "Number.Rounding" },
					{ "Number_RoundUp_Example1_Code", "Number.RoundUp(1.234)" },
					{ "Number_RoundUp_Example1_Result", "2" },
					{ "Number_RoundUp_Example2_Code", "Number.RoundUp(1.999)" },
					{ "Number_RoundUp_Example2_Result", "2" },
					{ "Number_RoundUp_Example3_Code", "Number.RoundUp(1.234, 2)" },
					{ "Number_RoundUp_Example3_Result", "1.24" },
					{ "Number_Sign_Category", "Number.Operations" },
					{ "Number_Sign_Example1_Code", "Number.Sign(182)" },
					{ "Number_Sign_Example1_Result", "1" },
					{ "Number_Sign_Example2_Code", "Number.Sign(-182)" },
					{ "Number_Sign_Example2_Result", "-1" },
					{ "Number_Sign_Example3_Code", "Number.Sign(0)" },
					{ "Number_Sign_Example3_Result", "0" },
					{ "Number_Sqrt_Category", "Number.Operations" },
					{ "Number_Sqrt_Example1_Code", "Number.Sqrt(625)" },
					{ "Number_Sqrt_Example1_Result", "25" },
					{ "Number_Sqrt_Example2_Code", "Number.Sqrt(85)" },
					{ "Number_Sqrt_Example2_Result", "9.2195444572928871" },
					{ "Number_E_Category", "Number.Constants" },
					{ "Number_Epsilon_Category", "Number.Constants" },
					{ "Number_NaN_Category", "Number.Constants" },
					{ "Number_NegativeInfinity_Category", "Number.Constants" },
					{ "Number_PI_Category", "Number.Constants" },
					{ "Number_PositiveInfinity_Category", "Number.Constants" },
					{ "Number_IsEven_Category", "Number.Information" },
					{ "Number_IsEven_Example1_Code", "Number.IsEven(625)" },
					{ "Number_IsEven_Example1_Result", "false" },
					{ "Number_IsEven_Example2_Code", "Number.IsEven(82)" },
					{ "Number_IsEven_Example2_Result", "true" },
					{ "Number_IsNaN_Category", "Number.Information" },
					{ "Number_IsNaN_Example1_Code", "Number.IsNaN(0/0)" },
					{ "Number_IsNaN_Example1_Result", "true" },
					{ "Number_IsNaN_Example2_Code", "Number.IsNaN(1/0)" },
					{ "Number_IsNaN_Example2_Result", "false" },
					{ "Number_IsOdd_Category", "Number.Information" },
					{ "Number_IsOdd_Example1_Code", "Number.IsOdd(625)" },
					{ "Number_IsOdd_Example1_Result", "true" },
					{ "Number_IsOdd_Example2_Code", "Number.IsOdd(82)" },
					{ "Number_IsOdd_Example2_Result", "false" },
					{ "List_Numbers_Category", "List.Generators" },
					{ "List_Numbers_Example1_Code", "List.Numbers(1, 10)" },
					{ "List_Numbers_Example1_Result", "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}" },
					{ "List_Numbers_Example2_Code", "List.Numbers(1, 10, 2)" },
					{ "List_Numbers_Example2_Result", "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}" },
					{ "List_Random_Category", "List.Generators" },
					{ "List_Random_Example1_Code", "List.Random(3)" },
					{ "List_Random_Example1_Result", "{0.992332, 0.132334, 0.023592}" },
					{ "List_Random_Example2_Code", "List.Random(3, 2)" },
					{ "List_Random_Example2_Result", "{0.883002, 0.245344, 0.723212}" },
					{ "Number_Combinations_Category", "Number.Operations" },
					{ "Number_Combinations_Example1_Code", "Number.Combinations(5, 3)" },
					{ "Number_Combinations_Example1_Result", "10" },
					{ "List_Covariance_Category", "List.Numerics" },
					{ "List_Covariance_Example1_Code", "List.Covariance({1, 2, 3}, {1, 2, 3})" },
					{ "List_Covariance_Example1_Result", "0.66666666666666607" },
					{ "Number_Factorial_Category", "Number.Operations" },
					{ "Number_Factorial_Example1_Code", "Number.Factorial(10)" },
					{ "Number_Factorial_Example1_Result", "3628800" },
					{ "Number_Permutations_Category", "Number.Operations" },
					{ "Number_Permutations_Example1_Code", "Number.Permutations(5, 3)" },
					{ "Number_Permutations_Example1_Result", "60" },
					{ "Number_Random_Category", "Number.Random" },
					{ "Number_RandomBetween_Category", "Number.Random" },
					{ "Number_RandomBetween_Example1_Code", "Number.RandomBetween(1, 5)" },
					{ "Number_RandomBetween_Example1_Result", "2.546797" },
					{ "Number_Random_Example1_Code", "Number.Random()" },
					{ "Number_Random_Example1_Result", "0.919303" },
					{ "Number_Acos_Category", "Number.Trigonometry" },
					{ "Number_Asin_Category", "Number.Trigonometry" },
					{ "Number_Atan_Category", "Number.Trigonometry" },
					{ "Number_Atan2_Category", "Number.Trigonometry" },
					{ "Number_Cos_Category", "Number.Trigonometry" },
					{ "Number_Cosh_Category", "Number.Trigonometry" },
					{ "Number_Cos_Example1_Code", "Number.Cos(0)" },
					{ "Number_Cos_Example1_Result", "1" },
					{ "Number_Sin_Category", "Number.Trigonometry" },
					{ "Number_Sinh_Category", "Number.Trigonometry" },
					{ "Number_Sin_Example1_Code", "Number.Sin(0)" },
					{ "Number_Sin_Example1_Result", "0" },
					{ "Number_Tan_Category", "Number.Trigonometry" },
					{ "Number_Tanh_Category", "Number.Trigonometry" },
					{ "Number_Tan_Example1_Code", "Number.Tan(1)" },
					{ "Number_Tan_Example1_Result", "1.5574077246549023" },
					{ "Number_ToText_Category", "Number.Conversion and formatting" },
					{ "Number_ToText_Example1_Code", "Number.ToText(4)" },
					{ "Number_ToText_Example1_Result", "\"4\"" },
					{ "Number_ToText_Example2_Code", "Number.ToText(4, \"e\")" },
					{ "Number_ToText_Example2_Result", "\"4.000000e+000\"" },
					{ "Number_ToText_Example3_Code", "Number.ToText(-0.1234, \"P1\")" },
					{ "Number_ToText_Example3_Result", "\"-12.3 %\"" },
					{ "Number_FromText_Category", "Number.Conversion and formatting" },
					{ "Number_FromText_Example1_Code", "Number.FromText(\"4\")" },
					{ "Number_FromText_Example1_Result", "4" },
					{ "Number_FromText_Example2_Code", "Number.FromText(\"5.0e-10\")" },
					{ "Number_FromText_Example2_Result", "5E-10" },
					{ "Text_At_Category", "Text.Extraction" },
					{ "Text_At_Example1_Code", "Text.At(\"Hello, World\", 4)" },
					{ "Text_At_Example1_Result", "\"o\"" },
					{ "Text_Start_Category", "Text.Extraction" },
					{ "Text_End_Category", "Text.Extraction" },
					{ "Text_EndsWith_Category", "Text.Membership" },
					{ "Text_EndsWith_Example1_Code", "Text.EndsWith(\"Hello, World\", \"world\")" },
					{ "Text_EndsWith_Example1_Result", "false" },
					{ "Text_EndsWith_Example2_Code", "Text.EndsWith(\"Hello, World\", \"World\")" },
					{ "Text_EndsWith_Example2_Result", "true" },
					{ "Text_End_Example1_Code", "Text.End(\"Hello, World\", 5)" },
					{ "Text_End_Example1_Result", "\"World\"" },
					{ "Text_PositionOf_Category", "Text.Membership" },
					{ "Text_PositionOfAny_Category", "Text.Membership" },
					{ "Text_PositionOfAny_Example1_Code", "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})" },
					{ "Text_PositionOfAny_Example1_Result", "0" },
					{ "Text_PositionOfAny_Example2_Code", "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)" },
					{ "Text_PositionOfAny_Example2_Result", "{0, 7}" },
					{ "Text_PositionOf_Example1_Code", "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")" },
					{ "Text_PositionOf_Example1_Result", "7" },
					{ "Text_PositionOf_Example2_Code", "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)" },
					{ "Text_PositionOf_Example2_Result", "21" },
					{ "Text_Compare_Category", "Text" },
					{ "Text_Compare_Example1_Code", "Text.Compare(\"aB\", \"ab\")" },
					{ "Text_Compare_Example1_Result", "-1" },
					{ "Text_Compare_Example2_Code", "Text.Compare(\"aB\", \"ab\", TextComparer.IgnoreCase)" },
					{ "Text_Compare_Example2_Result", "0" },
					{ "Text_StartsWith_Category", "Text.Membership" },
					{ "Text_StartsWith_Example1_Code", "Text.StartsWith(\"Hello, World\", \"hello\")" },
					{ "Text_StartsWith_Example1_Result", "false" },
					{ "Text_StartsWith_Example2_Code", "Text.StartsWith(\"Hello, World\", \"Hello\")" },
					{ "Text_StartsWith_Example2_Result", "true" },
					{ "Text_Start_Example1_Code", "Text.Start(\"Hello, World\", 5)" },
					{ "Text_Start_Example1_Result", "\"Hello\"" },
					{ "RelativePosition_FromStart_Category", "Text.Parameter values" },
					{ "RelativePosition_FromEnd_Category", "Text.Parameter values" },
					{ "Text_AfterDelimiter_Category", "Text.Transformations" },
					{ "Text_AfterDelimiter_Example1_Code", "Text.AfterDelimiter(\"111-222-333\", \"-\")" },
					{ "Text_AfterDelimiter_Example1_Result", "\"222-333\"" },
					{ "Text_AfterDelimiter_Example2_Code", "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)" },
					{ "Text_AfterDelimiter_Example2_Result", "\"333\"" },
					{ "Text_AfterDelimiter_Example3_Code", "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})" },
					{ "Text_AfterDelimiter_Example3_Result", "\"222-333\"" },
					{ "Text_BeforeDelimiter_Category", "Text.Transformations" },
					{ "Text_BeforeDelimiter_Example1_Code", "Text.BeforeDelimiter(\"111-222-333\", \"-\")" },
					{ "Text_BeforeDelimiter_Example1_Result", "\"111\"" },
					{ "Text_BeforeDelimiter_Example2_Code", "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)" },
					{ "Text_BeforeDelimiter_Example2_Result", "\"111-222\"" },
					{ "Text_BeforeDelimiter_Example3_Code", "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})" },
					{ "Text_BeforeDelimiter_Example3_Result", "\"111\"" },
					{ "Text_BetweenDelimiters_Category", "Text.Transformations" },
					{ "Text_BetweenDelimiters_Example1_Code", "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")" },
					{ "Text_BetweenDelimiters_Example1_Result", "\"222\"" },
					{ "Text_BetweenDelimiters_Example2_Code", "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)" },
					{ "Text_BetweenDelimiters_Example2_Result", "\"444\"" },
					{ "Text_BetweenDelimiters_Example3_Code", "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})" },
					{ "Text_BetweenDelimiters_Example3_Result", "\"222) 333 (444\"" },
					{ "Text_Combine_Category", "Text.Transformations" },
					{ "Text_Combine_Example1_Code", "Text.Combine({\"Seattle\", \"WA\"})" },
					{ "Text_Combine_Example1_Result", "\"SeattleWA\"" },
					{ "Text_Combine_Example2_Code", "Text.Combine({\"Seattle\", \"WA\"}, \", \")" },
					{ "Text_Combine_Example2_Result", "\"Seattle, WA\"" },
					{ "Text_Combine_Example3_Code", "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")" },
					{ "Text_Combine_Example3_Result", "\"Seattle, WA\"" },
					{ "Text_Split_Category", "Text.Transformations" },
					{ "Text_SplitAny_Category", "Text.Transformations" },
					{ "Text_SplitAny_Example1_Code", "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")" },
					{ "Text_SplitAny_Example1_Result", "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}" },
					{ "Text_Split_Example1_Code", "Text.Split(\"Name|Address|PhoneNumber\", \"|\")" },
					{ "Text_Split_Example1_Result", "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}" },
					{ "Text_Clean_Category", "Text.Transformations" },
					{ "Text_Clean_Example1_Code", "Text.Clean(\"ABC#(lf)D\")" },
					{ "Text_Clean_Example1_Result", "\"ABCD\"" },
					{ "Text_Insert_Category", "Text.Modification" },
					{ "Text_Insert_Example1_Code", "Text.Insert(\"ABD\", 2, \"C\")" },
					{ "Text_Insert_Example1_Result", "\"ABCD\"" },
					{ "Text_Lower_Category", "Text.Transformations" },
					{ "Text_Lower_Example1_Code", "Text.Lower(\"AbCd\")" },
					{ "Text_Lower_Example1_Result", "\"abcd\"" },
					{ "Text_PadStart_Category", "Text.Transformations" },
					{ "Text_PadStart_Example1_Code", "Text.PadStart(\"Name\", 10)" },
					{ "Text_PadStart_Example1_Result", "\"      Name\"" },
					{ "Text_PadStart_Example2_Code", "Text.PadStart(\"Name\", 10, \"|\")" },
					{ "Text_PadStart_Example2_Result", "\"||||||Name\"" },
					{ "Text_PadEnd_Category", "Text.Transformations" },
					{ "Text_PadEnd_Example1_Code", "Text.PadEnd(\"Name\", 10)" },
					{ "Text_PadEnd_Example1_Result", "\"Name      \"" },
					{ "Text_PadEnd_Example2_Code", "Text.PadEnd(\"Name\", 10, \"|\")" },
					{ "Text_PadEnd_Example2_Result", "\"Name||||||\"" },
					{ "Text_Proper_Category", "Text.Transformations" },
					{ "Text_Proper_Example1_Code", "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")" },
					{ "Text_Proper_Example1_Result", "\"The Quick Brown Fox Jumps Over The Lazy Dog\"" },
					{ "Text_Remove_Category", "Text.Modification" },
					{ "Text_RemoveRange_Category", "Text.Modification" },
					{ "Text_RemoveRange_Example1_Code", "Text.RemoveRange(\"ABEFC\", 2)" },
					{ "Text_RemoveRange_Example1_Result", "\"ABFC\"" },
					{ "Text_RemoveRange_Example2_Code", "Text.RemoveRange(\"ABEFC\", 2, 2)" },
					{ "Text_RemoveRange_Example2_Result", "\"ABC\"" },
					{ "Text_Remove_Example1_Code", "Text.Remove(\"a,b;c\", {\",\",\";\"})" },
					{ "Text_Remove_Example1_Result", "\"abc\"" },
					{ "Text_Repeat_Category", "Text.Transformations" },
					{ "Text_Repeat_Example1_Code", "Text.Repeat(\"a\", 5)" },
					{ "Text_Repeat_Example1_Result", "\"aaaaa\"" },
					{ "Text_Repeat_Example2_Code", "Text.Repeat(\"helloworld.\", 3)" },
					{ "Text_Repeat_Example2_Result", "\"helloworld.helloworld.helloworld.\"" },
					{ "Text_ReplaceRange_Category", "Text.Modification" },
					{ "Text_ReplaceRange_Example1_Code", "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")" },
					{ "Text_ReplaceRange_Example1_Result", "\"ABCDEF\"" },
					{ "Text_Replace_Category", "Text.Modification" },
					{ "Text_Replace_Example1_Code", "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")" },
					{ "Text_Replace_Example1_Result", "\"a quick brown fox jumps over a lazy dog\"" },
					{ "Text_Trim_Category", "Text.Transformations" },
					{ "Text_TrimEnd_Category", "Text.Transformations" },
					{ "Text_TrimEnd_Example1_Code", "Text.TrimEnd(\"     a b c d    \")" },
					{ "Text_TrimEnd_Example1_Result", "\"     a b c d\"" },
					{ "Text_TrimStart_Category", "Text.Transformations" },
					{ "Text_TrimStart_Example1_Code", "Text.TrimStart(\"   a b c d    \")" },
					{ "Text_TrimStart_Example1_Result", "\"a b c d    \"" },
					{ "Text_Trim_Example1_Code", "Text.Trim(\"     a b c d    \")" },
					{ "Text_Trim_Example1_Result", "\"a b c d\"" },
					{ "Text_Upper_Category", "Text.Transformations" },
					{ "Text_Upper_Example1_Code", "Text.Upper(\"aBcD\")" },
					{ "Text_Upper_Example1_Result", "\"ABCD\"" },
					{ "Character_FromNumber_Category", "Text.Conversions from and to text" },
					{ "Character_FromNumber_Example1_Code", "Character.FromNumber(9)" },
					{ "Character_FromNumber_Example1_Result", "\"#(tab)\"" },
					{ "Character_FromNumber_Example2_Code", "Character.FromNumber(Character.ToNumber(\"A\"))" },
					{ "Character_FromNumber_Example2_Result", "\"A\"" },
					{ "Character_FromNumber_Example3_Code", "Character.FromNumber(0x1F600)" },
					{ "Character_FromNumber_Example3_Result", "\"#(0001F600)\"" },
					{ "Sql_Database_Category", "Accessing data" },
					{ "Sql_Databases_Category", "Accessing data" },
					{ "File_Contents_Category", "Accessing data" },
					{ "Folder_Contents_Category", "Accessing data" },
					{ "Table_Column_Category", "Table.Column operations" },
					{ "Record_Field_Category", "Record.Selection" },
					{ "Record_FieldOrDefault_Category", "Record.Selection" },
					{ "Record_FieldOrDefault_Example1_Code", "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")" },
					{ "Record_FieldOrDefault_Example1_Result", "null" },
					{ "Record_FieldOrDefault_Example2_Code", "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")" },
					{ "Record_FieldOrDefault_Example2_Result", "\"123-4567\"" },
					{ "Record_FieldValues_Category", "Record.Selection" },
					{ "Record_FieldValues_Example1_Code", "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])" },
					{ "Record_FieldValues_Example1_Result", "{1, \"Bob\", \"123-4567\"}" },
					{ "List_FirstN_Category", "List.Selection" },
					{ "List_FirstN_Example1_Code", "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)" },
					{ "List_FirstN_Example1_Result", "{3, 4, 5}" },
					{ "List_First_Category", "List.Selection" },
					{ "List_First_Example1_Code", "List.First({1, 2, 3})" },
					{ "List_First_Example1_Result", "1" },
					{ "List_First_Example2_Code", "List.First({}, -1)" },
					{ "List_First_Example2_Result", "-1" },
					{ "List_LastN_Category", "List.Selection" },
					{ "List_LastN_Example1_Code", "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)" },
					{ "List_LastN_Example1_Result", "{2}" },
					{ "List_LastN_Example2_Code", "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)" },
					{ "List_LastN_Example2_Result", "{7, 8, 2}" },
					{ "List_Last_Category", "List.Selection" },
					{ "List_Last_Example1_Code", "List.Last({1, 2, 3})" },
					{ "List_Last_Example1_Result", "3" },
					{ "List_Last_Example2_Code", "List.Last({}, -1)" },
					{ "List_Last_Example2_Result", "-1" },
					{ "List_Range_Category", "List.Selection" },
					{ "List_Range_Example1_Code", "List.Range({1..10}, 6)" },
					{ "List_Range_Example1_Result", "{7, 8, 9, 10}" },
					{ "List_Range_Example2_Code", "List.Range({1..10}, 6, 2)" },
					{ "List_Range_Example2_Result", "{7, 8}" },
					{ "List_Transform_Category", "List.Transformation functions" },
					{ "List_Transform_Example1_Code", "List.Transform({1, 2}, each _ + 1)" },
					{ "List_Transform_Example1_Result", "{2, 3}" },
					{ "List_TransformMany_Category", "List.Transformation functions" },
					{ "List_TransformMany_Example1_Code", "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)" },
					{ "List_TransformMany_Example1_Result", "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}" },
					{ "List_Single_Category", "List.Selection" },
					{ "List_SingleOrDefault_Category", "List.Selection" },
					{ "List_SingleOrDefault_Example1_Code", "List.SingleOrDefault({1})" },
					{ "List_SingleOrDefault_Example1_Result", "1" },
					{ "List_SingleOrDefault_Example2_Code", "List.SingleOrDefault({})" },
					{ "List_SingleOrDefault_Example2_Result", "null" },
					{ "List_SingleOrDefault_Example3_Code", "List.SingleOrDefault({}, -1)" },
					{ "List_SingleOrDefault_Example3_Result", "-1" },
					{ "List_Single_Example1_Code", "List.Single({1})" },
					{ "List_Single_Example1_Result", "1" },
					{ "List_Single_Example2_Code", "List.Single({1, 2, 3})" },
					{ "List_Single_Example2_Result", "[Expression.Error] There were too many elements in the enumeration to complete the operation." },
					{ "List_Count_Category", "List.Information" },
					{ "List_Count_Example1_Code", "List.Count({1, 2, 3})" },
					{ "List_Count_Example1_Result", "3" },
					{ "List_Difference_Category", "List.Set operations" },
					{ "List_Difference_Example1_Code", "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})" },
					{ "List_Difference_Example1_Result", "{1, 2}" },
					{ "List_Difference_Example2_Code", "List.Difference({1, 2}, {1, 2, 3})" },
					{ "List_Difference_Example2_Result", "{}" },
					{ "List_Positions_Category", "List.Selection" },
					{ "List_Positions_Example1_Code", "List.Positions({1, 2, 3, 4, null, 5})" },
					{ "List_Positions_Example1_Result", "{0, 1, 2, 3, 4, 5}" },
					{ "List_Max_Category", "List.Ordering" },
					{ "List_Max_Example1_Code", "List.Max({1, 4, 7, 3, -2, 5}, 1)" },
					{ "List_Max_Example1_Result", "7" },
					{ "List_Max_Example2_Code", "List.Max({}, -1)" },
					{ "List_Max_Example2_Result", "-1" },
					{ "List_Min_Category", "List.Ordering" },
					{ "List_Min_Example1_Code", "List.Min({1, 4, 7, 3, -2, 5})" },
					{ "List_Min_Example1_Result", "-2" },
					{ "List_Min_Example2_Code", "List.Min({}, -1)" },
					{ "List_Min_Example2_Result", "-1" },
					{ "Record_FieldCount_Category", "Record.Information" },
					{ "Record_FieldCount_Example1_Code", "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])" },
					{ "Record_FieldCount_Example1_Result", "2" },
					{ "Record_FieldNames_Category", "Record.Selection" },
					{ "Record_FieldNames_Example1_Code", "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])" },
					{ "Record_FieldNames_Example1_Result", "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}" },
					{ "Record_Field_Example1_Code", "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")" },
					{ "Record_Field_Example1_Result", "1" },
					{ "Record_HasFields_Category", "Record.Information" },
					{ "Record_HasFields_Example1_Code", "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")" },
					{ "Record_HasFields_Example1_Result", "true" },
					{ "Record_HasFields_Example2_Code", "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})" },
					{ "Record_HasFields_Example2_Result", "false" },
					{ "List_Combine_Category", "List.Transformation functions" },
					{ "List_Combine_Example1_Code", "List.Combine({{1, 2}, {3, 4}})" },
					{ "List_Combine_Example1_Result", "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}" },
					{ "List_Combine_Example2_Code", "List.Combine({{1, 2}, {3, {4, 5}}})" },
					{ "List_Combine_Example2_Result", "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}" },
					{ "List_Zip_Category", "List.Transformation functions" },
					{ "List_Zip_Example1_Code", "List.Zip({{1, 2}, {3, 4}})" },
					{ "List_Zip_Example1_Result", "{\r\n    {1, 3},\r\n    {2, 4}\r\n}" },
					{ "List_Zip_Example2_Code", "List.Zip({{1, 2}, {3}})" },
					{ "List_Zip_Example2_Result", "{\r\n    {1, 3},\r\n    {2, null}\r\n}" },
					{ "Table_Join_Category", "Table.Transformation" },
					{ "Table_Join_Example1_Code", "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)" },
					{ "Table_Join_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})" },
					{ "Table_Join_Example2_Code", "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )" },
					{ "Table_Join_Example2_Result", "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})" },
					{ "JoinKind_Inner_Category", "Table.Parameter values" },
					{ "JoinKind_LeftOuter_Category", "Table.Parameter values" },
					{ "JoinKind_RightOuter_Category", "Table.Parameter values" },
					{ "JoinKind_FullOuter_Category", "Table.Parameter values" },
					{ "JoinKind_LeftAnti_Category", "Table.Parameter values" },
					{ "JoinKind_RightAnti_Category", "Table.Parameter values" },
					{ "JoinKind_LeftSemi_Category", "Table.Parameter values" },
					{ "JoinKind_RightSemi_Category", "Table.Parameter values" },
					{ "JoinAlgorithm_Dynamic_Category", "Table.Parameter values" },
					{ "JoinAlgorithm_PairwiseHash_Category", "Table.Parameter values" },
					{ "JoinAlgorithm_SortMerge_Category", "Table.Parameter values" },
					{ "JoinAlgorithm_LeftHash_Category", "Table.Parameter values" },
					{ "JoinAlgorithm_RightHash_Category", "Table.Parameter values" },
					{ "JoinAlgorithm_LeftIndex_Category", "Table.Parameter values" },
					{ "JoinAlgorithm_RightIndex_Category", "Table.Parameter values" },
					{ "GroupKind_Global_Category", "Table.Parameter values" },
					{ "GroupKind_Local_Category", "Table.Parameter values" },
					{ "Record_AddField_Category", "Record.Transformations" },
					{ "Record_AddField_Example1_Code", "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")" },
					{ "Record_AddField_Example1_Result", "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]" },
					{ "List_Repeat_Category", "List.Transformation functions" },
					{ "List_Repeat_Example1_Code", "List.Repeat({1, 2}, 3)" },
					{ "List_Repeat_Example1_Result", "{1, 2, 1, 2, 1, 2}" },
					{ "List_Contains_Category", "List.Membership functions" },
					{ "List_ContainsAll_Category", "List.Membership functions" },
					{ "List_ContainsAll_Example1_Code", "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})" },
					{ "List_ContainsAll_Example1_Result", "true" },
					{ "List_ContainsAll_Example2_Code", "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})" },
					{ "List_ContainsAll_Example2_Result", "false" },
					{ "List_ContainsAny_Category", "List.Membership functions" },
					{ "List_ContainsAny_Example1_Code", "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})" },
					{ "List_ContainsAny_Example1_Result", "true" },
					{ "List_ContainsAny_Example2_Code", "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})" },
					{ "List_ContainsAny_Example2_Result", "false" },
					{ "List_Contains_Example1_Code", "List.Contains({1, 2, 3, 4, 5}, 3)" },
					{ "List_Contains_Example1_Result", "true" },
					{ "List_Contains_Example2_Code", "List.Contains({1, 2, 3, 4, 5}, 6)" },
					{ "List_Contains_Example2_Result", "false" },
					{ "List_ReplaceValue_Category", "List.Transformation functions" },
					{ "List_ReplaceValue_Example1_Code", "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)" },
					{ "List_ReplaceValue_Example1_Result", "{\"A\", \"B\", \"A\", \"A\"}" },
					{ "List_PositionOf_Category", "List.Membership functions" },
					{ "List_PositionOfAny_Category", "List.Membership functions" },
					{ "List_PositionOfAny_Example1_Code", "List.PositionOfAny({1, 2, 3}, {2, 3})" },
					{ "List_PositionOfAny_Example1_Result", "1" },
					{ "List_PositionOf_Example1_Code", "List.PositionOf({1, 2, 3}, 3)" },
					{ "List_PositionOf_Example1_Result", "2" },
					{ "List_FindText_Category", "List.Selection" },
					{ "List_FindText_Example1_Code", "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")" },
					{ "List_FindText_Example1_Result", "{\"a\", \"ab\"}" },
					{ "List_Distinct_Category", "List.Selection" },
					{ "List_Distinct_Example1_Code", "List.Distinct({1, 1, 2, 3, 3, 3})" },
					{ "List_Distinct_Example1_Result", "{1, 2, 3}" },
					{ "List_Index_Category", "List" },
					{ "List_Index_Example1_Code", "List.Index({[A = 1, B = 2], [A = 2, B = 3], [A = 3, B = 4]}, each [A])" },
					{ "List_Index_Example1_Result", "{\r\n    [\r\n        A = 1,\r\n        B = 2\r\n    ],\r\n    [\r\n        A = 2,\r\n        B = 3\r\n    ],\r\n    [\r\n        A = 3,\r\n        B = 4\r\n    ]\r\n}" },
					{ "Order_Ascending_Category", "List.Parameter values" },
					{ "Order_Descending_Category", "List.Parameter values" },
					{ "List_Skip_Category", "List.Selection" },
					{ "List_Skip_Example1_Code", "List.Skip({1, 2, 3, 4, 5}, 3)" },
					{ "List_Skip_Example1_Result", "{4, 5}" },
					{ "List_Skip_Example2_Code", "List.Skip({5, 4, 2, 6, 1}, each _ > 3)" },
					{ "List_Skip_Example2_Result", "{2, 6, 1}" },
					{ "List_RemoveFirstN_Category", "List.Transformation functions" },
					{ "List_RemoveFirstN_Example1_Code", "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)" },
					{ "List_RemoveFirstN_Example1_Result", "{4, 5}" },
					{ "List_RemoveFirstN_Example2_Code", "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)" },
					{ "List_RemoveFirstN_Example2_Result", "{2, 6, 1}" },
					{ "Table_ColumnsOfType_Category", "Table.Column operations" },
					{ "Table_ColumnsOfType_Example1_Code", "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)" },
					{ "Table_ColumnsOfType_Example1_Result", "{\"a\"}" },
					{ "List_RemoveLastN_Category", "List.Transformation functions" },
					{ "List_RemoveLastN_Example1_Code", "List.RemoveLastN({1, 2, 3, 4, 5}, 3)" },
					{ "List_RemoveLastN_Example1_Result", "{1, 2}" },
					{ "List_RemoveLastN_Example2_Code", "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)" },
					{ "List_RemoveLastN_Example2_Result", "{5, 4, 2}" },
					{ "List_Alternate_Category", "List.Selection" },
					{ "List_Alternate_Example1_Code", "List.Alternate({1..10}, 1)" },
					{ "List_Alternate_Example1_Result", "{2, 3, 4, 5, 6, 7, 8, 9, 10}" },
					{ "List_Alternate_Example2_Code", "List.Alternate({1..10}, 1, 1)" },
					{ "List_Alternate_Example2_Result", "{2, 4, 6, 8, 10}" },
					{ "List_Alternate_Example3_Code", "List.Alternate({1..10}, 1, 1, 1)" },
					{ "List_Alternate_Example3_Result", "{1, 3, 5, 7, 9}" },
					{ "List_Alternate_Example4_Code", "List.Alternate({1..10}, 1, 2, 1)" },
					{ "List_Alternate_Example4_Result", "{1, 3, 4, 6, 7, 9, 10}" },
					{ "List_Select_Category", "List.Selection" },
					{ "List_Select_Example1_Code", "List.Select({1, -3, 4, 9, -2}, each _ > 0)" },
					{ "List_Select_Example1_Result", "{1, 4, 9}" },
					{ "List_Accumulate_Category", "List.Transformation functions" },
					{ "List_Accumulate_Example1_Code", "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)" },
					{ "List_Accumulate_Example1_Result", "15" },
					{ "Table_AddFuzzyClusterColumn_Category", "Table.Transformation" },
					{ "Table_AddFuzzyClusterColumn_Example1_Code", "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)" },
					{ "Table_AddFuzzyClusterColumn_Example1_Result", "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)" },
					{ "Table_FuzzyGroup_Category", "Table.Transformation" },
					{ "Table_FuzzyGroup_Example1_Code", "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)" },
					{ "Table_FuzzyGroup_Example1_Result", "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})" },
					{ "Table_Group_Category", "Table.Transformation" },
					{ "Table_Group_Example1_Code", "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)" },
					{ "Table_Group_Example1_Result", "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)" },
					{ "List_InsertRange_Category", "List.Selection" },
					{ "List_InsertRange_Example1_Code", "List.InsertRange({1, 2, 5}, 2, {3, 4})" },
					{ "List_InsertRange_Example1_Result", "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}" },
					{ "List_InsertRange_Example2_Code", "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})" },
					{ "List_InsertRange_Example2_Result", "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}" },
					{ "List_RemoveRange_Category", "List.Transformation functions" },
					{ "List_RemoveRange_Example1_Code", "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)" },
					{ "List_RemoveRange_Example1_Result", "{1, 2, 3, 4, 5}" },
					{ "List_ReplaceRange_Category", "List.Transformation functions" },
					{ "List_ReplaceRange_Example1_Code", "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})" },
					{ "List_ReplaceRange_Example1_Result", "{1, 2, 3, 4, 5}" },
					{ "List_Reverse_Category", "List.Transformation functions" },
					{ "List_Reverse_Example1_Code", "List.Reverse({1..10})" },
					{ "List_Reverse_Example1_Result", "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}" },
					{ "List_Buffer_Category", "List.Selection" },
					{ "List_Buffer_Example1_Code", "List.Buffer({1..10})" },
					{ "List_Buffer_Example1_Result", "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}" },
					{ "TextEncoding_Ascii_Category", "Text.Parameter values" },
					{ "Text_From_Category", "Text.Conversions from and to text" },
					{ "Text_FromBinary_Category", "Text.Conversions from and to text" },
					{ "Text_From_Example1_Code", "Text.From(3)" },
					{ "Text_From_Example1_Result", "\"3\"" },
					{ "Text_InferNumberType_Category", "Text" },
					{ "Text_ToBinary_Category", "Text.Conversions from and to text" },
					{ "TextEncoding_Utf16_Category", "Text.Parameter values" },
					{ "TextEncoding_Utf8_Category", "Text.Parameter values" },
					{ "Number_BitwiseAnd_Category", "Number.Bytes" },
					{ "Number_BitwiseNot_Category", "Number.Bytes" },
					{ "Number_BitwiseOr_Category", "Number.Bytes" },
					{ "Number_BitwiseShiftLeft_Category", "Number.Bytes" },
					{ "Number_BitwiseShiftRight_Category", "Number.Bytes" },
					{ "Number_BitwiseXor_Category", "Number.Bytes" },
					{ "Binary_End_Category", "Binary" },
					{ "Binary_End_Example1_Code", "Binary.End(Text.ToBinary(\"Hello world!\"))" },
					{ "Binary_End_Example1_Result", "Binary.FromText(\"\", BinaryEncoding.Base64)" },
					{ "Binary_InferContentType_Category", "Binary" },
					{ "Binary_FromText_Category", "Binary" },
					{ "Binary_FromText_Example1_Code", "Binary.FromText(\"1011\")" },
					{ "Binary_FromText_Example1_Result", "Binary.FromText(\"1011\", BinaryEncoding.Base64)" },
					{ "Binary_FromText_Example2_Code", "Binary.FromText(\"1011\", BinaryEncoding.Hex)" },
					{ "Binary_FromText_Example2_Result", "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)" },
					{ "Binary_ToText_Category", "Binary" },
					{ "BinaryEncoding_Base64_Category", "Binary" },
					{ "BinaryEncoding_Hex_Category", "Binary" },
					{ "Access_Database_Category", "Accessing data" },
					{ "Mashup_Document_Category", "Accessing data" },
					{ "Excel_Workbook_Category", "Accessing data" },
					{ "Excel_Workbook_Example1_Code", "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]" },
					{ "Excel_Workbook_Example1_Result", "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})" },
					{ "Json_Document_Category", "Accessing data" },
					{ "Json_FromValue_Category", "Text.Conversions from and to text" },
					{ "Json_FromValue_Example1_Code", "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))" },
					{ "Json_FromValue_Example1_Result", "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\"" },
					{ "Xml_Document_Category", "Accessing data" },
					{ "Text_NewGuid_Category", "Text.Conversions from and to text" },
					{ "Web_Contents_Category", "Accessing data" },
					{ "Web_Contents_Example1_Code", "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )" },
					{ "Web_Contents_Example1_Result", "binary" },
					{ "Web_Contents_Example2_Code", "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse" },
					{ "Web_Contents_Example2_Result", "table" },
					{ "Web_Contents_Example3_Code", "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])" },
					{ "Web_Contents_Example3_Result", "binary" },
					{ "Web_Headers_Category", "Accessing data" },
					{ "Web_Headers_Example1_Code", "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )" },
					{ "Web_Headers_Example1_Result", "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])" },
					{ "Http_Get_Category", "Accessing data" },
					{ "Http_Post_Category", "Accessing data" },
					{ "OData_Feed_Category", "Accessing data" },
					{ "OpenApi_Document_Category", "Accessing data" },
					{ "Web_Service_Category", "Accessing data." },
					{ "SharePoint_Contents_Category", "Accessing data" },
					{ "SharePoint_Tables_Category", "Accessing data" },
					{ "Value_Equals_Category", "Values" },
					{ "Value_Add_Category", "Values.Arithmetic operations" },
					{ "Value_Subtract_Category", "Values.Arithmetic operations" },
					{ "Value_Divide_Category", "Values.Arithmetic operations" },
					{ "Value_Multiply_Category", "Values.Arithmetic operations" },
					{ "Precision_Double_Category", "Values.Parameter values" },
					{ "Precision_Decimal_Category", "Values.Parameter values" },
					{ "Value_RemoveMetadata_Category", "Metadata" },
					{ "Value_ReplaceMetadata_Category", "Metadata" },
					{ "Value_Metadata_Category", "Metadata" },
					{ "Type_ForNullable_Category", "Type" },
					{ "Type_Is_Category", "Type" },
					{ "Type_Is_Example1_Code", "Type.Is(type number, type any)" },
					{ "Type_Is_Example1_Result", "true" },
					{ "Type_Is_Example2_Code", "Type.Is(type any, type number)" },
					{ "Type_Is_Example2_Result", "false" },
					{ "Value_Compare_Category", "Values" },
					{ "Value_Hash_Category", "Values" },
					{ "Value_Type_Category", "Values" },
					{ "Value_ReplaceType_Category", "Values.Types" },
					{ "Value_ReplaceType_Example1_Code", "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]" },
					{ "Value_ReplaceType_Example1_Result", "type number" },
					{ "Value_As_Category", "Values.Types" },
					{ "Value_As_Example1_Code", "Value.As(123, Number.Type)" },
					{ "Value_As_Example1_Result", "123" },
					{ "Value_As_Example2_Code", "Value.As(\"abc\", type number)" },
					{ "Value_As_Example2_Result", "[Expression.Error] We cannot convert the value \"abc\" to type Number." },
					{ "Value_Is_Category", "Values.Types" },
					{ "Value_Is_Example1_Code", "Value.Is(123, Number.Type) = (123 is number)" },
					{ "Value_Is_Example1_Result", "true" },
					{ "Value_Firewall_Category", "Values.Implementation" },
					{ "Variable_Value_Category", "Values.Implementation" },
					{ "Embedded_Value_Category", "Values.Implementation" },
					{ "Progress_DataSourceProgress_Category", "Values.Implementation" },
					{ "Excel_ShapeTable_Category", "Values.Implementation" },
					{ "List_Sort_Category", "List.Ordering" },
					{ "List_Sort_Example1_Code", "List.Sort({2, 3, 1})" },
					{ "List_Sort_Example1_Result", "{1, 2, 3}" },
					{ "List_Sort_Example2_Code", "List.Sort({2, 3, 1}, Order.Descending)" },
					{ "List_Sort_Example2_Result", "{3, 2, 1}" },
					{ "List_Sort_Example3_Code", "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))" },
					{ "List_Sort_Example3_Result", "{3, 2, 1}" },
					{ "List_Split_Category", "List.Transformation functions" },
					{ "Character_ToNumber_Category", "Text.Conversions from and to text" },
					{ "Character_ToNumber_Example1_Code", "Character.ToNumber(\"#(tab)\")" },
					{ "Character_ToNumber_Example1_Result", "9" },
					{ "Character_ToNumber_Example2_Code", "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")" },
					{ "Character_ToNumber_Example2_Result", "\"1F600\"" },
					{ "Logical_ToText_Category", "Logical" },
					{ "Logical_ToText_Example1_Code", "Logical.ToText(true)" },
					{ "Logical_ToText_Example1_Result", "\"true\"" },
					{ "Table_FromColumns_Category", "Table.Table construction" },
					{ "Table_FromColumns_Example1_Code", "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})" },
					{ "Table_FromColumns_Example1_Result", "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})" },
					{ "Table_FromColumns_Example2_Code", "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)" },
					{ "Table_FromColumns_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})" },
					{ "Table_ToColumns_Category", "Table.Conversions" },
					{ "Table_ToColumns_Example1_Code", "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)" },
					{ "Table_ToColumns_Example1_Result", "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}" },
					{ "Text_Length_Category", "Text.Information" },
					{ "Text_Length_Example1_Code", "Text.Length(\"Hello World\")" },
					{ "Text_Length_Example1_Result", "11" },
					{ "Date_AddMonths_Category", "Date" },
					{ "Date_AddMonths_Example1_Code", "Date.AddMonths(#date(2011, 5, 14), 5)" },
					{ "Date_AddMonths_Example1_Result", "#date(2011, 10, 14)" },
					{ "Date_AddMonths_Example2_Code", "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)" },
					{ "Date_AddMonths_Example2_Result", "#datetime(2012, 11, 14, 8, 15, 22)" },
					{ "Date_AddYears_Category", "Date" },
					{ "Date_AddYears_Example1_Code", "Date.AddYears(#date(2011, 5, 14), 4)" },
					{ "Date_AddYears_Example1_Result", "#date(2015, 5, 14)" },
					{ "Date_AddYears_Example2_Code", "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)" },
					{ "Date_AddYears_Example2_Result", "#datetime(2021, 5, 14, 8, 15, 22)" },
					{ "DateTime_IsInPreviousSecond_Category", "DateTime" },
					{ "DateTime_IsInPreviousSecond_Example1_Code", "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))" },
					{ "DateTime_IsInPreviousSecond_Example1_Result", "true" },
					{ "DateTime_IsInPreviousNSeconds_Category", "DateTime" },
					{ "DateTime_IsInPreviousNSeconds_Example1_Code", "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)" },
					{ "DateTime_IsInPreviousNSeconds_Example1_Result", "true" },
					{ "DateTime_IsInCurrentSecond_Category", "DateTime" },
					{ "DateTime_IsInCurrentSecond_Example1_Code", "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())" },
					{ "DateTime_IsInCurrentSecond_Example1_Result", "true" },
					{ "DateTime_IsInNextSecond_Category", "DateTime" },
					{ "DateTime_IsInNextSecond_Example1_Code", "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))" },
					{ "DateTime_IsInNextSecond_Example1_Result", "true" },
					{ "DateTime_IsInNextNSeconds_Category", "DateTime" },
					{ "DateTime_IsInNextNSeconds_Example1_Code", "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)" },
					{ "DateTime_IsInNextNSeconds_Example1_Result", "true" },
					{ "DateTime_IsInPreviousMinute_Category", "DateTime" },
					{ "DateTime_IsInPreviousMinute_Example1_Code", "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))" },
					{ "DateTime_IsInPreviousMinute_Example1_Result", "true" },
					{ "DateTime_IsInPreviousNMinutes_Category", "DateTime" },
					{ "DateTime_IsInPreviousNMinutes_Example1_Code", "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)" },
					{ "DateTime_IsInPreviousNMinutes_Example1_Result", "true" },
					{ "DateTime_IsInCurrentMinute_Category", "DateTime" },
					{ "DateTime_IsInCurrentMinute_Example1_Code", "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())" },
					{ "DateTime_IsInCurrentMinute_Example1_Result", "true" },
					{ "DateTime_IsInNextMinute_Category", "DateTime" },
					{ "DateTime_IsInNextMinute_Example1_Code", "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))" },
					{ "DateTime_IsInNextMinute_Example1_Result", "true" },
					{ "DateTime_IsInNextNMinutes_Category", "DateTime" },
					{ "DateTime_IsInNextNMinutes_Example1_Code", "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)" },
					{ "DateTime_IsInNextNMinutes_Example1_Result", "true" },
					{ "DateTime_IsInPreviousHour_Category", "DateTime" },
					{ "DateTime_IsInPreviousHour_Example1_Code", "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))" },
					{ "DateTime_IsInPreviousHour_Example1_Result", "true" },
					{ "DateTime_IsInPreviousNHours_Category", "DateTime" },
					{ "DateTime_IsInPreviousNHours_Example1_Code", "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)" },
					{ "DateTime_IsInPreviousNHours_Example1_Result", "true" },
					{ "DateTime_IsInCurrentHour_Category", "DateTime" },
					{ "DateTime_IsInCurrentHour_Example1_Code", "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())" },
					{ "DateTime_IsInCurrentHour_Example1_Result", "true" },
					{ "DateTime_IsInNextHour_Category", "DateTime" },
					{ "DateTime_IsInNextHour_Example1_Code", "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))" },
					{ "DateTime_IsInNextHour_Example1_Result", "true" },
					{ "DateTime_IsInNextNHours_Category", "DateTime" },
					{ "DateTime_IsInNextNHours_Example1_Code", "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)" },
					{ "DateTime_IsInNextNHours_Example1_Result", "true" },
					{ "Date_IsInPreviousDay_Category", "Date" },
					{ "Date_IsInPreviousDay_Example1_Code", "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))" },
					{ "Date_IsInPreviousDay_Example1_Result", "true" },
					{ "Date_IsInPreviousNDays_Category", "Date" },
					{ "Date_IsInPreviousNDays_Example1_Code", "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)" },
					{ "Date_IsInPreviousNDays_Example1_Result", "true" },
					{ "Date_IsInCurrentDay_Category", "Date" },
					{ "Date_IsInCurrentDay_Example1_Code", "Date.IsInCurrentDay(DateTime.FixedLocalNow())" },
					{ "Date_IsInCurrentDay_Example1_Result", "true" },
					{ "Date_IsInNextDay_Category", "Date" },
					{ "Date_IsInNextDay_Example1_Code", "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))" },
					{ "Date_IsInNextDay_Example1_Result", "true" },
					{ "Date_IsInNextNDays_Category", "Date" },
					{ "Date_IsInNextNDays_Example1_Code", "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)" },
					{ "Date_IsInNextNDays_Example1_Result", "true" },
					{ "Date_IsInPreviousWeek_Category", "Date" },
					{ "Date_IsInPreviousWeek_Example1_Code", "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))" },
					{ "Date_IsInPreviousWeek_Example1_Result", "true" },
					{ "Date_IsInPreviousNWeeks_Category", "Date" },
					{ "Date_IsInPreviousNWeeks_Example1_Code", "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)" },
					{ "Date_IsInPreviousNWeeks_Example1_Result", "true" },
					{ "Date_IsInCurrentWeek_Category", "Date" },
					{ "Date_IsInCurrentWeek_Example1_Code", "Date.IsInCurrentWeek(DateTime.FixedLocalNow())" },
					{ "Date_IsInCurrentWeek_Example1_Result", "true" },
					{ "Date_IsInNextWeek_Category", "Date" },
					{ "Date_IsInNextWeek_Example1_Code", "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))" },
					{ "Date_IsInNextWeek_Example1_Result", "true" },
					{ "Date_IsInNextNWeeks_Category", "Date" },
					{ "Date_IsInNextNWeeks_Example1_Code", "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)" },
					{ "Date_IsInNextNWeeks_Example1_Result", "true" },
					{ "Date_IsInPreviousMonth_Category", "Date" },
					{ "Date_IsInPreviousMonth_Example1_Code", "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))" },
					{ "Date_IsInPreviousMonth_Example1_Result", "true" },
					{ "Date_IsInPreviousNMonths_Category", "Date" },
					{ "Date_IsInPreviousNMonths_Example1_Code", "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)" },
					{ "Date_IsInPreviousNMonths_Example1_Result", "true" },
					{ "Date_IsInCurrentMonth_Category", "Date" },
					{ "Date_IsInCurrentMonth_Example1_Code", "Date.IsInCurrentMonth(DateTime.FixedLocalNow())" },
					{ "Date_IsInCurrentMonth_Example1_Result", "true" },
					{ "Date_IsInNextMonth_Category", "Date" },
					{ "Date_IsInNextMonth_Example1_Code", "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))" },
					{ "Date_IsInNextMonth_Example1_Result", "true" },
					{ "Date_IsInNextNMonths_Category", "Date" },
					{ "Date_IsInNextNMonths_Example1_Code", "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)" },
					{ "Date_IsInNextNMonths_Example1_Result", "true" },
					{ "Date_IsInPreviousQuarter_Category", "Date" },
					{ "Date_IsInPreviousQuarter_Example1_Code", "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))" },
					{ "Date_IsInPreviousQuarter_Example1_Result", "true" },
					{ "Date_IsInPreviousNQuarters_Category", "Date" },
					{ "Date_IsInPreviousNQuarters_Example1_Code", "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)" },
					{ "Date_IsInPreviousNQuarters_Example1_Result", "true" },
					{ "Date_IsInCurrentQuarter_Category", "Date" },
					{ "Date_IsInCurrentQuarter_Example1_Code", "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())" },
					{ "Date_IsInCurrentQuarter_Example1_Result", "true" },
					{ "Date_IsInNextQuarter_Category", "Date" },
					{ "Date_IsInNextQuarter_Example1_Code", "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))" },
					{ "Date_IsInNextQuarter_Example1_Result", "true" },
					{ "Date_IsInNextNQuarters_Category", "Date" },
					{ "Date_IsInNextNQuarters_Example1_Code", "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)" },
					{ "Date_IsInNextNQuarters_Example1_Result", "true" },
					{ "Date_IsInPreviousYear_Category", "Date" },
					{ "Date_IsInPreviousYear_Example1_Code", "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))" },
					{ "Date_IsInPreviousYear_Example1_Result", "true" },
					{ "Date_IsInPreviousNYears_Category", "Date" },
					{ "Date_IsInPreviousNYears_Example1_Code", "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)" },
					{ "Date_IsInPreviousNYears_Example1_Result", "true" },
					{ "Date_IsInCurrentYear_Category", "Date" },
					{ "Date_IsInCurrentYear_Example1_Code", "Date.IsInCurrentYear(DateTime.FixedLocalNow())" },
					{ "Date_IsInCurrentYear_Example1_Result", "true" },
					{ "Date_IsInNextYear_Category", "Date" },
					{ "Date_IsInNextYear_Example1_Code", "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))" },
					{ "Date_IsInNextYear_Example1_Result", "true" },
					{ "Date_IsInNextNYears_Category", "Date" },
					{ "Date_IsInNextNYears_Example1_Code", "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)" },
					{ "Date_IsInNextNYears_Example1_Result", "true" },
					{ "Date_IsInYearToDate_Category", "Date" },
					{ "Date_IsInYearToDate_Example1_Code", "Date.IsInYearToDate(DateTime.FixedLocalNow())" },
					{ "Date_IsInYearToDate_Example1_Result", "true" },
					{ "Date_AddDays_Category", "Date" },
					{ "Date_AddDays_Example1_Code", "Date.AddDays(#date(2011, 5, 14), 5)" },
					{ "Date_AddDays_Example1_Result", "#date(2011, 5, 19)" },
					{ "Date_AddWeeks_Category", "Date" },
					{ "Date_AddWeeks_Example1_Code", "Date.AddWeeks(#date(2011, 5, 14), 2)" },
					{ "Date_AddWeeks_Example1_Result", "#date(2011, 5, 28)" },
					{ "Date_AddQuarters_Category", "Date" },
					{ "Date_AddQuarters_Example1_Code", "Date.AddQuarters(#date(2011, 5, 14), 1)" },
					{ "Date_AddQuarters_Example1_Result", "#date(2011, 8, 14)" },
					{ "Date_StartOfQuarter_Category", "Date" },
					{ "Date_StartOfQuarter_Example1_Code", "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))" },
					{ "Date_StartOfQuarter_Example1_Result", "#datetime(2011, 10, 1, 0, 0, 0)" },
					{ "Date_EndOfQuarter_Category", "Date" },
					{ "Date_EndOfQuarter_Example1_Code", "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))" },
					{ "Date_EndOfQuarter_Example1_Result", "#datetime(2011, 12, 31, 23, 59, 59.9999999)" },
					{ "Date_Day_Category", "Date" },
					{ "Date_Day_Example1_Code", "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))" },
					{ "Date_Day_Example1_Result", "14" },
					{ "Date_EndOfDay_Category", "Date" },
					{ "Date_EndOfDay_Example1_Code", "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))" },
					{ "Date_EndOfDay_Example1_Result", "#datetime(2011, 5, 14, 23, 59, 59.9999999)" },
					{ "Date_EndOfDay_Example2_Code", "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))" },
					{ "Date_EndOfDay_Example2_Result", "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)" },
					{ "Time_EndOfHour_Category", "Date" },
					{ "Time_EndOfHour_Example1_Code", "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))" },
					{ "Time_EndOfHour_Example1_Result", "#datetime(2011, 5, 14, 17, 59, 59.9999999)" },
					{ "Time_EndOfHour_Example2_Code", "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))" },
					{ "Time_EndOfHour_Example2_Result", "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)" },
					{ "Date_EndOfMonth_Category", "Date" },
					{ "Date_EndOfMonth_Example1_Code", "Date.EndOfMonth(#date(2011, 5, 14))" },
					{ "Date_EndOfMonth_Example1_Result", "#date(2011, 5, 31)" },
					{ "Date_EndOfMonth_Example2_Code", "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))" },
					{ "Date_EndOfMonth_Example2_Result", "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)" },
					{ "Date_EndOfWeek_Category", "Date" },
					{ "Date_EndOfWeek_Example1_Code", "Date.EndOfWeek(#date(2011, 5, 14))" },
					{ "Date_EndOfWeek_Example1_Result", "#date(2011, 5, 14)" },
					{ "Date_EndOfWeek_Example2_Code", "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)" },
					{ "Date_EndOfWeek_Example2_Result", "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)" },
					{ "Date_EndOfYear_Category", "Date" },
					{ "Date_EndOfYear_Example1_Code", "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))" },
					{ "Date_EndOfYear_Example1_Result", "#datetime(2011, 12, 31, 23, 59, 59.9999999)" },
					{ "Date_EndOfYear_Example2_Code", "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))" },
					{ "Date_EndOfYear_Example2_Result", "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)" },
					{ "Date_StartOfDay_Category", "Date" },
					{ "Date_StartOfDay_Example1_Code", "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))" },
					{ "Date_StartOfDay_Example1_Result", "#datetime(2011, 10, 10, 0, 0, 0)" },
					{ "Time_StartOfHour_Category", "Date" },
					{ "Time_StartOfHour_Example1_Code", "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))" },
					{ "Time_StartOfHour_Example1_Result", "#datetime(2011, 10, 10, 8, 0, 0)" },
					{ "Date_StartOfMonth_Category", "Date" },
					{ "Date_StartOfMonth_Example1_Code", "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))" },
					{ "Date_StartOfMonth_Example1_Result", "#datetime(2011, 10, 1, 0, 0, 0)" },
					{ "Date_StartOfWeek_Category", "Date" },
					{ "Date_StartOfWeek_Example1_Code", "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))" },
					{ "Date_StartOfWeek_Example1_Result", "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)" },
					{ "Date_StartOfWeek_Example2_Code", "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)" },
					{ "Date_StartOfWeek_Example2_Result", "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)" },
					{ "Date_StartOfYear_Category", "Date" },
					{ "Date_StartOfYear_Example1_Code", "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))" },
					{ "Date_StartOfYear_Example1_Result", "#datetime(2011, 1, 1, 0, 0, 0)" },
					{ "DateTimeZone_UtcNow_Category", "DateTimeZone" },
					{ "DateTimeZone_UtcNow_Example1_Code", "DateTimeZone.UtcNow()" },
					{ "DateTimeZone_UtcNow_Example1_Result", "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)" },
					{ "DateTimeZone_FixedUtcNow_Category", "DateTimeZone" },
					{ "Time_Hour_Category", "Time" },
					{ "Time_Hour_Example1_Code", "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))" },
					{ "Time_Hour_Example1_Result", "9" },
					{ "Time_Minute_Category", "Time" },
					{ "Time_Minute_Example1_Code", "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))" },
					{ "Time_Minute_Example1_Result", "15" },
					{ "Date_Month_Category", "Date" },
					{ "Date_Month_Example1_Code", "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))" },
					{ "Date_Month_Example1_Result", "12" },
					{ "Date_MonthName_Category", "Date" },
					{ "Date_MonthName_Example1_Code", "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")" },
					{ "Date_MonthName_Example1_Result", "\"December\"" },
					{ "Date_QuarterOfYear_Category", "Date" },
					{ "Date_QuarterOfYear_Example1_Code", "Date.QuarterOfYear(#date(2011, 12, 31))" },
					{ "Date_QuarterOfYear_Example1_Result", "4" },
					{ "DateTimeZone_RemoveZone_Category", "DateTimeZone" },
					{ "DateTimeZone_RemoveZone_Example1_Code", "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))" },
					{ "DateTimeZone_RemoveZone_Example1_Result", "#datetime(2011, 12, 31, 9, 15, 36)" },
					{ "Time_Second_Category", "Time" },
					{ "Time_Second_Example1_Code", "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))" },
					{ "Time_Second_Example1_Result", "36.5" },
					{ "DateTimeZone_SwitchZone_Category", "DateTimeZone" },
					{ "DateTimeZone_SwitchZone_Example1_Code", "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)" },
					{ "DateTimeZone_SwitchZone_Example1_Result", "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)" },
					{ "DateTimeZone_SwitchZone_Example2_Code", "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)" },
					{ "DateTimeZone_SwitchZone_Example2_Result", "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)" },
					{ "DateTimeZone_ZoneHours_Category", "DateTimeZone" },
					{ "DateTimeZone_ZoneMinutes_Category", "DateTimeZone" },
					{ "DateTimeZone_ToLocal_Category", "DateTimeZone" },
					{ "DateTimeZone_ToLocal_Example1_Code", "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))" },
					{ "DateTimeZone_ToLocal_Example1_Result", "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)" },
					{ "DateTimeZone_ToUtc_Category", "DateTimeZone" },
					{ "DateTimeZone_ToUtc_Example1_Code", "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))" },
					{ "DateTimeZone_ToUtc_Example1_Result", "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)" },
					{ "Date_Year_Category", "Date" },
					{ "Date_Year_Example1_Code", "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))" },
					{ "Date_Year_Example1_Result", "2011" },
					{ "Duration_Days_Category", "Duration" },
					{ "Duration_Days_Example1_Code", "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))" },
					{ "Duration_Days_Example1_Result", "7" },
					{ "Duration_Hours_Category", "Duration" },
					{ "Duration_Hours_Example1_Code", "Duration.Hours(#duration(5, 4, 3, 2))" },
					{ "Duration_Hours_Example1_Result", "4" },
					{ "Duration_Minutes_Category", "Duration" },
					{ "Duration_Minutes_Example1_Code", "Duration.Minutes(#duration(5, 4, 3, 2))" },
					{ "Duration_Minutes_Example1_Result", "3" },
					{ "Duration_Seconds_Category", "Duration" },
					{ "Duration_Seconds_Example1_Code", "Duration.Seconds(#duration(5, 4, 3, 2))" },
					{ "Duration_Seconds_Example1_Result", "2" },
					{ "Duration_TotalDays_Category", "Duration" },
					{ "Duration_TotalDays_Example1_Code", "Duration.TotalDays(#duration(5, 4, 3, 2))" },
					{ "Duration_TotalDays_Example1_Result", "5.1687731481481478" },
					{ "Duration_TotalHours_Category", "Duration" },
					{ "Duration_TotalHours_Example1_Code", "Duration.TotalHours(#duration(5, 4, 3, 2))" },
					{ "Duration_TotalHours_Example1_Result", "124.05055555555555" },
					{ "Duration_TotalMinutes_Category", "Duration" },
					{ "Duration_TotalMinutes_Example1_Code", "Duration.TotalMinutes(#duration(5, 4, 3, 2))" },
					{ "Duration_TotalMinutes_Example1_Result", "7443.0333333333338" },
					{ "Duration_TotalSeconds_Category", "Duration" },
					{ "Duration_TotalSeconds_Example1_Code", "Duration.TotalSeconds(#duration(5, 4, 3, 2))" },
					{ "Duration_TotalSeconds_Example1_Result", "446582" },
					{ "Text_Contains_Category", "Text.Membership" },
					{ "Text_Contains_Example1_Code", "Text.Contains(\"Hello World\", \"Hello\")" },
					{ "Text_Contains_Example1_Result", "true" },
					{ "Text_Contains_Example2_Code", "Text.Contains(\"Hello World\", \"hello\")" },
					{ "Text_Contains_Example2_Result", "false" },
					{ "Text_Contains_Example3_Code", "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)" },
					{ "Text_Contains_Example3_Result", "true" },
					{ "Text_Range_Category", "Text.Extraction" },
					{ "Text_Range_Example1_Code", "Text.Range(\"Hello World\", 6)" },
					{ "Text_Range_Example1_Result", "\"World\"" },
					{ "Text_Range_Example2_Code", "Text.Range(\"Hello World Hello\", 6, 5)" },
					{ "Text_Range_Example2_Result", "\"World\"" },
					{ "Text_Middle_Category", "Text.Extraction" },
					{ "Text_Middle_Example1_Code", "Text.Middle(\"Hello World\", 6, 5)" },
					{ "Text_Middle_Example1_Result", "\"World\"" },
					{ "Text_Middle_Example2_Code", "Text.Middle(\"Hello World\", 6, 20)" },
					{ "Text_Middle_Example2_Result", "\"World\"" },
					{ "Error_Record_Category", "Error" },
					{ "List_DateTimes_Category", "List.Generators" },
					{ "List_DateTimes_Example1_Code", "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))" },
					{ "List_DateTimes_Example1_Result", "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}" },
					{ "List_Durations_Category", "List.Generators" },
					{ "List_Durations_Example1_Code", "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))" },
					{ "List_Durations_Example1_Result", "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}" },
					{ "List_Generate_Category", "List.Generators" },
					{ "List_Generate_Example1_Code", "List.Generate(() => 10, each _ > 0, each _ - 1)" },
					{ "List_Generate_Example1_Result", "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}" },
					{ "List_Generate_Example2_Code", "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)" },
					{ "List_Generate_Example2_Result", "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}" },
					{ "List_Intersect_Category", "List.Set operations" },
					{ "List_Intersect_Example1_Code", "List.Intersect({{1..5}, {2..6}, {3..7}})" },
					{ "List_Intersect_Example1_Result", "{3, 4, 5}" },
					{ "List_IsDistinct_Category", "List.Selection" },
					{ "List_IsDistinct_Example1_Code", "List.IsDistinct({1, 2, 3})" },
					{ "List_IsDistinct_Example1_Result", "true" },
					{ "List_IsDistinct_Example2_Code", "List.IsDistinct({1, 2, 3, 3})" },
					{ "List_IsDistinct_Example2_Result", "false" },
					{ "List_IsEmpty_Category", "List.Information" },
					{ "List_IsEmpty_Example1_Code", "List.IsEmpty({})" },
					{ "List_IsEmpty_Example1_Result", "true" },
					{ "List_IsEmpty_Example2_Code", "List.IsEmpty({1, 2})" },
					{ "List_IsEmpty_Example2_Result", "false" },
					{ "List_MatchesAll_Category", "List.Selection" },
					{ "List_MatchesAll_Example1_Code", "List.MatchesAll({11, 12, 13}, each _  > 10)" },
					{ "List_MatchesAll_Example1_Result", "true" },
					{ "List_MatchesAll_Example2_Code", "List.MatchesAll({1, 2, 3}, each _  > 10)" },
					{ "List_MatchesAll_Example2_Result", "false" },
					{ "List_MatchesAny_Category", "List.Selection" },
					{ "List_MatchesAny_Example1_Code", "List.MatchesAny({9, 10, 11}, each _  > 10)" },
					{ "List_MatchesAny_Example1_Result", "true" },
					{ "List_MatchesAny_Example2_Code", "List.MatchesAny({1, 2, 3}, each _  > 10)" },
					{ "List_MatchesAny_Example2_Result", "false" },
					{ "List_RemoveMatchingItems_Category", "List.Transformation functions" },
					{ "List_RemoveMatchingItems_Example1_Code", "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})" },
					{ "List_RemoveMatchingItems_Example1_Result", "{2, 3, 4}" },
					{ "List_RemoveItems_Category", "List.Transformation functions" },
					{ "List_RemoveItems_Example1_Code", "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})" },
					{ "List_RemoveItems_Example1_Result", "{1, 3, 5, 5}" },
					{ "List_RemoveNulls_Category", "List.Transformation functions" },
					{ "List_RemoveNulls_Example1_Code", "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})" },
					{ "List_RemoveNulls_Example1_Result", "{1, 2, 3, 4, 5, 6}" },
					{ "List_ReplaceMatchingItems_Category", "List.Transformation functions" },
					{ "List_ReplaceMatchingItems_Example1_Code", "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})" },
					{ "List_ReplaceMatchingItems_Example1_Result", "{-1, 2, 3, 4, -5}" },
					{ "List_Union_Category", "List.Set operations" },
					{ "List_Union_Example1_Code", "List.Union({{1..5}, {2..6}, {3..7}})" },
					{ "List_Union_Example1_Result", "{1, 2, 3, 4, 5, 6, 7}" },
					{ "Number_RoundAwayFromZero_Category", "Number.Rounding" },
					{ "Number_RoundAwayFromZero_Example1_Code", "Number.RoundAwayFromZero(-1.2)" },
					{ "Number_RoundAwayFromZero_Example1_Result", "-2" },
					{ "Number_RoundAwayFromZero_Example2_Code", "Number.RoundAwayFromZero(1.2)" },
					{ "Number_RoundAwayFromZero_Example2_Result", "2" },
					{ "Number_RoundAwayFromZero_Example3_Code", "Number.RoundAwayFromZero(-1.234, 2)" },
					{ "Number_RoundAwayFromZero_Example3_Result", "-1.24" },
					{ "Number_RoundTowardZero_Category", "Number.Rounding" },
					{ "Number_RoundTowardZero_Example1_Code", "Number.RoundTowardZero(-1.2)" },
					{ "Number_RoundTowardZero_Example1_Result", "-1" },
					{ "Number_RoundTowardZero_Example2_Code", "Number.RoundTowardZero(1.2)" },
					{ "Number_RoundTowardZero_Example2_Result", "1" },
					{ "Number_RoundTowardZero_Example3_Code", "Number.RoundTowardZero(-1.234, 2)" },
					{ "Number_RoundTowardZero_Example3_Result", "-1.23" },
					{ "Number_Round_Example1_Code", "Number.Round(1.234)" },
					{ "Number_Round_Example1_Result", "1" },
					{ "Number_Round_Example2_Code", "Number.Round(1.56)" },
					{ "Number_Round_Example2_Result", "2" },
					{ "Number_Round_Example3_Code", "Number.Round(1.2345, 2)" },
					{ "Number_Round_Example3_Result", "1.23" },
					{ "Number_Round_Example4_Code", "Number.Round(1.2345, 3, RoundingMode.Up)" },
					{ "Number_Round_Example4_Result", "1.235" },
					{ "Number_Round_Example5_Code", "Number.Round(1.2345, 3, RoundingMode.Down)" },
					{ "Number_Round_Example5_Result", "1.234" },
					{ "RoundingMode_Up_Category", "Number.Parameter values" },
					{ "RoundingMode_Down_Category", "Number.Parameter values" },
					{ "RoundingMode_AwayFromZero_Category", "Number.Parameter values" },
					{ "RoundingMode_TowardZero_Category", "Number.Parameter values" },
					{ "RoundingMode_ToEven_Category", "Number.Parameter values" },
					{ "Occurrence_All_Category", "Text.Parameter values" },
					{ "Occurrence_First_Category", "Text.Parameter values" },
					{ "Occurrence_Last_Category", "Text.Parameter values" },
					{ "Record_Combine_Category", "Record.Transformations" },
					{ "Record_Combine_Example1_Code", "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})" },
					{ "Record_Combine_Example1_Result", "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]" },
					{ "Record_FromTable_Category", "Record.Serialization" },
					{ "Record_FromTable_Example1_Code", "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)" },
					{ "Record_FromTable_Example1_Result", "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]" },
					{ "Record_RemoveFields_Category", "Record.Transformations" },
					{ "Record_RemoveFields_Example1_Code", "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")" },
					{ "Record_RemoveFields_Example1_Result", "[CustomerID = 1, Item = \"Fishing rod\"]" },
					{ "Record_RemoveFields_Example2_Code", "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})" },
					{ "Record_RemoveFields_Example2_Result", "[CustomerID = 1]" },
					{ "Record_RenameFields_Category", "Record.Transformations" },
					{ "Record_RenameFields_Example1_Code", "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)" },
					{ "Record_RenameFields_Example1_Result", "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]" },
					{ "Record_RenameFields_Example2_Code", "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)" },
					{ "Record_RenameFields_Example2_Result", "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]" },
					{ "Record_ReorderFields_Category", "Record.Transformations" },
					{ "Record_ReorderFields_Example1_Code", "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)" },
					{ "Record_ReorderFields_Example1_Result", "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]" },
					{ "Record_SelectFields_Category", "Record.Selection" },
					{ "Record_SelectFields_Example1_Code", "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)" },
					{ "Record_SelectFields_Example1_Result", "[Item = \"Fishing rod\", Price = 100]" },
					{ "Record_ToTable_Category", "Record.Serialization" },
					{ "Record_ToTable_Example1_Code", "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])" },
					{ "Record_ToTable_Example1_Result", "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})" },
					{ "Record_TransformFields_Category", "Record.Transformations" },
					{ "Record_TransformFields_Example1_Code", "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)" },
					{ "Record_TransformFields_Example1_Result", "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]" },
					{ "Record_TransformFields_Example2_Code", "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)" },
					{ "Record_TransformFields_Example2_Result", "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]" },
					{ "Table_AddColumn_Category", "Table.Transformation" },
					{ "Table_AddColumn_Example1_Code", "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)" },
					{ "Table_AddColumn_Example1_Result", "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})" },
					{ "Table_Keys_Category", "Table.Transformation" },
					{ "Table_ReplaceKeys_Category", "Table.Transformation" },
					{ "Table_ReplaceRelationshipIdentity_Category", "Table.Transformation" },
					{ "Table_FilterWithDataTable_Category", "Table.Transformation" },
					{ "Table_DuplicateColumn_Category", "Table.Column operations" },
					{ "Table_DuplicateColumn_Example1_Code", "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)" },
					{ "Table_DuplicateColumn_Example1_Result", "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})" },
					{ "Table_AddIndexColumn_Category", "Table.Transformation" },
					{ "Table_AddIndexColumn_Example1_Code", "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)" },
					{ "Table_AddIndexColumn_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})" },
					{ "Table_AddIndexColumn_Example2_Code", "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)" },
					{ "Table_AddIndexColumn_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})" },
					{ "Table_AddJoinColumn_Category", "Table.Transformation" },
					{ "Table_AddJoinColumn_Example1_Code", "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)" },
					{ "Table_AddJoinColumn_Example1_Result", "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})" },
					{ "Table_NestedJoin_Category", "Table.Transformation" },
					{ "Table_NestedJoin_Example1_Code", "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)" },
					{ "Table_NestedJoin_Example1_Result", "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})" },
					{ "Table_AddRankColumn_Category", "Table.Ordering" },
					{ "Table_AddRankColumn_Example1_Code", "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)" },
					{ "Table_AddRankColumn_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})" },
					{ "RankKind_Type_Category", "Table.Ordering" },
					{ "RankKind_Competition_Category", "Table.Ordering" },
					{ "RankKind_Dense_Category", "Table.Ordering" },
					{ "RankKind_Ordinal_Category", "Table.Ordering" },
					{ "Table_AlternateRows_Category", "Table.Row operations" },
					{ "Table_AlternateRows_Example1_Code", "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)" },
					{ "Table_AlternateRows_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})" },
					{ "Table_Buffer_Category", "Table.Other" },
					{ "Table_StopFolding_Category", "Table.Other" },
					{ "Table_Combine_Category", "Table.Row operations" },
					{ "Table_ColumnCount_Category", "Table.Information" },
					{ "Table_ColumnCount_Example1_Code", "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)" },
					{ "Table_ColumnCount_Example1_Result", "3" },
					{ "Table_ColumnNames_Category", "Table.Column operations" },
					{ "Table_ColumnNames_Example1_Code", "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)" },
					{ "Table_ColumnNames_Example1_Result", "{\"CustomerID\", \"Name\", \"Phone\"}" },
					{ "Table_Column_Example1_Code", "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)" },
					{ "Table_Column_Example1_Result", "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}" },
					{ "Table_Contains_Category", "Table.Membership" },
					{ "Table_ContainsAll_Category", "Table.Membership" },
					{ "Table_ContainsAll_Example1_Code", "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)" },
					{ "Table_ContainsAll_Example1_Result", "true" },
					{ "Table_ContainsAll_Example2_Code", "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)" },
					{ "Table_ContainsAll_Example2_Result", "false" },
					{ "Table_ContainsAny_Category", "Table.Membership" },
					{ "Table_ContainsAny_Example1_Code", "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)" },
					{ "Table_ContainsAny_Example1_Result", "true" },
					{ "Table_ContainsAny_Example2_Code", "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)" },
					{ "Table_ContainsAny_Example2_Result", "false" },
					{ "Table_ContainsAny_Example3_Code", "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)" },
					{ "Table_ContainsAny_Example3_Result", "true" },
					{ "Table_Contains_Example1_Code", "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)" },
					{ "Table_Contains_Example1_Result", "true" },
					{ "Table_Contains_Example2_Code", "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)" },
					{ "Table_Contains_Example2_Result", "false" },
					{ "Table_Contains_Example3_Code", "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)" },
					{ "Table_Contains_Example3_Result", "true" },
					{ "Table_Distinct_Category", "Table.Membership" },
					{ "Table_Distinct_Example1_Code", "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)" },
					{ "Table_Distinct_Example1_Result", "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})" },
					{ "Table_Distinct_Example2_Code", "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)" },
					{ "Table_Distinct_Example2_Result", "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})" },
					{ "Table_HasColumns_Category", "Table.Column operations" },
					{ "Table_HasColumns_Example1_Code", "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)" },
					{ "Table_HasColumns_Example1_Result", "true" },
					{ "Table_HasColumns_Example2_Code", "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)" },
					{ "Table_HasColumns_Example2_Result", "false" },
					{ "Table_InsertRows_Category", "Table.Row operations" },
					{ "Table_InsertRows_Example1_Code", "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)" },
					{ "Table_InsertRows_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})" },
					{ "Table_IsEmpty_Category", "Table.Information" },
					{ "Table_IsEmpty_Example1_Code", "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)" },
					{ "Table_IsEmpty_Example1_Result", "false" },
					{ "Table_IsEmpty_Example2_Code", "Table.IsEmpty(Table.FromRecords({}))" },
					{ "Table_IsEmpty_Example2_Result", "true" },
					{ "Table_IsDistinct_Category", "Table.Membership" },
					{ "Table_IsDistinct_Example1_Code", "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)" },
					{ "Table_IsDistinct_Example1_Result", "true" },
					{ "Table_IsDistinct_Example2_Code", "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)" },
					{ "Table_IsDistinct_Example2_Result", "false" },
					{ "Table_FindText_Category", "Table.Row operations" },
					{ "Table_FindText_Example1_Code", "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)" },
					{ "Table_FindText_Example1_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Table_FillDown_Category", "Table.Transformation" },
					{ "Table_FillDown_Example1_Code", "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)" },
					{ "Table_FillDown_Example1_Result", "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})" },
					{ "Table_FillUp_Category", "Table.Transformation" },
					{ "Table_FillUp_Example1_Code", "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)" },
					{ "Table_FillUp_Example1_Result", "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})" },
					{ "Table_FirstN_Category", "Table.Row operations" },
					{ "Table_FirstN_Example1_Code", "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)" },
					{ "Table_FirstN_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})" },
					{ "Table_FirstN_Example2_Code", "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)" },
					{ "Table_FirstN_Example2_Result", "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})" },
					{ "Table_First_Category", "Table.Row operations" },
					{ "Table_SplitAt_Category", "Table.Row operations" },
					{ "Table_LastN_Category", "Table.Row operations" },
					{ "Table_LastN_Example1_Code", "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)" },
					{ "Table_LastN_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})" },
					{ "Table_LastN_Example2_Code", "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)" },
					{ "Table_LastN_Example2_Result", "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})" },
					{ "Table_Last_Category", "Table.Row operations" },
					{ "Table_Last_Example1_Code", "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)" },
					{ "Table_Last_Example1_Result", "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]" },
					{ "Table_Last_Example2_Code", "Table.Last(Table.FromRecords({}), [a = 0, b = 0])" },
					{ "Table_Last_Example2_Result", "[a = 0, b = 0]" },
					{ "Table_MaxN_Category", "Table.Ordering" },
					{ "Table_MaxN_Example1_Code", "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)" },
					{ "Table_MaxN_Example1_Result", "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})" },
					{ "Table_MaxN_Example2_Code", "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)" },
					{ "Table_MaxN_Example2_Result", "Table.FromRecords({})" },
					{ "Table_Max_Category", "Table.Ordering" },
					{ "Table_Max_Example1_Code", "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)" },
					{ "Table_Max_Example1_Result", "[a = 6, b = 8]" },
					{ "Table_Max_Example2_Code", "Table.Max(#table({\"a\"}, {}), \"a\", -1)" },
					{ "Table_Max_Example2_Result", "-1" },
					{ "Table_MatchesAllRows_Category", "Table.Row operations" },
					{ "Table_MatchesAllRows_Example1_Code", "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)" },
					{ "Table_MatchesAllRows_Example1_Result", "true" },
					{ "Table_MatchesAllRows_Example2_Code", "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)" },
					{ "Table_MatchesAllRows_Example2_Result", "false" },
					{ "Table_MatchesAnyRows_Category", "Table.Row operations" },
					{ "Table_MatchesAnyRows_Example1_Code", "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)" },
					{ "Table_MatchesAnyRows_Example1_Result", "false" },
					{ "Table_MatchesAnyRows_Example2_Code", "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)" },
					{ "Table_MatchesAnyRows_Example2_Result", "true" },
					{ "Table_MinN_Category", "Table.Ordering" },
					{ "Table_MinN_Example1_Code", "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)" },
					{ "Table_MinN_Example1_Result", "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})" },
					{ "Table_MinN_Example2_Code", "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)" },
					{ "Table_MinN_Example2_Result", "Table.FromRecords({})" },
					{ "Table_Min_Category", "Table.Ordering" },
					{ "Table_Min_Example1_Code", "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)" },
					{ "Table_Min_Example1_Result", "[a = 2, b = 4]" },
					{ "Table_Min_Example2_Code", "Table.Min(#table({\"a\"}, {}), \"a\", -1)" },
					{ "Table_Min_Example2_Result", "-1" },
					{ "Table_Partition_Category", "Table.Row operations" },
					{ "Table_PositionOf_Category", "Table.Membership" },
					{ "Table_PositionOfAny_Category", "Table.Membership" },
					{ "Table_PositionOfAny_Example1_Code", "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)" },
					{ "Table_PositionOfAny_Example1_Result", "0" },
					{ "Table_PositionOfAny_Example2_Code", "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)" },
					{ "Table_PositionOfAny_Example2_Result", "{0, 1, 2}" },
					{ "Table_PositionOf_Example1_Code", "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)" },
					{ "Table_PositionOf_Example1_Result", "0" },
					{ "Table_PositionOf_Example2_Code", "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)" },
					{ "Table_PositionOf_Example2_Result", "2" },
					{ "Table_PositionOf_Example3_Code", "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)" },
					{ "Table_PositionOf_Example3_Result", "{0, 2}" },
					{ "Table_PrefixColumns_Category", "Table.Column operations" },
					{ "Table_PrefixColumns_Example1_Code", "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)" },
					{ "Table_PrefixColumns_Example1_Result", "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})" },
					{ "Table_PromoteHeaders_Category", "Table.Column operations" },
					{ "Table_PromoteHeaders_Example1_Code", "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)" },
					{ "Table_PromoteHeaders_Example1_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})" },
					{ "Table_PromoteHeaders_Example2_Code", "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)" },
					{ "Table_PromoteHeaders_Example2_Result", "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})" },
					{ "Table_DemoteHeaders_Category", "Table.Column operations" },
					{ "Table_DemoteHeaders_Example1_Code", "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)" },
					{ "Table_DemoteHeaders_Example1_Result", "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})" },
					{ "Table_Range_Category", "Table.Row operations" },
					{ "Table_Range_Example1_Code", "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)" },
					{ "Table_Range_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_Range_Example2_Code", "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)" },
					{ "Table_Range_Example2_Result", "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})" },
					{ "Table_RemoveColumns_Category", "Table.Column operations" },
					{ "Table_RemoveColumns_Example1_Code", "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)" },
					{ "Table_RemoveColumns_Example1_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})" },
					{ "Table_RemoveColumns_Example2_Code", "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)" },
					{ "Table_RemoveColumns_Example2_Result", "[Expression.Error] The column 'Address' of the table wasn't found." },
					{ "Table_RemoveRows_Category", "Table.Row operations" },
					{ "Table_RemoveMatchingRows_Category", "Table.Membership" },
					{ "Table_RemoveMatchingRows_Example1_Code", "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)" },
					{ "Table_RemoveMatchingRows_Example1_Result", "Table.FromRecords({[a = 3, b = 4]})" },
					{ "Table_TransformColumnNames_Category", "Table.Column operations" },
					{ "Table_TransformColumnNames_Example1_Code", "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)" },
					{ "Table_TransformColumnNames_Example1_Result", "Table.FromRecords({[Column = 1]})" },
					{ "Table_TransformColumnNames_Example2_Code", "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)" },
					{ "Table_TransformColumnNames_Example2_Result", "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})" },
					{ "Table_RenameColumns_Category", "Table.Column operations" },
					{ "Table_RenameColumns_Example1_Code", "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)" },
					{ "Table_RenameColumns_Example1_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Table_RenameColumns_Example2_Code", "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)" },
					{ "Table_RenameColumns_Example2_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Table_RenameColumns_Example3_Code", "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)" },
					{ "Table_RenameColumns_Example3_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Table_ReorderColumns_Category", "Table.Column operations" },
					{ "Table_ReorderColumns_Example1_Code", "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)" },
					{ "Table_ReorderColumns_Example1_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Table_ReorderColumns_Example2_Code", "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)" },
					{ "Table_ReorderColumns_Example2_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Table_Repeat_Category", "Table.Row operations" },
					{ "Table_Repeat_Example1_Code", "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)" },
					{ "Table_Repeat_Example1_Result", "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})" },
					{ "Table_ReplaceRows_Category", "Table.Row operations" },
					{ "Table_ReplaceRows_Example1_Code", "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)" },
					{ "Table_ReplaceRows_Example1_Result", "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})" },
					{ "Table_ReplaceMatchingRows_Category", "Table.Membership" },
					{ "Table_ReplaceMatchingRows_Example1_Code", "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)" },
					{ "Table_ReplaceMatchingRows_Example1_Result", "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})" },
					{ "Table_ReplaceErrorValues_Category", "Table.Transformation" },
					{ "Table_ReplaceErrorValues_Example1_Code", "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)" },
					{ "Table_ReplaceErrorValues_Example1_Result", "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})" },
					{ "Table_ReplaceErrorValues_Example2_Code", "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)" },
					{ "Table_ReplaceErrorValues_Example2_Result", "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})" },
					{ "Table_ReplaceValue_Category", "Table.Transformation" },
					{ "Table_ReplaceValue_Example1_Code", "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)" },
					{ "Table_ReplaceValue_Example1_Result", "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})" },
					{ "Table_ReplaceValue_Example2_Code", "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)" },
					{ "Table_ReplaceValue_Example2_Result", "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})" },
					{ "Table_ReplaceValue_Example3_Code", "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)" },
					{ "Table_ReplaceValue_Example3_Result", "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})" },
					{ "Table_ReplaceValue_Example4_Code", "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)" },
					{ "Table_ReplaceValue_Example4_Result", "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})" },
					{ "Table_ReverseRows_Category", "Table.Row operations" },
					{ "Table_ReverseRows_Example1_Code", "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)" },
					{ "Table_ReverseRows_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})" },
					{ "Table_RowCount_Category", "Table.Information" },
					{ "Table_RowCount_Example1_Code", "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)" },
					{ "Table_RowCount_Example1_Result", "3" },
					{ "Table_ApproximateRowCount_Category", "Table.Information" },
					{ "Table_SelectColumns_Category", "Table.Column operations" },
					{ "Table_SelectColumns_Example1_Code", "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)" },
					{ "Table_SelectColumns_Example1_Result", "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})" },
					{ "Table_SelectColumns_Example2_Code", "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)" },
					{ "Table_SelectColumns_Example2_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})" },
					{ "Table_SelectColumns_Example3_Code", "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)" },
					{ "Table_SelectColumns_Example3_Result", "[Expression.Error] The field 'NewColumn' of the record wasn't found." },
					{ "Table_SelectColumns_Example4_Code", "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)" },
					{ "Table_SelectColumns_Example4_Result", "Table.FromRecords({[CustomerID = 1, NewColumn = null]})" },
					{ "Table_SelectRows_Category", "Table.Row operations" },
					{ "Table_SingleRow_Category", "Table.Row operations" },
					{ "Table_SingleRow_Example1_Code", "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))" },
					{ "Table_SingleRow_Example1_Result", "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]" },
					{ "Table_Skip_Category", "Table.Row operations" },
					{ "Table_Skip_Example1_Code", "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)" },
					{ "Table_Skip_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_Skip_Example2_Code", "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)" },
					{ "Table_Skip_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_Skip_Example3_Code", "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)" },
					{ "Table_Skip_Example3_Result", "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})" },
					{ "Table_RemoveFirstN_Category", "Table.Row operations" },
					{ "Table_RemoveFirstN_Example1_Code", "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)" },
					{ "Table_RemoveFirstN_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_RemoveFirstN_Example2_Code", "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)" },
					{ "Table_RemoveFirstN_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_RemoveFirstN_Example3_Code", "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)" },
					{ "Table_RemoveFirstN_Example3_Result", "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_RemoveLastN_Category", "Table.Row operations" },
					{ "Table_RemoveLastN_Example1_Code", "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)" },
					{ "Table_RemoveLastN_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})" },
					{ "Table_RemoveLastN_Example2_Code", "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)" },
					{ "Table_RemoveLastN_Example2_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Table_Sort_Category", "Table.Ordering" },
					{ "Table_Sort_Example1_Code", "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)" },
					{ "Table_Sort_Example1_Result", "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})" },
					{ "Table_Sort_Example2_Code", "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)" },
					{ "Table_Sort_Example2_Result", "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})" },
					{ "Table_Sort_Example3_Code", "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)" },
					{ "Table_Sort_Example3_Result", "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})" },
					{ "Table_ExpandRecordColumn_Category", "Table.Transformation" },
					{ "Table_ExpandRecordColumn_Example1_Code", "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)" },
					{ "Table_ExpandRecordColumn_Example1_Result", "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})" },
					{ "Table_ExpandListColumn_Category", "Table.Transformation" },
					{ "Table_ExpandListColumn_Example1_Code", "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)" },
					{ "Table_ExpandListColumn_Example1_Result", "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})" },
					{ "Table_ExpandListColumn_Example2_Code", "Table.ExpandListColumn(\r\n    #table(\r\n        {\"Part\", \"Components\"},\r\n        {\r\n            {\"Tool\", #table({\"Name\", \"Quantity\"}, {{\"Thingamajig\", 2}, {\"Widget\", 3}})}\r\n        }\r\n    ),\r\n    \"Components\"\r\n)" },
					{ "Table_ExpandListColumn_Example2_Result", "Table.FromRecords({\r\n    [Part = \"Tool\", Components = [Name = \"Thingamajig\", Quantity = 2]],\r\n    [Part = \"Tool\", Components = [Name = \"Widget\", Quantity = 3]]\r\n})" },
					{ "Table_TransformColumns_Category", "Table.Transformation" },
					{ "Table_TransformColumns_Example1_Code", "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)" },
					{ "Table_TransformColumns_Example1_Result", "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})" },
					{ "Table_TransformColumns_Example2_Code", "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)" },
					{ "Table_TransformColumns_Example2_Result", "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})" },
					{ "Table_TransformColumns_Example3_Code", "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)" },
					{ "Table_TransformColumns_Example3_Result", "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})" },
					{ "Table_TransformColumns_Example4_Code", "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)" },
					{ "Table_TransformColumns_Example4_Result", "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})" },
					{ "Table_TransformColumnTypes_Category", "Table.Transformation" },
					{ "Table_TransformColumnTypes_Example1_Code", "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)" },
					{ "Table_TransformColumnTypes_Example1_Result", "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})" },
					{ "Table_TransformRows_Category", "Table.Transformation" },
					{ "Table_TransformRows_Example1_Code", "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)" },
					{ "Table_TransformRows_Example1_Result", "{1, 2, 3, 4, 5}" },
					{ "Table_TransformRows_Example2_Code", "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)" },
					{ "Table_TransformRows_Example2_Result", "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}" },
					{ "Table_Transpose_Category", "Table.Transformation" },
					{ "Table_Transpose_Example1_Code", "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)" },
					{ "Table_Transpose_Example1_Result", "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})" },
					{ "Date_ToText_Category", "Date" },
					{ "Date_ToText_Example1_Code", "Date.ToText(#date(2010, 12, 31))" },
					{ "Date_ToText_Example1_Result", "\"12/31/2010\"" },
					{ "Date_ToText_Example2_Code", "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])" },
					{ "Date_ToText_Example2_Result", "\"31 Dez 2010\"" },
					{ "Date_ToText_Example3_Code", "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])" },
					{ "Date_ToText_Example3_Result", "\"1420\"" },
					{ "DateTime_AddZone_Category", "DateTime" },
					{ "DateTime_AddZone_Example1_Code", "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)" },
					{ "DateTime_AddZone_Example1_Result", "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)" },
					{ "DateTime_Date_Category", "DateTime" },
					{ "DateTime_Date_Example1_Code", "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))" },
					{ "DateTime_Date_Example1_Result", "#date(2010, 12, 31)" },
					{ "DateTime_Time_Category", "DateTime" },
					{ "DateTime_Time_Example1_Code", "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))" },
					{ "DateTime_Time_Example1_Result", "#time(11, 56, 2)" },
					{ "Uri_Combine_Category", "Uri" },
					{ "Uri_Parts_Category", "Uri" },
					{ "Uri_Parts_Example1_Code", "Uri.Parts(\"www.adventure-works.com\")" },
					{ "Uri_Parts_Example1_Result", "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]" },
					{ "Uri_Parts_Example2_Code", "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")" },
					{ "Uri_Parts_Example2_Result", "\"+money$\"" },
					{ "Uri_BuildQueryString_Category", "Uri" },
					{ "Uri_BuildQueryString_Example1_Code", "Uri.BuildQueryString([a = \"1\", b = \"+$\"])" },
					{ "Uri_BuildQueryString_Example1_Result", "\"a=1&b=%2B%24\"" },
					{ "Uri_EscapeDataString_Category", "Uri" },
					{ "Uri_EscapeDataString_Example1_Code", "Uri.EscapeDataString(\"+money$\")" },
					{ "Uri_EscapeDataString_Example1_Result", "\"%2Bmoney%24\"" },
					{ "Text_ToList_Category", "Text.Conversions from and to text" },
					{ "Text_ToList_Example1_Code", "Text.ToList(\"Hello World\")" },
					{ "Text_ToList_Example1_Result", "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}" },
					{ "Table_ExpandTableColumn_Category", "Table.Transformation" },
					{ "Table_ExpandTableColumn_Example1_Code", "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)" },
					{ "Table_ExpandTableColumn_Example1_Result", "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})" },
					{ "Function_Invoke_Category", "Function" },
					{ "Function_Invoke_Example1_Code", "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})" },
					{ "Function_Invoke_Example1_Result", "{\"A\", \"B\"}" },
					{ "Function_From_Category", "Function" },
					{ "Function_From_Example1_Code", "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)" },
					{ "Function_From_Example1_Result", "3" },
					{ "Function_From_Example2_Code", "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")" },
					{ "Function_From_Example2_Result", "\"21\"" },
					{ "Table_FromRows_Category", "Table.Table construction" },
					{ "Table_FromRows_Example1_Code", "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)" },
					{ "Table_FromRows_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})" },
					{ "Table_FromRows_Example2_Code", "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)" },
					{ "Table_FromRows_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})" },
					{ "Table_ToRows_Category", "Table.Conversions" },
					{ "Table_ToRows_Example1_Code", "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)" },
					{ "Table_ToRows_Example1_Result", "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}" },
					{ "Table_AddKey_Category", "Table.Transformation" },
					{ "Table_AddKey_Example1_Code", "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable" },
					{ "Table_AddKey_Example1_Result", "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})" },
					{ "Web_Page_Category", "Accessing data" },
					{ "Lines_ToBinary_Category", "Lines" },
					{ "Lines_FromText_Category", "Lines" },
					{ "Table_ToList_Category", "Table.Conversions" },
					{ "Table_ToList_Example1_Code", "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)" },
					{ "Table_ToList_Example1_Result", "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}" },
					{ "Table_FromList_Category", "Table.Table construction" },
					{ "Table_FromList_Example1_Code", "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)" },
					{ "Table_FromList_Example1_Result", "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})" },
					{ "Table_FromList_Example2_Code", "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)" },
					{ "Table_FromList_Example2_Result", "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})" },
					{ "Table_FromList_Example3_Code", "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)" },
					{ "Table_FromList_Example3_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})" },
					{ "Table_FromValue_Category", "Table.Table construction" },
					{ "Table_FromValue_Example1_Code", "Table.FromValue(1)" },
					{ "Table_FromValue_Example1_Result", "Table.FromRecords({[Value = 1]})" },
					{ "Table_FromValue_Example2_Code", "Table.FromValue({1, \"Bob\", \"123-4567\"})" },
					{ "Table_FromValue_Example2_Result", "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})" },
					{ "Table_FromValue_Example3_Code", "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])" },
					{ "Table_FromValue_Example3_Result", "Table.FromRecords({[MyValue = 1]})" },
					{ "Table_FirstValue_Category", "Table.Row operations" },
					{ "Table_First_Example1_Code", "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)" },
					{ "Table_First_Example1_Result", "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]" },
					{ "Table_First_Example2_Code", "Table.First(Table.FromRecords({}), [a = 0, b = 0])" },
					{ "Table_First_Example2_Result", "[a = 0, b = 0]" },
					{ "Lines_ToText_Category", "Lines" },
					{ "Combiner_CombineTextByDelimiter_Category", "Combiner" },
					{ "Combiner_CombineTextByRanges_Category", "Combiner" },
					{ "Splitter_SplitTextByCharacterTransition_Category", "Splitter" },
					{ "Splitter_SplitTextByDelimiter_Category", "Splitter" },
					{ "Splitter_SplitTextByRanges_Category", "Splitter" },
					{ "Lines_FromBinary_Category", "Lines" },
					{ "ExtraValues_Error_Category", "Table.Parameter values" },
					{ "ExtraValues_Ignore_Category", "Table.Parameter values" },
					{ "ExtraValues_List_Category", "Table.Parameter values" },
					{ "QuoteStyle_Csv_Category", "Splitter.Parameter values" },
					{ "QuoteStyle_None_Category", "Splitter.Parameter values" },
					{ "Table_FromRecords_Category", "Table.Table construction" },
					{ "Table_FromRecords_Example1_Code", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})" },
					{ "Table_FromRecords_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})" },
					{ "Table_FromRecords_Example2_Code", "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)" },
					{ "Table_FromRecords_Example2_Result", "{\"CustomerID\"}" },
					{ "Table_ToRecords_Category", "Table.Conversions" },
					{ "Table_ToRecords_Example1_Code", "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)" },
					{ "Table_ToRecords_Example1_Result", "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}" },
					{ "Combiner_CombineTextByEachDelimiter_Category", "Combiner" },
					{ "Combiner_CombineTextByLengths_Category", "Combiner" },
					{ "Combiner_CombineTextByPositions_Category", "Combiner" },
					{ "Splitter_SplitTextByAnyDelimiter_Category", "Splitter" },
					{ "Splitter_SplitTextByEachDelimiter_Category", "Splitter" },
					{ "Splitter_SplitTextByLengths_Category", "Splitter" },
					{ "Splitter_SplitTextByRepeatedLengths_Category", "Splitter" },
					{ "Splitter_SplitTextByPositions_Category", "Splitter" },
					{ "Splitter_SplitTextByWhitespace_Category", "Splitter" },
					{ "Table_CombineColumns_Category", "Table.Transformation" },
					{ "Table_CombineColumns_Example1_Code", "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)" },
					{ "Table_CombineColumns_Example1_Result", "Table.FromRecords({[FullName = \"Smith,Bob\"]})" },
					{ "Table_CombineColumnsToRecord_Category", "Table.Transformation" },
					{ "Table_Combine_Example1_Code", "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})" },
					{ "Table_Combine_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})" },
					{ "Table_Split_Category", "Table.Transformation" },
					{ "Table_Split_Example1_Code", "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)" },
					{ "Table_Split_Example1_Result", "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}" },
					{ "Table_Combine_Example2_Code", "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})" },
					{ "Table_Combine_Example2_Result", "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})" },
					{ "Table_Combine_Example3_Code", "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)" },
					{ "Table_Combine_Example3_Result", "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})" },
					{ "Table_SplitColumn_Category", "Table.Transformation" },
					{ "Table_SplitColumn_Example1_Code", "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)" },
					{ "Table_SplitColumn_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})" },
					{ "Csv_Document_Category", "Accessing data" },
					{ "Csv_Document_Example1_Code", "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))" },
					{ "Csv_Document_Example1_Result", "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})" },
					{ "Csv_Document_Example2_Code", "let\r\n    csv = Text.Combine({\"OrderID#|#Color\", \"1#|#Red\", \"2#|#Blue\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv, null, \"#|#\"))" },
					{ "Csv_Document_Example2_Result", "Table.FromRecords({\r\n    [OrderID = \"1\", Color = \"Red\"],\r\n    [OrderID = \"2\", Color = \"Blue\"]\r\n})" },
					{ "CsvStyle_QuoteAlways_Category", "Accessing data.Parameter values" },
					{ "CsvStyle_QuoteAfterDelimiter_Category", "Accessing data.Parameter values" },
					{ "Splitter_SplitByNothing_Category", "Splitter" },
					{ "Value_FromText_Category", "Text.Conversions from and to text" },
					{ "Binary_ApproximateLength_Category", "Binary" },
					{ "Binary_FromList_Category", "Binary" },
					{ "Binary_ToList_Category", "Binary" },
					{ "Folder_Files_Category", "Accessing data" },
					{ "Hdfs_Contents_Category", "Accessing data" },
					{ "Hdfs_Files_Category", "Accessing data" },
					{ "HdInsight_Contents_Category", "Accessing data" },
					{ "HdInsight_Containers_Category", "Accessing data" },
					{ "AzureStorage_Blobs_Category", "Accessing data" },
					{ "AzureStorage_BlobContents_Category", "Accessing data" },
					{ "AzureStorage_DataLake_Category", "Accessing data" },
					{ "AzureStorage_DataLakeContents_Category", "Accessing data" },
					{ "HdInsight_Files_Category", "Accessing data" },
					{ "AzureStorage_Tables_Category", "Accessing data" },
					{ "SharePoint_Files_Category", "Accessing data" },
					{ "ActiveDirectory_Domains_Category", "Accessing data" },
					{ "Exchange_Contents_Category", "Accessing data" },
					{ "Binary_Combine_Category", "Binary" },
					{ "List_NonNullCount_Category", "List.Information" },
					{ "Table_AggregateTableColumn_Category", "Table.Transformation" },
					{ "Table_AggregateTableColumn_Example1_Code", "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)" },
					{ "Table_AggregateTableColumn_Example1_Result", "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})" },
					{ "Binary_Length_Category", "Binary" },
					{ "Culture_Current_Category", "Comparer" },
					{ "Oracle_Database_Category", "Accessing data" },
					{ "Excel_CurrentWorkbook_Category", "Accessing data" },
					{ "DataSource_TestConnection_Category", "Accessing data" },
					{ "DateTimeZone_FromText_Category", "DateTimeZone" },
					{ "DateTimeZone_FromText_Example1_Code", "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")" },
					{ "DateTimeZone_FromText_Example1_Result", "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)" },
					{ "DateTimeZone_FromText_Example2_Code", "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])" },
					{ "DateTimeZone_FromText_Example2_Result", "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)" },
					{ "DateTimeZone_FromText_Example3_Code", "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])" },
					{ "DateTimeZone_FromText_Example3_Result", "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)" },
					{ "DateTimeZone_ToRecord_Category", "DateTimeZone" },
					{ "DateTimeZone_ToRecord_Example1_Code", "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))" },
					{ "DateTimeZone_ToRecord_Example1_Result", "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]" },
					{ "DateTimeZone_ToText_Category", "DateTimeZone" },
					{ "DateTimeZone_ToText_Example1_Code", "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))" },
					{ "DateTimeZone_ToText_Example1_Result", "\"12/31/2010 1:30:25 AM +02:00\"" },
					{ "DateTimeZone_ToText_Example2_Code", "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])" },
					{ "DateTimeZone_ToText_Example2_Result", "\"30 Dez 2010 02:04:50.369730 -08:00\"" },
					{ "DateTimeZone_ToText_Example3_Code", "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])" },
					{ "DateTimeZone_ToText_Example3_Result", "\"2000-02-08T03:45:12.0000000+02:00\"" },
					{ "DateTime_FromText_Category", "DateTime" },
					{ "DateTime_FromText_Example1_Code", "DateTime.FromText(\"2010-12-31T01:30:25\")" },
					{ "DateTime_FromText_Example1_Result", "#datetime(2010, 12, 31, 1, 30, 25)" },
					{ "DateTime_FromText_Example2_Code", "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])" },
					{ "DateTime_FromText_Example2_Result", "#datetime(2010, 12, 30, 2, 4, 50.36973)" },
					{ "DateTime_FromText_Example3_Code", "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])" },
					{ "DateTime_FromText_Example3_Result", "#datetime(2000, 2, 8, 3, 45, 12)" },
					{ "DateTime_FromText_Example4_Code", "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])" },
					{ "DateTime_FromText_Example4_Result", "#datetime(2010, 12, 31, 1, 30, 0)" },
					{ "DateTime_FromFileTime_Category", "DateTime" },
					{ "DateTime_FromFileTime_Example1_Code", "DateTime.FromFileTime(129876402529842245)" },
					{ "DateTime_FromFileTime_Example1_Result", "#datetime(2012, 7, 24, 14, 50, 52.9842245)" },
					{ "DateTimeZone_FromFileTime_Category", "DateTimeZone" },
					{ "DateTimeZone_FromFileTime_Example1_Code", "DateTimeZone.FromFileTime(129876402529842245)" },
					{ "DateTimeZone_FromFileTime_Example1_Result", "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)" },
					{ "DateTime_ToRecord_Category", "DateTime" },
					{ "DateTime_ToRecord_Example1_Code", "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))" },
					{ "DateTime_ToRecord_Example1_Result", "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]" },
					{ "DateTime_ToText_Category", "DateTime" },
					{ "DateTime_ToText_Example1_Code", "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))" },
					{ "DateTime_ToText_Example1_Result", "\"12/31/2010 1:30:25 AM\"" },
					{ "DateTime_ToText_Example2_Code", "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])" },
					{ "DateTime_ToText_Example2_Result", "\"30 Dez 2010 02:04:50.369730\"" },
					{ "DateTime_ToText_Example3_Code", "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])" },
					{ "DateTime_ToText_Example3_Result", "\"2000-02-08T03:45:12Z\"" },
					{ "Time_FromText_Category", "Time" },
					{ "Time_FromText_Example1_Code", "Time.FromText(\"10:12:31am\")" },
					{ "Time_FromText_Example1_Result", "#time(10, 12, 31)" },
					{ "Time_FromText_Example2_Code", "Time.FromText(\"1012\")" },
					{ "Time_FromText_Example2_Result", "#time(10, 12, 00)" },
					{ "Time_FromText_Example3_Code", "Time.FromText(\"10\")" },
					{ "Time_FromText_Example3_Result", "#time(10, 00, 00)" },
					{ "Time_ToRecord_Category", "Time" },
					{ "Time_ToRecord_Example1_Code", "Time.ToRecord(#time(11, 56, 2))" },
					{ "Time_ToRecord_Example1_Result", "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]" },
					{ "Time_ToText_Category", "Time" },
					{ "Time_ToText_Example1_Code", "Time.ToText(#time(11, 56, 2))" },
					{ "Time_ToText_Example1_Result", "\"11:56 AM\"" },
					{ "Time_ToText_Example2_Code", "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])" },
					{ "Time_ToText_Example2_Result", "\"11:56\"" },
					{ "Time_ToText_Example3_Code", "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])" },
					{ "Time_ToText_Example3_Result", "\"11:56:02\"" },
					{ "List_Dates_Category", "List.Generators" },
					{ "List_Dates_Example1_Code", "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))" },
					{ "List_Dates_Example1_Result", "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}" },
					{ "List_DateTimeZones_Category", "List.Generators" },
					{ "List_DateTimeZones_Example1_Code", "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))" },
					{ "List_DateTimeZones_Example1_Result", "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}" },
					{ "List_Times_Category", "List.Generators" },
					{ "List_Times_Example1_Code", "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))" },
					{ "List_Times_Example1_Result", "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}" },
					{ "List_Density_Category", "List" },
					{ "List_Density_Example1_Code", "List.Density({1, 2, \"A\", #date(2005, 1, 10), \"A\", 2, 2})" },
					{ "List_Density_Example1_Result", "Table.FromRecords({\r\n    [Value = 1, Count = 1],\r\n    [Value = 2, Count = 3],\r\n    [Value = \"A\", Count = 2],\r\n    [Value = #date(2005, 1, 10), Count = 1]\r\n})" },
					{ "List_Histogram_Category", "List" },
					{ "List_Histogram_Example1_Code", "List.Histogram({1, 2, 3, 4, 5, 6, 7, 8, 9, 10})" },
					{ "List_Histogram_Example1_Result", "Table.FromRecords({\r\n    [Start = 1, Center = 2.125, End = 3.25, Count = 3],\r\n    [Start = 3.25, Center = 4.375, End = 5.5, Count = 2],\r\n    [Start = 5.5, Center = 6.625, End = 7.75, Count = 2],\r\n    [Start = 7.75, Center = 8.875, End = 10, Count = 3]\r\n})\r\n" },
					{ "List_Histogram_Example2_Code", "List.Histogram({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3)" },
					{ "List_Histogram_Example2_Result", "Table.FromRecords({\r\n    [Start = 1, Center = 2.5, End = 4, Count = 3],\r\n    [Start = 4, Center = 5.5, End = 7, Count = 3],\r\n    [Start = 7, Center = 8.5, End = 10, Count = 4]\r\n})" },
					{ "List_Histogram_Example3_Code", "List.Histogram({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 4, {2, 9})\r\n" },
					{ "List_Histogram_Example3_Result", "Table.FromRecords({\r\n    [Start = 2, Center = 2.875, End = 3.75, Count = 2],\r\n    [Start = 3.75, Center = 4.625, End = 5.5, Count = 2],\r\n    [Start = 5.5, Center = 6.375, End = 7.25, Count = 2],\r\n    [Start = 7.25, Center = 8.125, End = 9, Count = 2]\r\n})" },
					{ "DB2_Database_Category", "Accessing data" },
					{ "Informix_Database_Category", "Accessing data" },
					{ "MQ_Queue_Category", "Accessing data" },
					{ "MySQL_Database_Category", "Accessing data" },
					{ "Xml_Tables_Category", "Accessing data" },
					{ "Xml_Tables_Example1_Code", "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))" },
					{ "Xml_Tables_Example1_Result", "table" },
					{ "PostgreSQL_Database_Category", "Accessing data" },
					{ "Sybase_Database_Category", "Accessing data" },
					{ "Teradata_Database_Category", "Accessing data" },
					{ "Number_From_Category", "Number.Conversion and formatting" },
					{ "Number_From_Example1_Code", "Number.From(\"4\")" },
					{ "Number_From_Example1_Result", "4" },
					{ "Number_From_Example2_Code", "Number.From(#datetime(2020, 3, 20, 6, 0, 0))" },
					{ "Number_From_Example2_Result", "43910.25" },
					{ "Number_From_Example3_Code", "Number.From(\"12.3%\")" },
					{ "Number_From_Example3_Result", "0.123" },
					{ "Binary_From_Category", "Binary" },
					{ "Binary_From_Example1_Code", "Binary.From(\"1011\")" },
					{ "Binary_From_Example1_Result", "Binary.FromText(\"1011\", BinaryEncoding.Base64)" },
					{ "DateTimeZone_From_Category", "DateTimeZone" },
					{ "DateTimeZone_From_Example1_Code", "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")" },
					{ "DateTimeZone_From_Example1_Result", "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)" },
					{ "DateTime_From_Category", "DateTime" },
					{ "DateTime_From_Example1_Code", "DateTime.From(#time(06, 45, 12))" },
					{ "DateTime_From_Example1_Result", "#datetime(1899, 12, 30, 06, 45, 12)" },
					{ "DateTime_From_Example2_Code", "DateTime.From(#date(1975, 4, 4))" },
					{ "DateTime_From_Example2_Result", "#datetime(1975, 4, 4, 0, 0, 0)" },
					{ "Date_From_Category", "Date" },
					{ "Date_From_Example1_Code", "Date.From(43910)" },
					{ "Date_From_Example1_Result", "#date(2020, 3, 20)" },
					{ "Date_From_Example2_Code", "Date.From(#datetime(1899, 12, 30, 06, 45, 12))" },
					{ "Date_From_Example2_Result", "#date(1899, 12, 30)" },
					{ "Duration_From_Category", "Duration" },
					{ "Duration_From_Example1_Code", "Duration.From(2.525)" },
					{ "Duration_From_Example1_Result", "#duration(2, 12, 36, 0)" },
					{ "Logical_From_Category", "Logical" },
					{ "Logical_From_Example1_Code", "Logical.From(2)" },
					{ "Logical_From_Example1_Result", "true" },
					{ "Time_From_Category", "Time" },
					{ "Time_From_Example1_Code", "Time.From(0.7575)" },
					{ "Time_From_Example1_Result", "#time(18, 10, 48)" },
					{ "Time_From_Example2_Code", "Time.From(#datetime(1899, 12, 30, 06, 45, 12))" },
					{ "Time_From_Example2_Result", "#time(06, 45, 12)" },
					{ "Type_AddTableKey_Category", "Type" },
					{ "Type_ReplaceTableKeys_Category", "Type" },
					{ "Type_TableKeys_Category", "Type" },
					{ "Type_TableRow_Category", "Type" },
					{ "Type_TableRow_Example1_Code", "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)" },
					{ "Type_TableRow_Example1_Result", "[Column1 = [Type = type any, Optional = false]]" },
					{ "Table_UnpivotOtherColumns_Category", "Table.Column operations" },
					{ "Table_UnpivotOtherColumns_Example1_Code", "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)" },
					{ "Table_UnpivotOtherColumns_Example1_Result", "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})" },
					{ "Table_Unpivot_Category", "Table.Column operations" },
					{ "Table_Unpivot_Example1_Code", "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)" },
					{ "Table_Unpivot_Example1_Result", "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})" },
					{ "DateTime_LocalNow_Category", "DateTime" },
					{ "DateTime_FixedLocalNow_Category", "DateTime" },
					{ "Table_RemoveRowsWithErrors_Category", "Table.Row operations" },
					{ "Table_RemoveRowsWithErrors_Example1_Code", "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)" },
					{ "Table_RemoveRowsWithErrors_Example1_Result", "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})" },
					{ "Table_RemoveRows_Example1_Code", "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)" },
					{ "Table_RemoveRows_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_RemoveRows_Example2_Code", "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)" },
					{ "Table_RemoveRows_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_RemoveRows_Example3_Code", "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)" },
					{ "Table_RemoveRows_Example3_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_SelectRowsWithErrors_Category", "Table.Row operations" },
					{ "Table_SelectRowsWithErrors_Example1_Code", "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]" },
					{ "Table_SelectRowsWithErrors_Example1_Result", "{\"Bob\"}" },
					{ "Table_SelectRows_Example1_Code", "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)" },
					{ "Table_SelectRows_Example1_Result", "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "Table_SelectRows_Example2_Code", "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)" },
					{ "Table_SelectRows_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})" },
					{ "MissingField_Error_Category", "Table.Parameter values" },
					{ "MissingField_Ignore_Category", "Table.Parameter values" },
					{ "MissingField_UseNull_Category", "Table.Parameter values" },
					{ "Replacer_ReplaceText_Category", "Replacer" },
					{ "Replacer_ReplaceText_Example1_Code", "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")" },
					{ "Replacer_ReplaceText_Example1_Result", "\"Hello world\"" },
					{ "Replacer_ReplaceValue_Category", "Replacer" },
					{ "Replacer_ReplaceValue_Example1_Code", "Replacer.ReplaceValue(11, 11, 10)" },
					{ "Replacer_ReplaceValue_Example1_Result", "10" },
					{ "TextEncoding_BigEndianUnicode_Category", "Text.Parameter values" },
					{ "TextEncoding_Unicode_Category", "Text.Parameter values" },
					{ "TextEncoding_Windows_Category", "Text.Parameter values" },
					{ "Table_Pivot_Category", "Table.Column operations" },
					{ "Table_Pivot_Example1_Code", "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)" },
					{ "Table_Pivot_Example1_Result", "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})" },
					{ "Table_Pivot_Example2_Code", "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)" },
					{ "Table_Pivot_Example2_Result", "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})" },
					{ "BinaryFormat_7BitEncodedSignedInteger_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_7BitEncodedUnsignedInteger_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_Binary_Category", "Binary Formats.Reading binary data" },
					{ "BinaryFormat_Byte_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_ByteOrder_Category", "Binary Formats.Controlling byte order" },
					{ "BinaryFormat_Choice_Category", "Binary Formats.Controlling what comes next" },
					{ "BinaryFormat_Choice_Example1_Code", "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_Choice_Example1_Result", "{3, 4}" },
					{ "BinaryFormat_Choice_Example2_Code", "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_Choice_Example2_Result", "[length = 2, list = {3, 4}]" },
					{ "BinaryFormat_Choice_Example3_Code", "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_Choice_Example3_Result", "{3, 4}" },
					{ "BinaryFormat_Decimal_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_Double_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_Length_Category", "Binary Formats.Limiting input" },
					{ "BinaryFormat_Length_Example1_Code", "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_Length_Example1_Result", "{1, 2}" },
					{ "BinaryFormat_Length_Example2_Code", "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_Length_Example2_Result", "{2}" },
					{ "BinaryFormat_List_Category", "Binary Formats.Reading lists" },
					{ "BinaryFormat_List_Example1_Code", "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_List_Example1_Result", "{1, 2, 3}" },
					{ "BinaryFormat_List_Example2_Code", "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_List_Example2_Result", "{1, 2}" },
					{ "BinaryFormat_List_Example3_Code", "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)" },
					{ "BinaryFormat_List_Example3_Result", "{1, 2}" },
					{ "BinaryFormat_Record_Category", "Binary Formats.Reading records" },
					{ "BinaryFormat_Record_Example1_Code", "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)" },
					{ "BinaryFormat_Record_Example1_Result", "[A = 1, B = 2]" },
					{ "BinaryFormat_SignedInteger16_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_SignedInteger32_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_SignedInteger64_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_Single_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_Text_Category", "Binary Formats.Reading text" },
					{ "BinaryFormat_Text_Example1_Code", "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)" },
					{ "BinaryFormat_Text_Example1_Result", "\"AB\"" },
					{ "BinaryFormat_Text_Example2_Code", "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)" },
					{ "BinaryFormat_Text_Example2_Result", "\"AB\"" },
					{ "BinaryFormat_Transform_Category", "Binary Formats.Transforming what was read" },
					{ "BinaryFormat_Transform_Example1_Code", "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)" },
					{ "BinaryFormat_Transform_Example1_Result", "2" },
					{ "BinaryFormat_UnsignedInteger16_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_UnsignedInteger32_Category", "Binary Formats.Reading numbers" },
					{ "BinaryFormat_UnsignedInteger64_Category", "Binary Formats.Reading numbers" },
					{ "ByteOrder_BigEndian_Category", "Binary Formats.Parameter values" },
					{ "ByteOrder_LittleEndian_Category", "Binary Formats.Parameter values" },
					{ "Table_FromPartitions_Category", "Table.Row operations" },
					{ "Table_FromPartitions_Example1_Code", "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)" },
					{ "Table_FromPartitions_Example1_Result", "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})" },
					{ "Value_NullableEquals_Category", "Values" },
					{ "BinaryFormat_Group_Category", "Binary Formats.Reading a group of items" },
					{ "BinaryFormat_Group_Example1_Code", "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)" },
					{ "BinaryFormat_Group_Example1_Result", "{11, {22, 22}, null, {}}" },
					{ "BinaryFormat_Group_Example2_Code", "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)" },
					{ "BinaryFormat_Group_Example2_Result", "{203, 123}" },
					{ "Binary_Buffer_Category", "Binary" },
					{ "Binary_Buffer_Example1_Code", "Binary.Buffer(Binary.FromList({0..10}))" },
					{ "Binary_Buffer_Example1_Result", "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})" },
					{ "Binary_Compress_Category", "Binary" },
					{ "Binary_Compress_Example1_Code", "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)" },
					{ "Binary_Compress_Example1_Result", "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})" },
					{ "Binary_Decompress_Category", "Binary" },
					{ "Binary_Decompress_Example1_Code", "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)" },
					{ "Binary_Decompress_Example1_Result", "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})" },
					{ "Compression_GZip_Category", "Binary.Parameter values" },
					{ "Compression_Deflate_Category", "Binary.Parameter values" },
					{ "BinaryOccurrence_Optional_Category", "Binary Formats.Parameter values" },
					{ "BinaryOccurrence_Repeating_Category", "Binary Formats.Parameter values" },
					{ "BinaryOccurrence_Required_Category", "Binary Formats.Parameter values" },
					{ "Occurrence_Optional_Category", "Binary Formats.Parameter values" },
					{ "Occurrence_Repeating_Category", "Binary Formats.Parameter values" },
					{ "Occurrence_Required_Category", "Binary Formats.Parameter values" },
					{ "Record_FromList_Category", "Record.Serialization" },
					{ "Record_FromList_Example1_Code", "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})" },
					{ "Record_FromList_Example1_Result", "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]" },
					{ "Record_FromList_Example2_Code", "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])" },
					{ "Record_FromList_Example2_Result", "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]" },
					{ "Record_ToList_Category", "Record.Serialization" },
					{ "Record_ToList_Example1_Code", "Record.ToList([A = 1, B = 2, C = 3])" },
					{ "Record_ToList_Example1_Result", "{1, 2, 3}" },
					{ "Type_TableColumn_Category", "Type" },
					{ "BinaryFormat_Null_Category", "Binary Formats.Controlling what comes next" },
					{ "Table_PartitionValues_Category", "Table.Information" },
					{ "Table_Partition_Example1_Code", "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)" },
					{ "Table_Partition_Example1_Result", "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}" },
					{ "Table_Product_Category", "Table" },
					{ "Table_Product_Example1_Code", "Table.Product(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    \"a\"\r\n)" },
					{ "Table_Product_Example1_Result", "15" },
					{ "Table_Product_Example2_Code", "Table.Product(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    {\"a\", \"b\"}\r\n)" },
					{ "Table_Product_Example2_Result", "[a = 15, b = 48]" },
					{ "Table_TypeFromColumns_Category", "Table" },
					{ "Table_TypeFromColumns_Example1_Code", "Table.TypeFromColumns({\r\n    {\"a\", {1, 2, 3}},\r\n    {\"b\", {\"abc\"}}\r\n})" },
					{ "Table_TypeFromColumns_Example1_Result", "type table [\r\n    a = number,\r\n    b = nullable text\r\n]" },
					{ "Table_TypeFromList_Category", "Table" },
					{ "Table_TypeFromList_Example1_Code", "Table.TypeFromList({\r\n    [A = 1],\r\n    [A = 1, B = \"x\"],\r\n    [A = 3, B = 3, C = 5]\r\n})" },
					{ "Table_TypeFromList_Example1_Result", "type table [\r\n    A = number,\r\n    B = any,\r\n    C = nullable number\r\n]" },
					{ "Soda_Feed_Category", "Accessing data" },
					{ "Cube_DisplayFolders_Category", "Cube" },
					{ "Cube_Dimensions_Category", "Cube" },
					{ "Cube_Measures_Category", "Cube" },
					{ "Cube_AddMeasureColumn_Category", "Cube" },
					{ "Cube_AddAndExpandDimensionColumn_Category", "Cube" },
					{ "Cube_CollapseAndRemoveColumns_Category", "Cube" },
					{ "Cube_Properties_Category", "Cube" },
					{ "Cube_MeasureProperties_Category", "Cube" },
					{ "Cube_MeasureProperty_Category", "Cube" },
					{ "Cube_Transform_Category", "Cube" },
					{ "Salesforce_Data_Category", "Accessing data" },
					{ "Salesforce_Reports_Category", "Accessing data" },
					{ "Byte_From_Category", "Number.Conversion and formatting" },
					{ "Byte_From_Example1_Code", "Byte.From(\"4\")" },
					{ "Byte_From_Example1_Result", "4" },
					{ "Byte_From_Example2_Code", "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)" },
					{ "Byte_From_Example2_Result", "5" },
					{ "Int8_From_Category", "Number.Conversion and formatting" },
					{ "Int8_From_Example1_Code", "Int8.From(\"4\")" },
					{ "Int8_From_Example1_Result", "4" },
					{ "Int8_From_Example2_Code", "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)" },
					{ "Int8_From_Example2_Result", "5" },
					{ "Int16_From_Category", "Number.Conversion and formatting" },
					{ "Int16_From_Example1_Code", "Int64.From(\"4\")" },
					{ "Int16_From_Example1_Result", "4" },
					{ "Int16_From_Example2_Code", "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)" },
					{ "Int16_From_Example2_Result", "5" },
					{ "Int32_From_Category", "Number.Conversion and formatting" },
					{ "Int32_From_Example1_Code", "Int32.From(\"4\")" },
					{ "Int32_From_Example1_Result", "4" },
					{ "Int32_From_Example2_Code", "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)" },
					{ "Int32_From_Example2_Result", "5" },
					{ "Int64_From_Category", "Number.Conversion and formatting" },
					{ "Int64_From_Example1_Code", "Int64.From(\"4\")" },
					{ "Int64_From_Example1_Result", "4" },
					{ "Int64_From_Example2_Code", "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)" },
					{ "Int64_From_Example2_Result", "5" },
					{ "Single_From_Category", "Number.Conversion and formatting" },
					{ "Single_From_Example1_Code", "Single.From(\"1.5\")" },
					{ "Single_From_Example1_Result", "1.5" },
					{ "Decimal_From_Category", "Number.Conversion and formatting" },
					{ "Decimal_From_Example1_Code", "Decimal.From(\"4.5\")" },
					{ "Decimal_From_Example1_Result", "4.5" },
					{ "Double_From_Category", "Number.Conversion and formatting" },
					{ "Double_From_Example1_Code", "Double.From(\"4.5\")" },
					{ "Double_From_Example1_Result", "4.5" },
					{ "Currency_From_Category", "Number.Conversion and formatting" },
					{ "Currency_From_Example1_Code", "Currency.From(\"1.23455\")" },
					{ "Currency_From_Example1_Result", "1.2346" },
					{ "Currency_From_Example2_Code", "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)" },
					{ "Currency_From_Example2_Result", "1.2345" },
					{ "Percentage_From_Category", "Number.Conversion and formatting" },
					{ "Percentage_From_Example1_Code", "Percentage.From(\"12.3%\")" },
					{ "Percentage_From_Example1_Result", "0.123" },
					{ "Comparer_Equals_Category", "Comparer" },
					{ "Comparer_Equals_Example1_Code", "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")" },
					{ "Comparer_Equals_Example1_Result", "false" },
					{ "Comparer_FromCulture_Category", "Comparer" },
					{ "Comparer_FromCulture_Example1_Code", "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")" },
					{ "Comparer_FromCulture_Example1_Result", "-1" },
					{ "Comparer_FromCulture_Example2_Code", "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")" },
					{ "Comparer_FromCulture_Example2_Result", "0" },
					{ "Comparer_Ordinal_Category", "Comparer" },
					{ "Comparer_OrdinalIgnoreCase_Category", "Comparer" },
					{ "Comparer_OrdinalIgnoreCase_Example1_Code", "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")" },
					{ "Comparer_OrdinalIgnoreCase_Example1_Result", "0" },
					{ "Comparer_Ordinal_Example1_Code", "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")" },
					{ "Comparer_Ordinal_Example1_Result", "false" },
					{ "Type_FunctionParameters_Category", "Type" },
					{ "Type_FunctionParameters_Example1_Code", "Type.FunctionParameters(type function (x as number, y as text) as any)" },
					{ "Type_FunctionParameters_Example1_Result", "[x = type number, y = type text]" },
					{ "Type_FunctionReturn_Category", "Type" },
					{ "Type_FunctionReturn_Example1_Code", "Type.FunctionReturn(type function () as any)" },
					{ "Type_FunctionReturn_Example1_Result", "type any" },
					{ "Type_FunctionRequiredParameters_Category", "Type" },
					{ "Type_FunctionRequiredParameters_Example1_Code", "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)" },
					{ "Type_FunctionRequiredParameters_Example1_Result", "1" },
					{ "Type_IsNullable_Category", "Type" },
					{ "Type_IsNullable_Example1_Code", "Type.IsNullable(type number)" },
					{ "Type_IsNullable_Example1_Result", "false" },
					{ "Type_IsNullable_Example2_Code", "Type.IsNullable(type nullable number)" },
					{ "Type_IsNullable_Example2_Result", "true" },
					{ "Type_NonNullable_Category", "Type" },
					{ "Type_NonNullable_Example1_Code", "Type.NonNullable(type nullable number)" },
					{ "Type_NonNullable_Example1_Result", "type number" },
					{ "Type_ClosedRecord_Category", "Type" },
					{ "Type_ClosedRecord_Example1_Code", "Type.ClosedRecord(type [A = number, ...])" },
					{ "Type_ClosedRecord_Example1_Result", "type [A = number]" },
					{ "Type_OpenRecord_Category", "Type" },
					{ "Type_OpenRecord_Example1_Code", "Type.OpenRecord(type [A = number])" },
					{ "Type_OpenRecord_Example1_Result", "type [A = number, ...]" },
					{ "Type_IsOpenRecord_Category", "Type" },
					{ "Type_IsOpenRecord_Example1_Code", "Type.IsOpenRecord(type [A = number, ...])" },
					{ "Type_IsOpenRecord_Example1_Result", "true" },
					{ "Type_RecordFields_Category", "Type" },
					{ "Type_RecordFields_Example1_Code", "Type.RecordFields(type [A = number, optional B = any])" },
					{ "Type_RecordFields_Example1_Result", "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]" },
					{ "Type_ForFunction_Category", "Type" },
					{ "Type_ForFunction_Example1_Code", "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)" },
					{ "Type_ForFunction_Example1_Result", "type function (X as number) as number" },
					{ "Type_ForRecord_Category", "Type" },
					{ "Type_ListItem_Category", "Type" },
					{ "Type_ListItem_Example1_Code", "Type.ListItem(type {number})" },
					{ "Type_ListItem_Example1_Result", "type number" },
					{ "AnalysisServices_Databases_Category", "Accessing data" },
					{ "Cube_AttributeMemberId_Category", "Cube" },
					{ "Cube_AttributeMemberProperty_Category", "Cube" },
					{ "Cube_PropertyKey_Category", "Cube" },
					{ "Odbc_Query_Category", "Accessing data" },
					{ "Odbc_InferOptions_Category", "Accessing data" },
					{ "LimitClauseKind_Type_Category", "Accessing data.Parameter values" },
					{ "LimitClauseKind_None_Category", "Accessing data.Parameter values" },
					{ "LimitClauseKind_Top_Category", "Accessing data.Parameter values" },
					{ "LimitClauseKind_LimitOffset_Category", "Accessing data.Parameter values" },
					{ "LimitClauseKind_Limit_Category", "Accessing data.Parameter values" },
					{ "LimitClauseKind_AnsiSql2008_Category", "Accessing data.Parameter values" },
					{ "OleDb_Query_Category", "Accessing data" },
					{ "BufferMode_Type_Category", "Accessing data.Parameter values" },
					{ "BufferMode_Eager_Category", "Accessing data.Parameter values" },
					{ "BufferMode_Delayed_Category", "Accessing data.Parameter values" },
					{ "BufferMode_Streaming_Category", "Accessing data.Parameter values" },
					{ "Function_InvokeAfter_Category", "Function" },
					{ "Diagnostics_Trace_Category", "Diagnostics" },
					{ "Diagnostics_Trace_Example1_Code", "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)" },
					{ "Diagnostics_Trace_Example1_Result", "\"123\"" },
					{ "Diagnostics_ActivityId_Category", "Diagnostics" },
					{ "Diagnostics_CorrelationId_Category", "Diagnostics" },
					{ "TraceLevel_Type_Category", "Diagnostics" },
					{ "TraceLevel_Critical_Category", "Diagnostics" },
					{ "TraceLevel_Error_Category", "Diagnostics" },
					{ "TraceLevel_Warning_Category", "Diagnostics" },
					{ "TraceLevel_Information_Category", "Diagnostics" },
					{ "TraceLevel_Verbose_Category", "Diagnostics" },
					{ "Function_IsDataSource_Category", "Type" },
					{ "Type_Union_Category", "Type" },
					{ "GoogleAnalytics_Accounts_Category", "Accessing data" },
					{ "Odbc_DataSource_Category", "Accessing data" },
					{ "AdoDotNet_Query_Category", "Accessing data" },
					{ "AdoDotNet_DataSource_Category", "Accessing data" },
					{ "Text_Format_Category", "Text.Conversions from and to text" },
					{ "Text_Format_Example1_Code", "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})" },
					{ "Text_Format_Example1_Result", "\"17, 7, and 22.\"" },
					{ "Text_Format_Example2_Code", "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)" },
					{ "Text_Format_Example2_Result", "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\"" },
					{ "AnalysisServices_Database_Category", "Accessing data" },
					{ "Table_FromColumns_Example3_Code", "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)" },
					{ "Table_FromColumns_Example3_Result", "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})" },
					{ "Table_InsertRows_Example2_Code", "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)" },
					{ "Table_InsertRows_Example2_Result", "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})" },
					{ "Tables_GetRelationships_Category", "Table.Information" },
					{ "Table_View_Category", "Table.Table construction" },
					{ "Table_View_Example1_Code", "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)" },
					{ "Table_View_Example1_Result", "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})" },
					{ "Binary_View_Category", "Binary" },
					{ "Binary_View_Example1_Code", "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)" },
					{ "Binary_View_Example1_Result", "Text.ToBinary(\"hello world!\")" },
					{ "Action_View_Category", "Action" },
					{ "Cube_ApplyParameter_Category", "Cube" },
					{ "Cube_Parameters_Category", "Cube" },
					{ "RowExpression_Column_Category", "Table.Table construction" },
					{ "RowExpression_Column_Example1_Code", "RowExpression.Column(\"CustomerName\")" },
					{ "RowExpression_Column_Example1_Result", "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]" },
					{ "RowExpression_From_Category", "Table.Table construction" },
					{ "RowExpression_From_Example1_Code", "RowExpression.From(each [CustomerName] = \"ALFKI\")" },
					{ "RowExpression_From_Example1_Result", "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]" },
					{ "RowExpression_Row_Category", "Table.Table construction" },
					{ "ItemExpression_From_Category", "Table.Table construction" },
					{ "ItemExpression_From_Example1_Code", "ItemExpression.From(each _ <> null)" },
					{ "ItemExpression_From_Example1_Result", "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]" },
					{ "ItemExpression_Item_Category", "Table.Table construction" },
					{ "SapHana_Database_Category", "Accessing data" },
					{ "SapHanaRangeOperator_Type_Category", "Accessing data" },
					{ "SapHanaRangeOperator_GreaterThan_Category", "Accessing data" },
					{ "SapHanaRangeOperator_LessThan_Category", "Accessing data" },
					{ "SapHanaRangeOperator_GreaterThanOrEquals_Category", "Accessing data" },
					{ "SapHanaRangeOperator_LessThanOrEquals_Category", "Accessing data" },
					{ "SapHanaRangeOperator_Equals_Category", "Accessing data" },
					{ "SapHanaRangeOperator_NotEquals_Category", "Accessing data" },
					{ "SapHanaRangeOperator_Between_Category", "Accessing data" },
					{ "SapHanaDistribution_Off_Category", "Accessing data" },
					{ "SapHanaDistribution_Connection_Category", "Accessing data" },
					{ "SapHanaDistribution_Statement_Category", "Accessing data" },
					{ "SapHanaDistribution_All_Category", "Accessing data" },
					{ "SapHanaDistribution_Type_Category", "Accessing data" },
					{ "SapBusinessWarehouse_Cubes_Category", "Accessing data" },
					{ "SapBusinessWarehouseExecutionMode_Type_Category", "Accessing data" },
					{ "SapBusinessWarehouseExecutionMode_DataStream_Category", "Accessing data" },
					{ "SapBusinessWarehouseExecutionMode_BasXml_Category", "Accessing data" },
					{ "SapBusinessWarehouseExecutionMode_BasXmlGzip_Category", "Accessing data" },
					{ "AdobeAnalytics_Cubes_Category", "Accessing data" },
					{ "RData_FromBinary_Category", "Accessing data" },
					{ "Table_Schema_Category", "Table.Information" },
					{ "Type_Facets_Category", "Type" },
					{ "Type_ReplaceFacets_Category", "Type" },
					{ "Table_Profile_Category", "Table.Information" },
					{ "Type_TableSchema_Category", "Type" },
					{ "Value_NativeQuery_Category", "Values" },
					{ "SqlExpression_ToExpression_Category", "Values.Implementation" },
					{ "SqlExpression_SchemaFrom_Category", "Values.Implementation" },
					{ "DirectQueryCapabilities_From_Category", "Values.Implementation" },
					{ "OleDb_DataSource_Category", "Accessing data" },
					{ "Cube_ReplaceDimensions_Category", "Cube" },
					{ "Value_ViewFunction_Category", "Values.Implementation" },
					{ "Value_ViewError_Category", "Values.Implementation" },
					{ "Table_ViewFunction_Category", "Table.Table construction" },
					{ "Table_ViewError_Category", "Table.Table construction" },
					{ "Binary_ViewFunction_Category", "Binary" },
					{ "Binary_ViewError_Category", "Binary" },
					{ "Action_ViewFunction_Category", "Action" },
					{ "Action_ViewError_Category", "Action" },
					{ "JoinSide_Left_Category", "Table.Parameter values" },
					{ "JoinSide_Right_Category", "Table.Parameter values" },
					{ "Guid_From_Category", "Text.Conversions from and to text" },
					{ "Guid_From_Example1_Code", "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")" },
					{ "Guid_From_Example1_Result", "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\"" },
					{ "Guid_From_Example2_Code", "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")" },
					{ "Guid_From_Example2_Result", "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\"" },
					{ "Guid_From_Example3_Code", "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")" },
					{ "Guid_From_Example3_Result", "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\"" },
					{ "Guid_From_Example4_Code", "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")" },
					{ "Guid_From_Example4_Result", "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\"" },
					{ "Text_Select_Category", "Text.Modification" },
					{ "Text_Select_Example1_Code", "Text.Select(\"a,b;c\", {\"a\"..\"z\"})" },
					{ "Text_Select_Example1_Result", "\"abc\"" },
					{ "Environment_Libraries_Category", "Introspection" },
					{ "Environment_FeatureSwitch_Category", "Introspection" },
					{ "Environment_Configuration_Category", "Introspection" },
					{ "Text_Reverse_Category", "Text.Transformations" },
					{ "Text_Reverse_Example1_Code", "Text.Reverse(\"123\")" },
					{ "Text_Reverse_Example1_Result", "\"321\"" },
					{ "List_ParallelInvoke_Category", "List" },
					{ "List_ParallelInvoke_Example1_Code", "List.ParallelInvoke({() => 1, () => 2, () => 3}, 2)" },
					{ "List_ParallelInvoke_Example1_Result", "{1, 2, 3}" },
					{ "TableAction_Tee_Category", "Action" },
					{ "Table_FuzzyJoin_Category", "Table.Transformation" },
					{ "Table_FuzzyJoin_Example1_Code", "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)" },
					{ "Table_FuzzyJoin_Example1_Result", "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})" },
					{ "Table_FuzzyNestedJoin_Category", "Table.Transformation" },
					{ "Table_FuzzyNestedJoin_Example1_Code", "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)" },
					{ "Table_FuzzyNestedJoin_Example1_Result", "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})" },
					{ "Function_ScalarVector_Category", "Function" },
					{ "Function_ScalarVector_Example1_Code", "let\r\n    Compute.ScoreScalar = (left, right) => left * right,\r\n    Compute.ScoreVector = (input) => let\r\n        chunks = Table.Split(input, 100),\r\n        scoreChunk = (chunk) => Table.TransformRows(chunk, each Compute.ScoreScalar([left], [right]))\r\n      in\r\n        List.Combine(List.Transform(chunks, scoreChunk)),\r\n    Compute.Score = Function.ScalarVector(type function (left as number, right as number) as number, Compute.ScoreVector)\r\nin\r\n    Table.AddColumn(\r\n        Table.FromRecords({\r\n            [a = 1, b = 2],\r\n            [a = 3, b = 4]\r\n        }),\r\n        \"Result\",\r\n        each Compute.Score([a], [b])\r\n    )" },
					{ "Function_ScalarVector_Example1_Result", "Table.FromRecords({\r\n    [a = 1, b = 2, Result = 2],\r\n    [a = 3, b = 4, Result = 12]\r\n})" },
					{ "Essbase_Cubes_Category", "Accessing data" },
					{ "ODataOmitValues_Nulls_Category", "Accessing data" },
					{ "ODataOmitValues_Type_Category", "Accessing data" },
					{ "AccessControlEntry_Type_Category", "Accessing data" },
					{ "AccessControlEntry_ConditionContextType_Category", "Accessing data" },
					{ "AccessControlEntry_ConditionToIdentities_Category", "Accessing data" },
					{ "AccessControlKind_Type_Category", "Accessing data" },
					{ "AccessControlKind_Allow_Category", "Accessing data" },
					{ "AccessControlKind_Deny_Category", "Accessing data" },
					{ "IdentityProvider_Type_Category", "Accessing data" },
					{ "IdentityProvider_Default_Category", "Accessing data" },
					{ "Identity_Type_Category", "Accessing data" },
					{ "Identity_From_Category", "Accessing data" },
					{ "Identity_IsMemberOf_Category", "Accessing data" },
					{ "Cdm_Contents_Category", "Accessing data" },
					{ "DeltaLake_Table_Category", "Accessing data" },
					{ "Html_Table_Category", "Accessing data" },
					{ "Parquet_Document_Category", "Accessing data" },
					{ "Parquet_Metadata_Category", "Accessing data" },
					{ "Pdf_Tables_Category", "Accessing data" },
					{ "Web_BrowserContents_Category", "Accessing data" },
					{ "Cdpa_Database_Category", "Accessing data" },
					{ "Table_ConformToPageReader_Category", "Table.Transformation" },
					{ "List_ConformToPageReader_Category", "List.Transformation functions" },
					{ "Value_Lineage_Category", "Expression" },
					{ "Value_Traits_Category", "Expression" },
					{ "Graph_Nodes_Category", "Expression" },
					{ "Value_Expression_Category", "Expression" },
					{ "Value_Optimize_Category", "Expression" },
					{ "Value_Alternates_Category", "Expression" },
					{ "Compression_Brotli_Category", "Binary.Parameter values" },
					{ "Compression_LZ4_Category", "Binary.Parameter values" },
					{ "Compression_None_Category", "Binary.Parameter values" },
					{ "Compression_Snappy_Category", "Binary.Parameter values" },
					{ "Compression_Zstandard_Category", "Binary.Parameter values" },
					{ "GeographyPoint_From_Category", "Record.Serialization" },
					{ "Geography_FromWellKnownText_Category", "Record.Serialization" },
					{ "Geography_ToWellKnownText_Category", "Record.Serialization" },
					{ "GeometryPoint_From_Category", "Record.Serialization" },
					{ "Geometry_FromWellKnownText_Category", "Record.Serialization" },
					{ "Geometry_ToWellKnownText_Category", "Record.Serialization" },
					{ "Binary_Range_Category", "Binary" },
					{ "Binary_Range_Example1_Code", "Binary.Range(#binary({0..10}), 6)" },
					{ "Binary_Range_Example1_Result", "#binary({6, 7, 8, 9, 10})" },
					{ "Binary_Range_Example2_Code", "Binary.Range(#binary({0..10}), 6, 2)" },
					{ "Binary_Range_Example2_Result", "#binary({6, 7})" },
					{ "Binary_Split_Category", "Binary" },
					{ "Table_SplitAt_Example1_Code", "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)" },
					{ "Table_SplitAt_Example1_Result", "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}" },
					{ "SqlDatabase_View_Category", "Table.Table construction" },
					{ "TimeZone_Current_Category", "DateTimeZone" },
					{ "Odbc_DataSource_Example1_Code", "Odbc.DataSource(\"dsn=your_dsn\")" },
					{ "Odbc_DataSource_Example1_Result", "table" },
					{ "Odbc_Query_Example1_Code", "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")" },
					{ "Odbc_Query_Example1_Result", "table" },
					{ "Odbc_InferOptions_Example1_Code", "Odbc.InferOptions(\"dsn=your_dsn\")" },
					{ "Odbc_InferOptions_Example1_Result", "record" },
					{ "Table_Buffer_Example1_Code", "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable" },
					{ "Table_Buffer_Example1_Result", "table" },
					{ "Table_StopFolding_Example1_Code", "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable" },
					{ "Table_StopFolding_Example1_Result", "table" },
					{ "Combiner_CombineTextByDelimiter_Example1_Code", "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})" },
					{ "Combiner_CombineTextByDelimiter_Example1_Result", "\"a;b;c\"" },
					{ "Combiner_CombineTextByDelimiter_Example2_Code", "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged" },
					{ "Combiner_CombineTextByDelimiter_Example2_Result", "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)" },
					{ "Combiner_CombineTextByEachDelimiter_Example1_Code", "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})" },
					{ "Combiner_CombineTextByEachDelimiter_Example1_Result", "\"a=b+c\"" },
					{ "Combiner_CombineTextByLengths_Example1_Code", "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})" },
					{ "Combiner_CombineTextByLengths_Example1_Result", "\"abbccc\"" },
					{ "Combiner_CombineTextByLengths_Example2_Code", "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})" },
					{ "Combiner_CombineTextByLengths_Example2_Result", "\"abbccc***\"" },
					{ "Combiner_CombineTextByPositions_Example1_Code", "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})" },
					{ "Combiner_CombineTextByPositions_Example1_Result", "\"abc  def  ghi\"" },
					{ "Combiner_CombineTextByRanges_Example1_Code", "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})" },
					{ "Combiner_CombineTextByRanges_Example1_Result", "\"a  de ghijkl\"" },
					{ "Web_DefaultProxy_Category", "Extension" },
					{ "Binary_ApproximateLength_Example1_Code", "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))" },
					{ "Binary_ApproximateLength_Example1_Result", "9" },
					{ "Table_ApproximateRowCount_Example1_Code", "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))" },
					{ "Table_ApproximateRowCount_Example1_Result", "number" },
					{ "OData_Feed_Example1_Code", "OData.Feed(\"https://services.odata.org/V4/TripPinService\")" },
					{ "OData_Feed_Example1_Result", "table" },
					{ "Splitter_SplitTextByAnyDelimiter_Example1_Code", "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")" },
					{ "Splitter_SplitTextByAnyDelimiter_Example1_Result", "{\"a\", \"b\", \"c,d;e\", \"f\"}" },
					{ "Splitter_SplitTextByAnyDelimiter_Example2_Code", "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")" },
					{ "Splitter_SplitTextByAnyDelimiter_Example2_Result", "{\"a,b\", \"c\", \"d\"}" },
					{ "Splitter_SplitTextByEachDelimiter_Example1_Code", "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")" },
					{ "Splitter_SplitTextByEachDelimiter_Example1_Result", "{\"a\", \"b\", \"c,d\"}" },
					{ "Splitter_SplitTextByEachDelimiter_Example2_Code", "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")" },
					{ "Splitter_SplitTextByEachDelimiter_Example2_Result", "{\"a,\"\"b\", \"c\"\"\", \"d\"}" },
					{ "Splitter_SplitTextByLengths_Example1_Code", "Splitter.SplitTextByLengths({2, 3})(\"AB123\")" },
					{ "Splitter_SplitTextByLengths_Example1_Result", "{\"AB\", \"123\"}" },
					{ "Splitter_SplitTextByLengths_Example2_Code", "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")" },
					{ "Splitter_SplitTextByLengths_Example2_Result", "{\"WA\", \"98052\"}" },
					{ "Splitter_SplitTextByRepeatedLengths_Example1_Code", "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")" },
					{ "Splitter_SplitTextByRepeatedLengths_Example1_Result", "{\"123\", \"456\", \"78\"}" },
					{ "Splitter_SplitTextByRepeatedLengths_Example2_Code", "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")" },
					{ "Splitter_SplitTextByRepeatedLengths_Example2_Result", "{\"87\", \"654\", \"321\"}" },
					{ "Splitter_SplitTextByPositions_Example1_Code", "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")" },
					{ "Splitter_SplitTextByPositions_Example1_Result", "{\"ABC\", \"|\", \"12345\"}" },
					{ "Splitter_SplitTextByPositions_Example2_Code", "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")" },
					{ "Splitter_SplitTextByPositions_Example2_Result", "{\"Redmond\", \"98052\"}" },
					{ "Splitter_SplitTextByWhitespace_Example1_Code", "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")" },
					{ "Splitter_SplitTextByWhitespace_Example1_Result", "{\"a\", \"b\", \"c\"}" },
					{ "Splitter_SplitTextByRanges_Example1_Code", "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")" },
					{ "Splitter_SplitTextByRanges_Example1_Result", "{\"code\", \"delimiter\"}" },
					{ "Splitter_SplitTextByRanges_Example2_Code", "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")" },
					{ "Splitter_SplitTextByRanges_Example2_Result", "{\"WA\", \"98052\"}" },
					{ "Splitter_SplitTextByRanges_Example3_Code", "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")" },
					{ "Splitter_SplitTextByRanges_Example3_Result", "{\"98052\", \"Redmond\"}" },
					{ "Splitter_SplitTextByDelimiter_Example1_Code", "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")" },
					{ "Splitter_SplitTextByDelimiter_Example1_Result", "{\"a\", \"b,c\", \"d\"}" },
					{ "Splitter_SplitTextByCharacterTransition_Example1_Code", "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")" },
					{ "Splitter_SplitTextByCharacterTransition_Example1_Result", "{\"Abc\", \"123\"}" },
					{ "Table_Keys_Example1_Code", "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys" },
					{ "Table_Keys_Example1_Result", "{[Columns = {\"Id\"}, Primary = true]}" },
					{ "Table_ReplaceKeys_Example1_Code", "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable" },
					{ "Table_ReplaceKeys_Example1_Result", "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})" },
					{ "ValueAction_BeginTransaction_Category", "Action" },
					{ "ValueAction_CommitTransaction_Category", "Action" },
					{ "Value_Versions_Category", "Action" },
					{ "Value_VersionIdentity_Category", "Action" },
					{ "_Pound_table_Example1_Code", "#table({}, {})" },
					{ "_Pound_table_Example1_Result", "#table({}, {})" },
					{ "_Pound_table_Example2_Code", "#table(null, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "_Pound_table_Example2_Result", "#table({\"Column1\", \"Column2\"}, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "_Pound_table_Example3_Code", "#table(2, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "_Pound_table_Example3_Result", "#table({\"Column1\", \"Column2\"}, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "_Pound_table_Example4_Code", "#table({\"Name\", \"Score\"}, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "_Pound_table_Example4_Result", "#table({\"Name\", \"Score\"}, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "_Pound_table_Example5_Code", "#table(type table [Name = text, Score = number], {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "_Pound_table_Example5_Result", "#table(type table [Name = text, Score = number], {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "Type_ForRecord_Example1_Code", "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})" },
					{ "Type_ForRecord_Example1_Result", "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)" },
					{ "Type_ReplaceTableKeys_Example1_Code", "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys" },
					{ "Type_ReplaceTableKeys_Example1_Result", "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}" },
					{ "Type_ReplaceTableKeys_Example2_Code", "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys" },
					{ "Type_ReplaceTableKeys_Example2_Result", "{}" },
					{ "Type_TableKeys_Example1_Code", "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys" },
					{ "Type_TableKeys_Example1_Result", "{[Columns = {\"ID\"}, Primary = true]}" },
					{ "Table_WithErrorContext_Category", "Values.Implementation" },
					{ "Action_WithErrorContext_Category", "Values.Implementation" },
					{ "Function_InvokeWithErrorContext_Category", "Values.Implementation" },
					{ "Module_Versions_Category", "Values.Implementation" },
					{ "CacheManager_Cache_Category", "Values.Implementation" },
					{ "CacheManager_Caches_Category", "Values.Implementation" },
					{ "CacheManager_InvokeWithCaches_Category", "Values.Implementation" },
					{ "Value_RemoveMetadata_Example1_Code", "Value.Metadata(\r\n    Value.RemoveMetadata(\"abc\" meta [a = 1, b = 2])\r\n)" },
					{ "Value_RemoveMetadata_Example1_Result", "[]" },
					{ "Value_RemoveMetadata_Example2_Code", "Value.Metadata(\r\n    Value.RemoveMetadata(\"abc\" meta [a = 1, b = 2], {\"a\"})\r\n)" },
					{ "Value_RemoveMetadata_Example2_Result", "[b = 2]" }
				};
			}
			string text;
			if (FunctionConstStrings.strings.TryGetValue(name, out text))
			{
				return text;
			}
			return null;
		}

		// Token: 0x04000695 RID: 1685
		private static Dictionary<string, string> strings;
	}
}
