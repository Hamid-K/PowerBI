<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessControlEntry_ConditionContextType_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AccessControlEntry_ConditionToIdentities_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AccessControlEntry_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AccessControlKind_Allow_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AccessControlKind_Deny_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AccessControlKind_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Access_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Action_DoNothing_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Action_Return_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Action_Return_Example1_Code" xml:space="preserve">
    <value>Action.Return("hello world!")</value>
  </data>
  <data name="Action_Return_Example1_Result" xml:space="preserve">
    <value>action</value>
  </data>
  <data name="Action_Sequence_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Action_Sequence_Example1_Code" xml:space="preserve">
    <value>Action.Sequence({
    Action.Return("Hello"),
    (result) =&gt; Action.Return(result &amp; " " &amp; "world!")
})</value>
  </data>
  <data name="Action_Sequence_Example1_Result" xml:space="preserve">
    <value>action</value>
  </data>
  <data name="Action_Try_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Action_Try_Example1_Code" xml:space="preserve">
    <value>Action.Try(Action.Sequence({() =&gt; Action.Return(error "Error!")}))</value>
  </data>
  <data name="Action_Try_Example1_Result" xml:space="preserve">
    <value>action</value>
  </data>
  <data name="Action_Try_Example2_Code" xml:space="preserve">
    <value>Action.Try(Action.Sequence({() =&gt; Action.Return("Success!")}))</value>
  </data>
  <data name="Action_Try_Example2_Result" xml:space="preserve">
    <value>action</value>
  </data>
  <data name="Action_ViewError_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Action_ViewFunction_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Action_View_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Action_WithErrorContext_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="ActiveDirectory_Domains_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AdoDotNet_DataSource_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AdoDotNet_Query_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AdobeAnalytics_Cubes_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AnalysisServices_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AnalysisServices_Databases_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AzureStorage_BlobContents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AzureStorage_Blobs_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AzureStorage_DataLakeContents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AzureStorage_DataLake_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="AzureStorage_Tables_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="BinaryEncoding_Base64_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="BinaryEncoding_Hex_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="BinaryFormat_7BitEncodedSignedInteger_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_7BitEncodedUnsignedInteger_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_Binary_Category" xml:space="preserve">
    <value>Binary Formats.Reading binary data</value>
  </data>
  <data name="BinaryFormat_ByteOrder_Category" xml:space="preserve">
    <value>Binary Formats.Controlling byte order</value>
  </data>
  <data name="BinaryFormat_Byte_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_Choice_Category" xml:space="preserve">
    <value>Binary Formats.Controlling what comes next</value>
  </data>
  <data name="BinaryFormat_Choice_Example1_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({2, 3, 4, 5}),
    listFormat = BinaryFormat.Choice(
        BinaryFormat.Byte,
        (length) =&gt; BinaryFormat.List(BinaryFormat.Byte, length)
    )
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Choice_Example1_Result" xml:space="preserve">
    <value>{3, 4}</value>
  </data>
  <data name="BinaryFormat_Choice_Example2_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({2, 3, 4, 5}),
    listFormat = BinaryFormat.Choice(
        BinaryFormat.Byte,
        (length) =&gt; BinaryFormat.Record([
            length = length,
            list = BinaryFormat.List(BinaryFormat.Byte, length)
        ])
    )
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Choice_Example2_Result" xml:space="preserve">
    <value>[length = 2, list = {3, 4}]</value>
  </data>
  <data name="BinaryFormat_Choice_Example3_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({2, 3, 4, 5}),
    listFormat = BinaryFormat.Choice(
        BinaryFormat.Byte,
        (length) =&gt; BinaryFormat.List(BinaryFormat.Byte, length),
        type list
    )
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Choice_Example3_Result" xml:space="preserve">
    <value>{3, 4}</value>
  </data>
  <data name="BinaryFormat_Decimal_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_Double_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_Group_Category" xml:space="preserve">
    <value>Binary Formats.Reading a group of items</value>
  </data>
  <data name="BinaryFormat_Group_Example1_Code" xml:space="preserve">
    <value>let
    b = #binary({
        1, 11,
        2, 22,
        2, 22,
        5, 55,
        1, 11
    }),
    f = BinaryFormat.Group(
        BinaryFormat.Byte,
        {
            {1, BinaryFormat.Byte, BinaryOccurrence.Required},
            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},
            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},
            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}
        },
        (extra) =&gt; BinaryFormat.Byte
    )
in
    f(b)</value>
  </data>
  <data name="BinaryFormat_Group_Example1_Result" xml:space="preserve">
    <value>{11, {22, 22}, null, {}}</value>
  </data>
  <data name="BinaryFormat_Group_Example2_Code" xml:space="preserve">
    <value>let
    b = #binary({
        1, 101,
        1, 102
    }),
    f = BinaryFormat.Group(
        BinaryFormat.Byte,
        {
            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,
              0, (list) =&gt; List.Sum(list)},
            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}
        }
    )
in
    f(b)</value>
  </data>
  <data name="BinaryFormat_Group_Example2_Result" xml:space="preserve">
    <value>{203, 123}</value>
  </data>
  <data name="BinaryFormat_Length_Category" xml:space="preserve">
    <value>Binary Formats.Limiting input</value>
  </data>
  <data name="BinaryFormat_Length_Example1_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({1, 2, 3}),
    listFormat = BinaryFormat.Length(
        BinaryFormat.List(BinaryFormat.Byte),
        2
    )
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Length_Example1_Result" xml:space="preserve">
    <value>{1, 2}</value>
  </data>
  <data name="BinaryFormat_Length_Example2_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({1, 2, 3}),
    listFormat = BinaryFormat.Length(
        BinaryFormat.List(BinaryFormat.Byte),
        BinaryFormat.Byte
    )
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Length_Example2_Result" xml:space="preserve">
    <value>{2}</value>
  </data>
  <data name="BinaryFormat_List_Category" xml:space="preserve">
    <value>Binary Formats.Reading lists</value>
  </data>
  <data name="BinaryFormat_List_Example1_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({1, 2, 3}),
    listFormat = BinaryFormat.List(BinaryFormat.Byte)
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_List_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3}</value>
  </data>
  <data name="BinaryFormat_List_Example2_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({1, 2, 3}),
    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_List_Example2_Result" xml:space="preserve">
    <value>{1, 2}</value>
  </data>
  <data name="BinaryFormat_List_Example3_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({1, 2, 3}),
    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) =&gt; x &lt; 2)
in
    listFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_List_Example3_Result" xml:space="preserve">
    <value>{1, 2}</value>
  </data>
  <data name="BinaryFormat_Null_Category" xml:space="preserve">
    <value>Binary Formats.Controlling what comes next</value>
  </data>
  <data name="BinaryFormat_Record_Category" xml:space="preserve">
    <value>Binary Formats.Reading records</value>
  </data>
  <data name="BinaryFormat_Record_Example1_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({
        0x00, 0x01,
        0x00, 0x00, 0x00, 0x02
    }),
    recordFormat = BinaryFormat.Record([
        A = BinaryFormat.UnsignedInteger16,
        B = BinaryFormat.UnsignedInteger32
    ])
in
    recordFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Record_Example1_Result" xml:space="preserve">
    <value>[A = 1, B = 2]</value>
  </data>
  <data name="BinaryFormat_SignedInteger16_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_SignedInteger32_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_SignedInteger64_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_Single_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_Text_Category" xml:space="preserve">
    <value>Binary Formats.Reading text</value>
  </data>
  <data name="BinaryFormat_Text_Example1_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({65, 66, 67}),
    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)
in
    textFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Text_Example1_Result" xml:space="preserve">
    <value>"AB"</value>
  </data>
  <data name="BinaryFormat_Text_Example2_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({2, 65, 66}),
    textFormat = BinaryFormat.Text(
        BinaryFormat.Byte,
        TextEncoding.Ascii
    )
in
    textFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Text_Example2_Result" xml:space="preserve">
    <value>"AB"</value>
  </data>
  <data name="BinaryFormat_Transform_Category" xml:space="preserve">
    <value>Binary Formats.Transforming what was read</value>
  </data>
  <data name="BinaryFormat_Transform_Example1_Code" xml:space="preserve">
    <value>let
    binaryData = #binary({1}),
    transformFormat = BinaryFormat.Transform(
        BinaryFormat.Byte,
        (x) =&gt; x + 1
    )
in
    transformFormat(binaryData)</value>
  </data>
  <data name="BinaryFormat_Transform_Example1_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="BinaryFormat_UnsignedInteger16_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_UnsignedInteger32_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryFormat_UnsignedInteger64_Category" xml:space="preserve">
    <value>Binary Formats.Reading numbers</value>
  </data>
  <data name="BinaryOccurrence_Optional_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="BinaryOccurrence_Repeating_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="BinaryOccurrence_Required_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="Binary_ApproximateLength_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_ApproximateLength_Example1_Code" xml:space="preserve">
    <value>Binary.ApproximateLength(Binary.FromText("i45WMlSKjQUA", BinaryEncoding.Base64))</value>
  </data>
  <data name="Binary_ApproximateLength_Example1_Result" xml:space="preserve">
    <value>9</value>
  </data>
  <data name="Binary_Buffer_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_Buffer_Example1_Code" xml:space="preserve">
    <value>Binary.Buffer(Binary.FromList({0..10}))</value>
  </data>
  <data name="Binary_Buffer_Example1_Result" xml:space="preserve">
    <value>#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})</value>
  </data>
  <data name="Binary_Combine_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_Compress_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_Compress_Example1_Code" xml:space="preserve">
    <value>Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)</value>
  </data>
  <data name="Binary_Compress_Example1_Result" xml:space="preserve">
    <value>#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})</value>
  </data>
  <data name="Binary_Decompress_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_Decompress_Example1_Code" xml:space="preserve">
    <value>Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)</value>
  </data>
  <data name="Binary_Decompress_Example1_Result" xml:space="preserve">
    <value>#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})</value>
  </data>
  <data name="Binary_End_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_End_Example1_Code" xml:space="preserve">
    <value>Binary.End(Text.ToBinary("Hello world!"))</value>
  </data>
  <data name="Binary_End_Example1_Result" xml:space="preserve">
    <value>Binary.FromText("", BinaryEncoding.Base64)</value>
  </data>
  <data name="Binary_FromList_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_FromText_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_FromText_Example1_Code" xml:space="preserve">
    <value>Binary.FromText("1011")</value>
  </data>
  <data name="Binary_FromText_Example1_Result" xml:space="preserve">
    <value>Binary.FromText("1011", BinaryEncoding.Base64)</value>
  </data>
  <data name="Binary_FromText_Example2_Code" xml:space="preserve">
    <value>Binary.FromText("1011", BinaryEncoding.Hex)</value>
  </data>
  <data name="Binary_FromText_Example2_Result" xml:space="preserve">
    <value>Binary.FromText("EBE=", BinaryEncoding.Base64)</value>
  </data>
  <data name="Binary_From_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_From_Example1_Code" xml:space="preserve">
    <value>Binary.From("1011")</value>
  </data>
  <data name="Binary_From_Example1_Result" xml:space="preserve">
    <value>Binary.FromText("1011", BinaryEncoding.Base64)</value>
  </data>
  <data name="Binary_InferContentType_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_Length_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_Range_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_Range_Example1_Code" xml:space="preserve">
    <value>Binary.Range(#binary({0..10}), 6)</value>
  </data>
  <data name="Binary_Range_Example1_Result" xml:space="preserve">
    <value>#binary({6, 7, 8, 9, 10})</value>
  </data>
  <data name="Binary_Range_Example2_Code" xml:space="preserve">
    <value>Binary.Range(#binary({0..10}), 6, 2)</value>
  </data>
  <data name="Binary_Range_Example2_Result" xml:space="preserve">
    <value>#binary({6, 7})</value>
  </data>
  <data name="Binary_Split_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_ToList_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_ToText_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_ViewError_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_ViewFunction_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_View_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="Binary_View_Example1_Code" xml:space="preserve">
    <value>Binary.View(
    null,
    [
        GetLength = () =&gt; 12,
        GetStream = () =&gt; Text.ToBinary("hello world!")
    ]
)</value>
  </data>
  <data name="Binary_View_Example1_Result" xml:space="preserve">
    <value>Text.ToBinary("hello world!")</value>
  </data>
  <data name="BufferMode_Delayed_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="BufferMode_Eager_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="BufferMode_Streaming_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="BufferMode_Type_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="ByteOrder_BigEndian_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="ByteOrder_LittleEndian_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="Byte_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Byte_From_Example1_Code" xml:space="preserve">
    <value>Byte.From("4")</value>
  </data>
  <data name="Byte_From_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Byte_From_Example2_Code" xml:space="preserve">
    <value>Byte.From("4.5", null, RoundingMode.AwayFromZero)</value>
  </data>
  <data name="Byte_From_Example2_Result" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="CacheManager_Cache_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="CacheManager_Caches_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="CacheManager_InvokeWithCaches_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Cdm_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Cdpa_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Character_FromNumber_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Character_FromNumber_Example1_Code" xml:space="preserve">
    <value>Character.FromNumber(9)</value>
  </data>
  <data name="Character_FromNumber_Example1_Result" xml:space="preserve">
    <value>"#(tab)"</value>
  </data>
  <data name="Character_FromNumber_Example2_Code" xml:space="preserve">
    <value>Character.FromNumber(Character.ToNumber("A"))</value>
  </data>
  <data name="Character_FromNumber_Example2_Result" xml:space="preserve">
    <value>"A"</value>
  </data>
  <data name="Character_FromNumber_Example3_Code" xml:space="preserve">
    <value>Character.FromNumber(0x1F600)</value>
  </data>
  <data name="Character_FromNumber_Example3_Result" xml:space="preserve">
    <value>"#(0001F600)"</value>
  </data>
  <data name="Character_ToNumber_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Character_ToNumber_Example1_Code" xml:space="preserve">
    <value>Character.ToNumber("#(tab)")</value>
  </data>
  <data name="Character_ToNumber_Example1_Result" xml:space="preserve">
    <value>9</value>
  </data>
  <data name="Character_ToNumber_Example2_Code" xml:space="preserve">
    <value>Number.ToText(Character.ToNumber("#(0001F600)"), "X")</value>
  </data>
  <data name="Character_ToNumber_Example2_Result" xml:space="preserve">
    <value>"1F600"</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Category" xml:space="preserve">
    <value>Combiner</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Example1_Code" xml:space="preserve">
    <value>Combiner.CombineTextByDelimiter(";")({"a", "b", "c"})</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Example1_Result" xml:space="preserve">
    <value>"a;b;c"</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Example2_Code" xml:space="preserve">
    <value>let
    Source = #table(
        type table [Column1 = text, Column2 = text],
        {{"a", "b"}, {"c", "d,e,f"}}
    ),
    Merged = Table.CombineColumns(
        Source,
        {"Column1", "Column2"},
        Combiner.CombineTextByDelimiter(",", QuoteStyle.Csv),
        "Merged"
    )
in
    Merged</value>
  </data>
  <data name="Combiner_CombineTextByDelimiter_Example2_Result" xml:space="preserve">
    <value>#table(
    type table [Merged = text],
    {{"a,b"}, {"c,""d,e,f"""}}
)</value>
  </data>
  <data name="Combiner_CombineTextByEachDelimiter_Category" xml:space="preserve">
    <value>Combiner</value>
  </data>
  <data name="Combiner_CombineTextByEachDelimiter_Example1_Code" xml:space="preserve">
    <value>Combiner.CombineTextByEachDelimiter({"=", "+"})({"a", "b", "c"})</value>
  </data>
  <data name="Combiner_CombineTextByEachDelimiter_Example1_Result" xml:space="preserve">
    <value>"a=b+c"</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Category" xml:space="preserve">
    <value>Combiner</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Example1_Code" xml:space="preserve">
    <value>Combiner.CombineTextByLengths({1, 2, 3})({"aaa", "bbb", "ccc"})</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Example1_Result" xml:space="preserve">
    <value>"abbccc"</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Example2_Code" xml:space="preserve">
    <value>Combiner.CombineTextByLengths({1, 2, 3}, "*********")({"aaa", "bbb", "ccc"})</value>
  </data>
  <data name="Combiner_CombineTextByLengths_Example2_Result" xml:space="preserve">
    <value>"abbccc***"</value>
  </data>
  <data name="Combiner_CombineTextByPositions_Category" xml:space="preserve">
    <value>Combiner</value>
  </data>
  <data name="Combiner_CombineTextByPositions_Example1_Code" xml:space="preserve">
    <value>Combiner.CombineTextByPositions({0, 5, 10})({"abc", "def", "ghi"})</value>
  </data>
  <data name="Combiner_CombineTextByPositions_Example1_Result" xml:space="preserve">
    <value>"abc  def  ghi"</value>
  </data>
  <data name="Combiner_CombineTextByRanges_Category" xml:space="preserve">
    <value>Combiner</value>
  </data>
  <data name="Combiner_CombineTextByRanges_Example1_Code" xml:space="preserve">
    <value>Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({"abc", "def", "ghijkl"})</value>
  </data>
  <data name="Combiner_CombineTextByRanges_Example1_Result" xml:space="preserve">
    <value>"a  de ghijkl"</value>
  </data>
  <data name="Comparer_Equals_Category" xml:space="preserve">
    <value>Comparer</value>
  </data>
  <data name="Comparer_Equals_Example1_Code" xml:space="preserve">
    <value>Comparer.Equals(Comparer.FromCulture("en-US"), "1", "A")</value>
  </data>
  <data name="Comparer_Equals_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Comparer_FromCulture_Category" xml:space="preserve">
    <value>Comparer</value>
  </data>
  <data name="Comparer_FromCulture_Example1_Code" xml:space="preserve">
    <value>Comparer.FromCulture("en-US")("a", "A")</value>
  </data>
  <data name="Comparer_FromCulture_Example1_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="Comparer_FromCulture_Example2_Code" xml:space="preserve">
    <value>Comparer.FromCulture("en-US", true)("a", "A")</value>
  </data>
  <data name="Comparer_FromCulture_Example2_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Comparer_OrdinalIgnoreCase_Category" xml:space="preserve">
    <value>Comparer</value>
  </data>
  <data name="Comparer_OrdinalIgnoreCase_Example1_Code" xml:space="preserve">
    <value>Comparer.OrdinalIgnoreCase("Abc", "abc")</value>
  </data>
  <data name="Comparer_OrdinalIgnoreCase_Example1_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Comparer_Ordinal_Category" xml:space="preserve">
    <value>Comparer</value>
  </data>
  <data name="Comparer_Ordinal_Example1_Code" xml:space="preserve">
    <value>Comparer.Equals(Comparer.Ordinal, "encyclopædia", "encyclopaedia")</value>
  </data>
  <data name="Comparer_Ordinal_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Compression_Brotli_Category" xml:space="preserve">
    <value>Binary.Parameter values</value>
  </data>
  <data name="Compression_Deflate_Category" xml:space="preserve">
    <value>Binary.Parameter values</value>
  </data>
  <data name="Compression_GZip_Category" xml:space="preserve">
    <value>Binary.Parameter values</value>
  </data>
  <data name="Compression_LZ4_Category" xml:space="preserve">
    <value>Binary.Parameter values</value>
  </data>
  <data name="Compression_None_Category" xml:space="preserve">
    <value>Binary.Parameter values</value>
  </data>
  <data name="Compression_Snappy_Category" xml:space="preserve">
    <value>Binary.Parameter values</value>
  </data>
  <data name="Compression_Zstandard_Category" xml:space="preserve">
    <value>Binary.Parameter values</value>
  </data>
  <data name="CsvStyle_QuoteAfterDelimiter_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="CsvStyle_QuoteAlways_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="Csv_Document_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Csv_Document_Example1_Code" xml:space="preserve">
    <value>let
    csv = Text.Combine({"OrderID,Item", "1,Fishing rod", "2,1 lb. worms"}, "#(cr)#(lf)")
in
    Table.PromoteHeaders(Csv.Document(csv))</value>
  </data>
  <data name="Csv_Document_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [OrderID = "1", Item = "Fishing rod"],
    [OrderID = "2", Item = "1 lb. worms"]
})</value>
  </data>
  <data name="Csv_Document_Example2_Code" xml:space="preserve">
    <value>let
    csv = Text.Combine({"OrderID#|#Color", "1#|#Red", "2#|#Blue"}, "#(cr)#(lf)")
in
    Table.PromoteHeaders(Csv.Document(csv, null, "#|#"))</value>
  </data>
  <data name="Csv_Document_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [OrderID = "1", Color = "Red"],
    [OrderID = "2", Color = "Blue"]
})</value>
  </data>
  <data name="Cube_AddAndExpandDimensionColumn_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_AddMeasureColumn_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_ApplyParameter_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_AttributeMemberId_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_AttributeMemberProperty_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_CollapseAndRemoveColumns_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_Dimensions_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_DisplayFolders_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_MeasureProperties_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_MeasureProperty_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_Measures_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_Parameters_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_Properties_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_PropertyKey_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_ReplaceDimensions_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Cube_Transform_Category" xml:space="preserve">
    <value>Cube</value>
  </data>
  <data name="Culture_Current_Category" xml:space="preserve">
    <value>Comparer</value>
  </data>
  <data name="Currency_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Currency_From_Example1_Code" xml:space="preserve">
    <value>Currency.From("1.23455")</value>
  </data>
  <data name="Currency_From_Example1_Result" xml:space="preserve">
    <value>1.2346</value>
  </data>
  <data name="Currency_From_Example2_Code" xml:space="preserve">
    <value>Currency.From("1.23455", "en-US", RoundingMode.Down)</value>
  </data>
  <data name="Currency_From_Example2_Result" xml:space="preserve">
    <value>1.2345</value>
  </data>
  <data name="DB2_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="DataSource_TestConnection_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="DateTimeZone_FixedLocalNow_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_FixedUtcNow_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_FromFileTime_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_FromFileTime_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.FromFileTime(129876402529842245)</value>
  </data>
  <data name="DateTimeZone_FromFileTime_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)</value>
  </data>
  <data name="DateTimeZone_FromText_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_FromText_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.FromText("2010-12-31T01:30:00-08:00")</value>
  </data>
  <data name="DateTimeZone_FromText_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)</value>
  </data>
  <data name="DateTimeZone_FromText_Example2_Code" xml:space="preserve">
    <value>DateTimeZone.FromText("30 Dez 2010 02:04:50.369730 +02:00", [Format="dd MMM yyyy HH:mm:ss.ffffff zzz", Culture="de-DE"])</value>
  </data>
  <data name="DateTimeZone_FromText_Example2_Result" xml:space="preserve">
    <value>#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)</value>
  </data>
  <data name="DateTimeZone_FromText_Example3_Code" xml:space="preserve">
    <value>DateTimeZone.FromText("2009-06-15T13:45:30.0000000-07:00", [Format="O", Culture="en-US"])</value>
  </data>
  <data name="DateTimeZone_FromText_Example3_Result" xml:space="preserve">
    <value>#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)</value>
  </data>
  <data name="DateTimeZone_From_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_From_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.From("2020-10-30T01:30:00-08:00")</value>
  </data>
  <data name="DateTimeZone_From_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)</value>
  </data>
  <data name="DateTimeZone_LocalNow_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_RemoveZone_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_RemoveZone_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))</value>
  </data>
  <data name="DateTimeZone_RemoveZone_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 12, 31, 9, 15, 36)</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Example2_Code" xml:space="preserve">
    <value>DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)</value>
  </data>
  <data name="DateTimeZone_SwitchZone_Example2_Result" xml:space="preserve">
    <value>#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)</value>
  </data>
  <data name="DateTimeZone_ToLocal_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_ToLocal_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))</value>
  </data>
  <data name="DateTimeZone_ToLocal_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)</value>
  </data>
  <data name="DateTimeZone_ToRecord_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_ToRecord_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))</value>
  </data>
  <data name="DateTimeZone_ToRecord_Example1_Result" xml:space="preserve">
    <value>[
      Year = 2011,
      Month = 12,
      Day = 31,
      Hour = 11,
      Minute = 56,
      Second = 2,
      ZoneHours = 8,
      ZoneMinutes = 0
]</value>
  </data>
  <data name="DateTimeZone_ToText_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_ToText_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))</value>
  </data>
  <data name="DateTimeZone_ToText_Example1_Result" xml:space="preserve">
    <value>"12/31/2010 1:30:25 AM +02:00"</value>
  </data>
  <data name="DateTimeZone_ToText_Example2_Code" xml:space="preserve">
    <value>DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format="dd MMM yyyy HH:mm:ss.ffffff zzz", Culture="de-DE"])</value>
  </data>
  <data name="DateTimeZone_ToText_Example2_Result" xml:space="preserve">
    <value>"30 Dez 2010 02:04:50.369730 -08:00"</value>
  </data>
  <data name="DateTimeZone_ToText_Example3_Code" xml:space="preserve">
    <value>DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format="O", Culture="en-US"])</value>
  </data>
  <data name="DateTimeZone_ToText_Example3_Result" xml:space="preserve">
    <value>"2000-02-08T03:45:12.0000000+02:00"</value>
  </data>
  <data name="DateTimeZone_ToUtc_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_ToUtc_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))</value>
  </data>
  <data name="DateTimeZone_ToUtc_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)</value>
  </data>
  <data name="DateTimeZone_UtcNow_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_UtcNow_Example1_Code" xml:space="preserve">
    <value>DateTimeZone.UtcNow()</value>
  </data>
  <data name="DateTimeZone_UtcNow_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)</value>
  </data>
  <data name="DateTimeZone_ZoneHours_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTimeZone_ZoneMinutes_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="DateTime_AddZone_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_AddZone_Example1_Code" xml:space="preserve">
    <value>DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)</value>
  </data>
  <data name="DateTime_AddZone_Example1_Result" xml:space="preserve">
    <value>#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)</value>
  </data>
  <data name="DateTime_Date_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_Date_Example1_Code" xml:space="preserve">
    <value>DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))</value>
  </data>
  <data name="DateTime_Date_Example1_Result" xml:space="preserve">
    <value>#date(2010, 12, 31)</value>
  </data>
  <data name="DateTime_FixedLocalNow_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_FromFileTime_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_FromFileTime_Example1_Code" xml:space="preserve">
    <value>DateTime.FromFileTime(129876402529842245)</value>
  </data>
  <data name="DateTime_FromFileTime_Example1_Result" xml:space="preserve">
    <value>#datetime(2012, 7, 24, 14, 50, 52.9842245)</value>
  </data>
  <data name="DateTime_FromText_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_FromText_Example1_Code" xml:space="preserve">
    <value>DateTime.FromText("2010-12-31T01:30:25")</value>
  </data>
  <data name="DateTime_FromText_Example1_Result" xml:space="preserve">
    <value>#datetime(2010, 12, 31, 1, 30, 25)</value>
  </data>
  <data name="DateTime_FromText_Example2_Code" xml:space="preserve">
    <value>DateTime.FromText("30 Dez 2010 02:04:50.369730", [Format="dd MMM yyyy HH:mm:ss.ffffff", Culture="de-DE"])</value>
  </data>
  <data name="DateTime_FromText_Example2_Result" xml:space="preserve">
    <value>#datetime(2010, 12, 30, 2, 4, 50.36973)</value>
  </data>
  <data name="DateTime_FromText_Example3_Code" xml:space="preserve">
    <value>DateTime.FromText("2000-02-08T03:45:12Z", [Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"])</value>
  </data>
  <data name="DateTime_FromText_Example3_Result" xml:space="preserve">
    <value>#datetime(2000, 2, 8, 3, 45, 12)</value>
  </data>
  <data name="DateTime_FromText_Example4_Code" xml:space="preserve">
    <value>DateTime.FromText("20101231T013000", [Format="yyyyMMdd'T'HHmmss", Culture="en-US"])</value>
  </data>
  <data name="DateTime_FromText_Example4_Result" xml:space="preserve">
    <value>#datetime(2010, 12, 31, 1, 30, 0)</value>
  </data>
  <data name="DateTime_From_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_From_Example1_Code" xml:space="preserve">
    <value>DateTime.From(#time(06, 45, 12))</value>
  </data>
  <data name="DateTime_From_Example1_Result" xml:space="preserve">
    <value>#datetime(1899, 12, 30, 06, 45, 12)</value>
  </data>
  <data name="DateTime_From_Example2_Code" xml:space="preserve">
    <value>DateTime.From(#date(1975, 4, 4))</value>
  </data>
  <data name="DateTime_From_Example2_Result" xml:space="preserve">
    <value>#datetime(1975, 4, 4, 0, 0, 0)</value>
  </data>
  <data name="DateTime_IsInCurrentHour_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInCurrentHour_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInCurrentHour(DateTime.FixedLocalNow())</value>
  </data>
  <data name="DateTime_IsInCurrentHour_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInCurrentMinute_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInCurrentMinute_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())</value>
  </data>
  <data name="DateTime_IsInCurrentMinute_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInCurrentSecond_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInCurrentSecond_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())</value>
  </data>
  <data name="DateTime_IsInCurrentSecond_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInNextHour_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInNextHour_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))</value>
  </data>
  <data name="DateTime_IsInNextHour_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInNextMinute_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInNextMinute_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))</value>
  </data>
  <data name="DateTime_IsInNextMinute_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInNextNHours_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInNextNHours_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)</value>
  </data>
  <data name="DateTime_IsInNextNHours_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInNextNMinutes_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInNextNMinutes_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)</value>
  </data>
  <data name="DateTime_IsInNextNMinutes_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInNextNSeconds_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInNextNSeconds_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)</value>
  </data>
  <data name="DateTime_IsInNextNSeconds_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInNextSecond_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInNextSecond_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))</value>
  </data>
  <data name="DateTime_IsInNextSecond_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInPreviousHour_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInPreviousHour_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))</value>
  </data>
  <data name="DateTime_IsInPreviousHour_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInPreviousMinute_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInPreviousMinute_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))</value>
  </data>
  <data name="DateTime_IsInPreviousMinute_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInPreviousNHours_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInPreviousNHours_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)</value>
  </data>
  <data name="DateTime_IsInPreviousNHours_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInPreviousNMinutes_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInPreviousNMinutes_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)</value>
  </data>
  <data name="DateTime_IsInPreviousNMinutes_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInPreviousNSeconds_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInPreviousNSeconds_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)</value>
  </data>
  <data name="DateTime_IsInPreviousNSeconds_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_IsInPreviousSecond_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_IsInPreviousSecond_Example1_Code" xml:space="preserve">
    <value>DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))</value>
  </data>
  <data name="DateTime_IsInPreviousSecond_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="DateTime_LocalNow_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_Time_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_Time_Example1_Code" xml:space="preserve">
    <value>DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))</value>
  </data>
  <data name="DateTime_Time_Example1_Result" xml:space="preserve">
    <value>#time(11, 56, 2)</value>
  </data>
  <data name="DateTime_ToRecord_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_ToRecord_Example1_Code" xml:space="preserve">
    <value>DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))</value>
  </data>
  <data name="DateTime_ToRecord_Example1_Result" xml:space="preserve">
    <value>[
      Year = 2011,
      Month = 12,
      Day = 31,
      Hour = 11,
      Minute = 56,
      Second = 2
]</value>
  </data>
  <data name="DateTime_ToText_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="DateTime_ToText_Example1_Code" xml:space="preserve">
    <value>DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))</value>
  </data>
  <data name="DateTime_ToText_Example1_Result" xml:space="preserve">
    <value>"12/31/2010 1:30:25 AM"</value>
  </data>
  <data name="DateTime_ToText_Example2_Code" xml:space="preserve">
    <value>DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format="dd MMM yyyy HH:mm:ss.ffffff", Culture="de-DE"])</value>
  </data>
  <data name="DateTime_ToText_Example2_Result" xml:space="preserve">
    <value>"30 Dez 2010 02:04:50.369730"</value>
  </data>
  <data name="DateTime_ToText_Example3_Code" xml:space="preserve">
    <value>DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format="yyyy-MM-dd'T'HH:mm:ss'Z'", Culture="en-US"])</value>
  </data>
  <data name="DateTime_ToText_Example3_Result" xml:space="preserve">
    <value>"2000-02-08T03:45:12Z"</value>
  </data>
  <data name="Date_AddDays_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_AddDays_Example1_Code" xml:space="preserve">
    <value>Date.AddDays(#date(2011, 5, 14), 5)</value>
  </data>
  <data name="Date_AddDays_Example1_Result" xml:space="preserve">
    <value>#date(2011, 5, 19)</value>
  </data>
  <data name="Date_AddMonths_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_AddMonths_Example1_Code" xml:space="preserve">
    <value>Date.AddMonths(#date(2011, 5, 14), 5)</value>
  </data>
  <data name="Date_AddMonths_Example1_Result" xml:space="preserve">
    <value>#date(2011, 10, 14)</value>
  </data>
  <data name="Date_AddMonths_Example2_Code" xml:space="preserve">
    <value>Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)</value>
  </data>
  <data name="Date_AddMonths_Example2_Result" xml:space="preserve">
    <value>#datetime(2012, 11, 14, 8, 15, 22)</value>
  </data>
  <data name="Date_AddQuarters_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_AddQuarters_Example1_Code" xml:space="preserve">
    <value>Date.AddQuarters(#date(2011, 5, 14), 1)</value>
  </data>
  <data name="Date_AddQuarters_Example1_Result" xml:space="preserve">
    <value>#date(2011, 8, 14)</value>
  </data>
  <data name="Date_AddWeeks_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_AddWeeks_Example1_Code" xml:space="preserve">
    <value>Date.AddWeeks(#date(2011, 5, 14), 2)</value>
  </data>
  <data name="Date_AddWeeks_Example1_Result" xml:space="preserve">
    <value>#date(2011, 5, 28)</value>
  </data>
  <data name="Date_AddYears_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_AddYears_Example1_Code" xml:space="preserve">
    <value>Date.AddYears(#date(2011, 5, 14), 4)</value>
  </data>
  <data name="Date_AddYears_Example1_Result" xml:space="preserve">
    <value>#date(2015, 5, 14)</value>
  </data>
  <data name="Date_AddYears_Example2_Code" xml:space="preserve">
    <value>Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)</value>
  </data>
  <data name="Date_AddYears_Example2_Result" xml:space="preserve">
    <value>#datetime(2021, 5, 14, 8, 15, 22)</value>
  </data>
  <data name="Date_DayOfWeekName_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_DayOfWeekName_Example1_Code" xml:space="preserve">
    <value>Date.DayOfWeekName(#date(2011, 12, 31), "en-US")</value>
  </data>
  <data name="Date_DayOfWeekName_Example1_Result" xml:space="preserve">
    <value>"Saturday"</value>
  </data>
  <data name="Date_DayOfWeek_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_DayOfWeek_Example1_Code" xml:space="preserve">
    <value>Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)</value>
  </data>
  <data name="Date_DayOfWeek_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Date_DayOfWeek_Example2_Code" xml:space="preserve">
    <value>Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)</value>
  </data>
  <data name="Date_DayOfWeek_Example2_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Date_DayOfYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_DayOfYear_Example1_Code" xml:space="preserve">
    <value>Date.DayOfYear(#date(2011, 03, 01))</value>
  </data>
  <data name="Date_DayOfYear_Example1_Result" xml:space="preserve">
    <value>60</value>
  </data>
  <data name="Date_Day_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_Day_Example1_Code" xml:space="preserve">
    <value>Date.Day(#datetime(2011, 5, 14, 17, 0, 0))</value>
  </data>
  <data name="Date_Day_Example1_Result" xml:space="preserve">
    <value>14</value>
  </data>
  <data name="Date_DaysInMonth_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_DaysInMonth_Example1_Code" xml:space="preserve">
    <value>Date.DaysInMonth(#date(2011, 12, 01))</value>
  </data>
  <data name="Date_DaysInMonth_Example1_Result" xml:space="preserve">
    <value>31</value>
  </data>
  <data name="Date_EndOfDay_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_EndOfDay_Example1_Code" xml:space="preserve">
    <value>Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))</value>
  </data>
  <data name="Date_EndOfDay_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 5, 14, 23, 59, 59.9999999)</value>
  </data>
  <data name="Date_EndOfDay_Example2_Code" xml:space="preserve">
    <value>Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))</value>
  </data>
  <data name="Date_EndOfDay_Example2_Result" xml:space="preserve">
    <value>#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)</value>
  </data>
  <data name="Date_EndOfMonth_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_EndOfMonth_Example1_Code" xml:space="preserve">
    <value>Date.EndOfMonth(#date(2011, 5, 14))</value>
  </data>
  <data name="Date_EndOfMonth_Example1_Result" xml:space="preserve">
    <value>#date(2011, 5, 31)</value>
  </data>
  <data name="Date_EndOfMonth_Example2_Code" xml:space="preserve">
    <value>Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))</value>
  </data>
  <data name="Date_EndOfMonth_Example2_Result" xml:space="preserve">
    <value>#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)</value>
  </data>
  <data name="Date_EndOfQuarter_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_EndOfQuarter_Example1_Code" xml:space="preserve">
    <value>Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))</value>
  </data>
  <data name="Date_EndOfQuarter_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 12, 31, 23, 59, 59.9999999)</value>
  </data>
  <data name="Date_EndOfWeek_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_EndOfWeek_Example1_Code" xml:space="preserve">
    <value>Date.EndOfWeek(#date(2011, 5, 14))</value>
  </data>
  <data name="Date_EndOfWeek_Example1_Result" xml:space="preserve">
    <value>#date(2011, 5, 14)</value>
  </data>
  <data name="Date_EndOfWeek_Example2_Code" xml:space="preserve">
    <value>Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)</value>
  </data>
  <data name="Date_EndOfWeek_Example2_Result" xml:space="preserve">
    <value>#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)</value>
  </data>
  <data name="Date_EndOfYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_EndOfYear_Example1_Code" xml:space="preserve">
    <value>Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))</value>
  </data>
  <data name="Date_EndOfYear_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 12, 31, 23, 59, 59.9999999)</value>
  </data>
  <data name="Date_EndOfYear_Example2_Code" xml:space="preserve">
    <value>Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))</value>
  </data>
  <data name="Date_EndOfYear_Example2_Result" xml:space="preserve">
    <value>#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)</value>
  </data>
  <data name="Date_FromText_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_FromText_Example1_Code" xml:space="preserve">
    <value>Date.FromText("2010-12-31")</value>
  </data>
  <data name="Date_FromText_Example1_Result" xml:space="preserve">
    <value>#date(2010, 12, 31)</value>
  </data>
  <data name="Date_FromText_Example2_Code" xml:space="preserve">
    <value>Date.FromText("30 Dez 2010", [Format="dd MMM yyyy", Culture="de-DE"])</value>
  </data>
  <data name="Date_FromText_Example2_Result" xml:space="preserve">
    <value>#date(2010, 12, 30)</value>
  </data>
  <data name="Date_FromText_Example3_Code" xml:space="preserve">
    <value>Date.FromText("1400", [Format="yyyy", Culture="ar-SA"])</value>
  </data>
  <data name="Date_FromText_Example3_Result" xml:space="preserve">
    <value>#date(1979, 11, 20)</value>
  </data>
  <data name="Date_From_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_From_Example1_Code" xml:space="preserve">
    <value>Date.From(43910)</value>
  </data>
  <data name="Date_From_Example1_Result" xml:space="preserve">
    <value>#date(2020, 3, 20)</value>
  </data>
  <data name="Date_From_Example2_Code" xml:space="preserve">
    <value>Date.From(#datetime(1899, 12, 30, 06, 45, 12))</value>
  </data>
  <data name="Date_From_Example2_Result" xml:space="preserve">
    <value>#date(1899, 12, 30)</value>
  </data>
  <data name="Date_IsInCurrentDay_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInCurrentDay_Example1_Code" xml:space="preserve">
    <value>Date.IsInCurrentDay(DateTime.FixedLocalNow())</value>
  </data>
  <data name="Date_IsInCurrentDay_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInCurrentMonth_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInCurrentMonth_Example1_Code" xml:space="preserve">
    <value>Date.IsInCurrentMonth(DateTime.FixedLocalNow())</value>
  </data>
  <data name="Date_IsInCurrentMonth_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInCurrentQuarter_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInCurrentQuarter_Example1_Code" xml:space="preserve">
    <value>Date.IsInCurrentQuarter(DateTime.FixedLocalNow())</value>
  </data>
  <data name="Date_IsInCurrentQuarter_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInCurrentWeek_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInCurrentWeek_Example1_Code" xml:space="preserve">
    <value>Date.IsInCurrentWeek(DateTime.FixedLocalNow())</value>
  </data>
  <data name="Date_IsInCurrentWeek_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInCurrentYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInCurrentYear_Example1_Code" xml:space="preserve">
    <value>Date.IsInCurrentYear(DateTime.FixedLocalNow())</value>
  </data>
  <data name="Date_IsInCurrentYear_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextDay_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextDay_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))</value>
  </data>
  <data name="Date_IsInNextDay_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextMonth_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextMonth_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))</value>
  </data>
  <data name="Date_IsInNextMonth_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextNDays_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextNDays_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)</value>
  </data>
  <data name="Date_IsInNextNDays_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextNMonths_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextNMonths_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)</value>
  </data>
  <data name="Date_IsInNextNMonths_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextNQuarters_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextNQuarters_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)</value>
  </data>
  <data name="Date_IsInNextNQuarters_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextNWeeks_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextNWeeks_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)</value>
  </data>
  <data name="Date_IsInNextNWeeks_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextNYears_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextNYears_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)</value>
  </data>
  <data name="Date_IsInNextNYears_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextQuarter_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextQuarter_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))</value>
  </data>
  <data name="Date_IsInNextQuarter_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextWeek_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextWeek_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))</value>
  </data>
  <data name="Date_IsInNextWeek_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInNextYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInNextYear_Example1_Code" xml:space="preserve">
    <value>Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))</value>
  </data>
  <data name="Date_IsInNextYear_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousDay_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousDay_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))</value>
  </data>
  <data name="Date_IsInPreviousDay_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousMonth_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousMonth_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))</value>
  </data>
  <data name="Date_IsInPreviousMonth_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousNDays_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousNDays_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)</value>
  </data>
  <data name="Date_IsInPreviousNDays_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousNMonths_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousNMonths_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)</value>
  </data>
  <data name="Date_IsInPreviousNMonths_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousNQuarters_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousNQuarters_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)</value>
  </data>
  <data name="Date_IsInPreviousNQuarters_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousNWeeks_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousNWeeks_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)</value>
  </data>
  <data name="Date_IsInPreviousNWeeks_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousNYears_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousNYears_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)</value>
  </data>
  <data name="Date_IsInPreviousNYears_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousQuarter_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousQuarter_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))</value>
  </data>
  <data name="Date_IsInPreviousQuarter_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousWeek_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousWeek_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))</value>
  </data>
  <data name="Date_IsInPreviousWeek_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInPreviousYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInPreviousYear_Example1_Code" xml:space="preserve">
    <value>Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))</value>
  </data>
  <data name="Date_IsInPreviousYear_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsInYearToDate_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsInYearToDate_Example1_Code" xml:space="preserve">
    <value>Date.IsInYearToDate(DateTime.FixedLocalNow())</value>
  </data>
  <data name="Date_IsInYearToDate_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_IsLeapYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_IsLeapYear_Example1_Code" xml:space="preserve">
    <value>Date.IsLeapYear(#date(2012, 01, 01))</value>
  </data>
  <data name="Date_IsLeapYear_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Date_MonthName_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_MonthName_Example1_Code" xml:space="preserve">
    <value>Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), "en-US")</value>
  </data>
  <data name="Date_MonthName_Example1_Result" xml:space="preserve">
    <value>"December"</value>
  </data>
  <data name="Date_Month_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_Month_Example1_Code" xml:space="preserve">
    <value>Date.Month(#datetime(2011, 12, 31, 9, 15, 36))</value>
  </data>
  <data name="Date_Month_Example1_Result" xml:space="preserve">
    <value>12</value>
  </data>
  <data name="Date_QuarterOfYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_QuarterOfYear_Example1_Code" xml:space="preserve">
    <value>Date.QuarterOfYear(#date(2011, 12, 31))</value>
  </data>
  <data name="Date_QuarterOfYear_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Date_StartOfDay_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_StartOfDay_Example1_Code" xml:space="preserve">
    <value>Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))</value>
  </data>
  <data name="Date_StartOfDay_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 10, 10, 0, 0, 0)</value>
  </data>
  <data name="Date_StartOfMonth_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_StartOfMonth_Example1_Code" xml:space="preserve">
    <value>Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))</value>
  </data>
  <data name="Date_StartOfMonth_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 10, 1, 0, 0, 0)</value>
  </data>
  <data name="Date_StartOfQuarter_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_StartOfQuarter_Example1_Code" xml:space="preserve">
    <value>Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))</value>
  </data>
  <data name="Date_StartOfQuarter_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 10, 1, 0, 0, 0)</value>
  </data>
  <data name="Date_StartOfWeek_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_StartOfWeek_Example1_Code" xml:space="preserve">
    <value>Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))</value>
  </data>
  <data name="Date_StartOfWeek_Example1_Result" xml:space="preserve">
    <value>// Sunday, October 9th, 2011
#datetime(2011, 10, 9, 0, 0, 0)</value>
  </data>
  <data name="Date_StartOfWeek_Example2_Code" xml:space="preserve">
    <value>Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)</value>
  </data>
  <data name="Date_StartOfWeek_Example2_Result" xml:space="preserve">
    <value>// Monday, October 10th, 2011
#datetime(2011, 10, 10, 0, 0, 0)</value>
  </data>
  <data name="Date_StartOfYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_StartOfYear_Example1_Code" xml:space="preserve">
    <value>Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))</value>
  </data>
  <data name="Date_StartOfYear_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 1, 1, 0, 0, 0)</value>
  </data>
  <data name="Date_ToRecord_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_ToRecord_Example1_Code" xml:space="preserve">
    <value>Date.ToRecord(#date(2011, 12, 31))</value>
  </data>
  <data name="Date_ToRecord_Example1_Result" xml:space="preserve">
    <value>[
      Year = 2011,
      Month = 12,
      Day = 31
]</value>
  </data>
  <data name="Date_ToText_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_ToText_Example1_Code" xml:space="preserve">
    <value>Date.ToText(#date(2010, 12, 31))</value>
  </data>
  <data name="Date_ToText_Example1_Result" xml:space="preserve">
    <value>"12/31/2010"</value>
  </data>
  <data name="Date_ToText_Example2_Code" xml:space="preserve">
    <value>Date.ToText(#date(2010, 12, 31), [Format="dd MMM yyyy", Culture="de-DE"])</value>
  </data>
  <data name="Date_ToText_Example2_Result" xml:space="preserve">
    <value>"31 Dez 2010"</value>
  </data>
  <data name="Date_ToText_Example3_Code" xml:space="preserve">
    <value>Date.ToText(#date(2000, 1, 1), [Format="yyyy", Culture="ar-SA"])</value>
  </data>
  <data name="Date_ToText_Example3_Result" xml:space="preserve">
    <value>"1420"</value>
  </data>
  <data name="Date_WeekOfMonth_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_WeekOfMonth_Example1_Code" xml:space="preserve">
    <value>Date.WeekOfMonth(#date(2011, 03, 15))</value>
  </data>
  <data name="Date_WeekOfMonth_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="Date_WeekOfYear_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_WeekOfYear_Example1_Code" xml:space="preserve">
    <value>Date.WeekOfYear(#date(2011, 03, 27))</value>
  </data>
  <data name="Date_WeekOfYear_Example1_Result" xml:space="preserve">
    <value>14</value>
  </data>
  <data name="Date_WeekOfYear_Example2_Code" xml:space="preserve">
    <value>Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)</value>
  </data>
  <data name="Date_WeekOfYear_Example2_Result" xml:space="preserve">
    <value>13</value>
  </data>
  <data name="Date_Year_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Date_Year_Example1_Code" xml:space="preserve">
    <value>Date.Year(#datetime(2011, 12, 31, 9, 15, 36))</value>
  </data>
  <data name="Date_Year_Example1_Result" xml:space="preserve">
    <value>2011</value>
  </data>
  <data name="Day_Friday_Category" xml:space="preserve">
    <value>Date.Parameter values</value>
  </data>
  <data name="Day_Monday_Category" xml:space="preserve">
    <value>Date.Parameter values</value>
  </data>
  <data name="Day_Saturday_Category" xml:space="preserve">
    <value>Date.Parameter values</value>
  </data>
  <data name="Day_Sunday_Category" xml:space="preserve">
    <value>Date.Parameter values</value>
  </data>
  <data name="Day_Thursday_Category" xml:space="preserve">
    <value>Date.Parameter values</value>
  </data>
  <data name="Day_Tuesday_Category" xml:space="preserve">
    <value>Date.Parameter values</value>
  </data>
  <data name="Day_Wednesday_Category" xml:space="preserve">
    <value>Date.Parameter values</value>
  </data>
  <data name="Decimal_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Decimal_From_Example1_Code" xml:space="preserve">
    <value>Decimal.From("4.5")</value>
  </data>
  <data name="Decimal_From_Example1_Result" xml:space="preserve">
    <value>4.5</value>
  </data>
  <data name="DeltaLake_Table_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Diagnostics_ActivityId_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="Diagnostics_CorrelationId_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="Diagnostics_Trace_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="Diagnostics_Trace_Example1_Code" xml:space="preserve">
    <value>Diagnostics.Trace(TraceLevel.Information, "TextValueFromNumber", () =&gt; Text.From(123), true)</value>
  </data>
  <data name="Diagnostics_Trace_Example1_Result" xml:space="preserve">
    <value>"123"</value>
  </data>
  <data name="DirectQueryCapabilities_From_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Double_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Double_From_Example1_Code" xml:space="preserve">
    <value>Double.From("4.5")</value>
  </data>
  <data name="Double_From_Example1_Result" xml:space="preserve">
    <value>4.5</value>
  </data>
  <data name="Duration_Days_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_Days_Example1_Code" xml:space="preserve">
    <value>Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))</value>
  </data>
  <data name="Duration_Days_Example1_Result" xml:space="preserve">
    <value>7</value>
  </data>
  <data name="Duration_FromText_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_FromText_Example1_Code" xml:space="preserve">
    <value>Duration.FromText("2.05:55:20")</value>
  </data>
  <data name="Duration_FromText_Example1_Result" xml:space="preserve">
    <value>#duration(2, 5, 55, 20)</value>
  </data>
  <data name="Duration_From_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_From_Example1_Code" xml:space="preserve">
    <value>Duration.From(2.525)</value>
  </data>
  <data name="Duration_From_Example1_Result" xml:space="preserve">
    <value>#duration(2, 12, 36, 0)</value>
  </data>
  <data name="Duration_Hours_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_Hours_Example1_Code" xml:space="preserve">
    <value>Duration.Hours(#duration(5, 4, 3, 2))</value>
  </data>
  <data name="Duration_Hours_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Duration_Minutes_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_Minutes_Example1_Code" xml:space="preserve">
    <value>Duration.Minutes(#duration(5, 4, 3, 2))</value>
  </data>
  <data name="Duration_Minutes_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="Duration_Seconds_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_Seconds_Example1_Code" xml:space="preserve">
    <value>Duration.Seconds(#duration(5, 4, 3, 2))</value>
  </data>
  <data name="Duration_Seconds_Example1_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Duration_ToRecord_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_ToRecord_Example1_Code" xml:space="preserve">
    <value>Duration.ToRecord(#duration(2, 5, 55, 20))</value>
  </data>
  <data name="Duration_ToRecord_Example1_Result" xml:space="preserve">
    <value>[
    Days = 2,
    Hours = 5,
    Minutes = 55,
    Seconds = 20
]</value>
  </data>
  <data name="Duration_ToText_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_ToText_Example1_Code" xml:space="preserve">
    <value>Duration.ToText(#duration(2, 5, 55, 20))</value>
  </data>
  <data name="Duration_ToText_Example1_Result" xml:space="preserve">
    <value>"2.05:55:20"</value>
  </data>
  <data name="Duration_TotalDays_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_TotalDays_Example1_Code" xml:space="preserve">
    <value>Duration.TotalDays(#duration(5, 4, 3, 2))</value>
  </data>
  <data name="Duration_TotalDays_Example1_Result" xml:space="preserve">
    <value>5.1687731481481478</value>
  </data>
  <data name="Duration_TotalHours_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_TotalHours_Example1_Code" xml:space="preserve">
    <value>Duration.TotalHours(#duration(5, 4, 3, 2))</value>
  </data>
  <data name="Duration_TotalHours_Example1_Result" xml:space="preserve">
    <value>124.05055555555555</value>
  </data>
  <data name="Duration_TotalMinutes_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_TotalMinutes_Example1_Code" xml:space="preserve">
    <value>Duration.TotalMinutes(#duration(5, 4, 3, 2))</value>
  </data>
  <data name="Duration_TotalMinutes_Example1_Result" xml:space="preserve">
    <value>7443.0333333333338</value>
  </data>
  <data name="Duration_TotalSeconds_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="Duration_TotalSeconds_Example1_Code" xml:space="preserve">
    <value>Duration.TotalSeconds(#duration(5, 4, 3, 2))</value>
  </data>
  <data name="Duration_TotalSeconds_Example1_Result" xml:space="preserve">
    <value>446582</value>
  </data>
  <data name="Embedded_Value_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Environment_Configuration_Category" xml:space="preserve">
    <value>Introspection</value>
  </data>
  <data name="Environment_FeatureSwitch_Category" xml:space="preserve">
    <value>Introspection</value>
  </data>
  <data name="Environment_Libraries_Category" xml:space="preserve">
    <value>Introspection</value>
  </data>
  <data name="Error_Record_Category" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Essbase_Cubes_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Excel_CurrentWorkbook_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Excel_ShapeTable_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Excel_Workbook_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Excel_Workbook_Example1_Code" xml:space="preserve">
    <value>Excel.Workbook(File.Contents("C:\Book1.xlsx"), null, true){[Item="Sheet1"]}[Data]</value>
  </data>
  <data name="Excel_Workbook_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Column1 = "ID", Column2 = "Name", Column3 = "Phone"],
    [Column1 = 1, Column2 = "Bob", Column3 = "123-4567"],
    [Column1 = 3, Column2 = "Pam", Column3 = "543-7890"],
    [Column1 = 2, Column2 = "Jim", Column3 = "987-6543"]
})</value>
  </data>
  <data name="Exchange_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Expression_Constant_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Expression_Constant_Example1_Code" xml:space="preserve">
    <value>Expression.Constant(123)</value>
  </data>
  <data name="Expression_Constant_Example1_Result" xml:space="preserve">
    <value>"123"</value>
  </data>
  <data name="Expression_Constant_Example2_Code" xml:space="preserve">
    <value>Expression.Constant(#date(2035, 01, 02))</value>
  </data>
  <data name="Expression_Constant_Example2_Result" xml:space="preserve">
    <value>"#date(2035, 1, 2)"</value>
  </data>
  <data name="Expression_Constant_Example3_Code" xml:space="preserve">
    <value>Expression.Constant("abc")</value>
  </data>
  <data name="Expression_Constant_Example3_Result" xml:space="preserve">
    <value>"""abc"""</value>
  </data>
  <data name="Expression_Evaluate_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Expression_Evaluate_Example1_Code" xml:space="preserve">
    <value>Expression.Evaluate("1 + 1")</value>
  </data>
  <data name="Expression_Evaluate_Example1_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Expression_Evaluate_Example2_Code" xml:space="preserve">
    <value>Expression.Evaluate("List.Sum({1, 2, 3})", [List.Sum = List.Sum])</value>
  </data>
  <data name="Expression_Evaluate_Example2_Result" xml:space="preserve">
    <value>6</value>
  </data>
  <data name="Expression_Evaluate_Example3_Code" xml:space="preserve">
    <value>Expression.Evaluate(Expression.Constant("""abc") &amp; " &amp; " &amp; Expression.Identifier("x"), [x = "def"""])</value>
  </data>
  <data name="Expression_Evaluate_Example3_Result" xml:space="preserve">
    <value>"""abcdef"""</value>
  </data>
  <data name="Expression_Identifier_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Expression_Identifier_Example1_Code" xml:space="preserve">
    <value>Expression.Identifier("MyIdentifier")</value>
  </data>
  <data name="Expression_Identifier_Example1_Result" xml:space="preserve">
    <value>"MyIdentifier"</value>
  </data>
  <data name="Expression_Identifier_Example2_Code" xml:space="preserve">
    <value>Expression.Identifier("My Identifier")</value>
  </data>
  <data name="Expression_Identifier_Example2_Result" xml:space="preserve">
    <value>"#""My Identifier"""</value>
  </data>
  <data name="Extension_Cache_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Extension_Contents_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Extension_HasPermission_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Extension_InvokeVolatileFunction_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Extension_InvokeWithCredentials_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Extension_InvokeWithPermissions_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Extension_LoadString_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="ExtraValues_Error_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="ExtraValues_Ignore_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="ExtraValues_List_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="File_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Folder_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Folder_Files_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Function_From_Category" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="Function_From_Example1_Code" xml:space="preserve">
    <value>Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)</value>
  </data>
  <data name="Function_From_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="Function_From_Example2_Code" xml:space="preserve">
    <value>Function.From(type function (a as text, b as text) as text, (list) =&gt; list{0} &amp; list{1})("2", "1")</value>
  </data>
  <data name="Function_From_Example2_Result" xml:space="preserve">
    <value>"21"</value>
  </data>
  <data name="Function_InvokeAfter_Category" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="Function_InvokeWithErrorContext_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Function_Invoke_Category" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="Function_Invoke_Example1_Code" xml:space="preserve">
    <value>Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})</value>
  </data>
  <data name="Function_Invoke_Example1_Result" xml:space="preserve">
    <value>{"A", "B"}</value>
  </data>
  <data name="Function_IsDataSource_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Function_ScalarVector_Category" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="Function_ScalarVector_Example1_Code" xml:space="preserve">
    <value>let
    Compute.ScoreScalar = (left, right) =&gt; left * right,
    Compute.ScoreVector = (input) =&gt; let
        chunks = Table.Split(input, 100),
        scoreChunk = (chunk) =&gt; Table.TransformRows(chunk, each Compute.ScoreScalar([left], [right]))
      in
        List.Combine(List.Transform(chunks, scoreChunk)),
    Compute.Score = Function.ScalarVector(type function (left as number, right as number) as number, Compute.ScoreVector)
in
    Table.AddColumn(
        Table.FromRecords({
            [a = 1, b = 2],
            [a = 3, b = 4]
        }),
        "Result",
        each Compute.Score([a], [b])
    )</value>
  </data>
  <data name="Function_ScalarVector_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = 1, b = 2, Result = 2],
    [a = 3, b = 4, Result = 12]
})</value>
  </data>
  <data name="GeographyPoint_From_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Geography_FromWellKnownText_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Geography_ToWellKnownText_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="GeometryPoint_From_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Geometry_FromWellKnownText_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Geometry_ToWellKnownText_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="GoogleAnalytics_Accounts_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Graph_Nodes_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="GroupKind_Global_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="GroupKind_Local_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="Guid_From_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Guid_From_Example1_Code" xml:space="preserve">
    <value>Guid.From("05FE1DADC8C24F3BA4C2D194116B4967")</value>
  </data>
  <data name="Guid_From_Example1_Result" xml:space="preserve">
    <value>"05fe1dad-c8c2-4f3b-a4c2-d194116b4967"</value>
  </data>
  <data name="Guid_From_Example2_Code" xml:space="preserve">
    <value>Guid.From("05FE1DAD-C8C2-4F3B-A4C2-D194116B4967")</value>
  </data>
  <data name="Guid_From_Example2_Result" xml:space="preserve">
    <value>"05fe1dad-c8c2-4f3b-a4c2-d194116b4967"</value>
  </data>
  <data name="Guid_From_Example3_Code" xml:space="preserve">
    <value>Guid.From("{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}")</value>
  </data>
  <data name="Guid_From_Example3_Result" xml:space="preserve">
    <value>"05fe1dad-c8c2-4f3b-a4c2-d194116b4967"</value>
  </data>
  <data name="Guid_From_Example4_Code" xml:space="preserve">
    <value>Guid.From("(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)")</value>
  </data>
  <data name="Guid_From_Example4_Result" xml:space="preserve">
    <value>"05fe1dad-c8c2-4f3b-a4c2-d194116b4967"</value>
  </data>
  <data name="HdInsight_Containers_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="HdInsight_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="HdInsight_Files_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Hdfs_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Hdfs_Files_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Html_Table_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Http_Get_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Http_Post_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="IdentityProvider_Default_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="IdentityProvider_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Identity_From_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Identity_IsMemberOf_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Identity_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Informix_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Int16_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Int16_From_Example1_Code" xml:space="preserve">
    <value>Int64.From("4")</value>
  </data>
  <data name="Int16_From_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Int16_From_Example2_Code" xml:space="preserve">
    <value>Int16.From("4.5", null, RoundingMode.AwayFromZero)</value>
  </data>
  <data name="Int16_From_Example2_Result" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="Int32_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Int32_From_Example1_Code" xml:space="preserve">
    <value>Int32.From("4")</value>
  </data>
  <data name="Int32_From_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Int32_From_Example2_Code" xml:space="preserve">
    <value>Int32.From("4.5", null, RoundingMode.AwayFromZero)</value>
  </data>
  <data name="Int32_From_Example2_Result" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="Int64_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Int64_From_Example1_Code" xml:space="preserve">
    <value>Int64.From("4")</value>
  </data>
  <data name="Int64_From_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Int64_From_Example2_Code" xml:space="preserve">
    <value>Int64.From("4.5", null, RoundingMode.AwayFromZero)</value>
  </data>
  <data name="Int64_From_Example2_Result" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="Int8_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Int8_From_Example1_Code" xml:space="preserve">
    <value>Int8.From("4")</value>
  </data>
  <data name="Int8_From_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Int8_From_Example2_Code" xml:space="preserve">
    <value>Int8.From("4.5", null, RoundingMode.AwayFromZero)</value>
  </data>
  <data name="Int8_From_Example2_Result" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="ItemExpression_From_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="ItemExpression_From_Example1_Code" xml:space="preserve">
    <value>ItemExpression.From(each _ &lt;&gt; null)</value>
  </data>
  <data name="ItemExpression_From_Example1_Result" xml:space="preserve">
    <value>[
    Kind = "Binary",
    Operator = "NotEquals",
    Left = ItemExpression.Item,
    Right =
    [
        Kind = "Constant",
        Value = null
    ]
]</value>
  </data>
  <data name="ItemExpression_Item_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="JoinAlgorithm_Dynamic_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinAlgorithm_LeftHash_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinAlgorithm_LeftIndex_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinAlgorithm_PairwiseHash_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinAlgorithm_RightHash_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinAlgorithm_RightIndex_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinAlgorithm_SortMerge_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_FullOuter_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_Inner_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_LeftAnti_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_LeftOuter_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_LeftSemi_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_RightAnti_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_RightOuter_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinKind_RightSemi_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinSide_Left_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="JoinSide_Right_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="Json_Document_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Json_FromValue_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Json_FromValue_Example1_Code" xml:space="preserve">
    <value>Text.FromBinary(Json.FromValue([A = {1, true, "3"}, B = #date(2012, 3, 25)]))</value>
  </data>
  <data name="Json_FromValue_Example1_Result" xml:space="preserve">
    <value>"{""A"":[1,true,""3""],""B"":""2012-03-25""}"</value>
  </data>
  <data name="LimitClauseKind_AnsiSql2008_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="LimitClauseKind_LimitOffset_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="LimitClauseKind_Limit_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="LimitClauseKind_None_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="LimitClauseKind_Top_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="LimitClauseKind_Type_Category" xml:space="preserve">
    <value>Accessing data.Parameter values</value>
  </data>
  <data name="Lines_FromBinary_Category" xml:space="preserve">
    <value>Lines</value>
  </data>
  <data name="Lines_FromText_Category" xml:space="preserve">
    <value>Lines</value>
  </data>
  <data name="Lines_ToBinary_Category" xml:space="preserve">
    <value>Lines</value>
  </data>
  <data name="Lines_ToText_Category" xml:space="preserve">
    <value>Lines</value>
  </data>
  <data name="List_Accumulate_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_Accumulate_Example1_Code" xml:space="preserve">
    <value>List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) =&gt; state + current)</value>
  </data>
  <data name="List_Accumulate_Example1_Result" xml:space="preserve">
    <value>15</value>
  </data>
  <data name="List_AllTrue_Category" xml:space="preserve">
    <value>List.Membership functions</value>
  </data>
  <data name="List_AllTrue_Example1_Code" xml:space="preserve">
    <value>List.AllTrue({true, true, 2 &gt; 0})</value>
  </data>
  <data name="List_AllTrue_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_AllTrue_Example2_Code" xml:space="preserve">
    <value>List.AllTrue({true, false, 2 &lt; 0})</value>
  </data>
  <data name="List_AllTrue_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_Alternate_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Alternate_Example1_Code" xml:space="preserve">
    <value>List.Alternate({1..10}, 1)</value>
  </data>
  <data name="List_Alternate_Example1_Result" xml:space="preserve">
    <value>{2, 3, 4, 5, 6, 7, 8, 9, 10}</value>
  </data>
  <data name="List_Alternate_Example2_Code" xml:space="preserve">
    <value>List.Alternate({1..10}, 1, 1)</value>
  </data>
  <data name="List_Alternate_Example2_Result" xml:space="preserve">
    <value>{2, 4, 6, 8, 10}</value>
  </data>
  <data name="List_Alternate_Example3_Code" xml:space="preserve">
    <value>List.Alternate({1..10}, 1, 1, 1)</value>
  </data>
  <data name="List_Alternate_Example3_Result" xml:space="preserve">
    <value>{1, 3, 5, 7, 9}</value>
  </data>
  <data name="List_Alternate_Example4_Code" xml:space="preserve">
    <value>List.Alternate({1..10}, 1, 2, 1)</value>
  </data>
  <data name="List_Alternate_Example4_Result" xml:space="preserve">
    <value>{1, 3, 4, 6, 7, 9, 10}</value>
  </data>
  <data name="List_AnyTrue_Category" xml:space="preserve">
    <value>List.Membership functions</value>
  </data>
  <data name="List_AnyTrue_Example1_Code" xml:space="preserve">
    <value>List.AnyTrue({true, false, 2&gt;0})</value>
  </data>
  <data name="List_AnyTrue_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_AnyTrue_Example2_Code" xml:space="preserve">
    <value>List.AnyTrue({2 = 0, false, 2 &lt; 0})</value>
  </data>
  <data name="List_AnyTrue_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_Average_Category" xml:space="preserve">
    <value>List.Averages</value>
  </data>
  <data name="List_Average_Example1_Code" xml:space="preserve">
    <value>List.Average({3, 4, 6})</value>
  </data>
  <data name="List_Average_Example1_Result" xml:space="preserve">
    <value>4.333333333333333</value>
  </data>
  <data name="List_Average_Example2_Code" xml:space="preserve">
    <value>List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})</value>
  </data>
  <data name="List_Average_Example2_Result" xml:space="preserve">
    <value>#date(2011, 1, 2)</value>
  </data>
  <data name="List_Buffer_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Buffer_Example1_Code" xml:space="preserve">
    <value>List.Buffer({1..10})</value>
  </data>
  <data name="List_Buffer_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}</value>
  </data>
  <data name="List_Combine_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_Combine_Example1_Code" xml:space="preserve">
    <value>List.Combine({{1, 2}, {3, 4}})</value>
  </data>
  <data name="List_Combine_Example1_Result" xml:space="preserve">
    <value>{
    1,
    2,
    3,
    4
}</value>
  </data>
  <data name="List_Combine_Example2_Code" xml:space="preserve">
    <value>List.Combine({{1, 2}, {3, {4, 5}}})</value>
  </data>
  <data name="List_Combine_Example2_Result" xml:space="preserve">
    <value>{
    1,
    2,
    3,
    {4, 5}
}</value>
  </data>
  <data name="List_ConformToPageReader_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_ContainsAll_Category" xml:space="preserve">
    <value>List.Membership functions</value>
  </data>
  <data name="List_ContainsAll_Example1_Code" xml:space="preserve">
    <value>List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})</value>
  </data>
  <data name="List_ContainsAll_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_ContainsAll_Example2_Code" xml:space="preserve">
    <value>List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})</value>
  </data>
  <data name="List_ContainsAll_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_ContainsAny_Category" xml:space="preserve">
    <value>List.Membership functions</value>
  </data>
  <data name="List_ContainsAny_Example1_Code" xml:space="preserve">
    <value>List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})</value>
  </data>
  <data name="List_ContainsAny_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_ContainsAny_Example2_Code" xml:space="preserve">
    <value>List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})</value>
  </data>
  <data name="List_ContainsAny_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_Contains_Category" xml:space="preserve">
    <value>List.Membership functions</value>
  </data>
  <data name="List_Contains_Example1_Code" xml:space="preserve">
    <value>List.Contains({1, 2, 3, 4, 5}, 3)</value>
  </data>
  <data name="List_Contains_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_Contains_Example2_Code" xml:space="preserve">
    <value>List.Contains({1, 2, 3, 4, 5}, 6)</value>
  </data>
  <data name="List_Contains_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_Count_Category" xml:space="preserve">
    <value>List.Information</value>
  </data>
  <data name="List_Count_Example1_Code" xml:space="preserve">
    <value>List.Count({1, 2, 3})</value>
  </data>
  <data name="List_Count_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="List_Covariance_Category" xml:space="preserve">
    <value>List.Numerics</value>
  </data>
  <data name="List_Covariance_Example1_Code" xml:space="preserve">
    <value>List.Covariance({1, 2, 3}, {1, 2, 3})</value>
  </data>
  <data name="List_Covariance_Example1_Result" xml:space="preserve">
    <value>0.66666666666666607</value>
  </data>
  <data name="List_DateTimeZones_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_DateTimeZones_Example1_Code" xml:space="preserve">
    <value>List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))</value>
  </data>
  <data name="List_DateTimeZones_Example1_Result" xml:space="preserve">
    <value>{
    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),
    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),
    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),
    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),
    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),
    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),
    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),
    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),
    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),
    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)
}</value>
  </data>
  <data name="List_DateTimes_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_DateTimes_Example1_Code" xml:space="preserve">
    <value>List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))</value>
  </data>
  <data name="List_DateTimes_Example1_Result" xml:space="preserve">
    <value>{
    #datetime(2011, 12, 31, 23, 55, 0),
    #datetime(2011, 12, 31, 23, 56, 0),
    #datetime(2011, 12, 31, 23, 57, 0),
    #datetime(2011, 12, 31, 23, 58, 0),
    #datetime(2011, 12, 31, 23, 59, 0),
    #datetime(2012, 1, 1, 0, 0, 0),
    #datetime(2012, 1, 1, 0, 1, 0),
    #datetime(2012, 1, 1, 0, 2, 0),
    #datetime(2012, 1, 1, 0, 3, 0),
    #datetime(2012, 1, 1, 0, 4, 0)
}</value>
  </data>
  <data name="List_Dates_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_Dates_Example1_Code" xml:space="preserve">
    <value>List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))</value>
  </data>
  <data name="List_Dates_Example1_Result" xml:space="preserve">
    <value>{
    #date(2011, 12, 31),
    #date(2012, 1, 1),
    #date(2012, 1, 2),
    #date(2012, 1, 3),
    #date(2012, 1, 4)
}</value>
  </data>
  <data name="List_Density_Category" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="List_Density_Example1_Code" xml:space="preserve">
    <value>List.Density({1, 2, "A", #date(2005, 1, 10), "A", 2, 2})</value>
  </data>
  <data name="List_Density_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Value = 1, Count = 1],
    [Value = 2, Count = 3],
    [Value = "A", Count = 2],
    [Value = #date(2005, 1, 10), Count = 1]
})</value>
  </data>
  <data name="List_Difference_Category" xml:space="preserve">
    <value>List.Set operations</value>
  </data>
  <data name="List_Difference_Example1_Code" xml:space="preserve">
    <value>List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})</value>
  </data>
  <data name="List_Difference_Example1_Result" xml:space="preserve">
    <value>{1, 2}</value>
  </data>
  <data name="List_Difference_Example2_Code" xml:space="preserve">
    <value>List.Difference({1, 2}, {1, 2, 3})</value>
  </data>
  <data name="List_Difference_Example2_Result" xml:space="preserve">
    <value>{}</value>
  </data>
  <data name="List_Distinct_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Distinct_Example1_Code" xml:space="preserve">
    <value>List.Distinct({1, 1, 2, 3, 3, 3})</value>
  </data>
  <data name="List_Distinct_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3}</value>
  </data>
  <data name="List_Durations_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_Durations_Example1_Code" xml:space="preserve">
    <value>List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))</value>
  </data>
  <data name="List_Durations_Example1_Result" xml:space="preserve">
    <value>{
    #duration(0, 1, 0, 0),
    #duration(0, 2, 0, 0),
    #duration(0, 3, 0, 0),
    #duration(0, 4, 0, 0),
    #duration(0, 5, 0, 0)
}</value>
  </data>
  <data name="List_FindText_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_FindText_Example1_Code" xml:space="preserve">
    <value>List.FindText({"a", "b", "ab"}, "a")</value>
  </data>
  <data name="List_FindText_Example1_Result" xml:space="preserve">
    <value>{"a", "ab"}</value>
  </data>
  <data name="List_FirstN_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_FirstN_Example1_Code" xml:space="preserve">
    <value>List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ &gt; 0)</value>
  </data>
  <data name="List_FirstN_Example1_Result" xml:space="preserve">
    <value>{3, 4, 5}</value>
  </data>
  <data name="List_First_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_First_Example1_Code" xml:space="preserve">
    <value>List.First({1, 2, 3})</value>
  </data>
  <data name="List_First_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="List_First_Example2_Code" xml:space="preserve">
    <value>List.First({}, -1)</value>
  </data>
  <data name="List_First_Example2_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="List_Generate_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_Generate_Example1_Code" xml:space="preserve">
    <value>List.Generate(() =&gt; 10, each _ &gt; 0, each _ - 1)</value>
  </data>
  <data name="List_Generate_Example1_Result" xml:space="preserve">
    <value>{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}</value>
  </data>
  <data name="List_Generate_Example2_Code" xml:space="preserve">
    <value>List.Generate(
    () =&gt; [x = 1, y = {}],
    each [x] &lt; 10,
    each [x = List.Count([y]), y = [y] &amp; {x}],
    each [x]
)</value>
  </data>
  <data name="List_Generate_Example2_Result" xml:space="preserve">
    <value>{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</value>
  </data>
  <data name="List_Histogram_Category" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="List_Histogram_Example1_Code" xml:space="preserve">
    <value>List.Histogram({1, 2, 3, 4, 5, 6, 7, 8, 9, 10})</value>
  </data>
  <data name="List_Histogram_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Start = 1, Center = 2.125, End = 3.25, Count = 3],
    [Start = 3.25, Center = 4.375, End = 5.5, Count = 2],
    [Start = 5.5, Center = 6.625, End = 7.75, Count = 2],
    [Start = 7.75, Center = 8.875, End = 10, Count = 3]
})
</value>
  </data>
  <data name="List_Histogram_Example2_Code" xml:space="preserve">
    <value>List.Histogram({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3)</value>
  </data>
  <data name="List_Histogram_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Start = 1, Center = 2.5, End = 4, Count = 3],
    [Start = 4, Center = 5.5, End = 7, Count = 3],
    [Start = 7, Center = 8.5, End = 10, Count = 4]
})</value>
  </data>
  <data name="List_Histogram_Example3_Code" xml:space="preserve">
    <value>List.Histogram({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 4, {2, 9})
</value>
  </data>
  <data name="List_Histogram_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Start = 2, Center = 2.875, End = 3.75, Count = 2],
    [Start = 3.75, Center = 4.625, End = 5.5, Count = 2],
    [Start = 5.5, Center = 6.375, End = 7.25, Count = 2],
    [Start = 7.25, Center = 8.125, End = 9, Count = 2]
})</value>
  </data>
  <data name="List_Index_Category" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="List_Index_Example1_Code" xml:space="preserve">
    <value>List.Index({[A = 1, B = 2], [A = 2, B = 3], [A = 3, B = 4]}, each [A])</value>
  </data>
  <data name="List_Index_Example1_Result" xml:space="preserve">
    <value>{
    [
        A = 1,
        B = 2
    ],
    [
        A = 2,
        B = 3
    ],
    [
        A = 3,
        B = 4
    ]
}</value>
  </data>
  <data name="List_InsertRange_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_InsertRange_Example1_Code" xml:space="preserve">
    <value>List.InsertRange({1, 2, 5}, 2, {3, 4})</value>
  </data>
  <data name="List_InsertRange_Example1_Result" xml:space="preserve">
    <value>{
    1,
    2,
    3,
    4,
    5
}</value>
  </data>
  <data name="List_InsertRange_Example2_Code" xml:space="preserve">
    <value>List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})</value>
  </data>
  <data name="List_InsertRange_Example2_Result" xml:space="preserve">
    <value>{
    1,
    {
        1.1,
        1.2
    },
    2,
    3,
    4
}</value>
  </data>
  <data name="List_Intersect_Category" xml:space="preserve">
    <value>List.Set operations</value>
  </data>
  <data name="List_Intersect_Example1_Code" xml:space="preserve">
    <value>List.Intersect({{1..5}, {2..6}, {3..7}})</value>
  </data>
  <data name="List_Intersect_Example1_Result" xml:space="preserve">
    <value>{3, 4, 5}</value>
  </data>
  <data name="List_IsDistinct_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_IsDistinct_Example1_Code" xml:space="preserve">
    <value>List.IsDistinct({1, 2, 3})</value>
  </data>
  <data name="List_IsDistinct_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_IsDistinct_Example2_Code" xml:space="preserve">
    <value>List.IsDistinct({1, 2, 3, 3})</value>
  </data>
  <data name="List_IsDistinct_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_IsEmpty_Category" xml:space="preserve">
    <value>List.Information</value>
  </data>
  <data name="List_IsEmpty_Example1_Code" xml:space="preserve">
    <value>List.IsEmpty({})</value>
  </data>
  <data name="List_IsEmpty_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_IsEmpty_Example2_Code" xml:space="preserve">
    <value>List.IsEmpty({1, 2})</value>
  </data>
  <data name="List_IsEmpty_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_LastN_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_LastN_Example1_Code" xml:space="preserve">
    <value>List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)</value>
  </data>
  <data name="List_LastN_Example1_Result" xml:space="preserve">
    <value>{2}</value>
  </data>
  <data name="List_LastN_Example2_Code" xml:space="preserve">
    <value>List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ &gt; 0)</value>
  </data>
  <data name="List_LastN_Example2_Result" xml:space="preserve">
    <value>{7, 8, 2}</value>
  </data>
  <data name="List_Last_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Last_Example1_Code" xml:space="preserve">
    <value>List.Last({1, 2, 3})</value>
  </data>
  <data name="List_Last_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="List_Last_Example2_Code" xml:space="preserve">
    <value>List.Last({}, -1)</value>
  </data>
  <data name="List_Last_Example2_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="List_MatchesAll_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_MatchesAll_Example1_Code" xml:space="preserve">
    <value>List.MatchesAll({11, 12, 13}, each _  &gt; 10)</value>
  </data>
  <data name="List_MatchesAll_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_MatchesAll_Example2_Code" xml:space="preserve">
    <value>List.MatchesAll({1, 2, 3}, each _  &gt; 10)</value>
  </data>
  <data name="List_MatchesAll_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_MatchesAny_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_MatchesAny_Example1_Code" xml:space="preserve">
    <value>List.MatchesAny({9, 10, 11}, each _  &gt; 10)</value>
  </data>
  <data name="List_MatchesAny_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="List_MatchesAny_Example2_Code" xml:space="preserve">
    <value>List.MatchesAny({1, 2, 3}, each _  &gt; 10)</value>
  </data>
  <data name="List_MatchesAny_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="List_MaxN_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="List_MaxN_Example2_Code" xml:space="preserve">
    <value>List.MaxN({3, 4, 5, -1, 7, 8, 2}, 5)</value>
  </data>
  <data name="List_MaxN_Example2_Result" xml:space="preserve">
    <value>{8, 7, 5, 4, 3}</value>
  </data>
  <data name="List_Max_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="List_Max_Example1_Code" xml:space="preserve">
    <value>List.Max({1, 4, 7, 3, -2, 5}, 1)</value>
  </data>
  <data name="List_Max_Example1_Result" xml:space="preserve">
    <value>7</value>
  </data>
  <data name="List_Max_Example2_Code" xml:space="preserve">
    <value>List.Max({}, -1)</value>
  </data>
  <data name="List_Max_Example2_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="List_Median_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="List_Median_Example1_Code" xml:space="preserve">
    <value>List.Median({5, 3, 1, 7, 9})</value>
  </data>
  <data name="List_Median_Example1_Result" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="List_MinN_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="List_MinN_Example1_Code" xml:space="preserve">
    <value>List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)</value>
  </data>
  <data name="List_MinN_Example1_Result" xml:space="preserve">
    <value>{-1, 2, 3, 4, 5}</value>
  </data>
  <data name="List_Min_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="List_Min_Example1_Code" xml:space="preserve">
    <value>List.Min({1, 4, 7, 3, -2, 5})</value>
  </data>
  <data name="List_Min_Example1_Result" xml:space="preserve">
    <value>-2</value>
  </data>
  <data name="List_Min_Example2_Code" xml:space="preserve">
    <value>List.Min({}, -1)</value>
  </data>
  <data name="List_Min_Example2_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="List_Mode_Category" xml:space="preserve">
    <value>List.Averages</value>
  </data>
  <data name="List_Mode_Example1_Code" xml:space="preserve">
    <value>List.Mode({"A", 1, 2, 3, 3, 4, 5})</value>
  </data>
  <data name="List_Mode_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="List_Mode_Example2_Code" xml:space="preserve">
    <value>List.Mode({"A", 1, 2, 3, 3, 4, 5, 5})</value>
  </data>
  <data name="List_Mode_Example2_Result" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="List_Modes_Category" xml:space="preserve">
    <value>List.Averages</value>
  </data>
  <data name="List_Modes_Example1_Code" xml:space="preserve">
    <value>List.Modes({"A", 1, 2, 3, 3, 4, 5, 5})</value>
  </data>
  <data name="List_Modes_Example1_Result" xml:space="preserve">
    <value>{3, 5}</value>
  </data>
  <data name="List_NonNullCount_Category" xml:space="preserve">
    <value>List.Information</value>
  </data>
  <data name="List_Numbers_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_Numbers_Example1_Code" xml:space="preserve">
    <value>List.Numbers(1, 10)</value>
  </data>
  <data name="List_Numbers_Example1_Result" xml:space="preserve">
    <value>{
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
}</value>
  </data>
  <data name="List_Numbers_Example2_Code" xml:space="preserve">
    <value>List.Numbers(1, 10, 2)</value>
  </data>
  <data name="List_Numbers_Example2_Result" xml:space="preserve">
    <value>{
    1,
    3,
    5,
    7,
    9,
    11,
    13,
    15,
    17,
    19
}</value>
  </data>
  <data name="List_ParallelInvoke_Category" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="List_ParallelInvoke_Example1_Code" xml:space="preserve">
    <value>List.ParallelInvoke({() =&gt; 1, () =&gt; 2, () =&gt; 3}, 2)</value>
  </data>
  <data name="List_ParallelInvoke_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3}</value>
  </data>
  <data name="List_Percentile_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="List_Percentile_Example1_Code" xml:space="preserve">
    <value>List.Percentile({5, 3, 1, 7, 9}, 0.25)</value>
  </data>
  <data name="List_Percentile_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="List_Percentile_Example2_Code" xml:space="preserve">
    <value>List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])</value>
  </data>
  <data name="List_Percentile_Example2_Result" xml:space="preserve">
    <value>{2, 5, 8}</value>
  </data>
  <data name="List_PositionOfAny_Category" xml:space="preserve">
    <value>List.Membership functions</value>
  </data>
  <data name="List_PositionOfAny_Example1_Code" xml:space="preserve">
    <value>List.PositionOfAny({1, 2, 3}, {2, 3})</value>
  </data>
  <data name="List_PositionOfAny_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="List_PositionOf_Category" xml:space="preserve">
    <value>List.Membership functions</value>
  </data>
  <data name="List_PositionOf_Example1_Code" xml:space="preserve">
    <value>List.PositionOf({1, 2, 3}, 3)</value>
  </data>
  <data name="List_PositionOf_Example1_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="List_Positions_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Positions_Example1_Code" xml:space="preserve">
    <value>List.Positions({1, 2, 3, 4, null, 5})</value>
  </data>
  <data name="List_Positions_Example1_Result" xml:space="preserve">
    <value>{0, 1, 2, 3, 4, 5}</value>
  </data>
  <data name="List_Product_Category" xml:space="preserve">
    <value>List.Numerics</value>
  </data>
  <data name="List_Product_Example1_Code" xml:space="preserve">
    <value>List.Product({1, 2, 3, 3, 4, 5, 5})</value>
  </data>
  <data name="List_Product_Example1_Result" xml:space="preserve">
    <value>1800</value>
  </data>
  <data name="List_Random_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_Random_Example1_Code" xml:space="preserve">
    <value>List.Random(3)</value>
  </data>
  <data name="List_Random_Example1_Result" xml:space="preserve">
    <value>{0.992332, 0.132334, 0.023592}</value>
  </data>
  <data name="List_Random_Example2_Code" xml:space="preserve">
    <value>List.Random(3, 2)</value>
  </data>
  <data name="List_Random_Example2_Result" xml:space="preserve">
    <value>{0.883002, 0.245344, 0.723212}</value>
  </data>
  <data name="List_Range_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Range_Example1_Code" xml:space="preserve">
    <value>List.Range({1..10}, 6)</value>
  </data>
  <data name="List_Range_Example1_Result" xml:space="preserve">
    <value>{7, 8, 9, 10}</value>
  </data>
  <data name="List_Range_Example2_Code" xml:space="preserve">
    <value>List.Range({1..10}, 6, 2)</value>
  </data>
  <data name="List_Range_Example2_Result" xml:space="preserve">
    <value>{7, 8}</value>
  </data>
  <data name="List_RemoveFirstN_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_RemoveFirstN_Example1_Code" xml:space="preserve">
    <value>List.RemoveFirstN({1, 2, 3, 4, 5}, 3)</value>
  </data>
  <data name="List_RemoveFirstN_Example1_Result" xml:space="preserve">
    <value>{4, 5}</value>
  </data>
  <data name="List_RemoveFirstN_Example2_Code" xml:space="preserve">
    <value>List.RemoveFirstN({5, 4, 2, 6, 1}, each _ &gt; 3)</value>
  </data>
  <data name="List_RemoveFirstN_Example2_Result" xml:space="preserve">
    <value>{2, 6, 1}</value>
  </data>
  <data name="List_RemoveItems_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_RemoveItems_Example1_Code" xml:space="preserve">
    <value>List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})</value>
  </data>
  <data name="List_RemoveItems_Example1_Result" xml:space="preserve">
    <value>{1, 3, 5, 5}</value>
  </data>
  <data name="List_RemoveLastN_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_RemoveLastN_Example1_Code" xml:space="preserve">
    <value>List.RemoveLastN({1, 2, 3, 4, 5}, 3)</value>
  </data>
  <data name="List_RemoveLastN_Example1_Result" xml:space="preserve">
    <value>{1, 2}</value>
  </data>
  <data name="List_RemoveLastN_Example2_Code" xml:space="preserve">
    <value>List.RemoveLastN({5, 4, 2, 6, 4}, each _ &gt; 3)</value>
  </data>
  <data name="List_RemoveLastN_Example2_Result" xml:space="preserve">
    <value>{5, 4, 2}</value>
  </data>
  <data name="List_RemoveMatchingItems_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_RemoveMatchingItems_Example1_Code" xml:space="preserve">
    <value>List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})</value>
  </data>
  <data name="List_RemoveMatchingItems_Example1_Result" xml:space="preserve">
    <value>{2, 3, 4}</value>
  </data>
  <data name="List_RemoveNulls_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_RemoveNulls_Example1_Code" xml:space="preserve">
    <value>List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})</value>
  </data>
  <data name="List_RemoveNulls_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3, 4, 5, 6}</value>
  </data>
  <data name="List_RemoveRange_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_RemoveRange_Example1_Code" xml:space="preserve">
    <value>List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)</value>
  </data>
  <data name="List_RemoveRange_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3, 4, 5}</value>
  </data>
  <data name="List_Repeat_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_Repeat_Example1_Code" xml:space="preserve">
    <value>List.Repeat({1, 2}, 3)</value>
  </data>
  <data name="List_Repeat_Example1_Result" xml:space="preserve">
    <value>{1, 2, 1, 2, 1, 2}</value>
  </data>
  <data name="List_ReplaceMatchingItems_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_ReplaceMatchingItems_Example1_Code" xml:space="preserve">
    <value>List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})</value>
  </data>
  <data name="List_ReplaceMatchingItems_Example1_Result" xml:space="preserve">
    <value>{-1, 2, 3, 4, -5}</value>
  </data>
  <data name="List_ReplaceRange_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_ReplaceRange_Example1_Code" xml:space="preserve">
    <value>List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})</value>
  </data>
  <data name="List_ReplaceRange_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3, 4, 5}</value>
  </data>
  <data name="List_ReplaceValue_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_ReplaceValue_Example1_Code" xml:space="preserve">
    <value>List.ReplaceValue({"a", "B", "a", "a"}, "a", "A", Replacer.ReplaceText)</value>
  </data>
  <data name="List_ReplaceValue_Example1_Result" xml:space="preserve">
    <value>{"A", "B", "A", "A"}</value>
  </data>
  <data name="List_Reverse_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_Reverse_Example1_Code" xml:space="preserve">
    <value>List.Reverse({1..10})</value>
  </data>
  <data name="List_Reverse_Example1_Result" xml:space="preserve">
    <value>{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}</value>
  </data>
  <data name="List_Select_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Select_Example1_Code" xml:space="preserve">
    <value>List.Select({1, -3, 4, 9, -2}, each _ &gt; 0)</value>
  </data>
  <data name="List_Select_Example1_Result" xml:space="preserve">
    <value>{1, 4, 9}</value>
  </data>
  <data name="List_SingleOrDefault_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_SingleOrDefault_Example1_Code" xml:space="preserve">
    <value>List.SingleOrDefault({1})</value>
  </data>
  <data name="List_SingleOrDefault_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="List_SingleOrDefault_Example2_Code" xml:space="preserve">
    <value>List.SingleOrDefault({})</value>
  </data>
  <data name="List_SingleOrDefault_Example2_Result" xml:space="preserve">
    <value>null</value>
  </data>
  <data name="List_SingleOrDefault_Example3_Code" xml:space="preserve">
    <value>List.SingleOrDefault({}, -1)</value>
  </data>
  <data name="List_SingleOrDefault_Example3_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="List_Single_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Single_Example1_Code" xml:space="preserve">
    <value>List.Single({1})</value>
  </data>
  <data name="List_Single_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="List_Single_Example2_Code" xml:space="preserve">
    <value>List.Single({1, 2, 3})</value>
  </data>
  <data name="List_Single_Example2_Result" xml:space="preserve">
    <value>[Expression.Error] There were too many elements in the enumeration to complete the operation.</value>
  </data>
  <data name="List_Skip_Category" xml:space="preserve">
    <value>List.Selection</value>
  </data>
  <data name="List_Skip_Example1_Code" xml:space="preserve">
    <value>List.Skip({1, 2, 3, 4, 5}, 3)</value>
  </data>
  <data name="List_Skip_Example1_Result" xml:space="preserve">
    <value>{4, 5}</value>
  </data>
  <data name="List_Skip_Example2_Code" xml:space="preserve">
    <value>List.Skip({5, 4, 2, 6, 1}, each _ &gt; 3)</value>
  </data>
  <data name="List_Skip_Example2_Result" xml:space="preserve">
    <value>{2, 6, 1}</value>
  </data>
  <data name="List_Sort_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="List_Sort_Example1_Code" xml:space="preserve">
    <value>List.Sort({2, 3, 1})</value>
  </data>
  <data name="List_Sort_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3}</value>
  </data>
  <data name="List_Sort_Example2_Code" xml:space="preserve">
    <value>List.Sort({2, 3, 1}, Order.Descending)</value>
  </data>
  <data name="List_Sort_Example2_Result" xml:space="preserve">
    <value>{3, 2, 1}</value>
  </data>
  <data name="List_Sort_Example3_Code" xml:space="preserve">
    <value>List.Sort({2, 3, 1}, (x, y) =&gt; Value.Compare(1/x, 1/y))</value>
  </data>
  <data name="List_Sort_Example3_Result" xml:space="preserve">
    <value>{3, 2, 1}</value>
  </data>
  <data name="List_Split_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_StandardDeviation_Category" xml:space="preserve">
    <value>List.Averages</value>
  </data>
  <data name="List_StandardDeviation_Example1_Code" xml:space="preserve">
    <value>List.StandardDeviation({1..5})</value>
  </data>
  <data name="List_StandardDeviation_Example1_Result" xml:space="preserve">
    <value>1.5811388300841898</value>
  </data>
  <data name="List_Sum_Category" xml:space="preserve">
    <value>List.Addition</value>
  </data>
  <data name="List_Sum_Example1_Code" xml:space="preserve">
    <value>List.Sum({1, 2, 3})</value>
  </data>
  <data name="List_Sum_Example1_Result" xml:space="preserve">
    <value>6</value>
  </data>
  <data name="List_Times_Category" xml:space="preserve">
    <value>List.Generators</value>
  </data>
  <data name="List_Times_Example1_Code" xml:space="preserve">
    <value>List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))</value>
  </data>
  <data name="List_Times_Example1_Result" xml:space="preserve">
    <value>{
    #time(12, 0, 0),
    #time(13, 0, 0),
    #time(14, 0, 0),
    #time(15, 0, 0)
}</value>
  </data>
  <data name="List_TransformMany_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_TransformMany_Example1_Code" xml:space="preserve">
    <value>List.TransformMany(
    {
        [Name = "Alice", Pets = {"Scruffy", "Sam"}],
        [Name = "Bob", Pets = {"Walker"}]
    },
    each [Pets],
    (person, pet) =&gt; [Name = person[Name], Pet = pet]
)</value>
  </data>
  <data name="List_TransformMany_Example1_Result" xml:space="preserve">
    <value>{
    [Name = "Alice", Pet = "Scruffy"],
    [Name = "Alice", Pet = "Sam"],
    [Name = "Bob", Pet = "Walker"]
}</value>
  </data>
  <data name="List_Transform_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_Transform_Example1_Code" xml:space="preserve">
    <value>List.Transform({1, 2}, each _ + 1)</value>
  </data>
  <data name="List_Transform_Example1_Result" xml:space="preserve">
    <value>{2, 3}</value>
  </data>
  <data name="List_Union_Category" xml:space="preserve">
    <value>List.Set operations</value>
  </data>
  <data name="List_Union_Example1_Code" xml:space="preserve">
    <value>List.Union({{1..5}, {2..6}, {3..7}})</value>
  </data>
  <data name="List_Union_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3, 4, 5, 6, 7}</value>
  </data>
  <data name="List_Zip_Category" xml:space="preserve">
    <value>List.Transformation functions</value>
  </data>
  <data name="List_Zip_Example1_Code" xml:space="preserve">
    <value>List.Zip({{1, 2}, {3, 4}})</value>
  </data>
  <data name="List_Zip_Example1_Result" xml:space="preserve">
    <value>{
    {1, 3},
    {2, 4}
}</value>
  </data>
  <data name="List_Zip_Example2_Code" xml:space="preserve">
    <value>List.Zip({{1, 2}, {3}})</value>
  </data>
  <data name="List_Zip_Example2_Result" xml:space="preserve">
    <value>{
    {1, 3},
    {2, null}
}</value>
  </data>
  <data name="Logical_Constants_False_Category" xml:space="preserve">
    <value>Logical</value>
  </data>
  <data name="Logical_Constants_True_Category" xml:space="preserve">
    <value>Logical</value>
  </data>
  <data name="Logical_FromText_Category" xml:space="preserve">
    <value>Logical</value>
  </data>
  <data name="Logical_FromText_Example1_Code" xml:space="preserve">
    <value>Logical.FromText("true")</value>
  </data>
  <data name="Logical_FromText_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Logical_FromText_Example2_Code" xml:space="preserve">
    <value>Logical.FromText("a")</value>
  </data>
  <data name="Logical_FromText_Example2_Result" xml:space="preserve">
    <value>[Expression.Error] Could not convert to a logical.</value>
  </data>
  <data name="Logical_From_Category" xml:space="preserve">
    <value>Logical</value>
  </data>
  <data name="Logical_From_Example1_Code" xml:space="preserve">
    <value>Logical.From(2)</value>
  </data>
  <data name="Logical_From_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Logical_ToText_Category" xml:space="preserve">
    <value>Logical</value>
  </data>
  <data name="Logical_ToText_Example1_Code" xml:space="preserve">
    <value>Logical.ToText(true)</value>
  </data>
  <data name="Logical_ToText_Example1_Result" xml:space="preserve">
    <value>"true"</value>
  </data>
  <data name="MQ_Queue_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Mashup_Document_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="MissingField_Error_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="MissingField_Ignore_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="MissingField_UseNull_Category" xml:space="preserve">
    <value>Table.Parameter values</value>
  </data>
  <data name="Module_Versions_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="MySQL_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Number_Abs_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Abs_Example1_Code" xml:space="preserve">
    <value>Number.Abs(-3)</value>
  </data>
  <data name="Number_Abs_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="Number_Acos_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_Asin_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_Atan2_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_Atan_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_BitwiseAnd_Category" xml:space="preserve">
    <value>Number.Bytes</value>
  </data>
  <data name="Number_BitwiseNot_Category" xml:space="preserve">
    <value>Number.Bytes</value>
  </data>
  <data name="Number_BitwiseOr_Category" xml:space="preserve">
    <value>Number.Bytes</value>
  </data>
  <data name="Number_BitwiseShiftLeft_Category" xml:space="preserve">
    <value>Number.Bytes</value>
  </data>
  <data name="Number_BitwiseShiftRight_Category" xml:space="preserve">
    <value>Number.Bytes</value>
  </data>
  <data name="Number_BitwiseXor_Category" xml:space="preserve">
    <value>Number.Bytes</value>
  </data>
  <data name="Number_Combinations_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Combinations_Example1_Code" xml:space="preserve">
    <value>Number.Combinations(5, 3)</value>
  </data>
  <data name="Number_Combinations_Example1_Result" xml:space="preserve">
    <value>10</value>
  </data>
  <data name="Number_Cos_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_Cos_Example1_Code" xml:space="preserve">
    <value>Number.Cos(0)</value>
  </data>
  <data name="Number_Cos_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Number_Cosh_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_E_Category" xml:space="preserve">
    <value>Number.Constants</value>
  </data>
  <data name="Number_Epsilon_Category" xml:space="preserve">
    <value>Number.Constants</value>
  </data>
  <data name="Number_Exp_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Exp_Example1_Code" xml:space="preserve">
    <value>Number.Exp(3)</value>
  </data>
  <data name="Number_Exp_Example1_Result" xml:space="preserve">
    <value>20.085536923187668</value>
  </data>
  <data name="Number_Factorial_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Factorial_Example1_Code" xml:space="preserve">
    <value>Number.Factorial(10)</value>
  </data>
  <data name="Number_Factorial_Example1_Result" xml:space="preserve">
    <value>3628800</value>
  </data>
  <data name="Number_FromText_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Number_FromText_Example1_Code" xml:space="preserve">
    <value>Number.FromText("4")</value>
  </data>
  <data name="Number_FromText_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Number_FromText_Example2_Code" xml:space="preserve">
    <value>Number.FromText("5.0e-10")</value>
  </data>
  <data name="Number_FromText_Example2_Result" xml:space="preserve">
    <value>5E-10</value>
  </data>
  <data name="Number_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Number_From_Example1_Code" xml:space="preserve">
    <value>Number.From("4")</value>
  </data>
  <data name="Number_From_Example1_Result" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="Number_From_Example2_Code" xml:space="preserve">
    <value>Number.From(#datetime(2020, 3, 20, 6, 0, 0))</value>
  </data>
  <data name="Number_From_Example2_Result" xml:space="preserve">
    <value>43910.25</value>
  </data>
  <data name="Number_From_Example3_Code" xml:space="preserve">
    <value>Number.From("12.3%")</value>
  </data>
  <data name="Number_From_Example3_Result" xml:space="preserve">
    <value>0.123</value>
  </data>
  <data name="Number_IntegerDivide_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_IntegerDivide_Example1_Code" xml:space="preserve">
    <value>Number.IntegerDivide(6, 4)</value>
  </data>
  <data name="Number_IntegerDivide_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Number_IntegerDivide_Example2_Code" xml:space="preserve">
    <value>Number.IntegerDivide(8.3, 3)</value>
  </data>
  <data name="Number_IntegerDivide_Example2_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Number_IsEven_Category" xml:space="preserve">
    <value>Number.Information</value>
  </data>
  <data name="Number_IsEven_Example1_Code" xml:space="preserve">
    <value>Number.IsEven(625)</value>
  </data>
  <data name="Number_IsEven_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Number_IsEven_Example2_Code" xml:space="preserve">
    <value>Number.IsEven(82)</value>
  </data>
  <data name="Number_IsEven_Example2_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Number_IsNaN_Category" xml:space="preserve">
    <value>Number.Information</value>
  </data>
  <data name="Number_IsNaN_Example1_Code" xml:space="preserve">
    <value>Number.IsNaN(0/0)</value>
  </data>
  <data name="Number_IsNaN_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Number_IsNaN_Example2_Code" xml:space="preserve">
    <value>Number.IsNaN(1/0)</value>
  </data>
  <data name="Number_IsNaN_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Number_IsOdd_Category" xml:space="preserve">
    <value>Number.Information</value>
  </data>
  <data name="Number_IsOdd_Example1_Code" xml:space="preserve">
    <value>Number.IsOdd(625)</value>
  </data>
  <data name="Number_IsOdd_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Number_IsOdd_Example2_Code" xml:space="preserve">
    <value>Number.IsOdd(82)</value>
  </data>
  <data name="Number_IsOdd_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Number_Ln_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Ln_Example1_Code" xml:space="preserve">
    <value>Number.Ln(15)</value>
  </data>
  <data name="Number_Ln_Example1_Result" xml:space="preserve">
    <value>2.70805020110221</value>
  </data>
  <data name="Number_Log10_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Log10_Example1_Code" xml:space="preserve">
    <value>Number.Log10(2)</value>
  </data>
  <data name="Number_Log10_Example1_Result" xml:space="preserve">
    <value>0.3010299956639812</value>
  </data>
  <data name="Number_Log_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Log_Example1_Code" xml:space="preserve">
    <value>Number.Log(2, 10)</value>
  </data>
  <data name="Number_Log_Example1_Result" xml:space="preserve">
    <value>0.3010299956639812</value>
  </data>
  <data name="Number_Log_Example2_Code" xml:space="preserve">
    <value>Number.Log(2)</value>
  </data>
  <data name="Number_Log_Example2_Result" xml:space="preserve">
    <value>0.69314718055994529</value>
  </data>
  <data name="Number_Mod_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Mod_Example1_Code" xml:space="preserve">
    <value>Number.Mod(5, 3)</value>
  </data>
  <data name="Number_Mod_Example1_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Number_NaN_Category" xml:space="preserve">
    <value>Number.Constants</value>
  </data>
  <data name="Number_NegativeInfinity_Category" xml:space="preserve">
    <value>Number.Constants</value>
  </data>
  <data name="Number_PI_Category" xml:space="preserve">
    <value>Number.Constants</value>
  </data>
  <data name="Number_Permutations_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Permutations_Example1_Code" xml:space="preserve">
    <value>Number.Permutations(5, 3)</value>
  </data>
  <data name="Number_Permutations_Example1_Result" xml:space="preserve">
    <value>60</value>
  </data>
  <data name="Number_PositiveInfinity_Category" xml:space="preserve">
    <value>Number.Constants</value>
  </data>
  <data name="Number_Power_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Power_Example1_Code" xml:space="preserve">
    <value>Number.Power(5, 3)</value>
  </data>
  <data name="Number_Power_Example1_Result" xml:space="preserve">
    <value>125</value>
  </data>
  <data name="Number_RandomBetween_Category" xml:space="preserve">
    <value>Number.Random</value>
  </data>
  <data name="Number_RandomBetween_Example1_Code" xml:space="preserve">
    <value>Number.RandomBetween(1, 5)</value>
  </data>
  <data name="Number_RandomBetween_Example1_Result" xml:space="preserve">
    <value>2.546797</value>
  </data>
  <data name="Number_Random_Category" xml:space="preserve">
    <value>Number.Random</value>
  </data>
  <data name="Number_Random_Example1_Code" xml:space="preserve">
    <value>Number.Random()</value>
  </data>
  <data name="Number_Random_Example1_Result" xml:space="preserve">
    <value>0.919303</value>
  </data>
  <data name="Number_RoundAwayFromZero_Category" xml:space="preserve">
    <value>Number.Rounding</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example1_Code" xml:space="preserve">
    <value>Number.RoundAwayFromZero(-1.2)</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example1_Result" xml:space="preserve">
    <value>-2</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example2_Code" xml:space="preserve">
    <value>Number.RoundAwayFromZero(1.2)</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example2_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example3_Code" xml:space="preserve">
    <value>Number.RoundAwayFromZero(-1.234, 2)</value>
  </data>
  <data name="Number_RoundAwayFromZero_Example3_Result" xml:space="preserve">
    <value>-1.24</value>
  </data>
  <data name="Number_RoundDown_Category" xml:space="preserve">
    <value>Number.Rounding</value>
  </data>
  <data name="Number_RoundDown_Example1_Code" xml:space="preserve">
    <value>Number.RoundDown(1.234)</value>
  </data>
  <data name="Number_RoundDown_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Number_RoundDown_Example2_Code" xml:space="preserve">
    <value>Number.RoundDown(1.999)</value>
  </data>
  <data name="Number_RoundDown_Example2_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Number_RoundDown_Example3_Code" xml:space="preserve">
    <value>Number.RoundDown(1.999, 2)</value>
  </data>
  <data name="Number_RoundDown_Example3_Result" xml:space="preserve">
    <value>1.99</value>
  </data>
  <data name="Number_RoundTowardZero_Category" xml:space="preserve">
    <value>Number.Rounding</value>
  </data>
  <data name="Number_RoundTowardZero_Example1_Code" xml:space="preserve">
    <value>Number.RoundTowardZero(-1.2)</value>
  </data>
  <data name="Number_RoundTowardZero_Example1_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="Number_RoundTowardZero_Example2_Code" xml:space="preserve">
    <value>Number.RoundTowardZero(1.2)</value>
  </data>
  <data name="Number_RoundTowardZero_Example2_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Number_RoundTowardZero_Example3_Code" xml:space="preserve">
    <value>Number.RoundTowardZero(-1.234, 2)</value>
  </data>
  <data name="Number_RoundTowardZero_Example3_Result" xml:space="preserve">
    <value>-1.23</value>
  </data>
  <data name="Number_RoundUp_Category" xml:space="preserve">
    <value>Number.Rounding</value>
  </data>
  <data name="Number_RoundUp_Example1_Code" xml:space="preserve">
    <value>Number.RoundUp(1.234)</value>
  </data>
  <data name="Number_RoundUp_Example1_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Number_RoundUp_Example2_Code" xml:space="preserve">
    <value>Number.RoundUp(1.999)</value>
  </data>
  <data name="Number_RoundUp_Example2_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Number_RoundUp_Example3_Code" xml:space="preserve">
    <value>Number.RoundUp(1.234, 2)</value>
  </data>
  <data name="Number_RoundUp_Example3_Result" xml:space="preserve">
    <value>1.24</value>
  </data>
  <data name="Number_Round_Category" xml:space="preserve">
    <value>Number.Rounding</value>
  </data>
  <data name="Number_Round_Example1_Code" xml:space="preserve">
    <value>Number.Round(1.234)</value>
  </data>
  <data name="Number_Round_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Number_Round_Example2_Code" xml:space="preserve">
    <value>Number.Round(1.56)</value>
  </data>
  <data name="Number_Round_Example2_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Number_Round_Example3_Code" xml:space="preserve">
    <value>Number.Round(1.2345, 2)</value>
  </data>
  <data name="Number_Round_Example3_Result" xml:space="preserve">
    <value>1.23</value>
  </data>
  <data name="Number_Round_Example4_Code" xml:space="preserve">
    <value>Number.Round(1.2345, 3, RoundingMode.Up)</value>
  </data>
  <data name="Number_Round_Example4_Result" xml:space="preserve">
    <value>1.235</value>
  </data>
  <data name="Number_Round_Example5_Code" xml:space="preserve">
    <value>Number.Round(1.2345, 3, RoundingMode.Down)</value>
  </data>
  <data name="Number_Round_Example5_Result" xml:space="preserve">
    <value>1.234</value>
  </data>
  <data name="Number_Sign_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Sign_Example1_Code" xml:space="preserve">
    <value>Number.Sign(182)</value>
  </data>
  <data name="Number_Sign_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Number_Sign_Example2_Code" xml:space="preserve">
    <value>Number.Sign(-182)</value>
  </data>
  <data name="Number_Sign_Example2_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="Number_Sign_Example3_Code" xml:space="preserve">
    <value>Number.Sign(0)</value>
  </data>
  <data name="Number_Sign_Example3_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Number_Sin_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_Sin_Example1_Code" xml:space="preserve">
    <value>Number.Sin(0)</value>
  </data>
  <data name="Number_Sin_Example1_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Number_Sinh_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_Sqrt_Category" xml:space="preserve">
    <value>Number.Operations</value>
  </data>
  <data name="Number_Sqrt_Example1_Code" xml:space="preserve">
    <value>Number.Sqrt(625)</value>
  </data>
  <data name="Number_Sqrt_Example1_Result" xml:space="preserve">
    <value>25</value>
  </data>
  <data name="Number_Sqrt_Example2_Code" xml:space="preserve">
    <value>Number.Sqrt(85)</value>
  </data>
  <data name="Number_Sqrt_Example2_Result" xml:space="preserve">
    <value>9.2195444572928871</value>
  </data>
  <data name="Number_Tan_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_Tan_Example1_Code" xml:space="preserve">
    <value>Number.Tan(1)</value>
  </data>
  <data name="Number_Tan_Example1_Result" xml:space="preserve">
    <value>1.5574077246549023</value>
  </data>
  <data name="Number_Tanh_Category" xml:space="preserve">
    <value>Number.Trigonometry</value>
  </data>
  <data name="Number_ToText_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Number_ToText_Example1_Code" xml:space="preserve">
    <value>Number.ToText(4)</value>
  </data>
  <data name="Number_ToText_Example1_Result" xml:space="preserve">
    <value>"4"</value>
  </data>
  <data name="Number_ToText_Example2_Code" xml:space="preserve">
    <value>Number.ToText(4, "e")</value>
  </data>
  <data name="Number_ToText_Example2_Result" xml:space="preserve">
    <value>"4.000000e+000"</value>
  </data>
  <data name="Number_ToText_Example3_Code" xml:space="preserve">
    <value>Number.ToText(-0.1234, "P1")</value>
  </data>
  <data name="Number_ToText_Example3_Result" xml:space="preserve">
    <value>"-12.3 %"</value>
  </data>
  <data name="ODataOmitValues_Nulls_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="ODataOmitValues_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="OData_Feed_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="OData_Feed_Example1_Code" xml:space="preserve">
    <value>OData.Feed("https://services.odata.org/V4/TripPinService")</value>
  </data>
  <data name="OData_Feed_Example1_Result" xml:space="preserve">
    <value>table</value>
  </data>
  <data name="Occurrence_All_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="Occurrence_First_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="Occurrence_Last_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="Occurrence_Optional_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="Occurrence_Repeating_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="Occurrence_Required_Category" xml:space="preserve">
    <value>Binary Formats.Parameter values</value>
  </data>
  <data name="Odbc_DataSource_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Odbc_DataSource_Example1_Code" xml:space="preserve">
    <value>Odbc.DataSource("dsn=your_dsn")</value>
  </data>
  <data name="Odbc_DataSource_Example1_Result" xml:space="preserve">
    <value>table</value>
  </data>
  <data name="Odbc_InferOptions_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Odbc_InferOptions_Example1_Code" xml:space="preserve">
    <value>Odbc.InferOptions("dsn=your_dsn")</value>
  </data>
  <data name="Odbc_InferOptions_Example1_Result" xml:space="preserve">
    <value>record</value>
  </data>
  <data name="Odbc_Query_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Odbc_Query_Example1_Code" xml:space="preserve">
    <value>Odbc.Query("dsn=your_dsn", "select * from Customers")</value>
  </data>
  <data name="Odbc_Query_Example1_Result" xml:space="preserve">
    <value>table</value>
  </data>
  <data name="OleDb_DataSource_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="OleDb_Query_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="OpenApi_Document_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Oracle_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Order_Ascending_Category" xml:space="preserve">
    <value>List.Parameter values</value>
  </data>
  <data name="Order_Descending_Category" xml:space="preserve">
    <value>List.Parameter values</value>
  </data>
  <data name="Parquet_Document_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Parquet_Metadata_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Pdf_Tables_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Percentage_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Percentage_From_Example1_Code" xml:space="preserve">
    <value>Percentage.From("12.3%")</value>
  </data>
  <data name="Percentage_From_Example1_Result" xml:space="preserve">
    <value>0.123</value>
  </data>
  <data name="PercentileMode_ExcelExc_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="PercentileMode_ExcelInc_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="PercentileMode_SqlCont_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="PercentileMode_SqlDisc_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="PercentileMode_Type_Category" xml:space="preserve">
    <value>List.Ordering</value>
  </data>
  <data name="PostgreSQL_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Precision_Decimal_Category" xml:space="preserve">
    <value>Values.Parameter values</value>
  </data>
  <data name="Precision_Double_Category" xml:space="preserve">
    <value>Values.Parameter values</value>
  </data>
  <data name="Progress_DataSourceProgress_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="QuoteStyle_Csv_Category" xml:space="preserve">
    <value>Splitter.Parameter values</value>
  </data>
  <data name="QuoteStyle_None_Category" xml:space="preserve">
    <value>Splitter.Parameter values</value>
  </data>
  <data name="RData_FromBinary_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="RankKind_Competition_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="RankKind_Dense_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="RankKind_Ordinal_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="RankKind_Type_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="Record_AddField_Category" xml:space="preserve">
    <value>Record.Transformations</value>
  </data>
  <data name="Record_AddField_Example1_Code" xml:space="preserve">
    <value>Record.AddField([CustomerID = 1, Name = "Bob", Phone = "123-4567"], "Address", "123 Main St.")</value>
  </data>
  <data name="Record_AddField_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 1, Name = "Bob", Phone = "123-4567", Address = "123 Main St."]</value>
  </data>
  <data name="Record_Combine_Category" xml:space="preserve">
    <value>Record.Transformations</value>
  </data>
  <data name="Record_Combine_Example1_Code" xml:space="preserve">
    <value>Record.Combine({
    [CustomerID = 1, Name = "Bob"],
    [Phone = "123-4567"]
})</value>
  </data>
  <data name="Record_Combine_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 1, Name = "Bob", Phone = "123-4567"]</value>
  </data>
  <data name="Record_FieldCount_Category" xml:space="preserve">
    <value>Record.Information</value>
  </data>
  <data name="Record_FieldCount_Example1_Code" xml:space="preserve">
    <value>Record.FieldCount([CustomerID = 1, Name = "Bob"])</value>
  </data>
  <data name="Record_FieldCount_Example1_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Record_FieldNames_Category" xml:space="preserve">
    <value>Record.Selection</value>
  </data>
  <data name="Record_FieldNames_Example1_Code" xml:space="preserve">
    <value>Record.FieldNames([OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0])</value>
  </data>
  <data name="Record_FieldNames_Example1_Result" xml:space="preserve">
    <value>{"OrderID", "CustomerID", "Item", "Price"}</value>
  </data>
  <data name="Record_FieldOrDefault_Category" xml:space="preserve">
    <value>Record.Selection</value>
  </data>
  <data name="Record_FieldOrDefault_Example1_Code" xml:space="preserve">
    <value>Record.FieldOrDefault([CustomerID = 1, Name = "Bob"], "Phone")</value>
  </data>
  <data name="Record_FieldOrDefault_Example1_Result" xml:space="preserve">
    <value>null</value>
  </data>
  <data name="Record_FieldOrDefault_Example2_Code" xml:space="preserve">
    <value>Record.FieldOrDefault([CustomerID = 1, Name = "Bob"], "Phone", "123-4567")</value>
  </data>
  <data name="Record_FieldOrDefault_Example2_Result" xml:space="preserve">
    <value>"123-4567"</value>
  </data>
  <data name="Record_FieldValues_Category" xml:space="preserve">
    <value>Record.Selection</value>
  </data>
  <data name="Record_FieldValues_Example1_Code" xml:space="preserve">
    <value>Record.FieldValues([CustomerID = 1, Name = "Bob", Phone = "123-4567"])</value>
  </data>
  <data name="Record_FieldValues_Example1_Result" xml:space="preserve">
    <value>{1, "Bob", "123-4567"}</value>
  </data>
  <data name="Record_Field_Category" xml:space="preserve">
    <value>Record.Selection</value>
  </data>
  <data name="Record_Field_Example1_Code" xml:space="preserve">
    <value>Record.Field([CustomerID = 1, Name = "Bob", Phone = "123-4567"], "CustomerID")</value>
  </data>
  <data name="Record_Field_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Record_FromList_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Record_FromList_Example1_Code" xml:space="preserve">
    <value>Record.FromList({1, "Bob", "123-4567"}, {"CustomerID", "Name", "Phone"})</value>
  </data>
  <data name="Record_FromList_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 1, Name = "Bob", Phone = "123-4567"]</value>
  </data>
  <data name="Record_FromList_Example2_Code" xml:space="preserve">
    <value>Record.FromList({1, "Bob", "123-4567"}, type [CustomerID = number, Name = text, Phone = number])</value>
  </data>
  <data name="Record_FromList_Example2_Result" xml:space="preserve">
    <value>[CustomerID = 1, Name = "Bob", Phone = "123-4567"]</value>
  </data>
  <data name="Record_FromTable_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Record_FromTable_Example1_Code" xml:space="preserve">
    <value>Record.FromTable(
    Table.FromRecords({
        [Name = "CustomerID", Value = 1],
        [Name = "Name", Value = "Bob"],
        [Name = "Phone", Value = "123-4567"]
    })
)</value>
  </data>
  <data name="Record_FromTable_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 1, Name = "Bob", Phone = "123-4567"]</value>
  </data>
  <data name="Record_HasFields_Category" xml:space="preserve">
    <value>Record.Information</value>
  </data>
  <data name="Record_HasFields_Example1_Code" xml:space="preserve">
    <value>Record.HasFields([CustomerID = 1, Name = "Bob", Phone = "123-4567"], "CustomerID")</value>
  </data>
  <data name="Record_HasFields_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Record_HasFields_Example2_Code" xml:space="preserve">
    <value>Record.HasFields([CustomerID = 1, Name = "Bob", Phone = "123-4567"], {"CustomerID", "Address"})</value>
  </data>
  <data name="Record_HasFields_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Record_RemoveFields_Category" xml:space="preserve">
    <value>Record.Transformations</value>
  </data>
  <data name="Record_RemoveFields_Example1_Code" xml:space="preserve">
    <value>Record.RemoveFields([CustomerID = 1, Item = "Fishing rod", Price = 18.00], "Price")</value>
  </data>
  <data name="Record_RemoveFields_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 1, Item = "Fishing rod"]</value>
  </data>
  <data name="Record_RemoveFields_Example2_Code" xml:space="preserve">
    <value>Record.RemoveFields([CustomerID = 1, Item = "Fishing rod", Price = 18.00], {"Price", "Item"})</value>
  </data>
  <data name="Record_RemoveFields_Example2_Result" xml:space="preserve">
    <value>[CustomerID = 1]</value>
  </data>
  <data name="Record_RenameFields_Category" xml:space="preserve">
    <value>Record.Transformations</value>
  </data>
  <data name="Record_RenameFields_Example1_Code" xml:space="preserve">
    <value>Record.RenameFields(
    [OrderID = 1, CustomerID = 1, Item = "Fishing rod", UnitPrice = 100.0],
    {"UnitPrice", "Price"}
)</value>
  </data>
  <data name="Record_RenameFields_Example1_Result" xml:space="preserve">
    <value>[OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0]</value>
  </data>
  <data name="Record_RenameFields_Example2_Code" xml:space="preserve">
    <value>Record.RenameFields(
    [OrderNum = 1, CustomerID = 1, Item = "Fishing rod", UnitPrice = 100.0],
    {
        {"UnitPrice", "Price"},
        {"OrderNum", "OrderID"}
    }
)</value>
  </data>
  <data name="Record_RenameFields_Example2_Result" xml:space="preserve">
    <value>[OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0]</value>
  </data>
  <data name="Record_ReorderFields_Category" xml:space="preserve">
    <value>Record.Transformations</value>
  </data>
  <data name="Record_ReorderFields_Example1_Code" xml:space="preserve">
    <value>Record.ReorderFields(
    [CustomerID = 1, OrderID = 1, Item = "Fishing rod", Price = 100.0],
    {"OrderID", "CustomerID"}
)</value>
  </data>
  <data name="Record_ReorderFields_Example1_Result" xml:space="preserve">
    <value>[OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0]</value>
  </data>
  <data name="Record_SelectFields_Category" xml:space="preserve">
    <value>Record.Selection</value>
  </data>
  <data name="Record_SelectFields_Example1_Code" xml:space="preserve">
    <value>Record.SelectFields(
    [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0],
    {"Item", "Price"}
)</value>
  </data>
  <data name="Record_SelectFields_Example1_Result" xml:space="preserve">
    <value>[Item = "Fishing rod", Price = 100]</value>
  </data>
  <data name="Record_ToList_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Record_ToList_Example1_Code" xml:space="preserve">
    <value>Record.ToList([A = 1, B = 2, C = 3])</value>
  </data>
  <data name="Record_ToList_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3}</value>
  </data>
  <data name="Record_ToTable_Category" xml:space="preserve">
    <value>Record.Serialization</value>
  </data>
  <data name="Record_ToTable_Example1_Code" xml:space="preserve">
    <value>Record.ToTable([OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0])</value>
  </data>
  <data name="Record_ToTable_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Name = "OrderID", Value = 1],
    [Name = "CustomerID", Value = 1],
    [Name = "Item", Value = "Fishing rod"],
    [Name = "Price", Value = 100]
})</value>
  </data>
  <data name="Record_TransformFields_Category" xml:space="preserve">
    <value>Record.Transformations</value>
  </data>
  <data name="Record_TransformFields_Example1_Code" xml:space="preserve">
    <value>Record.TransformFields(
    [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = "100.0"],
    {"Price", Number.FromText}
)</value>
  </data>
  <data name="Record_TransformFields_Example1_Result" xml:space="preserve">
    <value>[OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100]</value>
  </data>
  <data name="Record_TransformFields_Example2_Code" xml:space="preserve">
    <value>Record.TransformFields(
    [OrderID = "1", CustomerID = 1, Item = "Fishing rod", Price = "100.0"],
    {{"OrderID", Number.FromText}, {"Price", Number.FromText}}
)</value>
  </data>
  <data name="Record_TransformFields_Example2_Result" xml:space="preserve">
    <value>[OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100]</value>
  </data>
  <data name="RelativePosition_FromEnd_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="RelativePosition_FromStart_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="Replacer_ReplaceText_Category" xml:space="preserve">
    <value>Replacer</value>
  </data>
  <data name="Replacer_ReplaceText_Example1_Code" xml:space="preserve">
    <value>Replacer.ReplaceText("hEllo world", "hE", "He")</value>
  </data>
  <data name="Replacer_ReplaceText_Example1_Result" xml:space="preserve">
    <value>"Hello world"</value>
  </data>
  <data name="Replacer_ReplaceValue_Category" xml:space="preserve">
    <value>Replacer</value>
  </data>
  <data name="Replacer_ReplaceValue_Example1_Code" xml:space="preserve">
    <value>Replacer.ReplaceValue(11, 11, 10)</value>
  </data>
  <data name="Replacer_ReplaceValue_Example1_Result" xml:space="preserve">
    <value>10</value>
  </data>
  <data name="RoundingMode_AwayFromZero_Category" xml:space="preserve">
    <value>Number.Parameter values</value>
  </data>
  <data name="RoundingMode_Down_Category" xml:space="preserve">
    <value>Number.Parameter values</value>
  </data>
  <data name="RoundingMode_ToEven_Category" xml:space="preserve">
    <value>Number.Parameter values</value>
  </data>
  <data name="RoundingMode_TowardZero_Category" xml:space="preserve">
    <value>Number.Parameter values</value>
  </data>
  <data name="RoundingMode_Up_Category" xml:space="preserve">
    <value>Number.Parameter values</value>
  </data>
  <data name="RowExpression_Column_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="RowExpression_Column_Example1_Code" xml:space="preserve">
    <value>RowExpression.Column("CustomerName")</value>
  </data>
  <data name="RowExpression_Column_Example1_Result" xml:space="preserve">
    <value>[
    Kind = "FieldAccess",
    Expression = RowExpression.Row,
    MemberName = "CustomerName"
]</value>
  </data>
  <data name="RowExpression_From_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="RowExpression_From_Example1_Code" xml:space="preserve">
    <value>RowExpression.From(each [CustomerName] = "ALFKI")</value>
  </data>
  <data name="RowExpression_From_Example1_Result" xml:space="preserve">
    <value>[
    Kind = "Binary",
    Operator = "Equals",
    Left = RowExpression.Column("CustomerName"),
    Right =
    [
        Kind = "Constant",
        Value = "ALFKI"
    ]
]</value>
  </data>
  <data name="RowExpression_Row_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Salesforce_Data_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Salesforce_Reports_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_BasXmlGzip_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_BasXml_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_DataStream_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapBusinessWarehouseExecutionMode_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapBusinessWarehouse_Cubes_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaDistribution_All_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaDistribution_Connection_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaDistribution_Off_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaDistribution_Statement_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaDistribution_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_Between_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_Equals_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_GreaterThanOrEquals_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_GreaterThan_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_LessThanOrEquals_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_LessThan_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_NotEquals_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHanaRangeOperator_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SapHana_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SharePoint_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SharePoint_Files_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="SharePoint_Tables_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Single_From_Category" xml:space="preserve">
    <value>Number.Conversion and formatting</value>
  </data>
  <data name="Single_From_Example1_Code" xml:space="preserve">
    <value>Single.From("1.5")</value>
  </data>
  <data name="Single_From_Example1_Result" xml:space="preserve">
    <value>1.5</value>
  </data>
  <data name="Soda_Feed_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Splitter_SplitByNothing_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByAnyDelimiter({",", ";"}, QuoteStyle.Csv)("a,b;""c,d;e"",f")</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter_Example1_Result" xml:space="preserve">
    <value>{"a", "b", "c,d;e", "f"}</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter_Example2_Code" xml:space="preserve">
    <value>let
    startAtEnd = true
in
    Splitter.SplitTextByAnyDelimiter({",", ";"}, QuoteStyle.Csv, startAtEnd)("a,""b;c,d")</value>
  </data>
  <data name="Splitter_SplitTextByAnyDelimiter_Example2_Result" xml:space="preserve">
    <value>{"a,b", "c", "d"}</value>
  </data>
  <data name="Splitter_SplitTextByCharacterTransition_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByCharacterTransition_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByCharacterTransition({"A".."Z", "a".."z"}, {"0".."9"})("Abc123")</value>
  </data>
  <data name="Splitter_SplitTextByCharacterTransition_Example1_Result" xml:space="preserve">
    <value>{"Abc", "123"}</value>
  </data>
  <data name="Splitter_SplitTextByDelimiter_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByDelimiter_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByDelimiter(",", QuoteStyle.Csv)("a,""b,c"",d")</value>
  </data>
  <data name="Splitter_SplitTextByDelimiter_Example1_Result" xml:space="preserve">
    <value>{"a", "b,c", "d"}</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByEachDelimiter({",", ";"})("a,b;c,d")</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter_Example1_Result" xml:space="preserve">
    <value>{"a", "b", "c,d"}</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter_Example2_Code" xml:space="preserve">
    <value>let
    startAtEnd = true
in
    Splitter.SplitTextByEachDelimiter({",", ";"}, QuoteStyle.None, startAtEnd)("a,""b;c"",d")</value>
  </data>
  <data name="Splitter_SplitTextByEachDelimiter_Example2_Result" xml:space="preserve">
    <value>{"a,""b", "c""", "d"}</value>
  </data>
  <data name="Splitter_SplitTextByLengths_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByLengths_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByLengths({2, 3})("AB123")</value>
  </data>
  <data name="Splitter_SplitTextByLengths_Example1_Result" xml:space="preserve">
    <value>{"AB", "123"}</value>
  </data>
  <data name="Splitter_SplitTextByLengths_Example2_Code" xml:space="preserve">
    <value>let
    startAtEnd = true
in
    Splitter.SplitTextByLengths({5, 2}, startAtEnd)("RedmondWA98052")</value>
  </data>
  <data name="Splitter_SplitTextByLengths_Example2_Result" xml:space="preserve">
    <value>{"WA", "98052"}</value>
  </data>
  <data name="Splitter_SplitTextByPositions_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByPositions_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByPositions({0, 3, 4})("ABC|12345")</value>
  </data>
  <data name="Splitter_SplitTextByPositions_Example1_Result" xml:space="preserve">
    <value>{"ABC", "|", "12345"}</value>
  </data>
  <data name="Splitter_SplitTextByPositions_Example2_Code" xml:space="preserve">
    <value>let
    startAtEnd = true
in
    Splitter.SplitTextByPositions({0, 5}, startAtEnd)("Redmond98052")</value>
  </data>
  <data name="Splitter_SplitTextByPositions_Example2_Result" xml:space="preserve">
    <value>{"Redmond", "98052"}</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByRanges({{0, 4}, {2, 10}})("codelimiter")</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example1_Result" xml:space="preserve">
    <value>{"code", "delimiter"}</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example2_Code" xml:space="preserve">
    <value>let
    startAtEnd = true
in
    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)("RedmondWA?98052")</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example2_Result" xml:space="preserve">
    <value>{"WA", "98052"}</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example3_Code" xml:space="preserve">
    <value>Splitter.SplitTextByRanges({{0, 5}, {5, null}})("98052Redmond")</value>
  </data>
  <data name="Splitter_SplitTextByRanges_Example3_Result" xml:space="preserve">
    <value>{"98052", "Redmond"}</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByRepeatedLengths(3)("12345678")</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths_Example1_Result" xml:space="preserve">
    <value>{"123", "456", "78"}</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths_Example2_Code" xml:space="preserve">
    <value>let
    startAtEnd = true
in
    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)("87654321")</value>
  </data>
  <data name="Splitter_SplitTextByRepeatedLengths_Example2_Result" xml:space="preserve">
    <value>{"87", "654", "321"}</value>
  </data>
  <data name="Splitter_SplitTextByWhitespace_Category" xml:space="preserve">
    <value>Splitter</value>
  </data>
  <data name="Splitter_SplitTextByWhitespace_Example1_Code" xml:space="preserve">
    <value>Splitter.SplitTextByWhitespace(QuoteStyle.None)("a b#(tab)c")</value>
  </data>
  <data name="Splitter_SplitTextByWhitespace_Example1_Result" xml:space="preserve">
    <value>{"a", "b", "c"}</value>
  </data>
  <data name="SqlDatabase_View_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="SqlExpression_SchemaFrom_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="SqlExpression_ToExpression_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Sql_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Sql_Databases_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Sybase_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="TableAction_DeleteRows_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="TableAction_InsertRows_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="TableAction_Tee_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="TableAction_UpdateRows_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Table_AddColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_AddColumn_Example1_Code" xml:space="preserve">
    <value>Table.AddColumn(
    Table.FromRecords({
        [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0, Shipping = 10.00],
        [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5.0, Shipping = 15.00],
        [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25.0, Shipping = 10.00]
    }),
    "TotalPrice",
    each [Price] + [Shipping],
    type number
)</value>
  </data>
  <data name="Table_AddColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100, Shipping = 10, TotalPrice = 110],
    [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5, Shipping = 15, TotalPrice = 20],
    [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25, Shipping = 10, TotalPrice = 35]
})</value>
  </data>
  <data name="Table_AddFuzzyClusterColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_AddFuzzyClusterColumn_Example1_Code" xml:space="preserve">
    <value>Table.AddFuzzyClusterColumn(
    Table.FromRecords(
        {
            [EmployeeID = 1, Location = "Seattle"],
            [EmployeeID = 2, Location = "seattl"],
            [EmployeeID = 3, Location = "Vancouver"],
            [EmployeeID = 4, Location = "Seatle"],
            [EmployeeID = 5, Location = "vancover"],
            [EmployeeID = 6, Location = "Seattle"],
            [EmployeeID = 7, Location = "Vancouver"]
        },
        type table [EmployeeID = nullable number, Location = nullable text]
    ),
    "Location",
    "Location_Cleaned",
    [IgnoreCase = true, IgnoreSpace = true]
)</value>
  </data>
  <data name="Table_AddFuzzyClusterColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords(
    {
        [EmployeeID = 1, Location = "Seattle", Location_Cleaned = "Seattle"],
        [EmployeeID = 2, Location = "seattl", Location_Cleaned = "Seattle"],
        [EmployeeID = 3, Location = "Vancouver", Location_Cleaned = "Vancouver"],
        [EmployeeID = 4, Location = "Seatle", Location_Cleaned = "Seattle"],
        [EmployeeID = 5, Location = "vancover", Location_Cleaned = "Vancouver"],
        [EmployeeID = 6, Location = "Seattle", Location_Cleaned = "Seattle"],
        [EmployeeID = 7, Location = "Vancouver", Location_Cleaned = "Vancouver"]
    },
    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]
)</value>
  </data>
  <data name="Table_AddIndexColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_AddIndexColumn_Example1_Code" xml:space="preserve">
    <value>Table.AddIndexColumn(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    "Index"
)</value>
  </data>
  <data name="Table_AddIndexColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567", Index = 0],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543", Index = 1],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890", Index = 2],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550", Index = 3]
})</value>
  </data>
  <data name="Table_AddIndexColumn_Example2_Code" xml:space="preserve">
    <value>Table.AddIndexColumn(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    "Index",
    10,
    5
)</value>
  </data>
  <data name="Table_AddIndexColumn_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567", Index = 10],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543", Index = 15],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890", Index = 20],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550", Index = 25]
})</value>
  </data>
  <data name="Table_AddJoinColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_AddJoinColumn_Example1_Code" xml:space="preserve">
    <value>Table.AddJoinColumn(
    Table.FromRecords({
        [saleID = 1, item = "Shirt"],
        [saleID = 2, item = "Hat"]
    }),
    "saleID",
    () =&gt; Table.FromRecords({
        [saleID = 1, price = 20, stock = 1234],
        [saleID = 2, price = 10, stock = 5643]
    }),
    "saleID",
    "price"
)</value>
  </data>
  <data name="Table_AddJoinColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [
        saleID = 1,
        item = "Shirt",
        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})
    ],
    [
        saleID = 2,
        item = "Hat",
        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})
    ]
})</value>
  </data>
  <data name="Table_AddKey_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_AddKey_Example1_Code" xml:space="preserve">
    <value>let
    table = Table.FromRecords({
        [Id = 1, Name = "Hello There"],
        [Id = 2, Name = "Good Bye"]
    }),
    resultTable = Table.AddKey(table, {"Id"}, true)
in
    resultTable</value>
  </data>
  <data name="Table_AddKey_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Id = 1, Name = "Hello There"],
    [Id = 2, Name = "Good Bye"]
})</value>
  </data>
  <data name="Table_AddRankColumn_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="Table_AddRankColumn_Example1_Code" xml:space="preserve">
    <value>Table.AddRankColumn(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Revenue = 200],
        [CustomerID = 2, Name = "Jim", Revenue = 100],
        [CustomerID = 3, Name = "Paul", Revenue = 200],
        [CustomerID = 4, Name = "Ringo", Revenue = 50]
    }),
    "RevenueRank",
    {"Revenue", Order.Descending},
    [RankKind = RankKind.Competition]
)</value>
  </data>
  <data name="Table_AddRankColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Revenue = 200, RevenueRank = 1],
    [CustomerID = 3, Name = "Paul", Revenue = 200, RevenueRank = 1],
    [CustomerID = 2, Name = "Jim", Revenue = 100, RevenueRank = 3],
    [CustomerID = 4, Name = "Ringo", Revenue = 50, RevenueRank = 4]
})</value>
  </data>
  <data name="Table_AggregateTableColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_AggregateTableColumn_Example1_Code" xml:space="preserve">
    <value>Table.AggregateTableColumn(
    Table.FromRecords(
        {
            [
                t = Table.FromRecords({
                    [a = 1, b = 2, c = 3],
                    [a = 2, b = 4, c = 6]
                }),
                b = 2
            ]
        },
        type table [t = table [a = number, b = number, c = number], b = number]
    ),
    "t",
    {
        {"a", List.Sum, "sum of t.a"},
        {"b", List.Min, "min of t.b"},
        {"b", List.Max, "max of t.b"},
        {"a", List.Count, "count of t.a"}
    }
)</value>
  </data>
  <data name="Table_AggregateTableColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[#"sum of t.a" = 3, #"min of t.b" = 2, #"max of t.b" = 4, #"count of t.a" = 2, b = 2]})</value>
  </data>
  <data name="Table_AlternateRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_AlternateRows_Example1_Code" xml:space="preserve">
    <value>Table.AlternateRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    }),
    1,
    1,
    1
)</value>
  </data>
  <data name="Table_AlternateRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_ApproximateRowCount_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Table_ApproximateRowCount_Example1_Code" xml:space="preserve">
    <value>Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {"city", "state"})))</value>
  </data>
  <data name="Table_ApproximateRowCount_Example1_Result" xml:space="preserve">
    <value>number</value>
  </data>
  <data name="Table_Buffer_Category" xml:space="preserve">
    <value>Table.Other</value>
  </data>
  <data name="Table_Buffer_Example1_Code" xml:space="preserve">
    <value>let
    Source = Sql.Database("SomeSQLServer", "MyDb"),
    MyTable = Source{[Item="MyTable"]}[Data],
    BufferMyTable = Table.Buffer(dbo_MyTable)
in
    BufferMyTable</value>
  </data>
  <data name="Table_Buffer_Example1_Result" xml:space="preserve">
    <value>table</value>
  </data>
  <data name="Table_ColumnCount_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Table_ColumnCount_Example1_Code" xml:space="preserve">
    <value>Table.ColumnCount(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    })
)</value>
  </data>
  <data name="Table_ColumnCount_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="Table_ColumnNames_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_ColumnNames_Example1_Code" xml:space="preserve">
    <value>Table.ColumnNames(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    })
)</value>
  </data>
  <data name="Table_ColumnNames_Example1_Result" xml:space="preserve">
    <value>{"CustomerID", "Name", "Phone"}</value>
  </data>
  <data name="Table_Column_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_Column_Example1_Code" xml:space="preserve">
    <value>Table.Column(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    "Name"
)</value>
  </data>
  <data name="Table_Column_Example1_Result" xml:space="preserve">
    <value>{"Bob", "Jim", "Paul", "Ringo"}</value>
  </data>
  <data name="Table_ColumnsOfType_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_ColumnsOfType_Example1_Code" xml:space="preserve">
    <value>Table.ColumnsOfType(
    Table.FromRecords(
        {[a = 1, b = "hello"]},
        type table[a = Number.Type, b = Text.Type]
    ),
    {type number}
)</value>
  </data>
  <data name="Table_ColumnsOfType_Example1_Result" xml:space="preserve">
    <value>{"a"}</value>
  </data>
  <data name="Table_CombineColumnsToRecord_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_CombineColumns_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_CombineColumns_Example1_Code" xml:space="preserve">
    <value>Table.CombineColumns(
    Table.FromRecords({[FirstName = "Bob", LastName = "Smith"]}),
    {"LastName", "FirstName"},
    Combiner.CombineTextByDelimiter(",", QuoteStyle.None),
    "FullName"
)</value>
  </data>
  <data name="Table_CombineColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[FullName = "Smith,Bob"]})</value>
  </data>
  <data name="Table_Combine_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_Combine_Example1_Code" xml:space="preserve">
    <value>Table.Combine({
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    Table.FromRecords({[CustomerID = 2, Name = "Jim", Phone = "987-6543"]}),
    Table.FromRecords({[CustomerID = 3, Name = "Paul", Phone = "543-7890"]})
})</value>
  </data>
  <data name="Table_Combine_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_Combine_Example2_Code" xml:space="preserve">
    <value>Table.Combine({
    Table.FromRecords({[Name = "Bob", Phone = "123-4567"]}),
    Table.FromRecords({[Fax = "987-6543", Phone = "838-7171"]}),
    Table.FromRecords({[Cell = "543-7890"]})
})</value>
  </data>
  <data name="Table_Combine_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Name = "Bob", Phone = "123-4567", Fax = null, Cell = null],
    [Name = null, Phone = "838-7171", Fax = "987-6543", Cell = null],
    [Name = null, Phone = null, Fax = null, Cell = "543-7890"]
})</value>
  </data>
  <data name="Table_Combine_Example3_Code" xml:space="preserve">
    <value>Table.Combine(
    {
        Table.FromRecords({[Name = "Bob", Phone = "123-4567"]}),
        Table.FromRecords({[Fax = "987-6543", Phone = "838-7171"]}),
        Table.FromRecords({[Cell = "543-7890"]})
    },
    {"CustomerID", "Name"}
)</value>
  </data>
  <data name="Table_Combine_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = null, Name = "Bob"],
    [CustomerID = null, Name = null],
    [CustomerID = null, Name = null]
})</value>
  </data>
  <data name="Table_ConformToPageReader_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ContainsAll_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_ContainsAll_Example1_Code" xml:space="preserve">
    <value>Table.ContainsAll(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    {
        [CustomerID = 1, Name = "Bill"],
        [CustomerID = 2, Name = "Fred"]
    },
    "CustomerID"
)</value>
  </data>
  <data name="Table_ContainsAll_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_ContainsAll_Example2_Code" xml:space="preserve">
    <value>Table.ContainsAll(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    {
        [CustomerID = 1, Name = "Bill"],
        [CustomerID = 2, Name = "Fred"]
    }
)</value>
  </data>
  <data name="Table_ContainsAll_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_ContainsAny_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_ContainsAny_Example1_Code" xml:space="preserve">
    <value>Table.ContainsAny(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4]
    }),
    {
        [a = 1, b = 2],
        [a = 3, b = 5]
    }
)</value>
  </data>
  <data name="Table_ContainsAny_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_ContainsAny_Example2_Code" xml:space="preserve">
    <value>Table.ContainsAny(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4]
    }),
    {
        [a = 1, b = 3],
        [a = 3, b = 5]
    }
)</value>
  </data>
  <data name="Table_ContainsAny_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_ContainsAny_Example3_Code" xml:space="preserve">
    <value>Table.ContainsAny(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4]
    }),
    {
        [a = 1, b = 3],
        [a = 3, b = 5]
    },
    "a"
)</value>
  </data>
  <data name="Table_ContainsAny_Example3_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_Contains_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_Contains_Example1_Code" xml:space="preserve">
    <value>Table.Contains(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    [Name = "Bob"]
)</value>
  </data>
  <data name="Table_Contains_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_Contains_Example2_Code" xml:space="preserve">
    <value>Table.Contains(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    [Name = "Ted"]
)</value>
  </data>
  <data name="Table_Contains_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_Contains_Example3_Code" xml:space="preserve">
    <value>Table.Contains(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    [CustomerID = 4, Name = "Bob"],
    "Name"
)</value>
  </data>
  <data name="Table_Contains_Example3_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_DemoteHeaders_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_DemoteHeaders_Example1_Code" xml:space="preserve">
    <value>Table.DemoteHeaders(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
    })
)</value>
  </data>
  <data name="Table_DemoteHeaders_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Column1 = "CustomerID", Column2 = "Name", Column3 = "Phone"],
    [Column1 = 1, Column2 = "Bob", Column3 = "123-4567"],
    [Column1 = 2, Column2 = "Jim", Column3 = "987-6543"]
})</value>
  </data>
  <data name="Table_Distinct_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_Distinct_Example1_Code" xml:space="preserve">
    <value>Table.Distinct(
    Table.FromRecords({
        [a = "A", b = "a"],
        [a = "B", b = "b"],
        [a = "A", b = "a"]
    })
)</value>
  </data>
  <data name="Table_Distinct_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = "A", b = "a"],
    [a = "B", b = "b"]
})</value>
  </data>
  <data name="Table_Distinct_Example2_Code" xml:space="preserve">
    <value>Table.Distinct(
    Table.FromRecords({
        [a = "A", b = "a"],
        [a = "B", b = "a"],
        [a = "A", b = "b"]
    }),
    "b"
)</value>
  </data>
  <data name="Table_Distinct_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = "A", b = "a"],
    [a = "A", b = "b"]
})</value>
  </data>
  <data name="Table_DuplicateColumn_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_DuplicateColumn_Example1_Code" xml:space="preserve">
    <value>Table.DuplicateColumn(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4]
    }),
    "a",
    "copied column"
)</value>
  </data>
  <data name="Table_DuplicateColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = 1, b = 2, #"copied column" = 1],
    [a = 3, b = 4, #"copied column" = 3]
})</value>
  </data>
  <data name="Table_ExpandListColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ExpandListColumn_Example1_Code" xml:space="preserve">
    <value>Table.ExpandListColumn(
    Table.FromRecords({[Name = {"Bob", "Jim", "Paul"}, Discount = .15]}),
    "Name"
)</value>
  </data>
  <data name="Table_ExpandListColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Name = "Bob", Discount = 0.15],
    [Name = "Jim", Discount = 0.15],
    [Name = "Paul", Discount = 0.15]
})</value>
  </data>
  <data name="Table_ExpandListColumn_Example2_Code" xml:space="preserve">
    <value>Table.ExpandListColumn(
    #table(
        {"Part", "Components"},
        {
            {"Tool", #table({"Name", "Quantity"}, {{"Thingamajig", 2}, {"Widget", 3}})}
        }
    ),
    "Components"
)</value>
  </data>
  <data name="Table_ExpandListColumn_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Part = "Tool", Components = [Name = "Thingamajig", Quantity = 2]],
    [Part = "Tool", Components = [Name = "Widget", Quantity = 3]]
})</value>
  </data>
  <data name="Table_ExpandRecordColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ExpandRecordColumn_Example1_Code" xml:space="preserve">
    <value>Table.ExpandRecordColumn(
    Table.FromRecords({
        [
            a = [aa = 1, bb = 2, cc = 3],
            b = 2
        ]
    }),
    "a",
    {"aa", "bb", "cc"}
)</value>
  </data>
  <data name="Table_ExpandRecordColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})</value>
  </data>
  <data name="Table_ExpandTableColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ExpandTableColumn_Example1_Code" xml:space="preserve">
    <value>Table.ExpandTableColumn(
    Table.FromRecords({
        [
            t = Table.FromRecords({
                [a = 1, b = 2, c = 3],
                [a = 2, b = 4, c = 6]
            }),
            b = 2
        ]
    }),
    "t",
    {"a", "b", "c"},
    {"t.a", "t.b", "t.c"}
)</value>
  </data>
  <data name="Table_ExpandTableColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [t.a = 1, t.b = 2, t.c = 3, b = 2],
    [t.a = 2, t.b = 4, t.c = 6, b = 2]
})</value>
  </data>
  <data name="Table_FillDown_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_FillDown_Example1_Code" xml:space="preserve">
    <value>Table.FillDown(
    Table.FromRecords({
        [Place = 1, Name = "Bob"],
        [Place = null, Name = "John"],
        [Place = 2, Name = "Brad"],
        [Place = 3, Name = "Mark"],
        [Place = null, Name = "Tom"],
        [Place = null, Name = "Adam"]
    }),
    {"Place"}
)</value>
  </data>
  <data name="Table_FillDown_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Place = 1, Name = "Bob"],
    [Place = 1, Name = "John"],
    [Place = 2, Name = "Brad"],
    [Place = 3, Name = "Mark"],
    [Place = 3, Name = "Tom"],
    [Place = 3, Name = "Adam"]
})</value>
  </data>
  <data name="Table_FillUp_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_FillUp_Example1_Code" xml:space="preserve">
    <value>Table.FillUp(
    Table.FromRecords({
        [Column1 = 1, Column2 = 2],
        [Column1 = 3, Column2 = null],
        [Column1 = 5, Column2 = 3]
    }),
    {"Column2"}
)</value>
  </data>
  <data name="Table_FillUp_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Column1 = 1, Column2 = 2],
    [Column1 = 3, Column2 = 3],
    [Column1 = 5, Column2 = 3]
})</value>
  </data>
  <data name="Table_FilterWithDataTable_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_FindText_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_FindText_Example1_Code" xml:space="preserve">
    <value>Table.FindText(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    "Bob"
)</value>
  </data>
  <data name="Table_FindText_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_FirstN_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_FirstN_Example1_Code" xml:space="preserve">
    <value>Table.FirstN(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    }),
    2
)</value>
  </data>
  <data name="Table_FirstN_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
})</value>
  </data>
  <data name="Table_FirstN_Example2_Code" xml:space="preserve">
    <value>Table.FirstN(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4],
        [a = -5, b = -6]
    }),
    each [a] &gt; 0
)</value>
  </data>
  <data name="Table_FirstN_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = 1, b = 2],
    [a = 3, b = 4]
})</value>
  </data>
  <data name="Table_FirstValue_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_First_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_First_Example1_Code" xml:space="preserve">
    <value>Table.First(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    })
)</value>
  </data>
  <data name="Table_First_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 1, Name = "Bob", Phone = "123-4567"]</value>
  </data>
  <data name="Table_First_Example2_Code" xml:space="preserve">
    <value>Table.First(Table.FromRecords({}), [a = 0, b = 0])</value>
  </data>
  <data name="Table_First_Example2_Result" xml:space="preserve">
    <value>[a = 0, b = 0]</value>
  </data>
  <data name="Table_FromColumns_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_FromColumns_Example1_Code" xml:space="preserve">
    <value>Table.FromColumns({
    {1, "Bob", "123-4567"},
    {2, "Jim", "987-6543"},
    {3, "Paul", "543-7890"}
})</value>
  </data>
  <data name="Table_FromColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Column1 = 1, Column2 = 2, Column3 = 3],
    [Column1 = "Bob", Column2 = "Jim", Column3 = "Paul"],
    [Column1 = "123-4567", Column2 = "987-6543", Column3 = "543-7890"]
})</value>
  </data>
  <data name="Table_FromColumns_Example2_Code" xml:space="preserve">
    <value>Table.FromColumns(
    {
        {1, "Bob", "123-4567"},
        {2, "Jim", "987-6543"},
        {3, "Paul", "543-7890"}
    },
    {"CustomerID", "Name", "Phone"}
)</value>
  </data>
  <data name="Table_FromColumns_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = 2, Phone = 3],
    [CustomerID = "Bob", Name = "Jim", Phone = "Paul"],
    [CustomerID = "123-4567", Name = "987-6543", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_FromColumns_Example3_Code" xml:space="preserve">
    <value>Table.FromColumns(
    {
        {1, 2, 3},
        {4, 5},
        {6, 7, 8, 9}
    },
    {"column1", "column2", "column3"}
)</value>
  </data>
  <data name="Table_FromColumns_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [column1 = 1, column2 = 4, column3 = 6],
    [column1 = 2, column2 = 5, column3 = 7],
    [column1 = 3, column2 = null, column3 = 8],
    [column1 = null, column2 = null, column3 = 9]
})</value>
  </data>
  <data name="Table_FromList_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_FromList_Example1_Code" xml:space="preserve">
    <value>Table.FromList(
    {"a,apple", "b,ball", "c,cookie", "d,door"},
    null,
    {"Letter", "Example Word"}
)</value>
  </data>
  <data name="Table_FromList_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Letter = "a", #"Example Word" = "apple"],
    [Letter = "b", #"Example Word" = "ball"],
    [Letter = "c", #"Example Word" = "cookie"],
    [Letter = "d", #"Example Word" = "door"]
})</value>
  </data>
  <data name="Table_FromList_Example2_Code" xml:space="preserve">
    <value>Table.FromList(
    {"a,apple", "b,ball", "c,cookie", "d,door"},
    Splitter.SplitByNothing(),
    {"Letter and Example Word"}
)</value>
  </data>
  <data name="Table_FromList_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [#"Letter and Example Word" = "a,apple"],
    [#"Letter and Example Word" = "b,ball"],
    [#"Letter and Example Word" = "c,cookie"],
    [#"Letter and Example Word" = "d,door"]
})</value>
  </data>
  <data name="Table_FromList_Example3_Code" xml:space="preserve">
    <value>Table.FromList(
    {
        [CustomerID = 1, Name = "Bob"],
        [CustomerID = 2, Name = "Jim"]
    },
    Record.FieldValues,
    {"CustomerID", "Name"}
)</value>
  </data>
  <data name="Table_FromList_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob"],
    [CustomerID = 2, Name = "Jim"]
})</value>
  </data>
  <data name="Table_FromPartitions_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_FromPartitions_Example1_Code" xml:space="preserve">
    <value>Table.FromPartitions(
    "Year",
    {
        {
            1994,
            Table.FromPartitions(
                "Month",
                {
                    {
                        "Jan",
                        Table.FromPartitions(
                            "Day",
                            {
                                {1, #table({"Foo"}, {{"Bar"}})},
                                {2, #table({"Foo"}, {{"Bar"}})}
                            }
                        )
                    },
                    {
                        "Feb",
                        Table.FromPartitions(
                            "Day",
                            {
                                {3, #table({"Foo"}, {{"Bar"}})},
                                {4, #table({"Foo"}, {{"Bar"}})}
                            }
                        )
                    }
                }
            )
        }
    }
)</value>
  </data>
  <data name="Table_FromPartitions_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [
        Foo = "Bar",
        Day = 1,
        Month = "Jan",
        Year = 1994
    ],
    [
        Foo = "Bar",
        Day = 2,
        Month = "Jan",
        Year = 1994
    ],
    [
        Foo = "Bar",
        Day = 3,
        Month = "Feb",
        Year = 1994
    ],
    [
        Foo = "Bar",
        Day = 4,
        Month = "Feb",
        Year = 1994
    ]
})</value>
  </data>
  <data name="Table_FromRecords_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_FromRecords_Example1_Code" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_FromRecords_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_FromRecords_Example2_Code" xml:space="preserve">
    <value>Table.ColumnsOfType(
    Table.FromRecords(
        {[CustomerID = 1, Name = "Bob"]},
        type table[CustomerID = Number.Type, Name = Text.Type]
    ),
    {type number}
)</value>
  </data>
  <data name="Table_FromRecords_Example2_Result" xml:space="preserve">
    <value>{"CustomerID"}</value>
  </data>
  <data name="Table_FromRows_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_FromRows_Example1_Code" xml:space="preserve">
    <value>Table.FromRows(
    {
        {1, "Bob", "123-4567"},
        {2, "Jim", "987-6543"}
    },
    {"CustomerID", "Name", "Phone"}
)</value>
  </data>
  <data name="Table_FromRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
})</value>
  </data>
  <data name="Table_FromRows_Example2_Code" xml:space="preserve">
    <value>Table.FromRows(
    {
        {1, "Bob", "123-4567"},
        {2, "Jim", "987-6543"}
    },
    type table [CustomerID = number, Name = text, Phone = text]
)</value>
  </data>
  <data name="Table_FromRows_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
})</value>
  </data>
  <data name="Table_FromValue_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_FromValue_Example1_Code" xml:space="preserve">
    <value>Table.FromValue(1)</value>
  </data>
  <data name="Table_FromValue_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[Value = 1]})</value>
  </data>
  <data name="Table_FromValue_Example2_Code" xml:space="preserve">
    <value>Table.FromValue({1, "Bob", "123-4567"})</value>
  </data>
  <data name="Table_FromValue_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Value = 1],
    [Value = "Bob"],
    [Value = "123-4567"]
})</value>
  </data>
  <data name="Table_FromValue_Example3_Code" xml:space="preserve">
    <value>Table.FromValue(1, [DefaultColumnName = "MyValue"])</value>
  </data>
  <data name="Table_FromValue_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({[MyValue = 1]})</value>
  </data>
  <data name="Table_FuzzyGroup_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_FuzzyGroup_Example1_Code" xml:space="preserve">
    <value>Table.FuzzyGroup(
    Table.FromRecords(
        {
            [EmployeeID = 1, Location = "Seattle"],
            [EmployeeID = 2, Location = "seattl"],
            [EmployeeID = 3, Location = "Vancouver"],
            [EmployeeID = 4, Location = "Seatle"],
            [EmployeeID = 5, Location = "vancover"],
            [EmployeeID = 6, Location = "Seattle"],
            [EmployeeID = 7, Location = "Vancouver"]
        },
        type table [EmployeeID = nullable number, Location = nullable text]
    ),
    "Location",
    {"Count", each Table.RowCount(_)},
    [IgnoreCase = true, IgnoreSpace = true]
)</value>
  </data>
  <data name="Table_FuzzyGroup_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Location = "Seattle", Count = 4],
    [Location = "Vancouver", Count = 3]
})</value>
  </data>
  <data name="Table_FuzzyJoin_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_FuzzyJoin_Example1_Code" xml:space="preserve">
    <value>Table.FuzzyJoin(
	  Table.FromRecords(
        {
		        [CustomerID = 1, FirstName1 = "Bob", Phone = "555-1234"],
		        [CustomerID = 2, FirstName1 = "Robert", Phone = "555-4567"]
	      },
        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]
    ),
	  {"FirstName1"},
	  Table.FromRecords(
        {
		        [CustomerStateID = 1, FirstName2 = "Bob", State = "TX"],
		        [CustomerStateID = 2, FirstName2 = "bOB", State = "CA"]
	      },
        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]
    ),
	  {"FirstName2"},
	  JoinKind.LeftOuter,
	  [IgnoreCase = true, IgnoreSpace = false]
)</value>
  </data>
  <data name="Table_FuzzyJoin_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [
			  CustomerID = 1,
			  FirstName1 = "Bob",
			  Phone = "555-1234",
			  CustomerStateID = 1,
			  FirstName2 = "Bob",
			  State = "TX"
		],
    [
			  CustomerID = 1,
			  FirstName1 = "Bob",
			  Phone = "555-1234",
			  CustomerStateID = 2,
			  FirstName2 = "bOB",
			  State = "CA"
		],
    [
			  CustomerID = 2,
			  FirstName1 = "Robert",
			  Phone = "555-4567",
			  CustomerStateID = null,
			  FirstName2 = null,
			  State = null
		]
})</value>
  </data>
  <data name="Table_FuzzyNestedJoin_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_FuzzyNestedJoin_Example1_Code" xml:space="preserve">
    <value>Table.FuzzyNestedJoin(
	  Table.FromRecords(
        {
		        [CustomerID = 1, FirstName1 = "Bob", Phone = "555-1234"],
		        [CustomerID = 2, FirstName1 = "Robert", Phone = "555-4567"]
	      },
        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]
    ),
	  {"FirstName1"},
	  Table.FromRecords(
        {
		        [CustomerStateID = 1, FirstName2 = "Bob", State = "TX"],
		        [CustomerStateID = 2, FirstName2 = "bOB", State = "CA"]
	      },
        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]
    ),
	  {"FirstName2"},
	  "NestedTable",
	  JoinKind.LeftOuter,
	  [IgnoreCase = true, IgnoreSpace = false]
)</value>
  </data>
  <data name="Table_FuzzyNestedJoin_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [
		    CustomerID = 1,
		    FirstName1 = "Bob",
		    Phone = "555-1234",
		    NestedTable = Table.FromRecords({
            [
				      CustomerStateID = 1,
				      FirstName2 = "Bob",
				      State = "TX"
			      ],
            [
				      CustomerStateID = 2,
				      FirstName2 = "bOB",
				      State = "CA"
			      ]
		    })
	  ],
    [
		  CustomerID = 2,
		  FirstName1 = "Robert",
		  Phone = "555-4567",
		  NestedTable = Table.FromRecords({})
	  ]
})</value>
  </data>
  <data name="Table_Group_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_Group_Example1_Code" xml:space="preserve">
    <value>Table.Group(
    Table.FromRecords({
        [CustomerID = 1, price = 20],
        [CustomerID = 2, price = 10],
        [CustomerID = 2, price = 20],
        [CustomerID = 1, price = 10],
        [CustomerID = 3, price = 20],
        [CustomerID = 3, price = 5]
    }),
    "CustomerID",
    {"total", each List.Sum([price])}
)</value>
  </data>
  <data name="Table_Group_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords(
    {
        [CustomerID = 1, total = 30],
        [CustomerID = 2, total = 30],
        [CustomerID = 3, total = 25]
    },
    {"CustomerID", "total"}
)</value>
  </data>
  <data name="Table_HasColumns_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_HasColumns_Example1_Code" xml:space="preserve">
    <value>Table.HasColumns(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    "Name"
)</value>
  </data>
  <data name="Table_HasColumns_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_HasColumns_Example2_Code" xml:space="preserve">
    <value>Table.HasColumns(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    {"Name", "PhoneNumber"}
)</value>
  </data>
  <data name="Table_HasColumns_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_InsertRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_InsertRows_Example1_Code" xml:space="preserve">
    <value>Table.InsertRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
    }),
    1,
    {[CustomerID = 3, Name = "Paul", Phone = "543-7890"]}
)</value>
  </data>
  <data name="Table_InsertRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
})</value>
  </data>
  <data name="Table_InsertRows_Example2_Code" xml:space="preserve">
    <value>Table.InsertRows(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    1,
    {
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    }
)</value>
  </data>
  <data name="Table_InsertRows_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_IsDistinct_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_IsDistinct_Example1_Code" xml:space="preserve">
    <value>Table.IsDistinct(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    })
)</value>
  </data>
  <data name="Table_IsDistinct_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_IsDistinct_Example2_Code" xml:space="preserve">
    <value>Table.IsDistinct(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 5, Name = "Bob", Phone = "232-1550"]
    }),
    "Name"
)</value>
  </data>
  <data name="Table_IsDistinct_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_IsEmpty_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Table_IsEmpty_Example1_Code" xml:space="preserve">
    <value>Table.IsEmpty(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    })
)</value>
  </data>
  <data name="Table_IsEmpty_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_IsEmpty_Example2_Code" xml:space="preserve">
    <value>Table.IsEmpty(Table.FromRecords({}))</value>
  </data>
  <data name="Table_IsEmpty_Example2_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_Join_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_Join_Example1_Code" xml:space="preserve">
    <value>Table.Join(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    "CustomerID",
    Table.FromRecords({
        [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0],
        [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5.0],
        [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25.0],
        [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200.0],
        [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2.0],
        [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20.0],
        [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25]
    }),
    "CustomerID"
)</value>
  </data>
  <data name="Table_Join_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567", OrderID = 1, Item = "Fishing rod", Price = 100],
    [CustomerID = 1, Name = "Bob", Phone = "123-4567", OrderID = 2, Item = "1 lb. worms", Price = 5],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543", OrderID = 3, Item = "Fishing net", Price = 25],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890", OrderID = 4, Item = "Fish tazer", Price = 200],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890", OrderID = 5, Item = "Bandaids", Price = 2],
    [CustomerID = 1, Name = "Bob", Phone = "123-4567", OrderID = 6, Item = "Tackle box", Price = 20]
})</value>
  </data>
  <data name="Table_Join_Example2_Code" xml:space="preserve">
    <value>let
    customers = Table.FromRecords({
        [TenantID = 1, CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [TenantID = 1, CustomerID = 2, Name = "Jim", Phone = "987-6543"]
    }),
    orders = Table.FromRecords({
        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = "Fishing rod", Price = 100.0],
        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = "1 lb. worms", Price = 5.0],
        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = "Fishing net", Price = 25.0]
    })
in
    Table.Join(
        customers,
        {"TenantID", "CustomerID"},
        Table.PrefixColumns(orders, "Order"),
        {"Order.TenantID", "Order.CustomerID"}
    )</value>
  </data>
  <data name="Table_Join_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [TenantID = 1, CustomerID = 1, Name = "Bob", Phone = "123-4567", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = "Fishing rod", Order.Price = 100],
    [TenantID = 1, CustomerID = 1, Name = "Bob", Phone = "123-4567", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = "1 lb. worms", Order.Price = 5],
    [TenantID = 1, CustomerID = 2, Name = "Jim", Phone = "987-6543", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = "Fishing net", Order.Price = 25]
})</value>
  </data>
  <data name="Table_Keys_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_Keys_Example1_Code" xml:space="preserve">
    <value>let
    table = Table.FromRecords({
        [Id = 1, Name = "Hello There"],
        [Id = 2, Name = "Good Bye"]
    }),
    tableWithKeys = Table.AddKey(table, {"Id"}, true),
    keys = Table.Keys(tableWithKeys)
in
    keys</value>
  </data>
  <data name="Table_Keys_Example1_Result" xml:space="preserve">
    <value>{[Columns = {"Id"}, Primary = true]}</value>
  </data>
  <data name="Table_LastN_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_LastN_Example1_Code" xml:space="preserve">
    <value>Table.LastN(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    }),
    2
)</value>
  </data>
  <data name="Table_LastN_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_LastN_Example2_Code" xml:space="preserve">
    <value>Table.LastN(
    Table.FromRecords({
        [a = -1, b = -2],
        [a = 3, b = 4],
        [a = 5, b = 6]
    }),
    each _ [a] &gt; 0
)</value>
  </data>
  <data name="Table_LastN_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = 3, b = 4],
    [a = 5, b = 6]
})</value>
  </data>
  <data name="Table_Last_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_Last_Example1_Code" xml:space="preserve">
    <value>Table.Last(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    })
)</value>
  </data>
  <data name="Table_Last_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 3, Name = "Paul", Phone = "543-7890"]</value>
  </data>
  <data name="Table_Last_Example2_Code" xml:space="preserve">
    <value>Table.Last(Table.FromRecords({}), [a = 0, b = 0])</value>
  </data>
  <data name="Table_Last_Example2_Result" xml:space="preserve">
    <value>[a = 0, b = 0]</value>
  </data>
  <data name="Table_MatchesAllRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_MatchesAllRows_Example1_Code" xml:space="preserve">
    <value>Table.MatchesAllRows(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 6, b = 8]
    }),
    each Number.Mod([a], 2) = 0
)</value>
  </data>
  <data name="Table_MatchesAllRows_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_MatchesAllRows_Example2_Code" xml:space="preserve">
    <value>Table.MatchesAllRows(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = -3, b = 4]
    }),
    each _ = [a = 1, b = 2]
)</value>
  </data>
  <data name="Table_MatchesAllRows_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_MatchesAnyRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_MatchesAnyRows_Example1_Code" xml:space="preserve">
    <value>Table.MatchesAnyRows(
    Table.FromRecords({
        [a = 1, b = 4],
        [a = 3, b = 8]
    }),
    each Number.Mod([a], 2) = 0
)</value>
  </data>
  <data name="Table_MatchesAnyRows_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Table_MatchesAnyRows_Example2_Code" xml:space="preserve">
    <value>Table.MatchesAnyRows(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = -3, b = 4]
    }),
    each _ = [a = 1, b = 2]
)</value>
  </data>
  <data name="Table_MatchesAnyRows_Example2_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Table_MaxN_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="Table_MaxN_Example1_Code" xml:space="preserve">
    <value>Table.MaxN(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 0, b = 0],
        [a = 6, b = 2]
    }),
    "a",
    each [a] &gt; 0
)</value>
  </data>
  <data name="Table_MaxN_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = 6, b = 2],
    [a = 2, b = 4]
})</value>
  </data>
  <data name="Table_MaxN_Example2_Code" xml:space="preserve">
    <value>Table.MaxN(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 8, b = 0],
        [a = 6, b = 2]
    }),
    "a",
    each [b] &gt; 0
)</value>
  </data>
  <data name="Table_MaxN_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({})</value>
  </data>
  <data name="Table_Max_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="Table_Max_Example1_Code" xml:space="preserve">
    <value>Table.Max(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 6, b = 8]
    }),
    "a"
)</value>
  </data>
  <data name="Table_Max_Example1_Result" xml:space="preserve">
    <value>[a = 6, b = 8]</value>
  </data>
  <data name="Table_Max_Example2_Code" xml:space="preserve">
    <value>Table.Max(#table({"a"}, {}), "a", -1)</value>
  </data>
  <data name="Table_Max_Example2_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="Table_MinN_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="Table_MinN_Example1_Code" xml:space="preserve">
    <value>Table.MinN(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 0, b = 0],
        [a = 6, b = 4]
    }),
    "a",
    each [a] &lt; 3
)</value>
  </data>
  <data name="Table_MinN_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = 0, b = 0],
    [a = 2, b = 4]
})</value>
  </data>
  <data name="Table_MinN_Example2_Code" xml:space="preserve">
    <value>Table.MinN(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 8, b = 0],
        [a = 6, b = 2]
    }),
    "a",
    each [b] &lt; 0
)</value>
  </data>
  <data name="Table_MinN_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({})</value>
  </data>
  <data name="Table_Min_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="Table_Min_Example1_Code" xml:space="preserve">
    <value>Table.Min(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 6, b = 8]
    }),
    "a"
)</value>
  </data>
  <data name="Table_Min_Example1_Result" xml:space="preserve">
    <value>[a = 2, b = 4]</value>
  </data>
  <data name="Table_Min_Example2_Code" xml:space="preserve">
    <value>Table.Min(#table({"a"}, {}), "a", -1)</value>
  </data>
  <data name="Table_Min_Example2_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="Table_NestedJoin_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_NestedJoin_Example1_Code" xml:space="preserve">
    <value>Table.NestedJoin(
    Table.FromRecords({
        [CustomerToCall = 1],
        [CustomerToCall = 3]
    }),
    {"CustomerToCall"},
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    {"CustomerID"},
    "CustomerDetails"
)</value>
  </data>
  <data name="Table_NestedJoin_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})],
    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = "Paul", Phone = "543-7890"]})]
})</value>
  </data>
  <data name="Table_PartitionValues_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Table_Partition_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_Partition_Example1_Code" xml:space="preserve">
    <value>Table.Partition(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 1, b = 4],
        [a = 2, b = 4],
        [a = 1, b = 4]
    }),
    "a",
    2,
    each _
)</value>
  </data>
  <data name="Table_Partition_Example1_Result" xml:space="preserve">
    <value>{
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 2, b = 4]
    }),
    Table.FromRecords({
        [a = 1, b = 4],
        [a = 1, b = 4]
    })
}</value>
  </data>
  <data name="Table_Pivot_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_Pivot_Example1_Code" xml:space="preserve">
    <value>Table.Pivot(
    Table.FromRecords({
        [key = "x", attribute = "a", value = 1],
        [key = "x", attribute = "c", value = 3],
        [key = "y", attribute = "a", value = 2],
        [key = "y", attribute = "b", value = 4]
    }),
    {"a", "b", "c"},
    "attribute",
    "value"
)</value>
  </data>
  <data name="Table_Pivot_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [key = "x", a = 1, b = null, c = 3],
    [key = "y", a = 2, b = 4, c = null]
})</value>
  </data>
  <data name="Table_Pivot_Example2_Code" xml:space="preserve">
    <value>Table.Pivot(
    Table.FromRecords({
        [key = "x", attribute = "a", value = 1],
        [key = "x", attribute = "c", value = 3],
        [key = "x", attribute = "c", value = 5],
        [key = "y", attribute = "a", value = 2],
        [key = "y", attribute = "b", value = 4]
    }),
    {"a", "b", "c"},
    "attribute",
    "value",
    List.Max
)</value>
  </data>
  <data name="Table_Pivot_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [key = "x", a = 1, b = null, c = 5],
    [key = "y", a = 2, b = 4, c = null]
})</value>
  </data>
  <data name="Table_PositionOfAny_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_PositionOfAny_Example1_Code" xml:space="preserve">
    <value>Table.PositionOfAny(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 1, b = 4],
        [a = 2, b = 4],
        [a = 1, b = 4]
    }),
    {
        [a = 2, b = 4],
        [a = 6, b = 8]
    }
)</value>
  </data>
  <data name="Table_PositionOfAny_Example1_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Table_PositionOfAny_Example2_Code" xml:space="preserve">
    <value>Table.PositionOfAny(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 6, b = 8],
        [a = 2, b = 4],
        [a = 1, b = 4]
    }),
    {
        [a = 2, b = 4],
        [a = 6, b = 8]
    },
    Occurrence.All
)</value>
  </data>
  <data name="Table_PositionOfAny_Example2_Result" xml:space="preserve">
    <value>{0, 1, 2}</value>
  </data>
  <data name="Table_PositionOf_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_PositionOf_Example1_Code" xml:space="preserve">
    <value>Table.PositionOf(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 1, b = 4],
        [a = 2, b = 4],
        [a = 1, b = 4]
    }),
    [a = 2, b = 4]
)</value>
  </data>
  <data name="Table_PositionOf_Example1_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Table_PositionOf_Example2_Code" xml:space="preserve">
    <value>Table.PositionOf(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 1, b = 4],
        [a = 2, b = 4],
        [a = 1, b = 4]
    }),
    [a = 2, b = 4],
    1
)</value>
  </data>
  <data name="Table_PositionOf_Example2_Result" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="Table_PositionOf_Example3_Code" xml:space="preserve">
    <value>Table.PositionOf(
    Table.FromRecords({
        [a = 2, b = 4],
        [a = 1, b = 4],
        [a = 2, b = 4],
        [a = 1, b = 4]
    }),
    [a = 2, b = 4],
    Occurrence.All
)</value>
  </data>
  <data name="Table_PositionOf_Example3_Result" xml:space="preserve">
    <value>{0, 2}</value>
  </data>
  <data name="Table_PrefixColumns_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_PrefixColumns_Example1_Code" xml:space="preserve">
    <value>Table.PrefixColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    "MyTable"
)</value>
  </data>
  <data name="Table_PrefixColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = "Bob", MyTable.Phone = "123-4567"]})</value>
  </data>
  <data name="Table_Product_Category" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="Table_Product_Example1_Code" xml:space="preserve">
    <value>Table.Product(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4],
        [a = 5, b = 6]
    }),
    "a"
)</value>
  </data>
  <data name="Table_Product_Example1_Result" xml:space="preserve">
    <value>15</value>
  </data>
  <data name="Table_Product_Example2_Code" xml:space="preserve">
    <value>Table.Product(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4],
        [a = 5, b = 6]
    }),
    {"a", "b"}
)</value>
  </data>
  <data name="Table_Product_Example2_Result" xml:space="preserve">
    <value>[a = 15, b = 48]</value>
  </data>
  <data name="Table_Profile_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Table_PromoteHeaders_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_PromoteHeaders_Example1_Code" xml:space="preserve">
    <value>Table.PromoteHeaders(
    Table.FromRecords({
        [Column1 = "CustomerID", Column2 = "Name", Column3 = #date(1980, 1, 1)],
        [Column1 = 1, Column2 = "Bob", Column3 = #date(1980, 1, 1)]
    })
)</value>
  </data>
  <data name="Table_PromoteHeaders_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Column3 = #date(1980, 1, 1)]})</value>
  </data>
  <data name="Table_PromoteHeaders_Example2_Code" xml:space="preserve">
    <value>Table.PromoteHeaders(
    Table.FromRecords({
        [Rank = 1, Name = "Name", Date = #date(1980, 1, 1)],
        [Rank = 1, Name = "Bob", Date = #date(1980, 1, 1)]}
    ),
    [PromoteAllScalars = true, Culture = "en-US"]
)</value>
  </data>
  <data name="Table_PromoteHeaders_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({[1 = 1, Name = "Bob", #"1/1/1980" = #date(1980, 1, 1)]})</value>
  </data>
  <data name="Table_Range_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_Range_Example1_Code" xml:space="preserve">
    <value>Table.Range(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    1
)</value>
  </data>
  <data name="Table_Range_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_Range_Example2_Code" xml:space="preserve">
    <value>Table.Range(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    1,
    1
)</value>
  </data>
  <data name="Table_Range_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 2, Name = "Jim", Phone = "987-6543"]})</value>
  </data>
  <data name="Table_RemoveColumns_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_RemoveColumns_Example1_Code" xml:space="preserve">
    <value>Table.RemoveColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    "Phone"
)</value>
  </data>
  <data name="Table_RemoveColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob"]})</value>
  </data>
  <data name="Table_RemoveColumns_Example2_Code" xml:space="preserve">
    <value>Table.RemoveColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    "Address"
)</value>
  </data>
  <data name="Table_RemoveColumns_Example2_Result" xml:space="preserve">
    <value>[Expression.Error] The column 'Address' of the table wasn't found.</value>
  </data>
  <data name="Table_RemoveFirstN_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_RemoveFirstN_Example1_Code" xml:space="preserve">
    <value>Table.RemoveFirstN(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    1
)</value>
  </data>
  <data name="Table_RemoveFirstN_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_RemoveFirstN_Example2_Code" xml:space="preserve">
    <value>Table.RemoveFirstN(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    2
)</value>
  </data>
  <data name="Table_RemoveFirstN_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_RemoveFirstN_Example3_Code" xml:space="preserve">
    <value>Table.RemoveFirstN(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    each [CustomerID] &lt;= 2
)</value>
  </data>
  <data name="Table_RemoveFirstN_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_RemoveLastN_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_RemoveLastN_Example1_Code" xml:space="preserve">
    <value>Table.RemoveLastN(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    1
)</value>
  </data>
  <data name="Table_RemoveLastN_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
})</value>
  </data>
  <data name="Table_RemoveLastN_Example2_Code" xml:space="preserve">
    <value>Table.RemoveLastN(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    each [CustomerID] &gt;= 2
)</value>
  </data>
  <data name="Table_RemoveLastN_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_RemoveMatchingRows_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_RemoveMatchingRows_Example1_Code" xml:space="preserve">
    <value>Table.RemoveMatchingRows(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4],
        [a = 1, b = 6]
    }),
    {[a = 1]},
    "a"
)</value>
  </data>
  <data name="Table_RemoveMatchingRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[a = 3, b = 4]})</value>
  </data>
  <data name="Table_RemoveRowsWithErrors_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_RemoveRowsWithErrors_Example1_Code" xml:space="preserve">
    <value>Table.RemoveRowsWithErrors(
    Table.FromRecords({
        [Column1 = ...],
        [Column1 = 2],
        [Column1 = 3]
    })
)</value>
  </data>
  <data name="Table_RemoveRowsWithErrors_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Column1 = 2],
    [Column1 = 3]
})</value>
  </data>
  <data name="Table_RemoveRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_RemoveRows_Example1_Code" xml:space="preserve">
    <value>Table.RemoveRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    0
)</value>
  </data>
  <data name="Table_RemoveRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_RemoveRows_Example2_Code" xml:space="preserve">
    <value>Table.RemoveRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    1
)</value>
  </data>
  <data name="Table_RemoveRows_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_RemoveRows_Example3_Code" xml:space="preserve">
    <value>Table.RemoveRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    1,
    2
)</value>
  </data>
  <data name="Table_RemoveRows_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_RenameColumns_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_RenameColumns_Example1_Code" xml:space="preserve">
    <value>Table.RenameColumns(
    Table.FromRecords({[CustomerNum = 1, Name = "Bob", Phone = "123-4567"]}),
    {"CustomerNum", "CustomerID"}
)</value>
  </data>
  <data name="Table_RenameColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_RenameColumns_Example2_Code" xml:space="preserve">
    <value>Table.RenameColumns(
    Table.FromRecords({[CustomerNum = 1, Name = "Bob", PhoneNum = "123-4567"]}),
    {
        {"CustomerNum", "CustomerID"},
        {"PhoneNum", "Phone"}
    }
)</value>
  </data>
  <data name="Table_RenameColumns_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_RenameColumns_Example3_Code" xml:space="preserve">
    <value>Table.RenameColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    {"NewCol", "NewColumn"},
    MissingField.Ignore
)</value>
  </data>
  <data name="Table_RenameColumns_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_ReorderColumns_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_ReorderColumns_Example1_Code" xml:space="preserve">
    <value>Table.ReorderColumns(
    Table.FromRecords({[CustomerID = 1, Phone = "123-4567", Name = "Bob"]}),
    {"Name", "Phone"}
)</value>
  </data>
  <data name="Table_ReorderColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_ReorderColumns_Example2_Code" xml:space="preserve">
    <value>Table.ReorderColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    {"Phone", "Address"},
    MissingField.Ignore
)</value>
  </data>
  <data name="Table_ReorderColumns_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_Repeat_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_Repeat_Example1_Code" xml:space="preserve">
    <value>Table.Repeat(
    Table.FromRecords({
        [a = 1, b = "hello"],
        [a = 3, b = "world"]
    }),
    2
)</value>
  </data>
  <data name="Table_Repeat_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = 1, b = "hello"],
    [a = 3, b = "world"],
    [a = 1, b = "hello"],
    [a = 3, b = "world"]
})</value>
  </data>
  <data name="Table_ReplaceErrorValues_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ReplaceErrorValues_Example1_Code" xml:space="preserve">
    <value>Table.ReplaceErrorValues(
    Table.FromRows({{1, "hello"}, {3, ...}}, {"A", "B"}),
    {"B", "world"}
)</value>
  </data>
  <data name="Table_ReplaceErrorValues_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = 1, B = "hello"],
    [A = 3, B = "world"]
})</value>
  </data>
  <data name="Table_ReplaceErrorValues_Example2_Code" xml:space="preserve">
    <value>Table.ReplaceErrorValues(
    Table.FromRows({{..., ...}, {1, 2}}, {"A", "B"}),
    {{"A", "hello"}, {"B", "world"}}
)</value>
  </data>
  <data name="Table_ReplaceErrorValues_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = "hello", B = "world"],
    [A = 1, B = 2]
})</value>
  </data>
  <data name="Table_ReplaceKeys_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ReplaceKeys_Example1_Code" xml:space="preserve">
    <value>let
    table = Table.FromRecords({
        [Id = 1, Name = "Hello There"],
        [Id = 2, Name = "Good Bye"]
    }),
    tableWithKeys = Table.AddKey(table, {"Id"}, true),
    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {"Id"}, Primary = false]})
in
    resultTable</value>
  </data>
  <data name="Table_ReplaceKeys_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Id = 1, Name = "Hello There"],
    [Id = 2, Name = "Good Bye"]
})</value>
  </data>
  <data name="Table_ReplaceMatchingRows_Category" xml:space="preserve">
    <value>Table.Membership</value>
  </data>
  <data name="Table_ReplaceMatchingRows_Example1_Code" xml:space="preserve">
    <value>Table.ReplaceMatchingRows(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 2, b = 3],
        [a = 3, b = 4],
        [a = 1, b = 2]
    }),
    {
        {[a = 1, b = 2], [a = -1, b = -2]},
        {[a = 2, b = 3], [a = -2, b = -3]}
    }
)</value>
  </data>
  <data name="Table_ReplaceMatchingRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = -1, b = -2],
    [a = -2, b = -3],
    [a = 3, b = 4],
    [a = -1, b = -2]
})</value>
  </data>
  <data name="Table_ReplaceRelationshipIdentity_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ReplaceRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_ReplaceRows_Example1_Code" xml:space="preserve">
    <value>Table.ReplaceRows(
    Table.FromRecords({
        [Column1 = 1],
        [Column1 = 2],
        [Column1 = 3],
        [Column1 = 4],
        [Column1 = 5]
    }),
    1,
    3,
    {[Column1 = 6], [Column1 = 7]}
)</value>
  </data>
  <data name="Table_ReplaceRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Column1 = 1],
    [Column1 = 6],
    [Column1 = 7],
    [Column1 = 5]
})</value>
  </data>
  <data name="Table_ReplaceValue_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_ReplaceValue_Example1_Code" xml:space="preserve">
    <value>Table.ReplaceValue(
    Table.FromRecords({
        [A = 1, B = "hello"],
        [A = 2, B = "goodbye"],
        [A = 3, B = "goodbyes"]
    }),
    "goodbye",
    "world",
    Replacer.ReplaceValue,
    {"B"}
)</value>
  </data>
  <data name="Table_ReplaceValue_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = 1, B = "hello"],
    [A = 2, B = "world"],
    [A = 3, B = "goodbyes"]
})</value>
  </data>
  <data name="Table_ReplaceValue_Example2_Code" xml:space="preserve">
    <value>Table.ReplaceValue(
    Table.FromRecords({
        [A = 1, B = "hello"],
        [A = 2, B = "wurld"]
    }),
    "ur",
    "or",
    Replacer.ReplaceText,
    {"B"}
)</value>
  </data>
  <data name="Table_ReplaceValue_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = 1, B = "hello"],
    [A = 2, B = "world"]
})</value>
  </data>
  <data name="Table_ReplaceValue_Example3_Code" xml:space="preserve">
    <value>Table.ReplaceValue(
    Table.FromRecords({
        [Name = "Cindy", Country = "US"],
        [Name = "Bob", Country = "CA"]
    }),
    each if [Country] = "US" then [Name] else false,
    each Text.Repeat("*", Text.Length([Name])),
    Replacer.ReplaceValue,
    {"Name"}
)</value>
  </data>
  <data name="Table_ReplaceValue_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Name = "*****", Country = "US"],
    [Name = "Bob", Country = "CA"]
})</value>
  </data>
  <data name="Table_ReplaceValue_Example4_Code" xml:space="preserve">
    <value>Table.ReplaceValue(
    Table.FromRecords({
        [Name = "Cindy", Country = "US"],
        [Name = "Bob", Country = "CA"]
    }),
    each [Country] = "US",
    "?",
    (currentValue, isUS, replacementValue) =&gt;
        if isUS then
            Text.Repeat(replacementValue, Text.Length(currentValue))
        else
            currentValue,
    {"Name", "Country"}
)</value>
  </data>
  <data name="Table_ReplaceValue_Example4_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Name = "?????", Country = "??"],
    [Name = "Bob", Country = "CA"]
})</value>
  </data>
  <data name="Table_ReverseRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_ReverseRows_Example1_Code" xml:space="preserve">
    <value>Table.ReverseRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    })
)</value>
  </data>
  <data name="Table_ReverseRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"]
})</value>
  </data>
  <data name="Table_RowCount_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Table_RowCount_Example1_Code" xml:space="preserve">
    <value>Table.RowCount(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    })
)</value>
  </data>
  <data name="Table_RowCount_Example1_Result" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="Table_Schema_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Table_SelectColumns_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_SelectColumns_Example1_Code" xml:space="preserve">
    <value>Table.SelectColumns(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    "Name"
)</value>
  </data>
  <data name="Table_SelectColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Name = "Bob"],
    [Name = "Jim"],
    [Name = "Paul"],
    [Name = "Ringo"]
})</value>
  </data>
  <data name="Table_SelectColumns_Example2_Code" xml:space="preserve">
    <value>Table.SelectColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    {"CustomerID", "Name"}
)</value>
  </data>
  <data name="Table_SelectColumns_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob"]})</value>
  </data>
  <data name="Table_SelectColumns_Example3_Code" xml:space="preserve">
    <value>Table.SelectColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    "NewColumn"
)</value>
  </data>
  <data name="Table_SelectColumns_Example3_Result" xml:space="preserve">
    <value>[Expression.Error] The field 'NewColumn' of the record wasn't found.</value>
  </data>
  <data name="Table_SelectColumns_Example4_Code" xml:space="preserve">
    <value>Table.SelectColumns(
    Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
    {"CustomerID", "NewColumn"},
    MissingField.UseNull
)</value>
  </data>
  <data name="Table_SelectColumns_Example4_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, NewColumn = null]})</value>
  </data>
  <data name="Table_SelectRowsWithErrors_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_SelectRowsWithErrors_Example1_Code" xml:space="preserve">
    <value>Table.SelectRowsWithErrors(
    Table.FromRecords({
        [CustomerID = ..., Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    })
)[Name]</value>
  </data>
  <data name="Table_SelectRowsWithErrors_Example1_Result" xml:space="preserve">
    <value>{"Bob"}</value>
  </data>
  <data name="Table_SelectRows_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_SelectRows_Example1_Code" xml:space="preserve">
    <value>Table.SelectRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    each [CustomerID] &gt; 2
)</value>
  </data>
  <data name="Table_SelectRows_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_SelectRows_Example2_Code" xml:space="preserve">
    <value>Table.SelectRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    each not Text.Contains([Name], "B")
)</value>
  </data>
  <data name="Table_SelectRows_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_SingleRow_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_SingleRow_Example1_Code" xml:space="preserve">
    <value>Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}))</value>
  </data>
  <data name="Table_SingleRow_Example1_Result" xml:space="preserve">
    <value>[CustomerID = 1, Name = "Bob", Phone = "123-4567"]</value>
  </data>
  <data name="Table_Skip_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_Skip_Example1_Code" xml:space="preserve">
    <value>Table.Skip(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    1
)</value>
  </data>
  <data name="Table_Skip_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_Skip_Example2_Code" xml:space="preserve">
    <value>Table.Skip(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
    }),
    2
)</value>
  </data>
  <data name="Table_Skip_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
    [CustomerID = 4, Name = "Ringo", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_Skip_Example3_Code" xml:space="preserve">
    <value>Table.Skip(
    Table.FromRecords({
        [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0],
        [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5.0],
        [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25.0],
        [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200.0],
        [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2.0],
        [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20.0],
        [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
        [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100.0],
        [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25]
    }),
    each [Price] &gt; 25
)</value>
  </data>
  <data name="Table_Skip_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5],
    [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25],
    [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200],
    [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2],
    [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20],
    [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
    [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100],
    [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25]
})</value>
  </data>
  <data name="Table_Sort_Category" xml:space="preserve">
    <value>Table.Ordering</value>
  </data>
  <data name="Table_Sort_Example1_Code" xml:space="preserve">
    <value>Table.Sort(
    Table.FromRecords({
        [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0],
        [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5.0],
        [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25.0],
        [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200.0],
        [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2.0],
        [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20.0],
        [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
        [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100.0],
        [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25]
    }),
    {"OrderID"}
)</value>
  </data>
  <data name="Table_Sort_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100],
    [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5],
    [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25],
    [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200],
    [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2],
    [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20],
    [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
    [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100],
    [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25]
})</value>
  </data>
  <data name="Table_Sort_Example2_Code" xml:space="preserve">
    <value>Table.Sort(
    Table.FromRecords({
        [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0],
        [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5.0],
        [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25.0],
        [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200.0],
        [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2.0],
        [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20.0],
        [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
        [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100.0],
        [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25]
    }),
    {"OrderID", Order.Descending}
)</value>
  </data>
  <data name="Table_Sort_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25],
    [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100],
    [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
    [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20],
    [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2],
    [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200],
    [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25],
    [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5],
    [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100]
})</value>
  </data>
  <data name="Table_Sort_Example3_Code" xml:space="preserve">
    <value>Table.Sort(
    Table.FromRecords({
        [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100.0],
        [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5.0],
        [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25.0],
        [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200.0],
        [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2.0],
        [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20.0],
        [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
        [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100.0],
        [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25]
    }),
    {
        {"CustomerID", Order.Ascending},
        "OrderID"
    }
)</value>
  </data>
  <data name="Table_Sort_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [OrderID = 1, CustomerID = 1, Item = "Fishing rod", Price = 100],
    [OrderID = 2, CustomerID = 1, Item = "1 lb. worms", Price = 5],
    [OrderID = 6, CustomerID = 1, Item = "Tackle box", Price = 20],
    [OrderID = 3, CustomerID = 2, Item = "Fishing net", Price = 25],
    [OrderID = 4, CustomerID = 3, Item = "Fish tazer", Price = 200],
    [OrderID = 5, CustomerID = 3, Item = "Bandaids", Price = 2],
    [OrderID = 7, CustomerID = 5, Item = "Bait", Price = 3.25],
    [OrderID = 8, CustomerID = 5, Item = "Fishing Rod", Price = 100],
    [OrderID = 9, CustomerID = 6, Item = "Bait", Price = 3.25]
})</value>
  </data>
  <data name="Table_SplitAt_Category" xml:space="preserve">
    <value>Table.Row operations</value>
  </data>
  <data name="Table_SplitAt_Example1_Code" xml:space="preserve">
    <value>Table.SplitAt(#table({"a", "b", "c"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)</value>
  </data>
  <data name="Table_SplitAt_Example1_Result" xml:space="preserve">
    <value>{
    #table({"a", "b", "c"}, {{1, 2, 3}, {4, 5, 6}}),
    #table({"a", "b", "c"}, {{7, 8, 9}})
}</value>
  </data>
  <data name="Table_SplitColumn_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_SplitColumn_Example1_Code" xml:space="preserve">
    <value>let
    Customers = Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Cristina", Phone = "232-1550"]
    })
in
    Table.SplitColumn(Customers, "Name", Splitter.SplitTextByDelimiter("i"), 2)</value>
  </data>
  <data name="Table_SplitColumn_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [CustomerID = 1, Name.1 = "Bob", Name.2 = null, Phone = "123-4567"],
    [CustomerID = 2, Name.1 = "J", Name.2 = "m", Phone = "987-6543"],
    [CustomerID = 3, Name.1 = "Paul", Name.2 = null, Phone = "543-7890"],
    [CustomerID = 4, Name.1 = "Cr", Name.2 = "st", Phone = "232-1550"]
})</value>
  </data>
  <data name="Table_Split_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_Split_Example1_Code" xml:space="preserve">
    <value>let
    Customers = Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Cristina", Phone = "232-1550"],
        [CustomerID = 5, Name = "Anita", Phone = "530-1459"]
    })
in
    Table.Split(Customers, 2)</value>
  </data>
  <data name="Table_Split_Example1_Result" xml:space="preserve">
    <value>{
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
    }),
    Table.FromRecords({
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"],
        [CustomerID = 4, Name = "Cristina", Phone = "232-1550"]
    }),
    Table.FromRecords({
        [CustomerID = 5, Name = "Anita", Phone = "530-1459"]
    })
}</value>
  </data>
  <data name="Table_StopFolding_Category" xml:space="preserve">
    <value>Table.Other</value>
  </data>
  <data name="Table_StopFolding_Example1_Code" xml:space="preserve">
    <value>let
    Source = Sql.Database("SomeSQLServer", "MyDb"),
    MyTable = Source{[Item="MyTable"]}[Data],
    MyLocalTable = Table.StopFolding(dbo_MyTable)
in
    MyLocalTable</value>
  </data>
  <data name="Table_StopFolding_Example1_Result" xml:space="preserve">
    <value>table</value>
  </data>
  <data name="Table_ToColumns_Category" xml:space="preserve">
    <value>Table.Conversions</value>
  </data>
  <data name="Table_ToColumns_Example1_Code" xml:space="preserve">
    <value>Table.ToColumns(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"]
    })
)</value>
  </data>
  <data name="Table_ToColumns_Example1_Result" xml:space="preserve">
    <value>{{1, 2}, {"Bob", "Jim"}, {"123-4567", "987-6543"}}</value>
  </data>
  <data name="Table_ToList_Category" xml:space="preserve">
    <value>Table.Conversions</value>
  </data>
  <data name="Table_ToList_Example1_Code" xml:space="preserve">
    <value>Table.ToList(
    Table.FromRows({
        {Number.ToText(1), "Bob", "123-4567"},
        {Number.ToText(2), "Jim", "987-6543"},
        {Number.ToText(3), "Paul", "543-7890"}
    }),
    Combiner.CombineTextByDelimiter(",")
)</value>
  </data>
  <data name="Table_ToList_Example1_Result" xml:space="preserve">
    <value>{"1,Bob,123-4567", "2,Jim,987-6543", "3,Paul,543-7890"}</value>
  </data>
  <data name="Table_ToRecords_Category" xml:space="preserve">
    <value>Table.Conversions</value>
  </data>
  <data name="Table_ToRecords_Example1_Code" xml:space="preserve">
    <value>Table.ToRecords(
    Table.FromRows(
        {
            {1, "Bob", "123-4567"},
            {2, "Jim", "987-6543"},
            {3, "Paul", "543-7890"}
        },
        {"CustomerID", "Name", "Phone"}
    )
)</value>
  </data>
  <data name="Table_ToRecords_Example1_Result" xml:space="preserve">
    <value>{
    [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
    [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
    [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
}</value>
  </data>
  <data name="Table_ToRows_Category" xml:space="preserve">
    <value>Table.Conversions</value>
  </data>
  <data name="Table_ToRows_Example1_Code" xml:space="preserve">
    <value>Table.ToRows(
    Table.FromRecords({
        [CustomerID = 1, Name = "Bob", Phone = "123-4567"],
        [CustomerID = 2, Name = "Jim", Phone = "987-6543"],
        [CustomerID = 3, Name = "Paul", Phone = "543-7890"]
    })
)</value>
  </data>
  <data name="Table_ToRows_Example1_Result" xml:space="preserve">
    <value>{
    {1, "Bob", "123-4567"},
    {2, "Jim", "987-6543"},
    {3, "Paul", "543-7890"}
}</value>
  </data>
  <data name="Table_TransformColumnNames_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_TransformColumnNames_Example1_Code" xml:space="preserve">
    <value>Table.TransformColumnNames(Table.FromRecords({[#"Col#(tab)umn" = 1]}), Text.Clean)</value>
  </data>
  <data name="Table_TransformColumnNames_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[Column = 1]})</value>
  </data>
  <data name="Table_TransformColumnNames_Example2_Code" xml:space="preserve">
    <value>Table.TransformColumnNames(
    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),
    Text.Clean,
    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]
)</value>
  </data>
  <data name="Table_TransformColumnNames_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})</value>
  </data>
  <data name="Table_TransformColumnTypes_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_TransformColumnTypes_Example1_Code" xml:space="preserve">
    <value>Table.TransformColumnTypes(
    Table.FromRecords({
        [a = 1, b = 2],
        [a = 3, b = 4]
    }),
    {"a", type text},
    "en-US"
)</value>
  </data>
  <data name="Table_TransformColumnTypes_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [a = "1", b = 2],
    [a = "3", b = 4]
})</value>
  </data>
  <data name="Table_TransformColumns_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_TransformColumns_Example1_Code" xml:space="preserve">
    <value>Table.TransformColumns(
    Table.FromRecords({
        [A = "1", B = 2],
        [A = "5", B = 10]
    }),
    {
        {"A", Number.FromText},
        {"B", Text.From}
    }
)</value>
  </data>
  <data name="Table_TransformColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = 1, B = "2"],
    [A = 5, B = "10"]
})</value>
  </data>
  <data name="Table_TransformColumns_Example2_Code" xml:space="preserve">
    <value>Table.TransformColumns(
    Table.FromRecords({
        [A = "1", B = 2],
        [A = "5", B = 10]
    }),
    {"X", Number.FromText},
    null,
    MissingField.Ignore
)</value>
  </data>
  <data name="Table_TransformColumns_Example2_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = "1", B = 2],
    [A = "5", B = 10]
})</value>
  </data>
  <data name="Table_TransformColumns_Example3_Code" xml:space="preserve">
    <value>Table.TransformColumns(
    Table.FromRecords({
        [A = "1", B = 2],
        [A = "5", B = 10]
    }),
    {"X", Number.FromText},
    null,
    MissingField.UseNull
)</value>
  </data>
  <data name="Table_TransformColumns_Example3_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = "1", B = 2, X = null],
    [A = "5", B = 10, X = null]
})</value>
  </data>
  <data name="Table_TransformColumns_Example4_Code" xml:space="preserve">
    <value>Table.TransformColumns(
    Table.FromRecords({
        [A = "1", B = 2],
        [A = "5", B = 10]
    }),
    {"B", each Text.From(_ + 1), type text},
    Number.FromText
)</value>
  </data>
  <data name="Table_TransformColumns_Example4_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [A = 1, B = "3"],
    [A = 5, B = "11"]
})</value>
  </data>
  <data name="Table_TransformRows_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_TransformRows_Example1_Code" xml:space="preserve">
    <value>Table.TransformRows(
    Table.FromRecords({
        [a = 1],
        [a = 2],
        [a = 3],
        [a = 4],
        [a = 5]
    }),
    each [a]
)</value>
  </data>
  <data name="Table_TransformRows_Example1_Result" xml:space="preserve">
    <value>{1, 2, 3, 4, 5}</value>
  </data>
  <data name="Table_TransformRows_Example2_Code" xml:space="preserve">
    <value>Table.TransformRows(
    Table.FromRecords({
        [a = 1],
        [a = 2],
        [a = 3],
        [a = 4],
        [a = 5]
    }),
    (row) as record =&gt; [B = Number.ToText(row[a])]
)</value>
  </data>
  <data name="Table_TransformRows_Example2_Result" xml:space="preserve">
    <value>{
    [B = "1"],
    [B = "2"],
    [B = "3"],
    [B = "4"],
    [B = "5"]
}</value>
  </data>
  <data name="Table_Transpose_Category" xml:space="preserve">
    <value>Table.Transformation</value>
  </data>
  <data name="Table_Transpose_Example1_Code" xml:space="preserve">
    <value>Table.Transpose(
    Table.FromRecords({
        [Name = "Full Name", Value = "Fred"],
        [Name = "Age", Value = 42],
        [Name = "Country", Value = "UK"]
    })
)</value>
  </data>
  <data name="Table_Transpose_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [Column1 = "Full Name", Column2 = "Age", Column3 = "Country"],
    [Column1 = "Fred", Column2 = 42, Column3 = "UK"]
})</value>
  </data>
  <data name="Table_TypeFromColumns_Category" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="Table_TypeFromColumns_Example1_Code" xml:space="preserve">
    <value>Table.TypeFromColumns({
    {"a", {1, 2, 3}},
    {"b", {"abc"}}
})</value>
  </data>
  <data name="Table_TypeFromColumns_Example1_Result" xml:space="preserve">
    <value>type table [
    a = number,
    b = nullable text
]</value>
  </data>
  <data name="Table_TypeFromList_Category" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="Table_TypeFromList_Example1_Code" xml:space="preserve">
    <value>Table.TypeFromList({
    [A = 1],
    [A = 1, B = "x"],
    [A = 3, B = 3, C = 5]
})</value>
  </data>
  <data name="Table_TypeFromList_Example1_Result" xml:space="preserve">
    <value>type table [
    A = number,
    B = any,
    C = nullable number
]</value>
  </data>
  <data name="Table_UnpivotOtherColumns_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_UnpivotOtherColumns_Example1_Code" xml:space="preserve">
    <value>Table.UnpivotOtherColumns(
    Table.FromRecords({
        [key = "key1", attribute1 = 1, attribute2 = 2, attribute3 = 3],
        [key = "key2", attribute1 = 4, attribute2 = 5, attribute3 = 6]
    }),
    {"key"},
    "column1",
    "column2"
)</value>
  </data>
  <data name="Table_UnpivotOtherColumns_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [key = "key1", column1 = "attribute1", column2 = 1],
    [key = "key1", column1 = "attribute2", column2 = 2],
    [key = "key1", column1 = "attribute3", column2 = 3],
    [key = "key2", column1 = "attribute1", column2 = 4],
    [key = "key2", column1 = "attribute2", column2 = 5],
    [key = "key2", column1 = "attribute3", column2 = 6]
})</value>
  </data>
  <data name="Table_Unpivot_Category" xml:space="preserve">
    <value>Table.Column operations</value>
  </data>
  <data name="Table_Unpivot_Example1_Code" xml:space="preserve">
    <value>Table.Unpivot(
    Table.FromRecords({
        [key = "x", a = 1, b = null, c = 3],
        [key = "y", a = 2, b = 4, c = null]
    }),
    {"a", "b", "c"},
    "attribute",
    "value"
)</value>
  </data>
  <data name="Table_Unpivot_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({
    [key = "x", attribute = "a", value = 1],
    [key = "x", attribute = "c", value = 3],
    [key = "y", attribute = "a", value = 2],
    [key = "y", attribute = "b", value = 4]
})</value>
  </data>
  <data name="Table_ViewError_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_ViewFunction_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_View_Category" xml:space="preserve">
    <value>Table.Table construction</value>
  </data>
  <data name="Table_View_Example1_Code" xml:space="preserve">
    <value>Table.View(
    null,
    [
        GetType = () =&gt; type table [CustomerID = number, Name = text, Phone = nullable text],
        GetRows = () =&gt; Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]}),
        GetRowCount = () =&gt; 1
    ]
)</value>
  </data>
  <data name="Table_View_Example1_Result" xml:space="preserve">
    <value>Table.FromRecords({[CustomerID = 1, Name = "Bob", Phone = "123-4567"]})</value>
  </data>
  <data name="Table_WithErrorContext_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Tables_GetRelationships_Category" xml:space="preserve">
    <value>Table.Information</value>
  </data>
  <data name="Teradata_Database_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="TextEncoding_Ascii_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="TextEncoding_BigEndianUnicode_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="TextEncoding_Unicode_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="TextEncoding_Utf16_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="TextEncoding_Utf8_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="TextEncoding_Windows_Category" xml:space="preserve">
    <value>Text.Parameter values</value>
  </data>
  <data name="Text_AfterDelimiter_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_AfterDelimiter_Example1_Code" xml:space="preserve">
    <value>Text.AfterDelimiter("111-222-333", "-")</value>
  </data>
  <data name="Text_AfterDelimiter_Example1_Result" xml:space="preserve">
    <value>"222-333"</value>
  </data>
  <data name="Text_AfterDelimiter_Example2_Code" xml:space="preserve">
    <value>Text.AfterDelimiter("111-222-333", "-", 1)</value>
  </data>
  <data name="Text_AfterDelimiter_Example2_Result" xml:space="preserve">
    <value>"333"</value>
  </data>
  <data name="Text_AfterDelimiter_Example3_Code" xml:space="preserve">
    <value>Text.AfterDelimiter("111-222-333", "-", {1, RelativePosition.FromEnd})</value>
  </data>
  <data name="Text_AfterDelimiter_Example3_Result" xml:space="preserve">
    <value>"222-333"</value>
  </data>
  <data name="Text_At_Category" xml:space="preserve">
    <value>Text.Extraction</value>
  </data>
  <data name="Text_At_Example1_Code" xml:space="preserve">
    <value>Text.At("Hello, World", 4)</value>
  </data>
  <data name="Text_At_Example1_Result" xml:space="preserve">
    <value>"o"</value>
  </data>
  <data name="Text_BeforeDelimiter_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_BeforeDelimiter_Example1_Code" xml:space="preserve">
    <value>Text.BeforeDelimiter("111-222-333", "-")</value>
  </data>
  <data name="Text_BeforeDelimiter_Example1_Result" xml:space="preserve">
    <value>"111"</value>
  </data>
  <data name="Text_BeforeDelimiter_Example2_Code" xml:space="preserve">
    <value>Text.BeforeDelimiter("111-222-333", "-", 1)</value>
  </data>
  <data name="Text_BeforeDelimiter_Example2_Result" xml:space="preserve">
    <value>"111-222"</value>
  </data>
  <data name="Text_BeforeDelimiter_Example3_Code" xml:space="preserve">
    <value>Text.BeforeDelimiter("111-222-333", "-", {1, RelativePosition.FromEnd})</value>
  </data>
  <data name="Text_BeforeDelimiter_Example3_Result" xml:space="preserve">
    <value>"111"</value>
  </data>
  <data name="Text_BetweenDelimiters_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_BetweenDelimiters_Example1_Code" xml:space="preserve">
    <value>Text.BetweenDelimiters("111 (222) 333 (444)", "(", ")")</value>
  </data>
  <data name="Text_BetweenDelimiters_Example1_Result" xml:space="preserve">
    <value>"222"</value>
  </data>
  <data name="Text_BetweenDelimiters_Example2_Code" xml:space="preserve">
    <value>Text.BetweenDelimiters("111 (222) 333 (444)", "(", ")", 1, 0)</value>
  </data>
  <data name="Text_BetweenDelimiters_Example2_Result" xml:space="preserve">
    <value>"444"</value>
  </data>
  <data name="Text_BetweenDelimiters_Example3_Code" xml:space="preserve">
    <value>Text.BetweenDelimiters("111 (222) 333 (444)", "(", ")", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})</value>
  </data>
  <data name="Text_BetweenDelimiters_Example3_Result" xml:space="preserve">
    <value>"222) 333 (444"</value>
  </data>
  <data name="Text_Clean_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Clean_Example1_Code" xml:space="preserve">
    <value>Text.Clean("ABC#(lf)D")</value>
  </data>
  <data name="Text_Clean_Example1_Result" xml:space="preserve">
    <value>"ABCD"</value>
  </data>
  <data name="Text_Combine_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Combine_Example1_Code" xml:space="preserve">
    <value>Text.Combine({"Seattle", "WA"})</value>
  </data>
  <data name="Text_Combine_Example1_Result" xml:space="preserve">
    <value>"SeattleWA"</value>
  </data>
  <data name="Text_Combine_Example2_Code" xml:space="preserve">
    <value>Text.Combine({"Seattle", "WA"}, ", ")</value>
  </data>
  <data name="Text_Combine_Example2_Result" xml:space="preserve">
    <value>"Seattle, WA"</value>
  </data>
  <data name="Text_Combine_Example3_Code" xml:space="preserve">
    <value>Text.Combine({"Seattle", null, "WA"}, ", ")</value>
  </data>
  <data name="Text_Combine_Example3_Result" xml:space="preserve">
    <value>"Seattle, WA"</value>
  </data>
  <data name="Text_Compare_Category" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Text_Compare_Example1_Code" xml:space="preserve">
    <value>Text.Compare("aB", "ab")</value>
  </data>
  <data name="Text_Compare_Example1_Result" xml:space="preserve">
    <value>-1</value>
  </data>
  <data name="Text_Compare_Example2_Code" xml:space="preserve">
    <value>Text.Compare("aB", "ab", TextComparer.IgnoreCase)</value>
  </data>
  <data name="Text_Compare_Example2_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Text_Contains_Category" xml:space="preserve">
    <value>Text.Membership</value>
  </data>
  <data name="Text_Contains_Example1_Code" xml:space="preserve">
    <value>Text.Contains("Hello World", "Hello")</value>
  </data>
  <data name="Text_Contains_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Text_Contains_Example2_Code" xml:space="preserve">
    <value>Text.Contains("Hello World", "hello")</value>
  </data>
  <data name="Text_Contains_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Text_Contains_Example3_Code" xml:space="preserve">
    <value>Text.Contains("Hello World", "hello", Comparer.OrdinalIgnoreCase)</value>
  </data>
  <data name="Text_Contains_Example3_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Text_End_Category" xml:space="preserve">
    <value>Text.Extraction</value>
  </data>
  <data name="Text_End_Example1_Code" xml:space="preserve">
    <value>Text.End("Hello, World", 5)</value>
  </data>
  <data name="Text_End_Example1_Result" xml:space="preserve">
    <value>"World"</value>
  </data>
  <data name="Text_EndsWith_Category" xml:space="preserve">
    <value>Text.Membership</value>
  </data>
  <data name="Text_EndsWith_Example1_Code" xml:space="preserve">
    <value>Text.EndsWith("Hello, World", "world")</value>
  </data>
  <data name="Text_EndsWith_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Text_EndsWith_Example2_Code" xml:space="preserve">
    <value>Text.EndsWith("Hello, World", "World")</value>
  </data>
  <data name="Text_EndsWith_Example2_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Text_Format_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Text_Format_Example1_Code" xml:space="preserve">
    <value>Text.Format("#{0}, #{1}, and #{2}.", {17, 7, 22})</value>
  </data>
  <data name="Text_Format_Example1_Result" xml:space="preserve">
    <value>"17, 7, and 22."</value>
  </data>
  <data name="Text_Format_Example2_Code" xml:space="preserve">
    <value>Text.Format(
    "The time for the #[distance] km run held in #[city] on #[date] was #[duration].",
    [
        city = "Seattle",
        date = #date(2015, 3, 10),
        duration = #duration(0, 0, 54, 40),
        distance = 10
    ],
    "en-US"
)</value>
  </data>
  <data name="Text_Format_Example2_Result" xml:space="preserve">
    <value>"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40."</value>
  </data>
  <data name="Text_FromBinary_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Text_From_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Text_From_Example1_Code" xml:space="preserve">
    <value>Text.From(3)</value>
  </data>
  <data name="Text_From_Example1_Result" xml:space="preserve">
    <value>"3"</value>
  </data>
  <data name="Text_InferNumberType_Category" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Text_Insert_Category" xml:space="preserve">
    <value>Text.Modification</value>
  </data>
  <data name="Text_Insert_Example1_Code" xml:space="preserve">
    <value>Text.Insert("ABD", 2, "C")</value>
  </data>
  <data name="Text_Insert_Example1_Result" xml:space="preserve">
    <value>"ABCD"</value>
  </data>
  <data name="Text_Length_Category" xml:space="preserve">
    <value>Text.Information</value>
  </data>
  <data name="Text_Length_Example1_Code" xml:space="preserve">
    <value>Text.Length("Hello World")</value>
  </data>
  <data name="Text_Length_Example1_Result" xml:space="preserve">
    <value>11</value>
  </data>
  <data name="Text_Lower_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Lower_Example1_Code" xml:space="preserve">
    <value>Text.Lower("AbCd")</value>
  </data>
  <data name="Text_Lower_Example1_Result" xml:space="preserve">
    <value>"abcd"</value>
  </data>
  <data name="Text_Middle_Category" xml:space="preserve">
    <value>Text.Extraction</value>
  </data>
  <data name="Text_Middle_Example1_Code" xml:space="preserve">
    <value>Text.Middle("Hello World", 6, 5)</value>
  </data>
  <data name="Text_Middle_Example1_Result" xml:space="preserve">
    <value>"World"</value>
  </data>
  <data name="Text_Middle_Example2_Code" xml:space="preserve">
    <value>Text.Middle("Hello World", 6, 20)</value>
  </data>
  <data name="Text_Middle_Example2_Result" xml:space="preserve">
    <value>"World"</value>
  </data>
  <data name="Text_NewGuid_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Text_PadEnd_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_PadEnd_Example1_Code" xml:space="preserve">
    <value>Text.PadEnd("Name", 10)</value>
  </data>
  <data name="Text_PadEnd_Example1_Result" xml:space="preserve">
    <value>"Name      "</value>
  </data>
  <data name="Text_PadEnd_Example2_Code" xml:space="preserve">
    <value>Text.PadEnd("Name", 10, "|")</value>
  </data>
  <data name="Text_PadEnd_Example2_Result" xml:space="preserve">
    <value>"Name||||||"</value>
  </data>
  <data name="Text_PadStart_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_PadStart_Example1_Code" xml:space="preserve">
    <value>Text.PadStart("Name", 10)</value>
  </data>
  <data name="Text_PadStart_Example1_Result" xml:space="preserve">
    <value>"      Name"</value>
  </data>
  <data name="Text_PadStart_Example2_Code" xml:space="preserve">
    <value>Text.PadStart("Name", 10, "|")</value>
  </data>
  <data name="Text_PadStart_Example2_Result" xml:space="preserve">
    <value>"||||||Name"</value>
  </data>
  <data name="Text_PositionOfAny_Category" xml:space="preserve">
    <value>Text.Membership</value>
  </data>
  <data name="Text_PositionOfAny_Example1_Code" xml:space="preserve">
    <value>Text.PositionOfAny("Hello, World!", {"H", "W"})</value>
  </data>
  <data name="Text_PositionOfAny_Example1_Result" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Text_PositionOfAny_Example2_Code" xml:space="preserve">
    <value>Text.PositionOfAny("Hello, World!", {"H", "W"}, Occurrence.All)</value>
  </data>
  <data name="Text_PositionOfAny_Example2_Result" xml:space="preserve">
    <value>{0, 7}</value>
  </data>
  <data name="Text_PositionOf_Category" xml:space="preserve">
    <value>Text.Membership</value>
  </data>
  <data name="Text_PositionOf_Example1_Code" xml:space="preserve">
    <value>Text.PositionOf("Hello, World! Hello, World!", "World")</value>
  </data>
  <data name="Text_PositionOf_Example1_Result" xml:space="preserve">
    <value>7</value>
  </data>
  <data name="Text_PositionOf_Example2_Code" xml:space="preserve">
    <value>Text.PositionOf("Hello, World! Hello, World!", "World", Occurrence.Last)</value>
  </data>
  <data name="Text_PositionOf_Example2_Result" xml:space="preserve">
    <value>21</value>
  </data>
  <data name="Text_Proper_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Proper_Example1_Code" xml:space="preserve">
    <value>Text.Proper("the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG")</value>
  </data>
  <data name="Text_Proper_Example1_Result" xml:space="preserve">
    <value>"The Quick Brown Fox Jumps Over The Lazy Dog"</value>
  </data>
  <data name="Text_Range_Category" xml:space="preserve">
    <value>Text.Extraction</value>
  </data>
  <data name="Text_Range_Example1_Code" xml:space="preserve">
    <value>Text.Range("Hello World", 6)</value>
  </data>
  <data name="Text_Range_Example1_Result" xml:space="preserve">
    <value>"World"</value>
  </data>
  <data name="Text_Range_Example2_Code" xml:space="preserve">
    <value>Text.Range("Hello World Hello", 6, 5)</value>
  </data>
  <data name="Text_Range_Example2_Result" xml:space="preserve">
    <value>"World"</value>
  </data>
  <data name="Text_RemoveRange_Category" xml:space="preserve">
    <value>Text.Modification</value>
  </data>
  <data name="Text_RemoveRange_Example1_Code" xml:space="preserve">
    <value>Text.RemoveRange("ABEFC", 2)</value>
  </data>
  <data name="Text_RemoveRange_Example1_Result" xml:space="preserve">
    <value>"ABFC"</value>
  </data>
  <data name="Text_RemoveRange_Example2_Code" xml:space="preserve">
    <value>Text.RemoveRange("ABEFC", 2, 2)</value>
  </data>
  <data name="Text_RemoveRange_Example2_Result" xml:space="preserve">
    <value>"ABC"</value>
  </data>
  <data name="Text_Remove_Category" xml:space="preserve">
    <value>Text.Modification</value>
  </data>
  <data name="Text_Remove_Example1_Code" xml:space="preserve">
    <value>Text.Remove("a,b;c", {",",";"})</value>
  </data>
  <data name="Text_Remove_Example1_Result" xml:space="preserve">
    <value>"abc"</value>
  </data>
  <data name="Text_Repeat_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Repeat_Example1_Code" xml:space="preserve">
    <value>Text.Repeat("a", 5)</value>
  </data>
  <data name="Text_Repeat_Example1_Result" xml:space="preserve">
    <value>"aaaaa"</value>
  </data>
  <data name="Text_Repeat_Example2_Code" xml:space="preserve">
    <value>Text.Repeat("helloworld.", 3)</value>
  </data>
  <data name="Text_Repeat_Example2_Result" xml:space="preserve">
    <value>"helloworld.helloworld.helloworld."</value>
  </data>
  <data name="Text_ReplaceRange_Category" xml:space="preserve">
    <value>Text.Modification</value>
  </data>
  <data name="Text_ReplaceRange_Example1_Code" xml:space="preserve">
    <value>Text.ReplaceRange("ABGF", 2, 1, "CDE")</value>
  </data>
  <data name="Text_ReplaceRange_Example1_Result" xml:space="preserve">
    <value>"ABCDEF"</value>
  </data>
  <data name="Text_Replace_Category" xml:space="preserve">
    <value>Text.Modification</value>
  </data>
  <data name="Text_Replace_Example1_Code" xml:space="preserve">
    <value>Text.Replace("the quick brown fox jumps over the lazy dog", "the", "a")</value>
  </data>
  <data name="Text_Replace_Example1_Result" xml:space="preserve">
    <value>"a quick brown fox jumps over a lazy dog"</value>
  </data>
  <data name="Text_Reverse_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Reverse_Example1_Code" xml:space="preserve">
    <value>Text.Reverse("123")</value>
  </data>
  <data name="Text_Reverse_Example1_Result" xml:space="preserve">
    <value>"321"</value>
  </data>
  <data name="Text_Select_Category" xml:space="preserve">
    <value>Text.Modification</value>
  </data>
  <data name="Text_Select_Example1_Code" xml:space="preserve">
    <value>Text.Select("a,b;c", {"a".."z"})</value>
  </data>
  <data name="Text_Select_Example1_Result" xml:space="preserve">
    <value>"abc"</value>
  </data>
  <data name="Text_SplitAny_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_SplitAny_Example1_Code" xml:space="preserve">
    <value>Text.SplitAny("Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com", "|")</value>
  </data>
  <data name="Text_SplitAny_Example1_Result" xml:space="preserve">
    <value>{
    "Jamie",
    "Campbell",
    "Admin",
    "Adventure Works",
    "www.adventure-works.com"
}</value>
  </data>
  <data name="Text_Split_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Split_Example1_Code" xml:space="preserve">
    <value>Text.Split("Name|Address|PhoneNumber", "|")</value>
  </data>
  <data name="Text_Split_Example1_Result" xml:space="preserve">
    <value>{
    "Name",
    "Address",
    "PhoneNumber"
}</value>
  </data>
  <data name="Text_Start_Category" xml:space="preserve">
    <value>Text.Extraction</value>
  </data>
  <data name="Text_Start_Example1_Code" xml:space="preserve">
    <value>Text.Start("Hello, World", 5)</value>
  </data>
  <data name="Text_Start_Example1_Result" xml:space="preserve">
    <value>"Hello"</value>
  </data>
  <data name="Text_StartsWith_Category" xml:space="preserve">
    <value>Text.Membership</value>
  </data>
  <data name="Text_StartsWith_Example1_Code" xml:space="preserve">
    <value>Text.StartsWith("Hello, World", "hello")</value>
  </data>
  <data name="Text_StartsWith_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Text_StartsWith_Example2_Code" xml:space="preserve">
    <value>Text.StartsWith("Hello, World", "Hello")</value>
  </data>
  <data name="Text_StartsWith_Example2_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Text_ToBinary_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Text_ToList_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Text_ToList_Example1_Code" xml:space="preserve">
    <value>Text.ToList("Hello World")</value>
  </data>
  <data name="Text_ToList_Example1_Result" xml:space="preserve">
    <value>{
    "H",
    "e",
    "l",
    "l",
    "o",
    " ",
    "W",
    "o",
    "r",
    "l",
    "d"
}</value>
  </data>
  <data name="Text_TrimEnd_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_TrimEnd_Example1_Code" xml:space="preserve">
    <value>Text.TrimEnd("     a b c d    ")</value>
  </data>
  <data name="Text_TrimEnd_Example1_Result" xml:space="preserve">
    <value>"     a b c d"</value>
  </data>
  <data name="Text_TrimStart_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_TrimStart_Example1_Code" xml:space="preserve">
    <value>Text.TrimStart("   a b c d    ")</value>
  </data>
  <data name="Text_TrimStart_Example1_Result" xml:space="preserve">
    <value>"a b c d    "</value>
  </data>
  <data name="Text_Trim_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Trim_Example1_Code" xml:space="preserve">
    <value>Text.Trim("     a b c d    ")</value>
  </data>
  <data name="Text_Trim_Example1_Result" xml:space="preserve">
    <value>"a b c d"</value>
  </data>
  <data name="Text_Upper_Category" xml:space="preserve">
    <value>Text.Transformations</value>
  </data>
  <data name="Text_Upper_Example1_Code" xml:space="preserve">
    <value>Text.Upper("aBcD")</value>
  </data>
  <data name="Text_Upper_Example1_Result" xml:space="preserve">
    <value>"ABCD"</value>
  </data>
  <data name="TimeZone_Current_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="Time_EndOfHour_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Time_EndOfHour_Example1_Code" xml:space="preserve">
    <value>Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))</value>
  </data>
  <data name="Time_EndOfHour_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 5, 14, 17, 59, 59.9999999)</value>
  </data>
  <data name="Time_EndOfHour_Example2_Code" xml:space="preserve">
    <value>Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))</value>
  </data>
  <data name="Time_EndOfHour_Example2_Result" xml:space="preserve">
    <value>#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)</value>
  </data>
  <data name="Time_FromText_Category" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Time_FromText_Example1_Code" xml:space="preserve">
    <value>Time.FromText("10:12:31am")</value>
  </data>
  <data name="Time_FromText_Example1_Result" xml:space="preserve">
    <value>#time(10, 12, 31)</value>
  </data>
  <data name="Time_FromText_Example2_Code" xml:space="preserve">
    <value>Time.FromText("1012")</value>
  </data>
  <data name="Time_FromText_Example2_Result" xml:space="preserve">
    <value>#time(10, 12, 00)</value>
  </data>
  <data name="Time_FromText_Example3_Code" xml:space="preserve">
    <value>Time.FromText("10")</value>
  </data>
  <data name="Time_FromText_Example3_Result" xml:space="preserve">
    <value>#time(10, 00, 00)</value>
  </data>
  <data name="Time_From_Category" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Time_From_Example1_Code" xml:space="preserve">
    <value>Time.From(0.7575)</value>
  </data>
  <data name="Time_From_Example1_Result" xml:space="preserve">
    <value>#time(18, 10, 48)</value>
  </data>
  <data name="Time_From_Example2_Code" xml:space="preserve">
    <value>Time.From(#datetime(1899, 12, 30, 06, 45, 12))</value>
  </data>
  <data name="Time_From_Example2_Result" xml:space="preserve">
    <value>#time(06, 45, 12)</value>
  </data>
  <data name="Time_Hour_Category" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Time_Hour_Example1_Code" xml:space="preserve">
    <value>Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))</value>
  </data>
  <data name="Time_Hour_Example1_Result" xml:space="preserve">
    <value>9</value>
  </data>
  <data name="Time_Minute_Category" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Time_Minute_Example1_Code" xml:space="preserve">
    <value>Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))</value>
  </data>
  <data name="Time_Minute_Example1_Result" xml:space="preserve">
    <value>15</value>
  </data>
  <data name="Time_Second_Category" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Time_Second_Example1_Code" xml:space="preserve">
    <value>Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))</value>
  </data>
  <data name="Time_Second_Example1_Result" xml:space="preserve">
    <value>36.5</value>
  </data>
  <data name="Time_StartOfHour_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Time_StartOfHour_Example1_Code" xml:space="preserve">
    <value>Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))</value>
  </data>
  <data name="Time_StartOfHour_Example1_Result" xml:space="preserve">
    <value>#datetime(2011, 10, 10, 8, 0, 0)</value>
  </data>
  <data name="Time_ToRecord_Category" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Time_ToRecord_Example1_Code" xml:space="preserve">
    <value>Time.ToRecord(#time(11, 56, 2))</value>
  </data>
  <data name="Time_ToRecord_Example1_Result" xml:space="preserve">
    <value>[
      Hour = 11,
      Minute = 56,
      Second = 2
]</value>
  </data>
  <data name="Time_ToText_Category" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Time_ToText_Example1_Code" xml:space="preserve">
    <value>Time.ToText(#time(11, 56, 2))</value>
  </data>
  <data name="Time_ToText_Example1_Result" xml:space="preserve">
    <value>"11:56 AM"</value>
  </data>
  <data name="Time_ToText_Example2_Code" xml:space="preserve">
    <value>Time.ToText(#time(11, 56, 2), [Format="hh:mm", Culture="de-DE"])</value>
  </data>
  <data name="Time_ToText_Example2_Result" xml:space="preserve">
    <value>"11:56"</value>
  </data>
  <data name="Time_ToText_Example3_Code" xml:space="preserve">
    <value>Time.ToText(#time(11, 56, 2), [Format="T", Culture="de-DE"])</value>
  </data>
  <data name="Time_ToText_Example3_Result" xml:space="preserve">
    <value>"11:56:02"</value>
  </data>
  <data name="TraceLevel_Critical_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="TraceLevel_Error_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="TraceLevel_Information_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="TraceLevel_Type_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="TraceLevel_Verbose_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="TraceLevel_Warning_Category" xml:space="preserve">
    <value>Diagnostics</value>
  </data>
  <data name="Type_AddTableKey_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ClosedRecord_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ClosedRecord_Example1_Code" xml:space="preserve">
    <value>Type.ClosedRecord(type [A = number, ...])</value>
  </data>
  <data name="Type_ClosedRecord_Example1_Result" xml:space="preserve">
    <value>type [A = number]</value>
  </data>
  <data name="Type_Facets_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ForFunction_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ForFunction_Example1_Code" xml:space="preserve">
    <value>Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)</value>
  </data>
  <data name="Type_ForFunction_Example1_Result" xml:space="preserve">
    <value>type function (X as number) as number</value>
  </data>
  <data name="Type_ForNullable_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ForRecord_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ForRecord_Example1_Code" xml:space="preserve">
    <value>let
    columnNames = {"Name", "Score"},
    columnTypes = {type text, type number},
    rowColumnTypes = List.Transform(columnTypes, (t) =&gt; [Type = t, Optional = false]),
    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)
in
    #table(type table rowType, {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="Type_ForRecord_Example1_Result" xml:space="preserve">
    <value>#table(
    type table [Name = text, Score = number],
    {{"Betty", 90.3}, {"Carl", 89.5}}
)</value>
  </data>
  <data name="Type_FunctionParameters_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_FunctionParameters_Example1_Code" xml:space="preserve">
    <value>Type.FunctionParameters(type function (x as number, y as text) as any)</value>
  </data>
  <data name="Type_FunctionParameters_Example1_Result" xml:space="preserve">
    <value>[x = type number, y = type text]</value>
  </data>
  <data name="Type_FunctionRequiredParameters_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_FunctionRequiredParameters_Example1_Code" xml:space="preserve">
    <value>Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)</value>
  </data>
  <data name="Type_FunctionRequiredParameters_Example1_Result" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="Type_FunctionReturn_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_FunctionReturn_Example1_Code" xml:space="preserve">
    <value>Type.FunctionReturn(type function () as any)</value>
  </data>
  <data name="Type_FunctionReturn_Example1_Result" xml:space="preserve">
    <value>type any</value>
  </data>
  <data name="Type_IsNullable_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_IsNullable_Example1_Code" xml:space="preserve">
    <value>Type.IsNullable(type number)</value>
  </data>
  <data name="Type_IsNullable_Example1_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Type_IsNullable_Example2_Code" xml:space="preserve">
    <value>Type.IsNullable(type nullable number)</value>
  </data>
  <data name="Type_IsNullable_Example2_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Type_IsOpenRecord_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_IsOpenRecord_Example1_Code" xml:space="preserve">
    <value>Type.IsOpenRecord(type [A = number, ...])</value>
  </data>
  <data name="Type_IsOpenRecord_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Type_Is_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_Is_Example1_Code" xml:space="preserve">
    <value>Type.Is(type number, type any)</value>
  </data>
  <data name="Type_Is_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Type_Is_Example2_Code" xml:space="preserve">
    <value>Type.Is(type any, type number)</value>
  </data>
  <data name="Type_Is_Example2_Result" xml:space="preserve">
    <value>false</value>
  </data>
  <data name="Type_ListItem_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ListItem_Example1_Code" xml:space="preserve">
    <value>Type.ListItem(type {number})</value>
  </data>
  <data name="Type_ListItem_Example1_Result" xml:space="preserve">
    <value>type number</value>
  </data>
  <data name="Type_NonNullable_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_NonNullable_Example1_Code" xml:space="preserve">
    <value>Type.NonNullable(type nullable number)</value>
  </data>
  <data name="Type_NonNullable_Example1_Result" xml:space="preserve">
    <value>type number</value>
  </data>
  <data name="Type_OpenRecord_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_OpenRecord_Example1_Code" xml:space="preserve">
    <value>Type.OpenRecord(type [A = number])</value>
  </data>
  <data name="Type_OpenRecord_Example1_Result" xml:space="preserve">
    <value>type [A = number, ...]</value>
  </data>
  <data name="Type_RecordFields_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_RecordFields_Example1_Code" xml:space="preserve">
    <value>Type.RecordFields(type [A = number, optional B = any])</value>
  </data>
  <data name="Type_RecordFields_Example1_Result" xml:space="preserve">
    <value>[
    A = [Type = type number, Optional = false],
    B = [Type = type any, Optional = true]
]</value>
  </data>
  <data name="Type_ReplaceFacets_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ReplaceTableKeys_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_ReplaceTableKeys_Example1_Code" xml:space="preserve">
    <value>let
    BaseType = type table [ID = number, FirstName = text, LastName = text],
    KeysAdded = Type.ReplaceTableKeys(
        BaseType, 
        {
            [Columns = {"ID"}, Primary = true],
            [Columns = {"FirstName", "LastName"}, Primary = false]
        }
    ),
    DetailsOfKeys = Type.TableKeys(KeysAdded)
in
    DetailsOfKeys</value>
  </data>
  <data name="Type_ReplaceTableKeys_Example1_Result" xml:space="preserve">
    <value>{
    [Columns = {"ID"}, Primary = true],
    [Columns = {"FirstName", "LastName"}, Primary = false]
}</value>
  </data>
  <data name="Type_ReplaceTableKeys_Example2_Code" xml:space="preserve">
    <value>let
    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {"ID"}, true),
    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),
    DetailsOfKeys = Type.TableKeys(KeyRemoved)
in
    DetailsOfKeys</value>
  </data>
  <data name="Type_ReplaceTableKeys_Example2_Result" xml:space="preserve">
    <value>{}</value>
  </data>
  <data name="Type_TableColumn_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_TableKeys_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_TableKeys_Example1_Code" xml:space="preserve">
    <value>let
    BaseType = type table [ID = number, Name = text],
    AddKey = Type.AddTableKey(BaseType, {"ID"}, true),
    DetailsOfKeys = Type.TableKeys(AddKey)
in
    DetailsOfKeys</value>
  </data>
  <data name="Type_TableKeys_Example1_Result" xml:space="preserve">
    <value>{[Columns = {"ID"}, Primary = true]}</value>
  </data>
  <data name="Type_TableRow_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_TableRow_Example1_Code" xml:space="preserve">
    <value>let
    tableRowType = Type.TableRow(Value.Type(#table({"Column1"}, {})))
in
    Type.RecordFields(tableRowType)</value>
  </data>
  <data name="Type_TableRow_Example1_Result" xml:space="preserve">
    <value>[Column1 = [Type = type any, Optional = false]]</value>
  </data>
  <data name="Type_TableSchema_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_Union_Category" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Uri_BuildQueryString_Category" xml:space="preserve">
    <value>Uri</value>
  </data>
  <data name="Uri_BuildQueryString_Example1_Code" xml:space="preserve">
    <value>Uri.BuildQueryString([a = "1", b = "+$"])</value>
  </data>
  <data name="Uri_BuildQueryString_Example1_Result" xml:space="preserve">
    <value>"a=1&amp;b=%2B%24"</value>
  </data>
  <data name="Uri_Combine_Category" xml:space="preserve">
    <value>Uri</value>
  </data>
  <data name="Uri_EscapeDataString_Category" xml:space="preserve">
    <value>Uri</value>
  </data>
  <data name="Uri_EscapeDataString_Example1_Code" xml:space="preserve">
    <value>Uri.EscapeDataString("+money$")</value>
  </data>
  <data name="Uri_EscapeDataString_Example1_Result" xml:space="preserve">
    <value>"%2Bmoney%24"</value>
  </data>
  <data name="Uri_Parts_Category" xml:space="preserve">
    <value>Uri</value>
  </data>
  <data name="Uri_Parts_Example1_Code" xml:space="preserve">
    <value>Uri.Parts("www.adventure-works.com")</value>
  </data>
  <data name="Uri_Parts_Example1_Result" xml:space="preserve">
    <value>[
    Scheme = "http",
    Host = "www.adventure-works.com",
    Port = 80,
    Path = "/",
    Query = [],
    Fragment = "",
    UserName = "",
    Password = ""
]</value>
  </data>
  <data name="Uri_Parts_Example2_Code" xml:space="preserve">
    <value>let
    UriUnescapeDataString = (data as text) as text =&gt; Uri.Parts("http://contoso?a=" &amp; data)[Query][a]
in
    UriUnescapeDataString("%2Bmoney%24")</value>
  </data>
  <data name="Uri_Parts_Example2_Result" xml:space="preserve">
    <value>"+money$"</value>
  </data>
  <data name="ValueAction_BeginTransaction_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ValueAction_CommitTransaction_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ValueAction_NativeStatement_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ValueAction_Replace_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Value_Add_Category" xml:space="preserve">
    <value>Values.Arithmetic operations</value>
  </data>
  <data name="Value_Alternates_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Value_As_Category" xml:space="preserve">
    <value>Values.Types</value>
  </data>
  <data name="Value_As_Example1_Code" xml:space="preserve">
    <value>Value.As(123, Number.Type)</value>
  </data>
  <data name="Value_As_Example1_Result" xml:space="preserve">
    <value>123</value>
  </data>
  <data name="Value_As_Example2_Code" xml:space="preserve">
    <value>Value.As("abc", type number)</value>
  </data>
  <data name="Value_As_Example2_Result" xml:space="preserve">
    <value>[Expression.Error] We cannot convert the value "abc" to type Number.</value>
  </data>
  <data name="Value_Compare_Category" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="Value_Divide_Category" xml:space="preserve">
    <value>Values.Arithmetic operations</value>
  </data>
  <data name="Value_Equals_Category" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="Value_Expression_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Value_Firewall_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Value_FromText_Category" xml:space="preserve">
    <value>Text.Conversions from and to text</value>
  </data>
  <data name="Value_Hash_Category" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="Value_Is_Category" xml:space="preserve">
    <value>Values.Types</value>
  </data>
  <data name="Value_Is_Example1_Code" xml:space="preserve">
    <value>Value.Is(123, Number.Type) = (123 is number)</value>
  </data>
  <data name="Value_Is_Example1_Result" xml:space="preserve">
    <value>true</value>
  </data>
  <data name="Value_Lineage_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Value_Metadata_Category" xml:space="preserve">
    <value>Metadata</value>
  </data>
  <data name="Value_Multiply_Category" xml:space="preserve">
    <value>Values.Arithmetic operations</value>
  </data>
  <data name="Value_NativeQuery_Category" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="Value_NullableEquals_Category" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="Value_Optimize_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Value_RemoveMetadata_Category" xml:space="preserve">
    <value>Metadata</value>
  </data>
  <data name="Value_RemoveMetadata_Example1_Code" xml:space="preserve">
    <value>Value.Metadata(
    Value.RemoveMetadata("abc" meta [a = 1, b = 2])
)</value>
  </data>
  <data name="Value_RemoveMetadata_Example1_Result" xml:space="preserve">
    <value>[]</value>
  </data>
  <data name="Value_RemoveMetadata_Example2_Code" xml:space="preserve">
    <value>Value.Metadata(
    Value.RemoveMetadata("abc" meta [a = 1, b = 2], {"a"})
)</value>
  </data>
  <data name="Value_RemoveMetadata_Example2_Result" xml:space="preserve">
    <value>[b = 2]</value>
  </data>
  <data name="Value_ReplaceMetadata_Category" xml:space="preserve">
    <value>Metadata</value>
  </data>
  <data name="Value_ReplaceType_Category" xml:space="preserve">
    <value>Values.Types</value>
  </data>
  <data name="Value_ReplaceType_Example1_Code" xml:space="preserve">
    <value>Type.RecordFields(
    Value.Type(
        Value.ReplaceType(
            [Column1 = 123],
            type [Column1 = number]
        )
    )
)[Column1][Type]</value>
  </data>
  <data name="Value_ReplaceType_Example1_Result" xml:space="preserve">
    <value>type number</value>
  </data>
  <data name="Value_Subtract_Category" xml:space="preserve">
    <value>Values.Arithmetic operations</value>
  </data>
  <data name="Value_Traits_Category" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="Value_Type_Category" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="Value_VersionIdentity_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Value_Versions_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="Value_ViewError_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Value_ViewFunction_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="Variable_Value_Category" xml:space="preserve">
    <value>Values.Implementation</value>
  </data>
  <data name="WebAction_Request_Category" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="WebAction_Request_Example1_Code" xml:space="preserve">
    <value>WebAction.Request(WebMethod.Get, "https://bing.com")</value>
  </data>
  <data name="WebAction_Request_Example1_Result" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="WebMethod_Delete_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="WebMethod_Get_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="WebMethod_Head_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="WebMethod_Patch_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="WebMethod_Post_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="WebMethod_Put_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="WebMethod_Type_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Web_BrowserContents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Web_Contents_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Web_Contents_Example1_Code" xml:space="preserve">
    <value>let
    searchText = "Power Query"
in
    Web.Contents(
        "https://www.bing.com",
        [
            RelativePath = "search",
            Query = [q = searchText]
        ]
    )</value>
  </data>
  <data name="Web_Contents_Example1_Result" xml:space="preserve">
    <value>binary</value>
  </data>
  <data name="Web_Contents_Example2_Code" xml:space="preserve">
    <value>let
    url = ...,
    headers = [#"Content-Type" = "application/json"],
    postData = Json.FromValue([x = 235.7, y = 41.53]),
    response = Web.Contents(
        url,
        [
            Headers = headers,
            Content = postData
        ]
    ),
    jsonResponse = Json.Document(response)
in
    jsonResponse</value>
  </data>
  <data name="Web_Contents_Example2_Result" xml:space="preserve">
    <value>table</value>
  </data>
  <data name="Web_Contents_Example3_Code" xml:space="preserve">
    <value>Web.Contents("https://contoso.com/api/customers/get", [ApiKeyName="api_key"])</value>
  </data>
  <data name="Web_Contents_Example3_Result" xml:space="preserve">
    <value>binary</value>
  </data>
  <data name="Web_DefaultProxy_Category" xml:space="preserve">
    <value>Extension</value>
  </data>
  <data name="Web_Headers_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Web_Headers_Example1_Code" xml:space="preserve">
    <value>let
    searchText = "Power Query"
in
    Web.Headers(
        "https://www.bing.com",
        [
            RelativePath = "search",
            Query = [q = searchText]
        ]
    )</value>
  </data>
  <data name="Web_Headers_Example1_Result" xml:space="preserve">
    <value>([
    #"Cache-Control" = "private, max-age=0",
    #"Content-Encoding" = "gzip",
    #"Content-Length" = "0",
    #"Content-Type" = "text/html; charset=utf-8",
    Date = "Tue, 14 Dec 2021 16:57:25 GMT",
    Expires = "Tue, 14 Dec 2021 16:56:25 GMT",
    Vary = "Accept-Encoding"
]
meta [
    Response.Status = 200
])</value>
  </data>
  <data name="Web_Page_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Web_Service_Category" xml:space="preserve">
    <value>Accessing data.</value>
  </data>
  <data name="Xml_Document_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Xml_Tables_Category" xml:space="preserve">
    <value>Accessing data</value>
  </data>
  <data name="Xml_Tables_Example1_Code" xml:space="preserve">
    <value>Xml.Tables(File.Contents("C:\invoices.xml"))</value>
  </data>
  <data name="Xml_Tables_Example1_Result" xml:space="preserve">
    <value>table</value>
  </data>
  <data name="_Pound_binary_Category" xml:space="preserve">
    <value>Binary</value>
  </data>
  <data name="_Pound_binary_Example1_Code" xml:space="preserve">
    <value>#binary({0x30, 0x31, 0x32})</value>
  </data>
  <data name="_Pound_binary_Example1_Result" xml:space="preserve">
    <value>Text.ToBinary("012")</value>
  </data>
  <data name="_Pound_binary_Example2_Code" xml:space="preserve">
    <value>#binary("1011")</value>
  </data>
  <data name="_Pound_binary_Example2_Result" xml:space="preserve">
    <value>Binary.FromText("1011", BinaryEncoding.Base64)</value>
  </data>
  <data name="_Pound_date_Category" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="_Pound_datetime_Category" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="_Pound_datetimezone_Category" xml:space="preserve">
    <value>DateTimeZone</value>
  </data>
  <data name="_Pound_duration_Category" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="_Pound_table_Category" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="_Pound_table_Example1_Code" xml:space="preserve">
    <value>#table({}, {})</value>
  </data>
  <data name="_Pound_table_Example1_Result" xml:space="preserve">
    <value>#table({}, {})</value>
  </data>
  <data name="_Pound_table_Example2_Code" xml:space="preserve">
    <value>#table(null, {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_table_Example2_Result" xml:space="preserve">
    <value>#table({"Column1", "Column2"}, {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_table_Example3_Code" xml:space="preserve">
    <value>#table(2, {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_table_Example3_Result" xml:space="preserve">
    <value>#table({"Column1", "Column2"}, {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_table_Example4_Code" xml:space="preserve">
    <value>#table({"Name", "Score"}, {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_table_Example4_Result" xml:space="preserve">
    <value>#table({"Name", "Score"}, {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_table_Example5_Code" xml:space="preserve">
    <value>#table(type table [Name = text, Score = number], {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_table_Example5_Result" xml:space="preserve">
    <value>#table(type table [Name = text, Score = number], {{"Betty", 90.3}, {"Carl", 89.5}})</value>
  </data>
  <data name="_Pound_time_Category" xml:space="preserve">
    <value>Time</value>
  </data>
</root>