using System;

namespace Microsoft.Mashup.Engine1.Runtime
{
	// Token: 0x020016DF RID: 5855
	internal class LibraryDateSource
	{
		// Token: 0x04004F24 RID: 20260
		public const string Source = "// Copyright (c) Microsoft Corporation.  All rights reserved.\r\n    \r\nsection Date;\r\n\r\nshared Date.IsInPreviousDay = (dateTime) as nullable logical =>\r\n    Date.IsInPreviousNDays(dateTime, 1);\r\n\r\nshared Date.IsInPreviousNDays = (dateTime, days as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.AddDays(DateTime.FixedLocalNow(), -days)) and\r\n        Date.From(dateTime) < Date.From(DateTime.FixedLocalNow());\r\n        \r\nshared Date.IsInCurrentDay = (dateTime) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(DateTime.FixedLocalNow()) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(DateTime.FixedLocalNow(), 1));\r\n\r\nshared Date.IsInNextDay = (dateTime) as nullable logical =>\r\n    Date.IsInNextNDays(dateTime, 1);\r\n\r\nshared Date.IsInNextNDays = (dateTime, days as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.AddDays(DateTime.FixedLocalNow(), 1)) and \r\n        Date.From(dateTime) < Date.From(Date.AddDays(DateTime.FixedLocalNow(), days + 1));\r\n            \r\nshared Date.IsInPreviousWeek = (dateTime) as nullable logical =>\r\n    Date.IsInPreviousNWeeks(dateTime, 1);\r\n\r\nshared Date.IsInPreviousNWeeks = (dateTime, weeks as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfWeek(Date.AddWeeks(DateTime.FixedLocalNow(), -weeks))) and\r\n        Date.From(dateTime) < Date.From(Date.StartOfWeek(DateTime.FixedLocalNow()));\r\n\r\nshared Date.IsInCurrentWeek = (dateTime) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfWeek(DateTime.FixedLocalNow())) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfWeek(DateTime.FixedLocalNow()), 1));\r\n\r\nshared Date.IsInNextWeek = (dateTime) as nullable logical =>\r\n    Date.IsInNextNWeeks(dateTime, 1);\r\n\r\nshared Date.IsInNextNWeeks = (dateTime, weeks as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.AddDays(Date.EndOfWeek(DateTime.FixedLocalNow()), 1)) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfWeek(Date.AddWeeks(DateTime.FixedLocalNow(), weeks)), 1));\r\n\r\nshared Date.IsInPreviousMonth = (dateTime) as nullable logical =>\r\n    Date.IsInPreviousNMonths(dateTime, 1);\r\n\r\nshared Date.IsInPreviousNMonths = (dateTime, months as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfMonth(Date.AddMonths(DateTime.FixedLocalNow(), -months))) and\r\n        Date.From(dateTime) < Date.From(Date.StartOfMonth(DateTime.FixedLocalNow()));\r\n\r\nshared Date.IsInCurrentMonth = (dateTime) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfMonth(DateTime.FixedLocalNow())) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfMonth(DateTime.FixedLocalNow()), 1));\r\n\r\nshared Date.IsInNextMonth = (dateTime) as nullable logical =>\r\n    Date.IsInNextNMonths(dateTime, 1);\r\n\r\nshared Date.IsInNextNMonths = (dateTime, months as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.AddDays(Date.EndOfMonth(DateTime.FixedLocalNow()), 1)) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfMonth(Date.AddMonths(DateTime.FixedLocalNow(), months)), 1));\r\n\r\nshared Date.IsInPreviousQuarter = (dateTime) as nullable logical =>\r\n    Date.IsInPreviousNQuarters(dateTime, 1);\r\n\r\nshared Date.IsInPreviousNQuarters = (dateTime, quarters as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -quarters))) and\r\n        Date.From(dateTime) < Date.From(Date.StartOfQuarter(DateTime.FixedLocalNow()));\r\n\r\nshared Date.IsInCurrentQuarter = (dateTime) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfQuarter(DateTime.FixedLocalNow())) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfQuarter(DateTime.FixedLocalNow()), 1));\r\n\r\nshared Date.IsInNextQuarter = (dateTime) as nullable logical =>\r\n    Date.IsInNextNQuarters(dateTime, 1);\r\n\r\nshared Date.IsInNextNQuarters = (dateTime, quarters as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.AddDays(Date.EndOfQuarter(DateTime.FixedLocalNow()), 1)) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), quarters)), 1));\r\n\r\nshared Date.IsInPreviousYear = (dateTime) as nullable logical =>\r\n    Date.IsInPreviousNYears(dateTime, 1);\r\n\r\nshared Date.IsInPreviousNYears = (dateTime, years as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfYear(Date.AddYears(DateTime.FixedLocalNow(), -years))) and\r\n        Date.From(dateTime) < Date.From(Date.StartOfYear(DateTime.FixedLocalNow()));\r\n\r\nshared Date.IsInCurrentYear = (dateTime) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfYear(DateTime.FixedLocalNow())) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfYear(DateTime.FixedLocalNow()), 1));\r\n\r\nshared Date.IsInNextYear = (dateTime) as nullable logical =>\r\n    Date.IsInNextNYears(dateTime, 1);\r\n\r\nshared Date.IsInNextNYears = (dateTime, years as number) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.AddDays(Date.EndOfYear(DateTime.FixedLocalNow()), 1)) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfYear(Date.AddYears(DateTime.FixedLocalNow(), years)), 1));\r\n\r\nshared Date.IsInYearToDate = (dateTime) as nullable logical =>\r\n    Date.From(dateTime) >= Date.From(Date.StartOfYear(DateTime.FixedLocalNow())) and\r\n        Date.From(dateTime) < Date.From(Date.AddDays(Date.EndOfDay(DateTime.FixedLocalNow()), 1));\r\n\r\nshared DateTime.IsInPreviousSecond = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfSecond() - #duration(0, 0, 0, 1) and\r\n        DateTime.From(dateTime) < StartOfSecond();\r\n\r\nshared DateTime.IsInPreviousNSeconds = (dateTime, seconds as number) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfSecond() - #duration(0, 0, 0, seconds) and\r\n        DateTime.From(dateTime) < StartOfSecond();\r\n\r\nshared DateTime.IsInNextSecond = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfSecond() + #duration(0, 0, 0, 1) and\r\n        DateTime.From(dateTime) < StartOfSecond() + #duration(0, 0, 0, 2);\r\n\r\nshared DateTime.IsInNextNSeconds = (dateTime, seconds as number) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfSecond() + #duration(0, 0, 0, 1) and\r\n        DateTime.From(dateTime) < StartOfSecond() + #duration(0, 0, 0, seconds + 1);\r\n\r\nshared DateTime.IsInCurrentSecond = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfSecond() and\r\n        DateTime.From(dateTime) < StartOfSecond() + #duration(0, 0, 0, 1);\r\n\r\nshared DateTime.IsInPreviousMinute = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfMinute() - #duration(0, 0, 1, 0) and\r\n        DateTime.From(dateTime) < StartOfMinute();\r\n\r\nshared DateTime.IsInPreviousNMinutes = (dateTime, minutes as number) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfMinute() - #duration(0, 0, minutes, 0) and\r\n        DateTime.From(dateTime) < StartOfMinute();\r\n\r\nshared DateTime.IsInNextMinute = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfMinute() + #duration(0, 0, 1, 0) and \r\n        DateTime.From(dateTime) < StartOfMinute() + #duration(0, 0, 2, 0);\r\n\r\nshared DateTime.IsInNextNMinutes = (dateTime, minutes as number) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfMinute() + #duration(0, 0, 1, 0) and \r\n        DateTime.From(dateTime) < StartOfMinute() + #duration(0, 0, minutes + 1, 0);\r\n\r\nshared DateTime.IsInCurrentMinute = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfMinute() and\r\n        DateTime.From(dateTime) < StartOfMinute() + #duration(0, 0, 1, 0);\r\n\r\nshared DateTime.IsInPreviousHour = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfHour() - #duration(0, 1, 0, 0) and\r\n        DateTime.From(dateTime) < StartOfHour();\r\n\r\nshared DateTime.IsInPreviousNHours = (dateTime, hours as number) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfHour() - #duration(0, hours, 0, 0) and\r\n        DateTime.From(dateTime) < StartOfHour();\r\n\r\nshared DateTime.IsInNextHour = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfHour() + #duration(0, 1, 0, 0) and \r\n        DateTime.From(dateTime) < StartOfHour() + #duration(0, 2, 0, 0);\r\n\r\nshared DateTime.IsInNextNHours = (dateTime, hours as number) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfHour() + #duration(0, 1, 0, 0) and \r\n        DateTime.From(dateTime) < StartOfHour() + #duration(0, hours + 1, 0, 0);\r\n\r\nshared DateTime.IsInCurrentHour = (dateTime) as nullable logical =>\r\n    DateTime.From(dateTime) >= StartOfHour() and\r\n        DateTime.From(dateTime) < StartOfHour() + #duration(0, 1, 0, 0);\r\n\r\nshared Date.MonthName = (date, optional culture as text) as nullable text => \r\n    DateTimeZone.ToText(DateTimeZone.From(date), \"MMMM\", culture);\r\n\r\nshared Date.DayOfWeekName = (date, optional culture as text) as nullable text => \r\n    DateTimeZone.ToText(DateTimeZone.From(date), \"dddd\", culture);\r\n\r\nStartOfHour = () as nullable datetime => DateTime.From(Time.StartOfHour(DateTime.FixedLocalNow()));\r\n\r\nStartOfMinute = () as nullable datetime => DateTime.From(Time.StartOfHour(DateTime.FixedLocalNow()) + #duration(0, 0, Time.Minute(DateTime.FixedLocalNow()), 0));\r\n\r\nStartOfSecond = () as nullable datetime => DateTime.From(Time.StartOfHour(DateTime.FixedLocalNow()) + #duration(0, 0, Time.Minute(DateTime.FixedLocalNow()), Number.RoundDown(Time.Second(DateTime.FixedLocalNow()))));\r\n    ";
	}
}
