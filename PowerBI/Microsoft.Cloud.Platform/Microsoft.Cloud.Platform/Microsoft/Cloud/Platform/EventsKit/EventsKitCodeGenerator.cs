using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.PerformanceData;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using JetBrains.Annotations;
using Microsoft.Cloud.Platform.Common;
using Microsoft.Cloud.Platform.Eventing.Base;
using Microsoft.Cloud.Platform.Utils;

namespace Microsoft.Cloud.Platform.EventsKit
{
	// Token: 0x02000337 RID: 823
	internal class EventsKitCodeGenerator
	{
		// Token: 0x06001842 RID: 6210 RVA: 0x00058CEC File Offset: 0x00056EEC
		public EventsKitCodeGenerator(EventsKitFactoryOptions options, EventsKitMetadata ekm)
		{
			this.m_emitPerformanceCounters = options.HasFlag(EventsKitFactoryOptions.EmitPerformanceCounters);
			this.m_emitWindowsEventLogEvents = options.HasFlag(EventsKitFactoryOptions.EmitWindowsEventLogEvents);
			this.m_emitEventingServerEvents = options.HasFlag(EventsKitFactoryOptions.EmitEventingServerEvents);
			this.m_emitEtwEvents = options.HasFlag(EventsKitFactoryOptions.EmitEtwEvents);
			this.m_eventsKitMetadata = ekm;
			this.m_stringBuilder = new ExtendedStringBuilder();
			this.m_scope = new EventsKitCodeGenerator.Scope(this);
			this.m_eventSourceClassName = EventsKitFactoryUtils.FormatEventSourceClassName(this.m_eventsKitMetadata.ClassName);
			this.m_performanceCountersCounterSet = new VariableMetadata(typeof(CounterSet), "{0}CounterSet".FormatWithInvariantCulture(new object[] { this.m_eventsKitMetadata.PerformanceCountersCategory.CategorySymbol }));
			this.m_performanceCounterCounterSetInstance = new VariableMetadata(typeof(CounterSetInstance), "{0}CounterSetInstance".FormatWithInvariantCulture(new object[] { this.m_eventsKitMetadata.PerformanceCountersCategory.CategorySymbol }));
		}

		// Token: 0x06001843 RID: 6211 RVA: 0x00058E10 File Offset: 0x00057010
		public string CreateGeneratedEventsKitCode()
		{
			this.WriteFileHeader();
			this.WriteInputData();
			this.WriteDisableWarnings(EventsKitCodeGenerator.WarningsArray);
			this.EmitLine("#region {0}", new object[] { this.m_eventsKitMetadata.Name });
			this.WriteNamespaceHeader(this.m_eventsKitMetadata.Namespace + ".Generated");
			using (this.m_scope.NewScope())
			{
				this.WriteUsings(this.UsingsArray);
				if (this.m_emitEtwEvents)
				{
					this.WriteEventSourceClass();
				}
				this.WriteEventsKitProductionClass();
				this.WriteEventsPackage();
				this.WriteEventsKitMockClass();
				this.WriteEventsKitInProcClass();
			}
			this.EmitLine("#endregion");
			this.WriteRestoreWarnings(EventsKitCodeGenerator.WarningsArray);
			return this.m_stringBuilder.ToString();
		}

		// Token: 0x06001844 RID: 6212 RVA: 0x00058EEC File Offset: 0x000570EC
		private void WriteFileHeader()
		{
			this.EmitComment("------------------------------------------------------------------------------------", new object[0]);
			this.EmitComment("Copyright (c) Microsoft Corporation. All rights reserved.                           ", new object[0]);
			this.EmitComment("                                                                                    ", new object[0]);
			this.EmitComment("This file was automatically generated by EventsKit generator at                     ", new object[0]);
			this.EmitComment("Do not change this file !!!!!!!!                                                    ", new object[0]);
			this.EmitComment("------------------------------------------------------------------------------------", new object[0]);
			this.EmitLine();
		}

		// Token: 0x06001845 RID: 6213 RVA: 0x00058F68 File Offset: 0x00057168
		private void WriteInputData()
		{
			this.EmitComment("Options:", new object[0]);
			this.EmitComment("  EmitPerformanceCounter={0}", new object[] { this.m_emitPerformanceCounters });
			this.EmitComment("  EmitWindowsEventLogEvents={0}", new object[] { this.m_emitWindowsEventLogEvents });
			this.EmitComment("  EmitEventingServerEvents={0}", new object[] { this.m_emitEventingServerEvents });
			this.EmitComment("  EmitEtwEvents={0}", new object[] { this.m_emitEtwEvents });
			this.EmitComment("Events Kit Metadata:", new object[0]);
			this.EmitComment("  ClassName={0}", new object[] { this.m_eventsKitMetadata.ClassName });
			this.EmitComment("  EventKitsType={0}", new object[] { this.m_eventsKitMetadata.EventsKitType });
			this.EmitComment("  Id={0}", new object[] { this.m_eventsKitMetadata.Id });
			this.EmitComment("Misc:", new object[0]);
			this.EmitComment("  ProcessName='{0}", new object[] { CurrentProcess.Name });
		}

		// Token: 0x06001846 RID: 6214 RVA: 0x0005909C File Offset: 0x0005729C
		private void WriteDisableWarnings(IEnumerable<int> warnings)
		{
			foreach (int num in warnings)
			{
				this.EmitLine("#pragma warning disable {0}", new object[] { num });
			}
			this.EmitLine();
		}

		// Token: 0x06001847 RID: 6215 RVA: 0x00059100 File Offset: 0x00057300
		private void WriteRestoreWarnings(IEnumerable<int> warnings)
		{
			foreach (int num in warnings)
			{
				this.EmitLine("#pragma warning restore {0}", new object[] { num });
			}
			this.EmitLine();
		}

		// Token: 0x06001848 RID: 6216 RVA: 0x00059164 File Offset: 0x00057364
		private void WriteUsings(IEnumerable<string> usings)
		{
			foreach (string text in usings)
			{
				this.m_stringBuilder.AppendLine("using {0};", new object[] { text });
			}
			this.EmitLine();
		}

		// Token: 0x06001849 RID: 6217 RVA: 0x000591C8 File Offset: 0x000573C8
		private void WriteNamespaceHeader(string ns)
		{
			this.EmitLine("namespace " + ns);
		}

		// Token: 0x0600184A RID: 6218 RVA: 0x000591DC File Offset: 0x000573DC
		private void WriteEventSourceClass()
		{
			this.EmitLine("[EventSource(Guid = \"{0}\")]", new object[] { this.m_eventsKitMetadata.Id.FullId });
			this.EmitLine("public class {0} : EventSource", new object[] { this.m_eventSourceClassName });
			using (this.m_scope.NewScope())
			{
				this.EmitLine("private const int c_accumulatedFailedWriteEvents = 100;");
				this.EmitLine("private Dictionary<string, int> m_failedWriteEventMethods;");
				this.EmitLine("private object m_locker;");
				this.EmitLine("private IEtwSessionsManager m_sessionManager;");
				this.EmitLine("public {0}(IEtwSessionsManager sessionsManager) : base(true)", new object[] { this.m_eventSourceClassName });
				using (this.m_scope.NewScope())
				{
					this.EmitLine("m_failedWriteEventMethods = new Dictionary<string, int>();");
					this.EmitLine("m_locker = new object();");
					this.EmitLine("m_sessionManager = sessionsManager;");
					this.EmitLine("sessionsManager.RegisterEventSource(this);");
				}
				this.EmitLine();
				foreach (IEventMetadata eventMetadata in this.m_eventsKitMetadata.Events)
				{
					EventsKitEventMetadata eventsKitEventMetadata = (EventsKitEventMetadata)eventMetadata;
					this.WriteEventSourceMethod(eventsKitEventMetadata);
					this.EmitLine();
				}
			}
			this.EmitLine();
		}

		// Token: 0x0600184B RID: 6219 RVA: 0x00059340 File Offset: 0x00057540
		private void WriteEventsKitProductionClass()
		{
			this.EmitLine("[EventsKitImplementation(typeof({0}))]", new object[] { this.m_eventsKitMetadata.EventsKitType.FullName });
			this.EmitLine("internal sealed class {0} : EventsKitBase, {1}", new object[]
			{
				this.m_eventsKitMetadata.ClassName,
				this.m_eventsKitMetadata.EventsKitType.FullName
			});
			using (this.m_scope.NewScope())
			{
				this.WriteEventsKitStaticFieldsInitialization();
				this.WriteEventsKitFieldsInitialization();
				this.WriteEventsKitStaticClassConstructor();
				this.WriteEventsKitClassConstructors();
				foreach (IEventMetadata eventMetadata in this.m_eventsKitMetadata.Events)
				{
					EventsKitEventMetadata eventsKitEventMetadata = (EventsKitEventMetadata)eventMetadata;
					this.WriteEventMethod(eventsKitEventMetadata, this.m_eventsKitMetadata.EventsKitType);
				}
			}
			this.EmitLine();
		}

		// Token: 0x0600184C RID: 6220 RVA: 0x00059438 File Offset: 0x00057638
		private void WriteEventsKitStaticFieldsInitialization()
		{
			this.WriteEventsKitPerformanceCountersStaticInitialization();
		}

		// Token: 0x0600184D RID: 6221 RVA: 0x00059440 File Offset: 0x00057640
		private void WriteEventsKitPerformanceCountersStaticInitialization()
		{
			if (!this.m_emitPerformanceCounters || !this.m_eventsKitMetadata.HasPerformanceCounters)
			{
				return;
			}
			this.EmitComment("Performance counters V2 counter set for category {0}", new object[] { this.m_eventsKitMetadata.PerformanceCountersCategory.CategoryName });
			this.EmitComment("CounterSet is static because it's not allow to initialize more than one CounterSet with the same Guid", new object[0]);
			this.DeclareStaticPrivateMember(this.m_performanceCountersCounterSet);
			this.EmitLine();
		}

		// Token: 0x0600184E RID: 6222 RVA: 0x000594AA File Offset: 0x000576AA
		private void WriteEventsKitFieldsInitialization()
		{
			this.WriteEventsKitPackageInitization();
			this.WriteEventSourceClassInitialization();
			this.WriteEventsKitWindowsEventLogInitialization();
			this.WriteEventsKitPerformanceCountersInitialization();
		}

		// Token: 0x0600184F RID: 6223 RVA: 0x000594C4 File Offset: 0x000576C4
		private void WriteEventsKitPerformanceCountersInitialization()
		{
			if (!this.m_emitPerformanceCounters || !this.m_eventsKitMetadata.HasPerformanceCounters)
			{
				return;
			}
			this.EmitComment("Performance counters V2 counter set instance for category {0}", new object[] { this.m_eventsKitMetadata.PerformanceCountersCategory.CategoryName });
			this.DeclarePrivateMember(this.m_performanceCounterCounterSetInstance);
			this.EmitLine();
		}

		// Token: 0x06001850 RID: 6224 RVA: 0x0005951D File Offset: 0x0005771D
		private void WriteEventsKitPackageInitization()
		{
			this.EmitSuppressMessage("CA1823");
			this.EmitLine("private {0} m_package;", new object[] { this.m_eventsKitMetadata.PackageName });
			this.EmitLine();
		}

		// Token: 0x06001851 RID: 6225 RVA: 0x0005954F File Offset: 0x0005774F
		private void WriteEventSourceClassInitialization()
		{
			if (this.m_emitEtwEvents)
			{
				this.EmitLine("private {0} m_eventSourceLog;", new object[] { this.m_eventSourceClassName });
			}
		}

		// Token: 0x06001852 RID: 6226 RVA: 0x00059573 File Offset: 0x00057773
		private void WriteEventsKitWindowsEventLogInitialization()
		{
			if (!this.m_emitWindowsEventLogEvents)
			{
				return;
			}
			if (this.m_eventsKitMetadata.IsWindowsEventLog)
			{
				this.EmitLine("private WindowsEventLogWriter m_windowsEventLogWriter;");
				this.EmitLine();
			}
		}

		// Token: 0x06001853 RID: 6227 RVA: 0x0005959C File Offset: 0x0005779C
		private void WriteEventsKitStaticClassConstructor()
		{
			this.EmitLine("static {0}()", new object[] { this.m_eventsKitMetadata.ClassName });
			using (this.m_scope.NewScope())
			{
				this.WriteInitializeStaticPerformanceCounters();
			}
			this.EmitLine();
		}

		// Token: 0x06001854 RID: 6228 RVA: 0x000595FC File Offset: 0x000577FC
		private void WriteInitializeStaticPerformanceCounters()
		{
			if (!this.m_emitPerformanceCounters || !this.m_eventsKitMetadata.HasPerformanceCounters)
			{
				return;
			}
			this.EmitComment("Creating the performance counters V2 CounterSet", new object[0]);
			this.EmitLine("{0} = new CounterSet(Guid.ParseExact(\"{1}\", \"B\"), Guid.ParseExact(\"{2}\", \"B\"), CounterSetInstanceType.Multiple);", new object[]
			{
				this.m_performanceCountersCounterSet.Name,
				this.m_eventsKitMetadata.PerformanceCountersCategory.CategoryProvider.ToString("B"),
				this.m_eventsKitMetadata.PerformanceCountersCategory.CategoryId.ToString("B")
			});
			HashSet<PerformanceCounterMetadata> hashSet = new HashSet<PerformanceCounterMetadata>();
			hashSet.AddRange(this.m_eventsKitMetadata.Events.Cast<EventsKitEventMetadata>().SelectMany((EventsKitEventMetadata emd) => emd.PerformanceCounters));
			foreach (PerformanceCounterMetadata performanceCounterMetadata in hashSet)
			{
				this.EmitComment("Adding counter {0} to the counter set definition", new object[] { performanceCounterMetadata.CounterSymbol });
				this.EmitLine("{0}.AddCounter({1}, System.Diagnostics.PerformanceData.CounterType.{2});", new object[]
				{
					this.m_performanceCountersCounterSet.Name,
					performanceCounterMetadata.CounterId,
					this.ConvertToV2CounterType(performanceCounterMetadata.CounterType).ToString()
				});
				if (performanceCounterMetadata.Base != null)
				{
					this.EmitComment("Adding counter {0} (base of {1}) to the counter set definition", new object[]
					{
						performanceCounterMetadata.Base.CounterSymbol,
						performanceCounterMetadata.CounterSymbol
					});
					this.EmitLine("{0}.AddCounter({1}, System.Diagnostics.PerformanceData.CounterType.{2});", new object[]
					{
						this.m_performanceCountersCounterSet.Name,
						performanceCounterMetadata.Base.CounterId,
						this.ConvertToV2CounterType(performanceCounterMetadata.Base.CounterType).ToString()
					});
				}
			}
		}

		// Token: 0x06001855 RID: 6229 RVA: 0x00059804 File Offset: 0x00057A04
		private void WriteEventsKitClassConstructors()
		{
			this.EmitSuppressMessage("CA1811");
			this.EmitLine("private {0}(ElementId elementId, ActivityType activityType, IPackageManager packageManager, String pcInstanceName, IEventingServer eventingServer, String eventLogSourceName{1})", new object[]
			{
				this.m_eventsKitMetadata.ClassName,
				this.m_emitEtwEvents ? ", {0} eventSource".FormatWithInvariantCulture(new object[] { this.m_eventSourceClassName }) : string.Empty
			});
			this.EmitLine(this.m_tab + ": base(elementId, activityType, pcInstanceName, eventingServer)");
			using (this.m_scope.NewScope())
			{
				this.EmitLine("ExtendedDiagnostics.EnsureArgumentNotNull(packageManager, \"packageManager\");");
				this.EmitLine();
				this.EmitComment("Create and register a package. We don't care that it is registered already", new object[0]);
				this.EmitLine("m_package = new {0}(eventingServer);", new object[] { this.m_eventsKitMetadata.PackageName });
				this.EmitLine("m_package = ({0})packageManager.TryRegister(m_package);", new object[] { this.m_eventsKitMetadata.PackageName });
				if (this.m_emitEtwEvents)
				{
					this.EmitLine("m_eventSourceLog = eventSource;");
				}
				if (this.m_emitWindowsEventLogEvents && this.m_eventsKitMetadata.IsWindowsEventLog)
				{
					this.EmitLine("m_windowsEventLogWriter = new WindowsEventLogWriter(eventLogSourceName);");
				}
				this.WriteInitializePerformanceCounters();
			}
			this.EmitLine();
		}

		// Token: 0x06001856 RID: 6230 RVA: 0x00059944 File Offset: 0x00057B44
		private void WriteInitializePerformanceCounters()
		{
			if (!this.m_emitPerformanceCounters || !this.m_eventsKitMetadata.HasPerformanceCounters)
			{
				return;
			}
			this.EmitLine("{0} = {1}.CreateCounterSetInstance(PerformanceCountersInstanceName);", new object[]
			{
				this.m_performanceCounterCounterSetInstance.Name,
				this.m_performanceCountersCounterSet.Name
			});
			this.EmitLine();
		}

		// Token: 0x06001857 RID: 6231 RVA: 0x0005999C File Offset: 0x00057B9C
		private void WriteEventSourceMethod(EventsKitEventMetadata emd)
		{
			this.Emit("[Microsoft.Diagnostics.Tracing.Event({0}, Level=Microsoft.Diagnostics.Tracing.EventLevel.{1}, Message=\"{2}\", Version={3})]", new object[]
			{
				emd.Order,
				emd.Level.ToEventLevel(),
				EventsKitCodeGenerator.GetEventFormattingString(emd, EventSourceConstants.CommonEventSourcePayloadNamesCount),
				emd.Version
			});
			this.EmitLine();
			this.Emit("public void {0}", new object[] { emd.Name });
			IEnumerable<VariableMetadata> allParameters = EventsKitCodeGenerator.s_eventSourceCommonHeaders.Concat(emd.Parameters);
			IEnumerable<VariableMetadata> allParameters3 = allParameters;
			string text = "(";
			string text2 = "{0} {1}";
			string text3 = ")\r\n";
			Func<VariableMetadata, string>[] array = new Func<VariableMetadata, string>[2];
			array[0] = (VariableMetadata p) => EventsKitCodeGenerator.GetEventSourceSupportedTypeName(p);
			array[1] = (VariableMetadata p) => p.Name;
			this.EmitCollection<VariableMetadata>(allParameters3, text, text2, text3, array);
			using (this.m_scope.NewScope())
			{
				this.EmitTryCatchClause(delegate
				{
					this.Emit(string.Empty, new object[0]);
					EventsKitCodeGenerator <>4__this = this;
					IEnumerable<VariableMetadata> allParameters2 = allParameters;
					string text4 = "WriteEvent({0}, ".FormatWithInvariantCulture(new object[] { emd.Order });
					string text5 = "{0}";
					string text6 = ");\r\n";
					Func<VariableMetadata, string>[] array2 = new Func<VariableMetadata, string>[1];
					array2[0] = delegate(VariableMetadata p)
					{
						if (!p.TypeNameInDeclaration.Equals(typeof(DateTime).FullName))
						{
							return p.Name;
						}
						return "{0}.ToFileTime()".FormatWithInvariantCulture(new object[] { p.Name });
					};
					<>4__this.EmitCollection<VariableMetadata>(allParameters2, text4, text5, text6, array2);
				}, new EventsKitCodeGenerator.CatchClause[]
				{
					new EventsKitCodeGenerator.CatchClause("Exception", delegate(string exceptionParamName)
					{
						this.EmitLine("lock(m_locker)");
						using (this.m_scope.NewScope())
						{
							this.EmitLine("if (!m_failedWriteEventMethods.ContainsKey(\"{0}\"))".FormatWithInvariantCulture(new object[] { emd.Name }));
							using (this.m_scope.NewScope())
							{
								this.EmitLine("m_failedWriteEventMethods.Add(\"{0}\", 0);".FormatWithInvariantCulture(new object[] { emd.Name }));
							}
							this.EmitLine("m_failedWriteEventMethods[\"{0}\"]++;".FormatWithInvariantCulture(new object[] { emd.Name }));
						}
						this.EmitLine();
						this.EmitLine("if (m_failedWriteEventMethods[\"{0}\"] == 1 || m_failedWriteEventMethods[\"{0}\"] % c_accumulatedFailedWriteEvents == 0)".FormatWithInvariantCulture(new object[] { emd.Name }));
						using (this.m_scope.NewScope())
						{
							this.EmitLine("m_sessionManager.NotifyEventWriteFailure(\"{0}\", {1}, {2}, m_failedWriteEventMethods[\"{0}\"]);".FormatWithInvariantCulture(new object[]
							{
								emd.Name,
								"{0}.GetType().Name".FormatWithInvariantCulture(new object[] { exceptionParamName }),
								"{0}.Message".FormatWithInvariantCulture(new object[] { exceptionParamName })
							}));
						}
					})
				});
			}
		}

		// Token: 0x06001858 RID: 6232 RVA: 0x00059B20 File Offset: 0x00057D20
		private static string GetEventSourceSupportedTypeName(VariableMetadata parameter)
		{
			if (EventsKitCodeGenerator.IsMonitoredErrorVariable(parameter.VariableMetadataType))
			{
				return typeof(string).FullName;
			}
			if (PrivateInformation.ContainsPrivateInformation(parameter.VariableMetadataType))
			{
				return typeof(string).FullName;
			}
			return parameter.TypeNameInDeclaration;
		}

		// Token: 0x06001859 RID: 6233 RVA: 0x00059B70 File Offset: 0x00057D70
		private static string GetEventSourceSupportedTypeValue(VariableMetadata parameter)
		{
			if (EventsKitCodeGenerator.IsMonitoredErrorVariable(parameter.VariableMetadataType))
			{
				return "{0} == null ? string.Empty : {0}.ToStringLimitedLength(true)".FormatWithInvariantCulture(new object[] { parameter.Name });
			}
			if (PrivateInformation.ContainsPrivateInformation(parameter.VariableMetadataType))
			{
				return "PrivateInformation.ScrubIfPII({0}).ObfuscatePrivateValue(true)".FormatWithInvariantCulture(new object[] { parameter.Name });
			}
			if (!(parameter.VariableMetadataType == typeof(string)))
			{
				return parameter.Name;
			}
			if (parameter.Name == "activityProperties" || parameter.Name == "jsonEvent" || parameter.Name == "requestHeaders")
			{
				return "{0} == null ? string.Empty : {0}.ObfuscatePrivateValue(true)".FormatWithInvariantCulture(new object[] { parameter.Name });
			}
			return "{0} == null ? string.Empty : {0}.ObfuscatePrivateValue()".FormatWithInvariantCulture(new object[] { parameter.Name });
		}

		// Token: 0x0600185A RID: 6234 RVA: 0x00059C54 File Offset: 0x00057E54
		private void WriteEventMethod(EventsKitEventMetadata emd, Type eventsKitType)
		{
			this.Emit("public void {0}", new object[] { emd.Name });
			IEnumerable<ParameterMetadata> parameters = emd.Parameters;
			string text = "(";
			string text2 = "{0} {1}";
			string text3 = ")\r\n";
			Func<ParameterMetadata, string>[] array = new Func<ParameterMetadata, string>[2];
			array[0] = (ParameterMetadata p) => p.TypeNameInDeclaration;
			array[1] = (ParameterMetadata p) => p.Name;
			this.EmitCollection<ParameterMetadata>(parameters, text, text2, text3, array);
			using (this.m_scope.NewScope())
			{
				this.EmitLine("AssertValid();");
				this.EmitLine("if (ModularizationFrameworkContext.Current.IsSelfTest)");
				using (this.m_scope.NewScope())
				{
					if (emd.IsTrace)
					{
						this.WriteTrace(emd, "Self Test Event:");
					}
				}
				this.EmitLine("else");
				using (this.m_scope.NewScope())
				{
					if (emd.IsTrace)
					{
						this.WriteTrace(emd, "Event:");
					}
					if (emd.IsPublishedEvent || emd.IsWindowsEventLog)
					{
						this.WriteMonitoredErrorInfo(emd);
						this.WriteEventObject(emd);
					}
					if (this.m_emitEventingServerEvents && emd.IsPublishedToEventingServer)
					{
						this.WriteFireEvent(emd);
						this.EmitLine();
					}
					if (this.m_emitEtwEvents && emd.IsPublishedToEtw)
					{
						this.WriteFireEtwEvent(emd);
						this.EmitLine();
					}
					if (this.m_emitPerformanceCounters && emd.HasPerformanceCounters)
					{
						this.EmitComment("Performance counters", new object[0]);
						this.EmitLine("if ({0} != null)", new object[] { this.m_performanceCounterCounterSetInstance.Name });
						using (this.m_scope.NewScope())
						{
							foreach (PerformanceCounterMetadata performanceCounterMetadata in emd.PerformanceCounters)
							{
								this.WriteModifyPerformanceCounter(performanceCounterMetadata);
							}
						}
					}
					if (this.m_emitWindowsEventLogEvents && emd.IsWindowsEventLog)
					{
						this.EmitComment("Windows Event Log", new object[0]);
						this.WriteWindowsEventLog(emd, eventsKitType);
					}
				}
				this.EmitLine();
			}
			this.EmitLine();
		}

		// Token: 0x0600185B RID: 6235 RVA: 0x00059F08 File Offset: 0x00058108
		private void WriteWindowsEventLog(EventsKitEventMetadata emd, Type eventsKitType)
		{
			this.EmitLine("try");
			using (this.m_scope.NewScope())
			{
				Type t = typeof(IMonitoredError);
				string text = (from p in emd.Parameters
					where t.IsAssignableFrom(p.VariableMetadataType)
					select p.Property.Name).FirstOrDefault<string>();
				string text2 = ((text == null) ? "string.Empty" : ("e." + text + ".ToString()"));
				this.EmitLine("String WinEventLogStr = WindowsEventLogMessageFormatter.Format(e,string.Empty,{0});", new object[] { text2 });
				this.EmitLine("m_windowsEventLogWriter.WriteEntry(WinEventLogStr, {0}.{1}, {2});", new object[]
				{
					emd.GetWindowsEventLogEntrySeverity().GetType(),
					emd.GetWindowsEventLogEntrySeverity(),
					emd.GetWindowsEventLogId()
				});
			}
			this.EmitLine("catch (WindowsEventLogException) {{}}");
		}

		// Token: 0x0600185C RID: 6236 RVA: 0x0005A01C File Offset: 0x0005821C
		private void WriteTrace(EventsKitEventMetadata emd, string prefix)
		{
			ExtendedDiagnostics.EnsureStringNotNullOrEmpty(emd.TraceProvider, "Trace Provider was not defined for Event={0}, eventsKit={1}".FormatWithInvariantCulture(new object[]
			{
				emd.Name,
				emd.EventsKit.Name
			}));
			this.Emit("{0}.Tracer.Trace({1}, ", new object[] { emd.TraceProvider, emd.TraceVerbosityLevel });
			this.EmitCollection<ParameterMetadata>(emd.Parameters, EventsKitCodeGenerator.GetTraceFormat(emd, prefix), "{0}", ");\r\n", new Func<ParameterMetadata, string>[]
			{
				new Func<ParameterMetadata, string>(EventsKitCodeGenerator.VariableStringFormatter)
			});
		}

		// Token: 0x0600185D RID: 6237 RVA: 0x0005A0B0 File Offset: 0x000582B0
		public static string GetTraceFormat(EventsKitEventMetadata emd, string prefix)
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendFormat("\"{0} {1} (", prefix, emd.Name);
			IList<ParameterMetadata> parameters = emd.Parameters;
			for (int i = 0; i < parameters.Count; i++)
			{
				stringBuilder.AppendFormat("{0}={{{1}}}", parameters[i].Name, i);
				if (i < parameters.Count - 1)
				{
					stringBuilder.Append(", ");
				}
			}
			stringBuilder.Append(")\"");
			if (emd.Parameters.Count > 0)
			{
				stringBuilder.Append(", ");
			}
			return stringBuilder.ToString();
		}

		// Token: 0x0600185E RID: 6238 RVA: 0x0005A150 File Offset: 0x00058350
		private void WriteFireEvent(EventsKitEventMetadata emd)
		{
			this.EmitComment("Fire event", new object[0]);
			this.EmitLine("if (m_package.IsEnabled({0}.{1}.Metadata.Index))", new object[]
			{
				this.m_eventsKitMetadata.PackageName,
				emd.Name
			});
			using (this.m_scope.NewScope())
			{
				this.EmitLine("e.Fire(m_package);");
			}
		}

		// Token: 0x0600185F RID: 6239 RVA: 0x0005A1CC File Offset: 0x000583CC
		private void WriteFireEtwEvent(EventsKitEventMetadata emd)
		{
			this.EmitComment("Fire ETW event", new object[0]);
			this.EmitLine("var activity = e.Activity;");
			string text = "m_eventSourceLog.{0}(ElementId.Name, activity.ActivityId, activity.ActivityType.ShortName, activity.RootActivityId, activity.ClientActivityId, {1}{2}{3});";
			object[] array = new object[4];
			array[0] = emd.Name;
			array[1] = emd.Id.EventId;
			array[2] = (emd.Parameters.Any<ParameterMetadata>() ? ", " : string.Empty);
			array[3] = emd.Parameters.StringJoin(", ", (ParameterMetadata p) => EventsKitCodeGenerator.GetEventSourceSupportedTypeValue(p));
			this.EmitLine(text, array);
		}

		// Token: 0x06001860 RID: 6240 RVA: 0x0005A270 File Offset: 0x00058470
		private void WriteMonitoredErrorInfo(EventsKitEventMetadata emd)
		{
			ParameterInfo parameterInfo = emd.TryGetMonitoredErrorParameter();
			if (emd.IsFilteredWindowsEventLog)
			{
				if (parameterInfo == null)
				{
					throw new InvalidOperationException(emd.Name + " is expected to have one parameter that implements IMonitoredError.");
				}
				this.EmitLine(parameterInfo.Name + ".SetMonitoringScopeIfNullOrEmpty(new MonitoringScopeId(ElementId.ToString()));");
			}
			if (parameterInfo != null)
			{
				this.EmitLine("if({0} != null) {0}.TrySetFiringEventErrorParametersIfNullOrEmpty(\"{1}\", {2}, \"{3}\", {4});", new object[]
				{
					parameterInfo.Name,
					emd.Name,
					emd.Id.EventId,
					emd.EventsKit.Name,
					emd.EventsKit.Id.EventsKitId
				});
			}
		}

		// Token: 0x06001861 RID: 6241 RVA: 0x0005A31C File Offset: 0x0005851C
		private static bool IsMonitoredErrorVariable(Type variableType)
		{
			return variableType.GetInterface(typeof(IMonitoredError).FullName) != null || variableType.FullName.Equals(typeof(IMonitoredError).FullName, StringComparison.Ordinal);
		}

		// Token: 0x06001862 RID: 6242 RVA: 0x0005A358 File Offset: 0x00058558
		private void WriteEventObject(EventsKitEventMetadata emd)
		{
			this.WriteEventObject(emd, "ElementId");
		}

		// Token: 0x06001863 RID: 6243 RVA: 0x0005A368 File Offset: 0x00058568
		private void WriteEventObject(EventsKitEventMetadata emd, string elementIdArgument)
		{
			this.Emit("var e = new {0}.{1}({2}", new object[]
			{
				this.m_eventsKitMetadata.PackageName,
				emd.Name,
				elementIdArgument
			});
			ReadOnlyCollection<WireFieldMetadata> wireFields = emd.GetWireFields();
			string text = ((wireFields.Count == 0) ? "" : ", ");
			IEnumerable<WireFieldMetadata> enumerable = wireFields;
			string text2 = text;
			string text3 = "{0}";
			string text4 = ");\r\n";
			Func<WireFieldMetadata, string>[] array = new Func<WireFieldMetadata, string>[1];
			array[0] = (WireFieldMetadata f) => f.Value.ToString();
			this.EmitCollection<WireFieldMetadata>(enumerable, text2, text3, text4, array);
		}

		// Token: 0x06001864 RID: 6244 RVA: 0x0005A3F8 File Offset: 0x000585F8
		private void WritePerformanceCounter(string instanceName, int counterId, string counterSymbol, CounterModifier modifier, string expression)
		{
			if (!modifier.Equals(CounterModifier.Increment) && !modifier.Equals(CounterModifier.Decrement))
			{
				if (modifier.Equals(CounterModifier.Set))
				{
					this.EmitComment("Setting the value of {0}", new object[] { counterSymbol });
					this.EmitLine("{0}.Counters[{1}].Value = {2};", new object[] { instanceName, counterId, expression });
				}
				return;
			}
			if (string.Equals(expression, "0"))
			{
				return;
			}
			string text = (modifier.Equals(CounterModifier.Decrement) ? "-{0}".FormatWithInvariantCulture(new object[] { expression }) : expression);
			this.EmitComment("Modifying the value of {0}", new object[] { counterSymbol });
			this.EmitLine("{0}.Counters[{1}].IncrementBy({2});", new object[] { instanceName, counterId, text });
		}

		// Token: 0x06001865 RID: 6245 RVA: 0x0005A4F4 File Offset: 0x000586F4
		private void WriteModifyPerformanceCounter(PerformanceCounterMetadata counter)
		{
			this.WritePerformanceCounter(this.m_performanceCounterCounterSetInstance.Name, counter.CounterId, counter.CounterSymbol, counter.Modifier, counter.ModifierExpression);
			if (counter.Base != null)
			{
				this.WritePerformanceCounter(this.m_performanceCounterCounterSetInstance.Name, counter.Base.CounterId, counter.Base.CounterSymbol, CounterModifier.Increment, counter.Base.ModifierExpression);
			}
			this.EmitLine();
		}

		// Token: 0x06001866 RID: 6246 RVA: 0x0005A56C File Offset: 0x0005876C
		private void WriteEventsPackage()
		{
			this.EmitLine("public class {0}: Package", new object[] { this.m_eventsKitMetadata.PackageName });
			using (this.m_scope.NewScope())
			{
				this.WritePackageConstructors();
				this.EmitLine();
				this.WritePackageMembers();
				foreach (IEventMetadata eventMetadata in this.m_eventsKitMetadata.Events)
				{
					EventsKitEventMetadata eventsKitEventMetadata = (EventsKitEventMetadata)eventMetadata;
					if (eventsKitEventMetadata.IsPublishedEvent || this.m_emitWindowsEventLogEvents)
					{
						this.WriteEvent(eventsKitEventMetadata);
					}
				}
			}
			this.EmitLine();
		}

		// Token: 0x06001867 RID: 6247 RVA: 0x0005A62C File Offset: 0x0005882C
		private void WritePackageConstructors()
		{
			this.EmitLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1810:InitializeReferenceTypeStaticFieldsInline\", Justification = \"Static constructor does work, not just initialization. Approved.\")]");
			this.EmitLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1506:AvoidExcessiveClassCoupling\", Justification = \"Intentional behaviour. Approved.\")]");
			this.EmitLine("public {0}(IEventingServer eventingServer):", new object[] { this.m_eventsKitMetadata.PackageName });
			this.EmitLine(this.m_tab + "base(");
			this.EmitLine(this.m_tab + this.m_tab + "new PackageMetadata(");
			this.EmitLine(this.m_tab + this.m_tab + this.m_tab + "new Guid(\"{0}\"),", new object[] { this.m_eventsKitMetadata.Id.FullId });
			this.EmitLine(this.m_tab + this.m_tab + this.m_tab + "\"{0}\",          ", new object[] { this.m_eventsKitMetadata.PackageName });
			this.EmitLine(this.m_tab + this.m_tab + this.m_tab + "typeof({0}),      ", new object[] { this.m_eventsKitMetadata.PackageName });
			this.EmitLine(this.m_tab + this.m_tab + this.m_tab + "{0}),             ", new object[] { this.m_eventsKitMetadata.Priority });
			this.EmitLine(this.m_tab + this.m_tab + "{0},", new object[] { this.m_eventsKitMetadata.PublishedEvents.Count<IEventMetadata>() });
			this.EmitLine(this.m_tab + this.m_tab + "eventingServer)");
			using (this.m_scope.NewScope())
			{
				foreach (IEventMetadata eventMetadata in this.m_eventsKitMetadata.Events)
				{
					EventsKitEventMetadata eventsKitEventMetadata = (EventsKitEventMetadata)eventMetadata;
					if (eventsKitEventMetadata.IsPublishedEvent)
					{
						this.EmitLine("Set({0}.Metadata);", new object[] { eventsKitEventMetadata.Name });
					}
				}
			}
		}

		// Token: 0x06001868 RID: 6248 RVA: 0x0005A864 File Offset: 0x00058A64
		private void WritePackageMembers()
		{
			this.EmitLine("public Guid Id");
			using (this.m_scope.NewScope())
			{
				this.EmitLine("get { return Metadata.Id; }");
			}
		}

		// Token: 0x06001869 RID: 6249 RVA: 0x0005A8B0 File Offset: 0x00058AB0
		private void WriteEvent(EventsKitEventMetadata emd)
		{
			string text = ((emd.IsVisible || emd.IsPublishedEvent) ? "public" : "internal");
			this.EmitSuppressMessage("CA1034");
			this.EmitSuppressMessage("CA1815");
			this.EmitLine("{0} class {1} : WireEventBase{2}", new object[]
			{
				text,
				emd.Name,
				(emd.IsFilteredWindowsEventLog || emd.TryGetMonitoredErrorParameter() != null) ? ", IMonitoredError" : string.Empty
			});
			using (this.m_scope.NewScope())
			{
				this.WriteEventFieldsDeclaration(emd);
				this.EmitLine();
				this.WriteEventConstructors(emd);
				this.EmitLine();
				this.WriteEventFire(emd);
				this.EmitLine();
				this.WriteEventPayloadProperties(emd.Parameters);
				this.EmitLine();
				this.WriteEventParametersProperty(emd.Parameters);
				this.EmitLine();
				this.WriteEventToString(emd);
				this.EmitLine();
				this.WriteMonitoredErrorMembers(emd);
				this.EmitLine();
				this.WriteEventToMonitoringString(emd);
				this.EmitLine();
				this.WriteEventMetadata(emd);
				this.EmitLine();
				this.WriteEventToInvariantCultureString(emd);
			}
			this.EmitLine();
		}

		// Token: 0x0600186A RID: 6250 RVA: 0x0005A9E4 File Offset: 0x00058BE4
		private void WriteEventFieldsDeclaration(EventsKitEventMetadata emd)
		{
			this.EmitComment("Event payload", new object[0]);
			this.DeclarePrivateMember(EventsKitCodeGenerator.c_elementIdVariableMetadata);
			foreach (WireFieldMetadata wireFieldMetadata in emd.GetWireFields())
			{
				this.DeclarePrivateMember(wireFieldMetadata);
			}
			this.EmitLine();
			this.EmitComment("EventMetadata", new object[0]);
			this.EmitLine("private static readonly EventMetadata sm_md = new EventMetadata(");
			this.EmitLine(this.m_tab + "new Guid(\"{0}\"),", new object[] { emd.Id.FullId });
			this.EmitLine(this.m_tab + "\"{0}\" ,         ", new object[] { emd.Name });
			this.EmitLine(this.m_tab + "typeof({0}),      ", new object[] { emd.Name });
			this.EmitLine(this.m_tab + "new Guid(\"{0}\"),", new object[] { this.m_eventsKitMetadata.Id.FullId });
			this.EmitLine(this.m_tab + "{0},              ", new object[] { this.m_eventsKitMetadata.PublishedEvents.ToList<IEventMetadata>().IndexOf(emd) });
			if (emd.IsAlwaysEnabled)
			{
				this.EmitLine(this.m_tab + "EventAttributes.AlwaysEnabled | ");
			}
			this.EmitLine(this.m_tab + "EventAttributes.None);");
			this.EmitLine();
			this.EmitComment("Activity", new object[0]);
			this.DeclarePrivateMember(EventsKitCodeGenerator.c_activityIdVariableMetadata);
			this.DeclarePrivateMember(EventsKitCodeGenerator.c_activityTypeVariableMetadata);
			this.DeclarePrivateMember(EventsKitCodeGenerator.c_rootActivityIdVariableMetadata);
			this.DeclarePrivateMember(EventsKitCodeGenerator.c_clientActivityIdVariableMetadata);
			this.DeclarePrivateMember(EventsKitCodeGenerator.c_eventParametersVariableMetadata);
			this.EmitLine();
		}

		// Token: 0x0600186B RID: 6251 RVA: 0x0005ABE0 File Offset: 0x00058DE0
		private void DeclarePrivateMember(VariableMetadata member)
		{
			this.EmitLine(string.Format(CultureInfo.InvariantCulture, "private {0} {1};", new object[] { member.TypeNameInDeclaration, member.Name }));
		}

		// Token: 0x0600186C RID: 6252 RVA: 0x0005AC0F File Offset: 0x00058E0F
		private void DeclareStaticPrivateMember(VariableMetadata member)
		{
			this.EmitLine(string.Format("private static {0} {1};", member.TypeNameInDeclaration, member.Name));
		}

		// Token: 0x0600186D RID: 6253 RVA: 0x0005AC30 File Offset: 0x00058E30
		private void WriteEventConstructors(EventsKitEventMetadata emd)
		{
			string text = (emd.IsVisible ? "public" : "internal");
			if (emd.IsVisible)
			{
				this.EmitSuppressMessage("CA1707");
			}
			this.Emit("{0} {1}", new object[] { text, emd.Name });
			ReadOnlyCollection<WireFieldMetadata> wireFields = emd.GetWireFields();
			string text2 = "(ElementId elementId" + ((wireFields.Count == 0) ? "" : ", ");
			IEnumerable<WireFieldMetadata> enumerable = wireFields;
			string text3 = text2;
			string text4 = "{0} {1}";
			string text5 = ")\r\n";
			Func<WireFieldMetadata, string>[] array = new Func<WireFieldMetadata, string>[2];
			array[0] = (WireFieldMetadata f) => f.TypeNameInDeclaration;
			array[1] = (WireFieldMetadata f) => NameUtils.FixNameWithUnderscores(f.Value.ToString());
			this.EmitCollection<WireFieldMetadata>(enumerable, text3, text4, text5, array);
			this.EmitLine("\t: base(new Guid(\"{0}\"), {1}, {2}, {3})", new object[]
			{
				emd.Id.FullId,
				"elementId",
				"UtilsContext.Current.Activity",
				"null"
			});
			using (this.m_scope.NewScope())
			{
				this.EmitLine(EventsKitCodeGenerator.c_elementIdVariableMetadata.Name + " = elementId.ToString();");
				this.EmitLine(EventsKitCodeGenerator.c_activityIdVariableMetadata.Name + " = UtilsContext.Current.Activity.ActivityId;");
				this.EmitLine(EventsKitCodeGenerator.c_activityTypeVariableMetadata.Name + " = UtilsContext.Current.Activity.ActivityType;");
				this.EmitLine(EventsKitCodeGenerator.c_rootActivityIdVariableMetadata.Name + " = UtilsContext.Current.Activity.RootActivityId;");
				this.EmitLine(EventsKitCodeGenerator.c_clientActivityIdVariableMetadata.Name + " = UtilsContext.Current.Activity.ClientActivityId;");
				foreach (WireFieldMetadata wireFieldMetadata in emd.GetWireFields())
				{
					this.EmitLine("{0} = {1};", new object[]
					{
						wireFieldMetadata.Name,
						NameUtils.FixNameWithUnderscores(wireFieldMetadata.Value.ToString())
					});
				}
			}
		}

		// Token: 0x0600186E RID: 6254 RVA: 0x0005AE54 File Offset: 0x00059054
		private void WriteEventPayloadProperties(IEnumerable<ParameterMetadata> parameters)
		{
			foreach (ParameterMetadata parameterMetadata in parameters)
			{
				PropertyMetadata property = parameterMetadata.Property;
				string text = "";
				if (string.Equals(property.Name, "Id", StringComparison.Ordinal) || string.Equals(property.Name, "ParentActivityId", StringComparison.Ordinal))
				{
					text = "new";
				}
				this.EmitLine("{0} public {1} {2}", new object[] { text, property.TypeNameInDeclaration, property.Name });
				using (this.m_scope.NewScope())
				{
					this.Emit("get {{ return ", new object[0]);
					this.EmitPropertyValue(parameterMetadata);
					this.m_stringBuilder.AppendAndBeginNewLine("; }");
				}
			}
		}

		// Token: 0x0600186F RID: 6255 RVA: 0x0005AF4C File Offset: 0x0005914C
		private void EmitPropertyValue(ParameterMetadata param)
		{
			PropertyMetadata property = param.Property;
			ReadOnlyCollection<WireFieldMetadata> wireFields = param.WireFields;
			if (wireFields.Count == 1)
			{
				this.m_stringBuilder.Append(wireFields[0].Name);
				return;
			}
			this.m_stringBuilder.Append("new {0}(", new object[] { property.TypeNameInDeclaration });
			IEnumerable<WireFieldMetadata> wireFields2 = param.WireFields;
			string text = "";
			string text2 = "{0}";
			string text3 = ")";
			Func<WireFieldMetadata, string>[] array = new Func<WireFieldMetadata, string>[1];
			array[0] = (WireFieldMetadata f) => f.Name;
			this.EmitCollection<WireFieldMetadata>(wireFields2, text, text2, text3, array);
		}

		// Token: 0x06001870 RID: 6256 RVA: 0x0005AFEC File Offset: 0x000591EC
		private void WriteEventParametersProperty(IEnumerable<ParameterMetadata> parameters)
		{
			this.EmitLine("public override IEnumerable<EventParameter> EventParameters");
			using (this.m_scope.NewScope())
			{
				this.EmitLine("get");
				using (this.m_scope.NewScope())
				{
					this.EmitLine("if ({0} == null)", new object[] { EventsKitCodeGenerator.c_eventParametersVariableMetadata.Name });
					using (this.m_scope.NewScope())
					{
						if (parameters != null && parameters.Any<ParameterMetadata>())
						{
							this.EmitLine("var eventParams = new {0}();", new object[] { EventsKitCodeGenerator.c_eventParametersVariableMetadata.TypeNameInDeclaration });
							foreach (ParameterMetadata parameterMetadata in parameters)
							{
								this.EmitLine("eventParams.Add(new EventParameter(\"{0}\", {1}, typeof({2})));", new object[]
								{
									parameterMetadata.Name,
									parameterMetadata.Property.Name,
									parameterMetadata.Property.TypeNameInDeclaration
								});
							}
							this.EmitLine("{0} = eventParams;", new object[] { EventsKitCodeGenerator.c_eventParametersVariableMetadata.Name });
						}
						else
						{
							this.EmitLine("{0} = new {1}();", new object[]
							{
								EventsKitCodeGenerator.c_eventParametersVariableMetadata.Name,
								EventsKitCodeGenerator.c_eventParametersVariableMetadata.TypeNameInDeclaration
							});
						}
					}
					this.EmitLine("return {0};", new object[] { EventsKitCodeGenerator.c_eventParametersVariableMetadata.Name });
				}
			}
		}

		// Token: 0x06001871 RID: 6257 RVA: 0x0005B1D0 File Offset: 0x000593D0
		private void WriteEventFire(EventsKitEventMetadata emd)
		{
			this.EmitSuppressMessage("CA1030");
			this.EmitLine("internal EventFireResult Fire(Package package)");
			using (this.m_scope.NewScope())
			{
				this.EmitLine();
				this.EmitComment("Fire the event", new object[0]);
				this.EmitLine("EventFireResult result = package.Fire(this);");
				this.EmitLine("return result;");
				this.EmitLine();
			}
		}

		// Token: 0x06001872 RID: 6258 RVA: 0x0005B250 File Offset: 0x00059450
		private void WriteEventToString(EventsKitEventMetadata emd)
		{
			this.EmitSuppressMessage("CA1305");
			this.EmitLine("public override String ToString()");
			this.GenericWriteEventToMonitoringString(emd, new Func<ParameterMetadata, string>(EventsKitCodeGenerator.ParameterToString));
		}

		// Token: 0x06001873 RID: 6259 RVA: 0x0005B27C File Offset: 0x0005947C
		private void WriteMonitoredErrorMembers(EventsKitEventMetadata emd)
		{
			ParameterInfo monitoredErrorParam = emd.TryGetMonitoredErrorParameter();
			if (monitoredErrorParam == null)
			{
				return;
			}
			string text = (from p in emd.Parameters
				where p.Name == monitoredErrorParam.Name
				select p.Property.Name).First<string>();
			this.EmitLine("#region IMonitoredError Members");
			foreach (PropertyInfo propertyInfo in typeof(IMonitoredError).GetProperties())
			{
				this.EmitLine("public {0} {1}", new object[] { propertyInfo.PropertyType, propertyInfo.Name });
				using (this.m_scope.NewScope())
				{
					string text2 = string.Format("{0}.{1}", text, propertyInfo.Name);
					if (propertyInfo.GetGetMethod() != null)
					{
						this.EmitLine("get { return this." + text2 + "; }");
					}
					if (propertyInfo.GetSetMethod() != null)
					{
						this.EmitLine("set { this." + text2 + " = value; }");
					}
				}
			}
			foreach (MethodInfo methodInfo in typeof(IMonitoredError).GetInterfaces().Concat(new Type[] { typeof(IMonitoredError) }).SelectMany((Type i) => i.GetMethods()))
			{
				if (!methodInfo.IsSpecialName)
				{
					string text3 = methodInfo.GetParameters().StringJoin(",", (ParameterInfo pi) => string.Format("{0} {1}", pi.ParameterType, pi.Name));
					this.EmitLine("public {0} {1}({2})", new object[] { methodInfo.ReturnType, methodInfo.Name, text3 });
					text3 = methodInfo.GetParameters().StringJoin(",", (ParameterInfo pi) => pi.Name);
					using (this.m_scope.NewScope())
					{
						this.EmitLine("return this.{0}.{1}({2}); ", new object[] { text, methodInfo.Name, text3 });
					}
				}
			}
			this.EmitLine();
			this.EmitLine("#endregion");
		}

		// Token: 0x06001874 RID: 6260 RVA: 0x0005B548 File Offset: 0x00059748
		private void WriteEventToInvairiantCultureString(EventsKitEventMetadata emd)
		{
			this.EmitSuppressMessage("CA1305");
			this.EmitLine("public override String ToInvariantCultureString()");
			using (this.m_scope.NewScope())
			{
				StringBuilder stringBuilder = new StringBuilder();
				stringBuilder.AppendFormat("return String.Format(CultureInfo.InvariantCulture, \"{0}\", ", EventsKitCodeGenerator.GetEventFormattingString(emd, EventsKitCodeGenerator.c_defaultWireFields.Count<VariableMetadata>()));
				stringBuilder.Append("m_elementId, m_activityId, m_activityType, m_rootActivityId, m_clientActivityId");
				foreach (ParameterMetadata parameterMetadata in emd.Parameters)
				{
					stringBuilder.AppendFormat(", {0}", parameterMetadata.Property.Name);
				}
				stringBuilder.Append(");");
				this.EmitLine(stringBuilder.ToString());
			}
		}

		// Token: 0x06001875 RID: 6261 RVA: 0x0005B628 File Offset: 0x00059828
		private void WriteEventToMonitoringString(EventsKitEventMetadata emd)
		{
			this.EmitSuppressMessage("CA1305");
			this.EmitLine("public override String ToMonitoringString()");
			this.GenericWriteEventToMonitoringString(emd, new Func<ParameterMetadata, string>(EventsKitCodeGenerator.ParameterToMonitoringString));
		}

		// Token: 0x06001876 RID: 6262 RVA: 0x0005B654 File Offset: 0x00059854
		private void GenericWriteEventToMonitoringString(EventsKitEventMetadata emd, Func<ParameterMetadata, string> toString)
		{
			using (this.m_scope.NewScope())
			{
				this.Emit("return string.Format(CultureInfo.CurrentCulture, \"{0}\"", new object[] { EventsKitCodeGenerator.GetEventFormattingString(emd, EventsKitCodeGenerator.c_defaultWireFields.Count<VariableMetadata>()) });
				IEnumerable<VariableMetadata> enumerable = EventsKitCodeGenerator.c_defaultWireFields;
				string text = " ,";
				string text2 = "{0}";
				string text3 = "";
				Func<VariableMetadata, string>[] array = new Func<VariableMetadata, string>[1];
				array[0] = (VariableMetadata w) => w.Name;
				this.EmitCollection<VariableMetadata>(enumerable, text, text2, text3, array);
				ReadOnlyCollection<ParameterMetadata> parameters = emd.Parameters;
				if (parameters.Count > 0)
				{
					this.EmitCollection<ParameterMetadata>(parameters, ", ", "{0}", "", new Func<ParameterMetadata, string>[] { toString });
				}
				this.Emit(");", new object[0]);
			}
		}

		// Token: 0x06001877 RID: 6263 RVA: 0x0005B730 File Offset: 0x00059930
		private static string GetEventFormattingString(EventsKitEventMetadata emd, int offset)
		{
			if (!string.IsNullOrEmpty(emd.Format))
			{
				return EventsKitCodeGenerator.FixupEventFormatString(emd.Format, offset);
			}
			return EventsKitCodeGenerator.GetDefaultEventFormatString(emd, offset);
		}

		// Token: 0x06001878 RID: 6264 RVA: 0x0005B754 File Offset: 0x00059954
		private static string FixupEventFormatString(string format, int offset)
		{
			return EventsKitCodeGenerator.s_formatParameter.Replace(format, delegate(Match m)
			{
				int num = int.Parse(m.Groups[1].Value);
				return "{{{0}}}".FormatWithInvariantCulture(new object[] { num + offset });
			});
		}

		// Token: 0x06001879 RID: 6265 RVA: 0x0005B788 File Offset: 0x00059988
		private static string GetDefaultEventFormatString(EventsKitEventMetadata emd, int payloadOffset)
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendFormat(CultureInfo.InvariantCulture, "ElementId={{{0}}}, ActivityId={{{1}}}, ActivityType={{{2}}}, RootActivityId={{{3}}}, ClientActivityId={{{4}}}", new object[] { 0, 1, 2, 3, 4 });
			for (int i = 0; i < emd.Parameters.Count; i++)
			{
				stringBuilder.AppendFormat(", {0}={{{1}}}", emd.Parameters[i].Property.Name, payloadOffset + i);
			}
			return stringBuilder.ToString();
		}

		// Token: 0x0600187A RID: 6266 RVA: 0x0005B825 File Offset: 0x00059A25
		private static string ParameterToMonitoringString(ParameterMetadata parameter)
		{
			if (typeof(IMonitoredError).IsAssignableFrom(parameter.VariableMetadataType))
			{
				return parameter.Property.Name + ".InnerMessage()";
			}
			return EventsKitCodeGenerator.ParameterToString(parameter);
		}

		// Token: 0x0600187B RID: 6267 RVA: 0x0005B85A File Offset: 0x00059A5A
		private static string ParameterToString(ParameterMetadata parameter)
		{
			return "((object){0}) != null ? {0}.ToString() : \"[null]\"".FormatWithInvariantCulture(new object[] { parameter.Property.Name });
		}

		// Token: 0x0600187C RID: 6268 RVA: 0x0005B87C File Offset: 0x00059A7C
		private void WriteEventMetadata(EventsKitEventMetadata emd)
		{
			string text = (emd.IsVisible ? "public" : "internal");
			this.EmitLine("{0} static EventMetadata Metadata", new object[] { text });
			using (this.m_scope.NewScope())
			{
				this.EmitLine("get { return sm_md; }");
			}
		}

		// Token: 0x0600187D RID: 6269 RVA: 0x0005B8E8 File Offset: 0x00059AE8
		private void WriteEventToInvariantCultureString(EventsKitEventMetadata emd)
		{
			this.EmitLine();
			this.WriteEventToInvairiantCultureString(emd);
			this.EmitLine();
		}

		// Token: 0x0600187E RID: 6270 RVA: 0x0005B900 File Offset: 0x00059B00
		private void WriteEventsKitMockClass()
		{
			this.EmitLine("[Serializable]");
			this.EmitLine("[EventsKitImplementation(typeof({0}), EventsKitType = EventsKitType.Mock)]", new object[] { this.m_eventsKitMetadata.EventsKitType.FullName });
			this.EmitLine("internal sealed class {0}Mock : EventsKitBase, {1}", new object[]
			{
				this.m_eventsKitMetadata.ClassName,
				this.m_eventsKitMetadata.EventsKitType.FullName
			});
			using (this.m_scope.NewScope())
			{
				this.EmitSuppressMessage("CA1811");
				this.EmitLine("private {0}Mock(ElementId elementId, ActivityType activityType, IPackageManager packageManager, String pcInstanceName, IEventingServer eventingServer, String eventLogSourceName)", new object[] { this.m_eventsKitMetadata.ClassName });
				this.EmitLine(this.m_tab + ": base(elementId, activityType, pcInstanceName, eventingServer)");
				using (this.m_scope.NewScope())
				{
				}
				this.EmitLine();
				foreach (IEventMetadata eventMetadata in this.m_eventsKitMetadata.Events)
				{
					EventsKitEventMetadata eventsKitEventMetadata = (EventsKitEventMetadata)eventMetadata;
					this.Emit("public void {0}", new object[] { eventsKitEventMetadata.Name });
					IEnumerable<ParameterMetadata> parameters = eventsKitEventMetadata.Parameters;
					string text = "(";
					string text2 = "{0} {1}";
					string text3 = ")\r\n";
					Func<ParameterMetadata, string>[] array = new Func<ParameterMetadata, string>[2];
					array[0] = (ParameterMetadata p) => p.TypeNameInDeclaration;
					array[1] = (ParameterMetadata p) => p.Name;
					this.EmitCollection<ParameterMetadata>(parameters, text, text2, text3, array);
					using (this.m_scope.NewScope())
					{
						this.EmitComment("This is Mock", new object[0]);
						if (eventsKitEventMetadata.IsTrace)
						{
							this.WriteTrace(eventsKitEventMetadata, "EventMock:");
						}
					}
					this.EmitLine();
				}
			}
			this.EmitLine();
		}

		// Token: 0x0600187F RID: 6271 RVA: 0x0005BB48 File Offset: 0x00059D48
		private void WriteEventsKitInProcClass()
		{
			this.EmitLine("[EventsKitImplementation(typeof({0}), EventsKitType = EventsKitType.InProc)]", new object[] { this.m_eventsKitMetadata.EventsKitType.FullName });
			this.EmitLine("internal sealed class InMemory{0} : {1}", new object[]
			{
				this.m_eventsKitMetadata.ClassName,
				this.m_eventsKitMetadata.EventsKitType.FullName
			});
			using (this.m_scope.NewScope())
			{
				bool flag = this.m_eventsKitMetadata.Events.Any((IEventMetadata emd) => emd.IsPublishedEvent);
				if (flag)
				{
					this.EmitLine("private IEventsPublisher m_eventsPublisher;");
					this.EmitLine();
				}
				this.EmitSuppressMessage("CA1811");
				this.EmitLine("private InMemory{0}(IEventsPublisher eventsPublisher)", new object[] { this.m_eventsKitMetadata.ClassName });
				using (this.m_scope.NewScope())
				{
					if (flag)
					{
						this.EmitLine("m_eventsPublisher = eventsPublisher;");
					}
				}
				this.EmitLine("");
				foreach (IEventMetadata eventMetadata in this.m_eventsKitMetadata.Events)
				{
					EventsKitEventMetadata eventsKitEventMetadata = (EventsKitEventMetadata)eventMetadata;
					this.Emit("public void {0}", new object[] { eventsKitEventMetadata.Name });
					IEnumerable<ParameterMetadata> parameters = eventsKitEventMetadata.Parameters;
					string text = "(";
					string text2 = "{0} {1}";
					string text3 = ")\r\n";
					Func<ParameterMetadata, string>[] array = new Func<ParameterMetadata, string>[2];
					array[0] = (ParameterMetadata p) => p.TypeNameInDeclaration;
					array[1] = (ParameterMetadata p) => p.Name;
					this.EmitCollection<ParameterMetadata>(parameters, text, text2, text3, array);
					using (this.m_scope.NewScope())
					{
						if (eventsKitEventMetadata.IsPublishedEvent)
						{
							if (eventsKitEventMetadata.IsTrace)
							{
								this.WriteTrace(eventsKitEventMetadata, "In memory event:");
							}
							this.WriteEventObject(eventsKitEventMetadata, "ElementId.None");
							this.EmitLine();
							this.EmitLine("m_eventsPublisher.PublishEvent(e);");
						}
					}
					this.EmitLine();
				}
			}
		}

		// Token: 0x1700034F RID: 847
		// (get) Token: 0x06001880 RID: 6272 RVA: 0x0005BDDC File Offset: 0x00059FDC
		private string[] UsingsArray
		{
			get
			{
				string[] array = new string[]
				{
					"System", "System.Collections.Generic", "System.ComponentModel", "System.Diagnostics.PerformanceData", "System.Text", "System.Runtime.InteropServices", "System.Diagnostics", "System.Globalization", "System.Resources", "Microsoft.Cloud.Platform.Utils",
					"Microsoft.Cloud.Platform.Modularization", "Microsoft.Cloud.Platform.Eventing.Base", "Microsoft.Cloud.Platform.Eventing.Etw", "Microsoft.Cloud.Platform.Eventing", "Microsoft.Cloud.Platform.Common", "Microsoft.Cloud.Platform.EventsKit"
				};
				if (this.m_emitEtwEvents)
				{
					return array.Concat(new string[] { "Microsoft.Diagnostics.Tracing" }).ToArray<string>();
				}
				return array;
			}
		}

		// Token: 0x17000350 RID: 848
		// (get) Token: 0x06001881 RID: 6273 RVA: 0x0005BE9B File Offset: 0x0005A09B
		private static int[] WarningsArray
		{
			get
			{
				return new int[] { 3003, 3001, 1591 };
			}
		}

		// Token: 0x06001882 RID: 6274 RVA: 0x0005BEAE File Offset: 0x0005A0AE
		[StringFormatMethod("format")]
		private void EmitNoPrefix([NotNull] string format, params object[] args)
		{
			this.m_stringBuilder.Append(format, args);
		}

		// Token: 0x06001883 RID: 6275 RVA: 0x0005BEBD File Offset: 0x0005A0BD
		[StringFormatMethod("format")]
		private void Emit([NotNull] string format, params object[] args)
		{
			this.m_stringBuilder.AppendWithPrefix(format, args);
		}

		// Token: 0x06001884 RID: 6276 RVA: 0x0005BECC File Offset: 0x0005A0CC
		private void EmitLine()
		{
			this.m_stringBuilder.AppendLine();
		}

		// Token: 0x06001885 RID: 6277 RVA: 0x0005BED9 File Offset: 0x0005A0D9
		[StringFormatMethod("format")]
		private void EmitLine([NotNull] string format, params object[] args)
		{
			this.m_stringBuilder.AppendLine(format, args);
		}

		// Token: 0x06001886 RID: 6278 RVA: 0x0005BEE8 File Offset: 0x0005A0E8
		private void EmitLine(string format)
		{
			this.m_stringBuilder.AppendLine(format);
		}

		// Token: 0x06001887 RID: 6279 RVA: 0x0005BEF8 File Offset: 0x0005A0F8
		private void EmitTryCatchClause(Action inTry, IEnumerable<EventsKitCodeGenerator.CatchClause> catches)
		{
			string text = "genEx";
			this.Emit("try", new object[0]);
			this.EmitLine();
			using (this.m_scope.NewScope())
			{
				inTry();
			}
			foreach (EventsKitCodeGenerator.CatchClause catchClause in catches)
			{
				this.Emit("catch({0} {1})".FormatWithInvariantCulture(new object[] { catchClause.ExceptionName, text }), new object[0]);
				this.EmitLine();
				using (this.m_scope.NewScope())
				{
					catchClause.HandleAction(text);
				}
			}
		}

		// Token: 0x06001888 RID: 6280 RVA: 0x0005BFE0 File Offset: 0x0005A1E0
		private void EmitComment(string format, params object[] arg)
		{
			this.EmitLine("// " + format, arg);
		}

		// Token: 0x06001889 RID: 6281 RVA: 0x0005BFF4 File Offset: 0x0005A1F4
		private void EmitSuppressMessage(string category, string checkId, string justification)
		{
			this.EmitLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"{0}\", \"{1}\", Justification = \"{2}\")]", new object[] { category, checkId, justification });
		}

		// Token: 0x0600188A RID: 6282 RVA: 0x0005C014 File Offset: 0x0005A214
		private void EmitSuppressMessage(string warning)
		{
			string text = warning.ToUpperInvariant();
			uint num = <PrivateImplementationDetails>.ComputeStringHash(text);
			if (num <= 2634297570U)
			{
				if (num != 1331134851U)
				{
					if (num != 1398245327U)
					{
						if (num != 2634297570U)
						{
							return;
						}
						if (!(text == "CA1305"))
						{
							return;
						}
						this.EmitSuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", "Events parameter type does not always support format provider. Approved");
						return;
					}
					else
					{
						if (!(text == "CA1034"))
						{
							return;
						}
						this.EmitSuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible", "Nesting conveys information (package owns event) in this case. Approved");
						return;
					}
				}
				else
				{
					if (!(text == "CA1030"))
					{
						return;
					}
					this.EmitSuppressMessage("Microsoft.Design", "CA1030:UseEventsWhereAppropriate", "CLR events are irrelevant here. Approved");
					return;
				}
			}
			else if (num <= 3928964038U)
			{
				if (num != 3466547984U)
				{
					if (num != 3928964038U)
					{
						return;
					}
					if (!(text == "CA1811"))
					{
						return;
					}
					this.EmitSuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", "Class is instantiated dynamically.Approved");
					return;
				}
				else
				{
					if (!(text == "CA1707"))
					{
						return;
					}
					this.EmitSuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores", "Underscores increase redability in generated code. Approved");
					return;
				}
			}
			else if (num != 3996074514U)
			{
				if (num != 4029776847U)
				{
					return;
				}
				if (!(text == "CA1823"))
				{
					return;
				}
				this.EmitSuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields", "Some event kits may not fire any events; therefore do not use package");
				return;
			}
			else
			{
				if (!(text == "CA1815"))
				{
					return;
				}
				this.EmitSuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes", "Bitwise equality is correct. Approved");
				return;
			}
		}

		// Token: 0x0600188B RID: 6283 RVA: 0x0005C17C File Offset: 0x0005A37C
		private static string VariableStringFormatter(VariableMetadata variable)
		{
			string text;
			if (typeof(MonitoredException).IsAssignableFrom(variable.VariableMetadataType))
			{
				text = "{0} == null ? string.Empty : {0}.Message";
			}
			else if (variable.VariableMetadataType.Equals(typeof(IMonitoredError)) || variable.VariableMetadataType.GetInterface(typeof(IMonitoredError).FullName) != null)
			{
				text = "{0} == null ? string.Empty : {0}.ErrorShortName";
			}
			else
			{
				text = "{0}";
			}
			return string.Format(CultureInfo.CurrentCulture, text, new object[] { variable.Name });
		}

		// Token: 0x0600188C RID: 6284 RVA: 0x0005C20C File Offset: 0x0005A40C
		private void EmitCollection<T>(IEnumerable<T> collection, string prefix, string format, string suffix, params Func<T, string>[] argsLambda)
		{
			this.m_stringBuilder.Append(prefix);
			IList<T> list = new List<T>(collection);
			for (int i = 0; i < list.Count; i++)
			{
				this.m_stringBuilder.Append(format, EventsKitCodeGenerator.ApplyLambdas<T>(argsLambda, list[i]));
				if (i != list.Count - 1)
				{
					this.m_stringBuilder.Append(", ");
				}
			}
			this.m_stringBuilder.Append(suffix);
		}

		// Token: 0x0600188D RID: 6285 RVA: 0x0005C280 File Offset: 0x0005A480
		private static object[] ApplyLambdas<T>(Func<T, string>[] argsLambda, T parameter)
		{
			object[] array = new object[argsLambda.Length];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = argsLambda[i](parameter);
			}
			return array;
		}

		// Token: 0x0600188E RID: 6286 RVA: 0x0005C2B4 File Offset: 0x0005A4B4
		private global::System.Diagnostics.PerformanceData.CounterType ConvertToV2CounterType(PerformanceCounterType counterType)
		{
			if (counterType <= PerformanceCounterType.CountPerTimeInterval64)
			{
				if (counterType == PerformanceCounterType.NumberOfItems64)
				{
					return global::System.Diagnostics.PerformanceData.CounterType.RawData64;
				}
				if (counterType == PerformanceCounterType.CounterDelta64)
				{
					return global::System.Diagnostics.PerformanceData.CounterType.Delta64;
				}
				if (counterType == PerformanceCounterType.CountPerTimeInterval64)
				{
					return global::System.Diagnostics.PerformanceData.CounterType.LargeQueueLength;
				}
			}
			else
			{
				if (counterType == PerformanceCounterType.RateOfCountsPerSecond64)
				{
					return global::System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64;
				}
				if (counterType == PerformanceCounterType.AverageCount64)
				{
					return global::System.Diagnostics.PerformanceData.CounterType.AverageCount64;
				}
				if (counterType == PerformanceCounterType.AverageBase)
				{
					return global::System.Diagnostics.PerformanceData.CounterType.AverageBase;
				}
			}
			return (global::System.Diagnostics.PerformanceData.CounterType)Enum.Parse(typeof(global::System.Diagnostics.PerformanceData.CounterType), counterType.ToString());
		}

		// Token: 0x04000877 RID: 2167
		private bool m_emitPerformanceCounters;

		// Token: 0x04000878 RID: 2168
		private bool m_emitWindowsEventLogEvents;

		// Token: 0x04000879 RID: 2169
		private bool m_emitEventingServerEvents;

		// Token: 0x0400087A RID: 2170
		private bool m_emitEtwEvents;

		// Token: 0x0400087B RID: 2171
		private EventsKitMetadata m_eventsKitMetadata;

		// Token: 0x0400087C RID: 2172
		private ExtendedStringBuilder m_stringBuilder;

		// Token: 0x0400087D RID: 2173
		private EventsKitCodeGenerator.Scope m_scope;

		// Token: 0x0400087E RID: 2174
		private string m_eventSourceClassName;

		// Token: 0x0400087F RID: 2175
		private VariableMetadata m_performanceCountersCounterSet;

		// Token: 0x04000880 RID: 2176
		private VariableMetadata m_performanceCounterCounterSetInstance;

		// Token: 0x04000881 RID: 2177
		private readonly string m_tab = new string(' ', 4);

		// Token: 0x04000882 RID: 2178
		private static readonly Regex s_formatParameter = new Regex("{(\\d+)}", RegexOptions.Compiled);

		// Token: 0x04000883 RID: 2179
		private static List<VariableMetadata> s_eventSourceCommonHeaders = new List<VariableMetadata>
		{
			new VariableMetadata(typeof(string), "generatedElementId"),
			new VariableMetadata(typeof(Guid), "generatedActivityId"),
			new VariableMetadata(typeof(string), "generatedActivityType"),
			new VariableMetadata(typeof(Guid), "generatedRootActivityId"),
			new VariableMetadata(typeof(string), "generatedClientActivityId"),
			new VariableMetadata(typeof(long), "generatedEventsKitId")
		};

		// Token: 0x04000884 RID: 2180
		private static readonly VariableMetadata c_elementIdVariableMetadata = new VariableMetadata(typeof(string), "m_elementId");

		// Token: 0x04000885 RID: 2181
		private static readonly VariableMetadata c_activityIdVariableMetadata = new VariableMetadata(typeof(Guid), "m_activityId");

		// Token: 0x04000886 RID: 2182
		private static readonly VariableMetadata c_activityTypeVariableMetadata = new VariableMetadata(typeof(ActivityType), "m_activityType");

		// Token: 0x04000887 RID: 2183
		private static readonly VariableMetadata c_rootActivityIdVariableMetadata = new VariableMetadata(typeof(Guid), "m_rootActivityId");

		// Token: 0x04000888 RID: 2184
		private static readonly VariableMetadata c_clientActivityIdVariableMetadata = new VariableMetadata(typeof(string), "m_clientActivityId");

		// Token: 0x04000889 RID: 2185
		private static readonly VariableMetadata c_eventParametersVariableMetadata = new VariableMetadata(typeof(List<EventParameter>), "List<EventParameter>", "m_eventParameters");

		// Token: 0x0400088A RID: 2186
		internal static readonly IEnumerable<VariableMetadata> c_defaultWireFields = new VariableMetadata[]
		{
			EventsKitCodeGenerator.c_elementIdVariableMetadata,
			EventsKitCodeGenerator.c_activityIdVariableMetadata,
			EventsKitCodeGenerator.c_activityTypeVariableMetadata,
			EventsKitCodeGenerator.c_rootActivityIdVariableMetadata,
			EventsKitCodeGenerator.c_clientActivityIdVariableMetadata
		};

		// Token: 0x02000792 RID: 1938
		private class Scope : IDisposable
		{
			// Token: 0x060030C2 RID: 12482 RVA: 0x000A6BF2 File Offset: 0x000A4DF2
			public Scope(EventsKitCodeGenerator ekw)
			{
				this.m_ekw = ekw;
			}

			// Token: 0x060030C3 RID: 12483 RVA: 0x000A6C01 File Offset: 0x000A4E01
			public EventsKitCodeGenerator.Scope NewScope()
			{
				this.m_ekw.m_stringBuilder.AppendTabToPrefix(true);
				return this;
			}

			// Token: 0x060030C4 RID: 12484 RVA: 0x000A6C15 File Offset: 0x000A4E15
			public void Dispose()
			{
				this.m_ekw.m_stringBuilder.RemoveTabFromPrefix(true);
			}

			// Token: 0x0400164F RID: 5711
			private readonly EventsKitCodeGenerator m_ekw;
		}

		// Token: 0x02000793 RID: 1939
		private class CatchClause
		{
			// Token: 0x1700075F RID: 1887
			// (get) Token: 0x060030C5 RID: 12485 RVA: 0x000A6C28 File Offset: 0x000A4E28
			// (set) Token: 0x060030C6 RID: 12486 RVA: 0x000A6C30 File Offset: 0x000A4E30
			public string ExceptionName { get; private set; }

			// Token: 0x17000760 RID: 1888
			// (get) Token: 0x060030C7 RID: 12487 RVA: 0x000A6C39 File Offset: 0x000A4E39
			// (set) Token: 0x060030C8 RID: 12488 RVA: 0x000A6C41 File Offset: 0x000A4E41
			public Action<string> HandleAction { get; private set; }

			// Token: 0x060030C9 RID: 12489 RVA: 0x000A6C4A File Offset: 0x000A4E4A
			public CatchClause(string exception, Action<string> action)
			{
				this.ExceptionName = exception;
				this.HandleAction = action;
			}
		}
	}
}
