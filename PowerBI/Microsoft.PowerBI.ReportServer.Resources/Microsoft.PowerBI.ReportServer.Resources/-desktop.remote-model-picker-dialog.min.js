"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "remote-model-picker-dialog" ], {
    43915: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            RemoteModelPickerDialogModule: function() {
                return RemoteModelPickerDialogModule;
            }
        });
        var remote_model_picker_dialog_identifier = __webpack_require__(28655), tslib_es6 = __webpack_require__(81337), BehaviorSubject = __webpack_require__(35510), combineLatest = __webpack_require__(59017), of = __webpack_require__(11547), map = __webpack_require__(14172), template_dialog_payload_service = __webpack_require__(67489), index_core = __webpack_require__(73471), tri_dropdown = __webpack_require__(44913), core = __webpack_require__(50423), host_interop_registry_service = __webpack_require__(39119), common = __webpack_require__(77476), template_dialog_component = __webpack_require__(96777), fesm2022_forms = __webpack_require__(17174), localize_directive = __webpack_require__(59968), localize_attr_directive = __webpack_require__(22844), pbi_tooltip_directive = __webpack_require__(36858), tri_dropdown_component = __webpack_require__(20551), tri_dropdown_item_component = __webpack_require__(64716), tri_dropdown_item_menu_directive = __webpack_require__(85721), tri_radio_button_component = __webpack_require__(37350), tri_radio_group_component = __webpack_require__(89330), tri_search_box_component = __webpack_require__(89237), tri_spinner_component = __webpack_require__(54729), tri_svg_icon_component = __webpack_require__(74913), localize_pipe = __webpack_require__(85102);
        function RemoteModelPickerDialogComponent_tri_dropdown_item_9_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-item", 13), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var workspace_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", workspace_r5), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", workspace_r5.displayName, " ");
            }
        }
        function RemoteModelPickerDialogComponent_tri_dropdown_23_tri_dropdown_item_7_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-item", 16), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var dataset_r7 = ctx.$implicit, ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("pbiTooltip", ctx_r6.getModelTooltip(dataset_r7))("value", dataset_r7), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"]("", dataset_r7.name, " ");
            }
        }
        function RemoteModelPickerDialogComponent_tri_dropdown_23_Template(rf, ctx) {
            if (1 & rf) {
                var _r9 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "tri-dropdown", 14), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r9);
                    var ctx_r8 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r8.currentDatasetSelection = $event);
                })("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r9);
                    var ctx_r10 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r10.onDatasetSelected($event));
                }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275elementStart"](2, "tri-dropdown-trigger"), 
                core["\u0275\u0275text"](3), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "tri-search-box", 3), 
                core["\u0275\u0275listener"]("value", function($event) {
                    core["\u0275\u0275restoreView"](_r9);
                    var ctx_r11 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r11.onModelSearch($event));
                }), core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275pipe"](6, "localize"), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](7, RemoteModelPickerDialogComponent_tri_dropdown_23_tri_dropdown_item_7_Template, 2, 3, "tri-dropdown-item", 15), 
                core["\u0275\u0275pipe"](8, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("disabled", !ctx_r1.currentWorkspaceSelection)("value", ctx_r1.currentDatasetSelection)("options", ctx_r1.dropdownOptions)("placeholder", core["\u0275\u0275pipeBind1"](1, 9, "Select_Model_Placeholder")), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate1"](" ", null == ctx_r1.currentDatasetSelection ? null : ctx_r1.currentDatasetSelection.name, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("placeholderText", core["\u0275\u0275pipeBind1"](5, 11, "SearchBox_Text"))("disableTabIndex", !0), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](6, 13, "SearchBox_Text")), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](8, 15, ctx_r1.filteredModels$));
            }
        }
        var _c0 = function() {
            return {
                "aria-label": "Create_Model_NamePlaceholder"
            };
        };
        function RemoteModelPickerDialogComponent_ng_template_24_Template(rf, ctx) {
            if (1 & rf) {
                var _r13 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 17)(1, "input", 18), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r13);
                    var ctx_r12 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r12.onDatasetInputChanged($event));
                }), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](2, 4, "Create_Model_NamePlaceholder"))("localizeAttr", core["\u0275\u0275pureFunction0"](6, _c0))("disabled", !ctx_r3.currentWorkspaceSelection)("ngModel", ctx_r3.datasetName);
            }
        }
        function RemoteModelPickerDialogComponent_div_26_tri_svg_icon_3_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "tri-svg-icon", 24), 2 & rf) {
                var ctx_r14 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("name", ctx_r14.messageIconName), core["\u0275\u0275attribute"]("aria-hidden", !0);
            }
        }
        function RemoteModelPickerDialogComponent_div_26_ng_template_4_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "tri-spinner", 25), 2 & rf && core["\u0275\u0275attribute"]("aria-hidden", !0);
        }
        function RemoteModelPickerDialogComponent_div_26_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 19)(1, "div", 20), core["\u0275\u0275pipe"](2, "localize"), 
            core["\u0275\u0275template"](3, RemoteModelPickerDialogComponent_div_26_tri_svg_icon_3_Template, 1, 2, "tri-svg-icon", 21), 
            core["\u0275\u0275template"](4, RemoteModelPickerDialogComponent_div_26_ng_template_4_Template, 1, 1, "ng-template", null, 22, core["\u0275\u0275templateRefExtractor"]), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](6, "span", 23), 
            core["\u0275\u0275text"](7), core["\u0275\u0275pipe"](8, "localize"), core["\u0275\u0275elementEnd"]()()), 
            2 & rf) {
                var _r15 = core["\u0275\u0275reference"](5), ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", ctx_r4.messageClass), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](2, 5, ctx_r4.messageIconLabel)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r4.messageType !== ctx_r4.NotificationType.Loading)("ngIfElse", _r15), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](8, 7, ctx_r4.message));
            }
        }
        var ModelSelectionOption = function(ModelSelectionOption) {
            return ModelSelectionOption[ModelSelectionOption.Existing = 0] = "Existing", ModelSelectionOption[ModelSelectionOption.New = 1] = "New", 
            ModelSelectionOption;
        }({}), RemoteModelPickerDialogComponent = function() {
            function RemoteModelPickerDialogComponent(templateDialogPayload, hostInteropRegistry) {
                var _this = this;
                this.templateDialogPayload = templateDialogPayload, this.hostInteropRegistry = hostInteropRegistry, 
                this.ModelSelectionOption = ModelSelectionOption, this.NotificationType = index_core.k$, 
                this.disableExistingDatasetOption = !1, this.showMessage = !1, this.maxItems = 6, 
                this.dropdownOptions = {
                    dropdownMaxHeight: (0, tri_dropdown.Vh)({
                        totalItems: this.maxItems,
                        hasSearchBox: !0
                    }),
                    dropdownMinHeight: (0, tri_dropdown.Vh)({
                        hasSearchBox: !0
                    })
                }, this.searchWorkspaceText = new BehaviorSubject.X(""), this.searchModelText = new BehaviorSubject.X(""), 
                this.skipModelMetadataConflictCheck = !1, this.templateDialogPayload.onOkButtonClick = function() {
                    return _this.onOkButtonClick();
                }, this.templateDialogPayload.onCancelButtonClick = function() {
                    return Promise.resolve(void 0);
                }, this.hostService = this.hostInteropRegistry.getHostService("remoteModelPickerDialogDesktopHostService");
            }
            return RemoteModelPickerDialogComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var input, workspace, dataset, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return input = this.templateDialogPayload.input, this.templateDialogPayload.setOkButtonState(!0), 
                            this.workspaces = input.workspaces.sort(function(a, b) {
                                return a.displayName.localeCompare(b.displayName);
                            }), this.modelOptionSelection = ModelSelectionOption.New, input.existingWorkspaceName ? (workspace = this.workspaces.find(function(w) {
                                return w.displayName === input.existingWorkspaceName;
                            })) ? [ 4, this.onWorkspaceSelected(workspace) ] : [ 2 ] : [ 3, 2 ];

                          case 1:
                            if (_a.sent(), input.existingDatasetName) {
                                if (!(dataset = this.datasets.find(function(d) {
                                    return d.name === input.existingDatasetName;
                                }))) return [ 2 ];
                                this.onModelOptionSelectionChanged(ModelSelectionOption.Existing), this.onDatasetSelected(dataset);
                            }
                            _a.label = 2;

                          case 2:
                            return this.filteredWorkspaces$ = (0, combineLatest.aj)([ this.searchWorkspaceText, (0, 
                            of.of)(this.workspaces) ]).pipe((0, map.U)(function(_a) {
                                var searchText = _a[0];
                                return _a[1].filter(function(workspace) {
                                    return workspace.displayName.toLocaleLowerCase().includes(searchText.toLocaleLowerCase());
                                });
                            })), this.filteredModels$ = (0, combineLatest.aj)([ this.searchModelText ]).pipe((0, 
                            map.U)(function(_a) {
                                var _b, searchText = _a[0];
                                return null === (_b = _this.datasets) || void 0 === _b ? void 0 : _b.filter(function(dataset) {
                                    return dataset.name.toLocaleLowerCase().includes(searchText.toLocaleLowerCase());
                                });
                            })), [ 2 ];
                        }
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.onWorkspaceSelected = function(workspace) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var datasetsInCurrentWorkspace;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.disableExistingDatasetOption = !1, this.showMessage = !1, this.skipModelMetadataConflictCheck = !1, 
                            this.modelOptionSelection = ModelSelectionOption.New, this.currentWorkspaceSelection = workspace, 
                            this.currentDatasetSelection = void 0, [ 4, this.getModelsDropdownItem(workspace.workspaceObjectId) ];

                          case 1:
                            return datasetsInCurrentWorkspace = _a.sent(), this.datasets = datasetsInCurrentWorkspace.sort(function(a, b) {
                                return a.name.localeCompare(b.name);
                            }), _.isEmpty(this.datasets) && (this.disableExistingDatasetOption = !0, this.modelOptionSelection = ModelSelectionOption.New, 
                            this.templateDialogPayload.setOkButtonState(_.isEmpty(this.datasetName))), [ 2 ];
                        }
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.onDatasetSelected = function(dataset) {
                this.currentDatasetSelection = dataset, this.templateDialogPayload.setOkButtonState(!1), 
                this.showMessage = !1, this.skipModelMetadataConflictCheck = !1;
            }, RemoteModelPickerDialogComponent.prototype.onDatasetInputChanged = function(newName) {
                this.datasetName = newName, this.templateDialogPayload.setOkButtonState(_.isEmpty(this.datasetName)), 
                this.showMessage = !1, this.skipModelMetadataConflictCheck = !1;
            }, RemoteModelPickerDialogComponent.prototype.onModelOptionSelectionChanged = function(newOption) {
                this.modelOptionSelection = newOption, this.showMessage = !1, this.skipModelMetadataConflictCheck = !1, 
                this.templateDialogPayload.setOkButtonState(this.modelOptionSelection === ModelSelectionOption.Existing && !this.currentDatasetSelection || this.modelOptionSelection === ModelSelectionOption.New && _.isEmpty(this.datasetName));
            }, RemoteModelPickerDialogComponent.prototype.getModelTooltip = function(dataset) {
                var _a;
                return "Refreshed ".concat(dataset.lastRefreshTime, ", Sensitivity ").concat(null === (_a = dataset.artifactInformationProtection) || void 0 === _a ? void 0 : _a.name);
            }, RemoteModelPickerDialogComponent.prototype.onWorkspaceSearch = function(searchText) {
                this.searchWorkspaceText.next(searchText);
            }, RemoteModelPickerDialogComponent.prototype.onModelSearch = function(searchText) {
                this.searchModelText.next(searchText);
            }, RemoteModelPickerDialogComponent.prototype.onOkButtonClick = function() {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var datasetName, workspaceObjectId, _c;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return this.templateDialogPayload.setOkButtonState(!0), datasetName = this.modelOptionSelection === ModelSelectionOption.Existing ? null === (_a = this.currentDatasetSelection) || void 0 === _a ? void 0 : _a.name : this.datasetName, 
                            workspaceObjectId = this.currentWorkspaceSelection.workspaceObjectId, [ 4, this.validateCapacity(this.currentWorkspaceSelection.capacityObjectId) ];

                          case 1:
                            return (_c = _d.sent()) ? [ 4, this.validateDataset(datasetName, workspaceObjectId) ] : [ 3, 3 ];

                          case 2:
                            _c = _d.sent(), _d.label = 3;

                          case 3:
                            return _c ? (this.templateDialogPayload.closeDialogFromConsumer({
                                workspaceObjectId,
                                datasetName,
                                datasetObjectId: this.modelOptionSelection === ModelSelectionOption.Existing ? null === (_b = this.currentDatasetSelection) || void 0 === _b ? void 0 : _b.property : void 0
                            }), [ 2, !0 ]) : [ 2 ];
                        }
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.getModelsDropdownItem = function(workspaceObjectId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, _b;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return _b = (_a = _).map, [ 4, this.getModels(workspaceObjectId) ];

                          case 1:
                            return [ 2, _b.apply(_a, [ _c.sent(), function(m) {
                                return {
                                    name: m.displayName,
                                    property: m.dbName
                                };
                            } ]) ];
                        }
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.validateDataset = function(datasetName, workspaceObjectId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.displayMessage(index_core.k$.Loading, "Checking_Model"), [ 4, this.validateDatasetName(datasetName, workspaceObjectId) ];

                          case 1:
                            return _b.sent() ? (_a = !this.skipModelMetadataConflictCheck) ? [ 4, this.validateModelMetadata(datasetName, workspaceObjectId) ] : [ 3, 3 ] : (this.templateDialogPayload.setOkButtonState(!0), 
                            this.displayMessage(index_core.k$.Error, "Name_ExistingName_Error"), [ 2, !1 ]);

                          case 2:
                            _a = !_b.sent(), _b.label = 3;

                          case 3:
                            return _a ? (this.displayMessage(index_core.k$.Warning, "Model_Metadata_Conflict_Message"), 
                            this.skipModelMetadataConflictCheck = !0, [ 2, !1 ]) : (this.showMessage = !1, [ 2, !0 ]);
                        }
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.validateDatasetName = function(datasetName, workspaceObjectId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var models;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.modelOptionSelection === ModelSelectionOption.Existing ? [ 2, !0 ] : [ 4, this.getModels(workspaceObjectId) ];

                          case 1:
                            return models = _a.sent(), [ 2, !_.some(models, function(m) {
                                return m.displayName === datasetName;
                            }) ];
                        }
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.validateModelMetadata = function(datasetName, workspaceObjectId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, !0 ];
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.validateCapacity = function(capacityObjectId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.displayMessage(index_core.k$.Loading, "Checking_Workspace"), [ 4, this.hostService.validateWorkspaceXMLAEndpointSettings(capacityObjectId) ];

                          case 1:
                            return _a.sent() ? (this.showMessage = !1, [ 2, !0 ]) : (this.displayMessage(index_core.k$.Error, "XMLA_Not_Enabled"), 
                            this.templateDialogPayload.setOkButtonState(!0), [ 2, !1 ]);
                        }
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.getModels = function(workspaceObjectId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.hostService.getModels(workspaceObjectId) ];
                    });
                });
            }, RemoteModelPickerDialogComponent.prototype.displayMessage = function(messageType, message) {
                switch (this.showMessage = !0, this.message = message, this.messageType = messageType, 
                messageType) {
                  case index_core.k$.Warning:
                    this.messageIconName = "warning_12_filled", this.messageClass = "message-warning", 
                    this.messageIconLabel = "Warning_Icon";
                    break;

                  case index_core.k$.Loading:
                    this.messageIconLabel = "Loading_Icon";
                    break;

                  case index_core.k$.Error:
                    this.messageIconName = "error_circle_12_filled", this.messageClass = "message-error", 
                    this.messageIconLabel = "Error_Icon";
                    break;

                  default:
                    this.messageIconName = "info_12_filled", this.messageClass = "message-info", this.messageIconLabel = "Info_Icon";
                }
            }, RemoteModelPickerDialogComponent.\u0275fac = function(t) {
                return new (t || RemoteModelPickerDialogComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](host_interop_registry_service.j));
            }, RemoteModelPickerDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: RemoteModelPickerDialogComponent,
                selectors: [ [ "remote-model-picker-dialog" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 27,
                vars: 42,
                consts: [ [ 1, "remote-model-picker-dialog" ], [ "localize", "Workspace", 1, "fluentTheme-md-semiBold" ], [ 1, "workspace-select", 3, "value", "options", "placeholder", "valueChange" ], [ "role", "textbox", "aria-multiline", "false", 3, "placeholderText", "disableTabIndex", "value" ], [ "class", "fluentTheme-md-reg", 3, "value", 4, "ngFor", "ngForOf" ], [ 1, "model-options-container" ], [ 3, "disabled", "ngModel", "ngModelChange" ], [ "type", "radio", 3, "value" ], [ "type", "radio", 3, "value", "disabled" ], [ "localize", "SemanticModel", 1, "fluentTheme-md-semiBold" ], [ "class", "dataset-select", 3, "disabled", "value", "options", "placeholder", "valueChange", 4, "ngIf", "ngIfElse" ], [ "dataset_input", "" ], [ "class", "message", 3, "ngClass", 4, "ngIf" ], [ 1, "fluentTheme-md-reg", 3, "value" ], [ 1, "dataset-select", 3, "disabled", "value", "options", "placeholder", "valueChange" ], [ "class", "fluentTheme-md-reg", 3, "pbiTooltip", "value", 4, "ngFor", "ngForOf" ], [ 1, "fluentTheme-md-reg", 3, "pbiTooltip", "value" ], [ 1, "input-container" ], [ 1, "pbi-modern-input", 3, "placeholder", "localizeAttr", "disabled", "ngModel", "ngModelChange" ], [ 1, "message", 3, "ngClass" ], [ 1, "message-icon" ], [ "tri-svg-icon-12", "", 3, "name", 4, "ngIf", "ngIfElse" ], [ "message_spinner", "" ], [ 1, "fluentTheme-sm-reg" ], [ "tri-svg-icon-12", "", 3, "name" ], [ "size", "extra-tiny" ] ],
                template: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog", 0), core["\u0275\u0275element"](1, "h3", 1), 
                    core["\u0275\u0275elementStart"](2, "tri-dropdown", 2), core["\u0275\u0275listener"]("valueChange", function($event) {
                        return ctx.currentWorkspaceSelection = $event;
                    })("valueChange", function($event) {
                        return ctx.onWorkspaceSelected($event);
                    }), core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275elementStart"](4, "tri-dropdown-trigger"), 
                    core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](6, "tri-search-box", 3), 
                    core["\u0275\u0275listener"]("value", function($event) {
                        return ctx.onWorkspaceSearch($event);
                    }), core["\u0275\u0275pipe"](7, "localize"), core["\u0275\u0275pipe"](8, "localize"), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](9, RemoteModelPickerDialogComponent_tri_dropdown_item_9_Template, 2, 2, "tri-dropdown-item", 4), 
                    core["\u0275\u0275pipe"](10, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](11, "div", 5)(12, "tri-radio-group", 6), 
                    core["\u0275\u0275listener"]("ngModelChange", function($event) {
                        return ctx.onModelOptionSelectionChanged($event);
                    }), core["\u0275\u0275pipe"](13, "localize"), core["\u0275\u0275elementStart"](14, "tri-radio-button", 7), 
                    core["\u0275\u0275pipe"](15, "localize"), core["\u0275\u0275text"](16), core["\u0275\u0275pipe"](17, "localize"), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](18, "tri-radio-button", 8), 
                    core["\u0275\u0275pipe"](19, "localize"), core["\u0275\u0275text"](20), core["\u0275\u0275pipe"](21, "localize"), 
                    core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275element"](22, "h3", 9), 
                    core["\u0275\u0275template"](23, RemoteModelPickerDialogComponent_tri_dropdown_23_Template, 9, 17, "tri-dropdown", 10), 
                    core["\u0275\u0275template"](24, RemoteModelPickerDialogComponent_ng_template_24_Template, 3, 7, "ng-template", null, 11, core["\u0275\u0275templateRefExtractor"]), 
                    core["\u0275\u0275template"](26, RemoteModelPickerDialogComponent_div_26_Template, 9, 9, "div", 12), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf) {
                        var _r2 = core["\u0275\u0275reference"](25);
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("value", ctx.currentWorkspaceSelection)("options", ctx.dropdownOptions)("placeholder", core["\u0275\u0275pipeBind1"](3, 24, "WorkspacesSelect_Label_Text")), 
                        core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate1"](" ", null == ctx.currentWorkspaceSelection ? null : ctx.currentWorkspaceSelection.displayName, " "), 
                        core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("placeholderText", core["\u0275\u0275pipeBind1"](7, 26, "SearchBox_Text"))("disableTabIndex", !0), 
                        core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](8, 28, "SearchBox_Text")), 
                        core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](10, 30, ctx.filteredWorkspaces$)), 
                        core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("disabled", !ctx.currentWorkspaceSelection)("ngModel", ctx.modelOptionSelection), 
                        core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](13, 32, "SemanticModel"))("role", "radiogroup"), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("value", ctx.ModelSelectionOption.New), 
                        core["\u0275\u0275attribute"]("role", "radio")("aria-label", core["\u0275\u0275pipeBind1"](15, 34, "CreateDataset_New")), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](17, 36, "CreateDataset_New")), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("value", ctx.ModelSelectionOption.Existing)("disabled", ctx.disableExistingDatasetOption), 
                        core["\u0275\u0275attribute"]("role", "radio")("aria-label", core["\u0275\u0275pipeBind1"](19, 38, "CreateDataset_Existing")), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](21, 40, "CreateDataset_Existing")), 
                        core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx.modelOptionSelection === ctx.ModelSelectionOption.Existing)("ngIfElse", _r2), 
                        core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx.showMessage);
                    }
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, template_dialog_component.J, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, localize_directive.X, localize_attr_directive.b, pbi_tooltip_directive.V, tri_dropdown_component.M3, tri_dropdown_item_component.l, tri_dropdown_item_menu_directive.q, tri_dropdown_component.ii, tri_radio_button_component.Y, tri_radio_group_component.Z, tri_search_box_component.U, tri_spinner_component.D, tri_svg_icon_component.M, common.AsyncPipe, localize_pipe.F ],
                styles: [ '.remote-model-picker-dialog[_ngcontent-%COMP%]{width:600px}.remote-model-picker-dialog[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{color:#242424;line-height:20px;margin:4px 0}.remote-model-picker-dialog[_ngcontent-%COMP%]   tri-dropdown[_ngcontent-%COMP%]{height:32px;width:auto;display:flex}.remote-model-picker-dialog[_ngcontent-%COMP%]   tri-dropdown[_ngcontent-%COMP%]     .popout-button{flex:1 1 auto}.remote-model-picker-dialog[_ngcontent-%COMP%]   tri-radio-button[_ngcontent-%COMP%]     section{padding:6px 8px}.remote-model-picker-dialog[_ngcontent-%COMP%]   .model-options-container[_ngcontent-%COMP%]{margin:12px 0 8px}.remote-model-picker-dialog[_ngcontent-%COMP%]   .input-container[_ngcontent-%COMP%]{width:auto;display:flex}.remote-model-picker-dialog[_ngcontent-%COMP%]   .input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{height:32px;flex:1 1 auto;border:1px solid var(--colorNeutralStroke1);border-bottom:1px solid var(--colorNeutralStrokeAccessible, #616161);border-radius:var(--borderRadiusMedium)}html:not([dir="rtl"])[_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding-left:12px}html[dir="rtl"][_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding-right:12px}.remote-model-picker-dialog[_ngcontent-%COMP%]   .input-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:disabled::placeholder{color:var(--colorNeutralForegroundDisabled, #bdbdbd)}.remote-model-picker-dialog[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{display:flex;margin:2px 0 0}.remote-model-picker-dialog[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%]{height:16px;display:flex;flex-direction:column;justify-content:center}html:not([dir="rtl"])[_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%]{margin-right:4px}html[dir="rtl"][_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .remote-model-picker-dialog[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%]{margin-left:4px}.remote-model-picker-dialog[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{line-height:16px}.remote-model-picker-dialog[_ngcontent-%COMP%]   .message.message-info[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%]{fill:var(--colorNeutralForeground3)}.remote-model-picker-dialog[_ngcontent-%COMP%]   .message.message-warning[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%]{fill:var(--globalColorOrangeShade20)}.remote-model-picker-dialog[_ngcontent-%COMP%]   .message.message-error[_ngcontent-%COMP%]   .message-icon[_ngcontent-%COMP%]{fill:var(--globalColorCranberryShade10)}.remote-model-picker-dialog[_ngcontent-%COMP%]   .message.message-error[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:var(--globalColorCranberryShade10)}tri-search-box[_ngcontent-%COMP%]{width:100%}' ],
                changeDetection: 0
            }), RemoteModelPickerDialogComponent;
        }(), dialog = __webpack_require__(32293), a11y_module = __webpack_require__(20914), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), dialogs_parts_module = __webpack_require__(96327), pbi_tooltip_module = __webpack_require__(16095), tri_radio_button = __webpack_require__(95228), tri_svg_icon = __webpack_require__(17177), tri_spinner_module = __webpack_require__(5915), tri_search_box = __webpack_require__(46303), RemoteModelPickerDialogModule = function() {
            function RemoteModelPickerDialogModule() {}
            return RemoteModelPickerDialogModule.\u0275fac = function(t) {
                return new (t || RemoteModelPickerDialogModule);
            }, RemoteModelPickerDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: RemoteModelPickerDialogModule
            }), RemoteModelPickerDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: remote_model_picker_dialog_identifier.E,
                    componentType: RemoteModelPickerDialogComponent
                } ]), dialogs_parts_module.F, fesm2022_forms.u5, localization_module.v, dialog.Is, a11y_module._, pbi_tooltip_module.Z, tri_dropdown.lK, tri_radio_button.W, tri_search_box.b, tri_spinner_module.d, tri_svg_icon.T6 ]
            }), RemoteModelPickerDialogModule;
        }();
    }
} ]);