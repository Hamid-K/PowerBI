"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ 0 ], {
    84403: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            AppInsightsCore: function() {
                return AppInsightsCore;
            },
            ApplicationAnalytics: function() {
                return ApplicationInsights;
            },
            ApplicationInsights: function() {
                return Initialization;
            },
            ApplicationInsightsContainer: function() {
                return ApplicationInsightsContainer;
            },
            BaseCore: function() {
                return BaseCore;
            },
            BaseTelemetryPlugin: function() {
                return BaseTelemetryPlugin;
            },
            CoreUtils: function() {
                return CoreUtils;
            },
            DependenciesPlugin: function() {
                return AjaxMonitor;
            },
            DistributedTracingModes: function() {
                return DistributedTracingModes;
            },
            Event: function() {
                return Event_Event;
            },
            Exception: function() {
                return Exception;
            },
            LoggingSeverity: function() {
                return LoggingSeverity;
            },
            Metric: function() {
                return Metric;
            },
            NotificationManager: function() {
                return NotificationManager;
            },
            PageView: function() {
                return PageView;
            },
            PageViewPerformance: function() {
                return PageViewPerformance;
            },
            PerfEvent: function() {
                return PerfEvent;
            },
            PerfManager: function() {
                return PerfManager;
            },
            PropertiesPlugin: function() {
                return dist_esm_PropertiesPlugin;
            },
            RemoteDependencyData: function() {
                return RemoteDependencyData_RemoteDependencyData;
            },
            Sender: function() {
                return Sender;
            },
            SeverityLevel: function() {
                return SeverityLevel;
            },
            Telemetry: function() {
                return Telemetry;
            },
            Trace: function() {
                return Trace;
            },
            Util: function() {
                return Util;
            },
            _InternalMessageId: function() {
                return _InternalMessageId;
            },
            doPerf: function() {
                return doPerf;
            }
        });
        var Constants_strShimFunction = "function", strShimObject = "object", Constants_strShimUndefined = "undefined", Constants_strShimPrototype = "prototype", Constants_ObjClass = Object, Constants_ObjProto = Constants_ObjClass[Constants_strShimPrototype], ObjAssign = Constants_ObjClass.assign, Constants_ObjCreate = Constants_ObjClass.create, Constants_ObjDefineProperty = Constants_ObjClass.defineProperty, Constants_ObjHasOwnProperty = Constants_ObjProto.hasOwnProperty, _cachedGlobal = null;
        function getGlobal(useCached) {
            return void 0 === useCached && (useCached = !0), _cachedGlobal && useCached || (typeof globalThis !== Constants_strShimUndefined && globalThis && (_cachedGlobal = globalThis), 
            typeof self !== Constants_strShimUndefined && self && (_cachedGlobal = self), typeof window !== Constants_strShimUndefined && window && (_cachedGlobal = window), 
            typeof __webpack_require__.g !== Constants_strShimUndefined && __webpack_require__.g && (_cachedGlobal = __webpack_require__.g)), 
            _cachedGlobal;
        }
        function Helpers_throwTypeError(message) {
            throw new TypeError(message);
        }
        function objCreateFn(obj) {
            if (Constants_ObjCreate) return Constants_ObjCreate(obj);
            if (null == obj) return {};
            var type = typeof obj;
            function tmpFunc() {}
            return type !== strShimObject && type !== Constants_strShimFunction && Helpers_throwTypeError("Object prototype may only be an Object:" + obj), 
            tmpFunc[Constants_strShimPrototype] = obj, new tmpFunc;
        }
        getGlobal(), getGlobal();
        var _a, __assignFn = ObjAssign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) for (var p in s = arguments[i]) Constants_ObjProto.hasOwnProperty.call(s, p) && (t[p] = s[p]);
            return t;
        }, _extendStaticsFn = function(d, b) {
            return _extendStaticsFn = Constants_ObjClass.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            }, _extendStaticsFn(d, b);
        };
        function __extendsFn(d, b) {
            function __() {
                this.constructor = d;
            }
            typeof b !== Constants_strShimFunction && null !== b && Helpers_throwTypeError("Class extends value " + String(b) + " is not a constructor or null"), 
            _extendStaticsFn(d, b), d[Constants_strShimPrototype] = null === b ? objCreateFn(b) : (__[Constants_strShimPrototype] = b[Constants_strShimPrototype], 
            new __);
        }
        function __spreadArrayFn(to, from) {
            for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
            return to;
        }
        var result, LoggingSeverity, Constructor = "constructor", Prototype = "prototype", strFunction = "function", DynInstFuncTable = "_dynInstFuncs", DynProxyTag = "_isDynProxy", DynClassName = "_dynClass", DynInstChkTag = "_dynInstChk", DynAllowInstChkTag = DynInstChkTag, UnknownValue = "_unknown_", str__Proto = "__proto__", DynProtoBaseProto = "_dyn" + str__Proto, DynProtoCurrent = "_dynInstProto", Obj = Object, _objGetPrototypeOf = Obj.getPrototypeOf, _objGetOwnProps = Obj.getOwnPropertyNames, _gbl = ("undefined" != typeof globalThis && (result = globalThis), 
        result || "undefined" == typeof self || (result = self), result || "undefined" == typeof window || (result = window), 
        result || void 0 === __webpack_require__.g || (result = __webpack_require__.g), 
        result || {}), _gblInst = _gbl.__dynProto$Gbl || (_gbl.__dynProto$Gbl = {
            o: (_a = {}, _a.setInstFuncs = !0, _a.useBaseInst = !0, _a),
            n: 1e3
        });
        function _hasOwnProperty(obj, prop) {
            return obj && Obj[Prototype].hasOwnProperty.call(obj, prop);
        }
        function _isObjectOrArrayPrototype(target) {
            return target && (target === Obj[Prototype] || target === Array[Prototype]);
        }
        function _isObjectArrayOrFunctionPrototype(target) {
            return _isObjectOrArrayPrototype(target) || target === Function[Prototype];
        }
        function _getObjProto(target) {
            var newProto;
            if (target) {
                if (_objGetPrototypeOf) return _objGetPrototypeOf(target);
                var curProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);
                newProto = target[DynProtoBaseProto] || curProto, _hasOwnProperty(target, DynProtoBaseProto) || (delete target[DynProtoCurrent], 
                newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto], 
                target[DynProtoCurrent] = curProto);
            }
            return newProto;
        }
        function _forEachProp(target, func) {
            var props = [];
            if (_objGetOwnProps) props = _objGetOwnProps(target); else for (var name_1 in target) "string" == typeof name_1 && _hasOwnProperty(target, name_1) && props.push(name_1);
            if (props && props.length > 0) for (var lp = 0; lp < props.length; lp++) func(props[lp]);
        }
        function _isDynamicCandidate(target, funcName, skipOwn) {
            return funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || _hasOwnProperty(target, funcName));
        }
        function _throwTypeError(message) {
            throw new TypeError("DynamicProto: " + message);
        }
        function _hasVisited(values, value) {
            for (var lp = values.length - 1; lp >= 0; lp--) if (values[lp] === value) return !0;
            return !1;
        }
        function _getObjName(target, unknownValue) {
            return _hasOwnProperty(target, Prototype) ? target.name || unknownValue || UnknownValue : ((target || {})[Constructor] || {}).name || unknownValue || UnknownValue;
        }
        function dynamicProto(theClass, target, delegateFunc, options) {
            _hasOwnProperty(theClass, Prototype) || _throwTypeError("theClass is an invalid class definition.");
            var classProto = theClass[Prototype];
            (function(classProto, thisTarget) {
                if (_objGetPrototypeOf) {
                    for (var visited = [], thisProto = _getObjProto(thisTarget); thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto); ) {
                        if (thisProto === classProto) return !0;
                        visited.push(thisProto), thisProto = _getObjProto(thisProto);
                    }
                    return !1;
                }
                return !0;
            })(classProto, target) || _throwTypeError("[" + _getObjName(theClass) + "] not in hierarchy of [" + _getObjName(target) + "]");
            var className = null;
            _hasOwnProperty(classProto, DynClassName) ? className = classProto[DynClassName] : (className = "_dynCls$" + _getObjName(theClass, "_") + "$" + _gblInst.n, 
            _gblInst.n++, classProto[DynClassName] = className);
            var perfOptions = dynamicProto._dfOpts, useBaseInst = !!perfOptions.useBaseInst;
            useBaseInst && options && void 0 !== options.useBaseInst && (useBaseInst = !!options.useBaseInst);
            var instFuncs = function(thisTarget) {
                var instFuncs = {};
                return _forEachProp(thisTarget, function(name) {
                    !instFuncs[name] && _isDynamicCandidate(thisTarget, name, !1) && (instFuncs[name] = thisTarget[name]);
                }), instFuncs;
            }(target), baseFuncs = function(classProto, thisTarget, instFuncs, useBaseInst) {
                function _instFuncProxy(target, funcHost, funcName) {
                    var theFunc = funcHost[funcName];
                    if (theFunc[DynProxyTag] && useBaseInst) {
                        var instFuncTable = target[DynInstFuncTable] || {};
                        !1 !== instFuncTable[DynAllowInstChkTag] && (theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc);
                    }
                    return function() {
                        return theFunc.apply(target, arguments);
                    };
                }
                var baseFuncs = {};
                _forEachProp(instFuncs, function(name) {
                    baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);
                });
                for (var baseProto = _getObjProto(classProto), visited = []; baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto); ) _forEachProp(baseProto, function(name) {
                    !baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf) && (baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name));
                }), visited.push(baseProto), baseProto = _getObjProto(baseProto);
                return baseFuncs;
            }(classProto, target, instFuncs, useBaseInst);
            delegateFunc(target, baseFuncs);
            var setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions.setInstFuncs;
            setInstanceFunc && options && (setInstanceFunc = !!options.setInstFuncs), function(proto, className, target, baseInstFuncs, setInstanceFunc) {
                if (!_isObjectOrArrayPrototype(proto)) {
                    var instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || {}, instFuncs_1 = instFuncTable[className] = instFuncTable[className] || {};
                    !1 !== instFuncTable[DynAllowInstChkTag] && (instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc), 
                    _forEachProp(target, function(name) {
                        _isDynamicCandidate(target, name, !1) && target[name] !== baseInstFuncs[name] && (instFuncs_1[name] = target[name], 
                        delete target[name], (!_hasOwnProperty(proto, name) || proto[name] && !proto[name][DynProxyTag]) && (proto[name] = function(proto, funcName) {
                            var dynProtoProxy = function dynProtoProxy() {
                                var instFunc = function(target, funcName, proto, currentDynProtoProxy) {
                                    var instFunc = null;
                                    if (target && _hasOwnProperty(proto, DynClassName)) {
                                        var instFuncTable = target[DynInstFuncTable] || {};
                                        if ((instFunc = (instFuncTable[proto[DynClassName]] || {})[funcName]) || _throwTypeError("Missing [" + funcName + "] " + strFunction), 
                                        !instFunc[DynInstChkTag] && !1 !== instFuncTable[DynAllowInstChkTag]) {
                                            for (var canAddInst = !_hasOwnProperty(target, funcName), objProto = _getObjProto(target), visited = []; canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto); ) {
                                                var protoFunc = objProto[funcName];
                                                if (protoFunc) {
                                                    canAddInst = protoFunc === currentDynProtoProxy;
                                                    break;
                                                }
                                                visited.push(objProto), objProto = _getObjProto(objProto);
                                            }
                                            try {
                                                canAddInst && (target[funcName] = instFunc), instFunc[DynInstChkTag] = 1;
                                            } catch (e) {
                                                instFuncTable[DynAllowInstChkTag] = !1;
                                            }
                                        }
                                    }
                                    return instFunc;
                                }(this, funcName, proto, dynProtoProxy) || function(funcName, proto, currentDynProtoProxy) {
                                    var protoFunc = proto[funcName];
                                    return protoFunc === currentDynProtoProxy && (protoFunc = _getObjProto(proto)[funcName]), 
                                    typeof protoFunc !== strFunction && _throwTypeError("[" + funcName + "] is not a " + strFunction), 
                                    protoFunc;
                                }(funcName, proto, dynProtoProxy);
                                return instFunc.apply(this, arguments);
                            };
                            return dynProtoProxy[DynProxyTag] = 1, dynProtoProxy;
                        }(proto, name)));
                    });
                }
            }(classProto, className, target, instFuncs, !1 !== setInstanceFunc);
        }
        dynamicProto._dfOpts = _gblInst.o, function(LoggingSeverity) {
            LoggingSeverity[LoggingSeverity.CRITICAL = 1] = "CRITICAL", LoggingSeverity[LoggingSeverity.WARNING = 2] = "WARNING";
        }(LoggingSeverity || (LoggingSeverity = {}));
        var _InternalMessageId = {
            BrowserDoesNotSupportLocalStorage: 0,
            BrowserCannotReadLocalStorage: 1,
            BrowserCannotReadSessionStorage: 2,
            BrowserCannotWriteLocalStorage: 3,
            BrowserCannotWriteSessionStorage: 4,
            BrowserFailedRemovalFromLocalStorage: 5,
            BrowserFailedRemovalFromSessionStorage: 6,
            CannotSendEmptyTelemetry: 7,
            ClientPerformanceMathError: 8,
            ErrorParsingAISessionCookie: 9,
            ErrorPVCalc: 10,
            ExceptionWhileLoggingError: 11,
            FailedAddingTelemetryToBuffer: 12,
            FailedMonitorAjaxAbort: 13,
            FailedMonitorAjaxDur: 14,
            FailedMonitorAjaxOpen: 15,
            FailedMonitorAjaxRSC: 16,
            FailedMonitorAjaxSend: 17,
            FailedMonitorAjaxGetCorrelationHeader: 18,
            FailedToAddHandlerForOnBeforeUnload: 19,
            FailedToSendQueuedTelemetry: 20,
            FailedToReportDataLoss: 21,
            FlushFailed: 22,
            MessageLimitPerPVExceeded: 23,
            MissingRequiredFieldSpecification: 24,
            NavigationTimingNotSupported: 25,
            OnError: 26,
            SessionRenewalDateIsZero: 27,
            SenderNotInitialized: 28,
            StartTrackEventFailed: 29,
            StopTrackEventFailed: 30,
            StartTrackFailed: 31,
            StopTrackFailed: 32,
            TelemetrySampledAndNotSent: 33,
            TrackEventFailed: 34,
            TrackExceptionFailed: 35,
            TrackMetricFailed: 36,
            TrackPVFailed: 37,
            TrackPVFailedCalc: 38,
            TrackTraceFailed: 39,
            TransmissionFailed: 40,
            FailedToSetStorageBuffer: 41,
            FailedToRestoreStorageBuffer: 42,
            InvalidBackendResponse: 43,
            FailedToFixDepricatedValues: 44,
            InvalidDurationValue: 45,
            TelemetryEnvelopeInvalid: 46,
            CreateEnvelopeError: 47,
            CannotSerializeObject: 48,
            CannotSerializeObjectNonSerializable: 49,
            CircularReferenceDetected: 50,
            ClearAuthContextFailed: 51,
            ExceptionTruncated: 52,
            IllegalCharsInName: 53,
            ItemNotInArray: 54,
            MaxAjaxPerPVExceeded: 55,
            MessageTruncated: 56,
            NameTooLong: 57,
            SampleRateOutOfRange: 58,
            SetAuthContextFailed: 59,
            SetAuthContextFailedAccountName: 60,
            StringValueTooLong: 61,
            StartCalledMoreThanOnce: 62,
            StopCalledWithoutStart: 63,
            TelemetryInitializerFailed: 64,
            TrackArgumentsNotSpecified: 65,
            UrlTooLong: 66,
            SessionStorageBufferFull: 67,
            CannotAccessCookie: 68,
            IdTooLong: 69,
            InvalidEvent: 70,
            FailedMonitorAjaxSetRequestHeader: 71,
            SendBrowserInfoOnUserInit: 72,
            PluginException: 73,
            NotificationException: 74,
            SnippetScriptLoadFailure: 99,
            InvalidInstrumentationKey: 100,
            CannotParseAiBlobValue: 101,
            InvalidContentBlob: 102,
            TrackPageActionEventFailed: 103,
            FailedAddingCustomDefinedRequestContext: 104,
            InMemoryStorageBufferFull: 105
        }, strOnPrefix = "on", strAttachEvent = "attachEvent", strAddEventHelper = "addEventListener", strToISOString = "toISOString", cStrEndsWith = "endsWith", strIndexOf = "indexOf", strReduce = "reduce", cStrTrim = "trim", HelperFuncs_str_Proto = "__proto__", strConstructor = "constructor", _objDefineProperty = Constants_ObjDefineProperty, _objKeys = Constants_ObjClass.keys, StringProto = String[Constants_strShimPrototype], _strTrim = StringProto[cStrTrim], _strEndsWith = StringProto[cStrEndsWith], _dataToISOString = Date[Constants_strShimPrototype][strToISOString], _isArray = Array.isArray, _objToString = Constants_ObjProto.toString, rCamelCase = (Constants_ObjHasOwnProperty.toString.call(Constants_ObjClass), 
        /-([a-z])/g), rNormalizeInvalid = /([^\w\d_$])/g, rLeadingNumeric = /^(\d+[\w\d_$])/, HelperFuncs_objGetPrototypeOf = Object.getPrototypeOf;
        function isUndefined(value) {
            return void 0 === value || typeof value === Constants_strShimUndefined;
        }
        function isNullOrUndefined(value) {
            return null === value || isUndefined(value);
        }
        function isNotNullOrUndefined(value) {
            return !isNullOrUndefined(value);
        }
        function HelperFuncs_hasOwnProperty(obj, prop) {
            return !(!obj || !Constants_ObjHasOwnProperty.call(obj, prop));
        }
        function isObject(value) {
            return !(!value || typeof value !== strShimObject);
        }
        function isFunction(value) {
            return !(!value || typeof value !== Constants_strShimFunction);
        }
        function attachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {
            void 0 === useCapture && (useCapture = !1);
            var result = !1;
            if (!isNullOrUndefined(obj)) try {
                isNullOrUndefined(obj[strAddEventHelper]) ? isNullOrUndefined(obj[strAttachEvent]) || (obj[strAttachEvent](strOnPrefix + eventNameWithoutOn, handlerRef), 
                result = !0) : (obj[strAddEventHelper](eventNameWithoutOn, handlerRef, useCapture), 
                result = !0);
            } catch (e) {}
            return result;
        }
        function objForEachKey(target, callbackfn) {
            if (target) for (var prop in target) Constants_ObjHasOwnProperty.call(target, prop) && callbackfn.call(target, prop, target[prop]);
        }
        function strContains(value, search) {
            return !(!value || !search) && -1 !== value.indexOf(search);
        }
        function isDate(obj) {
            return !(!obj || "[object Date]" !== _objToString.call(obj));
        }
        var isArray = _isArray || function(obj) {
            return !(!obj || "[object Array]" !== _objToString.call(obj));
        };
        function isError(obj) {
            return !(!obj || "[object Error]" !== _objToString.call(obj));
        }
        function HelperFuncs_isString(value) {
            return "string" == typeof value;
        }
        function isNumber(value) {
            return "number" == typeof value;
        }
        function isBoolean(value) {
            return "boolean" == typeof value;
        }
        function toISOString(date) {
            if (date) return _dataToISOString ? date[strToISOString]() : function(date) {
                if (date && date.getUTCFullYear) {
                    var pad = function(num) {
                        var r = String(num);
                        return 1 === r.length && (r = "0" + r), r;
                    };
                    return date.getUTCFullYear() + "-" + pad(date.getUTCMonth() + 1) + "-" + pad(date.getUTCDate()) + "T" + pad(date.getUTCHours()) + ":" + pad(date.getUTCMinutes()) + ":" + pad(date.getUTCSeconds()) + "." + String((date.getUTCMilliseconds() / 1e3).toFixed(3)).slice(2, 5) + "Z";
                }
            }(date);
        }
        function arrForEach(arr, callbackfn, thisArg) {
            var len = arr.length;
            try {
                for (var idx = 0; idx < len && (!(idx in arr) || -1 !== callbackfn.call(thisArg || arr, arr[idx], idx, arr)); idx++) ;
            } catch (e) {}
        }
        function HelperFuncs_arrIndexOf(arr, searchElement, fromIndex) {
            if (arr) {
                if (arr[strIndexOf]) return arr[strIndexOf](searchElement, fromIndex);
                var len = arr.length, from = fromIndex || 0;
                try {
                    for (var lp = Math.max(from >= 0 ? from : len - Math.abs(from), 0); lp < len; lp++) if (lp in arr && arr[lp] === searchElement) return lp;
                } catch (e) {}
            }
            return -1;
        }
        function arrMap(arr, callbackfn, thisArg) {
            var results;
            if (arr) {
                if (arr.map) return arr.map(callbackfn, thisArg);
                var len = arr.length, _this = thisArg || arr;
                results = new Array(len);
                try {
                    for (var lp = 0; lp < len; lp++) lp in arr && (results[lp] = callbackfn.call(_this, arr[lp], arr));
                } catch (e) {}
            }
            return results;
        }
        function arrReduce(arr, callbackfn, initialValue) {
            var value;
            if (arr) {
                if (arr[strReduce]) return arr[strReduce](callbackfn, initialValue);
                var len = arr.length, lp = 0;
                if (arguments.length >= 3) value = arguments[2]; else {
                    for (;lp < len && !(lp in arr); ) lp++;
                    value = arr[lp++];
                }
                for (;lp < len; ) lp in arr && (value = callbackfn(value, arr[lp], lp, arr)), lp++;
            }
            return value;
        }
        function strTrim(str) {
            return str && (str = _strTrim && str[cStrTrim] ? str[cStrTrim]() : str.replace ? str.replace(/^\s+|\s+$/g, "") : str), 
            str;
        }
        var _objKeysHasDontEnumBug = !{
            toString: null
        }.propertyIsEnumerable("toString"), _objKeysDontEnums = [ "toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor" ];
        function objKeys(obj) {
            var objType = typeof obj;
            if (objType === Constants_strShimFunction || objType === strShimObject && null !== obj || Helpers_throwTypeError("objKeys called on non-object"), 
            !_objKeysHasDontEnumBug && _objKeys) return _objKeys(obj);
            var result = [];
            for (var prop in obj) obj && Constants_ObjHasOwnProperty.call(obj, prop) && result.push(prop);
            if (_objKeysHasDontEnumBug) for (var dontEnumsLength = _objKeysDontEnums.length, lp = 0; lp < dontEnumsLength; lp++) obj && Constants_ObjHasOwnProperty.call(obj, _objKeysDontEnums[lp]) && result.push(_objKeysDontEnums[lp]);
            return result;
        }
        function objDefineAccessors(target, prop, getProp, setProp) {
            if (_objDefineProperty) try {
                var descriptor = {
                    enumerable: !0,
                    configurable: !0
                };
                return getProp && (descriptor.get = getProp), setProp && (descriptor.set = setProp), 
                _objDefineProperty(target, prop, descriptor), !0;
            } catch (e) {}
            return !1;
        }
        function dateNow() {
            var dt = Date;
            return dt.now ? dt.now() : (new dt).getTime();
        }
        function getExceptionName(object) {
            return isError(object) ? object.name : "";
        }
        function setValue(target, field, value, valChk, srcChk) {
            var theValue = value;
            return target && ((theValue = target[field]) === value || srcChk && !srcChk(theValue) || valChk && !valChk(value) || (target[field] = theValue = value)), 
            theValue;
        }
        function getSetValue(target, field, defValue) {
            var theValue;
            return target ? !(theValue = target[field]) && isNullOrUndefined(theValue) && (theValue = isUndefined(defValue) ? {} : defValue, 
            target[field] = theValue) : theValue = isUndefined(defValue) ? {} : defValue, theValue;
        }
        function isNotTruthy(value) {
            return !value;
        }
        function isTruthy(value) {
            return !!value;
        }
        function throwError(message) {
            throw new Error(message);
        }
        function proxyAssign(target, source, chkSet) {
            if (target && source && target !== source && isObject(target) && isObject(source)) {
                var _loop_1 = function(field) {
                    if (HelperFuncs_isString(field)) {
                        var value = source[field];
                        isFunction(value) ? chkSet && !chkSet(field, !0, source, target) || (target[field] = (funcName = field, 
                        function() {
                            return source[funcName].apply(source, arguments);
                        })) : chkSet && !chkSet(field, !1, source, target) || (HelperFuncs_hasOwnProperty(target, field) && delete target[field], 
                        objDefineAccessors(target, field, function() {
                            return source[field];
                        }, function(theValue) {
                            source[field] = theValue;
                        }) || (target[field] = value));
                    }
                    var funcName;
                };
                for (var field in source) _loop_1(field);
            }
            return target;
        }
        function optimizeObject(theObject) {
            return theObject && ObjAssign && (theObject = Constants_ObjClass(ObjAssign({}, theObject))), 
            theObject;
        }
        var strWindow = "window", strDocument = "document", strNavigator = "navigator", strLocation = "location", strPerformance = "performance", strJSON = "JSON", strCrypto = "crypto", strMsCrypto = "msCrypto", strMsie = "msie", strTrident = "trident/", _isTrident = null, _navUserAgentCheck = null, _enableMocks = !1, _useXDomainRequest = null, _beaconsSupported = null;
        function _hasProperty(theClass, property) {
            var supported = !1;
            if (theClass) {
                try {
                    if (!(supported = property in theClass)) {
                        var proto = theClass[Constants_strShimPrototype];
                        proto && (supported = property in proto);
                    }
                } catch (e) {}
                if (!supported) try {
                    supported = !isUndefined((new theClass)[property]);
                } catch (e) {}
            }
            return supported;
        }
        function getGlobalInst(name) {
            var gbl = getGlobal();
            return gbl && gbl[name] ? gbl[name] : name === strWindow && hasWindow() ? window : null;
        }
        function hasWindow() {
            return Boolean(typeof window === strShimObject && window);
        }
        function getWindow() {
            return hasWindow() ? window : getGlobalInst(strWindow);
        }
        function hasDocument() {
            return Boolean(typeof document === strShimObject && document);
        }
        function EnvUtils_getDocument() {
            return hasDocument() ? document : getGlobalInst(strDocument);
        }
        function hasNavigator() {
            return Boolean(typeof navigator === strShimObject && navigator);
        }
        function getNavigator() {
            return hasNavigator() ? navigator : getGlobalInst(strNavigator);
        }
        function getLocation(checkForMock) {
            if (checkForMock && _enableMocks) {
                var mockLocation = getGlobalInst("__mockLocation");
                if (mockLocation) return mockLocation;
            }
            return typeof location === strShimObject && location ? location : getGlobalInst(strLocation);
        }
        function getPerformance() {
            return getGlobalInst(strPerformance);
        }
        function hasJSON() {
            return Boolean(typeof JSON === strShimObject && JSON || null !== getGlobalInst(strJSON));
        }
        function getJSON() {
            return hasJSON() ? JSON || getGlobalInst(strJSON) : null;
        }
        function isIE() {
            var nav = getNavigator();
            if (nav && (nav.userAgent !== _navUserAgentCheck || null === _isTrident)) {
                var userAgent = ((_navUserAgentCheck = nav.userAgent) || "").toLowerCase();
                _isTrident = strContains(userAgent, strMsie) || strContains(userAgent, strTrident);
            }
            return _isTrident;
        }
        function getIEVersion(userAgentStr) {
            if (void 0 === userAgentStr && (userAgentStr = null), !userAgentStr) {
                var navigator_1 = getNavigator() || {};
                userAgentStr = navigator_1 ? (navigator_1.userAgent || "").toLowerCase() : "";
            }
            var ua = (userAgentStr || "").toLowerCase();
            if (strContains(ua, strMsie)) {
                var doc = EnvUtils_getDocument() || {};
                return Math.max(parseInt(ua.split(strMsie)[1]), doc.documentMode || 0);
            }
            if (strContains(ua, strTrident)) {
                var tridentVer = parseInt(ua.split(strTrident)[1]);
                if (tridentVer) return tridentVer + 4;
            }
            return null;
        }
        function dumpObj(object) {
            var objectTypeDump = Object[Constants_strShimPrototype].toString.call(object), propertyValueDump = "";
            return "[object Error]" === objectTypeDump ? propertyValueDump = "{ stack: '" + object.stack + "', message: '" + object.message + "', name: '" + object.name + "'" : hasJSON() && (propertyValueDump = getJSON().stringify(object)), 
            objectTypeDump + propertyValueDump;
        }
        function isBeaconsSupported() {
            return null === _beaconsSupported && (_beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon)), 
            _beaconsSupported;
        }
        function isFetchSupported(withKeepAlive) {
            var isSupported = !1;
            try {
                isSupported = !!getGlobalInst("fetch");
                var request = getGlobalInst("Request");
                isSupported && withKeepAlive && request && (isSupported = _hasProperty(request, "keepalive"));
            } catch (e) {}
            return isSupported;
        }
        function useXDomainRequest() {
            return null === _useXDomainRequest && (_useXDomainRequest = "undefined" != typeof XDomainRequest) && isXhrSupported() && (_useXDomainRequest = _useXDomainRequest && !_hasProperty(getGlobalInst("XMLHttpRequest"), "withCredentials")), 
            _useXDomainRequest;
        }
        function isXhrSupported() {
            var isSupported = !1;
            try {
                isSupported = !!getGlobalInst("XMLHttpRequest");
            } catch (e) {}
            return isSupported;
        }
        var _debugListener, listenerFuncs = [ "eventsSent", "eventsDiscarded", "eventsSendRequest", "perfEvent" ], _aiNamespace = null;
        function _listenerProxyFunc(name, config) {
            return function() {
                var args = arguments, dbgExt = getDebugExt(config);
                if (dbgExt) {
                    var listener = dbgExt.listener;
                    listener && listener[name] && listener[name].apply(listener, args);
                }
            };
        }
        function getDebugExt(config) {
            var target, ns = _aiNamespace;
            return ns || !0 === config.disableDbgExt || (ns = _aiNamespace || ((target = getGlobalInst("Microsoft")) && (_aiNamespace = target.ApplicationInsights), 
            _aiNamespace)), ns ? ns.ChromeDbgExt : null;
        }
        function _sanitizeDiagnosticText(text) {
            return text ? '"' + text.replace(/\"/g, "") + '"' : "";
        }
        function _logToConsole(func, message) {
            var theConsole = typeof console !== Constants_strShimUndefined ? console : getGlobalInst("console");
            if (theConsole) {
                var logFunc = "log";
                theConsole[func] && (logFunc = func), isFunction(theConsole[logFunc]) && theConsole[logFunc](message);
            }
        }
        var _InternalLogMessage = function() {
            function _InternalLogMessage(msgId, msg, isUserAct, properties) {
                void 0 === isUserAct && (isUserAct = !1), this.messageId = msgId, this.message = (isUserAct ? "AI: " : "AI (Internal): ") + msgId;
                var strProps = "";
                hasJSON() && (strProps = getJSON().stringify(properties));
                var diagnosticText = (msg ? " message:" + _sanitizeDiagnosticText(msg) : "") + (properties ? " props:" + _sanitizeDiagnosticText(strProps) : "");
                this.message += diagnosticText;
            }
            return _InternalLogMessage.dataType = "MessageData", _InternalLogMessage;
        }();
        function safeGetLogger(core, config) {
            return (core || {}).logger || new DiagnosticLogger(config);
        }
        var DiagnosticLogger = function DiagnosticLogger(config) {
            this.identifier = "DiagnosticLogger", this.queue = [];
            var _messageCount = 0, _messageLogged = {};
            dynamicProto(DiagnosticLogger, this, function(_self) {
                function _getConfigValue(name, defValue) {
                    var value = config[name];
                    return isNullOrUndefined(value) ? defValue : value;
                }
                function _debugExtMsg(name, data) {
                    var dbgExt = getDebugExt(config);
                    dbgExt && dbgExt.diagLog && dbgExt.diagLog(name, data);
                }
                isNullOrUndefined(config) && (config = {}), _self.consoleLoggingLevel = function() {
                    return _getConfigValue("loggingLevelConsole", 0);
                }, _self.telemetryLoggingLevel = function() {
                    return _getConfigValue("loggingLevelTelemetry", 1);
                }, _self.maxInternalMessageLimit = function() {
                    return _getConfigValue("maxMessageLimit", 25);
                }, _self.enableDebugExceptions = function() {
                    return _getConfigValue("enableDebugExceptions", !1);
                }, _self.throwInternal = function(severity, msgId, msg, properties, isUserAct) {
                    void 0 === isUserAct && (isUserAct = !1);
                    var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);
                    if (_self.enableDebugExceptions()) throw message;
                    var logFunc = severity === LoggingSeverity.CRITICAL ? "errorToConsole" : "warnToConsole";
                    if (isUndefined(message.message)) _debugExtMsg("throw" + (severity === LoggingSeverity.CRITICAL ? "Critical" : "Warning"), message); else {
                        var logLevel = _self.consoleLoggingLevel();
                        if (isUserAct) {
                            var messageKey = +message.messageId;
                            !_messageLogged[messageKey] && logLevel >= severity && (_self[logFunc](message.message), 
                            _messageLogged[messageKey] = !0);
                        } else logLevel >= severity && _self[logFunc](message.message);
                        _self.logInternalMessage(severity, message);
                    }
                }, _self.warnToConsole = function(message) {
                    _logToConsole("warn", message), _debugExtMsg("warning", message);
                }, _self.errorToConsole = function(message) {
                    _logToConsole("error", message), _debugExtMsg("error", message);
                }, _self.resetInternalMessageCount = function() {
                    _messageCount = 0, _messageLogged = {};
                }, _self.logInternalMessage = function(severity, message) {
                    if (!(_messageCount >= _self.maxInternalMessageLimit())) {
                        var logMessage = !0, messageKey = "AITR_" + message.messageId;
                        if (_messageLogged[messageKey] ? logMessage = !1 : _messageLogged[messageKey] = !0, 
                        logMessage && (severity <= _self.telemetryLoggingLevel() && (_self.queue.push(message), 
                        _messageCount++, _debugExtMsg(severity === LoggingSeverity.CRITICAL ? "error" : "warn", message)), 
                        _messageCount === _self.maxInternalMessageLimit())) {
                            var throttleLimitMessage = "Internal events throttle limit per PageView reached for this app.", throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, !1);
                            _self.queue.push(throttleMessage), severity === LoggingSeverity.CRITICAL ? _self.errorToConsole(throttleLimitMessage) : _self.warnToConsole(throttleLimitMessage);
                        }
                    }
                };
            });
        }, PerfEvent = function() {
            function PerfEvent(name, payloadDetails, isAsync) {
                var theDetails_1, _self = this, accessorDefined = !1;
                _self.start = dateNow(), _self.name = name, _self.isAsync = isAsync, _self.isChildEvt = function() {
                    return !1;
                }, isFunction(payloadDetails) && (accessorDefined = objDefineAccessors(_self, "payload", function() {
                    return !theDetails_1 && isFunction(payloadDetails) && (theDetails_1 = payloadDetails(), 
                    payloadDetails = null), theDetails_1;
                })), _self.getCtx = function(key) {
                    return key ? key === PerfEvent.ParentContextKey || key === PerfEvent.ChildrenContextKey ? _self[key] : (_self.ctx || {})[key] : null;
                }, _self.setCtx = function(key, value) {
                    key && (key === PerfEvent.ParentContextKey ? (_self[key] || (_self.isChildEvt = function() {
                        return !0;
                    }), _self[key] = value) : key === PerfEvent.ChildrenContextKey ? _self[key] = value : (_self.ctx = _self.ctx || {})[key] = value);
                }, _self.complete = function() {
                    var childTime = 0, childEvts = _self.getCtx(PerfEvent.ChildrenContextKey);
                    if (isArray(childEvts)) for (var lp = 0; lp < childEvts.length; lp++) {
                        var childEvt = childEvts[lp];
                        childEvt && (childTime += childEvt.time);
                    }
                    _self.time = dateNow() - _self.start, _self.exTime = _self.time - childTime, _self.complete = function() {}, 
                    !accessorDefined && isFunction(payloadDetails) && (_self.payload = payloadDetails());
                };
            }
            return PerfEvent.ParentContextKey = "parent", PerfEvent.ChildrenContextKey = "childEvts", 
            PerfEvent;
        }(), PerfManager = function PerfManager(manager) {
            this.ctx = {}, dynamicProto(PerfManager, this, function(_self) {
                _self.create = function(src, payloadDetails, isAsync) {
                    return new PerfEvent(src, payloadDetails, isAsync);
                }, _self.fire = function(perfEvent) {
                    perfEvent && (perfEvent.complete(), manager && isFunction(manager.perfEvent) && manager.perfEvent(perfEvent));
                }, _self.setCtx = function(key, value) {
                    key && ((_self.ctx = _self.ctx || {})[key] = value);
                }, _self.getCtx = function(key) {
                    return (_self.ctx || {})[key];
                };
            });
        }, doPerfActiveKey = "CoreUtils.doPerf";
        function doPerf(mgrSource, getSource, func, details, isAsync) {
            if (mgrSource) {
                var perfMgr = mgrSource;
                if (isFunction(perfMgr.getPerfMgr) && (perfMgr = perfMgr.getPerfMgr()), perfMgr) {
                    var perfEvt = void 0, currentActive = perfMgr.getCtx(doPerfActiveKey);
                    try {
                        if (perfEvt = perfMgr.create(getSource(), details, isAsync)) {
                            if (currentActive && perfEvt.setCtx && (perfEvt.setCtx(PerfEvent.ParentContextKey, currentActive), 
                            currentActive.getCtx && currentActive.setCtx)) {
                                var children = currentActive.getCtx(PerfEvent.ChildrenContextKey);
                                children || currentActive.setCtx(PerfEvent.ChildrenContextKey, children = []), children.push(perfEvt);
                            }
                            return perfMgr.setCtx(doPerfActiveKey, perfEvt), func(perfEvt);
                        }
                    } catch (ex) {
                        perfEvt && perfEvt.setCtx && perfEvt.setCtx("exception", ex);
                    } finally {
                        perfEvt && perfMgr.fire(perfEvt), perfMgr.setCtx(doPerfActiveKey, currentActive);
                    }
                }
            }
            return func();
        }
        var TelemetryPluginChain = function(plugin, defItemCtx) {
            var _self = this, _nextProxy = null, _hasProcessTelemetry = isFunction(plugin.processTelemetry), _hasSetNext = isFunction(plugin.setNextPlugin);
            _self._hasRun = !1, _self.getPlugin = function() {
                return plugin;
            }, _self.getNext = function() {
                return _nextProxy;
            }, _self.setNext = function(nextPlugin) {
                _nextProxy = nextPlugin;
            }, _self.processTelemetry = function(env, itemCtx) {
                itemCtx || (itemCtx = defItemCtx);
                var identifier = plugin ? plugin.identifier : "TelemetryPluginChain";
                doPerf(itemCtx ? itemCtx.core() : null, function() {
                    return identifier + ":processTelemetry";
                }, function() {
                    if (plugin && _hasProcessTelemetry) {
                        _self._hasRun = !0;
                        try {
                            itemCtx.setNext(_nextProxy), _hasSetNext && plugin.setNextPlugin(_nextProxy), _nextProxy && (_nextProxy._hasRun = !1), 
                            plugin.processTelemetry(env, itemCtx);
                        } catch (error) {
                            var hasRun = _nextProxy && _nextProxy._hasRun;
                            _nextProxy && hasRun || itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.PluginException, "Plugin [" + plugin.identifier + "] failed during processTelemetry - " + dumpObj(error)), 
                            _nextProxy && !hasRun && _nextProxy.processTelemetry(env, itemCtx);
                        }
                    } else _nextProxy && (_self._hasRun = !0, _nextProxy.processTelemetry(env, itemCtx));
                }, function() {
                    return {
                        item: env
                    };
                }, !env.sync);
            };
        };
        function _createProxyChain(plugins, itemCtx) {
            var proxies = [];
            if (plugins && plugins.length > 0) for (var lastProxy = null, idx = 0; idx < plugins.length; idx++) {
                var thePlugin = plugins[idx];
                if (thePlugin && isFunction(thePlugin.processTelemetry)) {
                    var newProxy = new TelemetryPluginChain(thePlugin, itemCtx);
                    proxies.push(newProxy), lastProxy && lastProxy.setNext(newProxy), lastProxy = newProxy;
                }
            }
            return proxies.length > 0 ? proxies[0] : null;
        }
        var ProcessTelemetryContext = function ProcessTelemetryContext(plugins, config, core, startAt) {
            var _self = this, _nextProxy = null;
            null !== startAt && (plugins && isFunction(plugins.getPlugin) ? _nextProxy = function(proxy, itemCtx, startAt) {
                var plugins = [], add = !startAt;
                if (proxy) for (;proxy; ) {
                    var thePlugin = proxy.getPlugin();
                    (add || thePlugin === startAt) && (add = !0, plugins.push(thePlugin)), proxy = proxy.getNext();
                }
                return add || plugins.push(startAt), _createProxyChain(plugins, itemCtx);
            }(plugins, _self, startAt || plugins.getPlugin()) : startAt ? _nextProxy = function(srcPlugins, itemCtx, startAt) {
                var plugins = srcPlugins, add = !1;
                return startAt && srcPlugins && (plugins = [], arrForEach(srcPlugins, function(thePlugin) {
                    (add || thePlugin === startAt) && (add = !0, plugins.push(thePlugin));
                })), startAt && !add && (plugins || (plugins = []), plugins.push(startAt)), _createProxyChain(plugins, itemCtx);
            }(plugins, _self, startAt) : isUndefined(startAt) && (_nextProxy = _createProxyChain(plugins, _self))), 
            _self.core = function() {
                return core;
            }, _self.diagLog = function() {
                return safeGetLogger(core, config);
            }, _self.getCfg = function() {
                return config;
            }, _self.getExtCfg = function(identifier, defaultValue) {
                var theConfig;
                if (void 0 === defaultValue && (defaultValue = {}), config) {
                    var extConfig = config.extensionConfig;
                    extConfig && identifier && (theConfig = extConfig[identifier]);
                }
                return theConfig || defaultValue;
            }, _self.getConfig = function(identifier, field, defaultValue) {
                var theValue;
                void 0 === defaultValue && (defaultValue = !1);
                var extConfig = _self.getExtCfg(identifier, null);
                return extConfig && !isNullOrUndefined(extConfig[field]) ? theValue = extConfig[field] : config && !isNullOrUndefined(config[field]) && (theValue = config[field]), 
                isNullOrUndefined(theValue) ? defaultValue : theValue;
            }, _self.hasNext = function() {
                return null != _nextProxy;
            }, _self.getNext = function() {
                return _nextProxy;
            }, _self.setNext = function(nextPlugin) {
                _nextProxy = nextPlugin;
            }, _self.processNext = function(env) {
                var nextPlugin = _nextProxy;
                nextPlugin && (_nextProxy = nextPlugin.getNext(), nextPlugin.processTelemetry(env, _self));
            }, _self.createNew = function(plugins, startAt) {
                return void 0 === plugins && (plugins = null), new ProcessTelemetryContext(plugins || _nextProxy, config, core, startAt);
            };
        }, BaseTelemetryPlugin = function() {
            function BaseTelemetryPlugin() {
                var _self = this, _isinitialized = !1, _rootCtx = null, _nextPlugin = null;
                _self.core = null, _self.diagLog = function(itemCtx) {
                    return _self._getTelCtx(itemCtx).diagLog();
                }, _self.isInitialized = function() {
                    return _isinitialized;
                }, _self.setInitialized = function(isInitialized) {
                    _isinitialized = isInitialized;
                }, _self.setNextPlugin = function(next) {
                    _nextPlugin = next;
                }, _self.processNext = function(env, itemCtx) {
                    itemCtx ? itemCtx.processNext(env) : _nextPlugin && isFunction(_nextPlugin.processTelemetry) && _nextPlugin.processTelemetry(env, null);
                }, _self._getTelCtx = function(currentCtx) {
                    void 0 === currentCtx && (currentCtx = null);
                    var itemCtx = currentCtx;
                    return itemCtx || (itemCtx = (_rootCtx || new ProcessTelemetryContext(null, {}, _self.core)).createNew(null, _nextPlugin && _nextPlugin.getPlugin ? _nextPlugin.getPlugin : _nextPlugin)), 
                    itemCtx;
                }, _self._baseTelInit = function(config, core, extensions, pluginChain) {
                    config && setValue(config, "extensionConfig", [], null, isNullOrUndefined), !pluginChain && core && (pluginChain = core.getProcessTelContext().getNext());
                    var nextPlugin = _nextPlugin;
                    _nextPlugin && _nextPlugin.getPlugin && (nextPlugin = _nextPlugin.getPlugin()), 
                    _self.core = core, _rootCtx = new ProcessTelemetryContext(pluginChain, config, core, nextPlugin), 
                    _isinitialized = !0;
                };
            }
            return BaseTelemetryPlugin.prototype.initialize = function(config, core, extensions, pluginChain) {
                this._baseTelInit(config, core, extensions, pluginChain);
            }, BaseTelemetryPlugin;
        }();
        function initializePlugins(processContext, extensions) {
            for (var initPlugins = [], lastPlugin = null, proxy = processContext.getNext(); proxy; ) {
                var thePlugin = proxy.getPlugin();
                thePlugin && (lastPlugin && isFunction(lastPlugin.setNextPlugin) && isFunction(thePlugin.processTelemetry) && lastPlugin.setNextPlugin(thePlugin), 
                isFunction(thePlugin.isInitialized) && thePlugin.isInitialized() || initPlugins.push(thePlugin), 
                lastPlugin = thePlugin, proxy = proxy.getNext());
            }
            arrForEach(initPlugins, function(thePlugin) {
                thePlugin.initialize(processContext.getCfg(), processContext.core(), extensions, processContext.getNext());
            });
        }
        function sortPlugins(plugins) {
            return plugins.sort(function(extA, extB) {
                var result = 0, bHasProcess = isFunction(extB.processTelemetry);
                return isFunction(extA.processTelemetry) ? result = bHasProcess ? extA.priority - extB.priority : 1 : bHasProcess && (result = -1), 
                result;
            });
        }
        var ChannelController = function(_super) {
            function ChannelController() {
                var _channelQueue, _this = _super.call(this) || this;
                function _addChannelQueue(queue) {
                    queue && queue.length > 0 && (function(queue) {
                        arrForEach(queue, function(queueItem) {
                            queueItem.priority < 500 && throwError("Channel has invalid priority" + queueItem.identifier);
                        });
                    }(queue = queue.sort(function(a, b) {
                        return a.priority - b.priority;
                    })), _channelQueue.push(queue));
                }
                return _this.identifier = "ChannelControllerPlugin", _this.priority = 500, dynamicProto(ChannelController, _this, function(_self, _base) {
                    _self.setNextPlugin = function(next) {}, _self.processTelemetry = function(item, itemCtx) {
                        _channelQueue && arrForEach(_channelQueue, function(queues) {
                            queues.length > 0 && _this._getTelCtx(itemCtx).createNew(queues).processNext(item);
                        });
                    }, _self.getChannelControls = function() {
                        return _channelQueue;
                    }, _self.initialize = function(config, core, extensions) {
                        _self.isInitialized() || (_base.initialize(config, core, extensions), function(channels, extensions) {
                            if (_channelQueue = [], channels && arrForEach(channels, function(queue) {
                                return _addChannelQueue(queue);
                            }), extensions) {
                                var extensionQueue_1 = [];
                                arrForEach(extensions, function(plugin) {
                                    plugin.priority > 500 && extensionQueue_1.push(plugin);
                                }), _addChannelQueue(extensionQueue_1);
                            }
                        }((config || {}).channels, extensions), arrForEach(_channelQueue, function(queue) {
                            return initializePlugins(new ProcessTelemetryContext(queue, config, core), extensions);
                        }));
                    };
                }), _this;
            }
            var proto;
            return __extendsFn(ChannelController, _super), ChannelController._staticInit = (objDefineAccessors(proto = ChannelController.prototype, "ChannelControls", proto.getChannelControls), 
            void objDefineAccessors(proto, "channelQueue", proto.getChannelControls)), ChannelController;
        }(BaseTelemetryPlugin), strToGMTString = "toGMTString", strToUTCString = "toUTCString", strCookie = "cookie", strExpires = "expires", strEnabled = "enabled", strIsCookieUseDisabled = "isCookieUseDisabled", strDisableCookiesUsage = "disableCookiesUsage", strConfigCookieMgr = "_ckMgr", strEmpty = "", _supportsCookies = null, _allowUaSameSite = null, _parsedCookieValue = null, _doc = EnvUtils_getDocument(), _cookieCache = {}, _globalCookieConfig = {};
        function _gblCookieMgr(config, logger) {
            var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];
            return inst || (inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger), 
            _globalCookieConfig[strConfigCookieMgr] = inst), inst;
        }
        function _isMgrEnabled(cookieMgr) {
            return !cookieMgr || cookieMgr.isEnabled();
        }
        function safeGetCookieMgr(core, config) {
            var cookieMgr;
            if (core) cookieMgr = core.getCookieMgr(); else if (config) {
                var cookieCfg = config.cookieCfg;
                cookieMgr = cookieCfg[strConfigCookieMgr] ? cookieCfg[strConfigCookieMgr] : createCookieMgr(config);
            }
            return cookieMgr || (cookieMgr = _gblCookieMgr(config, (core || {}).logger)), cookieMgr;
        }
        function createCookieMgr(rootConfig, logger) {
            var cookieMgrConfig = function(rootConfig) {
                var cookieMgrCfg = rootConfig.cookieCfg = rootConfig.cookieCfg || {};
                if (setValue(cookieMgrCfg, "domain", rootConfig.cookieDomain, isNotNullOrUndefined, isNullOrUndefined), 
                setValue(cookieMgrCfg, "path", rootConfig.cookiePath || "/", null, isNullOrUndefined), 
                isNullOrUndefined(cookieMgrCfg[strEnabled])) {
                    var cookieEnabled = void 0;
                    isUndefined(rootConfig[strIsCookieUseDisabled]) || (cookieEnabled = !rootConfig[strIsCookieUseDisabled]), 
                    isUndefined(rootConfig[strDisableCookiesUsage]) || (cookieEnabled = !rootConfig[strDisableCookiesUsage]), 
                    cookieMgrCfg[strEnabled] = cookieEnabled;
                }
                return cookieMgrCfg;
            }(rootConfig || _globalCookieConfig), _path = cookieMgrConfig.path || "/", _domain = cookieMgrConfig.domain, _enabled = !1 !== cookieMgrConfig[strEnabled], cookieMgr = {
                isEnabled: function() {
                    var enabled = _enabled && areCookiesSupported(logger), gblManager = _globalCookieConfig[strConfigCookieMgr];
                    return enabled && gblManager && cookieMgr !== gblManager && (enabled = _isMgrEnabled(gblManager)), 
                    enabled;
                },
                setEnabled: function(value) {
                    _enabled = !1 !== value;
                },
                set: function(name, value, maxAgeSec, domain, path) {
                    var result = !1;
                    if (_isMgrEnabled(cookieMgr)) {
                        var values = {}, theValue = strTrim(value || strEmpty), idx = theValue.indexOf(";");
                        if (-1 !== idx && (theValue = strTrim(value.substring(0, idx)), values = _extractParts(value.substring(idx + 1))), 
                        setValue(values, "domain", domain || _domain, isTruthy, isUndefined), !isNullOrUndefined(maxAgeSec)) {
                            var _isIE = isIE();
                            if (isUndefined(values[strExpires])) {
                                var expireMs = dateNow() + 1e3 * maxAgeSec;
                                if (expireMs > 0) {
                                    var expiry = new Date;
                                    expiry.setTime(expireMs), setValue(values, strExpires, _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || strEmpty, isTruthy);
                                }
                            }
                            _isIE || setValue(values, "max-age", strEmpty + maxAgeSec, null, isUndefined);
                        }
                        var location_1 = getLocation();
                        location_1 && "https:" === location_1.protocol && (setValue(values, "secure", null, null, isUndefined), 
                        null === _allowUaSameSite && (_allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {}).userAgent)), 
                        _allowUaSameSite && setValue(values, "SameSite", "None", null, isUndefined)), setValue(values, "path", path || _path, null, isUndefined), 
                        (cookieMgrConfig.setCookie || _setCookieValue)(name, _formatCookieValue(theValue, values)), 
                        result = !0;
                    }
                    return result;
                },
                get: function(name) {
                    var value = strEmpty;
                    return _isMgrEnabled(cookieMgr) && (value = (cookieMgrConfig.getCookie || _getCookieValue)(name)), 
                    value;
                },
                del: function(name, path) {
                    var result = !1;
                    return _isMgrEnabled(cookieMgr) && (result = cookieMgr.purge(name, path)), result;
                },
                purge: function(name, path) {
                    var _a, result = !1;
                    if (areCookiesSupported(logger)) {
                        var values = ((_a = {}).path = path || "/", _a[strExpires] = "Thu, 01 Jan 1970 00:00:01 GMT", 
                        _a);
                        isIE() || (values["max-age"] = "0"), (cookieMgrConfig.delCookie || _setCookieValue)(name, _formatCookieValue(strEmpty, values)), 
                        result = !0;
                    }
                    return result;
                }
            };
            return cookieMgr[strConfigCookieMgr] = cookieMgr, cookieMgr;
        }
        function areCookiesSupported(logger) {
            if (null === _supportsCookies) {
                _supportsCookies = !1;
                try {
                    _supportsCookies = void 0 !== (_doc || {})[strCookie];
                } catch (e) {
                    logger && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotAccessCookie, "Cannot access document.cookie - " + getExceptionName(e), {
                        exception: dumpObj(e)
                    });
                }
            }
            return _supportsCookies;
        }
        function _extractParts(theValue) {
            var values = {};
            return theValue && theValue.length && arrForEach(strTrim(theValue).split(";"), function(thePart) {
                if (thePart = strTrim(thePart || strEmpty)) {
                    var idx = thePart.indexOf("=");
                    -1 === idx ? values[thePart] = null : values[strTrim(thePart.substring(0, idx))] = strTrim(thePart.substring(idx + 1));
                }
            }), values;
        }
        function _formatDate(theDate, func) {
            return isFunction(theDate[func]) ? theDate[func]() : null;
        }
        function _formatCookieValue(value, values) {
            var cookieValue = value || strEmpty;
            return objForEachKey(values, function(name, theValue) {
                cookieValue += "; " + name + (isNullOrUndefined(theValue) ? strEmpty : "=" + theValue);
            }), cookieValue;
        }
        function _getCookieValue(name) {
            var cookieValue = strEmpty;
            if (_doc) {
                var theCookie = _doc[strCookie] || strEmpty;
                _parsedCookieValue !== theCookie && (_cookieCache = _extractParts(theCookie), _parsedCookieValue = theCookie), 
                cookieValue = strTrim(_cookieCache[name] || strEmpty);
            }
            return cookieValue;
        }
        function _setCookieValue(name, cookieValue) {
            _doc && (_doc[strCookie] = name + "=" + cookieValue);
        }
        function uaDisallowsSameSiteNone(userAgent) {
            return !(!HelperFuncs_isString(userAgent) || !strContains(userAgent, "CPU iPhone OS 12") && !strContains(userAgent, "iPad; CPU OS 12") && !(strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") && strContains(userAgent, "Version/") && strContains(userAgent, "Safari")) && (!strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") || !function(value, search) {
                var result = !1;
                return value && search && !(result = value === search) && (result = _strEndsWith ? value[cStrEndsWith](search) : function(value, search) {
                    var result = !1, valLen = value ? value.length : 0;
                    if (valLen && valLen >= 40 && !(result = value === search)) {
                        for (var pos = valLen - 1, lp = 39; lp >= 0; lp--) {
                            if (value[pos] != search[lp]) return !1;
                            pos--;
                        }
                        result = !0;
                    }
                    return result;
                }(value, search)), result;
            }(userAgent, "AppleWebKit/605.1.15 (KHTML, like Gecko)")) && !strContains(userAgent, "Chrome/5") && !strContains(userAgent, "Chrome/6") && (!strContains(userAgent, "UnrealEngine") || strContains(userAgent, "Chrome")) && !strContains(userAgent, "UCBrowser/12") && !strContains(userAgent, "UCBrowser/11"));
        }
        function _createPerfManager(core, notificationMgr) {
            return new PerfManager(notificationMgr);
        }
        var BaseCore = function BaseCore() {
            var _eventQueue, _channelController, _notificationManager, _perfManager, _cookieManager, _isInitialized = !1;
            dynamicProto(BaseCore, this, function(_self) {
                _self._extensions = new Array, _channelController = new ChannelController, _self.logger = new DiagnosticLogger({
                    loggingLevelConsole: LoggingSeverity.CRITICAL
                }), _eventQueue = [], _self.isInitialized = function() {
                    return _isInitialized;
                }, _self.initialize = function(config, extensions, logger, notificationManager) {
                    _self.isInitialized() && throwError("Core should not be initialized more than once"), 
                    config && !isNullOrUndefined(config.instrumentationKey) || throwError("Please provide instrumentation key"), 
                    _notificationManager = notificationManager, _self._notificationManager = notificationManager, 
                    _self.config = config || {}, notificationManager && !0 !== _self.config.disableDbgExt && notificationManager.addNotificationListener(function(config) {
                        if (!_debugListener) {
                            _debugListener = {};
                            for (var lp = 0; lp < listenerFuncs.length; lp++) _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config);
                        }
                        return _debugListener;
                    }(config)), _self.config.enablePerfMgr && setValue(_self.config, "createPerfMgr", _createPerfManager), 
                    config.extensions = isNullOrUndefined(config.extensions) ? [] : config.extensions, 
                    getSetValue(config, "extensionConfig").NotificationManager = notificationManager, 
                    logger && (_self.logger = logger);
                    var allExtensions = [];
                    allExtensions.push.apply(allExtensions, __spreadArrayFn(__spreadArrayFn([], extensions), config.extensions)), 
                    allExtensions = sortPlugins(allExtensions);
                    var coreExtensions = [], channelExtensions = [], extPriorities = {};
                    arrForEach(allExtensions, function(ext) {
                        (isNullOrUndefined(ext) || isNullOrUndefined(ext.initialize)) && throwError("Extensions must provide callback to initialize");
                        var extPriority = ext.priority, identifier = ext.identifier;
                        ext && extPriority && (isNullOrUndefined(extPriorities[extPriority]) ? extPriorities[extPriority] = identifier : logger.warnToConsole("Two extensions have same priority #" + extPriority + " - " + extPriorities[extPriority] + ", " + identifier)), 
                        !extPriority || extPriority < _channelController.priority ? coreExtensions.push(ext) : channelExtensions.push(ext);
                    }), allExtensions.push(_channelController), coreExtensions.push(_channelController), 
                    allExtensions = sortPlugins(allExtensions), _self._extensions = allExtensions, initializePlugins(new ProcessTelemetryContext([ _channelController ], config, _self), allExtensions), 
                    initializePlugins(new ProcessTelemetryContext(coreExtensions, config, _self), allExtensions), 
                    _self._extensions = coreExtensions, 0 === _self.getTransmissionControls().length && throwError("No channels available"), 
                    _isInitialized = !0, _self.releaseQueue();
                }, _self.getTransmissionControls = function() {
                    return _channelController.getChannelControls();
                }, _self.track = function(telemetryItem) {
                    setValue(telemetryItem, "iKey", _self.config.instrumentationKey, null, isNotTruthy), 
                    setValue(telemetryItem, "time", toISOString(new Date), null, isNotTruthy), setValue(telemetryItem, "ver", "4.0", null, isNullOrUndefined), 
                    _self.isInitialized() ? _self.getProcessTelContext().processNext(telemetryItem) : _eventQueue.push(telemetryItem);
                }, _self.getProcessTelContext = function() {
                    var extensions = _self._extensions, thePlugins = extensions;
                    return extensions && 0 !== extensions.length || (thePlugins = [ _channelController ]), 
                    new ProcessTelemetryContext(thePlugins, _self.config, _self);
                }, _self.getNotifyMgr = function() {
                    return _notificationManager || (_notificationManager = objCreateFn({
                        addNotificationListener: function(listener) {},
                        removeNotificationListener: function(listener) {},
                        eventsSent: function(events) {},
                        eventsDiscarded: function(events, reason) {},
                        eventsSendRequest: function(sendReason, isAsync) {}
                    }), _self._notificationManager = _notificationManager), _notificationManager;
                }, _self.getCookieMgr = function() {
                    return _cookieManager || (_cookieManager = createCookieMgr(_self.config, _self.logger)), 
                    _cookieManager;
                }, _self.setCookieMgr = function(cookieMgr) {
                    _cookieManager = cookieMgr;
                }, _self.getPerfMgr = function() {
                    return _perfManager || _self.config && _self.config.enablePerfMgr && isFunction(_self.config.createPerfMgr) && (_perfManager = _self.config.createPerfMgr(_self, _self.getNotifyMgr())), 
                    _perfManager || null;
                }, _self.setPerfMgr = function(perfMgr) {
                    _perfManager = perfMgr;
                }, _self.eventCnt = function() {
                    return _eventQueue.length;
                }, _self.releaseQueue = function() {
                    _eventQueue.length > 0 && (arrForEach(_eventQueue, function(event) {
                        _self.getProcessTelContext().processNext(event);
                    }), _eventQueue = []);
                };
            });
        }, NotificationManager = function NotificationManager(config) {
            this.listeners = [];
            var perfEvtsSendAll = !!(config || {}).perfEvtsSendAll;
            dynamicProto(NotificationManager, this, function(_self) {
                _self.addNotificationListener = function(listener) {
                    _self.listeners.push(listener);
                }, _self.removeNotificationListener = function(listener) {
                    for (var index = HelperFuncs_arrIndexOf(_self.listeners, listener); index > -1; ) _self.listeners.splice(index, 1), 
                    index = HelperFuncs_arrIndexOf(_self.listeners, listener);
                }, _self.eventsSent = function(events) {
                    arrForEach(_self.listeners, function(listener) {
                        listener && listener.eventsSent && setTimeout(function() {
                            return listener.eventsSent(events);
                        }, 0);
                    });
                }, _self.eventsDiscarded = function(events, reason) {
                    arrForEach(_self.listeners, function(listener) {
                        listener && listener.eventsDiscarded && setTimeout(function() {
                            return listener.eventsDiscarded(events, reason);
                        }, 0);
                    });
                }, _self.eventsSendRequest = function(sendReason, isAsync) {
                    arrForEach(_self.listeners, function(listener) {
                        if (listener && listener.eventsSendRequest) if (isAsync) setTimeout(function() {
                            return listener.eventsSendRequest(sendReason, isAsync);
                        }, 0); else try {
                            listener.eventsSendRequest(sendReason, isAsync);
                        } catch (e) {}
                    });
                }, _self.perfEvent = function(perfEvent) {
                    perfEvent && (!perfEvtsSendAll && perfEvent.isChildEvt() || arrForEach(_self.listeners, function(listener) {
                        if (listener && listener.perfEvent) if (perfEvent.isAsync) setTimeout(function() {
                            return listener.perfEvent(perfEvent);
                        }, 0); else try {
                            listener.perfEvent(perfEvent);
                        } catch (e) {}
                    }));
                };
            });
        }, AppInsightsCore = function(_super) {
            function AppInsightsCore() {
                var _this = _super.call(this) || this, _internalLogPoller = 0;
                return dynamicProto(AppInsightsCore, _this, function(_self, _base) {
                    function _notifyInvalidEvent(telemetryItem) {
                        var manager = _self.getNotifyMgr();
                        manager && manager.eventsDiscarded([ telemetryItem ], 2);
                    }
                    _self.initialize = function(config, extensions, logger, notificationManager) {
                        _base.initialize(config, extensions, logger || new DiagnosticLogger(config), notificationManager || new NotificationManager(config));
                    }, _self.track = function(telemetryItem) {
                        doPerf(_self.getPerfMgr(), function() {
                            return "AppInsightsCore:track";
                        }, function() {
                            null === telemetryItem && (_notifyInvalidEvent(telemetryItem), throwError("Invalid telemetry item")), 
                            function(telemetryItem) {
                                if (isNullOrUndefined(telemetryItem.name)) throw _notifyInvalidEvent(telemetryItem), 
                                Error("telemetry name required");
                            }(telemetryItem), _base.track(telemetryItem);
                        }, function() {
                            return {
                                item: telemetryItem
                            };
                        }, !telemetryItem.sync);
                    }, _self.addNotificationListener = function(listener) {
                        var manager = _self.getNotifyMgr();
                        manager && manager.addNotificationListener(listener);
                    }, _self.removeNotificationListener = function(listener) {
                        var manager = _self.getNotifyMgr();
                        manager && manager.removeNotificationListener(listener);
                    }, _self.pollInternalLogs = function(eventName) {
                        var interval = _self.config.diagnosticLogInterval;
                        return interval && interval > 0 || (interval = 1e4), _internalLogPoller && _self.stopPollingInternalLogs(), 
                        _internalLogPoller = setInterval(function() {
                            var queue = _self.logger ? _self.logger.queue : [];
                            arrForEach(queue, function(logMessage) {
                                var item = {
                                    name: eventName || "InternalMessageId: " + logMessage.messageId,
                                    iKey: _self.config.instrumentationKey,
                                    time: toISOString(new Date),
                                    baseType: _InternalLogMessage.dataType,
                                    baseData: {
                                        message: logMessage.message
                                    }
                                };
                                _self.track(item);
                            }), queue.length = 0;
                        }, interval);
                    }, _self.stopPollingInternalLogs = function() {
                        _internalLogPoller && (clearInterval(_internalLogPoller), _internalLogPoller = 0);
                    };
                }), _this;
            }
            return __extendsFn(AppInsightsCore, _super), AppInsightsCore;
        }(BaseCore), UInt32Mask = 4294967296, MaxUInt32 = 4294967295, _mwcSeeded = !1, _mwcW = 123456789, _mwcZ = 987654321;
        function _mwcSeed(seedValue) {
            seedValue < 0 && (seedValue >>>= 0), _mwcW = 123456789 + seedValue & MaxUInt32, 
            _mwcZ = 987654321 - seedValue & MaxUInt32, _mwcSeeded = !0;
        }
        function _autoSeedMwc() {
            try {
                var now = 2147483647 & dateNow();
                _mwcSeed((Math.random() * UInt32Mask ^ now) + now);
            } catch (e) {}
        }
        function randomValue(maxValue) {
            return maxValue > 0 ? Math.floor(RandomHelper_random32() / MaxUInt32 * (maxValue + 1)) >>> 0 : 0;
        }
        function RandomHelper_random32(signed) {
            var value, c = getGlobalInst(strCrypto) || getGlobalInst(strMsCrypto);
            return c && c.getRandomValues ? value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32 : isIE() ? (_mwcSeeded || _autoSeedMwc(), 
            value = mwcRandom32() & MaxUInt32) : value = Math.floor(UInt32Mask * Math.random() | 0), 
            signed || (value >>>= 0), value;
        }
        function mwcRandom32(signed) {
            var value = ((_mwcZ = 36969 * (65535 & _mwcZ) + (_mwcZ >> 16) & MaxUInt32) << 16) + (65535 & (_mwcW = 18e3 * (65535 & _mwcW) + (_mwcW >> 16) & MaxUInt32)) >>> 0 & MaxUInt32;
            return signed || (value >>>= 0), value;
        }
        var _canUseCookies, _cookieMgrs = null;
        function addEventHandler(eventName, callback) {
            var result = !1, w = getWindow();
            w && (result = attachEvent(w, eventName, callback), result = attachEvent(w.body, eventName, callback) || result);
            var doc = EnvUtils_getDocument();
            return doc && (result = attachEvent(doc, eventName, callback) || result), result;
        }
        function addEventListeners(events, listener, excludeEvents) {
            var added = !1;
            if (listener && events && isArray(events)) {
                var excluded_1 = [];
                arrForEach(events, function(name) {
                    HelperFuncs_isString(name) && (excludeEvents && -1 !== HelperFuncs_arrIndexOf(excludeEvents, name) ? excluded_1.push(name) : added = addEventHandler(name, listener) || added);
                }), !added && excluded_1.length > 0 && (added = addEventListeners(excluded_1, listener));
            }
            return added;
        }
        function addPageUnloadEventListener(listener, excludeEvents) {
            return addEventListeners([ "beforeunload", "unload", "pagehide" ], listener, excludeEvents);
        }
        function addPageHideEventListener(listener, excludeEvents) {
            var pageUnloadAdded = !1;
            return excludeEvents && -1 !== HelperFuncs_arrIndexOf(excludeEvents, "pagehide") || (pageUnloadAdded = addEventHandler("pagehide", listener)), 
            excludeEvents && -1 !== HelperFuncs_arrIndexOf(excludeEvents, "visibilitychange") || (pageUnloadAdded = addEventHandler("visibilitychange", function(evt) {
                var doc = EnvUtils_getDocument();
                listener && doc && "hidden" === doc.visibilityState && listener(evt);
            }) || pageUnloadAdded), !pageUnloadAdded && excludeEvents && (pageUnloadAdded = addPageHideEventListener(listener)), 
            pageUnloadAdded;
        }
        function newId(maxLength) {
            void 0 === maxLength && (maxLength = 22);
            for (var number = RandomHelper_random32() >>> 0, chars = 0, result = ""; result.length < maxLength; ) chars++, 
            result += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(63 & number), 
            number >>>= 6, 5 === chars && (number = (RandomHelper_random32() << 2 & 4294967295 | 3 & number) >>> 0, 
            chars = 0);
            return result;
        }
        function generateW3CId() {
            for (var tmp, hexValues = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" ], oct = "", a = 0; a < 4; a++) oct += hexValues[15 & (tmp = RandomHelper_random32())] + hexValues[tmp >> 4 & 15] + hexValues[tmp >> 8 & 15] + hexValues[tmp >> 12 & 15] + hexValues[tmp >> 16 & 15] + hexValues[tmp >> 20 & 15] + hexValues[tmp >> 24 & 15] + hexValues[tmp >> 28 & 15];
            var clockSequenceHi = hexValues[8 + (3 & RandomHelper_random32()) | 0];
            return oct.substr(0, 8) + oct.substr(9, 4) + "4" + oct.substr(13, 3) + clockSequenceHi + oct.substr(16, 3) + oct.substr(19, 12);
        }
        var CoreUtils = {
            _canUseCookies: void 0,
            isTypeof: function(value, theType) {
                return typeof value === theType;
            },
            isUndefined,
            isNullOrUndefined,
            hasOwnProperty: HelperFuncs_hasOwnProperty,
            isFunction,
            isObject,
            isDate,
            isArray,
            isError,
            isString: HelperFuncs_isString,
            isNumber,
            isBoolean,
            toISOString,
            arrForEach,
            arrIndexOf: HelperFuncs_arrIndexOf,
            arrMap,
            arrReduce,
            strTrim,
            objCreate: objCreateFn,
            objKeys,
            objDefineAccessors,
            addEventHandler,
            dateNow,
            isIE,
            disableCookies,
            newGuid: function() {
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(GuidRegex, function(c) {
                    var r = 0 | randomValue(15);
                    return ("x" === c ? r : 3 & r | 8).toString(16);
                });
            },
            perfNow: function() {
                var perf = getPerformance();
                return perf && perf.now ? perf.now() : dateNow();
            },
            newId,
            randomValue,
            random32: RandomHelper_random32,
            mwcRandomSeed: function(value) {
                value ? _mwcSeed(value) : _autoSeedMwc();
            },
            mwcRandom32,
            generateW3CId
        }, GuidRegex = /[xy]/g;
        function _legacyCookieMgr(config, logger) {
            var cookieMgr = _gblCookieMgr(config, logger), legacyCanUseCookies = CoreUtils._canUseCookies;
            return null === _cookieMgrs && (_cookieMgrs = [], _canUseCookies = legacyCanUseCookies, 
            objDefineAccessors(CoreUtils, "_canUseCookies", function() {
                return _canUseCookies;
            }, function(value) {
                _canUseCookies = value, arrForEach(_cookieMgrs, function(mgr) {
                    mgr.setEnabled(value);
                });
            })), -1 === HelperFuncs_arrIndexOf(_cookieMgrs, cookieMgr) && _cookieMgrs.push(cookieMgr), 
            isBoolean(legacyCanUseCookies) && cookieMgr.setEnabled(legacyCanUseCookies), isBoolean(_canUseCookies) && cookieMgr.setEnabled(_canUseCookies), 
            cookieMgr;
        }
        function disableCookies() {
            _legacyCookieMgr().setEnabled(!1);
        }
        function dataSanitizeKeyAndAddUniqueness(logger, key, map) {
            var origLength = key.length, field = dataSanitizeKey(logger, key);
            if (field.length !== origLength) {
                for (var i = 0, uniqueField = field; void 0 !== map[uniqueField]; ) i++, uniqueField = field.substring(0, 147) + dsPadNumber(i);
                field = uniqueField;
            }
            return field;
        }
        function dataSanitizeKey(logger, name) {
            var nameTrunc;
            return name && (name = strTrim(name.toString())).length > 150 && (nameTrunc = name.substring(0, 150), 
            logger && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.NameTooLong, "name is too long.  It has been truncated to 150 characters.", {
                name
            }, !0)), nameTrunc || name;
        }
        function dataSanitizeString(logger, value, maxLength) {
            var valueTrunc;
            return void 0 === maxLength && (maxLength = 1024), value && (maxLength = maxLength || 1024, 
            (value = strTrim(value)).toString().length > maxLength && (valueTrunc = value.toString().substring(0, maxLength), 
            logger && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StringValueTooLong, "string value is too long. It has been truncated to " + maxLength + " characters.", {
                value
            }, !0))), valueTrunc || value;
        }
        function dataSanitizeUrl(logger, url) {
            return dataSanitizeInput(logger, url, 2048, _InternalMessageId.UrlTooLong);
        }
        function dataSanitizeMessage(logger, message) {
            var messageTrunc;
            return message && message.length > 32768 && (messageTrunc = message.substring(0, 32768), 
            logger && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.MessageTruncated, "message is too long, it has been truncated to 32768 characters.", {
                message
            }, !0)), messageTrunc || message;
        }
        function dataSanitizeException(logger, exception) {
            var exceptionTrunc;
            if (exception) {
                var value = "" + exception;
                value.length > 32768 && (exceptionTrunc = value.substring(0, 32768), logger && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ExceptionTruncated, "exception is too long, it has been truncated to 32768 characters.", {
                    exception
                }, !0));
            }
            return exceptionTrunc || exception;
        }
        function dataSanitizeProperties(logger, properties) {
            if (properties) {
                var tempProps_1 = {};
                objForEachKey(properties, function(prop, value) {
                    if (isObject(value) && hasJSON()) try {
                        value = getJSON().stringify(value);
                    } catch (e) {
                        logger && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, "custom property is not valid", {
                            exception: e
                        }, !0);
                    }
                    value = dataSanitizeString(logger, value, 8192), prop = dataSanitizeKeyAndAddUniqueness(logger, prop, tempProps_1), 
                    tempProps_1[prop] = value;
                }), properties = tempProps_1;
            }
            return properties;
        }
        function dataSanitizeMeasurements(logger, measurements) {
            if (measurements) {
                var tempMeasurements_1 = {};
                objForEachKey(measurements, function(measure, value) {
                    measure = dataSanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements_1), 
                    tempMeasurements_1[measure] = value;
                }), measurements = tempMeasurements_1;
            }
            return measurements;
        }
        function dataSanitizeId(logger, id) {
            return id ? dataSanitizeInput(logger, id, 128, _InternalMessageId.IdTooLong).toString() : id;
        }
        function dataSanitizeInput(logger, input, maxLength, _msgId) {
            var inputTrunc;
            return input && (input = strTrim(input)).length > maxLength && (inputTrunc = input.substring(0, maxLength), 
            logger && logger.throwInternal(LoggingSeverity.WARNING, _msgId, "input is too long, it has been truncated to " + maxLength + " characters.", {
                data: input
            }, !0)), inputTrunc || input;
        }
        function dsPadNumber(num) {
            var s = "00" + num;
            return s.substr(s.length - 3);
        }
        var DataPointType, DataSanitizer = {
            MAX_NAME_LENGTH: 150,
            MAX_ID_LENGTH: 128,
            MAX_PROPERTY_LENGTH: 8192,
            MAX_STRING_LENGTH: 1024,
            MAX_URL_LENGTH: 2048,
            MAX_MESSAGE_LENGTH: 32768,
            MAX_EXCEPTION_LENGTH: 32768,
            sanitizeKeyAndAddUniqueness: dataSanitizeKeyAndAddUniqueness,
            sanitizeKey: dataSanitizeKey,
            sanitizeString: dataSanitizeString,
            sanitizeUrl: dataSanitizeUrl,
            sanitizeMessage: dataSanitizeMessage,
            sanitizeException: dataSanitizeException,
            sanitizeProperties: dataSanitizeProperties,
            sanitizeMeasurements: dataSanitizeMeasurements,
            sanitizeId: dataSanitizeId,
            sanitizeInput: dataSanitizeInput,
            padNumber: dsPadNumber,
            trim: strTrim
        }, DisabledPropertyName = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation", SampleRate = "sampleRate", TelemetryItemCreator = function() {
            function TelemetryItemCreator() {}
            return TelemetryItemCreator.create = function(item, baseType, envelopeName, logger, customProperties, systemProperties) {
                if (envelopeName = dataSanitizeString(logger, envelopeName) || "not_specified", 
                isNullOrUndefined(item) || isNullOrUndefined(baseType) || isNullOrUndefined(envelopeName)) throw Error("Input doesn't contain all required fields");
                var iKey = "";
                item.iKey && (iKey = item.iKey, delete item.iKey);
                var telemetryItem = {
                    name: envelopeName,
                    time: toISOString(new Date),
                    iKey,
                    ext: systemProperties || {},
                    tags: [],
                    data: {},
                    baseType,
                    baseData: item
                };
                return isNullOrUndefined(customProperties) || objForEachKey(customProperties, function(prop, value) {
                    telemetryItem.data[prop] = value;
                }), telemetryItem;
            }, TelemetryItemCreator;
        }(), EventData = function() {
            this.ver = 2, this.properties = {}, this.measurements = {};
        }, Event_Event = function(_super) {
            function Event(logger, name, properties, measurements) {
                var _this = _super.call(this) || this;
                return _this.aiDataContract = {
                    ver: 1,
                    name: 1,
                    properties: 0,
                    measurements: 0
                }, _this.name = dataSanitizeString(logger, name) || "not_specified", _this.properties = dataSanitizeProperties(logger, properties), 
                _this.measurements = dataSanitizeMeasurements(logger, measurements), _this;
            }
            return __extendsFn(Event, _super), Event.envelopeType = "Microsoft.ApplicationInsights.{0}.Event", 
            Event.dataType = "EventData", Event;
        }(EventData), Trace = function(_super) {
            function Trace(logger, message, severityLevel, properties, measurements) {
                var _this = _super.call(this) || this;
                return _this.aiDataContract = {
                    ver: 1,
                    message: 1,
                    severityLevel: 0,
                    properties: 0
                }, _this.message = dataSanitizeMessage(logger, message = message || "not_specified"), 
                _this.properties = dataSanitizeProperties(logger, properties), _this.measurements = dataSanitizeMeasurements(logger, measurements), 
                severityLevel && (_this.severityLevel = severityLevel), _this;
            }
            return __extendsFn(Trace, _super), Trace.envelopeType = "Microsoft.ApplicationInsights.{0}.Message", 
            Trace.dataType = "MessageData", Trace;
        }(function() {
            this.ver = 2, this.properties = {}, this.measurements = {};
        });
        !function(DataPointType) {
            DataPointType[DataPointType.Measurement = 0] = "Measurement", DataPointType[DataPointType.Aggregation = 1] = "Aggregation";
        }(DataPointType || (DataPointType = {}));
        var DataPoint_DataPoint = function(_super) {
            function DataPoint() {
                var _this = null !== _super && _super.apply(this, arguments) || this;
                return _this.aiDataContract = {
                    name: 1,
                    kind: 0,
                    value: 1,
                    count: 0,
                    min: 0,
                    max: 0,
                    stdDev: 0
                }, _this;
            }
            return __extendsFn(DataPoint, _super), DataPoint;
        }(function() {
            this.kind = DataPointType.Measurement;
        }), Metric = function(_super) {
            function Metric(logger, name, value, count, min, max, stdDev, properties, measurements) {
                var _this = _super.call(this) || this;
                _this.aiDataContract = {
                    ver: 1,
                    metrics: 1,
                    properties: 0
                };
                var dataPoint = new DataPoint_DataPoint;
                return dataPoint.count = count > 0 ? count : void 0, dataPoint.max = isNaN(max) || null === max ? void 0 : max, 
                dataPoint.min = isNaN(min) || null === min ? void 0 : min, dataPoint.name = dataSanitizeString(logger, name) || "not_specified", 
                dataPoint.value = value, dataPoint.stdDev = isNaN(stdDev) || null === stdDev ? void 0 : stdDev, 
                _this.metrics = [ dataPoint ], _this.properties = dataSanitizeProperties(logger, properties), 
                _this.measurements = dataSanitizeMeasurements(logger, measurements), _this;
            }
            return __extendsFn(Metric, _super), Metric.envelopeType = "Microsoft.ApplicationInsights.{0}.Metric", 
            Metric.dataType = "MetricData", Metric;
        }(function() {
            this.ver = 2, this.metrics = [], this.properties = {}, this.measurements = {};
        }), PageViewData = function(_super) {
            function PageViewData() {
                var _this = _super.call(this) || this;
                return _this.ver = 2, _this.properties = {}, _this.measurements = {}, _this;
            }
            return __extendsFn(PageViewData, _super), PageViewData;
        }(EventData);
        function stringToBoolOrDefault(str, defaultValue) {
            return void 0 === defaultValue && (defaultValue = !1), null == str ? defaultValue : "true" === str.toString().toLowerCase();
        }
        function msToTimeSpan(totalms) {
            (isNaN(totalms) || totalms < 0) && (totalms = 0);
            var ms = "" + (totalms = Math.round(totalms)) % 1e3, sec = "" + Math.floor(totalms / 1e3) % 60, min = "" + Math.floor(totalms / 6e4) % 60, hour = "" + Math.floor(totalms / 36e5) % 24, days = Math.floor(totalms / 864e5);
            return (days > 0 ? days + "." : "") + (hour = hour.length < 2 ? "0" + hour : hour) + ":" + (min = min.length < 2 ? "0" + min : min) + ":" + (sec = sec.length < 2 ? "0" + sec : sec) + "." + (1 === ms.length ? "00" + ms : 2 === ms.length ? "0" + ms : ms);
        }
        function getExtensionByName(extensions, identifier) {
            var extension = null;
            return arrForEach(extensions, function(value) {
                if (value.identifier === identifier) return extension = value, -1;
            }), extension;
        }
        function isCrossOriginError(message, url, lineNumber, columnNumber, error) {
            return !error && HelperFuncs_isString(message) && ("Script error." === message || "Script error" === message);
        }
        var PageView = function(_super) {
            function PageView(logger, name, url, durationMs, properties, measurements, id) {
                var _this = _super.call(this) || this;
                return _this.aiDataContract = {
                    ver: 1,
                    name: 0,
                    url: 0,
                    duration: 0,
                    properties: 0,
                    measurements: 0,
                    id: 0
                }, _this.id = dataSanitizeId(logger, id), _this.url = dataSanitizeUrl(logger, url), 
                _this.name = dataSanitizeString(logger, name) || "not_specified", isNaN(durationMs) || (_this.duration = msToTimeSpan(durationMs)), 
                _this.properties = dataSanitizeProperties(logger, properties), _this.measurements = dataSanitizeMeasurements(logger, measurements), 
                _this;
            }
            return __extendsFn(PageView, _super), PageView.envelopeType = "Microsoft.ApplicationInsights.{0}.Pageview", 
            PageView.dataType = "PageviewData", PageView;
        }(PageViewData), PageViewPerformance = function(_super) {
            function PageViewPerformance(logger, name, url, unused, properties, measurements, cs4BaseData) {
                var _this = _super.call(this) || this;
                return _this.aiDataContract = {
                    ver: 1,
                    name: 0,
                    url: 0,
                    duration: 0,
                    perfTotal: 0,
                    networkConnect: 0,
                    sentRequest: 0,
                    receivedResponse: 0,
                    domProcessing: 0,
                    properties: 0,
                    measurements: 0
                }, _this.url = dataSanitizeUrl(logger, url), _this.name = dataSanitizeString(logger, name) || "not_specified", 
                _this.properties = dataSanitizeProperties(logger, properties), _this.measurements = dataSanitizeMeasurements(logger, measurements), 
                cs4BaseData && (_this.domProcessing = cs4BaseData.domProcessing, _this.duration = cs4BaseData.duration, 
                _this.networkConnect = cs4BaseData.networkConnect, _this.perfTotal = cs4BaseData.perfTotal, 
                _this.receivedResponse = cs4BaseData.receivedResponse, _this.sentRequest = cs4BaseData.sentRequest), 
                _this;
            }
            return __extendsFn(PageViewPerformance, _super), PageViewPerformance.envelopeType = "Microsoft.ApplicationInsights.{0}.PageviewPerformance", 
            PageViewPerformance.dataType = "PageviewPerformanceData", PageViewPerformance;
        }(function(_super) {
            function PageViewPerfData() {
                var _this = _super.call(this) || this;
                return _this.ver = 2, _this.properties = {}, _this.measurements = {}, _this;
            }
            return __extendsFn(PageViewPerfData, _super), PageViewPerfData;
        }(PageViewData)), strStack = "stack";
        function _stringify(value, convertToString) {
            var result = value;
            return result && !HelperFuncs_isString(result) && (JSON && JSON.stringify ? (result = JSON.stringify(value), 
            !convertToString || result && "{}" !== result || (result = isFunction(value.toString) ? value.toString() : "" + value)) : result = value + " - (Missing JSON.stringify)"), 
            result || "";
        }
        function _formatMessage(theEvent, errorType) {
            var evtMessage = theEvent;
            return theEvent && (evtMessage && !HelperFuncs_isString(evtMessage) && (evtMessage = theEvent.message || theEvent.description || evtMessage), 
            evtMessage && !HelperFuncs_isString(evtMessage) && (evtMessage = _stringify(evtMessage, !0)), 
            theEvent.filename && (evtMessage = evtMessage + " @" + (theEvent.filename || "") + ":" + (theEvent.lineno || "?") + ":" + (theEvent.colno || "?"))), 
            errorType && "String" !== errorType && "Object" !== errorType && "Error" !== errorType && -1 === (evtMessage || "").indexOf(errorType) && (evtMessage = errorType + ": " + evtMessage), 
            evtMessage || "";
        }
        function _isStackDetails(details) {
            return details && details.src && HelperFuncs_isString(details.src) && details.obj && isArray(details.obj);
        }
        function _convertStackObj(errorStack) {
            var src = errorStack || "";
            HelperFuncs_isString(src) || (src = HelperFuncs_isString(src[strStack]) ? src[strStack] : "" + src);
            var items = src.split("\n");
            return {
                src,
                obj: items
            };
        }
        function _getStackFromErrorObj(errorObj) {
            var details = null;
            if (errorObj) try {
                if (errorObj[strStack]) details = _convertStackObj(errorObj[strStack]); else if (errorObj.error && errorObj.error[strStack]) details = _convertStackObj(errorObj.error[strStack]); else if (errorObj.exception && errorObj.exception[strStack]) details = _convertStackObj(errorObj.exception[strStack]); else if (_isStackDetails(errorObj)) details = errorObj; else if (_isStackDetails(errorObj.stackDetails)) details = errorObj.stackDetails; else if (window && window.opera && errorObj.message) details = function(errorMessage) {
                    for (var stack = [], lines = errorMessage.split("\n"), lp = 0; lp < lines.length; lp++) {
                        var entry = lines[lp];
                        lines[lp + 1] && (entry += "@" + lines[lp + 1], lp++), stack.push(entry);
                    }
                    return {
                        src: errorMessage,
                        obj: stack
                    };
                }(errorObj.message); else if (HelperFuncs_isString(errorObj)) details = _convertStackObj(errorObj); else {
                    var evtMessage = errorObj.message || errorObj.description || "";
                    HelperFuncs_isString(errorObj.errorSrc) && (evtMessage && (evtMessage += "\n"), 
                    evtMessage += " from " + errorObj.errorSrc), evtMessage && (details = _convertStackObj(evtMessage));
                }
            } catch (e) {
                details = _convertStackObj(e);
            }
            return details || {
                src: "",
                obj: null
            };
        }
        function _getErrorType(errorType) {
            var typeName = "";
            if (errorType && !(typeName = errorType.typeName || errorType.name || "")) try {
                var results = /function (.{1,200})\(/.exec(errorType.constructor.toString());
                typeName = results && results.length > 1 ? results[1] : "";
            } catch (e) {}
            return typeName;
        }
        function _formatErrorCode(errorObj) {
            if (errorObj) try {
                if (!HelperFuncs_isString(errorObj)) {
                    var errorType = _getErrorType(errorObj), result = _stringify(errorObj, !1);
                    return result && "{}" !== result || (errorObj.error && (errorType = _getErrorType(errorObj = errorObj.error)), 
                    result = _stringify(errorObj, !0)), 0 !== result.indexOf(errorType) && "String" !== errorType ? errorType + ":" + result : result;
                }
            } catch (e) {}
            return "" + (errorObj || "");
        }
        var SeverityLevel, StorageType, DistributedTracingModes, Exception = function(_super) {
            function Exception(logger, exception, properties, measurements, severityLevel, id) {
                var _this = _super.call(this) || this;
                return _this.aiDataContract = {
                    ver: 1,
                    exceptions: 1,
                    severityLevel: 0,
                    properties: 0,
                    measurements: 0
                }, function(value) {
                    try {
                        if (isObject(value)) return "ver" in value && "exceptions" in value && "properties" in value;
                    } catch (e) {}
                    return !1;
                }(exception) ? (_this.exceptions = exception.exceptions, _this.properties = exception.properties, 
                _this.measurements = exception.measurements, exception.severityLevel && (_this.severityLevel = exception.severityLevel), 
                exception.id && (_this.id = exception.id), exception.problemGroup && (_this.problemGroup = exception.problemGroup), 
                _this.ver = 2, isNullOrUndefined(exception.isManual) || (_this.isManual = exception.isManual)) : (properties || (properties = {}), 
                _this.exceptions = [ new _ExceptionDetails(logger, exception, properties) ], _this.properties = dataSanitizeProperties(logger, properties), 
                _this.measurements = dataSanitizeMeasurements(logger, measurements), severityLevel && (_this.severityLevel = severityLevel), 
                id && (_this.id = id)), _this;
            }
            return __extendsFn(Exception, _super), Exception.CreateAutoException = function(message, url, lineNumber, columnNumber, error, evt, stack, errorSrc) {
                var errorType = _getErrorType(error || evt || message);
                return {
                    message: _formatMessage(message, errorType),
                    url,
                    lineNumber,
                    columnNumber,
                    error: _formatErrorCode(error || evt || message),
                    evt: _formatErrorCode(evt || message),
                    typeName: errorType,
                    stackDetails: _getStackFromErrorObj(stack || error || evt),
                    errorSrc
                };
            }, Exception.CreateFromInterface = function(logger, exception, properties, measurements) {
                var exceptions = exception.exceptions && arrMap(exception.exceptions, function(ex) {
                    return _ExceptionDetails.CreateFromInterface(logger, ex);
                });
                return new Exception(logger, __assignFn(__assignFn({}, exception), {
                    exceptions
                }), properties, measurements);
            }, Exception.prototype.toInterface = function() {
                var _a = this, exceptions = _a.exceptions, properties = _a.properties, measurements = _a.measurements, severityLevel = _a.severityLevel, problemGroup = _a.problemGroup, id = _a.id, isManual = _a.isManual;
                return {
                    ver: "4.0",
                    exceptions: exceptions instanceof Array && arrMap(exceptions, function(exception) {
                        return exception.toInterface();
                    }) || void 0,
                    severityLevel,
                    properties,
                    measurements,
                    problemGroup,
                    id,
                    isManual
                };
            }, Exception.CreateSimpleException = function(message, typeName, assembly, fileName, details, line) {
                return {
                    exceptions: [ {
                        hasFullStack: !0,
                        message,
                        stack: details,
                        typeName
                    } ]
                };
            }, Exception.envelopeType = "Microsoft.ApplicationInsights.{0}.Exception", Exception.dataType = "ExceptionData", 
            Exception.formatError = _formatErrorCode, Exception;
        }(function() {
            this.ver = 2, this.exceptions = [], this.properties = {}, this.measurements = {};
        }), _ExceptionDetails = function(_super) {
            function _ExceptionDetails(logger, exception, properties) {
                var _this = _super.call(this) || this;
                if (_this.aiDataContract = {
                    id: 0,
                    outerId: 0,
                    typeName: 1,
                    message: 1,
                    hasFullStack: 0,
                    stack: 0,
                    parsedStack: 2
                }, function(value) {
                    try {
                        if (isObject(value)) return "hasFullStack" in value && "typeName" in value;
                    } catch (e) {}
                    return !1;
                }(exception)) _this.typeName = exception.typeName, _this.message = exception.message, 
                _this[strStack] = exception[strStack], _this.parsedStack = exception.parsedStack, 
                _this.hasFullStack = exception.hasFullStack; else {
                    var error = exception, evt = error && error.evt;
                    isError(error) || (error = error.error || evt || error), _this.typeName = dataSanitizeString(logger, _getErrorType(error)) || "not_specified", 
                    _this.message = dataSanitizeMessage(logger, _formatMessage(exception || error, _this.typeName)) || "not_specified";
                    var stack = exception.stackDetails || _getStackFromErrorObj(exception);
                    _this.parsedStack = function(stack) {
                        var parsedStack, frames = stack.obj;
                        if (frames && frames.length > 0) {
                            parsedStack = [];
                            var level_1 = 0, totalSizeInBytes_1 = 0;
                            if (arrForEach(frames, function(frame) {
                                var theFrame = frame.toString();
                                if (_StackFrame.regex.test(theFrame)) {
                                    var parsedFrame = new _StackFrame(theFrame, level_1++);
                                    totalSizeInBytes_1 += parsedFrame.sizeInBytes, parsedStack.push(parsedFrame);
                                }
                            }), totalSizeInBytes_1 > 32768) for (var left = 0, right = parsedStack.length - 1, size = 0, acceptedLeft = left, acceptedRight = right; left < right; ) {
                                if ((size += parsedStack[left].sizeInBytes + parsedStack[right].sizeInBytes) > 32768) {
                                    parsedStack.splice(acceptedLeft, acceptedRight - acceptedLeft + 1);
                                    break;
                                }
                                acceptedLeft = left, acceptedRight = right, left++, right--;
                            }
                        }
                        return parsedStack;
                    }(stack), _this[strStack] = dataSanitizeException(logger, function(stackDetails) {
                        var stack = "";
                        return stackDetails && (stackDetails.obj ? arrForEach(stackDetails.obj, function(entry) {
                            stack += entry + "\n";
                        }) : stack = stackDetails.src || ""), stack;
                    }(stack)), _this.hasFullStack = isArray(_this.parsedStack) && _this.parsedStack.length > 0, 
                    properties && (properties.typeName = properties.typeName || _this.typeName);
                }
                return _this;
            }
            return __extendsFn(_ExceptionDetails, _super), _ExceptionDetails.prototype.toInterface = function() {
                var parsedStack = this.parsedStack instanceof Array && arrMap(this.parsedStack, function(frame) {
                    return frame.toInterface();
                });
                return {
                    id: this.id,
                    outerId: this.outerId,
                    typeName: this.typeName,
                    message: this.message,
                    hasFullStack: this.hasFullStack,
                    stack: this[strStack],
                    parsedStack: parsedStack || void 0
                };
            }, _ExceptionDetails.CreateFromInterface = function(logger, exception) {
                var parsedStack = exception.parsedStack instanceof Array && arrMap(exception.parsedStack, function(frame) {
                    return _StackFrame.CreateFromInterface(frame);
                }) || exception.parsedStack;
                return new _ExceptionDetails(logger, __assignFn(__assignFn({}, exception), {
                    parsedStack
                }));
            }, _ExceptionDetails;
        }(function() {
            this.hasFullStack = !0, this.parsedStack = [];
        }), _StackFrame = function(_super) {
            function _StackFrame(sourceFrame, level) {
                var _this = _super.call(this) || this;
                if (_this.sizeInBytes = 0, _this.aiDataContract = {
                    level: 1,
                    method: 1,
                    assembly: 0,
                    fileName: 0,
                    line: 0
                }, "string" == typeof sourceFrame) {
                    var frame = sourceFrame;
                    _this.level = level, _this.method = "<no_method>", _this.assembly = strTrim(frame), 
                    _this.fileName = "", _this.line = 0;
                    var matches = frame.match(_StackFrame.regex);
                    matches && matches.length >= 5 && (_this.method = strTrim(matches[2]) || _this.method, 
                    _this.fileName = strTrim(matches[4]), _this.line = parseInt(matches[5]) || 0);
                } else _this.level = sourceFrame.level, _this.method = sourceFrame.method, _this.assembly = sourceFrame.assembly, 
                _this.fileName = sourceFrame.fileName, _this.line = sourceFrame.line, _this.sizeInBytes = 0;
                return _this.sizeInBytes += _this.method.length, _this.sizeInBytes += _this.fileName.length, 
                _this.sizeInBytes += _this.assembly.length, _this.sizeInBytes += _StackFrame.baseSize, 
                _this.sizeInBytes += _this.level.toString().length, _this.sizeInBytes += _this.line.toString().length, 
                _this;
            }
            return __extendsFn(_StackFrame, _super), _StackFrame.CreateFromInterface = function(frame) {
                return new _StackFrame(frame, null);
            }, _StackFrame.prototype.toInterface = function() {
                return {
                    level: this.level,
                    method: this.method,
                    assembly: this.assembly,
                    fileName: this.fileName,
                    line: this.line
                };
            }, _StackFrame.regex = /^([\s]+at)?[\s]{0,50}([^\@\()]+?)[\s]{0,50}(\@|\()([^\(\n]+):([0-9]+):([0-9]+)(\)?)$/, 
            _StackFrame.baseSize = 58, _StackFrame;
        }(function() {});
        !function(SeverityLevel) {
            SeverityLevel[SeverityLevel.Verbose = 0] = "Verbose", SeverityLevel[SeverityLevel.Information = 1] = "Information", 
            SeverityLevel[SeverityLevel.Warning = 2] = "Warning", SeverityLevel[SeverityLevel.Error = 3] = "Error", 
            SeverityLevel[SeverityLevel.Critical = 4] = "Critical";
        }(SeverityLevel || (SeverityLevel = {})), function(StorageType) {
            StorageType[StorageType.LocalStorage = 0] = "LocalStorage", StorageType[StorageType.SessionStorage = 1] = "SessionStorage";
        }(StorageType || (StorageType = {})), function(DistributedTracingModes) {
            DistributedTracingModes[DistributedTracingModes.AI = 0] = "AI", DistributedTracingModes[DistributedTracingModes.AI_AND_W3C = 1] = "AI_AND_W3C", 
            DistributedTracingModes[DistributedTracingModes.W3C = 2] = "W3C";
        }(DistributedTracingModes || (DistributedTracingModes = {}));
        var _canUseLocalStorage = void 0, _canUseSessionStorage = void 0;
        function _getLocalStorageObject() {
            return utlCanUseLocalStorage() ? _getVerifiedStorageObject(StorageType.LocalStorage) : null;
        }
        function _getVerifiedStorageObject(storageType) {
            try {
                if (isNullOrUndefined(getGlobal())) return null;
                var uid = new Date, storage = getGlobalInst(storageType === StorageType.LocalStorage ? "localStorage" : "sessionStorage");
                storage.setItem(uid.toString(), uid.toString());
                var fail = storage.getItem(uid.toString()) !== uid.toString();
                if (storage.removeItem(uid.toString()), !fail) return storage;
            } catch (exception) {}
            return null;
        }
        function _getSessionStorageObject() {
            return utlCanUseSessionStorage() ? _getVerifiedStorageObject(StorageType.SessionStorage) : null;
        }
        function utlDisableStorage() {
            _canUseLocalStorage = !1, _canUseSessionStorage = !1;
        }
        function utlCanUseLocalStorage() {
            return void 0 === _canUseLocalStorage && (_canUseLocalStorage = !!_getVerifiedStorageObject(StorageType.LocalStorage)), 
            _canUseLocalStorage;
        }
        function utlGetLocalStorage(logger, name) {
            var storage = _getLocalStorageObject();
            if (null !== storage) try {
                return storage.getItem(name);
            } catch (e) {
                _canUseLocalStorage = !1, logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadLocalStorage, "Browser failed read of local storage. " + getExceptionName(e), {
                    exception: dumpObj(e)
                });
            }
            return null;
        }
        function utlSetLocalStorage(logger, name, data) {
            var storage = _getLocalStorageObject();
            if (null !== storage) try {
                return storage.setItem(name, data), !0;
            } catch (e) {
                _canUseLocalStorage = !1, logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteLocalStorage, "Browser failed write to local storage. " + getExceptionName(e), {
                    exception: dumpObj(e)
                });
            }
            return !1;
        }
        function utlRemoveStorage(logger, name) {
            var storage = _getLocalStorageObject();
            if (null !== storage) try {
                return storage.removeItem(name), !0;
            } catch (e) {
                _canUseLocalStorage = !1, logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromLocalStorage, "Browser failed removal of local storage item. " + getExceptionName(e), {
                    exception: dumpObj(e)
                });
            }
            return !1;
        }
        function utlCanUseSessionStorage() {
            return void 0 === _canUseSessionStorage && (_canUseSessionStorage = !!_getVerifiedStorageObject(StorageType.SessionStorage)), 
            _canUseSessionStorage;
        }
        function utlGetSessionStorage(logger, name) {
            var storage = _getSessionStorageObject();
            if (null !== storage) try {
                return storage.getItem(name);
            } catch (e) {
                _canUseSessionStorage = !1, logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadSessionStorage, "Browser failed read of session storage. " + getExceptionName(e), {
                    exception: dumpObj(e)
                });
            }
            return null;
        }
        function utlSetSessionStorage(logger, name, data) {
            var storage = _getSessionStorageObject();
            if (null !== storage) try {
                return storage.setItem(name, data), !0;
            } catch (e) {
                _canUseSessionStorage = !1, logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteSessionStorage, "Browser failed write to session storage. " + getExceptionName(e), {
                    exception: dumpObj(e)
                });
            }
            return !1;
        }
        function utlRemoveSessionStorage(logger, name) {
            var storage = _getSessionStorageObject();
            if (null !== storage) try {
                return storage.removeItem(name), !0;
            } catch (e) {
                _canUseSessionStorage = !1, logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromSessionStorage, "Browser failed removal of session storage item. " + getExceptionName(e), {
                    exception: dumpObj(e)
                });
            }
            return !1;
        }
        function createDomEvent(eventName) {
            var event = null;
            if (isFunction(Event)) event = new Event(eventName); else {
                var doc = EnvUtils_getDocument();
                doc && doc.createEvent && (event = doc.createEvent("Event")).initEvent(eventName, !0, !0);
            }
            return event;
        }
        var RequestHeaders = {
            requestContextHeader: "Request-Context",
            requestContextTargetKey: "appId",
            requestContextAppIdFormat: "appId=cid-v1:",
            requestIdHeader: "Request-Id",
            traceParentHeader: "traceparent",
            traceStateHeader: "tracestate",
            sdkContextHeader: "Sdk-Context",
            sdkContextHeaderAppIdRequest: "appId",
            requestContextHeaderLowerCase: "request-context"
        }, _document = EnvUtils_getDocument() || {}, _htmlAnchorIdx = 0, _htmlAnchorElement = [ null, null, null, null, null ];
        function urlParseUrl(url) {
            var anchorIdx = _htmlAnchorIdx, anchorCache = _htmlAnchorElement, tempAnchor = anchorCache[anchorIdx];
            return _document.createElement ? anchorCache[anchorIdx] || (tempAnchor = anchorCache[anchorIdx] = _document.createElement("a")) : tempAnchor = {
                host: urlParseHost(url, !0)
            }, tempAnchor.href = url, ++anchorIdx >= anchorCache.length && (anchorIdx = 0), 
            _htmlAnchorIdx = anchorIdx, tempAnchor;
        }
        function urlGetAbsoluteUrl(url) {
            var result, a = urlParseUrl(url);
            return a && (result = a.href), result;
        }
        function urlGetCompleteUrl(method, absoluteUrl) {
            return method ? method.toUpperCase() + " " + absoluteUrl : absoluteUrl;
        }
        function urlParseHost(url, inclPort) {
            var fullHost = urlParseFullHost(url, inclPort) || "";
            if (fullHost) {
                var match = fullHost.match(/(www[0-9]?\.)?(.[^/:]+)(\:[\d]+)?/i);
                if (null != match && match.length > 3 && HelperFuncs_isString(match[2]) && match[2].length > 0) return match[2] + (match[3] || "");
            }
            return fullHost;
        }
        function urlParseFullHost(url, inclPort) {
            var result = null;
            if (url) {
                var match = url.match(/(\w*):\/\/(.[^/:]+)(\:[\d]+)?/i);
                if (null != match && match.length > 2 && HelperFuncs_isString(match[2]) && match[2].length > 0 && (result = match[2] || "", 
                inclPort && match.length > 2)) {
                    var protocol = (match[1] || "").toLowerCase(), port = match[3] || "";
                    ("http" === protocol && ":80" === port || "https" === protocol && ":443" === port) && (port = ""), 
                    result += port;
                }
            }
            return result;
        }
        var _internalEndpoints = [ "https://dc.services.visualstudio.com/v2/track", "https://breeze.aimon.applicationinsights.io/v2/track", "https://dc-int.services.visualstudio.com/v2/track" ];
        function isInternalApplicationInsightsEndpoint(endpointUrl) {
            return -1 !== _internalEndpoints.indexOf(endpointUrl.toLowerCase());
        }
        var Util = {
            NotSpecified: "not_specified",
            createDomEvent,
            disableStorage: utlDisableStorage,
            isInternalApplicationInsightsEndpoint,
            canUseLocalStorage: utlCanUseLocalStorage,
            getStorage: utlGetLocalStorage,
            setStorage: utlSetLocalStorage,
            removeStorage: utlRemoveStorage,
            canUseSessionStorage: utlCanUseSessionStorage,
            getSessionStorageKeys: function() {
                var keys = [];
                return utlCanUseSessionStorage() && objForEachKey(getGlobalInst("sessionStorage"), function(key) {
                    keys.push(key);
                }), keys;
            },
            getSessionStorage: utlGetSessionStorage,
            setSessionStorage: utlSetSessionStorage,
            removeSessionStorage: utlRemoveSessionStorage,
            disableCookies,
            canUseCookies: function(logger) {
                return _legacyCookieMgr(null, logger).isEnabled();
            },
            disallowsSameSiteNone: uaDisallowsSameSiteNone,
            setCookie: function(logger, name, value, domain) {
                _legacyCookieMgr(null, logger).set(name, value, null, domain);
            },
            stringToBoolOrDefault,
            getCookie: function(logger, name) {
                return _legacyCookieMgr(null, logger).get(name);
            },
            deleteCookie: function(logger, name) {
                return _legacyCookieMgr(null, logger).del(name);
            },
            trim: strTrim,
            newId,
            random32: function() {
                return RandomHelper_random32(!0);
            },
            generateW3CId,
            isArray,
            isError,
            isDate,
            toISOStringForIE8: toISOString,
            getIEVersion,
            msToTimeSpan,
            isCrossOriginError,
            dump: dumpObj,
            getExceptionName,
            addEventHandler: attachEvent,
            IsBeaconApiSupported: isBeaconsSupported,
            getExtension: getExtensionByName
        }, UrlHelper = {
            parseUrl: urlParseUrl,
            getAbsoluteUrl: urlGetAbsoluteUrl,
            getPathName: function(url) {
                var result, a = urlParseUrl(url);
                return a && (result = a.pathname), result;
            },
            getCompleteUrl: urlGetCompleteUrl,
            parseHost: urlParseHost,
            parseFullHost: urlParseFullHost
        }, CorrelationIdHelper = {
            correlationIdPrefix: "cid-v1:",
            canIncludeCorrelationHeader: function(config, requestUrl, currentHost) {
                if (!requestUrl || config && config.disableCorrelationHeaders) return !1;
                if (config && config.correlationHeaderExcludePatterns) for (var i = 0; i < config.correlationHeaderExcludePatterns.length; i++) if (config.correlationHeaderExcludePatterns[i].test(requestUrl)) return !1;
                var requestHost = urlParseUrl(requestUrl).host.toLowerCase();
                if (!requestHost || -1 === requestHost.indexOf(":443") && -1 === requestHost.indexOf(":80") || (requestHost = (urlParseFullHost(requestUrl, !0) || "").toLowerCase()), 
                (!config || !config.enableCorsCorrelation) && requestHost && requestHost !== currentHost) return !1;
                var matchExists_1, includedDomains = config && config.correlationHeaderDomains;
                if (includedDomains && (arrForEach(includedDomains, function(domain) {
                    var regex = new RegExp(domain.toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*"));
                    matchExists_1 = matchExists_1 || regex.test(requestHost);
                }), !matchExists_1)) return !1;
                var excludedDomains = config && config.correlationHeaderExcludedDomains;
                if (!excludedDomains || 0 === excludedDomains.length) return !0;
                for (i = 0; i < excludedDomains.length; i++) if (new RegExp(excludedDomains[i].toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*")).test(requestHost)) return !1;
                return requestHost && requestHost.length > 0;
            },
            getCorrelationContext: function(responseHeader) {
                if (responseHeader) {
                    var correlationId = CorrelationIdHelper.getCorrelationContextValue(responseHeader, RequestHeaders.requestContextTargetKey);
                    if (correlationId && correlationId !== CorrelationIdHelper.correlationIdPrefix) return correlationId;
                }
            },
            getCorrelationContextValue: function(responseHeader, key) {
                if (responseHeader) for (var keyValues = responseHeader.split(","), i = 0; i < keyValues.length; ++i) {
                    var keyValue = keyValues[i].split("=");
                    if (2 === keyValue.length && keyValue[0] === key) return keyValue[1];
                }
            }
        };
        function dateTimeUtilsNow() {
            var perf = getPerformance();
            if (perf && perf.now && perf.timing) {
                var now = perf.now() + perf.timing.navigationStart;
                if (now > 0) return now;
            }
            return dateNow();
        }
        function dateTimeUtilsDuration(start, end) {
            var result = null;
            return 0 === start || 0 === end || isNullOrUndefined(start) || isNullOrUndefined(end) || (result = end - start), 
            result;
        }
        var DateTimeUtils = {
            Now: dateTimeUtilsNow,
            GetDuration: dateTimeUtilsDuration
        }, RemoteDependencyData_RemoteDependencyData = function(_super) {
            function RemoteDependencyData(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, correlationContext, properties, measurements) {
                void 0 === requestAPI && (requestAPI = "Ajax");
                var _this = _super.call(this) || this;
                _this.aiDataContract = {
                    id: 1,
                    ver: 1,
                    name: 0,
                    resultCode: 0,
                    duration: 0,
                    success: 0,
                    data: 0,
                    target: 0,
                    type: 0,
                    properties: 0,
                    measurements: 0,
                    kind: 0,
                    value: 0,
                    count: 0,
                    min: 0,
                    max: 0,
                    stdDev: 0,
                    dependencyKind: 0,
                    dependencySource: 0,
                    commandName: 0,
                    dependencyTypeName: 0
                }, _this.id = id, _this.duration = msToTimeSpan(value), _this.success = success, 
                _this.resultCode = resultCode + "", _this.type = dataSanitizeString(logger, requestAPI);
                var dependencyFields = function(logger, absoluteUrl, method, commandName) {
                    var target, name = commandName, data = commandName;
                    if (absoluteUrl && absoluteUrl.length > 0) {
                        var parsedUrl = urlParseUrl(absoluteUrl);
                        if (target = parsedUrl.host, !name) if (null != parsedUrl.pathname) {
                            var pathName = 0 === parsedUrl.pathname.length ? "/" : parsedUrl.pathname;
                            "/" !== pathName.charAt(0) && (pathName = "/" + pathName), data = parsedUrl.pathname, 
                            name = dataSanitizeString(logger, method ? method + " " + pathName : pathName);
                        } else name = dataSanitizeString(logger, absoluteUrl);
                    } else target = commandName, name = commandName;
                    return {
                        target,
                        name,
                        data
                    };
                }(logger, absoluteUrl, method, commandName);
                return _this.data = dataSanitizeUrl(logger, commandName) || dependencyFields.data, 
                _this.target = dataSanitizeString(logger, dependencyFields.target), correlationContext && (_this.target = "".concat(_this.target, " | ").concat(correlationContext)), 
                _this.name = dataSanitizeString(logger, dependencyFields.name), _this.properties = dataSanitizeProperties(logger, properties), 
                _this.measurements = dataSanitizeMeasurements(logger, measurements), _this;
            }
            return __extendsFn(RemoteDependencyData, _super), RemoteDependencyData.envelopeType = "Microsoft.ApplicationInsights.{0}.RemoteDependency", 
            RemoteDependencyData.dataType = "RemoteDependencyData", RemoteDependencyData;
        }(function() {
            this.ver = 2, this.success = !0, this.properties = {}, this.measurements = {};
        }), PageViewManager = function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {
            dynamicProto(PageViewManager, this, function(_self) {
                var _logger, intervalHandle = null, itemQueue = [], pageViewPerformanceSent = !1;
                function _flushChannels() {
                    core && arrForEach(core.getTransmissionControls(), function(queues) {
                        arrForEach(queues, function(q) {
                            return q.flush(!0);
                        });
                    });
                }
                core && (_logger = core.logger), _self.trackPageView = function(pageView, customProperties) {
                    var name = pageView.name;
                    if (isNullOrUndefined(name) || "string" != typeof name) {
                        var doc = EnvUtils_getDocument();
                        name = pageView.name = doc && doc.title || "";
                    }
                    var uri = pageView.uri;
                    if (isNullOrUndefined(uri) || "string" != typeof uri) {
                        var location_1 = getLocation();
                        uri = pageView.uri = location_1 && location_1.href || "";
                    }
                    if (!pageViewPerformanceManager.isPerformanceTimingSupported()) return appInsights.sendPageViewInternal(pageView, customProperties), 
                    _flushChannels(), void _logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.NavigationTimingNotSupported, "trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");
                    var customDuration, duration, pageViewSent = !1, start = pageViewPerformanceManager.getPerformanceTiming().navigationStart;
                    start > 0 && (customDuration = dateTimeUtilsDuration(start, +new Date), pageViewPerformanceManager.shouldCollectDuration(customDuration) || (customDuration = void 0)), 
                    isNullOrUndefined(customProperties) || isNullOrUndefined(customProperties.duration) || (duration = customProperties.duration), 
                    !overridePageViewDuration && isNaN(duration) || (isNaN(duration) && (customProperties || (customProperties = {}), 
                    customProperties.duration = customDuration), appInsights.sendPageViewInternal(pageView, customProperties), 
                    _flushChannels(), pageViewSent = !0), customProperties || (customProperties = {}), 
                    itemQueue.push(function() {
                        var processed = !1;
                        try {
                            if (pageViewPerformanceManager.isPerformanceTimingDataReady()) {
                                processed = !0;
                                var pageViewPerformance = {
                                    name,
                                    uri
                                };
                                pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance), 
                                pageViewPerformance.isValid || pageViewSent ? (pageViewSent || (customProperties.duration = pageViewPerformance.durationMs, 
                                appInsights.sendPageViewInternal(pageView, customProperties)), pageViewPerformanceSent || (appInsights.sendPageViewPerformanceInternal(pageViewPerformance, customProperties), 
                                pageViewPerformanceSent = !0)) : (customProperties.duration = customDuration, appInsights.sendPageViewInternal(pageView, customProperties));
                            } else start > 0 && dateTimeUtilsDuration(start, +new Date) > 6e4 && (processed = !0, 
                            pageViewSent || (customProperties.duration = 6e4, appInsights.sendPageViewInternal(pageView, customProperties)));
                        } catch (e) {
                            _logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackPVFailedCalc, "trackPageView failed on page load calculation: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                        return processed;
                    }), intervalHandle || (intervalHandle = setInterval(function() {
                        var allItems = itemQueue.slice(0), doFlush = !1;
                        itemQueue = [], arrForEach(allItems, function(item) {
                            item() ? doFlush = !0 : itemQueue.push(item);
                        }), 0 === itemQueue.length && (clearInterval(intervalHandle), intervalHandle = null), 
                        doFlush && _flushChannels();
                    }, 100));
                };
            });
        }, PageVisitTimeManager = function() {
            function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {
                this.prevPageVisitDataKeyName = "prevPageVisitData", this.pageVisitTimeTrackingHandler = pageVisitTimeTrackingHandler, 
                this._logger = logger;
            }
            return PageVisitTimeManager.prototype.trackPreviousPageVisit = function(currentPageName, currentPageUrl) {
                try {
                    var prevPageVisitTimeData = this.restartPageVisitTimer(currentPageName, currentPageUrl);
                    prevPageVisitTimeData && this.pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);
                } catch (e) {
                    this._logger.warnToConsole("Auto track page visit time failed, metric will not be collected: " + dumpObj(e));
                }
            }, PageVisitTimeManager.prototype.restartPageVisitTimer = function(pageName, pageUrl) {
                try {
                    var prevPageVisitData = this.stopPageVisitTimer();
                    return this.startPageVisitTimer(pageName, pageUrl), prevPageVisitData;
                } catch (e) {
                    return this._logger.warnToConsole("Call to restart failed: " + dumpObj(e)), null;
                }
            }, PageVisitTimeManager.prototype.startPageVisitTimer = function(pageName, pageUrl) {
                try {
                    if (utlCanUseSessionStorage()) {
                        null != utlGetSessionStorage(this._logger, this.prevPageVisitDataKeyName) && throwError("Cannot call startPageVisit consecutively without first calling stopPageVisit");
                        var currPageVisitData = new PageVisitData(pageName, pageUrl), currPageVisitDataStr = getJSON().stringify(currPageVisitData);
                        utlSetSessionStorage(this._logger, this.prevPageVisitDataKeyName, currPageVisitDataStr);
                    }
                } catch (e) {
                    this._logger.warnToConsole("Call to start failed: " + dumpObj(e));
                }
            }, PageVisitTimeManager.prototype.stopPageVisitTimer = function() {
                try {
                    if (utlCanUseSessionStorage()) {
                        var pageVisitEndTime = dateNow(), pageVisitDataJsonStr = utlGetSessionStorage(this._logger, this.prevPageVisitDataKeyName);
                        if (pageVisitDataJsonStr && hasJSON()) {
                            var prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);
                            return prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime, 
                            utlRemoveSessionStorage(this._logger, this.prevPageVisitDataKeyName), prevPageVisitData;
                        }
                        return null;
                    }
                    return null;
                } catch (e) {
                    return this._logger.warnToConsole("Stop page visit timer failed: " + dumpObj(e)), 
                    null;
                }
            }, PageVisitTimeManager;
        }(), PageVisitData = function(pageName, pageUrl) {
            this.pageVisitStartTime = dateNow(), this.pageName = pageName, this.pageUrl = pageUrl;
        }, PageViewPerformanceManager = function() {
            function PageViewPerformanceManager(core) {
                this.MAX_DURATION_ALLOWED = 36e5, core && (this._logger = core.logger);
            }
            return PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function(pageViewPerformance) {
                pageViewPerformance.isValid = !1;
                var navigationTiming = this.getPerformanceNavigationTiming(), timing = this.getPerformanceTiming(), total = 0, network = 0, request = 0, response = 0, dom = 0;
                (navigationTiming || timing) && (navigationTiming ? (total = navigationTiming.duration, 
                network = 0 === navigationTiming.startTime ? navigationTiming.connectEnd : dateTimeUtilsDuration(navigationTiming.startTime, navigationTiming.connectEnd), 
                request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming.responseStart), 
                response = dateTimeUtilsDuration(navigationTiming.responseStart, navigationTiming.responseEnd), 
                dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming.loadEventEnd)) : (total = dateTimeUtilsDuration(timing.navigationStart, timing.loadEventEnd), 
                network = dateTimeUtilsDuration(timing.navigationStart, timing.connectEnd), request = dateTimeUtilsDuration(timing.requestStart, timing.responseStart), 
                response = dateTimeUtilsDuration(timing.responseStart, timing.responseEnd), dom = dateTimeUtilsDuration(timing.responseEnd, timing.loadEventEnd)), 
                0 === total ? this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ErrorPVCalc, "error calculating page view performance.", {
                    total,
                    network,
                    request,
                    response,
                    dom
                }) : this.shouldCollectDuration(total, network, request, response, dom) ? total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom) ? this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ClientPerformanceMathError, "client performance math error.", {
                    total,
                    network,
                    request,
                    response,
                    dom
                }) : (pageViewPerformance.durationMs = total, pageViewPerformance.perfTotal = pageViewPerformance.duration = msToTimeSpan(total), 
                pageViewPerformance.networkConnect = msToTimeSpan(network), pageViewPerformance.sentRequest = msToTimeSpan(request), 
                pageViewPerformance.receivedResponse = msToTimeSpan(response), pageViewPerformance.domProcessing = msToTimeSpan(dom), 
                pageViewPerformance.isValid = !0) : this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.InvalidDurationValue, "Invalid page load duration value. Browser perf data won't be sent.", {
                    total,
                    network,
                    request,
                    response,
                    dom
                }));
            }, PageViewPerformanceManager.prototype.getPerformanceTiming = function() {
                return this.isPerformanceTimingSupported() ? getPerformance().timing : null;
            }, PageViewPerformanceManager.prototype.getPerformanceNavigationTiming = function() {
                return this.isPerformanceNavigationTimingSupported() ? getPerformance().getEntriesByType("navigation")[0] : null;
            }, PageViewPerformanceManager.prototype.isPerformanceNavigationTimingSupported = function() {
                var perf = getPerformance();
                return perf && perf.getEntriesByType && perf.getEntriesByType("navigation").length > 0;
            }, PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function() {
                var perf = getPerformance();
                return perf && perf.timing;
            }, PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function() {
                var perf = getPerformance(), timing = perf ? perf.timing : 0;
                return timing && timing.domainLookupStart > 0 && timing.navigationStart > 0 && timing.responseStart > 0 && timing.requestStart > 0 && timing.loadEventEnd > 0 && timing.responseEnd > 0 && timing.connectEnd > 0 && timing.domLoading > 0;
            }, PageViewPerformanceManager.prototype.shouldCollectDuration = function() {
                for (var durations = [], _i = 0; _i < arguments.length; _i++) durations[_i] = arguments[_i];
                var botAgentNames = [ "googlebot", "adsbot-google", "apis-google", "mediapartners-google" ], userAgent = (getNavigator() || {}).userAgent, isGoogleBot = !1;
                if (userAgent) for (var i = 0; i < botAgentNames.length; i++) isGoogleBot = isGoogleBot || -1 !== userAgent.toLowerCase().indexOf(botAgentNames[i]);
                if (isGoogleBot) return !1;
                for (i = 0; i < durations.length; i++) if (durations[i] < 0 || durations[i] >= this.MAX_DURATION_ALLOWED) return !1;
                return !0;
            }, PageViewPerformanceManager;
        }();
        function _dispatchEvent(target, evnt) {
            target && target.dispatchEvent && evnt && target.dispatchEvent(evnt);
        }
        var ApplicationInsights = function(_super) {
            function ApplicationInsights() {
                var _eventTracking, _pageTracking, _properties, _prevUri, _currUri, _this = _super.call(this) || this;
                return _this.identifier = "ApplicationInsightsAnalytics", _this.priority = 180, 
                _this.autoRoutePVDelay = 500, dynamicProto(ApplicationInsights, _this, function(_self, _base) {
                    var location = getLocation(!0);
                    _prevUri = location && location.href || "", _self.getCookieMgr = function() {
                        return safeGetCookieMgr(_self.core);
                    }, _self.processTelemetry = function(env, itemCtx) {
                        doPerf(_self.core, function() {
                            return _self.identifier + ":processTelemetry";
                        }, function() {
                            var doNotSendItem = !1, telemetryInitializersCount = _self._telemetryInitializers.length;
                            itemCtx = _self._getTelCtx(itemCtx);
                            for (var i = 0; i < telemetryInitializersCount; ++i) {
                                var telemetryInitializer = _self._telemetryInitializers[i];
                                if (telemetryInitializer) try {
                                    if (!1 === telemetryInitializer.apply(null, [ env ])) {
                                        doNotSendItem = !0;
                                        break;
                                    }
                                } catch (e) {
                                    itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + getExceptionName(e), {
                                        exception: dumpObj(e)
                                    }, !0);
                                }
                            }
                            doNotSendItem || _self.processNext(env, itemCtx);
                        }, function() {
                            return {
                                item: env
                            };
                        }, !env.sync);
                    }, _self.trackEvent = function(event, customProperties) {
                        try {
                            var telemetryItem = TelemetryItemCreator.create(event, Event_Event.dataType, Event_Event.envelopeType, _self.diagLog(), customProperties);
                            _self.core.track(telemetryItem);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TrackTraceFailed, "trackTrace failed, trace will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.startTrackEvent = function(name) {
                        try {
                            _eventTracking.start(name);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StartTrackEventFailed, "startTrackEvent failed, event will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.stopTrackEvent = function(name, properties, measurements) {
                        try {
                            _eventTracking.stop(name, void 0, properties);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StopTrackEventFailed, "stopTrackEvent failed, event will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.trackTrace = function(trace, customProperties) {
                        try {
                            var telemetryItem = TelemetryItemCreator.create(trace, Trace.dataType, Trace.envelopeType, _self.diagLog(), customProperties);
                            _self.core.track(telemetryItem);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TrackTraceFailed, "trackTrace failed, trace will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.trackMetric = function(metric, customProperties) {
                        try {
                            var telemetryItem = TelemetryItemCreator.create(metric, Metric.dataType, Metric.envelopeType, _self.diagLog(), customProperties);
                            _self.core.track(telemetryItem);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackMetricFailed, "trackMetric failed, metric will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.trackPageView = function(pageView, customProperties) {
                        try {
                            var inPv = pageView || {};
                            _self._pageViewManager.trackPageView(inPv, __assignFn(__assignFn(__assignFn({}, inPv.properties), inPv.measurements), customProperties)), 
                            _self.config.autoTrackPageVisitTime && _self._pageVisitTimeManager.trackPreviousPageVisit(inPv.name, inPv.uri);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackPVFailed, "trackPageView failed, page view will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.sendPageViewInternal = function(pageView, properties, systemProperties) {
                        var doc = EnvUtils_getDocument();
                        doc && (pageView.refUri = void 0 === pageView.refUri ? doc.referrer : pageView.refUri);
                        var telemetryItem = TelemetryItemCreator.create(pageView, PageView.dataType, PageView.envelopeType, _self.diagLog(), properties, systemProperties);
                        _self.core.track(telemetryItem);
                    }, _self.sendPageViewPerformanceInternal = function(pageViewPerformance, properties, systemProperties) {
                        var telemetryItem = TelemetryItemCreator.create(pageViewPerformance, PageViewPerformance.dataType, PageViewPerformance.envelopeType, _self.diagLog(), properties, systemProperties);
                        _self.core.track(telemetryItem);
                    }, _self.trackPageViewPerformance = function(pageViewPerformance, customProperties) {
                        try {
                            _self._pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance), 
                            _self.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackPVFailed, "trackPageViewPerformance failed, page view will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.startTrackPage = function(name) {
                        try {
                            if ("string" != typeof name) {
                                var doc = EnvUtils_getDocument();
                                name = doc && doc.title || "";
                            }
                            _pageTracking.start(name);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StartTrackFailed, "startTrackPage failed, page view may not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.stopTrackPage = function(name, url, properties, measurement) {
                        try {
                            if ("string" != typeof name) {
                                var doc = EnvUtils_getDocument();
                                name = doc && doc.title || "";
                            }
                            if ("string" != typeof url) {
                                var loc = getLocation();
                                url = loc && loc.href || "";
                            }
                            _pageTracking.stop(name, url, properties, measurement), _self.config.autoTrackPageVisitTime && _self._pageVisitTimeManager.trackPreviousPageVisit(name, url);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StopTrackFailed, "stopTrackPage failed, page view will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.sendExceptionInternal = function(exception, customProperties, systemProperties) {
                        var theError = exception.exception || exception.error || new Error("not_specified"), exceptionPartB = new Exception(_self.diagLog(), theError, exception.properties || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface(), telemetryItem = TelemetryItemCreator.create(exceptionPartB, Exception.dataType, Exception.envelopeType, _self.diagLog(), customProperties, systemProperties);
                        _self.core.track(telemetryItem);
                    }, _self.trackException = function(exception, customProperties) {
                        try {
                            _self.sendExceptionInternal(exception, customProperties);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackExceptionFailed, "trackException failed, exception will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self._onerror = function(exception) {
                        var error = exception && exception.error, evt = exception && exception.evt;
                        try {
                            if (!evt) {
                                var _window = getWindow();
                                _window && (evt = _window.event);
                            }
                            var url = exception && exception.url || (EnvUtils_getDocument() || {}).URL, errorSrc = exception.errorSrc || "window.onerror@" + url + ":" + (exception.lineNumber || 0) + ":" + (exception.columnNumber || 0), properties = {
                                errorSrc,
                                url,
                                lineNumber: exception.lineNumber || 0,
                                columnNumber: exception.columnNumber || 0,
                                message: exception.message
                            };
                            isCrossOriginError(exception.message, 0, 0, 0, exception.error) ? function(exception, properties) {
                                var telemetryItem = TelemetryItemCreator.create(exception, Exception.dataType, Exception.envelopeType, _self.diagLog(), properties);
                                _self.core.track(telemetryItem);
                            }(Exception.CreateAutoException("Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.", url, exception.lineNumber || 0, exception.columnNumber || 0, error, evt, null, errorSrc), properties) : (exception.errorSrc || (exception.errorSrc = errorSrc), 
                            _self.trackException({
                                exception,
                                severityLevel: SeverityLevel.Error
                            }, properties));
                        } catch (e) {
                            var errorString = error ? error.name + ", " + error.message : "null";
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ExceptionWhileLoggingError, "_onError threw exception while logging error, error will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e),
                                errorString
                            });
                        }
                    }, _self.addTelemetryInitializer = function(telemetryInitializer) {
                        _self._telemetryInitializers.push(telemetryInitializer);
                    }, _self.initialize = function(config, core, extensions, pluginChain) {
                        if (!_self.isInitialized()) {
                            if (isNullOrUndefined(core)) throw Error("Error initializing");
                            _base.initialize(config, core, extensions, pluginChain), _self.setInitialized(!1);
                            var ctx = _self._getTelCtx(), identifier = _self.identifier;
                            _self.config = ctx.getExtCfg(identifier);
                            var defaults = ApplicationInsights.getDefaultConfig(config);
                            void 0 !== defaults && objForEachKey(defaults, function(field, value) {
                                _self.config[field] = ctx.getConfig(identifier, field, value), void 0 === _self.config[field] && (_self.config[field] = value);
                            }), _self.config.isStorageUseDisabled && utlDisableStorage();
                            var configGetters = {
                                instrumentationKey: function() {
                                    return config.instrumentationKey;
                                },
                                accountId: function() {
                                    return _self.config.accountId || config.accountId;
                                },
                                sessionRenewalMs: function() {
                                    return _self.config.sessionRenewalMs || config.sessionRenewalMs;
                                },
                                sessionExpirationMs: function() {
                                    return _self.config.sessionExpirationMs || config.sessionExpirationMs;
                                },
                                sampleRate: function() {
                                    return _self.config.samplingPercentage || config.samplingPercentage;
                                },
                                sdkExtension: function() {
                                    return _self.config.sdkExtension || config.sdkExtension;
                                },
                                isBrowserLinkTrackingEnabled: function() {
                                    return _self.config.isBrowserLinkTrackingEnabled || config.isBrowserLinkTrackingEnabled;
                                },
                                appId: function() {
                                    return _self.config.appId || config.appId;
                                }
                            };
                            _self._pageViewPerformanceManager = new PageViewPerformanceManager(_self.core), 
                            _self._pageViewManager = new PageViewManager(_this, _self.config.overridePageViewDuration, _self.core, _self._pageViewPerformanceManager), 
                            _self._pageVisitTimeManager = new PageVisitTimeManager(_self.diagLog(), function(pageName, pageUrl, pageVisitTime) {
                                return function(pageName, pageUrl, pageVisitTime) {
                                    _self.trackMetric({
                                        name: "PageVisitTime",
                                        average: pageVisitTime,
                                        max: pageVisitTime,
                                        min: pageVisitTime,
                                        sampleCount: 1
                                    }, {
                                        PageName: pageName,
                                        PageUrl: pageUrl
                                    });
                                }(pageName, pageUrl, pageVisitTime);
                            }), _self._telemetryInitializers = _self._telemetryInitializers || [], function(configGetters) {
                                if (!configGetters.isBrowserLinkTrackingEnabled()) {
                                    var browserLinkPaths_1 = [ "/browserLinkSignalR/", "/__browserLink/" ];
                                    _self._telemetryInitializers.push(function(envelope) {
                                        if (envelope.baseType === RemoteDependencyData_RemoteDependencyData.dataType) {
                                            var remoteData = envelope.baseData;
                                            if (remoteData) for (var i = 0; i < browserLinkPaths_1.length; i++) if (remoteData.target && remoteData.target.indexOf(browserLinkPaths_1[i]) >= 0) return !1;
                                        }
                                        return !0;
                                    });
                                }
                            }(configGetters), (_eventTracking = new Timing(_self.diagLog(), "trackEvent")).action = function(name, url, duration, properties) {
                                properties || (properties = {}), properties.duration = duration.toString(), _self.trackEvent({
                                    name,
                                    properties
                                });
                            }, (_pageTracking = new Timing(_self.diagLog(), "trackPageView")).action = function(name, url, duration, properties, measurements) {
                                isNullOrUndefined(properties) && (properties = {}), properties.duration = duration.toString(), 
                                _self.sendPageViewInternal({
                                    name,
                                    uri: url,
                                    properties,
                                    measurements
                                }, properties);
                            };
                            var f, _window = getWindow(), _history = Boolean(typeof history === strShimObject && history) ? history : getGlobalInst("history"), _location = getLocation(!0), instance = _this;
                            if (!1 === _self.config.disableExceptionTracking && !_self.config.autoExceptionInstrumented && _window) {
                                var originalOnError_1 = _window.onerror;
                                _window.onerror = function(message, url, lineNumber, columnNumber, error) {
                                    var evt = _window.event, handled = originalOnError_1 && originalOnError_1(message, url, lineNumber, columnNumber, error);
                                    return !0 !== handled && instance._onerror(Exception.CreateAutoException(message, url, lineNumber, columnNumber, error, evt)), 
                                    handled;
                                }, _self.config.autoExceptionInstrumented = !0;
                            }
                            if (!1 === _self.config.disableExceptionTracking && !0 === _self.config.enableUnhandledPromiseRejectionTracking && !_self.config.autoUnhandledPromiseInstrumented && _window) {
                                var originalOnUnhandledRejection_1 = _window.onunhandledrejection;
                                _window.onunhandledrejection = function(error) {
                                    var evt = _window.event, handled = originalOnUnhandledRejection_1 && originalOnUnhandledRejection_1.call(_window, error);
                                    return !0 !== handled && instance._onerror(Exception.CreateAutoException(function(error) {
                                        if (error && error.reason) {
                                            var reason = error.reason;
                                            return !HelperFuncs_isString(reason) && isFunction(reason.toString) ? reason.toString() : dumpObj(reason);
                                        }
                                        return error || "";
                                    }(error), _location ? _location.href : "", 0, 0, error, evt)), handled;
                                }, _self.config.autoUnhandledPromiseInstrumented = !0;
                            }
                            if (!0 === _self.config.enableAutoRouteTracking && _history && isFunction(_history.pushState) && isFunction(_history.replaceState) && _window && "undefined" != typeof Event) {
                                var _self_1 = _this;
                                arrForEach(extensions, function(extension) {
                                    "AppInsightsPropertiesPlugin" === extension.identifier && (_properties = extension);
                                }), _history.pushState = (f = _history.pushState, function() {
                                    var ret = f.apply(this, arguments);
                                    return _dispatchEvent(_window, createDomEvent(_self_1.config.namePrefix + "pushState")), 
                                    _dispatchEvent(_window, createDomEvent(_self_1.config.namePrefix + "locationchange")), 
                                    ret;
                                }), _history.replaceState = function(f) {
                                    return function() {
                                        var ret = f.apply(this, arguments);
                                        return _dispatchEvent(_window, createDomEvent(_self_1.config.namePrefix + "replaceState")), 
                                        _dispatchEvent(_window, createDomEvent(_self_1.config.namePrefix + "locationchange")), 
                                        ret;
                                    };
                                }(_history.replaceState), _window.addEventListener && (_window.addEventListener(_self_1.config.namePrefix + "popstate", function() {
                                    _dispatchEvent(_window, createDomEvent(_self_1.config.namePrefix + "locationchange"));
                                }), _window.addEventListener(_self_1.config.namePrefix + "locationchange", function() {
                                    if (_properties && _properties.context && _properties.context.telemetryTrace) {
                                        _properties.context.telemetryTrace.traceID = generateW3CId();
                                        var traceLocationName = "_unknown_";
                                        _location && _location.pathname && (traceLocationName = _location.pathname + (_location.hash || "")), 
                                        _properties.context.telemetryTrace.name = dataSanitizeString(_self_1.diagLog(), traceLocationName);
                                    }
                                    _currUri ? (_prevUri = _currUri, _currUri = _location && _location.href || "") : _currUri = _location && _location.href || "", 
                                    setTimeout(function(uri) {
                                        _self_1.trackPageView({
                                            refUri: uri,
                                            properties: {
                                                duration: 0
                                            }
                                        });
                                    }.bind(_this, _prevUri), _self_1.autoRoutePVDelay);
                                }));
                            }
                            _self.setInitialized(!0);
                        }
                    };
                }), _this;
            }
            return __extendsFn(ApplicationInsights, _super), ApplicationInsights.getDefaultConfig = function(config) {
                return config || (config = {}), config.sessionRenewalMs = 18e5, config.sessionExpirationMs = 864e5, 
                config.disableExceptionTracking = stringToBoolOrDefault(config.disableExceptionTracking), 
                config.autoTrackPageVisitTime = stringToBoolOrDefault(config.autoTrackPageVisitTime), 
                config.overridePageViewDuration = stringToBoolOrDefault(config.overridePageViewDuration), 
                config.enableUnhandledPromiseRejectionTracking = stringToBoolOrDefault(config.enableUnhandledPromiseRejectionTracking), 
                (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) && (config.samplingPercentage = 100), 
                config.isStorageUseDisabled = stringToBoolOrDefault(config.isStorageUseDisabled), 
                config.isBrowserLinkTrackingEnabled = stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled), 
                config.enableAutoRouteTracking = stringToBoolOrDefault(config.enableAutoRouteTracking), 
                config.namePrefix = config.namePrefix || "", config.enableDebug = stringToBoolOrDefault(config.enableDebug), 
                config.disableFlushOnBeforeUnload = stringToBoolOrDefault(config.disableFlushOnBeforeUnload), 
                config.disableFlushOnUnload = stringToBoolOrDefault(config.disableFlushOnUnload, config.disableFlushOnBeforeUnload), 
                config;
            }, ApplicationInsights.Version = "2.7.4", ApplicationInsights;
        }(BaseTelemetryPlugin), Timing = function(logger, name) {
            var _self = this, _events = {};
            _self.start = function(name) {
                void 0 !== _events[name] && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StartCalledMoreThanOnce, "start was called more than once for this event without calling stop.", {
                    name,
                    key: name
                }, !0), _events[name] = +new Date;
            }, _self.stop = function(name, url, properties, measurements) {
                var start = _events[name];
                if (isNaN(start)) logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StopCalledWithoutStart, "stop was called without a corresponding start.", {
                    name,
                    key: name
                }, !0); else {
                    var duration = dateTimeUtilsDuration(start, +new Date);
                    _self.action(name, url, duration, properties, measurements);
                }
                delete _events[name], _events[name] = void 0;
            };
        }, BaseSendBuffer = function BaseSendBuffer(logger, config) {
            var _buffer = [], _bufferFullMessageSent = !1;
            this._get = function() {
                return _buffer;
            }, this._set = function(buffer) {
                return _buffer = buffer;
            }, dynamicProto(BaseSendBuffer, this, function(_self) {
                _self.enqueue = function(payload) {
                    _self.count() >= config.eventsLimitInMem() ? _bufferFullMessageSent || (logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.InMemoryStorageBufferFull, "Maximum in-memory buffer size reached: " + _self.count(), !0), 
                    _bufferFullMessageSent = !0) : _buffer.push(payload);
                }, _self.count = function() {
                    return _buffer.length;
                }, _self.size = function() {
                    for (var size = _buffer.length, lp = 0; lp < _buffer.length; lp++) size += _buffer[lp].length;
                    return config.emitLineDelimitedJson() || (size += 2), size;
                }, _self.clear = function() {
                    _buffer = [], _bufferFullMessageSent = !1;
                }, _self.getItems = function() {
                    return _buffer.slice(0);
                }, _self.batchPayloads = function(payload) {
                    return payload && payload.length > 0 ? config.emitLineDelimitedJson() ? payload.join("\n") : "[" + payload.join(",") + "]" : null;
                };
            });
        }, ArraySendBuffer = function(_super) {
            function ArraySendBuffer(logger, config) {
                var _this = _super.call(this, logger, config) || this;
                return dynamicProto(ArraySendBuffer, _this, function(_self, _base) {
                    _self.markAsSent = function(payload) {
                        _base.clear();
                    }, _self.clearSent = function(payload) {};
                }), _this;
            }
            return __extendsFn(ArraySendBuffer, _super), ArraySendBuffer;
        }(BaseSendBuffer), SessionStorageSendBuffer = function(_super) {
            function SessionStorageSendBuffer(logger, config) {
                var _this = _super.call(this, logger, config) || this, _bufferFullMessageSent = !1;
                return dynamicProto(SessionStorageSendBuffer, _this, function(_self, _base) {
                    var bufferItems = _getBuffer(SessionStorageSendBuffer.BUFFER_KEY), notDeliveredItems = _getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY), buffer = _self._set(bufferItems.concat(notDeliveredItems));
                    function _removePayloadsFromBuffer(payloads, buffer) {
                        var remaining = [];
                        return arrForEach(buffer, function(value) {
                            isFunction(value) || -1 !== HelperFuncs_arrIndexOf(payloads, value) || remaining.push(value);
                        }), remaining;
                    }
                    function _getBuffer(key) {
                        var prefixedKey = key;
                        try {
                            prefixedKey = config.namePrefix && config.namePrefix() ? config.namePrefix() + "_" + prefixedKey : prefixedKey;
                            var bufferJson = utlGetSessionStorage(logger, prefixedKey);
                            if (bufferJson) {
                                var buffer_1 = getJSON().parse(bufferJson);
                                if (HelperFuncs_isString(buffer_1) && (buffer_1 = getJSON().parse(buffer_1)), buffer_1 && isArray(buffer_1)) return buffer_1;
                            }
                        } catch (e) {
                            logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedToRestoreStorageBuffer, " storage key: " + prefixedKey + ", " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                        return [];
                    }
                    function _setBuffer(key, buffer) {
                        var prefixedKey = key;
                        try {
                            prefixedKey = config.namePrefix && config.namePrefix() ? config.namePrefix() + "_" + prefixedKey : prefixedKey;
                            var bufferJson = JSON.stringify(buffer);
                            utlSetSessionStorage(logger, prefixedKey, bufferJson);
                        } catch (e) {
                            utlSetSessionStorage(logger, prefixedKey, JSON.stringify([])), logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedToSetStorageBuffer, " storage key: " + prefixedKey + ", " + getExceptionName(e) + ". Buffer cleared", {
                                exception: dumpObj(e)
                            });
                        }
                    }
                    buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE && (buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE), 
                    _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []), _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, buffer), 
                    _self.enqueue = function(payload) {
                        _self.count() >= SessionStorageSendBuffer.MAX_BUFFER_SIZE ? _bufferFullMessageSent || (logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SessionStorageBufferFull, "Maximum buffer size reached: " + _self.count(), !0), 
                        _bufferFullMessageSent = !0) : (_base.enqueue(payload), _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self._get()));
                    }, _self.clear = function() {
                        _base.clear(), _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self._get()), _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []), 
                        _bufferFullMessageSent = !1;
                    }, _self.markAsSent = function(payload) {
                        _setBuffer(SessionStorageSendBuffer.BUFFER_KEY, _self._set(_removePayloadsFromBuffer(payload, _self._get())));
                        var sentElements = _getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
                        sentElements instanceof Array && payload instanceof Array && ((sentElements = sentElements.concat(payload)).length > SessionStorageSendBuffer.MAX_BUFFER_SIZE && (logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SessionStorageBufferFull, "Sent buffer reached its maximum size: " + sentElements.length, !0), 
                        sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE), _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements));
                    }, _self.clearSent = function(payload) {
                        var sentElements = _getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);
                        sentElements = _removePayloadsFromBuffer(payload, sentElements), _setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);
                    };
                }), _this;
            }
            return __extendsFn(SessionStorageSendBuffer, _super), SessionStorageSendBuffer.BUFFER_KEY = "AI_buffer", 
            SessionStorageSendBuffer.SENT_BUFFER_KEY = "AI_sentBuffer", SessionStorageSendBuffer.MAX_BUFFER_SIZE = 1e3, 
            SessionStorageSendBuffer;
        }(BaseSendBuffer);
        function _aiNameFunc(baseName) {
            var aiName = "ai." + baseName + ".";
            return function(name) {
                return aiName + name;
            };
        }
        var defaults, _aiApplication = _aiNameFunc("application"), _aiDevice = _aiNameFunc("device"), _aiLocation = _aiNameFunc("location"), _aiOperation = _aiNameFunc("operation"), _aiSession = _aiNameFunc("session"), _aiUser = _aiNameFunc("user"), _aiCloud = _aiNameFunc("cloud"), _aiInternal = _aiNameFunc("internal"), ContextTagKeys = function(_super) {
            function ContextTagKeys() {
                return _super.call(this) || this;
            }
            return __extendsFn(ContextTagKeys, _super), ContextTagKeys;
        }((defaults = {
            applicationVersion: _aiApplication("ver"),
            applicationBuild: _aiApplication("build"),
            applicationTypeId: _aiApplication("typeId"),
            applicationId: _aiApplication("applicationId"),
            applicationLayer: _aiApplication("layer"),
            deviceId: _aiDevice("id"),
            deviceIp: _aiDevice("ip"),
            deviceLanguage: _aiDevice("language"),
            deviceLocale: _aiDevice("locale"),
            deviceModel: _aiDevice("model"),
            deviceFriendlyName: _aiDevice("friendlyName"),
            deviceNetwork: _aiDevice("network"),
            deviceNetworkName: _aiDevice("networkName"),
            deviceOEMName: _aiDevice("oemName"),
            deviceOS: _aiDevice("os"),
            deviceOSVersion: _aiDevice("osVersion"),
            deviceRoleInstance: _aiDevice("roleInstance"),
            deviceRoleName: _aiDevice("roleName"),
            deviceScreenResolution: _aiDevice("screenResolution"),
            deviceType: _aiDevice("type"),
            deviceMachineName: _aiDevice("machineName"),
            deviceVMName: _aiDevice("vmName"),
            deviceBrowser: _aiDevice("browser"),
            deviceBrowserVersion: _aiDevice("browserVersion"),
            locationIp: _aiLocation("ip"),
            locationCountry: _aiLocation("country"),
            locationProvince: _aiLocation("province"),
            locationCity: _aiLocation("city"),
            operationId: _aiOperation("id"),
            operationName: _aiOperation("name"),
            operationParentId: _aiOperation("parentId"),
            operationRootId: _aiOperation("rootId"),
            operationSyntheticSource: _aiOperation("syntheticSource"),
            operationCorrelationVector: _aiOperation("correlationVector"),
            sessionId: _aiSession("id"),
            sessionIsFirst: _aiSession("isFirst"),
            sessionIsNew: _aiSession("isNew"),
            userAccountAcquisitionDate: _aiUser("accountAcquisitionDate"),
            userAccountId: _aiUser("accountId"),
            userAgent: _aiUser("userAgent"),
            userId: _aiUser("id"),
            userStoreRegion: _aiUser("storeRegion"),
            userAuthUserId: _aiUser("authUserId"),
            userAnonymousUserAcquisitionDate: _aiUser("anonUserAcquisitionDate"),
            userAuthenticatedUserAcquisitionDate: _aiUser("authUserAcquisitionDate"),
            cloudName: _aiCloud("name"),
            cloudRole: _aiCloud("role"),
            cloudRoleVer: _aiCloud("roleVer"),
            cloudRoleInstance: _aiCloud("roleInstance"),
            cloudEnvironment: _aiCloud("environment"),
            cloudLocation: _aiCloud("location"),
            cloudDeploymentUnit: _aiCloud("deploymentUnit"),
            internalNodeName: _aiInternal("nodeName"),
            internalSdkVersion: _aiInternal("sdkVersion"),
            internalAgentVersion: _aiInternal("agentVersion"),
            internalSnippet: _aiInternal("snippet"),
            internalSdkSrc: _aiInternal("sdkSrc")
        }, function() {
            var _this_1 = this;
            defaults && objForEachKey(defaults, function(field, value) {
                _this_1[field] = value;
            });
        })), Extensions = {
            UserExt: "user",
            DeviceExt: "device",
            TraceExt: "trace",
            WebExt: "web",
            AppExt: "app",
            OSExt: "os",
            SessionExt: "ses",
            SDKExt: "sdk"
        }, CtxTagKeys = new ContextTagKeys, Envelope_Envelope = function(_super) {
            function Envelope(logger, data, name) {
                var _this = _super.call(this) || this;
                return _this.name = dataSanitizeString(logger, name) || "not_specified", _this.data = data, 
                _this.time = toISOString(new Date), _this.aiDataContract = {
                    time: 1,
                    iKey: 1,
                    name: 1,
                    sampleRate: function() {
                        return 100 === _this.sampleRate ? 4 : 1;
                    },
                    tags: 1,
                    data: 1
                }, _this;
            }
            return __extendsFn(Envelope, _super), Envelope;
        }(function() {
            this.ver = 1, this.sampleRate = 100, this.tags = {};
        }), Base = function() {}, Data = function(_super) {
            function Data() {
                return _super.call(this) || this;
            }
            return __extendsFn(Data, _super), Data;
        }(Base), Data_Data = function(_super) {
            function Data(baseType, data) {
                var _this = _super.call(this) || this;
                return _this.aiDataContract = {
                    baseType: 1,
                    baseData: 1
                }, _this.baseType = baseType, _this.baseData = data, _this;
            }
            return __extendsFn(Data, _super), Data;
        }(Data), strBaseData = "baseData", strProperties = "properties", strTrue = "true";
        function _setValueIf(target, field, value) {
            return setValue(target, field, value, isTruthy);
        }
        function _extractPropsAndMeasurements(data, properties, measurements) {
            isNullOrUndefined(data) || objForEachKey(data, function(key, value) {
                isNumber(value) ? measurements[key] = value : HelperFuncs_isString(value) ? properties[key] = value : hasJSON() && (properties[key] = getJSON().stringify(value));
            });
        }
        function _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue) {
            isNullOrUndefined(properties) || objForEachKey(properties, function(key, value) {
                properties[key] = value || customUndefinedValue;
            });
        }
        function _createEnvelope(logger, envelopeType, telemetryItem, data) {
            var envelope = new Envelope_Envelope(logger, data, envelopeType);
            _setValueIf(envelope, "sampleRate", telemetryItem[SampleRate]), (telemetryItem[strBaseData] || {}).startTime && (envelope.time = toISOString(telemetryItem[strBaseData].startTime)), 
            envelope.iKey = telemetryItem.iKey;
            var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, "");
            return envelope.name = envelope.name.replace("{0}", iKeyNoDashes), function(logger, item, env) {
                var envTags = env.tags = env.tags || {}, itmExt = item.ext = item.ext || {}, itmTags = item.tags = item.tags || [], extUser = itmExt.user;
                extUser && (_setValueIf(envTags, CtxTagKeys.userAuthUserId, extUser.authId), _setValueIf(envTags, CtxTagKeys.userId, extUser.id || extUser.localId));
                var extApp = itmExt.app;
                extApp && _setValueIf(envTags, CtxTagKeys.sessionId, extApp.sesId);
                var extDevice = itmExt.device;
                extDevice && (_setValueIf(envTags, CtxTagKeys.deviceId, extDevice.id || extDevice.localId), 
                _setValueIf(envTags, CtxTagKeys.deviceType, extDevice.deviceClass), _setValueIf(envTags, CtxTagKeys.deviceIp, extDevice.ip), 
                _setValueIf(envTags, CtxTagKeys.deviceModel, extDevice.model), _setValueIf(envTags, CtxTagKeys.deviceType, extDevice.deviceType));
                var web = item.ext.web;
                if (web) {
                    _setValueIf(envTags, CtxTagKeys.deviceLanguage, web.browserLang), _setValueIf(envTags, CtxTagKeys.deviceBrowserVersion, web.browserVer), 
                    _setValueIf(envTags, CtxTagKeys.deviceBrowser, web.browser);
                    var envData = env.data = env.data || {}, envBaseData = envData[strBaseData] = envData[strBaseData] || {}, envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};
                    _setValueIf(envProps, "domain", web.domain), _setValueIf(envProps, "isManual", web.isManual ? strTrue : null), 
                    _setValueIf(envProps, "screenRes", web.screenRes), _setValueIf(envProps, "userConsent", web.userConsent ? strTrue : null);
                }
                var extOs = itmExt.os;
                extOs && _setValueIf(envTags, CtxTagKeys.deviceOS, extOs.name);
                var extTrace = itmExt.trace;
                extTrace && (_setValueIf(envTags, CtxTagKeys.operationParentId, extTrace.parentID), 
                _setValueIf(envTags, CtxTagKeys.operationName, dataSanitizeString(logger, extTrace.name)), 
                _setValueIf(envTags, CtxTagKeys.operationId, extTrace.traceID));
                for (var tgs = {}, i = itmTags.length - 1; i >= 0; i--) objForEachKey(itmTags[i], function(key, value) {
                    tgs[key] = value;
                }), itmTags.splice(i, 1);
                objForEachKey(itmTags, function(tg, value) {
                    tgs[tg] = value;
                });
                var theTags = __assignFn(__assignFn({}, envTags), tgs);
                theTags[CtxTagKeys.internalSdkVersion] || (theTags[CtxTagKeys.internalSdkVersion] = "javascript:".concat(EnvelopeCreator.Version)), 
                env.tags = optimizeObject(theTags);
            }(logger, telemetryItem, envelope), telemetryItem.tags = telemetryItem.tags || [], 
            optimizeObject(envelope);
        }
        function EnvelopeCreatorInit(logger, telemetryItem) {
            isNullOrUndefined(telemetryItem[strBaseData]) && logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
        }
        var EnvelopeCreator = {
            Version: "2.7.4"
        };
        function EventEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
            EnvelopeCreatorInit(logger, telemetryItem);
            var customProperties = {}, customMeasurements = {};
            telemetryItem.baseType !== Event_Event.dataType && (customProperties.baseTypeSource = telemetryItem.baseType), 
            telemetryItem.baseType === Event_Event.dataType ? (customProperties = telemetryItem[strBaseData][strProperties] || {}, 
            customMeasurements = telemetryItem[strBaseData].measurements || {}) : telemetryItem[strBaseData] && _extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements), 
            _extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements), 
            isNullOrUndefined(customUndefinedValue) || _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
            var eventData = new Event_Event(logger, telemetryItem[strBaseData].name, customProperties, customMeasurements), data = new Data_Data(Event_Event.dataType, eventData);
            return _createEnvelope(logger, Event_Event.envelopeType, telemetryItem, data);
        }
        var Sender_a, Serializer = function Serializer(logger) {
            dynamicProto(Serializer, this, function(_self) {
                function _serializeObject(source, name) {
                    var output = {};
                    if (!source) return logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, "cannot serialize object because it is null or undefined", {
                        name
                    }, !0), output;
                    if (source.__aiCircularRefCheck) return logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CircularReferenceDetected, "Circular reference detected while serializing object", {
                        name
                    }, !0), output;
                    if (!source.aiDataContract) {
                        if ("measurements" === name) output = _serializeStringMap(source, "number", name); else if ("properties" === name) output = _serializeStringMap(source, "string", name); else if ("tags" === name) output = _serializeStringMap(source, "string", name); else if (isArray(source)) output = _serializeArray(source, name); else {
                            logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, "Attempting to serialize an object which does not implement ISerializable", {
                                name
                            }, !0);
                            try {
                                getJSON().stringify(source), output = source;
                            } catch (e) {
                                logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, e && isFunction(e.toString) ? e.toString() : "Error serializing object", null, !0);
                            }
                        }
                        return output;
                    }
                    return source.__aiCircularRefCheck = !0, objForEachKey(source.aiDataContract, function(field, contract) {
                        var isRequired = isFunction(contract) ? 1 & contract() : 1 & contract, isHidden = isFunction(contract) ? 4 & contract() : 4 & contract, isArray = 2 & contract, isPresent = void 0 !== source[field], isObj = isObject(source[field]) && null !== source[field];
                        if (!isRequired || isPresent || isArray) {
                            if (!isHidden) {
                                var value;
                                void 0 !== (value = isObj ? isArray ? _serializeArray(source[field], field) : _serializeObject(source[field], field) : source[field]) && (output[field] = value);
                            }
                        } else logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.MissingRequiredFieldSpecification, "Missing required field specification. The field is required but not present on source", {
                            field,
                            name
                        });
                    }), delete source.__aiCircularRefCheck, output;
                }
                function _serializeArray(sources, name) {
                    var output;
                    if (sources) if (isArray(sources)) {
                        output = [];
                        for (var i = 0; i < sources.length; i++) {
                            var item = _serializeObject(sources[i], name + "[" + i + "]");
                            output.push(item);
                        }
                    } else logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ItemNotInArray, "This field was specified as an array in the contract but the item is not an array.\r\n", {
                        name
                    }, !0);
                    return output;
                }
                function _serializeStringMap(map, expectedType, name) {
                    var output;
                    return map && (output = {}, objForEachKey(map, function(field, value) {
                        if ("string" === expectedType) output[field] = void 0 === value ? "undefined" : null === value ? "null" : value.toString ? value.toString() : "invalid field: toString() is not defined."; else if ("number" === expectedType) if (void 0 === value) output[field] = "undefined"; else if (null === value) output[field] = "null"; else {
                            var num = parseFloat(value);
                            output[field] = isNaN(num) ? "NaN" : num;
                        } else output[field] = "invalid field: " + name + " is of unknown type.", logger.throwInternal(LoggingSeverity.CRITICAL, output[field], null, !0);
                    })), output;
                }
                _self.serialize = function(input) {
                    var output = _serializeObject(input, "root");
                    try {
                        return getJSON().stringify(output);
                    } catch (e) {
                        logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, e && isFunction(e.toString) ? e.toString() : "Error serializing object", null, !0);
                    }
                };
            });
        }, OfflineListener = function() {
            function OfflineListener() {
                var _window = getWindow(), _document = EnvUtils_getDocument(), isListening = !1, _onlineStatus = !0;
                dynamicProto(OfflineListener, this, function(_self) {
                    try {
                        if (_window && attachEvent(_window, "online", _setOnline) && (attachEvent(_window, "offline", _setOffline), 
                        isListening = !0), _document) {
                            var target = _document.body || _document;
                            isUndefined(target.ononline) || (target.ononline = _setOnline, target.onoffline = _setOffline, 
                            isListening = !0);
                        }
                        if (isListening) {
                            var _navigator = getNavigator();
                            _navigator && !isNullOrUndefined(_navigator.onLine) && (_onlineStatus = _navigator.onLine);
                        }
                    } catch (e) {
                        isListening = !1;
                    }
                    function _setOnline() {
                        _onlineStatus = !0;
                    }
                    function _setOffline() {
                        _onlineStatus = !1;
                    }
                    _self.isListening = isListening, _self.isOnline = function() {
                        var result = !0, _navigator = getNavigator();
                        return isListening ? result = _onlineStatus : _navigator && !isNullOrUndefined(_navigator.onLine) && (result = _navigator.onLine), 
                        result;
                    }, _self.isOffline = function() {
                        return !_self.isOnline();
                    };
                });
            }
            return OfflineListener.Offline = new OfflineListener, OfflineListener;
        }(), Offline = OfflineListener.Offline, HashCodeScoreGenerator = function() {
            function HashCodeScoreGenerator() {}
            return HashCodeScoreGenerator.prototype.getHashCodeScore = function(key) {
                return this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE * 100;
            }, HashCodeScoreGenerator.prototype.getHashCode = function(input) {
                if ("" === input) return 0;
                for (;input.length < 8; ) input = input.concat(input);
                for (var hash = 5381, i = 0; i < input.length; ++i) hash = (hash << 5) + hash + input.charCodeAt(i), 
                hash |= 0;
                return Math.abs(hash);
            }, HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647, HashCodeScoreGenerator;
        }(), SamplingScoreGenerator = function() {
            var hashCodeGenerator = new HashCodeScoreGenerator, keys = new ContextTagKeys;
            this.getSamplingScore = function(item) {
                return item.tags && item.tags[keys.userId] ? hashCodeGenerator.getHashCodeScore(item.tags[keys.userId]) : item.ext && item.ext.user && item.ext.user.id ? hashCodeGenerator.getHashCodeScore(item.ext.user.id) : item.tags && item.tags[keys.operationId] ? hashCodeGenerator.getHashCodeScore(item.tags[keys.operationId]) : item.ext && item.ext.telemetryTrace && item.ext.telemetryTrace.traceID ? hashCodeGenerator.getHashCodeScore(item.ext.telemetryTrace.traceID) : 100 * Math.random();
            };
        }, Sample = function() {
            function Sample(sampleRate, logger) {
                this.INT_MAX_VALUE = 2147483647;
                var _logger = logger || safeGetLogger(null);
                (sampleRate > 100 || sampleRate < 0) && (_logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SampleRateOutOfRange, "Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.", {
                    samplingRate: sampleRate
                }, !0), sampleRate = 100), this.sampleRate = sampleRate, this.samplingScoreGenerator = new SamplingScoreGenerator;
            }
            return Sample.prototype.isSampledIn = function(envelope) {
                var samplingPercentage = this.sampleRate;
                return null == samplingPercentage || samplingPercentage >= 100 || envelope.baseType === Metric.dataType || this.samplingScoreGenerator.getSamplingScore(envelope) < samplingPercentage;
            }, Sample;
        }();
        function _getResponseText(xhr) {
            try {
                return xhr.responseText;
            } catch (e) {}
            return null;
        }
        var EnvelopeTypeCreator = ((Sender_a = {})[Event_Event.dataType] = EventEnvelopeCreator, 
        Sender_a[Trace.dataType] = function(logger, telemetryItem, customUndefinedValue) {
            EnvelopeCreatorInit(logger, telemetryItem);
            var message = telemetryItem[strBaseData].message, severityLevel = telemetryItem[strBaseData].severityLevel, props = telemetryItem[strBaseData][strProperties] || {}, measurements = telemetryItem[strBaseData].measurements || {};
            _extractPropsAndMeasurements(telemetryItem.data, props, measurements), isNullOrUndefined(customUndefinedValue) || _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
            var baseData = new Trace(logger, message, severityLevel, props, measurements), data = new Data_Data(Trace.dataType, baseData);
            return _createEnvelope(logger, Trace.envelopeType, telemetryItem, data);
        }, Sender_a[PageView.dataType] = function(logger, telemetryItem, customUndefinedValue) {
            EnvelopeCreatorInit(logger, telemetryItem);
            var duration, baseData = telemetryItem[strBaseData];
            isNullOrUndefined(baseData) || isNullOrUndefined(baseData[strProperties]) || isNullOrUndefined(baseData[strProperties].duration) ? isNullOrUndefined(telemetryItem.data) || isNullOrUndefined(telemetryItem.data.duration) || (duration = telemetryItem.data.duration, 
            delete telemetryItem.data.duration) : (duration = baseData[strProperties].duration, 
            delete baseData[strProperties].duration);
            var currentContextId, bd = telemetryItem[strBaseData];
            ((telemetryItem.ext || {}).trace || {}).traceID && (currentContextId = telemetryItem.ext.trace.traceID);
            var id = bd.id || currentContextId, name = bd.name, url = bd.uri, properties = bd[strProperties] || {}, measurements = bd.measurements || {};
            isNullOrUndefined(bd.refUri) || (properties.refUri = bd.refUri), isNullOrUndefined(bd.pageType) || (properties.pageType = bd.pageType), 
            isNullOrUndefined(bd.isLoggedIn) || (properties.isLoggedIn = bd.isLoggedIn.toString()), 
            isNullOrUndefined(bd[strProperties]) || objForEachKey(bd[strProperties], function(key, value) {
                properties[key] = value;
            }), _extractPropsAndMeasurements(telemetryItem.data, properties, measurements), 
            isNullOrUndefined(customUndefinedValue) || _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
            var pageViewData = new PageView(logger, name, url, duration, properties, measurements, id), data = new Data_Data(PageView.dataType, pageViewData);
            return _createEnvelope(logger, PageView.envelopeType, telemetryItem, data);
        }, Sender_a[PageViewPerformance.dataType] = function(logger, telemetryItem, customUndefinedValue) {
            EnvelopeCreatorInit(logger, telemetryItem);
            var bd = telemetryItem[strBaseData], name = bd.name, url = bd.uri || bd.url, properties = bd[strProperties] || {}, measurements = bd.measurements || {};
            _extractPropsAndMeasurements(telemetryItem.data, properties, measurements), isNullOrUndefined(customUndefinedValue) || _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
            var baseData = new PageViewPerformance(logger, name, url, void 0, properties, measurements, bd), data = new Data_Data(PageViewPerformance.dataType, baseData);
            return _createEnvelope(logger, PageViewPerformance.envelopeType, telemetryItem, data);
        }, Sender_a[Exception.dataType] = function(logger, telemetryItem, customUndefinedValue) {
            EnvelopeCreatorInit(logger, telemetryItem);
            var customMeasurements = telemetryItem[strBaseData].measurements || {}, customProperties = telemetryItem[strBaseData][strProperties] || {};
            _extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements), 
            isNullOrUndefined(customUndefinedValue) || _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
            var exData = Exception.CreateFromInterface(logger, telemetryItem[strBaseData], customProperties, customMeasurements), data = new Data_Data(Exception.dataType, exData);
            return _createEnvelope(logger, Exception.envelopeType, telemetryItem, data);
        }, Sender_a[Metric.dataType] = function(logger, telemetryItem, customUndefinedValue) {
            EnvelopeCreatorInit(logger, telemetryItem);
            var baseData = telemetryItem[strBaseData], props = baseData[strProperties] || {}, measurements = baseData.measurements || {};
            _extractPropsAndMeasurements(telemetryItem.data, props, measurements), isNullOrUndefined(customUndefinedValue) || _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
            var baseMetricData = new Metric(logger, baseData.name, baseData.average, baseData.sampleCount, baseData.min, baseData.max, baseData.stdDev, props, measurements), data = new Data_Data(Metric.dataType, baseMetricData);
            return _createEnvelope(logger, Metric.envelopeType, telemetryItem, data);
        }, Sender_a[RemoteDependencyData_RemoteDependencyData.dataType] = function(logger, telemetryItem, customUndefinedValue) {
            EnvelopeCreatorInit(logger, telemetryItem);
            var customMeasurements = telemetryItem[strBaseData].measurements || {}, customProperties = telemetryItem[strBaseData][strProperties] || {};
            _extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements), 
            isNullOrUndefined(customUndefinedValue) || _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
            var bd = telemetryItem[strBaseData];
            if (isNullOrUndefined(bd)) return logger.warnToConsole("Invalid input for dependency data"), 
            null;
            var remoteDepData = new RemoteDependencyData_RemoteDependencyData(logger, bd.id, bd.target, bd.name, bd.duration, bd.success, bd.responseCode, bd[strProperties] && bd[strProperties]["http.method"] ? bd[strProperties]["http.method"] : "GET", bd.type, bd.correlationContext, customProperties, customMeasurements), data = new Data_Data(RemoteDependencyData_RemoteDependencyData.dataType, remoteDepData);
            return _createEnvelope(logger, RemoteDependencyData_RemoteDependencyData.envelopeType, telemetryItem, data);
        }, Sender_a), Sender = function(_super) {
            function Sender() {
                var _consecutiveErrors, _retryAt, _this = _super.call(this) || this;
                _this.priority = 1001, _this.identifier = "AppInsightsChannelPlugin";
                var _timeoutHandle, _serializer, _stamp_specific_redirects, _fallbackSender, _syncUnloadSender, _paused = !1, _headers = {}, _syncFetchPayload = 0;
                return _this._senderConfig = {
                    endpointUrl: function() {
                        return "https://dc.services.visualstudio.com/v2/track";
                    },
                    emitLineDelimitedJson: function() {
                        return !1;
                    },
                    maxBatchInterval: function() {
                        return 15e3;
                    },
                    maxBatchSizeInBytes: function() {
                        return 102400;
                    },
                    disableTelemetry: function() {
                        return !1;
                    },
                    enableSessionStorageBuffer: function() {
                        return !0;
                    },
                    isRetryDisabled: function() {
                        return !1;
                    },
                    isBeaconApiDisabled: function() {
                        return !0;
                    },
                    disableXhr: function() {
                        return !1;
                    },
                    onunloadDisableFetch: function() {
                        return !1;
                    },
                    onunloadDisableBeacon: function() {
                        return !1;
                    },
                    instrumentationKey: function() {},
                    namePrefix: function() {},
                    samplingPercentage: function() {
                        return 100;
                    },
                    customHeaders: function() {},
                    convertUndefined: function() {},
                    eventsLimitInMem: function() {
                        return 1e4;
                    }
                }, dynamicProto(Sender, _this, function(_self, _base) {
                    function _checkResponsStatus(status, payload, responseUrl, countOfItemsInPayload, errorMessage, res) {
                        var response = null;
                        if (_self._appId || (response = _parseResponse(res)) && response.appId && (_self._appId = response.appId), 
                        (status < 200 || status >= 300) && 0 !== status) {
                            if ((301 === status || 307 === status || 308 === status) && !_checkAndUpdateEndPointUrl(responseUrl)) return void _self._onError(payload, errorMessage);
                            !_self._senderConfig.isRetryDisabled() && _isRetriable(status) ? (_resendPayload(payload), 
                            _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, ". Response code " + status + ". Will retry to send " + payload.length + " items.")) : _self._onError(payload, errorMessage);
                        } else Offline.isOffline() ? _self._senderConfig.isRetryDisabled() || (_resendPayload(payload, 10), 
                        _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, ". Offline - Response Code: ".concat(status, ". Offline status: ").concat(Offline.isOffline(), ". Will retry to send ").concat(payload.length, " items."))) : (_checkAndUpdateEndPointUrl(responseUrl), 
                        206 === status ? (response || (response = _parseResponse(res)), response && !_self._senderConfig.isRetryDisabled() ? _self._onPartialSuccess(payload, response) : _self._onError(payload, errorMessage)) : (_consecutiveErrors = 0, 
                        _self._onSuccess(payload, countOfItemsInPayload)));
                    }
                    function _checkAndUpdateEndPointUrl(responseUrl) {
                        return !(_stamp_specific_redirects >= 10 || isNullOrUndefined(responseUrl) || "" === responseUrl || responseUrl === _self._senderConfig.endpointUrl() || (_self._senderConfig.endpointUrl = function() {
                            return responseUrl;
                        }, ++_stamp_specific_redirects, 0));
                    }
                    function _doUnloadSend(payload, isAsync) {
                        _syncUnloadSender ? _syncUnloadSender(payload, !1) : _beaconSender(payload);
                    }
                    function _doBeaconSend(payload) {
                        var nav = getNavigator(), buffer = _self._buffer, url = _self._senderConfig.endpointUrl(), batch = _self._buffer.batchPayloads(payload), plainTextBatch = new Blob([ batch ], {
                            type: "text/plain;charset=UTF-8"
                        }), queued = nav.sendBeacon(url, plainTextBatch);
                        return queued && (buffer.markAsSent(payload), _self._onSuccess(payload, payload.length)), 
                        queued;
                    }
                    function _beaconSender(payload, isAsync) {
                        if (isArray(payload) && payload.length > 0 && !_doBeaconSend(payload)) {
                            for (var droppedPayload = [], lp = 0; lp < payload.length; lp++) {
                                var thePayload = payload[lp];
                                _doBeaconSend([ thePayload ]) || droppedPayload.push(thePayload);
                            }
                            droppedPayload.length > 0 && (_fallbackSender(droppedPayload, !0), _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, ". Failed to send telemetry with Beacon API, retried with normal sender."));
                        }
                    }
                    function _xhrSender(payload, isAsync) {
                        var xhr = new XMLHttpRequest, endPointUrl = _self._senderConfig.endpointUrl();
                        try {
                            xhr[DisabledPropertyName] = !0;
                        } catch (e) {}
                        xhr.open("POST", endPointUrl, isAsync), xhr.setRequestHeader("Content-type", "application/json"), 
                        isInternalApplicationInsightsEndpoint(endPointUrl) && xhr.setRequestHeader(RequestHeaders.sdkContextHeader, RequestHeaders.sdkContextHeaderAppIdRequest), 
                        arrForEach(objKeys(_headers), function(headerName) {
                            xhr.setRequestHeader(headerName, _headers[headerName]);
                        }), xhr.onreadystatechange = function() {
                            return _self._xhrReadyStateChange(xhr, payload, payload.length);
                        }, xhr.onerror = function(event) {
                            return _self._onError(payload, _formatErrorMessageXhr(xhr), event);
                        };
                        var batch = _self._buffer.batchPayloads(payload);
                        xhr.send(batch), _self._buffer.markAsSent(payload);
                    }
                    function _fetchKeepAliveSender(payload, isAsync) {
                        if (isArray(payload)) {
                            for (var payloadSize = payload.length, lp = 0; lp < payload.length; lp++) payloadSize += payload[lp].length;
                            _syncFetchPayload + payloadSize <= 65e3 ? _doFetchSender(payload, !1) : isBeaconsSupported() ? _beaconSender(payload) : (_fallbackSender && _fallbackSender(payload, !0), 
                            _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, ". Failed to send telemetry with Beacon API, retried with xhrSender."));
                        }
                    }
                    function _fetchSender(payload, isAsync) {
                        _doFetchSender(payload, !0);
                    }
                    function _doFetchSender(payload, isAsync) {
                        var _a, endPointUrl = _self._senderConfig.endpointUrl(), batch = _self._buffer.batchPayloads(payload), plainTextBatch = new Blob([ batch ], {
                            type: "application/json"
                        }), requestHeaders = new Headers, batchLength = batch.length, ignoreResponse = !1, responseHandled = !1;
                        isInternalApplicationInsightsEndpoint(endPointUrl) && requestHeaders.append(RequestHeaders.sdkContextHeader, RequestHeaders.sdkContextHeaderAppIdRequest), 
                        arrForEach(objKeys(_headers), function(headerName) {
                            requestHeaders.append(headerName, _headers[headerName]);
                        });
                        var init = ((_a = {
                            method: "POST",
                            headers: requestHeaders,
                            body: plainTextBatch
                        })[DisabledPropertyName] = !0, _a);
                        isAsync || (init.keepalive = !0, ignoreResponse = !0, _syncFetchPayload += batchLength);
                        var request = new Request(endPointUrl, init);
                        try {
                            request[DisabledPropertyName] = !0;
                        } catch (e) {}
                        _self._buffer.markAsSent(payload);
                        try {
                            fetch(request).then(function(response) {
                                isAsync || (_syncFetchPayload -= batchLength, batchLength = 0), responseHandled || (responseHandled = !0, 
                                response.ok ? response.text().then(function(text) {
                                    _checkResponsStatus(response.status, payload, response.url, payload.length, response.statusText, text);
                                }) : _self._onError(payload, response.statusText));
                            }).catch(function(error) {
                                isAsync || (_syncFetchPayload -= batchLength, batchLength = 0), responseHandled || (responseHandled = !0, 
                                _self._onError(payload, error.message));
                            });
                        } catch (e) {
                            responseHandled || _self._onError(payload, dumpObj(e));
                        }
                        ignoreResponse && !responseHandled && (responseHandled = !0, _self._onSuccess(payload, payload.length));
                    }
                    function _parseResponse(response) {
                        try {
                            if (response && "" !== response) {
                                var result = getJSON().parse(response);
                                if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted && result.itemsReceived - result.itemsAccepted === result.errors.length) return result;
                            }
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.InvalidBackendResponse, "Cannot parse the response. " + getExceptionName(e), {
                                response
                            });
                        }
                        return null;
                    }
                    function _resendPayload(payload, linearFactor) {
                        if (void 0 === linearFactor && (linearFactor = 1), payload && 0 !== payload.length) {
                            var buffer = _self._buffer;
                            buffer.clearSent(payload), _consecutiveErrors++;
                            for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) buffer.enqueue(payload_1[_i]);
                            !function(linearFactor) {
                                var delayInSeconds;
                                if (_consecutiveErrors <= 1) delayInSeconds = 10; else {
                                    var backOffSlot = (Math.pow(2, _consecutiveErrors) - 1) / 2, backOffDelay = Math.floor(Math.random() * backOffSlot * 10) + 1;
                                    delayInSeconds = Math.max(Math.min(backOffDelay *= linearFactor, 3600), 10);
                                }
                                var retryAfterTimeSpan = dateNow() + 1e3 * delayInSeconds;
                                _retryAt = retryAfterTimeSpan;
                            }(linearFactor), _setupTimer();
                        }
                    }
                    function _setupTimer() {
                        if (!_timeoutHandle && !_paused) {
                            var retryInterval = _retryAt ? Math.max(0, _retryAt - dateNow()) : 0, timerValue = Math.max(_self._senderConfig.maxBatchInterval(), retryInterval);
                            _timeoutHandle = setTimeout(function() {
                                _timeoutHandle = null, _self.triggerSend(!0, null, 1);
                            }, timerValue);
                        }
                    }
                    function _clearScheduledTimer() {
                        clearTimeout(_timeoutHandle), _timeoutHandle = null, _retryAt = null;
                    }
                    function _isRetriable(statusCode) {
                        return 408 === statusCode || 429 === statusCode || 500 === statusCode || 503 === statusCode;
                    }
                    function _formatErrorMessageXhr(xhr, message) {
                        return xhr ? "XMLHttpRequest,Status:" + xhr.status + ",Response:" + _getResponseText(xhr) || 0 : message;
                    }
                    function _xdrSender(payload, isAsync) {
                        var buffer = _self._buffer, _window = getWindow(), xdr = new XDomainRequest;
                        xdr.onload = function() {
                            return _self._xdrOnLoad(xdr, payload);
                        }, xdr.onerror = function(event) {
                            return _self._onError(payload, _formatErrorMessageXdr(xdr), event);
                        };
                        var hostingProtocol = _window && _window.location && _window.location.protocol || "";
                        if (0 !== _self._senderConfig.endpointUrl().lastIndexOf(hostingProtocol, 0)) return _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, ". Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol."), 
                        void buffer.clear();
                        var endpointUrl = _self._senderConfig.endpointUrl().replace(/^(https?:)/, "");
                        xdr.open("POST", endpointUrl);
                        var batch = buffer.batchPayloads(payload);
                        xdr.send(batch), buffer.markAsSent(payload);
                    }
                    function _formatErrorMessageXdr(xdr, message) {
                        return xdr ? "XDomainRequest,Response:" + _getResponseText(xdr) || 0 : message;
                    }
                    _self.pause = function() {
                        _clearScheduledTimer(), _paused = !0;
                    }, _self.resume = function() {
                        _paused && (_paused = !1, _retryAt = null, _self._buffer.size() > _self._senderConfig.maxBatchSizeInBytes() && _self.triggerSend(!0, null, 10), 
                        _setupTimer());
                    }, _self.flush = function() {
                        if (!_paused) {
                            _clearScheduledTimer();
                            try {
                                _self.triggerSend(!0, null, 1);
                            } catch (e) {
                                _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FlushFailed, "flush failed, telemetry will not be collected: " + getExceptionName(e), {
                                    exception: dumpObj(e)
                                });
                            }
                        }
                    }, _self.onunloadFlush = function() {
                        if (!_paused) if (!1 !== _self._senderConfig.onunloadDisableBeacon() && !1 !== _self._senderConfig.isBeaconApiDisabled() || !isBeaconsSupported()) _self.flush(); else try {
                            _self.triggerSend(!0, _doUnloadSend, 2);
                        } catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedToSendQueuedTelemetry, "failed to flush with beacon sender on page unload, telemetry will not be collected: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self.teardown = function() {
                        throwError("Method not implemented.");
                    }, _self.addHeader = function(name, value) {
                        _headers[name] = value;
                    }, _self.initialize = function(config, core, extensions, pluginChain) {
                        _base.initialize(config, core, extensions, pluginChain);
                        var ctx = _self._getTelCtx(), identifier = _self.identifier;
                        _serializer = new Serializer(core.logger), _consecutiveErrors = 0, _retryAt = null, 
                        _self._sender = null, _stamp_specific_redirects = 0;
                        var diagLog = _self.diagLog();
                        objForEachKey({
                            endpointUrl: function() {
                                return "https://dc.services.visualstudio.com/v2/track";
                            },
                            emitLineDelimitedJson: function() {
                                return !1;
                            },
                            maxBatchInterval: function() {
                                return 15e3;
                            },
                            maxBatchSizeInBytes: function() {
                                return 102400;
                            },
                            disableTelemetry: function() {
                                return !1;
                            },
                            enableSessionStorageBuffer: function() {
                                return !0;
                            },
                            isRetryDisabled: function() {
                                return !1;
                            },
                            isBeaconApiDisabled: function() {
                                return !0;
                            },
                            disableXhr: function() {
                                return !1;
                            },
                            onunloadDisableFetch: function() {
                                return !1;
                            },
                            onunloadDisableBeacon: function() {
                                return !1;
                            },
                            instrumentationKey: function() {},
                            namePrefix: function() {},
                            samplingPercentage: function() {
                                return 100;
                            },
                            customHeaders: function() {},
                            convertUndefined: function() {},
                            eventsLimitInMem: function() {
                                return 1e4;
                            }
                        }, function(field, value) {
                            _self._senderConfig[field] = function() {
                                return ctx.getConfig(identifier, field, value());
                            };
                        }), _self._buffer = _self._senderConfig.enableSessionStorageBuffer() && utlCanUseSessionStorage() ? new SessionStorageSendBuffer(diagLog, _self._senderConfig) : new ArraySendBuffer(diagLog, _self._senderConfig), 
                        _self._sample = new Sample(_self._senderConfig.samplingPercentage(), diagLog), function(config) {
                            return !(isNullOrUndefined(config.disableInstrumentationKeyValidation) || !config.disableInstrumentationKeyValidation) || new RegExp("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$").test(config.instrumentationKey);
                        }(config) || diagLog.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.InvalidInstrumentationKey, "Invalid Instrumentation key " + config.instrumentationKey), 
                        !isInternalApplicationInsightsEndpoint(_self._senderConfig.endpointUrl()) && _self._senderConfig.customHeaders() && _self._senderConfig.customHeaders().length > 0 && arrForEach(_self._senderConfig.customHeaders(), function(customHeader) {
                            _this.addHeader(customHeader.header, customHeader.value);
                        });
                        var senderConfig = _self._senderConfig, sendPostFunc = null;
                        !senderConfig.disableXhr() && useXDomainRequest() ? sendPostFunc = _xdrSender : !senderConfig.disableXhr() && isXhrSupported() && (sendPostFunc = _xhrSender), 
                        !sendPostFunc && isFetchSupported() && (sendPostFunc = _fetchSender), _fallbackSender = sendPostFunc || _xhrSender, 
                        !senderConfig.isBeaconApiDisabled() && isBeaconsSupported() && (sendPostFunc = _beaconSender), 
                        _self._sender = sendPostFunc || _xhrSender, _syncUnloadSender = !senderConfig.onunloadDisableFetch() && isFetchSupported(!0) ? _fetchKeepAliveSender : isBeaconsSupported() ? _beaconSender : !senderConfig.disableXhr() && useXDomainRequest() ? _xdrSender : !senderConfig.disableXhr() && isXhrSupported() ? _xhrSender : _fallbackSender;
                    }, _self.processTelemetry = function(telemetryItem, itemCtx) {
                        itemCtx = _self._getTelCtx(itemCtx);
                        try {
                            if (_self._senderConfig.disableTelemetry()) return;
                            if (!telemetryItem) return void itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSendEmptyTelemetry, "Cannot send empty telemetry");
                            if (telemetryItem.baseData && !telemetryItem.baseType) return void itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.InvalidEvent, "Cannot send telemetry without baseData and baseType");
                            if (telemetryItem.baseType || (telemetryItem.baseType = "EventData"), !_self._sender) return void itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SenderNotInitialized, "Sender was not initialized");
                            if (!_self._sample.isSampledIn(telemetryItem)) return void itemCtx.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TelemetrySampledAndNotSent, "Telemetry item was sampled out and not sent", {
                                SampleRate: _self._sample.sampleRate
                            });
                            telemetryItem[SampleRate] = _self._sample.sampleRate;
                            var convertUndefined = _self._senderConfig.convertUndefined() || void 0, defaultEnvelopeIkey = telemetryItem.iKey || _self._senderConfig.instrumentationKey(), aiEnvelope_1 = Sender.constructEnvelope(telemetryItem, defaultEnvelopeIkey, itemCtx.diagLog(), convertUndefined);
                            if (!aiEnvelope_1) return void itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CreateEnvelopeError, "Unable to create an AppInsights envelope");
                            var doNotSendItem_1 = !1;
                            if (telemetryItem.tags && telemetryItem.tags.ProcessLegacy && (arrForEach(telemetryItem.tags.ProcessLegacy, function(callBack) {
                                try {
                                    callBack && !1 === callBack(aiEnvelope_1) && (doNotSendItem_1 = !0, itemCtx.diagLog().warnToConsole("Telemetry processor check returns false"));
                                } catch (e) {
                                    itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + getExceptionName(e), {
                                        exception: dumpObj(e)
                                    }, !0);
                                }
                            }), delete telemetryItem.tags.ProcessLegacy), doNotSendItem_1) return;
                            var payload = _serializer.serialize(aiEnvelope_1), buffer = _self._buffer;
                            buffer.size() + payload.length > _self._senderConfig.maxBatchSizeInBytes() && _self.triggerSend(!0, null, 10), 
                            buffer.enqueue(payload), _setupTimer();
                        } catch (e) {
                            itemCtx.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedAddingTelemetryToBuffer, "Failed adding telemetry to the sender's buffer, some telemetry will be lost: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                        _self.processNext(telemetryItem, itemCtx);
                    }, _self._xhrReadyStateChange = function(xhr, payload, countOfItemsInPayload) {
                        4 === xhr.readyState && _checkResponsStatus(xhr.status, payload, xhr.responseURL, countOfItemsInPayload, _formatErrorMessageXhr(xhr), _getResponseText(xhr) || xhr.response);
                    }, _self.triggerSend = function(async, forcedSender, sendReason) {
                        if (void 0 === async && (async = !0), !_paused) try {
                            var buffer = _self._buffer;
                            if (_self._senderConfig.disableTelemetry()) buffer.clear(); else {
                                if (buffer.count() > 0) {
                                    var payload = buffer.getItems();
                                    !function(sendRequest, isAsync) {
                                        var manager = _self.core.getNotifyMgr ? _self.core.getNotifyMgr() : _self.core._notificationManager;
                                        if (manager && manager.eventsSendRequest) try {
                                            manager.eventsSendRequest(sendRequest, isAsync);
                                        } catch (e) {
                                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.NotificationException, "send request notification failed: " + getExceptionName(e), {
                                                exception: dumpObj(e)
                                            });
                                        }
                                    }(sendReason || 0, async), forcedSender ? forcedSender.call(_this, payload, async) : _self._sender(payload, async);
                                }
                                new Date;
                            }
                            _clearScheduledTimer();
                        } catch (e) {
                            var ieVer = getIEVersion();
                            (!ieVer || ieVer > 9) && _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TransmissionFailed, "Telemetry transmission failed, some telemetry will be lost: " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                    }, _self._onError = function(payload, message, event) {
                        _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.OnError, "Failed to send telemetry.", {
                            message
                        }), _self._buffer.clearSent(payload);
                    }, _self._onPartialSuccess = function(payload, results) {
                        for (var failed = [], retry = [], _i = 0, errors_1 = results.errors.reverse(); _i < errors_1.length; _i++) {
                            var error = errors_1[_i], extracted = payload.splice(error.index, 1)[0];
                            _isRetriable(error.statusCode) ? retry.push(extracted) : failed.push(extracted);
                        }
                        payload.length > 0 && _self._onSuccess(payload, results.itemsAccepted), failed.length > 0 && _self._onError(failed, _formatErrorMessageXhr(null, [ "partial success", results.itemsAccepted, "of", results.itemsReceived ].join(" "))), 
                        retry.length > 0 && (_resendPayload(retry), _self.diagLog().throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, "Partial success. Delivered: " + payload.length + ", Failed: " + failed.length + ". Will retry to send " + retry.length + " our of " + results.itemsReceived + " items"));
                    }, _self._onSuccess = function(payload, countOfItemsInPayload) {
                        _self._buffer.clearSent(payload);
                    }, _self._xdrOnLoad = function(xdr, payload) {
                        var responseText = _getResponseText(xdr);
                        if (!xdr || responseText + "" != "200" && "" !== responseText) {
                            var results = _parseResponse(responseText);
                            results && results.itemsReceived && results.itemsReceived > results.itemsAccepted && !_self._senderConfig.isRetryDisabled() ? _self._onPartialSuccess(payload, results) : _self._onError(payload, _formatErrorMessageXdr(xdr));
                        } else _consecutiveErrors = 0, _self._onSuccess(payload, 0);
                    };
                }), _this;
            }
            return __extendsFn(Sender, _super), Sender.constructEnvelope = function(orig, iKey, logger, convertUndefined) {
                var envelope;
                return envelope = iKey === orig.iKey || isNullOrUndefined(iKey) ? orig : __assignFn(__assignFn({}, orig), {
                    iKey
                }), (EnvelopeTypeCreator[envelope.baseType] || EventEnvelopeCreator)(logger, envelope, convertUndefined);
            }, Sender;
        }(BaseTelemetryPlugin), Session = function() {}, _SessionManager = function() {
            function _SessionManager(config, core) {
                var _storageNamePrefix, _cookieUpdatedTimestamp, _logger = safeGetLogger(core), _cookieManager = safeGetCookieMgr(core);
                dynamicProto(_SessionManager, this, function(_self) {
                    config || (config = {}), isFunction(config.sessionExpirationMs) || (config.sessionExpirationMs = function() {
                        return _SessionManager.acquisitionSpan;
                    }), isFunction(config.sessionRenewalMs) || (config.sessionRenewalMs = function() {
                        return _SessionManager.renewalSpan;
                    }), _self.config = config;
                    var sessionCookiePostfix = _self.config.sessionCookiePostfix && _self.config.sessionCookiePostfix() ? _self.config.sessionCookiePostfix() : _self.config.namePrefix && _self.config.namePrefix() ? _self.config.namePrefix() : "";
                    function _initializeAutomaticSessionWithData(session, sessionData) {
                        var isValid = !1, tokens = sessionData.split("|");
                        if (tokens.length >= 2) try {
                            var acqMs = +tokens[1] || 0, renewalMs = +tokens[2] || 0;
                            isNaN(acqMs) || acqMs <= 0 ? _logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SessionRenewalDateIsZero, "AI session acquisition date is 0, session will be reset") : isNaN(renewalMs) || renewalMs <= 0 ? _logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SessionRenewalDateIsZero, "AI session renewal date is 0, session will be reset") : tokens[0] && (session.id = tokens[0], 
                            session.acquisitionDate = acqMs, session.renewalDate = renewalMs, isValid = !0);
                        } catch (e) {
                            _logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ErrorParsingAISessionCookie, "Error parsing ai_session value [" + (sessionData || "") + "], session will be reset - " + getExceptionName(e), {
                                exception: dumpObj(e)
                            });
                        }
                        return isValid;
                    }
                    function _setCookie(session, nowMs) {
                        var acq = session.acquisitionDate;
                        session.renewalDate = nowMs;
                        var maxAgeSec, config = _self.config, renewalPeriodMs = config.sessionRenewalMs(), acqTimeLeftMs = acq + config.sessionExpirationMs() - nowMs, cookie = [ session.id, acq, nowMs ];
                        maxAgeSec = acqTimeLeftMs < renewalPeriodMs ? acqTimeLeftMs / 1e3 : renewalPeriodMs / 1e3;
                        var cookieDomain = config.cookieDomain ? config.cookieDomain() : null;
                        _cookieManager.set(_storageNamePrefix(), cookie.join("|"), config.sessionExpirationMs() > 0 ? maxAgeSec : null, cookieDomain), 
                        _cookieUpdatedTimestamp = nowMs;
                    }
                    _storageNamePrefix = function() {
                        return "ai_session" + sessionCookiePostfix;
                    }, _self.automaticSession = new Session, _self.update = function() {
                        var nowMs = dateNow(), isExpired = !1, session = _self.automaticSession;
                        session.id || (isExpired = !function(session, now) {
                            var isValid = !1, cookieValue = _cookieManager.get(_storageNamePrefix());
                            if (cookieValue && isFunction(cookieValue.split)) isValid = _initializeAutomaticSessionWithData(session, cookieValue); else {
                                var storageValue = utlGetLocalStorage(_logger, _storageNamePrefix());
                                storageValue && (isValid = _initializeAutomaticSessionWithData(session, storageValue));
                            }
                            return isValid || !!session.id;
                        }(session));
                        var sessionExpirationMs = _self.config.sessionExpirationMs();
                        if (!isExpired && sessionExpirationMs > 0) {
                            var sessionRenewalMs = _self.config.sessionRenewalMs(), timeSinceAcqMs = nowMs - session.acquisitionDate, timeSinceRenewalMs = nowMs - session.renewalDate;
                            isExpired = (isExpired = (isExpired = timeSinceAcqMs < 0 || timeSinceRenewalMs < 0) || timeSinceAcqMs > sessionExpirationMs) || timeSinceRenewalMs > sessionRenewalMs;
                        }
                        isExpired ? function(nowMs) {
                            var theConfig = _self.config || {}, getNewId = (theConfig.getNewId ? theConfig.getNewId() : null) || newId;
                            _self.automaticSession.id = getNewId(theConfig.idLength ? theConfig.idLength() : 22), 
                            _self.automaticSession.acquisitionDate = nowMs, _setCookie(_self.automaticSession, nowMs), 
                            utlCanUseLocalStorage() || _logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserDoesNotSupportLocalStorage, "Browser does not support local storage. Session durations will be inaccurate.");
                        }(nowMs) : (!_cookieUpdatedTimestamp || nowMs - _cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) && _setCookie(session, nowMs);
                    }, _self.backup = function() {
                        var guid, acq, renewal, session = _self.automaticSession;
                        guid = session.id, acq = session.acquisitionDate, renewal = session.renewalDate, 
                        utlSetLocalStorage(_logger, _storageNamePrefix(), [ guid, acq, renewal ].join("|"));
                    };
                });
            }
            return _SessionManager.acquisitionSpan = 864e5, _SessionManager.renewalSpan = 18e5, 
            _SessionManager.cookieUpdateInterval = 6e4, _SessionManager;
        }(), Application = function() {}, Device = function() {
            this.id = "browser", this.deviceClass = "Browser";
        }, Internal = function(config) {
            this.sdkVersion = (config.sdkExtension && config.sdkExtension() ? config.sdkExtension() + "_" : "") + "javascript:2.7.4";
        };
        function _validateUserInput(id) {
            return !("string" != typeof id || !id || id.match(/,|;|=| |\|/));
        }
        var User = function() {
            function User(config, core) {
                this.isNewUser = !1, this.isUserCookieSet = !1;
                var _storageNamePrefix, _logger = safeGetLogger(core), _cookieManager = safeGetCookieMgr(core);
                dynamicProto(User, this, function(_self) {
                    _self.config = config;
                    var userCookiePostfix = _self.config.userCookiePostfix && _self.config.userCookiePostfix() ? _self.config.userCookiePostfix() : "", cookie = _cookieManager.get((_storageNamePrefix = function() {
                        return User.userCookieName + userCookiePostfix;
                    })());
                    if (cookie) {
                        _self.isNewUser = !1;
                        var params = cookie.split(User.cookieSeparator);
                        params.length > 0 && (_self.id = params[0], _self.isUserCookieSet = !!_self.id);
                    }
                    function _generateNewId() {
                        var theConfig = config || {};
                        return ((theConfig.getNewId ? theConfig.getNewId() : null) || newId)(theConfig.idLength ? config.idLength() : 22);
                    }
                    function _generateNewCookie(userId) {
                        var acqStr = toISOString(new Date);
                        return _self.accountAcquisitionDate = acqStr, _self.isNewUser = !0, [ userId, acqStr ];
                    }
                    function _setUserCookie(cookie) {
                        _self.isUserCookieSet = _cookieManager.set(_storageNamePrefix(), cookie, 31536e3);
                    }
                    if (!_self.id) {
                        _self.id = _generateNewId(), _setUserCookie(_generateNewCookie(_self.id).join(User.cookieSeparator));
                        var name_1 = config.namePrefix && config.namePrefix() ? config.namePrefix() + "ai_session" : "ai_session";
                        utlRemoveStorage(_logger, name_1);
                    }
                    _self.accountId = config.accountId ? config.accountId() : void 0;
                    var authCookie = _cookieManager.get(User.authUserCookieName);
                    if (authCookie) {
                        var authCookieString = (authCookie = decodeURI(authCookie)).split(User.cookieSeparator);
                        authCookieString[0] && (_self.authenticatedId = authCookieString[0]), authCookieString.length > 1 && authCookieString[1] && (_self.accountId = authCookieString[1]);
                    }
                    _self.setAuthenticatedUserContext = function(authenticatedUserId, accountId, storeInCookie) {
                        if (void 0 === storeInCookie && (storeInCookie = !1), !_validateUserInput(authenticatedUserId) || accountId && !_validateUserInput(accountId)) _logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SetAuthContextFailedAccountName, "Setting auth user context failed. User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.", !0); else {
                            _self.authenticatedId = authenticatedUserId;
                            var authCookie = _self.authenticatedId;
                            accountId && (_self.accountId = accountId, authCookie = [ _self.authenticatedId, _self.accountId ].join(User.cookieSeparator)), 
                            storeInCookie && _cookieManager.set(User.authUserCookieName, encodeURI(authCookie));
                        }
                    }, _self.clearAuthenticatedUserContext = function() {
                        _self.authenticatedId = null, _self.accountId = null, _cookieManager.del(User.authUserCookieName);
                    }, _self.update = function(userId) {
                        _self.id === userId && _self.isUserCookieSet || _setUserCookie(_generateNewCookie(userId || _generateNewId()).join(User.cookieSeparator));
                    };
                });
            }
            return User.cookieSeparator = "|", User.userCookieName = "ai_user", User.authUserCookieName = "ai_authUser", 
            User;
        }(), Location = function() {}, TelemetryTrace = function(id, parentId, name, logger) {
            this.traceID = id || generateW3CId(), this.parentID = parentId, this.name = name;
            var location = getLocation();
            !name && location && location.pathname && (this.name = location.pathname), this.name = dataSanitizeString(logger, this.name);
        };
        function _removeEmpty(target, name) {
            target && target[name] && 0 === objKeys(target[name]).length && delete target[name];
        }
        var TelemetryContext = function TelemetryContext(core, defaultConfig) {
            var _this = this, logger = core.logger;
            this.appId = function() {
                return null;
            }, this.getSessionId = function() {
                return null;
            }, dynamicProto(TelemetryContext, this, function(_self) {
                _self.application = new Application, _self.internal = new Internal(defaultConfig), 
                hasWindow() && (_self.sessionManager = new _SessionManager(defaultConfig, core), 
                _self.device = new Device, _self.location = new Location, _self.user = new User(defaultConfig, core), 
                _self.telemetryTrace = new TelemetryTrace(void 0, void 0, void 0, logger), _self.session = new Session), 
                _self.getSessionId = function() {
                    var session = _self.session, sesId = null;
                    if (session && HelperFuncs_isString(session.id)) sesId = session.id; else {
                        var autoSession = (_self.sessionManager || {}).automaticSession;
                        sesId = autoSession && HelperFuncs_isString(autoSession.id) ? autoSession.id : null;
                    }
                    return sesId;
                }, _self.applySessionContext = function(evt, itemCtx) {
                    setValue(getSetValue(evt.ext, Extensions.AppExt), "sesId", _self.getSessionId(), HelperFuncs_isString);
                }, _self.applyOperatingSystemContxt = function(evt, itemCtx) {
                    setValue(evt.ext, Extensions.OSExt, _self.os);
                }, _self.applyApplicationContext = function(evt, itemCtx) {
                    var application = _self.application;
                    if (application) {
                        var tags = getSetValue(evt, "tags");
                        setValue(tags, CtxTagKeys.applicationVersion, application.ver, HelperFuncs_isString), 
                        setValue(tags, CtxTagKeys.applicationBuild, application.build, HelperFuncs_isString);
                    }
                }, _self.applyDeviceContext = function(evt, itemCtx) {
                    var device = _self.device;
                    if (device) {
                        var extDevice = getSetValue(getSetValue(evt, "ext"), Extensions.DeviceExt);
                        setValue(extDevice, "localId", device.id, HelperFuncs_isString), setValue(extDevice, "ip", device.ip, HelperFuncs_isString), 
                        setValue(extDevice, "model", device.model, HelperFuncs_isString), setValue(extDevice, "deviceClass", device.deviceClass, HelperFuncs_isString);
                    }
                }, _self.applyInternalContext = function(evt, itemCtx) {
                    var internal = _self.internal;
                    if (internal) {
                        var tags = getSetValue(evt, "tags");
                        setValue(tags, CtxTagKeys.internalAgentVersion, internal.agentVersion, HelperFuncs_isString), 
                        setValue(tags, CtxTagKeys.internalSdkVersion, internal.sdkVersion, HelperFuncs_isString), 
                        evt.baseType !== _InternalLogMessage.dataType && evt.baseType !== PageView.dataType || (setValue(tags, CtxTagKeys.internalSnippet, internal.snippetVer, HelperFuncs_isString), 
                        setValue(tags, CtxTagKeys.internalSdkSrc, internal.sdkSrc, HelperFuncs_isString));
                    }
                }, _self.applyLocationContext = function(evt, itemCtx) {
                    var location = _this.location;
                    location && setValue(getSetValue(evt, "tags", []), CtxTagKeys.locationIp, location.ip, HelperFuncs_isString);
                }, _self.applyOperationContext = function(evt, itemCtx) {
                    var telemetryTrace = _self.telemetryTrace;
                    if (telemetryTrace) {
                        var extTrace = getSetValue(getSetValue(evt, "ext"), Extensions.TraceExt, {
                            traceID: void 0,
                            parentID: void 0
                        });
                        setValue(extTrace, "traceID", telemetryTrace.traceID, HelperFuncs_isString), setValue(extTrace, "name", telemetryTrace.name, HelperFuncs_isString), 
                        setValue(extTrace, "parentID", telemetryTrace.parentID, HelperFuncs_isString);
                    }
                }, _self.applyWebContext = function(evt, itemCtx) {
                    var web = _this.web;
                    web && setValue(getSetValue(evt, "ext"), Extensions.WebExt, web);
                }, _self.applyUserContext = function(evt, itemCtx) {
                    var user = _self.user;
                    if (user) {
                        setValue(getSetValue(evt, "tags", []), CtxTagKeys.userAccountId, user.accountId, HelperFuncs_isString);
                        var extUser = getSetValue(getSetValue(evt, "ext"), Extensions.UserExt);
                        setValue(extUser, "id", user.id, HelperFuncs_isString), setValue(extUser, "authId", user.authenticatedId, HelperFuncs_isString);
                    }
                }, _self.cleanUp = function(evt, itemCtx) {
                    var ext = evt.ext;
                    ext && (_removeEmpty(ext, Extensions.DeviceExt), _removeEmpty(ext, Extensions.UserExt), 
                    _removeEmpty(ext, Extensions.WebExt), _removeEmpty(ext, Extensions.OSExt), _removeEmpty(ext, Extensions.AppExt), 
                    _removeEmpty(ext, Extensions.TraceExt));
                };
            });
        }, dist_esm_PropertiesPlugin = function(_super) {
            function PropertiesPlugin() {
                var _breezeChannel, _extensionConfig, _this = _super.call(this) || this;
                return _this.priority = 110, _this.identifier = "AppInsightsPropertiesPlugin", dynamicProto(PropertiesPlugin, _this, function(_self, _base) {
                    _self.initialize = function(config, core, extensions, pluginChain) {
                        _base.initialize(config, core, extensions, pluginChain);
                        var ctx = _self._getTelCtx(), identifier = _self.identifier, defaultConfig = PropertiesPlugin.getDefaultConfig();
                        _extensionConfig = _extensionConfig || {}, objForEachKey(defaultConfig, function(field, value) {
                            _extensionConfig[field] = function() {
                                return ctx.getConfig(identifier, field, value());
                            };
                        }), _self.context = new TelemetryContext(core, _extensionConfig), _breezeChannel = getExtensionByName(extensions, "AppInsightsChannelPlugin"), 
                        _self.context.appId = function() {
                            return _breezeChannel ? _breezeChannel._appId : null;
                        }, _self._extConfig = _extensionConfig;
                    }, _self.processTelemetry = function(event, itemCtx) {
                        if (isNullOrUndefined(event)) ; else {
                            itemCtx = _self._getTelCtx(itemCtx), event.name === PageView.envelopeType && itemCtx.diagLog().resetInternalMessageCount();
                            var theContext = _self.context || {};
                            theContext.session && "string" != typeof _self.context.session.id && theContext.sessionManager && theContext.sessionManager.update();
                            var userCtx = theContext.user;
                            if (userCtx && !userCtx.isUserCookieSet && userCtx.update(theContext.user.id), function(evt, itemCtx) {
                                getSetValue(evt, "tags", []), getSetValue(evt, "ext", {});
                                var ctx = _self.context;
                                ctx.applySessionContext(evt, itemCtx), ctx.applyApplicationContext(evt, itemCtx), 
                                ctx.applyDeviceContext(evt, itemCtx), ctx.applyOperationContext(evt, itemCtx), ctx.applyUserContext(evt, itemCtx), 
                                ctx.applyOperatingSystemContxt(evt, itemCtx), ctx.applyWebContext(evt, itemCtx), 
                                ctx.applyLocationContext(evt, itemCtx), ctx.applyInternalContext(evt, itemCtx), 
                                ctx.cleanUp(evt, itemCtx);
                            }(event, itemCtx), userCtx && userCtx.isNewUser) {
                                userCtx.isNewUser = !1;
                                var message = new _InternalLogMessage(_InternalMessageId.SendBrowserInfoOnUserInit, (getNavigator() || {}).userAgent || "");
                                itemCtx.diagLog().logInternalMessage(LoggingSeverity.CRITICAL, message);
                            }
                            _self.processNext(event, itemCtx);
                        }
                    };
                }), _this;
            }
            return __extendsFn(PropertiesPlugin, _super), PropertiesPlugin.getDefaultConfig = function() {
                return {
                    instrumentationKey: function() {},
                    accountId: function() {
                        return null;
                    },
                    sessionRenewalMs: function() {
                        return 18e5;
                    },
                    samplingPercentage: function() {
                        return 100;
                    },
                    sessionExpirationMs: function() {
                        return 864e5;
                    },
                    cookieDomain: function() {
                        return null;
                    },
                    sdkExtension: function() {
                        return null;
                    },
                    isBrowserLinkTrackingEnabled: function() {
                        return !1;
                    },
                    appId: function() {
                        return null;
                    },
                    getSessionId: function() {
                        return null;
                    },
                    namePrefix: function() {},
                    sessionCookiePostfix: function() {},
                    userCookiePostfix: function() {},
                    idLength: function() {
                        return 22;
                    },
                    getNewId: function() {
                        return null;
                    }
                };
            }, PropertiesPlugin;
        }(BaseTelemetryPlugin), cbNames = [ "req", "rsp", "hkErr", "fnErr" ];
        function _arrLoop(arr, fn) {
            if (arr) for (var lp = 0; lp < arr.length && !fn(arr[lp], lp); lp++) ;
        }
        function _doCallbacks(hooks, callDetails, cbArgs, hookCtx, type) {
            type >= 0 && type <= 2 && _arrLoop(hooks, function(hook, idx) {
                var cbks = hook.cbks, cb = cbks[cbNames[type]];
                if (cb) {
                    callDetails.ctx = function() {
                        return hookCtx[idx] = hookCtx[idx] || {};
                    };
                    try {
                        cb.apply(callDetails.inst, cbArgs);
                    } catch (err) {
                        var orgEx = callDetails.err;
                        try {
                            var hookErrorCb = cbks[cbNames[2]];
                            hookErrorCb && (callDetails.err = err, hookErrorCb.apply(callDetails.inst, cbArgs));
                        } catch (e) {} finally {
                            callDetails.err = orgEx;
                        }
                    }
                }
            });
        }
        function _getOwner(target, name, checkPrototype) {
            var owner = null;
            return target && (HelperFuncs_hasOwnProperty(target, name) ? owner = target : checkPrototype && (owner = _getOwner(function(target) {
                if (target) {
                    if (HelperFuncs_objGetPrototypeOf) return HelperFuncs_objGetPrototypeOf(target);
                    var newProto = target[HelperFuncs_str_Proto] || target[Constants_strShimPrototype] || target[strConstructor];
                    if (newProto) return newProto;
                }
                return null;
            }(target), name, !1))), owner;
        }
        function InstrumentFunc(target, funcName, callbacks, checkPrototype) {
            if (void 0 === checkPrototype && (checkPrototype = !0), target && funcName && callbacks) {
                var owner = _getOwner(target, funcName, checkPrototype);
                if (owner) {
                    var fn = owner[funcName];
                    if (typeof fn === Constants_strShimFunction) {
                        var aiHook_1 = fn._aiHooks;
                        if (!aiHook_1) {
                            var newFunc = (aiHook = aiHook_1 = {
                                i: 0,
                                n: funcName,
                                f: fn,
                                h: []
                            }, function() {
                                var orgArgs = arguments, hooks = aiHook.h, funcArgs = {
                                    name: aiHook.n,
                                    inst: this,
                                    ctx: null,
                                    set: function(idx, value) {
                                        (orgArgs = _createArgs([], orgArgs))[idx] = value, cbArgs = _createArgs([ funcArgs ], orgArgs);
                                    }
                                }, hookCtx = [], cbArgs = _createArgs([ funcArgs ], orgArgs);
                                function _createArgs(target, theArgs) {
                                    return _arrLoop(theArgs, function(arg) {
                                        target.push(arg);
                                    }), target;
                                }
                                _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 0);
                                var theFunc = aiHook.f;
                                try {
                                    funcArgs.rslt = theFunc.apply(this, orgArgs);
                                } catch (err) {
                                    throw funcArgs.err = err, _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 3), err;
                                }
                                return _doCallbacks(hooks, funcArgs, cbArgs, hookCtx, 1), funcArgs.rslt;
                            });
                            newFunc._aiHooks = aiHook_1, owner[funcName] = newFunc;
                        }
                        var theHook = {
                            id: aiHook_1.i,
                            cbks: callbacks,
                            rm: function() {
                                var id = this.id;
                                _arrLoop(aiHook_1.h, function(hook, idx) {
                                    if (hook.id === id) return aiHook_1.h.splice(idx, 1), 1;
                                });
                            }
                        };
                        return aiHook_1.i++, aiHook_1.h.push(theHook), theHook;
                    }
                }
            }
            var aiHook;
            return null;
        }
        function _calcPerfDuration(resourceEntry, start, end) {
            var result = 0, from = resourceEntry[start], to = resourceEntry[end];
            return from && to && (result = dateTimeUtilsDuration(from, to)), result;
        }
        function _setPerfDuration(props, name, resourceEntry, start, end) {
            var result = 0, value = _calcPerfDuration(resourceEntry, start, end);
            return value && (result = _setPerfValue(props, name, msToTimeSpan(value))), result;
        }
        function _setPerfValue(props, name, value) {
            var result = 0;
            return props && name && value && ((props.ajaxPerf = props.ajaxPerf || {})[name] = value, 
            result = 1), result;
        }
        var XHRMonitoringState = function() {
            this.openDone = !1, this.setRequestHeaderDone = !1, this.sendDone = !1, this.abortDone = !1, 
            this.stateChangeAttached = !1;
        }, ajaxRecord = function ajaxRecord(traceID, spanID, logger) {
            var _logger = logger;
            this.perfMark = null, this.completed = !1, this.requestHeadersSize = null, this.requestHeaders = null, 
            this.responseReceivingDuration = null, this.callbackDuration = null, this.ajaxTotalDuration = null, 
            this.aborted = 0, this.pageUrl = null, this.requestUrl = null, this.requestSize = 0, 
            this.method = null, this.status = null, this.requestSentTime = null, this.responseStartedTime = null, 
            this.responseFinishedTime = null, this.callbackFinishedTime = null, this.endTime = null, 
            this.xhrMonitoringState = new XHRMonitoringState, this.clientFailure = 0, this.traceID = traceID, 
            this.spanID = spanID, dynamicProto(ajaxRecord, this, function(self) {
                self.getAbsoluteUrl = function() {
                    return self.requestUrl ? urlGetAbsoluteUrl(self.requestUrl) : null;
                }, self.getPathName = function() {
                    return self.requestUrl ? dataSanitizeUrl(_logger, urlGetCompleteUrl(self.method, self.requestUrl)) : null;
                }, self.CreateTrackItem = function(ajaxType, enableRequestHeaderTracking, getResponse) {
                    var _a;
                    if (self.ajaxTotalDuration = Math.round(1e3 * dateTimeUtilsDuration(self.requestSentTime, self.responseFinishedTime)) / 1e3, 
                    self.ajaxTotalDuration < 0) return null;
                    var dependency = ((_a = {
                        id: "|" + self.traceID + "." + self.spanID,
                        target: self.getAbsoluteUrl(),
                        name: self.getPathName(),
                        type: ajaxType,
                        startTime: null,
                        duration: self.ajaxTotalDuration,
                        success: +self.status >= 200 && +self.status < 400,
                        responseCode: +self.status,
                        method: self.method
                    }).properties = {
                        HttpMethod: self.method
                    }, _a);
                    if (self.requestSentTime && (dependency.startTime = new Date, dependency.startTime.setTime(self.requestSentTime)), 
                    function(ajaxData, dependency) {
                        var resourceEntry = ajaxData.perfTiming, props = dependency.properties || {}, propsSet = 0, strRedirect = "redirect", strRedirectStart = strRedirect + "Start", strRedirectEnd = strRedirect = "End";
                        if (resourceEntry) {
                            propsSet |= _setPerfDuration(props, strRedirect, resourceEntry, strRedirectStart, strRedirectEnd), 
                            propsSet |= _setPerfDuration(props, "domainLookup", resourceEntry, "domainLookupStart", "domainLookupEnd"), 
                            propsSet |= _setPerfDuration(props, "connect", resourceEntry, "connectStart", "connectEnd"), 
                            propsSet |= _setPerfDuration(props, "request", resourceEntry, "requestStart", "requestEnd"), 
                            propsSet |= _setPerfDuration(props, "response", resourceEntry, "responseStart", "responseEnd"), 
                            propsSet |= _setPerfDuration(props, "networkConnect", resourceEntry, "startTime", "connectEnd"), 
                            propsSet |= _setPerfDuration(props, "sentRequest", resourceEntry, "requestStart", "responseEnd");
                            var duration = resourceEntry.duration;
                            duration || (duration = _calcPerfDuration(resourceEntry, "startTime", "responseEnd") || 0), 
                            propsSet |= _setPerfValue(props, "duration", duration), propsSet |= _setPerfValue(props, "perfTotal", duration);
                            var serverTiming = resourceEntry.serverTiming;
                            if (serverTiming) {
                                var server_1 = {};
                                arrForEach(serverTiming, function(value, idx) {
                                    var name = function(name) {
                                        var value = name;
                                        return value && HelperFuncs_isString(value) && (value = (value = (value = value.replace(rCamelCase, function(_all, letter) {
                                            return letter.toUpperCase();
                                        })).replace(rNormalizeInvalid, "_")).replace(rLeadingNumeric, function(_all, match) {
                                            return "_" + match;
                                        })), value;
                                    }(value.name || "" + idx), newValue = server_1[name] || {};
                                    objForEachKey(value, function(key, val) {
                                        ("name" !== key && HelperFuncs_isString(val) || isNumber(val)) && (newValue[key] && (val = newValue[key] + ";" + val), 
                                        !val && HelperFuncs_isString(val) || (newValue[key] = val));
                                    }), server_1[name] = newValue;
                                }), propsSet |= _setPerfValue(props, "serverTiming", server_1);
                            }
                            propsSet |= _setPerfValue(props, "transferSize", resourceEntry.transferSize), propsSet |= _setPerfValue(props, "encodedBodySize", resourceEntry.encodedBodySize), 
                            propsSet |= _setPerfValue(props, "decodedBodySize", resourceEntry.decodedBodySize);
                        } else ajaxData.perfMark && (propsSet |= _setPerfValue(props, "missing", ajaxData.perfAttempts));
                        propsSet && (dependency.properties = props);
                    }(self, dependency), enableRequestHeaderTracking && objKeys(self.requestHeaders).length > 0 && (dependency.properties = dependency.properties || {}, 
                    dependency.properties.requestHeaders = self.requestHeaders), getResponse) {
                        var response = getResponse();
                        if (response) {
                            var correlationContext = response.correlationContext;
                            if (correlationContext && (dependency.correlationContext = correlationContext), 
                            response.headerMap && objKeys(response.headerMap).length > 0 && (dependency.properties = dependency.properties || {}, 
                            dependency.properties.responseHeaders = response.headerMap), self.errorStatusText && self.status >= 400) {
                                var responseType = response.type;
                                dependency.properties = dependency.properties || {}, "" !== responseType && "text" !== responseType || (dependency.properties.responseText = response.responseText ? response.statusText + " - " + response.responseText : response.statusText), 
                                "json" === responseType && (dependency.properties.responseText = response.response ? response.statusText + " - " + JSON.stringify(response.response) : response.statusText);
                            }
                        }
                    }
                    return dependency;
                };
            });
        }, Traceparent = function() {
            function Traceparent(traceId, spanId) {
                this.traceFlag = Traceparent.DEFAULT_TRACE_FLAG, this.version = Traceparent.DEFAULT_VERSION, 
                this.traceId = traceId && Traceparent.isValidTraceId(traceId) ? traceId : generateW3CId(), 
                this.spanId = spanId && Traceparent.isValidSpanId(spanId) ? spanId : generateW3CId().substr(0, 16);
            }
            return Traceparent.isValidTraceId = function(id) {
                return id.match(/^[0-9a-f]{32}$/) && "00000000000000000000000000000000" !== id;
            }, Traceparent.isValidSpanId = function(id) {
                return id.match(/^[0-9a-f]{16}$/) && "0000000000000000" !== id;
            }, Traceparent.prototype.toString = function() {
                return "".concat(this.version, "-").concat(this.traceId, "-").concat(this.spanId, "-").concat(this.traceFlag);
            }, Traceparent.DEFAULT_TRACE_FLAG = "01", Traceparent.DEFAULT_VERSION = "00", Traceparent;
        }(), strDiagLog = "diagLog", strAjaxData = "ajaxData", strThrowInternal = "throwInternal", _markCount = 0;
        function _getFailedAjaxDiagnosticsMessage(xhr) {
            var result = "";
            try {
                isNullOrUndefined(xhr) || isNullOrUndefined(xhr[strAjaxData]) || isNullOrUndefined(xhr[strAjaxData].requestUrl) || (result += "(url: '" + xhr[strAjaxData].requestUrl + "')");
            } catch (e) {}
            return result;
        }
        function _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
            ajaxMonitorInstance[strDiagLog]()[strThrowInternal](LoggingSeverity.CRITICAL, msgId, message, properties, isUserAct);
        }
        function _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
            ajaxMonitorInstance[strDiagLog]()[strThrowInternal](LoggingSeverity.WARNING, msgId, message, properties, isUserAct);
        }
        function _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {
            return function(args) {
                _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, {
                    ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(args.inst),
                    exception: dumpObj(args.err)
                });
            };
        }
        function _indexOf(value, match) {
            return value && match ? value.indexOf(match) : -1;
        }
        var AjaxMonitor = function(_super) {
            function AjaxMonitor() {
                var _this = _super.call(this) || this;
                _this.identifier = AjaxMonitor.identifier, _this.priority = 120;
                var _context, _isUsingW3CHeaders, _isUsingAIHeaders, _markPrefix, _excludeRequestFromAutoTrackingPatterns, _addRequestContext, location = getLocation(), _fetchInitialized = !1, _xhrInitialized = !1, _currentWindowHost = location && location.host && location.host.toLowerCase(), _config = AjaxMonitor.getEmptyConfig(), _enableRequestHeaderTracking = !1, _enableAjaxErrorStatusText = !1, _trackAjaxAttempts = 0, _enableAjaxPerfTracking = !1, _maxAjaxCallsPerView = 0, _enableResponseHeaderTracking = !1, _hooks = [], _disabledUrls = {};
                return dynamicProto(AjaxMonitor, _this, function(_self, base) {
                    function _canIncludeHeaders(header) {
                        var rlt = !0;
                        return (header || _config.ignoreHeaders) && arrForEach(_config.ignoreHeaders, function(key) {
                            if (key.toLowerCase() === header.toLowerCase()) return rlt = !1, -1;
                        }), rlt;
                    }
                    function _hookProto(target, funcName, callbacks) {
                        _hooks.push(function(target, funcName, callbacks) {
                            return target ? InstrumentFunc(target[Constants_strShimPrototype], funcName, callbacks, !1) : null;
                        }(target, funcName, callbacks));
                    }
                    function _isDisabledRequest(xhr, request, init) {
                        var isDisabled = !1, theUrl = ((HelperFuncs_isString(request) ? request : (request || {}).url || "") || "").toLowerCase();
                        if (arrForEach(_excludeRequestFromAutoTrackingPatterns, function(regex) {
                            var theRegex = regex;
                            HelperFuncs_isString(regex) && (theRegex = new RegExp(regex)), isDisabled || (isDisabled = theRegex.test(theUrl));
                        }), isDisabled) return isDisabled;
                        var idx = _indexOf(theUrl, "?"), idx2 = _indexOf(theUrl, "#");
                        return (-1 === idx || -1 !== idx2 && idx2 < idx) && (idx = idx2), -1 !== idx && (theUrl = theUrl.substring(0, idx)), 
                        isNullOrUndefined(xhr) ? isNullOrUndefined(request) || (isDisabled = "object" == typeof request && !0 === request[DisabledPropertyName] || !!init && !0 === init[DisabledPropertyName]) : isDisabled = !0 === xhr[DisabledPropertyName] || !0 === theUrl[DisabledPropertyName], 
                        !isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl) && (isDisabled = !0), 
                        isDisabled ? _disabledUrls[theUrl] || (_disabledUrls[theUrl] = 1) : _disabledUrls[theUrl] && (isDisabled = !0), 
                        isDisabled;
                    }
                    function _isMonitoredXhrInstance(xhr, excludeAjaxDataValidation) {
                        var ajaxValidation = !0, initialized = _xhrInitialized;
                        return isNullOrUndefined(xhr) || (ajaxValidation = !0 === excludeAjaxDataValidation || !isNullOrUndefined(xhr[strAjaxData])), 
                        initialized && ajaxValidation;
                    }
                    function _getResponseText(xhr) {
                        try {
                            var responseType = xhr.responseType;
                            if ("" === responseType || "text" === responseType) return xhr.responseText;
                        } catch (e) {}
                        return null;
                    }
                    function _getAjaxCorrelationContext(xhr) {
                        try {
                            var responseHeadersString = xhr.getAllResponseHeaders();
                            if (null !== responseHeadersString && -1 !== _indexOf(responseHeadersString.toLowerCase(), RequestHeaders.requestContextHeaderLowerCase)) {
                                var responseHeader = xhr.getResponseHeader(RequestHeaders.requestContextHeader);
                                return CorrelationIdHelper.getCorrelationContext(responseHeader);
                            }
                        } catch (e) {
                            _throwInternalWarning(_self, _InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.", {
                                ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),
                                exception: dumpObj(e)
                            });
                        }
                    }
                    function _createMarkId(type, ajaxData) {
                        if (ajaxData.requestUrl && _markPrefix && _enableAjaxPerfTracking) {
                            var performance_1 = getPerformance();
                            if (performance_1 && isFunction(performance_1.mark)) {
                                _markCount++;
                                var markId = _markPrefix + type + "#" + _markCount;
                                performance_1.mark(markId);
                                var entries = performance_1.getEntriesByName(markId);
                                entries && 1 === entries.length && (ajaxData.perfMark = entries[0]);
                            }
                        }
                    }
                    function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {
                        var perfMark = ajaxData.perfMark, performance = getPerformance(), maxAttempts = _config.maxAjaxPerfLookupAttempts, retryDelay = _config.ajaxPerfLookupDelay, requestUrl = ajaxData.requestUrl, attempt = 0;
                        !function locateResourceTiming() {
                            try {
                                if (performance && perfMark) {
                                    attempt++;
                                    for (var perfTiming = null, entries = performance.getEntries(), lp = entries.length - 1; lp >= 0; lp--) {
                                        var entry = entries[lp];
                                        if (entry) {
                                            if ("resource" === entry.entryType) entry.initiatorType !== initiatorType || -1 === _indexOf(entry.name, requestUrl) && -1 === _indexOf(requestUrl, entry.name) || (perfTiming = entry); else if ("mark" === entry.entryType && entry.name === perfMark.name) {
                                                ajaxData.perfTiming = perfTiming;
                                                break;
                                            }
                                            if (entry.startTime < perfMark.startTime - 1e3) break;
                                        }
                                    }
                                }
                                !perfMark || ajaxData.perfTiming || attempt >= maxAttempts || !1 === ajaxData.async ? (perfMark && isFunction(performance.clearMarks) && performance.clearMarks(perfMark.name), 
                                ajaxData.perfAttempts = attempt, trackCallback()) : setTimeout(locateResourceTiming, retryDelay);
                            } catch (e) {
                                reportError(e);
                            }
                        }();
                    }
                    function _getFailedFetchDiagnosticsMessage(input) {
                        var result = "";
                        try {
                            isNullOrUndefined(input) || (result += "(url: '".concat("string" == typeof input ? input : input.url, "')"));
                        } catch (e) {
                            _throwInternalCritical(_self, _InternalMessageId.FailedMonitorAjaxOpen, "Failed to grab failed fetch diagnostics message", {
                                exception: dumpObj(e)
                            });
                        }
                        return result;
                    }
                    function _reportFetchMetrics(callDetails, status, input, response, ajaxData, getResponse, properties) {
                        function _reportFetchError(msgId, e, failedProps) {
                            var errorProps = failedProps || {};
                            errorProps.fetchDiagnosticsMessage = _getFailedFetchDiagnosticsMessage(input), e && (errorProps.exception = dumpObj(e)), 
                            _throwInternalWarning(_self, msgId, "Failed to calculate the duration of the fetch call, monitoring data for this fetch call won't be sent.", errorProps);
                        }
                        ajaxData && (ajaxData.responseFinishedTime = dateTimeUtilsNow(), ajaxData.status = status, 
                        _findPerfResourceEntry("fetch", ajaxData, function() {
                            var properties, dependency = ajaxData.CreateTrackItem("Fetch", _enableRequestHeaderTracking, getResponse);
                            try {
                                _addRequestContext && (properties = _addRequestContext({
                                    status,
                                    request: input,
                                    response
                                }));
                            } catch (e) {
                                _throwInternalWarning(_self, _InternalMessageId.FailedAddingCustomDefinedRequestContext, "Failed to add custom defined request context as configured call back may missing a null check.");
                            }
                            dependency ? (void 0 !== properties && (dependency.properties = __assignFn(__assignFn({}, dependency.properties), properties)), 
                            _self.trackDependencyDataInternal(dependency)) : _reportFetchError(_InternalMessageId.FailedMonitorAjaxDur, null, {
                                requestSentTime: ajaxData.requestSentTime,
                                responseFinishedTime: ajaxData.responseFinishedTime
                            });
                        }, function(e) {
                            _reportFetchError(_InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, e, null);
                        }));
                    }
                    function _getFetchCorrelationContext(response) {
                        if (response && response.headers) try {
                            var responseHeader = response.headers.get(RequestHeaders.requestContextHeader);
                            return CorrelationIdHelper.getCorrelationContext(responseHeader);
                        } catch (e) {
                            _throwInternalWarning(_self, _InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.", {
                                fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response),
                                exception: dumpObj(e)
                            });
                        }
                    }
                    _self.initialize = function(config, core, extensions, pluginChain) {
                        if (!_self.isInitialized()) {
                            base.initialize(config, core, extensions, pluginChain);
                            var ctx_1 = _self._getTelCtx();
                            objForEachKey(AjaxMonitor.getDefaultConfig(), function(field, value) {
                                _config[field] = ctx_1.getConfig(AjaxMonitor.identifier, field, value);
                            });
                            var distributedTracingMode = _config.distributedTracingMode;
                            if (_enableRequestHeaderTracking = _config.enableRequestHeaderTracking, _enableAjaxErrorStatusText = _config.enableAjaxErrorStatusText, 
                            _maxAjaxCallsPerView = _config.maxAjaxCallsPerView, _enableResponseHeaderTracking = _config.enableResponseHeaderTracking, 
                            _excludeRequestFromAutoTrackingPatterns = _config.excludeRequestFromAutoTrackingPatterns, 
                            _addRequestContext = _config.addRequestContext, _isUsingAIHeaders = distributedTracingMode === DistributedTracingModes.AI || distributedTracingMode === DistributedTracingModes.AI_AND_W3C, 
                            _isUsingW3CHeaders = distributedTracingMode === DistributedTracingModes.AI_AND_W3C || distributedTracingMode === DistributedTracingModes.W3C, 
                            _enableAjaxPerfTracking = _config.enableAjaxPerfTracking) {
                                var iKey = config.instrumentationKey || "unkwn";
                                _markPrefix = iKey.length > 5 ? "ai.ajxmn." + iKey.substring(iKey.length - 5) + "." : "ai.ajxmn." + iKey + ".";
                            }
                            if (!1 === _config.disableAjaxTracking && function(ajaxMonitorInstance) {
                                var result = !1;
                                if (isXhrSupported()) {
                                    var proto = XMLHttpRequest[Constants_strShimPrototype];
                                    result = !(isNullOrUndefined(proto) || isNullOrUndefined(proto.open) || isNullOrUndefined(proto.send) || isNullOrUndefined(proto.abort));
                                }
                                var ieVer = getIEVersion();
                                if (ieVer && ieVer < 9 && (result = !1), result) try {
                                    (new XMLHttpRequest)[strAjaxData] = {};
                                    var theOpen = XMLHttpRequest[Constants_strShimPrototype].open;
                                    XMLHttpRequest[Constants_strShimPrototype].open = theOpen;
                                } catch (e) {
                                    result = !1, _throwInternalCritical(ajaxMonitorInstance, _InternalMessageId.FailedMonitorAjaxOpen, "Failed to enable XMLHttpRequest monitoring, extension is not supported", {
                                        exception: dumpObj(e)
                                    });
                                }
                                return result;
                            }(_self) && !_xhrInitialized && (_hookProto(XMLHttpRequest, "open", {
                                req: function(args, method, url, async) {
                                    var xhr = args.inst, ajaxData = xhr[strAjaxData];
                                    !_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, !0) && (ajaxData && ajaxData.xhrMonitoringState.openDone || function(xhr, method, url, async) {
                                        var traceID = _context && _context.telemetryTrace && _context.telemetryTrace.traceID || generateW3CId(), spanID = generateW3CId().substr(0, 16), ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog]());
                                        ajaxData.method = method, ajaxData.requestUrl = url, ajaxData.xhrMonitoringState.openDone = !0, 
                                        ajaxData.requestHeaders = {}, ajaxData.async = async, ajaxData.errorStatusText = _enableAjaxErrorStatusText, 
                                        xhr[strAjaxData] = ajaxData;
                                    }(xhr, method, url, async), function(xhr) {
                                        xhr[strAjaxData].xhrMonitoringState.stateChangeAttached = attachEvent(xhr, "readystatechange", function() {
                                            try {
                                                xhr && 4 === xhr.readyState && _isMonitoredXhrInstance(xhr) && function(xhr) {
                                                    var ajaxData = xhr[strAjaxData];
                                                    function _reportXhrError(e, failedProps) {
                                                        var errorProps = failedProps || {};
                                                        errorProps.ajaxDiagnosticsMessage = _getFailedAjaxDiagnosticsMessage(xhr), e && (errorProps.exception = dumpObj(e)), 
                                                        _throwInternalWarning(_self, _InternalMessageId.FailedMonitorAjaxDur, "Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.", errorProps);
                                                    }
                                                    ajaxData.responseFinishedTime = dateTimeUtilsNow(), ajaxData.status = xhr.status, 
                                                    _findPerfResourceEntry("xmlhttprequest", ajaxData, function() {
                                                        try {
                                                            var dependency = ajaxData.CreateTrackItem("Ajax", _enableRequestHeaderTracking, function() {
                                                                var ajaxResponse = {
                                                                    statusText: xhr.statusText,
                                                                    headerMap: null,
                                                                    correlationContext: _getAjaxCorrelationContext(xhr),
                                                                    type: xhr.responseType,
                                                                    responseText: _getResponseText(xhr),
                                                                    response: xhr.response
                                                                };
                                                                if (_enableResponseHeaderTracking) {
                                                                    var headers = xhr.getAllResponseHeaders();
                                                                    if (headers) {
                                                                        var arr = strTrim(headers).split(/[\r\n]+/), responseHeaderMap_2 = {};
                                                                        arrForEach(arr, function(line) {
                                                                            var parts = line.split(": "), header = parts.shift(), value = parts.join(": ");
                                                                            _canIncludeHeaders(header) && (responseHeaderMap_2[header] = value);
                                                                        }), ajaxResponse.headerMap = responseHeaderMap_2;
                                                                    }
                                                                }
                                                                return ajaxResponse;
                                                            }), properties = void 0;
                                                            try {
                                                                _addRequestContext && (properties = _addRequestContext({
                                                                    status: xhr.status,
                                                                    xhr
                                                                }));
                                                            } catch (e) {
                                                                _throwInternalWarning(_self, _InternalMessageId.FailedAddingCustomDefinedRequestContext, "Failed to add custom defined request context as configured call back may missing a null check.");
                                                            }
                                                            dependency ? (void 0 !== properties && (dependency.properties = __assignFn(__assignFn({}, dependency.properties), properties)), 
                                                            _self.trackDependencyDataInternal(dependency)) : _reportXhrError(null, {
                                                                requestSentTime: ajaxData.requestSentTime,
                                                                responseFinishedTime: ajaxData.responseFinishedTime
                                                            });
                                                        } finally {
                                                            try {
                                                                xhr[strAjaxData] = null;
                                                            } catch (e) {}
                                                        }
                                                    }, function(e) {
                                                        _reportXhrError(e, null);
                                                    });
                                                }(xhr);
                                            } catch (e) {
                                                var exceptionText = dumpObj(e);
                                                exceptionText && -1 !== _indexOf(exceptionText.toLowerCase(), "c00c023f") || _throwInternalCritical(_self, _InternalMessageId.FailedMonitorAjaxRSC, "Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.", {
                                                    ajaxDiagnosticsMessage: _getFailedAjaxDiagnosticsMessage(xhr),
                                                    exception: exceptionText
                                                });
                                            }
                                        });
                                    }(xhr));
                                },
                                hkErr: _createErrorCallbackFunc(_self, _InternalMessageId.FailedMonitorAjaxOpen, "Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.")
                            }), _hookProto(XMLHttpRequest, "send", {
                                req: function(args, context) {
                                    var xhr = args.inst, ajaxData = xhr[strAjaxData];
                                    _isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState.sendDone && (_createMarkId("xhr", ajaxData), 
                                    ajaxData.requestSentTime = dateTimeUtilsNow(), _self.includeCorrelationHeaders(ajaxData, void 0, void 0, xhr), 
                                    ajaxData.xhrMonitoringState.sendDone = !0);
                                },
                                hkErr: _createErrorCallbackFunc(_self, _InternalMessageId.FailedMonitorAjaxSend, "Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.")
                            }), _hookProto(XMLHttpRequest, "abort", {
                                req: function(args) {
                                    var xhr = args.inst, ajaxData = xhr[strAjaxData];
                                    _isMonitoredXhrInstance(xhr) && !ajaxData.xhrMonitoringState.abortDone && (ajaxData.aborted = 1, 
                                    ajaxData.xhrMonitoringState.abortDone = !0);
                                },
                                hkErr: _createErrorCallbackFunc(_self, _InternalMessageId.FailedMonitorAjaxAbort, "Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.")
                            }), _enableRequestHeaderTracking && _hookProto(XMLHttpRequest, "setRequestHeader", {
                                req: function(args, header, value) {
                                    var xhr = args.inst;
                                    _isMonitoredXhrInstance(xhr) && _canIncludeHeaders(header) && (xhr[strAjaxData].requestHeaders[header] = value);
                                },
                                hkErr: _createErrorCallbackFunc(_self, _InternalMessageId.FailedMonitorAjaxSetRequestHeader, "Failed to monitor XMLHttpRequest.setRequestHeader, monitoring data for this ajax call may be incorrect.")
                            }), _xhrInitialized = !0), function() {
                                var _global, fetch = !(_global = getGlobal()) || isNullOrUndefined(_global.Request) || isNullOrUndefined(_global.Request[Constants_strShimPrototype]) || isNullOrUndefined(_global.fetch) ? null : _global.fetch;
                                if (fetch) {
                                    var global = getGlobal(), isPolyfill = fetch.polyfill;
                                    !1 === _config.disableFetchTracking ? (_hooks.push(InstrumentFunc(global, "fetch", {
                                        req: function(callDetails, input, init) {
                                            var fetchData;
                                            if (_fetchInitialized && !_isDisabledRequest(null, input, init) && (!isPolyfill || !_xhrInitialized)) {
                                                var ctx = callDetails.ctx();
                                                fetchData = function(input, init) {
                                                    var traceID = _context && _context.telemetryTrace && _context.telemetryTrace.traceID || generateW3CId(), spanID = generateW3CId().substr(0, 16), ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog]());
                                                    ajaxData.requestSentTime = dateTimeUtilsNow(), ajaxData.errorStatusText = _enableAjaxErrorStatusText, 
                                                    ajaxData.requestUrl = input instanceof Request ? input ? input.url : "" : input;
                                                    var method = "GET";
                                                    init && init.method ? method = init.method : input && input instanceof Request && (method = input.method), 
                                                    ajaxData.method = method;
                                                    var requestHeaders = {};
                                                    return _enableRequestHeaderTracking && new Headers((init ? init.headers : 0) || input instanceof Request && input.headers || {}).forEach(function(value, key) {
                                                        _canIncludeHeaders(key) && (requestHeaders[key] = value);
                                                    }), ajaxData.requestHeaders = requestHeaders, _createMarkId("fetch", ajaxData), 
                                                    ajaxData;
                                                }(input, init);
                                                var newInit = _self.includeCorrelationHeaders(fetchData, input, init);
                                                newInit !== init && callDetails.set(1, newInit), ctx.data = fetchData;
                                            }
                                        },
                                        rsp: function(callDetails, input) {
                                            var fetchData = callDetails.ctx().data;
                                            fetchData && (callDetails.rslt = callDetails.rslt.then(function(response) {
                                                return _reportFetchMetrics(0, (response || {}).status, input, response, fetchData, function() {
                                                    var ajaxResponse = {
                                                        statusText: response.statusText,
                                                        headerMap: null,
                                                        correlationContext: _getFetchCorrelationContext(response)
                                                    };
                                                    if (_enableResponseHeaderTracking) {
                                                        var responseHeaderMap_1 = {};
                                                        response.headers.forEach(function(value, name) {
                                                            _canIncludeHeaders(name) && (responseHeaderMap_1[name] = value);
                                                        }), ajaxResponse.headerMap = responseHeaderMap_1;
                                                    }
                                                    return ajaxResponse;
                                                }), response;
                                            }).catch(function(reason) {
                                                throw _reportFetchMetrics(0, 0, input, null, fetchData, null), reason;
                                            }));
                                        },
                                        hkErr: _createErrorCallbackFunc(_self, _InternalMessageId.FailedMonitorAjaxOpen, "Failed to monitor Window.fetch, monitoring data for this fetch call may be incorrect.")
                                    })), _fetchInitialized = !0) : isPolyfill && _hooks.push(InstrumentFunc(global, "fetch", {
                                        req: function(callDetails, input, init) {
                                            _isDisabledRequest(null, input, init);
                                        }
                                    })), isPolyfill && (global.fetch.polyfill = isPolyfill);
                                }
                            }(), extensions.length > 0 && extensions) {
                                for (var propExt = void 0, extIx = 0; !propExt && extIx < extensions.length; ) extensions[extIx] && "AppInsightsPropertiesPlugin" === extensions[extIx].identifier && (propExt = extensions[extIx]), 
                                extIx++;
                                propExt && (_context = propExt.context);
                            }
                        }
                    }, _self.teardown = function() {
                        arrForEach(_hooks, function(fn) {
                            fn.rm();
                        }), _hooks = [], _fetchInitialized = !1, _xhrInitialized = !1, _self.setInitialized(!1);
                    }, _self.trackDependencyData = function(dependency, properties) {
                        _self.trackDependencyDataInternal(dependency, properties);
                    }, _self.includeCorrelationHeaders = function(ajaxData, input, init, xhr) {
                        var id, appId, currentWindowHost = _self._currentWindowHost || _currentWindowHost;
                        if (input) {
                            if (CorrelationIdHelper.canIncludeCorrelationHeader(_config, ajaxData.getAbsoluteUrl(), currentWindowHost) && (init || (init = {}), 
                            init.headers = new Headers(init.headers || input instanceof Request && input.headers || {}), 
                            _isUsingAIHeaders && (init.headers.set(RequestHeaders.requestIdHeader, id = "|" + ajaxData.traceID + "." + ajaxData.spanID), 
                            _enableRequestHeaderTracking && (ajaxData.requestHeaders[RequestHeaders.requestIdHeader] = id)), 
                            (appId = _config.appId || _context && _context.appId()) && (init.headers.set(RequestHeaders.requestContextHeader, RequestHeaders.requestContextAppIdFormat + appId), 
                            _enableRequestHeaderTracking && (ajaxData.requestHeaders[RequestHeaders.requestContextHeader] = RequestHeaders.requestContextAppIdFormat + appId)), 
                            _isUsingW3CHeaders)) {
                                var traceparent = new Traceparent(ajaxData.traceID, ajaxData.spanID);
                                init.headers.set(RequestHeaders.traceParentHeader, traceparent.toString()), _enableRequestHeaderTracking && (ajaxData.requestHeaders[RequestHeaders.traceParentHeader] = traceparent.toString());
                            }
                            return init;
                        }
                        if (xhr) return CorrelationIdHelper.canIncludeCorrelationHeader(_config, ajaxData.getAbsoluteUrl(), currentWindowHost) && (_isUsingAIHeaders && (xhr.setRequestHeader(RequestHeaders.requestIdHeader, id = "|" + ajaxData.traceID + "." + ajaxData.spanID), 
                        _enableRequestHeaderTracking && (ajaxData.requestHeaders[RequestHeaders.requestIdHeader] = id)), 
                        (appId = _config.appId || _context && _context.appId()) && (xhr.setRequestHeader(RequestHeaders.requestContextHeader, RequestHeaders.requestContextAppIdFormat + appId), 
                        _enableRequestHeaderTracking && (ajaxData.requestHeaders[RequestHeaders.requestContextHeader] = RequestHeaders.requestContextAppIdFormat + appId)), 
                        _isUsingW3CHeaders && (traceparent = new Traceparent(ajaxData.traceID, ajaxData.spanID), 
                        xhr.setRequestHeader(RequestHeaders.traceParentHeader, traceparent.toString()), 
                        _enableRequestHeaderTracking && (ajaxData.requestHeaders[RequestHeaders.traceParentHeader] = traceparent.toString()))), 
                        xhr;
                    }, _self.trackDependencyDataInternal = function(dependency, properties, systemProperties) {
                        if (-1 === _maxAjaxCallsPerView || _trackAjaxAttempts < _maxAjaxCallsPerView) {
                            _config.distributedTracingMode !== DistributedTracingModes.W3C && _config.distributedTracingMode !== DistributedTracingModes.AI_AND_W3C || "string" != typeof dependency.id || "." === dependency.id[dependency.id.length - 1] || (dependency.id += "."), 
                            isNullOrUndefined(dependency.startTime) && (dependency.startTime = new Date);
                            var item = TelemetryItemCreator.create(dependency, RemoteDependencyData_RemoteDependencyData.dataType, RemoteDependencyData_RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);
                            _self.core.track(item);
                        } else _trackAjaxAttempts === _maxAjaxCallsPerView && _throwInternalCritical(_self, _InternalMessageId.MaxAjaxPerPVExceeded, "Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.", !0);
                        ++_trackAjaxAttempts;
                    };
                }), _this;
            }
            return __extendsFn(AjaxMonitor, _super), AjaxMonitor.getDefaultConfig = function() {
                return {
                    maxAjaxCallsPerView: 500,
                    disableAjaxTracking: !1,
                    disableFetchTracking: !0,
                    excludeRequestFromAutoTrackingPatterns: void 0,
                    disableCorrelationHeaders: !1,
                    distributedTracingMode: DistributedTracingModes.AI_AND_W3C,
                    correlationHeaderExcludedDomains: [ "*.blob.core.windows.net", "*.blob.core.chinacloudapi.cn", "*.blob.core.cloudapi.de", "*.blob.core.usgovcloudapi.net" ],
                    correlationHeaderDomains: void 0,
                    correlationHeaderExcludePatterns: void 0,
                    appId: void 0,
                    enableCorsCorrelation: !1,
                    enableRequestHeaderTracking: !1,
                    enableResponseHeaderTracking: !1,
                    enableAjaxErrorStatusText: !1,
                    enableAjaxPerfTracking: !1,
                    maxAjaxPerfLookupAttempts: 3,
                    ajaxPerfLookupDelay: 25,
                    ignoreHeaders: [ "Authorization", "X-API-Key", "WWW-Authenticate" ],
                    addRequestContext: void 0
                };
            }, AjaxMonitor.getEmptyConfig = function() {
                var emptyConfig = this.getDefaultConfig();
                return objForEachKey(emptyConfig, function(value) {
                    emptyConfig[value] = void 0;
                }), emptyConfig;
            }, AjaxMonitor.prototype.processTelemetry = function(item, itemCtx) {
                this.processNext(item, itemCtx);
            }, AjaxMonitor.identifier = "AjaxDependencyPlugin", AjaxMonitor;
        }(BaseTelemetryPlugin);
        function parseConnectionString(connectionString) {
            if (!connectionString) return {};
            var result = arrReduce(connectionString.split(";"), function(fields, kv) {
                var kvParts = kv.split("=");
                return 2 === kvParts.length && (fields[kvParts[0].toLowerCase()] = kvParts[1]), 
                fields;
            }, {});
            return objKeys(result).length > 0 && (result.endpointsuffix && (result.ingestionendpoint = result.ingestionendpoint || "https://" + (result.location ? result.location + "." : "") + "dc." + result.endpointsuffix), 
            result.ingestionendpoint = result.ingestionendpoint || "https://dc.services.visualstudio.com"), 
            result;
        }
        var _internalSdkSrc, ConnectionStringParser = {
            parse: parseConnectionString
        }, ConfigurationManager = function() {
            function ConfigurationManager() {}
            return ConfigurationManager.getConfig = function(config, field, identifier, defaultValue) {
                var configValue;
                return void 0 === defaultValue && (defaultValue = !1), configValue = identifier && config.extensionConfig && config.extensionConfig[identifier] && !isNullOrUndefined(config.extensionConfig[identifier][field]) ? config.extensionConfig[identifier][field] : config[field], 
                isNullOrUndefined(configValue) ? defaultValue : configValue;
            }, ConfigurationManager;
        }(), _ignoreUpdateSnippetProperties = [ "snippet", "dependencies", "properties", "_snippetVersion", "appInsightsNew", "getSKUDefaults" ], Telemetry = {
            __proto__: null,
            PropertiesPluginIdentifier: "AppInsightsPropertiesPlugin",
            BreezeChannelIdentifier: "AppInsightsChannelPlugin",
            AnalyticsPluginIdentifier: "ApplicationInsightsAnalytics",
            Util,
            CorrelationIdHelper,
            UrlHelper,
            DateTimeUtils,
            ConnectionStringParser,
            FieldType: {
                Default: 0,
                Required: 1,
                Array: 2,
                Hidden: 4
            },
            RequestHeaders,
            DisabledPropertyName,
            ProcessLegacy: "ProcessLegacy",
            SampleRate,
            HttpMethod: "http.method",
            DEFAULT_BREEZE_ENDPOINT: "https://dc.services.visualstudio.com",
            AIData: Data,
            AIBase: Base,
            Envelope: Envelope_Envelope,
            Event: Event_Event,
            Exception,
            Metric,
            PageView,
            PageViewData,
            RemoteDependencyData: RemoteDependencyData_RemoteDependencyData,
            Trace,
            PageViewPerformance,
            Data: Data_Data,
            SeverityLevel,
            ConfigurationManager,
            ContextTagKeys,
            DataSanitizer,
            TelemetryItemCreator,
            CtxTagKeys,
            Extensions,
            DistributedTracingModes
        }, Initialization = function() {
            function Initialization(snippet) {
                this._snippetVersion = "" + (snippet.sv || snippet.version || ""), snippet.queue = snippet.queue || [], 
                snippet.version = snippet.version || 2;
                var config = snippet.config || {};
                if (config.connectionString) {
                    var cs = parseConnectionString(config.connectionString), ingest = cs.ingestionendpoint;
                    config.endpointUrl = ingest ? "".concat(ingest, "/v2/track") : config.endpointUrl, 
                    config.instrumentationKey = cs.instrumentationkey || config.instrumentationKey;
                }
                this.appInsights = new ApplicationInsights, this.properties = new dist_esm_PropertiesPlugin, 
                this.dependencies = new AjaxMonitor, this.core = new AppInsightsCore, this._sender = new Sender, 
                this.snippet = snippet, this.config = config, this.getSKUDefaults();
            }
            return Initialization.prototype.getCookieMgr = function() {
                return this.appInsights.getCookieMgr();
            }, Initialization.prototype.trackEvent = function(event, customProperties) {
                this.appInsights.trackEvent(event, customProperties);
            }, Initialization.prototype.trackPageView = function(pageView) {
                this.appInsights.trackPageView(pageView || {});
            }, Initialization.prototype.trackPageViewPerformance = function(pageViewPerformance) {
                this.appInsights.trackPageViewPerformance(pageViewPerformance || {});
            }, Initialization.prototype.trackException = function(exception, customProperties) {
                exception && !exception.exception && exception.error && (exception.exception = exception.error), 
                this.appInsights.trackException(exception, customProperties);
            }, Initialization.prototype._onerror = function(exception) {
                this.appInsights._onerror(exception);
            }, Initialization.prototype.trackTrace = function(trace, customProperties) {
                this.appInsights.trackTrace(trace, customProperties);
            }, Initialization.prototype.trackMetric = function(metric, customProperties) {
                this.appInsights.trackMetric(metric, customProperties);
            }, Initialization.prototype.startTrackPage = function(name) {
                this.appInsights.startTrackPage(name);
            }, Initialization.prototype.stopTrackPage = function(name, url, customProperties, measurements) {
                this.appInsights.stopTrackPage(name, url, customProperties, measurements);
            }, Initialization.prototype.startTrackEvent = function(name) {
                this.appInsights.startTrackEvent(name);
            }, Initialization.prototype.stopTrackEvent = function(name, properties, measurements) {
                this.appInsights.stopTrackEvent(name, properties, measurements);
            }, Initialization.prototype.addTelemetryInitializer = function(telemetryInitializer) {
                return this.appInsights.addTelemetryInitializer(telemetryInitializer);
            }, Initialization.prototype.setAuthenticatedUserContext = function(authenticatedUserId, accountId, storeInCookie) {
                void 0 === storeInCookie && (storeInCookie = !1), this.properties.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);
            }, Initialization.prototype.clearAuthenticatedUserContext = function() {
                this.properties.context.user.clearAuthenticatedUserContext();
            }, Initialization.prototype.trackDependencyData = function(dependency) {
                this.dependencies.trackDependencyData(dependency);
            }, Initialization.prototype.flush = function(async) {
                var _this = this;
                void 0 === async && (async = !0), doPerf(this.core, function() {
                    return "AISKU.flush";
                }, function() {
                    arrForEach(_this.core.getTransmissionControls(), function(channels) {
                        arrForEach(channels, function(channel) {
                            channel.flush(async);
                        });
                    });
                }, null, async);
            }, Initialization.prototype.onunloadFlush = function(async) {
                void 0 === async && (async = !0), arrForEach(this.core.getTransmissionControls(), function(channels) {
                    arrForEach(channels, function(channel) {
                        channel.onunloadFlush ? channel.onunloadFlush() : channel.flush(async);
                    });
                });
            }, Initialization.prototype.loadAppInsights = function(legacyMode, logger, notificationManager) {
                var _this = this;
                void 0 === legacyMode && (legacyMode = !1);
                var _self = this;
                return legacyMode && _self.config.extensions && _self.config.extensions.length > 0 && throwError("Extensions not allowed in legacy mode"), 
                doPerf(_self.core, function() {
                    return "AISKU.loadAppInsights";
                }, function() {
                    var extensions = [];
                    extensions.push(_self._sender), extensions.push(_self.properties), extensions.push(_self.dependencies), 
                    extensions.push(_self.appInsights), _self.core.initialize(_self.config, extensions, logger, notificationManager), 
                    _self.context = _self.properties.context, _internalSdkSrc && _self.context && (_self.context.internal.sdkSrc = _internalSdkSrc), 
                    function(snippet) {
                        if (snippet) {
                            var snippetVer = "";
                            isNullOrUndefined(_self._snippetVersion) || (snippetVer += _self._snippetVersion), 
                            legacyMode && (snippetVer += ".lg"), _self.context && _self.context.internal && (_self.context.internal.snippetVer = snippetVer || "-"), 
                            objForEachKey(_self, function(field, value) {
                                HelperFuncs_isString(field) && !isFunction(value) && field && "_" !== field[0] && -1 === _ignoreUpdateSnippetProperties.indexOf(field) && (snippet[field] = value);
                            });
                        }
                    }(_self.snippet), _self.emptyQueue(), _self.pollInternalLogs(), _self.addHousekeepingBeforeUnload(_this);
                }), _self;
            }, Initialization.prototype.updateSnippetDefinitions = function(snippet) {
                proxyAssign(snippet, this, function(name) {
                    return name && -1 === _ignoreUpdateSnippetProperties.indexOf(name);
                });
            }, Initialization.prototype.emptyQueue = function() {
                try {
                    if (isArray(this.snippet.queue)) {
                        for (var length_1 = this.snippet.queue.length, i = 0; i < length_1; i++) (0, this.snippet.queue[i])();
                        this.snippet.queue = void 0, delete this.snippet.queue;
                    }
                } catch (exception) {
                    exception && isFunction(exception.toString) && exception.toString();
                }
            }, Initialization.prototype.pollInternalLogs = function() {
                this.core.pollInternalLogs();
            }, Initialization.prototype.stopPollingInternalLogs = function() {
                this.core.stopPollingInternalLogs();
            }, Initialization.prototype.addHousekeepingBeforeUnload = function(appInsightsInstance) {
                if (hasWindow() || hasDocument()) {
                    var performHousekeeping = function() {
                        appInsightsInstance.onunloadFlush(!1), arrForEach(appInsightsInstance.appInsights.core._extensions, function(ext) {
                            if ("AppInsightsPropertiesPlugin" === ext.identifier) return ext && ext.context && ext.context._sessionManager && ext.context._sessionManager.backup(), 
                            -1;
                        });
                    }, added = !1, excludePageUnloadEvents = appInsightsInstance.appInsights.config.disablePageUnloadEvents;
                    appInsightsInstance.appInsights.config.disableFlushOnBeforeUnload || (added = addPageUnloadEventListener(performHousekeeping, excludePageUnloadEvents), 
                    (added = addPageHideEventListener(performHousekeeping, excludePageUnloadEvents) || added) || (nav = getNavigator()) && nav.product && "ReactNative" === nav.product || appInsightsInstance.appInsights.core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedToAddHandlerForOnBeforeUnload, "Could not add handler for beforeunload and pagehide")), 
                    added || appInsightsInstance.appInsights.config.disableFlushOnUnload || addPageHideEventListener(performHousekeeping, excludePageUnloadEvents);
                }
                var nav;
            }, Initialization.prototype.getSender = function() {
                return this._sender;
            }, Initialization.prototype.getSKUDefaults = function() {
                this.config.diagnosticLogInterval = this.config.diagnosticLogInterval && this.config.diagnosticLogInterval > 0 ? this.config.diagnosticLogInterval : 1e4;
            }, Initialization;
        }();
        !function() {
            var sdkSrc = null, cdns = [ "://js.monitor.azure.com/", "://az416426.vo.msecnd.net/" ];
            try {
                var scrpt = (document || {}).currentScript;
                scrpt && (sdkSrc = scrpt.src);
            } catch (e) {}
            if (sdkSrc) try {
                var url = sdkSrc.toLowerCase();
                if (url) for (var src = "", idx = 0; idx < cdns.length; idx++) if (-1 !== url.indexOf(cdns[idx])) {
                    src = "cdn" + (idx + 1), -1 === url.indexOf("/scripts/") && (-1 !== url.indexOf("/next/") ? src += "-next" : -1 !== url.indexOf("/beta/") && (src += "-beta")), 
                    _internalSdkSrc = src + "";
                    break;
                }
            } catch (e) {}
        }();
        var ApplicationInsightsDeprecated_ignoreUpdateSnippetProperties = [ "snippet", "getDefaultConfig", "_hasLegacyInitializers", "_queue", "_processLegacyInitializers" ], AppInsightsDeprecated = function() {
            function AppInsightsDeprecated(snippet, appInsightsNew) {
                this._hasLegacyInitializers = !1, this._queue = [], this.config = AppInsightsDeprecated.getDefaultConfig(snippet.config), 
                this.appInsightsNew = appInsightsNew, this.context = {
                    addTelemetryInitializer: this.addTelemetryInitializers.bind(this)
                };
            }
            return AppInsightsDeprecated.getDefaultConfig = function(config) {
                return config || (config = {}), config.endpointUrl = config.endpointUrl || "https://dc.services.visualstudio.com/v2/track", 
                config.sessionRenewalMs = 18e5, config.sessionExpirationMs = 864e5, config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400, 
                config.maxBatchInterval = isNaN(config.maxBatchInterval) ? 15e3 : config.maxBatchInterval, 
                config.enableDebug = stringToBoolOrDefault(config.enableDebug), config.disableExceptionTracking = stringToBoolOrDefault(config.disableExceptionTracking), 
                config.disableTelemetry = stringToBoolOrDefault(config.disableTelemetry), config.verboseLogging = stringToBoolOrDefault(config.verboseLogging), 
                config.emitLineDelimitedJson = stringToBoolOrDefault(config.emitLineDelimitedJson), 
                config.diagnosticLogInterval = config.diagnosticLogInterval || 1e4, config.autoTrackPageVisitTime = stringToBoolOrDefault(config.autoTrackPageVisitTime), 
                (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) && (config.samplingPercentage = 100), 
                config.disableAjaxTracking = stringToBoolOrDefault(config.disableAjaxTracking), 
                config.maxAjaxCallsPerView = isNaN(config.maxAjaxCallsPerView) ? 500 : config.maxAjaxCallsPerView, 
                config.isBeaconApiDisabled = stringToBoolOrDefault(config.isBeaconApiDisabled, !0), 
                config.disableCorrelationHeaders = stringToBoolOrDefault(config.disableCorrelationHeaders), 
                config.correlationHeaderExcludedDomains = config.correlationHeaderExcludedDomains || [ "*.blob.core.windows.net", "*.blob.core.chinacloudapi.cn", "*.blob.core.cloudapi.de", "*.blob.core.usgovcloudapi.net" ], 
                config.disableFlushOnBeforeUnload = stringToBoolOrDefault(config.disableFlushOnBeforeUnload), 
                config.disableFlushOnUnload = stringToBoolOrDefault(config.disableFlushOnUnload, config.disableFlushOnBeforeUnload), 
                config.enableSessionStorageBuffer = stringToBoolOrDefault(config.enableSessionStorageBuffer, !0), 
                config.isRetryDisabled = stringToBoolOrDefault(config.isRetryDisabled), config.isCookieUseDisabled = stringToBoolOrDefault(config.isCookieUseDisabled), 
                config.isStorageUseDisabled = stringToBoolOrDefault(config.isStorageUseDisabled), 
                config.isBrowserLinkTrackingEnabled = stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled), 
                config.enableCorsCorrelation = stringToBoolOrDefault(config.enableCorsCorrelation), 
                config;
            }, AppInsightsDeprecated.prototype.addTelemetryInitializers = function(callBack) {
                var _this = this;
                this._hasLegacyInitializers || (this.appInsightsNew.addTelemetryInitializer(function(item) {
                    _this._processLegacyInitializers(item);
                }), this._hasLegacyInitializers = !0), this._queue.push(callBack);
            }, AppInsightsDeprecated.prototype.getCookieMgr = function() {
                return this.appInsightsNew.getCookieMgr();
            }, AppInsightsDeprecated.prototype.startTrackPage = function(name) {
                this.appInsightsNew.startTrackPage(name);
            }, AppInsightsDeprecated.prototype.stopTrackPage = function(name, url, properties, measurements) {
                this.appInsightsNew.stopTrackPage(name, url, properties);
            }, AppInsightsDeprecated.prototype.trackPageView = function(name, url, properties, measurements, duration) {
                this.appInsightsNew.trackPageView({
                    name,
                    uri: url,
                    properties,
                    measurements
                });
            }, AppInsightsDeprecated.prototype.trackEvent = function(name, properties, measurements) {
                this.appInsightsNew.trackEvent({
                    name
                });
            }, AppInsightsDeprecated.prototype.trackDependency = function(id, method, absoluteUrl, pathName, totalTime, success, resultCode) {
                this.appInsightsNew.trackDependencyData({
                    id,
                    target: absoluteUrl,
                    type: pathName,
                    duration: totalTime,
                    properties: {
                        HttpMethod: method
                    },
                    success,
                    responseCode: resultCode
                });
            }, AppInsightsDeprecated.prototype.trackException = function(exception, handledAt, properties, measurements, severityLevel) {
                this.appInsightsNew.trackException({
                    exception
                });
            }, AppInsightsDeprecated.prototype.trackMetric = function(name, average, sampleCount, min, max, properties) {
                this.appInsightsNew.trackMetric({
                    name,
                    average,
                    sampleCount,
                    min,
                    max
                });
            }, AppInsightsDeprecated.prototype.trackTrace = function(message, properties, severityLevel) {
                this.appInsightsNew.trackTrace({
                    message,
                    severityLevel
                });
            }, AppInsightsDeprecated.prototype.flush = function(async) {
                this.appInsightsNew.flush(async);
            }, AppInsightsDeprecated.prototype.setAuthenticatedUserContext = function(authenticatedUserId, accountId, storeInCookie) {
                this.appInsightsNew.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);
            }, AppInsightsDeprecated.prototype.clearAuthenticatedUserContext = function() {
                this.appInsightsNew.context.user.clearAuthenticatedUserContext();
            }, AppInsightsDeprecated.prototype._onerror = function(message, url, lineNumber, columnNumber, error) {
                this.appInsightsNew._onerror({
                    message,
                    url,
                    lineNumber,
                    columnNumber,
                    error
                });
            }, AppInsightsDeprecated.prototype.startTrackEvent = function(name) {
                this.appInsightsNew.startTrackEvent(name);
            }, AppInsightsDeprecated.prototype.stopTrackEvent = function(name, properties, measurements) {
                this.appInsightsNew.stopTrackEvent(name, properties, measurements);
            }, AppInsightsDeprecated.prototype.downloadAndSetup = function(config) {
                throwError("downloadAndSetup not implemented in web SKU");
            }, AppInsightsDeprecated.prototype.updateSnippetDefinitions = function(snippet) {
                proxyAssign(snippet, this, function(name) {
                    return name && -1 === ApplicationInsightsDeprecated_ignoreUpdateSnippetProperties.indexOf(name);
                });
            }, AppInsightsDeprecated.prototype.loadAppInsights = function() {
                var _this = this;
                if (this.config.iKey) {
                    var originalTrackPageView_1 = this.trackPageView;
                    this.trackPageView = function(pagePath, properties, measurements) {
                        originalTrackPageView_1.apply(_this, [ null, pagePath, properties, measurements ]);
                    };
                }
                return "function" == typeof this.snippet.logPageView && (this.logPageView = function(pagePath, properties, measurements) {
                    _this.trackPageView(null, pagePath, properties, measurements);
                }), "function" == typeof this.snippet.logEvent && (this.logEvent = function(name, props, measurements) {
                    _this.trackEvent(name, props, measurements);
                }), this;
            }, AppInsightsDeprecated.prototype._processLegacyInitializers = function(item) {
                return item.tags.ProcessLegacy = this._queue, item;
            }, AppInsightsDeprecated;
        }(), ApplicationInsightsContainer = function() {
            function ApplicationInsightsContainer() {}
            return ApplicationInsightsContainer.getAppInsights = function(snippet, version) {
                var initialization = new Initialization(snippet), legacyMode = 2 !== version;
                if (_legacyCookieMgr(), 2 === version) return initialization.updateSnippetDefinitions(snippet), 
                initialization.loadAppInsights(legacyMode), initialization;
                var legacy = new AppInsightsDeprecated(snippet, initialization);
                return legacy.updateSnippetDefinitions(snippet), initialization.loadAppInsights(legacyMode), 
                legacy;
            }, ApplicationInsightsContainer;
        }();
    }
} ]);