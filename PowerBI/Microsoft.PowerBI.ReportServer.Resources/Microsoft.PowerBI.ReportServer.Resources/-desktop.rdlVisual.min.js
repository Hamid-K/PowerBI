"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "rdlVisual" ], {
    22545: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            RdlVisual: function() {
                return RdlVisual;
            }
        });
        var tslib_es6 = __webpack_require__(81337), QueryStringUtil = __webpack_require__(41288), telemetryHelpers = __webpack_require__(41114), telemetryTypes = __webpack_require__(25050), objectEnumerationBuilder = __webpack_require__(28579), enums = __webpack_require__(46135), rdlVisual_capabilities = __webpack_require__(38675), _set = Reflect.set, RdlVisual = function() {
            function RdlVisual() {
                var _this = this;
                this.datasetBindings = null, this.generateGuid = function() {
                    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                        var r = 16 * Math.random() | 0;
                        return ("x" === c ? r : 3 & r | 8).toString(16);
                    });
                }, this.viewModel = new Proxy({
                    toolbar: !0,
                    reportId: void 0,
                    workspaceId: void 0,
                    paramMappings: void 0,
                    latestFieldValues: void 0,
                    hostInitFinished: !1,
                    dataInitFinished: !1,
                    autoApplyFilters: !1,
                    paramButton: !1,
                    pageNavigation: !0,
                    exportButton: !0,
                    openReportButton: !0,
                    toolbarPosition: 0,
                    useFloatingToolbar: !1,
                    exportExcel: !0,
                    exportPDF: !0,
                    exportAccessiblePDF: !0,
                    exportCSV: !0,
                    exportPPTX: !0,
                    exportWord: !0,
                    exportMHTML: !0,
                    exportXML: !0
                }, {
                    set: function(obj, prop, value) {
                        if (_set(obj, prop, value), ("hostInitFinished" === prop || "dataInitFinished" === prop) && obj.hostInitFinished && obj.dataInitFinished && !_this.iframeUri) {
                            var queryString = QueryStringUtil.s.getQueryStringValue("unmin") ? "?unmin=1" : "";
                            _this.iframeUri = "".concat(_this.anaheimWebappUrl, "/visual") + queryString, _this.resetReport();
                        }
                        return !0;
                    }
                });
            }
            return RdlVisual.prototype.init = function(options) {
                var _a, _b, _this = this, root = options.element.get(0);
                this.options = options;
                var container = d3.select(root).append("div").classed("rdl-container", !0);
                if (this.container = container.node(), window.hasOwnProperty("loadReportParameters")) {
                    var reportEmbedGlobals = window;
                    this.datasetBindings = null === (_b = null === (_a = reportEmbedGlobals.loadReportParameters) || void 0 === _a ? void 0 : _a.datasetBinding) || void 0 === _b ? void 0 : _b.paginatedReportBindings;
                }
                this.options.host.authenticationService() ? (this.buildAdditionalRdlIngressInitialSplash(), 
                this.buildAdditionalRdlIngressInitialViewModeSplash(), this.buildApplyFilterButton(), 
                this.buildSignoutView(), this.buildTooManyValuesWarning(), this.buildIFrame(), this.getHostReady(), 
                this.initCompleteTimeout = setTimeout(function() {
                    _this.emitInitCompleteEvent(2, "", !0, "Unable to load visual");
                }, 45e3), this.boundAnaheimMessageHandler = this.anaheimMessageHandler.bind(this), 
                window.addEventListener("message", this.boundAnaheimMessageHandler, !1)) : this.buildUnsupportedScreen();
            }, RdlVisual.prototype.destroy = function() {
                window.removeEventListener("message", this.boundAnaheimMessageHandler, !1), clearTimeout(this.tokenRefreshTimeout), 
                this.signInStatusSubscription && this.signInStatusSubscription.unsubscribe();
            }, RdlVisual.prototype.update = function(options) {
                var _a, _this = this;
                if (!0 !== this.unsupportedState) switch (options.type) {
                  case enums.EP.ViewMode:
                    this.visualEditMode = options.editMode, 1 === options.editMode ? this.editReport() : 0 === options.viewMode && (this.viewModel.reportId ? ($(this.initialViewModeSplashContainer).hide(), 
                    $(this.initialSplashContainer).hide(), $(this.anaheimContainer).show()) : ($(this.anaheimContainer).hide(), 
                    $(this.initialViewModeSplashContainer).show(), $(this.initialSplashContainer).hide()));
                    break;

                  case enums.EP.Data:
                    if (this.shouldUpdateVisualSettings(options.dataViews[0].metadata.objects)) {
                        var data = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.getBaseMessage("configuration-update")), {
                            toolbar: this.viewModel.toolbar,
                            paramButton: this.viewModel.paramButton,
                            showPaging: this.viewModel.pageNavigation,
                            showExport: this.viewModel.exportButton,
                            showOpenReport: this.viewModel.openReportButton,
                            floatingToolbarDockPosition: this.viewModel.toolbarPosition,
                            useFloatingToolbar: this.viewModel.useFloatingToolbar,
                            exportExcel: this.viewModel.exportExcel,
                            exportPDF: this.viewModel.exportPDF,
                            exportAccessiblePDF: this.viewModel.exportAccessiblePDF,
                            exportCSV: this.viewModel.exportCSV,
                            exportPPTX: this.viewModel.exportPPTX,
                            exportWord: this.viewModel.exportWord,
                            exportMHTML: this.viewModel.exportMHTML,
                            exportXML: this.viewModel.exportXML
                        });
                        this.sendToAnaheim(data);
                    } else this.shouldUpdateDefaultVisualSettings(options.dataViews[0].metadata.objects) && (data = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.getBaseMessage("configuration-update")), {
                        toolbar: this.viewModel.toolbar,
                        paramButton: this.viewModel.paramButton,
                        showPaging: this.viewModel.pageNavigation,
                        showOpenReport: this.viewModel.openReportButton,
                        floatingToolbarDockPosition: this.viewModel.toolbarPosition,
                        useFloatingToolbar: this.viewModel.useFloatingToolbar,
                        showExport: this.viewModel.exportButton,
                        exportExcel: this.viewModel.exportExcel,
                        exportPDF: this.viewModel.exportPDF,
                        exportAccessiblePDF: this.viewModel.exportAccessiblePDF,
                        exportCSV: this.viewModel.exportCSV,
                        exportPPTX: this.viewModel.exportPPTX,
                        exportWord: this.viewModel.exportWord,
                        exportMHTML: this.viewModel.exportMHTML,
                        exportXML: this.viewModel.exportXML
                    }), this.sendToAnaheim(data));
                    if (null != this.viewModel.reportId ? ($(this.initialSplashContainer).hide(), $(this.initialViewModeSplashContainer).hide(), 
                    $(this.anaheimContainer).show()) : options.isInFocus || ($(this.anaheimContainer).hide(), 
                    0 === options.viewMode ? $(this.initialViewModeSplashContainer).show() : $(this.initialSplashContainer).show()), 
                    options.dataViews[0].table) {
                        var tableData_1 = options.dataViews[0].table;
                        this.viewModel.latestFieldValues = [];
                        var someFieldOverLimit_1 = !1;
                        tableData_1.columns.forEach(function(col, i) {
                            var values = tableData_1.rows.map(function(r) {
                                return _this.convertTableValueToString(r[i]);
                            });
                            someFieldOverLimit_1 = someFieldOverLimit_1 || values.length >= 3e4;
                            var dedupedValues = Array.from(new Set(values)), paramBinding = {
                                fieldName: col.queryName,
                                fieldDisplayName: col.displayName,
                                fieldType: col.type.numeric || col.type.integer ? "number" : col.type.dateTime || col.type.duration ? "datetime" : col.type.bool ? "boolean" : col.type.binary ? "binary" : "string",
                                fieldValues: {
                                    values: dedupedValues
                                }
                            };
                            tableData_1.totals && tableData_1.totals[i] && (paramBinding.fieldValues.aggregate = _this.convertTableValueToString(tableData_1.totals[i])), 
                            _this.viewModel.latestFieldValues.push(paramBinding);
                        }), someFieldOverLimit_1 && (this.hasWarnedUserTooManyValues || (this.tooManyValuesWarningContainer.style.display = "flex", 
                        this.hasWarnedUserTooManyValues = !0)), (null === (_a = this.viewModel.paramMappings) || void 0 === _a ? void 0 : _a.length) > 0 ? this.viewModel.autoApplyFilters ? this.applyFilters() : this.viewModel.dataInitFinished && !options.isInFocus ? this.skipNextApplyFilters ? this.skipNextApplyFilters = !1 : $(this.applyFilterButton).show() : options.isInFocus && options.editMode && this.applyFilters() : this.viewModel.reportId && this.applyFilters();
                    } else this.viewModel.latestFieldValues = void 0, this.applyFilters();
                    this.viewModel.dataInitFinished || (this.viewModel.dataInitFinished = null == this.viewModel.paramMappings || !this.viewModel.paramMappings.length || null != this.viewModel.latestFieldValues);
                    break;

                  case enums.EP.Resize:
                    options.isInFocus ? this.viewModel.reportId || 0 !== options.viewMode ? ($(this.initialViewModeSplashContainer).hide(), 
                    $(this.initialSplashContainer).hide(), $(this.anaheimContainer).show()) : ($(this.anaheimContainer).hide(), 
                    $(this.initialViewModeSplashContainer).show(), $(this.initialSplashContainer).hide()) : this.viewModel.reportId ? this.sendToAnaheim(this.getBaseMessage("cancel-report")) : (0 === options.viewMode ? $(this.initialViewModeSplashContainer).show() : $(this.initialSplashContainer).show(), 
                    $(this.anaheimContainer).hide());
                }
            }, RdlVisual.prototype.enumerateObjectInstances = function(options) {
                var enumeration = new objectEnumerationBuilder.G;
                switch (options.objectName) {
                  case "toolbar":
                    enumeration.pushInstance({
                        selector: null,
                        properties: {
                            show: this.viewModel.toolbar,
                            pageNavigation: this.viewModel.pageNavigation,
                            paramButton: this.viewModel.paramButton,
                            position: this.viewModel.toolbarPosition,
                            useFloatingToolbar: this.viewModel.useFloatingToolbar,
                            openReportButton: this.viewModel.openReportButton
                        },
                        objectName: "toolbar"
                    });
                    break;

                  case "export":
                    this.viewModel.toolbar && enumeration.pushInstance({
                        selector: null,
                        properties: {
                            show: this.viewModel.exportButton,
                            exportExcel: this.viewModel.exportExcel,
                            exportPDF: this.viewModel.exportPDF,
                            exportAccessiblePDF: this.viewModel.exportAccessiblePDF,
                            exportPPTX: this.viewModel.exportPPTX,
                            exportCSV: this.viewModel.exportCSV,
                            exportWord: this.viewModel.exportWord,
                            exportMHTML: this.viewModel.exportMHTML,
                            exportXML: this.viewModel.exportXML
                        },
                        objectName: "export"
                    });
                    break;

                  case "autoFilter":
                    enumeration.pushInstance({
                        selector: null,
                        properties: {
                            show: this.viewModel.autoApplyFilters
                        },
                        objectName: "autoFilter"
                    });
                }
                return enumeration.complete();
            }, RdlVisual.prototype.shouldApplyDefaultToolbarSettings = function() {
                return !(!0 === this.viewModel.toolbar && !1 === this.viewModel.paramButton && !0 === this.viewModel.pageNavigation && !0 === this.viewModel.openReportButton && 0 === this.viewModel.toolbarPosition && !1 === this.viewModel.useFloatingToolbar);
            }, RdlVisual.prototype.shouldApplyDefaultExportSettings = function() {
                return !(!0 === this.viewModel.exportButton && !0 === this.viewModel.exportExcel && !0 === this.viewModel.exportPDF && !0 === this.viewModel.exportAccessiblePDF && !0 === this.viewModel.exportCSV && !0 === this.viewModel.exportPPTX && !0 === this.viewModel.exportWord && !0 === this.viewModel.exportMHTML && !0 === this.viewModel.exportXML);
            }, RdlVisual.prototype.shouldApplyDefaultAutoFilterSettings = function() {
                return !(!1 === this.viewModel.autoApplyFilters);
            }, RdlVisual.prototype.shouldUpdateDefaultVisualSettings = function(objects) {
                if (void 0 === objects) return !1;
                var shouldUpdateAnaheim = !1;
                return void 0 === objects.toolbar && this.shouldApplyDefaultToolbarSettings() && (this.updateViewModelValue("toolbar", !0), 
                this.updateViewModelValue("paramButton", !1), this.updateViewModelValue("pageNavigation", !0), 
                this.updateViewModelValue("openReportButton", !0), this.updateViewModelValue("toolbarPosition", 0), 
                this.updateViewModelValue("useFloatingToolbar", !1), shouldUpdateAnaheim = !0), 
                void 0 === objects.export && this.shouldApplyDefaultExportSettings() && (this.updateViewModelValue("exportButton", !0), 
                this.updateViewModelValue("exportExcel", !0), this.updateViewModelValue("exportPDF", !0), 
                this.updateViewModelValue("exportAccessiblePDF", !0), this.updateViewModelValue("exportCSV", !0), 
                this.updateViewModelValue("exportPPTX", !0), this.updateViewModelValue("exportWord", !0), 
                this.updateViewModelValue("exportMHTML", !0), this.updateViewModelValue("exportXML", !0), 
                shouldUpdateAnaheim = !0), void 0 === objects.autoFilter && this.shouldApplyDefaultAutoFilterSettings() && this.updateViewModelValue("autoApplyFilters", !1), 
                shouldUpdateAnaheim;
            }, RdlVisual.prototype.shouldUpdateVisualSettings = function(objects) {
                var _this = this;
                if (void 0 === objects) return !1;
                var shouldUpdateAnaheim = !1;
                return Object.entries(objects).forEach(function(_a) {
                    var _b, _c, name = _a[0], value = _a[1];
                    if ("toolbar" === name) shouldUpdateAnaheim = [ shouldUpdateAnaheim, _this.updateViewModelValue("toolbar", value.show), _this.updateViewModelValue("paramButton", value.paramButton), _this.updateViewModelValue("pageNavigation", value.pageNavigation), _this.updateViewModelValue("openReportButton", value.openReportButton), _this.updateViewModelValue("toolbarPosition", value.position), _this.updateViewModelValue("useFloatingToolbar", value.useFloatingToolbar) ].some(function(propertyUpdated) {
                        return propertyUpdated;
                    }); else if ("export" === name) shouldUpdateAnaheim = [ shouldUpdateAnaheim, _this.updateViewModelValue("exportButton", value.show), _this.updateViewModelValue("exportExcel", value.exportExcel), _this.updateViewModelValue("exportPDF", value.exportPDF), _this.updateViewModelValue("exportAccessiblePDF", value.exportAccessiblePDF), _this.updateViewModelValue("exportCSV", value.exportCSV), _this.updateViewModelValue("exportPPTX", value.exportPPTX), _this.updateViewModelValue("exportWord", value.exportWord), _this.updateViewModelValue("exportMHTML", value.exportMHTML), _this.updateViewModelValue("exportXML", value.exportXML) ].some(function(propertyUpdated) {
                        return propertyUpdated;
                    }); else if ("autoFilter" === name) _this.updateViewModelValue("autoApplyFilters", value.show); else if ("reportInfo" === name) {
                        var reference = value.reference;
                        _this.updateViewModelValue("reportId", null === (_b = null == reference ? void 0 : reference.byReference) || void 0 === _b ? void 0 : _b.itemId), 
                        _this.updateViewModelValue("workspaceId", null === (_c = null == reference ? void 0 : reference.byReference) || void 0 === _c ? void 0 : _c.workspaceId);
                    } else if ("parameterMapping" === name) {
                        var savedBinding = value.mappings;
                        try {
                            _this.viewModel.paramMappings = JSON.parse(savedBinding);
                        } catch (_d) {}
                    }
                }), shouldUpdateAnaheim;
            }, RdlVisual.prototype.updateViewModelValue = function(viewModelProperty, updateValue) {
                return void 0 !== updateValue && this.viewModel[viewModelProperty] !== updateValue && (this.viewModel[viewModelProperty] = updateValue, 
                !0);
            }, RdlVisual.prototype.getHostReady = function() {
                var _this = this;
                this.options.host.authenticationService().signInStatus$ && (this.signInStatusSubscription = this.options.host.authenticationService().signInStatus$.subscribe(function(event) {
                    return _this.onSignInChange(event);
                }));
                var clusterPromise = this.options.host.authenticationService().getClusterInfo().then(function(clusterInfo) {
                    return _this.setClusterInfo(clusterInfo);
                }), tokenPromise = this.refreshToken();
                Promise.allSettled([ tokenPromise, clusterPromise ]).then(function() {
                    _this.accessToken && _this.clusterUri && _this.anaheimWebappUrl ? _this.viewModel.hostInitFinished = !0 : _this.buildUnsupportedScreen();
                });
            }, RdlVisual.prototype.loadReport = function() {
                var _a;
                if (this.viewModel.hostInitFinished && this.viewModel.dataInitFinished) {
                    this.populateFieldValuesWithParamMappings();
                    var disableRdlVisualExport = null === (_a = this.options.host.visualExportService()) || void 0 === _a ? void 0 : _a.disableRdlVisualExport(), initData = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.getBaseMessage("init")), {
                        reportId: this.viewModel.reportId,
                        pbiReportId: this.options.host.artifactService().getReportId(),
                        token: this.accessToken,
                        clusterUri: this.clusterUri,
                        locale: this.options.host.locale && this.options.host.locale() ? this.options.host.locale() : "en-US",
                        toolbar: this.viewModel.toolbar,
                        paramButton: this.viewModel.paramButton,
                        parameters: this.viewModel.latestFieldValues || [],
                        eimInformationProtectionRdlReportLabelingUI: this.options.featureSwitches.eimInformationProtectionRdlReportLabelingUI,
                        showPaging: this.viewModel.pageNavigation,
                        showExport: this.viewModel.exportButton,
                        showOpenReport: this.viewModel.openReportButton,
                        floatingToolbarDockPosition: this.viewModel.toolbarPosition,
                        useFloatingToolbar: this.viewModel.useFloatingToolbar,
                        useReactRenderer: this.options.featureSwitches.useReactRenderer,
                        useReactParameterPane: this.options.featureSwitches.useReactParameterPane,
                        rdlVisualReact: this.options.featureSwitches.rdlVisualReact,
                        rdlVirtualizeTables: this.options.featureSwitches.rdlVirtualizeTables,
                        exportExcel: !disableRdlVisualExport && this.viewModel.exportExcel,
                        exportPDF: !disableRdlVisualExport && this.viewModel.exportPDF,
                        exportAccessiblePDF: !disableRdlVisualExport && this.viewModel.exportAccessiblePDF,
                        exportCSV: !disableRdlVisualExport && this.viewModel.exportCSV,
                        exportPPTX: !disableRdlVisualExport && this.viewModel.exportPPTX,
                        exportWord: !disableRdlVisualExport && this.viewModel.exportWord,
                        exportMHTML: !disableRdlVisualExport && this.viewModel.exportMHTML,
                        exportXML: !disableRdlVisualExport && this.viewModel.exportXML,
                        datasetBindings: this.datasetBindings,
                        parameterControlsUpdate: this.options.featureSwitches.parameterControlsUpdate
                    });
                    this.sendToAnaheim(initData), 1 === this.visualEditMode && this.editReport();
                }
            }, RdlVisual.prototype.resetReport = function() {
                this.anaheimFrame.src = this.iframeUri;
            }, RdlVisual.prototype.buildTooManyValuesWarning = function() {
                var _this = this;
                this.tooManyValuesWarningContainer = document.createElement("div"), $(this.tooManyValuesWarningContainer).addClass("toomanyvalues-container");
                var iconDiv = $("<div class='icon glyphicon pbi-glyph-warning glyph-med'></div>"), contentDiv = $("<div class='text'><span></span><a target='_blank'></a></div>");
                contentDiv.find("span").text(this.options.host.getLocalizedString("RdlVisual_TooManyValues")), 
                contentDiv.find("a").attr("href", "https://aka.ms/rdlvisualtoomanyvalues").text(this.options.host.getLocalizedString("Generic_LearnMore"));
                var buttonDiv = $("<div class='dismiss-button'><button class='dismiss-button'></button></div>");
                buttonDiv.find("button").text(this.options.host.getLocalizedString("Dismiss")).on("click", function() {
                    return _this.tooManyValuesWarningContainer.style.display = "none";
                }), $(this.tooManyValuesWarningContainer).append(iconDiv).append(contentDiv).append(buttonDiv).hide(), 
                $(this.container).append(this.tooManyValuesWarningContainer);
            }, RdlVisual.prototype.buildUnsupportedScreen = function() {
                var unsupportedContainer = document.createElement("div");
                $(unsupportedContainer).addClass("unsupported-container");
                var iconDiv = $("<div class='unsupportedIcon glyphicon pbi-glyph-error glyph-med'></div>"), contentDiv = $("<div class='unsupportedText'></div>").text(this.options.host.getLocalizedString("RdlVisual_Unsupported"));
                $(unsupportedContainer).append(iconDiv).append(contentDiv), $(this.container).append(unsupportedContainer), 
                null != this.anaheimContainer && $(this.anaheimContainer).hide(), this.unsupportedState = !0;
            }, RdlVisual.prototype.buildAdditionalRdlIngressInitialSplash = function() {
                this.initialSplashContainer = document.createElement("div"), $(this.initialSplashContainer).addClass("splash-container");
                var contentImage = $("<div class='splash-detail-image'></div>").attr("alt", this.options.host.getLocalizedString("RdlVisual_Splash_Detail_Header")), contentDivHeader = $("<div class='splash-detail-header'></div>").text(this.options.host.getLocalizedString("RdlVisual_Splash_Detail_Header")), contentDivBody = $("<div class='splash-detail-body'></div>").text(this.options.host.getLocalizedString("RdlVisual_Splash_Detail_Body")), buttonSplashDiv = $("<div class='connect-report-button'><button class='connect-report-button'></button></div>");
                buttonSplashDiv.find("button").text(this.options.host.getLocalizedString("RdlVisual_Splash_Button")).on("click", this.connectReportAction.bind(this));
                var buttonCreatePaginatedReportDiv = $("<div class='create-paginated-button'><button class='create-paginated-button'></button></div>");
                buttonCreatePaginatedReportDiv.find("button").text(this.options.host.getLocalizedString("DatasetContextMenu_CreatePaginatedReport")).on("click", this.createPaginatedReportAction.bind(this));
                var buttonsDiv = $("<div class='splash-buttons'></div>").append(buttonCreatePaginatedReportDiv).append(buttonSplashDiv);
                $(this.initialSplashContainer).append(contentImage).append(contentDivHeader).append(contentDivBody).append(buttonsDiv).hide(), 
                $(this.container).append(this.initialSplashContainer);
            }, RdlVisual.prototype.connectReportAction = function() {
                this.trace(2, "ConnectToReport action"), this.toggleConfigurationMode(!0);
            }, RdlVisual.prototype.createPaginatedReportAction = function() {
                var _a, url = this.frontendUrl + "/groups/me/create?source=rdl-visual";
                this.publishCreatePaginatedReportCertifiedEvent(), null === (_a = window.open(url, "_blank", "noopener,noreferrer")) || void 0 === _a || _a.focus();
            }, RdlVisual.prototype.buildAdditionalRdlIngressInitialViewModeSplash = function() {
                this.initialViewModeSplashContainer = document.createElement("div"), $(this.initialViewModeSplashContainer).addClass("splash-container");
                var contentImage = $("<div class='splash-detail-image'></div>").attr("alt", this.options.host.getLocalizedString("RdlVisual_Splash_Detail_Header")), contentDiv = $("<div class='splash-detail-body'></div>").text(this.options.host.getLocalizedString("RdlVisual_Splash_Detail_View_Mode")), buttonSplashDiv = $("<div class='splash-button disabled'><button class='splash-button disabled'></button></div>");
                buttonSplashDiv.find("button").text(this.options.host.getLocalizedString("RdlVisual_Splash_Button"));
                var buttonCreatePaginatedReportDiv = $("<div class='create-paginated-button disabled'><button class='create-paginated-button disabled'></button></div>");
                buttonCreatePaginatedReportDiv.find("button").text(this.options.host.getLocalizedString("DatasetContextMenu_CreatePaginatedReport"));
                var buttonsDiv = $("<div class='splash-buttons'></div>").append(buttonCreatePaginatedReportDiv).append(buttonSplashDiv);
                $(this.initialViewModeSplashContainer).append(contentImage).append(contentDiv).append(buttonsDiv).hide(), 
                $(this.container).append(this.initialViewModeSplashContainer);
            }, RdlVisual.prototype.buildOpenReportUrlTooLongDialog = function(message) {
                var _this = this;
                this.openReportUrlDialogContainer && this.openReportUrlDialogContainer.remove(), 
                this.openReportUrlDialogContainer = $('\n            <div class="modal-dialog">\n                <div class="dark-overlay"></div>\n                <div class="dialog-container" tabindex="0">\n                    <div class="dialog-header">\n                        <div class="dialog-header-text">'.concat(this.options.host.getLocalizedString("RdlVisual_Url_Too_Long"), '</div>\n                        <div class="dialog-cancel">\n                            <button\n                                class="dialog-cancel-button glyphicon pbi-glyph-exit glyph-small"\n                                tabindex="0"\n                                aria-label="').concat(this.options.host.getLocalizedString("Close"), '"\n                                title="').concat(this.options.host.getLocalizedString("Close"), '">\n                            </button>\n                        </div>\n                    </div>\n                    <div class="dialog-content">\n                        <div class="dialog-content-text">').concat(this.options.host.getLocalizedString("RdlVisual_Url_Too_Long_Text"), '</div>\n                        <div class="dialog-ok">\n                            <button class="dialog-ok-button btn primary" tabindex="0">').concat(this.options.host.getLocalizedString("ModalDialogButtonText_Ok"), "</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ")), 
                $(this.container).append(this.openReportUrlDialogContainer), this.openReportUrlDialogContainer.find("div.dark-overlay").on("click", function() {
                    return _this.openReportUrlDialogContainer.remove();
                }), this.openReportUrlDialogContainer.find("button.dialog-cancel-button").on("click", function() {
                    return _this.openReportUrlDialogContainer.remove();
                }), this.openReportUrlDialogContainer.find("button.dialog-ok-button").on("click", function() {
                    _this.openBaseReportUrl(message), _this.openReportUrlDialogContainer.remove();
                }).trigger("focus");
            }, RdlVisual.prototype.toggleConfigurationMode = function(enabled) {
                this.skipNextApplyFilters = !0, this.options.host.onSwitchFocusModeState(enabled);
            }, RdlVisual.prototype.buildSignoutView = function() {
                this.signoutViewContainer = document.createElement("div");
                var info = document.createElement("h1"), para = document.createElement("p");
                $(this.signoutViewContainer).addClass("signed-out-container"), $(info).text(this.options.host.getLocalizedString("Desktop_FileMenu_SignInDescription")), 
                $(para).text(this.options.host.getLocalizedString("RdlVisual_SignRequired_Info")), 
                $(this.signoutViewContainer).append(info).append(para).hide(), $(this.container).append(this.signoutViewContainer);
            }, RdlVisual.prototype.buildIFrame = function() {
                this.anaheimContainer = document.createElement("div"), this.anaheimFrame = document.createElement("iframe"), 
                $(this.anaheimContainer).addClass("rdl-viewer-container"), $(this.anaheimFrame).addClass("rdl-frame"), 
                $(this.anaheimContainer).append(this.anaheimFrame).hide(), $(this.container).append(this.anaheimContainer);
            }, RdlVisual.prototype.buildApplyFilterButton = function() {
                var _this = this;
                this.applyFilterButton = document.createElement("button");
                var applyIcon = document.createElement("i"), buttonText = document.createElement("span");
                $(applyIcon).addClass("glyphicon pbi-glyph-refresh glyph-mini"), $(this.applyFilterButton).addClass("floating rdl-apply-filter").on("click", function() {
                    return _this.applyFilters();
                }), $(buttonText).addClass("rdl-apply-filter-text").text(this.options.host.getLocalizedString("Apply_Changes_Button")), 
                $(this.container).append(this.applyFilterButton), $(this.applyFilterButton).append(applyIcon).append(buttonText).hide();
            }, RdlVisual.prototype.applyFilters = function() {
                this.populateFieldValuesWithParamMappings();
                var paramMessage = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.getBaseMessage("parameter-binding")), {
                    mappings: this.viewModel.latestFieldValues || []
                });
                this.sendToAnaheim(paramMessage), $(this.applyFilterButton).hide(), this.traceCrossFilteringEvent(paramMessage.mappings);
            }, RdlVisual.prototype.populateFieldValuesWithParamMappings = function() {
                var _a, _this = this;
                null === (_a = this.viewModel.latestFieldValues) || void 0 === _a || _a.forEach(function(fv) {
                    var _a, matchedParamMapping = null === (_a = _this.viewModel.paramMappings) || void 0 === _a ? void 0 : _a.find(function(mapping) {
                        return mapping.fieldName === fv.fieldName;
                    });
                    matchedParamMapping && (fv.paramName = matchedParamMapping.paramName, null != matchedParamMapping.useDefault && (fv.useDefault = matchedParamMapping.useDefault), 
                    null != matchedParamMapping.isMultiValue && (fv.isMultiValue = matchedParamMapping.isMultiValue));
                });
            }, RdlVisual.prototype.editReport = function() {
                var editMessage = this.getBaseMessage("edit");
                this.sendToAnaheim(editMessage), $(this.applyFilterButton).hide();
            }, RdlVisual.prototype.anaheimMessageHandler = function(payload) {
                var _this = this, message = payload.data;
                if ("rdl-refreshpage" === message) this.resetReport(); else if ("rdl-rvinit-ready" === message.event) this.loadReport(); else if (message.hostInstanceId === this.options.host.instanceId) switch (message.event) {
                  case "rdl-rvinit-complete":
                    clearTimeout(this.initCompleteTimeout), this.emitInitCompleteEvent(message.rdlNativeVisualVersion, message.reportViewerVersion, !1);
                    break;

                  case "export-begin":
                    this.exportReportBegin(message);
                    break;

                  case "parameter-binding":
                    this.reportPickerRestoreMessage = void 0, this.setParameterBinding(message), this.toggleConfigurationMode(!1);
                    break;

                  case "set-report":
                    this.reportPickerRestoreMessage = {
                        reportId: this.viewModel.reportId,
                        workspaceId: this.viewModel.workspaceId
                    }, this.setReportId(message);
                    break;

                  case "cancel-report":
                    this.reportPickerRestoreMessage && (this.setReportId(this.reportPickerRestoreMessage), 
                    this.reportPickerRestoreMessage = void 0), this.toggleConfigurationMode(!1), this.viewModel.reportId || ($(this.initialSplashContainer).show(), 
                    $(this.anaheimContainer).hide(), this.resetReport());
                    break;

                  case "emit-telemetry":
                    var anaheimEvent_1 = message, anaheimEventInfo_1 = anaheimEvent_1.info;
                    this.traceCustom({
                        name: anaheimEvent_1.name,
                        id: anaheimEvent_1.id,
                        time: anaheimEvent_1.time,
                        category: telemetryTypes.zD.Verbose,
                        info: anaheimEvent_1.info,
                        shouldBeLogged: !0,
                        formatted: function() {
                            return (0, telemetryHelpers.lG)({
                                reportViewerVersion: anaheimEvent_1.info.reportViewerVersion,
                                visualHostVersion: anaheimEvent_1.info.visualHostVersion,
                                reportId: anaheimEvent_1.info.reportId,
                                rid: anaheimEvent_1.info.rid,
                                isError: anaheimEvent_1.info.isError,
                                visualViewMode: 0 === _this.options.host.getViewMode() ? "view" : "edit"
                            }, _this.generateOptionalTelemetryProperties(anaheimEvent_1.name, anaheimEventInfo_1));
                        }
                    }), "RS.NativeVisual.LoadPage" === anaheimEvent_1.name && this.publishLoadPageCertifiedEvent(anaheimEventInfo_1);
                    break;

                  case "focus-rdl-visual":
                    this.options.element.get(0).click();
                    break;

                  case "rdl-visual-open-report":
                    this.openReportUrlWithParams(message);
                }
            }, RdlVisual.prototype.setReportId = function(reportPickerMessage) {
                var _a, _b;
                if (this.viewModel.reportId = reportPickerMessage.reportId, this.viewModel.workspaceId = reportPickerMessage.workspaceId, 
                this.options.host.persistProperties(this.viewModel.reportId ? {
                    merge: [ {
                        objectName: rdlVisual_capabilities.eH.reportInfo.reference.objectName,
                        selector: null,
                        properties: (_a = {}, _a[rdlVisual_capabilities.eH.reportInfo.reference.propertyName] = {
                            byReference: {
                                itemId: this.viewModel.reportId,
                                workspaceId: this.viewModel.workspaceId
                            }
                        }, _a)
                    } ]
                } : {
                    remove: [ {
                        objectName: rdlVisual_capabilities.eH.reportInfo.reference.objectName,
                        selector: null,
                        properties: (_b = {}, _b[rdlVisual_capabilities.eH.reportInfo.reference.propertyName] = null, 
                        _b)
                    } ]
                }, !1), this.viewModel.latestFieldValues) {
                    var paramMessage = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.getBaseMessage("parameter-binding")), {
                        mappings: this.viewModel.latestFieldValues
                    });
                    this.sendToAnaheim(paramMessage);
                }
            }, RdlVisual.prototype.publishLoadPageCertifiedEvent = function(anaheimEventInfo) {
                try {
                    var _a = JSON.parse(anaheimEventInfo.payload), createdBy = _a.createdBy, updatedBy = _a.updatedBy;
                    this.logStandardizedFeatureEvent({
                        featureName: "PaginatedReport",
                        activityName: "LoadPage",
                        activityStatus: anaheimEventInfo.isError && "System" === (null == anaheimEventInfo ? void 0 : anaheimEventInfo.errorSource) ? "Failed" : "Succeeded",
                        activityAttributes: {
                            platform: _a.platform,
                            userLicense: _a.userLicense,
                            subRoute: _a.subRoute,
                            capacitySkuTier: _a.capacitySkuTier,
                            createdBy: null != createdBy ? createdBy : "Unknown",
                            updatedBy: null != updatedBy ? updatedBy : "Unknown"
                        }
                    });
                } catch (e) {
                    this.trace(2, "PaginatedReport Standardized event failed to emit");
                }
            }, RdlVisual.prototype.publishCreatePaginatedReportCertifiedEvent = function() {
                this.trace(2, "CreatePaginatedReport action");
                try {
                    this.logStandardizedFeatureEvent({
                        featureName: "PaginatedReport",
                        activityName: "CreatePaginatedReport",
                        activityStatus: "Succeeded"
                    });
                } catch (e) {
                    this.trace(2, "PaginatedReport Standardized event failed to emit");
                }
            }, RdlVisual.prototype.exportReportBegin = function(exportMessage) {
                var _this = this;
                this.options.host.downloadService().downloadFile(exportMessage.resourceLocation, exportMessage.fileName, exportMessage.fileType, exportMessage.fileDescription).then(function() {
                    var deleteMessage = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _this.getBaseMessage("export-delete")), {
                        resourceId: exportMessage.resourceId
                    });
                    _this.sendToAnaheim(deleteMessage);
                }).catch(function(_err) {
                    var rejectedMessage = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _this.getBaseMessage("export-rejected")), {
                        exportPayload: exportMessage
                    });
                    _this.sendToAnaheim(rejectedMessage);
                });
            }, RdlVisual.prototype.setParameterBinding = function(parameterBindingMessage) {
                var paramBindings = parameterBindingMessage.mappings.map(function(pb) {
                    return pb.fieldValues = void 0, pb;
                });
                this.options.host.persistProperties({
                    replace: [ {
                        objectName: "parameterMapping",
                        selector: null,
                        properties: {
                            mappings: JSON.stringify(paramBindings)
                        }
                    } ]
                }, !1);
            }, RdlVisual.prototype.setVisualState = function(isSignedIn) {
                isSignedIn ? $(this.signoutViewContainer).hide() : $(this.signoutViewContainer).show();
            }, RdlVisual.prototype.refreshToken = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return _c.trys.push([ 0, 2, , 3 ]), _a = this, [ 4, this.options.host.authenticationService().getSignedInAccessToken() ];

                          case 1:
                            return _a.accessToken = _c.sent(), this.setupTokenRefresh(), [ 3, 3 ];

                          case 2:
                            return _c.sent(), this.accessToken = null, [ 3, 3 ];

                          case 3:
                            return this.setVisualState(null !== this.accessToken), [ 2 ];
                        }
                    });
                });
            }, RdlVisual.prototype.onSignInChange = function(event) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.accessToken = event.accessToken, event.isSignedIn ? (_a = this.setClusterInfo, 
                            [ 4, this.options.host.authenticationService().getClusterInfo() ]) : [ 3, 2 ];

                          case 1:
                            return _a.apply(this, [ _b.sent() ]), this.resetReport(), this.setupTokenRefresh(), 
                            [ 3, 3 ];

                          case 2:
                            this.anaheimFrame.src = "about:blank", this.iframeUri = void 0, clearTimeout(this.tokenRefreshTimeout), 
                            _b.label = 3;

                          case 3:
                            return this.viewModel.hostInitFinished = event.isSignedIn, this.setVisualState(event.isSignedIn), 
                            [ 2 ];
                        }
                    });
                });
            }, RdlVisual.prototype.setClusterInfo = function(clusterInfo) {
                this.clusterUri = clusterInfo.backendUrl, this.anaheimWebappUrl = clusterInfo.paginatedReportUrl, 
                this.frontendUrl = clusterInfo.frontendUrl;
            }, RdlVisual.prototype.setupTokenRefresh = function() {
                var _this = this;
                if (null != this.accessToken) {
                    var parsedToken = this.getParsedJwt(this.accessToken);
                    if (void 0 !== parsedToken && null != parsedToken.exp) {
                        clearTimeout(this.tokenRefreshTimeout);
                        var nextRefreshTime = 1e3 * parsedToken.exp - (new Date).getTime();
                        this.tokenRefreshTimeout = setTimeout(function() {
                            return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                return (0, tslib_es6.__generator)(this, function(_a) {
                                    switch (_a.label) {
                                      case 0:
                                        return [ 4, this.refreshToken() ];

                                      case 1:
                                        return _a.sent(), null != this.accessToken && this.sendToAnaheim({
                                            authToken: this.accessToken
                                        }), [ 2 ];
                                    }
                                });
                            });
                        }, nextRefreshTime);
                    }
                }
            }, RdlVisual.prototype.getParsedJwt = function(token) {
                try {
                    return JSON.parse(atob(token.split(".")[1]));
                } catch (_a) {
                    return;
                }
            }, RdlVisual.prototype.getBaseMessage = function(event) {
                return {
                    hostInstanceId: this.options.host.instanceId,
                    rdlNativeVisualVersion: 2,
                    event
                };
            }, RdlVisual.prototype.sendToAnaheim = function(data) {
                this.anaheimFrame && this.anaheimFrame.contentWindow && this.anaheimFrame.contentWindow.postMessage(data, "*");
            }, RdlVisual.prototype.generateOptionalTelemetryProperties = function(name, telemetryInfo) {
                var telemetryInfoEvent = {
                    payload: telemetryInfo.payload,
                    rdlSessionId: telemetryInfo.rdlSessionId
                };
                switch (telemetryInfo.isError && (telemetryInfoEvent = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, telemetryInfoEvent), {
                    errorSource: telemetryInfo.errorSource,
                    errorText: telemetryInfo.errorText,
                    statusCode: telemetryInfo.statusCode
                })), name) {
                  case "RS.NativeVisual.Parameters":
                    var parameterInfo = telemetryInfo;
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, telemetryInfoEvent), {
                        parameters: parameterInfo.parameters
                    });

                  case "RS.NativeVisual.RenderPage":
                  case "RS.NativeVisual.LoadPage":
                    var renderInfo = telemetryInfo;
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, telemetryInfoEvent), {
                        reportViewType: renderInfo.reportViewType
                    });

                  case "RS.NativeVisual.ReportList":
                    var reportListInfo = telemetryInfo;
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, telemetryInfoEvent), {
                        reportList: reportListInfo.reportList
                    });

                  case "RS.NativeVisual.BindParameters":
                    var parameterBindingInfo = telemetryInfo;
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, telemetryInfoEvent), {
                        reportParameters: parameterBindingInfo.reportParameters,
                        boundParameters: parameterBindingInfo.boundParameters,
                        fieldToParameterTypesMap: parameterBindingInfo.parameterToFieldTypesMap
                    });

                  default:
                    return telemetryInfoEvent;
                }
            }, RdlVisual.prototype.emitInitCompleteEvent = function(rdlNativeVisualVersion, reportViewerVersion, isError, errorText) {
                var _this = this, initTelemetryEvent = {
                    name: "RS.NativeVisual.ReportViewerLoaded",
                    time: Date.now(),
                    category: telemetryTypes.zD.Verbose,
                    shouldBeLogged: !0,
                    id: this.generateGuid(),
                    info: {
                        reportViewerVersion,
                        visualHostVersion: rdlNativeVisualVersion
                    },
                    formatted: function() {
                        return (0, telemetryHelpers.lG)({
                            reportViewerVersion,
                            visualHostVersion: rdlNativeVisualVersion,
                            isError,
                            visualViewMode: 0 === _this.options.host.getViewMode() ? "view" : "edit"
                        }, {
                            errorText
                        });
                    }
                };
                this.traceCustom(initTelemetryEvent);
            }, RdlVisual.prototype.convertTableValueToString = function(value) {
                return null == value ? value : value instanceof Date ? value.getFullYear() + "-" + this.toPaddedString(value.getMonth() + 1) + "-" + this.toPaddedString(value.getDate()) + " " + this.toPaddedString(value.getHours()) + ":" + this.toPaddedString(value.getMinutes()) + ":" + this.toPaddedString(value.getSeconds()) + "." + value.getMilliseconds() : value.toString();
            }, RdlVisual.prototype.toPaddedString = function(value) {
                return value.toString().padStart(2, "0");
            }, RdlVisual.prototype.appendUrlParam = function(key, fieldValue) {
                return null === fieldValue ? key + ":isnull=true&" : key + "=" + encodeURIComponent(fieldValue) + "&";
            }, RdlVisual.prototype.openBaseReportUrl = function(message) {
                var _a, url = this.frontendUrl + "/groups/" + this.viewModel.workspaceId + "/rdlreports/" + this.viewModel.reportId + this.getWindowLocationSearch();
                this.traceOpenReportUrl(0, !1, message), null === (_a = window.open(url, "_blank", "noopener,noreferrer")) || void 0 === _a || _a.focus();
            }, RdlVisual.prototype.openReportUrlWithParams = function(message) {
                var _a, _this = this, queryParams = "", numParamsAppended = 0;
                _.filter(this.viewModel.latestFieldValues || [], function(fieldValue) {
                    return !!fieldValue.paramName;
                }).forEach(function(param) {
                    var key = "rp:" + param.paramName;
                    param.fieldValues && (param.isMultiValue ? param.fieldValues.values.forEach(function(fieldValue) {
                        queryParams += _this.appendUrlParam(key, fieldValue), numParamsAppended++;
                    }) : (queryParams += _this.appendUrlParam(key, param.fieldValues.values[0]), numParamsAppended++));
                });
                var existingQueryParams = QueryStringUtil.s.parseQueryString(this.getWindowLocationSearch());
                existingQueryParams.ctid && (queryParams += "ctid=" + existingQueryParams.ctid + "&"), 
                _.isEmpty(queryParams) || (queryParams = queryParams.slice(0, -1));
                var url = this.frontendUrl + "/groups/" + this.viewModel.workspaceId + "/rdlreports/" + this.viewModel.reportId, paramsExceededUrlLimit = url.length + queryParams.length > 1e3;
                paramsExceededUrlLimit ? this.buildOpenReportUrlTooLongDialog(message) : (url += _.isEmpty(queryParams) ? "" : "?" + queryParams, 
                this.traceOpenReportUrl(numParamsAppended, paramsExceededUrlLimit, message), null === (_a = window.open(url, "_blank", "noopener,noreferrer")) || void 0 === _a || _a.focus());
            }, RdlVisual.prototype.getWindowLocationSearch = function() {
                return window.location.search;
            }, RdlVisual.prototype.traceOpenReportUrl = function(numParamsAppended, paramsExceededUrlLimit, message) {
                var _this = this, openReportEvent = {
                    name: "RS.NativeVisual.OpenReportUrl",
                    time: Date.now(),
                    category: telemetryTypes.zD.Verbose,
                    shouldBeLogged: !0,
                    id: this.generateGuid(),
                    info: {
                        visualHostVersion: null == message ? void 0 : message.rdlNativeVisualVersion,
                        numParamsAppended,
                        paramsExceededUrlLimit
                    },
                    formatted: function() {
                        return (0, telemetryHelpers.lG)({
                            visualHostVersion: null == message ? void 0 : message.rdlNativeVisualVersion,
                            isError: !1,
                            visualViewMode: 0 === _this.options.host.getViewMode() ? "view" : "edit",
                            numParamsAppended,
                            paramsExceededUrlLimit
                        }, {});
                    }
                };
                this.traceCustom(openReportEvent);
            }, RdlVisual.prototype.traceCrossFilteringEvent = function(bindings) {
                var _this = this, crossFilterEvent = {
                    name: "RS.NativeVisual.CrossFiltering",
                    time: Date.now(),
                    category: telemetryTypes.zD.Verbose,
                    shouldBeLogged: !0,
                    id: this.generateGuid(),
                    info: {},
                    formatted: function() {
                        return (0, telemetryHelpers.lG)({
                            visualViewMode: 0 === _this.options.host.getViewMode() ? "view" : "edit",
                            visualHostVersion: 2,
                            reportId: _this.viewModel.reportId,
                            mappings: JSON.stringify(bindings.map(function(binding) {
                                var _a, _b, _c;
                                return {
                                    fieldType: binding.fieldType,
                                    useDefault: binding.useDefault,
                                    isMultiValue: binding.isMultiValue,
                                    valuesCount: null === (_b = null === (_a = binding.fieldValues) || void 0 === _a ? void 0 : _a.values) || void 0 === _b ? void 0 : _b.length,
                                    useAggregate: !!(null === (_c = binding.fieldValues) || void 0 === _c ? void 0 : _c.aggregate)
                                };
                            }))
                        }, {});
                    }
                };
                this.traceCustom(crossFilterEvent);
            }, Object.defineProperty(RdlVisual.prototype, "telemetryService", {
                get: function() {
                    var _a;
                    return null === (_a = this.options.host) || void 0 === _a ? void 0 : _a.telemetry();
                },
                enumerable: !1,
                configurable: !0
            }), RdlVisual.prototype.trace = function(event, info) {
                var _a;
                null === (_a = this.telemetryService) || void 0 === _a || _a.trace(event, info);
            }, RdlVisual.prototype.traceCustom = function(event) {
                var _a;
                null === (_a = this.telemetryService) || void 0 === _a || _a.traceCustom(event);
            }, RdlVisual.prototype.logStandardizedFeatureEvent = function(event) {
                var _a;
                null === (_a = this.telemetryService) || void 0 === _a || _a.logStandardizedFeatureEvent(event);
            }, RdlVisual;
        }();
    }
} ]);