"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "drill-through" ], {
    3618: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            DrillThroughModule: function() {
                return DrillThroughModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), conceptual_schema_proxy_service = __webpack_require__(26898), exploration_navigation_service = __webpack_require__(39503), exploration_state_manager_service = __webpack_require__(49080), data_sources_service = __webpack_require__(83008), core = __webpack_require__(50423), DrillthroughNavigatorProviderService = function() {
            function DrillthroughNavigatorProviderService() {}
            return DrillthroughNavigatorProviderService.prototype.getNavigators = function() {
                return [];
            }, DrillthroughNavigatorProviderService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DrillthroughNavigatorProviderService,
                factory: DrillthroughNavigatorProviderService.\u0275fac = function(t) {
                    return new (t || DrillthroughNavigatorProviderService);
                },
                providedIn: "root"
            }), DrillthroughNavigatorProviderService;
        }(), event_bridge_service = __webpack_require__(11494), feature_switch_service = __webpack_require__(9380), events = __webpack_require__(8590), sqExprStaticMembers = __webpack_require__(74082), sqExprEqualityVisitor = __webpack_require__(45413), debug = __webpack_require__(62458), Utility = __webpack_require__(38078), fieldExprPatternToSQExprConverter = __webpack_require__(80366), fieldExprPatternBuilder = __webpack_require__(76001), sqExprUtils = __webpack_require__(45334), explorationStateService = __webpack_require__(70489), visualContainerUtils = __webpack_require__(60661), DrillthroughUtils = function() {
            function DrillthroughUtils() {}
            return DrillthroughUtils.getApplyStateInfoForInternallDrillthrough = function(targetSection, drillthroughFilterInfo, navigateToTargetSection, drillthroughMatchingBehavior) {
                var _a;
                void 0 === navigateToTargetSection && (navigateToTargetSection = !0), void 0 === drillthroughMatchingBehavior && (drillthroughMatchingBehavior = 0), 
                debug.fF.assertValue(targetSection, "targetSection"), debug.fF.assertAnyValue(drillthroughFilterInfo, "drillthroughFilterInfo");
                var targetSectionFiltersState = DrillthroughUtils.getFiltersState(targetSection, {
                    skipUnmatchedDrillthroughFilters: !1,
                    filterMatchingBehavior: drillthroughMatchingBehavior
                }, drillthroughFilterInfo);
                return {
                    state: {
                        activeSection: navigateToTargetSection ? targetSection.name : void 0,
                        sections: (_a = {}, _a[targetSection.name] = {
                            filters: targetSectionFiltersState
                        }, _a)
                    },
                    options: {
                        clearUnmatchedData: !1,
                        suppressDataSourceVariables: !0,
                        suppressActiveSection: !navigateToTargetSection
                    }
                };
            }, DrillthroughUtils.getFiltersState = function(targetSection, options, drillthroughFilterInfo) {
                debug.fF.assertValue(targetSection, "targetSection"), debug.fF.assertValue(options, "options"), 
                debug.fF.assertAnyValue(drillthroughFilterInfo, "drillthroughFilterInfo");
                var nonTransientDrillthroughFilterContainerStates = [], actionFilterContext = drillthroughFilterInfo ? (0, 
                tslib_es6.__spreadArray)([], drillthroughFilterInfo || [], !0) : [], filterNames = {}, filterMatchingBehavior = options.filterMatchingBehavior;
                if (!_.isEmpty(targetSection.filters)) for (var _loop_1 = function(filterContainer) {
                    if (5 !== filterContainer.howCreated || filterContainer.isTransient) return "continue";
                    debug.fF.assertValue(filterContainer.expression, "drillthrough non transient filter should always have expression");
                    var matchingActionFilter = _.find(actionFilterContext, function(actionFilterInfo) {
                        return (1 === filterMatchingBehavior || !actionFilterInfo.isTransient) && actionFilterInfo.filterExpressionMetadata && 1 === actionFilterInfo.filterExpressionMetadata.expressions.length && (0, 
                        sqExprEqualityVisitor.fS)(actionFilterInfo.filterExpressionMetadata.expressions[0], filterContainer.expression);
                    }), filterContainerState = (0, explorationStateService.e)(filterContainer);
                    if (matchingActionFilter) _.remove(actionFilterContext, matchingActionFilter), filterContainerState.filter = matchingActionFilter.filter, 
                    filterContainerState.cachedValueItems = void 0; else {
                        if (options.skipUnmatchedDrillthroughFilters) return "continue";
                        filterContainerState.filter = void 0, filterContainerState.cachedValueItems = void 0;
                    }
                    nonTransientDrillthroughFilterContainerStates.push(filterContainerState), filterNames[filterContainer.name] = !0;
                }, _i = 0, _a = targetSection.filters; _i < _a.length; _i++) _loop_1(_a[_i]);
                var targetSectionFiltersState = {
                    exprIdentifiedMerges: nonTransientDrillthroughFilterContainerStates
                };
                if (0 === filterMatchingBehavior && _.some(actionFilterContext, function(filterContext) {
                    return filterContext.isTransient;
                }) || 1 === filterMatchingBehavior && !_.isEmpty(actionFilterContext)) {
                    for (var transientDrillthroughFilterContainerStates = [], _loop_2 = function(filterContext) {
                        debug.fF.assert(function() {
                            return 1 === filterMatchingBehavior || !!filterContext.isTransient;
                        }, "remaining drillthroughFilterInfo should always be transient");
                        var filterName = (0, Utility.zE)(filterNames, "transientFilter");
                        filterNames[filterName] = !0;
                        var filterContainerState = {
                            name: filterName,
                            expression: _.isEmpty(filterContext.filterExpressionMetadata) || 1 !== filterContext.filterExpressionMetadata.expressions.length ? void 0 : filterContext.filterExpressionMetadata.expressions[0],
                            type: filterContext.type,
                            restatement: filterContext.restatement,
                            filter: filterContext.filter,
                            howCreated: 5,
                            isTransient: !0,
                            displayName: filterContext.displayName
                        };
                        transientDrillthroughFilterContainerStates.push(filterContainerState);
                    }, _b = 0, actionFilterContext_1 = actionFilterContext; _b < actionFilterContext_1.length; _b++) _loop_2(actionFilterContext_1[_b]);
                    targetSectionFiltersState.transientFilters = transientDrillthroughFilterContainerStates;
                }
                return targetSectionFiltersState;
            }, DrillthroughUtils.getMatchedLinkFieldsFromParameters = function(parameters, columnSQExprs, aggAndMeasureSQExprs, schema) {
                var linkFields = _.map(parameters, function(parameter) {
                    var field = {
                        fieldExpr: parameter.fieldExpr,
                        asAggregation: parameter.asAggregation
                    };
                    return debug.fF.assert(function() {
                        return null == field.fieldExpr || !(0, sqExprStaticMembers.kb)(field.fieldExpr) || !0 !== field.asAggregation;
                    }, "A pod parameter from a measure should never have asAggregation to be true"), 
                    null == field.asAggregation && field.fieldExpr && (0, sqExprStaticMembers.kb)(field.fieldExpr) && (field.asAggregation = !1), 
                    field;
                });
                if (!_.isEmpty(linkFields)) return this.getMatchedLinkFields(linkFields, columnSQExprs, aggAndMeasureSQExprs, schema);
            }, DrillthroughUtils.getMatchedLinkFields = function(linkFields, columnSQExprs, aggAndMeasureSQExprs, schema) {
                for (var matchedLinkFields = [], _loop_3 = function(linkField) {
                    var linkFieldExpr = linkField.fieldExpr;
                    if (!linkFieldExpr) return "continue";
                    if (debug.fF.assert(function() {
                        return (0, sqExprStaticMembers.kb)(linkFieldExpr) || (0, sqExprStaticMembers.t3)(linkFieldExpr) || (0, 
                        sqExprStaticMembers.wD)(linkFieldExpr) || (0, sqExprStaticMembers.ez)(linkFieldExpr);
                    }, "only have support for measure, column, grouping column and hierarchy level"), 
                    (0, sqExprStaticMembers.kb)(linkFieldExpr)) debug.fF.assert(function() {
                        return !1 === linkField.asAggregation;
                    }, "asAggregation should always be false when the fieldExpr is a measure"), _.find(aggAndMeasureSQExprs, function(e) {
                        return (0, sqExprStaticMembers.kb)(e) && (0, sqExprEqualityVisitor.fS)(e, linkFieldExpr);
                    }) && matchedLinkFields.push(linkField); else {
                        var keyColumnsForLinkField = linkFieldExpr.getKeyColumns(schema);
                        if (!_.isEmpty(keyColumnsForLinkField)) if (linkField.asAggregation) for (var _a = 0, aggAndMeasureSQExprs_1 = aggAndMeasureSQExprs; _a < aggAndMeasureSQExprs_1.length; _a++) {
                            var metaDataSQExpr = aggAndMeasureSQExprs_1[_a];
                            if ((0, sqExprStaticMembers.iV)(metaDataSQExpr)) {
                                var keyColumnsForSelector = metaDataSQExpr.arg.getKeyColumns(schema);
                                if (sqExprUtils.m.isSubset(keyColumnsForLinkField, keyColumnsForSelector)) {
                                    matchedLinkFields.push(linkField);
                                    break;
                                }
                            }
                        } else sqExprUtils.m.isSubset(keyColumnsForLinkField, columnSQExprs) && matchedLinkFields.push(linkField);
                    }
                }, _i = 0, linkFields_1 = linkFields; _i < linkFields_1.length; _i++) _loop_3(linkFields_1[_i]);
                return matchedLinkFields;
            }, DrillthroughUtils.getMeasuresFromSelectors = function(selectors, visualContainer, schema) {
                for (var sqExprs = [], visualQuery = (0, visualContainerUtils.Xf)(visualContainer), _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++) {
                    var selector = selectors_1[_i];
                    if (selector.metadata) for (var _a = 0, _b = selector.metadata; _a < _b.length; _a++) {
                        var metadata = _b[_a], measure = visualQuery.defn.select().withName(metadata);
                        if (measure && measure.expr) {
                            var fieldExpr = (0, fieldExprPatternBuilder.Q)(measure.expr, schema), baseExpr = (0, 
                            fieldExprPatternToSQExprConverter.bO)(fieldExpr);
                            sqExprs.push(baseExpr);
                        }
                    }
                }
                return sqExprs;
            }, DrillthroughUtils;
        }(), filterUtils = __webpack_require__(42614), variationToHierarchyRewriter = __webpack_require__(74642), scopeIdentityExtractor = __webpack_require__(26743), semanticQuery = __webpack_require__(95462), sqExpr = __webpack_require__(94419), drillthroughUtilsHelper = __webpack_require__(30351);
        function getDrillthroughActionForMatchedSection(matchedSection, selectorColumnValuePairs, visualContainerAppliedFilters, schema) {
            return debug.fF.assertValue(matchedSection, "matchedSection"), debug.fF.assertAnyValue(selectorColumnValuePairs, "selectorColumnValuePairs"), 
            debug.fF.assertAnyValue(visualContainerAppliedFilters, "visualContainerAppliedFilters"), 
            debug.fF.assertValue(schema, "schema"), {
                targetSectionName: matchedSection.sectionName,
                targetReportGuid: matchedSection.reportObjectId ? matchedSection.reportObjectId : void 0,
                sectionDisplayName: matchedSection.sectionDisplayName,
                reportDisplayName: matchedSection.reportDisplayName ? matchedSection.reportDisplayName : void 0,
                getFilterContext: function() {
                    return function(matchedSection, selectorColumnValuePairs, visualContainerAppliedFilters, schema) {
                        for (var filterContext = [], matchedSelectorIndices = [], _i = 0, _a = matchedSection.matchedLinkFields; _i < _a.length; _i++) {
                            var linkField = _a[_i], linkFieldExpr = linkField.fieldExpr;
                            if (!linkField.asAggregation && !(0, sqExprStaticMembers.kb)(linkFieldExpr)) {
                                for (var linkFieldKeyColumns = linkFieldExpr.getKeyColumns(schema), filterKeyColumns = [], filterKeyColumnValues = [], _loop_2 = function(linkFieldKeyColumn) {
                                    var index = _.findIndex(selectorColumnValuePairs, function(pair) {
                                        return (0, sqExprEqualityVisitor.fS)(pair.column, linkFieldKeyColumn);
                                    });
                                    debug.fF.assert(function() {
                                        return -1 !== index;
                                    }, "Expect every groupOn key of a matched section's column-type link field has a match in the selectors"), 
                                    matchedSelectorIndices.push(index), filterKeyColumns.push(selectorColumnValuePairs[index].column), 
                                    filterKeyColumnValues.push(selectorColumnValuePairs[index].value);
                                }, _b = 0, linkFieldKeyColumns_1 = linkFieldKeyColumns; _b < linkFieldKeyColumns_1.length; _b++) _loop_2(linkFieldKeyColumns_1[_b]);
                                var semanticFilter = semanticQuery.yl.fromSQExpr((0, sqExpr.Sh)(filterKeyColumns, [ filterKeyColumnValues ]));
                                filterContext.push({
                                    filterExpressionMetadata: {
                                        expressions: [ linkFieldExpr ]
                                    },
                                    filter: semanticFilter,
                                    isTransient: !1
                                });
                            }
                        }
                        if (1 === matchedSection.allowedFiltersFromSource || 2 === matchedSection.allowedFiltersFromSource) {
                            if (!_.isEmpty(visualContainerAppliedFilters)) {
                                var sourceVisualFilterContext = filterUtils.l.getFiltersToApplyFromVisualQueryFilterContext(visualContainerAppliedFilters);
                                2 !== matchedSection.allowedFiltersFromSource && _.remove(sourceVisualFilterContext, function(filter) {
                                    return 2 === filter.scope;
                                });
                                for (var _c = 0, sourceVisualFilterContext_1 = sourceVisualFilterContext; _c < sourceVisualFilterContext_1.length; _c++) {
                                    var filterData = sourceVisualFilterContext_1[_c];
                                    filterContext.push({
                                        filter: filterData.filter,
                                        isTransient: !0,
                                        filterExpressionMetadata: filterData.filterExpressionMetadata,
                                        restatement: filterData.restatement,
                                        type: filterData.type,
                                        displayName: filterData.displayName
                                    });
                                }
                            }
                            for (var rewriter = new variationToHierarchyRewriter.L(schema), _loop_3 = function(index) {
                                if (_.includes(matchedSelectorIndices, index)) return "continue";
                                var columnValuePair = selectorColumnValuePairs[index], filterEquals = semanticQuery.yl.fromSQExpr((0, 
                                sqExpr.qu)(0, columnValuePair.column, columnValuePair.value)), filterInValues = semanticQuery.yl.fromSQExpr((0, 
                                sqExpr.Sh)([ columnValuePair.column ], [ [ columnValuePair.value ] ]));
                                if (!_.find(filterContext, function(f) {
                                    return semanticQuery.yl.isSameFilter(f.filter, filterEquals) || semanticQuery.yl.isSameFilter(f.filter, filterInValues);
                                })) {
                                    var expr = columnValuePair.column.accept(rewriter);
                                    filterContext.push({
                                        filterExpressionMetadata: {
                                            expressions: [ expr ]
                                        },
                                        filter: filterInValues,
                                        isTransient: !0
                                    });
                                }
                            }, index = 0; index < selectorColumnValuePairs.length; index++) _loop_3(index);
                        }
                        return filterContext;
                    }(matchedSection, selectorColumnValuePairs, visualContainerAppliedFilters, schema);
                },
                applyState: matchedSection.applyState
            };
        }
        var DrillthroughServiceLazyProvider = {
            provide: "drillthrough",
            useFactory: function(eventBridge, conceptualSchemaProxy, dataSources, explorationNavigationService, explorationStateManager, drillthroughNavigatorProvider, featureSwitchService) {
                var internalNavigator = new InternalPodsDrillthroughNavigator(eventBridge, conceptualSchemaProxy, dataSources, explorationNavigationService, explorationStateManager, featureSwitchService), drillthroughNavigators = [];
                if (drillthroughNavigators.push(internalNavigator), drillthroughNavigatorProvider) {
                    var externalDrillthroughNavigators = drillthroughNavigatorProvider.getNavigators();
                    externalDrillthroughNavigators && drillthroughNavigators.push.apply(drillthroughNavigators, externalDrillthroughNavigators || []);
                }
                return new Promise(function(resolve) {
                    resolve(new DrillthroughService(conceptualSchemaProxy, dataSources, featureSwitchService, internalNavigator, drillthroughNavigators));
                });
            },
            deps: [ event_bridge_service.J, conceptual_schema_proxy_service.i, data_sources_service.D, exploration_navigation_service.z, exploration_state_manager_service.J, DrillthroughNavigatorProviderService, feature_switch_service.vZ ]
        }, DrillthroughService = function() {
            function DrillthroughService(conceptualSchemaProxy, dataSources, featureSwitchService, defaultNavigator, drillthroughNavigators) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.featureSwitchService = featureSwitchService, this.defaultNavigator = defaultNavigator, 
                this.drillthroughNavigators = drillthroughNavigators;
            }
            return DrillthroughService.prototype.getMatchedSectionsInfo = function(targetSectionType, fromSectionName, visualContainer, selectors, visualContainerAppliedFilters) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var matchedSectionAndActionPair;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getMatchedSections(targetSectionType, void 0, fromSectionName, visualContainer, selectors, visualContainerAppliedFilters) ];

                          case 1:
                            return matchedSectionAndActionPair = _a.sent(), [ 2, _.map(matchedSectionAndActionPair, function(pair) {
                                return _.extend(pair.sectionInfo, {
                                    getFilterContext: pair.action.getFilterContext
                                });
                            }) ];
                        }
                    });
                });
            }, DrillthroughService.prototype.getForcedMatchSectionInfo = function(targetSectionType, targetSectionName, fromSectionName, visualContainer, selectors, visualContainerAppliedFilters) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var matchedSectionAndActionPair, count, matched;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getMatchedSections(targetSectionType, targetSectionName, fromSectionName, visualContainer, selectors, visualContainerAppliedFilters) ];

                          case 1:
                            return matchedSectionAndActionPair = _a.sent(), count = _.size(matchedSectionAndActionPair), 
                            debug.fF.assert(function() {
                                return count <= 1;
                            }, "The target section name is given, at most 1 matching section might be found."), 
                            count < 1 ? [ 2 ] : (matched = matchedSectionAndActionPair[0], [ 2, _.extend(matched.sectionInfo, {
                                getFilterContext: matched.action.getFilterContext
                            }) ]);
                        }
                    });
                });
            }, DrillthroughService.prototype.getDrillthroughActions = function(fromSectionName, visualContainer, selectors, visualContainerAppliedFilters) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var matchedSectionAndActionPair;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getMatchedSections(this.featureSwitchService.featureSwitches.onObject ? 2 : 0, void 0, fromSectionName, visualContainer, selectors, visualContainerAppliedFilters) ];

                          case 1:
                            return matchedSectionAndActionPair = _a.sent(), [ 2, _.map(matchedSectionAndActionPair, function(pair) {
                                return pair.action;
                            }) ];
                        }
                    });
                });
            }, DrillthroughService.prototype.applyDrillthroughState = function(action, navigateToTargetSection) {
                return void 0 === navigateToTargetSection && (navigateToTargetSection = !0), (0, 
                tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return debug.fF.assertValue(action, "action"), [ 2, action.applyState(action, navigateToTargetSection) ];
                    });
                });
            }, DrillthroughService.prototype.getDrillthroughParameters = function(sectionName) {
                for (var allDrillthroughParameters = [], _i = 0, _a = this.drillthroughNavigators; _i < _a.length; _i++) {
                    var drillthroughParameters = _a[_i].getDrillthroughParameters(sectionName);
                    _.isEmpty(drillthroughParameters) || allDrillthroughParameters.push.apply(allDrillthroughParameters, drillthroughParameters || []);
                }
                return allDrillthroughParameters;
            }, DrillthroughService.prototype.getMatchedSections = function(targetSectionType, targetSectionName, fromSectionName, visualContainer, selectors, visualContainerAppliedFilters) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var columnSQInExprs, singleValueColumns, selectorColumnExprs, sourceSchema, allMatchedSections, _i, _a, matchedSections;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return 1 !== _.size(selectors) ? [ 2 ] : (columnSQInExprs = function(selectors) {
                                debug.fF.assertValue(selectors, "selectors");
                                for (var sqInExprs = [], _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++) {
                                    var selector = selectors_1[_i];
                                    if (selector.dataMap) for (var queryName in selector.dataMap) for (var _a = 0, _b = selector.dataMap[queryName]; _a < _b.length; _a++) {
                                        var identity = _b[_a];
                                        if (identity) {
                                            var identityExpr = identity.expr;
                                            if (identityExpr) {
                                                var inExpr = (0, scopeIdentityExtractor.FD)(identityExpr);
                                                sqInExprs.push(inExpr);
                                            }
                                        }
                                    }
                                }
                                return sqInExprs;
                            }(selectors), singleValueColumns = function(columnExprs) {
                                if (columnExprs) {
                                    for (var columnSQExprs = [], _loop_1 = function(sqInExpr) {
                                        sqInExpr && !_.isEmpty(sqInExpr.args) && 1 === sqInExpr.values.length && _.every(sqInExpr.args, function(arg, index) {
                                            return columnSQExprs.push({
                                                column: arg,
                                                value: sqInExpr.values[0][index]
                                            });
                                        });
                                    }, _i = 0, columnExprs_1 = columnExprs; _i < columnExprs_1.length; _i++) _loop_1(columnExprs_1[_i]);
                                    return columnSQExprs;
                                }
                            }(columnSQInExprs), 0 === _.size(singleValueColumns) && 0 !== _.size(columnSQInExprs) ? [ 2 ] : (selectorColumnExprs = _.map(singleValueColumns, function(pair) {
                                return pair.column;
                            }), [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ]));

                          case 1:
                            sourceSchema = _b.sent(), allMatchedSections = [], _i = 0, _a = this.drillthroughNavigators, 
                            _b.label = 2;

                          case 2:
                            return _i < _a.length ? [ 4, _a[_i].getMatchedSections(targetSectionType, targetSectionName, fromSectionName, selectorColumnExprs, visualContainer, selectors, sourceSchema) ] : [ 3, 5 ];

                          case 3:
                            matchedSections = _b.sent(), _.isEmpty(matchedSections) || allMatchedSections.push.apply(allMatchedSections, matchedSections || []), 
                            _b.label = 4;

                          case 4:
                            return _i++, [ 3, 2 ];

                          case 5:
                            return [ 2, _.map(allMatchedSections, function(matchedSection) {
                                return {
                                    sectionInfo: matchedSection,
                                    action: getDrillthroughActionForMatchedSection(matchedSection, singleValueColumns, visualContainerAppliedFilters, sourceSchema)
                                };
                            }) ];
                        }
                    });
                });
            }, DrillthroughService.\u0275fac = function(t) {
                core["\u0275\u0275invalidFactory"]();
            }, DrillthroughService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DrillthroughService,
                factory: DrillthroughService.\u0275fac
            }), DrillthroughService;
        }(), InternalPodsDrillthroughNavigator = function() {
            function InternalPodsDrillthroughNavigator(eventBridge, conceptualSchemaProxy, dataSources, explorationNavigationService, explorationStateManager, featureSwitchService) {
                this.eventBridge = eventBridge, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.dataSources = dataSources, this.explorationNavigationService = explorationNavigationService, 
                this.explorationStateManager = explorationStateManager, this.featureSwitchService = featureSwitchService;
            }
            return InternalPodsDrillthroughNavigator.prototype.getMatchedSections = function(targetSectionType, targetSectionName, sourceSectionName, selectorColumnExprs, visualContainer, selectors, schema) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var isOnObjectFSOn, selectorAggrAndMeasureSQExprs, matchedSections;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return debug.fF.assertValue(targetSectionType, "targetSectionType"), debug.fF.assertAnyValue(targetSectionName, "targetSectionName"), 
                        debug.fF.assert(function() {
                            return !_.isEmpty(sourceSectionName);
                        }, "sourceSectionName should not be empty."), debug.fF.assertAnyValue(selectorColumnExprs, "selectorColumnExprs"), 
                        debug.fF.assertValue(visualContainer, "visualContainer"), debug.fF.assertAnyValue(selectors, "selectors"), 
                        debug.fF.assertValue(schema, "schema"), (isOnObjectFSOn = this.featureSwitchService.featureSwitches.onObject) && 0 === targetSectionType ? (debug.fF.assertFail("We do NOT expect calling getMatchedSections with targetSectionType being SectionType.Regular when onObject FS is on"), 
                        [ 2, [] ]) : isOnObjectFSOn || 2 !== targetSectionType ? (selectorAggrAndMeasureSQExprs = DrillthroughUtils.getMeasuresFromSelectors(selectors, visualContainer, schema), 
                        matchedSections = this.getMatchedSectionInfoImpl(1 === targetSectionType ? 2 : 1, targetSectionName, sourceSectionName, selectorColumnExprs, selectorAggrAndMeasureSQExprs, schema), 
                        _.isEmpty(matchedSections) ? [ 2 ] : [ 2, matchedSections ]) : (debug.fF.assertFail("We do NOT expect calling getMatchedSections with targetSectionType being SectionType.Drillthrough when onObject FS is off"), 
                        [ 2, [] ]);
                    });
                });
            }, InternalPodsDrillthroughNavigator.prototype.applyDrillthroughState = function(action, navigateToTargetSection) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var targetSection, applyStateInfo, activity, schema, error_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            if (debug.fF.assertValue(action, "action"), !(targetSection = this.explorationNavigationService.getSectionByName(action.targetSectionName))) return [ 2 ];
                            if (!(applyStateInfo = DrillthroughUtils.getApplyStateInfoForInternallDrillthrough(targetSection, action.getFilterContext(), navigateToTargetSection))) return [ 2 ];
                            activity = this.explorationStateManager.createApplyBookmarkActivity("DrillThroughFilters"), 
                            _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 3, , 4 ]), [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 2:
                            return schema = _a.sent(), this.explorationStateManager.apply(applyStateInfo.state, schema, applyStateInfo.options, activity), 
                            navigateToTargetSection && this.eventBridge.publishToChannel(events.t4l, {
                                explorationContentChanged: !0
                            }), activity.resolve(), [ 3, 4 ];

                          case 3:
                            return error_1 = _a.sent(), activity.reject(error_1), [ 3, 4 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, InternalPodsDrillthroughNavigator.prototype.getDrillthroughParameters = function(sectionName) {
                if (_.isEmpty(sectionName)) return [];
                var exploration = this.explorationNavigationService.getCurrentExploration(), matchingPod = _.find(exploration.pods, function(pod) {
                    return pod.boundSection === sectionName && 1 === pod.type;
                });
                return matchingPod ? matchingPod.parameters : [];
            }, InternalPodsDrillthroughNavigator.prototype.getMatchedSectionInfoImpl = function(targetPodType, targetSectionName, fromSectionName, selectorColumnExprs, selectorAggAndMeasureSQExprs, schema) {
                var _this = this;
                if (debug.fF.assert(function() {
                    return !_.isEmpty(fromSectionName);
                }, "fromSectionName should not be empty."), debug.fF.assertAnyValue(selectorColumnExprs, "selectorColumnExprs"), 
                debug.fF.assertAnyValue(selectorAggAndMeasureSQExprs, "selectorAggAndMeasureSQExprs"), 
                debug.fF.assertValue(schema, "schema"), !_.isEmpty(selectorColumnExprs) || !_.isEmpty(selectorAggAndMeasureSQExprs)) {
                    var exploration = this.explorationNavigationService.getCurrentExploration();
                    debug.fF.assertValue(exploration, "exploration");
                    var matchingPodCandidates, pods = exploration.pods;
                    matchingPodCandidates = _.filter(pods, function(pod) {
                        return pod.boundSection !== fromSectionName && function(pod) {
                            return _.isEmpty(targetSectionName) || pod.boundSection === targetSectionName;
                        }(pod) && function(pod) {
                            return pod.type === targetPodType;
                        }(pod);
                    });
                    for (var result = [], sections = this.explorationNavigationService.getAllSections(), _loop_4 = function(pod) {
                        var section = _.find(sections, function(section) {
                            return section.name === pod.boundSection;
                        }), matchingResult = this_1.getMatchedInfoFromPod(pod, section, selectorColumnExprs, selectorAggAndMeasureSQExprs, schema);
                        matchingResult && result.push(matchingResult);
                    }, this_1 = this, _i = 0, matchingPodCandidates_1 = matchingPodCandidates; _i < matchingPodCandidates_1.length; _i++) _loop_4(pod = matchingPodCandidates_1[_i]);
                    if (!_.isEmpty(targetSectionName) && _.isEmpty(result)) {
                        var section = _.find(sections, function(section) {
                            return section.name === targetSectionName;
                        });
                        if (!section || !this.isMatchingType(section.type, targetPodType)) return;
                        var pod, allowedFiltersFromSource = 1;
                        (pod = _.find(pods, function(pod) {
                            return pod.boundSection === targetSectionName;
                        })) && (1 !== pod.config.acceptsFilterContext || (0, drillthroughUtilsHelper.i)(pod.type, pod.parameters) || (allowedFiltersFromSource = 0)), 
                        result.push({
                            sectionDisplayName: section.displayName,
                            sectionName: section.name,
                            matchedLinkFields: [],
                            allowedFiltersFromSource,
                            applyState: function(action, navigateToTargetSection) {
                                return _this.applyDrillthroughState(action, navigateToTargetSection);
                            }
                        });
                    }
                    return result;
                }
            }, InternalPodsDrillthroughNavigator.prototype.getMatchedInfoFromPod = function(pod, section, columnSQExprs, aggAndMeasureSQExprs, schema) {
                var _this = this, parameterCandidates = _.filter(pod.parameters, function(param) {
                    return !param.isLegacySingleSelection;
                });
                if (!_.isEmpty(parameterCandidates)) {
                    var matchedLinkFields = DrillthroughUtils.getMatchedLinkFieldsFromParameters(parameterCandidates, columnSQExprs, aggAndMeasureSQExprs, schema);
                    if (!_.isEmpty(matchedLinkFields)) {
                        var acceptsAllFiltersWhenLinked = 0 === pod.config.acceptsFilterContext || (0, drillthroughUtilsHelper.i)(pod.type, pod.parameters);
                        return {
                            sectionDisplayName: section.displayName,
                            sectionName: section.name,
                            matchedLinkFields,
                            allowedFiltersFromSource: acceptsAllFiltersWhenLinked ? 1 : 0,
                            applyState: function(action, navigateToTargetSection) {
                                return _this.applyDrillthroughState(action, navigateToTargetSection);
                            }
                        };
                    }
                }
            }, InternalPodsDrillthroughNavigator.prototype.isMatchingType = function(sectionType, podType) {
                return void 0 === sectionType || 0 === sectionType ? this.featureSwitchService.featureSwitches.onObject ? 0 === podType : 1 === podType : 2 === sectionType ? 1 === podType : 1 === sectionType && 2 === podType;
            }, InternalPodsDrillthroughNavigator;
        }(), common = __webpack_require__(77476), Data_module = __webpack_require__(52910), lazy_load_module = __webpack_require__(82156), DrillThroughModule = function() {
            function DrillThroughModule() {}
            return DrillThroughModule.\u0275fac = function(t) {
                return new (t || DrillThroughModule);
            }, DrillThroughModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: DrillThroughModule
            }), DrillThroughModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ DrillthroughServiceLazyProvider ],
                imports: [ common.CommonModule, Data_module.O, lazy_load_module.N ]
            }), DrillThroughModule;
        }();
    }
} ]);