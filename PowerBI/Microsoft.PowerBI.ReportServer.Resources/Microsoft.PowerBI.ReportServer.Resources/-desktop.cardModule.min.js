"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "cardModule" ], {
    68193: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            V: function() {
                return AnimatedText;
            }
        });
        var _Visuals_capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14599), _Visuals_common_axisHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53197), _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(90120), _Visuals_common_tooltipUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38400), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(62458), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32041), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64329), _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10389), _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72489), AnimatedText = function() {
            function AnimatedText(name) {
                this.defaultTitleColor = "#333333", this._animatedTextOptions = {}, this.mainText = (0, 
                _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("mainText"), this.name = name, 
                this.visualConfiguration = {
                    maxFontSize: 60
                };
            }
            return AnimatedText.prototype.getMetaDataColumn = function(dataView) {
                if (dataView && dataView.metadata && dataView.metadata.columns) for (var i = 0, ilen = dataView.metadata.columns.length; i < ilen; i++) {
                    var column = dataView.metadata.columns[i];
                    if (column.isMeasure) {
                        this.metaDataColumn = column;
                        break;
                    }
                }
            }, AnimatedText.prototype.getAdjustedFontHeight = function(availableWidth, textToMeasure, seedFontHeight) {
                var _a, _b, _c, _d, textProperties = {
                    fontFamily: null === (_a = this._animatedTextOptions.textProperties) || void 0 === _a ? void 0 : _a.fontFamily,
                    fontWeight: null === (_b = this._animatedTextOptions.textProperties) || void 0 === _b ? void 0 : _b.fontWeight,
                    fontStyle: null === (_c = this._animatedTextOptions.textProperties) || void 0 === _c ? void 0 : _c.fontStyle,
                    textDecoration: null === (_d = this._animatedTextOptions.textProperties) || void 0 === _d ? void 0 : _d.textDecoration,
                    text: textToMeasure
                };
                return this.getAdjustedFontHeightCore(textProperties, availableWidth, seedFontHeight, 0);
            }, AnimatedText.prototype.getAdjustedFontHeightCore = function(textProperties, availableWidth, seedFontHeight, iteration) {
                return iteration > 10 ? seedFontHeight : (textProperties.fontSize = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__.FP.toString(seedFontHeight), 
                _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_2__.b.measureSvgTextWidth(textProperties) < availableWidth ? seedFontHeight : this.getAdjustedFontHeightCore(textProperties, availableWidth, .9 * seedFontHeight, iteration + 1));
            }, AnimatedText.prototype.clear = function() {
                this.svg.select(this.mainText.selector).text("");
            }, AnimatedText.prototype.doValueTransition = function(startValue, endValue, displayUnitSystemType, animationOptions, duration, forceUpdate, formatter, datumTransform) {
                var _a, _b, _c, _d;
                if (forceUpdate || startValue !== endValue || null == endValue) {
                    startValue || (startValue = 0), datumTransform || (datumTransform = this.getDefaultDatumTransform());
                    var svg = this.svg, viewport = this.currentViewport, height = viewport.height, width = viewport.width, seedFontHeight = this.getSeedFontHeight(width, height), translateX = this.getTranslateX(width), translateY = this.getTranslateY(seedFontHeight), metaDataColumn = this.metaDataColumn;
                    formatter || (formatter = (0, _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__.Ue)({
                        format: this.getFormatString(this.dataPointObjects, metaDataColumn),
                        value: endValue,
                        displayUnitSystemType,
                        formatSingleValues: !0,
                        allowFormatBeautification: !0,
                        columnType: metaDataColumn ? metaDataColumn.type : void 0
                    }));
                    var startText = String(startValue), endText = String(endValue);
                    (_.isEmpty(endValue) || "string" != typeof endValue) && (endText = formatter.format(endValue)), 
                    (_.isEmpty(startValue) || "string" != typeof startValue) && (startText = formatter.format(startValue)), 
                    svg.classed(this.name, !0);
                    var endValueArr = [ datumTransform.getDatum(endValue, endText) ], textElement = svg.selectAll("text").data(endValueArr), textElementUpdate = textElement.enter().append("text").classed(this.mainText.class, !0).merge(textElement), fontHeight = this.getAdjustedFontHeight(width, endText, seedFontHeight);
                    if (translateY = this.getTranslateY(fontHeight + (height - fontHeight) / 2), textElementUpdate.text(startText).attr("text-anchor", this.getTextAnchor()).attr("font-size", fontHeight).attr("transform", (0, 
                    _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__.Iu)(translateX, translateY)).style("font-style", null === (_a = this._animatedTextOptions.textProperties) || void 0 === _a ? void 0 : _a.fontStyle).style("text-decoration", null === (_b = this._animatedTextOptions.textProperties) || void 0 === _b ? void 0 : _b.textDecoration).style("font-weight", null === (_c = this._animatedTextOptions.textProperties) || void 0 === _c ? void 0 : _c.fontWeight).style("font-family", null === (_d = this._animatedTextOptions.textProperties) || void 0 === _d ? void 0 : _d.fontFamily).style("fill", this.getTextColor()).call(_Visuals_common_tooltipUtils__WEBPACK_IMPORTED_MODULE_5__.Q, [ startText ]), 
                    null == endValue || metaDataColumn && (0, _Visuals_common_axisHelper__WEBPACK_IMPORTED_MODULE_6__.v9)(metaDataColumn.type) || "string" == typeof endValue || "string" == typeof startValue) textElementUpdate.text(endText).call(_Visuals_common_tooltipUtils__WEBPACK_IMPORTED_MODULE_5__.Q, [ endText ]); else {
                        var interpolatedValue_1 = startValue;
                        textElementUpdate.transition().duration(duration).tween("text", function(d) {
                            var value = datumTransform.getValue(d), i = d3.interpolate(interpolatedValue_1, value);
                            return function(t) {
                                var num = i(t);
                                this.textContent = formatter.format(num);
                            };
                        });
                    }
                    return (0, _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__.bL)(animationOptions, textElementUpdate), 
                    textElementUpdate;
                }
            }, AnimatedText.prototype.getDefaultDatumTransform = function() {
                return {
                    getDatum: function(value, _formattedValue) {
                        return {
                            value
                        };
                    },
                    getValue: function(datum) {
                        return datum.value;
                    }
                };
            }, Object.defineProperty(AnimatedText.prototype, "animatedTextOptions", {
                get: function() {
                    return this._animatedTextOptions;
                },
                set: function(options) {
                    this._animatedTextOptions = options;
                },
                enumerable: !1,
                configurable: !0
            }), AnimatedText.prototype.getTextColor = function() {
                var _a, styleForegroundColor = this.style && _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__.v.getThemeColor(this.style, "foreground");
                return (null === (_a = this._animatedTextOptions) || void 0 === _a ? void 0 : _a.titleColor) || styleForegroundColor || this.defaultTitleColor;
            }, AnimatedText.prototype.getSeedFontHeight = function(boundingWidth, boundingHeight) {
                var estimatedSize = Math.floor(.75 * Math.min(boundingWidth, boundingHeight)), maxFontSize = this.visualConfiguration.maxFontSize;
                return maxFontSize ? Math.min(maxFontSize, estimatedSize) : estimatedSize;
            }, AnimatedText.prototype.getTranslateX = function(width) {
                if (this.visualConfiguration) switch (this.visualConfiguration.align) {
                  case "left":
                    return 0;

                  case "right":
                    return width;
                }
                return width / 2;
            }, AnimatedText.prototype.getTranslateY = function(height) {
                return height;
            }, AnimatedText.prototype.getTextAnchor = function() {
                if (this.visualConfiguration) switch (this.visualConfiguration.align) {
                  case "left":
                    return "start";

                  case "right":
                    return "end";
                }
                return "middle";
            }, AnimatedText.prototype.getFormatString = function(dataPointObjects, column) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_8__.fF.assertAnyValue(column, "column"), 
                (0, _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__.eU)(dataPointObjects, column, _Visuals_capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_9__.e0.formatString);
            }, AnimatedText;
        }();
    },
    26101: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            createCard: function() {
                return createCard;
            }
        });
        var tslib_es6 = __webpack_require__(81337), animatorCommon = __webpack_require__(94478), card_capabilities = __webpack_require__(16891), axisHelper = __webpack_require__(53197), cardUtil = __webpack_require__(11856), colorHelper = __webpack_require__(90120), dataLabelViewModel1Consts = __webpack_require__(56707), dataLabelViewModel1 = __webpack_require__(21181), dataLabelViewModel1Utils = __webpack_require__(70188), common_fontProperties = __webpack_require__(18664), kpiUtil = __webpack_require__(91358), onObjectUtil = __webpack_require__(80065), htmlSubSelectionHelper = __webpack_require__(52287), subSelectionOutlineRenderer = __webpack_require__(86900), textUtil = __webpack_require__(44977), tooltipUtils = __webpack_require__(38400), tooltipService = __webpack_require__(40739), CssConstants = __webpack_require__(79154), debug = __webpack_require__(62458), textMeasurementService = __webpack_require__(32041), build_control_util = __webpack_require__(56578), svgUtil = __webpack_require__(10389), enums = __webpack_require__(46135), visualData = __webpack_require__(58098), dataViewObject2 = __webpack_require__(82755), valueFormatter = __webpack_require__(72489), selectionId = __webpack_require__(26543), Card = function(_super) {
            function Card(options) {
                var _this = _super.call(this, Card.cardClassName) || this;
                return _this.isScrollable = !1, _this.displayUnitSystemType = visualData.V.WholeUnits, 
                options && (_this.tooltipsEnabled = options.tooltipsEnabled, _this.isScrollable = !!options.isScrollable, 
                _this.interactivityEnabled = options.interactivityEnabled, options.animator && (_this.animator = options.animator), 
                null != options.displayUnitSystemType && (_this.displayUnitSystemType = options.displayUnitSystemType), 
                options.cardSmallViewportProperties && (_this.cardSmallViewportProperties = options.cardSmallViewportProperties), 
                _this.featureSwitches = options.featureSwitches || {}), _this;
            }
            return (0, tslib_es6.__extends)(Card, _super), Card.prototype.init = function(options) {
                var _a, _this = this;
                debug.fF.assertValue(options, "options"), this.animationOptions = options.animation;
                var hostElement = options.element.get(0);
                this.tooltipsEnabled && (this.tooltipService = (0, tooltipService.r)(options.host)), 
                this.kpiImage = d3.select(hostElement).append("div").classed(Card.KPIImage.class, !0);
                var svg = this.svg = d3.select(hostElement).append("svg");
                if (this.graphicsContext = svg.append("g"), this.currentViewport = options.viewport, 
                this.hostServices = options.host, this.style = options.style, this.updateViewportProperties(), 
                this.isScrollable && (svg.attr("class", Card.cardClassName), this.labelContext = svg.append("g")), 
                this.interactivityEnabled && svg.attr("tabindex", 0).attr("focusable", !0), this.featureSwitches.onObject) {
                    var subSelectionHostService = null === (_a = this.hostServices) || void 0 === _a ? void 0 : _a.getSubSelectionService(), renderer = null != subSelectionHostService ? subSelectionHostService : subSelectionOutlineRenderer.D.createWithDefaultHost();
                    this.subSelectionHelper = htmlSubSelectionHelper.O5.createHtmlSubselectionHelper({
                        hostElement,
                        hostServices: this.hostServices,
                        renderer,
                        targetSource: "format",
                        scale: function() {
                            return _this.currentViewport.scale;
                        }
                    });
                }
            }, Card.prototype.onDataChanged = function(options) {
                debug.fF.assertValue(options, "options"), this.featureSwitches.onObject && options.formatMode ? this.removeContextmenuHandler() : this.attachContextmenuHandler();
                var value, dataPointObjects, dataView = options.dataViews && options.dataViews[0];
                if (dataView) {
                    this.getMetaDataColumn(dataView), dataView.single && (value = dataView.single.value, 
                    dataPointObjects = dataView.single.objects, dataView.single.column && (this.selector = {
                        metadata: [ dataView.single.column.queryName ]
                    })), this.cardFormatSetting = this.getDefaultFormatSettings(this.style);
                    var dataViewMetadata = dataView.metadata;
                    if (dataViewMetadata) {
                        var objects = dataViewMetadata.objects;
                        if (objects) {
                            var labelSettings = this.cardFormatSetting.labelSettings, labelsObj = objects.labels;
                            labelsObj && labelSettings && (0, dataLabelViewModel1.ww)(labelsObj, labelSettings, void 0, this.style), 
                            labelSettings.precision !== dataLabelViewModel1Consts.NZ && labelSettings.precision < 0 && (labelSettings.precision = 0);
                            var categoryLabelsObj = objects.categoryLabels, categoryLabelSettings = this.cardFormatSetting.categoryLabelSetting;
                            categoryLabelsObj && categoryLabelSettings && (0, dataLabelViewModel1.ww)(categoryLabelsObj, categoryLabelSettings, void 0, this.style), 
                            this.cardFormatSetting.wordWrap = (0, dataViewObject2.NA)(objects, card_capabilities.d.wordWrap.show, this.cardFormatSetting.wordWrap);
                        }
                    }
                }
                this.featureSwitches.onObject && options.formatMode !== this.formatMode && (this.formatMode = options.formatMode, 
                this.subSelectionHelper.setFormatMode(options.formatMode)), this.updateInternal(value, dataPointObjects, !0, !0);
                var shouldAlertScreenReader = options.type & enums.EP.FormattingSubSelectionChange;
                if (this.subSelectionHelper && (options.type & enums.EP.Data || options.type & enums.EP.Resize || options.type & enums.EP.FormattingSubSelectionChange) && (this.subSelectionHelper.updateOutlinesFromSubSelections(options.subSelections, !0), 
                this.hostServices.alertScreenReader && shouldAlertScreenReader)) {
                    var labels = this.subSelectionHelper.getLabelsFromSubSelections(options.subSelections, [ "aria-label" ]), message = (null == labels ? void 0 : labels.length) && labels.join(" ");
                    message && this.hostServices.alertScreenReader(message);
                }
            }, Card.prototype.onResizing = function(viewport) {
                this.currentViewport = viewport, this.updateViewportProperties(), this.updateInternal(this.value, this.dataPointObjects, !0, !0);
            }, Card.prototype.attachContextmenuHandler = function() {
                var _this = this;
                this.svg.on("contextmenu", function() {
                    var d3Event = d3.event;
                    _this.hostServices.onContextMenu({
                        data: [ _this.selector ],
                        position: {
                            x: d3Event.clientX,
                            y: d3Event.clientY
                        }
                    }), d3Event.preventDefault(), d3Event.stopPropagation();
                });
            }, Card.prototype.removeContextmenuHandler = function() {
                this.svg.on("contextmenu", null);
            }, Card.prototype.updateViewportProperties = function() {
                var viewport = this.currentViewport;
                this.svg.attr("width", viewport.width).attr("height", viewport.height);
            }, Card.prototype.setTextProperties = function(text, fontProperties) {
                Card.cardTextProperties = (0, common_fontProperties.qk)(fontProperties, text);
            }, Card.prototype.isSmallViewport = function() {
                return !!(this.cardSmallViewportProperties && this.currentViewport.width <= this.cardSmallViewportProperties.cardSmallViewportWidth);
            }, Card.prototype.getCardPrecision = function(isSmallViewport) {
                return void 0 === isSmallViewport && (isSmallViewport = !1), isSmallViewport ? dataLabelViewModel1Consts.NZ : this.cardFormatSetting.labelSettings.precision;
            }, Card.prototype.getCardDisplayUnits = function(isSmallViewport) {
                return void 0 === isSmallViewport && (isSmallViewport = !1), isSmallViewport || this.metaDataColumn && this.metaDataColumn.type && !this.metaDataColumn.type.numeric ? 0 : this.cardFormatSetting.labelSettings.displayUnits;
            }, Card.prototype.getAdjustedFontHeight = function(availableWidth, textToMeasure, seedFontHeight) {
                var adjustedFontHeight = _super.prototype.getAdjustedFontHeight.call(this, availableWidth, textToMeasure, seedFontHeight);
                return Math.min(adjustedFontHeight, cardUtil.D.card.maxFontSize);
            }, Card.prototype.clear = function(valueOnly) {
                void 0 === valueOnly && (valueOnly = !1), this.svg.select(Card.Value.selector).text(""), 
                valueOnly || this.svg.select(Card.Label.selector).text(""), _super.prototype.clear.call(this);
            }, Card.prototype.updateInternal = function(target, dataPointObjects, suppressAnimations, forceUpdate) {
                void 0 === forceUpdate && (forceUpdate = !1);
                var start = this.value, duration = (0, animatorCommon.Mb)(this.animator, suppressAnimations);
                if (void 0 !== target) {
                    var metadataColumn = this.metaDataColumn, labelSettings = this.cardFormatSetting.labelSettings, categoryLabelSetting = this.cardFormatSetting.categoryLabelSetting, isSmallViewport = this.isSmallViewport(), precision = this.getCardPrecision(isSmallViewport), displayUnits = this.getCardDisplayUnits(isSmallViewport), isDefaultDisplayUnit = 0 === displayUnits, format = this.getFormatString(dataPointObjects, metadataColumn), formatter = (0, 
                    valueFormatter.Ue)({
                        format,
                        value: isDefaultDisplayUnit ? target : displayUnits,
                        precision: (0, dataLabelViewModel1Utils.h1)(precision, format),
                        displayUnitSystemType: isDefaultDisplayUnit && precision === dataLabelViewModel1Consts.NZ ? this.displayUnitSystemType : visualData.V.WholeUnits,
                        formatSingleValues: !!isDefaultDisplayUnit,
                        allowFormatBeautification: !0,
                        columnType: metadataColumn ? metadataColumn.type : void 0
                    }), formatSettings = this.cardFormatSetting, valueTextHeightInPx = labelSettings.fontProperties.size.px;
                    this.setTextProperties(target, this.cardFormatSetting.categoryLabelSetting.fontProperties);
                    var tooltipData, categoryLabelHeightWithPadding = (categoryLabelSetting.show ? textMeasurementService.b.estimateSvgTextHeight(Card.cardTextProperties) : 0) + cardUtil.D.label.paddingTop, width = this.currentViewport.width, height = this.currentViewport.height, translateX = this.getTranslateX(width), translateY = (height - categoryLabelHeightWithPadding - valueTextHeightInPx) / 2, columnDisplayName = metadataColumn && metadataColumn.displayName, statusGraphicInfo = (0, 
                    kpiUtil.jz)(metadataColumn) && (0, kpiUtil.zl)(metadataColumn, target, 1);
                    if (this.isScrollable) {
                        if (!forceUpdate && start === target) return;
                        if (statusGraphicInfo) this.graphicsContext.selectAll("text").remove(), this.displayStatusGraphic(statusGraphicInfo, target, translateX, translateY, valueTextHeightInPx); else {
                            var targetString;
                            targetString = _.isEmpty(target) || "string" != typeof target ? formatter.format(target) : target;
                            var data = [ {
                                displayName: columnDisplayName,
                                value: targetString
                            } ];
                            this.kpiImage.selectAll("div").remove();
                            var translatedValueY = this.getTranslateY(valueTextHeightInPx + translateY), valueUpdate = (valueElement = this.graphicsContext.attr("transform", (0, 
                            svgUtil.Iu)(translateX, translatedValueY)).selectAll("text").data(data)).enter().append("text").attr("class", Card.Value.class).merge(valueElement);
                            if (valueUpdate.text(function(d) {
                                return d.value;
                            }).style("text-anchor", this.getTextAnchor()).styles((0, common_fontProperties.E_)(labelSettings.fontProperties)), 
                            valueUpdate.style("white-space", labelSettings.preserveWhitespace ? "pre" : "normal"), 
                            this.featureSwitches.onObject && valueUpdate.classed(htmlSubSelectionHelper.cy, !0).attr(htmlSubSelectionHelper.CP, !0).attr(htmlSubSelectionHelper.Ez, "callout-value").attr(htmlSubSelectionHelper.CK, "Visual_Gauge_CalloutValue").attr(htmlSubSelectionHelper.QZ, 2), 
                            formatSettings.wordWrap) {
                                var valueTextNode = valueUpdate.node();
                                (0, textUtil.lM)(valueTextNode, width, height - categoryLabelHeightWithPadding, void 0, !0, labelSettings.preserveWhitespace);
                                var numLines = valueTextNode.childElementCount;
                                numLines > 1 && (translatedValueY = this.getTranslateY(valueTextHeightInPx + (translateY = (height - categoryLabelHeightWithPadding - (valueTextHeightInPx *= numLines)) / 2)), 
                                this.graphicsContext.attr("transform", (0, svgUtil.Iu)(translateX, translatedValueY)));
                            } else valueUpdate.call(axisHelper.oq, width, textMeasurementService.b.svgEllipsis);
                            this.addTooltip(valueUpdate), valueElement.exit().remove();
                        }
                        if (categoryLabelSetting.show && columnDisplayName) {
                            var labelData = [ columnDisplayName ], translatedLabelY = this.getTranslateY(valueTextHeightInPx + categoryLabelHeightWithPadding + translateY), labelElement = this.labelContext.attr("transform", (0, 
                            svgUtil.Iu)(translateX, translatedLabelY)).selectAll("text").data(labelData), labelUpdate = labelElement.enter().append("text").attr("class", Card.Label.class).merge(labelElement);
                            labelUpdate.text(function(d) {
                                return d;
                            }).styles((0, common_fontProperties.E_)(categoryLabelSetting.fontProperties)).style("text-anchor", this.getTextAnchor()), 
                            labelUpdate.style("white-space", categoryLabelSetting.preserveWhitespace ? "pre" : "normal"), 
                            this.featureSwitches.onObject && labelUpdate.classed(htmlSubSelectionHelper.cy, !0).attr(htmlSubSelectionHelper.CP, !0).attr(htmlSubSelectionHelper.Ez, "category-labels").attr(htmlSubSelectionHelper.CK, "Visual_CategoryLabel").attr(htmlSubSelectionHelper.QZ, 1);
                            var labelElementNode = labelUpdate.node();
                            labelElementNode && (formatSettings.wordWrap ? (0, textUtil.lM)(labelElementNode, width, height - translatedLabelY, void 0, !0, categoryLabelSetting.preserveWhitespace) : labelUpdate.call(axisHelper.oq, width, textMeasurementService.b.svgEllipsis)), 
                            labelElement.exit().remove();
                        } else this.labelContext.selectAll("text").remove();
                    } else {
                        var valueElement;
                        statusGraphicInfo ? (this.graphicsContext.selectAll("text").remove(), this.displayStatusGraphic(statusGraphicInfo, target, translateX, translateY, valueTextHeightInPx)) : (this.kpiImage.selectAll("div").remove(), 
                        (valueElement = this.doValueTransition(start, target, this.displayUnitSystemType, this.animationOptions, duration, forceUpdate, formatter, {
                            getDatum: function(value, formattedValue) {
                                return {
                                    displayName: columnDisplayName,
                                    value: formattedValue,
                                    unformattedValue: value
                                };
                            },
                            getValue: function(datum) {
                                return datum.unformattedValue;
                            }
                        })).classed("value", !0), this.addTooltip(valueElement), this.graphicsContext.call(tooltipUtils.Q, [ target ]));
                    }
                    if (this.interactivityEnabled) tooltipData = statusGraphicInfo ? this.kpiImage.selectAll("div").datum() : this.graphicsContext.selectAll("text").datum(), 
                    this.svg.attr("aria-label", (0, tooltipUtils.X)([ tooltipData ]));
                    this.value = target, this.dataPointObjects = dataPointObjects;
                } else void 0 !== start && this.clear();
            }, Card.prototype.displayStatusGraphic = function(statusGraphicInfo, target, translateX, translateY, labelTextSizeInPx) {
                this.graphicsContext.selectAll("text").remove();
                var kpiImageDiv = this.kpiImage.select("div");
                kpiImageDiv && !kpiImageDiv.empty() || (kpiImageDiv = this.kpiImage.append("div")), 
                kpiImageDiv.attr("class", [ "value", statusGraphicInfo.class ].join(" ")).style("position", "absolute").style("font-size", labelTextSizeInPx + "px");
                var imageWidth = kpiImageDiv.node().offsetWidth, imageHeight = kpiImageDiv.node().offsetHeight;
                kpiImageDiv.style("transform", (0, svgUtil.O7)(translateX - imageWidth / 2, this.getTranslateY(labelTextSizeInPx + translateY) - imageHeight)), 
                kpiImageDiv.datum({
                    displayName: this.metaDataColumn && this.metaDataColumn.displayName,
                    kpiValue: {
                        value: target,
                        metadata: this.metaDataColumn.kpi
                    }
                }), this.addTooltip(kpiImageDiv);
            }, Card.prototype.getDefaultFormatSettings = function(style) {
                var getColor = function(colorName) {
                    return colorHelper.v.getThemeColor(style, colorName);
                };
                return {
                    labelSettings: (0, dataLabelViewModel1.bT)({
                        show: !0,
                        labelColor: getColor(cardUtil.D.value.colorName),
                        fontSize: cardUtil.D.value.textSize,
                        fontFamily: cardUtil.D.value.fontFamily,
                        preserveWhitespace: !0,
                        style,
                        textClassName: "callout"
                    }),
                    categoryLabelSetting: (0, dataLabelViewModel1.bT)({
                        show: !0,
                        labelColor: getColor(cardUtil.D.label.colorName),
                        fontSize: cardUtil.D.label.textSize,
                        fontFamily: cardUtil.D.label.fontFamily,
                        preserveWhitespace: !0,
                        style,
                        textClassName: "largeLightLabel"
                    }),
                    wordWrap: !1
                };
            }, Card.prototype.getDataLabelSettingsOptionsWithWordWrap = function(enumeration, labelSettings, isNum) {
                return labelSettings.wordWrap = this.cardFormatSetting.wordWrap, {
                    enumeration,
                    dataLabelsSettings: labelSettings,
                    show: !0,
                    displayUnits: isNum,
                    precision: isNum,
                    fontSize: !0,
                    fontFamily: !0,
                    style: this.style,
                    preserveWhitespace: !0,
                    wordWrap: !0,
                    bold: !0,
                    italic: !0,
                    underline: !0
                };
            }, Card.prototype.getFormattingModel = function() {
                var _a, _this = this;
                return null !== (_a = this.cardFormatSetting) && void 0 !== _a || (this.cardFormatSetting = this.getDefaultFormatSettings(this.style)), 
                new build_control_util.Nq(function() {
                    return _this.getCalloutValueCard();
                }, function() {
                    return (0, dataLabelViewModel1.Zu)({
                        cardName: "Visual_CategoryLabel",
                        dataLabelSettings: _this.cardFormatSetting.categoryLabelSetting,
                        isShowCategory: !1,
                        localize: function(key) {
                            return _this.hostServices.getLocalizedString(key);
                        },
                        props: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card_capabilities.d.categoryLabels), {
                            color: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card_capabilities.d.categoryLabels.color), {
                                instanceKind: 3
                            })
                        }),
                        revertToDefaultProps: card_capabilities.d.categoryLabels,
                        showBackground: !1,
                        showValueColor: !0,
                        style: _this.style
                    });
                }).build();
            }, Card.prototype.getCalloutValueCard = function() {
                var _this = this, cardDataLabelProps = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card_capabilities.d.labels), {
                    precision: card_capabilities.d.labels.labelPrecision,
                    displayUnits: card_capabilities.d.labels.labelDisplayUnits,
                    wordWrap: card_capabilities.d.wordWrap.show
                });
                return (0, dataLabelViewModel1.XQ)({
                    cardBuilder: new build_control_util.CQ(new build_control_util.lg("labels"), "Visual_Gauge_CalloutValue", cardDataLabelProps, function(key) {
                        return _this.hostServices.getLocalizedString(key);
                    }),
                    dataLabelsProps: cardDataLabelProps,
                    featureSwitches: this.featureSwitches,
                    hostServices: this.hostServices,
                    options: this.getDataLabelSettingsOptionsWithWordWrap(void 0, this.cardFormatSetting.labelSettings, !0),
                    omitGroupDisplayNames: !0,
                    instanceKind: 3
                });
            }, Card.prototype.addTooltip = function(selection) {
                var _this = this, hostTooltipService = this.hostServices.tooltips();
                this.tooltipsEnabled && hostTooltipService && hostTooltipService.enabled() && this.tooltipService.addTooltip(selection, function(args) {
                    var data = args.data;
                    return data.kpiValue ? [ {
                        displayName: data.displayName,
                        kpiValue: data.kpiValue
                    } ] : [ {
                        displayName: data.displayName,
                        value: data.value
                    } ];
                }, function() {
                    return _this.getTooltipIdentity() && [ _this.getTooltipIdentity() ];
                });
            }, Card.prototype.getTooltipIdentity = function() {
                return this.metaDataColumn && selectionId.l0.createWithMeasure(this.metaDataColumn.queryName);
            }, Card.prototype.getSubSelectionStyles = function(subSelections) {
                var visualObject = (0, onObjectUtil.dF)(subSelections);
                if (visualObject) switch (visualObject.objectName) {
                  case "callout-value":
                    var labels = card_capabilities.d.labels;
                    return (0, onObjectUtil.xs)(this.hostServices, {
                        fontFamilyReference: labels.fontFamily,
                        fontSizeReference: labels.fontSize,
                        boldReference: labels.bold,
                        italicReference: labels.italic,
                        underlineReference: labels.underline,
                        fontColorReference: labels.color,
                        displayUnitsReference: labels.labelDisplayUnits,
                        precisionReference: labels.labelPrecision,
                        wordWrapReference: card_capabilities.d.wordWrap.show
                    });

                  case "category-labels":
                    var categoryLabels = card_capabilities.d.categoryLabels;
                    return (0, onObjectUtil.un)(this.hostServices, {
                        fontFamilyReference: categoryLabels.fontFamily,
                        fontSizeReference: categoryLabels.fontSize,
                        boldReference: categoryLabels.bold,
                        italicReference: categoryLabels.italic,
                        underlineReference: categoryLabels.underline,
                        fontColorReference: categoryLabels.color
                    });

                  default:
                    return;
                }
            }, Card.prototype.getSubSelectionShortcuts = function(subSelections) {
                var visualObject = (0, onObjectUtil.dF)(subSelections);
                if (visualObject) {
                    var calloutValueCardUid = "".concat("Visual", "-").concat("labels"), calloutValueGroupUid = "".concat("labels", "-").concat("values"), categoryLabelsCardUid = "".concat("Visual", "-").concat("categoryLabels"), categoryLabelsGroupUid = "".concat("categoryLabels", "-").concat("values");
                    switch (visualObject.objectName) {
                      case "callout-value":
                        return [ {
                            type: 0,
                            excludedResetFormattingIds: [ card_capabilities.d.categoryLabels.show ]
                        }, (0, tslib_es6.__assign)((0, tslib_es6.__assign)({
                            type: 2
                        }, card_capabilities.d.categoryLabels.show), {
                            enabledLabel: this.hostServices.getLocalizedString("Format_AddCategoryLabel")
                        }), {
                            type: 1,
                            destinationInfo: {
                                cardUid: calloutValueCardUid,
                                groupUid: calloutValueGroupUid
                            },
                            label: this.hostServices.getLocalizedString("Format_Callout_Value")
                        } ];

                      case "category-labels":
                        return [ {
                            type: 0
                        }, {
                            type: 1,
                            destinationInfo: {
                                cardUid: categoryLabelsCardUid,
                                groupUid: categoryLabelsGroupUid
                            },
                            label: this.hostServices.getLocalizedString("Format_Category_Label")
                        } ];

                      default:
                        return;
                    }
                }
            }, Card.cardClassName = "card", Card.Label = (0, CssConstants.CH)("label"), Card.Value = (0, 
            CssConstants.CH)("value"), Card.KPIImage = (0, CssConstants.CH)("caption"), Card.cardTextProperties = {
                fontSize: null,
                text: null,
                fontFamily: dataLabelViewModel1Consts.bL.family
            }, Card;
        }(__webpack_require__(68193).V);
        function createCard(options) {
            return new Card(options);
        }
    }
} ]);