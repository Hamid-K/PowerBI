"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "formula-bar-model" ], {
    48563: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            w: function() {
                return daxParserFunctionDataFromEngine;
            }
        });
        var _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17819);
        function daxParserFunctionDataFromEngine(daxFunctions) {
            return daxFunctions.map(function(f) {
                return {
                    name: (daxFunction = f).Name,
                    description: daxFunction.Description,
                    category: daxParserFunctionCategory(daxFunction.Category),
                    pushableToDQ: (value = daxFunction.PushableToDirectQuery, result = 0, 1 === value ? result = 1 : 2 === value ? result = 2 : 3 === value && (result = 3), 
                    result),
                    parameters: (parameters = daxFunction.Parameters, parameters ? parameters.map(function(p) {
                        return new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.Hw((parameter = p).Name, parameter.Optional, parameter.Repeatable, parameter.RepeatGroup, parameter.Skippable);
                        var parameter;
                    }) : []),
                    visualCalculationsInfo: daxFunction.VisualCalculationsInfo
                };
                var parameters, value, result, daxFunction;
            });
        }
        function daxParserFunctionCategory(category) {
            switch (category) {
              case 0:
                return 0;

              case 1:
                return 1;

              case 2:
                return 2;

              case 3:
                return 3;

              case 4:
                return 4;

              case 5:
                return 5;

              case 6:
                return 6;

              case 7:
                return 7;

              case 8:
                return 8;

              case 9:
                return 9;
            }
        }
    },
    64018: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            L: function() {
                return FormulaBarComponent;
            }
        });
        var tslib_es6 = __webpack_require__(81337), injection_tokens = __webpack_require__(15903), constants = __webpack_require__(81892), paddingLeft = "padding-left", paddingRight = "padding-right", paddingTop = "padding-top", paddingBottom = "padding-bottom", marginLeft = "margin-left", marginRight = "margin-right", marginTop = "margin-top", marginBottom = "margin-bottom", borderLeft = "border-left-width", borderRight = "border-right-width", borderTop = "border-top-width", borderBottom = "border-bottom-width";
        function getPadding(element, direction) {
            return 1 === direction ? parseInt(element.css(paddingLeft), 10) + parseInt(element.css(paddingRight), 10) : parseInt(element.css(paddingTop), 10) + parseInt(element.css(paddingBottom), 10);
        }
        function getMargin(element, direction) {
            return 1 === direction ? parseInt(element.css(marginLeft), 10) + parseInt(element.css(marginRight), 10) : parseInt(element.css(marginTop), 10) + parseInt(element.css(marginBottom), 10);
        }
        function getBorder(element, direction) {
            return 1 === direction ? parseInt(element.css(borderLeft), 10) + parseInt(element.css(borderRight), 10) : parseInt(element.css(borderTop), 10) + parseInt(element.css(borderBottom), 10);
        }
        function getMinWidth(element) {
            return parseInt(element.css("minWidth"), 10);
        }
        function getAllSpace(startElement, endAncestorElement, direction) {
            for (var result = getMargin(startElement, direction), htmlElement = $("html")[0], parentElement = startElement.parent(); parentElement.length > 0 && parentElement[0] !== htmlElement && parentElement[0] !== endAncestorElement[0]; ) result = result + getPadding(parentElement, direction) + getBorder(parentElement, direction) + getMargin(parentElement, direction), 
            parentElement = parentElement.parent();
            return parentElement[0] === endAncestorElement[0] ? result = result + getPadding(parentElement, direction) + getBorder(parentElement, direction) : 0;
        }
        var animations = __webpack_require__(26124), core = __webpack_require__(50423), assert = __webpack_require__(55863), dax_capabilities_service_interface = __webpack_require__(74249), debug = __webpack_require__(62458), monacoEditorUtility = __webpack_require__(2951), monaco_editor_host_types = __webpack_require__(25261), monaco_editor_host_component = __webpack_require__(1685), Subject = __webpack_require__(30794), BehaviorSubject = __webpack_require__(35510), from = __webpack_require__(82762), combineLatest = __webpack_require__(59017), distinctUntilChanged = __webpack_require__(77526), map = __webpack_require__(14172), takeUntil = __webpack_require__(83317), high_contrast_css_generation_service = __webpack_require__(64647), screen_reader_service = __webpack_require__(83309), formula_bar_service = __webpack_require__(15783), localization_service = __webpack_require__(65181), formula_bar_interaction_service = __webpack_require__(85270), common = __webpack_require__(77476), fesm2022_forms = __webpack_require__(17174), localize_directive = __webpack_require__(59968), pbi_tooltip_directive = __webpack_require__(36858), pbi_svg_use_symbol_component = __webpack_require__(45916), on_resize_directive = __webpack_require__(698), keyboard_shortcuts_directive = __webpack_require__(35756), tri_dropdown_component = __webpack_require__(20551), tri_dropdown_item_component = __webpack_require__(64716), tri_dropdown_item_menu_directive = __webpack_require__(85721), tri_svg_icon_component = __webpack_require__(74913), events = __webpack_require__(4715), displayNameGetter = __webpack_require__(21571), rx_component = __webpack_require__(73221), Telemetry = __webpack_require__(21617), pbi_menu_contracts = __webpack_require__(64560), pbi_overlay_positions = __webpack_require__(25512), take = __webpack_require__(48787), pbi_menu_service = __webpack_require__(5467), localize_pipe = __webpack_require__(85102);
        function TemplateButtonComponent_button_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r2 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 1), core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r2);
                    var ctx_r1 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r1.showTemplatesMenu($event));
                }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275element"](2, "tri-svg-icon", 2), 
                core["\u0275\u0275elementEnd"]();
            }
            2 & rf && core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](1, 1, "Visual_Calculation_Template_Button_Tooltip"));
        }
        var TemplateButtonComponent = function(_super) {
            function TemplateButtonComponent(elementRef, pbiMenuService, localizationService, telemetryService) {
                var _this = _super.call(this) || this;
                return _this.elementRef = elementRef, _this.pbiMenuService = pbiMenuService, _this.localizationService = localizationService, 
                _this.telemetryService = telemetryService, _this.selectedTemplate = new core.EventEmitter, 
                _this.showButton$ = new BehaviorSubject.X(!1), _this;
            }
            return (0, tslib_es6.__extends)(TemplateButtonComponent, _super), TemplateButtonComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("daxTemplates").pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(daxTemplates) {
                    _this.createTemplateMenu(daxTemplates);
                });
            }, TemplateButtonComponent.prototype.showTemplatesMenu = function(event) {
                var _this = this;
                event.preventDefault();
                var menu = this.templatingMenu;
                null != menu && 0 !== menu.items.length && this.pbiMenuService.open({
                    menu,
                    origin: this.elementRef.nativeElement,
                    flexibleConnectedPositions: [ (0, pbi_overlay_positions.Oq)(0, 0) ],
                    closeOnButtonClick: !0,
                    menuMode: pbi_menu_contracts.Kb.Compact
                }).onButtonClick$.pipe((0, take.q)(1)).subscribe(function(value) {
                    var template = value.data;
                    _this.selectedTemplate.emit(template), _this.telemetryService.logEvent(events.Zs, {
                        templateName: template.capabilities.name
                    });
                });
            }, TemplateButtonComponent.prototype.createTemplateMenu = function(templates) {
                var _this = this, items = _.map(templates, function(dax) {
                    var capabilities = dax.capabilities;
                    return {
                        type: pbi_menu_contracts.iB.Button,
                        id: capabilities.name,
                        text: (0, displayNameGetter.G)(capabilities.displayName, _this.localizationService),
                        tooltip: (0, displayNameGetter.G)(capabilities.description, _this.localizationService),
                        data: dax
                    };
                });
                this.templatingMenu = {
                    items
                }, this.showButton$.next(items.length > 0);
            }, TemplateButtonComponent.\u0275fac = function(t) {
                return new (t || TemplateButtonComponent)(core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](pbi_menu_service.o), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](Telemetry.y0));
            }, TemplateButtonComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: TemplateButtonComponent,
                selectors: [ [ "template-button" ] ],
                inputs: {
                    daxTemplates: "daxTemplates"
                },
                outputs: {
                    selectedTemplate: "selectedTemplate"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ "class", "templateButton", "tabindex", "0", 3, "pbiTooltip", "click", 4, "ngIf" ], [ "tabindex", "0", 1, "templateButton", 3, "pbiTooltip", "click" ], [ "tri-svg-icon-24", "", "name", "math_formula_20_regular", "sprite", "visual-calc-icons" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, TemplateButtonComponent_button_0_Template, 3, 3, "button", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.showButton$));
                },
                dependencies: [ common.NgIf, pbi_tooltip_directive.V, tri_svg_icon_component.M, common.AsyncPipe, localize_pipe.F ],
                styles: [ ".templateButton[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;width:24px;background-color:transparent}.templateButton[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{color:var(--colorNeutralForeground2)}.templateButton[_ngcontent-%COMP%]:hover{background:var(--colorNeutralBackground1Hover)}.templateButton[_ngcontent-%COMP%]:hover   tri-svg-icon[_ngcontent-%COMP%]{color:var(--colorNeutralForeground2Hover)}.templateButton[_ngcontent-%COMP%]:active   tri-svg-icon[_ngcontent-%COMP%]{color:var(--colorNeutralForeground2Pressed)}" ]
            }), TemplateButtonComponent;
        }(rx_component.w), _c0 = [ "monacoEditorHostContainer" ];
        function FormulaBarComponent_monaco_editor_host_6_Template(rf, ctx) {
            if (1 & rf) {
                var _r8 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "monaco-editor-host", 21), core["\u0275\u0275listener"]("initialized", function() {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r7 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r7.onMonacoEditorInitialized());
                })("tabFocusMode", function($event) {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.onTabFocusModeChanged($event));
                })("onContentChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r10 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r10.onContentChanged($event));
                })("onContentHeightChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r11 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r11.onContentHeightChanged($event));
                })("onFocus", function() {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r12 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r12.onEditorFocus());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var languageOptions_r6 = ctx.ngIf, ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("selection", ctx_r1.editorHost.selection)("isReadOnly", ctx_r1.isReadOnly)("formulaText", ctx_r1.editorHost.text)("languageOptions", languageOptions_r6)("hidden", !ctx_r1.isEditorEnabled);
            }
        }
        function FormulaBarComponent_button_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r14 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 22), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r13 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r13.toggleTabMovesFocus());
                }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275elementEnd"]();
            }
            2 & rf && core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](1, 1, "Tab_Moves_Focus_Toggle"));
        }
        function FormulaBarComponent_div_12_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 23), core["\u0275\u0275element"](1, "pbi-svg-use-symbol", 24)(2, "tri-svg-icon", 25)(3, "textarea", 26), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbiTooltip", ctx_r3.alertText)("ngModel", ctx_r3.alertText), 
                core["\u0275\u0275attribute"]("aria-label", ctx_r3.alertText);
            }
        }
        function FormulaBarComponent_tri_dropdown_trigger_17_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-trigger"), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]()), 
            2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 1, core["\u0275\u0275pipeBind1"](3, 3, ctx_r4.selectedEditModeOption$).displayName), " ");
            }
        }
        function FormulaBarComponent_tri_dropdown_item_19_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-item", 27), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r15 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r15), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 2, option_r15.displayName), " ");
            }
        }
        var formulaInteractableSelectors = [ ".formulaBarEditorContainer", ".formulaBarButtons", "ribbon [data-unique-id='clipboardGroupMlr'], ribbon [data-unique-id='clipboardGroupSlr'], .ms-Callout #FlyoutMenuId", "ribbon [data-automation-type='RibbonTab'][data-unique-id='home']" ], FormulaBarComponent = function() {
            function FormulaBarComponent(element, highContrastCssGenerationService, formulaBarService, localizationService, screenReaderService, formulaBarInteractionService, cdr, daxCapabilitiesService, formulaBarZoomService) {
                var _this = this;
                this.element = element, this.highContrastCssGenerationService = highContrastCssGenerationService, 
                this.formulaBarService = formulaBarService, this.localizationService = localizationService, 
                this.screenReaderService = screenReaderService, this.formulaBarInteractionService = formulaBarInteractionService, 
                this.cdr = cdr, this.daxCapabilitiesService = daxCapabilitiesService, this.formulaBarZoomService = formulaBarZoomService, 
                this.catchOutsideClickEventCallBack = function(event) {
                    return !1;
                }, this.implicitEndEditingOnBlur = !0, this.navMode = "Group", this.daxTemplates = [], 
                this.beginEdit = new core.EventEmitter, this.endEdit = new core.EventEmitter, this.templateSelected = new core.EventEmitter, 
                this.editorHost = {}, this.formulaBarDropdownConfigurations = [], this.destroy$ = new Subject.xQ, 
                this._dropdownOptions$ = new BehaviorSubject.X(void 0), this._dropdownVisible$ = new BehaviorSubject.X(!1), 
                this._selectedEditModeOption$ = new BehaviorSubject.X(void 0), this.onDocumentMouseDownCapture = function(mouseDownEvent) {
                    _this.lastCapturedMousedownEvent = mouseDownEvent, isInteractableWhileEditing(mouseDownEvent.target) || _this.formulaBarService.hasUnsavedChanges(_this.getCurrentEditorText()) && mouseDownEvent.stopImmediatePropagation();
                }, this.onDocumentClickCapture = function(clickEvent) {
                    var mousedownTarget = _this.lastCapturedMousedownEvent && _this.lastCapturedMousedownEvent.target;
                    _this.lastCapturedMousedownEvent = void 0;
                    var mousedownStartedInFormulaBar = !mousedownTarget || isInteractableWhileEditing(mousedownTarget), clickIsInsideFormulaBar = isInteractableWhileEditing(clickEvent.target);
                    mousedownStartedInFormulaBar || clickIsInsideFormulaBar || _this.catchOutsideClickEventCallBack(clickEvent) || (_this.formulaBarService.hasUnsavedChanges(_this.getCurrentEditorText()) && (clickEvent.stopPropagation(), 
                    clickEvent.preventDefault()), _this.onBlur());
                }, this.triDropdownOptions = {
                    panelClass: constants.Uu
                }, this.expandedState = 1, this.languageOptions$ = (0, from.D)(this.daxCapabilitiesService.getCapabilities());
            }
            return Object.defineProperty(FormulaBarComponent.prototype, "selectedEditModeOption$", {
                get: function() {
                    return this._selectedEditModeOption$;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(FormulaBarComponent.prototype, "editMode$", {
                get: function() {
                    return this._selectedEditModeOption$.pipe((0, distinctUntilChanged.x)(), (0, map.U)(function(option) {
                        return null == option ? void 0 : option.key;
                    }));
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.setEditMode = function(editMode) {
                var selectedIndex = this.formulaBarDropdownConfigurations.findIndex(function(config) {
                    return config.key === editMode;
                });
                (0, assert.hu)(selectedIndex > -1, "Invalid calculation edit mode"), this._selectedEditModeOption$.next(this.formulaBarDropdownConfigurations[selectedIndex]);
            }, Object.defineProperty(FormulaBarComponent.prototype, "editModeOptions$", {
                get: function() {
                    return this._dropdownOptions$.asObservable();
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.setEditModeOptions = function(editModeOptions) {
                this._dropdownOptions$.next(editModeOptions), this._selectedEditModeOption$.next(void 0);
            }, Object.defineProperty(FormulaBarComponent.prototype, "showEditModeSelector$", {
                get: function() {
                    return this._dropdownVisible$.asObservable();
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.showEditModeSelector = function(show) {
                this._dropdownVisible$.next(show);
            }, FormulaBarComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.initializeHighContrastRules(), this.isHidden = this.autoHide, this.setReadOnly(!0), 
                            (0, combineLatest.aj)([ this._dropdownOptions$, this._dropdownVisible$ ]).pipe((0, 
                            takeUntil.R)(this.destroy$)).subscribe(function(_a) {
                                var dropdownVisible = _a[1];
                                _this.formulaBarDropdownConfigurations = _a[0], _this.formulaDropdownWidth = dropdownVisible ? getMinWidth($(".dropdownContainer")) : 0, 
                                _this.recalculateOffset(), _this.onResize();
                            }), [ 4, this.formulaBarService.setUICulture() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.ngAfterViewInit = function() {
                var _this = this;
                this.formulaBarService.registerFormulaBarControl(this), this.formulaBarInteractionService.registerFormulaBarInteractionControl(this), 
                this.resizeObserver = new ResizeObserver(function() {
                    window.requestAnimationFrame(function() {
                        _this.onResize();
                    });
                }), this.resizeObserver.observe(this.element.nativeElement.closest(this.expandCollapseConfig.formulaBarParentClass));
            }, FormulaBarComponent.prototype.ngOnDestroy = function() {
                $(this.element.nativeElement).off(".formulaBarController"), $(this.monacoEditorHostContainer.nativeElement).off(".formulaBarController"), 
                this.destroy$.next(), this.destroy$.complete(), this.resizeObserver && (this.resizeObserver.unobserve(this.element.nativeElement.closest(this.expandCollapseConfig.formulaBarParentClass)), 
                this.resizeObserver.disconnect());
            }, FormulaBarComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarButtons", "{ background-color: @buttonBackgroundColor !important; border-color: @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarButtons", "{ background-color: @buttonBackgroundColor !important; border-color: @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarAlert, formula-bar .formulaBar .formulaBarAlert .messageAlert", "{ background-color: @backgroundColor !important; color: @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarAlert", "{ border: 1px solid @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarEditorContainer", "{ background-color: @backgroundColor !important; }");
            }, Object.defineProperty(FormulaBarComponent.prototype, "willCollapse", {
                get: function() {
                    return 0 === this.nextExpandCollapseState;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(FormulaBarComponent.prototype, "isEditorEnabled", {
                get: function() {
                    return !!this.lastCommittedFormulaText || this.isEditing;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(FormulaBarComponent.prototype, "formulaBarExpanderTooltip", {
                get: function() {
                    var _a, tooltipText = "Formula_Bar_ExpandToFull";
                    switch (this.nextExpandCollapseState) {
                      case 0:
                        tooltipText = "Formula_Bar_CollapseToSingleLine";
                        break;

                      case 1:
                        tooltipText = "Formula_Bar_ExpandToFit";
                        break;

                      case 2:
                        tooltipText = null !== (_a = this.expandCollapseConfig.fullyExpandedTooltip) && void 0 !== _a ? _a : "Formula_Bar_ExpandToFull";
                    }
                    return this.localizationService.get(tooltipText);
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.setReadOnly = function(value) {
                this.isReadOnly = value;
            }, FormulaBarComponent.prototype.onMonacoEditorInitialized = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var $element, componentCollapsedHeight, componentFullExpandHeight;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.monacoEditorInitialized = !0, $element = $(this.element.nativeElement), 
                            componentCollapsedHeight = parseInt($element.css("min-height"), 10), componentFullExpandHeight = parseInt($element.css("max-height"), 10), 
                            this.monacoEditorUtility = new monacoEditorUtility.j0(this.textEditorHost.textEditor), 
                            [ 4, this.textEditorHost.registerActions(this.getKeyboardActions()) ];

                          case 1:
                            return _a.sent(), this.textEditorHeightOffset = this.calculateTextEditorHeightOffset(), 
                            this.recalculateOffset(), this.textEditorFullExpandHeight = componentFullExpandHeight - this.textEditorHeightOffset, 
                            this.textEditorCollapsedHeight = componentCollapsedHeight - this.textEditorHeightOffset, 
                            this.targetEditorHeight = this.textEditorCollapsedHeight, this.onContentHeightChanged(this.textEditorHost.textEditor.getContentHeight()), 
                            this.onResize(), this.focusOnInitialized && this.focus(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.calculateTextEditorHeightOffset = function() {
                var $element = $(this.element.nativeElement);
                return getAllSpace($element.find("monaco-editor-host"), $element, 0);
            }, FormulaBarComponent.prototype.onTabFocusModeChanged = function(tabMovesFocus) {
                this.tabMovesFocus = tabMovesFocus;
            }, FormulaBarComponent.prototype.updateEditorExpandedHeight = function() {
                var _a, _b, alertHeight = this.alertText ? 20 : 0, formulaBarParentClass = this.expandCollapseConfig.formulaBarParentClass, expandScaleFactor = null !== (_a = this.expandCollapseConfig.expandScaleFactor) && void 0 !== _a ? _a : 1, offset = null !== (_b = this.expandCollapseConfig.expandOffet) && void 0 !== _b ? _b : -80, componentFullExpandHeight = expandScaleFactor * $(this.element.nativeElement).closest(formulaBarParentClass).height() + offset;
                this.textEditorFullExpandHeight = componentFullExpandHeight - this.textEditorHeightOffset - alertHeight;
            }, FormulaBarComponent.prototype.updateFormulaBarMaxHeight = function() {
                var alertHeight = this.alertText ? 20 : 0, maxHeight = 1e7;
                0 === this.expandedState ? maxHeight = this.textEditorCollapsedHeight + this.textEditorHeightOffset + alertHeight : 1 === this.expandedState && (maxHeight = this.targetEditorHeight + this.textEditorHeightOffset + alertHeight), 
                debug.fF.assertValue(maxHeight, "maxHeight"), $(this.element.nativeElement).css("max-height", maxHeight);
            }, FormulaBarComponent.prototype.show = function() {
                this.isHidden && (this.isHidden = !1, this.cdr.detectChanges());
            }, FormulaBarComponent.prototype.hide = function() {
                this.isHidden || (this.isHidden = !0);
            }, FormulaBarComponent.prototype.clear = function() {
                this.setCommittedFormulaBarText(""), this.autoHide && this.hide();
            }, FormulaBarComponent.prototype.setSelection = function(selection) {
                this.editorHost.selection = selection, this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.showAlertMessage = function(content) {
                content = content.replace(/\n/g, ""), this.alertText = content, this.screenReaderService.alert(this.localizationService.format("Formula_Bar_Warning_Aria", content)), 
                this.updateFormulaBarMaxHeight(), this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.toggleTabMovesFocus = function() {
                this.textEditorHost.toggleTabMovesFocus(), this.textEditorHost.focus();
            }, FormulaBarComponent.prototype.hideAlert = function() {
                this.alertText = void 0, this.updateFormulaBarMaxHeight(), this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.setCommittedFormulaBarText = function(value) {
                this.lastCommittedFormulaText = value, this.editorHost.text = value, this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.focus = function() {
                this.monacoEditorInitialized ? (this.textEditorHost.focus(), this.cdr.detectChanges()) : this.focusOnInitialized = !0;
            }, FormulaBarComponent.prototype.scrollTop = function() {
                this.monacoEditorInitialized && this.textEditorHost.scrollTop();
            }, FormulaBarComponent.prototype.copy = function() {
                this.textEditorHost.copy();
            }, FormulaBarComponent.prototype.cut = function() {
                this.textEditorHost.cut();
            }, FormulaBarComponent.prototype.paste = function(text) {
                this.textEditorHost.paste(text);
            }, FormulaBarComponent.prototype.resetModelTokens = function(value) {
                this.textEditorHost.resetModelTokens(value);
            }, FormulaBarComponent.prototype.isFormulaBarActive = function() {
                return this.isActive;
            }, FormulaBarComponent.prototype.onToggleExpandCollapse = function() {
                this.setExpandCollapseState(this.nextExpandCollapseState);
            }, FormulaBarComponent.prototype.setExpandCollapseState = function(desiredState) {
                switch (desiredState) {
                  case 0:
                    this.collapse();
                    break;

                  case 1:
                    this.fitToContent();
                    break;

                  case 2:
                    this.fullExpand();
                }
                this.calculateNextExpandCollapseState();
            }, FormulaBarComponent.prototype.calculateNextExpandCollapseState = function() {
                switch (this.expandedState) {
                  case 0:
                    this.nextExpandCollapseState = this.editorContentHeight <= this.textEditorCollapsedHeight ? 2 : 1;
                    break;

                  case 1:
                    this.nextExpandCollapseState = this.editorContentHeight >= this.textEditorFullExpandHeight ? 0 : this.editorContentHeight <= this.textEditorCollapsedHeight || this.isEditing ? 2 : 0;
                    break;

                  case 2:
                    this.nextExpandCollapseState = this.editorContentHeight <= this.textEditorCollapsedHeight ? 1 : 0;
                    break;

                  default:
                    debug.fF.assertNever(this.expandedState);
                }
            }, FormulaBarComponent.prototype.fullExpand = function() {
                this.expandedState = 2, this.updateEditorExpandedHeight(), this.layout(void 0, this.textEditorFullExpandHeight);
            }, FormulaBarComponent.prototype.fitToContent = function() {
                this.expandedState = 1, this.updateEditorExpandedHeight(), this.targetEditorHeight = Math.max(this.textEditorCollapsedHeight, Math.min(this.textEditorFullExpandHeight, this.editorContentHeight)), 
                this.layout(void 0, this.targetEditorHeight);
            }, FormulaBarComponent.prototype.collapse = function() {
                this.expandedState = 0, this.layout(void 0, this.textEditorCollapsedHeight);
            }, FormulaBarComponent.prototype.layout = function(width, height) {
                this.updateFormulaBarMaxHeight(), this.monacoEditorInitialized && this.textEditorHost.layout(width, height);
            }, FormulaBarComponent.prototype.recalculateOffset = function() {
                var _a, buttonsGroup = $(".formulaBarButtons"), $element = $(this.element.nativeElement), start = $element.find("monaco-editor-host");
                this.textEditorWidthOffset = getAllSpace(start, $element, 1) + getMinWidth(buttonsGroup) + getMargin(buttonsGroup, 1) + (null !== (_a = this.formulaDropdownWidth) && void 0 !== _a ? _a : 0);
            }, FormulaBarComponent.prototype.commitFormulaBarEdit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var newFormulaText;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.endFormulaEdit(), (newFormulaText = this.getCurrentEditorText()) === this.lastCommittedFormulaText ? [ 3, 2 ] : (this.lastCommittedFormulaText = newFormulaText, 
                            [ 4, this.formulaBarService.onSubmit(newFormulaText) ]);

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.formulaBarService.onSubmit(newFormulaText) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.onBlur = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.implicitEndEditingOnBlur ? this.endFormulaEdit() : (this.removeFocus(), 
                            this.removeCatchClickOutsideFormulaBar()), this.lastCommittedFormulaText = this.monacoEditorInitialized ? this.getCurrentEditorText() : "", 
                            [ 4, this.formulaBarService.onBlur(this.lastCommittedFormulaText) ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.removeFocus = function() {
                $(document.activeElement).blur(), $(document.body).focus();
            }, FormulaBarComponent.prototype.onContentChanged = function(changes) {
                var cursorInfo = this.monacoEditorUtility.getCursorPosition();
                this.formulaBarService.onContentChanged(this.monacoEditorUtility.getEditorText(), cursorInfo.position, cursorInfo.selectionStart, changes);
            }, FormulaBarComponent.prototype.onContentHeightChanged = function(contentHeight) {
                this.editorContentHeight = contentHeight + 2, (1 === this.expandedState || 0 === this.expandedState && this.isEditing) && this.fitToContent(), 
                this.calculateNextExpandCollapseState();
            }, FormulaBarComponent.prototype.submit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.commitFormulaBarEdit() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.cancel = function() {
                this.endFormulaEdit(), this.formulaBarService.onCancel(this.lastCommittedFormulaText), 
                this.autoHide && this.hide();
            }, FormulaBarComponent.prototype.onEditorFocus = function() {
                this.isEditorEnabled && (this.isReadOnly || this.isEditing ? this.implicitEndEditingOnBlur || this.catchClickOutsideFormulaBar() : this.beginFormulaEdit(), 
                this.formulaBarService.onEditorFocus());
            }, FormulaBarComponent.prototype.catchClickOutsideFormulaBar = function() {
                document.body.addEventListener("mousedown", this.onDocumentMouseDownCapture, !0), 
                document.body.addEventListener("click", this.onDocumentClickCapture, !0), document.body.addEventListener("contextmenu", this.onDocumentClickCapture, !0);
            }, FormulaBarComponent.prototype.removeCatchClickOutsideFormulaBar = function() {
                document.body.removeEventListener("mousedown", this.onDocumentMouseDownCapture, !0), 
                document.body.removeEventListener("click", this.onDocumentClickCapture, !0), document.body.removeEventListener("contextmenu", this.onDocumentClickCapture, !0);
            }, FormulaBarComponent.prototype.endFormulaEdit = function() {
                this.isEditing = !1, this.removeFocus(), this.removeCatchClickOutsideFormulaBar(), 
                this.endEdit.emit();
            }, FormulaBarComponent.prototype.beginFormulaEdit = function() {
                this.isEditing = !0, this.catchClickOutsideFormulaBar(), this.beginEdit.emit();
            }, FormulaBarComponent.prototype.onResize = function() {
                var _a, _b;
                if (this.monacoEditorInitialized) {
                    var height;
                    2 === this.expandedState ? (this.updateEditorExpandedHeight(), height = this.textEditorFullExpandHeight) : 1 === this.expandedState && (this.updateEditorExpandedHeight(), 
                    height = Math.min(this.textEditorFullExpandHeight, this.targetEditorHeight));
                    var topElementWidth = this.element.nativeElement.getBoundingClientRect().width || 1e3, zoomLevel = null !== (_b = null === (_a = this.formulaBarZoomService) || void 0 === _a ? void 0 : _a.getZoomLevel()) && void 0 !== _b ? _b : 1;
                    this.layout(topElementWidth / zoomLevel - this.textEditorWidthOffset, height);
                }
            }, FormulaBarComponent.prototype.selectTemplate = function(template) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.formulaBarService.onTemplateSelection(template) ];

                          case 1:
                            return _a.sent(), this.templateSelected.emit(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.insertTextAtCurrentCursor = function(text) {
                this.textEditorHost.insertTextAtCurrentCursor(text);
            }, FormulaBarComponent.prototype.getCurrentEditorText = function() {
                return this.textEditorHost.getText();
            }, FormulaBarComponent.prototype.getHighlightedText = function() {
                return this.textEditorHost.getHighlightedText();
            }, FormulaBarComponent.prototype.getKeyboardActions = function() {
                var _this = this;
                return [ {
                    id: "formulaBar.find",
                    label: "Find",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlF] ],
                    run: _.noop
                }, {
                    id: "formulaBar.findNext",
                    label: "Find next",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.F3] ],
                    run: _.noop
                }, {
                    id: "formulaBar.findPrevious",
                    label: "Find previous",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlF3] ],
                    run: _.noop
                }, {
                    id: "formulaBar.replace",
                    label: "Replace",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlH] ],
                    run: _.noop
                }, {
                    id: "formulaBar.errorNavigator",
                    label: "Error navigator",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.F8] ],
                    run: _.noop
                }, {
                    id: "formulaBar.escape",
                    label: "Escape",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.Escape] ],
                    run: function() {
                        var selections = _this.textEditorHost.textEditor.getSelections();
                        selections.length <= 1 ? _this.cancel() : _this.textEditorHost.textEditor.setSelection(selections[0]);
                    },
                    keybindingContext: "!".concat(monacoEditorUtility.B6, "&&!").concat(monacoEditorUtility.HW, "&&!").concat(monacoEditorUtility.s1)
                }, {
                    id: "formulaBar.submit",
                    label: "Submit",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlEnter] ],
                    run: function() {
                        _this.submit();
                    }
                }, {
                    id: "formulaBar.enter",
                    label: "Enter",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.Enter] ],
                    run: function() {
                        _this.submit();
                    },
                    keybindingContext: "!".concat(monacoEditorUtility.HW)
                }, {
                    id: "formulaBar.toggleExpandCollapse",
                    label: "Toggle expand collapse",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlJ] ],
                    run: function() {
                        _this.onToggleExpandCollapse();
                    }
                } ];
            }, FormulaBarComponent.\u0275fac = function(t) {
                return new (t || FormulaBarComponent)(core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](formula_bar_service.B), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](screen_reader_service.g), core["\u0275\u0275directiveInject"](formula_bar_interaction_service.l), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](dax_capabilities_service_interface.r), core["\u0275\u0275directiveInject"](injection_tokens.$d, 8));
            }, FormulaBarComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormulaBarComponent,
                selectors: [ [ "formula-bar" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](_c0, 7, core.ElementRef), core["\u0275\u0275viewQuery"](monaco_editor_host_component.C, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.monacoEditorHostContainer = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.textEditorHost = _t.first);
                    }
                },
                hostVars: 1,
                hostBindings: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275listener"]("desktopUIResizeFormulaBar", function() {
                        return ctx.onResize();
                    }), 2 & rf && core["\u0275\u0275hostProperty"]("hidden", ctx.isHidden);
                },
                inputs: {
                    autoHide: "autoHide",
                    isActive: "isActive",
                    catchOutsideClickEventCallBack: "catchOutsideClickEventCallBack",
                    expandCollapseConfig: "expandCollapseConfig",
                    implicitEndEditingOnBlur: "implicitEndEditingOnBlur",
                    navMode: "navMode",
                    shouldAlwaysEnableCancelButton: "shouldAlwaysEnableCancelButton",
                    daxTemplates: "daxTemplates"
                },
                outputs: {
                    beginEdit: "beginEdit",
                    endEdit: "endEdit",
                    templateSelected: "templateSelected"
                },
                decls: 29,
                vars: 42,
                consts: [ [ "keyboard-shortcuts", "ctrl-F6", "focus-priority", "11", 1, "formulaBar", 3, "hidden", "on-resize" ], [ 1, "formulaBarEditorContainer" ], [ 1, "formulaBarEditor" ], [ "tabindex", "0", 1, "formulaBarEditorMain", 3, "keydown.enter" ], [ "monacoEditorHostContainer", "" ], [ "mode", "dax", "theme", "dax", 3, "selection", "isReadOnly", "formulaText", "languageOptions", "hidden", "initialized", "tabFocusMode", "onContentChanged", "onContentHeightChanged", "onFocus", 4, "ngIf" ], [ "data-unique-id", "formula-bar-chevron", 1, "formulaBarExpander", 3, "disabled", "pbiTooltip", "click" ], [ "tri-svg-icon-16", "", "name", "chevron_down_16_regular" ], [ 1, "accessibililtyMessages" ], [ "class", "message", "localize", "Tab_Moves_Focus", 3, "pbiTooltip", "click", 4, "ngIf" ], [ "class", "formulaBarAlert", 4, "ngIf" ], [ 1, "formulaBarDropdown" ], [ 1, "dropdownContainer", 3, "compact", "options", "isDisabled", "value", "valueChange" ], [ 4, "ngIf" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 1, "formulaBarButtons" ], [ "data-unique-id", "formula-bar-cancel", 1, "formulaBarCancel", 3, "pbiTooltip", "disabled", "click" ], [ "tri-svg-icon-24", "", "name", "dismiss_20_regular" ], [ "data-unique-id", "formula-bar-commit", 1, "formulaBarCommit", 3, "pbiTooltip", "disabled", "click" ], [ "tri-svg-icon-24", "", "name", "checkmark_20_regular" ], [ "data-unique-id", "formula-bar-template-button", 3, "daxTemplates", "selectedTemplate" ], [ "mode", "dax", "theme", "dax", 3, "selection", "isReadOnly", "formulaText", "languageOptions", "hidden", "initialized", "tabFocusMode", "onContentChanged", "onContentHeightChanged", "onFocus" ], [ "localize", "Tab_Moves_Focus", 1, "message", 3, "pbiTooltip", "click" ], [ 1, "formulaBarAlert" ], [ "symbolId", "alert", "sheet", "filterPaneIcons", 1, "imageAlert" ], [ "tri-svg-icon-16", "", "name", "dismiss_circle_16_filled" ], [ "data-unique-id", "formula-bar-alert", "row", "1", "cols", "1", "readonly", "", "pbiTooltipPosition", "below", 1, "messageAlert", 3, "pbiTooltip", "ngModel" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275listener"]("on-resize", function() {
                        return ctx.onResize();
                    }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275elementStart"](2, "div", 1)(3, "div", 2)(4, "div", 3, 4), 
                    core["\u0275\u0275listener"]("keydown.enter", function() {
                        return ctx.focus();
                    }), core["\u0275\u0275template"](6, FormulaBarComponent_monaco_editor_host_6_Template, 1, 5, "monaco-editor-host", 5), 
                    core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](8, "button", 6), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.onToggleExpandCollapse();
                    }), core["\u0275\u0275element"](9, "tri-svg-icon", 7), core["\u0275\u0275elementEnd"]()(), 
                    core["\u0275\u0275elementStart"](10, "div", 8), core["\u0275\u0275template"](11, FormulaBarComponent_button_11_Template, 2, 3, "button", 9), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](12, FormulaBarComponent_div_12_Template, 4, 3, "div", 10), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](13, "div", 11), 
                    core["\u0275\u0275pipe"](14, "async"), core["\u0275\u0275elementStart"](15, "tri-dropdown", 12), 
                    core["\u0275\u0275listener"]("valueChange", function($event) {
                        return ctx.setEditMode($event.key);
                    }), core["\u0275\u0275pipe"](16, "async"), core["\u0275\u0275template"](17, FormulaBarComponent_tri_dropdown_trigger_17_Template, 4, 5, "tri-dropdown-trigger", 13), 
                    core["\u0275\u0275pipe"](18, "async"), core["\u0275\u0275template"](19, FormulaBarComponent_tri_dropdown_item_19_Template, 3, 4, "tri-dropdown-item", 14), 
                    core["\u0275\u0275pipe"](20, "async"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](21, "div", 15)(22, "button", 16), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.cancel();
                    }), core["\u0275\u0275pipe"](23, "localize"), core["\u0275\u0275element"](24, "tri-svg-icon", 17), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](25, "button", 18), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.submit();
                    }), core["\u0275\u0275pipe"](26, "localize"), core["\u0275\u0275element"](27, "tri-svg-icon", 19), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](28, "template-button", 20), 
                    core["\u0275\u0275listener"]("selectedTemplate", function($event) {
                        return ctx.selectTemplate($event);
                    }), core["\u0275\u0275elementEnd"]()()()), 2 & rf && (core["\u0275\u0275classProp"]("readonly", ctx.isReadOnly), 
                    core["\u0275\u0275property"]("hidden", ctx.isHidden || !ctx.monacoEditorInitialized), 
                    core["\u0275\u0275attribute"]("focus-nav-mode", ctx.navMode)("aria-label", core["\u0275\u0275pipeBind1"](1, 26, "Formula_Bar")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("hasAlert", ctx.alertText), 
                    core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](7, 28, ctx.languageOptions$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("disabled", !ctx.monacoEditorInitialized || !ctx.isEditorEnabled)("pbiTooltip", ctx.formulaBarExpanderTooltip), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("@chevron", ctx.nextExpandCollapseState), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.tabMovesFocus && !ctx.isReadOnly && ctx.isEditorEnabled), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !!ctx.alertText), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("hideFormulaBarDropdown", !core["\u0275\u0275pipeBind1"](14, 30, ctx.showEditModeSelector$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("compact", !0)("options", ctx.triDropdownOptions)("isDisabled", ctx.isReadOnly)("value", core["\u0275\u0275pipeBind1"](16, 32, ctx.selectedEditModeOption$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](18, 34, ctx.selectedEditModeOption$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](20, 36, ctx.editModeOptions$)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](23, 38, "Cancel_ButtonText"))("disabled", ctx.shouldAlwaysEnableCancelButton ? !ctx.monacoEditorInitialized : !ctx.isEditing || !ctx.monacoEditorInitialized), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](26, 40, "Commit_ButtonText"))("disabled", !ctx.isEditing || !ctx.monacoEditorInitialized), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("daxTemplates", ctx.daxTemplates));
                },
                dependencies: [ common.NgForOf, common.NgIf, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, localize_directive.X, monaco_editor_host_component.C, pbi_tooltip_directive.V, pbi_svg_use_symbol_component.R, on_resize_directive.O, keyboard_shortcuts_directive.q, tri_dropdown_component.M3, tri_dropdown_item_component.l, tri_dropdown_item_menu_directive.q, tri_dropdown_component.ii, tri_svg_icon_component.M, TemplateButtonComponent, common.AsyncPipe, localize_pipe.F ],
                styles: [ '[_nghost-%COMP%]{--read-only-button-foreground: var(--fluent-theme-neutral-secondary-alt-color);--read-only-background: var(--fluent-theme-neutral-tertiary-color);--read-only-border-color: var(--fluent-theme-neutral-tertiary-color);--button-background: transparent;--button-foreground: var(--gray-180);--editor-container-border-color: var(--fluent-theme-neutral-tertia-color);--editor-container-background: var(--fluent-theme-white-color);--expander-foreground-hover: var(--fluent-theme-black-color);--accessibility-message-background: var(--fluent-theme-neutral-primary-color);--accessibility-message-foreground: var(--fluent-theme-white-color);--accessibility-message-background-focus: var(--fluent-theme-neutral-tertiary-alt-color);--alert-foreground: var(--fluent-theme-black-color);--alert-background: var(--fluent-theme-warning-background-color);--alert-border: none;--alert-icon: var(--fluent-theme-error-fill-color);--submit-cancel-buttons-border: var(--fluent-theme-neutral-tertiary-alt-color);--submit-cancel-buttons-background: var(--fluent-theme-white-color);--cancel-button-foreground: var(--fluent-theme-error-dark-color);--commit-button-foreground: var(--fluent-theme-success-icon-color);--gray-host-background: var(--gray-20);--gray-border-color: var(--gray-60);--gray-read-only-background: var(--gray-20);--gray-read-only-border: var(--gray-40);position:relative;padding:4px;min-height:36px;max-height:36px;width:100%;box-sizing:border-box;display:flex;flex-direction:column}[data-legacy-theming=false]   [_nghost-%COMP%]{--read-only-button-foreground: var(--colorNeutralForegroundDisabled);--read-only-background: var(--colorNeutralBackgroundDisabled);--read-only-border-color: var(--colorNeutralStrokeDisabled);--button-background: transparent;--button-foreground: var(--colorNeutralForeground1);--editor-container-border-color: var(--colorNeutralStroke1);--editor-container-background: var(--colorNeutralBackground1);--expander-foreground-hover: var(--colorNeutralStrokeFocus2);--accessibility-message-background: var(--colorCompoundBrandBackground);--accessibility-message-foreground: var(--colorNeutralForegroundOnBrand);--accessibility-message-background-focus: var(--colorCompoundBrandBackgroundHover);--alert-foreground: var(--colorNeutralForeground1);--alert-background: var(--colorDangerBackground1);--alert-border: 1px solid var(--colorDangerBorder1);--alert-icon: var(--fluent-theme-error-fill-color);--submit-cancel-buttons-border: var(--colorNeutralStroke1);--submit-cancel-buttons-background: var(--colorNeutralBackground1);--cancel-button-foreground: var(--colorDangerForeground1);--commit-button-foreground: var(--colorSuccessForeground1);--gray-host-background: var(--colorNeutralBackground3);--gray-border-color: var(--colorNeutralStroke2);--gray-read-only-background: var(--colorNeutralBackground3);--gray-read-only-border: var(--colorNeutralStrokeDisabled)}[hidden][_nghost-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]{flex-grow:1;cursor:default;box-sizing:border-box;display:flex}[_nghost-%COMP%]   .formulaBar[hidden][_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{color:var(--read-only-button-foreground)}[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], [_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{border-color:var(--read-only-border-color);background-color:var(--read-only-background)}[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .monaco-editor[_ngcontent-%COMP%]   .cursor[_ngcontent-%COMP%]{background-color:var(--read-only-background)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:var(--button-background);color:var(--button-foreground)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:currentcolor}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   [disabled][_ngcontent-%COMP%]{opacity:.4}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{order:1;flex-grow:1;height:100%;display:flex;flex-direction:column;margin-left:3px;min-height:28px;box-sizing:border-box;border:1px solid var(--editor-container-border-color);background-color:var(--editor-container-background)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer.hasAlert[_ngcontent-%COMP%]{min-height:48px}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]{flex-grow:1;box-sizing:border-box;padding-top:2px;padding-right:21px;display:flex;flex-direction:column;background-color:transparent}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarEditorMain[_ngcontent-%COMP%]{flex-grow:1;box-sizing:border-box;background-color:transparent;-webkit-user-select:none}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarEditorMain[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]{position:absolute;top:8px;right:8px;width:16px;height:16px;background-color:transparent}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:hover:not(:disabled), [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus:not(:disabled){color:var(--expander-foreground-hover)}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus, html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander *:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:0px}html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus, html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus     html[data-focus-source=mouse] -shadowcsshost .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander:focus,   html[data-focus-source=mouse] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander *:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander *:focus{outline:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]{display:flex}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{margin-left:2px;padding:2px;background-color:var(--accessibility-message-background);color:var(--accessibility-message-foreground);font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:hover, [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:focus{background-color:var(--accessibility-message-background-focus)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]{width:100%;height:20px;box-sizing:border-box;color:var(--alert-foreground);background-color:var(--alert-background);outline:var(--alert-border);display:flex;padding-left:2px;align-items:center}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--alert-icon)}[data-legacy-theming=true]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   .imageAlert[_ngcontent-%COMP%]{width:16px;height:16px}[data-legacy-theming=false]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   .imageAlert[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   .messageAlert[_ngcontent-%COMP%]{cursor:default;flex-grow:1;height:100%;box-sizing:border-box;border:none;padding-top:2px;padding-left:4px;background-color:var(--alert-background);font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:11px;resize:none;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown[_ngcontent-%COMP%]{margin-right:3px;font-size:14px}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown.hideFormulaBarDropdown[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown[_ngcontent-%COMP%]   .dropdownContainer[_ngcontent-%COMP%]{min-width:100px;height:28px;box-sizing:border-box}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown[_ngcontent-%COMP%]   .dropdownContainer[_ngcontent-%COMP%]     button{min-width:inherit;height:inherit}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]{min-width:76px;flex:0;height:28px;box-sizing:border-box;border:1px solid var(--submit-cancel-buttons-border);display:flex;align-items:center;justify-content:space-evenly;background-color:var(--submit-cancel-buttons-background)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:24px;height:24px;display:flex;align-content:center;justify-content:center}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:disabled   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--colorNeutralForegroundDisabled)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover:not(:disabled), [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus:not(:disabled){background:var(--colorNeutralBackground1Hover)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--cancel-button-foreground)}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]:focus, html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel *:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:0px}html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]:focus, html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus     html[data-focus-source=mouse] -shadowcsshost .formulaBar .formulaBarButtons .formulaBarCancel:focus,   html[data-focus-source=mouse] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel *:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel *:focus{outline:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--commit-button-foreground)}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]:focus, html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit *:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:0px}html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]:focus, html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus     html[data-focus-source=mouse] -shadowcsshost .formulaBar .formulaBarButtons .formulaBarCommit:focus,   html[data-focus-source=mouse] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit *:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit *:focus{outline:none}.gray-theme   [_nghost-%COMP%]{background-color:var(--gray-host-background)}.gray-theme[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{border-radius:2px;border-color:var(--gray-border-color)}.gray-theme[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{background-color:var(--gray-read-only-background);border-color:var(--gray-read-only-border)}@media print{formula-bar[_ngcontent-%COMP%]   .formulaBar[_ngcontent-%COMP%]{display:none}}' ],
                data: {
                    animation: [ (0, animations.X$)("chevron", [ (0, animations.SB)("".concat(0), (0, 
                    animations.oB)({
                        transform: "rotate(180deg)"
                    })), (0, animations.SB)("".concat(2), (0, animations.oB)({
                        transform: "rotate(0deg)"
                    })), (0, animations.SB)("".concat(1), (0, animations.oB)({
                        transform: "rotate(0deg)"
                    })), (0, animations.eR)("".concat(1, " => ").concat(2, ", ").concat(2, " => ").concat(1), [ (0, 
                    animations.jt)(150, (0, animations.F4)([ (0, animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 0
                    }), (0, animations.oB)({
                        transform: "rotate(45deg)",
                        offset: .5
                    }), (0, animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 1
                    }) ])) ]), (0, animations.eR)("* => ".concat(0), [ (0, animations.jt)(150, (0, animations.F4)([ (0, 
                    animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 0
                    }), (0, animations.oB)({
                        transform: "rotate(180deg)",
                        offset: 1
                    }) ])) ]), (0, animations.eR)("".concat(0, " => *"), [ (0, animations.jt)(150, (0, 
                    animations.F4)([ (0, animations.oB)({
                        transform: "rotate(180deg)",
                        offset: 0
                    }), (0, animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 1
                    }) ])) ]) ]) ]
                }
            }), FormulaBarComponent;
        }();
        function isInteractableWhileEditing(eventTarget) {
            return _.some(formulaInteractableSelectors, function(selector) {
                var target = $(eventTarget), searching = $(selector);
                return searching.is(target) || !!searching.find(target).length;
            });
        }
    },
    97415: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            FormulaBarModelModule: function() {
                return FormulaBarModelModule;
            }
        });
        var formula_bar_ui_module = __webpack_require__(17848), formula_bar_service = __webpack_require__(15783), intellisense_host_service = __webpack_require__(34103), intellisense_service = __webpack_require__(72080), tslib_es6 = __webpack_require__(81337), injection_tokens = __webpack_require__(15903), formula_bar_base_behaviour_service = __webpack_require__(98361), events = __webpack_require__(4715), namedModelObjectUtils = __webpack_require__(70863), Calculations = function() {
            function Calculations() {}
            return Calculations.areSameItem = function(schemaItem1, schemaItem2) {
                return _.isNil(schemaItem1) && _.isNil(schemaItem2) || !!(schemaItem1 && schemaItem2 && schemaItem1.urn === schemaItem2.urn && namedModelObjectUtils.pb(schemaItem1.schemaName, schemaItem2.schemaName));
            }, Calculations.getEntityName = function(item) {
                return namedModelObjectUtils.wb(item) ? item.name : namedModelObjectUtils.t3(item) || namedModelObjectUtils.kb(item) ? item.table.name : namedModelObjectUtils.RF(item) ? item.calculationGroup.table.name : void 0;
            }, Calculations.getPropertyName = function(item) {
                return namedModelObjectUtils.wb(item) ? void 0 : item.name;
            }, Calculations.getEditableSchemaItem = function(item, model) {
                if (model) {
                    if (namedModelObjectUtils.wb(item)) return this.getTableCalculationItem(model, item.name);
                    if (namedModelObjectUtils.kb(item)) return this.getMeasureCalculationItem(model, item.schemaName, item.table.name, item.name);
                    if (namedModelObjectUtils.t3(item)) return this.getColumnCalculationItem(model, item.schemaName, item.table.name, item.name);
                    if (namedModelObjectUtils.ez(item)) {
                        var foundObject = namedModelObjectUtils.xu(model, item.schemaName, item.hierarchy.table.name, item.hierarchy.name, item.name), column = foundObject && foundObject.column;
                        return column && this.getColumnCalculationItem(model, column.schemaName, column.table.name, column.name);
                    }
                    return namedModelObjectUtils.RF(item) ? this.getCalculationItem(model, item.schemaName, item.calculationGroup.table.name, item.name) : void 0;
                }
            }, Calculations.getTableCalculationItem = function(model, tableName) {
                var item = namedModelObjectUtils.AG(model, tableName);
                return item && item.canEdit && item.isCalculatedTable ? item : void 0;
            }, Calculations.getColumnCalculationItem = function(model, schemaName, tableName, columnName) {
                var item = namedModelObjectUtils.Gz(model, schemaName, tableName, columnName);
                if (item) return item.canEdit && item.isCalculated && !item.isGrouping ? item : item.table.canEdit && item.table.isCalculatedTable ? item.table : void 0;
            }, Calculations.getMeasureCalculationItem = function(model, schemaName, tableName, measureName) {
                var item = namedModelObjectUtils.yo(model, schemaName, tableName, measureName);
                return item && item.canEditExpression ? item : void 0;
            }, Calculations.getCalculationItem = function(model, schemaName, tableName, itemName) {
                return namedModelObjectUtils.om(model, schemaName, tableName, itemName);
            }, Calculations;
        }(), constants = __webpack_require__(81892), token = __webpack_require__(68082), modelAuthoringService = __webpack_require__(53439), standardizedEventsService = __webpack_require__(16601), ui_blocking_service_token = __webpack_require__(73027), debug = __webpack_require__(62458), modeling_selection_service = __webpack_require__(9738), model_service = __webpack_require__(34145), data_model_utils = __webpack_require__(95867), Telemetry = __webpack_require__(21617), Subject = __webpack_require__(30794), merge = __webpack_require__(63057), map = __webpack_require__(14172), takeUntil = __webpack_require__(83317), concatMap = __webpack_require__(24874), catchError = __webpack_require__(59822), core = __webpack_require__(50423), localization_service = __webpack_require__(65181), calculation_service = __webpack_require__(10233), delete_model_item_service = __webpack_require__(33565), feature_switch_service = __webpack_require__(9380), FormulaBarModelBehaviorService = function(_super) {
            function FormulaBarModelBehaviorService(modelingSelectionService, modelService, uiBlockingService, dataModelService, modelAuthoring, standardizedEventsService, localizationService, intellisenseService, calculationService, telemetryService, deleteModelingService, featureSwitchService) {
                var _this = _super.call(this, uiBlockingService, localizationService, intellisenseService) || this;
                return _this.modelingSelectionService = modelingSelectionService, _this.modelService = modelService, 
                _this.dataModelService = dataModelService, _this.modelAuthoring = modelAuthoring, 
                _this.standardizedEventsService = standardizedEventsService, _this.calculationService = calculationService, 
                _this.telemetryService = telemetryService, _this.deleteModelingService = deleteModelingService, 
                _this.featureSwitchService = featureSwitchService, _this.destroy$ = new Subject.xQ, 
                _this.isNewCalcItem = !1, _this.onModelOrSelectionChanged = function(_a) {
                    var model = _a[0], selection = _a[1], calculationEditMode = _a[2];
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var newItem;
                        return (0, tslib_es6.__generator)(this, function(_b) {
                            switch (_b.label) {
                              case 0:
                                return model ? [ 4, this.onModelChanged(model) ] : [ 3, 2 ];

                              case 1:
                                return _b.sent(), [ 3, 6 ];

                              case 2:
                                return calculationEditMode ? [ 4, this.onCalculationEditModeChanged(calculationEditMode) ] : [ 3, 4 ];

                              case 3:
                                return _b.sent(), [ 3, 6 ];

                              case 4:
                                return selection ? (newItem = _.isEmpty(selection) || 1 !== selection.length ? void 0 : selection[0], 
                                Calculations.areSameItem(this.calculation, newItem) ? [ 3, 6 ] : [ 4, this.onActiveItemChanged(newItem) ]) : [ 3, 6 ];

                              case 5:
                                _b.sent(), _b.label = 6;

                              case 6:
                                return [ 2 ];
                            }
                        });
                    });
                }, _this.onActiveItemChanged = function(item) {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var editableItem, e_1;
                        return (0, tslib_es6.__generator)(this, function(_b) {
                            switch (_b.label) {
                              case 0:
                                if (!this.formulaBarControl || !this.formulaBarControl.isFormulaBarActive()) return [ 2, this.updateDynamicallyFormattedMeasureStatus() ];
                                if (!item) return [ 3, 14 ];
                                editableItem = Calculations.getEditableSchemaItem(item, this.modelService.model), 
                                _b.label = 1;

                              case 1:
                                return _b.trys.push([ 1, 12, , 13 ]), editableItem ? (editableItem.calculationEditMode = 1, 
                                [ 4, this.showCalculation(editableItem) ]) : [ 3, 9 ];

                              case 2:
                                switch (_b.sent(), editableItem.modelObjectType) {
                                  case "Measure":
                                    return [ 3, 3 ];

                                  case "CalculationItem":
                                    return [ 3, 5 ];
                                }
                                return [ 3, 7 ];

                              case 3:
                                return this.formulaBarControl.setEditModeOptions(constants.ZI), this.formulaBarControl.setEditMode(1), 
                                [ 4, this.updateDynamicallyFormattedMeasureStatus() ];

                              case 4:
                                return _b.sent(), [ 3, 8 ];

                              case 5:
                                return this.formulaBarControl.setEditModeOptions(constants.dO), this.formulaBarControl.setEditMode(1), 
                                [ 4, this.updateDynamicallyFormattedCalculationItemStatus() ];

                              case 6:
                                return _b.sent(), [ 3, 8 ];

                              case 7:
                                this.formulaBarControl.showEditModeSelector(!1), this.formulaBarControl.setEditModeOptions([]), 
                                _b.label = 8;

                              case 8:
                                return [ 3, 11 ];

                              case 9:
                                return [ 4, this.setCalculation(void 0) ];

                              case 10:
                                _b.sent(), this.formulaBarControl.setEditModeOptions([]), _b.label = 11;

                              case 11:
                                return [ 3, 13 ];

                              case 12:
                                if ((e_1 = _b.sent()).name !== CalculationChangedDuringShowFlowError.name) throw e_1;
                                return [ 3, 13 ];

                              case 13:
                                return [ 3, 16 ];

                              case 14:
                                return [ 4, this.setCalculation(void 0) ];

                              case 15:
                                _b.sent(), _b.label = 16;

                              case 16:
                                return [ 2 ];
                            }
                        });
                    });
                }, _this.onCalculationEditModeChanged = function(calculationEditMode) {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return this.calculation && calculationEditMode && calculationEditMode !== this.calculation.calculationEditMode ? [ 4, this.updateCalculationEditMode(calculationEditMode) ] : [ 2 ];

                              case 1:
                                return _a.sent(), this.formulaBarControl.focus(), [ 2 ];
                            }
                        });
                    });
                }, _this.onModelChanged = function(arg) {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var model, appliedChanges, editableItem, calculationInfo;
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return this.isNewCalcItem = !!_.find(arg.appliedChanges, "newCalculationItem"), 
                                this.calculation ? (this.tryToUpdateCalculation(appliedChanges = arg.appliedChanges, model = arg.model), 
                                editableItem = Calculations.getEditableSchemaItem(this.calculation, model), Calculations.areSameItem(this.calculation, editableItem) ? [ 4, this.getCalculationInfo(this.calculation) ] : [ 2, this.setCalculation(void 0) ]) : [ 2 ];

                              case 1:
                                return (calculationInfo = _a.sent()) ? (this.calculation.isNew = calculationInfo.isNew, 
                                [ 4, this.updateContents(calculationInfo.formulaText, calculationInfo.alertMessage) ]) : [ 2, this.setCalculation(void 0) ];

                              case 2:
                                return _a.sent(), this.formulaBarControl.resetModelTokens(calculationInfo.formulaText), 
                                this.getMeasureSelection() ? [ 4, this.updateDynamicallyFormattedMeasureStatus() ] : [ 3, 4 ];

                              case 3:
                                _a.sent(), (null == appliedChanges ? void 0 : appliedChanges.find(function(val) {
                                    var _a;
                                    return "Dynamic" === (null === (_a = val.setFormatting) || void 0 === _a ? void 0 : _a.format);
                                })) && (this.formulaBarControl.setEditMode(2), this.formulaBarControl.focus()), 
                                _a.label = 4;

                              case 4:
                                return this.getCalculationItemSelection() ? [ 4, this.updateDynamicallyFormattedCalculationItemStatus() ] : [ 3, 6 ];

                              case 5:
                                _a.sent(), 2 !== this.calculation.calculationEditMode && (null == appliedChanges ? void 0 : appliedChanges.find(function(val) {
                                    var _a;
                                    return '""' === (null === (_a = val.setFormatString) || void 0 === _a ? void 0 : _a.formatStringExpression);
                                })) && (this.formulaBarControl.setEditMode(2), this.formulaBarControl.focus()), 
                                _a.label = 6;

                              case 6:
                                return [ 2 ];
                            }
                        });
                    });
                }, _this.standardizedTelemetryFeatureNames = [ "DynamicFormatString" ], _this;
            }
            return (0, tslib_es6.__extends)(FormulaBarModelBehaviorService, _super), FormulaBarModelBehaviorService.prototype.registerFormulaBarControl = function(control) {
                var _this = this;
                _super.prototype.registerFormulaBarControl.call(this, control), (0, merge.T)(this.modelService.modelChange$.pipe((0, 
                map.U)(function(m) {
                    return [ m, void 0, void 0 ];
                })), this.modelingSelectionService.selectionChanged.pipe((0, map.U)(function(s) {
                    return [ void 0, s, void 0 ];
                })), this.formulaBarControl.editMode$.pipe((0, map.U)(function(c) {
                    return [ void 0, void 0, c ];
                }))).pipe((0, takeUntil.R)(this.destroy$), (0, concatMap.b)(this.onModelOrSelectionChanged), (0, 
                catchError.K)(function(e) {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            return [ 2, debug.fF.assertFail(e) ];
                        });
                    });
                })).subscribe(function(_) {});
            }, FormulaBarModelBehaviorService.prototype.onContentChanged = function(_formulaCommitInfo) {}, 
            FormulaBarModelBehaviorService.prototype.onTemplateSelection = function(_selectedTemplate) {}, 
            FormulaBarModelBehaviorService.prototype.hasUnsavedChanges = function(formulaText) {
                return !!this.calculation && (this.intellisenseService.analyzeFinalFormulaCommitInfo(formulaText, !1, !0).doCommit || this.calculation.isNew);
            }, FormulaBarModelBehaviorService.prototype.commitOrDeletePendingCalculation = function(formulaText) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var formulaCommitInfo;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.calculation ? (formulaCommitInfo = this.intellisenseService.analyzeFinalFormulaCommitInfo(formulaText, !1, !0)).doCommit ? [ 4, this.commitCalculationUpdate(formulaCommitInfo) ] : [ 3, 2 ] : [ 3, 4 ];

                          case 1:
                          case 3:
                            return _a.sent(), [ 2, !0 ];

                          case 2:
                            return this.calculation.isNew ? [ 4, this.deleteCalculation() ] : [ 3, 4 ];

                          case 4:
                            return [ 2, !1 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.commitCalculationUpdate = function(formulaCommitInfo) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(this.calculation, "we expect this.calculation is neither undefined nor null now."), 
                            formulaCommitInfo.doCommit ? (this.contentChanged = !1, 2 !== this.calculation.calculationEditMode ? [ 3, 2 ] : [ 4, this.updateCalculationWithFormatString(this.calculation.urn, formulaCommitInfo.newExpression, formulaCommitInfo.anonymizedExpression) ]) : [ 2 ];

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.calculationService.updateCalculation(this.calculation.urn, formulaCommitInfo.newName, formulaCommitInfo.newExpression, formulaCommitInfo.anonymizedExpression, formulaCommitInfo.expressionOverride, formulaCommitInfo.errorMessage) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return this.telemetryService.logEvent(events.H2), [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.updateCalculationWithFormatString = function(modelObjectUriString, newExpression, anonymizedExpression) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(newExpression, "expression cannot be undefined or null"), 
                            [ 4, this.modelAuthoring.apply({
                                changes: [ {
                                    setFormatString: {
                                        formatString: void 0,
                                        modelObject: modelObjectUriString,
                                        formatStringExpression: newExpression || '""',
                                        anonymizedExpression
                                    }
                                } ]
                            }, !0) ];

                          case 1:
                            return _a.sent(), this.standardizedEventsService ? this.standardizedEventsService.logEvent(this.telemetryService.logEvent(events.gV), this.standardizedTelemetryFeatureNames, !0, {
                                ObjectType: 1
                            }) : this.telemetryService.logEvent(events.gV), [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.cancel = function(formulaText) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var lastCalc, lastCalcInfo;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.calculation ? this.calculation.isNew ? [ 4, this.deleteCalculation() ] : [ 3, 2 ] : [ 3, 6 ];

                          case 1:
                            return _a.sent(), [ 3, 6 ];

                          case 2:
                            return lastCalc = this.calculation, [ 4, this.setCalculation(void 0) ];

                          case 3:
                            return _a.sent(), [ 4, this.getCalculationInfo(lastCalc) ];

                          case 4:
                            return lastCalcInfo = _a.sent(), [ 4, this.setCalculation(lastCalc, formulaText, lastCalcInfo.alertMessage) ];

                          case 5:
                            _a.sent(), _a.label = 6;

                          case 6:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.deleteCalculation = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var toDelete, deletable, model;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(this.calculation, "we expect this.calculation is neither undefined nor null now."), 
                            toDelete = this.calculation, (deletable = this.calculation).isDeleted ? [ 2 ] : (deletable.isDeleted = !0, 
                            (model = this.modelService.model) && Calculations.getEditableSchemaItem(toDelete, model) ? (this.deleteModelingService.deleteModelItem([ {
                                schema: toDelete.schemaName,
                                tableName: Calculations.getEntityName(toDelete),
                                itemName: Calculations.getPropertyName(toDelete),
                                objectType: toDelete.modelObjectType
                            } ], !1), this.contentChanged = !1, [ 4, this.setCalculation(void 0) ]) : [ 3, 2 ]);

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete();
            }, FormulaBarModelBehaviorService.prototype.updateCalculationEditMode = function(calculationEditMode) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var calculation;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(calculationEditMode, "Calculation edit mode must be defined"), 
                            debug.fF.assertValue(this.calculation, "we expect this.calculation not null/undefined now."), 
                            (calculation = _.cloneDeep(this.calculation)).calculationEditMode = calculationEditMode, 
                            [ 4, this.showCalculation(calculation) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.showCalculation = function(editableItem) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var calculationInfo, calculation;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getCalculationInfo(editableItem) ];

                          case 1:
                            return (calculationInfo = _a.sent()) ? ((calculation = _.cloneDeep(editableItem)).isNew = calculationInfo.isNew, 
                            [ 4, this.setCalculation(calculation, calculationInfo.formulaText, calculationInfo.alertMessage) ]) : [ 2, this.setCalculation(void 0) ];

                          case 2:
                            return _a.sent(), Calculations.areSameItem(this.calculation, calculation) ? (this.formulaBarControl.scrollTop(), 
                            this.formulaBarControl.show(), calculationInfo && calculationInfo.isNew || this.isNewCalcItem ? (this.isNewCalcItem = !1, 
                            this.formulaBarControl.setSelection({
                                startPosition: 0,
                                length: calculationInfo.formulaText.length
                            }), [ 4, this.focusWhenNotBlocked() ]) : [ 3, 4 ]) : [ 2, Promise.reject(new CalculationChangedDuringShowFlowError) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.setCalculation = function(calculation, formulaText, alertText) {
                var _a;
                return void 0 === formulaText && (formulaText = null), void 0 === alertText && (alertText = null), 
                (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return Calculations.areSameItem(calculation, this.calculation) && (null == calculation ? void 0 : calculation.calculationEditMode) === (null === (_a = this.calculation) || void 0 === _a ? void 0 : _a.calculationEditMode) ? [ 2 ] : (this.calculation = calculation, 
                            this.calculation ? this.refreshIntellisenseSession() : (this.intellisenseService.endIntellisenseSession(), 
                            this.formulaBarControl.clear()), [ 4, this.updateReadOnlyState(!this.calculation) ]);

                          case 1:
                            return _b.sent(), [ 4, this.updateContents(formulaText, alertText) ];

                          case 2:
                            return _b.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.tryToUpdateCalculation = function(modelChangeResult, model) {
                debug.fF.assertValue(this.calculation, "we expect this.calculation not null/undefined now.");
                var changed = !1;
                if (modelChangeResult) {
                    for (var _i = 0, modelChangeResult_1 = modelChangeResult; _i < modelChangeResult_1.length; _i++) {
                        var change = modelChangeResult_1[_i], entityRename = change.entityRename;
                        if (entityRename && namedModelObjectUtils.wb(this.calculation) && namedModelObjectUtils.pb(entityRename.schema, this.calculation.schemaName) && entityRename.before === this.calculation.name && entityRename.after !== this.calculation.name) {
                            if (!(item = _.cloneDeep(namedModelObjectUtils.AG(model, entityRename.after)))) throw new CalculationNotFoundError("Cannot find object from model for calculation after rename entity");
                            item.isNew = this.calculation.isNew, item.calculationEditMode = this.calculation.calculationEditMode, 
                            this.calculation = item, changed = !0;
                            break;
                        }
                        var propertyRename = change.propertyRename;
                        if (propertyRename && !namedModelObjectUtils.wb(this.calculation) && propertyRename.objectType === this.calculation.modelObjectType && namedModelObjectUtils.pb(propertyRename.schema, this.calculation.schemaName) && propertyRename.entity === Calculations.getEntityName(this.calculation) && propertyRename.before === this.calculation.name && propertyRename.after !== this.calculation.name) {
                            var item = void 0;
                            if ("Column" === propertyRename.objectType) {
                                if (!(item = _.cloneDeep(namedModelObjectUtils.Gz(model, propertyRename.schema, propertyRename.entity, propertyRename.after)))) throw new CalculationNotFoundError("Cannot find object from model for calculation after rename column");
                            } else if ("Measure" === propertyRename.objectType) {
                                if (!(item = _.cloneDeep(namedModelObjectUtils.yo(model, propertyRename.schema, propertyRename.entity, propertyRename.after)))) throw new CalculationNotFoundError("Cannot find object from model for calculation after rename measure");
                            } else if ("CalculationItem" === propertyRename.objectType && !(item = _.cloneDeep(namedModelObjectUtils.om(model, propertyRename.schema, propertyRename.entity, propertyRename.after)))) throw new CalculationNotFoundError("Cannot find object from model for calculation after rename calculation item");
                            item.isNew = this.calculation.isNew, item.calculationEditMode = this.calculation.calculationEditMode, 
                            this.calculation = item, changed = !0;
                            break;
                        }
                        var measureMove = change.measureMove;
                        if (measureMove && namedModelObjectUtils.kb(this.calculation) && namedModelObjectUtils.pb(measureMove.schema, this.calculation.schemaName) && measureMove.source === this.calculation.table.name && measureMove.property === this.calculation.name && measureMove.destination !== this.calculation.table.name) {
                            if (!(item = _.cloneDeep(namedModelObjectUtils.yo(model, measureMove.schema, measureMove.destination, measureMove.property)))) throw new CalculationNotFoundError("Cannot find object from model for calculation after move measure");
                            item.isNew = this.calculation.isNew, item.calculationEditMode = this.calculation.calculationEditMode, 
                            this.calculation = item, changed = !0;
                            break;
                        }
                    }
                    changed && this.refreshIntellisenseSession();
                }
            }, FormulaBarModelBehaviorService.prototype.getCalculationInfo = function(calculation) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var entityName, propertyName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return entityName = Calculations.getEntityName(calculation), propertyName = Calculations.getPropertyName(calculation), 
                        [ 2, this.intellisenseService.getCalculationInfo({
                            entityName,
                            propertyName,
                            schemaName: calculation.schemaName,
                            calculationEditMode: calculation.calculationEditMode
                        }) ];
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.updateDynamicallyFormattedMeasureStatus = function() {
                var _a, _b, _c;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var selection, isDynamicallyFormattedMeasure;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return selection = this.getMeasureSelection(), isDynamicallyFormattedMeasure = "Dynamic" === (null === (_a = null == selection ? void 0 : selection.formatInformation) || void 0 === _a ? void 0 : _a.format), 
                            null === (_b = this.formulaBarControl) || void 0 === _b || _b.showEditModeSelector(isDynamicallyFormattedMeasure && this.featureSwitchService.featureSwitches.dynamicFormatString), 
                            !this.calculation || 1 === this.calculation.calculationEditMode || isDynamicallyFormattedMeasure ? [ 3, 5 ] : selection ? [ 4, this.updateCalculationEditMode(1) ] : [ 3, 2 ];

                          case 1:
                            return _d.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.setCalculation(void 0) ];

                          case 3:
                            _d.sent(), _d.label = 4;

                          case 4:
                            null === (_c = this.formulaBarControl) || void 0 === _c || _c.setEditMode(1), _d.label = 5;

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.getMeasureSelection = function() {
                return this.calculation ? (0, data_model_utils.yo)(this.dataModelService.getDataModel(), this.calculation.schemaName, Calculations.getEntityName(this.calculation), Calculations.getPropertyName(this.calculation)) : void 0;
            }, FormulaBarModelBehaviorService.prototype.updateDynamicallyFormattedCalculationItemStatus = function() {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var selection, isDynamicallyFormattedCalculationItem;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return selection = this.getCalculationItemSelection(), isDynamicallyFormattedCalculationItem = !!selection.formatStringDefinition, 
                            null === (_a = this.formulaBarControl) || void 0 === _a || _a.showEditModeSelector(selection && isDynamicallyFormattedCalculationItem), 
                            !this.calculation || 1 === this.calculation.calculationEditMode || isDynamicallyFormattedCalculationItem ? [ 3, 5 ] : selection ? [ 4, this.updateCalculationEditMode(1) ] : [ 3, 2 ];

                          case 1:
                            return _c.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.setCalculation(void 0) ];

                          case 3:
                            _c.sent(), _c.label = 4;

                          case 4:
                            null === (_b = this.formulaBarControl) || void 0 === _b || _b.setEditMode(1), _c.label = 5;

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarModelBehaviorService.prototype.getCalculationItemSelection = function() {
                return this.calculation ? (0, data_model_utils.om)(this.dataModelService.getDataModel(), Calculations.getEntityName(this.calculation), Calculations.getPropertyName(this.calculation)) : void 0;
            }, FormulaBarModelBehaviorService.prototype.refreshIntellisenseSession = function() {
                this.intellisenseService.endIntellisenseSession();
                var entityName = Calculations.getEntityName(this.calculation), propertyName = Calculations.getPropertyName(this.calculation);
                this.intellisenseService.startIntellisenseSession(entityName, propertyName, this.calculation.schemaName, this.calculation.calculationEditMode);
            }, FormulaBarModelBehaviorService.\u0275fac = function(t) {
                return new (t || FormulaBarModelBehaviorService)(core["\u0275\u0275inject"](modeling_selection_service.W6), core["\u0275\u0275inject"](model_service.q), core["\u0275\u0275inject"](ui_blocking_service_token.D), core["\u0275\u0275inject"](token.n), core["\u0275\u0275inject"](modelAuthoringService.S), core["\u0275\u0275inject"](standardizedEventsService.S, 8), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](intellisense_service.e), core["\u0275\u0275inject"](calculation_service.H), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](delete_model_item_service.c), core["\u0275\u0275inject"](feature_switch_service.vZ));
            }, FormulaBarModelBehaviorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormulaBarModelBehaviorService,
                factory: FormulaBarModelBehaviorService.\u0275fac
            }), FormulaBarModelBehaviorService;
        }(formula_bar_base_behaviour_service.e), CalculationChangedDuringShowFlowError = function(_super) {
            function CalculationChangedDuringShowFlowError() {
                var _this = _super.call(this, "The active item was updated before the formula bar could finish initializing the editor for the previous selection") || this;
                return _this.name = "CalculationChangedDuringShowFlow", _this;
            }
            return (0, tslib_es6.__extends)(CalculationChangedDuringShowFlowError, _super), 
            CalculationChangedDuringShowFlowError;
        }(Error), CalculationNotFoundError = function(_super) {
            function CalculationNotFoundError(errorMessage) {
                var _this = _super.call(this, errorMessage) || this;
                return _this.name = "CalculationNotFoundError", _this;
            }
            return (0, tslib_es6.__extends)(CalculationNotFoundError, _super), CalculationNotFoundError;
        }(Error), FormulaBarModelBehaviourServiceProvider = {
            provide: injection_tokens.n9,
            useClass: FormulaBarModelBehaviorService
        }, intellisense_model_service = __webpack_require__(12846), formula_bar_component = __webpack_require__(64018), FormulaBarModelComponent = function() {
            function FormulaBarModelComponent() {
                this.catchOutsideClickEventCallBack = function(event) {
                    return !1;
                }, this.beginEdit = new core.EventEmitter, this.endEdit = new core.EventEmitter;
            }
            return FormulaBarModelComponent.\u0275fac = function(t) {
                return new (t || FormulaBarModelComponent);
            }, FormulaBarModelComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormulaBarModelComponent,
                selectors: [ [ "formula-bar-model" ] ],
                inputs: {
                    isActive: "isActive",
                    autoHide: "autoHide",
                    catchOutsideClickEventCallBack: "catchOutsideClickEventCallBack",
                    expandCollapseConfig: "expandCollapseConfig",
                    shouldAlwaysEnableCancelButton: "shouldAlwaysEnableCancelButton"
                },
                outputs: {
                    beginEdit: "beginEdit",
                    endEdit: "endEdit"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ formula_bar_service.B, intellisense_service.e, intellisense_host_service.Dz, FormulaBarModelBehaviourServiceProvider, intellisense_model_service.p ]) ],
                decls: 1,
                vars: 4,
                consts: [ [ 3, "autoHide", "isActive", "expandCollapseConfig", "shouldAlwaysEnableCancelButton", "catchOutsideClickEventCallBack", "beginEdit", "endEdit" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "formula-bar", 0), core["\u0275\u0275listener"]("catchOutsideClickEventCallBack", function() {
                        return ctx.catchOutsideClickEventCallBack;
                    })("beginEdit", function() {
                        return ctx.beginEdit;
                    })("endEdit", function() {
                        return ctx.endEdit;
                    }), core["\u0275\u0275elementEnd"]()), 2 & rf && core["\u0275\u0275property"]("autoHide", ctx.autoHide)("isActive", ctx.isActive)("expandCollapseConfig", ctx.expandCollapseConfig)("shouldAlwaysEnableCancelButton", ctx.shouldAlwaysEnableCancelButton);
                },
                dependencies: [ formula_bar_component.L ],
                encapsulation: 2
            }), FormulaBarModelComponent;
        }(), lazy_load_routes = __webpack_require__(81343), lazy_load_module = __webpack_require__(82156), manifests = [ {
            componentId: lazy_load_routes.ro,
            type: FormulaBarModelComponent
        } ], FormulaBarModelModule = function() {
            function FormulaBarModelModule() {}
            return FormulaBarModelModule.\u0275fac = function(t) {
                return new (t || FormulaBarModelModule);
            }, FormulaBarModelModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: FormulaBarModelModule
            }), FormulaBarModelModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ lazy_load_module.N.withManifests(manifests), formula_bar_ui_module.p ]
            }), FormulaBarModelModule;
        }();
    },
    12846: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            p: function() {
                return IntellisenseModelServiceProvider;
            }
        });
        var tslib_es6 = __webpack_require__(81337), injection_tokens = __webpack_require__(15903), data_model_utils = __webpack_require__(95867), dataModelSchemas = __webpack_require__(5207);
        function getEligibleTables(model) {
            return model.tables.filter(function(t) {
                return t.schemaName !== dataModelSchemas._.DataWarehouseSchema;
            });
        }
        function getEligibleRelationships(model) {
            return model.relationships.filter(function(r) {
                return r.fromTable.schemaName !== dataModelSchemas._.DataWarehouseSchema && r.toTable.schemaName !== dataModelSchemas._.DataWarehouseSchema;
            });
        }
        function daxColumnVariationTable(column) {
            if (column.variations && column.variations.length > 0) return column.variations[0].relationship.toTable.name;
        }
        function daxRelationshipCardinality(cardinality) {
            switch (cardinality) {
              case "Many":
              case "None":
                return "many";

              case "One":
                return "one";
            }
        }
        var token = __webpack_require__(68082), daxTypes = __webpack_require__(63708), core = __webpack_require__(50423), IntellisenseModelServiceProvider = {
            provide: injection_tokens.Pm,
            useClass: function() {
                function IntellisenseModelService(dataModelService) {
                    this.dataModelService = dataModelService;
                }
                return IntellisenseModelService.prototype.init = function(calculationObjectInfo) {
                    this.calculationObjectInfo = (0, tslib_es6.__assign)({}, calculationObjectInfo);
                }, IntellisenseModelService.prototype.reset = function() {
                    this.calculationObjectInfo = void 0;
                }, IntellisenseModelService.prototype.getDaxModeConfigInputs = function(unfilteredWireDataSourceInfo) {
                    var model, serializableModel = {
                        tables: getEligibleTables(model = this.dataModelService.getDataModel()).map(function(t) {
                            return {
                                name: (table = t).name,
                                isUserTable: (0, data_model_utils.$i)(table),
                                description: table.description,
                                columns: table.columns ? table.columns.map(function(c) {
                                    return {
                                        name: (column = c).name,
                                        isUserColumn: (0, data_model_utils.rh)(column),
                                        description: column.description,
                                        variationTable: daxColumnVariationTable(column)
                                    };
                                    var column;
                                }) : [],
                                measures: table.measures ? table.measures.map(function(m) {
                                    return {
                                        name: (measure = m).name,
                                        description: measure.description,
                                        expression: measure.expression,
                                        isExternal: !!measure.sourceLineageTag
                                    };
                                    var measure;
                                }) : [],
                                calendars: table.calendars ? table.calendars.map(function(c) {
                                    return {
                                        name: c.name
                                    };
                                }) : []
                            };
                            var table;
                        }),
                        relationships: model.relationships ? getEligibleRelationships(model).map(function(r) {
                            return {
                                active: (relationship = r).isActive,
                                from: {
                                    table: relationship.fromTable.name,
                                    column: relationship.fromColumn ? relationship.fromColumn.name : void 0,
                                    cardinality: daxRelationshipCardinality(relationship.fromCardinality)
                                },
                                to: {
                                    table: relationship.toTable.name,
                                    column: relationship.toColumn ? relationship.toColumn.name : void 0,
                                    cardinality: daxRelationshipCardinality(relationship.toCardinality)
                                }
                            };
                            var relationship;
                        }) : []
                    }, isRestrictedMode = this.isFunctionRestrictedMode(), daxCalculation = this.getDaxCalculation(), wireDataSourceInfo = this.filterWireDataSourceInfo(unfilteredWireDataSourceInfo);
                    return Promise.resolve({
                        serializableModel,
                        wireDataSourceInfo,
                        daxCalculation,
                        isRestrictedMode
                    });
                }, IntellisenseModelService.prototype.getCalculationObject = function() {
                    return this.calculationObjectInfo && this.findCalculationObject({
                        entityName: this.calculationObjectInfo.entityName,
                        propertyName: this.calculationObjectInfo.propertyName,
                        schemaName: this.calculationObjectInfo.schemaName,
                        calculationEditMode: this.calculationObjectInfo.calculationEditMode
                    });
                }, IntellisenseModelService.prototype.findCalculationObject = function(object) {
                    var _a, schemaName = object.schemaName, entityName = object.entityName, propertyName = object.propertyName, calculationEditMode = object.calculationEditMode;
                    if (entityName) {
                        var calculationObject = (0, data_model_utils.Lc)(this.dataModelService.getDataModel(), schemaName, entityName, propertyName);
                        if (!calculationObject) return;
                        var expression = calculationObject.expression, expressionErrorMessage = calculationObject.expressionErrorMessage;
                        if (2 === calculationEditMode) {
                            var dfs = calculationObject.formatStringDefinition;
                            expression = null !== (_a = null == dfs ? void 0 : dfs.expression) && void 0 !== _a ? _a : "", 
                            expressionErrorMessage = null == dfs ? void 0 : dfs.errorMessage;
                        }
                        var daxCalculationObject = {
                            name: calculationObject.name,
                            expression,
                            schemaName: calculationObject.schemaName,
                            calculationType: this.getCalculationType(calculationObject),
                            calculationSyntaxType: IntellisenseModelService.getCalculationSyntaxType(calculationEditMode),
                            expressionErrorMessage
                        };
                        return _.isEmpty(calculationObject.annotations) || (daxCalculationObject = (0, tslib_es6.__assign)((0, 
                        tslib_es6.__assign)({}, daxCalculationObject), {
                            expressionOverride: (0, data_model_utils.MZ)(calculationObject),
                            formulaOverride: (0, data_model_utils.CE)(calculationObject),
                            isNew: (0, data_model_utils.e_)(calculationObject)
                        })), daxCalculationObject;
                    }
                }, IntellisenseModelService.prototype.getDaxCalculation = function() {
                    var _a, calculationObjectInfo = this.calculationObjectInfo;
                    if (calculationObjectInfo) {
                        var schemaName = (_a = this.calculationObjectInfo).schemaName, entityName = _a.entityName, propertyName = _a.propertyName, calculationObject = (0, 
                        data_model_utils.Lc)(this.dataModelService.getDataModel(), schemaName, entityName, propertyName);
                        if (calculationObject) {
                            var calculationType = this.getCalculationType(calculationObject), calculationSyntaxType = IntellisenseModelService.getCalculationSyntaxType(calculationObjectInfo.calculationEditMode);
                            return {
                                tableName: calculationObjectInfo.entityName,
                                calculationName: calculationObjectInfo.propertyName,
                                type: calculationType,
                                syntaxType: calculationSyntaxType
                            };
                        }
                    }
                }, IntellisenseModelService.prototype.isFunctionRestrictedMode = function() {
                    if (!this.calculationObjectInfo) return !1;
                    var tableName = this.calculationObjectInfo.entityName, table = (0, data_model_utils.AG)(this.dataModelService.getDataModel(), tableName);
                    return !!table && table.capabilities.requirePushableToDirectQueryDax;
                }, IntellisenseModelService.prototype.getCalculationType = function(calculationObject) {
                    if (calculationObject) switch (calculationObject.objectType) {
                      case "Column":
                        return daxTypes.eN.Column;

                      case "Table":
                        return daxTypes.eN.Table;

                      case "Measure":
                        return daxTypes.eN.Measure;

                      case "CalculationItem":
                        return daxTypes.eN.CalculationItem;

                      default:
                        return;
                    }
                }, IntellisenseModelService.prototype.filterWireDataSourceInfo = function(wireDataSourceInfo) {
                    return {
                        functionDataFromEngine: wireDataSourceInfo.functionDataFromEngine.filter(function(f) {
                            return !f.visualCalculationsInfo || 0 === f.visualCalculationsInfo;
                        }),
                        reservedWords: wireDataSourceInfo.reservedWords
                    };
                }, IntellisenseModelService.getCalculationSyntaxType = function(calculationEditMode) {
                    return 2 === calculationEditMode ? daxTypes.Up.Expression : daxTypes.Up.Formula;
                }, IntellisenseModelService.\u0275fac = function(t) {
                    return new (t || IntellisenseModelService)(core["\u0275\u0275inject"](token.n));
                }, IntellisenseModelService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                    token: IntellisenseModelService,
                    factory: IntellisenseModelService.\u0275fac
                }), IntellisenseModelService;
            }()
        };
    },
    17848: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            p: function() {
                return FormulaBarUIModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(77476), _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(17174), _powerbi_A11y__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(20914), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79061), _powerbi_ModelingCommon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(8948), _powerbi_MonacoEditorUI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(68101), _powerbi_UILibrary_pbi_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(93367), _powerbi_UILibrary_pbi_menu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(94841), _powerbi_UILibrary_pbi_svg_use_symbol__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(79725), _powerbi_UILibrary_pbi_tooltip_pbi_tooltip_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(16095), _powerbi_UILibrary_resizer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(53772), _trident_ux_angular_tri_dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44913), _trident_ux_angular_tri_svg_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17177), _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50423), FormulaBarUIModule = function() {
            function FormulaBarUIModule() {}
            return FormulaBarUIModule.\u0275fac = function(t) {
                return new (t || FormulaBarUIModule);
            }, FormulaBarUIModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_2__["\u0275\u0275defineNgModule"]({
                type: FormulaBarUIModule
            }), FormulaBarUIModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_2__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_4__.u5, _powerbi_UILibrary_pbi_icon__WEBPACK_IMPORTED_MODULE_5__.U, _powerbi_Localization__WEBPACK_IMPORTED_MODULE_6__.v, _powerbi_MonacoEditorUI__WEBPACK_IMPORTED_MODULE_7__.B, _powerbi_UILibrary_pbi_menu__WEBPACK_IMPORTED_MODULE_8__.b, _powerbi_UILibrary_pbi_tooltip_pbi_tooltip_module__WEBPACK_IMPORTED_MODULE_9__.Z, _powerbi_UILibrary_pbi_svg_use_symbol__WEBPACK_IMPORTED_MODULE_10__.j, _powerbi_UILibrary_resizer__WEBPACK_IMPORTED_MODULE_11__.w, _powerbi_ModelingCommon__WEBPACK_IMPORTED_MODULE_12__.y, _powerbi_A11y__WEBPACK_IMPORTED_MODULE_13__._, _trident_ux_angular_tri_dropdown__WEBPACK_IMPORTED_MODULE_0__.lK, _trident_ux_angular_tri_svg_icon__WEBPACK_IMPORTED_MODULE_1__.T6 ]
            }), FormulaBarUIModule;
        }();
    },
    15903: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $d: function() {
                return FormulaBarZoomServiceInjectionToken;
            },
            Pm: function() {
                return IntellisenseModelServiceInjectionToken;
            },
            n9: function() {
                return BehaviorServiceInjectionToken;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), IntellisenseModelServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("IntellisenseModelService"), BehaviorServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("FormulaBarBehaviorService"), FormulaBarZoomServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("FormulaBarZoomService");
    },
    98361: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return FormulaBarBaseBehaviorService;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), FormulaBarBaseBehaviorService = function() {
            function FormulaBarBaseBehaviorService(uiBlockingService, localizationService, intellisenseService) {
                this.uiBlockingService = uiBlockingService, this.localizationService = localizationService, 
                this.intellisenseService = intellisenseService;
            }
            return FormulaBarBaseBehaviorService.prototype.registerFormulaBarControl = function(control) {
                this.formulaBarControl = control, control.setEditModeOptions([]);
            }, FormulaBarBaseBehaviorService.prototype.focusWhenNotBlocked = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.uiBlockingService.waitTillUnblocked() ];

                          case 1:
                            return _a.sent(), this.formulaBarControl.focus(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateReadOnlyState = function(setReadOnly) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.uiBlockingService.waitTillUnblocked() ];

                          case 1:
                            return _a.sent(), this.formulaBarControl.setReadOnly(setReadOnly), [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateContents = function(formulaText, alertText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    var wireDataSourceInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseService.getDataSourceInfo() ];

                          case 1:
                            return wireDataSourceInfo = _a.sent(), !_.isEmpty(wireDataSourceInfo.functionDataFromEngine) && !_.isEmpty(wireDataSourceInfo.reservedWords) || alertText || (alertText = this.localizationService.get("DaxEditor_ErrorMessageToGetIntellisense")), 
                            [ 4, this.updateFormulaText(formulaText, wireDataSourceInfo) ];

                          case 2:
                            return _a.sent(), this.updateAlertText(alertText), [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateFormulaText = function(formulaText, wireDataSourceInfo) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseService.updateDaxContext(wireDataSourceInfo) ];

                          case 1:
                            return _a.sent(), this.formulaBarControl.setCommittedFormulaBarText(formulaText || null), 
                            this.contentChanged = !1, [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateAlertText = function(alertText) {
                alertText ? this.formulaBarControl.showAlertMessage(alertText) : this.formulaBarControl.hideAlert();
            }, FormulaBarBaseBehaviorService.\u0275fac = function(t) {
                _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275invalidFactory"]();
            }, FormulaBarBaseBehaviorService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjectable"]({
                token: FormulaBarBaseBehaviorService,
                factory: FormulaBarBaseBehaviorService.\u0275fac
            }), FormulaBarBaseBehaviorService;
        }();
    },
    15783: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            B: function() {
                return FormulaBarService;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _injection_tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15903), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), _intellisense_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72080), _powerbi_A11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(83309), FormulaBarService = function() {
            function FormulaBarService(intellisenseService, screenReaderService, zone, behaviorService) {
                this.intellisenseService = intellisenseService, this.screenReaderService = screenReaderService, 
                this.zone = zone, this.behaviorService = behaviorService, this.suspendParseCount = 0;
            }
            return FormulaBarService.prototype.setUICulture = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseService.setUICulture() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarService.prototype.ngOnDestroy = function() {
                this.behaviorService.ngOnDestroy();
            }, Object.defineProperty(FormulaBarService.prototype, "mode", {
                get: function() {
                    return "dax";
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarService.prototype.registerFormulaBarControl = function(control) {
                this.formulaBarControl = control, this.behaviorService.registerFormulaBarControl(control), 
                this.intellisenseService.onClientViewLoaded(this);
            }, FormulaBarService.prototype.onContentChanged = function(text, position, selectionStart, changes) {
                var _this_1 = this, formulaCommitInfo = this.intellisenseService.analyzeFinalFormulaCommitInfo(text, !1, !1);
                this.behaviorService.contentChanged || (this.behaviorService.contentChanged = formulaCommitInfo.doCommit), 
                formulaCommitInfo.parseErrorMessages.size && formulaCommitInfo.parseErrorMessages.forEach(function(error, code) {
                    _this_1.screenReaderService.alertWithDebounce("dax-error" + code, error);
                }), this.intellisenseService.onContentChanged(text, position, selectionStart, 0 !== this.suspendParseCount, changes.length > 1), 
                this.behaviorService.onContentChanged(formulaCommitInfo);
            }, FormulaBarService.prototype.onEditorFocus = function() {
                this.intellisenseService.onEditorFocus();
            }, FormulaBarService.prototype.hasUnsavedChanges = function(formulaText) {
                return this.behaviorService.hasUnsavedChanges(formulaText);
            }, FormulaBarService.prototype.onBlur = function(formulaText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.behaviorService.commitOrDeletePendingCalculation(formulaText) ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, FormulaBarService.prototype.onSubmit = function(formulaText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    var formulaCommitInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return formulaCommitInfo = this.intellisenseService.analyzeFinalFormulaCommitInfo(formulaText, !0, !0), 
                            [ 4, this.behaviorService.commitCalculationUpdate(formulaCommitInfo) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarService.prototype.onCancel = function(formulaText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        return this.behaviorService.cancel(formulaText), [ 2 ];
                    });
                });
            }, FormulaBarService.prototype.onTemplateSelection = function(selectedTemplate) {
                return this.behaviorService.onTemplateSelection(selectedTemplate);
            }, FormulaBarService.prototype.setCommittedFormulaBarText = function(value) {
                this.formulaBarControl.setCommittedFormulaBarText(value);
            }, FormulaBarService.prototype.hostServiceCalculationCommitedOrDeleted = function() {
                this.formulaBarControl.endFormulaEdit(), this.behaviorService.contentChanged = !1;
            }, FormulaBarService.\u0275fac = function(t) {
                return new (t || FormulaBarService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_intellisense_service__WEBPACK_IMPORTED_MODULE_2__.e), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_powerbi_A11y__WEBPACK_IMPORTED_MODULE_3__.g), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_injection_tokens__WEBPACK_IMPORTED_MODULE_4__.n9));
            }, FormulaBarService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjectable"]({
                token: FormulaBarService,
                factory: FormulaBarService.\u0275fac
            }), (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([ function(target, propertyKey, descriptor) {
                var originalMethod = descriptor.value;
                descriptor.value = function() {
                    for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var _this = this;
                    this.zone.run(function() {
                        return originalMethod.apply(_this, args);
                    });
                };
            }, (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__metadata)("design:type", Function), (0, 
            tslib__WEBPACK_IMPORTED_MODULE_0__.__metadata)("design:paramtypes", []), (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__metadata)("design:returntype", void 0) ], FormulaBarService.prototype, "hostServiceCalculationCommitedOrDeleted", null), 
            FormulaBarService;
        }();
    },
    72080: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return IntellisenseService;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81337), _injection_tokens__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(15903), _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17819), _powerbi_DaxParser_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63513), _powerbi_DaxParser_dax_capabilities_converter_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(48563), _powerbi_InjectionTokens_dax_capabilities_service_interface__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(74249), _powerbi_legacy_JsCommon_Utility_JsonExtensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26112), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62458), _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59694), _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(63708), _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(49088), _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(50423), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(65181), _intellisense_host_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(34103), whitespaceBeforeFormula = [ " ", "\t" ], IntellisenseService = function() {
            function IntellisenseService(localizationService, intellisenseHostService, intellisenseModelService, daxCapabilitiesService) {
                this.localizationService = localizationService, this.intellisenseHostService = intellisenseHostService, 
                this.intellisenseModelService = intellisenseModelService, this.daxCapabilitiesService = daxCapabilitiesService;
            }
            return IntellisenseService.prototype.onClientViewLoaded = function(interop) {
                this.intellisenseHostService.onClientViewLoaded(interop);
            }, IntellisenseService.prototype.onContentChanged = function(formulaBarContent, cursorPosition, selectionStart, skipParse, textChangedOutsideOfCursor) {
                this.intellisenseHostService.onContentChanged(formulaBarContent, cursorPosition, selectionStart, skipParse, textChangedOutsideOfCursor);
            }, IntellisenseService.prototype.setUICulture = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var cultureInfoJson, cultureInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseHostService.getCultureInfo() ];

                          case 1:
                            return cultureInfoJson = _a.sent(), cultureInfo = (0, _powerbi_legacy_JsCommon_Utility_JsonExtensions__WEBPACK_IMPORTED_MODULE_4__.K)(cultureInfoJson), 
                            (0, _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.g5)({
                                listSeparator: cultureInfo.listSeparator,
                                numberDecimalSeparator: cultureInfo.decimalSeparator
                            }), [ 2 ];
                        }
                    });
                });
            }, IntellisenseService.prototype.onEditorFocus = function() {
                this.intellisenseHostService.onEditorFocus();
            }, IntellisenseService.prototype.endIntellisenseSession = function() {
                this.intellisenseModelService.reset(), this.intellisenseHostService.endIntellisenseSession();
            }, IntellisenseService.prototype.startIntellisenseSession = function(entityName, propertyName, schemaName, calculationEditMode) {
                this.intellisenseModelService.init({
                    entityName,
                    propertyName,
                    schemaName,
                    calculationEditMode
                }), this.intellisenseHostService.startIntellisenseSession(entityName, propertyName, schemaName, calculationEditMode);
            }, IntellisenseService.prototype.getCalculationInfo = function(calculationObjectInfo) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var calculation;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_a) {
                        return (calculation = this.intellisenseModelService.findCalculationObject(calculationObjectInfo)) && null != calculation.expression ? [ 2, Promise.resolve({
                            isNew: calculation.isNew,
                            alertMessage: calculation.expressionErrorMessage ? calculation.expressionErrorMessage : void 0,
                            formulaText: this.getCalculationExpression(calculation)
                        }) ] : (_powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertFail((0, 
                        _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_6__.W)("Cannot find editable Calculation: schema:{0} entity:{1} property:{2}", null == calculationObjectInfo ? void 0 : calculationObjectInfo.schemaName, null == calculationObjectInfo ? void 0 : calculationObjectInfo.entityName, null == calculationObjectInfo ? void 0 : calculationObjectInfo.propertyName)), 
                        [ 2, Promise.resolve(void 0) ]);
                    });
                });
            }, IntellisenseService.prototype.getCalculationExpression = function(calculation) {
                if (calculation.formulaOverride) return calculation.formulaOverride.formula;
                var expression = _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_.convertToUI(calculation.expression);
                return calculation.calculationSyntaxType === _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.Up.Expression ? expression : (0, 
                _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.Mk)(calculation.name, expression);
            }, IntellisenseService.prototype.updateFormulaContextAsync = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var wireDataSourceInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getDataSourceInfo() ];

                          case 1:
                            return wireDataSourceInfo = _a.sent(), [ 4, this.updateDaxContext(wireDataSourceInfo) ];

                          case 2:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, IntellisenseService.prototype.updateDaxContext = function(unfilteredWireDataSourceInfo) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return [ 4, this.intellisenseModelService.getDaxModeConfigInputs(unfilteredWireDataSourceInfo) ];

                          case 1:
                            return _a = _b.sent(), _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__._.configureModel(_a.serializableModel, _a.wireDataSourceInfo, _a.daxCalculation, _a.isRestrictedMode, _a.axes), 
                            [ 2 ];
                        }
                    });
                });
            }, IntellisenseService.prototype.getDataSourceInfo = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var reservedASWords, functionData, _a;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return [ 4, Promise.all([ this.daxCapabilitiesService.getReservedWords(), this.daxCapabilitiesService.getCapabilities() ]) ];

                          case 1:
                            return _a = _b.sent(), reservedASWords = _a[0], functionData = (0, _powerbi_DaxParser_dax_capabilities_converter_utils__WEBPACK_IMPORTED_MODULE_2__.w)(_a[1].Functions), 
                            [ 2, {
                                reservedWords: reservedASWords,
                                functionDataFromEngine: functionData
                            } ];
                        }
                    });
                });
            }, IntellisenseService.prototype.analyzeFinalFormulaCommitInfo = function(formula, isExplicitSubmit, doFinalProcessing) {
                var expressionOverride, errorMessage, calculation = this.intellisenseModelService.getCalculationObject(), finalFormulaInfo = {
                    name: void 0,
                    expression: void 0,
                    invalidFormula: void 0,
                    anonymizedExpression: void 0,
                    parseResult: void 0
                }, toCommit = function(formula, result, doFinalProcessing, calculation) {
                    if (!calculation) return result.name = void 0, result.expression = void 0, result.invalidFormula = void 0, 
                    result.anonymizedExpression = void 0, !1;
                    var oldInvalidFormula;
                    !function(formula, result, doFinalProcessing, calculation) {
                        var breakUpSuccess = !1, finalFormulaOut = {
                            name: void 0,
                            expression: void 0
                        };
                        if ((breakUpSuccess = calculation.calculationSyntaxType === _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.Up.Expression) ? finalFormulaOut.expression = _powerbi_DaxParser_utilities__WEBPACK_IMPORTED_MODULE_1__.uI.trimStart(formula, whitespaceBeforeFormula) : breakUpSuccess = (0, 
                        _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.Mn)(formula, finalFormulaOut, calculation.calculationType === _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.VisualCalculation), 
                        !breakUpSuccess) return result.name = calculation.name || "", result.name && !formula ? result.expression = "" : (result.invalidFormula = formula, 
                        result.expression = calculation.expression || ""), null;
                        if (result.name = finalFormulaOut.name, result.expression = finalFormulaOut.expression, 
                        finalFormulaOut.expression) if (doFinalProcessing) {
                            (context = _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__._.getContext()) || _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertFail("Context should be defined");
                            var parser = new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_, finalParseResult = new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.ss, finalParseResultOut = {
                                finalResult: finalParseResult
                            };
                            parser.finalParse(finalFormulaOut.expression, context, finalParseResultOut, _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.MX.AddMissingParens | _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.MX.Anonymize | _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.MX.ConvertToEngine), 
                            result.expression = finalParseResultOut.finalResult.updatedExpression, result.anonymizedExpression = finalParseResultOut.finalResult.anonymizedExpression, 
                            result.parseResult = finalParseResult;
                        } else {
                            parser = new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_;
                            var context = _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__._.getContext(), parseResultRef = {
                                result: new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.bp
                            };
                            parser.parse(finalFormulaOut.expression, 0, void 0, void 0, context, parseResultRef, void 0), 
                            result.expression = _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_.convertToEngine(finalFormulaOut.expression), 
                            result.parseResult = parseResultRef.result;
                        }
                    }(formula, result, doFinalProcessing, calculation);
                    var formulaOverride = calculation.formulaOverride;
                    return formulaOverride && (oldInvalidFormula = formulaOverride.formula), calculation.name !== result.name || calculation.expression !== result.expression || oldInvalidFormula !== result.invalidFormula;
                }(formula, finalFormulaInfo, doFinalProcessing, calculation);
                !toCommit && isExplicitSubmit && calculation && (toCommit = !!calculation.expressionErrorMessage && !!calculation.expressionOverride && !calculation.formulaOverride);
                var parseErrorMessages = new Map;
                if (toCommit && finalFormulaInfo.invalidFormula) switch (expressionOverride = {
                    expression: null,
                    formula: finalFormulaInfo.invalidFormula
                }, calculation.calculationType) {
                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.Column:
                    errorMessage = this.localizationService.get("ReportModelInvalidColumnNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.Table:
                    errorMessage = this.localizationService.get("ReportModelInvalidCalculatedTableNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.Measure:
                    errorMessage = this.localizationService.get("ReportModelInvalidMeasureNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.CalculationItem:
                    errorMessage = this.localizationService.get("ReportModelInvalidCalcItemNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.VisualCalculation:
                    break;

                  default:
                    _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertFail("Unknown type " + calculation.calculationType);
                }
                return finalFormulaInfo.parseResult instanceof _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.bp && finalFormulaInfo.parseResult.errors.length && finalFormulaInfo.parseResult.errors.forEach(function(error) {
                    return parseErrorMessages.set(error.errorCode, error.message);
                }), {
                    doCommit: toCommit,
                    newName: finalFormulaInfo.name,
                    newExpression: finalFormulaInfo.expression,
                    newInvalidFormula: finalFormulaInfo.invalidFormula,
                    anonymizedExpression: finalFormulaInfo.anonymizedExpression,
                    expressionOverride,
                    errorMessage,
                    parseErrorMessages
                };
            }, IntellisenseService.\u0275fac = function(t) {
                return new (t || IntellisenseService)(_angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_powerbi_Localization__WEBPACK_IMPORTED_MODULE_10__.o), _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_intellisense_host_service__WEBPACK_IMPORTED_MODULE_11__.TH), _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_injection_tokens__WEBPACK_IMPORTED_MODULE_12__.Pm), _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_powerbi_InjectionTokens_dax_capabilities_service_interface__WEBPACK_IMPORTED_MODULE_13__.r));
            }, IntellisenseService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275defineInjectable"]({
                token: IntellisenseService,
                factory: IntellisenseService.\u0275fac,
                providedIn: "root"
            }), IntellisenseService;
        }();
    },
    4715: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            H2: function() {
                return FormulaBarEditFormulaBarObject;
            },
            Zs: function() {
                return FormulaBarSelectTemplate;
            },
            gV: function() {
                return FormulaBarSubmitDynamicFormatString;
            }
        });
        var _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41114), FormulaBarEditFormulaBarObject = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.FormulaBar.EditFormulaBarObject"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.FormulaBar.EditFormulaBarObject"), FormulaBarSubmitDynamicFormatString = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.FormulaBar.SubmitDynamicFormatString"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.FormulaBar.SubmitDynamicFormatString"), FormulaBarSelectTemplate = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.FormulaBar.SelectTemplate"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.FormulaBar.SelectTemplate");
    },
    81892: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Uu: function() {
                return FormulaBarDropdownPanelClass;
            },
            ZI: function() {
                return FormulaBarMeasureDropdownConfigurations;
            },
            dO: function() {
                return FormulaBarCalculationItemDropdownConfigurations;
            }
        });
        var FormulaBarMeasureDropdownConfigurations = [ {
            displayName: "Measure",
            key: 1
        }, {
            displayName: "Format",
            key: 2
        } ], FormulaBarCalculationItemDropdownConfigurations = [ {
            displayName: "Item",
            key: 1
        }, {
            displayName: "Format",
            key: 2
        } ], FormulaBarDropdownPanelClass = "formulaBarDropdownPanel";
    }
} ]);