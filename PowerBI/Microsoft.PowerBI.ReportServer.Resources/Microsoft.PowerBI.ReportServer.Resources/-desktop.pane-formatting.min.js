"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "pane-formatting" ], {
    2863: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            v: function() {
                return isCustomVisual;
            }
        });
        var _powerbi_legacy_Explore_util_visualContainerUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3579);
        function isCustomVisual(selectedVisual, visualPluginService, trustedVisual) {
            var visualType = (0, _powerbi_legacy_Explore_util_visualContainerUtils__WEBPACK_IMPORTED_MODULE_0__.s)(selectedVisual);
            return visualPluginService.isCustomVisual(visualType) || trustedVisual.isTrustedVisual(visualType);
        }
    },
    71980: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            PaneFormattingModule: function() {
                return PaneFormattingModule;
            }
        });
        var core = __webpack_require__(50423), ExploreUIAuthoringDirectivesModule = function() {
            function ExploreUIAuthoringDirectivesModule() {}
            return ExploreUIAuthoringDirectivesModule.\u0275fac = function(t) {
                return new (t || ExploreUIAuthoringDirectivesModule);
            }, ExploreUIAuthoringDirectivesModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExploreUIAuthoringDirectivesModule
            }), ExploreUIAuthoringDirectivesModule.\u0275inj = core["\u0275\u0275defineInjector"]({}), 
            ExploreUIAuthoringDirectivesModule;
        }(), tslib_es6 = __webpack_require__(81337), fesm2022_forms = __webpack_require__(17174), verticalPosition = __webpack_require__(18765), horizontalPosition = __webpack_require__(92374), textAlignment = __webpack_require__(19650), Utility = __webpack_require__(38078), rx_form_control_component = __webpack_require__(72065), combineLatest = __webpack_require__(59017), map = __webpack_require__(14172), shareReplay = __webpack_require__(57243), withLatestFrom = __webpack_require__(23558), filter = __webpack_require__(59973), high_contrast_css_generation_service = __webpack_require__(64647), localization_service = __webpack_require__(65181), common = __webpack_require__(77476), pbi_button_toggle_component = __webpack_require__(53240), pbi_button_toggle_group_component = __webpack_require__(64713), pbi_icon_component = __webpack_require__(86663), tooltip_directive = __webpack_require__(1240);
        function AlignmentGroupComponent_pbi_button_toggle_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r3 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-button-toggle", 3), core["\u0275\u0275listener"]("valueChanged", function($event) {
                    var alignment_r1 = core["\u0275\u0275restoreView"](_r3).$implicit, ctx_r2 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r2.onSelectionChange.fn({
                        value: alignment_r1.name,
                        checked: $event
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementStart"](2, "label", 4), 
                core["\u0275\u0275text"](3), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "div", 5), 
                core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275elementStart"](7, "div", 6), 
                core["\u0275\u0275element"](8, "pbi-icon", 7), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var alignment_r1 = ctx.$implicit, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("checked", alignment_r1.name === core["\u0275\u0275pipeBind1"](1, 12, ctx_r0.selectedAlignment$))("supportsNoSelection", ctx_r0.supportsNoSelection)("aria-labelledby", ctx_r0.ariaLabelledby + " " + alignment_r1.id)("pbi-tooltip", alignment_r1.tooltip)("value", alignment_r1.name), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275attribute"]("id", alignment_r1.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](alignment_r1.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("disabled", core["\u0275\u0275pipeBind1"](5, 14, ctx_r0.isDisabled$))("selected", alignment_r1.name === core["\u0275\u0275pipeBind1"](6, 16, ctx_r0.selectedAlignment$)), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("name", alignment_r1.icon);
            }
        }
        var AlignmentGroupComponent = function(_super) {
            function AlignmentGroupComponent(highContrastCssGenerationService, localizationService) {
                var _this = _super.call(this) || this;
                return _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.localizationService = localizationService, _this.supportsNoSelection = !1, 
                _this.onAlignmentGroupChange = new core.EventEmitter, AlignmentGroupComponent.nextId++, 
                _this;
            }
            return (0, tslib_es6.__extends)(AlignmentGroupComponent, _super), AlignmentGroupComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$), 
                this.selectedAlignment$ = this.mergePropertyInputsAndFormControl(this.changes$("selectedAlignment"), this.value$, "selectedAlignment", this.onDestroy$), 
                this.alignmentOptions$ = (0, combineLatest.aj)([ this.changes$("mode"), this.changes$("supportsNoSelection", !0) ]).pipe((0, 
                map.U)(function(_a) {
                    return _this.getPositions(_a[0], _a[1]);
                }), (0, map.U)(function(positions) {
                    return _this.getAlignmentItems(positions);
                }), (0, shareReplay.d)(1)), this.onSelectionChange = this.createEventAdapter(), 
                this.onSelectionChange.$.pipe((0, withLatestFrom.M)(this.selectedAlignment$), (0, 
                filter.h)(function(_a) {
                    var event = _a[0], selectedAlignment = _a[1];
                    return event.checked && event.value !== selectedAlignment || _this.supportsNoSelection && event.value === selectedAlignment;
                })).subscribe(function(_a) {
                    var event = _a[0], newAlignment = event.checked ? event.value : textAlignment.H.auto;
                    _this.onAlignmentGroupChange.emit(newAlignment), _this.onValueChange(newAlignment), 
                    _this.onTouched();
                }), this.initializeHighContrastRules();
            }, AlignmentGroupComponent.prototype.getPositions = function(mode, supportsNoSelection) {
                return "verticalAlignment" === mode ? [ {
                    positionName: verticalPosition.Q4.top,
                    iconClass: "textaligntop",
                    localizationKey: "Top"
                }, {
                    positionName: verticalPosition.Q4.middle,
                    iconClass: "textalignmiddle",
                    localizationKey: "Middle"
                }, {
                    positionName: verticalPosition.Q4.bottom,
                    iconClass: "textalignbottom",
                    localizationKey: "Bottom"
                } ] : [ {
                    positionName: supportsNoSelection ? textAlignment.H.left : horizontalPosition.D.left,
                    iconClass: "alignleft",
                    localizationKey: "Visual_TextAlignment_Left"
                }, {
                    positionName: supportsNoSelection ? textAlignment.H.center : horizontalPosition.D.center,
                    iconClass: "aligncenter",
                    localizationKey: "Visual_TextAlignment_Center"
                }, {
                    positionName: supportsNoSelection ? textAlignment.H.right : horizontalPosition.D.right,
                    iconClass: "alignright",
                    localizationKey: "Visual_TextAlignment_Right"
                } ];
            }, AlignmentGroupComponent.prototype.getAlignmentItems = function(positions) {
                var _this = this;
                return positions.map(function(position) {
                    return {
                        name: position.positionName,
                        icon: position.iconClass,
                        tooltip: {
                            tooltipDisable: !1,
                            tooltipTitle: _this.localizationService.get(position.localizationKey),
                            tooltipShowOnFocus: !0
                        },
                        ariaLabel: _this.getAriaLabel(_this.mode, position.localizationKey),
                        id: _this.getAlignmentId(_this.mode, position.localizationKey)
                    };
                });
            }, AlignmentGroupComponent.prototype.getAriaLabel = function(mode, position) {
                return this.localizationService.get("verticalAlignment" === mode ? "Visual_Alignment_Vertical" : "Visual_Alignment_Horizontal") + " " + this.localizationService.get(position);
            }, AlignmentGroupComponent.prototype.getAlignmentId = function(mode, position) {
                return (0, Utility.Jj)(("verticalAlignment" === mode ? "vertical" : "horizontal") + "-" + position + "-" + AlignmentGroupComponent.nextId);
            }, AlignmentGroupComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".alignment-group.themeableElement button .outer.selected *", "{ background: @selectedBackgroundColor !important; color: @selectedForegroundColor !important; border-color: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".alignment-group.themeableElement button:hover, .alignment-group.themeableElement button:focus", "{ background: transparent !important; }"), 
                this.highContrastCssGenerationService.addRule(".alignment-group.themeableElement button .outer:hover:not(.selected)", "{ background: @selectedBackgroundColor !important; }");
            }, AlignmentGroupComponent.nextId = 0, AlignmentGroupComponent.\u0275fac = function(t) {
                return new (t || AlignmentGroupComponent)(core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](localization_service.o));
            }, AlignmentGroupComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: AlignmentGroupComponent,
                selectors: [ [ "alignment-group" ] ],
                inputs: {
                    selectedAlignment: "selectedAlignment",
                    mode: "mode",
                    isDisabled: "isDisabled",
                    supportsNoSelection: "supportsNoSelection",
                    ariaLabelledby: [ "aria-labelledby", "ariaLabelledby" ]
                },
                outputs: {
                    onAlignmentGroupChange: "onAlignmentGroupChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return AlignmentGroupComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 5,
                vars: 6,
                consts: [ [ 1, "alignment-group", "themeableElement" ], [ 3, "disabled" ], [ 3, "checked", "supportsNoSelection", "aria-labelledby", "pbi-tooltip", "value", "valueChanged", 4, "ngFor", "ngForOf" ], [ 3, "checked", "supportsNoSelection", "aria-labelledby", "pbi-tooltip", "value", "valueChanged" ], [ 1, "alignment-icon-label" ], [ 1, "outer" ], [ 1, "content" ], [ "size", "small", 1, "alignment-icon", 3, "name" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0)(1, "pbi-button-toggle-group", 1), 
                    core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, AlignmentGroupComponent_pbi_button_toggle_3_Template, 9, 18, "pbi-button-toggle", 2), 
                    core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("disabled", core["\u0275\u0275pipeBind1"](2, 2, ctx.isDisabled$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](4, 4, ctx.alignmentOptions$)));
                },
                dependencies: [ common.NgForOf, pbi_button_toggle_component.I, pbi_button_toggle_group_component.J, pbi_icon_component._, tooltip_directive.i, common.AsyncPipe ],
                styles: [ 'pbi-button-toggle[_ngcontent-%COMP%]:first-child   .outer[_ngcontent-%COMP%]{margin-left:0}pbi-button-toggle[_ngcontent-%COMP%]:last-child   .outer[_ngcontent-%COMP%]{margin-right:0}.alignment-group[_ngcontent-%COMP%]{--alignment-group-button-background-color: var(--fluent-theme-white-color);--alignment-group-button-hover-background-color: var(--gray-40, #E1DFDD);--alignment-group-button-active-background-color: var(--gray-50, #D2D0CE);--alignment-group-button-disabled-background-color: var(--gray-20, #F3F2F1);--alignment-group-button-border-color: var(--gray-110, #8A8886);--alignment-group-button-border-disabled-color: var(--gray-20, #F3F2F1)}  [data-legacy-theming=false] .alignment-group{--alignment-group-button-background-color: var(--colorNeutralBackground1);--alignment-group-button-hover-background-color: var(--colorNeutralBackground1Hover);--alignment-group-button-active-background-color: var(--colorNeutralBackground3);--alignment-group-button-disabled-background-color: var(--colorNeutralBackgroundDisabled);--alignment-group-button-border-color: var(--colorNeutralStroke1);--alignment-group-button-border-disabled-color: var(--colorNeutralStrokeDisabled)}.alignment-group[_ngcontent-%COMP%]   .alignment-icon-label[_ngcontent-%COMP%]{display:none}.alignment-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]{cursor:pointer;border-radius:2px;border:1px solid var(--alignment-group-button-border-color);margin:2px;padding:2px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);background:var(--formatting-card-background-color)}.alignment-group[_ngcontent-%COMP%]   .outer.disabled[_ngcontent-%COMP%]{background:var(--alignment-group-button-disabled-background-color);border-color:var(--alignment-group-button-border-disabled-color);pointer-events:none}.alignment-group[_ngcontent-%COMP%]   .outer.disabled[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D)}pbi-button-toggle[disabled][_ngcontent-%COMP%]   .alignment-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]{background-color:var(--gray-30, #EDEBE9)}.alignment-group[_ngcontent-%COMP%]   .outer.selected[_ngcontent-%COMP%]{background:var(--alignment-group-button-active-background-color)}.alignment-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:hover:not(.selected):not(.disabled){background:var(--alignment-group-button-hover-background-color)}.alignment-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:focus{outline:none}.alignment-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{padding:2px}.alignment-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%]{height:18px;width:18px;display:flex;align-items:center;justify-content:center}html[data-focus-source="key"][_nghost-%COMP%]   .alignment-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within   .content[_ngcontent-%COMP%], html[data-focus-source="key"]   [_nghost-%COMP%]   .alignment-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within   .content[_ngcontent-%COMP%]{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}' ],
                changeDetection: 0
            }), AlignmentGroupComponent;
        }(rx_form_control_component.N), debug = __webpack_require__(62458), Double = __webpack_require__(41640), sqExpr = __webpack_require__(94419), sqExprStaticMembers = __webpack_require__(74082), sqExprEqualityVisitor = __webpack_require__(45413), field_picker_modern_lazy_component = __webpack_require__(67930), localize_directive = __webpack_require__(59968), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529), pbi_spin_button_component = __webpack_require__(78173), injection_tokens = __webpack_require__(8902), pbi_toggle_button_component = __webpack_require__(64734);
        function ToggleSwitchModernComponent_span_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 4), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](2, 1, ctx_r0.toggle$) ? "On" : "Off");
            }
        }
        function ToggleSwitchModernComponent_pbi_icon_4_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "pbi-icon", 5);
        }
        function ToggleSwitchModernComponent_span_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span"), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](ctx_r2.toggleLabel);
            }
        }
        var ToggleSwitchModernComponent = function(_super) {
            function ToggleSwitchModernComponent(highContrastCssGenerationService, localizationService) {
                var _this = _super.call(this) || this;
                return _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.localizationService = localizationService, _this.onToggleChange = new core.EventEmitter, 
                _this.initializeHighContrastRules(), _this;
            }
            return (0, tslib_es6.__extends)(ToggleSwitchModernComponent, _super), ToggleSwitchModernComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.showToggleText = !!this.localizationService.currentLanguageLocale.startsWith("en-"), 
                this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$), 
                this.toggleEvent = this.createEventAdapter(), this.toggle$ = this.mergePropertyInputsAndFormControl(this.changes$("toggle"), this.value$, "toggle", this.onDestroy$), 
                this.toggleEvent.$.subscribe(function(event) {
                    _this.onToggleChange.emit(event.checked), _this.onValueChange(event.checked), _this.onTouched();
                });
            }, ToggleSwitchModernComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".pbi-toggle-button.checked .pbi-toggle-button-internal:not(.disabled) .pbi-toggle-button-input:checked + section div.pbi-toggle-button-circle", "{ background-color: transparent !important; border-color: @buttonForegroundColor !important; }");
            }, ToggleSwitchModernComponent.\u0275fac = function(t) {
                return new (t || ToggleSwitchModernComponent)(core["\u0275\u0275directiveInject"](injection_tokens.Mi), core["\u0275\u0275directiveInject"](localization_service.o));
            }, ToggleSwitchModernComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ToggleSwitchModernComponent,
                selectors: [ [ "toggle-switch-modern" ] ],
                inputs: {
                    toggle: "toggle",
                    ariaLabelledby: "ariaLabelledby",
                    ariaDescribedby: "ariaDescribedby",
                    toggleLabel: "toggleLabel",
                    isDisabled: "isDisabled"
                },
                outputs: {
                    onToggleChange: "onToggleChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return ToggleSwitchModernComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 7,
                vars: 14,
                consts: [ [ "data-testid", "toggle-switch-modern", 3, "compact", "aria-labelledby", "aria-describedby", "checked", "disabled", "change" ], [ "class", "toggle-text", "inlineToggleContent", "", 4, "ngIf" ], [ "class", "toggle-icon", "inlineToggleContent", "", "name", "toggle-button-check", "size", "mini", 4, "ngIf" ], [ 4, "ngIf" ], [ "inlineToggleContent", "", 1, "toggle-text" ], [ "inlineToggleContent", "", "name", "toggle-button-check", "size", "mini", 1, "toggle-icon" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-toggle-button", 0), core["\u0275\u0275listener"]("change", function($event) {
                        return ctx.toggleEvent.fn($event);
                    }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                    core["\u0275\u0275template"](3, ToggleSwitchModernComponent_span_3_Template, 3, 3, "span", 1), 
                    core["\u0275\u0275template"](4, ToggleSwitchModernComponent_pbi_icon_4_Template, 1, 0, "pbi-icon", 2), 
                    core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275template"](6, ToggleSwitchModernComponent_span_6_Template, 2, 1, "span", 3), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275property"]("compact", !0)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedby)("checked", core["\u0275\u0275pipeBind1"](1, 8, ctx.toggle$))("disabled", core["\u0275\u0275pipeBind1"](2, 10, ctx.isDisabled$)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx.showToggleText), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx.showToggleText && core["\u0275\u0275pipeBind1"](5, 12, ctx.toggle$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.toggleLabel));
                },
                dependencies: [ common.NgIf, pbi_icon_component._, pbi_toggle_button_component.d, common.AsyncPipe ],
                encapsulation: 2,
                changeDetection: 0
            }), ToggleSwitchModernComponent;
        }(rx_form_control_component.N);
        function ErrorRangeComponent_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 8), core["\u0275\u0275element"](1, "span", 4), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var mode_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", mode_r5), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("localize", mode_r5.displayNameKey);
            }
        }
        var _c0 = function(a0) {
            return {
                expr: a0
            };
        };
        function ErrorRangeComponent_div_7_section_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r9 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "section"), core["\u0275\u0275element"](1, "div", 15), 
                core["\u0275\u0275elementStart"](2, "field-picker-modern-lazy", 11), core["\u0275\u0275listener"]("onExprChange", function($event) {
                    core["\u0275\u0275restoreView"](_r9);
                    var ctx_r8 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r8.onLowerBoundChanged(null == $event.newExpr ? null : $event.newExpr.expr));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("disabled", ctx_r6.isDisabled), 
                core["\u0275\u0275property"]("localize", "Visual_Confidence_Band_Lower"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("initialExpr", ctx_r6.lowerBoundField ? core["\u0275\u0275pureFunction1"](9, _c0, ctx_r6.lowerBoundField) : void 0)("validators", ctx_r6.validators)("allowMultipleValues", !1)("disabled", ctx_r6.isDisabled)("ariaLabelledby", "lowerBoundLabel")("withFieldList", !0);
            }
        }
        function ErrorRangeComponent_div_7_section_5_pbi_dropdown_item_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 8), core["\u0275\u0275element"](1, "span", 4), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var relationship_r11 = ctx.$implicit;
                core["\u0275\u0275property"]("value", relationship_r11), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("localize", relationship_r11.displayNameKey);
            }
        }
        function ErrorRangeComponent_div_7_section_5_Template(rf, ctx) {
            if (1 & rf) {
                var _r13 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "section"), core["\u0275\u0275element"](1, "div", 16), 
                core["\u0275\u0275elementStart"](2, "pbi-dropdown", 17), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r13);
                    var ctx_r12 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r12.onRelationshipChanged($event));
                }), core["\u0275\u0275elementStart"](3, "pbi-dropdown-trigger"), core["\u0275\u0275element"](4, "span", 4), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](5, ErrorRangeComponent_div_7_section_5_pbi_dropdown_item_5_Template, 2, 2, "pbi-dropdown-item", 5), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r7 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("disabled", ctx_r7.isDisabled), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("value", ctx_r7.currentRelationship)("compact", !0)("aria-labelledby", "relationshipLabel")("isDisabled", ctx_r7.isDisabled), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("localize", ctx_r7.currentRelationship.displayNameKey), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r7.relationships);
            }
        }
        function ErrorRangeComponent_div_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r15 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 9)(1, "section"), core["\u0275\u0275element"](2, "div", 10), 
                core["\u0275\u0275elementStart"](3, "field-picker-modern-lazy", 11), core["\u0275\u0275listener"]("onExprChange", function($event) {
                    core["\u0275\u0275restoreView"](_r15);
                    var ctx_r14 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r14.onUpperBoundChanged(null == $event.newExpr ? null : $event.newExpr.expr));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](4, ErrorRangeComponent_div_7_section_4_Template, 3, 11, "section", 7), 
                core["\u0275\u0275template"](5, ErrorRangeComponent_div_7_section_5_Template, 6, 8, "section", 7), 
                core["\u0275\u0275elementStart"](6, "section", 12), core["\u0275\u0275element"](7, "div", 13), 
                core["\u0275\u0275elementStart"](8, "toggle-switch-modern", 14), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r15);
                    var ctx_r16 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r16.isSymmetrical = $event);
                })("ngModelChange", function() {
                    core["\u0275\u0275restoreView"](_r15);
                    var ctx_r17 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r17.onSymmetricalChange());
                }), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx_r1.isDisabled), 
                core["\u0275\u0275property"]("localize", "Visual_Confidence_Band_Upper"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("initialExpr", ctx_r1.upperBoundField ? core["\u0275\u0275pureFunction1"](16, _c0, ctx_r1.upperBoundField) : void 0)("validators", ctx_r1.validators)("allowMultipleValues", !1)("disabled", ctx_r1.isDisabled)("ariaLabelledby", "upperBoundLabel")("withFieldList", !0), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r1.isSymmetrical), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r1.isSymmetrical), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx_r1.isDisabled), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaLabelledby", "symmetricalLabel")("disabled", ctx_r1.isDisabled)("ngModel", ctx_r1.isSymmetrical);
            }
        }
        var _c1 = function() {
            return {
                unitSymbol: "Slider_Percent",
                minValue: 0,
                maxValue: 1e3
            };
        };
        function ErrorRangeComponent_div_8_Template(rf, ctx) {
            if (1 & rf) {
                var _r19 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div")(1, "section"), core["\u0275\u0275element"](2, "div", 18), 
                core["\u0275\u0275elementStart"](3, "pbi-spin-button", 19), core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r18 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r18.focusChanged.emit($event));
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r20 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r20.onUpperPercentageChanged($event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](4, "section"), 
                core["\u0275\u0275element"](5, "div", 20), core["\u0275\u0275elementStart"](6, "pbi-spin-button", 19), 
                core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r21 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r21.focusChanged.emit($event));
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r22 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r22.onLowerPercentageChanged($event));
                }), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx_r2.isDisabled), 
                core["\u0275\u0275property"]("localize", "Visual_Confidence_Band_Upper"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("labelId", "percentageUpperLabel")("ngModel", ctx_r2.upperBoundPercentage)("disabled", ctx_r2.isDisabled)("options", core["\u0275\u0275pureFunction0"](16, _c1))("unitSymbolAfterInput", !0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx_r2.isDisabled), 
                core["\u0275\u0275property"]("localize", "Visual_Confidence_Band_Lower"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("labelId", "percentageLowerLabel")("ngModel", ctx_r2.lowerBoundPercentage)("disabled", ctx_r2.isDisabled)("options", core["\u0275\u0275pureFunction0"](17, _c1))("unitSymbolAfterInput", !0);
            }
        }
        var _c2 = function() {
            return {
                unitSymbol: "Slider_Percent",
                minValue: 0,
                maxValue: 100
            };
        };
        function ErrorRangeComponent_div_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r24 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div")(1, "section"), core["\u0275\u0275element"](2, "div", 21), 
                core["\u0275\u0275elementStart"](3, "pbi-spin-button", 19), core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r24);
                    var ctx_r23 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r23.focusChanged.emit($event));
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r24);
                    var ctx_r25 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r25.onUpperPercentileChanged($event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](4, "section"), 
                core["\u0275\u0275element"](5, "div", 22), core["\u0275\u0275elementStart"](6, "pbi-spin-button", 19), 
                core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r24);
                    var ctx_r26 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r26.focusChanged.emit($event));
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r24);
                    var ctx_r27 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r27.onLowerPercentileChanged($event));
                }), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx_r3.isDisabled), 
                core["\u0275\u0275property"]("localize", "Visual_Confidence_Band_Upper"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("labelId", "percentileUpperLabel")("ngModel", ctx_r3.upperBoundPercentile)("disabled", ctx_r3.isDisabled)("options", core["\u0275\u0275pureFunction0"](16, _c2))("unitSymbolAfterInput", !0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx_r3.isDisabled), 
                core["\u0275\u0275property"]("localize", "Visual_Confidence_Band_Lower"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("labelId", "percentileLowerLabel")("ngModel", ctx_r3.lowerBoundPercentile)("disabled", ctx_r3.isDisabled)("options", core["\u0275\u0275pureFunction0"](17, _c2))("unitSymbolAfterInput", !0);
            }
        }
        var _c3 = function() {
            return {
                minValue: 0,
                maxValue: 100
            };
        };
        function ErrorRangeComponent_div_10_Template(rf, ctx) {
            if (1 & rf) {
                var _r29 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div")(1, "section"), core["\u0275\u0275element"](2, "div", 23), 
                core["\u0275\u0275elementStart"](3, "pbi-spin-button", 24), core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r29);
                    var ctx_r28 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r28.focusChanged.emit($event));
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r29);
                    var ctx_r30 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r30.onstandardDeviationMultiplierChanged($event));
                }), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx_r4.isDisabled), 
                core["\u0275\u0275property"]("localize", "ErrorRange_StandardDeviations"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("labelId", "standardDeviationMultiplierLabel")("ngModel", ctx_r4.standardDeviationMultiplier)("disabled", ctx_r4.isDisabled)("options", core["\u0275\u0275pureFunction0"](7, _c3));
            }
        }
        var ErrorRangeComponent = function() {
            function ErrorRangeComponent() {
                this.focusChanged = new core.EventEmitter, this.onValueChanged = new core.EventEmitter, 
                this.modeExplicit = {
                    displayNameKey: "ErrorRange_Mode_Explicit"
                }, this.modePercentage = {
                    displayNameKey: "ErrorRange_Mode_Percentage"
                }, this.modePercentile = {
                    displayNameKey: "ErrorRange_Mode_Percentile"
                }, this.modeStandardDeviation = {
                    displayNameKey: "ErrorRange_Mode_StandardDeviation"
                }, this.relationAbsolute = {
                    displayNameKey: "Visual_Absolute",
                    isRelative: !1
                }, this.relationRelative = {
                    displayNameKey: "Visual_Relative",
                    isRelative: !0
                }, this.relationships = [ this.relationAbsolute, this.relationRelative ];
            }
            return ErrorRangeComponent.prototype.ngOnInit = function() {
                this.reset(), this.parseErrorRange();
            }, ErrorRangeComponent.prototype.ngOnChanges = function(changes) {
                (changes.initialExpr || changes.targetMeasure) && (this.reset(), this.parseErrorRange());
            }, ErrorRangeComponent.prototype.reset = function() {
                this.currentMode = this.modeExplicit, this.modes = [ this.modeExplicit ], this.modes.push(this.modePercentage), 
                debug.fF.assertValue(this.targetMeasure, "Error ranges must have a target measure"), 
                (0, sqExprStaticMembers.iV)(this.targetMeasure) ? (this.modes.push(this.modePercentile, this.modeStandardDeviation), 
                this.unaggregatedMeasure = this.targetMeasure.arg) : this.unaggregatedMeasure = void 0, 
                this.upperBoundField = void 0, this.lowerBoundField = void 0, this.currentRelationship = this.relationships[0], 
                this.isSymmetrical = !1, this.lowerBoundPercentage = 10, this.upperBoundPercentage = 10, 
                this.lowerBoundPercentile = 10, this.upperBoundPercentile = 90, this.standardDeviationMultiplier = 1;
            }, ErrorRangeComponent.prototype.parseErrorRange = function() {
                var range = this.initialExpr;
                range && (range.explicit ? this.parseExplicitErrorRange(range.explicit) : range.symmetricalExplicit ? this.parseSymmetricalRange(range.symmetricalExplicit) : range.percentage ? this.parsePercentageRange(range.percentage) : range.percentile ? this.parsePercentileRange(range.percentile) : range.standardDeviation ? this.parseStandardDeviationRange(range.standardDeviation) : debug.fF.assertFail("Unexpected error range"));
            }, ErrorRangeComponent.prototype.parseExplicitErrorRange = function(range) {
                this.currentMode = this.modeExplicit, this.lowerBoundField = range.lowerBound, this.upperBoundField = range.upperBound, 
                this.isSymmetrical = !1;
                var isRelativeExpr = range.isRelative, isRelative = !!isRelativeExpr && sqExpr.jz.getBooleanValue(isRelativeExpr);
                this.currentRelationship = this.relationships.find(function(r) {
                    return r.isRelative === isRelative;
                });
            }, ErrorRangeComponent.prototype.parseSymmetricalRange = function(range) {
                this.currentMode = this.modeExplicit, this.lowerBoundField = void 0, this.upperBoundField = range.delta, 
                this.isSymmetrical = !0;
            }, ErrorRangeComponent.prototype.parsePercentageRange = function(range) {
                this.currentMode = this.modePercentage, debug.fF.assert(function() {
                    return (0, sqExprStaticMembers.VC)(range.lowerBoundDelta) && (0, sqExprStaticMembers.VC)(range.upperBoundDelta);
                }, "Percentage error-range bounds are expected to be Constant"), this.lowerBoundPercentage = (0, 
                Double.oI)(100 * sqExpr.jz.getNumericValue(range.lowerBoundDelta)), this.upperBoundPercentage = (0, 
                Double.oI)(100 * sqExpr.jz.getNumericValue(range.upperBoundDelta));
            }, ErrorRangeComponent.prototype.parsePercentileRange = function(range) {
                debug.fF.assert(function() {
                    return (0, sqExprStaticMembers.T5)(range.lowerBound) && (0, sqExprStaticMembers.T5)(range.upperBound) && (0, 
                    sqExprEqualityVisitor.fS)(range.lowerBound, range.lowerBound);
                }, "Percentile error-range bounds are expected to be Percentiles over same column"), 
                this.currentMode = this.modePercentile, this.lowerBoundPercentile = (0, Double.oI)(100 * range.lowerBound.k), 
                this.upperBoundPercentile = (0, Double.oI)(100 * range.upperBound.k);
            }, ErrorRangeComponent.prototype.parseStandardDeviationRange = function(range) {
                this.currentMode = this.modeStandardDeviation, debug.fF.assert(function() {
                    return (0, sqExprStaticMembers.iV)(range.value) && 7 === range.value.func;
                }, "Standard-Deviation error-range is expected to be StandardDeviation aggregate"), 
                debug.fF.assert(function() {
                    return (0, sqExprStaticMembers.VC)(range.multiplier);
                }, "Standard-Deviation error-range multiplier is expected to be Constant"), this.standardDeviationMultiplier = sqExpr.jz.getNumericValue(range.multiplier);
            }, ErrorRangeComponent.prototype.updateErrorRange = function() {
                var newValue;
                switch (this.currentMode) {
                  case this.modeExplicit:
                    newValue = this.isSymmetrical ? this.createSymmetricalRange() : this.createExplicitRange();
                    break;

                  case this.modePercentage:
                    newValue = this.createPercentageRange();
                    break;

                  case this.modePercentile:
                    newValue = this.createPercentileRange();
                    break;

                  case this.modeStandardDeviation:
                    newValue = this.createStandardDeviationRange();
                }
                this.onValueChanged.emit(newValue);
            }, ErrorRangeComponent.prototype.createExplicitRange = function() {
                if (this.lowerBoundField || this.upperBoundField) return {
                    kind: "ErrorRange",
                    explicit: {
                        lowerBound: this.lowerBoundField,
                        upperBound: this.upperBoundField,
                        isRelative: (0, sqExpr.O7)(this.currentRelationship.isRelative)
                    }
                };
            }, ErrorRangeComponent.prototype.createSymmetricalRange = function() {
                if (this.upperBoundField) return {
                    kind: "ErrorRange",
                    symmetricalExplicit: {
                        delta: this.upperBoundField
                    }
                };
            }, ErrorRangeComponent.prototype.createPercentageRange = function() {
                if (null != this.lowerBoundPercentage && null != this.upperBoundPercentage) return {
                    kind: "ErrorRange",
                    percentage: {
                        lowerBoundDelta: (0, sqExpr.tx)(this.lowerBoundPercentage / 100),
                        upperBoundDelta: (0, sqExpr.tx)(this.upperBoundPercentage / 100)
                    }
                };
            }, ErrorRangeComponent.prototype.createPercentileRange = function() {
                if (debug.fF.assertValue(this.unaggregatedMeasure, "Percentile error-range should be disabled for non-aggregate measures"), 
                null != this.lowerBoundPercentage && null != this.upperBoundPercentage) return {
                    kind: "ErrorRange",
                    percentile: {
                        lowerBound: (0, sqExpr.Pe)(this.unaggregatedMeasure, Math.max(0, Math.min(100, this.lowerBoundPercentile)) / 100, !1),
                        upperBound: (0, sqExpr.Pe)(this.unaggregatedMeasure, Math.max(0, Math.min(100, this.upperBoundPercentile)) / 100, !1)
                    }
                };
            }, ErrorRangeComponent.prototype.createStandardDeviationRange = function() {
                if (debug.fF.assertValue(this.unaggregatedMeasure, "StdDev error-range should be disabled for non-aggregate measures"), 
                null != this.standardDeviationMultiplier) return {
                    kind: "ErrorRange",
                    standardDeviation: {
                        value: (0, sqExpr.m_)(this.unaggregatedMeasure, 7),
                        multiplier: (0, sqExpr.tx)(this.standardDeviationMultiplier)
                    }
                };
            }, ErrorRangeComponent.prototype.onModeChanged = function(value) {
                this.reset(), this.currentMode = value, this.updateErrorRange();
            }, ErrorRangeComponent.prototype.onLowerBoundChanged = function(newExpr) {
                (0, sqExprEqualityVisitor.fS)(newExpr, this.lowerBoundField) || (this.lowerBoundField = newExpr, 
                this.updateErrorRange());
            }, ErrorRangeComponent.prototype.onUpperBoundChanged = function(newExpr) {
                (0, sqExprEqualityVisitor.fS)(newExpr, this.upperBoundField) || (this.upperBoundField = newExpr, 
                this.updateErrorRange());
            }, ErrorRangeComponent.prototype.onRelationshipChanged = function(value) {
                this.currentRelationship = value, (this.lowerBoundField || this.upperBoundField) && this.updateErrorRange();
            }, ErrorRangeComponent.prototype.onSymmetricalChange = function() {
                (this.upperBoundField || !this.isSymmetrical && this.lowerBoundField) && this.updateErrorRange();
            }, ErrorRangeComponent.prototype.onUpperPercentageChanged = function(newValue) {
                this.upperBoundPercentage = newValue, this.updateErrorRange();
            }, ErrorRangeComponent.prototype.onLowerPercentageChanged = function(newValue) {
                this.lowerBoundPercentage = newValue, this.updateErrorRange();
            }, ErrorRangeComponent.prototype.onUpperPercentileChanged = function(newValue) {
                this.upperBoundPercentile = newValue, this.updateErrorRange();
            }, ErrorRangeComponent.prototype.onLowerPercentileChanged = function(newValue) {
                this.lowerBoundPercentile = newValue, this.updateErrorRange();
            }, ErrorRangeComponent.prototype.onstandardDeviationMultiplierChanged = function(newValue) {
                this.standardDeviationMultiplier = newValue, this.updateErrorRange();
            }, ErrorRangeComponent.\u0275fac = function(t) {
                return new (t || ErrorRangeComponent);
            }, ErrorRangeComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ErrorRangeComponent,
                selectors: [ [ "error-range" ] ],
                inputs: {
                    ariaLabelledby: [ "aria-labelledby", "ariaLabelledby" ],
                    ariaDescribedby: [ "aria-describedby", "ariaDescribedby" ],
                    isDisabled: "isDisabled",
                    initialExpr: "initialExpr",
                    validators: "validators",
                    targetMeasure: "targetMeasure"
                },
                outputs: {
                    focusChanged: "focusChanged",
                    onValueChanged: "onValueChanged"
                },
                features: [ core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 11,
                vars: 14,
                consts: [ [ "role", "group", "focus-nav-mode", "Browser", 1, "error-range", "themeableElement" ], [ "id", "mode-container" ], [ "id", "modeLabel", 1, "label", 3, "localize" ], [ 3, "value", "compact", "aria-labelledby", "valueChange" ], [ 3, "localize" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ "id", "explicit-container", 4, "ngIf" ], [ 4, "ngIf" ], [ 3, "value" ], [ "id", "explicit-container" ], [ "id", "upperBoundLabel", 1, "label", 3, "localize" ], [ 3, "initialExpr", "validators", "allowMultipleValues", "disabled", "ariaLabelledby", "withFieldList", "onExprChange" ], [ "id", "symmetricalSection" ], [ "id", "symmetricalLabel", "localize", "ErrorRange_Symmetrical", 1, "label" ], [ 3, "ariaLabelledby", "disabled", "ngModel", "ngModelChange" ], [ "id", "lowerBoundLabel", 1, "label", 3, "localize" ], [ "id", "relationshipLabel", "localize", "Visual_Confidence_Band_Mode", 1, "label" ], [ 3, "value", "compact", "aria-labelledby", "isDisabled", "valueChange" ], [ "id", "percentageUpperLabel", 1, "label", 3, "localize" ], [ 1, "control-width", 3, "labelId", "ngModel", "disabled", "options", "unitSymbolAfterInput", "focusChange", "ngModelChange" ], [ "id", "percentageLowerLabel", 1, "label", 3, "localize" ], [ "id", "percentileUpperLabel", 1, "label", 3, "localize" ], [ "id", "percentileLowerLabel", 1, "label", 3, "localize" ], [ "id", "standardDeviationMultiplierLabel", 1, "label", 3, "localize" ], [ 1, "control-width", 3, "labelId", "ngModel", "disabled", "options", "focusChange", "ngModelChange" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0)(1, "section", 1), core["\u0275\u0275element"](2, "div", 2), 
                    core["\u0275\u0275elementStart"](3, "pbi-dropdown", 3), core["\u0275\u0275listener"]("valueChange", function($event) {
                        return ctx.onModeChanged($event);
                    }), core["\u0275\u0275elementStart"](4, "pbi-dropdown-trigger"), core["\u0275\u0275element"](5, "span", 4), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](6, ErrorRangeComponent_pbi_dropdown_item_6_Template, 2, 2, "pbi-dropdown-item", 5), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](7, ErrorRangeComponent_div_7_Template, 9, 18, "div", 6), 
                    core["\u0275\u0275template"](8, ErrorRangeComponent_div_8_Template, 7, 18, "div", 7), 
                    core["\u0275\u0275template"](9, ErrorRangeComponent_div_9_Template, 7, 18, "div", 7), 
                    core["\u0275\u0275template"](10, ErrorRangeComponent_div_10_Template, 4, 8, "div", 7), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", ctx.isDisabled), 
                    core["\u0275\u0275property"]("localize", "Type"), core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275classProp"]("disabled", ctx.isDisabled), core["\u0275\u0275property"]("value", ctx.currentMode)("compact", !0)("aria-labelledby", "modeLabel"), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("localize", ctx.currentMode.displayNameKey), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx.modes), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.currentMode == ctx.modeExplicit), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.currentMode == ctx.modePercentage), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.currentMode == ctx.modePercentile), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.currentMode == ctx.modeStandardDeviation));
                },
                dependencies: [ common.NgForOf, common.NgIf, field_picker_modern_lazy_component.m, fesm2022_forms.JJ, fesm2022_forms.On, localize_directive.X, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_spin_button_component.a, ToggleSwitchModernComponent ],
                styles: [ '.label[_ngcontent-%COMP%]{margin-bottom:4px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.label.disabled[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D)}section[_ngcontent-%COMP%]{margin-bottom:8px}section[_ngcontent-%COMP%]   .control-width[_ngcontent-%COMP%]{max-width:100%}pbi-dropdown[_ngcontent-%COMP%]{width:100%}#symmetricalSection[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-between;width:100%}#symmetricalSection[_ngcontent-%COMP%]   .label[_ngcontent-%COMP%]{flex-grow:1}#symmetricalSection[_ngcontent-%COMP%]   toggle-switch-modern[_ngcontent-%COMP%]{flex:none}' ],
                changeDetection: 0
            }), ErrorRangeComponent;
        }(), rx_component = __webpack_require__(73221), takeUntil = __webpack_require__(83317), pluck = __webpack_require__(6181), distinctUntilChanged = __webpack_require__(77526), font_picker_component = __webpack_require__(91146), pbi_tooltip_directive = __webpack_require__(36858), font_control_component_c0 = [ "numUpDown" ], font_control_component_c1 = [ "pbiButtonToggle" ], font_control_component_c2 = function(a0) {
            return {
                warning: a0
            };
        };
        function FontControlComponent_div_0_ng_container_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r5 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "pbi-spin-button", 8, 9), 
                core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r5);
                    var ctx_r4 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r4.fontSizeFocusChanged.emit($event));
                }), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](7, font_control_component_c2, core["\u0275\u0275pipeBind1"](3, 5, ctx_r1.isFontSizeWarning$)))("formControl", ctx_r1.fontPropertiesFormGroup.get("fontSize"))("ariaLabel", ctx_r1.ariaLabel.fontSize)("options", ctx_r1.fontSizeFormatOption)("inputName", "fontSize");
            }
        }
        function FontControlComponent_div_0_ng_container_6_ng_container_1_pbi_button_toggle_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-button-toggle", 11, 12)(2, "div", 13)(3, "div", 14), 
            core["\u0275\u0275element"](4, "i", 15), core["\u0275\u0275elementEnd"]()()()), 
            2 & rf) {
                var fontFormControl_r8 = core["\u0275\u0275nextContext"]().ngIf, property_r6 = core["\u0275\u0275nextContext"]().$implicit, ctx_r9 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("formControl", fontFormControl_r8)("aria-label", ctx_r9.ariaLabel[property_r6])("value", property_r6)("pbiTooltip", ctx_r9.ariaLabel[property_r6])("pbiTooltipDisabled", fontFormControl_r8.disabled), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("selected", fontFormControl_r8.value)("disabled", fontFormControl_r8.disabled), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngClass", "pbi-glyph-" + property_r6);
            }
        }
        function FontControlComponent_div_0_ng_container_6_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FontControlComponent_div_0_ng_container_6_ng_container_1_pbi_button_toggle_1_Template, 5, 10, "pbi-button-toggle", 10), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var fontFormControl_r8 = ctx.ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", void 0 !== fontFormControl_r8.value);
            }
        }
        function FontControlComponent_div_0_ng_container_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FontControlComponent_div_0_ng_container_6_ng_container_1_Template, 2, 1, "ng-container", 4), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var property_r6 = ctx.$implicit, ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r2.fontPropertiesFormGroup.get(property_r6));
            }
        }
        function FontControlComponent_div_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 1)(1, "div", 2), core["\u0275\u0275element"](2, "font-picker", 3), 
            core["\u0275\u0275template"](3, FontControlComponent_div_0_ng_container_3_Template, 4, 9, "ng-container", 4), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "div", 5)(5, "pbi-button-toggle-group", 6), 
            core["\u0275\u0275template"](6, FontControlComponent_div_0_ng_container_6_Template, 2, 1, "ng-container", 7), 
            core["\u0275\u0275elementEnd"]()()()), 2 & rf) {
                var tmp_5_0, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("compact", !0)("showFullContent", !0)("ariaLabelledby", ctx_r0.ariaLabelledby)("ariaDescribedby", ctx_r0.ariaDescribedby)("formControl", ctx_r0.fontPropertiesFormGroup.get("fontFamily")), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", void 0 !== (null == (tmp_5_0 = ctx_r0.fontPropertiesFormGroup.get("fontSize")) ? null : tmp_5_0.value)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngForOf", ctx_r0.BIU);
            }
        }
        var FontControlComponent = function(_super) {
            function FontControlComponent(controlContainer, highContrastCssGenerationService, localizationService) {
                var _this = _super.call(this) || this;
                return _this.controlContainer = controlContainer, _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.localizationService = localizationService, _this.fontSizeFocusChanged = new core.EventEmitter, 
                _this.valueChanged = new core.EventEmitter, _this.BIU = [ "bold", "italic", "underline" ], 
                _this;
            }
            return (0, tslib_es6.__extends)(FontControlComponent, _super), FontControlComponent.prototype.ngOnInit = function() {
                var _a, _this = this;
                this.fontPropertiesFormGroup = null === (_a = this.controlContainer) || void 0 === _a ? void 0 : _a.control, 
                debug.fF.assert(function() {
                    return !((_this.fontProperties || _this.isDisabled) && _this.fontPropertiesFormGroup);
                }, "you have added formGoup as well as fontProperties or isDisabled, please remove one"), 
                this.fontPropertiesFormGroup || (this.fontPropertiesFormGroup = new fesm2022_forms.nJ({}), 
                [ "fontFamily", "fontSize", "bold", "italic", "underline" ].forEach(function(key) {
                    return _this.createFormControl(key);
                }), this.changes$("isDisabled").subscribe(function(disabled) {
                    disabled && !_this.fontPropertiesFormGroup.disabled ? _this.fontPropertiesFormGroup.disable({
                        emitEvent: !1
                    }) : !disabled && _this.fontPropertiesFormGroup.disabled && _this.fontPropertiesFormGroup.enable({
                        emitEvent: !1
                    });
                })), this.ariaLabel = this.buildAriaLabel(), this.initializeHighContrastRules(), 
                this.isFontSizeWarning$ = this.changes$("warning", !0).pipe((0, map.U)(function(warning) {
                    var _a, _b;
                    return (null === (_a = null == warning ? void 0 : warning.source) || void 0 === _a ? void 0 : _a.propertyName) === (null === (_b = _this.fontSizeDescriptor) || void 0 === _b ? void 0 : _b.propertyName);
                }));
            }, FontControlComponent.prototype.createFormControl = function(key) {
                var _a, _this = this, formControl = new fesm2022_forms.p4(null === (_a = this.fontProperties) || void 0 === _a ? void 0 : _a[key]);
                this.fontPropertiesFormGroup.addControl(key, formControl), formControl.valueChanges.pipe((0, 
                filter.h)(function() {
                    return formControl.valid;
                }), (0, takeUntil.R)(this.onDestroy$)).subscribe(function(value) {
                    return _this.valueChanged.emit({
                        key,
                        value
                    });
                }), this.changes$("fontProperties").pipe((0, pluck.j)(key), (0, distinctUntilChanged.x)()).subscribe(function(value) {
                    return formControl.setValue(value, {
                        emitEvent: !1
                    });
                });
            }, FontControlComponent.prototype.buildAriaLabel = function() {
                return {
                    fontFamily: this.localizationService.get("Visual_FontFamily"),
                    fontSize: this.localizationService.get("FontSize"),
                    bold: this.localizationService.get("Bold"),
                    italic: this.localizationService.get("Italic"),
                    underline: this.localizationService.get("Underline")
                };
            }, FontControlComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".font-control.themeableElement .biu button .outer.selected", "{ background: @foregroundColor !important; border-color: @foregroundColor !important; color:  }"), 
                this.highContrastCssGenerationService.addRule(".font-control.themeableElement .biu button .outer.selected i", "{ color: @selectedForegroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".font-control.themeableElement .biu button:hover, .font-control.themeableElement .biu button:focus", "{ background: transparent !important; }"), 
                this.highContrastCssGenerationService.addRule(".font-control.themeableElement .biu button .outer:hover:not(.selected)", "{ background: @selectedBackgroundColor !important; }");
            }, FontControlComponent.\u0275fac = function(t) {
                return new (t || FontControlComponent)(core["\u0275\u0275directiveInject"](fesm2022_forms.gN, 8), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](localization_service.o));
            }, FontControlComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FontControlComponent,
                selectors: [ [ "font-control" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](font_control_component_c0, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](font_control_component_c1, 5, core.ElementRef)), 2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.numUpDown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.pbiButtonToggle = _t);
                    }
                },
                inputs: {
                    fontProperties: "fontProperties",
                    fontSizeFormatOption: "fontSizeFormatOption",
                    fontSizeDescriptor: "fontSizeDescriptor",
                    ariaLabelledby: "ariaLabelledby",
                    ariaDescribedby: "ariaDescribedby",
                    isDisabled: "isDisabled",
                    warning: "warning"
                },
                outputs: {
                    fontSizeFocusChanged: "fontSizeFocusChanged",
                    valueChanged: "valueChanged"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 1,
                vars: 1,
                consts: [ [ "class", "font-control themeableElement", "role", "group", "focus-nav-mode", "Browser", 4, "ngIf" ], [ "role", "group", "focus-nav-mode", "Browser", 1, "font-control", "themeableElement" ], [ 1, "font" ], [ 3, "compact", "showFullContent", "ariaLabelledby", "ariaDescribedby", "formControl" ], [ 4, "ngIf" ], [ 1, "biu" ], [ "multiple", "" ], [ 4, "ngFor", "ngForOf" ], [ 1, "font-size", 3, "ngClass", "formControl", "ariaLabel", "options", "inputName", "focusChange" ], [ "numUpDown", "" ], [ "pbiTooltipCheckChildren", "true", 3, "formControl", "aria-label", "value", "pbiTooltip", "pbiTooltipDisabled", 4, "ngIf" ], [ "pbiTooltipCheckChildren", "true", 3, "formControl", "aria-label", "value", "pbiTooltip", "pbiTooltipDisabled" ], [ "pbiButtonToggle", "" ], [ 1, "outer" ], [ 1, "content" ], [ 1, "glyphicon", "glyph-small", 3, "ngClass" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, FontControlComponent_div_0_Template, 7, 7, "div", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", !!ctx.fontPropertiesFormGroup);
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, font_picker_component.w, fesm2022_forms.JJ, pbi_button_toggle_component.I, pbi_button_toggle_group_component.J, pbi_spin_button_component.a, pbi_tooltip_directive.V, fesm2022_forms.oH, common.AsyncPipe ],
                styles: [ '.font-control[_ngcontent-%COMP%]{display:flex;flex-direction:column;--font-control-button-background-color: var(--fluent-theme-white-color, #FFF);--font-control-button-hover-background-color: var(--gray-40, #E1DFDD);--font-control-button-active-background-color: var(--gray-50, #D2D0CE);--font-control-button-disabled-background-color: var(--gray-20, #F3F2F1);--font-control-button-border-color: var(--gray-110, #8A8886);--font-control-button-border-disabled-color: var(--gray-20, #C8C6C4);--font-size-background-color: var(--fluent-theme-white-color, #FFF)}  [data-legacy-theming=false] .font-control{--font-control-button-background-color: var(--colorNeutralBackground1);--font-control-button-hover-background-color: var(--colorNeutralBackground1Hover);--font-control-button-active-background-color: var(--colorNeutralBackground3);--font-control-button-disabled-background-color: var(--inputButtonBackgroundDisabled);--font-control-button-border-color: var(--colorNeutralStroke1);--font-control-button-border-disabled-color: var(--colorNeutralStrokeDisabled);--font-size-background-color: var(--colorNeutralBackground1)}.font-control[_ngcontent-%COMP%]   .font[_ngcontent-%COMP%]{display:flex}.font-control[_ngcontent-%COMP%]   .font[_ngcontent-%COMP%]   font-picker[_ngcontent-%COMP%]{min-width:90px;flex-grow:1;padding-right:4px}.font-control[_ngcontent-%COMP%]   .font[_ngcontent-%COMP%]   .font-size[_ngcontent-%COMP%]{flex:none;width:54px;background:var(--font-size-background-color)}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]{background:var(--font-control-button-background-color);border:1px solid var(--font-control-button-border-color);border-radius:2px;margin:4px 2px;padding:2px}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer.disabled[_ngcontent-%COMP%]{background-color:var(--font-control-button-disabled-background-color);border-color:var(--font-control-button-border-disabled-color);color:var(--gray-80, #B3B0AD)}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer.selected[_ngcontent-%COMP%]{background:var(--font-control-button-active-background-color)}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:hover:not(.selected):not(.disabled){background:var(--font-control-button-hover-background-color)}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:focus{outline:none}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%]{height:18px;width:18px;display:flex;align-items:center;justify-content:center}html[data-focus-source="key"][_nghost-%COMP%]   .font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within   .content[_ngcontent-%COMP%], html[data-focus-source="key"]   [_nghost-%COMP%]   .font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within   .content[_ngcontent-%COMP%]{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child   .outer[_ngcontent-%COMP%]{margin-left:0}.font-control[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:last-child{margin-right:0}' ],
                changeDetection: 0
            }), FontControlComponent;
        }(rx_component.w), StandaloneUtility3 = __webpack_require__(43286), startWith = __webpack_require__(22318), pbi_checkbox_component = __webpack_require__(56011);
        function FormatPaneFlagsControlComponent_pbi_checkbox_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "pbi-checkbox", 2), 2 & rf) {
                var option_r1 = ctx.$implicit, i_r2 = ctx.index, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("formControl", option_r1)("label", ctx_r0.options[i_r2].displayName)("ariaLabel", ctx_r0.ariaLabels[i_r2])("isCompact", !0);
            }
        }
        var format_pane_flags_control_component_c0 = function(a0, a1) {
            return {
                "modern-styles": a0,
                "old-styles": a1
            };
        }, FormatPaneFlagsControlComponent = function(_super) {
            function FormatPaneFlagsControlComponent() {
                var _this = null !== _super && _super.apply(this, arguments) || this;
                return _this.modelValueChange = new core.EventEmitter, _this;
            }
            return (0, tslib_es6.__extends)(FormatPaneFlagsControlComponent, _super), FormatPaneFlagsControlComponent.prototype.ngOnInit = function() {
                var _a, _this = this;
                this.useModernStyles = null === (_a = this.useModernStyles) || void 0 === _a || _a, 
                this.ariaLabels = _.map(this.options, function(o) {
                    return "".concat(_this.sliceLabel, " ").concat(o.displayName);
                }), this.optionsForm = new fesm2022_forms.vC(_.map(this.options, function(o) {
                    return new fesm2022_forms.p4(!1);
                })), this.modelValue$ = this.mergePropertyInputsAndFormControl(this.changes$("modelValue"), this.value$, "modelValue", this.onDestroy$), 
                this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$).pipe((0, 
                startWith.O)(!1)), this.isDisabled$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(isDisabled) {
                    isDisabled ? _this.optionsForm.disable({
                        emitEvent: !1
                    }) : _this.optionsForm.enable({
                        emitEvent: !1
                    });
                }), this.optionsForm.valueChanges.pipe((0, withLatestFrom.M)(this.isDisabled$, this.modelValue$), (0, 
                takeUntil.R)(this.onDestroy$)).subscribe(function(_a) {
                    var isDisabled = _a[1], modelValue = _a[2], result = formValueToFlags(_a[0], _this.options);
                    modelValue === result || isDisabled || (_this.modelValueChange.emit(result), _this.onValueChange(result), 
                    _this.onTouched());
                }), this.modelValue$.pipe((0, distinctUntilChanged.x)()).subscribe(function(value) {
                    formValueToFlags(_this.optionsForm.value, _this.options) !== value && _this.optionsForm.setValue(_.map(_this.options, function(o) {
                        return optionValue = +o.value, converted = +value, !!_.isNumber(converted) && (0, 
                        StandaloneUtility3.yE)(converted, optionValue);
                        var optionValue, converted;
                    }), {
                        emitEvent: !1
                    });
                });
            }, FormatPaneFlagsControlComponent.\u0275fac = function() {
                var \u0275FormatPaneFlagsControlComponent_BaseFactory;
                return function(t) {
                    return (\u0275FormatPaneFlagsControlComponent_BaseFactory || (\u0275FormatPaneFlagsControlComponent_BaseFactory = core["\u0275\u0275getInheritedFactory"](FormatPaneFlagsControlComponent)))(t || FormatPaneFlagsControlComponent);
                };
            }(), FormatPaneFlagsControlComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormatPaneFlagsControlComponent,
                selectors: [ [ "format-pane-flags-control" ] ],
                inputs: {
                    modelValue: "modelValue",
                    options: "options",
                    isDisabled: "isDisabled",
                    sliceLabel: "sliceLabel",
                    useModernStyles: "useModernStyles"
                },
                outputs: {
                    modelValueChange: "modelValueChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return FormatPaneFlagsControlComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 5,
                consts: [ [ 1, "formatPaneFlagsControl", 3, "ngClass" ], [ 3, "formControl", "label", "ariaLabel", "isCompact", 4, "ngFor", "ngForOf" ], [ 3, "formControl", "label", "ariaLabel", "isCompact" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "form", 0), core["\u0275\u0275template"](1, FormatPaneFlagsControlComponent_pbi_checkbox_1_Template, 1, 4, "pbi-checkbox", 1), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction2"](2, format_pane_flags_control_component_c0, !!ctx.useModernStyles, !ctx.useModernStyles)), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx.optionsForm.controls));
                },
                dependencies: [ common.NgClass, common.NgForOf, fesm2022_forms._Y, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.F, pbi_checkbox_component.v, fesm2022_forms.oH ],
                styles: [ ".formatPaneFlagsControl[_ngcontent-%COMP%]{margin-top:4px}.formatPaneFlagsControl[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin-bottom:8px}" ],
                changeDetection: 0
            }), FormatPaneFlagsControlComponent;
        }(rx_form_control_component.N);
        function formValueToFlags(formValue, options) {
            for (var result = 0, i = 0; i < formValue.length; i++) formValue[i] && (result = (0, 
            StandaloneUtility3.mB)(result, +options[i].value));
            return result.toString();
        }
        var FocusNavigationUtility = __webpack_require__(57470);
        function formattingPaneKeyboardNavHandler(event, toggleExpand, ancestorMatcher, siblingMatcher) {
            var _a, _b, handled = !1;
            if (13 === event.keyCode) toggleExpand(event), handled = !0; else if (40 === event.keyCode) {
                var activeElement = document.activeElement, matchingAncestor = FocusNavigationUtility.M.getFirstMatchingAncestor(activeElement, ancestorMatcher);
                null === (_a = FocusNavigationUtility.M.getNextTabbableMatchingSibling(activeElement, siblingMatcher, matchingAncestor)) || void 0 === _a || _a.focus(), 
                handled = !0;
            } else 38 === event.keyCode && (activeElement = document.activeElement, matchingAncestor = FocusNavigationUtility.M.getFirstMatchingAncestor(activeElement, ancestorMatcher), 
            null === (_b = FocusNavigationUtility.M.getPrevTabbableMatchingSibling(activeElement, siblingMatcher, matchingAncestor)) || void 0 === _b || _b.focus(), 
            handled = !0);
            handled && (event.preventDefault(), event.stopPropagation());
        }
        function formattingPaneEscKeyHandler(event, ancestorMatcher) {
            var activeElement = document.activeElement, matchingAncestor = FocusNavigationUtility.M.getFirstMatchingAncestor(activeElement, ancestorMatcher), firstTabbableChild = FocusNavigationUtility.M.getFirstTabbableChild(matchingAncestor);
            null == firstTabbableChild || firstTabbableChild.focus(), event.preventDefault(), 
            event.stopPropagation();
        }
        function isExpanded(toggleState, isFiltered) {
            return !!(toggleState & (isFiltered ? 2 : 1));
        }
        function toggleToggleState(toggleState, isFiltered) {
            return toggleState ^ (isFiltered ? 2 : 1);
        }
        var iif = __webpack_require__(46438), switchMap = __webpack_require__(81905), feature_switch_service = __webpack_require__(9380), ngrx_component_store = __webpack_require__(95281), ngrx_store = __webpack_require__(85732), tap = __webpack_require__(17653), take = __webpack_require__(48787), visualContainerGroup2 = __webpack_require__(9215), formattingModelUtil = __webpack_require__(61617), lazy_load_routes = __webpack_require__(87644), visualContainerUtilsHelper = __webpack_require__(3579), reportViewSettings = __webpack_require__(1090), format_mode_lazy_load_routes = __webpack_require__(10342), JsCommon_String = __webpack_require__(32805), selectionUtils = __webpack_require__(21728), selector = __webpack_require__(32379), build_control_util = __webpack_require__(56578), property_pane_util = __webpack_require__(24408), handledSliceTypes = [ "FontControl", "MarginPadding", "AlignmentGroup", "ColorPicker", "Dropdown", "FontPicker", "NumUpDown", "Slider", "TextArea", "TextInput", "ToggleSwitch" ], skipMergingCardNames = [ "visualLevelFieldsFormat" ];
        function resolveTopLevelToggleContractsWithSameUid(topLevelToggleContracts) {
            var _a;
            if (!_.isEmpty(topLevelToggleContracts) && _.every(topLevelToggleContracts, function(toggle) {
                return null != toggle;
            })) {
                var primaryTopLevelToggle = topLevelToggleContracts[0], resolvedTopLevelToggleContract = {
                    isTopLevelToggle: !0,
                    control: {
                        type: "ToggleSwitch",
                        properties: resolveToggleSwitchProperties(topLevelToggleContracts.map(function(toggle) {
                            return toggle.control.properties;
                        }))
                    },
                    originSource: primaryTopLevelToggle.originSource,
                    showChangeIndicator: primaryTopLevelToggle.showChangeIndicator,
                    suppressDisplayName: primaryTopLevelToggle.suppressDisplayName,
                    uid: primaryTopLevelToggle.uid,
                    disabled: _.some(topLevelToggleContracts, function(toggle) {
                        return toggle.disabled;
                    }),
                    disabledReason: null === (_a = _.find(topLevelToggleContracts, function(toggle) {
                        return toggle.disabled;
                    })) || void 0 === _a ? void 0 : _a.disabledReason,
                    hidden: primaryTopLevelToggle.hidden,
                    noDefaultImpact: void 0
                };
                return debug.fF.assert(function() {
                    return _.every(topLevelToggleContracts, function(toggle) {
                        return toggle.originSource === resolvedTopLevelToggleContract.originSource;
                    });
                }, "All the top level toggle contracts should have the same originSource"), debug.fF.assert(function() {
                    return _.every(topLevelToggleContracts, function(toggle) {
                        return toggle.showChangeIndicator === resolvedTopLevelToggleContract.showChangeIndicator;
                    });
                }, "All the top level toggle contracts should have the same showChangeIndicator"), 
                debug.fF.assert(function() {
                    return _.every(topLevelToggleContracts, function(toggle) {
                        return toggle.suppressDisplayName === resolvedTopLevelToggleContract.suppressDisplayName;
                    });
                }, "All the top level toggle contracts should have the same suppressDisplayName"), 
                debug.fF.assert(function() {
                    return _.every(topLevelToggleContracts, function(toggle) {
                        return toggle.uid === resolvedTopLevelToggleContract.uid;
                    });
                }, "All the top level toggle contracts should have the same uid"), debug.fF.assert(function() {
                    return _.every(topLevelToggleContracts, function(toggle) {
                        return toggle.hidden === resolvedTopLevelToggleContract.hidden;
                    });
                }, "All the top level toggle contracts should have the same hidden"), resolvedTopLevelToggleContract;
            }
        }
        function resolveBaseSliceProperties(formattingSliceContracts) {
            var _a, primarySlice = formattingSliceContracts[0], resolvedFormattingSliceContract = {
                displayName: primarySlice.displayName,
                originSource: primarySlice.originSource,
                pivotSource: primarySlice.pivotSource,
                uid: primarySlice.uid,
                aliasNames: primarySlice.aliasNames,
                description: primarySlice.description,
                disabled: _.some(formattingSliceContracts, function(slice) {
                    return slice.disabled;
                }),
                disabledReason: null === (_a = _.find(formattingSliceContracts, function(slice) {
                    return slice.disabled;
                })) || void 0 === _a ? void 0 : _a.disabledReason,
                suppressDisplayName: primarySlice.suppressDisplayName,
                hidden: primarySlice.hidden,
                control: void 0,
                showChangeIndicator: primarySlice.showChangeIndicator,
                groupUid: primarySlice.groupUid,
                infoIconText: primarySlice.infoIconText,
                placeHolderText: primarySlice.placeHolderText,
                saveCallback: void 0,
                conditionalFormattingWarning: void 0,
                warningMessage: void 0,
                conditionalFormattingObjects: void 0
            };
            return formattingSliceContracts.forEach(function(slice) {
                debug.fF.assert(function() {
                    return slice.displayName === resolvedFormattingSliceContract.displayName;
                }, "All the formatting slice contracts should have the same displayName"), debug.fF.assert(function() {
                    return slice.originSource === resolvedFormattingSliceContract.originSource;
                }, "All the formatting slice contracts should have the same originSource"), debug.fF.assert(function() {
                    return slice.pivotSource === resolvedFormattingSliceContract.pivotSource;
                }, "All the formatting slice contracts should have the same pivotSource"), debug.fF.assert(function() {
                    return slice.uid === resolvedFormattingSliceContract.uid;
                }, "All the formatting slice contracts should have the same uid"), debug.fF.assert(function() {
                    return _.isEqual(slice.aliasNames, resolvedFormattingSliceContract.aliasNames);
                }, "All the formatting slice contracts should have the same aliasNames"), debug.fF.assert(function() {
                    return slice.suppressDisplayName === resolvedFormattingSliceContract.suppressDisplayName;
                }, "All the formatting slice contracts should have the same suppressDisplayName"), 
                debug.fF.assert(function() {
                    return slice.hidden === resolvedFormattingSliceContract.hidden;
                }, "All the formatting slice contracts should have the same hidden"), debug.fF.assert(function() {
                    return slice.showChangeIndicator === resolvedFormattingSliceContract.showChangeIndicator;
                }, "All the formatting slice contracts should have the same showChangeIndicator"), 
                debug.fF.assert(function() {
                    return slice.groupUid === resolvedFormattingSliceContract.groupUid;
                }, "All the formatting slice contracts should have the same groupUid"), debug.fF.assert(function() {
                    return slice.infoIconText === resolvedFormattingSliceContract.infoIconText;
                }, "All the formatting slice contracts should have the same infoIconText"), debug.fF.assert(function() {
                    return slice.placeHolderText === resolvedFormattingSliceContract.placeHolderText;
                }, "All the formatting slice contracts should have the same placeHolderText");
            }), resolvedFormattingSliceContract;
        }
        function resolveNumUpDownProperties(numUpDownProperties) {
            var primaryNumUpDownProperty = numUpDownProperties[0];
            return debug.fF.assert(function() {
                return _.every(numUpDownProperties, function(numUpDownProperty) {
                    return areDescriptorsEqual(numUpDownProperty.descriptor, primaryNumUpDownProperty.descriptor);
                });
            }, "All the NumUpDown properties should have the same descriptor"), {
                descriptor: primaryNumUpDownProperty.descriptor,
                placeholderText: resolveValues(numUpDownProperties.map(function(numUpDownProperty) {
                    return numUpDownProperty.placeholderText;
                }), void 0),
                value: resolveValues(numUpDownProperties.map(function(numUpDownProperty) {
                    return numUpDownProperty.value;
                }), null),
                options: resolveNumUpDownOptions(numUpDownProperties.map(function(numUpDownProperty) {
                    return numUpDownProperty.options;
                }))
            };
        }
        function resolveToggleSwitchProperties(toggleSwitchProperties) {
            return debug.fF.assert(function() {
                return _.every(toggleSwitchProperties, function(toggleSwitchProperty) {
                    return areDescriptorsEqual(toggleSwitchProperty.descriptor, toggleSwitchProperties[0].descriptor);
                });
            }, "All the ToggleSwitch properties should have the same descriptor"), {
                descriptor: toggleSwitchProperties[0].descriptor,
                value: resolveValues(toggleSwitchProperties.map(function(toggleSwitchProperty) {
                    return toggleSwitchProperty.value;
                }), null)
            };
        }
        function resolveValues(items, defaultValue) {
            var first = items[0];
            return items.every(function(item) {
                return _.isEqual(item, first);
            }) ? first : defaultValue;
        }
        function areAllSlicesSameType(controlContracts, type) {
            return controlContracts.every(function(contract) {
                return contract.type === type;
            });
        }
        function resolveNumUpDownOptions(options) {
            if (options.every(function(option) {
                return !!option;
            })) {
                var maxOfMins = _.max(_.compact(_.map(options, function(option) {
                    var _a;
                    return null === (_a = null == option ? void 0 : option.minValue) || void 0 === _a ? void 0 : _a.value;
                }))), minOfMaxs = _.min(_.compact(_.map(options, function(option) {
                    var _a;
                    return null === (_a = null == option ? void 0 : option.maxValue) || void 0 === _a ? void 0 : _a.value;
                }))), areMinMaxValid = (null == maxOfMins || null == minOfMaxs) && maxOfMins <= minOfMaxs;
                return {
                    minValue: areMinMaxValid ? {
                        value: maxOfMins,
                        type: 0
                    } : void 0,
                    maxValue: areMinMaxValid ? {
                        value: minOfMaxs,
                        type: 1
                    } : void 0,
                    required: resolveValues(options.map(function(option) {
                        return null == option ? void 0 : option.required;
                    }), void 0),
                    unitSymbolAfterInput: resolveValues(options.map(function(option) {
                        return null == option ? void 0 : option.unitSymbolAfterInput;
                    }), void 0),
                    unitSymbol: resolveValues(options.map(function(option) {
                        return null == option ? void 0 : option.unitSymbol;
                    }), void 0)
                };
            }
        }
        function areDescriptorsEqual(descriptor1, descriptor2) {
            var primaryDescriptor = descriptor1, descriptor = descriptor2, areSelectorsEqual = (0, 
            selector.fS)(primaryDescriptor.selector, descriptor.selector), altConstantValueSelectorEqual = (0, 
            selector.fS)(primaryDescriptor.altConstantValueSelector, descriptor.altConstantValueSelector);
            if (!areSelectorsEqual || !altConstantValueSelectorEqual) return !1;
            for (var key in primaryDescriptor) if ("selector" !== key && "altConstantValueSelector" !== key && !_.isEqual(primaryDescriptor[key], descriptor[key])) return !1;
            return !0;
        }
        var formatting_utils = __webpack_require__(78432), lazy_scoped_provider = __webpack_require__(28894), selection_service = __webpack_require__(72262), visual_authoring_service = __webpack_require__(66890), selectFormattingPaneViewModel = (0, 
        ngrx_store.P1)(function(viewModel) {
            return viewModel;
        }, function(viewModel) {
            return function(viewModel) {
                var searchString = viewModel.searchString;
                if ("" !== searchString) {
                    var pivots_1 = viewModel.pivots, revertToDefaultDescriptors_1 = [], itemsMatched_1 = 0, cards_1 = {}, groups_1 = {}, slices_1 = {};
                    Object.keys(pivots_1).forEach(function(key) {
                        var pivot = pivots_1[key], filteredItems = {
                            cardIds: new Set,
                            groupIds: new Set,
                            sliceIds: new Set
                        }, perPivotMatches = function(cardIds, searchString, pivot, filteredItems) {
                            for (var perPivotMatches = 0, _i = 0, cardIds_1 = cardIds; _i < cardIds_1.length; _i++) {
                                var cardId = cardIds_1[_i], card = pivot.cards[cardId], matched = !1;
                                matchFilter(searchString, card.displayName, card.aliasNames) && (matched = !0, perPivotMatches++);
                                var perCardMatches = filterCardGroups(card.groupUids, searchString, matched, pivot, filteredItems).itemsMatched;
                                perPivotMatches += perCardMatches, (matched || perCardMatches > 0) && filteredItems.cardIds.add(cardId);
                            }
                            return {
                                itemsMatched: perPivotMatches
                            };
                        }(Object.keys(pivot.cards), searchString, pivot, filteredItems).itemsMatched;
                        itemsMatched_1 += perPivotMatches;
                        var _a = function(filteredItems, pivot) {
                            var cards = _.reduce(pivot.cards, function(result, card, key) {
                                return filteredItems.cardIds.has(key) && (result[key] = (0, tslib_es6.__assign)((0, 
                                tslib_es6.__assign)({}, card), {
                                    groupUids: _.filter(card.groupUids, function(groupUid) {
                                        return filteredItems.groupIds.has(groupUid);
                                    })
                                })), result;
                            }, {}), groups = _.reduce(pivot.groups, function(result, group, key) {
                                return filteredItems.groupIds.has(key) && (result[key] = (0, tslib_es6.__assign)((0, 
                                tslib_es6.__assign)({}, group), {
                                    sliceIds: _.filter(group.sliceIds, function(sliceId) {
                                        return filteredItems.sliceIds.has((0, formattingModelUtil.$Q)(sliceId.uid, sliceId.selector));
                                    })
                                })), result;
                            }, {}), slices = _.reduce(pivot.slices, function(result, slice, key) {
                                return filteredItems.sliceIds.has(key) && (result[key] = (0, tslib_es6.__assign)({}, slice)), 
                                result;
                            }, {});
                            return {
                                cards,
                                groups,
                                slices
                            };
                        }(filteredItems, pivot), pivotCards = _a.cards, pivotGroups = _a.groups, pivotSlices = _a.slices;
                        cards_1 = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, cards_1), pivotCards), 
                        groups_1 = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, groups_1), pivotGroups), 
                        slices_1 = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, slices_1), pivotSlices), 
                        revertToDefaultDescriptors_1 = revertToDefaultDescriptors_1.concat(pivots_1[key].revertToDefaultDescriptors);
                    });
                    var searchPivot = {};
                    return searchPivot[viewModel.selectedPivot.key] = {
                        cards: cards_1,
                        groups: groups_1,
                        slices: slices_1,
                        pivotDisplayName: void 0,
                        revertToDefaultDescriptors: revertToDefaultDescriptors_1
                    }, (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        itemsMatched: itemsMatched_1,
                        pivots: searchPivot,
                        showPivot: getShowPivot(viewModel),
                        pivotModelUnavailableMessageKey: _.isEmpty(cards_1) ? "Analytics" === viewModel.selectedPivot.key ? "AnalyticsPane_NoSearchResult" : "PropertyPane_NoSearchResult" : void 0
                    });
                }
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                    showPivot: getShowPivot(viewModel)
                });
            }(viewModel);
        }), selectActivePivotViewModel = (0, ngrx_store.P1)(selectFormattingPaneViewModel, function(viewModel) {
            return viewModel.pivots[viewModel.selectedPivot.key];
        }), FormattingPaneComponentStore = function(_super) {
            function FormattingPaneComponentStore(reportViewSettingsService, featureSwitchService, lazyScoped, selectionService, visualAuthoringService) {
                var _this = _super.call(this) || this;
                return _this.reportViewSettingsService = reportViewSettingsService, _this.featureSwitchService = featureSwitchService, 
                _this.lazyScoped = lazyScoped, _this.selectionService = selectionService, _this.visualAuthoringService = visualAuthoringService, 
                _this.clearToggleInformation = _this.updater(function(viewModel) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        toggleInformation: {}
                    });
                }), _this.updateDisabledSlicesAndCards = _this.updater(function(viewModel, disabledInformation) {
                    var disabledSlices = disabledInformation.disabledSlices, disabledCards = disabledInformation.disabledCards;
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        disabledSlices,
                        disabledCards
                    });
                }), _this.updateDisabledInformation = _this.effect(function(disabledInformation$) {
                    return (0, combineLatest.aj)([ disabledInformation$, _this.ensureServicesAreInitialized() ]).pipe((0, 
                    tap.b)(function(_a) {
                        _this.updateDisabledSlicesAndCards(_a[0]), _this.updateFormattingPaneViewModel(_this.formattingContract$.pipe((0, 
                        take.q)(1)));
                    }));
                }), _this.updateScrollCardToTop = _this.updater(function(viewModel, scrollCardToTop) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        scrollCardToTop
                    });
                }), _this.updateSlicesState = _this.updater(function(viewModel, saveObjects) {
                    for (var _a, selectedPivotKey = viewModel.selectedPivot.key, pivots = (0, tslib_es6.__assign)({}, viewModel.pivots), selectedPivot = pivots[selectedPivotKey], slices = (0, 
                    tslib_es6.__assign)({}, selectedPivot.slices), _i = 0, _b = null !== (_a = saveObjects.changes) && void 0 !== _a ? _a : []; _i < _b.length; _i++) {
                        var change = _b[_i], sliceKey = (0, formattingModelUtil.$Q)(change.uid, change.propertySlice.selector), updatedSlice = (0, 
                        tslib_es6.__assign)({}, slices[sliceKey]);
                        controlStateToUpdate = updatedSlice, (singleChange = change).controlValueUpdater ? singleChange.controlValueUpdater(controlStateToUpdate.control) : controlStateToUpdate.control.properties.value = singleChange.propertySlice.value, 
                        slices[sliceKey] = updatedSlice;
                    }
                    var controlStateToUpdate, singleChange;
                    return pivots[selectedPivotKey] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, selectedPivot), {
                        slices
                    }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        pivots
                    });
                }), _this.updateRevertToDefaultEnabledState = _this.updater(function(viewModel, saveObjects) {
                    for (var _a, selectedPivotKey = viewModel.selectedPivot.key, pivots = (0, tslib_es6.__assign)({}, viewModel.pivots), selectedPivot = pivots[selectedPivotKey], changedCardIds = new Set, _i = 0, _b = null !== (_a = saveObjects.changes) && void 0 !== _a ? _a : []; _i < _b.length; _i++) {
                        var change = _b[_i], sliceKey = (0, formattingModelUtil.$Q)(change.uid, change.propertySlice.selector);
                        changedCardIds.add(selectedPivot.groups[selectedPivot.slices[sliceKey].groupUid].cardUid);
                    }
                    var cards = (0, tslib_es6.__assign)({}, selectedPivot.cards);
                    return changedCardIds.forEach(function(cardId) {
                        var _a, card = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, cards[cardId]), {
                            revertToDefaultEnabled: _this.formattingService && _this.formattingService.getRevertToDefaultEnabled(null === (_a = viewModel.canvasItem) || void 0 === _a ? void 0 : _a.value, cards[cardId].revertToDefaultDescriptors, saveObjects)
                        });
                        cards[cardId] = card;
                    }), pivots[selectedPivotKey] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, selectedPivot), {
                        cards
                    }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        pivots
                    });
                }), _this.updateAllExpansionState = _this.updater(function(viewModel, options) {
                    var expanded = options.expanded, cardIds = options.cardIds, groupIds = options.groupIds, source = options.source, cardId = options.cardId, selectedPivotKey = viewModel.selectedPivot.key, isFiltered = "" !== viewModel.searchString, pivots = (0, 
                    tslib_es6.__assign)({}, viewModel.pivots), selectedPivot = pivots[selectedPivotKey];
                    return pivots[selectedPivotKey] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, selectedPivot), 1 === source ? {
                        cards: _.mapValues(selectedPivot.cards, function(card) {
                            return !cardIds.has(card.uid) || card.disabled ? card : (0, tslib_es6.__assign)((0, 
                            tslib_es6.__assign)({}, card), {
                                toggleState: _this.getToggleState(expanded, isFiltered, card.toggleState)
                            });
                        }),
                        groups: _.mapValues(selectedPivot.groups, function(group) {
                            return !groupIds.has(group.uid) || group.disabled ? group : (0, tslib_es6.__assign)((0, 
                            tslib_es6.__assign)({}, group), {
                                toggleState: _this.getToggleState(expanded, isFiltered, group.toggleState)
                            });
                        })
                    } : {
                        groups: _.mapValues(selectedPivot.groups, function(group) {
                            return !groupIds.has(group.uid) || group.disabled || group.cardUid !== cardId ? group : (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, group), {
                                toggleState: _this.getToggleState(expanded, isFiltered, group.toggleState)
                            });
                        })
                    }), viewModel = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        pivots
                    }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        toggleInformation: updateToggleInformation(viewModel)
                    });
                }), _this.updateToggleState = _this.updater(function(viewModel, cardToggleOutput) {
                    var cardId = cardToggleOutput.cardId, toggleState = cardToggleOutput.toggleState, formattingSource = cardToggleOutput.formattingSource, groupId = cardToggleOutput.groupId, pivots = (0, 
                    tslib_es6.__assign)({}, viewModel.pivots), changedPivot = pivots[formattingSource], toggleInformation = (0, 
                    tslib_es6.__assign)({}, viewModel.toggleInformation);
                    if (1 === cardToggleOutput.source) {
                        var cards = (0, tslib_es6.__assign)({}, changedPivot.cards);
                        cards[cardId] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, cards[cardId]), {
                            toggleState
                        }), changedPivot = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, changedPivot), {
                            cards
                        }), toggleInformation[cardId] = toggleState;
                    } else {
                        var groups = (0, tslib_es6.__assign)({}, changedPivot.groups);
                        groups[groupId] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, groups[groupId]), {
                            toggleState
                        }), changedPivot = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, changedPivot), {
                            groups
                        }), toggleInformation[(0, formattingModelUtil.Ko)(groupId)] = toggleState;
                    }
                    return pivots[formattingSource] = changedPivot, (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        pivots,
                        toggleInformation
                    });
                }), _this.updateCardExpansionState = _this.updater(function(viewModel, options) {
                    return _this.setExpansionState(viewModel, options);
                }), _this.updateSelectedPivot = _this.updater(function(viewModel, selectedPivotKey) {
                    var updatedViewModel = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        selectedPivot: {
                            isUserSet: !0,
                            key: selectedPivotKey
                        }
                    }), showPivot = getShowPivot(updatedViewModel);
                    return updatedViewModel.showPivot = showPivot, updatedViewModel;
                }), _this.updateSearchString = _this.updater(function(viewModel, searchString) {
                    var newViewModel = "" === searchString ? _this.resetFilteredToggleState(viewModel) : viewModel, updatedViewModel = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, newViewModel), {
                        searchString
                    }), showPivot = getShowPivot(updatedViewModel);
                    return updatedViewModel.showPivot = showPivot, updatedViewModel;
                }), _this.onAvailablePivotsChanged = _this.effect(function(pivotKeys$) {
                    return (0, combineLatest.aj)([ pivotKeys$, _this.ensureServicesAreInitialized() ]).pipe((0, 
                    tap.b)(function(_a) {
                        _this.updateAvailablePivots(_a[0]), _this.updateFormattingPaneViewModel(_this.formattingContract$.pipe((0, 
                        take.q)(1)));
                    }));
                }), _this.updateAvailablePivots = _this.updater(function(viewModel, availablePivots) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        availablePivots
                    });
                }), _this.updateFormattingPaneViewModel = _this.updater(function(viewModel, formattingContract) {
                    var _a, _b, _c, modelUnavailableInformation, pivots = viewModel.availablePivots.reduce(function(result, pivotKey) {
                        var pivot = _this.getPivotViewModel(pivotKey, formattingContract, viewModel.toggleInformation, viewModel.disabledCards, viewModel.disabledSlices);
                        return pivot && (result[pivotKey] = pivot), result;
                    }, {}), previousSelectedPivoy = viewModel.selectedPivot, selectedPivot = pivots[previousSelectedPivoy.key] && previousSelectedPivoy.isUserSet ? previousSelectedPivoy : {
                        key: _.find(viewModel.availablePivots, function(pivotName) {
                            return !!pivots[pivotName];
                        }),
                        isUserSet: !1
                    };
                    if (_.isEmpty(pivots)) return modelUnavailableInformation = selectionUtils.UP.getSelectedCanvasItems(_this.selectionService).length > 1 && !_this.featureSwitchService.featureSwitches.onObject ? {
                        messageKey: "Format_Pane_MultipleVisual_Unavailable_Information"
                    } : _this.formattingService.getModelUnavailableInformation(viewModel.availablePivots[0], null === (_b = viewModel.canvasItem) || void 0 === _b ? void 0 : _b.value), 
                    (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        selectedPivot,
                        canvasItem: formattingContract.canvasItem,
                        pivots,
                        pivotModelUnavailableImageName: modelUnavailableInformation.imageName,
                        pivotModelUnavailableLearnMoreLink: modelUnavailableInformation.learnMoreLink,
                        pivotModelUnavailableMessageKey: modelUnavailableInformation.messageKey
                    });
                    var itemTypeDisplayName = (_a = _this.formattingService.getRevertToDefaultMetadata(null === (_c = formattingContract.canvasItem) || void 0 === _c ? void 0 : _c.value, selectedPivot.key)).itemTypeDisplayName, formattingSettingsString = _a.formattingSettingsString;
                    return viewModel = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        selectedPivot,
                        showPivot: getShowPivot(viewModel),
                        canvasItem: formattingContract.canvasItem,
                        itemTypeDisplayName,
                        formattingSettingsString,
                        revertToDefaultDescriptors: _this.getRevertToDefaultDescriptors(viewModel.availablePivots, formattingContract),
                        pivots,
                        pivotModelUnavailableImageName: void 0,
                        pivotModelUnavailableLearnMoreLink: void 0,
                        pivotModelUnavailableMessageKey: void 0
                    }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                        toggleInformation: updateToggleInformation(viewModel)
                    });
                }), _this.setState({
                    availablePivots: [ "Page" ],
                    searchString: "",
                    showPivot: !0,
                    itemsMatched: void 0,
                    selectedPivot: {
                        isUserSet: !1,
                        key: void 0
                    },
                    itemTypeDisplayName: void 0,
                    formattingSettingsString: void 0,
                    toggleInformation: {},
                    pivots: {},
                    canvasItem: void 0,
                    revertToDefaultDescriptors: []
                }), _this.ensureServicesAreInitialized(), _this.visualAuthoringService.canvasItemDeleted$.pipe((0, 
                takeUntil.R)(_this.destroy$)).subscribe(function() {
                    return _this.clearToggleInformation();
                }), _this;
            }
            return (0, tslib_es6.__extends)(FormattingPaneComponentStore, _super), FormattingPaneComponentStore.prototype.selectTopLevelToggle = function(uid, selector) {
                return this.select(function(uid, selector) {
                    return (0, ngrx_store.P1)(selectActivePivotViewModel, function(pivotState) {
                        if (pivotState) {
                            var cards = pivotState.cards;
                            if (cards) for (var key in cards) if ((topLevelToggle = cards[key].topLevelToggle) && formatting_utils.hy(topLevelToggle.uid, uid, (0, 
                            formattingModelUtil.O7)(topLevelToggle), selector)) return topLevelToggle;
                            var groups = pivotState.groups;
                            if (groups) for (var key in groups) {
                                var topLevelToggle;
                                if ((topLevelToggle = groups[key].topLevelToggle) && formatting_utils.hy(topLevelToggle.uid, uid, (0, 
                                formattingModelUtil.O7)(topLevelToggle), selector)) return topLevelToggle;
                            }
                        }
                    });
                }(uid, selector)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingPaneComponentStore.prototype.selectGroup = function(uid) {
                return this.select(function(uid) {
                    return (0, ngrx_store.P1)(selectActivePivotViewModel, function(pivotState) {
                        if (pivotState) {
                            var groups = pivotState.groups;
                            return groups && groups[uid];
                        }
                    });
                }(uid)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingPaneComponentStore.prototype.selectSlice = function(uid, selector) {
                return this.select(function(uid, selector) {
                    return (0, ngrx_store.P1)(selectActivePivotViewModel, function(pivotState) {
                        if (pivotState) {
                            var slices = pivotState.slices, key = (0, formattingModelUtil.$Q)(uid, selector);
                            return slices && slices[key];
                        }
                    });
                }(uid, selector)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingPaneComponentStore.prototype.selectCard = function(uid) {
                return this.select(function(uid) {
                    return (0, ngrx_store.P1)(selectActivePivotViewModel, function(pivotState) {
                        if (pivotState) {
                            var cards = pivotState.cards;
                            return cards && cards[uid];
                        }
                    });
                }(uid)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingPaneComponentStore.prototype.getViewModel$ = function() {
                return this.select(selectFormattingPaneViewModel).pipe((0, shareReplay.d)(1));
            }, FormattingPaneComponentStore.prototype.revertToDefault = function(revertToDefaultDescriptors, cardUid) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.ensureServicesAreInitialized() ];

                          case 1:
                            return _a.sent(), [ 2, this.formattingService.revertToDefault(revertToDefaultDescriptors, cardUid) ];
                        }
                    });
                });
            }, FormattingPaneComponentStore.prototype.saveValues = function(saveObject, telemetrySource) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.ensureServicesAreInitialized() ];

                          case 1:
                            return _a.sent(), [ 2, this.formattingService.saveValues(saveObject, telemetrySource) ];
                        }
                    });
                });
            }, FormattingPaneComponentStore.prototype.setAllExpansionState = function(options) {
                var _this = this;
                this.getViewModel$().pipe((0, map.U)(function(viewModel) {
                    var _a, selectedPivotkey = null !== (_a = options.pivotKey) && void 0 !== _a ? _a : viewModel.selectedPivot.key, activePivot = viewModel.pivots[selectedPivotkey], cardIds = new Set(Object.keys(activePivot.cards)), groupIds = new Set(Object.keys(activePivot.groups));
                    return (0, tslib_es6.__assign)({
                        cardIds,
                        groupIds
                    }, options);
                }), (0, take.q)(1)).subscribe(function(expansionOptions) {
                    return _this.updateAllExpansionState(expansionOptions);
                });
            }, FormattingPaneComponentStore.prototype.getToggleState = function(expanded, isFiltered, toggleState) {
                var affectedBit = isFiltered ? 2 : 1;
                return expanded ? toggleState | affectedBit : toggleState & ~affectedBit;
            }, FormattingPaneComponentStore.prototype.setExpansionState = function(viewModel, options) {
                var scrollCardToTop, newPivots = (0, tslib_es6.__assign)({}, viewModel.pivots);
                if (Object.keys(newPivots).forEach(function(pivotName) {
                    var newPivot = newPivots[pivotName];
                    newPivots[pivotName] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, newPivot), {
                        cards: _.mapValues(newPivot.cards, function(card) {
                            var expanded = options.isCardExpanded(card.uid);
                            return null != expanded && (card = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card), {
                                toggleState: null == expanded ? card.toggleState : expanded ? 1 : 0
                            })), card;
                        }),
                        groups: _.mapValues(newPivot.groups, function(group) {
                            var expanded = options.isGroupExpanded(group.cardUid, group.uid);
                            return null != expanded && (group = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, group), {
                                toggleState: null == expanded ? group.toggleState : expanded ? 1 : 0
                            })), group;
                        })
                    });
                }), options.selectedPivot && options.scrollToOpenCard) {
                    var selectedPivot = newPivots[options.selectedPivot];
                    if (selectedPivot) for (var cardUid in selectedPivot.cards) {
                        var card = selectedPivot.cards[cardUid];
                        if (1 === card.toggleState) {
                            scrollCardToTop = {
                                uid: card.uid
                            };
                            break;
                        }
                    }
                }
                return viewModel = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                    selectedPivot: {
                        key: options.selectedPivot,
                        isUserSet: !0
                    },
                    pivots: newPivots,
                    scrollCardToTop
                }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                    toggleInformation: updateToggleInformation(viewModel)
                });
            }, FormattingPaneComponentStore.prototype.handleNavigation = function(options) {
                var containersInfo = options.formattingContainersNavigationInfo;
                _.isEmpty(containersInfo) || this.formattingService.changeContainerDropdownValue(containersInfo, options.canvasItems), 
                this.formattingUIManager.markCardNavigationAsHandled();
            }, FormattingPaneComponentStore.prototype.resetFilteredToggleState = function(viewModel) {
                var pivots = {};
                return Object.keys(viewModel.pivots).forEach(function(key) {
                    var pivot = viewModel.pivots[key];
                    pivots[key] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivot), {
                        cards: _.mapValues(pivot.cards, function(card) {
                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card), {
                                toggleState: 2 | card.toggleState
                            });
                        }),
                        groups: _.mapValues(pivot.groups, function(group) {
                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, group), {
                                toggleState: 2 | group.toggleState
                            });
                        })
                    });
                }), viewModel = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                    pivots
                }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, viewModel), {
                    toggleInformation: updateToggleInformation(viewModel)
                });
            }, FormattingPaneComponentStore.prototype.ensureServicesAreInitialized = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var initializationResolve_1, _a, _b, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return this.initializationPromise ? [ 3, 5 ] : (this.initializationPromise = new Promise(function(resolve) {
                                initializationResolve_1 = resolve;
                            }), _a = this, [ 4, this.lazyScoped.get(lazy_load_routes.ub) ]);

                          case 1:
                            return _a.formattingService = _c.sent(), this.formattingContract$ = this.getFormattingContract$(), 
                            this.formattingContract$.pipe((0, takeUntil.R)(this.destroy$)).subscribe(function(formattingContract) {
                                return _this.updateFormattingPaneViewModel(formattingContract);
                            }), [ 4, this.featureSwitchService.getFeatureSwitches() ];

                          case 2:
                            return _c.sent(), this.featureSwitchService.featureSwitches.onObject ? (_b = this, 
                            [ 4, this.lazyScoped.get(format_mode_lazy_load_routes.a) ]) : [ 3, 4 ];

                          case 3:
                            _b.formattingUIManager = _c.sent(), (0, combineLatest.aj)([ this.formattingUIManager.getFormatPaneRegistered$(), this.formattingUIManager.getFormatPaneCardExpansion$(), this.getViewModel$().pipe((0, 
                            map.U)(function(viewModel) {
                                return viewModel.pivots;
                            }), (0, filter.h)(function(pivots) {
                                return !_.isEmpty(pivots);
                            })) ]).pipe((0, takeUntil.R)(this.destroy$), (0, filter.h)(function(_a) {
                                return !!_a[1];
                            })).subscribe(function(_a) {
                                var cardExpansionOptions = _a[1];
                                _a[0] && (_this.updateCardExpansionState(cardExpansionOptions), _this.handleNavigation(cardExpansionOptions));
                            }), this.formattingUIManager.registerFormatPane(), _c.label = 4;

                          case 4:
                            initializationResolve_1(), _c.label = 5;

                          case 5:
                            return [ 2, this.initializationPromise ];
                        }
                    });
                });
            }, FormattingPaneComponentStore.prototype.getFormattingContract$ = function() {
                var _this = this, selectedVisuals$ = this.selectionService.selectedElements$.pipe((0, 
                map.U)(function(selectedElements) {
                    return _.uniqBy(_.compact(_.map(selectedElements, function(element) {
                        return element.canvasItem;
                    })), function(canvasItem) {
                        return canvasItem.name;
                    });
                }));
                return (0, combineLatest.aj)([ selectedVisuals$, this.featureSwitchService.featureSwitches$ ]).pipe((0, 
                switchMap.w)(function(_a) {
                    var selectedVisuals = _a[0], isOnObjectOn = _a[1].onObject, areMultipleVisualsSelected = selectedVisuals.length > 1, areMultipleSameTypeVisualsSelected = areMultipleVisualsSelected && function(selectedVisuals) {
                        return _.every(selectedVisuals, function(selectedVisual) {
                            return (0, visualContainerGroup2.Vz)(selectedVisual) && (0, visualContainerUtilsHelper.s)(selectedVisual) === (0, 
                            visualContainerUtilsHelper.s)(selectedVisuals[0]);
                        });
                    }(selectedVisuals), areMultipleDifferentTypeVisualsSelected = areMultipleVisualsSelected && !areMultipleSameTypeVisualsSelected, updatedSelectedVisuals = areMultipleSameTypeVisualsSelected ? [ selectedVisuals[0] ] : selectedVisuals;
                    if (_.isEmpty(updatedSelectedVisuals) || !isOnObjectOn && areMultipleDifferentTypeVisualsSelected) return _this.formattingService.getFor({
                        type: 1
                    }).getViewModel$();
                    var viewModels$ = updatedSelectedVisuals.map(function(selectedVisual) {
                        return _this.formattingService.getFor({
                            type: 0,
                            canvasItem: selectedVisual
                        }).getViewModel$();
                    });
                    return (0, combineLatest.aj)(viewModels$).pipe((0, map.U)(function(viewModels) {
                        return function(formattingContracts) {
                            return 1 === formattingContracts.length && _.every(formattingContracts[0].cards, function(card) {
                                return "Page" === card.originSource;
                            });
                        }(formattingContracts = viewModels) || formattingContracts.length <= 1 ? formattingContracts[0] : function(formattingContracts) {
                            var revertToDefaultDescriptors, revertToDefaultDescritorMap, resolvedContract = {
                                cards: {},
                                groups: {},
                                slices: {},
                                revertToDefaultDescriptors: (revertToDefaultDescriptors = _.flatten(formattingContracts.map(function(formattingContract) {
                                    return formattingContract.revertToDefaultDescriptors;
                                })), revertToDefaultDescritorMap = new Map, _.forEach(revertToDefaultDescriptors, function(descriptor) {
                                    var key = "".concat(descriptor.objectName, "_").concat(descriptor.propertyName), keyWithSelector = descriptor.selector ? (0, 
                                    formattingModelUtil.$Q)(key, descriptor.selector) : key;
                                    revertToDefaultDescritorMap.has(keyWithSelector) || revertToDefaultDescritorMap.set(keyWithSelector, descriptor);
                                }), Array.from(revertToDefaultDescritorMap.values())),
                                canvasItem: null,
                                warnings: void 0
                            }, cardUidsSet = new Set(_.intersection.apply(_, formattingContracts.map(function(formattingContract) {
                                return _.map(Object.keys(formattingContract.cards), function(key) {
                                    return formattingContract.cards[key].uid;
                                });
                            }))), groupUidsSet = new Set(_.intersection.apply(_, formattingContracts.map(function(formattingContract) {
                                return _.compact(_.map(Object.keys(formattingContract.groups), function(key) {
                                    var group = formattingContract.groups[key];
                                    return cardUidsSet.has(group.cardUid) ? group.uid : void 0;
                                }));
                            }))), handledTypesSet = new Set(handledSliceTypes), sliceUidsSet = new Set(_.intersection.apply(_, formattingContracts.map(function(formattingContract) {
                                return _.compact(_.map(Object.keys(formattingContract.slices), function(key) {
                                    var slice = formattingContract.slices[key];
                                    return groupUidsSet.has(slice.groupUid) && handledTypesSet.has(slice.control.type) ? key : void 0;
                                }));
                            }))), resolvedCards = _.map(Array.from(cardUidsSet), function(uid) {
                                return function(formattingCardContracts, groupUidsSet) {
                                    var _a, commonGroups = _.intersection.apply(_, formattingCardContracts.map(function(card) {
                                        return card.groupUids;
                                    })), resolvedGroupUids = _.intersection(Array.from(groupUidsSet), commonGroups), primaryCard = formattingCardContracts[0], resolvedFormattingCardContract = {
                                        displayName: primaryCard.displayName,
                                        groupUids: resolvedGroupUids,
                                        index: primaryCard.index,
                                        originSource: primaryCard.originSource,
                                        pivotSource: primaryCard.pivotSource,
                                        uid: primaryCard.uid,
                                        aliasNames: primaryCard.aliasNames,
                                        analyticsPane: primaryCard.analyticsPane,
                                        description: primaryCard.description,
                                        disabled: _.some(formattingCardContracts, function(card) {
                                            return card.disabled;
                                        }),
                                        disabledReason: null === (_a = _.find(formattingCardContracts, function(card) {
                                            return card.disabled;
                                        })) || void 0 === _a ? void 0 : _a.disabledReason,
                                        revertToDefaultDescriptors: primaryCard.revertToDefaultDescriptors,
                                        suppressDisplayName: primaryCard.suppressDisplayName,
                                        topLevelToggle: resolveTopLevelToggleContractsWithSameUid(formattingCardContracts.map(function(card) {
                                            return card.topLevelToggle;
                                        })),
                                        warningMessage: void 0,
                                        warningMessage$: void 0
                                    };
                                    return formattingCardContracts.forEach(function(card) {
                                        debug.fF.assert(function() {
                                            return card.displayName === resolvedFormattingCardContract.displayName;
                                        }, "All the formatting card contracts should have the same displayName"), debug.fF.assert(function() {
                                            return card.originSource === resolvedFormattingCardContract.originSource;
                                        }, "All the formatting card contracts should have the same originSource"), debug.fF.assert(function() {
                                            return card.pivotSource === resolvedFormattingCardContract.pivotSource;
                                        }, "All the formatting card contracts should have the same pivotSource"), debug.fF.assert(function() {
                                            return card.uid === resolvedFormattingCardContract.uid;
                                        }, "All the formatting card contracts should have the same uid"), debug.fF.assert(function() {
                                            return _.isEqual(card.aliasNames, resolvedFormattingCardContract.aliasNames);
                                        }, "All the formatting card contracts should have the same aliasNames"), debug.fF.assert(function() {
                                            return _.isEqual(card.analyticsPane, resolvedFormattingCardContract.analyticsPane);
                                        }, "All the formatting card contracts should have the same analyticsPane"), debug.fF.assert(function() {
                                            return card.description === resolvedFormattingCardContract.description;
                                        }, "All the formatting card contracts should have the same description"), debug.fF.assert(function() {
                                            return _.isEqual(card.revertToDefaultDescriptors, resolvedFormattingCardContract.revertToDefaultDescriptors);
                                        }, "All the formatting card contracts should have the same revertToDefaultDescriptors"), 
                                        debug.fF.assert(function() {
                                            return card.suppressDisplayName === resolvedFormattingCardContract.suppressDisplayName;
                                        }, "All the formatting card contracts should have the same suppressDisplayName");
                                    }), resolvedFormattingCardContract;
                                }(formattingContracts.map(function(contract) {
                                    return contract.cards[uid];
                                }), groupUidsSet);
                            });
                            resolvedCards.forEach(function(card) {
                                return resolvedContract.cards[card.uid] = card;
                            });
                            var resolvedGroups = _.map(Array.from(groupUidsSet), function(uid) {
                                return function(formattingGroupContracts, sliceUidsSet) {
                                    var _a, commonSlices = _.intersection.apply(_, formattingGroupContracts.map(function(group) {
                                        return _.map(group.sliceIds, function(slideId) {
                                            return (0, formattingModelUtil.$Q)(slideId.uid, slideId.selector);
                                        });
                                    })), resolvedSliceUidsSet = new Set(_.intersection(Array.from(sliceUidsSet), commonSlices)), primaryGroup = formattingGroupContracts[0], resolvedFormattingGroupContract = {
                                        displayName: primaryGroup.displayName,
                                        originSource: primaryGroup.originSource,
                                        pivotSource: primaryGroup.pivotSource,
                                        uid: primaryGroup.uid,
                                        aliasNames: primaryGroup.aliasNames,
                                        description: primaryGroup.description,
                                        disabled: _.some(formattingGroupContracts, function(group) {
                                            return group.disabled;
                                        }),
                                        disabledReason: null === (_a = _.find(formattingGroupContracts, function(group) {
                                            return group.disabled;
                                        })) || void 0 === _a ? void 0 : _a.disabledReason,
                                        suppressDisplayName: primaryGroup.suppressDisplayName,
                                        cardUid: primaryGroup.cardUid,
                                        sliceIds: _.filter(primaryGroup.sliceIds, function(sliceId) {
                                            return resolvedSliceUidsSet.has((0, formattingModelUtil.$Q)(sliceId.uid, sliceId.selector));
                                        }),
                                        collapsible: primaryGroup.collapsible,
                                        delaySaveSlices: primaryGroup.delaySaveSlices,
                                        disableInteractivity: primaryGroup.disableInteractivity,
                                        hidden: primaryGroup.hidden,
                                        inheritDisabled: primaryGroup.inheritDisabled,
                                        topLevelToggle: resolveTopLevelToggleContractsWithSameUid(formattingGroupContracts.map(function(group) {
                                            return group.topLevelToggle;
                                        })),
                                        warningMessage: void 0,
                                        parentContainers: primaryGroup.parentContainers
                                    };
                                    return formattingGroupContracts.forEach(function(group) {
                                        debug.fF.assert(function() {
                                            return group.displayName === resolvedFormattingGroupContract.displayName;
                                        }, "All the formatting group contracts should have the same displayName"), debug.fF.assert(function() {
                                            return group.originSource === resolvedFormattingGroupContract.originSource;
                                        }, "All the formatting group contracts should have the same originSource"), debug.fF.assert(function() {
                                            return group.pivotSource === resolvedFormattingGroupContract.pivotSource;
                                        }, "All the formatting group contracts should have the same pivotSource"), debug.fF.assert(function() {
                                            return group.uid === resolvedFormattingGroupContract.uid;
                                        }, "All the formatting group contracts should have the same uid"), debug.fF.assert(function() {
                                            return _.isEqual(group.aliasNames, resolvedFormattingGroupContract.aliasNames);
                                        }, "All the formatting group contracts should have the same aliasNames"), debug.fF.assert(function() {
                                            return group.description === resolvedFormattingGroupContract.description;
                                        }, "All the formatting group contracts should have the same description"), debug.fF.assert(function() {
                                            return group.suppressDisplayName === resolvedFormattingGroupContract.suppressDisplayName;
                                        }, "All the formatting group contracts should have the same suppressDisplayName"), 
                                        debug.fF.assert(function() {
                                            return group.cardUid === resolvedFormattingGroupContract.cardUid;
                                        }, "All the formatting group contracts should have the same cardUid"), debug.fF.assert(function() {
                                            return group.collapsible === resolvedFormattingGroupContract.collapsible;
                                        }, "All the formatting group contracts should have the same collapsible"), debug.fF.assert(function() {
                                            return group.delaySaveSlices === resolvedFormattingGroupContract.delaySaveSlices;
                                        }, "All the formatting group contracts should have the same delaySaveSlices"), debug.fF.assert(function() {
                                            return group.disableInteractivity === resolvedFormattingGroupContract.disableInteractivity;
                                        }, "All the formatting group contracts should have the same disableInteractivity"), 
                                        debug.fF.assert(function() {
                                            return group.hidden === resolvedFormattingGroupContract.hidden;
                                        }, "All the formatting group contracts should have the same hidden"), debug.fF.assert(function() {
                                            return group.inheritDisabled === resolvedFormattingGroupContract.inheritDisabled;
                                        }, "All the formatting group contracts should have the same inheritDisabled"), debug.fF.assert(function() {
                                            return _.isEqual(group.parentContainers, resolvedFormattingGroupContract.parentContainers);
                                        }, "All the formatting group contracts should have the same parentContainers");
                                    }), resolvedFormattingGroupContract;
                                }(formattingContracts.map(function(contract) {
                                    return contract.groups[uid];
                                }), sliceUidsSet);
                            });
                            return resolvedGroups.forEach(function(group) {
                                return resolvedContract.groups[group.uid] = group;
                            }), _.map(Array.from(sliceUidsSet), function(uid) {
                                return formattingSliceContracts = formattingContracts.map(function(contract) {
                                    return contract.slices[uid];
                                }), (0, build_control_util.IW)(formattingSliceContracts[0]) ? function(formattingSliceContracts) {
                                    debug.fF.assert(function() {
                                        return _.every(formattingSliceContracts, function(slice) {
                                            return (0, build_control_util.IW)(slice);
                                        });
                                    }, "All slices should be composite slices");
                                    var compositeControl = function(compositeControlContracts) {
                                        switch (compositeControlContracts[0].type) {
                                          case "MarginPadding":
                                            return function(marginPaddingControlContracts) {
                                                if (areAllSlicesSameType(marginPaddingControlContracts, "MarginPadding")) {
                                                    var primaryMarginPaddingControlContract_1 = marginPaddingControlContracts[0], allProperties = marginPaddingControlContracts.map(function(marginPadding) {
                                                        return marginPadding.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(marginPaddingControlContracts, function(marginPadding) {
                                                            for (var key in marginPadding.properties) if (!areDescriptorsEqual(marginPadding.properties[key].descriptor, primaryMarginPaddingControlContract_1.properties[key].descriptor)) return !1;
                                                            return !0;
                                                        });
                                                    }, "All the marginPadding slices should have the same descriptor"), {
                                                        type: "MarginPadding",
                                                        properties: {
                                                            bottom: resolveNumUpDownProperties(allProperties.map(function(properties) {
                                                                return properties.bottom;
                                                            })),
                                                            left: resolveNumUpDownProperties(allProperties.map(function(properties) {
                                                                return properties.left;
                                                            })),
                                                            right: resolveNumUpDownProperties(allProperties.map(function(properties) {
                                                                return properties.right;
                                                            })),
                                                            top: resolveNumUpDownProperties(allProperties.map(function(properties) {
                                                                return properties.top;
                                                            }))
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the MarginPadding type");
                                            }(compositeControlContracts);

                                          case "FontControl":
                                            return function(fontControlControlContracts) {
                                                if (areAllSlicesSameType(fontControlControlContracts, "FontControl")) {
                                                    var primaryProperties_1 = fontControlControlContracts[0].properties;
                                                    debug.fF.assert(function() {
                                                        return _.every(fontControlControlContracts, function(fontControl) {
                                                            for (var key in fontControl.properties) if (!areDescriptorsEqual(fontControl.properties[key].descriptor, primaryProperties_1[key].descriptor)) return !1;
                                                            return !0;
                                                        });
                                                    }, "All the fontControl slices should have the same descriptor");
                                                    var fontControlProperties = fontControlControlContracts.map(function(fontControl) {
                                                        return fontControl.properties;
                                                    }), fontFamilyProperties = fontControlProperties.map(function(properties) {
                                                        return properties.fontFamily;
                                                    }), fontSizeProperties = fontControlProperties.map(function(properties) {
                                                        return properties.fontSize;
                                                    }), boldProperties = fontControlProperties.map(function(properties) {
                                                        return properties.bold;
                                                    }), italicProperties = fontControlProperties.map(function(properties) {
                                                        return properties.italic;
                                                    }), underlineProperties = fontControlProperties.map(function(properties) {
                                                        return properties.underline;
                                                    });
                                                    return {
                                                        type: "FontControl",
                                                        properties: {
                                                            fontFamily: {
                                                                descriptor: primaryProperties_1.fontFamily.descriptor,
                                                                value: resolveValues(fontFamilyProperties.map(function(fontFamily) {
                                                                    return fontFamily.value;
                                                                }), null)
                                                            },
                                                            fontSize: resolveNumUpDownProperties(fontSizeProperties),
                                                            bold: {
                                                                descriptor: primaryProperties_1.bold.descriptor,
                                                                value: resolveValues(boldProperties.map(function(bold) {
                                                                    return bold.value;
                                                                }), null)
                                                            },
                                                            italic: {
                                                                descriptor: primaryProperties_1.italic.descriptor,
                                                                value: resolveValues(italicProperties.map(function(italic) {
                                                                    return italic.value;
                                                                }), null)
                                                            },
                                                            underline: {
                                                                descriptor: primaryProperties_1.underline.descriptor,
                                                                value: resolveValues(underlineProperties.map(function(underline) {
                                                                    return underline.value;
                                                                }), null)
                                                            }
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the FontControl type");
                                            }(compositeControlContracts);

                                          default:
                                            debug.fF.assertFail("We have not implemented the code to resolve ".concat(compositeControlContracts[0].type, " type of slice -- please add it to the resolveSimpleSliceContract function"));
                                        }
                                    }(formattingSliceContracts.map(function(slice) {
                                        return slice.control;
                                    }));
                                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, resolveBaseSliceProperties(formattingSliceContracts)), {
                                        control: compositeControl
                                    });
                                }(formattingSliceContracts) : function(formattingSliceContracts) {
                                    debug.fF.assert(function() {
                                        return _.every(formattingSliceContracts, function(slice) {
                                            return !(0, build_control_util.IW)(slice);
                                        });
                                    }, "All slices should be simple slices");
                                    var simpleControl = function(simpleControlContracts) {
                                        switch (simpleControlContracts[0].type) {
                                          case "Slider":
                                            return function(sliderControlContracts) {
                                                if (areAllSlicesSameType(sliderControlContracts, "Slider")) {
                                                    var primarySliderControlContract_1 = sliderControlContracts[0], allProperties_2 = sliderControlContracts.map(function(slider) {
                                                        return slider.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(allProperties_2, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primarySliderControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the slider slices should have the same descriptor"), {
                                                        type: "Slider",
                                                        properties: {
                                                            descriptor: primarySliderControlContract_1.properties.descriptor,
                                                            placeholderText: resolveValues(allProperties_2.map(function(property) {
                                                                return property.placeholderText;
                                                            }), void 0),
                                                            value: resolveValues(allProperties_2.map(function(property) {
                                                                return property.value;
                                                            }), null),
                                                            options: resolveNumUpDownOptions(allProperties_2.map(function(property) {
                                                                return property.options;
                                                            }))
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the Slider type");
                                            }(simpleControlContracts);

                                          case "NumUpDown":
                                            return function(numUpDownControlContracts) {
                                                if (areAllSlicesSameType(numUpDownControlContracts, "NumUpDown")) {
                                                    var primaryNumUpDownControlContract_1 = numUpDownControlContracts[0], allProperties_3 = numUpDownControlContracts.map(function(numUpDown) {
                                                        return numUpDown.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(allProperties_3, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primaryNumUpDownControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the NumUpDown slices should have the same descriptor"), {
                                                        type: "NumUpDown",
                                                        properties: resolveNumUpDownProperties(allProperties_3)
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the numUpDown type");
                                            }(simpleControlContracts);

                                          case "TextArea":
                                            return function(textAreaControlContracts) {
                                                if (areAllSlicesSameType(textAreaControlContracts, "TextArea")) {
                                                    var primaryTextAreaControlContract_1 = textAreaControlContracts[0], allProperties_5 = textAreaControlContracts.map(function(textArea) {
                                                        return textArea.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(allProperties_5, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primaryTextAreaControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the TextArea slices should have the same descriptor"), {
                                                        type: "TextArea",
                                                        properties: {
                                                            descriptor: primaryTextAreaControlContract_1.properties.descriptor,
                                                            placeholder: resolveValues(allProperties_5.map(function(property) {
                                                                return property.placeholder;
                                                            }), void 0),
                                                            value: resolveValues(allProperties_5.map(function(property) {
                                                                return property.value;
                                                            }), null),
                                                            validators: resolveValues(allProperties_5.map(function(property) {
                                                                return property.validators;
                                                            }), void 0)
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the TextArea type");
                                            }(simpleControlContracts);

                                          case "TextInput":
                                            return function(textInputControlContracts) {
                                                if (areAllSlicesSameType(textInputControlContracts, "TextInput")) {
                                                    var primaryTextInputControlContract_1 = textInputControlContracts[0], allProperties_4 = textInputControlContracts.map(function(textInput) {
                                                        return textInput.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(allProperties_4, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primaryTextInputControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the TextInput slices should have the same descriptor"), {
                                                        type: "TextInput",
                                                        properties: {
                                                            descriptor: primaryTextInputControlContract_1.properties.descriptor,
                                                            placeholder: resolveValues(allProperties_4.map(function(property) {
                                                                return property.placeholder;
                                                            }), void 0),
                                                            value: resolveValues(allProperties_4.map(function(property) {
                                                                return property.value;
                                                            }), null),
                                                            validators: resolveValues(allProperties_4.map(function(property) {
                                                                return property.validators;
                                                            }), void 0)
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the TextInput type");
                                            }(simpleControlContracts);

                                          case "ToggleSwitch":
                                            return areAllSlicesSameType(toggleSwitchControlContracts = simpleControlContracts, "ToggleSwitch") ? {
                                                type: "ToggleSwitch",
                                                properties: resolveToggleSwitchProperties(toggleSwitchControlContracts.map(function(toggleSwitch) {
                                                    return toggleSwitch.properties;
                                                }))
                                            } : void debug.fF.assertFail("All the slices should be of the ToggleSwitch type");

                                          case "ColorPicker":
                                            return function(colorPickerControlContracts) {
                                                if (areAllSlicesSameType(colorPickerControlContracts, "ColorPicker")) {
                                                    var primaryColorPickerControlContract_1 = colorPickerControlContracts[0], allProperties_6 = colorPickerControlContracts.map(function(colorPicker) {
                                                        return colorPicker.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(allProperties_6, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primaryColorPickerControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the ColorPicker slices should have the same descriptor"), {
                                                        type: "ColorPicker",
                                                        properties: {
                                                            descriptor: primaryColorPickerControlContract_1.properties.descriptor,
                                                            value: resolveValues(allProperties_6.map(function(property) {
                                                                return property.value;
                                                            }), null),
                                                            defaultColor: resolveValues(allProperties_6.map(function(property) {
                                                                return property.defaultColor;
                                                            }), void 0),
                                                            isNoFillItemSupported: resolveValues(allProperties_6.map(function(property) {
                                                                return property.isNoFillItemSupported;
                                                            }), void 0)
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the ColorPicker type");
                                            }(simpleControlContracts);

                                          case "AlignmentGroup":
                                            return function(alignmentGroupControlContracts) {
                                                if (areAllSlicesSameType(alignmentGroupControlContracts, "AlignmentGroup")) {
                                                    var primaryAlignmentGroupControlContract_1 = alignmentGroupControlContracts[0], allProperties_7 = alignmentGroupControlContracts.map(function(alignmentGroup) {
                                                        return alignmentGroup.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(allProperties_7, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primaryAlignmentGroupControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the alignment slices should have the same descriptor"), debug.fF.assert(function() {
                                                        return _.every(allProperties_7, function(property) {
                                                            return property.mode === primaryAlignmentGroupControlContract_1.properties.mode;
                                                        });
                                                    }, "All the alignment slices should have the same mode"), {
                                                        type: "AlignmentGroup",
                                                        properties: {
                                                            descriptor: primaryAlignmentGroupControlContract_1.properties.descriptor,
                                                            value: resolveValues(allProperties_7.map(function(property) {
                                                                return property.value;
                                                            }), null),
                                                            mode: primaryAlignmentGroupControlContract_1.properties.mode,
                                                            supportsNoSelection: resolveValues(allProperties_7.map(function(property) {
                                                                return property.supportsNoSelection;
                                                            }), void 0)
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the AlignmentGroup type");
                                            }(simpleControlContracts);

                                          case "Dropdown":
                                            return function(dropdownControlContracts) {
                                                if (areAllSlicesSameType(dropdownControlContracts, "Dropdown")) {
                                                    var primaryDropdownControlContract_1 = dropdownControlContracts[0], allProperties_8 = dropdownControlContracts.map(function(dropdown) {
                                                        return dropdown.properties;
                                                    });
                                                    if (!allProperties_8.every(function(dropdown) {
                                                        return function(dropdown) {
                                                            return property_pane_util.WN(dropdown);
                                                        }(dropdown);
                                                    })) return void debug.fF.assertFail("All the slices should be of the ItemDropdown type");
                                                    debug.fF.assert(function() {
                                                        return _.every(allProperties_8, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primaryDropdownControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the dropdown slices should have the same descriptor");
                                                    var itemValueSets_1 = _.map(allProperties_8, function(property) {
                                                        return property.items;
                                                    }).map(function(items) {
                                                        return new Set(_.map(items, function(item) {
                                                            return item.value;
                                                        }));
                                                    }), commonItems = allProperties_8[0].items.filter(function(item) {
                                                        return itemValueSets_1.every(function(set) {
                                                            return set.has(item.value);
                                                        });
                                                    });
                                                    return {
                                                        type: "Dropdown",
                                                        properties: {
                                                            descriptor: primaryDropdownControlContract_1.properties.descriptor,
                                                            items: commonItems,
                                                            value: resolveValues(allProperties_8.map(function(property) {
                                                                return property.value;
                                                            }), null)
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the Dropdown type");
                                            }(simpleControlContracts);

                                          case "FontPicker":
                                            return function(fontPickerControlContracts) {
                                                if (areAllSlicesSameType(fontPickerControlContracts, "FontPicker")) {
                                                    var primaryFontPickerControlContract_1 = fontPickerControlContracts[0], allProperties_1 = fontPickerControlContracts.map(function(slider) {
                                                        return slider.properties;
                                                    });
                                                    return debug.fF.assert(function() {
                                                        return _.every(allProperties_1, function(property) {
                                                            return areDescriptorsEqual(property.descriptor, primaryFontPickerControlContract_1.properties.descriptor);
                                                        });
                                                    }, "All the FontPicker slices should have the same descriptor"), {
                                                        type: "FontPicker",
                                                        properties: {
                                                            descriptor: primaryFontPickerControlContract_1.properties.descriptor,
                                                            value: resolveValues(allProperties_1.map(function(property) {
                                                                return property.value;
                                                            }), null)
                                                        }
                                                    };
                                                }
                                                debug.fF.assertFail("All the slices should be of the FontPicker type");
                                            }(simpleControlContracts);

                                          default:
                                            debug.fF.assertFail("We have not implemented the code to resolve ".concat(simpleControlContracts[0].type, " type of slice -- please add it to the resolveSimpleSliceContract function"));
                                        }
                                        var toggleSwitchControlContracts;
                                    }(formattingSliceContracts.map(function(slice) {
                                        return slice.control;
                                    }));
                                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, resolveBaseSliceProperties(formattingSliceContracts)), {
                                        control: simpleControl
                                    });
                                }(formattingSliceContracts);
                                var formattingSliceContracts;
                            }).forEach(function(slice) {
                                return resolvedContract.slices[(0, formattingModelUtil.$Q)(slice.uid, (0, formattingModelUtil.O7)(slice))] = slice;
                            }), resolvedContract;
                        }(formattingContracts = _.map(formattingContracts, function(contract) {
                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, contract), {
                                cards: Object.keys(contract.cards).reduce(function(filtered, key) {
                                    var card = contract.cards[key];
                                    return "Format_Label_General" !== card.originSource || function(card) {
                                        return null != _.find(skipMergingCardNames, function(cardName) {
                                            return card.uid.endsWith(cardName);
                                        });
                                    }(card) || (filtered[key] = card), filtered;
                                }, {}),
                                groups: Object.keys(contract.groups).reduce(function(filtered, key) {
                                    var group = contract.groups[key];
                                    return "Format_Label_General" === group.originSource && (filtered[key] = group), 
                                    filtered;
                                }, {}),
                                slices: Object.keys(contract.slices).reduce(function(filtered, key) {
                                    var slice = contract.slices[key];
                                    return "Format_Label_General" === slice.originSource && (filtered[key] = slice), 
                                    filtered;
                                }, {})
                            });
                        }));
                        var formattingContracts;
                    }));
                }));
            }, FormattingPaneComponentStore.prototype.getPivotViewModel = function(pivotKey, formattingContract, toggleInformation, disabledCards, disabledSlices) {
                var _a, cards = this.getFormattingCardViewModel(pivotKey, formattingContract, toggleInformation, disabledCards);
                if (!_.isEmpty(cards)) {
                    var slicesPerPivot = _.pickBy(formattingContract.slices, function(slice) {
                        return slice.pivotSource === pivotKey;
                    });
                    return slicesPerPivot = this.applyDisabledStateToSlices(slicesPerPivot, disabledSlices), 
                    {
                        pivotDisplayName: this.getPivotDisplayName(null === (_a = formattingContract.canvasItem) || void 0 === _a ? void 0 : _a.value, pivotKey),
                        cards,
                        groups: this.getFormattingGroupViewModel(pivotKey, formattingContract, toggleInformation),
                        slices: slicesPerPivot,
                        revertToDefaultDescriptors: _.flatten(Object.values(cards).map(function(card) {
                            var _a;
                            return null !== (_a = card.revertToDefaultDescriptors) && void 0 !== _a ? _a : [];
                        }))
                    };
                }
            }, FormattingPaneComponentStore.prototype.applyDisabledStateToSlices = function(slices, disabledSlices) {
                if (disabledSlices && slices) {
                    var hasDisabledSlices_1 = !1, newSlices_1 = {}, conditionalFormattingDisabledData_1 = disabledSlices.ConditionalFormattingControl;
                    return Object.keys(slices).forEach(function(sliceKey) {
                        var disabledSliceData, sliceContract = slices[sliceKey], controlType = sliceContract.control.type;
                        conditionalFormattingDisabledData_1 && "ToggleSwitch" === controlType && sliceContract.conditionalFormattingObjects && sliceContract.saveCallback && (disabledSliceData = conditionalFormattingDisabledData_1), 
                        disabledSliceData || (disabledSliceData = disabledSlices[controlType]);
                        var filterUid = null == disabledSliceData ? void 0 : disabledSliceData.filterUid;
                        !disabledSliceData || filterUid && !filterUid.some(function(id) {
                            return id === sliceContract.uid;
                        }) ? newSlices_1[sliceKey] = sliceContract : (hasDisabledSlices_1 = !0, newSlices_1[sliceKey] = (0, 
                        tslib_es6.__assign)((0, tslib_es6.__assign)({}, sliceContract), {
                            disabled: !0,
                            description: disabledSliceData.disabledReason
                        }));
                    }), hasDisabledSlices_1 ? newSlices_1 : slices;
                }
                return slices;
            }, FormattingPaneComponentStore.prototype.getFormattingCardViewModel = function(pivotKey, formattingContract, toggleInformation, disabledCards) {
                var _this = this, cardsForPivot = _.pickBy(formattingContract.cards, function(card) {
                    return card.pivotSource === pivotKey;
                });
                return _.mapValues(cardsForPivot, function(card) {
                    var _a, _b, _c, _d, _e, cardUidWithoutPivotSource = formatting_utils.UV(card.uid, card.pivotSource), revertToDefaultDescriptors = (null !== (_a = card.revertToDefaultDescriptors) && void 0 !== _a ? _a : []).map(function(descriptor) {
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                            originSource: card.originSource
                        });
                    }), disabled = !(!disabledCards || !disabledCards[cardUidWithoutPivotSource]) || card.disabled, revertToDefaultEnabled = _this.formattingService.getRevertToDefaultEnabled(null === (_b = formattingContract.canvasItem) || void 0 === _b ? void 0 : _b.value, revertToDefaultDescriptors);
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card), {
                        disabled,
                        topLevelToggle: card.topLevelToggle ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card.topLevelToggle), {
                            disabled: disabled || card.topLevelToggle.disabled
                        }) : void 0,
                        disabledReason: null !== (_d = null === (_c = null == disabledCards ? void 0 : disabledCards[cardUidWithoutPivotSource]) || void 0 === _c ? void 0 : _c.disabledReason) && void 0 !== _d ? _d : card.disabledReason,
                        toggleState: disabled ? 0 : null !== (_e = toggleInformation[card.uid]) && void 0 !== _e ? _e : 0,
                        showChangeIndicator: revertToDefaultEnabled,
                        revertToDefaultEnabled,
                        revertToDefaultDescriptors
                    });
                });
            }, FormattingPaneComponentStore.prototype.getFormattingGroupViewModel = function(pivotKey, formattingContract, toggleInformation) {
                var _this = this, cardsForPivot = _.pickBy(formattingContract.cards, function(card) {
                    return card.pivotSource === pivotKey;
                }), reportViewSettings = this.reportViewSettingsService && this.reportViewSettingsService.getReportViewSettings({
                    reportSettings: !1,
                    userSettings: !1
                }), shouldAlwaysExpandGroup = reportViewSettings && reportViewSettings.userSettings.formatPaneExpandSubcategories;
                return Object.keys(cardsForPivot).reduce(function(result, cardKey) {
                    var isFirstGroupExpanded = !1;
                    return formattingContract.cards[cardKey].groupUids.forEach(function(groupId) {
                        var _a, toggleState, group = formattingContract.groups[groupId], collapsible = !!group.displayName && (!!_.isUndefined(group.collapsible) || group.collapsible);
                        group.disableInteractivity ? toggleState = 0 : shouldAlwaysExpandGroup ? toggleState = group.disabled ? 0 : 1 : (toggleState = isFirstGroupExpanded && collapsible || group.disabled || group.hidden ? 0 : 1, 
                        isFirstGroupExpanded = !(!collapsible || group.disabled || group.hidden) || isFirstGroupExpanded), 
                        result[groupId] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, group), {
                            toggleState: group.disabled ? 0 : null !== (_a = toggleInformation[(0, formattingModelUtil.Ko)(group.uid)]) && void 0 !== _a ? _a : toggleState,
                            showChangeIndicator: _this.getGroupShowChangeIndicator(group.sliceIds, group.topLevelToggle, formattingContract)
                        });
                    }), result;
                }, {});
            }, FormattingPaneComponentStore.prototype.getRevertToDefaultDescriptors = function(availablePivots, formattingContract) {
                return formattingContract.revertToDefaultDescriptors.filter(function(descriptor) {
                    return availablePivots.includes(descriptor.originSource);
                });
            }, FormattingPaneComponentStore.prototype.getPivotDisplayName = function(container, formattingSource) {
                switch (formattingSource) {
                  case "Visual":
                    return formatting_utils.um(container, this.featureSwitchService);

                  case "Format_Label_General":
                    return formatting_utils.An("Format_Label_General", this.featureSwitchService);

                  case "Page":
                    return formatting_utils.An("Page", this.featureSwitchService);

                  case "Analytics":
                    return formatting_utils.An("VisualizationPane_Section_Analytics", this.featureSwitchService);

                  default:
                    debug.fF.assertNever(formattingSource);
                }
            }, FormattingPaneComponentStore.prototype.getGroupShowChangeIndicator = function(groupSliceIds, topLevelToggle, formattingContract) {
                var slices = groupSliceIds.map(function(sliceId) {
                    var sliceKey = (0, formattingModelUtil.$Q)(sliceId.uid, sliceId.selector);
                    return formattingContract.slices[sliceKey];
                });
                return this.shouldShowGroupChangeIndicator(slices, topLevelToggle);
            }, FormattingPaneComponentStore.prototype.shouldShowGroupChangeIndicator = function(groupSlices, topLevelToggle) {
                return (null == topLevelToggle ? void 0 : topLevelToggle.showChangeIndicator) || groupSlices.some(function(slice) {
                    return slice.showChangeIndicator;
                });
            }, FormattingPaneComponentStore.\u0275fac = function(t) {
                return new (t || FormattingPaneComponentStore)(core["\u0275\u0275inject"](reportViewSettings.a, 8), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](visual_authoring_service.$8));
            }, FormattingPaneComponentStore.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingPaneComponentStore,
                factory: FormattingPaneComponentStore.\u0275fac
            }), FormattingPaneComponentStore;
        }(ngrx_component_store.m1);
        function filterCardGroups(groupIds, searchString, parentMatched, pivot, filteredItems) {
            for (var perCardMatches = 0, _i = 0, groupIds_1 = groupIds; _i < groupIds_1.length; _i++) {
                var groupId = groupIds_1[_i], matched = !1, group = pivot.groups[groupId];
                matchFilter(searchString, group.displayName, group.aliasNames) && (matched = !0, 
                perCardMatches++);
                var childMatched = !1;
                if (group.sliceIds) {
                    var filterOutput = filterGroupSlices(group.sliceIds, searchString, matched || parentMatched, pivot, filteredItems);
                    perCardMatches += filterOutput.itemsMatched, childMatched = filterOutput.itemsMatched > 0;
                }
                (matched || parentMatched || childMatched) && filteredItems.groupIds.add(groupId);
            }
            return {
                itemsMatched: perCardMatches
            };
        }
        function filterGroupSlices(sliceIds, searchString, parentMatched, pivot, filteredItems) {
            for (var perGroupMatches = 0, _i = 0, sliceIds_1 = sliceIds; _i < sliceIds_1.length; _i++) {
                var sliceId = sliceIds_1[_i], key = (0, formattingModelUtil.$Q)(sliceId.uid, sliceId.selector), slice = pivot.slices[key], matched = matchFilter(searchString, slice.displayName, slice.aliasNames);
                perGroupMatches += matched ? 1 : 0, (matched || parentMatched) && filteredItems.sliceIds.add(key);
            }
            return {
                itemsMatched: perGroupMatches
            };
        }
        function matchFilter(searchString, displayName, aliasNames) {
            var filter = (0, JsCommon_String.e)(searchString || "", "i");
            return (null == displayName ? void 0 : displayName.search(filter)) >= 0 || (null == aliasNames ? void 0 : aliasNames.some(function(alias) {
                return alias.search(filter) >= 0;
            }));
        }
        function getShowPivot(viewModel) {
            return !viewModel.searchString && !!viewModel.selectedPivot.key && "Analytics" !== viewModel.selectedPivot.key && "Page" !== viewModel.selectedPivot.key;
        }
        function updateToggleInformation(viewModel) {
            var toggleInformation = (0, tslib_es6.__assign)({}, viewModel.toggleInformation);
            return Object.values(viewModel.pivots).forEach(function(pivot) {
                Object.keys(pivot.cards).forEach(function(key) {
                    toggleInformation[key] = pivot.cards[key].disabled ? toggleInformation[key] : pivot.cards[key].toggleState;
                }), Object.keys(pivot.groups).forEach(function(key) {
                    var group = pivot.groups[key], groupId = (0, formattingModelUtil.Ko)(key);
                    toggleInformation[groupId] = group.disabled || group.hidden ? toggleInformation[groupId] : pivot.groups[key].toggleState;
                });
            }), toggleInformation;
        }
        var accessible_click_directive = __webpack_require__(44581), pbi_emphasis_background_directive = __webpack_require__(2380), pbi_highlight_component = __webpack_require__(90955), Subject = __webpack_require__(30794), BehaviorSubject = __webpack_require__(35510), merge = __webpack_require__(63057), mapTo = __webpack_require__(73805), assertThisInitialized = __webpack_require__(76920), inheritsLoose = __webpack_require__(37419), innerSubscribe = __webpack_require__(73449), BufferOperator = function() {
            function BufferOperator(closingNotifier) {
                this.closingNotifier = closingNotifier;
            }
            return BufferOperator.prototype.call = function(subscriber, source) {
                return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
            }, BufferOperator;
        }(), BufferSubscriber = function(_SimpleOuterSubscribe) {
            function BufferSubscriber(destination, closingNotifier) {
                var _this;
                return (_this = _SimpleOuterSubscribe.call(this, destination) || this).buffer = [], 
                _this.add((0, innerSubscribe.ft)(closingNotifier, new innerSubscribe.IY((0, assertThisInitialized.Z)(_this)))), 
                _this;
            }
            (0, inheritsLoose.Z)(BufferSubscriber, _SimpleOuterSubscribe);
            var _proto2 = BufferSubscriber.prototype;
            return _proto2._next = function(value) {
                this.buffer.push(value);
            }, _proto2.notifyNext = function() {
                var buffer = this.buffer;
                this.buffer = [], this.destination.next(buffer);
            }, BufferSubscriber;
        }(innerSubscribe.Ds), pbi_emphasis_directive = __webpack_require__(11991), empty = __webpack_require__(37272), animations = __webpack_require__(26124), PbiEmphasisBorderDirective = function(_super) {
            function PbiEmphasisBorderDirective(animationBuilder, element) {
                return _super.call(this, animationBuilder, element) || this;
            }
            return (0, tslib_es6.__extends)(PbiEmphasisBorderDirective, _super), PbiEmphasisBorderDirective.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("pbiEmphasisBorder").pipe((0, switchMap.w)(function(emphasisInput) {
                    return emphasisInput || empty.E;
                })).pipe((0, withLatestFrom.M)(this.changes$("pbiEmphasisBorderColor", !0))).subscribe(function(_a) {
                    var color = _a[1], animation = _this.getAnimation("borderColor", null != color ? color : "var(--globalColorBrand160)");
                    _this.emphasize(animation);
                });
            }, PbiEmphasisBorderDirective.\u0275fac = function(t) {
                return new (t || PbiEmphasisBorderDirective)(core["\u0275\u0275directiveInject"](animations._j, 8), core["\u0275\u0275directiveInject"](core.ElementRef));
            }, PbiEmphasisBorderDirective.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiEmphasisBorderDirective,
                selectors: [ [ "", "pbiEmphasisBorder", "" ] ],
                inputs: {
                    pbiEmphasisBorder: "pbiEmphasisBorder",
                    pbiEmphasisBorderColor: "pbiEmphasisBorderColor"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ]
            }), PbiEmphasisBorderDirective;
        }(pbi_emphasis_directive.A), of = __webpack_require__(11547), from = __webpack_require__(82762), timer = __webpack_require__(40133), exhaustMap = __webpack_require__(28884), debounce = __webpack_require__(46358);
        function generateGuid() {
            var guid = "", idx = 0;
            for (idx = 0; idx < 32; idx += 1) {
                var guidDigitsItem = 16 * Math.random() | 0;
                switch (idx) {
                  case 8:
                  case 12:
                  case 16:
                  case 20:
                    guid += "-";
                }
                guid += guidDigitsItem.toString(16);
            }
            return guid;
        }
        var rtl_service = __webpack_require__(88693), screen_reader_service = __webpack_require__(83309);
        function isLarger(first, second) {
            if ("number" == typeof first) {
                var firstNumber = Number(first), secondNumber = Number(second);
                return !isFinite(firstNumber) || !isFinite(secondNumber) || firstNumber > secondNumber;
            }
            return first > second;
        }
        var PbiMinValidator = function() {
            function PbiMinValidator() {}
            return PbiMinValidator.prototype.validate = function(control) {
                var _a;
                return _.isNil(this.minValue) || _.isNil(control.value) || !isLarger(this.minValue, control.value) ? null : ((_a = {})[0] = {
                    thresholdValue: this.minValue,
                    currentValue: control.value
                }, _a);
            }, PbiMinValidator.\u0275fac = function(t) {
                return new (t || PbiMinValidator);
            }, PbiMinValidator.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiMinValidator,
                selectors: [ [ "", "pbiMin", "" ] ],
                inputs: {
                    minValue: [ "pbiMin", "minValue" ]
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.Cf,
                    useExisting: PbiMinValidator,
                    multi: !0
                } ]) ]
            }), PbiMinValidator;
        }(), PbiMaxValidator = function() {
            function PbiMaxValidator() {}
            return PbiMaxValidator.prototype.validate = function(control) {
                var _a;
                return _.isNil(this.maxValue) || _.isNil(control.value) || !isLarger(control.value, this.maxValue) ? null : ((_a = {})[1] = {
                    thresholdValue: this.maxValue,
                    currentValue: control.value
                }, _a);
            }, PbiMaxValidator.\u0275fac = function(t) {
                return new (t || PbiMaxValidator);
            }, PbiMaxValidator.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiMaxValidator,
                selectors: [ [ "", "pbiMax", "" ] ],
                inputs: {
                    maxValue: [ "pbiMax", "maxValue" ]
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.Cf,
                    useExisting: PbiMaxValidator,
                    multi: !0
                } ]) ]
            }), PbiMaxValidator;
        }(), PbiRequired = function() {
            function PbiRequired() {}
            return PbiRequired.prototype.validate = function(control) {
                var _a;
                return this.required && fesm2022_forms.kI.required(control) ? ((_a = {})[2] = !0, 
                _a) : null;
            }, PbiRequired.\u0275fac = function(t) {
                return new (t || PbiRequired);
            }, PbiRequired.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiRequired,
                selectors: [ [ "", "pbiRequired", "" ] ],
                inputs: {
                    required: [ "pbiRequired", "required" ]
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.Cf,
                    useExisting: PbiRequired,
                    multi: !0
                } ]) ]
            }), PbiRequired;
        }(), PbiPattern = function() {
            function PbiPattern() {}
            return PbiPattern.prototype.validate = function(control) {
                var _a;
                return this.pattern && fesm2022_forms.kI.pattern(this.pattern)(control) ? ((_a = {})[3] = this.pattern, 
                _a) : null;
            }, PbiPattern.\u0275fac = function(t) {
                return new (t || PbiPattern);
            }, PbiPattern.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiPattern,
                selectors: [ [ "", "pbiPattern", "" ] ],
                inputs: {
                    pattern: [ "pbiPattern", "pattern" ]
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.Cf,
                    useExisting: PbiPattern,
                    multi: !0
                } ]) ]
            }), PbiPattern;
        }(), PbiMaxLengthValidator = function() {
            function PbiMaxLengthValidator() {}
            return PbiMaxLengthValidator.prototype.validate = function(control) {
                var _a;
                return _.isNil(this.maxLength) || _.isNil(control.value) || !fesm2022_forms.kI.maxLength(this.maxLength)(control) ? null : ((_a = {})[5] = this.maxLength, 
                _a);
            }, PbiMaxLengthValidator.\u0275fac = function(t) {
                return new (t || PbiMaxLengthValidator);
            }, PbiMaxLengthValidator.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiMaxLengthValidator,
                selectors: [ [ "", "pbiMaxLength", "" ] ],
                inputs: {
                    maxLength: [ "pbiMaxLength", "maxLength" ]
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.Cf,
                    useExisting: PbiMaxLengthValidator,
                    multi: !0
                } ]) ]
            }), PbiMaxLengthValidator;
        }(), PbiDashArrayValidator = function() {
            function PbiDashArrayValidator() {}
            return PbiDashArrayValidator.prototype.validate = function(control) {
                var _a;
                return this.pbiDashArray && PbiDashArrayValidator.validateStrokeDashArray(control.value) ? ((_a = {})[4] = !0, 
                _a) : null;
            }, PbiDashArrayValidator.validateStrokeDashArray = function(dashArray) {
                var parts = (dashArray || "").split(/[,\s]+/).map(Number), numbers = parts.filter(function(n) {
                    return !isNaN(n) && n >= 0 && n <= 50;
                });
                return numbers.splice(8), numbers.length !== parts.length || _.isEmpty(parts);
            }, PbiDashArrayValidator.\u0275fac = function(t) {
                return new (t || PbiDashArrayValidator);
            }, PbiDashArrayValidator.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiDashArrayValidator,
                selectors: [ [ "", "pbiDashArray", "" ] ],
                inputs: {
                    pbiDashArray: "pbiDashArray"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.Cf,
                    useExisting: PbiDashArrayValidator,
                    multi: !0
                } ]) ]
            }), PbiDashArrayValidator;
        }(), duration_picker_component = __webpack_require__(16521), slider_component = __webpack_require__(25929), theme_color_input_component = __webpack_require__(57274), pbi_date_picker_component = __webpack_require__(25131), GradientBarComponent = function(_super) {
            function GradientBarComponent() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(GradientBarComponent, _super), GradientBarComponent.prototype.ngOnInit = function() {
                this.barsStyle$ = this.changes$("colors").pipe((0, map.U)(function(colors) {
                    return {
                        background: "".concat("linear-gradient(to right, {{gradientColors}})".replace(/{{gradientColors}}/gi, colors))
                    };
                }));
            }, GradientBarComponent.\u0275fac = function() {
                var \u0275GradientBarComponent_BaseFactory;
                return function(t) {
                    return (\u0275GradientBarComponent_BaseFactory || (\u0275GradientBarComponent_BaseFactory = core["\u0275\u0275getInheritedFactory"](GradientBarComponent)))(t || GradientBarComponent);
                };
            }(), GradientBarComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GradientBarComponent,
                selectors: [ [ "gradient-bar" ] ],
                inputs: {
                    colors: "colors"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ 1, "gradientBar", 3, "ngStyle" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275element"](0, "div", 0), core["\u0275\u0275pipe"](1, "async")), 
                    2 & rf && core["\u0275\u0275property"]("ngStyle", core["\u0275\u0275pipeBind1"](1, 1, ctx.barsStyle$));
                },
                dependencies: [ common.NgStyle, common.AsyncPipe ],
                styles: [ ".gradientBar[_ngcontent-%COMP%]{width:100%;height:100%}" ],
                changeDetection: 0
            }), GradientBarComponent;
        }(rx_component.w), filePickerService = __webpack_require__(57803), imageScalingType = __webpack_require__(48966), displayNameGetter = __webpack_require__(21571), localize_pipe = __webpack_require__(85102), image_upload_component_c0 = [ "fileInput" ];
        function ImageUploadComponent_ng_container_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "input", 5, 6), 
                core["\u0275\u0275listener"]("blur", function() {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.touched());
                })("change", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r8 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r8.onFileValueChange.fn($event.target.files[0]));
                }), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "div", 7), 
                core["\u0275\u0275listener"]("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.selectImage());
                }), core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275elementStart"](6, "span", 8), 
                core["\u0275\u0275text"](7), core["\u0275\u0275pipe"](8, "async"), core["\u0275\u0275pipe"](9, "localize"), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](10, "span", 9), 
                core["\u0275\u0275pipe"](11, "async"), core["\u0275\u0275element"](12, "pbi-icon", 10), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("disabled", core["\u0275\u0275pipeBind1"](3, 9, ctx_r0.disabled$)), 
                core["\u0275\u0275attribute"]("accept", ctx_r0.getFileType(ctx_r0.fileType)), core["\u0275\u0275advance"](3), 
                core["\u0275\u0275classProp"]("disabled", core["\u0275\u0275pipeBind1"](5, 11, ctx_r0.disabled$)), 
                core["\u0275\u0275attribute"]("aria-labelledby", ctx_r0.ariaLabelledby)("aria-describedby", ctx_r0.ariaDescribedby), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate1"](" ", null !== core["\u0275\u0275pipeBind1"](8, 13, ctx_r0.value$) ? core["\u0275\u0275pipeBind1"](9, 15, "BrowseFile") : "", " "), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbiTooltip", ctx_r0.addImageToolTip)("pbiTooltipDisabled", core["\u0275\u0275pipeBind1"](11, 17, ctx_r0.disabled$));
            }
        }
        function ImageUploadComponent_ng_template_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r11 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "span", 11), core["\u0275\u0275text"](1), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "button", 12), 
                core["\u0275\u0275listener"]("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r11);
                    var ctx_r10 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r10.removeFile.fn());
                }), core["\u0275\u0275element"](4, "pbi-icon", 13), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var tmp_0_0, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](null == (tmp_0_0 = core["\u0275\u0275pipeBind1"](2, 2, ctx_r2.value$)) ? null : tmp_0_0.name), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("pbiTooltip", ctx_r2.removeImageToolTip);
            }
        }
        function ImageUploadComponent_span_6_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "span", 14), 2 & rf && core["\u0275\u0275property"]("localize", ctx.$implicit.key);
        }
        function ImageUploadComponent_ng_container_9_ng_container_1_pbi_dropdown_item_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 19), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var item_r16 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r16), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"](" ", item_r16.displayName, " ");
            }
        }
        function ImageUploadComponent_ng_container_9_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r18 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 15), 
                core["\u0275\u0275element"](2, "label", 16), core["\u0275\u0275elementStart"](3, "pbi-dropdown", 17), 
                core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r18);
                    var ctx_r17 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r17.onSelectScaling.fn($event));
                }), core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275pipe"](5, "async"), 
                core["\u0275\u0275elementStart"](6, "pbi-dropdown-trigger"), core["\u0275\u0275text"](7), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](8, ImageUploadComponent_ng_container_9_ng_container_1_pbi_dropdown_item_8_Template, 2, 2, "pbi-dropdown-item", 18), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var tmp_3_0, currentScaling_r14 = ctx.ngIf, ctx_r13 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](2), core["\u0275\u0275attribute"]("id", ctx_r13.imageFitId), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("aria-labelledby", ctx_r13.imageFitId)("value", currentScaling_r14)("isDisabled", !(null != (tmp_3_0 = core["\u0275\u0275pipeBind1"](4, 6, ctx_r13.value$)) && tmp_3_0.name) || core["\u0275\u0275pipeBind1"](5, 8, ctx_r13.disabled$)), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"](" ", currentScaling_r14.displayName, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r13.items);
            }
        }
        function ImageUploadComponent_ng_container_9_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, ImageUploadComponent_ng_container_9_ng_container_1_Template, 9, 10, "ng-container", 4), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r4.currentScaling$));
            }
        }
        var ImageUploadComponent = function(_super) {
            function ImageUploadComponent(featureSwitchService, localizationService, filePickerService) {
                var _this = _super.call(this) || this;
                return _this.featureSwitchService = featureSwitchService, _this.localizationService = localizationService, 
                _this.filePickerService = filePickerService, _this.imageFitId = "imagefit-".concat(ImageUploadComponent.nextId++), 
                _this;
            }
            return (0, tslib_es6.__extends)(ImageUploadComponent, _super), ImageUploadComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.items = imageScalingType.H.members().map(function(item) {
                    return {
                        value: item.value,
                        displayName: (0, displayNameGetter.G)(item.displayName, _this.localizationService)
                    };
                }), this.currentScaling$ = (0, combineLatest.aj)([ this.changes$("imageScalingProperties", !0), this.value$ ]).pipe((0, 
                map.U)(function(_a) {
                    var _b, _c, scaling, imageScalingProperties = _a[0], value = _a[1];
                    return scaling = (null == imageScalingProperties ? void 0 : imageScalingProperties.hideFitImage) ? null !== (_b = _this.isImageValue(value) && imageScalingProperties.defaultScalingValue) && void 0 !== _b ? _b : imageScalingType.C.normal : null !== (_c = _this.isImageValue(value) && value.scaling) && void 0 !== _c ? _c : imageScalingType.C.normal, 
                    _this.items.find(function(item) {
                        return item.value === scaling;
                    });
                })), this.ValidationFunction = this.checkForValidFile(this.fileType), this.removeImageToolTip = this.localizationService.get("PropertyPane_RemoveFile"), 
                this.addImageToolTip = this.localizationService.get("PropertyPane_AddFile");
                var isDisabled$ = this.disabled$.pipe((0, startWith.O)(!1));
                this.onFileValueChange = this.createEventAdapter(), this.onFileValueChange.$.pipe((0, 
                withLatestFrom.M)(isDisabled$, this.value$)).subscribe(function(_a) {
                    var file = _a[0], currentValue = _a[2];
                    _a[1] || (_this.abortFileInput(), _this.parseFile(file, currentValue), _this.onTouched());
                }), this.removeFile = this.createEventAdapter(), this.removeFile.$.pipe((0, withLatestFrom.M)(isDisabled$)).subscribe(function(_a) {
                    _a[1] || (_this.onValueChange(void 0), _this.onTouched());
                }), this.onSelectScaling = this.createEventAdapter(), this.onSelectScaling.$.pipe((0, 
                withLatestFrom.M)(isDisabled$, this.value$)).subscribe(function(_a) {
                    var item = _a[0], image = _a[2];
                    !_a[1] && _this.isImageValue(image) && (_this.onValueChange((0, tslib_es6.__assign)((0, 
                    tslib_es6.__assign)({}, image), {
                        scaling: "".concat(item.value)
                    })), _this.onTouched());
                });
            }, ImageUploadComponent.prototype.selectImage = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var file;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.filePickerService ? (file = void 0, "Image" !== this.fileType ? [ 3, 2 ] : [ 4, this.filePickerService.getImageFromFilePicker() ]) : [ 3, 5 ];

                          case 1:
                            return file = _a.sent(), [ 3, 4 ];

                          case 2:
                            return "Json" !== this.fileType && "AzMapsAllowedTypes" !== this.fileType && "AzMapsAllowedTypesWithIconURLs" !== this.fileType ? [ 3, 4 ] : [ 4, this.filePickerService.getSpatialFileFromFilePicker("Json" === this.fileType, this.featureSwitchService.featureSwitches.azureMapsCsvSupport) ];

                          case 3:
                            file = _a.sent(), _a.label = 4;

                          case 4:
                            return file && this.onFileValueChange.fn(file), [ 3, 6 ];

                          case 5:
                            this.fileInput.nativeElement.click(), _a.label = 6;

                          case 6:
                            return [ 2 ];
                        }
                    });
                });
            }, ImageUploadComponent.prototype.getFileType = function(fileType) {
                switch (fileType) {
                  case "Image":
                    return "image/*";

                  case "Json":
                    return ".json";

                  case "AzMapsAllowedTypesWithIconURLs":
                  case "AzMapsAllowedTypes":
                    return ".geojson,.json,.zip,.kml".concat(this.featureSwitchService.featureSwitches.azureMapsCsvSupport ? ",.csv" : "", ",.wkt");
                }
            }, ImageUploadComponent.prototype.isImageValue = function(value) {
                return value && "Image" === this.fileType;
            }, ImageUploadComponent.prototype.isTextValue = function(value) {
                return value && ("Json" === this.fileType || "AzMapsAllowedTypes" === this.fileType || "AzMapsAllowedTypesWithIconURLs" === this.fileType);
            }, ImageUploadComponent.prototype.abortFileInput = function() {
                this.lastReader && (this.lastReader.abort(), this.lastReader = void 0);
            }, ImageUploadComponent.prototype.checkForValidFile = function(fileType) {
                var _this = this;
                return function(control) {
                    if (control.value && !_.isEmpty(control.value.name)) {
                        var file = control.value.file;
                        if ("Image" === fileType) {
                            if (file && !file.type.match(function(fileType) {
                                if ("Image" === fileType) return "image.*";
                            }(fileType))) return {
                                InvalidFile: !0
                            };
                        } else if ("Json" === fileType || "AzMapsAllowedTypes" === fileType || "AzMapsAllowedTypesWithIconURLs" === fileType) {
                            var fileExt = "." + control.value.name.split(".").pop();
                            if (!_this.getFileType(fileType).split(",").includes(fileExt)) return {
                                InvalidFile: !0
                            };
                        }
                    }
                };
            }, ImageUploadComponent.prototype.parseFile = function(file, currentValue) {
                var value, _this = this, name = file.name, reader = new FileReader;
                switch (reader.onabort = function(_evt) {
                    _this.lastReader = void 0;
                }, reader.onerror = function(_evt) {
                    _this.lastReader = void 0;
                }, this.fileType) {
                  case "Image":
                    reader.onload = function(evt) {
                        var _a;
                        reader === _this.lastReader && (_this.lastReader = void 0, value = _this.isImageValue(currentValue) && !_.isEmpty(name) ? {
                            url: reader.result,
                            name,
                            scaling: null !== (_a = currentValue.scaling) && void 0 !== _a ? _a : imageScalingType.C.normal,
                            file
                        } : {
                            url: reader.result,
                            name,
                            scaling: imageScalingType.C.normal,
                            file
                        }, _this.isImageValue(value) && _this.onValueChange(value));
                    }, this.lastReader = reader, reader.readAsDataURL(file);
                    break;

                  case "Json":
                  case "AzMapsAllowedTypes":
                  case "AzMapsAllowedTypesWithIconURLs":
                    reader.onload = function(evt) {
                        reader === _this.lastReader && (_this.lastReader = void 0, _this.isTextValue(value = {
                            content: reader.result,
                            name,
                            file
                        }) && ("AzMapsAllowedTypes" === _this.fileType && name.endsWith(".kml") && (value.content = _this.updateKmlContent(value)), 
                        _this.onValueChange(value)));
                    }, this.lastReader = reader, "AzMapsAllowedTypes" !== this.fileType && "AzMapsAllowedTypesWithIconURLs" !== this.fileType || !name.endsWith(".zip") ? reader.readAsText(file) : reader.readAsDataURL(file);
                    break;

                  default:
                    debug.fF.assertNever(this.fileType);
                }
            }, ImageUploadComponent.prototype.updateKmlContent = function(value) {
                var kmlDoc = (new DOMParser).parseFromString(value.content, "application/xml");
                return kmlDoc.querySelectorAll("Icon").forEach(function(icon) {
                    icon.remove();
                }), (new XMLSerializer).serializeToString(kmlDoc);
            }, ImageUploadComponent.nextId = 0, ImageUploadComponent.\u0275fac = function(t) {
                return new (t || ImageUploadComponent)(core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](filePickerService.O, 8));
            }, ImageUploadComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ImageUploadComponent,
                selectors: [ [ "image-upload" ] ],
                viewQuery: function(rf, ctx) {
                    var _t;
                    1 & rf && core["\u0275\u0275viewQuery"](image_upload_component_c0, 5), 2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.fileInput = _t.first);
                },
                inputs: {
                    fileType: "fileType",
                    ariaLabelledby: "ariaLabelledby",
                    ariaDescribedby: "ariaDescribedby",
                    imageScalingProperties: "imageScalingProperties"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return ImageUploadComponent;
                    }),
                    multi: !0
                }, {
                    provide: fesm2022_forms.Cf,
                    useExisting: (0, core.forwardRef)(function() {
                        return ImageUploadComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 10,
                vars: 14,
                consts: [ [ 1, "file-picker", "fluentTheme-sm-reg" ], [ 4, "ngIf", "ngIfElse" ], [ "showFile", "" ], [ "class", "error-msg", 3, "localize", 4, "ngFor", "ngForOf" ], [ 4, "ngIf" ], [ "type", "file", 3, "disabled", "blur", "change" ], [ "fileInput", "" ], [ "role", "button", 1, "inner-div", 3, "accessible-click" ], [ 1, "custom-file-input" ], [ 1, "browse-icon", 3, "pbiTooltip", "pbiTooltipDisabled" ], [ "name", "image-search", "size", "mini" ], [ 1, "custom-text-input", "trimmedTextWithEllipsis", "apply-padding" ], [ 1, "remove-icon", 3, "pbiTooltip", "accessible-click" ], [ "name", "close", "size", "mini" ], [ 1, "error-msg", 3, "localize" ], [ 1, "image-fit" ], [ "localize", "PagePropertyPane_PageBackgroundImageFit" ], [ "compact", "", 3, "aria-labelledby", "value", "isDisabled", "valueChange" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275pipe"](1, "async"), 
                    core["\u0275\u0275template"](2, ImageUploadComponent_ng_container_2_Template, 13, 19, "ng-container", 1), 
                    core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275template"](4, ImageUploadComponent_ng_template_4_Template, 5, 4, "ng-template", null, 2, core["\u0275\u0275templateRefExtractor"]), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](6, ImageUploadComponent_span_6_Template, 1, 1, "span", 3), 
                    core["\u0275\u0275pipe"](7, "keyvalue"), core["\u0275\u0275pipe"](8, "async"), core["\u0275\u0275template"](9, ImageUploadComponent_ng_container_9_Template, 3, 3, "ng-container", 4)), 
                    2 & rf) {
                        var tmp_1_0, _r1 = core["\u0275\u0275reference"](5);
                        core["\u0275\u0275classProp"]("disabled", core["\u0275\u0275pipeBind1"](1, 6, ctx.disabled$)), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !(null != (tmp_1_0 = core["\u0275\u0275pipeBind1"](3, 8, ctx.value$)) && tmp_1_0.name))("ngIfElse", _r1), 
                        core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](7, 10, core["\u0275\u0275pipeBind1"](8, 12, ctx.errorMessage$))), 
                        core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", "Image" === ctx.fileType && !(!ctx.imageScalingProperties || ctx.imageScalingProperties.hideFitImage));
                    }
                },
                dependencies: [ common.NgForOf, common.NgIf, localize_directive.X, accessible_click_directive.t, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_icon_component._, pbi_tooltip_directive.V, common.AsyncPipe, common.KeyValuePipe, localize_pipe.F ],
                styles: [ '.ng-invalid[_nghost-%COMP%]   .file-picker[_ngcontent-%COMP%]{border:1px solid var(--fluent-theme-error-dark-color, #A80000)}.file-picker[_ngcontent-%COMP%]{--file-picker-placeholder-color: var(--gray-180, #252423);--file-picker-border-color: var(--gray-110, #8A8886);--file-picker-background-color: var(--fluent-theme-white-color, #FFF);display:flex;align-items:center;justify-content:space-between;background:var(--file-picker-background-color);border:1px solid var(--file-picker-border-color);border-radius:2px;color:var(--file-picker-placeholder-color)}  [data-legacy-theming=false] .file-picker{--file-picker-placeholder-color: var(--colorNeutralForeground1);--file-picker-border-color: var(--colorNeutralStroke1);--file-picker-background-color: var(--colorNeutralBackground1)}.file-picker[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{display:none}.file-picker[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{margin:4px}.file-picker[_ngcontent-%COMP%]   .inner-div[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:space-between;flex-grow:1;cursor:pointer}.file-picker[_ngcontent-%COMP%]   .inner-div.disabled[_ngcontent-%COMP%]{cursor:default;pointer-events:none}.file-picker[_ngcontent-%COMP%]   .inner-div[_ngcontent-%COMP%]:focus-within{outline:none}html[data-focus-source="key"][_nghost-%COMP%]   .file-picker[_ngcontent-%COMP%]   .inner-div[_ngcontent-%COMP%]:focus-within, html[data-focus-source="key"]   [_nghost-%COMP%]   .file-picker[_ngcontent-%COMP%]   .inner-div[_ngcontent-%COMP%]:focus-within{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.file-picker[_ngcontent-%COMP%]   .browse-icon[_ngcontent-%COMP%]:focus{outline:none}.file-picker[_ngcontent-%COMP%]   .remove-icon[_ngcontent-%COMP%]{cursor:pointer;margin:4px;background-color:var(--colorNeutralBackground2)}.file-picker[_ngcontent-%COMP%]   .remove-icon[_ngcontent-%COMP%]:hover{background-color:var(--colorNeutralBackground2Hover);color:var(--colorNeutralForeground1Hover)}.file-picker[_ngcontent-%COMP%]   .remove-icon[_ngcontent-%COMP%]:focus{outline:none}html[data-focus-source="key"][_nghost-%COMP%]   .file-picker[_ngcontent-%COMP%]   .remove-icon[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .file-picker[_ngcontent-%COMP%]   .remove-icon[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.file-picker[_ngcontent-%COMP%]   .apply-padding[_ngcontent-%COMP%]{padding-right:12px}.file-picker[_ngcontent-%COMP%]:hover{border:1px solid var(--gray-130, #605E5C)}.file-picker[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.file-picker.disabled[_ngcontent-%COMP%]{background:var(--gray-20, #F3F2F1);border:1px solid var(--gray-60, #C8C6C4);color:var(--gray-90, #A19F9D)}.file-picker.disabled[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{cursor:default;color:var(--gray-60, #C8C6C4)}.error-msg[_ngcontent-%COMP%]{color:var(--fluent-theme-error-dark-color, #A80000)}.image-fit[_ngcontent-%COMP%]{margin-top:8px}.image-fit[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]{margin:4px 0;width:100%}' ],
                changeDetection: 0
            }), ImageUploadComponent;
        }(rx_form_control_component.N), ListEditorService = function(_super) {
            function ListEditorService(componentStore, localizationService) {
                var _this = _super.call(this, componentStore) || this;
                return _this.componentStore = componentStore, _this.localizationService = localizationService, 
                _this.itemsAndSelectedItemSelector = (0, ngrx_store.P1)(function(state) {
                    return state.items;
                }, function(state) {
                    return state.selectedItems;
                }, function(state) {
                    return state.itemUpdates;
                }, function(items, selectedItems, itemUpdates) {
                    return {
                        items,
                        selectedItem: selectedItems,
                        itemUpdates
                    };
                }), _this.onDeleteItem = _this.componentStore.updater(function(state, deletedItem) {
                    var itemToDeleteIndex = _.findIndex(state.items, function(item) {
                        return _.isEqual(deletedItem, item);
                    });
                    if (debug.fF.assert(function() {
                        return itemToDeleteIndex >= 0;
                    }, "The item to delete should be in current collection of items"), itemToDeleteIndex < 0) return state;
                    var newItems = (0, tslib_es6.__spreadArray)([], state.items, !0);
                    debug.fF.assert(function() {
                        return !_.isArray(state.selectedItems);
                    }, "No multi-select support, selectedItems should NOT be an array");
                    var currentSelectedItemIndex = _.findIndex(state.items, state.selectedItems), newSelectedItem = newItems[currentSelectedItemIndex];
                    return itemToDeleteIndex === currentSelectedItemIndex && (newSelectedItem = newItems[itemToDeleteIndex === state.items.length - 1 ? state.items.length - 2 : itemToDeleteIndex + 1]), 
                    newItems.splice(itemToDeleteIndex, 1), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                        items: newItems,
                        selectedItems: newSelectedItem,
                        itemUpdates: {
                            deletes: [ deletedItem ]
                        }
                    });
                }), _this.onAddItem = _this.componentStore.updater(function(state, newItem) {
                    debug.fF.assert(function() {
                        return !_.isArray(state.selectedItems);
                    }, "No multi-select support, selectedItems should NOT be an array");
                    var newItems = (0, tslib_es6.__spreadArray)([], state.items, !0);
                    newItems.push(newItem);
                    var newSelectedItem = _.isEmpty(state.itemUpdates) ? newItem : state.selectedItems;
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                        items: newItems,
                        selectedItems: newSelectedItem,
                        itemUpdates: {
                            adds: [ newItem ]
                        }
                    });
                }), _this.onUpdateItemDisplayName = _this.componentStore.updater(function(state, itemWithNewDisplayName) {
                    var itemIndex = _.findIndex(state.items, function(item) {
                        return _.isEqual(itemWithNewDisplayName.value, item.value);
                    });
                    if (debug.fF.assert(function() {
                        return itemIndex >= 0;
                    }, "The updated item should be in current collection of items"), itemIndex < 0) return state;
                    var oldDisplayName = state.items[itemIndex].displayName;
                    if (oldDisplayName === itemWithNewDisplayName.displayName) return state;
                    var originalItem = state.items[itemIndex], newDisplayNameString = (0, displayNameGetter.G)(itemWithNewDisplayName.displayName, _this.localizationService), newDisplayName = _.isEmpty(_.trim(newDisplayNameString)) ? oldDisplayName : itemWithNewDisplayName.displayName, newItems = (0, 
                    tslib_es6.__spreadArray)([], state.items, !0);
                    return newItems[itemIndex] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, originalItem), {
                        displayName: newDisplayName
                    }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                        items: newItems,
                        selectedItems: newItems[itemIndex],
                        itemUpdates: {
                            renames: [ {
                                newDisplayName,
                                item: originalItem
                            } ]
                        }
                    });
                }), _this;
            }
            return (0, tslib_es6.__extends)(ListEditorService, _super), ListEditorService.prototype.onSelectionChange = function(value) {
                var _this = this;
                return this.componentStore.updater(function(state, newSelectedItem) {
                    return _super.prototype.onSelectionChange.call(_this, newSelectedItem), delete state.itemUpdates, 
                    state;
                })(value);
            }, ListEditorService.\u0275fac = function(t) {
                return new (t || ListEditorService)(core["\u0275\u0275inject"](ngrx_component_store.m1), core["\u0275\u0275inject"](localization_service.o));
            }, ListEditorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ListEditorService,
                factory: ListEditorService.\u0275fac
            }), ListEditorService;
        }(__webpack_require__(37733).K), coercion = __webpack_require__(4437), localize_attr_directive = __webpack_require__(22844), list_item_editor_component_c0 = [ "item" ], list_item_editor_component_c1 = [ "valueInput" ], list_item_editor_component_c2 = function() {
            return {
                "aria-label": "Edit"
            };
        };
        function ListItemEditorComponent_div_0_ng_container_4_button_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r9 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 9), core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r9);
                    var itemState_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r7 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r7.startEditClicked($event, itemState_r1.selected));
                }), core["\u0275\u0275elementEnd"]();
            }
            2 & rf && core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](1, list_item_editor_component_c2));
        }
        var list_item_editor_component_c3 = function() {
            return {
                "aria-label": "ItemAction_Rename"
            };
        };
        function ListItemEditorComponent_div_0_ng_container_4_button_2_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "button", 10), 2 & rf && core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](1, list_item_editor_component_c3));
        }
        var _c4 = function() {
            return {
                "aria-label": "Delete"
            };
        };
        function ListItemEditorComponent_div_0_ng_container_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r11 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, ListItemEditorComponent_div_0_ng_container_4_button_1_Template, 1, 2, "button", 6), 
                core["\u0275\u0275template"](2, ListItemEditorComponent_div_0_ng_container_4_button_2_Template, 1, 2, "button", 7), 
                core["\u0275\u0275elementStart"](3, "button", 8), core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r11);
                    var ctx_r10 = core["\u0275\u0275nextContext"](2);
                    return $event.stopPropagation(), core["\u0275\u0275resetView"](ctx_r10.onDeleteClick.fn());
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var itemState_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !itemState_r1.inEditMode), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", itemState_r1.inEditMode), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](3, _c4));
            }
        }
        var _c5 = function(a0, a1, a2, a3) {
            return {
                isSelected: a0,
                isHovered: a1,
                isInEditMode: a2,
                isDisabled: a3
            };
        };
        function ListItemEditorComponent_div_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r14 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 1, 2), core["\u0275\u0275listener"]("mouseover", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r13 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r13.itemOnHover = !0);
                })("mouseleave", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r15 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r15.itemOnHover = !1);
                })("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r16 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r16.onClick.fn());
                }), core["\u0275\u0275elementStart"](2, "input", 3, 4), core["\u0275\u0275listener"]("dblclick", function($event) {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r17 = core["\u0275\u0275nextContext"]();
                    return $event.stopPropagation(), core["\u0275\u0275resetView"](ctx_r17.onStartEditClick.fn());
                })("click", function($event) {
                    var itemState_r1 = core["\u0275\u0275restoreView"](_r14).ngIf, ctx_r18 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r18.onInputClick($event, itemState_r1.inEditMode));
                })("keydown.enter", function($event) {
                    core["\u0275\u0275restoreView"](_r14);
                    var _r3 = core["\u0275\u0275reference"](3);
                    return $event.stopPropagation(), core["\u0275\u0275resetView"](_r3.blur());
                })("blur", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var _r3 = core["\u0275\u0275reference"](3), ctx_r20 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r20.onNameInputBlur.fn(_r3.value));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](4, ListItemEditorComponent_div_0_ng_container_4_Template, 4, 4, "ng-container", 5), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var itemState_r1 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction4"](6, _c5, itemState_r1.selected, ctx_r0.itemOnHover, itemState_r1.inEditMode, itemState_r1.disabled)), 
                core["\u0275\u0275attribute"]("aria-selected", itemState_r1.selected)("aria-disabled", itemState_r1.disabled), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("value", ctx_r0.value.displayName)("readonly", !itemState_r1.inEditMode), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !itemState_r1.disabled && (itemState_r1.selected || ctx_r0.itemOnHover));
            }
        }
        var _c6 = function(a0, a1, a2) {
            return {
                selected: a0,
                inEditMode: a1,
                disabled: a2
            };
        }, ListItemEditorComponent = function(_super) {
            function ListItemEditorComponent(listEditorService) {
                var _this = _super.call(this) || this;
                return _this.listEditorService = listEditorService, _this.inEditModeSubject$ = new Subject.xQ, 
                _this;
            }
            return (0, tslib_es6.__extends)(ListItemEditorComponent, _super), ListItemEditorComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.disabled$ = this.changes$("disabled").pipe((0, map.U)(function(disabled) {
                    return (0, coercion.Ig)(disabled);
                }), (0, startWith.O)(!1)), this.onClick = this.createEventAdapter();
                var onClick$ = this.onClick.$.pipe((0, withLatestFrom.M)(this.disabled$), (0, filter.h)(function(_a) {
                    return !_a[1];
                }), (0, mapTo.h)({
                    value: this.value
                }));
                this.listEditorService.onSelectionChange(onClick$), this.onDeleteClick = this.createEventAdapter();
                var onDeleteClick$ = this.onDeleteClick.$.pipe((0, withLatestFrom.M)(this.disabled$), (0, 
                filter.h)(function(_a) {
                    return !_a[1];
                }), (0, mapTo.h)(this.value));
                this.listEditorService.onDeleteItem(onDeleteClick$), this.onStartEditClick = this.createEventAdapter(), 
                this.onStartEditClick.$.pipe((0, withLatestFrom.M)(this.disabled$), (0, filter.h)(function(_a) {
                    return !_a[1];
                })).subscribe(function(_value) {
                    var _a, _b, _c, _d;
                    _this.inEditModeSubject$.next(!0), null === (_b = null === (_a = _this.inputElementRef) || void 0 === _a ? void 0 : _a.nativeElement) || void 0 === _b || _b.focus(), 
                    null === (_d = null === (_c = _this.inputElementRef) || void 0 === _c ? void 0 : _c.nativeElement) || void 0 === _d || _d.select();
                }), this.onNameInputBlur = this.createEventAdapter();
                var onNameInputBlur$ = this.onNameInputBlur.$.pipe((0, tap.b)(function(_ignore) {
                    _this.inEditModeSubject$.next(!1);
                }), (0, map.U)(function(newName) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _this.value), {
                        displayName: _.trim(newName)
                    });
                }));
                this.listEditorService.onUpdateItemDisplayName(onNameInputBlur$), this.selected$ = this.listEditorService.isSelected$(this.value), 
                this.inEditMode$ = this.inEditModeSubject$.asObservable();
            }, ListItemEditorComponent.prototype.focus = function() {
                this.topItemElementRef.nativeElement.focus();
            }, ListItemEditorComponent.prototype.onInputClick = function(clickEvent, isInEditMode) {
                isInEditMode && clickEvent.stopPropagation();
            }, ListItemEditorComponent.prototype.startEditClicked = function(clickEvent, isCurrentlySelected) {
                clickEvent.stopPropagation(), isCurrentlySelected || this.listEditorService.onSelectionChange({
                    value: this.value
                }), this.onStartEditClick.fn();
            }, ListItemEditorComponent.\u0275fac = function(t) {
                return new (t || ListItemEditorComponent)(core["\u0275\u0275directiveInject"](ListEditorService));
            }, ListItemEditorComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ListItemEditorComponent,
                selectors: [ [ "list-item-editor" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](list_item_editor_component_c0, 5), 
                    core["\u0275\u0275viewQuery"](list_item_editor_component_c1, 5)), 2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.topItemElementRef = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.inputElementRef = _t.first);
                    }
                },
                inputs: {
                    value: "value",
                    disabled: "disabled"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 4,
                vars: 11,
                consts: [ [ "class", "list-item-editor themeableElement", "role", "option", 3, "ngClass", "mouseover", "mouseleave", "accessible-click", 4, "ngIf" ], [ "role", "option", 1, "list-item-editor", "themeableElement", 3, "ngClass", "mouseover", "mouseleave", "accessible-click" ], [ "item", "" ], [ "type", "text", "spellcheck", "false", 1, "pbi-small-text-input", 3, "value", "readonly", "dblclick", "click", "keydown.enter", "blur" ], [ "valueInput", "" ], [ 4, "ngIf" ], [ "class", "edit glyphicon glyph-mini pbi-glyph-edit", 3, "localizeAttr", "click", 4, "ngIf" ], [ "class", "commit glyphicon glyph-mini pbi-glyph-accept-medium", 3, "localizeAttr", 4, "ngIf" ], [ 1, "delete", "glyphicon", "glyph-mini", "pbi-glyph-calculator-multiply", 3, "localizeAttr", "click" ], [ 1, "edit", "glyphicon", "glyph-mini", "pbi-glyph-edit", 3, "localizeAttr", "click" ], [ 1, "commit", "glyphicon", "glyph-mini", "pbi-glyph-accept-medium", 3, "localizeAttr" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, ListItemEditorComponent_div_0_Template, 5, 11, "div", 0), 
                    core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async")), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pureFunction3"](7, _c6, core["\u0275\u0275pipeBind1"](1, 1, ctx.selected$), core["\u0275\u0275pipeBind1"](2, 3, ctx.inEditMode$), core["\u0275\u0275pipeBind1"](3, 5, ctx.disabled$)));
                },
                dependencies: [ common.NgClass, common.NgIf, localize_attr_directive.b, accessible_click_directive.t, common.AsyncPipe ],
                styles: [ '.list-item-editor[_ngcontent-%COMP%]{--list-item-editor-border-color: var(--gray-110, #8A8886);--list-item-editor-hover-border-color: var(--gray-130, #605E5C);--list-item-editor-hover-background-color: var(--gray-30, #EDEBE9);--list-item-editor-selected-border-color: var(--fluent-theme-black-color, #000);--list-item-editor-disabled-border-color: var(--gray-60, #C8C6C4);--list-item-editor-disabled-selected-background: var(--gray-40, #E1DFDD);--list-item-editor-input-color: var(--gray-90, #A19F9D);--list-item-editor-link-color: var(--fluent-theme-link-darker-color, #005A9E);--list-item-editor-background-hovered: var(--gray-30, #EDEBE9);--list-item-editor-background-selected: var(--gray-50, #D2D0CE);box-sizing:border-box;padding:0 4px;margin:8px 0 0;border:1px solid var(--list-item-editor-border-color);border-radius:2px;height:24px;display:flex;align-items:center;outline:none}  [data-legacy-theming=false] .list-item-editor{--list-item-editor-border-color: var(--colorNeutralStroke1);--list-item-editor-hover-border-color: var(--colorNeutralStroke1Hover);--list-item-editor-hover-background-color: var(--colorNeutralBackground1Hover);--list-item-editor-selected-border-color: var(--colorNeutralStroke1);--list-item-editor-disabled-border-color: var(--colorNeutralStrokeDisabled);--list-item-editor-disabled-selected-background: var(--colorNeutralBackgroundDisabled);--list-item-editor-input-color: var(--colorNeutralStroke1);--list-item-editor-link-color: var(--colorNeutralForeground1);--list-item-editor-background-hovered: var(--colorNeutralBackground1Hover);--list-item-editor-background-selected: var(--colorNeutralBackground1Selected)}html[data-focus-source=key][_ngcontent-%COMP%]   .list-item-editor[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.list-item-editor.isHovered[_ngcontent-%COMP%]{border-color:var(--list-item-editor-hover-border-color)}.list-item-editor.isHovered[_ngcontent-%COMP%]:not(.isInEditMode){background:var(--list-item-editor-background-hovered)}.list-item-editor.isSelected[_ngcontent-%COMP%]{border-color:var(--list-item-editor-selected-border-color)}.list-item-editor.isSelected[_ngcontent-%COMP%]:not(.isInEditMode){background:var(--list-item-editor-background-selected)}.list-item-editor.isDisabled[_ngcontent-%COMP%]{pointer-events:none;border-color:var(--list-item-editor-disabled-border-color)}.list-item-editor.isDisabled.isSelected[_ngcontent-%COMP%]{background:var(--list-item-editor-disabled-selected-background)}.list-item-editor.isDisabled[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{color:var(--list-item-editor-input-color)}.list-item-editor[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:none;padding:0;height:auto;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);flex:1;min-width:0;background:transparent;outline:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.list-item-editor[_ngcontent-%COMP%]   input.isInEditMode[_ngcontent-%COMP%]{-webkit-user-select:text;-ms-user-select:text;user-select:text}.list-item-editor[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background:transparent;color:var(--list-item-editor-link-color)}html:not([dir="rtl"])[_nghost-%COMP%]   .list-item-editor[_ngcontent-%COMP%]   button[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .list-item-editor[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-left:4px}html[dir="rtl"][_nghost-%COMP%]   .list-item-editor[_ngcontent-%COMP%]   button[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .list-item-editor[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:4px}' ],
                changeDetection: 0
            }), ListItemEditorComponent;
        }(rx_component.w);
        function ListEditorComponent_div_0_list_item_editor_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "list-item-editor", 4), 2 & rf) {
                var item_r3 = ctx.$implicit, viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275property"]("value", item_r3)("disabled", viewModel_r1.disabled);
            }
        }
        var list_editor_component_c0 = function() {
            return {
                "aria-label": "AnalyticsPane_Add_Instance_Label"
            };
        };
        function ListEditorComponent_div_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r6 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 1)(1, "button", 2), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r5 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r5.onAddClick.fn());
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](2, ListEditorComponent_div_0_list_item_editor_2_Template, 1, 2, "list-item-editor", 3), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = ctx.ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](3, list_editor_component_c0))("disabled", viewModel_r1.disabled || null), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", viewModel_r1.items);
            }
        }
        var ListEditorComponent = function(_super) {
            function ListEditorComponent(listEditorService) {
                var _this = _super.call(this) || this;
                return _this.listEditorService = listEditorService, _this.valueChange = new core.EventEmitter, 
                _this;
            }
            return (0, tslib_es6.__extends)(ListEditorComponent, _super), ListEditorComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.setInitialState(), this.viewModel$ = this.listEditorService.state$, this.updateState(), 
                this.listEditorService.state$.pipe((0, ngrx_store.Ys)(this.listEditorService.itemsAndSelectedItemSelector), (0, 
                takeUntil.R)(this.onDestroy$), (0, distinctUntilChanged.x)(_.isEqual)).subscribe(function(itemsAndSelection) {
                    _this.valueChange.emit(itemsAndSelection), _this.onValueChange(itemsAndSelection), 
                    _this.onTouched();
                });
                var disabled$ = this.listEditorService.select$("disabled");
                this.onAddClick = this.createEventAdapter();
                var onAddClick$ = this.onAddClick.$.pipe((0, withLatestFrom.M)(disabled$), (0, filter.h)(function(_a) {
                    return !_a[1];
                }), (0, mapTo.h)({
                    value: void 0,
                    displayName: "",
                    uid: ""
                }));
                this.listEditorService.onAddItem(onAddClick$);
            }, ListEditorComponent.prototype.ngAfterViewInit = function() {
                var _this = this;
                this.listEditorService.select$("selectedItems").pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(selectedItem) {
                    var _a;
                    null === (_a = _this.listItemComponents.find(function(itemComponent) {
                        return _.isEqual(itemComponent.value, selectedItem);
                    })) || void 0 === _a || _a.focus();
                });
            }, ListEditorComponent.prototype.setInitialState = function() {
                var _a, _b;
                this.listEditorService.setState({
                    items: null === (_a = this.value) || void 0 === _a ? void 0 : _a.items,
                    selectedItems: null === (_b = this.value) || void 0 === _b ? void 0 : _b.selectedItem,
                    disabled: this.isDisabled,
                    multiple: !1
                });
            }, ListEditorComponent.prototype.updateState = function() {
                var disabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "disabled", this.onDestroy$).pipe((0, 
                map.U)(function(disabled) {
                    return {
                        disabled: (0, coercion.Ig)(disabled)
                    };
                })), itemsAndSelection$ = this.mergePropertyInputsAndFormControl(this.changes$("value"), this.value$, "value", this.onDestroy$).pipe((0, 
                map.U)(function(itemsAndSelection) {
                    return {
                        items: null == itemsAndSelection ? void 0 : itemsAndSelection.items,
                        selectedItems: null == itemsAndSelection ? void 0 : itemsAndSelection.selectedItem,
                        itemUpdates: null == itemsAndSelection ? void 0 : itemsAndSelection.itemUpdates
                    };
                })), merged$ = (0, merge.T)(disabled$, itemsAndSelection$);
                this.listEditorService.updateState(merged$);
            }, ListEditorComponent.\u0275fac = function(t) {
                return new (t || ListEditorComponent)(core["\u0275\u0275directiveInject"](ListEditorService));
            }, ListEditorComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ListEditorComponent,
                selectors: [ [ "list-editor" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    var _t;
                    1 & rf && core["\u0275\u0275contentQuery"](dirIndex, ListItemEditorComponent, 5), 
                    2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.listItemComponents = _t);
                },
                hostAttrs: [ "aria-autocomplete", "none" ],
                inputs: {
                    value: "value",
                    ariaLabelledby: [ "aria-labelledby", "ariaLabelledby" ],
                    ariaDescribedby: [ "aria-describedby", "ariaDescribedby" ],
                    isDisabled: "isDisabled"
                },
                outputs: {
                    valueChange: "valueChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ ListEditorService, ngrx_component_store.m1, {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return ListEditorComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ "class", "list-editor themeableElement", "role", "listbox", 4, "ngIf" ], [ "role", "listbox", 1, "list-editor", "themeableElement" ], [ "localize", "AnalyticsPane_Add_Instance_Label", 1, "add", 3, "localizeAttr", "disabled", "click" ], [ 3, "value", "disabled", 4, "ngFor", "ngForOf" ], [ 3, "value", "disabled" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, ListEditorComponent_div_0_Template, 3, 4, "div", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.viewModel$));
                },
                dependencies: [ common.NgForOf, common.NgIf, localize_directive.X, localize_attr_directive.b, ListItemEditorComponent, common.AsyncPipe ],
                styles: [ '.list-editor[_ngcontent-%COMP%]{--list-editor-add-color: var(--fluent-theme-link-color, #0078D4);--list-editor-add-disabled-color: var(--gray-90, #A19F9D);display:flex;flex-direction:column;background-color:inherit;border:none;outline:none;padding:0}  [data-legacy-theming=false] .list-editor{--list-editor-add-color: var(--colorNeutralForeground1);--list-editor-add-disabled-color: var(--colorForegroundDisabled)}html[data-focus-source=key][_ngcontent-%COMP%]   .list-editor[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.list-editor[_ngcontent-%COMP%]:hover{border-color:var(--gray-130, #605E5C)}.list-editor[_ngcontent-%COMP%]   .add[_ngcontent-%COMP%]{margin-top:8px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);color:var(--list-editor-add-color);background:transparent;text-align:left}.list-editor[_ngcontent-%COMP%]   .add[disabled][_ngcontent-%COMP%]{pointer-events:none;color:var(--list-editor-add-disabled-color)}' ],
                changeDetection: 0
            }), ListEditorComponent;
        }(rx_form_control_component.N);
        function MarginPaddingComponent_div_0__svg_path_14_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275element"](0, "path", 19));
        }
        function MarginPaddingComponent_div_0__svg_path_15_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275element"](0, "path", 20));
        }
        function MarginPaddingComponent_div_0__svg_path_16_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275element"](0, "path", 21));
        }
        function MarginPaddingComponent_div_0__svg_path_17_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275element"](0, "path", 22));
        }
        function MarginPaddingComponent_div_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r6 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 1)(1, "div", 2)(2, "pbi-spin-button", 3), 
                core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r5 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r5.focusChanged.emit($event));
                })("focusin", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r7 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r7.updateSvg(!0, "left"));
                })("focusout", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r8 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r8.updateSvg(!1, "left"));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](3, "div", 4)(4, "pbi-spin-button", 3), 
                core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.focusChanged.emit($event));
                })("focusin", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r10 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r10.updateSvg(!0, "top"));
                })("focusout", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r11 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r11.updateSvg(!1, "top"));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](5, "div", 5), 
                core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275elementStart"](6, "svg", 6), 
                core["\u0275\u0275element"](7, "rect", 7)(8, "rect", 8)(9, "line", 9)(10, "line", 10)(11, "line", 11)(12, "line", 12), 
                core["\u0275\u0275elementContainerStart"](13, 13), core["\u0275\u0275template"](14, MarginPaddingComponent_div_0__svg_path_14_Template, 1, 0, "path", 14), 
                core["\u0275\u0275template"](15, MarginPaddingComponent_div_0__svg_path_15_Template, 1, 0, "path", 15), 
                core["\u0275\u0275template"](16, MarginPaddingComponent_div_0__svg_path_16_Template, 1, 0, "path", 16), 
                core["\u0275\u0275template"](17, MarginPaddingComponent_div_0__svg_path_17_Template, 1, 0, "path", 17), 
                core["\u0275\u0275elementContainerEnd"](), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275namespaceHTML"](), 
                core["\u0275\u0275elementStart"](18, "pbi-spin-button", 3), core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r12 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r12.focusChanged.emit($event));
                })("focusin", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r13 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r13.updateSvg(!0, "bottom"));
                })("focusout", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r14 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r14.updateSvg(!1, "bottom"));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](19, "div", 18)(20, "pbi-spin-button", 3), 
                core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r15 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r15.focusChanged.emit($event));
                })("focusin", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r16 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r16.updateSvg(!0, "right"));
                })("focusout", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r17 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r17.updateSvg(!1, "right"));
                }), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("formControl", ctx_r0.marginPaddingFormGroup.get("left"))("options", null == ctx_r0.formatOptions ? null : ctx_r0.formatOptions.left)("ariaLabel", ctx_r0.ariaLabels.left)("labelId", ctx_r0.ariaLabelledby)("inputName", "left"), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("formControl", ctx_r0.marginPaddingFormGroup.get("top"))("options", null == ctx_r0.formatOptions ? null : ctx_r0.formatOptions.top)("ariaLabel", ctx_r0.ariaLabels.top)("labelId", ctx_r0.ariaLabelledby)("inputName", "top"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("disabled", ctx_r0.marginPaddingFormGroup.disabled), 
                core["\u0275\u0275advance"](8), core["\u0275\u0275property"]("ngSwitch", ctx_r0.currentlyFocusedPath), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", "top"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", "bottom"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", "left"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", "right"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("formControl", ctx_r0.marginPaddingFormGroup.get("bottom"))("options", null == ctx_r0.formatOptions ? null : ctx_r0.formatOptions.bottom)("ariaLabel", ctx_r0.ariaLabels.bottom)("labelId", ctx_r0.ariaLabelledby)("inputName", "bottom"), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("formControl", ctx_r0.marginPaddingFormGroup.get("right"))("options", null == ctx_r0.formatOptions ? null : ctx_r0.formatOptions.right)("ariaLabel", ctx_r0.ariaLabels.right)("labelId", ctx_r0.ariaLabelledby)("inputName", "right");
            }
        }
        var MarginPaddingComponent = function(_super) {
            function MarginPaddingComponent(controlContainer, highContrastCssGenerationService, localizationService) {
                var _this = _super.call(this) || this;
                return _this.controlContainer = controlContainer, _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.localizationService = localizationService, _this.focusChanged = new core.EventEmitter, 
                _this.valueChanged = new core.EventEmitter, _this;
            }
            return (0, tslib_es6.__extends)(MarginPaddingComponent, _super), MarginPaddingComponent.prototype.ngOnInit = function() {
                var _a, _this = this;
                this.marginPaddingFormGroup = null === (_a = this.controlContainer) || void 0 === _a ? void 0 : _a.control, 
                debug.fF.assert(function() {
                    return !((_this.value || _this.isDisabled) && _this.marginPaddingFormGroup);
                }, "you have added formGoup as well as value or isDisabled, please remove one"), 
                this.marginPaddingFormGroup || (this.marginPaddingFormGroup = new fesm2022_forms.nJ({}), 
                [ "left", "right", "top", "bottom" ].forEach(function(key) {
                    return _this.createFormControl(key);
                }), this.changes$("isDisabled").subscribe(function(disabled) {
                    disabled && !_this.marginPaddingFormGroup.disabled ? _this.marginPaddingFormGroup.disable({
                        emitEvent: !1
                    }) : !disabled && _this.marginPaddingFormGroup.disabled && _this.marginPaddingFormGroup.enable({
                        emitEvent: !1
                    });
                })), this.ariaLabels = this.buildAriaLabels(), this.initializeHighContrastRules();
            }, MarginPaddingComponent.prototype.createFormControl = function(key) {
                var _a, _this = this, formControl = new fesm2022_forms.p4(null === (_a = this.value) || void 0 === _a ? void 0 : _a[key]);
                this.marginPaddingFormGroup.addControl(key, formControl), formControl.valueChanges.pipe((0, 
                filter.h)(function() {
                    return formControl.valid;
                }), (0, takeUntil.R)(this.onDestroy$)).subscribe(function(value) {
                    return _this.valueChanged.emit({
                        key,
                        value
                    });
                }), this.changes$("value").pipe((0, pluck.j)(key), (0, distinctUntilChanged.x)()).subscribe(function(value) {
                    return formControl.setValue(value, {
                        emitEvent: !1
                    });
                });
            }, MarginPaddingComponent.prototype.buildAriaLabels = function() {
                return {
                    left: this.localizationService.get("Visual_PaddingLeft"),
                    right: this.localizationService.get("Visual_PaddingRight"),
                    top: this.localizationService.get("Visual_PaddingTop"),
                    bottom: this.localizationService.get("Visual_PaddingBottom")
                };
            }, MarginPaddingComponent.prototype.updateSvg = function(isFocusIn, key) {
                this.currentlyFocusedPath = isFocusIn ? key : void 0;
            }, MarginPaddingComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".margin-padding.themeableElement .display svg rect, .margin-padding.themeableElement .display svg line", "{ stroke: @foregroundColor; fill: transparent !important; }"), 
                this.highContrastCssGenerationService.addRule(".margin-padding.themeableElement .display svg path", "{ fill: @selectedBackgroundColor !important; }");
            }, MarginPaddingComponent.\u0275fac = function(t) {
                return new (t || MarginPaddingComponent)(core["\u0275\u0275directiveInject"](fesm2022_forms.gN, 8), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](localization_service.o));
            }, MarginPaddingComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MarginPaddingComponent,
                selectors: [ [ "margin-padding" ] ],
                inputs: {
                    formatOptions: "formatOptions",
                    value: "value",
                    ariaLabelledby: "ariaLabelledby",
                    isDisabled: "isDisabled"
                },
                outputs: {
                    focusChanged: "focusChanged",
                    valueChanged: "valueChanged"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 1,
                vars: 1,
                consts: [ [ "class", "margin-padding themeableElement", "role", "group", 4, "ngIf" ], [ "role", "group", 1, "margin-padding", "themeableElement" ], [ 1, "left" ], [ 1, "margin-padding-control", 3, "formControl", "options", "ariaLabel", "labelId", "inputName", "focusChange", "focusin", "focusout" ], [ 1, "center" ], [ 1, "display" ], [ "width", "48", "height", "48", "viewBox", "0 0 48 48", "fill", "none", "xmlns", "http://www.w3.org/2000/svg" ], [ "x", "0.5", "y", "0.5", "width", "47", "height", "47", "rx", "1.5", 1, "first" ], [ "x", "9", "y", "9", "width", "30", "height", "30", 1, "last" ], [ "x1", "8.49951", "y1", "0.999756", "x2", "8.49951", "y2", "46.9998" ], [ "x1", "39.5005", "y1", "0.999756", "x2", "39.5005", "y2", "46.9998" ], [ "x1", "46.9995", "y1", "8.50024", "x2", "0.999515", "y2", "8.50024" ], [ "x1", "46.9995", "y1", "40.4998", "x2", "0.999515", "y2", "40.4998" ], [ 3, "ngSwitch" ], [ "d", "M1 2C1 1.44772 1.44772 1 2 1H46C46.5523 1 47 1.44772 47 2V8H1V2Z", 4, "ngSwitchCase" ], [ "d", "M47 46C47 46.5523 46.5523 47 46 47L2 47C1.44772 47 1 46.5523 1 46L1 40L47 40L47 46Z", 4, "ngSwitchCase" ], [ "d", "M2 47C1.44772 47 1 46.5523 1 46L0.999998 2C0.999998 1.44772 1.44771 1 2 1L8 1L8 47L2 47Z", 4, "ngSwitchCase" ], [ "d", "M46 1C46.5523 1 47 1.44772 47 2L47 46C47 46.5523 46.5523 47 46 47L40 47L40 1L46 1Z", 4, "ngSwitchCase" ], [ 1, "right" ], [ "d", "M1 2C1 1.44772 1.44772 1 2 1H46C46.5523 1 47 1.44772 47 2V8H1V2Z" ], [ "d", "M47 46C47 46.5523 46.5523 47 46 47L2 47C1.44772 47 1 46.5523 1 46L1 40L47 40L47 46Z" ], [ "d", "M2 47C1.44772 47 1 46.5523 1 46L0.999998 2C0.999998 1.44772 1.44771 1 2 1L8 1L8 47L2 47Z" ], [ "d", "M46 1C46.5523 1 47 1.44772 47 2L47 46C47 46.5523 46.5523 47 46 47L40 47L40 1L46 1Z" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, MarginPaddingComponent_div_0_Template, 21, 27, "div", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", !!ctx.marginPaddingFormGroup);
                },
                dependencies: [ common.NgIf, common.NgSwitch, common.NgSwitchCase, fesm2022_forms.JJ, pbi_spin_button_component.a, fesm2022_forms.oH ],
                styles: [ '.margin-padding[_ngcontent-%COMP%]{display:flex;align-items:center;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);--side-indicator-color: var(--fluent-theme-primary-color, #F2C811);--inner-rectangle-color: var(--gray-20, #F3F2F1);--outer-rectangle-color: var(--fluent-theme-white-color, #FFF);--rectangle-border-color: var(--gray-110, #8A8886);--rectangle-border-disabled-color: var(--gray-60, #C8C6C4)}  [data-legacy-theming=false] .margin-padding{--side-indicator-color: var(--colorCompoundBrandBackground);--inner-rectangle-color: var(--colorNeutralBackground2);--outer-rectangle-color: var(--colorNeutralBackground1);--rectangle-border-color: var(--colorNeutralStroke1);--rectangle-border-disabled-color: var(--colorNeutralStrokeDisabled)}.margin-padding[_ngcontent-%COMP%]   .margin-padding-control[_ngcontent-%COMP%]{background:var(--fluent-theme-white-color, #FFF)}.margin-padding[_ngcontent-%COMP%]   .left[_ngcontent-%COMP%], .margin-padding[_ngcontent-%COMP%]   .right[_ngcontent-%COMP%]{background:var(--fluent-theme-white-color, #FFF);width:48px}.margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]{width:48px;display:flex;flex-direction:column;align-items:center;justify-content:center;margin:2px}.margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display[_ngcontent-%COMP%]{height:48px;margin:2px 0}.margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   rect[_ngcontent-%COMP%], .margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   line[_ngcontent-%COMP%]{stroke:var(--rectangle-border-color)}.margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   rect.first[_ngcontent-%COMP%]{fill:var(--outer-rectangle-color)}.margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   rect.last[_ngcontent-%COMP%]{fill:var(--inner-rectangle-color)}.margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   path[_ngcontent-%COMP%]{fill:var(--side-indicator-color)}.margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display.disabled[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   rect[_ngcontent-%COMP%], .margin-padding[_ngcontent-%COMP%]   .center[_ngcontent-%COMP%]   .display.disabled[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   line[_ngcontent-%COMP%]{stroke:var(--rectangle-border-disabled-color)}' ],
                changeDetection: 0
            }), MarginPaddingComponent;
        }(rx_component.w), tri_svg_icon_component = __webpack_require__(74913);
        function PropertyChangeIndicatorComponent_ng_container_0_span_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "span", 3), core["\u0275\u0275pipe"](1, "localize"), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "localize")), 
            2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](1, 3, ctx_r1.type === ctx_r1.SlicePropertyChangeIndicatorType ? "MobileFormatting_ChangeIndicator_SliceTooltip" : "MobileFormatting_ChangeIndicator_CardTooltip"))("aria-label", core["\u0275\u0275pipeBind1"](2, 5, "Mobile_Authoring_Formatting_Change_Indicator")), 
                core["\u0275\u0275attribute"]("aria-description", core["\u0275\u0275pipeBind1"](3, 7, ctx_r1.type === ctx_r1.SlicePropertyChangeIndicatorType ? "MobileFormatting_ChangeIndicator_SliceTooltip" : "MobileFormatting_ChangeIndicator_CardTooltip"));
            }
        }
        function PropertyChangeIndicatorComponent_ng_container_0_tri_svg_icon_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "tri-svg-icon", 4), core["\u0275\u0275pipe"](1, "localize"), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "localize")), 
            2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](1, 3, ctx_r2.type === ctx_r2.SlicePropertyChangeIndicatorType ? "MobileFormatting_ChangeIndicator_SliceTooltip" : "MobileFormatting_ChangeIndicator_CardTooltip"))("aria-label", core["\u0275\u0275pipeBind1"](2, 5, "Mobile_Authoring_Formatting_Change_Indicator")), 
                core["\u0275\u0275attribute"]("aria-description", core["\u0275\u0275pipeBind1"](3, 7, ctx_r2.type === ctx_r2.SlicePropertyChangeIndicatorType ? "MobileFormatting_ChangeIndicator_SliceTooltip" : "MobileFormatting_ChangeIndicator_CardTooltip"));
            }
        }
        function PropertyChangeIndicatorComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, PropertyChangeIndicatorComponent_ng_container_0_span_1_Template, 4, 9, "span", 1), 
            core["\u0275\u0275template"](2, PropertyChangeIndicatorComponent_ng_container_0_tri_svg_icon_2_Template, 4, 9, "tri-svg-icon", 2), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r0.isTridentEnabled), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.isTridentEnabled);
            }
        }
        var commonGlobals = window, PropertyChangeIndicatorComponent = function() {
            function PropertyChangeIndicatorComponent() {
                this.SlicePropertyChangeIndicatorType = "slice", this.isTridentEnabled = commonGlobals.isTrident;
            }
            return PropertyChangeIndicatorComponent.\u0275fac = function(t) {
                return new (t || PropertyChangeIndicatorComponent);
            }, PropertyChangeIndicatorComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: PropertyChangeIndicatorComponent,
                selectors: [ [ "property-change-indicator" ] ],
                inputs: {
                    type: "type",
                    showChangeIndicator: "showChangeIndicator"
                },
                decls: 1,
                vars: 1,
                consts: [ [ 4, "ngIf" ], [ "class", "change-indicator-icon glyphicon glyph-mini pbi-glyph-phone-optimized-report", "role", "img", "tabindex", "0", 3, "pbiTooltip", "aria-label", 4, "ngIf" ], [ "sprite", "authoring-icons", "name", "data_bar_vertical_phone_16_regular", "class", "change-indicator-icon themeableElement", "role", "img", "tabindex", "0", 3, "pbiTooltip", "aria-label", 4, "ngIf" ], [ "role", "img", "tabindex", "0", 1, "change-indicator-icon", "glyphicon", "glyph-mini", "pbi-glyph-phone-optimized-report", 3, "pbiTooltip", "aria-label" ], [ "sprite", "authoring-icons", "name", "data_bar_vertical_phone_16_regular", "role", "img", "tabindex", "0", 1, "change-indicator-icon", "themeableElement", 3, "pbiTooltip", "aria-label" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, PropertyChangeIndicatorComponent_ng_container_0_Template, 3, 2, "ng-container", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", ctx.showChangeIndicator);
                },
                dependencies: [ common.NgIf, pbi_tooltip_directive.V, tri_svg_icon_component.M, localize_pipe.F ],
                styles: [ '.change-indicator-icon[_ngcontent-%COMP%]{margin:0 8px;font-weight:400;fill:var(--gray-160, #323130)}html[data-focus-source="key"][_nghost-%COMP%]   .change-indicator-icon[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .change-indicator-icon[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}' ],
                changeDetection: 0
            }), PropertyChangeIndicatorComponent;
        }(), ReadOnlyTextComponent = function() {
            function ReadOnlyTextComponent() {}
            return ReadOnlyTextComponent.\u0275fac = function(t) {
                return new (t || ReadOnlyTextComponent);
            }, ReadOnlyTextComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ReadOnlyTextComponent,
                selectors: [ [ "read-only-text" ] ],
                inputs: {
                    text: "text",
                    ariaLabelledby: "ariaLabelledby",
                    ariaDescribedby: "ariaDescribedby"
                },
                decls: 2,
                vars: 3,
                consts: [ [ "role", "textbox", "aria-readonly", "true", "tabindex", "0", 1, "readOnlyText" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275text"](1), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275attribute"]("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedby), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](ctx.text));
                },
                styles: [ ".readOnlyText[_ngcontent-%COMP%]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.noTrim[_nghost-%COMP%]   .readOnlyText[_ngcontent-%COMP%]{white-space:normal;word-break:break-word}" ],
                changeDetection: 0
            }), ReadOnlyTextComponent;
        }(), propertyPaneUtils = __webpack_require__(66609), viewModelFactoryEx = __webpack_require__(20590), JsonExtensions = __webpack_require__(26112), geoJsonHelper = __webpack_require__(70574), standardGeoJson = __webpack_require__(20792), geoJson = __webpack_require__(52967), exploration_capabilities_service = __webpack_require__(48145), dialog_service = __webpack_require__(58938);
        function ShapeMapSelectorComponent_ng_container_0_pbi_dropdown_3_pbi_dropdown_item_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 7)(1, "p"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var item_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r5), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275textInterpolate"](item_r5.name);
            }
        }
        function ShapeMapSelectorComponent_ng_container_0_pbi_dropdown_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r8 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-dropdown", 5), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r7 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r7.dropdownPropertySubject.next($event.property));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementStart"](2, "pbi-dropdown-trigger")(3, "p"), 
                core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](5, ShapeMapSelectorComponent_ng_container_0_pbi_dropdown_3_pbi_dropdown_item_5_Template, 3, 2, "pbi-dropdown-item", 6), 
                core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var selectedItem_r3 = ctx.ngIf, ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("aria-labelledby", ctx_r2.ariaLabelledby + " map-type")("aria-describedby", ctx_r2.ariaDescribedby)("selectedItem", selectedItem_r3)("isDisabled", core["\u0275\u0275pipeBind1"](1, 6, ctx_r2.isDisabled$) || null), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate"](selectedItem_r3.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](6, 8, ctx_r2.dropdownItems$));
            }
        }
        function ShapeMapSelectorComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "label", 3), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, ShapeMapSelectorComponent_ng_container_0_pbi_dropdown_3_Template, 7, 10, "pbi-dropdown", 4), 
            core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("disabled", core["\u0275\u0275pipeBind1"](2, 4, ctx_r0.isDisabled$) || null), 
                core["\u0275\u0275property"]("localize", "Visual_ShapeMap_MapType"), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](4, 6, ctx_r0.selectedItem$));
            }
        }
        function ShapeMapSelectorComponent_ng_container_2_a_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r13 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "a", 9), core["\u0275\u0275listener"]("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r13);
                    var viewModel_r9 = core["\u0275\u0275nextContext"]().ngIf, ctx_r11 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r11.showDialog(viewModel_r9));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r10 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("localize", "Visual_ShapeMap_ViewMapKeys"), core["\u0275\u0275attribute"]("aria-disabled", core["\u0275\u0275pipeBind1"](1, 2, ctx_r10.isDisabled$) || null);
            }
        }
        function ShapeMapSelectorComponent_ng_container_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, ShapeMapSelectorComponent_ng_container_2_a_1_Template, 2, 4, "a", 8), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var viewModel_r9 = ctx.ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", viewModel_r9.content);
            }
        }
        var DefaultViewModel = {
            type: geoJson.c1,
            name: standardGeoJson.X9,
            content: void 0,
            file: void 0
        }, ShapeMapSelectorComponent = function(_super) {
            function ShapeMapSelectorComponent(explorationCapabilities, featureSwitchService, localizationService, dialogService) {
                var _this = _super.call(this) || this;
                return _this.explorationCapabilities = explorationCapabilities, _this.featureSwitchService = featureSwitchService, 
                _this.localizationService = localizationService, _this.dialogService = dialogService, 
                _this.onSelectedViewModelChange = new core.EventEmitter, _this.dropdownPropertySubject = new Subject.xQ, 
                _this.newPaneColorsEnabled = _this.explorationCapabilities.getCapabilities().showFluentDesign || _this.featureSwitchService.featureSwitches && _this.featureSwitchService.featureSwitches.paneColorRefresh, 
                _this;
            }
            return (0, tslib_es6.__extends)(ShapeMapSelectorComponent, _super), ShapeMapSelectorComponent.prototype.ngOnInit = function() {
                this.fileType = this.enableMultipleDataFormats && this.isAzMapReferenceSelector ? "AzMapsAllowedTypes" : "Json", 
                this.fileType = this.enableMultipleDataFormats && this.isAzMapReferenceSelector ? this.keepIconURLs ? "AzMapsAllowedTypesWithIconURLs" : "AzMapsAllowedTypes" : "Json", 
                this.fileUpload = new fesm2022_forms.p4, this.initViewModelHandlers(), this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled", !0), this.disabled$, "isDisabled", this.onDestroy$), 
                this.initDropdownHandlers(), this.initUploadHandlers();
            }, ShapeMapSelectorComponent.prototype.initViewModelHandlers = function() {
                var _this = this, inputViewModel$ = this.mergePropertyInputsAndFormControl(this.changes$("viewModel"), this.value$, "viewModel", this.onDestroy$), mapSelectionChangedViewModel$ = this.dropdownPropertySubject.pipe((0, 
                takeUntil.R)(this.onDestroy$), (0, map.U)(function(selectedMap) {
                    return "@@custom@@" === selectedMap ? {
                        type: geoJson.BD,
                        name: void 0,
                        content: void 0,
                        file: void 0
                    } : {
                        type: geoJson.c1,
                        name: selectedMap,
                        content: void 0,
                        file: void 0
                    };
                })), mapUploadViewModel$ = this.fileUpload.valueChanges.pipe((0, takeUntil.R)(this.onDestroy$), (0, 
                map.U)(function(uploadedContent) {
                    return uploadedContent && _this.fromFile(uploadedContent.name, uploadedContent.content, uploadedContent.file);
                })).pipe((0, map.U)(function(customMap) {
                    return customMap ? {
                        type: customMap.type,
                        name: customMap.name,
                        content: customMap.content,
                        file: customMap.file
                    } : DefaultViewModel;
                })), viewModelToEmit$ = (0, merge.T)(mapSelectionChangedViewModel$, mapUploadViewModel$).pipe((0, 
                distinctUntilChanged.x)(), (0, shareReplay.d)(1));
                viewModelToEmit$.subscribe(function(viewModel) {
                    return _this.onViewModelChanged(viewModel);
                }), this.viewModel$ = (0, merge.T)(inputViewModel$, viewModelToEmit$).pipe((0, startWith.O)(DefaultViewModel), (0, 
                map.U)(function(viewModel) {
                    return viewModel || DefaultViewModel;
                }), (0, distinctUntilChanged.x)(), (0, shareReplay.d)(1));
            }, ShapeMapSelectorComponent.prototype.initDropdownHandlers = function() {
                var standardMaps = this.getStandardMapItems(), customMapItem = this.getCustomMapItem(), allMaps = (0, 
                tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], standardMaps, !0), [ customMapItem ], !1);
                this.dropdownItems$ = (0, of.of)(allMaps), this.selectedItem$ = (0, combineLatest.aj)([ this.viewModel$, this.dropdownItems$ ]).pipe((0, 
                map.U)(function(_a) {
                    var selectedItemValue, viewModel = _a[0], dropdownItems = _a[1];
                    selectedItemValue = viewModel.type === geoJson.BD ? "@@custom@@" : viewModel.name;
                    var selectedItem = dropdownItems.find(function(item) {
                        return item.property === selectedItemValue;
                    });
                    return selectedItem || (debug.fF.assertFail("Expected to match an item"), selectedItem = _.first(dropdownItems)), 
                    selectedItem;
                })), this.showDropdown$ = this.changes$("type").pipe((0, map.U)(function(type) {
                    return type.geoJson.contentType !== geoJson.Ms;
                }));
            }, ShapeMapSelectorComponent.prototype.initUploadHandlers = function() {
                var _this = this;
                this.viewModel$.pipe((0, map.U)(function(viewModel) {
                    return viewModel.type === geoJson.c1 ? void 0 : viewModel;
                }), (0, distinctUntilChanged.x)()).subscribe(function(uploadValue) {
                    return _this.fileUpload.setValue(uploadValue, {
                        emitEvent: !1
                    });
                }), this.disableUpload$ = (0, combineLatest.aj)([ this.viewModel$, this.isDisabled$, this.changes$("isAzMapReferenceSelector", !0) ]).pipe((0, 
                map.U)(function(_a) {
                    return _a[1] || !_a[2] && _a[0].type !== geoJson.BD;
                })), this.disableUpload$.subscribe(function(disable) {
                    return disable ? _this.fileUpload.disable({
                        emitEvent: !1
                    }) : _this.fileUpload.enable({
                        emitEvent: !1
                    });
                });
            }, ShapeMapSelectorComponent.prototype.getStandardMapItems = function() {
                var _this = this;
                return (0, propertyPaneUtils.Iq)(standardGeoJson.dt.members(), this.localizationService).map(function(item) {
                    return {
                        property: "".concat(item.value),
                        name: (0, viewModelFactoryEx.Gf)(item.displayName, _this.localizationService)
                    };
                });
            }, ShapeMapSelectorComponent.prototype.getCustomMapItem = function() {
                return {
                    property: "@@custom@@",
                    name: this.localizationService.get("Visual_ShapeMap_PropertyPaneCustomMapLabel")
                };
            }, ShapeMapSelectorComponent.prototype.onViewModelChanged = function(newViewModel) {
                debug.fF.assertValue(newViewModel.type, "GeoJson type"), (newViewModel.type !== geoJson.BD || newViewModel.content) && (newViewModel.type !== geoJson.c1 || newViewModel.name) && null != newViewModel.type && null != newViewModel.name && (this.onSelectedViewModelChange.emit(newViewModel), 
                this.onValueChange(newViewModel), this.onTouched());
            }, ShapeMapSelectorComponent.prototype.showDialog = function(viewModel) {
                if (viewModel && viewModel.content) {
                    var topojson = (0, JsonExtensions.K)(viewModel.content);
                    if (topojson) {
                        var tableContents = (0, geoJsonHelper.J)(topojson);
                        if (tableContents) {
                            var inputArgs = {
                                columnNames: tableContents.names,
                                tableValues: tableContents.values,
                                titleKey: "Visual_ShapeMap_MapKeysDialog_Title"
                            }, bindings = {
                                cancelButtonIsPrimary: !0,
                                cancelButtonText: this.localizationService.get("TableViewDialog_CloseButtonText"),
                                hideOkButton: !0,
                                title: this.localizationService.get("Visual_ShapeMap_MapKeysDialog_Title"),
                                modulePath: "@powerbi/ExploreUIDialogs/table-view-dialog.module#TableViewDialogModule",
                                componentId: "TableViewDialogComponentId",
                                inputArgs
                            };
                            this.dialogService.openHostDialog({
                                bindings,
                                componentName: "SimpleTemplateDialogComponent",
                                config: {
                                    disableClose: !0
                                },
                                dialogName: "SimpleTemplateDialogComponent"
                            });
                        }
                    }
                }
            }, ShapeMapSelectorComponent.prototype.fromFile = function(name, content, file) {
                if (name && content) return {
                    type: geoJson.BD,
                    name,
                    content,
                    file
                };
            }, ShapeMapSelectorComponent.prototype.getMapTypeAddWording = function() {
                return this.isAzMapReferenceSelector ? this.enableMultipleDataFormats ? "Upload_a_file" : "Visual_AzureMapsReferenceLayerUploadGeojson" : "Visual_ShapeMap_MapTypeAdd";
            }, ShapeMapSelectorComponent.prototype.getMapTypeAddTooltipWording = function() {
                return this.isAzMapReferenceSelector && this.enableMultipleDataFormats ? this.localizationService.get("Visual_AzureMapsReferenceLayerUploadAFileDescription") : "";
            }, ShapeMapSelectorComponent.\u0275fac = function(t) {
                return new (t || ShapeMapSelectorComponent)(core["\u0275\u0275directiveInject"](exploration_capabilities_service.U), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](dialog_service.x));
            }, ShapeMapSelectorComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ShapeMapSelectorComponent,
                selectors: [ [ "shape-map-selector" ] ],
                inputs: {
                    viewModel: "viewModel",
                    type: "type",
                    ariaLabelledby: "ariaLabelledby",
                    ariaDescribedby: "ariaDescribedby",
                    isDisabled: "isDisabled",
                    isAzMapReferenceSelector: "isAzMapReferenceSelector",
                    enableMultipleDataFormats: "enableMultipleDataFormats",
                    keepIconURLs: "keepIconURLs"
                },
                outputs: {
                    onSelectedViewModelChange: "onSelectedViewModelChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return ShapeMapSelectorComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 7,
                vars: 14,
                consts: [ [ 4, "ngIf" ], [ "id", "map-type-add", 1, "displayName", 3, "localize", "pbiTooltip" ], [ 3, "formControl", "fileType" ], [ "id", "map-type", 1, "displayName", 3, "localize" ], [ "class", "map-type-dropdown", "compact", "", 3, "aria-labelledby", "aria-describedby", "selectedItem", "isDisabled", "valueChange", 4, "ngIf" ], [ "compact", "", 1, "map-type-dropdown", 3, "aria-labelledby", "aria-describedby", "selectedItem", "isDisabled", "valueChange" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 3, "value" ], [ "class", "viewKeysLink pbi-internal-link", 3, "localize", "accessible-click", 4, "ngIf" ], [ 1, "viewKeysLink", "pbi-internal-link", 3, "localize", "accessible-click" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, ShapeMapSelectorComponent_ng_container_0_Template, 5, 8, "ng-container", 0), 
                    core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275template"](2, ShapeMapSelectorComponent_ng_container_2_Template, 2, 1, "ng-container", 0), 
                    core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275element"](4, "label", 1), 
                    core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275element"](6, "image-upload", 2)), 
                    2 & rf && (core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 8, ctx.showDropdown$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !ctx.isAzMapReferenceSelector && core["\u0275\u0275pipeBind1"](3, 10, ctx.viewModel$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled", core["\u0275\u0275pipeBind1"](5, 12, ctx.disableUpload$) || null), 
                    core["\u0275\u0275property"]("localize", ctx.getMapTypeAddWording())("pbiTooltip", ctx.getMapTypeAddTooltipWording()), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("formControl", ctx.fileUpload)("fileType", ctx.fileType));
                },
                dependencies: [ common.NgForOf, common.NgIf, fesm2022_forms.JJ, localize_directive.X, accessible_click_directive.t, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_tooltip_directive.V, fesm2022_forms.oH, ImageUploadComponent, common.AsyncPipe ],
                styles: [ '[_nghost-%COMP%]{display:flex;flex-direction:column}[_nghost-%COMP%]   .displayName[_ngcontent-%COMP%]{margin-bottom:4px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}[_nghost-%COMP%]   .displayName.disabled[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D)}[_nghost-%COMP%]   .map-type-dropdown[_ngcontent-%COMP%]{width:100%;padding-bottom:8px}[_nghost-%COMP%]   .viewKeysLink[_ngcontent-%COMP%]{align-self:flex-start;padding-bottom:8px;display:block;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}' ],
                changeDetection: 0
            }), ShapeMapSelectorComponent;
        }(rx_form_control_component.N), formatting_slice_component_c0 = [ "formControl" ];
        function FormattingSliceComponent_div_0_p_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "p", 10), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var tooltipDescription_r10 = ctx.ngIf, ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275attribute"]("id", core["\u0275\u0275pipeBind1"](1, 2, ctx_r2.tooltipDescriptionUid$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](tooltipDescription_r10);
            }
        }
        function FormattingSliceComponent_div_0_div_5_pbi_highlight_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "pbi-highlight", 15), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async")), 2 & rf) {
                var ctx_r11 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275classProp"]("disabled", ctx_r11.formattingSlice.disabled), core["\u0275\u0275property"]("text", core["\u0275\u0275pipeBind1"](2, 8, ctx_r11.displayName$))("search", ctx_r11.searchString)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 10, ctx_r11.tooltipDescription$)), 
                core["\u0275\u0275attribute"]("id", core["\u0275\u0275pipeBind1"](1, 6, ctx_r11.accessibleLabelId$));
            }
        }
        function FormattingSliceComponent_div_0_div_5_pbi_icon_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "pbi-icon", 16), core["\u0275\u0275pipe"](1, "async")), 
            2 & rf) {
                var ctx_r12 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](1, 1, ctx_r12.infoIconText$));
            }
        }
        var formatting_slice_component_c1 = function(a0) {
            return {
                "with-toggle": a0
            };
        };
        function FormattingSliceComponent_div_0_div_5_property_change_indicator_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "property-change-indicator", 17), 
            core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async")), 2 & rf) {
                var ctx_r13 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](7, formatting_slice_component_c1, !core["\u0275\u0275pipeBind1"](1, 3, ctx_r13.hasDynamicExpression$) && "ToggleSwitch" === core["\u0275\u0275pipeBind1"](2, 5, ctx_r13.type$)))("type", "slice")("showChangeIndicator", ctx_r13.formattingSlice.showChangeIndicator);
            }
        }
        function FormattingSliceComponent_div_0_div_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 11), core["\u0275\u0275template"](1, FormattingSliceComponent_div_0_div_5_pbi_highlight_1_Template, 4, 12, "pbi-highlight", 12), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, FormattingSliceComponent_div_0_div_5_pbi_icon_3_Template, 2, 3, "pbi-icon", 13), 
            core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275template"](5, FormattingSliceComponent_div_0_div_5_property_change_indicator_5_Template, 3, 9, "property-change-indicator", 14), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 3, ctx_r3.showDisplayName$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !!core["\u0275\u0275pipeBind1"](4, 5, ctx_r3.infoIconText$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r3.indicatorEnabled);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_alignment_group_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r38 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "alignment-group", 37), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r38);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r36 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r36.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r14 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("aria-labelledby", core["\u0275\u0275pipeBind1"](1, 5, ctx_r14.ariaLabelledbyId$))("ngModel", properties_r1.value)("disabled", ctx_r14.formattingSlice.disabled)("mode", properties_r1.mode)("supportsNoSelection", properties_r1.supportsNoSelection);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_theme_color_input_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r42 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "theme-color-input", 38), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r42);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r40 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r40.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r15 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("labelId", core["\u0275\u0275pipeBind1"](1, 7, ctx_r15.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](2, 9, ctx_r15.tooltipDescriptionUid$))("ngModel", properties_r1.value)("disabled", ctx_r15.formattingSlice.disabled)("defaultColor", properties_r1.defaultColor)("isNoFillItemSupported", properties_r1.isNoFillItemSupported)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 11, ctx_r15.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_error_range_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r45 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "error-range", 39), core["\u0275\u0275listener"]("focusChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r45);
                    var ctx_r44 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r44.isControlFocused$.next($event));
                })("onValueChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r45);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r46 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r46.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r16 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](1, 6, ctx_r16.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](2, 8, ctx_r16.tooltipDescriptionUid$))("disabled", ctx_r16.formattingSlice.disabled)("initialExpr", properties_r1.value)("targetMeasure", properties_r1.targetMeasure)("validators", properties_r1.validators);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_field_picker_modern_lazy_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r51 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "field-picker-modern-lazy", 40), core["\u0275\u0275listener"]("onExprChange", function($event) {
                    core["\u0275\u0275restoreView"](_r51);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r49 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r49.onModelChanged.fn({
                        value: properties_r1.unwrapExprOnGet ? ctx_r49.unwrapSQExpr($event.newExpr) : $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r17 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](1, 12, ctx_r17.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](2, 14, ctx_r17.tooltipDescriptionUid$))("initialExpr", null == properties_r1.value ? null : properties_r1.value.newExpr)("allowClear", properties_r1.allowClear)("validators", properties_r1.validators)("withFieldList", !0)("allowMultipleValues", properties_r1.allowMultipleValues)("allowReorderItems", properties_r1.allowReorderItems)("disallowReplaceItems", properties_r1.disallowReplaceItems)("getDropExprStrategy", properties_r1.getDropExprStrategy)("disabled", ctx_r17.formattingSlice.disabled)("disableAutoScroll", !0);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_ng_container_5_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r56 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "font-control", 41), 
                core["\u0275\u0275listener"]("fontSizeFocusChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r56);
                    var ctx_r55 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r55.isControlFocused$.next($event));
                })("valueChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r56);
                    var ctx_r57 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r57.onCompositeControlValueChange($event.key, $event.value));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var fontOptions_r54 = ctx.ngIf, ctx_r53 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](2, 7, ctx_r53.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](3, 9, ctx_r53.tooltipDescriptionUid$))("fontProperties", fontOptions_r54.fontProperties)("fontSizeFormatOption", fontOptions_r54.fontSizeFormatOption)("fontSizeDescriptor", fontOptions_r54.fontSizeDescriptor)("isDisabled", ctx_r53.formattingSlice.disabled)("warning", core["\u0275\u0275pipeBind1"](4, 11, ctx_r53.warningMessage$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_ng_container_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingSliceComponent_div_0_ng_container_12_ng_container_5_ng_container_1_Template, 5, 13, "ng-container", 7), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r18 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r18.fontProperties$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_pbi_icon_6_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "pbi-icon", 46), 2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](3).ngIf;
                core["\u0275\u0275property"]("name", null == properties_r1.value ? null : properties_r1.value.icon.glyph);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_pbi_dropdown_item_9_pbi_icon_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "pbi-icon", 46), 2 & rf) {
                var item_r61 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275property"]("name", item_r61.icon.glyph);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_pbi_dropdown_item_9_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 47)(1, "div", 43), 
            core["\u0275\u0275template"](2, FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_pbi_dropdown_item_9_pbi_icon_2_Template, 1, 1, "pbi-icon", 44), 
            core["\u0275\u0275elementStart"](3, "span"), core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"]()()()), 
            2 & rf) {
                var tmp_1_0, item_r61 = ctx.$implicit, ctx_r59 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("value", item_r61)("ariaLabel", null !== (tmp_1_0 = item_r61.label) && void 0 !== tmp_1_0 ? tmp_1_0 : item_r61.displayName), 
                core["\u0275\u0275attribute"]("data-testid", item_r61.displayName + "-option"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("rtl", ctx_r59.rtl), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", item_r61.icon), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](item_r61.displayName);
            }
        }
        var formatting_slice_component_c2 = function() {
            return {
                showFullContent: !0
            };
        };
        function FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_Template(rf, ctx) {
            if (1 & rf) {
                var _r66 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-dropdown", 42), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r66);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r64 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r64.onModelChanged.fn({
                        value: $event.value,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementStart"](4, "pbi-dropdown-trigger")(5, "div", 43), 
                core["\u0275\u0275template"](6, FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_pbi_icon_6_Template, 1, 1, "pbi-icon", 44), 
                core["\u0275\u0275elementStart"](7, "span"), core["\u0275\u0275text"](8), core["\u0275\u0275elementEnd"]()()(), 
                core["\u0275\u0275template"](9, FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_pbi_dropdown_item_9_Template, 5, 7, "pbi-dropdown-item", 45), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r19 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("options", core["\u0275\u0275pureFunction0"](18, formatting_slice_component_c2))("aria-labelledby", core["\u0275\u0275pipeBind1"](1, 12, ctx_r19.ariaLabelledbyId$))("aria-describedby", core["\u0275\u0275pipeBind1"](2, 14, ctx_r19.tooltipDescriptionUid$))("ngModel", properties_r1.value)("disabled", ctx_r19.formattingSlice.disabled)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 16, ctx_r19.tooltipDescription$)), 
                core["\u0275\u0275attribute"]("data-testid", ctx_r19.displayName + "-dropdown"), 
                core["\u0275\u0275advance"](5), core["\u0275\u0275classProp"]("rtl", ctx_r19.rtl), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", null == properties_r1.value ? null : properties_r1.value.icon), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](null == properties_r1.value ? null : properties_r1.value.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", properties_r1.items);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_list_editor_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r70 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "list-editor", 48), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r70);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r68 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r68.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r20 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("aria-labelledby", core["\u0275\u0275pipeBind1"](1, 4, ctx_r20.ariaLabelledbyId$))("aria-describedby", core["\u0275\u0275pipeBind1"](2, 6, ctx_r20.tooltipDescriptionUid$))("ngModel", properties_r1.value)("isDisabled", ctx_r20.formattingSlice.disabled);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_ng_container_8_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r75 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "margin-padding", 49), 
                core["\u0275\u0275listener"]("focusChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r75);
                    var ctx_r74 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r74.isControlFocused$.next($event));
                })("valueChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r75);
                    var ctx_r76 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r76.onCompositeControlValueChange($event.key, $event.value));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var options_r73 = ctx.ngIf, ctx_r72 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("formatOptions", options_r73.formatOptions)("value", options_r73.value)("isDisabled", ctx_r72.formattingSlice.disabled);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_ng_container_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingSliceComponent_div_0_ng_container_12_ng_container_8_ng_container_1_Template, 2, 3, "ng-container", 7), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r21 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r21.marginPaddingProperties$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_image_upload_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r80 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "image-upload", 50, 51), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r80);
                    var _r77 = core["\u0275\u0275reference"](1), properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r78 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r78.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor,
                        validationErrors: null == _r77 ? null : _r77.errors
                    }));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r22 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](2, 6, ctx_r22.ariaLabelledbyId$))("ariaLabelledby", core["\u0275\u0275pipeBind1"](3, 8, ctx_r22.tooltipDescriptionUid$))("disabled", ctx_r22.formattingSlice.disabled)("ngModel", properties_r1.value)("imageScalingProperties", properties_r1.imageScalingProperties)("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 10, ctx_r22.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_gradient_bar_10_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "gradient-bar", 52), 2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                core["\u0275\u0275property"]("colors", properties_r1.value);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_pbi_date_picker_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r86 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-date-picker", 53, 51), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r86);
                    var _r83 = core["\u0275\u0275reference"](1), properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r84 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r84.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor,
                        validationErrors: null == _r83 ? null : _r83.errors
                    }));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r24 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ariaLabelledByForInput", core["\u0275\u0275pipeBind1"](2, 10, ctx_r24.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](3, 12, ctx_r24.tooltipDescriptionUid$))("id", ctx_r24.formattingSlice.uid + "-date-picker")("disabled", ctx_r24.formattingSlice.disabled)("ngModel", properties_r1.value)("pbiMin", null == properties_r1.validators || null == properties_r1.validators.min ? null : properties_r1.validators.min.value)("pbiMax", null == properties_r1.validators || null == properties_r1.validators.max ? null : properties_r1.validators.max.value)("resetValidValueOnBlur", !0)("useDateFormatAsPlaceholder", !0)("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 14, ctx_r24.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_shape_map_selector_12_Template(rf, ctx) {
            if (1 & rf) {
                var _r90 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "shape-map-selector", 54), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r90);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r88 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r88.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r25 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](1, 9, ctx_r25.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](2, 11, ctx_r25.tooltipDescriptionUid$))("disabled", ctx_r25.formattingSlice.disabled)("type", properties_r1.descriptor.type)("ngModel", properties_r1.value)("isAzMapReferenceSelector", properties_r1.isAzMapReferenceSelector)("enableMultipleDataFormats", properties_r1.enableMultipleDataFormats)("keepIconURLs", properties_r1.keepIconURLs)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 13, ctx_r25.tooltipDescription$));
            }
        }
        var formatting_slice_component_c3 = function(a0, a1) {
            return {
                unitSymbolInside: a0,
                warning: a1
            };
        }, formatting_slice_component_c4 = function(a0, a1, a2) {
            return {
                unitSymbol: a0,
                minValue: a1,
                maxValue: a2
            };
        };
        function FormattingSliceComponent_div_0_ng_container_12_ng_container_13_Template(rf, ctx) {
            if (1 & rf) {
                var _r94 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "pbi-spin-button", 55, 51), 
                core["\u0275\u0275listener"]("focusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r94);
                    var ctx_r93 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r93.isControlFocused$.next($event));
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r94);
                    var _r92 = core["\u0275\u0275reference"](2), properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r95 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r95.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor,
                        validationErrors: null == _r92 ? null : _r92.errors
                    }));
                }), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), 
                core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r26 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction2"](20, formatting_slice_component_c3, !(null != properties_r1.options && properties_r1.options.unitSymbolAfterInput), !!core["\u0275\u0275pipeBind1"](3, 12, ctx_r26.warningMessage$)))("labelId", core["\u0275\u0275pipeBind1"](4, 14, ctx_r26.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](5, 16, ctx_r26.tooltipDescriptionUid$))("ngModel", properties_r1.value)("disabled", ctx_r26.formattingSlice.disabled)("options", core["\u0275\u0275pureFunction3"](23, formatting_slice_component_c4, null == properties_r1.options ? null : properties_r1.options.unitSymbol, null == properties_r1.options || null == properties_r1.options.minValue ? null : properties_r1.options.minValue.value, null == properties_r1.options || null == properties_r1.options.maxValue ? null : properties_r1.options.maxValue.value))("pbiMin", null == properties_r1.options || null == properties_r1.options.minValue ? null : properties_r1.options.minValue.value)("pbiMax", null == properties_r1.options || null == properties_r1.options.maxValue ? null : properties_r1.options.maxValue.value)("pbiRequired", null == properties_r1.options ? null : properties_r1.options.required)("pbiTooltip", core["\u0275\u0275pipeBind1"](6, 18, ctx_r26.tooltipDescription$))("placeholderText", properties_r1.placeholderText || ctx_r26.formattingSlice.placeHolderText || "")("unitSymbolAfterInput", null == properties_r1.options ? null : properties_r1.options.unitSymbolAfterInput);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_duration_picker_14_Template(rf, ctx) {
            if (1 & rf) {
                var _r100 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "duration-picker", 56), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r100);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r98 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r98.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r27 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("labelId", core["\u0275\u0275pipeBind1"](1, 5, ctx_r27.ariaLabelledbyId$))("ngModel", properties_r1.value)("validators", properties_r1.validators)("disabled", ctx_r27.formattingSlice.disabled)("pbiTooltip", core["\u0275\u0275pipeBind1"](2, 7, ctx_r27.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_format_pane_flags_control_15_Template(rf, ctx) {
            if (1 & rf) {
                var _r104 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "format-pane-flags-control", 57), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r104);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r102 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r102.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r28 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngModel", properties_r1.value)("disabled", ctx_r28.formattingSlice.disabled)("options", properties_r1.items)("sliceLabel", ctx_r28.formattingSlice.displayName);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_slider_16_Template(rf, ctx) {
            if (1 & rf) {
                var _r108 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "slider", 58, 51), core["\u0275\u0275listener"]("inputFocusChange", function($event) {
                    core["\u0275\u0275restoreView"](_r108);
                    var ctx_r107 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r107.isControlFocused$.next($event));
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r108);
                    var _r106 = core["\u0275\u0275reference"](1), properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r109 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r109.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor,
                        validationErrors: null == _r106 ? null : _r106.errors
                    }));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r29 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("labelId", core["\u0275\u0275pipeBind1"](2, 9, ctx_r29.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](3, 11, ctx_r29.tooltipDescriptionUid$))("ngModel", properties_r1.value)("disabled", ctx_r29.formattingSlice.disabled)("options", core["\u0275\u0275pureFunction3"](15, formatting_slice_component_c4, null == properties_r1.options ? null : properties_r1.options.unitSymbol, null == properties_r1.options || null == properties_r1.options.minValue ? null : properties_r1.options.minValue.value, null == properties_r1.options || null == properties_r1.options.maxValue ? null : properties_r1.options.maxValue.value))("pbiMin", null == properties_r1.options || null == properties_r1.options.minValue ? null : properties_r1.options.minValue.value)("pbiMax", null == properties_r1.options || null == properties_r1.options.maxValue ? null : properties_r1.options.maxValue.value)("pbiRequired", null == properties_r1.options ? null : properties_r1.options.required)("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 13, ctx_r29.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_toggle_switch_modern_17_Template(rf, ctx) {
            if (1 & rf) {
                var _r114 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "toggle-switch-modern", 59), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r114);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                    return core["\u0275\u0275resetView"](properties_r1.value = $event);
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r114);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r115 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r115.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r30 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](1, 5, ctx_r30.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](2, 7, ctx_r30.tooltipDescriptionUid$))("ngModel", properties_r1.value)("disabled", ctx_r30.formattingSlice.disabled)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 9, ctx_r30.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_font_picker_18_Template(rf, ctx) {
            if (1 & rf) {
                var _r120 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "font-picker", 60), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r120);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r118 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r118.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r31 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](1, 5, ctx_r31.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](2, 7, ctx_r31.tooltipDescriptionUid$))("ngModel", properties_r1.value)("disabled", ctx_r31.formattingSlice.disabled)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 9, ctx_r31.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_ng_container_19_pbi_icon_1_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "pbi-icon", 63);
        }
        var formatting_slice_component_c5 = function(a0) {
            return {
                disabled: a0
            };
        };
        function FormattingSliceComponent_div_0_ng_container_12_ng_container_19_Template(rf, ctx) {
            if (1 & rf) {
                var _r124 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingSliceComponent_div_0_ng_container_12_ng_container_19_pbi_icon_1_Template, 1, 0, "pbi-icon", 61), 
                core["\u0275\u0275elementStart"](2, "a", 62), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r124);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r123 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](!ctx_r123.formattingSlice.disabled && ctx_r123.onLinkClicked.fn([ properties_r1.value, properties_r1.descriptor ]));
                }), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r32 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", properties_r1.warningIcon), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](8, formatting_slice_component_c5, ctx_r32.formattingSlice.disabled))("tabindex", ctx_r32.formattingSlice.disabled ? -1 : 0)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 6, ctx_r32.tooltipDescription$)), 
                core["\u0275\u0275attribute"]("aria-label", properties_r1.ariaLabel || ctx_r32.formattingSlice.displayName), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", ctx_r32.formattingSlice.displayName, " ");
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_input_20_Template(rf, ctx) {
            if (1 & rf) {
                var _r130 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "input", 64, 51), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r130);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                    return core["\u0275\u0275resetView"](properties_r1.value = $event);
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r130);
                    var _r127 = core["\u0275\u0275reference"](1), properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r131 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r131.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor,
                        validationErrors: null == _r127 ? null : _r127.errors
                    }));
                })("focus", function() {
                    core["\u0275\u0275restoreView"](_r130);
                    var ctx_r133 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r133.isControlFocused$.next(!0));
                })("blur", function() {
                    core["\u0275\u0275restoreView"](_r130);
                    var ctx_r134 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r134.isControlFocused$.next(!1));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r33 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("aria-describedby", core["\u0275\u0275pipeBind1"](3, 12, ctx_r33.tooltipDescriptionUid$))("ngModel", properties_r1.value)("placeholder", properties_r1.placeholder || ctx_r33.formattingSlice.placeHolderText || "")("pbiRequired", null == properties_r1.validators ? null : properties_r1.validators.required)("pbiDashArray", null == properties_r1.validators ? null : properties_r1.validators.dashArray)("pbiPattern", null == properties_r1.validators || null == properties_r1.validators.pattern ? null : properties_r1.validators.pattern.regex)("pbiMaxLength", null == properties_r1.validators || null == properties_r1.validators.maxLength ? null : properties_r1.validators.maxLength.value)("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 14, ctx_r33.tooltipDescription$)), 
                core["\u0275\u0275attribute"]("aria-labelledby", core["\u0275\u0275pipeBind1"](2, 10, ctx_r33.ariaLabelledbyId$))("disabled", ctx_r33.formattingSlice.disabled || null);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_textarea_21_Template(rf, ctx) {
            if (1 & rf) {
                var _r139 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "textarea", 65, 51), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r139);
                    var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                    return core["\u0275\u0275resetView"](properties_r1.value = $event);
                })("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r139);
                    var _r136 = core["\u0275\u0275reference"](1), properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r140 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r140.onModelChanged.fn({
                        value: $event,
                        descriptor: properties_r1.descriptor,
                        validationErrors: null == _r136 ? null : _r136.errors
                    }));
                })("focus", function() {
                    core["\u0275\u0275restoreView"](_r139);
                    var ctx_r142 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r142.isControlFocused$.next(!0));
                })("blur", function() {
                    core["\u0275\u0275restoreView"](_r139);
                    var ctx_r143 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r143.isControlFocused$.next(!1));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275text"](5, "                    "), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r34 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("aria-describedby", core["\u0275\u0275pipeBind1"](3, 10, ctx_r34.tooltipDescriptionUid$))("ngModel", properties_r1.value)("placeholder", properties_r1.placeholder || ctx_r34.formattingSlice.placeHolderText)("pbiRequired", null == properties_r1.validators ? null : properties_r1.validators.required)("pbiPattern", null == properties_r1.validators || null == properties_r1.validators.pattern ? null : properties_r1.validators.pattern.regex)("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 12, ctx_r34.tooltipDescription$)), 
                core["\u0275\u0275attribute"]("aria-labelledby", core["\u0275\u0275pipeBind1"](2, 8, ctx_r34.ariaLabelledbyId$))("disabled", ctx_r34.formattingSlice.disabled || null);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_read_only_text_22_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "read-only-text", 66), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async")), 2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r35 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275classProp"]("noTrim", !0)("disabled", ctx_r35.formattingSlice.disabled), 
                core["\u0275\u0275property"]("ariaLabelledby", core["\u0275\u0275pipeBind1"](1, 8, ctx_r35.ariaLabelledbyId$))("ariaDescribedby", core["\u0275\u0275pipeBind1"](2, 10, ctx_r35.tooltipDescriptionUid$))("text", properties_r1.value)("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 12, ctx_r35.tooltipDescription$));
            }
        }
        function FormattingSliceComponent_div_0_ng_container_12_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingSliceComponent_div_0_ng_container_12_alignment_group_1_Template, 2, 7, "alignment-group", 18), 
            core["\u0275\u0275template"](2, FormattingSliceComponent_div_0_ng_container_12_theme_color_input_2_Template, 4, 13, "theme-color-input", 19), 
            core["\u0275\u0275template"](3, FormattingSliceComponent_div_0_ng_container_12_error_range_3_Template, 3, 10, "error-range", 20), 
            core["\u0275\u0275template"](4, FormattingSliceComponent_div_0_ng_container_12_field_picker_modern_lazy_4_Template, 3, 16, "field-picker-modern-lazy", 21), 
            core["\u0275\u0275template"](5, FormattingSliceComponent_div_0_ng_container_12_ng_container_5_Template, 3, 3, "ng-container", 22), 
            core["\u0275\u0275template"](6, FormattingSliceComponent_div_0_ng_container_12_pbi_dropdown_6_Template, 10, 19, "pbi-dropdown", 23), 
            core["\u0275\u0275template"](7, FormattingSliceComponent_div_0_ng_container_12_list_editor_7_Template, 3, 8, "list-editor", 24), 
            core["\u0275\u0275template"](8, FormattingSliceComponent_div_0_ng_container_12_ng_container_8_Template, 3, 3, "ng-container", 22), 
            core["\u0275\u0275template"](9, FormattingSliceComponent_div_0_ng_container_12_image_upload_9_Template, 5, 12, "image-upload", 25), 
            core["\u0275\u0275template"](10, FormattingSliceComponent_div_0_ng_container_12_gradient_bar_10_Template, 1, 1, "gradient-bar", 26), 
            core["\u0275\u0275template"](11, FormattingSliceComponent_div_0_ng_container_12_pbi_date_picker_11_Template, 5, 16, "pbi-date-picker", 27), 
            core["\u0275\u0275template"](12, FormattingSliceComponent_div_0_ng_container_12_shape_map_selector_12_Template, 4, 15, "shape-map-selector", 28), 
            core["\u0275\u0275template"](13, FormattingSliceComponent_div_0_ng_container_12_ng_container_13_Template, 7, 27, "ng-container", 22), 
            core["\u0275\u0275template"](14, FormattingSliceComponent_div_0_ng_container_12_duration_picker_14_Template, 3, 9, "duration-picker", 29), 
            core["\u0275\u0275template"](15, FormattingSliceComponent_div_0_ng_container_12_format_pane_flags_control_15_Template, 1, 4, "format-pane-flags-control", 30), 
            core["\u0275\u0275template"](16, FormattingSliceComponent_div_0_ng_container_12_slider_16_Template, 5, 19, "slider", 31), 
            core["\u0275\u0275template"](17, FormattingSliceComponent_div_0_ng_container_12_toggle_switch_modern_17_Template, 4, 11, "toggle-switch-modern", 32), 
            core["\u0275\u0275template"](18, FormattingSliceComponent_div_0_ng_container_12_font_picker_18_Template, 4, 11, "font-picker", 33), 
            core["\u0275\u0275template"](19, FormattingSliceComponent_div_0_ng_container_12_ng_container_19_Template, 5, 10, "ng-container", 22), 
            core["\u0275\u0275template"](20, FormattingSliceComponent_div_0_ng_container_12_input_20_Template, 5, 16, "input", 34), 
            core["\u0275\u0275template"](21, FormattingSliceComponent_div_0_ng_container_12_textarea_21_Template, 6, 14, "textarea", 35), 
            core["\u0275\u0275template"](22, FormattingSliceComponent_div_0_ng_container_12_read_only_text_22_Template, 4, 14, "read-only-text", 36), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "AlignmentGroup"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "ColorPicker"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "ErrorRangeControl"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "FieldPicker"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "FontControl"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "Dropdown"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "ListEditor"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "MarginPadding"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "ImageUpload"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "GradientBar"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "DatePicker"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "ShapeMapSelector"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "NumUpDown"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "DurationPicker"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "FlagsSelection"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "Slider"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "ToggleSwitch"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "FontPicker"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "Link"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "TextInput"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "TextArea"), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", "ReadOnlyText"));
        }
        function FormattingSliceComponent_div_0_ng_container_14_1_ng_template_0_Template(rf, ctx) {}
        function FormattingSliceComponent_div_0_ng_container_14_1_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275template"](0, FormattingSliceComponent_div_0_ng_container_14_1_ng_template_0_Template, 0, 0, "ng-template");
        }
        function FormattingSliceComponent_div_0_ng_container_14_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingSliceComponent_div_0_ng_container_14_1_Template, 1, 0, null, 67), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                core["\u0275\u0275nextContext"]();
                var _r8 = core["\u0275\u0275reference"](21);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngTemplateOutlet", _r8);
            }
        }
        function FormattingSliceComponent_div_0_div_16_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 68)(1, "p"), core["\u0275\u0275text"](2), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var errorMessage_r148 = ctx.ngIf;
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](errorMessage_r148);
            }
        }
        function FormattingSliceComponent_div_0_ng_container_18_1_ng_template_0_Template(rf, ctx) {}
        function FormattingSliceComponent_div_0_ng_container_18_1_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275template"](0, FormattingSliceComponent_div_0_ng_container_18_1_ng_template_0_Template, 0, 0, "ng-template");
        }
        function FormattingSliceComponent_div_0_ng_container_18_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingSliceComponent_div_0_ng_container_18_1_Template, 1, 0, null, 67), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                core["\u0275\u0275nextContext"]();
                var _r8 = core["\u0275\u0275reference"](21);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngTemplateOutlet", _r8);
            }
        }
        function FormattingSliceComponent_div_0_ng_template_20_ng_container_0_ng_template_10_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "div", 75)(1, "div", 76), 2 & rf) {
                var ctx_r154 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("textContent", ctx_r154.conditionalFormattingTooltipTitle), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("textContent", ctx_r154.conditionalFormattingTooltipDescription);
            }
        }
        function FormattingSliceComponent_div_0_ng_template_20_ng_container_0_button_12_Template(rf, ctx) {
            if (1 & rf) {
                var _r158 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 77), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r158);
                    var properties_r1 = core["\u0275\u0275nextContext"](3).ngIf, ctx_r156 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r156.onModelChanged.fn({
                        value: null,
                        descriptor: properties_r1.descriptor
                    }));
                }), core["\u0275\u0275element"](1, "pbi-icon", 78), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r155 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("pbiTooltip", ctx_r155.removeConditionalFormattingTooltip)("disabled", ctx_r155.formattingSlice.disabled);
            }
        }
        var formatting_slice_component_c6 = function(a0) {
            return {
                "button-error": a0
            };
        };
        function FormattingSliceComponent_div_0_ng_template_20_ng_container_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r160 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 69)(2, "p", 10), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275element"](5, "label", 70), core["\u0275\u0275elementStart"](6, "button", 71), 
                core["\u0275\u0275listener"]("click", function() {
                    var conditionalFormattingObjects_r152 = core["\u0275\u0275restoreView"](_r160).ngIf, properties_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r159 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r159.onConditionalFormattingButtonClicked.fn([ conditionalFormattingObjects_r152, properties_r1.descriptor ]));
                }), core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275pipe"](8, "async"), 
                core["\u0275\u0275element"](9, "pbi-icon", 72), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275template"](10, FormattingSliceComponent_div_0_ng_template_20_ng_container_0_ng_template_10_Template, 2, 2, "ng-template", null, 73, core["\u0275\u0275templateRefExtractor"]), 
                core["\u0275\u0275template"](12, FormattingSliceComponent_div_0_ng_template_20_ng_container_0_button_12_Template, 2, 2, "button", 74), 
                core["\u0275\u0275pipe"](13, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var conditionalFormattingObjects_r152 = ctx.ngIf, _r153 = core["\u0275\u0275reference"](11), ctx_r151 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](2), core["\u0275\u0275attribute"]("id", core["\u0275\u0275pipeBind1"](3, 9, ctx_r151.cfTooltipDescriptionUid$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](ctx_r151.conditionalFormattingTooltipDescription), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", "PropertyPane_ConditionalFormatting_CardTitle"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](17, formatting_slice_component_c6, core["\u0275\u0275pipeBind1"](7, 11, ctx_r151.errorMessage$)))("disabled", ctx_r151.formattingSlice.disabled || conditionalFormattingObjects_r152.isDisabled)("pbiTooltip", _r153)("aria-describedby", core["\u0275\u0275pipeBind1"](8, 13, ctx_r151.cfTooltipDescriptionUid$)), 
                core["\u0275\u0275attribute"]("aria-labelledby", ctx_r151.formattingSlice.uid + " condition-formatting-id"), 
                core["\u0275\u0275advance"](6), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](13, 15, ctx_r151.hasDynamicExpression$));
            }
        }
        function FormattingSliceComponent_div_0_ng_template_20_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275template"](0, FormattingSliceComponent_div_0_ng_template_20_ng_container_0_Template, 14, 19, "ng-container", 7), 
            core["\u0275\u0275pipe"](1, "async")), 2 & rf) {
                var ctx_r9 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx_r9.conditionalFormattingObjects$));
            }
        }
        function FormattingSliceComponent_div_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 1)(1, "div", 2), core["\u0275\u0275pipe"](2, "async"), 
            core["\u0275\u0275template"](3, FormattingSliceComponent_div_0_p_3_Template, 3, 4, "p", 3), 
            core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275template"](5, FormattingSliceComponent_div_0_div_5_Template, 6, 7, "div", 4), 
            core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275elementContainerStart"](8, 5), 
            core["\u0275\u0275pipe"](9, "async"), core["\u0275\u0275elementStart"](10, "div", 6), 
            core["\u0275\u0275pipe"](11, "async"), core["\u0275\u0275template"](12, FormattingSliceComponent_div_0_ng_container_12_Template, 23, 22, "ng-container", 7), 
            core["\u0275\u0275pipe"](13, "async"), core["\u0275\u0275template"](14, FormattingSliceComponent_div_0_ng_container_14_Template, 2, 1, "ng-container", 7), 
            core["\u0275\u0275pipe"](15, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"](), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](16, FormattingSliceComponent_div_0_div_16_Template, 3, 1, "div", 8), 
            core["\u0275\u0275pipe"](17, "async"), core["\u0275\u0275template"](18, FormattingSliceComponent_div_0_ng_container_18_Template, 2, 1, "ng-container", 7), 
            core["\u0275\u0275pipe"](19, "async"), core["\u0275\u0275template"](20, FormattingSliceComponent_div_0_ng_template_20_Template, 2, 3, "ng-template", null, 9, core["\u0275\u0275templateRefExtractor"]), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275attribute"]("data-unique-id", ctx_r0.formattingSlice.uid), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pipeBind1"](2, 10, ctx_r0.type$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](4, 12, ctx_r0.tooltipDescription$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](6, 14, ctx_r0.showDisplayName$) || !!core["\u0275\u0275pipeBind1"](7, 16, ctx_r0.infoIconText$)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngSwitch", core["\u0275\u0275pipeBind1"](9, 18, ctx_r0.type$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](11, 20, ctx_r0.disabledReason$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !core["\u0275\u0275pipeBind1"](13, 22, ctx_r0.hasDynamicExpression$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", "ToggleSwitch" !== core["\u0275\u0275pipeBind1"](15, 24, ctx_r0.type$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](17, 26, ctx_r0.errorMessage$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", "ToggleSwitch" === core["\u0275\u0275pipeBind1"](19, 28, ctx_r0.type$));
            }
        }
        var incrementalId = 0, FormattingSliceComponent = function(_super) {
            function FormattingSliceComponent(featureSwitchService, localizationService, rtlService, screenReaderService) {
                var _this = _super.call(this) || this;
                return _this.featureSwitchService = featureSwitchService, _this.localizationService = localizationService, 
                _this.rtlService = rtlService, _this.screenReaderService = screenReaderService, 
                _this.valueChanged = new core.EventEmitter, _this.errorMessage$ = new BehaviorSubject.X(void 0), 
                _this.rtl = _this.rtlService.isRtlLayout, _this.onObjectFormatPaneUid = _this.featureSwitchService.featureSwitches.onObjectFormatPaneUid, 
                _this.onObjectFormatPaneUid && (++incrementalId, _this.accessibleLabelId = "".concat("formatting-slice", "-").concat(incrementalId)), 
                _this.isControlFocused$ = new BehaviorSubject.X(!1), _this;
            }
            return (0, tslib_es6.__extends)(FormattingSliceComponent, _super), FormattingSliceComponent.prototype.ngOnInit = function() {
                var _this = this, formattingSlice$ = (0, combineLatest.aj)([ this.changes$("formattingSlice"), this.isControlFocused$ ]).pipe((0, 
                filter.h)(function(_a) {
                    var isControlFocused = _a[1];
                    switch (_a[0].control.type) {
                      case "TextArea":
                      case "TextInput":
                      case "NumUpDown":
                      case "Slider":
                      case "FontControl":
                      case "MarginPadding":
                      case "ErrorRangeControl":
                        return !isControlFocused;

                      default:
                        return !0;
                    }
                }), (0, map.U)(function(_a) {
                    return _a[0];
                }));
                this.sliceUid$ = formattingSlice$.pipe((0, startWith.O)(this.formattingSlice), (0, 
                map.U)(function(formattingSlice) {
                    return (0, formattingModelUtil.zU)(formattingSlice, _this.onObjectFormatPaneUid);
                }));
                var control$ = formattingSlice$.pipe((0, pluck.j)("control"));
                this.properties$ = control$.pipe((0, pluck.j)("properties")), this.type$ = control$.pipe((0, 
                pluck.j)("type"), (0, distinctUntilChanged.x)()), this.displayName$ = formattingSlice$.pipe((0, 
                pluck.j)("displayName")), this.accessibleLabelId$ = formattingSlice$.pipe((0, map.U)(function(formattingSlice) {
                    if (!formattingSlice.suppressDisplayName && !_.isEmpty(formattingSlice.displayName)) return _this.onObjectFormatPaneUid ? _this.accessibleLabelId : formattingSlice.uid;
                }));
                var suppressDisplayName$ = formattingSlice$.pipe((0, pluck.j)("suppressDisplayName"), (0, 
                startWith.O)(!1));
                this.ariaLabelledbyId$ = (0, combineLatest.aj)([ this.accessibleLabelId$, this.changes$("ariaLabelledbyPrefix", !0), suppressDisplayName$ ]).pipe((0, 
                map.U)(function(_a) {
                    var accessibleLabelId = _a[0], ariaLabelledbyPrefix = _a[1];
                    return (ariaLabelledbyPrefix = ariaLabelledbyPrefix && _a[2] ? ariaLabelledbyPrefix + " " : "") + (null != accessibleLabelId ? accessibleLabelId : "");
                }));
                var uid$ = formattingSlice$.pipe((0, pluck.j)("uid"));
                this.tooltipDescription$ = formattingSlice$.pipe((0, map.U)(function(formattingSlice) {
                    return formattingSlice.description;
                })), this.disabledReason$ = formattingSlice$.pipe((0, map.U)(function(formattingSlice) {
                    return formattingSlice.disabled ? formattingSlice.disabledReason : void 0;
                })), this.tooltipDescriptionUid$ = (0, iif.s)(function() {
                    return _this.onObjectFormatPaneUid;
                }, this.accessibleLabelId$, uid$).pipe((0, map.U)(function(label) {
                    return "".concat(label, "-tooltip");
                })), this.cfTooltipDescriptionUid$ = (0, iif.s)(function() {
                    return _this.onObjectFormatPaneUid;
                }, this.accessibleLabelId$, uid$).pipe((0, map.U)(function(label) {
                    return "".concat(label, "-cftooltip");
                })), this.infoIconText$ = formattingSlice$.pipe((0, pluck.j)("infoIconText")), this.showDisplayName$ = (0, 
                combineLatest.aj)([ formattingSlice$.pipe((0, pluck.j)("displayName")), formattingSlice$.pipe((0, 
                pluck.j)("suppressDisplayName")) ]).pipe((0, map.U)(function(_a) {
                    return !_a[1] && !_.isEmpty(_a[0]);
                })), this.populateCompositeControls(control$), this.setConditionalFormattingObjects(formattingSlice$), 
                this.setLinkObjects(), this.setModelChangedEventAdaptor(), this.conditionalFormattingTooltipTitle = this.localizationService.get("PropertyPane_ConditionalFormatting_CardTitle"), 
                this.conditionalFormattingTooltipDescription = this.localizationService.get("Visual_ConditionalFormatting_PaneButtonDescription"), 
                this.removeConditionalFormattingTooltip = this.localizationService.get("FieldWell_RemoveConditionalFormatting");
            }, FormattingSliceComponent.prototype.ngAfterViewInit = function() {
                var _this = this, formattingSlice$ = this.changes$("formattingSlice"), isCompositeControl$ = formattingSlice$.pipe((0, 
                map.U)(function(slice) {
                    return (0, build_control_util.IW)(slice);
                }));
                this.showWarningMessage$ = (0, combineLatest.aj)([ this.changes$("suppressWarningIcon", !0), isCompositeControl$ ]).pipe((0, 
                map.U)(function(_a) {
                    return !_a[0] && !_a[1];
                })), this.warningMessage$ = formattingSlice$.pipe((0, pluck.j)("warningMessage"));
                var warningMessageTitle$ = this.warningMessage$.pipe((0, withLatestFrom.M)(this.showWarningMessage$), (0, 
                filter.h)(function(_a) {
                    return _a[1];
                }), (0, map.U)(function(_a) {
                    var warningMessage = _a[0];
                    return null == warningMessage ? void 0 : warningMessage.title;
                })), validationErrorMessage$ = this.formControl ? this.formControl.statusChanges.pipe((0, 
                map.U)(function(value) {
                    return "INVALID" === value && _this.formControl.touched ? _this.getErrorMessage(_this.formControl.errors) : void 0;
                })) : (0, of.of)(void 0);
                (0, combineLatest.aj)([ validationErrorMessage$, warningMessageTitle$ ]).pipe((0, 
                takeUntil.R)(this.onDestroy$), (0, map.U)(function(_a) {
                    var error = _a[0];
                    return null != error ? error : _a[1];
                })).subscribe(function(value) {
                    return _this.errorMessage$.next(value);
                }), this.errorMessage$.pipe((0, takeUntil.R)(this.onDestroy$), (0, filter.h)(function(value) {
                    return null != value;
                })).subscribe(function(value) {
                    return _this.screenReaderService.alertPolite(value);
                });
            }, FormattingSliceComponent.prototype.populateCompositeControls = function(control$) {
                var _this = this;
                this.fontProperties$ = control$.pipe((0, map.U)(function(control) {
                    var _a, _b, _c, _d, _e, _f;
                    if ("FontControl" === control.type) {
                        var properties = control.properties;
                        return {
                            fontProperties: {
                                fontFamily: properties.fontFamily.value,
                                fontSize: null === (_a = properties.fontSize) || void 0 === _a ? void 0 : _a.value,
                                bold: null === (_b = properties.bold) || void 0 === _b ? void 0 : _b.value,
                                italic: null === (_c = properties.italic) || void 0 === _c ? void 0 : _c.value,
                                underline: null === (_d = properties.underline) || void 0 === _d ? void 0 : _d.value
                            },
                            fontSizeFormatOption: _this.convertValidatorToFormatOption(null === (_e = properties.fontSize) || void 0 === _e ? void 0 : _e.options),
                            fontSizeDescriptor: null === (_f = properties.fontSize) || void 0 === _f ? void 0 : _f.descriptor
                        };
                    }
                })), this.marginPaddingProperties$ = control$.pipe((0, map.U)(function(control) {
                    if ("MarginPadding" === control.type) {
                        var properties = control.properties;
                        return {
                            formatOptions: {
                                left: _this.convertValidatorToFormatOption(properties.left.options),
                                right: _this.convertValidatorToFormatOption(properties.right.options),
                                top: _this.convertValidatorToFormatOption(properties.top.options),
                                bottom: _this.convertValidatorToFormatOption(properties.bottom.options)
                            },
                            value: {
                                left: properties.left.value,
                                right: properties.right.value,
                                top: properties.top.value,
                                bottom: properties.bottom.value
                            }
                        };
                    }
                }));
            }, FormattingSliceComponent.prototype.onCompositeControlValueChange = function(key, value) {
                var descriptor, control = this.formattingSlice.control;
                switch (control.type) {
                  case "FontControl":
                  case "MarginPadding":
                    descriptor = control.properties[key].descriptor;
                    break;

                  default:
                    return void debug.fF.assertNever(control);
                }
                this.onModelChanged.fn({
                    value,
                    descriptor
                });
            }, FormattingSliceComponent.prototype.unwrapSQExpr = function(exprWithMetadata) {
                if (exprWithMetadata) return _.isArray(exprWithMetadata) ? _.map(exprWithMetadata, function(item) {
                    return item.expr;
                }) : exprWithMetadata.expr;
            }, FormattingSliceComponent.prototype.convertValidatorToFormatOption = function(validator) {
                var _a, _b;
                if (validator) return {
                    unitSymbol: validator.unitSymbol,
                    maxValue: null === (_a = validator.maxValue) || void 0 === _a ? void 0 : _a.value,
                    minValue: null === (_b = validator.minValue) || void 0 === _b ? void 0 : _b.value
                };
            }, FormattingSliceComponent.prototype.setConditionalFormattingObjects = function(formattingSlice$) {
                var _this = this;
                this.conditionalFormattingObjects$ = formattingSlice$.pipe((0, map.U)(function(formattingSlice) {
                    return (0, build_control_util.IW)(formattingSlice) ? void 0 : formattingSlice.conditionalFormattingObjects;
                })), this.hasDynamicExpression$ = this.conditionalFormattingObjects$.pipe((0, pluck.j)("isSet")), 
                this.onConditionalFormattingButtonClicked = this.createEventAdapter(), this.onConditionalFormattingButtonClicked.$.pipe((0, 
                exhaustMap.z)(function(_a) {
                    return (0, from.D)(_this.showCondtitionalFormattingDialog(_a[1], _a[0]));
                })).subscribe(function(_a) {
                    var conditionalFormattingSaveValue = _a[1];
                    conditionalFormattingSaveValue && conditionalFormattingSaveValue.shouldSave && _this.onValueChange(conditionalFormattingSaveValue.value, _a[0]);
                });
            }, FormattingSliceComponent.prototype.showCondtitionalFormattingDialog = function(descriptor, conditionalFormattingButtonObjects) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _a = [ descriptor ], [ 4, conditionalFormattingButtonObjects.showDialog() ];

                          case 1:
                            return [ 2, _a.concat([ _b.sent() ]) ];
                        }
                    });
                });
            }, FormattingSliceComponent.prototype.setLinkObjects = function() {
                var _this = this;
                this.onLinkClicked = this.createEventAdapter(), this.onLinkClicked.$.pipe((0, exhaustMap.z)(function(_a) {
                    return (0, from.D)(_this.linkCallback(_a[1], _a[0]));
                })).subscribe(function(_a) {
                    var callbackValue = _a[1];
                    void 0 !== callbackValue && _this.onValueChange(callbackValue, _a[0]);
                });
            }, FormattingSliceComponent.prototype.linkCallback = function(descriptor, callbackFn) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _a = [ descriptor ], [ 4, callbackFn() ];

                          case 1:
                            return [ 2, _a.concat([ _b.sent() ]) ];
                        }
                    });
                });
            }, FormattingSliceComponent.prototype.setModelChangedEventAdaptor = function() {
                var _this = this;
                this.onModelChanged = this.createEventAdapter(), this.onModelChanged.$.pipe((0, 
                withLatestFrom.M)(this.sliceUid$), (0, map.U)(function(_a) {
                    return _a[0];
                }), (0, filter.h)(function(properties) {
                    return !properties.validationErrors;
                })).pipe((0, withLatestFrom.M)(this.type$), (0, debounce.D)(function(_a) {
                    switch (_a[1]) {
                      case "TextArea":
                      case "TextInput":
                      case "NumUpDown":
                      case "Slider":
                      case "FontControl":
                      case "MarginPadding":
                        return (0, timer.H)(500);

                      default:
                        return empty.E;
                    }
                })).subscribe(function(_a) {
                    var properties = _a[0];
                    return _this.onValueChange(properties.value, properties.descriptor);
                });
            }, FormattingSliceComponent.prototype.onValueChange = function(value, descriptor) {
                var saveObjects = this.getFormattingSliceSaveObject(value, descriptor);
                this.valueChanged.emit(saveObjects);
            }, FormattingSliceComponent.prototype.getFormattingSliceSaveObject = function(value, descriptor) {
                var _a, _b, _c, _d, _e, singleChange = {
                    objectName: descriptor.objectName,
                    uid: this.formattingSlice.uid,
                    hasDynamicExpressionSupport: this.formattingSlice.conditionalFormattingObjects && this.formattingSlice.conditionalFormattingObjects.isSet,
                    propertySlice: {
                        name: descriptor.propertyName,
                        value,
                        type: descriptor.type,
                        selector: descriptor.selector,
                        altConstantValueSelector: descriptor.altConstantValueSelector
                    },
                    formattingSource: this.formattingSlice.originSource,
                    visualUpdateSource: 0,
                    conditionalFormatting: !!this.formattingSlice.conditionalFormattingObjects
                }, control = this.formattingSlice.control;
                if ("Dropdown" === control.type) singleChange.controlValueUpdater = function(originalState) {
                    var newStateValue = _.find(originalState.properties.items, function(item) {
                        return item.value === singleChange.propertySlice.value;
                    });
                    originalState.properties.value = newStateValue;
                }; else if ("FontControl" === control.type || "MarginPadding" === control.type) singleChange.controlValueUpdater = function(originalState) {
                    var matchKey = _.find(Object.keys(originalState.properties), function(key) {
                        return _.isEqual(originalState.properties[key].descriptor, descriptor);
                    });
                    originalState.properties[matchKey].value = singleChange.propertySlice.value;
                }; else if ("FieldPicker" === control.type) {
                    var fieldPickerValue = value;
                    if (control.properties.splitValuesIntoInstances && _.isArray(null == fieldPickerValue ? void 0 : fieldPickerValue.newExpr)) {
                        var updateInfo = fieldPickerValue.fromUpdate;
                        switch (updateInfo.type) {
                          case "add":
                            var position_1 = updateInfo.added.position, order_1 = "end" === position_1 ? fieldPickerValue.newExpr.length - 1 : _.first(position_1), exprWithMetadata_1 = fieldPickerValue.newExpr[order_1];
                            singleChange.propertySlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, singleChange.propertySlice), {
                                value: exprWithMetadata_1.expr,
                                selector: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor.selector), {
                                    id: null !== (_c = exprWithMetadata_1.metadata) && void 0 !== _c ? _c : "field-" + generateGuid(),
                                    order: order_1
                                })
                            });
                            break;

                          case "replace":
                            var position = (_a = updateInfo.replaced).position, originalMetadata = _a.originalMetadata, order = _.first(position), exprWithMetadata = fieldPickerValue.newExpr[order], metadata = null !== (_d = exprWithMetadata.metadata) && void 0 !== _d ? _d : originalMetadata;
                            debug.fF.assertValue(metadata, "expected to find metadata if replacing (will be on `newExpr[order]` if updating aggregation type, will be in `originalMetadata` if replacing field"), 
                            singleChange.propertySlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, singleChange.propertySlice), {
                                value: exprWithMetadata.expr,
                                selector: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor.selector), {
                                    id: null != metadata ? metadata : "field-".concat(generateGuid()),
                                    order
                                })
                            });
                            break;

                          case "delete":
                            var position_2 = (_b = updateInfo.deleted).position, metadata_1 = _b.metadata, order_2 = _.first(position_2);
                            singleChange.propertySlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, singleChange.propertySlice), {
                                value: void 0,
                                selector: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor.selector), {
                                    id: metadata_1,
                                    order: order_2
                                })
                            });
                            break;

                          case "initialize":
                          case "rename":
                            break;

                          case "reorder":
                            var fromPosition = _.first(updateInfo.reordered.fromPosition), toPosition = _.first(updateInfo.reordered.toPosition), exprWithMetadata_2 = fieldPickerValue.newExpr[fromPosition > toPosition ? toPosition : toPosition - 1];
                            debug.fF.assertValue(exprWithMetadata_2, "reordered field expected to be found"), 
                            singleChange.propertySlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, singleChange.propertySlice), {
                                value: exprWithMetadata_2.expr,
                                selector: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor.selector), {
                                    id: null !== (_e = exprWithMetadata_2.metadata) && void 0 !== _e ? _e : "field-" + generateGuid(),
                                    order: toPosition
                                })
                            });
                            break;

                          default:
                            debug.fF.assertNever(updateInfo);
                        }
                    }
                }
                return {
                    changes: [ singleChange ]
                };
            }, FormattingSliceComponent.prototype.getErrorMessage = function(errors) {
                var errorType = +Object.keys(errors)[0];
                switch (errorType) {
                  case 0:
                    return this.localizationService.format("DurationPicker_Error_Below_Minimum", errors[errorType].thresholdValue);

                  case 1:
                    return this.localizationService.format("DurationPicker_Error_Above_Maximum", errors[errorType].thresholdValue);

                  case 2:
                    return this.localizationService.get("Value_Required");

                  case 3:
                  case 4:
                    return this.localizationService.get("Value_Invalid");

                  case 5:
                    return this.localizationService.format("InputDialog_StringTooLong", errors[errorType]);

                  default:
                    return "";
                }
            }, FormattingSliceComponent.\u0275fac = function(t) {
                return new (t || FormattingSliceComponent)(core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](rtl_service.q), core["\u0275\u0275directiveInject"](screen_reader_service.g));
            }, FormattingSliceComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormattingSliceComponent,
                selectors: [ [ "formatting-slice" ] ],
                viewQuery: function(rf, ctx) {
                    var _t;
                    1 & rf && core["\u0275\u0275viewQuery"](formatting_slice_component_c0, 5), 2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.formControl = _t.first);
                },
                inputs: {
                    searchString: "searchString",
                    formattingSlice: "formattingSlice",
                    indicatorEnabled: "indicatorEnabled",
                    suppressWarningIcon: "suppressWarningIcon",
                    ariaLabelledbyPrefix: "ariaLabelledbyPrefix"
                },
                outputs: {
                    valueChanged: "valueChanged"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ "class", "formatting-slice", "data-automation-type", "formatting-slice", 4, "ngIf" ], [ "data-automation-type", "formatting-slice", 1, "formatting-slice" ], [ 1, "info-and-control", 3, "ngClass" ], [ "class", "formatting-slice-tooltip-description", 4, "ngIf" ], [ "class", "nameAndInfoIconContainer", 4, "ngIf" ], [ 3, "ngSwitch" ], [ "pbiTooltipShowDelay", "500", 1, "formatting-slice-content", 3, "pbiTooltip" ], [ 4, "ngIf" ], [ "class", "error-message", 4, "ngIf" ], [ "conditionalFormatting", "" ], [ 1, "formatting-slice-tooltip-description" ], [ 1, "nameAndInfoIconContainer" ], [ "class", "displayName", "pbiTooltipShowDelay", "500", 3, "text", "search", "pbiTooltip", "disabled", 4, "ngIf" ], [ "name", "info", "size", "mini", 3, "pbiTooltip", 4, "ngIf" ], [ "class", "change-indicator", 3, "ngClass", "type", "showChangeIndicator", 4, "ngIf" ], [ "pbiTooltipShowDelay", "500", 1, "displayName", 3, "text", "search", "pbiTooltip" ], [ "name", "info", "size", "mini", 3, "pbiTooltip" ], [ 1, "change-indicator", 3, "ngClass", "type", "showChangeIndicator" ], [ 3, "aria-labelledby", "ngModel", "disabled", "mode", "supportsNoSelection", "ngModelChange", 4, "ngSwitchCase" ], [ "data-testid", "font-theme-color-input", "class", "control-width", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "labelId", "ariaDescribedby", "ngModel", "disabled", "defaultColor", "isNoFillItemSupported", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ "class", "control-width", 3, "ariaLabelledby", "ariaDescribedby", "disabled", "initialExpr", "targetMeasure", "validators", "focusChanged", "onValueChanged", 4, "ngSwitchCase" ], [ "class", "control-width", 3, "ariaLabelledby", "ariaDescribedby", "initialExpr", "allowClear", "validators", "withFieldList", "allowMultipleValues", "allowReorderItems", "disallowReplaceItems", "getDropExprStrategy", "disabled", "disableAutoScroll", "onExprChange", 4, "ngSwitchCase" ], [ 4, "ngSwitchCase" ], [ "class", "control-width", "compact", "", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "options", "aria-labelledby", "aria-describedby", "ngModel", "disabled", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ "class", "control-width", 3, "aria-labelledby", "aria-describedby", "ngModel", "isDisabled", "ngModelChange", 4, "ngSwitchCase" ], [ "class", "control-width", "fileType", "Image", 3, "ariaLabelledby", "disabled", "ngModel", "imageScalingProperties", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ "class", "control-width", 3, "colors", 4, "ngSwitchCase" ], [ "class", "control-width", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "ariaLabelledByForInput", "ariaDescribedby", "id", "disabled", "ngModel", "pbiMin", "pbiMax", "resetValidValueOnBlur", "useDateFormatAsPlaceholder", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ "class", "control-width", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "ariaLabelledby", "ariaDescribedby", "disabled", "type", "ngModel", "isAzMapReferenceSelector", "enableMultipleDataFormats", "keepIconURLs", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "labelId", "ngModel", "validators", "disabled", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ 3, "ngModel", "disabled", "options", "sliceLabel", "ngModelChange", 4, "ngSwitchCase" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", "name", "slider", 3, "labelId", "ariaDescribedby", "ngModel", "disabled", "options", "pbiMin", "pbiMax", "pbiRequired", "pbiTooltip", "inputFocusChange", "ngModelChange", 4, "ngSwitchCase" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "ariaLabelledby", "ariaDescribedby", "ngModel", "disabled", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ "class", "control-width", "compact", "", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "ariaLabelledby", "ariaDescribedby", "ngModel", "disabled", "pbiTooltip", "ngModelChange", 4, "ngSwitchCase" ], [ "data-testid", "formatting-slice-text-input", "type", "text", "class", "control-width pbi-small-text-input", "name", "textInput", "pbiTooltipMouseDisabled", "true", 3, "aria-describedby", "ngModel", "placeholder", "pbiRequired", "pbiDashArray", "pbiPattern", "pbiMaxLength", "pbiTooltip", "ngModelChange", "focus", "blur", 4, "ngSwitchCase" ], [ "type", "text", "class", "control-width pbi-text-textarea", "name", "textArea", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "aria-describedby", "ngModel", "placeholder", "pbiRequired", "pbiPattern", "pbiTooltip", "ngModelChange", "focus", "blur", 4, "ngSwitchCase" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "ariaLabelledby", "ariaDescribedby", "text", "noTrim", "disabled", "pbiTooltip", 4, "ngSwitchCase" ], [ 3, "aria-labelledby", "ngModel", "disabled", "mode", "supportsNoSelection", "ngModelChange" ], [ "data-testid", "font-theme-color-input", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 1, "control-width", 3, "labelId", "ariaDescribedby", "ngModel", "disabled", "defaultColor", "isNoFillItemSupported", "pbiTooltip", "ngModelChange" ], [ 1, "control-width", 3, "ariaLabelledby", "ariaDescribedby", "disabled", "initialExpr", "targetMeasure", "validators", "focusChanged", "onValueChanged" ], [ 1, "control-width", 3, "ariaLabelledby", "ariaDescribedby", "initialExpr", "allowClear", "validators", "withFieldList", "allowMultipleValues", "allowReorderItems", "disallowReplaceItems", "getDropExprStrategy", "disabled", "disableAutoScroll", "onExprChange" ], [ 1, "control-width", 3, "ariaLabelledby", "ariaDescribedby", "fontProperties", "fontSizeFormatOption", "fontSizeDescriptor", "isDisabled", "warning", "fontSizeFocusChanged", "valueChanged" ], [ "compact", "", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 1, "control-width", 3, "options", "aria-labelledby", "aria-describedby", "ngModel", "disabled", "pbiTooltip", "ngModelChange" ], [ 1, "dropdown-container" ], [ "size", "small", 3, "name", 4, "ngIf" ], [ 3, "value", "ariaLabel", 4, "ngFor", "ngForOf" ], [ "size", "small", 3, "name" ], [ 3, "value", "ariaLabel" ], [ 1, "control-width", 3, "aria-labelledby", "aria-describedby", "ngModel", "isDisabled", "ngModelChange" ], [ 3, "formatOptions", "value", "isDisabled", "focusChanged", "valueChanged" ], [ "fileType", "Image", 1, "control-width", 3, "ariaLabelledby", "disabled", "ngModel", "imageScalingProperties", "pbiTooltip", "ngModelChange" ], [ "formControl", "ngModel" ], [ 1, "control-width", 3, "colors" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 1, "control-width", 3, "ariaLabelledByForInput", "ariaDescribedby", "id", "disabled", "ngModel", "pbiMin", "pbiMax", "resetValidValueOnBlur", "useDateFormatAsPlaceholder", "pbiTooltip", "ngModelChange" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 1, "control-width", 3, "ariaLabelledby", "ariaDescribedby", "disabled", "type", "ngModel", "isAzMapReferenceSelector", "enableMultipleDataFormats", "keepIconURLs", "pbiTooltip", "ngModelChange" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", "name", "numUpDown", 1, "control-width", 3, "ngClass", "labelId", "ariaDescribedby", "ngModel", "disabled", "options", "pbiMin", "pbiMax", "pbiRequired", "pbiTooltip", "placeholderText", "unitSymbolAfterInput", "focusChange", "ngModelChange" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "labelId", "ngModel", "validators", "disabled", "pbiTooltip", "ngModelChange" ], [ 3, "ngModel", "disabled", "options", "sliceLabel", "ngModelChange" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", "name", "slider", 3, "labelId", "ariaDescribedby", "ngModel", "disabled", "options", "pbiMin", "pbiMax", "pbiRequired", "pbiTooltip", "inputFocusChange", "ngModelChange" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "ariaLabelledby", "ariaDescribedby", "ngModel", "disabled", "pbiTooltip", "ngModelChange" ], [ "compact", "", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 1, "control-width", 3, "ariaLabelledby", "ariaDescribedby", "ngModel", "disabled", "pbiTooltip", "ngModelChange" ], [ "class", "link-warning", "name", "warning", "size", "small", 4, "ngIf" ], [ "pbiTooltipMouseDisabled", "true", 1, "link-button", 3, "ngClass", "tabindex", "pbiTooltip", "click" ], [ "name", "warning", "size", "small", 1, "link-warning" ], [ "data-testid", "formatting-slice-text-input", "type", "text", "name", "textInput", "pbiTooltipMouseDisabled", "true", 1, "control-width", "pbi-small-text-input", 3, "aria-describedby", "ngModel", "placeholder", "pbiRequired", "pbiDashArray", "pbiPattern", "pbiMaxLength", "pbiTooltip", "ngModelChange", "focus", "blur" ], [ "type", "text", "name", "textArea", "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 1, "control-width", "pbi-text-textarea", 3, "aria-describedby", "ngModel", "placeholder", "pbiRequired", "pbiPattern", "pbiTooltip", "ngModelChange", "focus", "blur" ], [ "pbiTooltipCheckChildren", "true", "pbiTooltipMouseDisabled", "true", 3, "ariaLabelledby", "ariaDescribedby", "text", "pbiTooltip" ], [ 4, "ngTemplateOutlet" ], [ 1, "error-message" ], [ 1, "icons-container" ], [ "id", "condition-formatting-id", 1, "formatting-slice-tooltip-description", 3, "localize" ], [ "data-testid", "conditional-formatting-indicator", "pbiTooltipProgramDisabled", "true", 1, "conditional-formatting-indicator", 3, "ngClass", "disabled", "pbiTooltip", "aria-describedby", "click" ], [ "name", "variable", "size", "small" ], [ "tooltipTemplateRef", "" ], [ "class", "conditional-formatting-revert-indicator", 3, "pbiTooltip", "disabled", "click", 4, "ngIf" ], [ 1, "conditional-formatting-tooltip-title", 3, "textContent" ], [ 3, "textContent" ], [ 1, "conditional-formatting-revert-indicator", 3, "pbiTooltip", "disabled", "click" ], [ "name", "eraser", "size", "small" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, FormattingSliceComponent_div_0_Template, 22, 30, "div", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.properties$));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, common.NgTemplateOutlet, common.NgSwitch, common.NgSwitchCase, PbiMaxValidator, PbiMinValidator, PbiRequired, PbiPattern, PbiDashArrayValidator, PbiMaxLengthValidator, duration_picker_component.w, field_picker_modern_lazy_component.m, font_picker_component.w, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, localize_directive.X, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_highlight_component._, pbi_icon_component._, pbi_spin_button_component.a, pbi_tooltip_directive.V, slider_component.P, theme_color_input_component.oO, pbi_date_picker_component.N, AlignmentGroupComponent, ErrorRangeComponent, FontControlComponent, FormatPaneFlagsControlComponent, GradientBarComponent, ImageUploadComponent, ListEditorComponent, MarginPaddingComponent, PropertyChangeIndicatorComponent, ReadOnlyTextComponent, ShapeMapSelectorComponent, ToggleSwitchModernComponent, common.AsyncPipe ],
                styles: [ '[_nghost-%COMP%]{display:block}.dropdown-container[_ngcontent-%COMP%]{display:flex;align-items:center;width:100%}[_ngcontent-%COMP%]:not(.rtl)   .dropdown-container[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{margin-right:4px}.rtl[_ngcontent-%COMP%]   .dropdown-container[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{margin-left:4px}.dropdown-container[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.formatting-slice[_ngcontent-%COMP%]{--conditional-formatting-button-background-color: var(--fluent-theme-white-color, #FFF);--conditional-formatting-button-hover-background-color: var(--gray-40, #E1DFDD);--conditional-formatting-button-active-border-color: var(--gray-130, #605E5C);--conditional-formatting-button-border-background-color: var(--gray-110, #8A8886);--conditional-formatting-button-disabled-background-color: var(--gray-20, #F3F2F1);--conditional-formatting-button-border-disabled-color: var(--gray-60, #C8C6C4)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]{display:flex;flex-direction:column}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   pbi-highlight[_ngcontent-%COMP%]{margin-bottom:4px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);white-space:nowrap;text-overflow:ellipsis;overflow:hidden;margin-right:4px}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   pbi-highlight.disabled[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:space-between;flex-grow:1;min-width:0}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{margin:0 0 2px 4px}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{margin:0 4px 2px 0}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-left:auto}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-right:auto}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-right:48px}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-left:48px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%]{margin-right:16px}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .nameAndInfoIconContainer[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%]{margin-left:16px}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .fixed-width[_ngcontent-%COMP%], .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .control-width[_ngcontent-%COMP%]{width:100%;flex:1}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.ColorPicker[_ngcontent-%COMP%]   .control-width[_ngcontent-%COMP%]{flex:none;width:52px}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.DatePicker[_ngcontent-%COMP%]   pbi-date-picker[_ngcontent-%COMP%]{background-color:var(--fluent-theme-white-color);border-color:var(--gray-110)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.FieldPicker[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif)!important;font-size:var(--sm-font-size, 12px)!important;font-weight:var(--font-weight-regular, 400)!important}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.ListEditor[_ngcontent-%COMP%]   .displayName[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-semi-bold, 600)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.NumUpDown[_ngcontent-%COMP%]   .control-width[_ngcontent-%COMP%]{flex:none}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.NumUpDown[_ngcontent-%COMP%]   .control-width.unitSymbolInside[_ngcontent-%COMP%]{width:70px}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.Slider[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]   slider[_ngcontent-%COMP%]{flex-grow:1}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.TextArea[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);resize:vertical;min-height:80px}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.TextArea[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]   textarea.ng-invalid.ng-dirty[_ngcontent-%COMP%]{border-color:var(--fluent-theme-error-dark-color, #A80000)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.TextInput[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);height:24px}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.TextInput[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]   input.ng-invalid.ng-dirty[_ngcontent-%COMP%]{border-color:var(--fluent-theme-error-dark-color, #A80000)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.ToggleSwitch[_ngcontent-%COMP%]{flex-direction:row;justify-content:space-between;width:100%}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.ToggleSwitch[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]{flex:none}.formatting-slice[_ngcontent-%COMP%]   .info-and-control.ToggleSwitch[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]   toggle-switch-modern[_ngcontent-%COMP%]{width:32px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control.EmptyControl[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control.EmptyControl[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%]{margin-left:0}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control.EmptyControl[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control.EmptyControl[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%]{margin-right:0}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   gradient-bar[_ngcontent-%COMP%]{height:20px}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .formatting-slice-content[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:nowrap;flex-grow:1}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .break[_ngcontent-%COMP%]{display:none}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .link-button[_ngcontent-%COMP%]{cursor:pointer;color:var(--fluent-theme-link-color, #0078D4);font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif)}html[data-focus-source="key"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .link-button[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .link-button[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .link-button[_ngcontent-%COMP%]:active{color:var(--fluent-theme-link-darker-alt-color, #106EBE)}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .link-button[_ngcontent-%COMP%]:hover:not(.disabled){text-decoration:underline}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .link-button.disabled[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D);cursor:default}.formatting-slice[_ngcontent-%COMP%]   .info-and-control[_ngcontent-%COMP%]   .link-warning[_ngcontent-%COMP%]{color:var(--fluent-theme-error-dark-color, #A80000);padding-right:6px}  [data-legacy-theming=false] .formatting-slice{--conditional-formatting-button-background-color: var(--colorNeutralBackground1);--conditional-formatting-button-hover-background-color: var(--colorNeutralBackground1Hover);--conditional-formatting-button-active-border-color: var(--colorNeutralStroke1Hover);--conditional-formatting-button-disabled-background-color: var(--colorNeutralBackgroundDisabled);--conditional-formatting-button-border-background-color: var(--colorNeutralStroke1);--conditional-formatting-button-border-disabled-color: var(--colorNeutralStrokeDisabled)}.formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%], .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%]{cursor:pointer;border:1px solid var(--conditional-formatting-button-border-background-color);border-radius:2px;height:24px;width:24px;background:var(--conditional-formatting-button-background-color)}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%]{margin-left:4px}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%], html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%]{margin-right:4px}.formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator.button-error[_ngcontent-%COMP%], .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator.button-error[_ngcontent-%COMP%]{border:1px solid var(--fluent-theme-error-dark-color, #A80000)}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator.control-width[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator.control-width[_ngcontent-%COMP%], html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator.control-width[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator.control-width[_ngcontent-%COMP%]{margin-left:0}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator.control-width[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator.control-width[_ngcontent-%COMP%], html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator.control-width[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator.control-width[_ngcontent-%COMP%]{margin-right:0}.formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%], .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{position:relative;padding:1px;top:1px}html[data-focus-source="key"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%]:focus   pbi-icon[_ngcontent-%COMP%], html[data-focus-source="key"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%]:focus   pbi-icon[_ngcontent-%COMP%], html[data-focus-source="key"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%]:focus   pbi-icon[_ngcontent-%COMP%], html[data-focus-source="key"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%]:focus   pbi-icon[_ngcontent-%COMP%]{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[disabled][_ngcontent-%COMP%], .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[disabled][_ngcontent-%COMP%]{background-color:var(--conditional-formatting-button-disabled-background-color);border-color:var(--conditional-formatting-button-border-disabled-color);pointer-events:none;color:var(--gray-80, #B3B0AD)}.formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator.selected[_ngcontent-%COMP%], .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator.selected[_ngcontent-%COMP%]{background:var(--gray-50, #D2D0CE)}.formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-indicator[_ngcontent-%COMP%]:hover:not(.selected):not(disabled), .formatting-slice[_ngcontent-%COMP%]   .conditional-formatting-revert-indicator[_ngcontent-%COMP%]:hover:not(.selected):not(disabled){background:var(--conditional-formatting-button-hover-background-color);border-color:var(--conditional-formatting-button-active-border-color)}.formatting-slice[_ngcontent-%COMP%]   warning[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   warning[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   warning[_ngcontent-%COMP%]{margin-left:4px}html[dir="rtl"][_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   warning[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-slice[_ngcontent-%COMP%]   warning[_ngcontent-%COMP%]{margin-right:4px}.formatting-slice[_ngcontent-%COMP%]   .error-message[_ngcontent-%COMP%]{color:var(--fluent-theme-error-dark-color, #A80000)}.formatting-slice[_ngcontent-%COMP%]   .formatting-slice-tooltip-description[_ngcontent-%COMP%]{display:none}.conditional-formatting-tooltip-title[_ngcontent-%COMP%]{font-weight:var(--font-weight-bold, 700)}' ],
                changeDetection: 0
            }), FormattingSliceComponent;
        }(rx_component.w);
        function FormattingGroupComponent_p_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "p", 4), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var tooltipDescription_r3 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275attribute"]("id", core["\u0275\u0275pipeBind1"](1, 2, ctx_r0.tooltipDescriptionUid$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", tooltipDescription_r3, "");
            }
        }
        var formatting_group_component_c0 = function(a0) {
            return [ a0 ];
        };
        function FormattingGroupComponent_div_3_i_10_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "i", 12), core["\u0275\u0275pipe"](1, "async")), 
            2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](3, formatting_group_component_c0, core["\u0275\u0275pipeBind1"](1, 1, ctx_r4.expanded$) ? "pbi-glyph-chevrondownmedium" : "pbi-glyph-arrowright"));
            }
        }
        var formatting_group_component_c1 = function(a0) {
            return {
                "with-toggle": a0
            };
        };
        function FormattingGroupComponent_div_3_property_change_indicator_14_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "property-change-indicator", 13), 2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](3, formatting_group_component_c1, ctx_r5.formattingGroup.topLevelToggle))("type", "group")("showChangeIndicator", ctx_r5.formattingGroup.showChangeIndicator);
            }
        }
        function FormattingGroupComponent_div_3_formatting_slice_15_Template(rf, ctx) {
            if (1 & rf) {
                var _r11 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "formatting-slice", 14), core["\u0275\u0275listener"]("click", function($event) {
                    return $event.stopPropagation();
                })("keyup.enter", function($event) {
                    return $event.stopPropagation();
                })("keyup.space", function($event) {
                    return $event.stopPropagation();
                })("valueChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r11);
                    var ctx_r10 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r10.onTopLevelToggleValueChanged($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("formattingSlice", ctx_r6.formattingGroup.topLevelToggle)("ariaLabelledbyPrefix", core["\u0275\u0275pipeBind1"](1, 3, ctx_r6.accessibleLabelId$))("suppressWarningIcon", !0);
            }
        }
        function FormattingGroupComponent_div_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r13 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 5), core["\u0275\u0275listener"]("accessible-click", function($event) {
                    core["\u0275\u0275restoreView"](_r13);
                    var ctx_r12 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r12.formattingGroup.collapsible && ctx_r12.toggleButton.fn($event));
                })("keydown", function($event) {
                    core["\u0275\u0275restoreView"](_r13);
                    var ctx_r14 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r14.toggleButtonKeyboard.fn($event));
                }), core["\u0275\u0275elementStart"](1, "button", 6), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275pipe"](5, "async"), 
                core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275pipe"](8, "async"), 
                core["\u0275\u0275elementStart"](9, "div", 7), core["\u0275\u0275template"](10, FormattingGroupComponent_div_3_i_10_Template, 2, 5, "i", 8), 
                core["\u0275\u0275element"](11, "pbi-highlight", 9), core["\u0275\u0275pipe"](12, "async"), 
                core["\u0275\u0275pipe"](13, "async"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](14, FormattingGroupComponent_div_3_property_change_indicator_14_Template, 1, 5, "property-change-indicator", 10), 
                core["\u0275\u0275template"](15, FormattingGroupComponent_div_3_formatting_slice_15_Template, 2, 5, "formatting-slice", 11), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("disabled-group", core["\u0275\u0275pipeBind1"](2, 18, ctx_r1.disabled$))("not-collapsible", !core["\u0275\u0275pipeBind1"](3, 20, ctx_r1.disabled$) && !ctx_r1.formattingGroup.collapsible), 
                core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](5, 24, ctx_r1.tooltipDescription$))("aria-describedby", core["\u0275\u0275pipeBind1"](7, 28, ctx_r1.tooltipDescriptionUid$))("aria-label", core["\u0275\u0275pipeBind1"](8, 30, ctx_r1.displayName$)), 
                core["\u0275\u0275attribute"]("disabled", ctx_r1.formattingGroup.disableInteractivity || ctx_r1.formattingGroup.disabled || !ctx_r1.formattingGroup.collapsible || null)("aria-disabled", core["\u0275\u0275pipeBind1"](4, 22, ctx_r1.disabled$))("role", ctx_r1.formattingGroup.collapsible ? "button" : "none")("tabIndex", ctx_r1.formattingGroup.collapsible ? 0 : -1)("aria-expanded", core["\u0275\u0275pipeBind1"](6, 26, ctx_r1.expanded$)), 
                core["\u0275\u0275advance"](9), core["\u0275\u0275property"]("ngIf", ctx_r1.formattingGroup.collapsible), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("text", core["\u0275\u0275pipeBind1"](12, 32, ctx_r1.displayName$))("search", ctx_r1.searchString), 
                core["\u0275\u0275attribute"]("id", core["\u0275\u0275pipeBind1"](13, 34, ctx_r1.accessibleLabelId$)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx_r1.indicatorEnabled), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r1.formattingGroup.topLevelToggle);
            }
        }
        function FormattingGroupComponent_ng_container_4_ng_container_1_div_1_ng_container_1_formatting_slice_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r23 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "formatting-slice", 20), core["\u0275\u0275listener"]("valueChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r23);
                    var ctx_r22 = core["\u0275\u0275nextContext"](5);
                    return core["\u0275\u0275resetView"](ctx_r22.onSliceValueChanged($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var tmp_3_0, formattingSlice_r20 = core["\u0275\u0275nextContext"]().$implicit, ctx_r21 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("indicatorEnabled", ctx_r21.indicatorEnabled)("searchString", ctx_r21.searchString)("formattingSlice", formattingSlice_r20)("ariaLabelledbyPrefix", null !== (tmp_3_0 = core["\u0275\u0275pipeBind1"](1, 4, ctx_r21.accessibleLabelId$)) && void 0 !== tmp_3_0 ? tmp_3_0 : ctx_r21.formattingCardLabelUid);
            }
        }
        function FormattingGroupComponent_ng_container_4_ng_container_1_div_1_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingGroupComponent_ng_container_4_ng_container_1_div_1_ng_container_1_formatting_slice_1_Template, 2, 6, "formatting-slice", 19), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var formattingSlice_r20 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !formattingSlice_r20.hidden);
            }
        }
        function FormattingGroupComponent_ng_container_4_ng_container_1_div_1_button_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r26 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 21), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r26);
                    var ctx_r25 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r25.applyButtonClicked.fn());
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r19 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("disabled", !core["\u0275\u0275pipeBind1"](1, 2, ctx_r19.applyButtonEnabled$) || null)("localize", "Apply");
            }
        }
        function FormattingGroupComponent_ng_container_4_ng_container_1_div_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r28 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 16), core["\u0275\u0275listener"]("keydown.escape", function($event) {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r27 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r27.onEscKey.fn($event));
                }), core["\u0275\u0275template"](1, FormattingGroupComponent_ng_container_4_ng_container_1_div_1_ng_container_1_Template, 2, 1, "ng-container", 17), 
                core["\u0275\u0275template"](2, FormattingGroupComponent_ng_container_4_ng_container_1_div_1_button_2_Template, 2, 4, "button", 18), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var slices_r15 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r17 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", slices_r15)("ngForTrackBy", ctx_r17.sliceUid), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](3, 3, ctx_r17.showApplyButton$));
            }
        }
        function FormattingGroupComponent_ng_container_4_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingGroupComponent_ng_container_4_ng_container_1_div_1_Template, 4, 5, "div", 15), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r16 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r16.expanded$) || !ctx_r16.formattingGroup.collapsible);
            }
        }
        function FormattingGroupComponent_ng_container_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingGroupComponent_ng_container_4_ng_container_1_Template, 3, 3, "ng-container", 3), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var slices_r15 = ctx.ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", 0 !== slices_r15.length);
            }
        }
        var formatting_group_component_c2 = function(a0) {
            return {
                "no-display-name": a0
            };
        }, formatting_group_component_incrementalId = 0, FormattingGroupComponent = function(_super) {
            function FormattingGroupComponent(featureSwitchService, formattingPaneComponentStore, highContrastCssGenerationService) {
                var _this = _super.call(this) || this;
                return _this.featureSwitchService = featureSwitchService, _this.formattingPaneComponentStore = formattingPaneComponentStore, 
                _this.highContrastCssGenerationService = highContrastCssGenerationService, _this.onGroupToggled = new core.EventEmitter, 
                _this.valueChanged = new core.EventEmitter, _this.bufferedSliceChangesDestroy$ = new Subject.xQ, 
                _this.featureSwitchService.featureSwitches.onObjectFormatPaneUid && (++formatting_group_component_incrementalId, 
                _this.accessibleLabelId = "".concat("formatting-group", "-").concat(formatting_group_component_incrementalId)), 
                _this;
            }
            return (0, tslib_es6.__extends)(FormattingGroupComponent, _super), FormattingGroupComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.formattingGroupChanges$ = this.changes$("formattingGroup"), this.slices$ = this.formattingGroupChanges$.pipe((0, 
                takeUntil.R)(this.onDestroy$), (0, switchMap.w)(function(formattingGroup) {
                    return (0, combineLatest.aj)(formattingGroup.sliceIds.map(function(sliceId) {
                        return _this.formattingPaneComponentStore.selectSlice(sliceId.uid, sliceId.selector);
                    }));
                }), (0, map.U)(function(slices) {
                    return slices.filter(function(slice) {
                        return !!slice;
                    });
                }));
                var description$ = this.formattingGroupChanges$.pipe((0, pluck.j)("description")), disabledReason$ = this.formattingGroupChanges$.pipe((0, 
                pluck.j)("disabledReason"));
                this.disabled$ = this.formattingGroupChanges$.pipe((0, pluck.j)("disabled")), this.displayName$ = this.formattingGroupChanges$.pipe((0, 
                pluck.j)("displayName")), this.accessibleLabelId$ = this.formattingGroupChanges$.pipe((0, 
                map.U)(function(formattingGroup) {
                    if (!formattingGroup.suppressDisplayName && !_.isEmpty(formattingGroup.displayName)) return _this.featureSwitchService.featureSwitches.onObjectFormatPaneUid ? _this.accessibleLabelId : formattingGroup.uid;
                })), this.tooltipDescription$ = this.disabled$.pipe((0, switchMap.w)(function(disabled) {
                    return disabled ? disabledReason$ : description$;
                }));
                var uid$ = this.formattingGroupChanges$.pipe((0, pluck.j)("uid"));
                this.tooltipDescriptionUid$ = (0, iif.s)(function() {
                    return _this.featureSwitchService.featureSwitches.onObjectFormatPaneUid;
                }, this.accessibleLabelId$, uid$).pipe((0, map.U)(function(label) {
                    return "".concat(label, "-tooltip");
                }));
                var toggleState$ = this.formattingGroupChanges$.pipe((0, pluck.j)("toggleState"));
                this.expanded$ = toggleState$.pipe((0, map.U)(function(toggleState) {
                    return isExpanded(toggleState, "" !== _this.searchString);
                })), this.toggleButton = this.createEventAdapter(), this.toggleButton.$.pipe((0, 
                withLatestFrom.M)(toggleState$, this.disabled$)).subscribe(function(_a) {
                    var currentToggleState = _a[1];
                    return _a[2] ? _a[0].stopPropagation() : _this.onGroupToggled.emit({
                        source: 0,
                        toggleState: toggleToggleState(currentToggleState, "" !== _this.searchString)
                    });
                }), this.toggleButtonKeyboard = this.createEventAdapter(), this.toggleButtonKeyboard.$.subscribe(function(event) {
                    formattingPaneKeyboardNavHandler(event, _this.toggleButton.fn, function(e) {
                        return e.classList.contains("focus-formatting-groups");
                    }, function(sibling) {
                        return sibling.hasAttribute("focus-formatting-group-button");
                    });
                }), this.onEscKey = this.createEventAdapter(), this.onEscKey.$.subscribe(function(event) {
                    formattingPaneEscKeyHandler(event, function(e) {
                        return "true" === e.getAttribute("focus-formatting-group") || e.hasAttribute("focus-formatting-card");
                    });
                }), this.setUpBufferedApply(), this.initializeHighContrastRules();
            }, FormattingGroupComponent.prototype.sliceUid = function(_index, slice) {
                var selector = (0, formattingModelUtil.O7)(slice);
                return (0, formattingModelUtil.$Q)(slice.uid, selector);
            }, FormattingGroupComponent.prototype.onTopLevelToggleValueChanged = function(sliceSaveObject) {
                var changes = sliceSaveObject.changes;
                debug.fF.assert(function() {
                    return 1 === _.size(changes);
                }, "Expect the saveObject coming from a slice contains only 1 change");
                var sliceChange = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, changes[0]), {
                    isTopLevelToggle: !0
                }), newSliceSaveObject = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sliceSaveObject), {
                    changes: [ sliceChange ]
                });
                this.valueChanged.emit(newSliceSaveObject);
            }, FormattingGroupComponent.prototype.onSliceValueChanged = function(sliceSaveObject) {
                debug.fF.assert(function() {
                    return 1 === _.size(sliceSaveObject.changes);
                }, "Expect the saveObject coming from a slice contains only 1 change"), this.formattingGroup.delaySaveSlices && this.bufferedSlicesValueChangeDictionary[sliceSaveObject.changes[0].uid].next(sliceSaveObject);
                var newSliceSaveObject = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sliceSaveObject), {
                    suppressSave: this.formattingGroup.delaySaveSlices
                });
                this.valueChanged.emit(newSliceSaveObject);
            }, FormattingGroupComponent.prototype.setUpBufferedApply = function() {
                var _this = this;
                this.onDestroy$.pipe().subscribe(function(_ignore) {
                    _this.bufferedSliceChangesDestroy$.next(), _this.bufferedSliceChangesDestroy$.complete();
                }), this.showApplyButton$ = this.formattingGroupChanges$.pipe((0, pluck.j)("delaySaveSlices"), (0, 
                distinctUntilChanged.x)()), this.applyButtonClicked = this.createEventAdapter();
                var applyButtonClicked$ = this.applyButtonClicked.$;
                (0, combineLatest.aj)([ this.slices$.pipe((0, distinctUntilChanged.x)(function(prevs, currs) {
                    return _.isEqual(prevs, currs);
                })), this.showApplyButton$ ]).pipe().subscribe(function(_a) {
                    var closingNotifier, slices = _a[0], delaySave = _a[1];
                    if (_this.bufferedSliceChangesDestroy$.next(), _this.bufferedSlicesValueChangeDictionary = {}, 
                    delaySave) {
                        _.forEach(slices, function(slice) {
                            var singleSliceValueChanges$ = new BehaviorSubject.X(void 0);
                            _this.bufferedSlicesValueChangeDictionary[slice.uid] = singleSliceValueChanges$;
                        });
                        var allSliceValueStreams = _.values(_this.bufferedSlicesValueChangeDictionary);
                        _this.applyButtonEnabled$ = merge.T.apply(void 0, (0, tslib_es6.__spreadArray)((0, 
                        tslib_es6.__spreadArray)([], _.map(allSliceValueStreams, function(singleChange$) {
                            return singleChange$.pipe((0, filter.h)(function(value) {
                                return !!value;
                            }), (0, mapTo.h)(!0));
                        }), !1), [ applyButtonClicked$.pipe((0, mapTo.h)(!1)) ], !1)), (0, combineLatest.aj)(allSliceValueStreams).pipe((closingNotifier = applyButtonClicked$, 
                        function(source) {
                            return source.lift(new BufferOperator(closingNotifier));
                        }), (0, map.U)(function(bufferedValues) {
                            var lastestChanges = _.last(bufferedValues);
                            return _.filter(lastestChanges, function(value) {
                                return !!value;
                            });
                        }), (0, takeUntil.R)(_this.bufferedSliceChangesDestroy$)).subscribe(function(changedSlices) {
                            var newSliceSaveObject = {
                                changes: _.map(changedSlices, function(slice) {
                                    return {
                                        objectName: slice.changes[0].objectName,
                                        groupDisplayName: _this.formattingGroup.displayName,
                                        uid: slice.changes[0].uid,
                                        propertySlice: slice.changes[0].propertySlice,
                                        hasDynamicExpressionSupport: slice.changes[0].hasDynamicExpressionSupport,
                                        formattingSource: slice.changes[0].formattingSource,
                                        visualUpdateSource: slice.changes[0].visualUpdateSource
                                    };
                                })
                            };
                            _this.valueChanged.emit(newSliceSaveObject);
                        });
                    }
                });
            }, FormattingGroupComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule("formatting-group .formatting-group", "{ border: 1px solid @foregroundColor !important; box-shadow: none !important; }"), 
                this.highContrastCssGenerationService.addRule("formatting-group .formatting-group-header button.not-collapsible .display-name pbi-highlight", "{ color: @foregroundColor !important; }");
            }, FormattingGroupComponent.\u0275fac = function(t) {
                return new (t || FormattingGroupComponent)(core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](FormattingPaneComponentStore), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g));
            }, FormattingGroupComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormattingGroupComponent,
                selectors: [ [ "formatting-group" ] ],
                inputs: {
                    searchString: "searchString",
                    formattingGroup: "formattingGroup",
                    indicatorEnabled: "indicatorEnabled",
                    emphasize$: "emphasize$",
                    formattingCardLabelUid: "formattingCardLabelUid"
                },
                outputs: {
                    onGroupToggled: "onGroupToggled",
                    valueChanged: "valueChanged"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 6,
                vars: 16,
                consts: [ [ "data-automation-type", "formatting-group", 1, "formatting-group", 3, "ngClass", "pbiEmphasisBackground", "pbiEmphasisBackgroundColor", "pbiEmphasisBorder", "pbiEmphasisBorderColor" ], [ "class", "formatting-group-tooltip-description", 4, "ngIf" ], [ "class", "formatting-group-header", "accessible-click-ignore-tabindex", "true", 3, "accessible-click", "keydown", 4, "ngIf" ], [ 4, "ngIf" ], [ 1, "formatting-group-tooltip-description" ], [ "accessible-click-ignore-tabindex", "true", 1, "formatting-group-header", 3, "accessible-click", "keydown" ], [ "data-testid", "formatting-group-button", "data-testid", "formatting-group-header", "focus-nav-mode", "Browser", "focus-formatting-group-button", "", "pbiTooltipShowDelay", "500", 3, "pbiTooltip", "aria-describedby", "aria-label" ], [ 1, "display-name" ], [ "class", "glyphicon glyph-mini", 3, "ngClass", 4, "ngIf" ], [ 3, "text", "search" ], [ "class", "change-indicator", 3, "ngClass", "type", "showChangeIndicator", 4, "ngIf" ], [ "keyboard-nav-focus-skip", "", 3, "formattingSlice", "ariaLabelledbyPrefix", "suppressWarningIcon", "click", "keyup.enter", "keyup.space", "valueChanged", 4, "ngIf" ], [ 1, "glyphicon", "glyph-mini", 3, "ngClass" ], [ 1, "change-indicator", 3, "ngClass", "type", "showChangeIndicator" ], [ "keyboard-nav-focus-skip", "", 3, "formattingSlice", "ariaLabelledbyPrefix", "suppressWarningIcon", "click", "keyup.enter", "keyup.space", "valueChanged" ], [ "focus-nav-mode", "Browser", "class", "formatting-slice-container", 3, "keydown.escape", 4, "ngIf" ], [ "focus-nav-mode", "Browser", 1, "formatting-slice-container", 3, "keydown.escape" ], [ 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ "class", "apply", "data-testid", "apply-formatting-btn", 3, "disabled", "localize", "click", 4, "ngIf" ], [ "data-testid", "formatting-slice", 3, "indicatorEnabled", "searchString", "formattingSlice", "ariaLabelledbyPrefix", "valueChanged", 4, "ngIf" ], [ "data-testid", "formatting-slice", 3, "indicatorEnabled", "searchString", "formattingSlice", "ariaLabelledbyPrefix", "valueChanged" ], [ "data-testid", "apply-formatting-btn", 1, "apply", 3, "disabled", "localize", "click" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275template"](1, FormattingGroupComponent_p_1_Template, 3, 4, "p", 1), 
                    core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, FormattingGroupComponent_div_3_Template, 16, 36, "div", 2), 
                    core["\u0275\u0275template"](4, FormattingGroupComponent_ng_container_4_Template, 2, 1, "ng-container", 3), 
                    core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](14, formatting_group_component_c2, !ctx.formattingGroup.displayName))("pbiEmphasisBackground", ctx.emphasize$)("pbiEmphasisBackgroundColor", "var(--globalColorBrand160)")("pbiEmphasisBorder", ctx.emphasize$)("pbiEmphasisBorderColor", "var(--globalColorBrand80)"), 
                    core["\u0275\u0275attribute"]("data-unique-id", ctx.formattingGroup.uid)("focus-formatting-group", !!ctx.formattingGroup.displayName), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 10, ctx.tooltipDescription$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.formattingGroup.displayName), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](5, 12, ctx.slices$)));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, localize_directive.X, accessible_click_directive.t, pbi_emphasis_background_directive.O, PbiEmphasisBorderDirective, pbi_highlight_component._, pbi_tooltip_directive.V, FormattingSliceComponent, PropertyChangeIndicatorComponent, common.AsyncPipe ],
                styles: [ '[_nghost-%COMP%]{display:block}.formatting-group[_ngcontent-%COMP%]{--formatting-group-background-color: var(--gray-20);padding:8px;border-radius:4px;background:var(--formatting-group-background-color);box-shadow:var(--fluent-shadow-depth4, 0px 0px 2px var(--colorNeutralShadowAmbient), 0px 2px 4px var(--colorNeutralShadowKey));display:flex;flex-direction:column}  [data-legacy-theming=false] .formatting-group{--formatting-group-background-color: var(--colorNeutralBackground2)}@media (prefers-reduced-motion){.formatting-group[_ngcontent-%COMP%]{border:1px solid var(--gray-90);box-shadow:none}}.formatting-group[_ngcontent-%COMP%]   .formatting-group-tooltip-description[_ngcontent-%COMP%]{display:none}.formatting-group[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-semi-bold, 600);align-items:center;display:flex;flex-grow:1;height:24px;justify-content:space-between;text-overflow:ellipsis;overflow:hidden;margin-right:4px}.formatting-group[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:none}html[data-focus-source="key"][_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.formatting-group[_ngcontent-%COMP%]   button.apply[_ngcontent-%COMP%]{margin-top:8px;border:1px solid var(--gray-110, #8A8886);width:fit-content;padding:0 16px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   button.apply[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   button.apply[_ngcontent-%COMP%]{margin-left:auto;margin-right:0}html[dir="rtl"][_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   button.apply[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   button.apply[_ngcontent-%COMP%]{margin-left:0;margin-right:auto}.formatting-group[_ngcontent-%COMP%]   button.apply[disabled][_ngcontent-%COMP%]{pointer-events:none;color:var(--gray-90, #A19F9D);border-color:var(--gray-60, #C8C6C4)}.formatting-group[_ngcontent-%COMP%]   button.apply[_ngcontent-%COMP%]:hover{background-color:var(--gray-50, #D2D0CE)}.formatting-group[_ngcontent-%COMP%]   button.apply[_ngcontent-%COMP%]:active{background-color:var(--gray-70, #BEBBB8)}.formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]{cursor:pointer;display:flex;flex-direction:row;align-items:center}.formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background:inherit}.formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;overflow:hidden}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{padding-right:4px}html[dir="rtl"][_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{padding-left:4px}.formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   pbi-highlight[_ngcontent-%COMP%]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button[disabled][_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D)}.formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button.disabled-group[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D);cursor:default}.formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   button.not-collapsible[_ngcontent-%COMP%]{cursor:default;color:var(--neutral-primary-color, #333333)}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-left:auto}html[dir="rtl"][_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-right:auto}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-right:48px}html[dir="rtl"][_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator[_ngcontent-%COMP%]{margin-left:48px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%]{margin-right:16px}html[dir="rtl"][_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-group[_ngcontent-%COMP%]   .formatting-group-header[_ngcontent-%COMP%]   .change-indicator.with-toggle[_ngcontent-%COMP%]{margin-left:16px}.formatting-group[_ngcontent-%COMP%]   .formatting-slice-container[_ngcontent-%COMP%]   formatting-slice[_ngcontent-%COMP%]{margin-bottom:8px}.formatting-group[_ngcontent-%COMP%]   .formatting-slice-container[_ngcontent-%COMP%]   formatting-slice[_ngcontent-%COMP%]:first-child{margin-top:8px}.formatting-group[_ngcontent-%COMP%]   .formatting-slice-container[_ngcontent-%COMP%]   formatting-slice[_ngcontent-%COMP%]:last-child{margin-bottom:0}.formatting-group.no-display-name[_ngcontent-%COMP%]   .formatting-slice-container[_ngcontent-%COMP%]   formatting-slice[_ngcontent-%COMP%]:first-child{margin-top:0}' ],
                changeDetection: 0
            }), FormattingGroupComponent;
        }(rx_component.w);
        function WarningComponent_pbi_icon_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "pbi-icon", 3), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275pipe"](2, "async")), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"](), _r1 = core["\u0275\u0275reference"](3);
                core["\u0275\u0275property"]("pbiTooltip", _r1)("aria-label", core["\u0275\u0275pipeBind1"](1, 3, ctx_r0.warningTooltipTitle$)), 
                core["\u0275\u0275attribute"]("aria-description", core["\u0275\u0275pipeBind1"](2, 5, ctx_r0.warningTooltipDescription$));
            }
        }
        function WarningComponent_ng_template_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "div", 4), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275element"](2, "div", 5), core["\u0275\u0275pipe"](3, "async")), 
            2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("textContent", core["\u0275\u0275pipeBind1"](1, 2, ctx_r2.warningTooltipTitle$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("textContent", core["\u0275\u0275pipeBind1"](3, 4, ctx_r2.warningTooltipDescription$));
            }
        }
        var WarningComponent = function(_super) {
            function WarningComponent() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(WarningComponent, _super), WarningComponent.prototype.ngOnInit = function() {
                var warningChanges$ = this.changes$("warningMessage");
                this.warningTooltipTitle$ = warningChanges$.pipe((0, map.U)(function(message) {
                    return message ? message.title : void 0;
                })), this.warningTooltipDescription$ = warningChanges$.pipe((0, map.U)(function(message) {
                    return message ? message.detail : void 0;
                }));
            }, WarningComponent.\u0275fac = function() {
                var \u0275WarningComponent_BaseFactory;
                return function(t) {
                    return (\u0275WarningComponent_BaseFactory || (\u0275WarningComponent_BaseFactory = core["\u0275\u0275getInheritedFactory"](WarningComponent)))(t || WarningComponent);
                };
            }(), WarningComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: WarningComponent,
                selectors: [ [ "warning" ] ],
                inputs: {
                    warningMessage: "warningMessage"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 4,
                vars: 1,
                consts: [ [ 1, "warning-label" ], [ "class", "warning", "name", "warning", "size", "small", "role", "img", "tabindex", "0", 3, "pbiTooltip", "aria-label", 4, "ngIf" ], [ "tooltipTemplateRef", "" ], [ "name", "warning", "size", "small", "role", "img", "tabindex", "0", 1, "warning", 3, "pbiTooltip", "aria-label" ], [ 1, "warning-tooltip-title", 3, "textContent" ], [ 3, "textContent" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "label", 0), core["\u0275\u0275template"](1, WarningComponent_pbi_icon_1_Template, 3, 7, "pbi-icon", 1), 
                    core["\u0275\u0275template"](2, WarningComponent_ng_template_2_Template, 4, 6, "ng-template", null, 2, core["\u0275\u0275templateRefExtractor"]), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.warningMessage));
                },
                dependencies: [ common.NgIf, pbi_icon_component._, pbi_tooltip_directive.V, common.AsyncPipe ],
                styles: [ '.warning-label[_ngcontent-%COMP%]{display:flex;align-items:center}.cursor-pointer[_nghost-%COMP%]   .warning-label[_ngcontent-%COMP%], .cursor-pointer   [_nghost-%COMP%]   .warning-label[_ngcontent-%COMP%]{cursor:pointer}.warning-label[_ngcontent-%COMP%]   .warning[_ngcontent-%COMP%]{color:var(--gray-120, #797775)}html[data-focus-source="key"][_nghost-%COMP%]   .warning-label[_ngcontent-%COMP%]   .warning[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .warning-label[_ngcontent-%COMP%]   .warning[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.warning-tooltip-title[_ngcontent-%COMP%]{font-weight:var(--font-weight-bold, 700)}' ],
                changeDetection: 0
            }), WarningComponent;
        }(rx_component.w);
        function FormattingCardComponent_p_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "p", 10), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var tooltipDescription_r4 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275attribute"]("id", core["\u0275\u0275pipeBind1"](1, 2, ctx_r0.tooltipDescriptionUid$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", tooltipDescription_r4, "");
            }
        }
        function FormattingCardComponent_div_18_property_change_indicator_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "property-change-indicator", 14), 2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("type", "card")("showChangeIndicator", ctx_r5.formattingCard.showChangeIndicator);
            }
        }
        function FormattingCardComponent_div_18_warning_3_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "warning", 15), 2 & rf && core["\u0275\u0275property"]("warningMessage", ctx.ngIf);
        }
        function FormattingCardComponent_div_18_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 11), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275template"](2, FormattingCardComponent_div_18_property_change_indicator_2_Template, 1, 2, "property-change-indicator", 12), 
            core["\u0275\u0275template"](3, FormattingCardComponent_div_18_warning_3_Template, 1, 1, "warning", 13), 
            core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pipeBind1"](1, 3, ctx_r1.iconsContainerClass$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r1.indicatorEnabled), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](4, 5, ctx_r1.warningMessage$));
            }
        }
        function FormattingCardComponent_div_20_formatting_slice_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r13 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "formatting-slice", 18), core["\u0275\u0275listener"]("click", function($event) {
                    return $event.stopPropagation();
                })("keyup.enter", function($event) {
                    return $event.stopPropagation();
                })("keyup.space", function($event) {
                    return $event.stopPropagation();
                })("valueChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r13);
                    var ctx_r12 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r12.onTopLevelToggleValueChanged($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r8 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("formattingSlice", ctx_r8.formattingCard.topLevelToggle)("ariaLabelledbyPrefix", core["\u0275\u0275pipeBind1"](1, 3, ctx_r8.accessibleLabelId$))("suppressWarningIcon", !0);
            }
        }
        function FormattingCardComponent_div_20_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 16), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275template"](2, FormattingCardComponent_div_20_formatting_slice_2_Template, 2, 5, "formatting-slice", 17), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275classProp"]("push", !core["\u0275\u0275pipeBind1"](1, 3, ctx_r2.showIconsContainer$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r2.formattingCard.topLevelToggle);
            }
        }
        function FormattingCardComponent_div_21_ng_container_1_formatting_group_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r22 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "formatting-group", 24), core["\u0275\u0275listener"]("click", function($event) {
                    return $event.stopPropagation();
                })("onGroupToggled", function($event) {
                    core["\u0275\u0275restoreView"](_r22);
                    var group_r16 = core["\u0275\u0275nextContext"]().$implicit, ctx_r20 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r20.onToggled.emit({
                        groupId: group_r16.uid,
                        source: $event.source,
                        toggleState: $event.toggleState
                    }));
                })("valueChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r22);
                    var ctx_r23 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r23.valueChanged.emit($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var group_r16 = core["\u0275\u0275nextContext"]().$implicit, ctx_r18 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("searchString", ctx_r18.searchString)("formattingGroup", group_r16)("indicatorEnabled", ctx_r18.indicatorEnabled)("mobileFormatting", ctx_r18.mobileFormatting)("formattingCardLabelUid", core["\u0275\u0275pipeBind1"](1, 6, ctx_r18.accessibleLabelId$))("emphasize$", ctx_r18.emphasize$);
            }
        }
        function FormattingCardComponent_div_21_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingCardComponent_div_21_ng_container_1_formatting_group_1_Template, 2, 8, "formatting-group", 23), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var group_r16 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !group_r16.hidden);
            }
        }
        function FormattingCardComponent_div_21_button_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r26 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 25), core["\u0275\u0275listener"]("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r26);
                    var ctx_r25 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r25.onRevertToDefaultClicked.emit({
                        cardId: ctx_r25.formattingCard.uid,
                        cardName: ctx_r25.formattingCard.displayName,
                        revertToDefaultDescriptors: ctx_r25.formattingCard.revertToDefaultDescriptors
                    }));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "localize"), 
                core["\u0275\u0275element"](3, "pbi-icon", 26)(4, "span", 27), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r15 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275classProp"]("disabled", !ctx_r15.formattingCard.revertToDefaultEnabled), 
                core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](2, 9, "Visual_RevertToDesktop_Tooltip"))("pbiTooltipDisabled", !ctx_r15.mobileFormatting), 
                core["\u0275\u0275attribute"]("aria-labelledby", core["\u0275\u0275pipeBind1"](1, 7, ctx_r15.accessibleLabelId$) + " reset-to-default-id")("aria-disabled", !ctx_r15.formattingCard.revertToDefaultEnabled), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("localize", ctx_r15.mobileFormatting ? "Reset_All_Settings_Mobile" : "Reset_To_Default");
            }
        }
        function FormattingCardComponent_div_21_Template(rf, ctx) {
            if (1 & rf) {
                var _r28 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 19), core["\u0275\u0275listener"]("keydown.escape", function($event) {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r27 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r27.onEscKey.fn($event));
                }), core["\u0275\u0275template"](1, FormattingCardComponent_div_21_ng_container_1_Template, 2, 1, "ng-container", 20), 
                core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275element"](3, "label", 21), 
                core["\u0275\u0275template"](4, FormattingCardComponent_div_21_button_4_Template, 5, 11, "button", 22), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("pbiEmphasisBackground", ctx_r3.emphasize$)("pbiEmphasisBackgroundColor", "var(--globalColorBrand140)"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](2, 6, ctx_r3.groups$))("ngForTrackBy", ctx_r3.groupUid), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("localize", ctx_r3.mobileFormatting ? "Reset_All_Settings_Mobile" : "Reset_To_Default"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r3.formattingCard.revertToDefaultDescriptors);
            }
        }
        var formatting_card_component_c0 = function(a0) {
            return [ a0 ];
        }, formatting_card_component_incrementalId = 0, FormattingCardComponent = function(_super) {
            function FormattingCardComponent(featureSwitchService, highContrastCssGenerationService, elem, formattingPaneComponentStore) {
                var _this = _super.call(this) || this;
                return _this.featureSwitchService = featureSwitchService, _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.elem = elem, _this.formattingPaneComponentStore = formattingPaneComponentStore, 
                _this.onToggled = new core.EventEmitter, _this.valueChanged = new core.EventEmitter, 
                _this.onRevertToDefaultClicked = new core.EventEmitter, _this.featureSwitchService.featureSwitches.onObjectFormatPaneUid && (++formatting_card_component_incrementalId, 
                _this.accessibleLabelId = "".concat("formatting-card", "-").concat(formatting_card_component_incrementalId)), 
                _this;
            }
            return (0, tslib_es6.__extends)(FormattingCardComponent, _super), FormattingCardComponent.prototype.ngOnInit = function() {
                var _this = this, formattingCardChanges$ = this.changes$("formattingCard"), description$ = formattingCardChanges$.pipe((0, 
                pluck.j)("description")), disabledReason$ = formattingCardChanges$.pipe((0, pluck.j)("disabledReason"));
                this.groups$ = formattingCardChanges$.pipe((0, switchMap.w)(function(formattingCard) {
                    return (0, combineLatest.aj)(formattingCard.groupUids.map(function(groupId) {
                        return _this.formattingPaneComponentStore.selectGroup(groupId);
                    })).pipe((0, map.U)(function(groups) {
                        return _.filter(groups, function(group) {
                            return !!group;
                        });
                    }));
                })), this.disabled$ = formattingCardChanges$.pipe((0, pluck.j)("disabled"), (0, 
                startWith.O)(!1)), this.displayName$ = formattingCardChanges$.pipe((0, pluck.j)("displayName")), 
                this.accessibleLabelId$ = formattingCardChanges$.pipe((0, map.U)(function(formattingCard) {
                    return _this.featureSwitchService.featureSwitches.onObjectFormatPaneUid ? _this.accessibleLabelId : formattingCard.uid;
                })), this.tooltipDescription$ = this.disabled$.pipe((0, switchMap.w)(function(disabled) {
                    return disabled ? disabledReason$ : description$;
                }));
                var uid$ = formattingCardChanges$.pipe((0, pluck.j)("uid"));
                this.tooltipDescriptionUid$ = (0, iif.s)(function() {
                    return _this.featureSwitchService.featureSwitches.onObjectFormatPaneUid;
                }, this.accessibleLabelId$, uid$).pipe((0, map.U)(function(label) {
                    return "".concat(label, "-tooltip");
                }));
                var toggleState$ = formattingCardChanges$.pipe((0, pluck.j)("toggleState"));
                this.expanded$ = toggleState$.pipe((0, map.U)(function(toggleState) {
                    return isExpanded(toggleState, "" !== _this.searchString);
                })), this.toggleButton = this.createEventAdapter(), this.toggleButton.$.pipe((0, 
                withLatestFrom.M)(toggleState$, this.disabled$)).subscribe(function(_a) {
                    var currentToggleState = _a[1];
                    return _a[2] ? _a[0].stopPropagation() : _this.onToggled.emit({
                        source: 1,
                        toggleState: toggleToggleState(currentToggleState, "" !== _this.searchString)
                    });
                }), this.toggleButtonKeyboard = this.createEventAdapter(), this.toggleButtonKeyboard.$.subscribe(function(event) {
                    formattingPaneKeyboardNavHandler(event, _this.toggleButton.fn, function(e) {
                        return e.classList.contains("focus-formatting-cards");
                    }, function(sibling) {
                        return sibling.hasAttribute("focus-formatting-card-button");
                    });
                }), this.onEscKey = this.createEventAdapter(), this.onEscKey.$.subscribe(function(event) {
                    formattingPaneEscKeyHandler(event, function(e) {
                        return e.hasAttribute("focus-formatting-card");
                    });
                }), this.warningMessage$ = formattingCardChanges$.pipe((0, pluck.j)("warningMessage"));
                var showWarningMessage$ = this.warningMessage$.pipe((0, map.U)(function(w) {
                    return !!w;
                })), showChangeIndicator$ = formattingCardChanges$.pipe((0, pluck.j)("showChangeIndicator")), iconsContainer$ = (0, 
                combineLatest.aj)([ showWarningMessage$.pipe((0, startWith.O)(!1)), showChangeIndicator$, this.changes$("indicatorEnabled", !0) ]).pipe((0, 
                shareReplay.d)(1));
                this.showIconsContainer$ = iconsContainer$.pipe((0, map.U)(function(_a) {
                    return _a[0] || _a[1] && _a[2];
                })), this.iconsContainerClass$ = (0, combineLatest.aj)([ iconsContainer$, formattingCardChanges$.pipe((0, 
                pluck.j)("topLevelToggle")) ]).pipe((0, map.U)(function(_a) {
                    var _b = _a[0], showWarningMessage = _b[0], topLevelToggle = _a[1], classes = [];
                    return _b[1] && _b[2] && classes.push("with-indicator"), showWarningMessage && classes.push("with-warning"), 
                    topLevelToggle && classes.push("with-toggle"), classes;
                })), this.initializeHighContrastRules();
            }, FormattingCardComponent.prototype.groupUid = function(index, group) {
                return group.uid;
            }, FormattingCardComponent.prototype.onTopLevelToggleValueChanged = function(sliceSaveObject) {
                var changes = sliceSaveObject.changes;
                debug.fF.assert(function() {
                    return 1 === _.size(changes);
                }, "Expect the saveObject coming from a slice contains only 1 change");
                var sliceChange = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, changes[0]), {
                    isTopLevelToggle: !0
                }), newSliceSaveObject = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sliceSaveObject), {
                    changes: [ sliceChange ]
                });
                this.valueChanged.emit(newSliceSaveObject);
            }, FormattingCardComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule("formatting-card .formatting-card-header.disabled-card button:hover", "{ opacity: 1 !important; }"), 
                this.highContrastCssGenerationService.addRule("formatting-card .formatting-card-header.disabled-card button:focus", "{ opacity: 1 !important; }"), 
                this.highContrastCssGenerationService.addRule("formatting-card .formatting-card-header.disabled-card button", "{ opacity: .75 !important; }"), 
                this.highContrastCssGenerationService.addRule("formatting-card .reset-button.disabled span", "{ color: @disabledTextColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formatting-card .reset-button.disabled .reset-icon .glyphicon", "{ color: @disabledTextColor !important; }");
            }, FormattingCardComponent.\u0275fac = function(t) {
                return new (t || FormattingCardComponent)(core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](FormattingPaneComponentStore));
            }, FormattingCardComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormattingCardComponent,
                selectors: [ [ "formatting-card" ] ],
                inputs: {
                    searchString: "searchString",
                    formattingCard: "formattingCard",
                    indicatorEnabled: "indicatorEnabled",
                    mobileFormatting: "mobileFormatting",
                    emphasize$: "emphasize$"
                },
                outputs: {
                    onToggled: "onToggled",
                    valueChanged: "valueChanged",
                    onRevertToDefaultClicked: "onRevertToDefaultClicked"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 23,
                vars: 46,
                consts: [ [ "data-automation-type", "formatting-card", "focus-formatting-card", "", 1, "formatting-card" ], [ "class", "formatting-card-tooltip-description", 4, "ngIf" ], [ "accessible-click-ignore-tabindex", "true", 1, "formatting-card-header", 3, "accessible-click", "keydown" ], [ "focus-nav-mode", "Browser", "focus-formatting-card-button", "", "pbiTooltipShowDelay", "500", "data-testid", "formatting-card-button", 3, "pbiTooltip", "aria-describedby", "aria-label" ], [ 1, "display-name" ], [ 1, "glyphicon", "glyph-mini", 3, "ngClass" ], [ 3, "text", "search" ], [ "class", "icons-container push", 3, "ngClass", 4, "ngIf" ], [ "class", "toggle-container", 3, "push", 4, "ngIf" ], [ "class", "formatting-groups", "focus-formatting-groups", "", 3, "pbiEmphasisBackground", "pbiEmphasisBackgroundColor", "keydown.escape", 4, "ngIf" ], [ 1, "formatting-card-tooltip-description" ], [ 1, "icons-container", "push", 3, "ngClass" ], [ "class", "change-indicator", 3, "type", "showChangeIndicator", 4, "ngIf" ], [ "class", "cursor-pointer", 3, "warningMessage", 4, "ngIf" ], [ 1, "change-indicator", 3, "type", "showChangeIndicator" ], [ 1, "cursor-pointer", 3, "warningMessage" ], [ 1, "toggle-container" ], [ "keyboard-nav-focus-skip", "", 3, "formattingSlice", "ariaLabelledbyPrefix", "suppressWarningIcon", "click", "keyup.enter", "keyup.space", "valueChanged", 4, "ngIf" ], [ "keyboard-nav-focus-skip", "", 3, "formattingSlice", "ariaLabelledbyPrefix", "suppressWarningIcon", "click", "keyup.enter", "keyup.space", "valueChanged" ], [ "focus-formatting-groups", "", 1, "formatting-groups", 3, "pbiEmphasisBackground", "pbiEmphasisBackgroundColor", "keydown.escape" ], [ 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ "id", "reset-to-default-id", 1, "formatting-card-tooltip-description", 3, "localize" ], [ "class", "reset-button", "tabindex", "0", "focus-nav-mode", "Browser", 3, "disabled", "pbiTooltip", "pbiTooltipDisabled", "accessible-click", 4, "ngIf" ], [ 3, "searchString", "formattingGroup", "indicatorEnabled", "mobileFormatting", "formattingCardLabelUid", "emphasize$", "click", "onGroupToggled", "valueChanged", 4, "ngIf" ], [ 3, "searchString", "formattingGroup", "indicatorEnabled", "mobileFormatting", "formattingCardLabelUid", "emphasize$", "click", "onGroupToggled", "valueChanged" ], [ "tabindex", "0", "focus-nav-mode", "Browser", 1, "reset-button", 3, "pbiTooltip", "pbiTooltipDisabled", "accessible-click" ], [ "name", "reset", "size", "mini", 1, "reset-icon" ], [ 3, "localize" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275pipe"](1, "async"), 
                    core["\u0275\u0275template"](2, FormattingCardComponent_p_2_Template, 3, 4, "p", 1), 
                    core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementStart"](4, "div", 2), 
                    core["\u0275\u0275listener"]("accessible-click", function($event) {
                        return ctx.toggleButton.fn($event);
                    })("keydown", function($event) {
                        return ctx.toggleButtonKeyboard.fn($event);
                    }), core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275elementStart"](6, "button", 3), 
                    core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275pipe"](8, "async"), core["\u0275\u0275pipe"](9, "async"), 
                    core["\u0275\u0275pipe"](10, "async"), core["\u0275\u0275pipe"](11, "async"), core["\u0275\u0275elementStart"](12, "div", 4), 
                    core["\u0275\u0275element"](13, "i", 5), core["\u0275\u0275pipe"](14, "async"), 
                    core["\u0275\u0275element"](15, "pbi-highlight", 6), core["\u0275\u0275pipe"](16, "async"), 
                    core["\u0275\u0275pipe"](17, "async"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](18, FormattingCardComponent_div_18_Template, 5, 7, "div", 7), 
                    core["\u0275\u0275pipe"](19, "async"), core["\u0275\u0275template"](20, FormattingCardComponent_div_20_Template, 3, 5, "div", 8), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](21, FormattingCardComponent_div_21_Template, 5, 8, "div", 9), 
                    core["\u0275\u0275pipe"](22, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275classProp"]("expanded", core["\u0275\u0275pipeBind1"](1, 18, ctx.expanded$)), 
                    core["\u0275\u0275attribute"]("data-unique-id", ctx.formattingCard.uid), core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](3, 20, ctx.tooltipDescription$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("disabled-card", core["\u0275\u0275pipeBind1"](5, 22, ctx.disabled$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](7, 24, ctx.tooltipDescription$))("aria-describedby", core["\u0275\u0275pipeBind1"](10, 30, ctx.tooltipDescriptionUid$))("aria-label", core["\u0275\u0275pipeBind1"](11, 32, ctx.displayName$)), 
                    core["\u0275\u0275attribute"]("aria-disabled", core["\u0275\u0275pipeBind1"](8, 26, ctx.disabled$))("aria-expanded", core["\u0275\u0275pipeBind1"](9, 28, ctx.expanded$)), 
                    core["\u0275\u0275advance"](7), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](44, formatting_card_component_c0, core["\u0275\u0275pipeBind1"](14, 34, ctx.expanded$) ? "pbi-glyph-chevrondownmedium" : "pbi-glyph-arrowright")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("text", core["\u0275\u0275pipeBind1"](16, 36, ctx.displayName$))("search", ctx.searchString), 
                    core["\u0275\u0275attribute"]("id", core["\u0275\u0275pipeBind1"](17, 38, ctx.accessibleLabelId$)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](19, 40, ctx.showIconsContainer$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.formattingCard.topLevelToggle), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](22, 42, ctx.expanded$)));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, localize_directive.X, accessible_click_directive.t, pbi_emphasis_background_directive.O, pbi_highlight_component._, pbi_icon_component._, pbi_tooltip_directive.V, FormattingGroupComponent, FormattingSliceComponent, PropertyChangeIndicatorComponent, WarningComponent, common.AsyncPipe, localize_pipe.F ],
                styles: [ '[_nghost-%COMP%]{display:block}.formatting-card[_ngcontent-%COMP%]{display:flex;flex-direction:column;overflow:hidden;--formatting-card-background-color: var(--gray-40);--formatting-card-hover-background-color: var(--gray-40);--reset-button-color: var(--fluent-theme-link-darker-color, #005A9E);--reset-button-hover-color: var(--fluent-theme-link-darker-color, #005A9E)}  [data-legacy-theming=false] .formatting-card{--formatting-card-background-color: var(--colorNeutralBackground1);--formatting-card-hover-background-color: var(--colorNeutralBackground1Hover);--reset-button-color: var(--colorNeutralForeground2);--reset-button-hover-color: var(--colorNeutralForeground2Hover)}.formatting-card[_ngcontent-%COMP%]   .formatting-card-tooltip-description[_ngcontent-%COMP%]{display:none}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]{align-items:center;padding:8px;cursor:pointer;display:flex;flex-direction:row;box-shadow:var(--fluent-shadow-depth4)}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]:hover{background-color:var(--formatting-card-hover-background-color)}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{height:24px;background-color:transparent;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-semi-bold, 600);display:flex;align-items:center;justify-content:space-between;flex-grow:1;text-overflow:ellipsis;overflow:hidden;margin-right:4px}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;overflow:hidden}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{padding-right:4px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{padding-left:4px}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   .display-name[_ngcontent-%COMP%]   pbi-highlight[_ngcontent-%COMP%]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:none}html[data-focus-source="key"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:-1px}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header.disabled-card[_ngcontent-%COMP%]:hover{background-color:transparent}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header.disabled-card[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D);cursor:default}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container[_ngcontent-%COMP%], .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{display:flex;align-items:center}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container[_ngcontent-%COMP%], html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{padding-left:8px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container[_ngcontent-%COMP%], html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{padding-right:8px}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container[_ngcontent-%COMP%]   warning[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator[_ngcontent-%COMP%]{margin-right:56px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator[_ngcontent-%COMP%]{margin-left:56px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-warning[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-warning[_ngcontent-%COMP%]{margin-right:40px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-warning[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-warning[_ngcontent-%COMP%]{margin-left:40px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle[_ngcontent-%COMP%]{margin-right:16px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle[_ngcontent-%COMP%]{margin-left:16px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle.with-warning[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle.with-warning[_ngcontent-%COMP%]{margin-right:0}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle.with-warning[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .icons-container.with-indicator.with-toggle.with-warning[_ngcontent-%COMP%]{margin-left:0}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .push[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .push[_ngcontent-%COMP%]{margin-left:auto}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .push[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .push[_ngcontent-%COMP%]{margin-right:auto}.formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{display:flex;align-items:center}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{padding-left:8px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{padding-right:8px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{margin-left:auto}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]   .toggle-container[_ngcontent-%COMP%]{margin-right:auto}.formatting-card.expanded[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]{box-shadow:var(--fluent-shadow-depth4)}@media (prefers-reduced-motion){.formatting-card.expanded[_ngcontent-%COMP%]   .formatting-card-header[_ngcontent-%COMP%]{box-shadow:none;border-bottom:1px solid var(--gray-90)}}.formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]{cursor:pointer;margin-top:8px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);align-items:center;background:none;display:flex;height:24px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]{padding-right:2px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]{padding-left:2px}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]{padding-left:2px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]{padding-right:2px}.formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]   .reset-icon[_ngcontent-%COMP%]{color:var(--reset-button-color)}html:not([dir="rtl"])[_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]   .reset-icon[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]   .reset-icon[_ngcontent-%COMP%]{margin-right:6px}html[dir="rtl"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]   .reset-icon[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]   .reset-icon[_ngcontent-%COMP%]{margin-left:6px}.formatting-card[_ngcontent-%COMP%]   .reset-button.disabled[_ngcontent-%COMP%]{pointer-events:none;color:var(--gray-90, #A19F9D)}.formatting-card[_ngcontent-%COMP%]   .reset-button.disabled[_ngcontent-%COMP%]   .reset-icon[_ngcontent-%COMP%]{color:var(--gray-90, #A19F9D)}html[data-focus-source="key"][_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]:hover{color:var(--reset-button-hover-color)}.formatting-card[_ngcontent-%COMP%]   .reset-button[_ngcontent-%COMP%]:active{background-color:var(--fluent-theme-neutral-quarter-alt-color, #E1DFDD)}.formatting-card[_ngcontent-%COMP%]   .formatting-groups[_ngcontent-%COMP%]{padding:8px;background:var(--formatting-card-background-color)}.formatting-card[_ngcontent-%COMP%]   .formatting-groups[_ngcontent-%COMP%]   formatting-group[_ngcontent-%COMP%]{margin-top:8px}.formatting-card[_ngcontent-%COMP%]   .formatting-groups[_ngcontent-%COMP%]   formatting-group[_ngcontent-%COMP%]:first-child{margin-top:0}@media (prefers-reduced-motion){.formatting-card[_ngcontent-%COMP%]   .formatting-groups[_ngcontent-%COMP%]{border-bottom:1px solid var(--gray-90)}}' ],
                changeDetection: 0
            }), FormattingCardComponent;
        }(rx_component.w), debounceTime = __webpack_require__(6754), skip = __webpack_require__(3307), pairwise = __webpack_require__(6663), fileMenuService = __webpack_require__(82345), pbi_menu_contracts = __webpack_require__(64560), pbi_search_box_component = __webpack_require__(68070), ScrollToTopAnimator = function() {
            function ScrollToTopAnimator(target$, scrollerClass, spacerClass, options) {
                this.target$ = target$;
                var duration = options && options.duration || 500;
                this.power = options && options.power || 2, this.onDone = options && options.onDone, 
                this.ngZone = options && options.ngZone, this.scroller$ = target$.closest(".".concat(scrollerClass)), 
                this.scrollerElem = this.scroller$[0], this.spacer$ = this.scroller$.find(".".concat(spacerClass)), 
                this.spacer$.outerHeight(this.scroller$.height()), this.lastTime = performance.now(), 
                this.endTime = this.lastTime + duration, this.calcEndScroll();
            }
            return ScrollToTopAnimator.prototype.start = function() {
                var _this = this;
                this.raf || (this.raf = this.requestAnimationFrame(function animateScrollTop_1() {
                    _this.raf = void 0, _this.calcEndScroll(), _this.adjustScrollTop() ? _this.raf = _this.requestAnimationFrame(animateScrollTop_1) : _this.done();
                }));
            }, ScrollToTopAnimator.prototype.requestAnimationFrame = function(callback) {
                return this.ngZone ? this.ngZone.runOutsideAngular(function() {
                    return requestAnimationFrame(callback);
                }) : requestAnimationFrame(callback);
            }, ScrollToTopAnimator.prototype.adjustScrollTop = function() {
                var now = performance.now(), lastScrollTop = this.scrollerElem.scrollTop;
                if (lastScrollTop === this.endScrollTop) return !1;
                if (now >= this.endTime) return this.scrollerElem.scrollTop = this.endScrollTop, 
                !1;
                if (now > this.lastTime) {
                    var newScrollTop = this.endScrollTop + (lastScrollTop - this.endScrollTop) * Math.pow((now - this.endTime) / (this.lastTime - this.endTime), this.power);
                    this.scrollerElem.scrollTop = newScrollTop, this.lastTime = now;
                }
                return !0;
            }, ScrollToTopAnimator.prototype.calcEndScroll = function() {
                var targetTop = this.target$.offset().top, scrollerTop = this.scroller$.offset().top;
                this.endScrollTop = this.scrollerElem.scrollTop + targetTop - scrollerTop;
            }, ScrollToTopAnimator.prototype.done = function() {
                var targetToSpacer = this.spacer$.offset().top - this.target$.offset().top, spacerHeightNeeded = Math.max(0, this.scroller$.height() - targetToSpacer);
                this.spacer$.outerHeight(spacerHeightNeeded), this.onDone && (this.onDone(), this.onDone = void 0);
            }, ScrollToTopAnimator.prototype.stop = function() {
                this.raf && (cancelAnimationFrame(this.raf), this.raf = void 0), this.onDone && (this.onDone(), 
                this.onDone = void 0);
            }, ScrollToTopAnimator;
        }(), Telemetry = __webpack_require__(21617), events = __webpack_require__(40702), visualPrefix = "".concat("Visual", "-"), generalPrefix = "".concat("Format_Label_General", "-"), pagePrefix = "".concat("Page", "-"), analyticsPrefix = "".concat("Analytics", "-"), generalCardUids = [ "properties", "title", "effects", "headerIcons", "tooltips", "altText", "action" ], pageCardUids = [ "pageInformation", "pageSize", "background", "outspace", "pageRefresh", "personalizeVisual", "outspacePane", "filterCard" ], visualCardUids = [ "zoom", "bars", "breakdown", "categoryAxis", "gridlines", "legend", "lines", "markers", "plotBackground", "ribbonChart", "sentimentColors", "smallMultiplesLayout", "subheader", "valueAxis", "y2Axis", "axisZoom", "axis", "calloutValue", "card", "columnFormatting", "columnHeaders", "columnSubTotal", "datapoint", "date", "fillColors", "rowTotal", "columnTotal", "grid", "hierarchy", "icons", "imageHeight", "mapSettings", "percentBarLabel", "rotation", "rowHeaders", "rowSubTotal", "slicerHeader", "slicerSettings", "slices", "slider", "sparklines", "target", "targetLabel", "trendAxis", "urlIcon", "values", "categoryLabels", "colors", "conditionalFormatting", "labels", "seriesLabels", "totals", "shape", "style", "rotation" ], analyticsCardUids = [ "errorBars", "anomaly", "forecast", "plotAreaShading", "ratioLine", "referenceLine-minLine", "referenceLine-maxLine", "referenceLine-averageLine", "referenceLine-medianLine", "referenceLine-percentileLine", "trendLine", "xAxisReferenceLine", "y1AxisReferenceLine" ], formattingPaneTelemetryCardsAllowList = function() {
            for (var formatCardTelemetryAllowList = new Set, _i = 0, visualCardUids_1 = visualCardUids; _i < visualCardUids_1.length; _i++) {
                var cardUid = visualCardUids_1[_i];
                formatCardTelemetryAllowList.add("".concat(visualPrefix).concat(cardUid));
            }
            for (var _a = 0, generalCardUids_1 = generalCardUids; _a < generalCardUids_1.length; _a++) cardUid = generalCardUids_1[_a], 
            formatCardTelemetryAllowList.add("".concat(generalPrefix).concat(cardUid));
            for (var _b = 0, pageCardUids_1 = pageCardUids; _b < pageCardUids_1.length; _b++) cardUid = pageCardUids_1[_b], 
            formatCardTelemetryAllowList.add("".concat(pagePrefix).concat(cardUid));
            for (var _c = 0, analyticsCardUids_1 = analyticsCardUids; _c < analyticsCardUids_1.length; _c++) cardUid = analyticsCardUids_1[_c], 
            formatCardTelemetryAllowList.add("".concat(analyticsPrefix).concat(cardUid));
            return formatCardTelemetryAllowList;
        }(), formattingGroupsAllowList = [ "".concat("categoryAxis", "-").concat("range"), "".concat("categoryAxis", "-").concat("title"), "".concat("categoryAxis", "-").concat("type"), "".concat("categoryAxis", "-").concat("values"), "".concat("gridlines", "-").concat("horizontal"), "".concat("gridlines", "-").concat("vertical"), "".concat("legend", "-").concat("options"), "".concat("legend", "-").concat("text"), "".concat("legend", "-").concat("title"), "".concat("smallMultiplesLayout", "-").concat("background"), "".concat("smallMultiplesLayout", "-").concat("border"), "".concat("smallMultiplesLayout", "-").concat("layout"), "".concat("valueAxis", "-").concat("range"), "".concat("valueAxis", "-").concat("title"), "".concat("valueAxis", "-").concat("values"), "".concat("y2Axis", "-").concat("title"), "".concat("y2Axis", "-").concat("values"), "".concat("errorBars", "-").concat("options"), "".concat("errorBars", "-").concat("bar"), "".concat("errorBars", "-").concat("band"), "".concat("errorBars", "-").concat("labels"), "".concat("errorBars", "-").concat("tooltip"), "".concat("bars", "-").concat("colors"), "".concat("bars", "-").concat("spacing"), "".concat("lines", "-").concat("applySettingsTo"), "".concat("lines", "-").concat("colors"), "".concat("lines", "-").concat("shadeArea"), "".concat("lines", "-").concat("shape"), "".concat("lines", "-").concat("spacing"), "".concat("markers", "-").concat("colors"), "".concat("markers", "-").concat("markers"), "".concat("markers", "-").concat("applySettingsTo"), "".concat("markers", "-").concat("spacing"), "".concat("ribbonChart", "-").concat("colors"), "".concat("ribbonChart", "-").concat("border"), "".concat("ribbonChart", "-").concat("spacing"), "".concat("sentimentColors", "-").concat("colors"), "".concat("sentimentColors", "-").concat("spacing"), "".concat("breakdown", "-").concat("breakdown"), "".concat("percentBarLabel", "-").concat("values"), "".concat("datapoint", "-").concat("datapoint"), "".concat("axis", "-").concat("axis"), "".concat("card", "-").concat("values"), "".concat("card", "-").concat("style"), "".concat("card", "-").concat("bar"), "".concat("categoryAxis", "-").concat("background"), "".concat("categoryAxis", "-").concat("values"), "".concat("calloutValue", "-").concat("values"), "".concat("icons", "-").concat("icons"), "".concat("trendAxis", "-").concat("trendAxis"), "".concat("targetLabel", "-").concat("values"), "".concat("targetLabel", "-").concat("distance"), "".concat("date", "-").concat("date"), "".concat("mapSettings", "-").concat("options"), "".concat("mapSettings", "-").concat("zoom"), "".concat("fillColors", "-").concat("colors"), "".concat("fillColors", "-").concat("blankAreas"), "".concat("fillColors", "-").concat("border"), "".concat("values", "-").concat("background"), "".concat("values", "-").concat("border"), "".concat("slider", "-").concat("colors"), "".concat("slicerHeader", "-").concat("text"), "".concat("slicerHeader", "-").concat("border"), "".concat("slicerHeader", "-").concat("background"), "".concat("hierarchy", "-").concat("levels"), "".concat("hierarchy", "-").concat("expandCollapseButtons"), "".concat("rotation", "-").concat("default"), "".concat("slices", "-").concat("colors"), "".concat("slices", "-").concat("border"), "".concat("slices", "-").concat("spacing"), "".concat("grid", "-").concat("gridHorizontal"), "".concat("grid", "-").concat("gridVertical"), "".concat("grid", "-").concat("border"), "".concat("grid", "-").concat("options"), "".concat("values", "-").concat("values"), "".concat("values", "-").concat("options"), "".concat("columnHeaders", "-").concat("text"), "".concat("columnHeaders", "-").concat("options"), "".concat("rowHeaders", "-").concat("text"), "".concat("rowHeaders", "-").concat("expandCollapseButtons"), "".concat("rowHeaders", "-").concat("options"), "".concat("columnTotal", "-").concat("values"), "".concat("rowTotal", "-").concat("values"), "".concat("rowSubTotal", "-").concat("values"), "".concat("rowSubTotal", "-").concat("rows"), "".concat("columnSubTotal", "-").concat("applySettingsTo"), "".concat("columnSubTotal", "-").concat("values"), "".concat("columnSubTotal", "-").concat("columns"), "".concat("columnFormatting", "-").concat("columns"), "".concat("columnFormatting", "-").concat("values"), "".concat("conditionalFormatting", "-").concat("options"), "".concat("conditionalFormatting", "-").concat("cellElements"), "".concat("urlIcon", "-").concat("urlIcon"), "".concat("imageHeight", "-").concat("imageHeight"), "".concat("sparklines", "-").concat("columns"), "".concat("sparklines", "-").concat("sparklines"), "".concat("sparklines", "-").concat("markers"), "".concat("colors", "-").concat("colors"), "".concat("labels", "-").concat("background"), "".concat("labels", "-").concat("options"), "".concat("labels", "-").concat("values"), "".concat("seriesLabels", "-").concat("background"), "".concat("seriesLabels", "-").concat("options"), "".concat("seriesLabels", "-").concat("values"), "".concat("categoryLabels", "-").concat("background"), "".concat("categoryLabels", "-").concat("options"), "".concat("categoryLabels", "-").concat("values"), "".concat("totals", "-").concat("background"), "".concat("totals", "-").concat("options"), "".concat("totals", "-").concat("values"), "".concat("visualPlaceholderCard", "-").concat("visualPlaceholderGroup"), "".concat("rotation", "-").concat("default"), "".concat("shape", "-").concat("shape"), "".concat("style", "-").concat("border"), "".concat("style", "-").concat("fill"), "".concat("style", "-").concat("glow"), "".concat("style", "-").concat("icon"), "".concat("style", "-").concat("outline"), "".concat("style", "-").concat("shadow"), "".concat("style", "-").concat("text"), "".concat("action", "-").concat("action"), "".concat("action", "-").concat("tooltip"), "".concat("properties", "-").concat("size"), "".concat("properties", "-").concat("position"), "".concat("properties", "-").concat("advancedOptions"), "".concat("title", "-").concat("default"), "".concat("effects", "-").concat("background"), "".concat("effects", "-").concat("visualBorder"), "".concat("effects", "-").concat("shadow"), "".concat("headerIcons", "-").concat("colors"), "".concat("headerIcons", "-").concat("icons"), "".concat("headerIcons", "-").concat("helpTooltip"), "".concat("tooltips", "-").concat("options"), "".concat("tooltips", "-").concat("text"), "".concat("tooltips", "-").concat("background"), "".concat("pageInformation", "-").concat("pageInformation"), "".concat("pageInformation", "-").concat("pageInformationLinkFieldsLinkTypes"), "".concat("pageInformation", "-").concat("pageInformationQnaPodEnabled"), "".concat("pageSize", "-").concat("pageSize"), "".concat("background", "-").concat("background"), "".concat("outspace", "-").concat("outspace"), "".concat("pageRefresh", "-").concat("pageRefresh"), "".concat("personalizeVisual", "-").concat("personalizeVisual"), "".concat("outspacePane", "-").concat("text"), "".concat("outspacePane", "-").concat("input"), "".concat("outspacePane", "-").concat("header"), "".concat("outspacePane", "-").concat("searchbox"), "".concat("outspacePane", "-").concat("border"), "".concat("outspacePane", "-").concat("background"), "".concat("outspacePane", "-").concat("options"), "".concat("filterCard", "-").concat("text"), "".concat("filterCard", "-").concat("input"), "".concat("filterCard", "-").concat("border"), "".concat("filterCard", "-").concat("background"), "".concat("anomaly", "-").concat("options"), "".concat("anomaly", "-").concat("anomaly"), "".concat("anomaly", "-").concat("expectedrange"), "".concat("forecast", "-").concat("options"), "".concat("forecast", "-").concat("forecastline"), "".concat("forecast", "-").concat("confidenceband"), "".concat("forecast", "-").concat("tooltipTitle"), "".concat("referenceLine-minLine", "-").concat("measure"), "".concat("referenceLine-minLine", "-").concat("line"), "".concat("referenceLine-minLine", "-").concat("dataLabel"), "".concat("referenceLine-maxLine", "-").concat("measure"), "".concat("referenceLine-maxLine", "-").concat("line"), "".concat("referenceLine-maxLine", "-").concat("dataLabel"), "".concat("referenceLine-averageLine", "-").concat("measure"), "".concat("referenceLine-averageLine", "-").concat("line"), "".concat("referenceLine-averageLine", "-").concat("dataLabel"), "".concat("referenceLine-medianLine", "-").concat("measure"), "".concat("referenceLine-medianLine", "-").concat("line"), "".concat("referenceLine-medianLine", "-").concat("dataLabel"), "".concat("referenceLine-percentileLine", "-").concat("measure"), "".concat("referenceLine-percentileLine", "-").concat("line"), "".concat("referenceLine-percentileLine", "-").concat("dataLabel"), "".concat("xAxisReferenceLine", "-").concat("line"), "".concat("xAxisReferenceLine", "-").concat("shadeArea"), "".concat("xAxisReferenceLine", "-").concat("dataLabel"), "".concat("y1AxisReferenceLine", "-").concat("line"), "".concat("y1AxisReferenceLine", "-").concat("dataLabel") ], formattingPaneTelemetryGroupsAllowList = new Set(formattingGroupsAllowList), visual_session_telemetry_utils = __webpack_require__(2863), context_activity_service = __webpack_require__(22292), panes_visibility_service = __webpack_require__(21024), pbi_menu_service = __webpack_require__(5467), undo_redo_service = __webpack_require__(84281), trusted_visual_service = __webpack_require__(69071), visual_plugin_service = __webpack_require__(29866), pivot_tab_key_handler = __webpack_require__(43859), pbi_scrollbar_directive = __webpack_require__(80649), message_banner_component = __webpack_require__(44641);
        function FormattingPaneComponentWrapper_formatting_pane_inner_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r2 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "formatting-pane-inner", 1), core["\u0275\u0275listener"]("propertyChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r2);
                    var ctx_r1 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r1.propertyChanged.emit($event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("formattingService", ctx_r0.formattingService)("formattingUIManager", ctx_r0.formattingUIManager)("componentStore", ctx_r0.componentStore)("formattingSources", ctx_r0.formattingSources)("indicatorEnabled", ctx_r0.indicatorEnabled)("mobileFormatting", ctx_r0.mobileFormatting)("disableScrollbar", ctx_r0.disableScrollbar)("disabledCards", ctx_r0.disabledCards)("disabledSlices", ctx_r0.disabledSlices);
            }
        }
        var formatting_pane_component_c0 = [ "searchInput" ], formatting_pane_component_c1 = [ "card" ];
        function FormattingPaneComponent_ng_container_0_ng_container_1_button_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r11 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 9), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r11);
                    var formattingPaneMessage_r7 = core["\u0275\u0275nextContext"]().ngIf;
                    return core["\u0275\u0275resetView"](formattingPaneMessage_r7.action.fn());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var formattingPaneMessage_r7 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275property"]("localize", formattingPaneMessage_r7.action.key);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 6), 
            core["\u0275\u0275element"](2, "message-banner", 7), core["\u0275\u0275template"](3, FormattingPaneComponent_ng_container_0_ng_container_1_button_3_Template, 1, 1, "button", 8), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var formattingPaneMessage_r7 = ctx.ngIf;
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("viewModel", formattingPaneMessage_r7.messageBannerModel), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", formattingPaneMessage_r7.action);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_div_1_pbi_button_toggle_2_div_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "div", 18), 2 & rf) {
                var item_r20 = core["\u0275\u0275nextContext"]().$implicit, selectedFormattingPivotType_r15 = core["\u0275\u0275nextContext"](3).ngIf;
                core["\u0275\u0275classProp"]("selected", item_r20.pivotKey === selectedFormattingPivotType_r15), 
                core["\u0275\u0275property"]("localize", item_r20.pivotDisplayName);
            }
        }
        var formatting_pane_component_c2 = function(a0, a1) {
            return {
                currentSection: a0,
                sections: a1,
                rootAttribute: "focus-pivot-root",
                pivotAttribute: "focus-pivot"
            };
        };
        function FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_div_1_pbi_button_toggle_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r25 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-button-toggle", 16), core["\u0275\u0275listener"]("valueChanged", function($event) {
                    var item_r20 = core["\u0275\u0275restoreView"](_r25).$implicit, ctx_r24 = core["\u0275\u0275nextContext"](6);
                    return core["\u0275\u0275resetView"](ctx_r24.formattingPivotTypeButtonChange.fn({
                        value: item_r20.pivotKey,
                        checked: $event
                    }));
                })("onActiveSection", function($event) {
                    core["\u0275\u0275restoreView"](_r25);
                    var ctx_r26 = core["\u0275\u0275nextContext"](6);
                    return core["\u0275\u0275resetView"](ctx_r26.formattingPivotTypeButtonChange.fn({
                        value: $event.nextSection.pivotKey,
                        checked: !0
                    }));
                }), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_div_1_pbi_button_toggle_2_div_1_Template, 1, 3, "div", 17), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var item_r20 = ctx.$implicit, currentPivots_r17 = core["\u0275\u0275nextContext"](2).ngIf, selectedFormattingPivotType_r15 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275property"]("role", "tab")("checked", item_r20.pivotKey === selectedFormattingPivotType_r15)("value", item_r20.pivotKey)("buttonTabIndex", item_r20.pivotKey === selectedFormattingPivotType_r15 ? 0 : -1)("pivot-tab-key-handler", core["\u0275\u0275pureFunction2"](6, formatting_pane_component_c2, item_r20, currentPivots_r17)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", item_r20.pivotDisplayName);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_div_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r30 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 12)(1, "pbi-button-toggle-group", 13), 
                core["\u0275\u0275template"](2, FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_div_1_pbi_button_toggle_2_Template, 2, 9, "pbi-button-toggle", 14), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "pbi-icon", 15), 
                core["\u0275\u0275listener"]("accessible-click", function($event) {
                    core["\u0275\u0275restoreView"](_r30);
                    var ctx_r29 = core["\u0275\u0275nextContext"](5);
                    return core["\u0275\u0275resetView"](ctx_r29.openContextMenu.fn({
                        event: $event
                    }));
                }), core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var currentPivots_r17 = core["\u0275\u0275nextContext"]().ngIf, ctx_r18 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", currentPivots_r17)("ngForTrackBy", ctx_r18.trackByPivotKeyFn), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 3, ctx_r18.mobileFormatting ? "Format_Settings_Options_Mobile" : "Format_Settings_Options"));
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_div_1_Template, 5, 5, "div", 11), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var formattingPane_r1 = core["\u0275\u0275nextContext"](3).ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", formattingPane_r1.showPivot);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_ng_container_1_Template, 2, 1, "ng-container", 0), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r13 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r13.currentPivots$));
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_8_div_3_div_1_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r40 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "formatting-card", 24, 25), 
                core["\u0275\u0275listener"]("valueChanged", function($event) {
                    var card_r37 = core["\u0275\u0275restoreView"](_r40).$implicit, ctx_r39 = core["\u0275\u0275nextContext"](5);
                    return core["\u0275\u0275resetView"](ctx_r39.onValueChange.fn([ $event, card_r37.pivotSource ]));
                })("onRevertToDefaultClicked", function($event) {
                    core["\u0275\u0275restoreView"](_r40);
                    var ctx_r41 = core["\u0275\u0275nextContext"](5);
                    return core["\u0275\u0275resetView"](ctx_r41.revertToDefault.fn($event));
                })("contextmenu", function($event) {
                    var card_r37 = core["\u0275\u0275restoreView"](_r40).$implicit, ctx_r42 = core["\u0275\u0275nextContext"](5);
                    return core["\u0275\u0275resetView"](ctx_r42.openContextMenu.fn({
                        event: $event,
                        card: card_r37
                    }));
                })("onToggled", function($event) {
                    var card_r37 = core["\u0275\u0275restoreView"](_r40).$implicit, ctx_r43 = core["\u0275\u0275nextContext"](5);
                    return core["\u0275\u0275resetView"](ctx_r43.toggleOutput.fn({
                        cardId: card_r37.uid,
                        groupId: $event.groupId,
                        source: $event.source,
                        toggleState: $event.toggleState,
                        formattingSource: card_r37.pivotSource
                    }));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](3, "hr", 26), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var card_r37 = ctx.$implicit, formattingPane_r1 = core["\u0275\u0275nextContext"](4).ngIf, ctx_r36 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("searchString", formattingPane_r1.searchString)("formattingCard", card_r37)("indicatorEnabled", ctx_r36.indicatorEnabled)("mobileFormatting", ctx_r36.mobileFormatting)("emphasize$", ctx_r36.cardEmphasis[card_r37.uid]), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("pbiEmphasisBorder", ctx_r36.emphasize$)("pbiEmphasisBorderColor", "var(--globalColorBrand140)");
            }
        }
        var formatting_pane_component_c3 = function() {
            return {
                ignoreOverlay: !1,
                ignoreMobile: !1
            };
        };
        function FormattingPaneComponent_ng_container_0_ng_container_8_div_3_div_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r46 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 21), core["\u0275\u0275listener"]("contextmenu", function($event) {
                    core["\u0275\u0275restoreView"](_r46);
                    var ctx_r45 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r45.openContextMenu.fn({
                        event: $event
                    }));
                }), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_container_8_div_3_div_1_ng_container_1_Template, 4, 7, "ng-container", 22), 
                core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275element"](3, "div", 23), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r34 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("pbiScrollbar", core["\u0275\u0275pureFunction0"](6, formatting_pane_component_c3))("pbiScrollbarDisabled", ctx_r34.disableScrollbar), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](2, 4, ctx_r34.cards$))("ngForTrackBy", ctx_r34.cardUid);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_8_div_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 19), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_container_8_div_3_div_1_Template, 4, 7, "div", 20), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var formattingPane_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r14 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275classMap"](ctx_r14.cardClasses), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngIf", formattingPane_r1.selectedPivot.key);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_container_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_container_8_ng_container_1_Template, 3, 3, "ng-container", 0), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, FormattingPaneComponent_ng_container_0_ng_container_8_div_3_Template, 2, 3, "div", 10), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var formattingPane_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 2, ctx_r4.selectedFormattingPivotType$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", formattingPane_r1.pivots);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_template_9_img_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "img", 31), 2 & rf) {
                var formattingPane_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                core["\u0275\u0275attribute"]("src", formattingPane_r1.pivotModelUnavailableImagePath, core["\u0275\u0275sanitizeUrl"]);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_template_9_a_3_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "a", 32), 2 & rf) {
                var formattingPane_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                core["\u0275\u0275propertyInterpolate"]("href", formattingPane_r1.pivotModelUnavailableLearnMoreLink, core["\u0275\u0275sanitizeUrl"]);
            }
        }
        function FormattingPaneComponent_ng_container_0_ng_template_9_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 27), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_template_9_img_1_Template, 1, 1, "img", 28), 
            core["\u0275\u0275element"](2, "span", 29), core["\u0275\u0275template"](3, FormattingPaneComponent_ng_container_0_ng_template_9_a_3_Template, 1, 1, "a", 30), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var formattingPane_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", formattingPane_r1.pivotModelUnavailableImagePath), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275propertyInterpolate"]("localize", formattingPane_r1.pivotModelUnavailableMessageKey), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", formattingPane_r1.pivotModelUnavailableLearnMoreLink);
            }
        }
        function FormattingPaneComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r55 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FormattingPaneComponent_ng_container_0_ng_container_1_Template, 4, 2, "ng-container", 0), 
                core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementStart"](3, "pbi-search-box", 1), 
                core["\u0275\u0275listener"]("searchCleared", function() {
                    core["\u0275\u0275restoreView"](_r55);
                    var ctx_r54 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r54.searchInputFormControl.setValue(""));
                }), core["\u0275\u0275element"](4, "input", 2, 3), core["\u0275\u0275pipe"](6, "localize"), 
                core["\u0275\u0275pipe"](7, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](8, FormattingPaneComponent_ng_container_0_ng_container_8_Template, 4, 4, "ng-container", 4), 
                core["\u0275\u0275template"](9, FormattingPaneComponent_ng_container_0_ng_template_9_Template, 4, 3, "ng-template", null, 5, core["\u0275\u0275templateRefExtractor"]), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var formattingPane_r1 = ctx.ngIf, _r5 = core["\u0275\u0275reference"](10), ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 6, ctx_r0.formattingPaneMessage$)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("formControl", ctx_r0.searchInputFormControl), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](6, 8, "SearchBox_Text"))("placeholder", core["\u0275\u0275pipeBind1"](7, 10, "SearchBox_Text")), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", !formattingPane_r1.pivotModelUnavailableMessageKey)("ngIfElse", _r5);
            }
        }
        var FormattingPaneComponentWrapper = function() {
            function FormattingPaneComponentWrapper(lazyScoped, changeDetector, componentStore, featureSwitchService) {
                var _this = this;
                this.changeDetector = changeDetector, this.componentStore = componentStore, this.featureSwitchService = featureSwitchService, 
                this.mobileFormatting = !1, this.disableScrollbar = !1, this.propertyChanged = new core.EventEmitter, 
                lazyScoped.get("formattingService").then(function(store) {
                    _this.formattingService = store, changeDetector.detectChanges();
                }), featureSwitchService.featureSwitches.onObject && lazyScoped.get(format_mode_lazy_load_routes.a).then(function(manager) {
                    _this.formattingUIManager = manager, changeDetector.detectChanges();
                });
            }
            return FormattingPaneComponentWrapper.prototype.ngOnChanges = function() {
                this.changeDetector.markForCheck();
            }, FormattingPaneComponentWrapper.\u0275fac = function(t) {
                return new (t || FormattingPaneComponentWrapper)(core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](FormattingPaneComponentStore), core["\u0275\u0275directiveInject"](feature_switch_service.vZ));
            }, FormattingPaneComponentWrapper.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormattingPaneComponentWrapper,
                selectors: [ [ "formatting-pane" ] ],
                inputs: {
                    formattingSources: "formattingSources",
                    indicatorEnabled: "indicatorEnabled",
                    mobileFormatting: "mobileFormatting",
                    disableScrollbar: "disableScrollbar",
                    disabledCards: "disabledCards",
                    disabledSlices: "disabledSlices"
                },
                outputs: {
                    propertyChanged: "propertyChanged"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ FormattingPaneComponentStore ]), core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 1,
                vars: 1,
                consts: [ [ 3, "formattingService", "formattingUIManager", "componentStore", "formattingSources", "indicatorEnabled", "mobileFormatting", "disableScrollbar", "disabledCards", "disabledSlices", "propertyChanged", 4, "ngIf" ], [ 3, "formattingService", "formattingUIManager", "componentStore", "formattingSources", "indicatorEnabled", "mobileFormatting", "disableScrollbar", "disabledCards", "disabledSlices", "propertyChanged" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, FormattingPaneComponentWrapper_formatting_pane_inner_0_Template, 1, 9, "formatting-pane-inner", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", ctx.formattingService && (ctx.featureSwitchService.featureSwitches.onObject && ctx.formattingUIManager || !ctx.featureSwitchService.featureSwitches.onObject));
                },
                dependencies: function() {
                    return [ common.NgIf, FormattingPaneComponent ];
                },
                styles: [ "[_nghost-%COMP%] { display: flex; flex-direction: column; flex-grow: 1 }" ],
                changeDetection: 0
            }), FormattingPaneComponentWrapper;
        }(), FormattingPaneComponent = function(_super) {
            function FormattingPaneComponent(componentFactoryResolver, contextActivityService, featureSwitchService, fileMenuService, highContrastCssGenerationService, localizationService, ngZone, paneVisibilityService, pbiMenuService, reportViewSettingsService, screenReaderService, selectionService, telemetryService, trustedVisual, undoRedo, visualPluginService) {
                var _this = _super.call(this) || this;
                return _this.componentFactoryResolver = componentFactoryResolver, _this.contextActivityService = contextActivityService, 
                _this.featureSwitchService = featureSwitchService, _this.fileMenuService = fileMenuService, 
                _this.highContrastCssGenerationService = highContrastCssGenerationService, _this.localizationService = localizationService, 
                _this.ngZone = ngZone, _this.paneVisibilityService = paneVisibilityService, _this.pbiMenuService = pbiMenuService, 
                _this.reportViewSettingsService = reportViewSettingsService, _this.screenReaderService = screenReaderService, 
                _this.selectionService = selectionService, _this.telemetryService = telemetryService, 
                _this.trustedVisual = trustedVisual, _this.undoRedo = undoRedo, _this.visualPluginService = visualPluginService, 
                _this.mobileFormatting = !1, _this.disableScrollbar = !1, _this.propertyChanged = new core.EventEmitter, 
                _this;
            }
            return (0, tslib_es6.__extends)(FormattingPaneComponent, _super), FormattingPaneComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.featureSwitches$ = this.featureSwitchService.featureSwitches$, this.formattingPane$ = this.componentStore.getViewModel$(), 
                this.selectedFormattingPivotType$ = this.formattingPane$.pipe((0, map.U)(function(formattingPane) {
                    return formattingPane.selectedPivot.key;
                }), (0, distinctUntilChanged.x)()), this.componentStore.onAvailablePivotsChanged(this.changes$("formattingSources"));
                var disabledInformation$ = (0, combineLatest.aj)([ this.changes$("disabledCards"), this.changes$("disabledSlices") ]).pipe((0, 
                map.U)(function(_a) {
                    return {
                        disabledCards: _a[0],
                        disabledSlices: _a[1]
                    };
                }));
                this.componentStore.updateDisabledInformation(disabledInformation$), this.currentPivots$ = this.formattingPane$.pipe((0, 
                map.U)(function(formattingPane) {
                    return Object.entries(formattingPane.pivots).map(function(_a) {
                        var pivot = _a[1];
                        return {
                            pivotKey: _a[0],
                            pivotDisplayName: pivot && pivot.pivotDisplayName
                        };
                    });
                })), this.formattingPaneMessage$ = this.formattingPane$.pipe((0, map.U)(function(formattingPaneViewModel) {
                    var _a, formattingModelMessage = null === (_a = formattingPaneViewModel.pivots[formattingPaneViewModel.selectedPivot.key]) || void 0 === _a ? void 0 : _a.formattingModelMessage;
                    if (formattingModelMessage) return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingModelMessage), {
                        messageBannerModel: {
                            bannerType: 3,
                            iconName: "glyphicon glyph-small pbi-glyph-info",
                            message: _this.localizationService.get(formattingModelMessage.messageKey)
                        }
                    });
                })), this.formattingPane$.subscribe(function(formattingPane) {
                    formattingPane.itemsMatched && _this.screenReaderService.alert(_this.localizationService.format("Matches_Found", formattingPane.itemsMatched));
                }), this.cards$ = this.formattingPane$.pipe((0, switchMap.w)(function(formattingPaneViewModel) {
                    var _a, formattingViewModel = formattingPaneViewModel.pivots[formattingPaneViewModel.selectedPivot.key], cards = null !== (_a = formattingViewModel && formattingViewModel.cards) && void 0 !== _a ? _a : {};
                    return (0, combineLatest.aj)(Object.keys(cards).map(function(cardId) {
                        return _this.componentStore.selectCard(cardId);
                    })).pipe((0, map.U)(function(cards) {
                        return _.sortBy(_.compact(cards), function(item) {
                            return item.index;
                        });
                    }));
                }), (0, distinctUntilChanged.x)(function(oldValue, newValue) {
                    return _.isEqual(oldValue, newValue);
                }));
                var onObject$ = this.featureSwitchService.featureSwitches$.pipe((0, map.U)(function(featureSwitches) {
                    return featureSwitches.onObject;
                }), (0, distinctUntilChanged.x)());
                (0, combineLatest.aj)([ this.selectedFormattingPivotType$, this.cards$, onObject$ ]).pipe((0, 
                filter.h)(function(_a) {
                    return _a[2];
                }), (0, takeUntil.R)(this.onDestroy$)).subscribe(function(_a) {
                    var selectedPivotKey = _a[0], cards = _a[1];
                    if ("Page" === selectedPivotKey) _this.formattingService.startFormattingTutorial("DrillthroughTutorial"); else if ("Visual" === selectedPivotKey) {
                        var isVisualReferenceLineVisible = cards.some(function(card) {
                            return card.uid === "".concat("Visual", "-").concat("referenceLine");
                        });
                        _this.formattingService.startFormattingTutorial("AnalyticsPaneMoveTutorial", {
                            selector: isVisualReferenceLineVisible ? '[data-unique-id="Visual-referenceLine"] [data-testid="formatting-card-button"]' : "formatting-pane formatting-card:nth-last-of-type(1) button"
                        });
                    }
                }), this.reportViewSettingsService && this.reportViewSettingsService.getReportViewSettingsChanged().userSettings$.pipe((0, 
                withLatestFrom.M)(this.formattingPane$), (0, takeUntil.R)(this.onDestroy$), (0, 
                filter.h)(function(_a) {
                    return "formatPaneExpandSubcategories" === _a[0].propertyName;
                })).subscribe(function(_a) {
                    var viewModel = _a[1], expanded = _a[0].value;
                    Object.keys(viewModel.pivots).map(function(key) {
                        var cardUids = Object.keys(viewModel.pivots[key].cards);
                        _this.componentStore.setAllExpansionState({
                            expanded: !1,
                            pivotKey: key,
                            source: 1
                        }), cardUids.forEach(function(cardId) {
                            _this.componentStore.setAllExpansionState({
                                cardId,
                                expanded,
                                pivotKey: key,
                                source: 0
                            });
                        });
                    });
                }), this.setEventAdapters(), this.initializeHighContrastRules(), this.initEmphasis();
            }, FormattingPaneComponent.prototype.ngAfterViewInit = function() {
                var _this = this;
                this.setFormatPaneTypeEventAdapter(), (0, combineLatest.aj)([ this.formattingPane$, this.cards.changes ]).pipe((0, 
                takeUntil.R)(this.onDestroy$), (0, filter.h)(function(_a) {
                    return !(!_a[1] || !_a[0].scrollCardToTop);
                })).subscribe(function(_a) {
                    _this.scrollCardToTop(_a[0].scrollCardToTop.uid);
                }), this.paneVisibilityService.getFocusedPane$().pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(focusedPane) {
                    "format" === focusedPane && setTimeout(function() {
                        var _a, _b;
                        null === (_b = null === (_a = _this.searchInput) || void 0 === _a ? void 0 : _a.nativeElement) || void 0 === _b || _b.focus();
                    });
                });
            }, Object.defineProperty(FormattingPaneComponent.prototype, "cardClasses", {
                get: function() {
                    return this.disableScrollbar ? "cards disableScrollbar" : "cards enableScrollbar";
                },
                enumerable: !1,
                configurable: !0
            }), FormattingPaneComponent.prototype.scrollCardToTop = function(cardUid) {
                var cardComponent, _this = this;
                if (cardUid && (cardComponent = this.cards.find(function(card) {
                    return card.formattingCard.uid === cardUid;
                })), this.scrollCardToTopAnimator && (this.scrollCardToTopAnimator.stop(), this.scrollCardToTopAnimator = void 0), 
                cardComponent) {
                    var scrollCardToTopManager_1 = this.scrollCardToTopAnimator = new ScrollToTopAnimator($(cardComponent.elem.nativeElement), "scroller", "scrollCardToTopSpacer", {
                        duration: 500,
                        power: 2,
                        ngZone: this.ngZone,
                        onDone: function() {
                            _this.scrollCardToTopAnimator === scrollCardToTopManager_1 && (_this.scrollCardToTopAnimator = void 0);
                        }
                    });
                    scrollCardToTopManager_1.start(), this.componentStore.updateScrollCardToTop(void 0);
                }
            }, FormattingPaneComponent.prototype.setEventAdapters = function() {
                this.setSearchStringFormControl(), this.setOnValueChangeEventAdapter(), this.setToggleOutputEventAdapter(), 
                this.setRevertToDefaultEventAdapter(), this.setOpenContextMenuEventAdapter();
            }, FormattingPaneComponent.prototype.setSearchStringFormControl = function() {
                var _this = this;
                this.searchInputFormControl = new fesm2022_forms.p4("");
                var filter$ = this.searchInputFormControl.valueChanges.pipe((0, startWith.O)(""), (0, 
                debounceTime.b)(200), (0, distinctUntilChanged.x)(), (0, shareReplay.d)(1));
                this.componentStore.updateSearchString(filter$), filter$.pipe((0, skip.T)(1)).subscribe(function() {
                    _this.handleFormatModeInteraction();
                }), filter$.pipe((0, map.U)(function(searchString) {
                    return !!searchString;
                })).pipe((0, distinctUntilChanged.x)(), (0, filter.h)(function(hasSearchString) {
                    return hasSearchString;
                })).subscribe(function() {
                    return _this.telemetryService.logEvent(events.rU);
                });
            }, FormattingPaneComponent.prototype.setFormatPaneTypeEventAdapter = function() {
                var _this = this;
                this.formattingPivotTypeButtonChange = this.createEventAdapter();
                var formattingPivotTypeChange$ = this.formattingPivotTypeButtonChange.$.pipe((0, 
                filter.h)(function(e) {
                    return e.checked;
                }), (0, map.U)(function(e) {
                    return e.value;
                }));
                formattingPivotTypeChange$.subscribe(function() {
                    _this.handleFormatModeInteraction();
                }), this.componentStore.updateSelectedPivot(formattingPivotTypeChange$), (0, combineLatest.aj)([ this.changes$("formattingSources"), this.pbiSearchBoxList.changes ]).subscribe(function(_a) {
                    var searchBoxList = _a[1];
                    _this.searchInputFormControl.setValue(""), searchBoxList.length > 0 && searchBoxList.first.clearSearchText();
                });
            }, FormattingPaneComponent.prototype.setOnValueChangeEventAdapter = function() {
                var _this = this;
                this.onValueChange = this.createEventAdapter(), this.onValueChange.$.pipe().subscribe(function(_a) {
                    var formattingSaveObject = _a[0];
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var selectedVisual, affectedVisuals, formattingSaveObjectWithCanvasItems, isEditableContainerWithSelectionChangeOnly, _this = this;
                        return (0, tslib_es6.__generator)(this, function(_b) {
                            switch (_b.label) {
                              case 0:
                                return selectedVisual = this.getSelectedVisual(), affectedVisuals = selectionUtils.UP.getSelectedCanvasItems(this.selectionService), 
                                formattingSaveObjectWithCanvasItems = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSaveObject), {
                                    changes: formattingSaveObject.changes.map(function(change) {
                                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, change), {
                                            canvasItems: affectedVisuals
                                        });
                                    })
                                }), isEditableContainerWithSelectionChangeOnly = this.formattingService.isEditableContainerWithSelectionChangeOnly(formattingSaveObjectWithCanvasItems), 
                                formattingSaveObjectWithCanvasItems.suppressSave ? [ 3, 2 ] : [ 4, this.componentStore.saveValues(formattingSaveObjectWithCanvasItems, {
                                    source: "Pane",
                                    paneType: "format"
                                }) ];

                              case 1:
                                _b.sent(), formattingSaveObjectWithCanvasItems.changes.forEach(function(formattingChange) {
                                    var _a, _b;
                                    _this.propertyChanged.emit({
                                        cardName: formattingChange.objectName,
                                        sliceName: null === (_a = formattingChange.propertySlice) || void 0 === _a ? void 0 : _a.name,
                                        visualType: null === (_b = null == selectedVisual ? void 0 : selectedVisual.config) || void 0 === _b ? void 0 : _b.singleVisual.visualType,
                                        visualUniqueName: null == selectedVisual ? void 0 : selectedVisual.name
                                    });
                                }), _b.label = 2;

                              case 2:
                                return (_.some(formattingSaveObjectWithCanvasItems.changes, function(change) {
                                    return change.objectName === formatting_utils.nB;
                                }) || isEditableContainerWithSelectionChangeOnly) && debug.fF.assert(function() {
                                    return 1 === _.size(formattingSaveObjectWithCanvasItems.changes);
                                }, "we support only one container object changes at a time"), formattingSaveObjectWithCanvasItems.suppressSave && (this.componentStore.updateSlicesState(formattingSaveObjectWithCanvasItems), 
                                this.componentStore.updateRevertToDefaultEnabledState(formattingSaveObjectWithCanvasItems)), 
                                formattingSaveObjectWithCanvasItems.changes.some(function(change) {
                                    return change.isTopLevelToggle;
                                }) && this.handleFormatModeInteraction(), [ 2 ];
                            }
                        });
                    });
                });
            }, FormattingPaneComponent.prototype.setToggleOutputEventAdapter = function() {
                var _this = this;
                this.toggleOutput = this.createEventAdapter(), this.toggleOutput.$.pipe((0, withLatestFrom.M)(this.formattingPane$), (0, 
                tap.b)(function(_a) {
                    var toggleOutput = _a[0], toggleType = isExpanded(toggleOutput.toggleState, "" !== _a[1].searchString) ? "Expand" : "Collapse";
                    if (toggleOutput.groupId && formattingPaneTelemetryGroupsAllowList.has(toggleOutput.groupId)) _this.telemetryService.logEvent(events.lG, {
                        uid: toggleOutput.groupId,
                        toggleType
                    }); else if (!toggleOutput.groupId && toggleOutput.cardId && formattingPaneTelemetryCardsAllowList.has(toggleOutput.cardId)) _this.telemetryService.logEvent(events.lG, {
                        uid: toggleOutput.cardId,
                        toggleType
                    }); else if (toggleOutput.groupId) {
                        var uidSegments = toggleOutput.groupId.split("-");
                        if (uidSegments.length > 1) {
                            var potentialLoggableUid = "".concat(uidSegments[0], "-").concat(uidSegments[uidSegments.length - 1]);
                            formattingPaneTelemetryGroupsAllowList.has(potentialLoggableUid) && _this.telemetryService.logEvent(events.lG, {
                                uid: potentialLoggableUid,
                                toggleType
                            });
                        }
                    }
                })).subscribe(function(_a) {
                    _this.componentStore.updateToggleState(_a[0]), _this.handleFormatModeInteraction();
                });
            }, FormattingPaneComponent.prototype.setRevertToDefaultEventAdapter = function() {
                var _this = this;
                this.revertToDefault = this.createEventAdapter(), this.revertToDefault.$.pipe((0, 
                withLatestFrom.M)(this.formattingPane$), (0, tap.b)(function(_a) {
                    var revertToDefaultOptions = _a[0];
                    formattingPaneTelemetryCardsAllowList.has(revertToDefaultOptions.cardId) && _this.telemetryService.logEvent(events.G5, {
                        uid: revertToDefaultOptions.cardId
                    });
                })).subscribe(function(_a) {
                    var revertToDefaultOptions = _a[0], viewModel = _a[1];
                    _this.undoRedo.register("RevertFormattingPane", function() {
                        var _a, _b, affectedVisuals = selectionUtils.UP.getSelectedCanvasItems(_this.selectionService), hasCustomVisual = _.some(affectedVisuals, function(visual) {
                            return (0, visual_session_telemetry_utils.v)(visual, _this.visualPluginService, _this.trustedVisual);
                        }), revertToDefaultDescriptorsWithCanvasItems = _.map(revertToDefaultOptions.revertToDefaultDescriptors, function(descriptor) {
                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                canvasItems: affectedVisuals
                            });
                        });
                        if (hasCustomVisual) _this.componentStore.revertToDefault(revertToDefaultDescriptorsWithCanvasItems, revertToDefaultOptions.cardId); else {
                            var revertToDefaultActivity = _this.createFormattingTelemetry(null === (_b = null === (_a = viewModel.canvasItem) || void 0 === _a ? void 0 : _a.value) || void 0 === _b ? void 0 : _b.name, null == revertToDefaultOptions ? void 0 : revertToDefaultOptions.cardId, "Revert To Default");
                            try {
                                _this.componentStore.revertToDefault(revertToDefaultDescriptorsWithCanvasItems, revertToDefaultOptions.cardId), 
                                revertToDefaultActivity.resolve();
                            } catch (exception) {
                                throw revertToDefaultActivity.reject(exception), exception;
                            }
                        }
                    }), _this.screenReaderService.alert(_this.localizationService.format("RevertToDefaultActivated_Visual_FormatPane_Card", _this.localizationService.get(viewModel.formattingSettingsString), revertToDefaultOptions.cardName, _this.localizationService.get(viewModel.itemTypeDisplayName)));
                });
            }, FormattingPaneComponent.prototype.createFormattingTelemetry = function(visualName, objectName, name) {
                return this.contextActivityService.createActivity({
                    name,
                    data: {
                        objectName,
                        source: "Pane",
                        paneType: "format"
                    },
                    visualName
                });
            }, FormattingPaneComponent.prototype.setOpenContextMenuEventAdapter = function() {
                var _this = this;
                this.openContextMenu = this.createEventAdapter(), this.openContextMenu.$.pipe((0, 
                withLatestFrom.M)(this.formattingPane$)).subscribe(function(_a) {
                    var _b = _a[0];
                    return _this.openMenu(_b.event, _a[1], _b.card);
                });
            }, FormattingPaneComponent.prototype.openMenu = function(event, viewModel, card) {
                var _this = this, origin = this.isMouseEvent(event) ? {
                    element: event.target,
                    x: event.x,
                    y: event.y
                } : event.target, menuItems = [ {
                    id: 0,
                    type: pbi_menu_contracts.iB.Button,
                    text: this.localizationService.get(this.mobileFormatting ? "Reset_All_Settings_Mobile" : "Reset_All_Settings")
                }, {
                    type: pbi_menu_contracts.iB.Divider
                }, {
                    id: 1,
                    type: pbi_menu_contracts.iB.Button,
                    text: this.localizationService.get("ExpandAllCategories")
                }, {
                    id: 2,
                    type: pbi_menu_contracts.iB.Button,
                    text: this.localizationService.get("CollapseAllCategories")
                } ];
                if (card && isExpanded(card.toggleState, "" !== viewModel.searchString)) {
                    var groups_1 = viewModel.pivots[viewModel.selectedPivot.key].groups, areSubcategoriesCollapsible = _.some(card.groupUids, function(groupId) {
                        return groups_1[groupId].collapsible;
                    });
                    menuItems.push({
                        type: pbi_menu_contracts.iB.Divider
                    }, {
                        id: 3,
                        type: pbi_menu_contracts.iB.Button,
                        text: this.localizationService.get("ExpandAllSubcategories"),
                        disabled: !areSubcategoriesCollapsible,
                        data: card.uid
                    }, {
                        id: 4,
                        type: pbi_menu_contracts.iB.Button,
                        text: this.localizationService.get("CollapseAllSubcategories"),
                        disabled: !areSubcategoriesCollapsible,
                        data: card.uid
                    });
                }
                this.fileMenuService && menuItems.push({
                    type: pbi_menu_contracts.iB.Divider
                }, {
                    id: 5,
                    type: pbi_menu_contracts.iB.Button,
                    text: this.localizationService.get("Options_Menu")
                }), this.pbiMenuService.open({
                    menu: {
                        items: menuItems
                    },
                    origin,
                    componentFactoryResolver: this.componentFactoryResolver,
                    closeOnButtonClick: !0,
                    menuMode: pbi_menu_contracts.Kb.Compact
                }).onButtonClick$.pipe((0, take.q)(1)).subscribe(function(item) {
                    _this.menuItemClick(item, viewModel), _this.handleFormatModeInteraction();
                }), event.stopPropagation(), event.preventDefault();
            }, FormattingPaneComponent.prototype.isMouseEvent = function(event) {
                return void 0 !== event.x;
            }, FormattingPaneComponent.prototype.menuItemClick = function(menuItem, viewModel) {
                var _this = this, id = menuItem.id;
                switch (id) {
                  case 0:
                    return this.telemetryService.logEvent(events.cF, {
                        buttonName: "Reset_All_Settings"
                    }), this.undoRedo.register("RevertFormattingPane", function() {
                        Object.keys(viewModel.pivots).map(function(key) {
                            var affectedVisuals = selectionUtils.UP.getSelectedCanvasItems(_this.selectionService), revertToDefaultDescriptorsWithCanvasItems = _.map(viewModel.pivots[key].revertToDefaultDescriptors, function(descriptor) {
                                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                    canvasItems: affectedVisuals
                                });
                            });
                            _this.componentStore.revertToDefault(revertToDefaultDescriptorsWithCanvasItems);
                        });
                    }), void this.screenReaderService.alert(this.localizationService.format("RevertToDefaultActivated_Visual_FormatPane", this.localizationService.get(viewModel.formattingSettingsString), this.localizationService.get(viewModel.itemTypeDisplayName)));

                  case 1:
                    return this.telemetryService.logEvent(events.cF, {
                        buttonName: "ExpandAllCategories"
                    }), void this.componentStore.setAllExpansionState({
                        expanded: !0,
                        source: 1
                    });

                  case 2:
                    return this.telemetryService.logEvent(events.cF, {
                        buttonName: "CollapseAllCategories"
                    }), void this.componentStore.setAllExpansionState({
                        expanded: !1,
                        source: 1
                    });

                  case 3:
                    return this.telemetryService.logEvent(events.cF, {
                        buttonName: "ExpandAllSubcategories"
                    }), void this.componentStore.setAllExpansionState({
                        cardId: menuItem.data,
                        expanded: !0,
                        source: 0
                    });

                  case 4:
                    return this.telemetryService.logEvent(events.cF, {
                        buttonName: "CollapseAllSubcategories"
                    }), void this.componentStore.setAllExpansionState({
                        cardId: menuItem.data,
                        expanded: !1,
                        source: 0
                    });

                  case 5:
                    return this.telemetryService.logEvent(events.cF, {
                        buttonName: "OpenReportSettings"
                    }), void this.fileMenuService.handleMenuItem("manageSettings", "reportSettings");

                  default:
                    return void debug.fF.assertNever(id);
                }
            }, FormattingPaneComponent.prototype.cardUid = function(_index, card) {
                return card.uid;
            }, FormattingPaneComponent.prototype.getSelectedVisual = function() {
                return selectionUtils.UP.getDefaultSelectedVisualInSingleOrMultiCase(this.selectionService);
            }, FormattingPaneComponent.prototype.trackByPivotKeyFn = function(index, pivotInformation) {
                return pivotInformation.pivotKey;
            }, FormattingPaneComponent.prototype.handleFormatModeInteraction = function() {
                this.featureSwitchService.featureSwitches.onObject && this.formattingUIManager.handleFormatPaneInteraction();
            }, FormattingPaneComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule("formatting-pane .top-navigation pbi-button-toggle-group .text.selected::after", "{ background-color: @selectedBackgroundColor !important; }");
            }, FormattingPaneComponent.prototype.initEmphasis = function() {
                var _this = this;
                this.cardEmphasis = {}, this.cardEmphasisSubjects = {}, this.cardEmphasisRemovalSubjects = {}, 
                this.featureSwitchService.featureSwitches.onObject && (this.emphasize$ = this.paneVisibilityService.getPaneEmphasis$("format"), 
                this.cards$.pipe((0, startWith.O)(void 0), (0, pairwise.G)()).subscribe(function(_a) {
                    var _b, prevCards = _a[0], currCards = _a[1], prevCardUids = new Set(null !== (_b = null == prevCards ? void 0 : prevCards.map(function(card) {
                        return card.uid;
                    })) && void 0 !== _b ? _b : []), addedCardUids = [];
                    null == currCards || currCards.forEach(function(card) {
                        var currCardUid = card.uid;
                        prevCardUids.has(currCardUid) ? prevCardUids.delete(currCardUid) : addedCardUids.push(currCardUid);
                    });
                    var removedCardUids = Array.from(prevCardUids), cardEmphasis = _this.cardEmphasis, cardEmphasisSubjects = _this.cardEmphasisSubjects, cardEmphasisRemovalSubjects = _this.cardEmphasisRemovalSubjects;
                    addedCardUids.forEach(function(cardUid) {
                        var emphasisSubject = new Subject.xQ;
                        cardEmphasisSubjects[cardUid] = emphasisSubject;
                        var removalSubject = new Subject.xQ;
                        cardEmphasisRemovalSubjects[cardUid] = removalSubject, cardEmphasis[cardUid] = (0, 
                        merge.T)(emphasisSubject, _this.emphasize$).pipe((0, takeUntil.R)((0, merge.T)(removalSubject, _this.onDestroy$)));
                    }), removedCardUids.forEach(function(cardUid) {
                        cardEmphasisSubjects[cardUid].complete(), cardEmphasisSubjects[cardUid] = void 0;
                        var removalSubject = cardEmphasisRemovalSubjects[cardUid];
                        removalSubject.next(), removalSubject.complete(), cardEmphasisRemovalSubjects[cardUid] = void 0, 
                        cardEmphasis[cardUid] = void 0;
                    });
                }));
            }, FormattingPaneComponent.\u0275fac = function(t) {
                return new (t || FormattingPaneComponent)(core["\u0275\u0275directiveInject"](core.ComponentFactoryResolver), core["\u0275\u0275directiveInject"](context_activity_service.r), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](fileMenuService.P, 8), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](core.NgZone), core["\u0275\u0275directiveInject"](panes_visibility_service.r), core["\u0275\u0275directiveInject"](pbi_menu_service.o), core["\u0275\u0275directiveInject"](reportViewSettings.a, 8), core["\u0275\u0275directiveInject"](screen_reader_service.g), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](Telemetry.y0), core["\u0275\u0275directiveInject"](trusted_visual_service.t), core["\u0275\u0275directiveInject"](undo_redo_service.z), core["\u0275\u0275directiveInject"](visual_plugin_service.D));
            }, FormattingPaneComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormattingPaneComponent,
                selectors: [ [ "formatting-pane-inner" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](formatting_pane_component_c0, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](pbi_search_box_component.a, 5), core["\u0275\u0275viewQuery"](formatting_pane_component_c1, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.searchInput = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.pbiSearchBoxList = _t), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.cards = _t);
                    }
                },
                inputs: {
                    formattingService: "formattingService",
                    formattingUIManager: "formattingUIManager",
                    componentStore: "componentStore",
                    formattingSources: "formattingSources",
                    indicatorEnabled: "indicatorEnabled",
                    mobileFormatting: "mobileFormatting",
                    disableScrollbar: "disableScrollbar",
                    disabledCards: "disabledCards",
                    disabledSlices: "disabledSlices"
                },
                outputs: {
                    propertyChanged: "propertyChanged"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ 4, "ngIf" ], [ 3, "searchCleared" ], [ "pbiSearchInput", "", 1, "pbi-focus-outline", 3, "formControl" ], [ "searchInput", "" ], [ 4, "ngIf", "ngIfElse" ], [ "showUnavaliable", "" ], [ 1, "formatting-pane-message" ], [ 3, "viewModel" ], [ "class", "pbi-modern-button secondaryBtn compact", 3, "localize", "click", 4, "ngIf" ], [ 1, "pbi-modern-button", "secondaryBtn", "compact", 3, "localize", "click" ], [ "focus-formatting-cards", "", 3, "class", 4, "ngIf" ], [ "class", "top-navigation themeableElement", 4, "ngIf" ], [ 1, "top-navigation", "themeableElement" ], [ "role", "tablist", "tabindex", "-1", "focus-pivot-root", "" ], [ "focus-pivot", "", "tabindex", "-1", 3, "role", "checked", "value", "buttonTabIndex", "pivot-tab-key-handler", "valueChanged", "onActiveSection", 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ "name", "more", "role", "button", "size", "small", 3, "pbiTooltip", "accessible-click" ], [ "focus-pivot", "", "tabindex", "-1", 3, "role", "checked", "value", "buttonTabIndex", "pivot-tab-key-handler", "valueChanged", "onActiveSection" ], [ "class", "text", 3, "selected", "localize", 4, "ngIf" ], [ 1, "text", 3, "localize" ], [ "focus-formatting-cards", "" ], [ "class", "scroller", 3, "pbiScrollbar", "pbiScrollbarDisabled", "contextmenu", 4, "ngIf" ], [ 1, "scroller", 3, "pbiScrollbar", "pbiScrollbarDisabled", "contextmenu" ], [ 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ 1, "scrollCardToTopSpacer", 2, "height", "0px" ], [ 3, "searchString", "formattingCard", "indicatorEnabled", "mobileFormatting", "emphasize$", "valueChanged", "onRevertToDefaultClicked", "contextmenu", "onToggled" ], [ "card", "" ], [ 3, "pbiEmphasisBorder", "pbiEmphasisBorderColor" ], [ "role", "alert", 1, "unavailable" ], [ "class", "image", 4, "ngIf" ], [ 3, "localize" ], [ "class", "learnMore", "target", "_blank", "localize", "LearnMore", 3, "href", 4, "ngIf" ], [ 1, "image" ], [ "target", "_blank", "localize", "LearnMore", 1, "learnMore", 3, "href" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, FormattingPaneComponent_ng_container_0_Template, 11, 12, "ng-container", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.formattingPane$));
                },
                dependencies: [ common.NgForOf, common.NgIf, pivot_tab_key_handler.H, fesm2022_forms.Fj, fesm2022_forms.JJ, localize_directive.X, accessible_click_directive.t, pbi_button_toggle_component.I, pbi_button_toggle_group_component.J, PbiEmphasisBorderDirective, pbi_icon_component._, pbi_scrollbar_directive.r, pbi_search_box_component.a, pbi_search_box_component.p, pbi_tooltip_directive.V, fesm2022_forms.oH, message_banner_component.A, FormattingCardComponent, common.AsyncPipe, localize_pipe.F ],
                styles: [ '[_nghost-%COMP%]{display:flex;flex-direction:column;flex-grow:1}pbi-search-box[_ngcontent-%COMP%]{flex:none;margin:4px 8px 12px}.formatting-pane-message[_ngcontent-%COMP%]{margin:0 8px 8px 0;display:flex;flex-direction:column}.formatting-pane-message[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:0 4px;align-self:flex-end}.unavailable[_ngcontent-%COMP%]{--learn-more-link-color: var(--fluent-theme-link-color, #0078D4);flex:1;display:flex;flex-direction:column;justify-content:center;align-items:center;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600)}  [data-legacy-theming=false] .unavailable{--learn-more-link-color: var(--colorBrandForegroundLink)}html:not([dir="rtl"])[_nghost-%COMP%]   .unavailable[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .unavailable[_ngcontent-%COMP%]{padding:20px 16px 64px}html[dir="rtl"][_nghost-%COMP%]   .unavailable[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .unavailable[_ngcontent-%COMP%]{padding:20px 16px 64px}.unavailable[_ngcontent-%COMP%]   .image[_ngcontent-%COMP%]{height:40px;margin-bottom:12px}.unavailable[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{text-align:center}.unavailable[_ngcontent-%COMP%]   .learnMore[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);margin-top:12px;text-decoration:none;color:var(--learn-more-link-color)}.top-navigation[_ngcontent-%COMP%]{--selected-tab-highlight-color: var(--fluent-theme-primary-color, #F2C811);flex:none;padding-left:8px;padding-right:8px;display:flex;justify-content:space-between}  [data-legacy-theming=false] .top-navigation{--selected-tab-highlight-color: var(--colorCompoundBrandBackground)}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]{display:flex;overflow:hidden;flex:1 1 0;margin-bottom:10px}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .text[_ngcontent-%COMP%]{text-overflow:ellipsis;overflow:hidden;padding:4px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400)}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .text.selected[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600)}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .text[_ngcontent-%COMP%]:after{content:"";display:block;width:100%;height:2px;margin-top:4px}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .text.selected[_ngcontent-%COMP%]:after{background-color:var(--selected-tab-highlight-color)}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]{display:flex;overflow:hidden}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle.checked[_ngcontent-%COMP%]{flex:none;max-width:calc(100% - 44px)}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:not(.checked){flex-basis:auto;min-width:44px}.top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{background-color:var(--gray-40, #E1DFDD)}html:not([dir="rtl"])[_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child, html:not([dir="rtl"])   [_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child{margin-right:8px}html[dir="rtl"][_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child, html[dir="rtl"]   [_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child{margin-left:8px}html[data-focus-source="key"][_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within, html[data-focus-source="key"]   [_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:-1px}.top-navigation[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{padding:6px 8px 10px}.top-navigation[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]:focus{outline:none}html[data-focus-source="key"][_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]:focus, html[data-focus-source="key"]   [_nghost-%COMP%]   .top-navigation[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}hr[_ngcontent-%COMP%]{--hr-color: var(--gray-40, #E1DFDD);border:none;border-top:1px solid var(--hr-color);margin:0}  [data-legacy-theming=false] hr{--hr-color: var(--colorNeutralStroke1)}.cards[_ngcontent-%COMP%]{flex-grow:1;flex-shrink:1;flex-basis:0}.disableScrollbar[_ngcontent-%COMP%]{overflow:unset}.enableScrollbar[_ngcontent-%COMP%]{overflow:hidden}' ],
                changeDetection: 0
            }), FormattingPaneComponent;
        }(rx_component.w), a11y_module = __webpack_require__(20914), ExploreUI_module = __webpack_require__(87121), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), pbi_scrollbar_module = __webpack_require__(72359), UILibrary_module = __webpack_require__(94785), font_picker_module = __webpack_require__(45925), num_up_down_module = __webpack_require__(91382), pbi_button_toggle_module = __webpack_require__(53935), pbi_checkbox_module = __webpack_require__(47913), pbi_dropdown_module = __webpack_require__(6015), pbi_emphasis_module = __webpack_require__(76433), pbi_highlight_module = __webpack_require__(47542), pbi_icon_module = __webpack_require__(93367), pbi_search_box_module = __webpack_require__(39433), pbi_spin_button_module = __webpack_require__(55533), pbi_svg_use_symbol_module = __webpack_require__(79725), pbi_toggle_button_module = __webpack_require__(63766), pbi_tooltip_module = __webpack_require__(16095), slider_module = __webpack_require__(6618), theme_color_picker_module = __webpack_require__(27037), tri_svg_icon = __webpack_require__(17177), manifests = [ {
            type: FormattingPaneComponentWrapper,
            componentId: "FormattingPaneComponentId"
        }, {
            type: GradientBarComponent,
            componentId: "GradientBarComponentId"
        }, {
            type: ToggleSwitchModernComponent,
            componentId: "ToggleSwitchModernComponentId"
        }, {
            type: WarningComponent,
            componentId: "WarningComponentId"
        } ], PaneFormattingModule = function() {
            function PaneFormattingModule() {}
            return PaneFormattingModule.\u0275fac = function(t) {
                return new (t || PaneFormattingModule);
            }, PaneFormattingModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: PaneFormattingModule
            }), PaneFormattingModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ExploreUIAuthoringDirectivesModule, ExploreUI_module.J, font_picker_module.e, fesm2022_forms.u5, lazy_load_module.N.withManifests(manifests), localization_module.v, num_up_down_module.d, a11y_module._, pbi_button_toggle_module.e, pbi_checkbox_module.V, pbi_dropdown_module.C, pbi_emphasis_module.d, pbi_highlight_module.d, pbi_icon_module.U, pbi_scrollbar_module.K, pbi_search_box_module.t, pbi_spin_button_module.q, pbi_svg_use_symbol_module.j, pbi_tooltip_module.Z, fesm2022_forms.UX, pbi_toggle_button_module.l, slider_module.J, theme_color_picker_module.b, tri_svg_icon.T6, UILibrary_module.g ]
            }), PaneFormattingModule;
        }();
    },
    43859: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            H: function() {
                return PivotTabKeyHandlerDirective;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57470), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), PivotTabKeyHandlerDirective = function() {
            function PivotTabKeyHandlerDirective() {
                this.onActiveSection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, 
                this.observedTargetsMap = new Map;
            }
            return PivotTabKeyHandlerDirective.prototype.onKeyDown = function(event) {
                var currentSectionIndex, options = this.options, sections = this.options.sections, length = sections.length;
                switch (event.keyCode) {
                  case 37:
                  case 38:
                    currentSectionIndex = sections.findIndex(function(section) {
                        return section === options.currentSection;
                    }), this.switchTab(sections[(currentSectionIndex - 1 + length) % length], event, !0);
                    break;

                  case 39:
                  case 40:
                    currentSectionIndex = sections.findIndex(function(section) {
                        return section === options.currentSection;
                    }), this.switchTab(sections[(currentSectionIndex + 1) % length], event);
                }
            }, PivotTabKeyHandlerDirective.prototype.switchTab = function(nextSection, event, backwards) {
                var _this = this;
                void 0 === backwards && (backwards = void 0);
                var target = event.target, observer = new MutationObserver(function(record) {
                    for (var _loop_1 = function(mutation) {
                        if ("attributes" === mutation.type && "tabindex" === mutation.attributeName && document.activeElement === target) {
                            var pivotRootElement_1 = _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getFirstMatchingAncestor(target, function(e) {
                                return e.hasAttribute(_this.options.rootAttribute);
                            }), nextTabPivot = void 0;
                            null == (nextTabPivot = backwards ? _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getPrevTabbableMatchingSibling(target, function(e) {
                                return !!_powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getFirstMatchingAncestor(e, function(e) {
                                    return e.hasAttribute(_this.options.pivotAttribute);
                                }, pivotRootElement_1, !0);
                            }, pivotRootElement_1) : _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getNextTabbableMatchingSibling(target, function(e) {
                                return !!_powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getFirstMatchingAncestor(e, function(e) {
                                    return e.hasAttribute(_this.options.pivotAttribute);
                                }, pivotRootElement_1, !0);
                            }, pivotRootElement_1)) || nextTabPivot.focus();
                        }
                    }, _i = 0, record_1 = record; _i < record_1.length; _i++) _loop_1(record_1[_i]);
                    var observedTarget = _this.observedTargetsMap.has(target);
                    observedTarget || _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PivotTabKeyHandler does not have the correct observed target on mutation observer callback - possibly detached early"), 
                    observer.disconnect();
                    var observedTargetCount = _this.observedTargetsMap.get(target);
                    observedTargetCount > 1 ? _this.observedTargetsMap.set(target, observedTargetCount - 1) : observedTarget && _this.observedTargetsMap.delete(target);
                });
                observer.observe(target, {
                    attributes: !0,
                    attributeFilter: [ "tabindex" ]
                });
                var observedTargetCount = this.observedTargetsMap.get(target);
                this.observedTargetsMap.set(target, observedTargetCount ? observedTargetCount + 1 : 1), 
                this.onActiveSection.emit({
                    nextSection
                }), event.stopPropagation();
            }, PivotTabKeyHandlerDirective.\u0275fac = function(t) {
                return new (t || PivotTabKeyHandlerDirective);
            }, PivotTabKeyHandlerDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PivotTabKeyHandlerDirective,
                selectors: [ [ "", "pivot-tab-key-handler", "" ] ],
                hostBindings: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275listener"]("keydown", function($event) {
                        return ctx.onKeyDown($event);
                    });
                },
                inputs: {
                    options: [ "pivot-tab-key-handler", "options" ]
                },
                outputs: {
                    onActiveSection: "onActiveSection"
                }
            }), PivotTabKeyHandlerDirective;
        }();
    },
    91146: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            w: function() {
                return FontPickerComponent;
            }
        });
        var tslib_es6 = __webpack_require__(81337), core = __webpack_require__(50423), fesm2022_forms = __webpack_require__(17174), debug = __webpack_require__(62458);
        function getCustomFontPickerInfo(newFontFamily) {
            debug.fF.assert(function() {
                return !_.isEmpty(newFontFamily);
            }, "Font family should exist");
            var match = newFontFamily.match(/^(?:\s)*('|")?((?:\w|\s|-|\\.)+)(?:\1(?=,|$))/);
            return match && match[2] || newFontFamily;
        }
        var rx_form_control_component = __webpack_require__(72065), of = __webpack_require__(11547), combineLatest = __webpack_require__(59017), map = __webpack_require__(14172), takeUntil = __webpack_require__(83317), distinctUntilChanged = __webpack_require__(77526), font_service = __webpack_require__(49083), common = __webpack_require__(77476), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529);
        function FontPickerComponent_ng_container_0_pbi_dropdown_1_pbi_dropdown_item_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 5)(1, "p", 3), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var item_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r5), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngStyle", item_r5.style), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate"](item_r5.displayName);
            }
        }
        var _c0 = function(a0) {
            return {
                showFullContent: a0
            };
        };
        function FontPickerComponent_ng_container_0_pbi_dropdown_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-dropdown", 2), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r6.setFontFamily($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementStart"](2, "pbi-dropdown-trigger")(3, "p", 3), 
                core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](5, FontPickerComponent_ng_container_0_pbi_dropdown_1_pbi_dropdown_item_5_Template, 3, 3, "pbi-dropdown-item", 4), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var selectedItem_r3 = ctx.ngIf, fontPickerItems_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("aria-label", ctx_r2.ariaLabel)("aria-labelledby", ctx_r2.ariaLabelledby)("aria-describedby", ctx_r2.ariaDescribedby)("compact", ctx_r2.compact)("size", ctx_r2.size)("maxHeight", ctx_r2.maxHeight)("options", core["\u0275\u0275pureFunction1"](14, _c0, ctx_r2.showFullContent))("value", selectedItem_r3)("isDisabled", core["\u0275\u0275pipeBind1"](1, 12, ctx_r2.isDisabled$)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngStyle", selectedItem_r3.style), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](selectedItem_r3.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", fontPickerItems_r1);
            }
        }
        function FontPickerComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FontPickerComponent_ng_container_0_pbi_dropdown_1_Template, 6, 16, "pbi-dropdown", 1), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r0.selectedItem$));
            }
        }
        var FontPickerComponent = function(_super) {
            function FontPickerComponent(fontService) {
                var _this = _super.call(this) || this;
                return _this.fontService = fontService, _this.onFontFamilyChange = new core.EventEmitter, 
                _this.maxHeight = 324, _this;
            }
            return (0, tslib_es6.__extends)(FontPickerComponent, _super), FontPickerComponent.prototype.ngOnInit = function() {
                this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$), 
                this.populateFontPickerItems();
            }, FontPickerComponent.prototype.populateFontPickerItems = function() {
                var _this = this, fontFamily$ = this.mergePropertyInputsAndFormControl(this.changes$("fontFamily"), this.value$, "fontFamily", this.onDestroy$).pipe((0, 
                map.U)(function(fontFamily) {
                    return _this.normalizeFontFamily(fontFamily);
                }), (0, takeUntil.R)(this.onDestroy$), (0, distinctUntilChanged.x)());
                this.fontPickerItems$ = (0, of.of)(this.fontService.getAllFonts()).pipe((0, map.U)(function(fonts) {
                    return fonts.map(function(font) {
                        return _this.getFontPickerItem(font);
                    });
                })), this.selectedItem$ = (0, combineLatest.aj)([ fontFamily$, this.fontPickerItems$ ]).pipe((0, 
                map.U)(function(_a) {
                    var _b, fontFamily = _a[0];
                    return null !== (_b = _.find(_a[1], function(font) {
                        return font.family === fontFamily;
                    })) && void 0 !== _b ? _b : _this.getCustomFontPickerInfo(fontFamily);
                }));
            }, FontPickerComponent.prototype.normalizeFontFamily = function(fontFamily) {
                return (null != fontFamily ? fontFamily : "").split(", ").map(function(font) {
                    return font.indexOf(" ") > 0 && !font.startsWith("'") ? "'".concat(font, "'") : font;
                }).join(", ");
            }, FontPickerComponent.prototype.getFontPickerItem = function(font) {
                return {
                    displayName: font.displayName,
                    family: font.family,
                    style: {
                        fontFamily: font.suppressStyle ? void 0 : font.family
                    }
                };
            }, FontPickerComponent.prototype.setFontFamily = function(selectedItem) {
                var newFontFamily = selectedItem.family;
                this.onFontFamilyChange.emit(newFontFamily), this.onValueChange(newFontFamily), 
                this.onTouched();
            }, FontPickerComponent.prototype.getCustomFontPickerInfo = function(newFontFamily) {
                return {
                    displayName: newFontFamily ? getCustomFontPickerInfo(newFontFamily) : "",
                    family: newFontFamily,
                    style: {
                        fontFamily: newFontFamily
                    }
                };
            }, FontPickerComponent.\u0275fac = function(t) {
                return new (t || FontPickerComponent)(core["\u0275\u0275directiveInject"](font_service.f));
            }, FontPickerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FontPickerComponent,
                selectors: [ [ "font-picker" ] ],
                inputs: {
                    fontFamily: "fontFamily",
                    ariaLabel: "ariaLabel",
                    ariaDescribedby: "ariaDescribedby",
                    ariaLabelledby: "ariaLabelledby",
                    compact: "compact",
                    isDisabled: "isDisabled",
                    showFullContent: "showFullContent",
                    size: "size"
                },
                outputs: {
                    onFontFamilyChange: "onFontFamilyChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return FontPickerComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ 4, "ngIf" ], [ 3, "aria-label", "aria-labelledby", "aria-describedby", "compact", "size", "maxHeight", "options", "value", "isDisabled", "valueChange", 4, "ngIf" ], [ 3, "aria-label", "aria-labelledby", "aria-describedby", "compact", "size", "maxHeight", "options", "value", "isDisabled", "valueChange" ], [ 3, "ngStyle" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, FontPickerComponent_ng_container_0_Template, 3, 3, "ng-container", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.fontPickerItems$));
                },
                dependencies: [ common.NgForOf, common.NgIf, common.NgStyle, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, common.AsyncPipe ],
                styles: [ "pbi-dropdown[_ngcontent-%COMP%]{width:100%}pbi-dropdown-trigger[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}pbi-dropdown-item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:auto}" ],
                changeDetection: 0
            }), FontPickerComponent;
        }(rx_form_control_component.N);
    },
    45925: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return FontPickerModule;
            }
        });
        var _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6015), _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17174), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), FontPickerModule = function() {
            function FontPickerModule() {}
            return FontPickerModule.\u0275fac = function(t) {
                return new (t || FontPickerModule);
            }, FontPickerModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: FontPickerModule
            }), FontPickerModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.u5, _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__.C, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.UX ]
            }), FontPickerModule;
        }();
    },
    64713: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            J: function() {
                return PbiButtonToggleGroupComponent;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42900), _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4437), _powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(73221), rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14172), _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(50423), _c0 = [ "*" ], PbiButtonToggleGroupComponent = function(_super) {
            function PbiButtonToggleGroupComponent(pbiButtonToggleService) {
                var _this = _super.call(this) || this;
                return _this.pbiButtonToggleService = pbiButtonToggleService, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiButtonToggleGroupComponent, _super), 
            PbiButtonToggleGroupComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("disabled").pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.U)(function(disabled) {
                    return (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.Ig)(disabled);
                })).subscribe(function(disabled) {
                    return _this.pbiButtonToggleService.setDisabled(disabled);
                }), this.changes$("multiple").pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.U)(function(multiple) {
                    return (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.Ig)(multiple);
                })).subscribe(function(multiple) {
                    return _this.pbiButtonToggleService.setMultiple(multiple);
                });
            }, PbiButtonToggleGroupComponent.\u0275fac = function(t) {
                return new (t || PbiButtonToggleGroupComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275directiveInject"](_pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_4__.r));
            }, PbiButtonToggleGroupComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275defineComponent"]({
                type: PbiButtonToggleGroupComponent,
                selectors: [ [ "pbi-button-toggle-group" ] ],
                hostAttrs: [ "role", "group" ],
                hostVars: 4,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275classProp"]("multiple", ctx.multiple)("disabled", ctx.disabled);
                },
                inputs: {
                    disabled: "disabled",
                    multiple: "multiple"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275ProvidersFeature"]([ _pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_4__.r ]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275InheritDefinitionFeature"] ],
                ngContentSelectors: _c0,
                decls: 1,
                vars: 0,
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275projectionDef"](), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275projection"](0));
                },
                encapsulation: 2,
                changeDetection: 0
            }), PbiButtonToggleGroupComponent;
        }(_powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_5__.w);
    },
    53935: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return PbiButtonToggleModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), PbiButtonToggleModule = function() {
            function PbiButtonToggleModule() {}
            return PbiButtonToggleModule.\u0275fac = function(t) {
                return new (t || PbiButtonToggleModule);
            }, PbiButtonToggleModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: PbiButtonToggleModule
            }), PbiButtonToggleModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule ]
            }), PbiButtonToggleModule;
        }();
    },
    42900: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            r: function() {
                return PbiButtonToggleService;
            }
        });
        var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33554), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), PbiButtonToggleService = function() {
            function PbiButtonToggleService() {
                this.selected$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(1), this.disabled$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(1), 
                this.multiple$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(1);
            }
            return PbiButtonToggleService.prototype.select = function(value) {
                this.selected$.next(value);
            }, PbiButtonToggleService.prototype.setDisabled = function(value) {
                this.disabled$.next(value);
            }, PbiButtonToggleService.prototype.setMultiple = function(value) {
                this.multiple$.next(value);
            }, PbiButtonToggleService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjectable"]({
                token: PbiButtonToggleService,
                factory: PbiButtonToggleService.\u0275fac = function(t) {
                    return new (t || PbiButtonToggleService);
                }
            }), PbiButtonToggleService;
        }();
    },
    53240: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            I: function() {
                return PbiButtonToggleComponent;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4437), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), _angular_forms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(17174), _powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(72065), rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63057), rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14172), rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(22318), rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(23558), rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(83317), rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(59973), rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(73805), rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(57243), _pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(42900), _angular_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(77476), _c0 = [ "*" ], PbiButtonToggleComponent = function(_super) {
            function PbiButtonToggleComponent(pbiButtonToggleService) {
                var _this = _super.call(this) || this;
                return _this.pbiButtonToggleService = pbiButtonToggleService, _this.checked = !1, 
                _this.supportsNoSelection = !1, _this.role = "button", _this.ariaControls = null, 
                _this.id = null, _this.valueChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this.onFocus = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, _this.onBlur = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiButtonToggleComponent, _super), 
            PbiButtonToggleComponent.prototype.ngOnInit = function() {
                this.isDisabled$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.T)(this.pbiButtonToggleService.disabled$, this.mergePropertyInputsAndFormControl(this.changes$("disabled").pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.U)(function(disabled) {
                    return (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__.Ig)(disabled);
                })), this.disabled$, "disabled", this.onDestroy$)).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.O)((0, 
                _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__.Ig)(this.disabled))), this.setCheckedObservable();
            }, PbiButtonToggleComponent.prototype.setCheckedObservable = function() {
                var _this = this, multiple$ = this.pbiButtonToggleService.multiple$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.O)(!1)), checkedParent$ = this.mergePropertyInputsAndFormControl(this.changes$("checked"), this.value$, "checked", this.onDestroy$);
                checkedParent$.subscribe(function(checked) {
                    return _this.checked = checked;
                });
                var checkedSiblings$ = this.pbiButtonToggleService.selected$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.M)(multiple$), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.R)(this.onDestroy$), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.h)(function(_a) {
                    return !_a[1] && _this.value !== _a[0];
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.h)(!1));
                this.onButtonClicked = this.createEventAdapter();
                var checkedByEvent$ = this.onButtonClicked.$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.M)(multiple$), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.U)(function(_a) {
                    var multiple = _a[1];
                    return _a[0].stopPropagation(), !multiple && !_this.supportsNoSelection || !_this.checked;
                })), checkedInternal$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.T)(checkedSiblings$, checkedByEvent$).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.d)(1));
                this.checked$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.T)(checkedParent$, checkedInternal$), 
                checkedInternal$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.M)(this.isDisabled$), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.h)(function(_a) {
                    return !_a[1];
                })).subscribe(function(_a) {
                    var checked = _a[0];
                    checked && _this.pbiButtonToggleService.select(_this.value), _this.checked = checked, 
                    _this.valueChanged.emit(_this.checked), _this.onValueChange(_this.checked), _this.onTouched();
                });
            }, PbiButtonToggleComponent.\u0275fac = function(t) {
                return new (t || PbiButtonToggleComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275directiveInject"](_pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_11__.r));
            }, PbiButtonToggleComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineComponent"]({
                type: PbiButtonToggleComponent,
                selectors: [ [ "pbi-button-toggle" ] ],
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275classProp"]("checked", ctx.checked);
                },
                inputs: {
                    value: "value",
                    disabled: "disabled",
                    checked: "checked",
                    supportsNoSelection: "supportsNoSelection",
                    role: "role",
                    ariaControls: "ariaControls",
                    id: "id",
                    ariaLabel: [ "aria-label", "ariaLabel" ],
                    ariaLabelledby: [ "aria-labelledby", "ariaLabelledby" ],
                    ariaDescribedby: [ "aria-describedby", "ariaDescribedby" ],
                    buttonTabIndex: "buttonTabIndex"
                },
                outputs: {
                    valueChanged: "valueChanged",
                    onFocus: "onFocus",
                    onBlur: "onBlur"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275ProvidersFeature"]([ {
                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_12__.JU,
                    useExisting: (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function() {
                        return PbiButtonToggleComponent;
                    }),
                    multi: !0
                } ]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275InheritDefinitionFeature"] ],
                ngContentSelectors: _c0,
                decls: 5,
                vars: 17,
                consts: [ [ "type", "button", 3, "disabled", "tabindex", "click", "focus", "blur" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275projectionDef"](), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementStart"](0, "button", 0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275listener"]("click", function($event) {
                        return ctx.onButtonClicked.fn($event);
                    })("focus", function() {
                        return ctx.onFocus.emit();
                    })("blur", function() {
                        return ctx.onBlur.emit();
                    }), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](1, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](2, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](3, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275projection"](4), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementEnd"]()), 
                    2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("disabled", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](1, 11, ctx.isDisabled$) || null)("tabindex", ctx.buttonTabIndex), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275attribute"]("value", ctx.value)("role", ctx.role)("aria-controls", ctx.ariaControls)("id", ctx.id)("aria-pressed", "button" === ctx.role ? _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](2, 13, ctx.checked$) : null)("aria-selected", "button" !== ctx.role ? _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](3, 15, ctx.checked$) : null)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedby));
                },
                dependencies: [ _angular_common__WEBPACK_IMPORTED_MODULE_13__.AsyncPipe ],
                styles: [ "button[_ngcontent-%COMP%]{background:transparent;overflow:hidden;border:none;margin:0;padding:0}button[_ngcontent-%COMP%]:focus{outline:none}" ],
                changeDetection: 0
            }), PbiButtonToggleComponent;
        }(_powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_14__.N);
    },
    2380: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            O: function() {
                return PbiEmphasisBackgroundDirective;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _pbi_emphasis_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11991), rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37272), rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81905), rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23558), _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50423), _angular_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26124), PbiEmphasisBackgroundDirective = function(_super) {
            function PbiEmphasisBackgroundDirective(animationBuilder, element) {
                return _super.call(this, animationBuilder, element) || this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiEmphasisBackgroundDirective, _super), 
            PbiEmphasisBackgroundDirective.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("pbiEmphasisBackground").pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.w)(function(emphasisInput) {
                    return emphasisInput || rxjs__WEBPACK_IMPORTED_MODULE_2__.E;
                })).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.M)(this.changes$("pbiEmphasisBackgroundColor", !0))).subscribe(function(_a) {
                    var color = _a[1], animation = _this.getAnimation("backgroundColor", null != color ? color : "var(--globalColorBrand160)");
                    _this.emphasize(animation);
                });
            }, PbiEmphasisBackgroundDirective.\u0275fac = function(t) {
                return new (t || PbiEmphasisBackgroundDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275directiveInject"](_angular_animations__WEBPACK_IMPORTED_MODULE_5__._j, 8), _angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef));
            }, PbiEmphasisBackgroundDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275defineDirective"]({
                type: PbiEmphasisBackgroundDirective,
                selectors: [ [ "", "pbiEmphasisBackground", "" ] ],
                inputs: {
                    pbiEmphasisBackground: "pbiEmphasisBackground",
                    pbiEmphasisBackgroundColor: "pbiEmphasisBackgroundColor"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275InheritDefinitionFeature"] ]
            }), PbiEmphasisBackgroundDirective;
        }(_pbi_emphasis_directive__WEBPACK_IMPORTED_MODULE_6__.A);
    },
    11991: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            A: function() {
                return PbiEmphasisDirective;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26124), PbiEmphasisDirective = function(_super) {
            function PbiEmphasisDirective(animationBuilder, element) {
                var _this = _super.call(this) || this;
                return _this.animationBuilder = animationBuilder, _this.element = element, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiEmphasisDirective, _super), 
            PbiEmphasisDirective.prototype.emphasize = function(animation) {
                var _this = this;
                if (this.animationBuilder) {
                    var playAnimation = function() {
                        var animationFactory = _this.animationBuilder.build(animation), currentPlayer = _this.currentPlayer = animationFactory.create(_this.element.nativeElement);
                        currentPlayer.onDestroy(function() {
                            return _this.currentPlayer = void 0;
                        }), currentPlayer.play();
                    };
                    this.currentPlayer ? (this.currentPlayer.finish(), this.currentPlayer.destroy(), 
                    this.requestedAnimationFrameId && window.cancelAnimationFrame(this.requestedAnimationFrameId), 
                    this.requestedAnimationFrameId = window.requestAnimationFrame(function() {
                        playAnimation(), _this.requestedAnimationFrameId = void 0;
                    })) : playAnimation();
                }
            }, PbiEmphasisDirective.prototype.getAnimation = function(propertyToAnimate, value) {
                var _a, _b, _c;
                return [ (0, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.oB)((_a = {}, _a[propertyToAnimate] = "*", 
                _a)), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.jt)("100ms ease-out", (0, 
                _angular_animations__WEBPACK_IMPORTED_MODULE_1__.oB)((_b = {}, _b[propertyToAnimate] = value, 
                _b))), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.jt)("500ms ease-out", (0, 
                _angular_animations__WEBPACK_IMPORTED_MODULE_1__.oB)((_c = {}, _c[propertyToAnimate] = "*", 
                _c))) ];
            }, PbiEmphasisDirective;
        }(__webpack_require__(73221).w);
    },
    76433: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            d: function() {
                return PbiEmphasisModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), PbiEmphasisModule = function() {
            function PbiEmphasisModule() {}
            return PbiEmphasisModule.\u0275fac = function(t) {
                return new (t || PbiEmphasisModule);
            }, PbiEmphasisModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: PbiEmphasisModule
            }), PbiEmphasisModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule ]
            }), PbiEmphasisModule;
        }();
    },
    25929: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            P: function() {
                return SliderComponent;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(17174), _powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(72065), rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59017), rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63057), rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59973), rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14172), _powerbi_A11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(64647), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(65181), _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(77476), _angular_material_legacy_slider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(31496), _pbi_spin_button_pbi_spin_button_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(78173), _c0 = function(a0) {
            return {
                modernStyles: a0
            };
        }, _c1 = function(a0) {
            return {
                disabled: a0
            };
        }, SliderComponent = function(_super) {
            function SliderComponent(highContrastCssGenerationService, localizationService) {
                var _this = _super.call(this) || this;
                return _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.localizationService = localizationService, _this.inputFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this.modelValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SliderComponent, _super), 
            SliderComponent.prototype.ngOnInit = function() {
                var _a, _this = this;
                this.onModelValueChanged = this.createEventAdapter(), this.onModelValueChanged.$.subscribe(function(value) {
                    _this.modelValueChange.emit(value), _this.onValueChange(value), _this.onTouched();
                });
                var options$ = this.changes$("options");
                this.onSliderSliding = this.createEventAdapter(), this.modelValue$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.aj)([ (0, 
                rxjs__WEBPACK_IMPORTED_MODULE_3__.T)(this.mergePropertyInputsAndFormControl(this.changes$("modelValue"), this.value$, "modelValue", this.onDestroy$), this.onSliderSliding.$), options$ ]).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.h)(function(_a) {
                    var modelValue = _a[0], options = _a[1], minValue = options.minValue, maxValue = options.maxValue, isMinLimitValid = !0, isMaxLimitValid = !0;
                    return _.isFinite(minValue) && _.isFinite(modelValue) && (isMinLimitValid = modelValue >= minValue), 
                    _.isFinite(maxValue) && _.isFinite(modelValue) && (isMaxLimitValid = modelValue <= maxValue), 
                    isMinLimitValid && isMaxLimitValid;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.U)(function(_a) {
                    return _a[0];
                })), this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$), 
                this.useModernStyles = null === (_a = this.useModernStyles) || void 0 === _a || _a, 
                this.sliderUnits$ = options$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.U)(function(options) {
                    return (null == options ? void 0 : options.unitSymbol) ? _this.localizationService.get(options.unitSymbol) : "";
                })), this.initializeHighContrastRules();
            }, SliderComponent.prototype.displayValue = function() {
                return "".concat(this.modelValue$, " ").concat(this.sliderUnits$);
            }, SliderComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background", "{ background-color: @disabledTextColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-fill", "{ background-color: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".unit-slider .sliderWrapper .mat-slider-ticks", "{ background-color: transparent !important; }");
            }, SliderComponent.\u0275fac = function(t) {
                return new (t || SliderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275directiveInject"](_powerbi_A11y__WEBPACK_IMPORTED_MODULE_6__.g), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275directiveInject"](_powerbi_Localization__WEBPACK_IMPORTED_MODULE_7__.o));
            }, SliderComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineComponent"]({
                type: SliderComponent,
                selectors: [ [ "slider" ] ],
                inputs: {
                    modelValue: "modelValue",
                    initialValue: "initialValue",
                    options: "options",
                    inputName: "inputName",
                    isDisabled: "isDisabled",
                    labelId: "labelId",
                    ariaDescribedby: "ariaDescribedby",
                    newPaneColors: "newPaneColors",
                    useModernStyles: "useModernStyles"
                },
                outputs: {
                    inputFocusChange: "inputFocusChange",
                    modelValueChange: "modelValueChange"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275ProvidersFeature"]([ {
                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_8__.JU,
                    useExisting: (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function() {
                        return SliderComponent;
                    }),
                    multi: !0
                } ]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 11,
                vars: 33,
                consts: [ [ 1, "unit-slider" ], [ 1, "sliderWrapper", 3, "ngClass" ], [ 1, "slider-num-input", 3, "ngModel", "disabled", "hideUpDownButtons", "options", "labelId", "ariaDescribedby", "inputName", "focusChange", "modelValueChange" ], [ 1, "sliderInput", 3, "ngModel", "disabled", "ngClass", "min", "max", "valueText", "input", "change" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementStart"](0, "div", 0)(1, "div", 1)(2, "pbi-spin-button", 2), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275listener"]("focusChange", function($event) {
                        return ctx.inputFocusChange.emit($event);
                    })("modelValueChange", function($event) {
                        return ctx.onModelValueChanged.fn($event);
                    }), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](3, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](4, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementEnd"](), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementStart"](5, "mat-slider", 3), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275listener"]("input", function($event) {
                        return ctx.onSliderSliding.fn($event.value);
                    })("change", function($event) {
                        return ctx.onModelValueChanged.fn($event.value);
                    }), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](6, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](7, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](8, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](9, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](10, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementEnd"]()()()), 2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275advance"](1), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pureFunction1"](29, _c0, ctx.useModernStyles)), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275advance"](1), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("ngModel", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](3, 15, ctx.modelValue$))("disabled", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](4, 17, ctx.isDisabled$))("hideUpDownButtons", !ctx.useModernStyles)("options", ctx.options)("labelId", ctx.labelId)("ariaDescribedby", ctx.ariaDescribedby)("inputName", ctx.inputName + "-spinButton"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275advance"](3), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275propertyInterpolate"]("min", ctx.options.minValue), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275propertyInterpolate"]("max", ctx.options.maxValue), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("ngModel", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](6, 19, ctx.modelValue$))("disabled", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](7, 21, ctx.isDisabled$))("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pureFunction1"](31, _c1, _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](8, 23, ctx.isDisabled$)))("valueText", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](9, 25, ctx.modelValue$) + " " + _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](10, 27, ctx.sliderUnits$)), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275attribute"]("aria-labelledby", ctx.labelId));
                },
                dependencies: [ _angular_common__WEBPACK_IMPORTED_MODULE_9__.NgClass, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.JJ, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.On, _angular_material_legacy_slider__WEBPACK_IMPORTED_MODULE_10__.ST, _pbi_spin_button_pbi_spin_button_component__WEBPACK_IMPORTED_MODULE_11__.a, _angular_common__WEBPACK_IMPORTED_MODULE_9__.AsyncPipe ],
                styles: [ ".unit-slider{--sliderNumberInput: var(--fluent-theme-white-color);--sliderHorizontalFocus: var(--fluent-theme-black-color);--sliderTrackBackground: var(--fluent-theme-neutral-tertiary-alt-color);--sliderTrackBackgroundHover: var(--fluent-theme-neutral-tertiary-alt-color);--sliderTrackFill: var(--fluent-theme-neutral-secondary-color);--sliderThumbBorder: var(--fluent-theme-neutral-secondary-color);--sliderThumbBorderHover: var(--fluent-theme-neutral-secondary-color);--sliderThumbBackground: var(--fluent-theme-white-color);--sliderThumbBackgroundHover: var(--fluent-theme-white-color);--sliderFocusRing: transparent;--sliderTrackBackgroundDisabled: var(--fluent-theme-neutral-tertiary-alt-color);--sliderThumbBorderDisabled: var(--fluent-theme-neutral-secondary-color);--sliderThumbBackgroundDisabled: var(--fluent-theme-white-color);--sliderTrackFillDisabled: var(--fluent-theme-neutral-tertiary-alt-color);line-height:32px}[data-legacy-theming=false] .unit-slider{--sliderNumberInput: var(--colorNeutralStrokeDisabled);--sliderHorizontalFocus: var(--colorNeutralStrokeFocus2);--sliderTrackBackground: var(--colorNeutralStrokeAccessible);--sliderTrackBackgroundHover: var(--colorCompoundBrandBackgroundHover);--sliderTrackFill: var(--colorCompoundBrandBackground);--sliderThumbBorder: var(--colorNeutralStroke1);--sliderThumbBackground: var(--colorCompoundBrandBackground);--sliderThumbBorderHover: var(--colorNeutralStroke1);--sliderThumbBackgroundHover: var(--colorCompoundBrandBackgroundHover);--sliderFocusRing: var(--colorNeutralStroke1);--sliderThumbBorderDisabled: var(--colorNeutralStrokeDisabled);--sliderThumbBackgroundDisabled: var(--colorNeutralForegroundDisabled);--sliderTrackBackgroundDisabled: var(--colorNeutralStrokeDisabled);--sliderTrackFillDisabled: var(--colorNeutralForegroundDisabled)}.unit-slider .sliderWrapper{display:flex;flex-direction:row;align-items:center}.unit-slider .sliderWrapper .slider-num-input{margin-right:12px;background-color:var(--sliderNumberInput)}.unit-slider .sliderWrapper.modernStyles .slider-num-input{width:54px;margin-right:4px}.unit-slider .sliderWrapper.modernStyles .mat-slider-horizontal{min-width:92px}.unit-slider .sliderWrapper.modernStyles .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper{height:4px}.unit-slider .sliderWrapper .mat-slider-horizontal{padding:0;height:36px}.unit-slider .sliderWrapper .mat-slider-horizontal:focus-within{border:solid 1px var(--sliderHorizontalFocus)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper{top:17px}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background{height:4px;border-radius:2px;background-color:var(--sliderTrackBackground)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background:hover{background-color:var(--sliderTrackBackgroundHover)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-fill{height:4px;border-radius:2px;background-color:var(--sliderTrackFill)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-thumb{bottom:-11px;border-width:2px;border-color:var(--sliderThumbBorder);background-color:var(--sliderThumbBackground)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-thumb:hover{border-color:var(--sliderThumbBorderHover);background-color:var(--sliderThumbBackgroundHover)}.unit-slider .sliderWrapper .mat-slider:not(.mat-slider-sliding):not(.mat-slider-disabled) .mat-slider-thumb{transform:scale(.7)}.unit-slider .sliderWrapper .slider-value{margin-left:6px}.unit-slider .mat-slider-focus-ring{background-color:var(--sliderFocusRing)}.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-thumb{border-color:var(--sliderThumbBorderDisabled);background-color:var(--sliderThumbBackgroundDisabled)}.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background,.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background:hover{background-color:var(--sliderTrackBackgroundDisabled)}.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-fill{background-color:var(--sliderTrackFillDisabled)}\n" ],
                encapsulation: 2,
                changeDetection: 0
            }), SliderComponent;
        }(_powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_12__.N);
    }
} ]);