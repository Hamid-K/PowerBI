"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "data-bars-dialog" ], {
    44521: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            DataBarsDialogModule: function() {
                return DataBarsDialogModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), fesm2022_forms = __webpack_require__(17174);
        function getInitialMinimumSelectedOption(dataBarsSettings, minimumSelectOptions) {
            return void 0 !== dataBarsSettings.minValue ? minimumSelectOptions[1] : minimumSelectOptions[0];
        }
        function getInitialMaximumSelectedOption(dataBarsSettings, maximumSelectOptions) {
            return void 0 !== dataBarsSettings.maxValue ? maximumSelectOptions[1] : maximumSelectOptions[0];
        }
        function getInitialBarDirectionOption(dataBarsSettings, barDirectionOptions) {
            return dataBarsSettings.reverseDirection ? barDirectionOptions[1] : barDirectionOptions[0];
        }
        function getNumberSelectOption(localizationService) {
            return {
                id: 0,
                value: localizationService.get("Custom"),
                disableInput: !1
            };
        }
        var visualStyleSerializer = __webpack_require__(25740), rx_component = __webpack_require__(73221), core = __webpack_require__(50423), item_picker_service = __webpack_require__(4877), template_dialog_payload_service = __webpack_require__(67489), localization_service = __webpack_require__(65181), common = __webpack_require__(77476), template_dialog_component = __webpack_require__(96777), localize_directive = __webpack_require__(59968), localize_attr_directive = __webpack_require__(22844), localize_tooltip_directive = __webpack_require__(50057), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529), pbi_checkbox_component = __webpack_require__(56011), pbi_form_field_component = __webpack_require__(45074), pbi_tooltip_directive = __webpack_require__(36858), theme_color_input_component = __webpack_require__(57274), localize_pipe = __webpack_require__(85102);
        function DataBarsDialogComponent_form_1_pbi_dropdown_item_13_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 23), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r4 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r4), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r4.value, " ");
            }
        }
        function DataBarsDialogComponent_form_1_pbi_dropdown_item_23_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 23), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r5), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r5.value, " ");
            }
        }
        function DataBarsDialogComponent_form_1_pbi_dropdown_item_36_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 23), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r6 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r6), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r6.value, " ");
            }
        }
        var _c0 = function() {
            return {
                "aria-label": "DataBarsDialog_HideText"
            };
        }, _c1 = function() {
            return {
                placeholder: "Enter_A_Value"
            };
        }, _c2 = function(a0) {
            return {
                value: a0
            };
        };
        function DataBarsDialogComponent_form_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "form", 1), core["\u0275\u0275element"](1, "label", 2)(2, "p", 3), 
            core["\u0275\u0275elementStart"](3, "section", 4), core["\u0275\u0275element"](4, "pbi-checkbox", 5), 
            core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](6, "section", 6)(7, "fieldset"), 
            core["\u0275\u0275element"](8, "legend", 7), core["\u0275\u0275elementStart"](9, "section", 8)(10, "pbi-dropdown", 9)(11, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](12), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](13, DataBarsDialogComponent_form_1_pbi_dropdown_item_13_Template, 2, 2, "pbi-dropdown-item", 10), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](14, "pbi-form-field"), 
            core["\u0275\u0275element"](15, "input", 11), core["\u0275\u0275pipe"](16, "localize"), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](17, "fieldset"), 
            core["\u0275\u0275element"](18, "legend", 12), core["\u0275\u0275elementStart"](19, "section", 8)(20, "pbi-dropdown", 13)(21, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](22), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](23, DataBarsDialogComponent_form_1_pbi_dropdown_item_23_Template, 2, 2, "pbi-dropdown-item", 10), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](24, "pbi-form-field"), 
            core["\u0275\u0275element"](25, "input", 14), core["\u0275\u0275pipe"](26, "localize"), 
            core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275elementStart"](27, "section", 6)(28, "fieldset"), 
            core["\u0275\u0275element"](29, "legend", 15)(30, "theme-color-input", 16), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275elementStart"](31, "fieldset"), core["\u0275\u0275element"](32, "legend", 17), 
            core["\u0275\u0275elementStart"](33, "pbi-dropdown", 18)(34, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](35), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](36, DataBarsDialogComponent_form_1_pbi_dropdown_item_36_Template, 2, 2, "pbi-dropdown-item", 10), 
            core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275elementStart"](37, "section", 6)(38, "fieldset"), 
            core["\u0275\u0275element"](39, "legend", 19)(40, "theme-color-input", 20), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275elementStart"](41, "fieldset"), core["\u0275\u0275element"](42, "legend", 21)(43, "theme-color-input", 22), 
            core["\u0275\u0275elementEnd"]()()()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("formGroup", ctx_r0.viewModel.form), core["\u0275\u0275advance"](4), 
                core["\u0275\u0275property"]("label", core["\u0275\u0275pipeBind1"](5, 26, "DataBarsDialog_HideText"))("localizeAttr", core["\u0275\u0275pureFunction0"](32, _c0)), 
                core["\u0275\u0275advance"](8), core["\u0275\u0275textInterpolate"](ctx_r0.controls.minimumSelectedOption.value.value), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r0.viewModel.minimumSelectOptions)("ngForTrackBy", ctx_r0.trackById), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](33, _c1))("pbiTooltip", null == ctx_r0.viewModel.controls.minValue.value ? core["\u0275\u0275pipeBind1"](16, 28, "Enter_A_Value") : void 0)("pbiTooltipShowDelay", ctx_r0.viewModel.tooltipDelay)("pbiTooltipHideDelay", ctx_r0.viewModel.tooltipDelay), 
                core["\u0275\u0275advance"](7), core["\u0275\u0275textInterpolate"](ctx_r0.viewModel.controls.maximumSelectedOption.value.value), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r0.viewModel.maximumSelectOptions)("ngForTrackBy", ctx_r0.trackById), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](34, _c1))("pbiTooltip", null == ctx_r0.viewModel.controls.maxValue.value ? core["\u0275\u0275pipeBind1"](26, 30, "Enter_A_Value") : void 0)("pbiTooltipShowDelay", ctx_r0.viewModel.tooltipDelay)("pbiTooltipHideDelay", ctx_r0.viewModel.tooltipDelay), 
                core["\u0275\u0275advance"](5), core["\u0275\u0275property"]("defaultColor", core["\u0275\u0275pureFunction1"](35, _c2, ctx_r0.viewModel.defaultPositiveColor))("isNoFillItemSupported", ctx_r0.viewModel.isNoFillItemSupported), 
                core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate"](ctx_r0.viewModel.controls.barDirectionOption.value.value), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r0.viewModel.barDirectionOptions)("ngForTrackBy", ctx_r0.trackById), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("defaultColor", core["\u0275\u0275pureFunction1"](37, _c2, ctx_r0.viewModel.defaultNegativeColor))("isNoFillItemSupported", ctx_r0.viewModel.isNoFillItemSupported), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("defaultColor", core["\u0275\u0275pureFunction1"](39, _c2, ctx_r0.viewModel.defaultAxisColor))("isNoFillItemSupported", ctx_r0.viewModel.isNoFillItemSupported);
            }
        }
        var DataBarsDialogComponent = function(_super) {
            function DataBarsDialogComponent(itemPicker, localizationService, templateDialogPayload) {
                var _this = _super.call(this) || this;
                return _this.itemPicker = itemPicker, _this.localizationService = localizationService, 
                _this.templateDialogPayload = templateDialogPayload, _this;
            }
            return (0, tslib_es6.__extends)(DataBarsDialogComponent, _super), DataBarsDialogComponent.prototype.ngOnInit = function() {
                var _a, _this = this, dataBarsSettings = (_a = this.templateDialogPayload.input).dataBarsSettings, colorPalette = (0, 
                visualStyleSerializer.DP)(_a.colorPalette);
                this.viewModel = function(localizationService, dataBarsSettings, colorPalette) {
                    var minimumSelectOptions = function(localizationService) {
                        return [ {
                            id: 1,
                            value: localizationService.get("ConditionalFormattingDialog_LowestValue"),
                            disableInput: !0
                        }, getNumberSelectOption(localizationService) ];
                    }(localizationService), maximumSelectOptions = function(localizationService) {
                        return [ {
                            id: 2,
                            value: localizationService.get("ConditionalFormattingDialog_HighestValue"),
                            disableInput: !0
                        }, getNumberSelectOption(localizationService) ];
                    }(localizationService), barDirectionOptions = function(localizationService) {
                        return [ {
                            id: 0,
                            value: localizationService.get("LeftToRight")
                        }, {
                            id: 1,
                            value: localizationService.get("RightToLeft")
                        } ];
                    }(localizationService), initialValues = function(dataBarsSettings, minimumSelectOptions, maximumSelectOptions, barDirectionOptions) {
                        var _a, _b, _c;
                        return {
                            axisColor: {
                                value: null === (_a = dataBarsSettings.axisColor) || void 0 === _a ? void 0 : _a.solid.color
                            },
                            hideText: dataBarsSettings.hideText,
                            maxValue: dataBarsSettings.maxValue,
                            minValue: dataBarsSettings.minValue,
                            positiveColor: {
                                value: null === (_b = dataBarsSettings.positiveColor) || void 0 === _b ? void 0 : _b.solid.color
                            },
                            negativeColor: {
                                value: null === (_c = dataBarsSettings.negativeColor) || void 0 === _c ? void 0 : _c.solid.color
                            },
                            minimumSelectedOption: getInitialMinimumSelectedOption(dataBarsSettings, minimumSelectOptions),
                            maximumSelectedOption: getInitialMaximumSelectedOption(dataBarsSettings, maximumSelectOptions),
                            barDirectionOption: getInitialBarDirectionOption(dataBarsSettings, barDirectionOptions)
                        };
                    }(dataBarsSettings, minimumSelectOptions, maximumSelectOptions, barDirectionOptions), controls = function(initialValues) {
                        var minimumSelectedOption = initialValues.minimumSelectedOption, minValue = initialValues.minValue, maximumSelectedOption = initialValues.maximumSelectedOption, maxValue = initialValues.maxValue, barDirectionOption = initialValues.barDirectionOption, positiveColor = initialValues.positiveColor, negativeColor = initialValues.negativeColor, axisColor = initialValues.axisColor;
                        return {
                            hideText: new fesm2022_forms.p4(initialValues.hideText),
                            minimumSelectedOption: new fesm2022_forms.p4(minimumSelectedOption),
                            minValue: new fesm2022_forms.p4({
                                value: minValue,
                                disabled: minimumSelectedOption.disableInput
                            }, fesm2022_forms.kI.required),
                            maximumSelectedOption: new fesm2022_forms.p4(maximumSelectedOption),
                            maxValue: new fesm2022_forms.p4({
                                value: maxValue,
                                disabled: maximumSelectedOption.disableInput
                            }, fesm2022_forms.kI.required),
                            barDirectionOption: new fesm2022_forms.p4(barDirectionOption),
                            positiveColor: new fesm2022_forms.p4(positiveColor),
                            negativeColor: new fesm2022_forms.p4(negativeColor),
                            axisColor: new fesm2022_forms.p4(axisColor)
                        };
                    }(initialValues), _a = colorPalette.dataColors.getGradientColors();
                    return {
                        minimumSelectOptions,
                        maximumSelectOptions,
                        barDirectionOptions,
                        reverseDirection: dataBarsSettings.reverseDirection,
                        defaultPositiveColor: _a.maxColor.value,
                        defaultNegativeColor: _a.minColor.value,
                        defaultAxisColor: colorPalette.foreground.value,
                        isNoFillItemSupported: !1,
                        tooltipDelay: 100,
                        form: new fesm2022_forms.nJ(controls),
                        controls
                    };
                }(this.localizationService, dataBarsSettings, colorPalette), this.controls = this.viewModel.controls, 
                this.templateDialogPayload.onOkButtonClick = function() {
                    return _this.apply();
                }, this.templateDialogPayload.setOkButtonState(this.viewModel.form.invalid), this.itemPicker.setThemeItems(colorPalette.dataColors, void 0, void 0), 
                this.setFormSubscriptions();
            }, DataBarsDialogComponent.prototype.setFormSubscriptions = function() {
                for (var _a, _this = this, minimumSelectedOption = (_a = this.viewModel.controls).minimumSelectedOption, minValue = _a.minValue, maximumSelectedOption = _a.maximumSelectedOption, maxValue = _a.maxValue, _i = 0, formSubscriptions_1 = [ minimumSelectedOption.valueChanges.subscribe(function(value) {
                    value.disableInput ? minValue.disable() : minValue.enable();
                }), maximumSelectedOption.valueChanges.subscribe(function(value) {
                    value.disableInput ? maxValue.disable() : maxValue.enable();
                }), this.viewModel.form.valueChanges.subscribe(function() {
                    _this.templateDialogPayload.setOkButtonState(_this.viewModel.form.invalid);
                }) ]; _i < formSubscriptions_1.length; _i++) this.lifecycleSubscriptions.add(formSubscriptions_1[_i]);
            }, DataBarsDialogComponent.prototype.trackById = function(_index, item) {
                return item.id;
            }, DataBarsDialogComponent.prototype.getFillFromColor = function(color) {
                return color ? {
                    solid: {
                        color
                    }
                } : null;
            }, DataBarsDialogComponent.prototype.getDataBarsSettings = function() {
                var _a, _b, _c, _d, axisColor = (_a = this.viewModel.form.getRawValue()).axisColor, positiveColor = _a.positiveColor, negativeColor = _a.negativeColor, barDirectionOption = _a.barDirectionOption;
                return {
                    hideText: _a.hideText,
                    maxValue: 0 === _a.maximumSelectedOption.id ? _a.maxValue : void 0,
                    minValue: 0 === _a.minimumSelectedOption.id ? _a.minValue : void 0,
                    axisColor: this.getFillFromColor(null !== (_b = axisColor.value) && void 0 !== _b ? _b : this.viewModel.defaultAxisColor),
                    positiveColor: this.getFillFromColor(null !== (_c = positiveColor.value) && void 0 !== _c ? _c : this.viewModel.defaultPositiveColor),
                    negativeColor: this.getFillFromColor(null !== (_d = negativeColor.value) && void 0 !== _d ? _d : this.viewModel.defaultNegativeColor),
                    reverseDirection: 1 === barDirectionOption.id
                };
            }, DataBarsDialogComponent.prototype.apply = function() {
                return Promise.resolve({
                    dataBars: this.getDataBarsSettings()
                });
            }, DataBarsDialogComponent.\u0275fac = function(t) {
                return new (t || DataBarsDialogComponent)(core["\u0275\u0275directiveInject"](item_picker_service.a), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x));
            }, DataBarsDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: DataBarsDialogComponent,
                selectors: [ [ "data-bars-dialog" ] ],
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 1,
                consts: [ [ 3, "formGroup", 4, "ngIf" ], [ 3, "formGroup" ], [ "id", "genericColor", "localize", "Generic_Color", 1, "hidden" ], [ "localize", "Visual_ConditionalFormatting_DataBars_Desc", 1, "description" ], [ 1, "checkBoxSettings" ], [ "formControlName", "hideText", "localizeTooltip", "DataBarsDialog_HideText", 3, "label", "localizeAttr" ], [ 1, "sectionSettings" ], [ "localize", "ConditionalFormattingDialog_MinimumHeader", "localizeTooltip", "ConditionalFormattingDialog_MinimumHeader" ], [ 1, "colorSettings" ], [ "formControlName", "minimumSelectedOption" ], [ 3, "value", 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ "type", "number", "pbiInput", "", "formControlName", "minValue", "pbiTooltipPosition", "below", 3, "localizeAttr", "pbiTooltip", "pbiTooltipShowDelay", "pbiTooltipHideDelay" ], [ "localize", "ConditionalFormattingDialog_MaximumHeader", "localizeTooltip", "ConditionalFormattingDialog_MaximumHeader" ], [ "formControlName", "maximumSelectedOption" ], [ "type", "number", "pbiInput", "", "formControlName", "maxValue", "pbiTooltipPosition", "below", 3, "localizeAttr", "pbiTooltip", "pbiTooltipShowDelay", "pbiTooltipHideDelay" ], [ "localize", "DataBarsDialog_PositiveBar", "localizeTooltip", "DataBarsDialog_PositiveBar" ], [ "formControlName", "positiveColor", "tabindex", "-1", "labelId", "genericColor", 1, "whiteTheme", "colorpicker-left", 3, "defaultColor", "isNoFillItemSupported" ], [ "localize", "DataBarsDialog_BarDirection", "localizeTooltip", "DataBarsDialog_BarDirection" ], [ "formControlName", "barDirectionOption" ], [ "localize", "DataBarsDialog_NegativeBar", "localizeTooltip", "DataBarsDialog_NegativeBar" ], [ "formControlName", "negativeColor", "tabindex", "-1", "labelId", "genericColor", 1, "whiteTheme", "colorpicker-left", 3, "defaultColor", "isNoFillItemSupported" ], [ "localize", "DataBarsDialog_BarAxis", "localizeTooltip", "DataBarsDialog_BarAxis" ], [ "formControlName", "axisColor", "tabindex", "-1", "labelId", "genericColor", 1, "whiteTheme", 3, "defaultColor", "isNoFillItemSupported" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog"), core["\u0275\u0275template"](1, DataBarsDialogComponent_form_1_Template, 44, 41, "form", 0), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.viewModel));
                },
                dependencies: [ common.NgForOf, common.NgIf, template_dialog_component.J, fesm2022_forms._Y, fesm2022_forms.Fj, fesm2022_forms.wV, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.sg, fesm2022_forms.u, localize_directive.X, localize_attr_directive.b, localize_tooltip_directive.r, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_checkbox_component.v, pbi_form_field_component.bP, pbi_form_field_component.ug, pbi_tooltip_directive.V, theme_color_input_component.oO, localize_pipe.F ],
                styles: [ "[_nghost-%COMP%]{--colorDialogForeground: var(--fluent-theme-neutral-primary-color);--colorDialogInputBorder: var(--fluent-theme-neutral-secondary-alt-color);--colorDialogInputBackground: var(--fluent-theme-white-color);--colorDialogInputBackgroundAlt: var(--fluent-theme-neutral-light-color);--colorDialogInputDisabled: var(--fluent-theme-neutral-tertiary-alt-color);--colorDialogInputError: var(--fluent-theme-error-dark-color);--colorDialogBackground: var(--globalColorWhite)}[data-legacy-theming=false]   [_nghost-%COMP%]{--colorDialogForeground: var(--colorNeutralForeground1);--colorDialogBackground: var(--colorNeutralBackground1);--colorDialogInputBorder: var(--colorNeutralStroke1);--colorDialogInputBackground: var(--colorNeutralBackground1);--colorDialogInputBackgroundAlt: var(--colorNeutralBackground2);--colorDialogInputDisabled: var(--colorNeutralForegroundDisabled);--colorDialogInputError: var(--colorDangerBorder2)}[_nghost-%COMP%]   .description[_ngcontent-%COMP%]{margin-top:0;font-size:var(--md-font-size, 14px);line-height:var(--md-font-size, 14px);color:var(--colorDialogForeground)}[_nghost-%COMP%]   h2[_ngcontent-%COMP%]{font-size:var(--sm-font-size, 12px);line-height:var(--sm-font-size, 12px);font-weight:400;color:var(--colorDialogForeground);margin-bottom:8px;margin-top:16px}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid var(--colorDialogInputBorder);outline:0;padding:4px}[_nghost-%COMP%]   input[type=number][_ngcontent-%COMP%]::-webkit-outer-spin-button, [_nghost-%COMP%]   input[type=number][_ngcontent-%COMP%]::-webkit-inner-spin-button{-webkit-appearance:none;-moz-appearance:textfield;margin:0}[_nghost-%COMP%]   input[disabled][_ngcontent-%COMP%]:hover{border-color:var(--colorDialogInputBorder)}[_nghost-%COMP%]   fieldset[_ngcontent-%COMP%]{border:0;margin:0;padding:0}[_nghost-%COMP%]   fieldset[_ngcontent-%COMP%]   legend[_ngcontent-%COMP%]{font-size:var(--lg-font-size, 16px);margin-bottom:12px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin-top:10px;margin-bottom:20px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]{margin-bottom:5px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:122px}[_nghost-%COMP%]   .checkBoxSettings[_ngcontent-%COMP%]{display:flex}[_nghost-%COMP%]   .checkBoxSettings[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin:0 5px 5px;font-size:var(--sm-font-size, 12px);cursor:pointer}[_nghost-%COMP%]   .checkBoxSettings[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin-bottom:0;padding:2px}[_nghost-%COMP%]   theme-color-input[_ngcontent-%COMP%]{margin-left:4px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]{margin-top:9px;margin-bottom:0}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]{width:180px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:180px;margin-bottom:5px;padding:8px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   input.ng-invalid[_ngcontent-%COMP%]{border:1px solid var(--fluent-theme-error-dark-color, #A80000)}[_nghost-%COMP%]   .checkBoxSettings[_ngcontent-%COMP%]{margin-bottom:0;margin-left:2px}[_nghost-%COMP%]   fieldset[_ngcontent-%COMP%]{width:180px}[_nghost-%COMP%]   fieldset[_ngcontent-%COMP%]   legend[_ngcontent-%COMP%]{width:180px;margin-bottom:8px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}[_nghost-%COMP%]   theme-color-input[_ngcontent-%COMP%]{line-height:normal;margin-left:0}" ],
                changeDetection: 0
            }), DataBarsDialogComponent;
        }(rx_component.w), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), template_dialog_module = __webpack_require__(16973), pbi_checkbox_module = __webpack_require__(47913), pbi_dropdown_module = __webpack_require__(6015), pbi_form_field_module = __webpack_require__(14525), pbi_tooltip_module = __webpack_require__(16095), theme_color_picker_module = __webpack_require__(27037), DataBarsDialogModule = function() {
            function DataBarsDialogModule() {}
            return DataBarsDialogModule.\u0275fac = function(t) {
                return new (t || DataBarsDialogModule);
            }, DataBarsDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: DataBarsDialogModule
            }), DataBarsDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ item_picker_service.a, template_dialog_payload_service.x ],
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: "DataBarsDialog",
                    componentType: DataBarsDialogComponent
                } ]), fesm2022_forms.u5, fesm2022_forms.UX, localization_module.v, pbi_dropdown_module.C, pbi_checkbox_module.V, pbi_form_field_module.g, pbi_tooltip_module.Z, theme_color_picker_module.b, template_dialog_module.e ]
            }), DataBarsDialogModule;
        }();
    },
    45074: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            bP: function() {
                return PbiFormFieldComponent;
            },
            nm: function() {
                return PbiInputLabelDirective;
            },
            uC: function() {
                return PbiInputErrorDirective;
            },
            ug: function() {
                return PbiInputDirective;
            }
        });
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4437), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _c0 = [ [ [ "", "pbiLabel", "" ] ], [ [ "", "pbiInput", "" ] ], [ [ "", "pbiInputButton", "" ] ], [ [ "", "pbiInputError", "" ] ] ], _c1 = [ "[pbiLabel]", "[pbiInput]", "[pbiInputButton]", "[pbiInputError]" ], pbiInputIdCounter = 0, PbiInputDirective = function() {
            function PbiInputDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputDirective.\u0275fac = function(t) {
                return new (t || PbiInputDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputDirective,
                selectors: [ [ "", "pbiInput", "" ] ],
                hostAttrs: [ "autocomplete", "off" ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("aria-required", ctx.required || null)("aria-describedby", null == ctx.formField.error ? null : ctx.formField.error.id)("aria-invalid", ctx.formField.error ? "true" : "false");
                },
                inputs: {
                    required: "required"
                }
            }), PbiInputDirective;
        }(), PbiInputLabelDirective = function() {
            function PbiInputLabelDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputLabelDirective.\u0275fac = function(t) {
                return new (t || PbiInputLabelDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputLabelDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputLabelDirective,
                selectors: [ [ "", "pbiLabel", "" ] ],
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-label-required", null != ctx.formField.input.required);
                }
            }), PbiInputLabelDirective;
        }(), PbiInputErrorDirective = function() {
            function PbiInputErrorDirective() {
                this.id = "pbi-input-error-id-".concat(pbiInputIdCounter++);
            }
            return PbiInputErrorDirective.\u0275fac = function(t) {
                return new (t || PbiInputErrorDirective);
            }, PbiInputErrorDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputErrorDirective,
                selectors: [ [ "", "pbiInputError", "" ] ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("id", ctx.id), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-input-error", !0));
                }
            }), PbiInputErrorDirective;
        }(), PbiFormFieldComponent = function() {
            function PbiFormFieldComponent(renderer) {
                this.renderer = renderer, this._compact = !1;
            }
            return Object.defineProperty(PbiFormFieldComponent.prototype, "compact", {
                get: function() {
                    return this._compact;
                },
                set: function(value) {
                    this._compact = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.Ig)(value);
                },
                enumerable: !1,
                configurable: !0
            }), PbiFormFieldComponent.prototype.ngAfterContentInit = function() {
                if (this.input && this.label) {
                    var id = "pbi-input-id-".concat(pbiInputIdCounter++);
                    this.renderer.setAttribute(this.input.elementRef.nativeElement, "id", id), this.renderer.setAttribute(this.label.elementRef.nativeElement, "for", id);
                }
            }, PbiFormFieldComponent.\u0275fac = function(t) {
                return new (t || PbiFormFieldComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
            }, PbiFormFieldComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: PbiFormFieldComponent,
                selectors: [ [ "pbi-form-field" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    if (1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputLabelDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputErrorDirective, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.input = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.label = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.error = _t.first);
                    }
                },
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-compact-form-field", ctx.compact);
                },
                inputs: {
                    compact: "compact"
                },
                ngContentSelectors: _c1,
                decls: 5,
                vars: 0,
                consts: [ [ 1, "controls" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projectionDef"](_c0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](0), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementStart"](1, "div", 0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](2, 1), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](3, 2), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](4, 3));
                },
                styles: [ '[_nghost-%COMP%]{display:flex;flex-direction:column;--input-border-color: var(--gray-110);--input-foreground: var(--gray-140);--disabled-input-background: var(--gray-20);--disabled-input-border-color: var(--gray-60);--disabled-input-foreground: var(--gray-90);--focused-input-border-color: var(--gray-130);--focused-input-foreground: var(--gray-180);--error-color: var(--fluent-theme-error-dark-color)}[data-legacy-theming=false]   [_nghost-%COMP%]{--input-border-color: var(--colorNeutralStroke1);--input-foreground: var(--colorNeutralForeground1);--disabled-input-background: var(--colorNeutralBackgroundDisabled);--disabled-input-border-color: var(--colorNeutralStrokeDisabled);--disabled-input-foreground: var(--colorNeutralForegroundDisabled);--focused-input-border-color: var(--colorNeutralStrokeFocus2);--focused-input-foreground: var(--colorNeutralForeground1);--error-color: var(--fluent-theme-error-dark-color)}.pbi-form-field-inline[_nghost-%COMP%] {flex-direction:row;align-items:center;justify-content:space-between}.pbi-form-field-inline[_nghost-%COMP%]  label{margin:0 8px 0 0}.pbi-form-field-inline[_nghost-%COMP%]  .controls{flex-grow:1;justify-content:flex-end}.pbi-compact-form-field[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.pbi-compact-form-field[_nghost-%COMP%]  input{height:28px;padding:4px 6px}.pbi-compact-form-field[_nghost-%COMP%]  textarea{padding:4px 6px}[_nghost-%COMP%]  *{box-sizing:border-box}[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);margin:0 0 4px}[_nghost-%COMP%]  label.pbi-label-required:after{content:"*";margin-left:4px;color:var(--error-color)}[_nghost-%COMP%]  .controls{display:flex}[_nghost-%COMP%]  .controls>*:not(:last-child){margin-right:8px}[_nghost-%COMP%]  input{height:32px}[_nghost-%COMP%]  textarea{resize:none}[_nghost-%COMP%]  input, [_nghost-%COMP%]  textarea{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);width:100%;border-radius:2px;border:1px solid var(--input-border-color);color:var(--input-foreground);outline:none;padding:8px 6px}[_nghost-%COMP%]  input[disabled], [_nghost-%COMP%]  textarea[disabled], [_nghost-%COMP%]  input[aria-disabled=true], [_nghost-%COMP%]  textarea[aria-disabled=true]{background-color:var(--disabled-input-background);border-color:var(--disabled-input-border-color);color:var(--disabled-input-foreground)}[_nghost-%COMP%]  input:focus, [_nghost-%COMP%]  textarea:focus{border-color:var(--focused-input-border-color);color:var(--focused-input-foreground)}[_nghost-%COMP%]  [pbiInput][aria-invalid=true]{border-color:var(--error-color)}[_nghost-%COMP%]  .pbi-input-error{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);margin:4px 0 0;color:var(--error-color)}' ],
                changeDetection: 0
            }), PbiFormFieldComponent;
        }();
    }
} ]);