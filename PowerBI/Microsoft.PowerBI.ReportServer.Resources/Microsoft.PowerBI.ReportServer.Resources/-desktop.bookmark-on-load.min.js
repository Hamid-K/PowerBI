"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "bookmark-on-load" ], {
    15318: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            BookmarkOnLoadModule: function() {
                return BookmarkOnLoadModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), bookmark_service = __webpack_require__(17966), exploration_state_applier_service = __webpack_require__(19276), conceptual_schema_proxy_service = __webpack_require__(26898), data_sources_service = __webpack_require__(83008), exploration_state_service = __webpack_require__(39445), exploration_state_manager_service = __webpack_require__(49080), feature_switch_service = __webpack_require__(9380), promiseFactory = __webpack_require__(14463), visualContainerUtils = __webpack_require__(60661), events = __webpack_require__(10556), debug = __webpack_require__(62458), Telemetry = __webpack_require__(21617), BookmarkOnLoadServiceLazyProvider = {
            provide: "bookmarkOnLoad",
            useFactory: function(bookmarkService, conceptualSchemaProxy, dataSources, explorationStateService, explorationStateManagerService, featureSwitchService, explorationStateApplierService, promiseFactory, telemetryService) {
                var service = new BookmarkOnLoadService(bookmarkService, conceptualSchemaProxy, dataSources, explorationStateService, explorationStateManagerService, featureSwitchService, explorationStateApplierService, telemetryService);
                return promiseFactory.resolve(service);
            },
            deps: [ bookmark_service.F, conceptual_schema_proxy_service.i, data_sources_service.D, exploration_state_service.H, exploration_state_manager_service.J, feature_switch_service.vZ, exploration_state_applier_service.j, promiseFactory.t, Telemetry.y0 ]
        }, BookmarkOnLoadService = function() {
            function BookmarkOnLoadService(bookmarkService, conceptualSchemaProxy, dataSources, explorationStateService, stateManager, featureSwitchService, explorationStateApplierService, telemetryService) {
                this.bookmarkService = bookmarkService, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.dataSources = dataSources, this.explorationStateService = explorationStateService, 
                this.stateManager = stateManager, this.featureSwitchService = featureSwitchService, 
                this.explorationStateApplierService = explorationStateApplierService, this.telemetryService = telemetryService;
            }
            return BookmarkOnLoadService.prototype.applyBookmarkOnLoad = function(bookmarkResolution, exploration, customVisualResourcesPromise, reportPage, openReportContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, schemaPromise, initPromises, activeBookmark, impact, partialImpact, applyStateOptions, activeBookmarkOptions, _a, _b, _c, activity, error_1;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return dataSources = this.dataSources.get(), schemaPromise = this.conceptualSchemaProxy.get(dataSources), 
                            initPromises = [ schemaPromise ], customVisualResourcesPromise && initPromises.push(customVisualResourcesPromise), 
                            [ 4, Promise.allSettled(initPromises) ];

                          case 1:
                            _d.sent(), activeBookmark = bookmarkResolution.bookmark, debug.fF.assert(function() {
                                return !!activeBookmark;
                            }, "a valid bookmark must be present"), _d.label = 2;

                          case 2:
                            return _d.trys.push([ 2, 4, , 5 ]), applyStateOptions = {
                                clearUnmatchedData: !1
                            }, activeBookmark.options && (applyStateOptions.suppressData = (activeBookmarkOptions = activeBookmark.options).suppressData, 
                            applyStateOptions.suppressActiveSection = activeBookmarkOptions.suppressActiveSection, 
                            applyStateOptions.suppressDisplay = activeBookmarkOptions.suppressDisplay, activeBookmarkOptions.applyOnlyToTargetVisuals && (applyStateOptions.targetVisualNames = activeBookmarkOptions.targetVisualNames)), 
                            _b = (_a = this.explorationStateService).apply, _c = [ activeBookmark.explorationState, exploration ], 
                            [ 4, schemaPromise ];

                          case 3:
                            if (impact = _b.apply(_a, _c.concat([ _d.sent(), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, applyStateOptions), {
                                suppressActiveSection: !!reportPage,
                                applyPresentationChanges: !0,
                                isPersistentState: 1 !== bookmarkResolution.resolution
                            }) ])), this.explorationStateApplierService.syncFilterState(impact), 1 === bookmarkResolution.resolution && this.bookmarkService.setActiveBookmark(activeBookmark), 
                            !impact) return [ 2 ];
                            if (partialImpact = function(impact) {
                                if (impact.activeSection) {
                                    var partialImpact = {
                                        visualContainers: impact.visualContainers,
                                        visualContainerGroups: impact.visualContainerGroups
                                    };
                                    return impact.filterScope && (partialImpact.filterScope = impact.filterScope), impact.pendingHighlights && (partialImpact.pendingHighlights = impact.pendingHighlights), 
                                    impact.visibility && (partialImpact.visibility = impact.visibility), partialImpact;
                                }
                                return impact;
                            }(impact), !this.featureSwitchService.featureSwitches.bookmarkInitRefactor) {
                                activity = this.stateManager.createApplyBookmarkActivity("ApplyBookmarkOnLoad", openReportContextActivity);
                                try {
                                    this.stateManager.applyImpact(partialImpact, exploration, (0, tslib_es6.__assign)((0, 
                                    tslib_es6.__assign)({}, applyStateOptions), {
                                        suppressActiveSection: !0,
                                        suppressDisplay: !0
                                    }), activity), activity.resolve();
                                } catch (error) {
                                    activity.reject(error);
                                }
                            }
                            return (0, visualContainerUtils.oU)(exploration), [ 3, 5 ];

                          case 4:
                            return error_1 = _d.sent(), this.telemetryService.logEvent(events.WZm, {
                                bookmarkType: 1 === bookmarkResolution.resolution ? -1 : activeBookmark.type,
                                bookmarkObjectId: activeBookmark.name,
                                errorCode: "ApplyError",
                                pbi_source: error_1.stack,
                                stack: error_1.message
                            }), [ 3, 5 ];

                          case 5:
                            return [ 2, impact ];
                        }
                    });
                });
            }, BookmarkOnLoadService;
        }(), common = __webpack_require__(77476), Data_module = __webpack_require__(52910), lazy_load_module = __webpack_require__(82156), core = __webpack_require__(50423), BookmarkOnLoadModule = function() {
            function BookmarkOnLoadModule() {}
            return BookmarkOnLoadModule.\u0275fac = function(t) {
                return new (t || BookmarkOnLoadModule);
            }, BookmarkOnLoadModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: BookmarkOnLoadModule
            }), BookmarkOnLoadModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ BookmarkOnLoadServiceLazyProvider ],
                imports: [ common.CommonModule, Data_module.O, lazy_load_module.N ]
            }), BookmarkOnLoadModule;
        }();
    }
} ]);