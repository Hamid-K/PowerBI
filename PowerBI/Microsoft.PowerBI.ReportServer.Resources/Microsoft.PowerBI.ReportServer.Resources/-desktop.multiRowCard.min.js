"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "multiRowCard" ], {
    88695: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            MultiRowCard: function() {
                return MultiRowCard;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(81337), _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(90077), _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(90120), _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(54522), _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(21181), _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(18664), _Visuals_common_interactivityUtils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(30237), _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(91358), _Visuals_common_listView__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(97121), _Visuals_common_visualLocKeys__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(33024), _Visuals_services_interactivityService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(72902), _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40550), _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(44783), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62458), _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38265), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(32041), _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(56578), _VisualsCommon_Utility_loadMoreDataHandler__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(60810), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(64329), _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(48066), _VisualsContracts_common_enums__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(46135), _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82755), _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(72489), _VisualsData_selection_selectionId__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(26543), _Visuals_common_legacyDataLabelViewModel__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(57416), TitleFontFamily = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.semibold.css, DefaultFontFamily = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.regular.css, DefaultOutlineStyle = _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.$m.Nil, DefaultBarOutlineStyle = _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.$m.Left, rowClass = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("row"), EdgeSettings = function() {
            function EdgeSettings(weight, color) {
                this.applyParams(!0, weight, color);
            }
            return EdgeSettings.prototype.applyParams = function(shown, weight, color) {
                shown ? (this.weight = weight ?? 0, this.color = color ?? "black") : (this.weight = 0, 
                this.color = "black");
            }, EdgeSettings.prototype.getCSS = function() {
                var css = [];
                return _.isNumber(this.weight) && (css.push(this.weight + "px"), this.color && css.push(this.color), 
                css.push("solid")), css.join(" ");
            }, EdgeSettings;
        }(), MultiRowCard = function() {
            function MultiRowCard(options) {
                this.isInteractivityOverflowHidden = !1, options && (this.interactivityEnabled = options.interactivityEnabled, 
                this.behavior = options.behavior);
            }
            return MultiRowCard.prototype.init = function(options) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(options, "options"), 
                this.options = options, this.style = options.style, this.featureSwitches = options.featureSwitches || {};
                var viewport = this.currentViewport = options.viewport, interactivity = options.interactivity;
                interactivity && "hidden" === interactivity.overflow && (this.isInteractivityOverflowHidden = !0), 
                this.featureSwitches.multiRowCardSelection && this.interactivityEnabled && this.behavior && (this.interactivityService = (0, 
                _Visuals_services_interactivityService__WEBPACK_IMPORTED_MODULE_4__.ub)(options.host, this.featureSwitches));
                var multiRowCardDiv = this.element = $("<div></div>").addClass(MultiRowCard.MultiRowCardRoot.class).css({
                    height: getPixelString(viewport.height)
                });
                options.element.append(multiRowCardDiv), this.initializeCardRowSelection();
            }, MultiRowCard.prototype.destroy = function() {
                this.listView && this.listView.destroy();
            }, MultiRowCard.prototype.onDataChanged = function(options) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(options, "options");
                var dataViews = options.dataViews;
                if (dataViews && dataViews.length > 0) {
                    var dataView = this.dataView = dataViews[0], resetScrollbarPosition = options.operationKind !== _VisualsContracts_common_enums__WEBPACK_IMPORTED_MODULE_5__.su.Append, data_1 = this.data = MultiRowCard.converter(dataView, dataView.table.columns.length, dataView.table.rows.length, this.style, this.options.host, this.isInteractivityOverflowHidden);
                    this.setCardDimensions(), this.listView.data(data_1.dataModel, function(d) {
                        return data_1.dataModel.indexOf(d);
                    }, resetScrollbarPosition);
                } else {
                    this.listView.empty();
                    var getColor = function(colorName) {
                        return _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_6__.v.getThemeColor(_this.style, colorName);
                    };
                    this.data = {
                        dataModel: [],
                        dataColumnCount: 0,
                        cardTitleSettings: (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.bT)({
                            show: !0,
                            labelColor: getColor("foregroundNeutralSecondaryAlt"),
                            fontSize: 13,
                            fontFamily: TitleFontFamily,
                            style: this.style,
                            textClassName: "dataTitle"
                        }),
                        categoryLabelsSettings: (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.bT)({
                            show: !0,
                            labelColor: getColor("foregroundNeutralTertiary"),
                            fontSize: 9,
                            fontFamily: DefaultFontFamily,
                            style: this.style,
                            textClassName: "largeLightLabel"
                        }),
                        dataLabelsSettings: (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.bT)({
                            show: !0,
                            labelColor: getColor(_VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_8__.fA),
                            fontSize: 10,
                            fontFamily: DefaultFontFamily,
                            style: this.style,
                            textClassName: "largeLabel"
                        }),
                        cardSettings: MultiRowCard.getCardSettings(null, this.style)
                    };
                }
                this.dataLabelHeight = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_9__.FP.toString(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.estimateSvgTextHeight((0, 
                _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_11__.qk)(this.data.dataLabelsSettings.fontProperties))), 
                this.categoryLabelHeight = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_9__.FP.toString(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.estimateSvgTextHeight((0, 
                _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_11__.qk)(this.data.categoryLabelsSettings.fontProperties))), 
                this.titleLabelHeight = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_9__.FP.toString(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.estimateSvgTextHeight((0, 
                _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_11__.qk)(this.data.cardTitleSettings.fontProperties))), 
                this.waitingForData = !1;
            }, MultiRowCard.getCardSettings = function(dataView, style) {
                var objects = dataView && dataView.metadata && dataView.metadata.objects ? dataView.metadata.objects : null, colorHelper = _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_6__.v.create(style);
                return {
                    outlineSettings: {
                        outlineStyle: (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.NA)(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.outlineStyle, DefaultOutlineStyle),
                        color: colorHelper.getColorForProperty(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.outlineColor, "foregroundNeutralLight"),
                        weight: (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.NA)(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.outlineWeight, 1)
                    },
                    barSettings: {
                        outlineStyle: (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.NA)(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.barShow, !0) ? DefaultBarOutlineStyle : _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.$m.Nil,
                        color: colorHelper.getColorForProperty(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.barColor, "foregroundNeutralTertiary"),
                        weight: (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.NA)(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.barWeight, 3)
                    },
                    cardPadding: (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.NA)(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.cardPadding, MultiRowCard.DefaultStyle.row.marginBottom),
                    cardBackground: (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.W7)(objects, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Pt.card.cardBackground, MultiRowCard.DefaultStyle.row.background)
                };
            }, MultiRowCard.prototype.onResizing = function(viewport) {
                var heightNotChanged = this.currentViewport.height === viewport.height;
                if (this.currentViewport = viewport, this.element.css("height", getPixelString(viewport.height)), 
                this.dataView) {
                    var previousMaxColPerRow = this.maxColPerRow;
                    this.maxColPerRow = this.getMaxColPerRow(), heightNotChanged && previousMaxColPerRow === this.maxColPerRow || this.listView.viewport(viewport);
                }
            }, MultiRowCard.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, MultiRowCard.prototype.onRestoreSelection = function(options) {
                return !!this.interactivityService && this.interactivityService.restoreSelection(options.selection);
            }, MultiRowCard.converter = function(dataView, columnCount, maxCards, style, hostServices, isDashboardVisual) {
                var _a;
                void 0 === isDashboardVisual && (isDashboardVisual = !1);
                var cardTitleSettings, dataLabelsSettings, categoryLabelsSettings, details = [], tableDataRows = dataView.table.rows, columnMetadata = dataView.table.columns, getColor = function(colorName) {
                    return _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_6__.v.getThemeColor(style, colorName);
                };
                if (cardTitleSettings = (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.bT)({
                    show: !0,
                    labelColor: getColor("foregroundNeutralSecondaryAlt"),
                    fontSize: 13,
                    fontFamily: TitleFontFamily,
                    style,
                    textClassName: "dataTitle"
                }), categoryLabelsSettings = (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.bT)({
                    show: !0,
                    labelColor: getColor("foregroundNeutralTertiary"),
                    fontSize: 9,
                    fontFamily: DefaultFontFamily,
                    style,
                    textClassName: "largeLightLabel"
                }), dataLabelsSettings = (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.bT)({
                    show: !0,
                    labelColor: getColor(_VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_8__.fA),
                    fontSize: 10,
                    fontFamily: DefaultFontFamily,
                    style,
                    textClassName: "largeLabel"
                }), dataView.metadata && dataView.metadata.objects) {
                    var cardTitleLabelObjects = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.RK)(dataView.metadata.objects, "cardTitle");
                    (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.ww)(cardTitleLabelObjects, cardTitleSettings, void 0, style);
                    var dataLabelObject = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.RK)(dataView.metadata.objects, "dataLabels");
                    (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.ww)(dataLabelObject, dataLabelsSettings, void 0, style);
                    var categoryLabelObject = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_12__.RK)(dataView.metadata.objects, "categoryLabels");
                    (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.ww)(categoryLabelObject, categoryLabelsSettings, void 0, style);
                }
                for (var i = 0, len = maxCards; i < len; i++) {
                    for (var title, row = tableDataRows[i], promotedColumnIndex = null, canPromote = !0, showTitleAsURL = !1, showTitleAsImage = !1, showTitleAsKPI = !1, cardData = [], j = 0; j < columnCount; j++) {
                        var column = columnMetadata[j], statusGraphicInfo = (0, _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_14__.zl)(column, row[j]), columnCaption = void 0;
                        statusGraphicInfo && (columnCaption = statusGraphicInfo.class), columnCaption || (columnCaption = (0, 
                        _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_15__.kA)(row[j], row.objects && row.objects[j], column, MultiRowCard.formatStringProp, !0));
                        var showKPI = void 0 !== statusGraphicInfo && void 0 !== statusGraphicInfo.caption, columnDetail = columnMetadata[j].displayName;
                        !canPromote || isDashboardVisual || column.type.numeric || (null == promotedColumnIndex ? (promotedColumnIndex = j, 
                        title = columnCaption, showTitleAsURL = (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_16__.cR)(column) && (0, 
                        _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_17__.HH)(title), showTitleAsImage = (0, 
                        _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_16__.pt)(column) && (0, 
                        _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_17__.gU)(columnCaption), 
                        showTitleAsKPI = showKPI) : null != promotedColumnIndex && (canPromote = !1, promotedColumnIndex = null));
                        var selectionId = void 0;
                        if (dataView.table.identity) {
                            var queryName = null === (_a = _.find(columnMetadata, function(column) {
                                return !column.isMeasure;
                            })) || void 0 === _a ? void 0 : _a.queryName;
                            void 0 !== queryName && (selectionId = (new _VisualsData_selection_selectionId__WEBPACK_IMPORTED_MODULE_18__.dw).withMeasure(columnMetadata[j].queryName).withColumnIdentity(dataView.table.identity[i], queryName).createSelectionId());
                        }
                        cardData.push({
                            caption: columnCaption,
                            details: columnDetail,
                            showURL: (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_16__.cR)(column) && (0, 
                            _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_17__.HH)(columnCaption),
                            showImage: (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_16__.pt)(column) && (0, 
                            _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_17__.gU)(columnCaption),
                            showKPI,
                            columnIndex: j,
                            identity: selectionId,
                            selected: !1
                        });
                    }
                    if (null != promotedColumnIndex) {
                        for (var dataBeforeTitle = cardData.slice(0, promotedColumnIndex), dataAfterTitle = cardData.slice(promotedColumnIndex + 1), _i = 0, dataAfterTitle_1 = dataAfterTitle; _i < dataAfterTitle_1.length; _i++) dataAfterTitle_1[_i].columnIndex--;
                        cardData = dataBeforeTitle.concat(dataAfterTitle);
                    }
                    title = title ?? hostServices.getLocalizedString("NullValue"), details.push({
                        title: null != promotedColumnIndex ? title : void 0,
                        showTitleAsURL,
                        showTitleAsImage,
                        showTitleAsKPI,
                        cardItemsData: cardData
                    });
                }
                return {
                    dataModel: details,
                    dataColumnCount: details[0] ? details[0].cardItemsData.length : 0,
                    cardTitleSettings,
                    categoryLabelsSettings,
                    dataLabelsSettings,
                    cardSettings: MultiRowCard.getCardSettings(dataView, style)
                };
            }, MultiRowCard.prototype.initializeCardRowSelection = function() {
                var _this = this, isDashboardVisual = this.isInteractivityOverflowHidden, listViewOptions = {
                    rowHeight: void 0,
                    enter: function(rowSelection) {
                        var cardRow = rowSelection.append("div").classed(MultiRowCard.Card.class, !0);
                        _this.interactivityEnabled && (cardRow.attr("tabindex", 0), cardRow.on("keydown.row", function() {
                            var d3Event = d3.event, keyCode = d3Event.keyCode;
                            9 === keyCode && !d3Event.shiftKey || 39 === keyCode || 40 === keyCode ? _this.navigateForward() : (9 === keyCode && d3Event.shiftKey || 37 === keyCode || 38 === keyCode) && _this.navigateBackward();
                        })), isDashboardVisual ? cardRow.classed("mrtile", !0) : _this.cardHasTitle && cardRow.append("div").classed(MultiRowCard.Title.class, !0).each(function(d) {
                            d.showTitleAsImage ? appendImage(d3.select(this)) : d.showTitleAsURL ? d3.select(this).append("a") : d.showTitleAsKPI && d3.select(this).append("div").classed(MultiRowCard.KPITitle.class, !0).classed(d.title, !0).styles({
                                display: "inline-block",
                                verticalAlign: "sub"
                            });
                        });
                        var cardItem = cardRow.selectAll(MultiRowCard.CardItemContainer.selector).data(function(d) {
                            return d.cardItemsData;
                        }), cardItemEnterUpdate = cardItem.enter().append("div").classed(MultiRowCard.CardItemContainer.class, !0).merge(cardItem);
                        cardItemEnterUpdate.append("div").classed(MultiRowCard.Caption.class, !0).each(function(d) {
                            d.showURL ? d3.select(this).append("a") : d.showImage ? appendImage(d3.select(this)) : d.showKPI && d3.select(this).append("div").classed(d.caption, !0).styles({
                                display: "inline-block",
                                verticalAlign: "sub"
                            });
                        }), cardItemEnterUpdate.append("div").classed(MultiRowCard.Details.class, !0);
                    },
                    update: function(rowSelection) {
                        var style = _this.getStyle(), rowBorderStyle = _this.getBorderStyles(style.row.border, style.row.padding);
                        rowSelection.styles(rowBorderStyle).styles({
                            "margin-bottom": isDashboardVisual || _this.isSingleRowCard ? "0px" : getPixelString(style.row.marginBottom),
                            background: style.row.background
                        }), !isDashboardVisual && _this.cardHasTitle && (rowSelection.selectAll(MultiRowCard.Title.selector).filter(function(d) {
                            return !d.showTitleAsImage && !d.showTitleAsKPI;
                        }).styles({
                            "font-size": _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_9__.FP.fromPoint(style.title.fontSize),
                            "font-family": style.title.family,
                            "line-height": _this.titleLabelHeight,
                            height: _this.titleLabelHeight,
                            color: style.title.color,
                            "font-style": style.title.italic,
                            "font-weight": style.title.bold,
                            "text-decoration": style.title.underline
                        }), rowSelection.selectAll(MultiRowCard.Title.selector).filter(function(d) {
                            return !d.showTitleAsURL && !d.showTitleAsImage && !d.showTitleAsKPI;
                        }).text(function(d) {
                            return d.title;
                        }).attr("title", function(d) {
                            return d.title;
                        }), rowSelection.selectAll(MultiRowCard.TitleUrlSelector).text(function(d) {
                            return d.title;
                        }).attrs({
                            href: function(d) {
                                return d.title;
                            },
                            target: "_blank",
                            rel: "noopener noreferrer"
                        }), rowSelection.selectAll(MultiRowCard.TitleImageSelector).attr("src", function(d) {
                            return d.title;
                        }), setImageStyle(rowSelection.selectAll(MultiRowCard.Title.selector), style.imageTitle), 
                        rowSelection.selectAll(MultiRowCard.KPITitle.selector).each(function(d) {
                            d3.select(this).classed(d.title);
                        }));
                        var cardSelection = rowSelection.selectAll(MultiRowCard.Card.selector).attr("aria-label", function(d) {
                            return _this.getFormattedCardData(d);
                        }), cardBorderStyle = _this.getBorderStyles(style.card.border, style.card.padding);
                        cardSelection.styles(cardBorderStyle), cardSelection.selectAll(MultiRowCard.Caption.selector).filter(function(d) {
                            return !d.showImage;
                        }).styles({
                            "line-height": _this.dataLabelHeight,
                            height: _this.dataLabelHeight,
                            "font-size": _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_9__.FP.fromPoint(style.caption.fontSize),
                            "font-family": style.caption.family,
                            "font-style": style.caption.italic,
                            "font-weight": style.caption.bold,
                            "text-decoration": style.caption.underline
                        }).filter(function(d) {
                            return !d.showKPI;
                        }).styles({
                            color: style.caption.color
                        }).filter(function(d) {
                            return !d.showURL;
                        }).text(function(d) {
                            return d.caption;
                        }).attr("title", function(d) {
                            return d.caption;
                        }), cardSelection.selectAll(MultiRowCard.CaptionImageSelector).attr("src", function(d) {
                            return d.caption;
                        }).styles(style.imageCaption);
                        var cardPaddingTop = getPixelString(style.cardItemContainer.padding.top), cardItems = cardSelection.selectAll(MultiRowCard.CardItemContainer.selector);
                        if (cardItems.styles({
                            "padding-top": function(d) {
                                return _this.isInFirstRow(d.columnIndex) ? "" : cardPaddingTop;
                            },
                            "padding-right": function(d) {
                                return _this.isLastRowItem(d.columnIndex, _this.dataView.metadata.columns.length) ? "0px" : getPixelString(style.cardItemContainer.paddingRight);
                            },
                            width: function(d) {
                                return _this.getColumnWidth(d.columnIndex, _this.data.dataColumnCount);
                            }
                        }), _this.interactivityService && _this.interactivityService.bind(cardItems.data(), _this.behavior, {
                            cardItems,
                            rows: rowSelection,
                            titles: rowSelection.selectAll(MultiRowCard.Title.selector),
                            hasSelection: _this.interactivityService.hasSelection()
                        }), setImageStyle(cardSelection.selectAll(MultiRowCard.Caption.selector), style.imageCaption), 
                        cardSelection.selectAll(MultiRowCard.CaptionUrlSelector).attrs({
                            href: function(d) {
                                return d.caption;
                            },
                            target: "_blank",
                            rel: "noopener noreferrer"
                        }).text(function(d) {
                            return d.caption;
                        }), style.details.isVisible && cardSelection.selectAll(MultiRowCard.Details.selector).text(function(d) {
                            return d.details;
                        }).styles({
                            "font-size": _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_9__.FP.fromPoint(style.details.fontSize),
                            "font-family": style.details.family,
                            "line-height": _this.categoryLabelHeight,
                            height: _this.categoryLabelHeight,
                            color: style.details.color,
                            "font-style": style.details.italic,
                            "font-weight": style.details.bold,
                            "text-decoration": style.details.underline
                        }).attr("title", function(d) {
                            return d.details;
                        }), _this.interactivityEnabled && null != _this.targetFocusCardIndex) {
                            var targetElement = rowSelection.filter(function(d) {
                                return _this.data.dataModel.indexOf(d) === _this.targetFocusCardIndex;
                            }).node();
                            _this.targetFocusCardIndex = null, targetElement && $(targetElement).find(":tabbable").get(0).focus();
                        }
                    },
                    loadMoreData: function() {
                        return _this.onLoadMoreData();
                    },
                    viewport: this.currentViewport,
                    baseContainer: d3.select(this.element.get(0)),
                    scrollEnabled: !this.isInteractivityOverflowHidden,
                    isReadMode: function() {
                        return 1 !== _this.options.host.getViewMode();
                    }
                };
                this.listView = (0, _Visuals_common_listView__WEBPACK_IMPORTED_MODULE_19__.P)(listViewOptions);
            }, MultiRowCard.prototype.navigateForward = function() {
                var _this = this, d3Event = d3.event;
                this.targetFocusCardIndex = void 0, d3Event.preventDefault(), d3Event.stopPropagation();
                var targetRowElement = $(d3Event.target).parent(rowClass.selector).get(0);
                targetRowElement && targetRowElement.nextElementSibling ? $(targetRowElement.nextElementSibling).find(":tabbable").get(0).focus() : (0, 
                _Visuals_common_interactivityUtils__WEBPACK_IMPORTED_MODULE_20__.kW)(function(d) {
                    var nextPosition = _this.data.dataModel.indexOf(d) + 1, currentPosition = _this.listView.getCurrentPosition(), visibleRows = currentPosition.endIndex - currentPosition.startIndex, totalRows = _this.data.dataModel.length;
                    if (visibleRows < totalRows && nextPosition >= currentPosition.endIndex) {
                        _this.targetFocusCardIndex = nextPosition;
                        var targetEndIndex = nextPosition + 1;
                        _this.listView.performScrollToFrame(currentPosition.startIndex + (targetEndIndex - currentPosition.endIndex), targetEndIndex, totalRows, visibleRows, !0);
                    }
                });
            }, MultiRowCard.prototype.navigateBackward = function() {
                var _this = this, d3Event = d3.event;
                this.targetFocusCardIndex = void 0, d3Event.preventDefault(), d3Event.stopPropagation();
                var targetRowElement = $(d3Event.target).parent(rowClass.selector).get(0);
                targetRowElement && targetRowElement.previousElementSibling ? $(targetRowElement.previousElementSibling).find(":tabbable").get(0).focus() : (0, 
                _Visuals_common_interactivityUtils__WEBPACK_IMPORTED_MODULE_20__.kW)(function(d) {
                    var prevPosition = _this.data.dataModel.indexOf(d) - 1, currentPosition = _this.listView.getCurrentPosition();
                    if (prevPosition >= 0 && prevPosition < currentPosition.startIndex) {
                        _this.targetFocusCardIndex = prevPosition;
                        var visibleRows = currentPosition.endIndex - currentPosition.startIndex;
                        _this.listView.performScrollToFrame(prevPosition, prevPosition + visibleRows, _this.data.dataModel.length, visibleRows, !0);
                    }
                });
            }, MultiRowCard.prototype.getBorderStyles = function(border, padding) {
                var hasBorder_top = null != border && null != border.top, hasBorder_right = null != border && null != border.right, hasBorder_bottom = null != border && null != border.bottom, hasBorder_left = null != border && null != border.left, hasPadding_top = null != padding && null != padding.top, hasPadding_right = null != padding && null != padding.right, hasPadding_bottom = null != padding && null != padding.bottom, hasPadding_left = null != padding && null != padding.left;
                return {
                    "border-top": hasBorder_top ? border.top.getCSS() : "",
                    "border-right": hasBorder_right ? border.right.getCSS() : "",
                    "border-bottom": hasBorder_bottom ? border.bottom.getCSS() : "",
                    "border-left": hasBorder_left ? border.left.getCSS() : "",
                    "padding-top": hasBorder_top && hasPadding_top ? getPixelString(padding.top) : "",
                    "padding-right": hasBorder_right && hasPadding_right ? getPixelString(padding.right) : "",
                    "padding-bottom": hasBorder_bottom && hasPadding_bottom ? getPixelString(padding.bottom) : "",
                    "padding-left": hasBorder_left && hasPadding_left ? getPixelString(padding.left) : ""
                };
            }, MultiRowCard.prototype.getFormattedCardData = function(card) {
                var formattedTitle = card.title ? "".concat(card.title, ". ") : "", formattedData = _.reduce(card.cardItemsData, function(formatted, cardItem) {
                    return "".concat(formatted).concat(cardItem.details, " ").concat(cardItem.caption, ". ");
                }, formattedTitle);
                return "".concat(formattedData).concat(this.data.dataModel.indexOf(card) + 1, " ").concat(this.options.host.getLocalizedString("Of"), " ").concat(this.data.dataModel.length, ".");
            }, MultiRowCard.prototype.getMaxColPerRow = function() {
                var rowWidth = this.currentViewport.width, minColumnWidth = this.getStyle().cardItemContainer.minWidth, columnCount = this.data.dataColumnCount, maxColumnPerRow = Math.floor(rowWidth / minColumnWidth) || 1;
                return Math.min(columnCount, maxColumnPerRow);
            }, MultiRowCard.prototype.getRowIndex = function(fieldIndex) {
                return Math.floor(1 * fieldIndex / this.getMaxColPerRow());
            }, MultiRowCard.prototype.getStyle = function() {
                var defaultStyles = MultiRowCard.DefaultStyle, customStyles = this.getCustomStyles();
                if (!this.isInteractivityOverflowHidden) return $.extend(!0, {}, defaultStyles, customStyles);
                for (var viewportWidth = this.currentViewport.width, overrideStyle = {}, _i = 0, _a = MultiRowCard.tileMediaQueries; _i < _a.length; _i++) {
                    var currentQuery = _a[_i];
                    if (viewportWidth <= currentQuery.maxWidth) {
                        overrideStyle = currentQuery.style;
                        break;
                    }
                }
                return $.extend(!0, {}, defaultStyles, customStyles, overrideStyle);
            }, MultiRowCard.prototype.getSurroundSettings = function(outlineSettings) {
                var edge = new EdgeSettings(outlineSettings.weight, outlineSettings.color);
                return {
                    top: (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.yo)(outlineSettings.outlineStyle) ? edge : null,
                    right: (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.BK)(outlineSettings.outlineStyle) ? edge : null,
                    bottom: (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.mv)(outlineSettings.outlineStyle) ? edge : null,
                    left: (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.fs)(outlineSettings.outlineStyle) ? edge : null
                };
            }, MultiRowCard.prototype.getCustomStyles = function() {
                var dataLabelsSettings = this.data.dataLabelsSettings, categoryLabelSettings = this.data.categoryLabelsSettings, titleLabelSettings = this.data.cardTitleSettings, cardSettings = this.data.cardSettings;
                return {
                    row: {
                        border: this.getSurroundSettings(cardSettings.outlineSettings),
                        marginBottom: cardSettings.cardPadding,
                        background: cardSettings.cardBackground
                    },
                    card: {
                        border: this.getSurroundSettings(cardSettings.barSettings)
                    },
                    details: {
                        fontSize: categoryLabelSettings.fontProperties.size.pt,
                        family: categoryLabelSettings.fontProperties.family,
                        color: categoryLabelSettings.fontProperties.color,
                        isVisible: categoryLabelSettings.show,
                        bold: categoryLabelSettings.bold ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.en : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.AI,
                        italic: categoryLabelSettings.italic ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.BF : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.AI,
                        underline: categoryLabelSettings.underline ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.f0 : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.zu
                    },
                    caption: {
                        fontSize: dataLabelsSettings.fontProperties.size.pt,
                        family: dataLabelsSettings.fontProperties.family,
                        color: dataLabelsSettings.fontProperties.color,
                        bold: dataLabelsSettings.bold ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.en : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.AI,
                        italic: dataLabelsSettings.italic ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.BF : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.AI,
                        underline: dataLabelsSettings.underline ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.f0 : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.zu
                    },
                    title: {
                        fontSize: titleLabelSettings.fontProperties.size.pt,
                        family: titleLabelSettings.fontProperties.family,
                        color: titleLabelSettings.fontProperties.color,
                        bold: titleLabelSettings.bold ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.en : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.AI,
                        italic: titleLabelSettings.italic ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.BF : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.AI,
                        underline: titleLabelSettings.underline ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.f0 : _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.zu
                    }
                };
            }, MultiRowCard.prototype.getColumnWidth = function(fieldIndex, columnCount) {
                var maxColumnPerRow = this.getMaxColPerRow();
                if (maxColumnPerRow >= columnCount) return 100 / columnCount + "%";
                var lastRowCount = columnCount % maxColumnPerRow;
                return this.getRowIndex(fieldIndex) < Math.ceil(1 * columnCount / maxColumnPerRow) || 0 === lastRowCount ? 100 / maxColumnPerRow + "%" : 100 / lastRowCount + "%";
            }, MultiRowCard.prototype.isLastRowItem = function(fieldIndex, columnCount) {
                if (fieldIndex + 1 === columnCount) return !0;
                var maxColumnPerRow = this.getMaxColPerRow();
                return maxColumnPerRow - fieldIndex % maxColumnPerRow == 1;
            }, MultiRowCard.prototype.isInFirstRow = function(fieldIndex) {
                return fieldIndex < this.getMaxColPerRow();
            }, MultiRowCard.prototype.setCardDimensions = function() {
                this.cardHasTitle = !1;
                var dataModel = this.data.dataModel;
                !this.isInteractivityOverflowHidden && dataModel && dataModel.length > 0 && (this.cardHasTitle = void 0 !== dataModel[0].title, 
                this.isSingleRowCard = 1 === dataModel.length);
            }, MultiRowCard.prototype.onLoadMoreData = function() {
                return this.waitingForData ? _VisualsCommon_Utility_loadMoreDataHandler__WEBPACK_IMPORTED_MODULE_21__.G.WaitingForData : this.dataView.metadata && this.dataView.metadata.segment ? (this.options.host.loadMoreData(), 
                this.waitingForData = !0, _VisualsCommon_Utility_loadMoreDataHandler__WEBPACK_IMPORTED_MODULE_21__.G.TriggeredLoadMore) : _VisualsCommon_Utility_loadMoreDataHandler__WEBPACK_IMPORTED_MODULE_21__.G.NoOperation;
            }, MultiRowCard.getDataLabelSettingsOptions = function(enumeration, labelSettings, style, show) {
                return void 0 === show && (show = !1), {
                    enumeration,
                    dataLabelsSettings: labelSettings,
                    show,
                    fontSize: !0,
                    fontFamily: !0,
                    style,
                    bold: !0,
                    italic: !0,
                    underline: !0
                };
            }, MultiRowCard.prototype.getCalloutValueCard = function() {
                var _this = this;
                return (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.XQ)({
                    cardBuilder: new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.CQ(new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.lg("labels"), "Visual_CallOutValues", _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Mb.dataLabels, function(key) {
                        return _this.options.host.getLocalizedString(key);
                    }),
                    dataLabelsProps: _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Mb.dataLabels,
                    featureSwitches: this.featureSwitches,
                    hostServices: this.options.host,
                    options: MultiRowCard.getDataLabelSettingsOptions(void 0, this.data.dataLabelsSettings, this.style),
                    omitGroupDisplayNames: !0,
                    omitDescription: !0,
                    instanceKind: 3
                });
            }, MultiRowCard.prototype.getCategoryLabelCard = function() {
                var _this = this;
                return (0, _Visuals_common_dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.XQ)({
                    cardBuilder: new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.CQ(new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.lg("categoryLabels"), "Visual_CategoryLabels", _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Mb.categoryLabels, function(key) {
                        return _this.options.host.getLocalizedString(key);
                    }),
                    dataLabelsProps: _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Mb.categoryLabels,
                    featureSwitches: this.featureSwitches,
                    hostServices: this.options.host,
                    options: MultiRowCard.getDataLabelSettingsOptions(void 0, this.data.categoryLabelsSettings, this.style, !0),
                    omitGroupDisplayNames: !0,
                    customDescription: "Visual_CategoryLabelOptionsDescription",
                    instanceKind: 3
                });
            }, MultiRowCard.prototype.getCardsCard = function() {
                var _this = this, cardTitleSettings = this.data.cardTitleSettings, cardSettings = this.data.cardSettings, outlineSettings = cardSettings.outlineSettings, barSettings = cardSettings.barSettings, cardProps = (0, 
                tslib__WEBPACK_IMPORTED_MODULE_23__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_23__.__assign)({}, _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Mb.cardTitle), _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Mb.card), localize = function(key) {
                    return _this.options.host.getLocalizedString(key);
                }, cardBuilder = new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.CQ(new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.lg("card"), "Cards", cardProps, function(key) {
                    return _this.options.host.getLocalizedString(key);
                }), formatCardOptions = {
                    cardBuilder,
                    dataLabelsProps: _Visuals_capabilities_multiRowCard_capabilities__WEBPACK_IMPORTED_MODULE_13__.Mb.cardTitle,
                    featureSwitches: this.featureSwitches,
                    hostServices: this.options.host,
                    options: MultiRowCard.getDataLabelSettingsOptions(void 0, cardTitleSettings, this.style),
                    instanceKind: 3
                };
                return (0, _Visuals_common_legacyDataLabelViewModel__WEBPACK_IMPORTED_MODULE_24__.$_)(formatCardOptions, void 0, "Title", this.isInteractivityOverflowHidden || !this.cardHasTitle), 
                cardBuilder.addGroup("style", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Axis_Style").addSimpleSlice(cardProps.outlineStyle.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.oM({
                        descriptor: cardProps.outlineStyle,
                        value: outlineSettings.outlineStyle
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                    }), outlineSettings.outlineStyle !== _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.$m.Nil && groupBuilder.addSimpleSlice(cardProps.outlineColor.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.BT({
                        descriptor: cardProps.outlineColor,
                        value: {
                            value: outlineSettings.color
                        }
                    }).build()).addSimpleSlice(cardProps.outlineWeight.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.mu({
                        descriptor: cardProps.outlineWeight,
                        value: outlineSettings.weight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 1
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build()), groupBuilder.addSimpleSlice(cardProps.cardBackground.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.BT({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_23__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_23__.__assign)({}, cardProps.cardBackground), {
                            instanceKind: 3
                        }),
                        value: {
                            value: cardSettings.cardBackground
                        }
                    }).build()).addSimpleSlice(cardProps.cardPadding.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.JN({
                        descriptor: cardProps.cardPadding,
                        value: cardSettings.cardPadding,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 20
                            },
                            unitSymbol: _Visuals_common_visualLocKeys__WEBPACK_IMPORTED_MODULE_25__.e_
                        },
                        localize
                    }).build());
                }).addGroup("bar", function(groupBuilder) {
                    return groupBuilder.withDisplayName("Visual_Outline_AccentBar").addTopLevelToggle(cardProps.barShow.propertyName, function() {
                        return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.bd({
                            descriptor: cardProps.barShow,
                            value: barSettings.outlineStyle !== _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_1__.$m.Nil
                        }).build();
                    }).addSimpleSlice(cardProps.barColor.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.BT({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_23__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_23__.__assign)({}, cardProps.barColor), {
                            instanceKind: 3
                        }),
                        value: {
                            value: barSettings.color
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice(cardProps.barWeight.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.mu({
                        descriptor: cardProps.barWeight,
                        value: barSettings.weight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 1
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }).build();
            }, MultiRowCard.prototype.getFormattingModel = function() {
                var _this = this;
                return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_22__.Nq(function() {
                    return _this.getCalloutValueCard();
                }, function() {
                    return _this.getCategoryLabelCard();
                }, function() {
                    return _this.getCardsCard();
                }).build();
            }, MultiRowCard.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, MultiRowCard.MultiRowCardRoot = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("multiRowCard"), 
            MultiRowCard.Card = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("card"), 
            MultiRowCard.Title = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("title"), 
            MultiRowCard.CardItemContainer = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("cardItemContainer"), 
            MultiRowCard.Caption = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("caption"), 
            MultiRowCard.Details = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("details"), 
            MultiRowCard.TitleUrlSelector = MultiRowCard.Title.selector + " a", MultiRowCard.CaptionUrlSelector = MultiRowCard.Caption.selector + " a", 
            MultiRowCard.TitleImageSelector = MultiRowCard.Title.selector + " img", MultiRowCard.CaptionImageSelector = MultiRowCard.Caption.selector + " img", 
            MultiRowCard.KPITitle = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("kpiTitle"), 
            MultiRowCard.DefaultStyle = {
                row: {
                    border: null,
                    marginBottom: 20,
                    background: void 0,
                    padding: {
                        top: 5,
                        right: 5,
                        bottom: 5,
                        left: 5
                    }
                },
                card: {
                    border: null,
                    padding: {
                        top: 10,
                        right: 10,
                        bottom: 10,
                        left: 10
                    }
                },
                cardItemContainer: {
                    paddingRight: 20,
                    minWidth: 120,
                    padding: {
                        top: 7
                    }
                },
                imageCaption: {
                    maxHeight: 75,
                    maxWidth: 100
                },
                imageTitle: {
                    maxHeight: 75,
                    maxWidth: 100
                }
            }, MultiRowCard.tileMediaQueries = [ {
                maxWidth: 250,
                style: {
                    cardItemContainer: {
                        minWidth: 110
                    },
                    imageCaption: {
                        maxHeight: 45
                    }
                }
            }, {
                maxWidth: 490,
                style: {
                    cardItemContainer: {
                        minWidth: 130
                    },
                    imageCaption: {
                        maxHeight: 52
                    }
                }
            }, {
                maxWidth: 750,
                style: {
                    cardItemContainer: {
                        minWidth: 120
                    },
                    imageCaption: {
                        maxHeight: 53
                    }
                }
            }, {
                maxWidth: Number.MAX_VALUE,
                style: {
                    cardItemContainer: {
                        padding: {
                            top: 5
                        }
                    }
                }
            } ], MultiRowCard;
        }();
        function appendImage(selection) {
            selection.append("div").classed("imgCon", !0).append("img");
        }
        function setImageStyle(selection, imageStyle) {
            selection.selectAll(".imgCon").styles({
                height: getPixelString(imageStyle.maxHeight)
            }).selectAll("img").styles({
                "max-height": getPixelString(imageStyle.maxHeight),
                "max-width": getPixelString(imageStyle.maxWidth)
            });
        }
        function getPixelString(value) {
            return value + "px";
        }
    },
    60810: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            G: function() {
                return LoadMoreDataStatus;
            },
            J: function() {
                return SimpleLoadMoreDataHandler;
            }
        });
        var LoadMoreDataStatus = function(LoadMoreDataStatus) {
            return LoadMoreDataStatus[LoadMoreDataStatus.NoOperation = 0] = "NoOperation", LoadMoreDataStatus[LoadMoreDataStatus.WaitingForData = 1] = "WaitingForData", 
            LoadMoreDataStatus[LoadMoreDataStatus.TriggeredLoadMore = 2] = "TriggeredLoadMore", 
            LoadMoreDataStatus;
        }({}), SimpleLoadMoreDataHandler = function() {
            function SimpleLoadMoreDataHandler(hostServices) {
                this.hostServices = hostServices, this.waitingForData = !1;
            }
            return SimpleLoadMoreDataHandler.prototype.shouldLoadMoreData = function() {
                return this.shouldLoadMoreDataInternal() === LoadMoreDataStatus.TriggeredLoadMore;
            }, SimpleLoadMoreDataHandler.prototype.isLoadingMoreData = function() {
                return this.waitingForData;
            }, SimpleLoadMoreDataHandler.prototype.updateDataView = function(dataView) {
                this.dataView = dataView;
            }, SimpleLoadMoreDataHandler.prototype.loadMoreData = function() {
                var status = this.shouldLoadMoreDataInternal();
                return status === LoadMoreDataStatus.TriggeredLoadMore && (this.hostServices.loadMoreData(), 
                this.waitingForData = !0), status;
            }, SimpleLoadMoreDataHandler.prototype.onLoadMoreDataCompleted = function() {
                this.waitingForData = !1;
            }, SimpleLoadMoreDataHandler.prototype.shouldLoadMoreDataInternal = function() {
                if (!this.dataView) return LoadMoreDataStatus.NoOperation;
                var dataViewMetadata = this.dataView.metadata;
                return this.waitingForData ? LoadMoreDataStatus.WaitingForData : dataViewMetadata && dataViewMetadata.segment ? LoadMoreDataStatus.TriggeredLoadMore : LoadMoreDataStatus.NoOperation;
            }, SimpleLoadMoreDataHandler;
        }();
    }
} ]);