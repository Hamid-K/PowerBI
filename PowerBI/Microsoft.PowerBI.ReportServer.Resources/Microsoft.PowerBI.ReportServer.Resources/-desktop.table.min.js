"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "table" ], {
    87914: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            yv: function() {
                return PivotTableControlAutoMeasureDelay;
            },
            zf: function() {
                return ScrollbarWidth;
            }
        });
        var ScrollbarWidth = 9, PivotTableControlAutoMeasureDelay = 250;
    },
    44102: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            AT: function() {
                return VerticalScrollbar;
            },
            Xg: function() {
                return HorizontalScrollbar;
            },
            fw: function() {
                return fire;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81337), _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66232), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _pivotTable_pivotTableControlConstants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(87914), _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93340);
        function fire(eventHandlers, eventArgs) {
            if (eventHandlers) for (var _i = 0, eventHandlers_1 = eventHandlers; _i < eventHandlers_1.length; _i++) (0, 
            eventHandlers_1[_i])(eventArgs);
        }
        var ScrollbarButton = function() {
            function ScrollbarButton(owner, direction) {
                this._owner = owner, this._direction = direction, this._timerHandle = void 0, this.createView();
                var that = this;
                this._element.addEventListener("mousedown", function(e) {
                    that.onMouseDown(e);
                }), $(this._element).addClass("unselectable"), $(this._svg).addClass("unselectable"), 
                $(this._polygon).addClass("unselectable");
            }
            return Object.defineProperty(ScrollbarButton.prototype, "element", {
                get: function() {
                    return this._element;
                },
                enumerable: !1,
                configurable: !0
            }), ScrollbarButton.prototype.createView = function() {
                var svgns = "http://www.w3.org/2000/svg";
                this._polygon = document.createElementNS(svgns, "polygon"), this._polygon.setAttributeNS(null, "points", "3,3 6,3 13,8 6,13 3,13 10,8"), 
                this._polygon.setAttributeNS(null, "fill", ScrollbarButton.ARROW_COLOR), this._svg = document.createElementNS(svgns, "svg");
                var svgStyle = this._svg.style;
                svgStyle.position = "absolute", svgStyle.left = "0px", svgStyle.top = "0px", this._svg.appendChild(this._polygon), 
                this._element = document.createElement("div"), this._element.className = Scrollbar.arrowClassName, 
                this._element.appendChild(this._svg), this._owner.element.appendChild(this._element);
            }, ScrollbarButton.prototype.onMouseDown = function(event) {
                var that = this;
                if (clearTimeout(this._timerHandle), !this._mouseUpWrapper) {
                    event.cancelBubble = !0;
                    var that_1 = this;
                    this._mouseUpWrapper = function(event) {
                        that_1.onMouseUp(event);
                    }, Scrollbar.addDocumentMouseUpEvent(this._mouseUpWrapper);
                }
                this._owner._scrollSmallIncrement(this._direction), this._owner.refresh(), this._timerHandle = setTimeout(function() {
                    that.onMouseDown(event);
                }, 100), event.preventDefault && event.preventDefault();
            }, ScrollbarButton.prototype.onMouseUp = function(event) {
                clearTimeout(this._timerHandle), Scrollbar.removeDocumentMouseUpEvent(this._mouseUpWrapper), 
                this._mouseUpWrapper = void 0;
            }, ScrollbarButton.prototype.arrange = function(width, height, angle) {
                var size = Math.min(width, height);
                this._polygon.setAttributeNS(null, "transform", "translate(" + (width - size) / 2 + ", " + (height - size) / 2 + ") scale(" + size / 16 + ") rotate(" + angle + ",8,8)"), 
                this._svg.setAttributeNS(null, "width", width + "px"), this._svg.setAttributeNS(null, "height", height + "px"), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this._element, width), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this._element, height);
            }, ScrollbarButton.MIN_WIDTH = 26, ScrollbarButton.ARROW_COLOR = "#404040", ScrollbarButton;
        }(), Scrollbar = function() {
            function Scrollbar(parentElement, layoutKind, isModern, onScrollBehavior) {
                this.isModern = isModern, this.MIN_BAR_SIZE = 10, this.min = 0, this.max = 10, this.viewMin = 0, 
                this.viewSize = 2, this.smallIncrement = 1, this._onscroll = [], this._screenToOffsetScale = 1, 
                this.createView(parentElement, layoutKind);
                var that = this;
                this._element.addEventListener("mousedown", function(e) {
                    that.onBackgroundMouseDown(e);
                }), this._element.addEventListener("pointerdown", function(e) {
                    (0, _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__.n)(e);
                }), this._element.addEventListener("dblclick", function(e) {
                    (0, _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__.n)(e);
                }), this._middleBar.addEventListener("mousedown", function(e) {
                    that.onMiddleBarMouseDown(e);
                }), this._middleBar.addEventListener("pointerdown", function(e) {
                    (0, _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__.n)(e);
                }), this._timerHandle = void 0, this._visible = !0, this.element.winControl = this, 
                $(this._touchPanel).addClass("unselectable"), this.onScrollBehavior = onScrollBehavior;
            }
            return Scrollbar.prototype.scrollBy = function(delta, suppressScrollEvent) {
                this.scrollTo(this.viewMin + delta, suppressScrollEvent);
            }, Scrollbar.prototype.scrollUp = function() {
                this.scrollBy(-this.smallIncrement);
            }, Scrollbar.prototype.scrollDown = function() {
                this.scrollBy(this.smallIncrement);
            }, Scrollbar.prototype.scrollPageUp = function() {
                this.scrollBy(-this.viewSize);
            }, Scrollbar.prototype.scrollPageDown = function() {
                this.scrollBy(this.viewSize);
            }, Object.defineProperty(Scrollbar.prototype, "width", {
                get: function() {
                    return this._width;
                },
                set: function(value) {
                    this._width = value, this._element.style.width = value, this.invalidateArrange();
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "height", {
                get: function() {
                    return this._height;
                },
                set: function(value) {
                    this._height = value, this._element.style.height = value, this.invalidateArrange();
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype.refresh = function() {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar.refresh()");
            }, Object.defineProperty(Scrollbar.prototype, "element", {
                get: function() {
                    return this._element;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "maxButton", {
                get: function() {
                    return this._maxButton;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "middleBar", {
                get: function() {
                    return this._middleBar;
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype._scrollSmallIncrement = function(direction) {
                this.scrollBy(this.smallIncrement * direction);
            }, Object.defineProperty(Scrollbar.prototype, "visible", {
                get: function() {
                    return this._visible;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "isInMouseCapture", {
                get: function() {
                    return void 0 !== this._timerHandle;
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype.show = function(value) {
                this._visible = value, this.element.style.visibility = value ? "visible" : "hidden", 
                this.invalidateArrange();
            }, Scrollbar.prototype._getMouseOffset = function(event) {
                return void 0 !== event.offsetX ? {
                    x: event.offsetX,
                    y: event.offsetY
                } : void 0 !== event.layerX ? {
                    x: event.layerX,
                    y: event.layerY
                } : {
                    x: event.screenX,
                    y: event.screenY
                };
            }, Scrollbar.prototype._getOffsetXDelta = function(event) {
                return (event.screenX - this._screenPrevMousePos.x) / this._screenToOffsetScale;
            }, Scrollbar.prototype._getOffsetYDelta = function(event) {
                return (event.screenY - this._screenPrevMousePos.y) / this._screenToOffsetScale;
            }, Scrollbar.prototype._getOffsetXTouchDelta = function(event) {
                return this._getMouseOffset(event).x - this._offsetTouchPrevPos.x;
            }, Scrollbar.prototype._getOffsetYTouchDelta = function(event) {
                return this._getMouseOffset(event).y - this._offsetTouchPrevPos.y;
            }, Scrollbar.prototype.onTouchStart = function(e) {
                1 === e.touches.length && this.onTouchMouseDown(e.touches[0]);
            }, Scrollbar.prototype.onTouchMove = function(e) {
                1 === e.touches.length && (e.preventDefault && e.preventDefault(), this.onTouchMouseMove(e.touches[0]));
            }, Scrollbar.prototype.onTouchEnd = function(e) {
                this.onTouchMouseUp(1 === e.touches.length ? e.touches[0] : e, !0);
            }, Scrollbar.prototype.onTouchMouseDown = function(e) {
                (this._allowMouseDrag || e.pointerType !== MSPointerEvent.MSPOINTER_TYPE_MOUSE) && (this._offsetTouchPrevPos = this._offsetTouchStartPos = null, 
                this._touchStarted = !0);
            }, Scrollbar.prototype._getOffsetTouchDelta = function(e) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getOffsetTouchDelta()"), 
                null;
            }, Scrollbar.prototype.onTouchMouseMove = function(e) {
                if (this._touchStarted) {
                    this._offsetTouchStartPos || (this._offsetTouchPrevPos = this._offsetTouchStartPos = this._getMouseOffset(e));
                    var delta = this._getOffsetTouchDelta(e);
                    0 !== delta && (this.scrollBy(-delta / this._getRunningSize(!1) * this.viewSize), 
                    this._offsetTouchPrevPos = this._getMouseOffset(e)), e.preventDefault && e.preventDefault(), 
                    e.cancelBubble = !0;
                }
            }, Scrollbar.prototype.onTouchMouseUp = function(e, bubble) {
                if (this._touchStarted && this._offsetTouchStartPos) {
                    var end = this._getMouseOffset(e);
                    !bubble && (Math.abs(this._offsetTouchStartPos.x - end.x) > 3 || Math.abs(this._offsetTouchStartPos.y - end.y) > 3) && (e.preventDefault && e.preventDefault(), 
                    e.cancelBubble = !0);
                }
                this._touchStarted = !1;
            }, Scrollbar.prototype.createView = function(parentElement, layoutKind) {
                this._element = document.createElement("div"), this._element.className = Scrollbar.className, 
                this._element.setAttribute("drag-resize-disabled", "true"), this._element.style.zIndex = "2", 
                this.isModern && (this._element.style.setProperty("--background", "white"), this._element.style.borderRadius = Math.ceil(_pivotTable_pivotTableControlConstants__WEBPACK_IMPORTED_MODULE_3__.zf / 2) + "px", 
                this._element.style.setProperty("--opacity", ".5"), this._element.style.setProperty("--opacity-hover", ".6")), 
                0 === layoutKind && parentElement.appendChild(this._element), this.isModern || (this._minButton = new ScrollbarButton(this, -1), 
                this._maxButton = new ScrollbarButton(this, 1)), this._middleBar = document.createElement("div"), 
                this._middleBar.className = Scrollbar.barClassName, this.isModern && (this._middleBar.style.setProperty("--bar-color", "#605E5C"), 
                this._middleBar.style.setProperty("--bar-color-hover", "#605E5C"), this._middleBar.style.borderRadius = Math.ceil(_pivotTable_pivotTableControlConstants__WEBPACK_IMPORTED_MODULE_3__.zf / 2) + "px", 
                this._middleBar.style.border = "1px solid white", this._middleBar.style.boxSizing = "border-box"), 
                this._element.appendChild(this._middleBar);
            }, Scrollbar.prototype.scrollTo = function(pos, suppressScrollEvent) {
                var viewMin = Math.min(this.max - this.viewSize, Math.max(this.min, pos));
                (viewMin = Math.max(this.min, viewMin)) !== this.viewMin && (this.viewMin = viewMin, 
                suppressScrollEvent || fire(this._onscroll, null)), this.onScrollBehavior && this.onScrollBehavior();
            }, Scrollbar.prototype._scrollByPage = function(event) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._scrollByPage()");
            }, Scrollbar.prototype._getRunningSize = function(net) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getRunningSize()"), 
                null;
            }, Scrollbar.prototype._getOffsetDelta = function(event) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getOffsetDelta()"), 
                null;
            }, Scrollbar.prototype.scroll = function(event) {
                var delta = this._getOffsetDelta(event) / this._getRunningSize(!0) * (this.max - this.min);
                if (delta < 0) {
                    if (this._getScreenMousePos(event) >= this._screenMaxMousePos) return;
                } else if (delta > 0 && this._getScreenMousePos(event) <= this._screenMinMousePos) return;
                this.scrollBy(delta);
            }, Object.defineProperty(Scrollbar.prototype, "actualWidth", {
                get: function() {
                    return void 0 === this._actualWidth && this.arrange(), this._actualWidth;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "actualHeight", {
                get: function() {
                    return void 0 === this._actualHeight && this.arrange(), this._actualHeight;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "actualButtonWidth", {
                get: function() {
                    return this.isModern ? -1 : (void 0 === !this._actualButtonWidth && this.arrange(), 
                    this._actualButtonWidth);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "actualButtonHeight", {
                get: function() {
                    return this.isModern ? -1 : (void 0 === !this._actualButtonHeight && this.arrange(), 
                    this._actualButtonHeight);
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype.arrange = function() {
                this._actualWidth && this._actualHeight || (this._actualWidth = this._element.offsetWidth, 
                this._actualHeight = this._element.offsetHeight, this._actualButtonWidth = -1, this._actualButtonHeight = -1, 
                this.isModern || (this._actualButtonWidth = this._calculateButtonWidth(), this._actualButtonHeight = this._calculateButtonHeight(), 
                this._minButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMinButtonAngle()), 
                this._maxButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMaxButtonAngle()), 
                this._setMaxButtonPosition()));
            }, Scrollbar.prototype._calculateButtonWidth = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._calculateButtonWidth()"), 
                null;
            }, Scrollbar.prototype._calculateButtonHeight = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._calculateButtonHeight()"), 
                null;
            }, Scrollbar.prototype._getMinButtonAngle = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getMinButtonAngle()"), 
                null;
            }, Scrollbar.prototype._getMaxButtonAngle = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getMaxButtonAngle()"), 
                null;
            }, Scrollbar.prototype._setMaxButtonPosition = function() {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._setMaxButtonPosition()");
            }, Scrollbar.prototype.invalidateArrange = function() {
                this._actualWidth = void 0, this._actualHeight = void 0, this._actualButtonWidth = void 0, 
                this._actualButtonHeight = void 0;
            }, Scrollbar.prototype.onHoldBackgroundMouseDown = function(event) {
                var _this = this;
                this._timerHandle = setTimeout(function() {
                    _this.onBackgroundMouseDown(event);
                }, this._timerHandle ? Scrollbar.ScrollbarBackgroundMousedownHoldDelay : Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay);
            }, Scrollbar.prototype.onBackgroundMouseDown = function(event) {
                var that = this;
                clearTimeout(this._timerHandle), this._backgroundMouseUpWrapper || (event.cancelBubble = !0, 
                this._backgroundMouseUpWrapper = function(event) {
                    that.onBackgroundMouseUp(event);
                }, Scrollbar.addDocumentMouseUpEvent(this._backgroundMouseUpWrapper)), this._scrollByPage(event), 
                this.refresh(), this.onHoldBackgroundMouseDown(event), event.preventDefault && event.preventDefault();
            }, Scrollbar.prototype.onBackgroundMouseUp = function(event) {
                clearTimeout(this._timerHandle), this._timerHandle = void 0, Scrollbar.removeDocumentMouseUpEvent(this._backgroundMouseUpWrapper), 
                this._backgroundMouseUpWrapper = void 0;
            }, Scrollbar.prototype.getPinchZoomY = function() {
                return document.documentElement.clientHeight / window.innerHeight;
            }, Scrollbar.prototype.onMiddleBarMouseDown = function(event) {
                event.cancelBubble = !0, this._screenPrevMousePos = {
                    x: event.screenX,
                    y: event.screenY
                }, this.isModern ? (this._screenMinMousePos = this._getScreenMousePos(event) - (this._getScreenContextualLeft(this._middleBar) - this._getScreenContextualLeft(this.element)), 
                this._screenMaxMousePos = this._getScreenMousePos(event) + (this._getScreenContextualRight(this.element) - this._getScreenContextualRight(this._middleBar))) : (this._screenMinMousePos = this._getScreenMousePos(event) - (this._getScreenContextualLeft(this._middleBar) - this._getScreenContextualRight(this._minButton.element)), 
                this._screenMaxMousePos = this._getScreenMousePos(event) + (this._getScreenContextualLeft(this._maxButton.element) - this._getScreenContextualRight(this._middleBar))), 
                this._screenToOffsetScale = (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.df)(this.element) * this.getPinchZoomY();
                var that = this;
                this._middleBarMouseMoveWrapper = function(e) {
                    that.onMiddleBarMouseMove(e);
                }, Scrollbar.addDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), this._middleBarMouseUpWrapper = function(e) {
                    that.onMiddleBarMouseUp(e);
                }, Scrollbar.addDocumentMouseUpEvent(this._middleBarMouseUpWrapper), event.preventDefault && event.preventDefault();
            }, Scrollbar.prototype.onMiddleBarMouseMove = function(event) {
                this._screenPrevMousePos && (this.scroll(event), this.refresh(), this._screenPrevMousePos = {
                    x: event.screenX,
                    y: event.screenY
                });
            }, Scrollbar.prototype.onMiddleBarMouseUp = function(event) {
                this._screenPrevMousePos = void 0, Scrollbar.removeDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), 
                this._middleBarMouseMoveWrapper = void 0, Scrollbar.removeDocumentMouseUpEvent(this._middleBarMouseUpWrapper), 
                this._middleBarMouseUpWrapper = void 0, event.preventDefault && event.preventDefault();
            }, Scrollbar.prototype._getScreenContextualLeft = function(element) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getScreenContextualLeft()"), 
                null;
            }, Scrollbar.prototype._getScreenContextualRight = function(element) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getScreenContextualRight()"), 
                null;
            }, Scrollbar.prototype.onMouseWheel = function(delta) {
                delta && this.mouseWheel(delta);
            }, Scrollbar.prototype.mouseWheel = function(delta) {
                this.visible && (delta < 0 ? delta = Math.min(-Scrollbar.MouseWheelRange, delta) : delta > 0 && (delta = Math.max(Scrollbar.MouseWheelRange, delta)), 
                this.scrollBy(-delta / Scrollbar.MouseWheelRange * this.smallIncrement));
            }, Scrollbar.prototype._getScreenMousePos = function(event) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getScreenMousePos()"), 
                null;
            }, Scrollbar.addDocumentMouseUpEvent = function(func) {
                document.addEventListener("mouseup", func);
            }, Scrollbar.removeDocumentMouseUpEvent = function(func) {
                document.removeEventListener("mouseup", func);
            }, Scrollbar.addDocumentMouseMoveEvent = function(func) {
                document.addEventListener("mousemove", func);
            }, Scrollbar.removeDocumentMouseMoveEvent = function(func) {
                document.removeEventListener("mousemove", func);
            }, Scrollbar.DefaultScrollbarWidth = "15px", Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay = 500, 
            Scrollbar.ScrollbarBackgroundMousedownHoldDelay = 50, Scrollbar.MouseWheelRange = 120, 
            Scrollbar.className = "scroll-bar-div", Scrollbar.barClassName = "scroll-bar-part-bar", 
            Scrollbar.arrowClassName = "scroll-bar-part-arrow", Scrollbar;
        }(), HorizontalScrollbar = function(_super) {
            function HorizontalScrollbar(parentElement, layoutKind, isModern, onScroll) {
                var _this = _super.call(this, parentElement, layoutKind, isModern, onScroll) || this;
                return _this.height = Scrollbar.DefaultScrollbarWidth, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(HorizontalScrollbar, _super), 
            HorizontalScrollbar.prototype._calculateButtonWidth = function() {
                return Math.min(this.actualWidth / 2, Math.max(this.actualHeight, ScrollbarButton.MIN_WIDTH));
            }, HorizontalScrollbar.prototype._calculateButtonHeight = function() {
                return this.actualHeight;
            }, HorizontalScrollbar.prototype._getMinButtonAngle = function() {
                return -180;
            }, HorizontalScrollbar.prototype._getMaxButtonAngle = function() {
                return 0;
            }, HorizontalScrollbar.prototype._setMaxButtonPosition = function() {
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.hn)(this.maxButton.element, this.actualWidth - this.actualButtonWidth);
            }, HorizontalScrollbar.prototype.refresh = function() {
                this.arrange();
                var runningSize = this.actualWidth - 2 * this.actualButtonWidth - 2, barSize = this.viewSize / (this.max - this.min) * runningSize;
                barSize < this.MIN_BAR_SIZE && (runningSize -= this.MIN_BAR_SIZE - barSize, barSize = this.MIN_BAR_SIZE), 
                runningSize < 0 && (runningSize = 0, barSize = 0), barSize = Math.min(barSize, runningSize);
                var barPos = this.viewMin / (this.max - this.min) * runningSize;
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this.middleBar, barSize), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this.middleBar, this.actualHeight);
                var x = this.actualButtonWidth + 1 + barPos;
                this.isModern ? this.middleBar.style.transform = "translateX(".concat(x, "px)") : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.hn)(this.middleBar, x);
            }, HorizontalScrollbar.prototype.show = function(visible) {
                visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.height = this.height : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this.element, 0));
            }, HorizontalScrollbar.prototype._scrollByPage = function(event) {
                var left;
                if (this.isModern) {
                    var style = window.getComputedStyle(this.middleBar);
                    left = new WebKitCSSMatrix(style.transform).m41;
                } else left = this.middleBar.offsetLeft;
                var x = void 0 === event.offsetX ? event.layerX : event.offsetX;
                x > left + this.middleBar.offsetWidth ? this.scrollPageDown() : x < left && this.scrollPageUp();
            }, HorizontalScrollbar.prototype._getRunningSize = function(net) {
                var result = this.actualWidth;
                if (net) {
                    var barSize = (result -= 2 * (this.actualButtonWidth + 1)) * (this.viewSize / (this.max - this.min));
                    barSize < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize);
                }
                return result;
            }, HorizontalScrollbar.prototype._getOffsetDelta = function(event) {
                return this._getOffsetXDelta(event);
            }, HorizontalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                return this._getOffsetXTouchDelta(e);
            }, HorizontalScrollbar.prototype._getScreenContextualLeft = function(element) {
                return element.getBoundingClientRect().left;
            }, HorizontalScrollbar.prototype._getScreenContextualRight = function(element) {
                return element.getBoundingClientRect().right;
            }, HorizontalScrollbar.prototype._getScreenMousePos = function(event) {
                return event.screenX;
            }, HorizontalScrollbar;
        }(Scrollbar), VerticalScrollbar = function(_super) {
            function VerticalScrollbar(parentElement, layoutKind, isModern, onScroll) {
                var _this = _super.call(this, parentElement, layoutKind, isModern, onScroll) || this;
                return _this.width = Scrollbar.DefaultScrollbarWidth, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(VerticalScrollbar, _super), 
            VerticalScrollbar.prototype._calculateButtonWidth = function() {
                return this.actualWidth;
            }, VerticalScrollbar.prototype._calculateButtonHeight = function() {
                return Math.min(this.actualHeight / 2, Math.max(this.actualWidth, ScrollbarButton.MIN_WIDTH));
            }, VerticalScrollbar.prototype._getMinButtonAngle = function() {
                return -90;
            }, VerticalScrollbar.prototype._getMaxButtonAngle = function() {
                return 90;
            }, VerticalScrollbar.prototype._setMaxButtonPosition = function() {
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.FX)(this.maxButton.element, this.actualHeight - this.actualButtonHeight);
            }, VerticalScrollbar.prototype.refresh = function() {
                this.arrange();
                var runningSize = this.actualHeight - 2 * this.actualButtonHeight - 2, barSize = this.viewSize / (this.max - this.min) * runningSize;
                barSize < this.MIN_BAR_SIZE && (runningSize -= this.MIN_BAR_SIZE - barSize, barSize = this.MIN_BAR_SIZE), 
                runningSize < 0 && (runningSize = 0, barSize = 0);
                var barPos = this.viewMin / (this.max - this.min) * runningSize;
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this.middleBar, this.actualWidth), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this.middleBar, barSize);
                var y = this.actualButtonHeight + 1 + barPos;
                this.isModern ? this.middleBar.style.transform = "translateY(".concat(y, "px)") : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.FX)(this.middleBar, y);
            }, VerticalScrollbar.prototype.show = function(visible) {
                visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.width = this.width : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this.element, 0));
            }, VerticalScrollbar.prototype._scrollByPage = function(event) {
                var top;
                if (this.isModern) {
                    var style = window.getComputedStyle(this.middleBar);
                    top = new WebKitCSSMatrix(style.transform).m42;
                } else top = this.middleBar.offsetTop;
                var y = void 0 === event.offsetY ? event.layerY : event.offsetY;
                y > top + this.middleBar.offsetHeight ? this.scrollPageDown() : y < top && this.scrollPageUp();
            }, VerticalScrollbar.prototype._getRunningSize = function(net) {
                var result = this.actualHeight;
                if (net) {
                    var barSize = (result -= 2 * (this.actualButtonHeight + 1)) * (this.viewSize / (this.max - this.min));
                    barSize < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize);
                }
                return result;
            }, VerticalScrollbar.prototype._getOffsetDelta = function(event) {
                return this._getOffsetYDelta(event);
            }, VerticalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                return this._getOffsetYTouchDelta(e);
            }, VerticalScrollbar.prototype._getScreenContextualLeft = function(element) {
                return element.getBoundingClientRect().top;
            }, VerticalScrollbar.prototype._getScreenContextualRight = function(element) {
                return element.getBoundingClientRect().bottom;
            }, VerticalScrollbar.prototype._getScreenMousePos = function(event) {
                return event.screenY;
            }, VerticalScrollbar;
        }(Scrollbar);
    },
    73889: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Y: function() {
                return TablixType;
            }
        });
        var TablixType = function(TablixType) {
            return TablixType[TablixType.Matrix = 0] = "Matrix", TablixType[TablixType.Table = 1] = "Table", 
            TablixType[TablixType.PivotTable = 2] = "PivotTable", TablixType[TablixType.TableEx = 3] = "TableEx", 
            TablixType;
        }({});
    },
    71090: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ds: function() {
                return ScrollRightLabel;
            },
            Ed: function() {
                return CssClassImageContainer;
            },
            Eo: function() {
                return CssClassMatrixRowHeaderLeaf;
            },
            F2: function() {
                return FontFamilyHeader;
            },
            Hw: function() {
                return ScrollDownLabel;
            },
            JM: function() {
                return CssClassTableBodyCell;
            },
            LU: function() {
                return CssClassValueURLIconContainer;
            },
            Mh: function() {
                return SelectRow;
            },
            NA: function() {
                return CssClassValueURLIcon;
            },
            OM: function() {
                return CSSClassPivotTableAlignRight;
            },
            P$: function() {
                return CellPaddingLeftMatrixTotal;
            },
            Pr: function() {
                return CssClassContentHost;
            },
            QM: function() {
                return CSSClassPivotTableAlignCenter;
            },
            R9: function() {
                return CssClassTablixValueTotal;
            },
            Sl: function() {
                return AdditionalConditionalFormatting;
            },
            TV: function() {
                return UnselectedLabel;
            },
            Vz: function() {
                return FontFamilyGlyphs;
            },
            WA: function() {
                return CssClassWrappingContainer;
            },
            YR: function() {
                return CellPaddingLeft;
            },
            Yo: function() {
                return SortIconFontSizeRatio;
            },
            Zk: function() {
                return FontFamilyTotal;
            },
            b: function() {
                return SelectedLabel;
            },
            bn: function() {
                return TotalPlaceholderLabel;
            },
            dG: function() {
                return FontFamilyCell;
            },
            dm: function() {
                return ScrollLeftLabel;
            },
            en: function() {
                return CssClassContentElement;
            },
            f: function() {
                return CssClassTablixHeader;
            },
            fG: function() {
                return SortIconPadding;
            },
            iC: function() {
                return ScrollUpLabel;
            },
            jv: function() {
                return StringNonBreakingSpace;
            },
            lN: function() {
                return FontColorHeaders;
            },
            mQ: function() {
                return CssClassTablixColumnHeaderLeaf;
            },
            qT: function() {
                return TotalLabel;
            },
            rJ: function() {
                return CellPaddingRight;
            },
            rx: function() {
                return SortIconContainerClassName;
            },
            rz: function() {
                return CssClassTablixDiv;
            },
            s$: function() {
                return CssClassTableFooter;
            },
            s0: function() {
                return CssClassTablixValueNumeric;
            },
            sR: function() {
                return PreferredLoadMoreThreshold;
            },
            uX: function() {
                return RowSelection;
            },
            uZ: function() {
                return WordWrappingMaxLines;
            },
            wH: function() {
                return UnitOfMeasurement;
            },
            wd: function() {
                return ImageDefaultAspectRatio;
            },
            yF: function() {
                return ValueLabel;
            },
            ye: function() {
                return FontColorCells;
            },
            z7: function() {
                return CSSClassPivotTableAlignLeft;
            },
            zq: function() {
                return CssClassTableBodyCellBottom;
            }
        });
        var _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38265), PreferredLoadMoreThreshold = .8, TotalLabel = "TableTotalLabel", TotalPlaceholderLabel = "Format_AddTotalLabel", ValueLabel = "Visual_LabelText_Value", RowSelection = "Row_Selection", SelectRow = "SelectRow", SelectedLabel = "Row_Selected", UnselectedLabel = "Row_Unselected", AdditionalConditionalFormatting = "Additional_Conditional_Formatting", ScrollUpLabel = "DecompositionTree_ScrollLevelUp_Tooltip", ScrollDownLabel = "DecompositionTree_ScrollLevelDown_Tooltip", ScrollLeftLabel = "Scroll_Left", ScrollRightLabel = "Scroll_Right", CssClassTablixDiv = "tablixDiv", CssClassContentElement = "tablixCellContentElement", CssClassContentHost = "tablixCellContentHost", CssClassWrappingContainer = "tablixWrappingContainer", CssClassTablixHeader = "tablixHeader", CssClassTablixColumnHeaderLeaf = "tablixColumnHeaderLeaf", CssClassTablixValueNumeric = "tablixValueNumeric", CssClassTablixValueTotal = "tablixValueTotal", CssClassValueURLIcon = "powervisuals-glyph tablixUrlIconGlyph", CssClassValueURLIconContainer = "tablixValueUrlIcon", CssClassImageContainer = "tablixImageContainer", CssClassMatrixRowHeaderLeaf = "matrixRowHeaderLeaf", CssClassTableFooter = "tableFooterCell", CssClassTableBodyCell = "tableBodyCell", CssClassTableBodyCellBottom = "tableBodyCellBottom", CSSClassPivotTableAlignLeft = "tablixAlignLeft", CSSClassPivotTableAlignCenter = "tablixAlignCenter", CSSClassPivotTableAlignRight = "tablixAlignRight", StringNonBreakingSpace = "&nbsp;", UnitOfMeasurement = "px", SortIconContainerClassName = "tablixSortIconContainer", CellPaddingLeft = 10, CellPaddingRight = 5, CellPaddingLeftMatrixTotal = 5, SortIconPadding = 5, ImageDefaultAspectRatio = 1, FontFamilyCell = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.regular.css, FontFamilyHeader = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.regular.css, FontFamilyTotal = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.bold.css, FontFamilyGlyphs = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.glyphs.css, FontColorCells = "#333", FontColorHeaders = "#666", WordWrappingMaxLines = Number.POSITIVE_INFINITY, SortIconFontSizeRatio = .71;
    },
    16324: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Vz: function() {
                return CanvasTablixLayoutManager;
            },
            dk: function() {
                return DashboardTablixLayoutManager;
            }
        });
        var tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), Double = __webpack_require__(41640), textMeasurementService = __webpack_require__(32041), StandaloneUtility1 = __webpack_require__(64329), tablixColumnWidthManager = __webpack_require__(81671), tablixControl = __webpack_require__(93414), tablixUtils1 = __webpack_require__(93340), TablixCell = function() {
            function TablixCell(presenter, extension, row) {
                this._scrollable = !1, this._presenter = presenter, this.extension = extension, 
                this._presenter.initialize(this), this._row = row, this.item = null, this.type = null, 
                this._horizontalOffset = 0, this._verticalOffset = 0, this._colSpan = 1, this._rowSpan = 1, 
                this._containerWidth = -1, this._containerHeight = -1, this.contentHeight = this.contentWidth = 0, 
                this.position = new tablixUtils1.ri;
            }
            return TablixCell.prototype.unfixRowHeight = function() {
                this._row.unfixSize();
            }, Object.defineProperty(TablixCell.prototype, "colSpan", {
                get: function() {
                    return this._colSpan;
                },
                set: function(value) {
                    this._colSpan !== value && (this._presenter.onColumnSpanChanged(value), this._colSpan = value, 
                    this._presenter.onContainerWidthChanged(-1));
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixCell.prototype, "rowSpan", {
                get: function() {
                    return this._rowSpan;
                },
                set: function(value) {
                    this._rowSpan !== value && (this._presenter.onRowSpanChanged(value), this._rowSpan = value, 
                    this._row.unfixSize());
                },
                enumerable: !1,
                configurable: !0
            }), TablixCell.prototype.getCellSpanningHeight = function() {
                return this._row.getCellSpanningHeight(this);
            }, Object.defineProperty(TablixCell.prototype, "textAlign", {
                get: function() {
                    return this._textAlign;
                },
                set: function(value) {
                    value !== this._textAlign && (this._presenter.onTextAlignChanged(value), this._textAlign = value);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixCell.prototype, "horizontalOffset", {
                get: function() {
                    return this._horizontalOffset;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixCell.prototype, "verticalOffset", {
                get: function() {
                    return this._verticalOffset;
                },
                enumerable: !1,
                configurable: !0
            }), TablixCell.prototype.isScrollable = function() {
                return this._scrollable;
            }, TablixCell.prototype.clear = function() {
                this.isScrollable() && this.initializeScrolling(), this._presenter.onClear(), this.setContainerWidth(-1), 
                this.setContainerHeight(-1), this.contentHeight = this.contentWidth = 0;
            }, TablixCell.prototype.initializeScrolling = function() {
                this._presenter.onInitializeScrolling(), this._horizontalOffset = 0, 0 !== this._verticalOffset && (this._verticalOffset = 0), 
                1 === this.colSpan && this.setContainerWidth(-1), 1 === this.rowSpan && this.setContainerHeight(-1);
            }, TablixCell.prototype.prepare = function(scrollable) {
                this.isScrollable() && this.initializeScrolling(), this._scrollable = scrollable;
            }, TablixCell.prototype.scrollVertically = function(height, offset) {
                var offsetInPixels = Math.ceil(-height * offset);
                this._verticalOffset = offsetInPixels, this.isScrollable() ? (this._presenter.onVerticalScroll(height, offsetInPixels), 
                this.setContainerHeight(height + offsetInPixels)) : this.setContainerHeight(this._row.getCellSpanningHeight(this) + offsetInPixels);
            }, TablixCell.prototype.scrollHorizontally = function(width, offset) {
                this.isScrollable() && (this._presenter.onHorizontalScroll(width, offset), this.setContainerWidth(width + offset));
            }, TablixCell.prototype.setContainerWidth = function(value) {
                value !== this._containerWidth && (this._containerWidth = value, this._presenter.onContainerWidthChanged(value));
            }, Object.defineProperty(TablixCell.prototype, "containerWidth", {
                get: function() {
                    return this._containerWidth;
                },
                enumerable: !1,
                configurable: !0
            }), TablixCell.prototype.setContainerHeight = function(value) {
                if (value < 0 && (value = -1), value !== this._containerHeight) {
                    this._containerHeight = value;
                    var tablix = this._row.owner.owner, binder = tablix.getBinder();
                    tablix.wordWrapRowHeaders && null != binder.applyWordWrapping && -1 !== value && 1 === this.type && !this.position.column.isLast && binder.applyWordWrapping(this.item, this), 
                    this._presenter.onContinerHeightChanged(value);
                }
            }, Object.defineProperty(TablixCell.prototype, "containerHeight", {
                get: function() {
                    return this._containerHeight;
                },
                enumerable: !1,
                configurable: !0
            }), TablixCell.prototype.applyStyle = function(style) {
                style && (style.applyStyle(this), this.contentHeight += style.getExtraBottom() + style.getExtraTop(), 
                this.contentWidth += style.getExtraLeft() + style.getExtraRight());
            }, TablixCell.prototype.enableHorizontalResize = function(enable, handler) {
                this._presenter.enableHorizontalResize(enable, handler);
            }, TablixCell.prototype.isColumnResizing = function() {
                return this._column && this._column.isResizing();
            }, TablixCell;
        }(), TablixColumn = function() {
            function TablixColumn(presenter, columnIndex) {
                this._presenter = presenter, this._presenter.initialize(this), this._containerWidth = -1, 
                this._width = -1, this._sizeFixed = !1, this._aligningWidth = -1, this._fixedToAligningWidth = !1, 
                this._items = [], this._itemType = null, this._footerCell = null, this.isColumnResizing = !1;
            }
            return TablixColumn.prototype.initialize = function(owner) {
                this._owner = owner, this._realizedRowHeaders = [], this._realizedColumnHeaders = [], 
                this._realizedCornerCells = [], this._realizedBodyCells = [];
            }, Object.defineProperty(TablixColumn.prototype, "owner", {
                get: function() {
                    return this._owner;
                },
                enumerable: !1,
                configurable: !0
            }), TablixColumn.prototype.getType = function() {
                return this._realizedCornerCells.length > 0 ? 0 : 2;
            }, TablixColumn.prototype.getColumnHeadersOrCorners = function() {
                return this._realizedCornerCells.length > 0 ? this._realizedCornerCells : this._realizedColumnHeaders;
            }, TablixColumn.prototype.columnHeadersOrCornersEqual = function(newType, headers, hierarchyNavigator) {
                if (this._items.length !== headers.length) return !1;
                for (var count = this._items.length, i = 0; i < count; i++) if (!this.columnHeaderOrCornerEquals(this._itemType, this._items[i], newType, headers[i].item, hierarchyNavigator)) return !1;
                return !0;
            }, Object.defineProperty(TablixColumn.prototype, "itemType", {
                get: function() {
                    return this._itemType;
                },
                enumerable: !1,
                configurable: !0
            }), TablixColumn.prototype.getLeafItem = function() {
                return 0 === this._items.length ? null : this._items[this._items.length - 1];
            }, TablixColumn.prototype.columnHeaderOrCornerEquals = function(type1, item1, type2, item2, hierarchyNavigator) {
                if (type1 !== type2) return !1;
                if (0 === type1) {
                    if (!hierarchyNavigator.cornerCellItemEquals(item1, item2)) return !1;
                } else if (!hierarchyNavigator.headerItemEquals(item1, item2)) return !1;
                return !0;
            }, TablixColumn.prototype.OnLeafRealized = function(hierarchyNavigator) {
                var type = this.getType(), columnHeadersOrCorners = this.getColumnHeadersOrCorners();
                if (this.columnHeadersOrCornersEqual(type, columnHeadersOrCorners, hierarchyNavigator)) this.clearSpanningCellsWidth(this._realizedColumnHeaders); else {
                    var count = columnHeadersOrCorners.length;
                    this._items = [];
                    for (var i = 0; i < count; i++) this._items.push(columnHeadersOrCorners[i].item);
                    this._itemType = type, this.clearSize();
                }
            }, TablixColumn.prototype.clearSpanningCellsWidth = function(cells) {
                for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                    var cell = cells_1[_i];
                    cell.colSpan > 1 && cell.setContainerWidth(-1);
                }
            }, TablixColumn.prototype.addCornerCell = function(cell) {
                cell._column = this, this._realizedCornerCells.push(cell), cell.setContainerWidth(this._containerWidth);
            }, TablixColumn.prototype.addRowHeader = function(cell) {
                cell._column = this, this._realizedRowHeaders.push(cell), cell.setContainerWidth(this._containerWidth);
            }, TablixColumn.prototype.addColumnHeader = function(cell, isLeaf) {
                cell._column = this, this._realizedColumnHeaders.push(cell), isLeaf && cell.setContainerWidth(this._containerWidth);
            }, TablixColumn.prototype.addBodyCell = function(cell) {
                cell._column = this, this._realizedBodyCells.push(cell), cell.setContainerWidth(this._containerWidth);
            }, Object.defineProperty(TablixColumn.prototype, "footer", {
                get: function() {
                    return this._footerCell;
                },
                set: function(footerCell) {
                    this._footerCell = footerCell, footerCell._column = this, footerCell.setContainerWidth(this._containerWidth);
                },
                enumerable: !1,
                configurable: !0
            }), TablixColumn.prototype.isResizing = function() {
                return this.isColumnResizing;
            }, TablixColumn.prototype.onResize = function(width) {
                this.isColumnResizing = !0, width !== this.getContentContextualWidth() && (this._containerWidth = width, 
                this.setContainerWidth(this._containerWidth), this._sizeFixed = !0, this._fixedToAligningWidth = !1, 
                this._aligningWidth = -1);
            }, TablixColumn.prototype.onResizeEnd = function(width) {
                this.isColumnResizing = !1;
                var gridPresenter = this.owner._presenter;
                gridPresenter && gridPresenter.invokeColumnResizeEndCallback(this, width);
            }, TablixColumn.prototype.fixSize = function() {
                var shouldAlign = -1 !== this._aligningWidth;
                (!this._sizeFixed || shouldAlign !== this._fixedToAligningWidth || shouldAlign) && (this.setContainerWidth(-1 === this._aligningWidth ? this._containerWidth : this._aligningWidth), 
                this._sizeFixed = !0, this._fixedToAligningWidth = -1 !== this._aligningWidth);
            }, TablixColumn.prototype.clearSize = function() {
                this._containerWidth = -1, this.setContainerWidth(this._containerWidth), this._sizeFixed = !1;
            }, TablixColumn.prototype.getContentContextualWidth = function() {
                return this._containerWidth;
            }, TablixColumn.prototype.getCellIContentContextualWidth = function(cell) {
                return this._presenter.getCellWidth(cell);
            }, TablixColumn.prototype.getContextualWidth = function() {
                return -1 !== this._width && -1 !== this._containerWidth || (this._width = this._presenter.getWidth()), 
                this._width;
            }, TablixColumn.prototype.calculateSize = function() {
                if (this._sizeFixed) return this._containerWidth;
                var contentWidth = 0, persistedWidth = this._presenter.getPersistedWidth();
                if (null != persistedWidth) {
                    contentWidth = persistedWidth;
                    for (var i = 0, len = this._realizedColumnHeaders.length; i < len - 1; i++) 1 === (cell = this._realizedColumnHeaders[i]).colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                    return this._containerWidth = contentWidth;
                }
                for (var _i = 0, _a = this._realizedColumnHeaders; _i < _a.length; _i++) 1 === (cell = _a[_i]).colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                for (var _b = 0, _c = this._realizedRowHeaders; _b < _c.length; _b++) 1 === (cell = _c[_b]).colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                for (var _d = 0, _e = this._realizedCornerCells; _d < _e.length; _d++) {
                    var cell = _e[_d];
                    contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell));
                }
                for (var _f = 0, _g = this._realizedBodyCells; _f < _g.length; _f++) cell = _g[_f], 
                contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell));
                return null !== this._footerCell && 1 === this._footerCell.colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(this._footerCell))), 
                this._containerWidth = contentWidth;
            }, TablixColumn.prototype.setAligningContextualWidth = function(size) {
                this._aligningWidth = size;
            }, TablixColumn.prototype.getAligningContextualWidth = function() {
                return this._aligningWidth;
            }, TablixColumn.prototype.setContainerWidth = function(value) {
                for (var _i = 0, _a = this._realizedColumnHeaders; _i < _a.length; _i++) 1 === (cell = _a[_i]).colSpan && cell.setContainerWidth(value);
                for (var _b = 0, _c = this._realizedRowHeaders; _b < _c.length; _b++) 1 === (cell = _c[_b]).colSpan && cell.setContainerWidth(value);
                for (var _d = 0, _e = this._realizedCornerCells; _d < _e.length; _d++) (cell = _e[_d]).setContainerWidth(value);
                for (var _f = 0, _g = this._realizedBodyCells; _f < _g.length; _f++) {
                    var cell;
                    (cell = _g[_f]).setContainerWidth(value);
                }
                null !== this._footerCell && 1 === this._footerCell.colSpan && this._footerCell.setContainerWidth(value), 
                this._width = value;
            }, TablixColumn.prototype.getTablixCell = function() {
                var realizedCells = this._realizedColumnHeaders.length > 0 ? this._realizedColumnHeaders : this._realizedCornerCells;
                return realizedCells[realizedCells.length - 1];
            }, TablixColumn.prototype.getIndex = function(grid) {
                return grid.realizedColumns.indexOf(this);
            }, TablixColumn.prototype.getHeaders = function() {
                return this._realizedColumnHeaders;
            }, TablixColumn.prototype.getOtherDimensionHeaders = function() {
                return this._realizedRowHeaders;
            }, TablixColumn.prototype.getCellContextualSpan = function(cell) {
                return cell.colSpan;
            }, TablixColumn.prototype.getOtherDimensionOwner = function(cell) {
                return cell._row;
            }, TablixColumn;
        }(), TablixRow = function() {
            function TablixRow(presenter) {
                this._containerHeight = -1, this._presenter = presenter, this._presenter.initialize(this), 
                this._allocatedCells = [], this._heightFixed = !1, this._containerHeight = -1, this._height = -1;
            }
            return TablixRow.prototype.initialize = function(owner) {
                this._owner = owner, this._realizedRowHeaders = [], this._realizedBodyCells = [], 
                this._realizedCornerCells = [], this._realizedColumnHeaders = [], this._realizedCellsCount = 0;
            }, Object.defineProperty(TablixRow.prototype, "presenter", {
                get: function() {
                    return this._presenter;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixRow.prototype, "owner", {
                get: function() {
                    return this._owner;
                },
                enumerable: !1,
                configurable: !0
            }), TablixRow.prototype.releaseUnusedCells = function(owner) {
                this.releaseCells(owner, this._realizedCellsCount);
            }, TablixRow.prototype.releaseAllCells = function(owner) {
                this.releaseCells(owner, 0);
            }, TablixRow.prototype.releaseCells = function(owner, startIndex) {
                for (var cells = this._allocatedCells, length = cells.length, i = startIndex; i < length; i++) {
                    var cell = cells[i];
                    owner._unbindCell(cell), cell.clear();
                }
            }, TablixRow.prototype.moveScrollableCellsToEnd = function(count) {
                for (var frontIndex = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), i = frontIndex; i < frontIndex + count; i++) {
                    var cell = this._allocatedCells[i];
                    this._presenter.onRemoveCell(cell), this._presenter.onAppendCell(cell), this._allocatedCells.push(cell);
                }
                this._allocatedCells.splice(frontIndex, count);
            }, TablixRow.prototype.moveScrollableCellsToStart = function(count) {
                for (var frontIndex = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), i = frontIndex; i < frontIndex + count; i++) {
                    var cell = this._allocatedCells.pop();
                    this._presenter.onRemoveCell(cell), this._presenter.onInsertCellBefore(cell, this._allocatedCells[frontIndex]), 
                    this._allocatedCells.splice(frontIndex, 0, cell);
                }
            }, TablixRow.prototype.getOrCreateCornerCell = function(column) {
                var cell = this.getOrCreateCell();
                return cell.prepare(!1), column.addCornerCell(cell), this._realizedCornerCells.push(cell), 
                cell.setContainerHeight(this._containerHeight), cell;
            }, TablixRow.prototype.getOrCreateRowHeader = function(column, scrollable, leaf) {
                var cell = this.getOrCreateCell();
                return cell.prepare(scrollable), column.addRowHeader(cell), this._realizedRowHeaders.push(cell), 
                leaf && cell.setContainerHeight(this._containerHeight), cell;
            }, TablixRow.prototype.getOrCreateColumnHeader = function(column, scrollable, leaf) {
                var cell = this.getOrCreateCell();
                return cell.prepare(scrollable), column.addColumnHeader(cell, leaf), this._realizedColumnHeaders.push(cell), 
                cell.setContainerHeight(this._containerHeight), cell;
            }, TablixRow.prototype.getOrCreateBodyCell = function(column, scrollable) {
                var cell = this.getOrCreateCell();
                return cell.prepare(scrollable), column.addBodyCell(cell), this._realizedBodyCells.push(cell), 
                cell.setContainerHeight(this._containerHeight), cell;
            }, TablixRow.prototype.getOrCreateFooterRowHeader = function(column) {
                var cell = this.getOrCreateCell();
                return cell.prepare(!1), column.footer = cell, this._realizedRowHeaders.push(cell), 
                cell.setContainerHeight(this._containerHeight), cell;
            }, TablixRow.prototype.getOrCreateFooterBodyCell = function(column, scrollable) {
                var cell = this.getOrCreateCell();
                return cell.prepare(scrollable), column.footer = cell, this._realizedBodyCells.push(cell), 
                cell.setContainerHeight(this._containerHeight), cell;
            }, TablixRow.prototype.getRowHeaderLeafIndex = function() {
                for (var index = -1, count = this._allocatedCells.length, i = 0; i < count && 1 === this._allocatedCells[i].type; i++) index++;
                return index;
            }, TablixRow.prototype.getAllocatedCellAt = function(index) {
                return this._allocatedCells[index];
            }, TablixRow.prototype.moveCellsBy = function(delta) {
                if (0 !== this._allocatedCells.length) if (delta > 0) for (var refCell = this._allocatedCells[0], i = 0; i < delta; i++) {
                    var cell = this.createCell(this);
                    this._presenter.onInsertCellBefore(cell, refCell), this._allocatedCells.unshift(cell), 
                    refCell = cell;
                } else {
                    for (delta = -delta, i = 0; i < delta; i++) this._presenter.onRemoveCell(this._allocatedCells[i]);
                    this._allocatedCells.splice(0, delta);
                }
            }, TablixRow.prototype.getRealizedCellCount = function() {
                return this._realizedCellsCount;
            }, TablixRow.prototype.getRealizedHeadersCount = function() {
                return this._realizedRowHeaders.length;
            }, TablixRow.prototype.getRealizedHeaderAt = function(index) {
                return this._realizedRowHeaders[index];
            }, TablixRow.prototype.getTablixCell = function() {
                var realizedCells;
                return (realizedCells = this._realizedRowHeaders.length > 0 ? this._realizedRowHeaders : this._realizedCornerCells.length > 0 ? this._realizedCornerCells : this._realizedColumnHeaders)[realizedCells.length - 1];
            }, TablixRow.prototype.getOrCreateEmptySpaceCell = function() {
                var cell = this._allocatedCells[this._realizedCellsCount];
                return void 0 === cell && (cell = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = cell, 
                this._presenter.onAppendCell(cell)), cell;
            }, TablixRow.prototype.createCell = function(row) {
                var presenter = this._presenter.createCellPresenter(this._owner.owner.layoutManager.getLayoutKind());
                return new TablixCell(presenter, presenter, this);
            }, TablixRow.prototype.getOrCreateCell = function() {
                var cell = this._allocatedCells[this._realizedCellsCount];
                return void 0 === cell ? (cell = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = cell, 
                this._presenter.onAppendCell(cell)) : (cell.colSpan = 1, cell.rowSpan = 1), this._realizedCellsCount = this._realizedCellsCount + 1, 
                cell;
            }, TablixRow.prototype.isResizing = function() {
                return !1;
            }, TablixRow.prototype.onResize = function(height) {
                height !== this.getContentContextualWidth() && (this._containerHeight = height, 
                this.setContentHeight(), this._heightFixed = !0, this.setAligningContextualWidth(-1));
            }, TablixRow.prototype.onResizeEnd = function(height) {}, TablixRow.prototype.fixSize = function() {
                this.setContentHeight(), this._heightFixed = !0;
            }, TablixRow.prototype.unfixSize = function() {
                this._heightFixed = !1, this._height = -1;
            }, TablixRow.prototype.getContentContextualWidth = function() {
                return this._containerHeight;
            }, TablixRow.prototype.getCellIContentContextualWidth = function(cell) {
                return this.presenter.getCellContentHeight(cell);
            }, TablixRow.prototype.getCellSpanningHeight = function(cell) {
                var height = this.getContextualWidth();
                if (cell.rowSpan > 1) for (var index = this.getIndex(this.owner), rows = this.owner.realizedRows, i = 1; i < cell.rowSpan; i++) height += rows[i + index].getContextualWidth();
                return height;
            }, TablixRow.prototype.getContextualWidth = function() {
                return -1 !== this._height && -1 !== this._containerHeight || (this._height = this._presenter.getHeight()), 
                this._height;
            }, TablixRow.prototype.sizeFixed = function() {
                return this._heightFixed;
            }, TablixRow.prototype.calculateSize = function() {
                if (this._heightFixed) return this._containerHeight;
                for (var contentHeight = 0, count = this._realizedRowHeaders.length, i = 0; i < count; i++) 1 === (cell = this._realizedRowHeaders[i]).rowSpan && (contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(cell)));
                for (count = this._realizedCornerCells.length, i = 0; i < count; i++) contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(this._realizedCornerCells[i]));
                for (count = this._realizedColumnHeaders.length, i = 0; i < count; i++) {
                    var cell;
                    1 === (cell = this._realizedColumnHeaders[i]).rowSpan && (contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(cell)));
                }
                for (count = this._realizedBodyCells.length, i = 0; i < count; i++) contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(this._realizedBodyCells[i]));
                return this._containerHeight = contentHeight;
            }, TablixRow.prototype.setAligningContextualWidth = function(size) {}, TablixRow.prototype.getAligningContextualWidth = function() {
                return -1;
            }, TablixRow.prototype.setContentHeight = function() {
                for (var count = this._realizedRowHeaders.length, i = count - 1; i >= 0; i--) -1 !== (cell = this._realizedRowHeaders[i]).containerHeight && cell._row.sizeFixed() || (cell.setContainerHeight(this._containerHeight), 
                cell.rowSpan > 1 && cell.setContainerHeight(this.getCellSpanningHeight(cell)));
                for (var _i = 0, _a = this._realizedCornerCells; _i < _a.length; _i++) -1 !== (cell = _a[_i]).containerHeight && cell._row.sizeFixed() || cell.setContainerHeight(this._containerHeight);
                for (var _b = 0, _c = this._realizedColumnHeaders; _b < _c.length; _b++) -1 !== (cell = _c[_b]).containerHeight && cell._row.sizeFixed() || (cell.setContainerHeight(this._containerHeight), 
                cell.rowSpan > 1 && cell.setContainerHeight(this.getCellSpanningHeight(cell)));
                count = this._realizedBodyCells.length;
                for (var _d = 0, _e = this._realizedBodyCells; _d < _e.length; _d++) {
                    var cell;
                    -1 !== (cell = _e[_d]).containerHeight && cell._row.sizeFixed() || cell.setContainerHeight(this._containerHeight);
                }
                this._height = -1;
            }, TablixRow.prototype.getIndex = function(grid) {
                return grid.realizedRows.indexOf(this);
            }, TablixRow.prototype.getHeaders = function() {
                return this._realizedRowHeaders;
            }, TablixRow.prototype.getOtherDimensionHeaders = function() {
                return this._realizedColumnHeaders;
            }, TablixRow.prototype.getCellContextualSpan = function(cell) {
                return cell.rowSpan;
            }, TablixRow.prototype.getOtherDimensionOwner = function(cell) {
                return cell._column;
            }, TablixRow;
        }(), TablixGrid = function() {
            function TablixGrid(presenter) {
                this._presenter = presenter, this._footerRow = null;
            }
            return TablixGrid.prototype.initialize = function(owner, gridHost, footerHost) {
                this._owner = owner, this._presenter.initialize(this, gridHost, footerHost, owner), 
                this.fillColumnsProportionally = !1, this._realizedRows = [], this._realizedColumns = [], 
                this._emptySpaceHeaderCell = null, this._emptyFooterSpaceCell = null;
            }, Object.defineProperty(TablixGrid.prototype, "owner", {
                get: function() {
                    return this._owner;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixGrid.prototype, "fillColumnsProportionally", {
                get: function() {
                    return this._fillColumnsProportionally;
                },
                set: function(value) {
                    this._fillColumnsProportionally !== value && (this._fillColumnsProportionally = value, 
                    this._presenter.onFillColumnsProportionallyChanged(value));
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixGrid.prototype, "realizedColumns", {
                get: function() {
                    return this._realizedColumns;
                },
                set: function(columns) {
                    this._realizedColumns = columns;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixGrid.prototype, "realizedRows", {
                get: function() {
                    return this._realizedRows;
                },
                set: function(rows) {
                    this._realizedRows = rows;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixGrid.prototype, "footerRow", {
                get: function() {
                    return this._footerRow;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixGrid.prototype, "emptySpaceHeaderCell", {
                get: function() {
                    return this._emptySpaceHeaderCell;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixGrid.prototype, "emptySpaceFooterCell", {
                get: function() {
                    return this._emptyFooterSpaceCell;
                },
                enumerable: !1,
                configurable: !0
            }), TablixGrid.prototype.ShowEmptySpaceCells = function(rowSpan, width) {
                0 !== this._realizedRows.length && (0 === this._realizedRows.length || this._emptySpaceHeaderCell || (this._emptySpaceHeaderCell = this._realizedRows[0].getOrCreateEmptySpaceCell(), 
                this._emptySpaceHeaderCell.rowSpan = rowSpan, this._emptySpaceHeaderCell.colSpan = 1, 
                this._emptySpaceHeaderCell.setContainerWidth(width)), this._footerRow && null === this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell = this._footerRow.getOrCreateEmptySpaceCell(), 
                this._emptyFooterSpaceCell.rowSpan = 1, this._emptyFooterSpaceCell.colSpan = 1, 
                this._emptyFooterSpaceCell.setContainerWidth(width)));
            }, TablixGrid.prototype.HideEmptySpaceCells = function() {
                this._emptySpaceHeaderCell && (this._emptySpaceHeaderCell.clear(), this._emptySpaceHeaderCell = null), 
                this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell.clear(), this._emptyFooterSpaceCell = null);
            }, TablixGrid.prototype.onStartRenderingSession = function(clear) {
                clear && (this.clearRows(), this.clearColumns());
            }, TablixGrid.prototype.onStartRenderingIteration = function() {
                this.initializeRows(), this.initializeColumns();
            }, TablixGrid.prototype.onEndRenderingIteration = function() {
                var rows = this._rows;
                if (void 0 !== rows) for (var rowCount = rows.length, i = 0; i < rowCount; i++) rows[i].releaseUnusedCells(this._owner);
                this._footerRow && this._footerRow.releaseUnusedCells(this._owner);
            }, TablixGrid.prototype.getOrCreateRow = function(rowIndex) {
                var currentRow = this._rows[rowIndex];
                return void 0 === currentRow && ((currentRow = new TablixRow(this._presenter.createRowPresenter())).initialize(this), 
                this._presenter.onAppendRow(currentRow), this._rows[rowIndex] = currentRow), void 0 === this._realizedRows[rowIndex] && (this._realizedRows[rowIndex] = currentRow), 
                currentRow;
            }, TablixGrid.prototype.getOrCreateFootersRow = function() {
                return null === this._footerRow && (this._footerRow = new TablixRow(this._presenter.createRowPresenter()), 
                this._footerRow.initialize(this), this._presenter.onAddFooterRow(this._footerRow)), 
                this._footerRow;
            }, TablixGrid.prototype.moveRowsToEnd = function(moveFromIndex, count) {
                for (var i = 0; i < count; i++) {
                    var row = this._rows[i + moveFromIndex];
                    debug.fF.assertValue(row, "Invalid Row Index"), row.unfixSize(), this._presenter.onRemoveRow(row), 
                    this._presenter.onAppendRow(row), this._rows.push(row);
                }
                this._rows.splice(moveFromIndex, count);
            }, TablixGrid.prototype.moveRowsToStart = function(moveToIndex, count) {
                var refRow = this._rows[moveToIndex];
                debug.fF.assertValue(refRow, "Invalid Row Index");
                for (var i = 0; i < count; i++) {
                    var row = this._rows.pop();
                    row.unfixSize(), this._presenter.onRemoveRow(row), this._presenter.onInsertRowBefore(row, refRow), 
                    this._rows.splice(moveToIndex + i, 0, row);
                }
            }, TablixGrid.prototype.moveColumnsToEnd = function(moveFromIndex, count) {
                for (var i = Math.max(this._columns[this._rows[0]._realizedCornerCells.length]._realizedColumnHeaders.length - 1, 0); i < this._rows.length; i++) this._rows[i].moveScrollableCellsToEnd(count);
                for (i = 0; i < count; i++) this._columns.push(this._columns[i + moveFromIndex]);
                this._columns.splice(moveFromIndex, count);
            }, TablixGrid.prototype.moveColumnsToStart = function(moveToIndex, count) {
                for (var i = Math.max(this._columns[this._rows[0]._realizedCornerCells.length]._realizedColumnHeaders.length - 1, 0); i < this._rows.length; i++) this._rows[i].moveScrollableCellsToStart(count);
                for (i = 0; i < count; i++) {
                    var column = this._columns.pop();
                    this._columns.splice(moveToIndex + i, 0, column);
                }
            }, TablixGrid.prototype.getOrCreateColumn = function(columnIndex) {
                var currentColumn = this._columns[columnIndex];
                return void 0 === currentColumn && ((currentColumn = new TablixColumn(this._presenter.createColumnPresenter(columnIndex), columnIndex)).initialize(this), 
                this._columns[columnIndex] = currentColumn), void 0 === this._realizedColumns[columnIndex] && (this._realizedColumns[columnIndex] = currentColumn), 
                currentColumn;
            }, TablixGrid.prototype.initializeColumns = function() {
                this._columns || (this._columns = []);
                for (var length = this._columns.length, i = 0; i < length; i++) this._columns[i].initialize(this);
                this._realizedColumns = [];
            }, TablixGrid.prototype.clearColumns = function() {
                this._columns = null, this._realizedColumns = null;
            }, TablixGrid.prototype.initializeRows = function() {
                var hasFooter = this._owner.rowDimension.hasFooter() && null !== this._footerRow;
                this._realizedRows = [], this._rows || (this._rows = []);
                for (var rows = this._rows, length = rows.length, i = 0; i < length; i++) rows[i].initialize(this);
                hasFooter && (this._footerRow || this.getOrCreateFootersRow(), this._footerRow.initialize(this));
            }, TablixGrid.prototype.clearRows = function() {
                var rows = this._rows;
                if (rows) {
                    for (var length_1 = rows.length, i = 0; i < length_1; i++) rows[i].releaseAllCells(this._owner);
                    this._footerRow && this._footerRow.releaseAllCells(this._owner), this._presenter.onClear(), 
                    this._footerRow = null, this._rows = null, this._realizedRows = null;
                }
            }, TablixGrid.prototype.getWidth = function() {
                return this._presenter.getWidth();
            }, TablixGrid.prototype.getHeight = function() {
                return this._presenter.getHeight();
            }, TablixGrid;
        }(), tablixResizer = __webpack_require__(42737), TablixDomResizer = function(_super) {
            function TablixDomResizer(cell, element, handler) {
                var _this = _super.call(this, element, handler) || this;
                return _this._cell = cell, _this;
            }
            return (0, tslib_es6.__extends)(TablixDomResizer, _super), Object.defineProperty(TablixDomResizer.prototype, "cell", {
                get: function() {
                    return this._cell;
                },
                enumerable: !1,
                configurable: !0
            }), TablixDomResizer.prototype._hotSpot = function(position) {
                return position.x >= this.element.getBoundingClientRect().right - tablixResizer.A.resizeHandleSize;
            }, TablixDomResizer;
        }(tablixResizer.A), TablixCellPresenter = function() {
            function TablixCellPresenter(fitProportionally, layoutKind) {
                this._tableCell = null, this._contentElement = (0, tablixUtils1.wC)(), this._contentHost = (0, 
                tablixUtils1.wC)(), this.layoutKind = layoutKind, this._contentElement.appendChild(this._contentHost), 
                this._resizer = null;
            }
            return TablixCellPresenter.prototype.initialize = function(owner) {
                this._owner = owner;
            }, Object.defineProperty(TablixCellPresenter.prototype, "owner", {
                get: function() {
                    return this._owner;
                },
                enumerable: !1,
                configurable: !0
            }), TablixCellPresenter.prototype.registerTableCell = function(tableCell) {
                this._tableCell = tableCell, tableCell.appendChild(this._contentElement);
            }, Object.defineProperty(TablixCellPresenter.prototype, "tableCell", {
                get: function() {
                    return this._tableCell;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixCellPresenter.prototype, "contentElement", {
                get: function() {
                    return this._contentElement;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixCellPresenter.prototype, "contentHost", {
                get: function() {
                    return this._contentHost;
                },
                enumerable: !1,
                configurable: !0
            }), TablixCellPresenter.prototype.registerClickHandler = function(handler) {
                this._contentElement.onclick = handler;
            }, TablixCellPresenter.prototype.unregisterClickHandler = function() {
                this._contentElement.onclick = null;
            }, TablixCellPresenter.prototype.onContainerWidthChanged = function(value) {
                (0, tablixUtils1.Py)(this._contentElement, value);
            }, TablixCellPresenter.prototype.onContinerHeightChanged = function(height) {
                (0, tablixUtils1.Iw)(this._contentElement, height);
            }, TablixCellPresenter.prototype.onColumnSpanChanged = function(value) {
                this._tableCell.colSpan = value;
            }, TablixCellPresenter.prototype.onRowSpanChanged = function(value) {
                this._tableCell.rowSpan = value;
            }, TablixCellPresenter.prototype.onTextAlignChanged = function(value) {
                this._tableCell.style.textAlign = value;
            }, TablixCellPresenter.prototype.onClear = function() {
                this._contentHost.className = "", this._tableCell.className = "";
            }, TablixCellPresenter.prototype.onHorizontalScroll = function(width, offset) {
                (0, tablixUtils1.hn)(this._contentHost, offset), (0, tablixUtils1.Py)(this._contentHost, width);
            }, TablixCellPresenter.prototype.onVerticalScroll = function(height, offset) {
                (0, tablixUtils1.FX)(this._contentHost, offset), (0, tablixUtils1.Iw)(this._contentHost, height);
            }, TablixCellPresenter.prototype.onInitializeScrolling = function() {
                (0, tablixUtils1.hn)(this._contentHost, 0), (0, tablixUtils1.FX)(this._contentHost, 0), 
                (0, tablixUtils1.Py)(this._contentHost, -1), (0, tablixUtils1.Iw)(this._contentHost, -1);
            }, TablixCellPresenter.prototype.enableHorizontalResize = function(enable, handler) {
                enable !== (null !== this._resizer) && (enable ? (this._resizer = new TablixDomResizer(this._owner, this._tableCell, handler), 
                this._resizer.initialize()) : (this._resizer.uninitialize(), this._resizer = null));
            }, TablixCellPresenter.prototype.disableDragResize = function() {
                this._tableCell.setAttribute(TablixCellPresenter._dragResizeDisabledAttributeName, "true");
            }, TablixCellPresenter._dragResizeDisabledAttributeName = "drag-resize-disabled", 
            TablixCellPresenter;
        }(), TablixRowPresenter = function() {
            function TablixRowPresenter(fitProportionally) {
                this._tableRow = null, this._fitProportionally = fitProportionally;
            }
            return TablixRowPresenter.prototype.initialize = function(row) {
                this._row = row;
            }, TablixRowPresenter.prototype.createCellPresenter = function(layoutKind) {
                return new TablixCellPresenter(this._fitProportionally, layoutKind);
            }, TablixRowPresenter.prototype.registerRow = function(tableRow) {
                this._tableRow = tableRow;
            }, TablixRowPresenter.prototype.onAppendCell = function(cell) {
                var presenter = cell._presenter;
                if (null === presenter.tableCell) {
                    var tableCell = this._tableRow.insertCell(-1);
                    presenter.registerTableCell(tableCell);
                } else this._tableRow.appendChild(presenter.tableCell);
            }, TablixRowPresenter.prototype.onInsertCellBefore = function(cell, refCell) {
                debug.fF.assertValue(refCell._presenter.tableCell, "refTableCell");
                var presenter = cell._presenter;
                if (null === presenter.tableCell) {
                    var tableCell = this._tableRow.insertCell(Math.max(0, refCell._presenter.tableCell.cellIndex - 1));
                    presenter.registerTableCell(tableCell);
                } else this._tableRow.insertBefore(cell._presenter.tableCell, refCell._presenter.tableCell);
            }, TablixRowPresenter.prototype.onRemoveCell = function(cell) {
                this._tableRow.removeChild(cell._presenter.tableCell);
            }, TablixRowPresenter.prototype.getHeight = function() {
                return this.getCellHeight(this._row.getTablixCell());
            }, TablixRowPresenter.prototype.getCellHeight = function(cell) {
                return debug.fF.assertFail("PureVirtualMethod: TablixRowPresenter.getCellHeight"), 
                -1;
            }, TablixRowPresenter.prototype.getCellContentHeight = function(cell) {
                return debug.fF.assertFail("PureVirtualMethod: TablixRowPresenter.getCellHeight"), 
                -1;
            }, Object.defineProperty(TablixRowPresenter.prototype, "tableRow", {
                get: function() {
                    return this._tableRow;
                },
                enumerable: !1,
                configurable: !0
            }), TablixRowPresenter;
        }(), DashboardRowPresenter = function(_super) {
            function DashboardRowPresenter(gridPresenter, fitProportionally) {
                return _super.call(this, fitProportionally) || this;
            }
            return (0, tslib_es6.__extends)(DashboardRowPresenter, _super), DashboardRowPresenter.prototype.getCellHeight = function(cell) {
                return cell.containerHeight;
            }, DashboardRowPresenter.prototype.getCellContentHeight = function(cell) {
                return cell.contentHeight;
            }, DashboardRowPresenter;
        }(TablixRowPresenter), CanvasRowPresenter = function(_super) {
            function CanvasRowPresenter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(CanvasRowPresenter, _super), CanvasRowPresenter.prototype.getCellHeight = function(cell) {
                return cell.containerHeight;
            }, CanvasRowPresenter.prototype.getCellContentHeight = function(cell) {
                return cell.contentHeight;
            }, CanvasRowPresenter;
        }(TablixRowPresenter), TablixColumnPresenter = function() {
            function TablixColumnPresenter() {}
            return TablixColumnPresenter.prototype.initialize = function(column) {
                this._column = column;
            }, TablixColumnPresenter.prototype.getWidth = function() {
                var width = this.getPersistedWidth();
                return null == width && (width = this.getCellWidth(this._column.getTablixCell())), 
                width;
            }, TablixColumnPresenter.prototype.getPersistedWidth = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixColumnPresenter.getPersistedWidth"), 
                -1;
            }, TablixColumnPresenter.prototype.getCellWidth = function(cell) {
                return debug.fF.assertFail("PureVirtualMethod: TablixColumnPresenter.getCellWidth"), 
                -1;
            }, TablixColumnPresenter;
        }(), DashboardColumnPresenter = function(_super) {
            function DashboardColumnPresenter(gridPresenter) {
                var _this = _super.call(this) || this;
                return _this._gridPresenter = gridPresenter, _this;
            }
            return (0, tslib_es6.__extends)(DashboardColumnPresenter, _super), DashboardColumnPresenter.prototype.getPersistedWidth = function() {
                return this._gridPresenter.sizeComputationManager.cellWidth;
            }, DashboardColumnPresenter.prototype.getCellWidth = function(cell) {
                return this._gridPresenter.sizeComputationManager.cellWidth;
            }, DashboardColumnPresenter;
        }(TablixColumnPresenter), CanvasColumnPresenter = function(_super) {
            function CanvasColumnPresenter(gridPresenter, index) {
                var _this = _super.call(this) || this;
                return _this._gridPresenter = gridPresenter, _this;
            }
            return (0, tslib_es6.__extends)(CanvasColumnPresenter, _super), CanvasColumnPresenter.prototype.getPersistedWidth = function() {
                return this._gridPresenter.getPersistedColumnWidth(this._column);
            }, CanvasColumnPresenter.prototype.getCellWidth = function(cell) {
                return cell._presenter ? cell.contentWidth : 0;
            }, CanvasColumnPresenter;
        }(TablixColumnPresenter), TablixGridPresenter = function() {
            function TablixGridPresenter(columnWidthManager) {
                this._table = (0, tablixUtils1.W_)(), this._table.className = "unselectable", this._footerTable = (0, 
                tablixUtils1.W_)(), this._footerTable.className = "unselectable", this._columnWidthManager = columnWidthManager;
            }
            return TablixGridPresenter.prototype.initialize = function(owner, gridHost, footerHost, control) {
                this._owner = owner, gridHost.appendChild(this._table), footerHost.appendChild(this._footerTable);
            }, TablixGridPresenter.prototype.getWidth = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixGridPresenter.getWidth"), -1;
            }, TablixGridPresenter.prototype.getHeight = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixGridPresenter.getHeight"), 
                -1;
            }, TablixGridPresenter.prototype.getScreenToCssRatioX = function() {
                return 1;
            }, TablixGridPresenter.prototype.getScreenToCssRatioY = function() {
                return 1;
            }, TablixGridPresenter.prototype.createRowPresenter = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixGridPresenter.createRowPresenter"), 
                null;
            }, TablixGridPresenter.prototype.createColumnPresenter = function(index) {
                return debug.fF.assertFail("PureVirtualMethod: TablixGridPresenter.createColumnPresenter"), 
                null;
            }, TablixGridPresenter.prototype.onAppendRow = function(row) {
                var presenter = row.presenter;
                if (null === presenter.tableRow) {
                    var tableRow = this._table.insertRow(-1);
                    presenter.registerRow(tableRow);
                } else this._table.tBodies[0].appendChild(row.presenter.tableRow);
            }, TablixGridPresenter.prototype.onInsertRowBefore = function(row, refRow) {
                debug.fF.assertValue(refRow.presenter.tableRow, "refTableRow");
                var presenter = row.presenter;
                if (null === presenter.tableRow) {
                    var tableRow = this._table.insertRow(Math.max(0, refRow.presenter.tableRow.rowIndex - 1));
                    presenter.registerRow(tableRow);
                } else this._table.tBodies[0].insertBefore(row.presenter.tableRow, refRow.presenter.tableRow);
            }, TablixGridPresenter.prototype.onRemoveRow = function(row) {
                this._table.tBodies[0].removeChild(row.presenter.tableRow);
            }, TablixGridPresenter.prototype.onAddFooterRow = function(row) {
                var presenter = row.presenter;
                if (null === presenter.tableRow) {
                    var tableRow = this._footerTable.insertRow(-1);
                    presenter.registerRow(tableRow);
                } else this._footerTable.tBodies[0].appendChild(row.presenter.tableRow);
            }, TablixGridPresenter.prototype.onClear = function() {
                (0, tablixUtils1.D4)(this._table), (0, tablixUtils1.D4)(this._footerTable);
            }, TablixGridPresenter.prototype.onFillColumnsProportionallyChanged = function(value) {
                value ? (this._table.style.width = "100%", this._footerTable.style.width = "100%") : (this._table.style.width = "auto", 
                this._footerTable.style.width = "auto");
            }, TablixGridPresenter.prototype.invokeColumnResizeEndCallback = function(column, width) {
                this._columnWidthManager && this._columnWidthManager.onColumnWidthChanged(tablixColumnWidthManager.K.getColumnQueryName(column), width);
            }, TablixGridPresenter.prototype.getPersistedColumnWidth = function(column) {
                if (this._columnWidthManager) return this._columnWidthManager.getPersistedColumnWidth(tablixColumnWidthManager.K.getColumnQueryName(column));
            }, TablixGridPresenter;
        }(), DashboardTablixGridPresenter = function(_super) {
            function DashboardTablixGridPresenter(sizeComputationManager) {
                var _this = _super.call(this) || this;
                return _this._sizeComputationManager = sizeComputationManager, _this;
            }
            return (0, tslib_es6.__extends)(DashboardTablixGridPresenter, _super), DashboardTablixGridPresenter.prototype.createRowPresenter = function() {
                return new DashboardRowPresenter(this, this._owner.fillColumnsProportionally);
            }, DashboardTablixGridPresenter.prototype.createColumnPresenter = function(index) {
                return new DashboardColumnPresenter(this);
            }, Object.defineProperty(DashboardTablixGridPresenter.prototype, "sizeComputationManager", {
                get: function() {
                    return this._sizeComputationManager;
                },
                enumerable: !1,
                configurable: !0
            }), DashboardTablixGridPresenter.prototype.getWidth = function() {
                return this._sizeComputationManager.gridWidth;
            }, DashboardTablixGridPresenter.prototype.getHeight = function() {
                return this._sizeComputationManager.gridHeight;
            }, DashboardTablixGridPresenter;
        }(TablixGridPresenter), CanvasTablixGridPresenter = function(_super) {
            function CanvasTablixGridPresenter(columnWidthManager) {
                return _super.call(this, columnWidthManager) || this;
            }
            return (0, tslib_es6.__extends)(CanvasTablixGridPresenter, _super), CanvasTablixGridPresenter.prototype.createRowPresenter = function() {
                return new CanvasRowPresenter(this._owner.fillColumnsProportionally);
            }, CanvasTablixGridPresenter.prototype.createColumnPresenter = function(index) {
                return new CanvasColumnPresenter(this, index);
            }, CanvasTablixGridPresenter.prototype.getWidth = function() {
                return (0, tablixUtils1.mx)(this._table);
            }, CanvasTablixGridPresenter.prototype.getHeight = function() {
                return (0, tablixUtils1.Uy)(this._table);
            }, CanvasTablixGridPresenter;
        }(TablixGridPresenter), SizeComputationManager = function() {
            function SizeComputationManager() {}
            return Object.defineProperty(SizeComputationManager.prototype, "visibleWidth", {
                get: function() {
                    return this._viewport ? this._viewport.width : 0;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "visibleHeight", {
                get: function() {
                    return this._viewport ? this._viewport.height : 0;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "gridWidth", {
                get: function() {
                    return this.visibleWidth;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "gridHeight", {
                get: function() {
                    return this.visibleHeight;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "rowHeight", {
                get: function() {
                    return this._cellHeight;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "cellWidth", {
                get: function() {
                    return this._cellWidth;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "cellHeight", {
                get: function() {
                    return this._cellHeight;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "contentWidth", {
                get: function() {
                    return this._cellWidth;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(SizeComputationManager.prototype, "contentHeight", {
                get: function() {
                    return this._cellHeight;
                },
                enumerable: !1,
                configurable: !0
            }), SizeComputationManager.prototype.updateColumnCount = function(columnCount) {
                this._columnCount = columnCount;
            }, SizeComputationManager.prototype.updateRowHeight = function(rowHeight) {
                this._cellHeight = rowHeight;
            }, SizeComputationManager.prototype.updateScalingFactor = function(scalingFactor) {
                this._scalingFactor = scalingFactor, this._cellWidth = this.computeColumnWidth(this._columnCount);
            }, SizeComputationManager.prototype.updateViewport = function(viewport) {
                this._viewport = viewport, this._cellWidth = this.computeColumnWidth(this._columnCount), 
                this._cellHeight = this.computeColumnHeight();
            }, SizeComputationManager.prototype.computeColumnWidth = function(totalColumnCount) {
                var scalingFactor = this._scalingFactor;
                scalingFactor || (scalingFactor = 1);
                var maxAllowedColumns = Math.floor(this._viewport.width / (scalingFactor * SizeComputationManager.TablixMinimumColumnWidth));
                return this.fitToColumnCount(maxAllowedColumns, totalColumnCount);
            }, SizeComputationManager.prototype.computeColumnHeight = function() {
                if (!this.hasImageContent) return this._cellHeight;
                var width = this._viewport.width;
                return width <= 250 ? 20 : width <= 510 ? 51 : width <= 770 ? 52 : void debug.fF.assertFail("Fixed size is only for viewport up to 770px width.");
            }, SizeComputationManager.prototype.fitToColumnCount = function(maxAllowedColumnCount, totalColumnCount) {
                var columnsToFit = Math.min(maxAllowedColumnCount, totalColumnCount);
                return Math.floor(this._viewport.width / columnsToFit);
            }, SizeComputationManager.TablixMinimumColumnWidth = 75, SizeComputationManager;
        }(), DimensionLayoutManager = function() {
            function DimensionLayoutManager(owner, grid, realizationManager) {
                this._owner = owner, this._grid = grid, this._lastScrollOffset = null, this._isScrolling = !1, 
                this._fixedSizeEnabled = !0, this._done = !1, this._realizationManager = realizationManager;
            }
            return Object.defineProperty(DimensionLayoutManager.prototype, "owner", {
                get: function() {
                    return this._owner;
                },
                set: function(owner) {
                    this._owner = owner;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DimensionLayoutManager.prototype, "realizationManager", {
                get: function() {
                    return this._realizationManager;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DimensionLayoutManager.prototype, "fixedSizeEnabled", {
                get: function() {
                    return this._fixedSizeEnabled;
                },
                set: function(enable) {
                    this._fixedSizeEnabled = enable;
                },
                enumerable: !1,
                configurable: !0
            }), DimensionLayoutManager.prototype.onCornerCellRealized = function(item, cell, leaf) {
                this._realizationManager.onCornerCellRealized(item, cell);
            }, DimensionLayoutManager.prototype.onHeaderRealized = function(item, cell, leaf) {
                this._realizationManager.onHeaderRealized(item, cell, leaf);
            }, Object.defineProperty(DimensionLayoutManager.prototype, "needsToRealize", {
                get: function() {
                    return this._realizationManager.needsToRealize;
                },
                enumerable: !1,
                configurable: !0
            }), DimensionLayoutManager.prototype.getVisibleSizeRatio = function() {
                return 1 - this.dimension.getFractionScrollOffset();
            }, Object.defineProperty(DimensionLayoutManager.prototype, "alignToEnd", {
                get: function() {
                    return this._alignToEnd;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DimensionLayoutManager.prototype, "done", {
                get: function() {
                    return this._done;
                },
                enumerable: !1,
                configurable: !0
            }), DimensionLayoutManager.prototype._requiresMeasure = function() {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager._requiresMeasure"), 
                !0;
            }, DimensionLayoutManager.prototype.startScrollingSession = function() {
                this._isScrolling = !0;
            }, DimensionLayoutManager.prototype.endScrollingSession = function() {
                this._isScrolling = !1;
            }, DimensionLayoutManager.prototype.isScrolling = function() {
                return this._isScrolling;
            }, DimensionLayoutManager.prototype.isResizing = function() {
                return !1;
            }, DimensionLayoutManager.prototype.getOtherHierarchyContextualHeight = function() {
                var count = this.dimension.otherDimension.getDepth(), contextualHeight = 0, items = this._getRealizedItems();
                if (items.length > 0) for (var i = 0; i < count; i++) contextualHeight += items[i].getContextualWidth();
                return contextualHeight;
            }, DimensionLayoutManager.prototype._isAutoSized = function() {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager._isAutoSized"), 
                !1;
            }, DimensionLayoutManager.prototype.onStartRenderingSession = function() {
                this._measureEnabled = this._requiresMeasure(), this._gridOffset = this.dimension.otherDimension.getDepth();
            }, DimensionLayoutManager.prototype.onEndRenderingSession = function() {
                this._realizationManager.onEndRenderingSession(), this._alignToEnd = !1, this._done = !1, 
                this._measureEnabled = !0, this._sendDimensionsToControl();
            }, DimensionLayoutManager.prototype._sendDimensionsToControl = function() {
                debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager._sendDimensionsToControl");
            }, Object.defineProperty(DimensionLayoutManager.prototype, "measureEnabled", {
                get: function() {
                    return this._measureEnabled;
                },
                enumerable: !1,
                configurable: !0
            }), DimensionLayoutManager.prototype.getFooterContextualWidth = function() {
                return 0;
            }, DimensionLayoutManager.prototype.onStartRenderingIteration = function(clear, contextualWidth) {
                this._measureEnabled && !this._done && (this._contextualWidthToFill = (contextualWidth - this.otherScrollbarContextualWidth) * this.getGridScale() - this.getFooterContextualWidth()), 
                this._realizationManager.onStartRenderingIteration(), clear ? this._lastScrollOffset = null : null !== this._lastScrollOffset && this.swapElements();
            }, Object.defineProperty(DimensionLayoutManager.prototype, "allItemsRealized", {
                get: function() {
                    return this.getRealizedItemsCount() - this._gridOffset === this.dimension.getItemsCount() || 0 === this.dimension.getItemsCount();
                },
                enumerable: !1,
                configurable: !0
            }), DimensionLayoutManager.prototype.onEndRenderingIteration = function() {
                if (!this._done) {
                    if (!this._measureEnabled) return this._lastScrollOffset = this.dimension.scrollOffset, 
                    void (this._done = !0);
                    var newScrollOffset, gridContextualWidth = this.getGridContextualWidth(), filled = (0, 
                    Double.bA)(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision), allRealized = this.allItemsRealized;
                    newScrollOffset = filled ? this.scrollForwardToAlignEnd(gridContextualWidth) : this.scrollBackwardToFill(gridContextualWidth), 
                    this._realizationManager.onEndRenderingIteration(gridContextualWidth, filled);
                    var originalScrollbarVisible = this.dimension.scrollbar.visible;
                    this.updateScrollbar(gridContextualWidth), this._done = (filled || allRealized) && this.dimension.scrollbar.visible === originalScrollbarVisible && (0, 
                    Double.GG)(newScrollOffset, this.dimension.scrollOffset, DimensionLayoutManager._scrollOffsetPrecision), 
                    this.dimension.scrollOffset = newScrollOffset, this._lastScrollOffset = this.dimension.scrollOffset;
                }
            }, DimensionLayoutManager.prototype.getScrollDeltaWithinPage = function() {
                if (null !== this._lastScrollOffset) {
                    var delta = this.dimension.getIntegerScrollOffset() - Math.floor(this._lastScrollOffset);
                    if (Math.abs(delta) < this.getRealizedItemsCount() - this.dimension.otherDimension.getDepth()) return delta;
                }
                return null;
            }, DimensionLayoutManager.prototype.swapElements = function() {
                var delta = this.getScrollDeltaWithinPage();
                if (null !== delta) {
                    var otherHierarchyDepth = this.dimension.otherDimension.getDepth();
                    Math.abs(delta) < this.getRealizedItemsCount() - otherHierarchyDepth && (delta > 0 ? this._moveElementsToBottom(otherHierarchyDepth, delta) : delta < 0 && this._moveElementsToTop(otherHierarchyDepth, -delta));
                }
            }, DimensionLayoutManager.prototype._getRealizedItems = function() {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager._getRealizedItems"), 
                null;
            }, DimensionLayoutManager.prototype.getRealizedItemsCount = function() {
                return this._getRealizedItems().length;
            }, DimensionLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {
                debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager._moveElementsToBottom");
            }, DimensionLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {
                debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager._moveElementsToTop");
            }, DimensionLayoutManager.prototype.isScrollingWithinPage = function() {
                return null !== this.getScrollDeltaWithinPage();
            }, DimensionLayoutManager.prototype.getGridContextualWidth = function() {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager.getGridContextualWidth"), 
                0;
            }, DimensionLayoutManager.prototype.updateScrollbar = function(gridContextualWidth) {
                var scrollbar = this.dimension.scrollbar;
                scrollbar.viewMin = this.dimension.scrollOffset, scrollbar.min = 0, scrollbar.max = this.dimension.getItemsCount(), 
                scrollbar.viewSize = this.getViewSize(gridContextualWidth), this.dimension.scrollbar.show(this.canScroll(gridContextualWidth));
            }, DimensionLayoutManager.prototype.getViewSize = function(gridContextualWidth) {
                var count = this.getRealizedItemsCount();
                if (0 === count) return 0;
                for (var startIndex = this._gridOffset, sizeInItems = 0, sizeInPixels = 0, scrollableArea = this._contextualWidthToFill - this.getOtherHierarchyContextualHeight(), error = this.getMeaurementError(gridContextualWidth), i = startIndex; i < count; i++) {
                    var visibleRatio;
                    visibleRatio = i === startIndex ? this.getVisibleSizeRatio() : 1;
                    var itemContextualWidth = this.getItemContextualWidthWithScrolling(i) * error;
                    if (sizeInItems += visibleRatio, (0, Double.aP)(sizeInPixels += itemContextualWidth, scrollableArea, DimensionLayoutManager._pixelPrecision)) {
                        sizeInItems -= (sizeInPixels - scrollableArea) / itemContextualWidth * visibleRatio;
                        break;
                    }
                }
                return sizeInItems;
            }, DimensionLayoutManager.prototype.isScrollableHeader = function(item, items, index) {
                if (0 !== index || 0 === this.dimension.getFractionScrollOffset()) return !1;
                var hierarchyNavigator = this.dimension._hierarchyNavigator;
                if (hierarchyNavigator.isLeaf(item)) return !0;
                var currentItem = item, currentItems = items;
                do {
                    if (currentItems = hierarchyNavigator.getChildren(currentItem), void 0 === (currentItem = this.dimension.getFirstVisibleItem(hierarchyNavigator.getLevel(currentItem) + 1))) break;
                    if (!hierarchyNavigator.isLastItem(currentItem, currentItems)) return !1;
                } while (!hierarchyNavigator.isLeaf(currentItem));
                return !0;
            }, DimensionLayoutManager.prototype.reachedEnd = function() {
                return this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
            }, DimensionLayoutManager.prototype.scrollBackwardToFill = function(gridContextualWidth) {
                var newScrollOffset = this.dimension.scrollOffset;
                if (this.reachedEnd()) {
                    var widthToFill = this._contextualWidthToFill - gridContextualWidth;
                    if (this.dimension.getItemsCount() > 0) {
                        var averageColumnwidth = gridContextualWidth / (this.getRealizedItemsCount() - this.dimension.getFractionScrollOffset());
                        newScrollOffset = this.dimension.getValidScrollOffset(Math.floor(this.dimension.scrollOffset - widthToFill / averageColumnwidth));
                    }
                    this._alignToEnd = !(0, Double.GG)(newScrollOffset, this.dimension.scrollOffset, DimensionLayoutManager._scrollOffsetPrecision);
                }
                return newScrollOffset;
            }, DimensionLayoutManager.prototype.getItemContextualWidth = function(index) {
                var realizedItems = this._getRealizedItems();
                return index >= realizedItems.length ? null : realizedItems[index].getContextualWidth();
            }, DimensionLayoutManager.prototype.getItemContextualWidthWithScrolling = function(index) {
                return this.getSizeWithScrolling(this.getItemContextualWidth(index), index);
            }, DimensionLayoutManager.prototype.getSizeWithScrolling = function(size, index) {
                return size * (this._gridOffset === index ? this.getVisibleSizeRatio() : 1);
            }, DimensionLayoutManager.prototype.getGridContextualWidthFromItems = function() {
                for (var count = this.getRealizedItemsCount(), contextualWidth = 0, i = 0; i < count; i++) contextualWidth += this.getItemContextualWidthWithScrolling(i);
                return contextualWidth;
            }, DimensionLayoutManager.prototype.getMeaurementError = function(gridContextualWidth) {
                return gridContextualWidth / this.getGridContextualWidthFromItems();
            }, DimensionLayoutManager.prototype.scrollForwardToAlignEnd = function(gridContextualWidth) {
                var newScrollOffset = this.dimension.scrollOffset;
                if (this._alignToEnd) {
                    var withinThreshold = (0, Double.GG)(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
                    if (!withinThreshold) for (var count = this.getRealizedItemsCount(), startIndex = this._gridOffset, widthToScroll = gridContextualWidth - this._contextualWidthToFill, error = this.getMeaurementError(gridContextualWidth), i = startIndex; i < count; i++) {
                        var itemContextualWidth = this.getItemContextualWidth(i) * error;
                        if (!(0, Double.Po)(itemContextualWidth, widthToScroll, DimensionLayoutManager._pixelPrecision)) {
                            var visibleRatio = startIndex === i ? 1 - this.dimension.getFractionScrollOffset() : 1;
                            newScrollOffset = this.dimension.getValidScrollOffset(this.dimension.scrollOffset + (i - startIndex) + widthToScroll * visibleRatio / itemContextualWidth);
                            break;
                        }
                        widthToScroll -= itemContextualWidth;
                    }
                    this._alignToEnd = !withinThreshold;
                }
                return newScrollOffset;
            }, Object.defineProperty(DimensionLayoutManager.prototype, "dimension", {
                get: function() {
                    return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager.dimension"), 
                    null;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DimensionLayoutManager.prototype, "otherLayoutManager", {
                get: function() {
                    return this.dimension.otherDimension.layoutManager;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DimensionLayoutManager.prototype, "contextualWidthToFill", {
                get: function() {
                    return this._contextualWidthToFill;
                },
                enumerable: !1,
                configurable: !0
            }), DimensionLayoutManager.prototype.getGridScale = function() {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager.getGridScale"), 
                0;
            }, Object.defineProperty(DimensionLayoutManager.prototype, "otherScrollbarContextualWidth", {
                get: function() {
                    return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager.otherScrollbarContextualWidth"), 
                    0;
                },
                enumerable: !1,
                configurable: !0
            }), DimensionLayoutManager.prototype.getActualContextualWidth = function(gridContextualWidth) {
                return this._isAutoSized() && !this.canScroll(gridContextualWidth) ? gridContextualWidth : this._contextualWidthToFill;
            }, DimensionLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager.canScroll"), 
                !1;
            }, DimensionLayoutManager.prototype.calculateSizes = function() {
                this.fixedSizeEnabled && (this.calculateContextualWidths(), this.calculateSpans());
            }, DimensionLayoutManager.prototype._calculateSize = function(item) {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager._calculateSize"), 
                null;
            }, DimensionLayoutManager.prototype.calculateContextualWidths = function() {
                for (var items = this._getRealizedItems(), count = items.length, i = 0; i < count; i++) {
                    var item = items[i];
                    this.measureEnabled && item.setAligningContextualWidth(-1), this._calculateSize(item);
                }
            }, DimensionLayoutManager.prototype.calculateSpans = function() {
                this.measureEnabled && (this.updateNonScrollableItemsSpans(), this.updateScrollableItemsSpans());
            }, DimensionLayoutManager.prototype.updateNonScrollableItemsSpans = function() {
                for (var otherDimensionItems = this.otherLayoutManager._getRealizedItems(), otherDimensionItemsCount = otherDimensionItems.length, i = this.dimension.getDepth(); i < otherDimensionItemsCount; i++) {
                    var otherDimensionItem = otherDimensionItems[i];
                    this.updateSpans(otherDimensionItem, otherDimensionItem.getHeaders(), !1);
                }
            }, DimensionLayoutManager.prototype.updateScrollableItemsSpans = function() {
                for (var otherRealizedItems = this.otherLayoutManager._getRealizedItems(), otherRealizedItemsCount = Math.min(this.dimension.getDepth(), otherRealizedItems.length), i = 0; i < otherRealizedItemsCount; i++) {
                    var otherRealizedItem = otherRealizedItems[i];
                    this.updateSpans(otherRealizedItem, otherRealizedItem.getOtherDimensionHeaders(), !0);
                }
            }, DimensionLayoutManager.prototype.fixSizes = function() {
                if (this.fixedSizeEnabled) for (var items = this._getRealizedItems(), i = items.length - 1; i >= 0; i--) items[i].fixSize();
            }, DimensionLayoutManager.prototype.updateSpans = function(otherRealizedItem, cells, considerScrolling) {
                for (var realizedItems = this._getRealizedItems(), cellCount = cells.length, j = 0; j < cellCount; j++) {
                    var cell = cells[j], owner = otherRealizedItem.getOtherDimensionOwner(cell), span = owner.getCellContextualSpan(cell);
                    if (span > 1) for (var totalSizeInSpan = 0, startIndex = owner.getIndex(this._grid), k = 0; k < span; k++) {
                        var item = realizedItems[k + startIndex], childWidth = item.getContentContextualWidth();
                        considerScrolling && 0 === j && 0 === k && (childWidth = Math.floor((1 - this.dimension.getFractionScrollOffset()) * childWidth)), 
                        totalSizeInSpan += childWidth, k === span - 1 && this.updateLastChildSize(cell, item, totalSizeInSpan);
                    }
                }
            }, DimensionLayoutManager.prototype.updateLastChildSize = function(spanningCell, item, totalSpanSize) {
                var delta = item.getCellIContentContextualWidth(spanningCell) - totalSpanSize;
                delta > 0 && item.setAligningContextualWidth(Math.max(item.getAligningContextualWidth(), delta + item.getContentContextualWidth()));
            }, DimensionLayoutManager._pixelPrecision = 1.0001, DimensionLayoutManager._scrollOffsetPrecision = .01, 
            DimensionLayoutManager;
        }(), ResizeState = function() {
            function ResizeState(column, width, scale) {
                this.column = column, this.item = column.getLeafItem(), this.itemType = column.itemType, 
                this.startColumnWidth = width, this.resizingDelta = 0, this.animationFrame = null, 
                this.scale = scale;
            }
            return ResizeState.prototype.getNewSize = function() {
                return this.startColumnWidth + this.resizingDelta;
            }, ResizeState;
        }(), ColumnLayoutManager = function(_super) {
            function ColumnLayoutManager(owner, grid, realizationManager) {
                var _this = _super.call(this, owner, grid, realizationManager) || this;
                return realizationManager.owner = _this, _this.fillProportionally = !1, _this._resizeState = null, 
                _this;
            }
            return (0, tslib_es6.__extends)(ColumnLayoutManager, _super), Object.defineProperty(ColumnLayoutManager.prototype, "dimension", {
                get: function() {
                    return this.owner.owner.columnDimension;
                },
                enumerable: !1,
                configurable: !0
            }), ColumnLayoutManager.prototype.isResizing = function() {
                return null !== this._resizeState;
            }, Object.defineProperty(ColumnLayoutManager.prototype, "fillProportionally", {
                get: function() {
                    return this._grid.fillColumnsProportionally;
                },
                set: function(value) {
                    this._grid.fillColumnsProportionally = value;
                },
                enumerable: !1,
                configurable: !0
            }), ColumnLayoutManager.prototype.getGridScale = function() {
                return this._grid._presenter.getScreenToCssRatioX();
            }, Object.defineProperty(ColumnLayoutManager.prototype, "otherScrollbarContextualWidth", {
                get: function() {
                    return this.dimension.otherDimension.scrollbar.visible ? (0, tablixUtils1.mx)(this.dimension.otherDimension.scrollbar.element) : 0;
                },
                enumerable: !1,
                configurable: !0
            }), ColumnLayoutManager.prototype._getRealizedItems = function() {
                return this._grid.realizedColumns || (this._grid.realizedColumns = []), this._grid.realizedColumns;
            }, ColumnLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {
                this._grid.moveColumnsToEnd(moveFromIndex, count);
            }, ColumnLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {
                this._grid.moveColumnsToStart(moveToIndex, count);
            }, ColumnLayoutManager.prototype._requiresMeasure = function() {
                return !this.isScrolling() && !this.otherLayoutManager.isScrolling() || this.isScrolling() || this.isResizing();
            }, ColumnLayoutManager.prototype.getGridContextualWidth = function() {
                return this._grid.getWidth();
            }, ColumnLayoutManager.prototype.getFirstVisibleColumn = function() {
                return this._grid.realizedColumns[this._gridOffset];
            }, ColumnLayoutManager.prototype._isAutoSized = function() {
                return this.owner.owner.autoSizeWidth;
            }, ColumnLayoutManager.prototype.applyScrolling = function() {
                var columnOffset = this.dimension.getFractionScrollOffset(), firstVisibleColumnWidth = 0, firstVisibleColumn = this.getFirstVisibleColumn();
                if (void 0 !== firstVisibleColumn) {
                    firstVisibleColumnWidth = firstVisibleColumn.getContextualWidth();
                    var offsetInPixels = Math.ceil(-firstVisibleColumnWidth * columnOffset);
                    this.scroll(firstVisibleColumn, firstVisibleColumnWidth, offsetInPixels);
                }
            }, ColumnLayoutManager.prototype.scroll = function(firstVisibleColumn, width, offset) {
                this.scrollCells(firstVisibleColumn._realizedColumnHeaders, width, offset), this.scrollBodyCells(this._grid.realizedRows, width, offset), 
                null !== firstVisibleColumn.footer && firstVisibleColumn.footer.scrollHorizontally(width, offset);
            }, ColumnLayoutManager.prototype.scrollCells = function(cells, width, offset) {
                for (var length = cells.length, i = 0; i < length; i++) cells[i].scrollHorizontally(width, offset);
            }, ColumnLayoutManager.prototype.scrollBodyCells = function(rows, width, offset) {
                for (var cells, cell, length = rows.length, i = 0; i < length; i++) void 0 !== (cells = rows[i]._realizedBodyCells) && void 0 !== (cell = cells[0]) && cell.scrollHorizontally(width, offset);
            }, ColumnLayoutManager.prototype.onStartResize = function(cell, currentX, currentY) {
                this._resizeState = new ResizeState(cell._column, cell._column.getContentContextualWidth(), (0, 
                tablixUtils1.df)(this.owner.owner.container));
            }, ColumnLayoutManager.prototype.onResize = function(cell, deltaX, deltaY) {
                var _this = this;
                this.isResizing() && (this.owner.owner.wordWrapColumnHeaders && cell.unfixRowHeight(), 
                this._resizeState.resizingDelta = Math.round(Math.max(deltaX / this._resizeState.scale, ColumnLayoutManager.minColumnWidth - this._resizeState.startColumnWidth)), 
                null === this._resizeState.animationFrame && (this._resizeState.animationFrame = requestAnimationFrame(function() {
                    return _this.performResizing();
                })));
            }, ColumnLayoutManager.prototype.onEndResize = function(cell) {
                this.isResizing() && null !== this._resizeState.animationFrame && this.performResizing(), 
                this.endResizing(), this._resizeState = null;
            }, ColumnLayoutManager.prototype.onReset = function(cell) {
                this.owner.owner.wordWrapColumnHeaders && cell.unfixRowHeight(), this._resizeState = new ResizeState(cell._column, -1, 1), 
                cell._column.clearSize(), this.endResizing(), this.owner.owner.refresh(!1), this._resizeState = null;
            }, ColumnLayoutManager.prototype.updateItemToResizeState = function(realizedColumns) {
                if (null !== this._resizeState) for (var columnCount = realizedColumns.length, hierarchyNavigator = this.owner.owner.hierarchyNavigator, i = this.otherLayoutManager.dimension.getDepth(); i < columnCount; i++) {
                    var column = realizedColumns[i];
                    if (column.columnHeaderOrCornerEquals(this._resizeState.itemType, this._resizeState.item, column.itemType, column.getLeafItem(), hierarchyNavigator) && column !== this._resizeState.column) {
                        this._resizeState.column = column, column.onResize(this._resizeState.getNewSize());
                        break;
                    }
                }
            }, ColumnLayoutManager.prototype.performResizing = function() {
                if (null !== this._resizeState) {
                    this._resizeState.animationFrame = null;
                    var newSize = this._resizeState.getNewSize();
                    this._resizeState.column.onResize(newSize), this.owner.owner.refresh(!1);
                }
            }, ColumnLayoutManager.prototype.endResizing = function() {
                if (null !== this._resizeState) {
                    var newSize = this._resizeState.getNewSize();
                    this._resizeState.column.onResizeEnd(newSize);
                }
            }, ColumnLayoutManager.prototype._sendDimensionsToControl = function() {
                var gridContextualWidth = this.getGridContextualWidth(), widthToFill = this.getActualContextualWidth(gridContextualWidth), otherContextualHeight = this.getOtherHierarchyContextualHeight(), scale = this.getGridScale();
                this.owner.owner.updateColumnDimensions(otherContextualHeight / scale, (widthToFill - otherContextualHeight) / scale, this.getViewSize(gridContextualWidth));
            }, ColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                return debug.fF.assertFail("PureVirtualMethod: ColumnLayoutManager.getEstimatedHeaderWidth"), 
                -1;
            }, ColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                return debug.fF.assertFail("PureVirtualMethod: ColumnLayoutManager.getEstimatedBodyCellWidth"), 
                -1;
            }, ColumnLayoutManager.minColumnWidth = 10, ColumnLayoutManager;
        }(DimensionLayoutManager), DashboardColumnLayoutManager = function(_super) {
            function DashboardColumnLayoutManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(DashboardColumnLayoutManager, _super), DashboardColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                return this.ignoreColumn(headerIndex) ? 0 : this.owner.getCellWidth(void 0);
            }, DashboardColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                return this.owner.getCellWidth(void 0);
            }, DashboardColumnLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                return !1;
            }, DashboardColumnLayoutManager.prototype._calculateSize = function(item) {
                var headerIndex = item.getIndex(this._grid), computedSize = 0;
                return this.ignoreColumn(headerIndex) || (computedSize = this.owner.getContentWidth(void 0)), 
                item.onResize(computedSize), item.onResizeEnd(computedSize), computedSize;
            }, DashboardColumnLayoutManager.prototype.ignoreColumn = function(headerIndex) {
                return 0 === headerIndex && !this.owner.binder.hasRowGroups();
            }, DashboardColumnLayoutManager;
        }(ColumnLayoutManager), CanvasColumnLayoutManager = function(_super) {
            function CanvasColumnLayoutManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(CanvasColumnLayoutManager, _super), CanvasColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                return this.owner.getEstimatedTextWidth(label);
            }, CanvasColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                return this.owner.getEstimatedTextWidth(content);
            }, CanvasColumnLayoutManager.prototype.calculateContextualWidths = function() {
                for (var items = this._getRealizedItems(), columnWidths = [], i = 0, len = items.length; i < len; i++) {
                    var item = items[i];
                    this.measureEnabled && item.setAligningContextualWidth(-1);
                    var queryName = tablixColumnWidthManager.K.getColumnQueryName(item);
                    null != queryName && columnWidths.push({
                        queryName,
                        width: this._calculateSize(item),
                        isFixed: !1
                    });
                }
                this.owner.columnWidthsToPersist = columnWidths;
            }, CanvasColumnLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                return !(0, Double.GG)(this.dimension.scrollOffset, 0, DimensionLayoutManager._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && this._contextualWidthToFill > 0 || (0, 
                Double.aP)(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
            }, CanvasColumnLayoutManager.prototype._calculateSize = function(item) {
                return item.calculateSize();
            }, CanvasColumnLayoutManager;
        }(ColumnLayoutManager), RowLayoutManager = function(_super) {
            function RowLayoutManager(owner, grid, realizationManager) {
                var _this = _super.call(this, owner, grid, realizationManager) || this;
                return realizationManager.owner = _this, _this;
            }
            return (0, tslib_es6.__extends)(RowLayoutManager, _super), Object.defineProperty(RowLayoutManager.prototype, "dimension", {
                get: function() {
                    return this.owner.owner.rowDimension;
                },
                enumerable: !1,
                configurable: !0
            }), RowLayoutManager.prototype.getGridScale = function() {
                return this._grid._presenter.getScreenToCssRatioY();
            }, Object.defineProperty(RowLayoutManager.prototype, "otherScrollbarContextualWidth", {
                get: function() {
                    return this.dimension.otherDimension.scrollbar.visible ? (0, tablixUtils1.Uy)(this.dimension.otherDimension.scrollbar.element) : 0;
                },
                enumerable: !1,
                configurable: !0
            }), RowLayoutManager.prototype.startScrollingSession = function() {
                _super.prototype.startScrollingSession.call(this);
            }, RowLayoutManager.prototype._getRealizedItems = function() {
                return this._grid.realizedRows || (this._grid.realizedRows = []), this._grid.realizedRows;
            }, RowLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {
                this._grid.moveRowsToEnd(moveFromIndex, count);
            }, RowLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {
                this._grid.moveRowsToStart(moveToIndex, count);
            }, RowLayoutManager.prototype._requiresMeasure = function() {
                return !this.isScrolling() && !this.otherLayoutManager.isScrolling() && !this.otherLayoutManager.isResizing() || this.isScrolling() && this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
            }, RowLayoutManager.prototype.getGridContextualWidth = function() {
                return this._grid.getHeight();
            }, RowLayoutManager.prototype.getFirstVisibleRow = function() {
                return this._grid.realizedRows[this._gridOffset];
            }, RowLayoutManager.prototype._isAutoSized = function() {
                return this.owner.owner.autoSizeHeight;
            }, RowLayoutManager.prototype.applyScrolling = function() {
                var rowOffset = this.dimension.getFractionScrollOffset(), firstVisibleRowHeight = 0, firstVisibleRow = this.getFirstVisibleRow();
                firstVisibleRow && (firstVisibleRowHeight = firstVisibleRow.getContextualWidth(), 
                this.scroll(firstVisibleRow, firstVisibleRowHeight, rowOffset));
            }, RowLayoutManager.prototype.scroll = function(firstVisibleRow, height, offset) {
                this.scrollCells(firstVisibleRow._realizedRowHeaders, height, offset), this.scrollCells(firstVisibleRow._realizedBodyCells, height, offset);
            }, RowLayoutManager.prototype.scrollCells = function(cells, height, offset) {
                for (var length = cells.length, i = 0; i < length; i++) cells[i].scrollVertically(height, offset);
            }, RowLayoutManager.prototype.getFooterContextualWidth = function() {
                return this.owner.owner.rowDimension.hasFooter() && this.owner.grid.footerRow ? this.owner.grid.footerRow.getContextualWidth() : 0;
            }, RowLayoutManager.prototype.calculateContextualWidths = function() {
                if (_super.prototype.calculateContextualWidths.call(this), this.fixedSizeEnabled) {
                    var footerRow = this._grid.footerRow;
                    footerRow && this._calculateSize(footerRow);
                }
            }, RowLayoutManager.prototype.fixSizes = function() {
                _super.prototype.fixSizes.call(this), this.fixedSizeEnabled && this._grid.footerRow && this._grid.footerRow.fixSize();
            }, RowLayoutManager.prototype._sendDimensionsToControl = function() {
                var gridContextualWidth = this.getGridContextualWidth(), widthToFill = this.getActualContextualWidth(gridContextualWidth), otherContextualHeight = this.getOtherHierarchyContextualHeight(), scale = this.getGridScale();
                this.owner.owner.updateRowDimensions(otherContextualHeight / scale, (widthToFill - otherContextualHeight) / scale, gridContextualWidth / scale, this.getViewSize(gridContextualWidth), this._grid.footerRow ? this._grid.footerRow.getContextualWidth() / scale : 0);
            }, RowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                return debug.fF.assertFail("PureVirtualMethod: RowLayoutManager.getEstimatedHeaderWidth"), 
                -1;
            }, RowLayoutManager;
        }(DimensionLayoutManager), DashboardRowLayoutManager = function(_super) {
            function DashboardRowLayoutManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(DashboardRowLayoutManager, _super), DashboardRowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                return this.getHeaderWidth(headerIndex);
            }, DashboardRowLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                return !1;
            }, DashboardRowLayoutManager.prototype._calculateSize = function(item) {
                return item.calculateSize();
            }, DashboardRowLayoutManager.prototype.getHeaderWidth = function(headerIndex) {
                return 0 !== headerIndex || this.owner.binder.hasRowGroups() ? this.owner.getEstimatedTextWidth(void 0) : 0;
            }, DashboardRowLayoutManager;
        }(RowLayoutManager), CanvasRowLayoutManager = function(_super) {
            function CanvasRowLayoutManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(CanvasRowLayoutManager, _super), CanvasRowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                return this.owner.getEstimatedTextWidth(label);
            }, CanvasRowLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                return !(0, Double.GG)(this.dimension.scrollOffset, 0, DimensionLayoutManager._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && this._contextualWidthToFill > 0 || (0, 
                Double.aP)(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
            }, CanvasRowLayoutManager.prototype._calculateSize = function(item) {
                return item.calculateSize();
            }, CanvasRowLayoutManager;
        }(RowLayoutManager), TablixLayoutManager = function() {
            function TablixLayoutManager(binder, grid, columnLayoutManager, rowLayoutManager) {
                this._allowHeaderResize = !0, this._binder = binder, this._grid = grid, this._columnLayoutManager = columnLayoutManager, 
                this._rowLayoutManager = rowLayoutManager, this._columnWidthsToPersist = [];
            }
            return TablixLayoutManager.prototype.initialize = function(owner) {
                this._owner = owner, this._container = owner.container, this._gridHost = owner.contentHost, 
                this._footersHost = owner.footerHost, this._grid.initialize(owner, this._gridHost, this._footersHost);
            }, Object.defineProperty(TablixLayoutManager.prototype, "owner", {
                get: function() {
                    return this._owner;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixLayoutManager.prototype, "binder", {
                get: function() {
                    return this._binder;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixLayoutManager.prototype, "columnWidthsToPersist", {
                get: function() {
                    return this._columnWidthsToPersist;
                },
                set: function(columnWidths) {
                    this._columnWidthsToPersist = columnWidths;
                },
                enumerable: !1,
                configurable: !0
            }), TablixLayoutManager.prototype.getTablixClassName = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getTablixClassName"), 
                null;
            }, TablixLayoutManager.prototype.getLayoutKind = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getLayoutKind"), 
                null;
            }, TablixLayoutManager.prototype.getOrCreateColumnHeader = function(item, items, rowIndex, columnIndex) {
                var hierarchyNav = this.owner.hierarchyNavigator, row = this._grid.getOrCreateRow(rowIndex), column = this._grid.getOrCreateColumn(columnIndex + this._columnLayoutManager._gridOffset), isLeaf = hierarchyNav.isLeaf(item), cell = row.getOrCreateColumnHeader(column, this._columnLayoutManager.isScrollableHeader(item, items, columnIndex), isLeaf), rowIdx = hierarchyNav.getLevel(item);
                cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = 0 === rowIdx, 
                cell.position.row.isLast = isLeaf;
                var colIdx = hierarchyNav.getIndex(item);
                return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                cell.position.column.isFirst = hierarchyNav.areAllParentsFirst(item, items), cell.position.column.isLast = hierarchyNav.areAllParentsLast(item, items), 
                this.enableCellHorizontalResize(isLeaf, cell), cell;
            }, TablixLayoutManager.prototype.getOrCreateRowHeader = function(item, items, rowIndex, columnIndex) {
                var hierarchyNav = this.owner.hierarchyNavigator, row = this._grid.getOrCreateRow(rowIndex + this._rowLayoutManager._gridOffset), column = this._grid.getOrCreateColumn(columnIndex), isLeaf = hierarchyNav.isLeaf(item), scrollable = this._rowLayoutManager.isScrollableHeader(item, items, rowIndex);
                0 === row.getRealizedCellCount() && this.alignRowHeaderCells(item, row);
                var cell = row.getOrCreateRowHeader(column, scrollable, hierarchyNav.isLeaf(item)), rowIdx = hierarchyNav.getIndex(item);
                cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = hierarchyNav.areAllParentsFirst(item, items), 
                cell.position.row.isLast = hierarchyNav.areAllParentsLast(item, items);
                var colIdx = hierarchyNav.getLevel(item);
                return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                cell.position.column.isFirst = 0 === colIdx, cell.position.column.isLast = isLeaf, 
                cell.enableHorizontalResize(!1, this._columnLayoutManager), cell;
            }, TablixLayoutManager.prototype.getOrCreateCornerCell = function(item, rowLevel, columnLevel) {
                var row = this._grid.getOrCreateRow(columnLevel), column = this._grid.getOrCreateColumn(rowLevel), isLeaf = columnLevel === this._columnLayoutManager.dimension.getDepth() - 1, cell = row.getOrCreateCornerCell(column), rowIdx = columnLevel;
                cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = 0 === rowIdx, 
                cell.position.row.isLast = isLeaf;
                var colIdx = rowLevel;
                return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                cell.position.column.isFirst = 0 === colIdx, cell.position.column.isLast = colIdx === this._rowLayoutManager.dimension.getDepth() - 1, 
                this.enableCellHorizontalResize(isLeaf, cell), cell;
            }, TablixLayoutManager.prototype.getOrCreateBodyCell = function(cellItem, rowItem, rowItems, rowIndex, columnIndex) {
                var scrollable, row = this._grid.getOrCreateRow(rowIndex + this._rowLayoutManager._gridOffset), column = this._grid.getOrCreateColumn(columnIndex + this._columnLayoutManager._gridOffset);
                scrollable = 0 === row._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset() || this._rowLayoutManager.isScrollableHeader(rowItem, rowItems, rowIndex);
                var cell = row.getOrCreateBodyCell(column, scrollable);
                return cell.position = cellItem.position, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                cell;
            }, TablixLayoutManager.prototype.getOrCreateFooterBodyCell = function(cellItem, columnIndex) {
                var scrollable, row = this._grid.getOrCreateFootersRow(), column = this._grid.getOrCreateColumn(columnIndex + this._columnLayoutManager._gridOffset);
                scrollable = 0 === row._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset();
                var cell = row.getOrCreateFooterBodyCell(column, scrollable);
                return cell.position = cellItem.position, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                cell;
            }, TablixLayoutManager.prototype.getOrCreateFooterRowHeader = function(item, items) {
                var row = this._grid.getOrCreateFootersRow(), column = this._grid.getOrCreateColumn(0), cell = row.getOrCreateFooterRowHeader(column);
                return cell.position = void 0, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                cell;
            }, TablixLayoutManager.prototype.getVisibleWidth = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getVisibleWidth"), 
                -1;
            }, TablixLayoutManager.prototype.getVisibleHeight = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getVisibleHeight"), 
                -1;
            }, TablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {
                debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.updateColumnCount");
            }, TablixLayoutManager.prototype.updateViewport = function(viewport) {
                debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.updateViewport");
            }, TablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getEstimatedRowHeight"), 
                -1;
            }, TablixLayoutManager.prototype.getCellWidth = function(cell) {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getCellWidth"), 
                -1;
            }, TablixLayoutManager.prototype.getContentWidth = function(cell) {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getContentWidth"), 
                -1;
            }, TablixLayoutManager.prototype.adjustContentSize = function(hasImage) {}, TablixLayoutManager.prototype.alignRowHeaderCells = function(item, currentRow) {
                var index = currentRow.getRowHeaderLeafIndex();
                if (-1 !== index) {
                    var leaf = this._owner.rowDimension.getFirstVisibleChildLeaf(item);
                    this.owner.hierarchyNavigator.headerItemEquals(leaf, currentRow.getAllocatedCellAt(index).item) && currentRow.moveCellsBy(this.owner.hierarchyNavigator.getLevel(leaf) - this.owner.hierarchyNavigator.getLevel(item) - index);
                }
            }, Object.defineProperty(TablixLayoutManager.prototype, "grid", {
                get: function() {
                    return this._grid;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixLayoutManager.prototype, "rowLayoutManager", {
                get: function() {
                    return this._rowLayoutManager;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixLayoutManager.prototype, "columnLayoutManager", {
                get: function() {
                    return this._columnLayoutManager;
                },
                enumerable: !1,
                configurable: !0
            }), TablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.showEmptySpaceHeader"), 
                !1;
            }, TablixLayoutManager.prototype.onStartRenderingSession = function(scrollingDimension, parentElement, clear) {
                if (this.showEmptySpaceHeader()) {
                    var cell = this._grid.emptySpaceHeaderCell;
                    cell && this._binder.unbindEmptySpaceHeaderCell(cell), (cell = this._grid.emptySpaceFooterCell) && this._binder.unbindEmptySpaceFooterCell(cell), 
                    this._grid.HideEmptySpaceCells();
                }
                this._scrollingDimension = scrollingDimension, this._scrollingDimension && this._scrollingDimension.layoutManager.startScrollingSession(), 
                this._rowLayoutManager.onStartRenderingSession(), this._columnLayoutManager.onStartRenderingSession(), 
                this._grid.onStartRenderingSession(clear), (this._columnLayoutManager.measureEnabled || this._rowLayoutManager.measureEnabled) && this.measureSampleText(parentElement);
            }, TablixLayoutManager.prototype.onEndRenderingSession = function() {
                if (this._rowLayoutManager.onEndRenderingSession(), this._columnLayoutManager.onEndRenderingSession(), 
                this._scrollingDimension && this._scrollingDimension.layoutManager.endScrollingSession(), 
                this._scrollingDimension = null, this.showEmptySpaceHeader()) {
                    var emptySpace = this._columnLayoutManager.contextualWidthToFill - this._columnLayoutManager.getGridContextualWidth();
                    if (emptySpace > 0) {
                        this._grid.ShowEmptySpaceCells(this._owner.columnDimension.getDepth(), emptySpace);
                        var cell = this._grid.emptySpaceHeaderCell;
                        cell && this._binder.bindEmptySpaceHeaderCell(cell), (cell = this._grid.emptySpaceFooterCell) && this._binder.bindEmptySpaceFooterCell(cell);
                    }
                }
            }, TablixLayoutManager.prototype.onStartRenderingIteration = function(clear) {
                this._rowLayoutManager.onStartRenderingIteration(clear, this.getVisibleHeight()), 
                this._columnLayoutManager.onStartRenderingIteration(clear, this.getVisibleWidth()), 
                this._grid.onStartRenderingIteration();
            }, TablixLayoutManager.prototype.onEndRenderingIteration = function() {
                return this._grid.onEndRenderingIteration(), this._columnLayoutManager.calculateSizes(), 
                this._rowLayoutManager.calculateSizes(), this._columnLayoutManager.fixSizes(), this._rowLayoutManager.fixSizes(), 
                this._columnLayoutManager.updateItemToResizeState(this._grid.realizedColumns), this._columnLayoutManager.applyScrolling(), 
                this._rowLayoutManager.applyScrolling(), this._columnLayoutManager.onEndRenderingIteration(), 
                this._rowLayoutManager.onEndRenderingIteration(), this._columnLayoutManager.done && this._rowLayoutManager.done;
            }, TablixLayoutManager.prototype.onCornerCellRealized = function(item, cell) {
                var columnLeaf = this.owner.hierarchyNavigator.isColumnHierarchyLeaf(item), rowLeaf = this.owner.hierarchyNavigator.isRowHierarchyLeaf(item);
                columnLeaf && cell._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onCornerCellRealized(item, cell, columnLeaf), 
                this._rowLayoutManager.onCornerCellRealized(item, cell, rowLeaf);
            }, TablixLayoutManager.prototype.onRowHeaderRealized = function(item, cell) {
                var leaf = this._owner.hierarchyNavigator.isLeaf(item);
                cell.colSpan > 1 && cell.setContainerWidth(-1), this._rowLayoutManager.onHeaderRealized(item, cell, leaf);
            }, TablixLayoutManager.prototype.onRowHeaderFooterRealized = function(item, cell) {}, 
            TablixLayoutManager.prototype.onColumnHeaderRealized = function(item, cell) {
                var leaf = this._owner.hierarchyNavigator.isLeaf(item);
                leaf && cell._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onHeaderRealized(item, cell, leaf);
            }, TablixLayoutManager.prototype.onBodyCellRealized = function(item, cell) {}, TablixLayoutManager.prototype.onBodyCellFooterRealized = function(item, cell) {}, 
            TablixLayoutManager.prototype.setAllowHeaderResize = function(value) {
                this._allowHeaderResize = value;
            }, TablixLayoutManager.prototype.enableCellHorizontalResize = function(isLeaf, cell) {
                cell.enableHorizontalResize(isLeaf && this._allowHeaderResize, this._columnLayoutManager);
            }, TablixLayoutManager.prototype.getEstimatedTextWidth = function(label) {
                return debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.getEstimatedTextWidth"), 
                -1;
            }, TablixLayoutManager.prototype.measureSampleText = function(parentElement) {
                debug.fF.assertFail("PureVirtualMethod: TablixLayoutManager.measureSampleText");
            }, TablixLayoutManager;
        }(), DashboardTablixLayoutManager = function(_super) {
            function DashboardTablixLayoutManager(binder, sizeComputationManager, grid, rowRealizationManager, columnRealizationManager) {
                var _this = this, dashboardColumnLayoutManager = new DashboardColumnLayoutManager(null, grid, columnRealizationManager), dashboardRowLayoutManager = new DashboardRowLayoutManager(null, grid, rowRealizationManager);
                return _this = _super.call(this, binder, grid, dashboardColumnLayoutManager, dashboardRowLayoutManager) || this, 
                dashboardColumnLayoutManager.owner = _this, dashboardRowLayoutManager.owner = _this, 
                _this._sizeComputationManager = sizeComputationManager, _this;
            }
            return (0, tslib_es6.__extends)(DashboardTablixLayoutManager, _super), DashboardTablixLayoutManager.createLayoutManager = function(binder) {
                var sizeComputationManager = new SizeComputationManager;
                return new DashboardTablixLayoutManager(binder, sizeComputationManager, new TablixGrid(new DashboardTablixGridPresenter(sizeComputationManager)), new RowRealizationManager(binder), new ColumnRealizationManager(binder));
            }, DashboardTablixLayoutManager.prototype.getTablixClassName = function() {
                return "tablixDashboard";
            }, DashboardTablixLayoutManager.prototype.getLayoutKind = function() {
                return 1;
            }, DashboardTablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                return !1;
            }, DashboardTablixLayoutManager.prototype.measureSampleText = function(parentElement) {
                var textProperties = textMeasurementService.b.getSvgMeasurementProperties(parentElement);
                this._characterHeight = textMeasurementService.b.estimateSvgTextHeight(textProperties), 
                this._sizeComputationManager.updateRowHeight(this._characterHeight);
                var actualTextSize = StandaloneUtility1.FP.toPoint(parseFloat(textProperties.fontSize));
                this._sizeComputationManager.updateScalingFactor((0, Double.GW)(actualTextSize / tablixControl.L, .05));
            }, DashboardTablixLayoutManager.prototype.getVisibleWidth = function() {
                return this._sizeComputationManager.visibleWidth;
            }, DashboardTablixLayoutManager.prototype.getVisibleHeight = function() {
                return this._sizeComputationManager.visibleHeight;
            }, DashboardTablixLayoutManager.prototype.getCellWidth = function(cell) {
                return this._sizeComputationManager.cellWidth;
            }, DashboardTablixLayoutManager.prototype.getContentWidth = function(cell) {
                return this._sizeComputationManager.contentWidth;
            }, DashboardTablixLayoutManager.prototype.getEstimatedTextWidth = function(label) {
                return this._sizeComputationManager.contentWidth;
            }, DashboardTablixLayoutManager.prototype.adjustContentSize = function(hasImage) {
                this._sizeComputationManager.hasImageContent = hasImage;
            }, DashboardTablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {
                var totalColumnCount = (rowDimension ? rowDimension.getDepth() : 0) + (columnDimension ? columnDimension.getItemsCount() : 0);
                this.binder.hasRowGroups() || totalColumnCount--, this._sizeComputationManager.updateColumnCount(totalColumnCount);
            }, DashboardTablixLayoutManager.prototype.updateViewport = function(viewport) {
                this._sizeComputationManager.updateViewport(viewport);
            }, DashboardTablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                return this._characterHeight;
            }, DashboardTablixLayoutManager;
        }(TablixLayoutManager), CanvasTablixLayoutManager = function(_super) {
            function CanvasTablixLayoutManager(binder, grid, rowRealizationManager, columnRealizationManager) {
                var _this, canvasColumnLayoutManager = new CanvasColumnLayoutManager(null, grid, columnRealizationManager), canvasRowLayoutManager = new CanvasRowLayoutManager(null, grid, rowRealizationManager);
                return _this = _super.call(this, binder, grid, canvasColumnLayoutManager, canvasRowLayoutManager) || this, 
                canvasColumnLayoutManager.owner = _this, canvasRowLayoutManager.owner = _this, _this;
            }
            return (0, tslib_es6.__extends)(CanvasTablixLayoutManager, _super), CanvasTablixLayoutManager.createLayoutManager = function(binder, columnWidthManager) {
                return new CanvasTablixLayoutManager(binder, new TablixGrid(new CanvasTablixGridPresenter(columnWidthManager)), new RowRealizationManager(binder), new ColumnRealizationManager(binder));
            }, CanvasTablixLayoutManager.prototype.getTablixClassName = function() {
                return "tablixCanvas";
            }, CanvasTablixLayoutManager.prototype.getLayoutKind = function() {
                return 0;
            }, CanvasTablixLayoutManager.prototype.measureSampleText = function(parentElement) {
                var textDiv = (0, tablixUtils1.wC)();
                textDiv.style.cssFloat = "left", textDiv.style.whiteSpace = "nowrap", textDiv.style.overflow = "hidden", 
                textDiv.style.lineHeight = "normal", parentElement.appendChild(textDiv);
                var textNode = document.createTextNode("a");
                textDiv.appendChild(textNode), this.characterWidth = (0, tablixUtils1.mx)(textDiv), 
                this.characterHeight = (0, tablixUtils1.Uy)(textDiv), textDiv.removeChild(textNode), 
                parentElement.removeChild(textDiv);
            }, CanvasTablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                return !this._columnLayoutManager.fillProportionally;
            }, CanvasTablixLayoutManager.prototype.getVisibleWidth = function() {
                return this._columnLayoutManager.measureEnabled ? this._owner.autoSizeWidth && this._owner.maxWidth ? this._owner.maxWidth : (0, 
                tablixUtils1.mx)(this._container) : -1;
            }, CanvasTablixLayoutManager.prototype.getVisibleHeight = function() {
                return this._rowLayoutManager.measureEnabled ? this._owner.autoSizeHeight && this._owner.maxHeight ? this._owner.maxHeight : (0, 
                tablixUtils1.Uy)(this._container) : -1;
            }, CanvasTablixLayoutManager.prototype.getCellWidth = function(cell) {
                return cell.containerWidth;
            }, CanvasTablixLayoutManager.prototype.getContentWidth = function(cell) {
                return cell.contentWidth;
            }, CanvasTablixLayoutManager.prototype.getEstimatedTextWidth = function(text) {
                return text ? text.length * this.characterWidth : 0;
            }, CanvasTablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {}, 
            CanvasTablixLayoutManager.prototype.updateViewport = function(viewport) {}, CanvasTablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                return this.characterHeight;
            }, CanvasTablixLayoutManager;
        }(TablixLayoutManager), TablixDimensionRealizationManager = function() {
            function TablixDimensionRealizationManager(binder) {
                this._binder = binder, this._adjustmentFactor = 1;
            }
            return TablixDimensionRealizationManager.prototype._getOwner = function() {
                return debug.fF.assertFail("PureVirtualMethod: DimensionLayoutManager.getOwner"), 
                null;
            }, Object.defineProperty(TablixDimensionRealizationManager.prototype, "binder", {
                get: function() {
                    return this._binder;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "adjustmentFactor", {
                get: function() {
                    return this._adjustmentFactor;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "itemsToRealizeCount", {
                get: function() {
                    return this._itemsToRealizeCount;
                },
                set: function(count) {
                    this._itemsToRealizeCount = count;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "itemsEstimatedContextualWidth", {
                get: function() {
                    return this._itemsEstimatedContextualWidth;
                },
                set: function(contextualWidth) {
                    this._itemsEstimatedContextualWidth = contextualWidth;
                },
                enumerable: !1,
                configurable: !0
            }), TablixDimensionRealizationManager.prototype.onStartRenderingIteration = function() {
                var owner = this._getOwner();
                owner.measureEnabled && !owner.done && this._getEstimatedItemsToRealizeCount(), 
                this._realizedLeavesCount = 0;
            }, TablixDimensionRealizationManager.prototype.onEndRenderingIteration = function(gridContextualWidth, filled) {
                filled || this._getOwner().allItemsRealized || (this._adjustmentFactor *= this._getSizeAdjustment(gridContextualWidth));
            }, TablixDimensionRealizationManager.prototype.onEndRenderingSession = function() {
                this._adjustmentFactor = 1;
            }, TablixDimensionRealizationManager.prototype.onCornerCellRealized = function(item, cell) {}, 
            TablixDimensionRealizationManager.prototype.onHeaderRealized = function(item, cell, leaf) {
                leaf && this._realizedLeavesCount++;
            }, Object.defineProperty(TablixDimensionRealizationManager.prototype, "needsToRealize", {
                get: function() {
                    return this._realizedLeavesCount < this._itemsToRealizeCount;
                },
                enumerable: !1,
                configurable: !0
            }), TablixDimensionRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {
                debug.fF.assertFail("PureVirtualMethod: TablixDimensionRealizationManager._calculateItemsToRealize");
            }, TablixDimensionRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                return debug.fF.assertFail("PureVirtualMethod: TablixDimensionRealizationManager._getSizeAdjustment"), 
                1;
            }, TablixDimensionRealizationManager;
        }(), RowRealizationManager = function(_super) {
            function RowRealizationManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(RowRealizationManager, _super), Object.defineProperty(RowRealizationManager.prototype, "owner", {
                set: function(owner) {
                    this._owner = owner;
                },
                enumerable: !1,
                configurable: !0
            }), RowRealizationManager.prototype._getOwner = function() {
                return this._owner;
            }, RowRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {
                this.estimateRowsToRealizeCount();
            }, RowRealizationManager.prototype.estimateRowsToRealizeCount = function() {
                debug.fF.assertValue(this._owner, "_owner"), this.itemsToRealizeCount = this._owner.dimension.model ? this._owner.alignToEnd ? this._owner.dimension.getItemsCount() - this._owner.dimension.getIntegerScrollOffset() + 1 : Math.ceil(this._owner.contextualWidthToFill / (this._owner.owner.getEstimatedRowHeight() * this.adjustmentFactor) + this._owner.dimension.getFractionScrollOffset()) - this._owner.otherLayoutManager.dimension.getDepth() + 1 : 0;
            }, RowRealizationManager.prototype.getEstimatedRowHierarchyWidth = function() {
                if (!this._owner.dimension.model || 0 === this._owner.dimension.getItemsCount()) return 0;
                var levels = new RowWidths;
                this.updateRowHiearchyEstimatedWidth(this._owner.dimension.model, this._owner.dimension._hierarchyNavigator.getIndex(this._owner.dimension.getFirstVisibleItem(0)), levels);
                for (var levelsArray = levels.items, levelCount = levelsArray.length, width = 0, i = 0; i < levelCount; i++) {
                    var level = levelsArray[i];
                    width += 0 !== level.maxNonLeafWidth ? level.maxNonLeafWidth : level.maxLeafWidth;
                }
                return width;
            }, RowRealizationManager.prototype.updateRowHiearchyEstimatedWidth = function(items, firstVisibleIndex, levels) {
                if (!(firstVisibleIndex < 0)) for (var hierarchyNavigator = this._owner.owner.owner.hierarchyNavigator, binder = this.binder, length = hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < length; i++) {
                    if (levels.leafCount === this.itemsToRealizeCount) return;
                    var item = hierarchyNavigator.getAt(items, i), label = binder.getHeaderLabel(item), itemWidth = this._owner.getEstimatedHeaderWidth(label, firstVisibleIndex), isLeaf = hierarchyNavigator.isLeaf(item), l = hierarchyNavigator.getLevel(item), level = levels.items[l];
                    level || (level = new RowWidth, levels.items[l] = level), isLeaf ? (level.maxLeafWidth = Math.max(level.maxLeafWidth, itemWidth), 
                    levels.leafCount = levels.leafCount + 1) : (level.maxNonLeafWidth = Math.max(level.maxNonLeafWidth, itemWidth), 
                    this.updateRowHiearchyEstimatedWidth(hierarchyNavigator.getChildren(item), this._owner.dimension.getFirstVisibleChildIndex(item), levels));
                }
            }, RowRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                return gridContextualWidth / ((this._owner.getRealizedItemsCount() - this._owner.dimension.getFractionScrollOffset()) * this._owner.owner.getEstimatedRowHeight());
            }, RowRealizationManager;
        }(TablixDimensionRealizationManager), ColumnRealizationManager = function(_super) {
            function ColumnRealizationManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(ColumnRealizationManager, _super), Object.defineProperty(ColumnRealizationManager.prototype, "owner", {
                set: function(owner) {
                    this._owner = owner;
                },
                enumerable: !1,
                configurable: !0
            }), ColumnRealizationManager.prototype._getOwner = function() {
                return this._owner;
            }, ColumnRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {
                this.estimateColumnsToRealizeCount(this.getEstimatedRowHierarchyWidth());
            }, Object.defineProperty(ColumnRealizationManager.prototype, "rowRealizationManager", {
                get: function() {
                    return this._owner.otherLayoutManager.realizationManager;
                },
                enumerable: !1,
                configurable: !0
            }), ColumnRealizationManager.prototype.getEstimatedRowHierarchyWidth = function() {
                return this._owner.otherLayoutManager.done ? this._owner.getOtherHierarchyContextualHeight() : this.rowRealizationManager.getEstimatedRowHierarchyWidth() * this.adjustmentFactor;
            }, ColumnRealizationManager.prototype.estimateColumnsToRealizeCount = function(rowHierarchyWidth) {
                var widthToFill = this._owner.contextualWidthToFill - rowHierarchyWidth;
                if (this._owner.dimension.model && !(0, Double.bl)(widthToFill, 0, DimensionLayoutManager._pixelPrecision)) {
                    var binder = this.binder, hierarchyNavigator = this._owner.owner.owner.hierarchyNavigator, startColumnIndex = this._owner.dimension.getIntegerScrollOffset(), endColumnIndex = this._owner.dimension.getItemsCount(), columnCount = endColumnIndex - startColumnIndex, startRowIndex = this._owner.otherLayoutManager.dimension.getIntegerScrollOffset(), endRowIndex = this._owner.otherLayoutManager.dimension.getItemsCount();
                    if (this.itemsEstimatedContextualWidth = 0, this._owner.alignToEnd) this.itemsToRealizeCount = columnCount; else {
                        for (var i = startColumnIndex; i < endColumnIndex; i++) {
                            if ((0, Double.bA)(this.itemsEstimatedContextualWidth, widthToFill, DimensionLayoutManager._pixelPrecision)) return void (this.itemsToRealizeCount = i - startColumnIndex);
                            var visibleSizeRatio, maxWidth = 0;
                            visibleSizeRatio = i === startColumnIndex ? this._owner.getVisibleSizeRatio() : 1;
                            var columnMember = hierarchyNavigator.getLeafAt(this._owner.dimension.model, i), label = binder.getHeaderLabel(columnMember);
                            maxWidth = Math.max(maxWidth, this._owner.getEstimatedHeaderWidth(label, i));
                            for (var j = startRowIndex; j < endRowIndex; j++) {
                                var intersection = hierarchyNavigator.getIntersection(hierarchyNavigator.getLeafAt(this._owner.otherLayoutManager.dimension.model, j), columnMember);
                                label = binder.getCellContent(intersection), maxWidth = Math.max(maxWidth, this._owner.getEstimatedBodyCellWidth(label));
                            }
                            this.itemsEstimatedContextualWidth += maxWidth * visibleSizeRatio * this.adjustmentFactor;
                        }
                        this.itemsToRealizeCount = columnCount;
                    }
                } else this.itemsToRealizeCount = 0;
            }, ColumnRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                return gridContextualWidth / (this.getEstimatedRowHierarchyWidth() + this.itemsEstimatedContextualWidth);
            }, ColumnRealizationManager;
        }(TablixDimensionRealizationManager), RowWidths = function() {
            return function() {
                this.items = [], this.leafCount = 0;
            };
        }(), RowWidth = function() {
            return function() {
                this.maxLeafWidth = 0, this.maxNonLeafWidth = 0;
            };
        }();
    },
    42737: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            A: function() {
                return TablixResizer;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), TablixResizer = function() {
            function TablixResizer(element, handler) {
                this._element = element, this._handler = handler, this._elementMouseDownWrapper = null, 
                this._elementMouseMoveWrapper = null, this._elementMouseOutWrapper = null, this._documentMouseMoveWrapper = null, 
                this._documentMouseUpWrapper = null, this._startMousePosition = null, this._originalCursor = null;
            }
            return TablixResizer.addDocumentMouseUpEvent = function(listener) {
                document.addEventListener("mouseup", listener);
            }, TablixResizer.removeDocumentMouseUpEvent = function(listener) {
                document.removeEventListener("mouseup", listener);
            }, TablixResizer.addDocumentMouseMoveEvent = function(listener) {
                document.addEventListener("mousemove", listener);
            }, TablixResizer.removeDocumentMouseMoveEvent = function(listener) {
                document.removeEventListener("mousemove", listener);
            }, TablixResizer.getMouseCoordinates = function(event) {
                return {
                    x: event.pageX,
                    y: event.pageY
                };
            }, TablixResizer.getMouseCoordinateDelta = function(previous, current) {
                return {
                    x: current.x - previous.x,
                    y: current.y - previous.y
                };
            }, TablixResizer.prototype.initialize = function() {
                var _this = this;
                this._elementMouseDownWrapper = function(e) {
                    return _this.onElementMouseDown(e);
                }, this._element.addEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseMoveWrapper = function(e) {
                    return _this.onElementMouseMove(e);
                }, this._element.addEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseOutWrapper = function(e) {
                    return _this.onElementMouseOut(e);
                }, this._element.addEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseDoubleClickOutWrapper = function(e) {
                    return _this.onElementMouseDoubleClick(e);
                }, this._element.addEventListener("dblclick", this._elementMouseDoubleClickOutWrapper);
            }, TablixResizer.prototype.uninitialize = function() {
                this._element.removeEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseDownWrapper = null, 
                this._element.removeEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseMoveWrapper = null, 
                this._element.removeEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseOutWrapper = null, 
                this._element.removeEventListener("dblclick", this._elementMouseDoubleClickOutWrapper), 
                this._elementMouseDoubleClickOutWrapper = null;
            }, Object.defineProperty(TablixResizer.prototype, "cell", {
                get: function() {
                    return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("PureVirtualMethod: TablixResizer.cell"), 
                    null;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixResizer.prototype, "element", {
                get: function() {
                    return this._element;
                },
                enumerable: !1,
                configurable: !0
            }), TablixResizer.prototype._hotSpot = function(position) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("PureVirtualMethod: TablixResizer._hotSpot"), 
                !1;
            }, TablixResizer.prototype.onElementMouseDown = function(event) {
                var _this = this, position = TablixResizer.getMouseCoordinates(event);
                this._hotSpot(position) && (event.cancelBubble = !0, this._startMousePosition = position, 
                this._documentMouseMoveWrapper = function(e) {
                    return _this.onDocumentMouseMove(e);
                }, TablixResizer.addDocumentMouseMoveEvent(this._documentMouseMoveWrapper), this._documentMouseUpWrapper = function(e) {
                    return _this.onDocumentMouseUp(e);
                }, TablixResizer.addDocumentMouseUpEvent(this._documentMouseUpWrapper), document.documentElement && (this._originalCursor = document.documentElement.style.cursor, 
                document.documentElement.style.cursor = TablixResizer.resizeCursor), this._handler.onStartResize(this.cell, this._startMousePosition.x, this._startMousePosition.y));
            }, TablixResizer.prototype.onElementMouseMove = function(event) {
                this._startMousePosition || (this._hotSpot(TablixResizer.getMouseCoordinates(event)) ? null === this._originalCursor && (this._originalCursor = this._element.style.cursor, 
                this._element.style.cursor = TablixResizer.resizeCursor) : null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                this._originalCursor = null));
            }, TablixResizer.prototype.onElementMouseOut = function(event) {
                this._startMousePosition || null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                this._originalCursor = null);
            }, TablixResizer.prototype.onElementMouseDoubleClick = function(event) {
                this._hotSpot(TablixResizer.getMouseCoordinates(event)) && this._handler.onReset(this.cell);
            }, TablixResizer.prototype.onDocumentMouseMove = function(event) {
                if (this._startMousePosition) {
                    var delta = TablixResizer.getMouseCoordinateDelta(this._startMousePosition, TablixResizer.getMouseCoordinates(event));
                    this._handler.onResize(this.cell, delta.x, delta.y), event.preventDefault();
                }
            }, TablixResizer.prototype.onDocumentMouseUp = function(event) {
                this._startMousePosition = null, TablixResizer.removeDocumentMouseMoveEvent(this._documentMouseMoveWrapper), 
                this._documentMouseMoveWrapper = null, TablixResizer.removeDocumentMouseUpEvent(this._documentMouseUpWrapper), 
                this._documentMouseUpWrapper = null, document.documentElement && (document.documentElement.style.cursor = this._originalCursor), 
                event.preventDefault && event.preventDefault(), this._handler.onEndResize(this.cell);
            }, TablixResizer.resizeHandleSize = 4, TablixResizer.resizeCursor = "e-resize", 
            TablixResizer;
        }();
    },
    93340: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            AB: function() {
                return setCellText;
            },
            Av: function() {
                return getCustomSortEventArgs;
            },
            Ch: function() {
                return appendDiv;
            },
            D4: function() {
                return clearChildren;
            },
            D6: function() {
                return addSortIconToColumnHeader;
            },
            DM: function() {
                return setCellTextAndTooltip;
            },
            FX: function() {
                return setElementTop;
            },
            G9: function() {
                return clearCellStyle;
            },
            Hd: function() {
                return getAriaRowIndex;
            },
            Hx: function() {
                return appendImgTagToBodyCell;
            },
            Iw: function() {
                return setElementHeight;
            },
            MN: function() {
                return getUrlScheme;
            },
            Or: function() {
                return isImage;
            },
            Pb: function() {
                return EdgeType;
            },
            Py: function() {
                return setElementWidth;
            },
            R5: function() {
                return addCellCssClass;
            },
            RP: function() {
                return getUrlIconName;
            },
            Uy: function() {
                return getElementHeight;
            },
            W_: function() {
                return createTable;
            },
            Y1: function() {
                return isValidStatusGraphic;
            },
            Y4: function() {
                return removeSortIcons;
            },
            aP: function() {
                return clearCellTextAndTooltip;
            },
            df: function() {
                return getAccumulatedScale;
            },
            ey: function() {
                return resetCellCssClass;
            },
            hn: function() {
                return setElementLeft;
            },
            jG: function() {
                return TablixVisualCell;
            },
            jT: function() {
                return getAriaColIndex;
            },
            mx: function() {
                return getElementWidth;
            },
            om: function() {
                return EdgeSettings;
            },
            pW: function() {
                return convertValueToString;
            },
            qZ: function() {
                return CellStyle;
            },
            ri: function() {
                return CellPosition;
            },
            ut: function() {
                return getRelativeMouseCoordinates;
            },
            v4: function() {
                return setCellTooltip;
            },
            vU: function() {
                return appendATagToBodyCell;
            },
            wC: function() {
                return createDiv;
            },
            wX: function() {
                return isValidImage;
            },
            x7: function() {
                return reverseSort;
            },
            xl: function() {
                return isValidSortClick;
            }
        });
        var _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54522), _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(91358), _Visuals_common_textUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44977), _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(38308), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(62458), _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(6444), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64329), _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48066), _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(28326), _tablixResizer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(42737), _tablixConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71090);
        function clearChildren(element) {
            if (element) for (;element.hasChildNodes(); ) element.removeChild(element.firstChild);
        }
        function setElementTop(element, top) {
            element.style.top = top + "px";
        }
        function setElementLeft(element, left) {
            element.style.left = left + "px";
        }
        function setElementHeight(element, height) {
            element.style.height = isAutoSize(height) ? "" : height + "px";
        }
        function setElementWidth(element, width) {
            element.style.width = isAutoSize(width) ? "" : width + "px";
        }
        function getElementWidth(element) {
            return element.offsetWidth;
        }
        function getElementHeight(element) {
            return element.offsetHeight;
        }
        function isAutoSize(size) {
            return -1 === size;
        }
        function getAccumulatedScale(element) {
            var actualWidth = element.offsetWidth;
            return 0 === actualWidth ? 1 : element.getBoundingClientRect().width / actualWidth;
        }
        function getRelativeMouseCoordinates(element, mouseEvent) {
            var rect = element.getBoundingClientRect(), scale = getAccumulatedScale(element);
            return {
                x: (mouseEvent.pageX - rect.left) / scale,
                y: (mouseEvent.pageY - rect.top) / scale
            };
        }
        var EdgeType = function(EdgeType) {
            return EdgeType[EdgeType.Outline = 0] = "Outline", EdgeType[EdgeType.Gridline = 1] = "Gridline", 
            EdgeType;
        }({}), EdgeSettings = function() {
            function EdgeSettings(weight, color) {
                this.applyParams(!0, weight, color);
            }
            return EdgeSettings.prototype.applyParams = function(shown, weight, color, type) {
                shown ? (this.weight = weight ?? 0, this.color = color ?? "black", this.type = type ?? EdgeType.Gridline) : (this.weight = 0, 
                this.color = "black", this.type = EdgeType.Gridline);
            }, EdgeSettings.prototype.getCSS = function() {
                var css = [];
                return _.isNumber(this.weight) && (css.push(this.weight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH), 
                this.color && css.push(this.color), css.push("solid")), css.join(" ");
            }, EdgeSettings.prototype.getPriority = function(edges) {
                return this === edges.top || this === edges.bottom ? this.type === EdgeType.Outline ? 2 : 0 : this === edges.right || this === edges.left ? this.type === EdgeType.Outline ? 3 : 1 : -1;
            }, EdgeSettings.prototype.getShadowCss = function(edges, rightBorderMax) {
                var adjustedWeight = this.weight ? this.weight + 5 : 0, output = "inset ";
                if (this === edges.left) output += adjustedWeight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH + " 0"; else if (this === edges.right) output += "-" + Math.min(adjustedWeight, rightBorderMax + 5) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH + " 0"; else if (this === edges.top) output += "0 " + adjustedWeight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH; else {
                    if (this !== edges.bottom) return "";
                    output += "0 -" + adjustedWeight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
                }
                return output + " 0 -".concat(5, "px ") + this.color;
            }, EdgeSettings;
        }(), CellStyle = function() {
            function CellStyle(leftPadding, rightPadding) {
                void 0 === leftPadding && (leftPadding = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.YR), 
                void 0 === rightPadding && (rightPadding = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rJ), 
                this.borders = {}, this.paddings = {
                    top: 0,
                    left: leftPadding,
                    bottom: 0,
                    right: rightPadding
                }, this.fontColor = "", this.fontFamily = "", this.backColor = "";
            }
            return CellStyle.prototype.applyStyle = function(cell) {
                var style = cell.extension.contentHost.style;
                style.fontFamily = this.fontFamily, style.fontSize = this.fontSize ? _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__.FP.toString(this.fontSize.px) : void 0, 
                style.fontWeight = this.fontWeight, style.fontStyle = this.fontStyle, style.textDecoration = this.textDecoration, 
                style.color = this.fontColor, style.backgroundColor = this.backColor, style.boxShadow = this.getBoxShadow(), 
                style.border = "none", style.paddingTop = this.getPaddingTop(), style.paddingRight = this.getPaddingRight(), 
                style.paddingBottom = this.getPaddingBottom(), style.paddingLeft = this.getPaddingLeft(), 
                style.maxWidth = this.maxWidth;
            }, CellStyle.prototype.getPaddingTop = function() {
                return (this.paddings.top ?? 0) + (null == this.borders.top ? 0 : this.borders.top.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getPaddingBottom = function() {
                return (this.paddings.bottom ?? 0) + (null == this.borders.bottom ? 0 : this.borders.bottom.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getPaddingRight = function() {
                return (this.paddings.right ?? _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rJ) + (null == this.borders.right ? 0 : this.borders.right.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getPaddingLeft = function() {
                return (this.paddings.left ?? _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.YR) + (null == this.borders.left ? 0 : this.borders.left.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getBoxShadow = function(rightBorderMax) {
                var _a, _b, _c, _d, _e, _f, _g, _h, edges = [];
                return (null === (_a = this.borders.left) || void 0 === _a ? void 0 : _a.type) === EdgeType.Outline && 0 !== this.borders.left.weight && edges.push(this.borders.left.getShadowCss(this.borders)), 
                (null === (_b = this.borders.right) || void 0 === _b ? void 0 : _b.type) === EdgeType.Outline && 0 !== this.borders.right.weight && 0 !== rightBorderMax && edges.push(this.borders.right.getShadowCss(this.borders, rightBorderMax)), 
                (null === (_c = this.borders.bottom) || void 0 === _c ? void 0 : _c.type) === EdgeType.Outline && 0 !== this.borders.bottom.weight && edges.push(this.borders.bottom.getShadowCss(this.borders)), 
                (null === (_d = this.borders.top) || void 0 === _d ? void 0 : _d.type) === EdgeType.Outline && 0 !== this.borders.top.weight && edges.push(this.borders.top.getShadowCss(this.borders)), 
                (null === (_e = this.borders.left) || void 0 === _e ? void 0 : _e.type) === EdgeType.Gridline && 0 !== this.borders.left.weight && edges.push(this.borders.left.getShadowCss(this.borders)), 
                (null === (_f = this.borders.right) || void 0 === _f ? void 0 : _f.type) === EdgeType.Gridline && 0 !== this.borders.right.weight && 0 !== rightBorderMax && edges.push(this.borders.right.getShadowCss(this.borders, rightBorderMax)), 
                (null === (_g = this.borders.bottom) || void 0 === _g ? void 0 : _g.type) === EdgeType.Gridline && 0 !== this.borders.bottom.weight && edges.push(this.borders.bottom.getShadowCss(this.borders)), 
                (null === (_h = this.borders.top) || void 0 === _h ? void 0 : _h.type) === EdgeType.Gridline && 0 !== this.borders.top.weight && edges.push(this.borders.top.getShadowCss(this.borders)), 
                edges.join(", ");
            }, CellStyle.prototype.setAttributes = function(style, isA11yTable, isA11yMatrix, useLegacyBorders, columnWidth) {
                if (style["padding-top"] = this.getPaddingTop(), style["padding-right"] = this.getPaddingRight(), 
                style["padding-bottom"] = this.getPaddingBottom(), style["padding-left"] = this.getPaddingLeft(), 
                _.isEmpty(this.fontFamily) || (style["font-family"] = this.fontFamily), null != this.fontSize && (style["font-size"] = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__.FP.toString(this.fontSize.px)), 
                null != this.fontWeight && (style["font-weight"] = this.fontWeight), _.isEmpty(this.fontStyle) || (style["font-style"] = this.fontStyle), 
                _.isEmpty(this.textDecoration) || (style["text-decoration"] = this.textDecoration), 
                _.isEmpty(this.fontColor) || (style.color = this.fontColor), _.isEmpty(this.backColor) || (style["background-color"] = this.backColor), 
                useLegacyBorders || !isA11yTable && !isA11yMatrix) {
                    var paddingLeft = parseFloat(this.getPaddingLeft()), paddingRight = parseFloat(this.getPaddingRight()), rightBorderMax = this.getRightBorderMax(columnWidth, paddingLeft, paddingRight), boxShadow = this.getBoxShadow(rightBorderMax);
                    _.isEmpty(boxShadow) || (style["box-shadow"] = boxShadow);
                }
                _.isEmpty(this.maxWidth) || (style["max-width"] = this.maxWidth), (isA11yTable || isA11yMatrix) && (style["--outline-top"] = this.borders.top ? this.borders.top.weight + 1 + "px" : "1px", 
                style["--outline-right"] = this.borders.right ? this.borders.right.weight + 1 + "px" : "1px", 
                style["--outline-bottom"] = this.borders.bottom ? this.borders.bottom.weight + 1 + "px" : "1px", 
                style["--outline-left"] = this.borders.left ? this.borders.left.weight + 1 + "px" : "1px");
            }, CellStyle.prototype.getRightBorderMax = function(columnWidth, paddingLeft, paddingRight) {
                if (null == columnWidth) return paddingRight;
                var paddingRightMax = Math.max(columnWidth - paddingLeft, 0);
                return Math.min(paddingRight, paddingRightMax);
            }, CellStyle.prototype.getAttributes = function(isA11yTable, isA11yMatrix, useLegacyBorders, columnWidth) {
                var style = {};
                return this.setAttributes(style, isA11yTable, isA11yMatrix, useLegacyBorders, columnWidth), 
                style;
            }, CellStyle.prototype.getExtraTop = function() {
                var extra = 0;
                return this.paddings.top && (extra += this.paddings.top), this.borders.top && (extra += this.borders.top.weight), 
                extra;
            }, CellStyle.prototype.getExtraBottom = function() {
                var extra = 0;
                return this.paddings.bottom && (extra += this.paddings.bottom), this.borders.bottom && (extra += this.borders.bottom.weight), 
                extra;
            }, CellStyle.prototype.getExtraRight = function() {
                var extra = 0;
                return this.paddings.right && (extra += this.paddings.right), this.borders.right && (extra += this.borders.right.weight), 
                extra;
            }, CellStyle.prototype.getExtraLeft = function() {
                var extra = 0;
                return this.paddings.left && (extra += this.paddings.left), this.borders.left && (extra += this.borders.left.weight), 
                extra;
            }, CellStyle;
        }(), DimensionPosition = function() {
            return function() {};
        }(), CellPosition = function() {
            function CellPosition() {
                this.row = new DimensionPosition, this.column = new DimensionPosition;
            }
            return CellPosition.prototype.isMatch = function(position) {
                return this.column.index === position.column.index && this.row.index === position.row.index;
            }, CellPosition;
        }(), TablixVisualCell = function() {
            function TablixVisualCell(dataPoint, objects, isRowSubTotal, isColumnSubTotal, isRowGrandTotal, isColumnGrandTotal, isBlankRow, columnMetadata, formatter, tooltipFormatter, type) {
                this.dataPoint = dataPoint, this.objects = objects, this.isRowSubTotal = isRowSubTotal, 
                this.isColumnSubTotal = isColumnSubTotal, this.isRowGrandTotal = isRowGrandTotal, 
                this.isColumnGrandTotal = isColumnGrandTotal, this.isBlankRow = isBlankRow, this.columnMetadata = columnMetadata, 
                this.formatter = formatter, this.tooltipFormatter = tooltipFormatter, this.type = type, 
                this.position = new CellPosition, this.cachedTextContent = formatter ? this.formatter.format(dataPoint, objects) : null != this.dataPoint ? dataPoint : "";
            }
            return Object.defineProperty(TablixVisualCell.prototype, "isTotal", {
                get: function() {
                    return this.isSubtotal || this.isGrandTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isSubtotal", {
                get: function() {
                    return this.isColumnSubTotal || this.isRowSubTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isGrandTotal", {
                get: function() {
                    return this.isColumnGrandTotal || this.isRowGrandTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isRowAndColumnGrandTotal", {
                get: function() {
                    return this.isRowGrandTotal && this.isColumnGrandTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "textContent", {
                get: function() {
                    return this.cachedTextContent;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "tooltipContent", {
                get: function() {
                    return void 0 === this.cachedTooltipContent && (this.cachedTooltipContent = this.tooltipFormatter ? this.tooltipFormatter.format(this.dataPoint, this.objects) : this.textContent), 
                    this.cachedTooltipContent;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isKpi", {
                get: function() {
                    return this.columnMetadata && isValidStatusGraphic(this.columnMetadata.kpi, this.textContent);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "kpiContent", {
                get: function() {
                    if (this.isKpi) return function(kpi, kpiValue) {
                        _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__.fF.assertValue(kpi, "kpi"), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__.fF.assertValue(kpiValue, "kpiValue");
                        var className = (0, _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_7__.sq)(kpi, kpiValue) || "";
                        return (0, _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_8__.hi)().addClass(className).css({
                            display: "inline-block",
                            "vertical-align": "bottom",
                            margin: "0"
                        });
                    }(this.columnMetadata.kpi, this.textContent);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isNumeric", {
                get: function() {
                    if (this.columnMetadata) return this.columnMetadata.type.numeric && !this.columnMetadata.kpi;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isUrl", {
                get: function() {
                    if (this.columnMetadata) return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.cR)(this.columnMetadata);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isImage", {
                get: function() {
                    if (this.columnMetadata) return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.pt)(this.columnMetadata);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isValidUrl", {
                get: function() {
                    return getUrlScheme(this.columnMetadata, this.textContent) !== _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.NONE;
                },
                enumerable: !1,
                configurable: !0
            }), TablixVisualCell.prototype.isMatch = function(item) {
                return this.position.isMatch(item.position) && this.backColor === item.backColor;
            }, TablixVisualCell;
        }();
        function createTable() {
            return document.createElement("table");
        }
        function createDiv() {
            var div = document.createElement("div");
            return div.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rz, div;
        }
        function resetCellCssClass(cell) {
            cell.extension.contentElement.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rz + " " + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.en, 
            cell.extension.contentHost.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rz + " " + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.Pr;
        }
        function addCellCssClass(cell, style) {
            cell.extension.contentHost.className += " " + style;
        }
        function clearCellStyle(cell) {
            cell.extension.contentHost.className = "", cell.extension.contentHost.style.cssText = "";
        }
        function clearCellTextAndTooltip(cell) {
            cell.extension.contentHost.textContent = "", cell.extension.contentHost.removeAttribute("title"), 
            cell.contentHeight = cell.contentWidth = 0, clearChildren(cell.extension.contentHost);
        }
        function setCellTextAndTooltip(text, elementText, elementTooltip) {
            setCellText(text, elementText), setCellTooltip(text, elementTooltip || elementText);
        }
        function setCellText(text, element) {
            element.textContent = (0, _Visuals_common_textUtil__WEBPACK_IMPORTED_MODULE_4__.PC)(text);
        }
        function setCellTooltip(text, element) {
            element.title = text;
        }
        function appendDiv(container, text) {
            var div = createDiv();
            return container.appendChild(div), text && (div.textContent = text), div;
        }
        function isValidSortClick(e) {
            var x = e.offsetX;
            return x >= 0 && x < e.target.offsetWidth - _tablixResizer__WEBPACK_IMPORTED_MODULE_5__.A.resizeHandleSize;
        }
        function appendATagToBodyCell(value, cellElement, urlIconName) {
            var atag = null;
            0 === cellElement.childElementCount ? (atag = document.createElement("a"), cellElement.appendChild(atag)) : atag = cellElement.children[0], 
            atag.href = value, atag.target = "_blank", atag.rel = "noopener noreferrer", atag.title = value, 
            null != urlIconName ? (atag.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.NA + " " + urlIconName, 
            $(cellElement).addClass(_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.LU)) : atag.innerText = value;
        }
        function appendImgTagToBodyCell(value, cellElement, imageHeight) {
            var imgContainer = createDiv(), imgTag = document.createElement("img");
            imgContainer.style.height = imageHeight + "px", imgContainer.style.width = "100%", 
            imgContainer.style.textAlign = "center", imgTag.src = value, imgTag.style.maxHeight = "100%", 
            imgTag.style.maxWidth = "100%", imgContainer.appendChild(imgTag), cellElement.appendChild(imgContainer), 
            cellElement.title = value;
        }
        function getUrlScheme(metadata, content) {
            return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.cR)(metadata) ? (0, 
            _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.MN)(content) : _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.NONE;
        }
        function getUrlIconName(scheme) {
            switch (scheme) {
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.file:
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.ftp:
                return "page2";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.mailto:
                return "mail";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.news:
                return "link";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.telnet:
                return "pc1";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.http:
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.https:
                return "link";

              default:
                return null;
            }
        }
        function isValidImage(header, metadata, content) {
            return isImage(header, metadata) && (0, _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.gU)(content);
        }
        function isImage(header, metadata) {
            return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.pt)(metadata) && !header.isSubtotal && !!header.identity;
        }
        function isValidStatusGraphic(kpi, kpiValue) {
            return !(!kpi || void 0 === kpiValue || !(0, _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_7__.sq)(kpi, kpiValue));
        }
        function getCustomSortEventArgs(queryName, sortDirection) {
            return {
                sortDescriptors: [ {
                    queryName,
                    sortDirection
                } ]
            };
        }
        function reverseSort(sortDirection) {
            return 2 === sortDirection ? 1 : 2;
        }
        function addSortIconToColumnHeader(itemSort, cellDiv) {
            var colHeaderContainer = createDiv();
            itemSort ? (colHeaderContainer.appendChild(createSortIcon(itemSort, !0)), colHeaderContainer.appendChild(createSortIcon(reverseSort(itemSort), !1))) : colHeaderContainer.appendChild(createSortIcon(2, !1));
            var colHeaderTitle = createDiv();
            return colHeaderContainer.appendChild(colHeaderTitle), cellDiv.appendChild(colHeaderContainer), 
            colHeaderTitle;
        }
        function createSortIcon(sort, isSorted) {
            var imgSort = document.createElement("i");
            return imgSort.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rx + " " + (isSorted ? "sorted" : "future") + " " + (1 === sort ? "powervisuals-glyph caret-up" : "powervisuals-glyph caret-down"), 
            imgSort;
        }
        function removeSortIcons(cell) {
            (function(cell) {
                for (var i = 0, len = cell.extension.contentElement.childElementCount; i < len; i++) if (cell.extension.contentElement.children.item(i).classList.contains(_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rx)) return !0;
                return !1;
            })(cell) && $(cell.extension.contentElement).find("." + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rx).remove();
        }
        function convertValueToString(value) {
            return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__.fF.assert(function() {
                return !(value instanceof Date) || (0, _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_9__.M4)(value);
            }, "dates should implement DateWithEpochValue"), (0, _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_9__.M4)(value) && (value = _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_10__.y3.fromDateWithEpochValue(value).toString()), 
            String(value);
        }
        function getAriaRowIndex(rowIndex) {
            return rowIndex + 2;
        }
        function getAriaColIndex(colIndex) {
            return colIndex + 2;
        }
    },
    81671: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            K: function() {
                return TablixColumnWidthManager;
            }
        });
        var _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(55007), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62458), _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82755), _tablixPropertyManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74304), TablixColumnWidthManager = function() {
            function TablixColumnWidthManager(dataView, isMatrix, hostPersistCallBack, matrixLeafNodes) {
                this.columnWidthObjects = {}, this.isMatrix = isMatrix, this.updateDataView(dataView, matrixLeafNodes), 
                this.hostPersistCallBack = hostPersistCallBack, this.visualObjectInstancesToPersist = {
                    merge: [],
                    remove: []
                };
            }
            return TablixColumnWidthManager.prototype.updateDataView = function(dataView, matrixLeafNodes) {
                this.previousDataView = this.currentDataView, this.previousAutoColumnSizePropertyValue = this.previousDataView ? _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.FX.PropGeneralAutoSizeColumns.getValue(_tablixPropertyManager__WEBPACK_IMPORTED_MODULE_1__.U.getMetadataObjects(this.previousDataView)) : void 0, 
                this.currentDataView = dataView, this.currentAutoColumnSizePropertyValue = this.currentDataView ? _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.FX.PropGeneralAutoSizeColumns.getValue(_tablixPropertyManager__WEBPACK_IMPORTED_MODULE_1__.U.getMetadataObjects(this.currentDataView)) : void 0, 
                this.matrixLeafNodes = matrixLeafNodes, this.updateColumnsMetadata(), this.updateTablixColumnWidths();
            }, TablixColumnWidthManager.prototype.updateColumnsMetadata = function() {
                this.columnWidthObjects = {}, this.isMatrix ? this.updateMatrixColumnsMetadata() : this.updateTableColumnsMetadata();
            }, TablixColumnWidthManager.prototype.updateTableColumnsMetadata = function() {
                if (this.currentDataView && this.currentDataView.table) for (var columnMetaData = this.currentDataView.table.columns, i = 0, len = columnMetaData.length; i < len; i++) {
                    var queryName = columnMetaData[i].queryName;
                    queryName && (this.columnWidthObjects[queryName] = {
                        queryName,
                        width: void 0,
                        isFixed: !1
                    });
                }
            }, TablixColumnWidthManager.prototype.updateMatrixColumnsMetadata = function() {
                if (this.currentDataView && this.currentDataView.matrix && this.currentDataView.matrix.rows) for (var i = 0, len = this.currentDataView.matrix.rows.levels.length; i < len; i++) {
                    var rowGroup = this.currentDataView.matrix.rows.levels[i];
                    1 === rowGroup.sources.length && (queryName = rowGroup.sources[0].queryName) && (this.columnWidthObjects[queryName] = {
                        queryName,
                        width: void 0,
                        isFixed: !1
                    });
                }
                if (this.matrixLeafNodes) for (i = 0, len = this.matrixLeafNodes.length; i < len; i++) {
                    var queryName;
                    (queryName = this.matrixLeafNodes[i].queryName) && (this.columnWidthObjects[queryName] = {
                        queryName,
                        width: void 0,
                        isFixed: !1
                    });
                }
            }, TablixColumnWidthManager.prototype.updateTablixColumnWidths = function() {
                var columnMetaData = this.currentDataView && this.currentDataView.metadata && this.currentDataView.metadata.columns;
                if (columnMetaData) {
                    if (this.shouldClearAllColumnWidths()) return void this.autoSizeAllColumns();
                    this.deserializeColumnsWidth(columnMetaData);
                }
            }, TablixColumnWidthManager.prototype.autoSizeAllColumns = function() {
                for (var queryName in this.columnWidthObjects) this.visualObjectInstancesToPersist.remove.push(this.generateColumnWidthObjectToPersist(queryName, void 0));
                this.callHostToPersist();
            }, TablixColumnWidthManager.prototype.deserializeColumnsWidth = function(columnsMetadata) {
                for (var colObj in this.columnWidthObjects) this.columnWidthObjects[colObj].isFixed = !this.currentAutoColumnSizePropertyValue, 
                this.columnWidthObjects[colObj].width = void 0;
                for (var i = 0, len = columnsMetadata.length; i < len; i++) {
                    var column = columnsMetadata[i], queryName = column.queryName, width = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_2__.NA)(column.objects, TablixColumnWidthManager.columnWidthProp);
                    this.columnWidthObjects.hasOwnProperty(queryName) && null != width && (this.columnWidthObjects[queryName].width = width, 
                    this.columnWidthObjects[queryName].isFixed = !0);
                }
            }, TablixColumnWidthManager.prototype.shouldClearAllColumnWidths = function() {
                return null != this.previousDataView && !1 === this.previousAutoColumnSizePropertyValue && null != this.currentDataView && !0 === this.currentAutoColumnSizePropertyValue;
            }, TablixColumnWidthManager.getColumnQueryName = function(column) {
                var headerCell = column.getTablixCell();
                switch (headerCell.type) {
                  case 0:
                    if (null == headerCell.item || null == headerCell.item.metadata) return;
                    return headerCell.item.metadata.queryName;

                  case 2:
                    return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assert(function() {
                        return null != headerCell.item;
                    }, "Tablix Column without a ColumnMetadata"), headerCell.item.queryName;

                  default:
                    return void _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertFail("getColumnQueryName called with cellType: " + headerCell.type);
                }
            }, TablixColumnWidthManager.prototype.getColumnWidthObjects = function() {
                return this.columnWidthObjects;
            }, TablixColumnWidthManager.prototype.getFixedColumnWidthObjects = function() {
                var fixedOnly = {};
                for (var queryName in this.columnWidthObjects) {
                    var obj = this.columnWidthObjects[queryName];
                    obj.isFixed && (fixedOnly[queryName] = obj);
                }
                return fixedOnly;
            }, TablixColumnWidthManager.prototype.getPersistedColumnWidth = function(queryName) {
                var obj = this.columnWidthObjects[queryName];
                return obj && obj.width;
            }, TablixColumnWidthManager.prototype.callHostToPersist = function() {
                this.hostPersistCallBack && this.hostPersistCallBack(this.visualObjectInstancesToPersist), 
                this.visualObjectInstancesToPersist = {
                    merge: [],
                    remove: []
                };
            }, TablixColumnWidthManager.prototype.onColumnWidthChanged = function(queryName, width) {
                if (null != queryName && null != this.columnWidthObjects[queryName]) {
                    var resizedColumn = this.columnWidthObjects[queryName];
                    -1 === width ? (resizedColumn.width = void 0, resizedColumn.isFixed = !this.currentAutoColumnSizePropertyValue, 
                    this.visualObjectInstancesToPersist.remove.push(this.generateColumnWidthObjectToPersist(resizedColumn.queryName, void 0)), 
                    this.callHostToPersist()) : (resizedColumn.width = width, resizedColumn.isFixed = !0, 
                    this.visualObjectInstancesToPersist.merge.push(this.generateColumnWidthObjectToPersist(queryName, width)), 
                    this.callHostToPersist());
                }
            }, TablixColumnWidthManager.prototype.onColumnsRendered = function(renderedColumns) {
                for (var maxWidths = {}, i = 0, len = renderedColumns.length; i < len; i++) {
                    var newWidth = renderedColumns[i].width;
                    null == maxWidths[queryName = renderedColumns[i].queryName] ? maxWidths[queryName] = {
                        queryName,
                        width: newWidth,
                        isFixed: !1
                    } : newWidth > maxWidths[queryName].width && (maxWidths[queryName].width = newWidth);
                }
                var widthChanged = !1;
                for (var queryName in this.columnWidthObjects) if (maxWidths[queryName]) {
                    var colWidthObj = this.columnWidthObjects[queryName];
                    colWidthObj.isFixed && null == colWidthObj.width && (colWidthObj.width = maxWidths[queryName].width, 
                    this.visualObjectInstancesToPersist.merge.push(this.generateColumnWidthObjectToPersist(queryName, colWidthObj.width)), 
                    widthChanged = !0);
                }
                return widthChanged && this.callHostToPersist(), widthChanged;
            }, TablixColumnWidthManager.prototype.generateColumnWidthObjectToPersist = function(queryName, width) {
                return {
                    selector: {
                        metadata: queryName
                    },
                    objectName: "general",
                    properties: {
                        columnWidth: width
                    }
                };
            }, TablixColumnWidthManager.columnWidthProp = {
                objectName: "general",
                propertyName: "columnWidth"
            }, TablixColumnWidthManager;
        }();
    },
    93414: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            d: function() {
                return TablixControl;
            },
            L: function() {
                return TablixDefaultTextSize;
            }
        });
        var StandaloneUtility1 = __webpack_require__(64329), tablixUtils1 = __webpack_require__(93340), tablixConstants = __webpack_require__(71090), tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), scrollbar_scrollbar = __webpack_require__(44102), TablixDimension = function() {
            function TablixDimension(tablixControl) {
                this._scrollStep = .1, this._owner = tablixControl, this._hierarchyNavigator = tablixControl.hierarchyNavigator, 
                this._binder = tablixControl.getBinder(), this._tablixLayoutManager = tablixControl.layoutManager, 
                this.scrollOffset = 0;
            }
            return TablixDimension.prototype._onStartRenderingIteration = function() {
                this.updateScrollPosition();
            }, TablixDimension.prototype._onEndRenderingIteration = function() {}, TablixDimension.prototype.getValidScrollOffset = function(scrollOffset) {
                return Math.min(Math.max(scrollOffset, 0), Math.max(this.getItemsCount() - this._scrollStep, 0));
            }, TablixDimension.prototype.makeScrollOffsetValid = function() {
                this.scrollOffset = this.getValidScrollOffset(this.scrollOffset);
            }, TablixDimension.prototype.getIntegerScrollOffset = function() {
                return Math.floor(this.scrollOffset);
            }, TablixDimension.prototype.getFractionScrollOffset = function() {
                return this.scrollOffset - this.getIntegerScrollOffset();
            }, Object.defineProperty(TablixDimension.prototype, "scrollbar", {
                get: function() {
                    return this._scrollbar;
                },
                enumerable: !1,
                configurable: !0
            }), TablixDimension.prototype.getFirstVisibleItem = function(level) {
                return this._scrollItems[level];
            }, TablixDimension.prototype.getFirstVisibleChild = function(item) {
                return this._hierarchyNavigator.getAt(this._hierarchyNavigator.getChildren(item), this.getFirstVisibleChildIndex(item));
            }, TablixDimension.prototype.getFirstVisibleChildIndex = function(item) {
                var startItem = this.getFirstVisibleItem(this._hierarchyNavigator.getLevel(item) + 1);
                return void 0 === startItem || void 0 !== startItem && this._hierarchyNavigator.getParent(startItem) !== item ? 0 : this._hierarchyNavigator.getIndex(startItem);
            }, TablixDimension.prototype._initializeScrollbar = function(parentElement, _touchDiv, layoutKind) {
                var _this = this;
                this._scrollbar = this._createScrollbar(parentElement, layoutKind), this._scrollbar._onscroll.push(function(e) {
                    return _this.onScroll();
                });
            }, TablixDimension.prototype.getItemsCount = function() {
                return this.model ? this._hierarchyNavigator.getLeafCount(this.model) : 0;
            }, TablixDimension.prototype.getDepth = function() {
                return this.modelDepth;
            }, TablixDimension.prototype.onScroll = function() {
                this.scrollOffset = this._scrollbar.viewMin, this._owner._onScrollAsync(this);
            }, Object.defineProperty(TablixDimension.prototype, "otherDimension", {
                get: function() {
                    return this._otherDimension;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixDimension.prototype, "layoutManager", {
                get: function() {
                    return this._layoutManager;
                },
                enumerable: !1,
                configurable: !0
            }), TablixDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                return debug.fF.assertFail("PureVirtualMethod: TablixDimension._createScrollbar"), 
                null;
            }, TablixDimension.prototype.updateScrollPosition = function() {
                if (this._scrollItems = [], this.model) {
                    var firstVisibleScrollIndex = this.getIntegerScrollOffset(), firstVisible = this._hierarchyNavigator.getLeafAt(this.model, firstVisibleScrollIndex);
                    if (firstVisible) do {
                        this._scrollItems[this._hierarchyNavigator.getLevel(firstVisible)] = firstVisible, 
                        firstVisible = this._hierarchyNavigator.getParent(firstVisible);
                    } while (null !== firstVisible);
                }
            }, TablixDimension;
        }(), TablixRowDimension = function(_super) {
            function TablixRowDimension(tablixControl) {
                var _this = _super.call(this, tablixControl) || this;
                return _this._layoutManager = _this._tablixLayoutManager.rowLayoutManager, _this._footer = null, 
                _this;
            }
            return (0, tslib_es6.__extends)(TablixRowDimension, _super), TablixRowDimension.prototype.setFooter = function(footerHeader) {
                this._footer = footerHeader, this._owner.updateFooterVisibility();
            }, TablixRowDimension.prototype.hasFooter = function() {
                return null !== this._footer;
            }, TablixRowDimension.prototype._render = function() {
                var firstVisibleRowItem = this.getFirstVisibleItem(0);
                this.hasFooter() && (this.addFooterRowHeader(this._footer), this.addFooterBodyCells(this._footer)), 
                void 0 !== firstVisibleRowItem && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(firstVisibleRowItem));
            }, TablixRowDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                return new scrollbar_scrollbar.AT(parentElement, layoutKind);
            }, TablixRowDimension.prototype.addNodes = function(items, rowIndex, depth, firstVisibleIndex) {
                for (var count = this._hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < count; i++) {
                    if (!this._layoutManager.needsToRealize) return;
                    var item = this._hierarchyNavigator.getAt(items, i);
                    rowIndex += this.addNode(item, items, rowIndex, depth).rowSpan;
                }
            }, TablixRowDimension.prototype.getFirstVisibleChildLeaf = function(item) {
                for (var leaf = item; !this._hierarchyNavigator.isLeaf(leaf); ) leaf = this.getFirstVisibleChild(leaf);
                return leaf;
            }, TablixRowDimension.prototype.bindRowHeader = function(item, cell) {
                this._binder.bindRowHeader(item, cell);
            }, TablixRowDimension.prototype.addNode = function(item, items, rowIndex, depth) {
                var previousCount, rowHeaderCell = this._tablixLayoutManager.getOrCreateRowHeader(item, items, rowIndex, this._hierarchyNavigator.getLevel(item)), match = this.rowHeaderMatch(item, rowHeaderCell);
                return match || (this._owner._unbindCell(rowHeaderCell), rowHeaderCell.type = 1, 
                rowHeaderCell.item = item), this._hierarchyNavigator.isLeaf(item) ? (rowHeaderCell.colSpan = depth - this._hierarchyNavigator.getLevel(item), 
                rowHeaderCell.rowSpan = 1, match || this.bindRowHeader(item, rowHeaderCell), this._tablixLayoutManager.onRowHeaderRealized(item, rowHeaderCell), 
                this.addBodyCells(item, items, rowIndex)) : (previousCount = this._layoutManager.getRealizedItemsCount(), 
                this.addNodes(this._hierarchyNavigator.getChildren(item), rowIndex, depth, this.getFirstVisibleChildIndex(item)), 
                rowHeaderCell.colSpan = 1, rowHeaderCell.rowSpan = this._layoutManager.getRealizedItemsCount() - previousCount + 1, 
                match || this.bindRowHeader(item, rowHeaderCell), this._tablixLayoutManager.onRowHeaderRealized(item, rowHeaderCell)), 
                rowHeaderCell;
            }, TablixRowDimension.prototype.rowHeaderMatch = function(item, cell) {
                var previousItem = cell.item;
                return 1 === cell.type && previousItem && this._hierarchyNavigator.headerItemEquals(item, previousItem);
            }, TablixRowDimension.prototype.addBodyCells = function(item, items, rowIndex) {
                for (var firstVisibleColumnIndex = this._otherDimension.getIntegerScrollOffset(), columnCount = this._otherDimension._layoutManager.getRealizedItemsCount() - this.getDepth(), hierarchyNavigator = this._hierarchyNavigator, otherModel = this._otherDimension.model, layoutManager = this._tablixLayoutManager, i = 0; i < columnCount; i++) {
                    var cellItem = hierarchyNavigator.getIntersection(item, hierarchyNavigator.getLeafAt(otherModel, firstVisibleColumnIndex + i)), cell = layoutManager.getOrCreateBodyCell(cellItem, item, items, rowIndex, i);
                    this.bindBodyCell(cellItem, cell), layoutManager.onBodyCellRealized(cellItem, cell);
                }
            }, TablixRowDimension.prototype.bindBodyCell = function(item, cell) {
                this.bodyCelMatch(item, cell) || (this._owner._unbindCell(cell), cell.type = 3, 
                cell.item = item, this._binder.bindBodyCell(item, cell));
            }, TablixRowDimension.prototype.addFooterRowHeader = function(item) {
                var cell = this._tablixLayoutManager.getOrCreateFooterRowHeader(item, this.model);
                cell.colSpan = this.getDepth(), this.rowHeaderMatch(item, cell) || (this._owner._unbindCell(cell), 
                cell.type = 1, cell.item = item, this.bindRowHeader(item, cell), this._tablixLayoutManager.onRowHeaderFooterRealized(item, cell));
            }, TablixRowDimension.prototype.addFooterBodyCells = function(rowItem) {
                for (var firstVisibleColumnIndex = this._otherDimension.getIntegerScrollOffset(), columnCount = this._otherDimension.layoutManager.getRealizedItemsCount() - this.getDepth(), layoutManager = this._tablixLayoutManager, i = 0; i < columnCount; i++) {
                    var columnItem = this._hierarchyNavigator.getLeafAt(this._otherDimension.model, firstVisibleColumnIndex + i), item = this._hierarchyNavigator.getIntersection(rowItem, columnItem), cell = layoutManager.getOrCreateFooterBodyCell(item, i);
                    this.bindBodyCell(item, cell), layoutManager.onBodyCellFooterRealized(item, cell);
                }
            }, TablixRowDimension.prototype.bodyCelMatch = function(item, cell) {
                var previousItem = cell.item;
                return 3 === cell.type && previousItem && this._hierarchyNavigator.bodyCellItemEquals(item, previousItem);
            }, TablixRowDimension;
        }(TablixDimension), TablixColumnDimension = function(_super) {
            function TablixColumnDimension(tablixControl) {
                var _this = _super.call(this, tablixControl) || this;
                return _this._layoutManager = _this._tablixLayoutManager.columnLayoutManager, _this;
            }
            return (0, tslib_es6.__extends)(TablixColumnDimension, _super), TablixColumnDimension.prototype._render = function() {
                var firstVisibleColumnItem = this.getFirstVisibleItem(0);
                void 0 !== firstVisibleColumnItem && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(firstVisibleColumnItem));
            }, TablixColumnDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                var scrollbar = new scrollbar_scrollbar.Xg(parentElement, layoutKind);
                return scrollbar.smallIncrement = .2, scrollbar;
            }, TablixColumnDimension.prototype.addNodes = function(items, columnIndex, depth, firstVisibleIndex) {
                for (var count = this._hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < count; i++) {
                    if (!this._layoutManager.needsToRealize) return;
                    columnIndex += this.addNode(this._hierarchyNavigator.getAt(items, i), items, columnIndex, depth).colSpan;
                }
            }, TablixColumnDimension.prototype.addNode = function(item, items, columnIndex, depth) {
                var cell = this._tablixLayoutManager.getOrCreateColumnHeader(item, items, this._hierarchyNavigator.getLevel(item), columnIndex), match = this.columnHeaderMatch(item, cell);
                if (match || (this._owner._unbindCell(cell), cell.type = 2, cell.item = item), this._hierarchyNavigator.isLeaf(item)) cell.rowSpan = depth - this._hierarchyNavigator.getLevel(item); else {
                    var previousCount = this._layoutManager.getRealizedItemsCount();
                    this.addNodes(this._hierarchyNavigator.getChildren(item), columnIndex, depth, this.getFirstVisibleChildIndex(item));
                    var childrenLevelDifference = this._hierarchyNavigator.getChildrenLevelDifference(item);
                    cell.rowSpan = childrenLevelDifference === 1 / 0 ? 1 : childrenLevelDifference, 
                    cell.colSpan = this._layoutManager.getRealizedItemsCount() - previousCount + 1;
                }
                return match || this._binder.bindColumnHeader(item, cell), this._tablixLayoutManager.onColumnHeaderRealized(item, cell), 
                cell;
            }, TablixColumnDimension.prototype.columnHeaderMatch = function(item, cell) {
                var previousItem = cell.item;
                return !this._owner.wordWrapColumnHeaders && 2 === cell.type && previousItem && this._hierarchyNavigator.headerItemEquals(item, previousItem);
            }, TablixColumnDimension;
        }(TablixDimension), Point = function() {
            function Point(x, y) {
                this.x = x || 0, this.y = y || 0;
            }
            return Point.prototype.offset = function(offsetX, offsetY) {
                this.x += offsetX, this.y += offsetY;
            }, Point;
        }(), Rectangle = function(_super) {
            function Rectangle(x, y, width, height) {
                var _this = _super.call(this, x, y) || this;
                return _this.width = width || 0, _this.height = height || 0, _this;
            }
            return (0, tslib_es6.__extends)(Rectangle, _super), Object.defineProperty(Rectangle.prototype, "point", {
                get: function() {
                    return new Point(this.x, this.y);
                },
                enumerable: !1,
                configurable: !0
            }), Rectangle.prototype.contains = function(p) {
                return Rectangle.contains(this, p);
            }, Rectangle.contains = function(rect, p) {
                return !(!p || Rectangle.isEmpty(rect)) && rect.x <= p.x && p.x < rect.x + rect.width && rect.y <= p.y && p.y < rect.y + rect.height;
            }, Rectangle.isEmpty = function(rect) {
                return !(void 0 !== rect && rect.width >= 0 && rect.height >= 0);
            }, Rectangle;
        }(Point), MouseButton = function(MouseButton) {
            return MouseButton[MouseButton.NoClick = 0] = "NoClick", MouseButton[MouseButton.LeftClick = 1] = "LeftClick", 
            MouseButton[MouseButton.RightClick = 2] = "RightClick", MouseButton[MouseButton.CenterClick = 3] = "CenterClick", 
            MouseButton;
        }({}), TouchEvent = function() {
            function TouchEvent(x, y, isMouseDown, dx, dy) {
                this._x = x, this._y = y, this.isMouseButtonDown = isMouseDown, this._dx = dx || 0, 
                this._dy = dy || 0;
            }
            return Object.defineProperty(TouchEvent.prototype, "x", {
                get: function() {
                    return this._x;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TouchEvent.prototype, "y", {
                get: function() {
                    return this._y;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TouchEvent.prototype, "dx", {
                get: function() {
                    return this._dx;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TouchEvent.prototype, "dy", {
                get: function() {
                    return this._dy;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TouchEvent.prototype, "isMouseDown", {
                get: function() {
                    return this.isMouseButtonDown;
                },
                enumerable: !1,
                configurable: !0
            }), TouchEvent;
        }(), TouchManager = function() {
            function TouchManager() {
                this.touchList = [], this.swipeDirection = 2, this.matchingDirectionCount = 0, this.lockThreshold = !0, 
                this.scrollThreshold = !0, this.lastTouchEvent = new TouchEvent(0, 0, !1);
            }
            return Object.defineProperty(TouchManager.prototype, "lastEvent", {
                get: function() {
                    return this.lastTouchEvent;
                },
                enumerable: !1,
                configurable: !0
            }), TouchManager.prototype.addTouchRegion = function(region, handler, converter) {
                var item = {
                    lastPoint: new TouchEvent(0, 0, !1),
                    handler,
                    region,
                    converter
                };
                this.touchList = this.touchList.concat([ item ]);
            }, TouchManager.prototype.upAllTouches = function() {
                var eventPoint, length;
                length = this.touchList.length;
                for (var i = 0; i < length; i++) this.touchList[i].lastPoint.isMouseDown && (eventPoint = this.touchList[i].converter.getPixelToItem(this.touchList[i].lastPoint.x, this.touchList[i].lastPoint.y, 0, 0, !1), 
                this.touchList[i].handler.touchEvent(eventPoint)), this.touchList[i].lastPoint = new TouchEvent(this.touchList[i].lastPoint.x, this.touchList[i].lastPoint.y, !1);
                this.lastTouchEvent = new TouchEvent(0, 0, !1);
            }, TouchManager.prototype.touchEvent = function(e) {
                var list, length, x = 0, y = 0, dx = 0, dy = 0, angle = 0, eventPoint = null;
                list = this._getActive(), !this.lastTouchEvent.isMouseDown && e.isMouseDown && (list = this._findRegions(e)), 
                this.lastTouchEvent = new TouchEvent(e.x, e.y, e.isMouseDown, dx = this.lastTouchEvent.x - e.x, dy = this.lastTouchEvent.y - e.y), 
                length = list.length;
                for (var i = 0; i < length; i++) x = e.x - list[i].region.point.x, y = e.y - list[i].region.point.y, 
                list[i].lastPoint.isMouseDown && e.isMouseDown ? (dx = x - list[i].lastPoint.x, 
                dy = y - list[i].lastPoint.y, angle = Math.abs(180 / Math.PI * Math.atan(dy / dx)), 
                this.scrollThreshold && (this.lockThreshold && this.matchingDirectionCount > 5 ? 1 === this.swipeDirection ? dy = 0 : 0 === this.swipeDirection && (dx = 0) : angle < 20 ? (dy = 0, 
                1 === this.swipeDirection ? this.matchingDirectionCount++ : (this.matchingDirectionCount = 1, 
                this.swipeDirection = 1)) : (angle = Math.abs(180 / Math.PI * Math.atan(dx / dy))) < 20 ? (dx = 0, 
                0 === this.swipeDirection ? this.matchingDirectionCount++ : (this.matchingDirectionCount = 1, 
                this.swipeDirection = 0)) : 2 === this.swipeDirection ? this.matchingDirectionCount++ : (this.swipeDirection = 2, 
                this.matchingDirectionCount = 1))) : (dx = 0, dy = 0, this.swipeDirection = 2, this.matchingDirectionCount = 0), 
                list[i].lastPoint = new TouchEvent(x, y, e.isMouseDown, dx, dy), eventPoint = list[i].converter.getPixelToItem(x, y, dx, dy, e.isMouseDown), 
                list[i].handler.touchEvent(eventPoint);
            }, TouchManager.prototype._findRegions = function(e) {
                var length, list = [];
                length = this.touchList.length;
                for (var i = 0; i < length; i++) this.touchList[i].region.contains(new Point(e.x, e.y)) && (list = list.concat([ this.touchList[i] ]));
                return list;
            }, TouchManager.prototype._getActive = function() {
                var length, list = [];
                length = this.touchList.length;
                for (var i = 0; i < length; i++) this.touchList[i].lastPoint.isMouseDown && (list = list.concat([ this.touchList[i] ]));
                return list;
            }, TouchManager;
        }(), TouchEventInterpreter = function() {
            function TouchEventInterpreter(manager) {
                this.manager = manager, this.touchPanel = null, this.scale = 1, this.documentCallbacksWrapper = null, 
                this.panelCallbacksWrapper = null, this.sliding = !1;
            }
            return TouchEventInterpreter.prototype.initTouch = function(panel, touchReferencePoint) {
                panel.style.setProperty("-ms-touch-action", "pinch-zoom"), this.touchReferencePoint = touchReferencePoint, 
                this.touchPanel = panel, this.startTouchPanelEvents();
            }, TouchEventInterpreter.prototype.startTouchPanelEvents = function() {
                var _this = this;
                "ontouchmove" in this.touchPanel && (this.panelCallbacksWrapper = {
                    startCallback: function(e) {
                        return _this.onTouchStart(e);
                    },
                    endCallback: function(e) {
                        return _this.onTouchEnd(e);
                    }
                }, this.touchPanel.addEventListener("touchstart", this.panelCallbacksWrapper.startCallback), 
                this.touchPanel.addEventListener("touchend", this.panelCallbacksWrapper.endCallback));
            }, TouchEventInterpreter.prototype.clearTouchPanelEvents = function() {
                null !== this.panelCallbacksWrapper && ("ontouchmove" in this.touchPanel && (this.touchPanel.removeEventListener("touchstart", this.panelCallbacksWrapper.startCallback), 
                this.touchPanel.removeEventListener("touchend", this.panelCallbacksWrapper.endCallback)), 
                this.panelCallbacksWrapper = null);
            }, TouchEventInterpreter.prototype.getXYByClient = function(pageX, pageY, rect) {
                var x = rect.left, y = rect.top;
                void 0 !== window.scrollX && (x += window.scrollX, y += window.scrollY);
                var point = new Point(0, 0);
                return point.offset(pageX - x, pageY - y), point;
            }, TouchEventInterpreter.prototype.onTouchStart = function(e) {
                if (1 === e.touches.length) {
                    e.cancelBubble = !0;
                    var mouseEvent = e.touches[0];
                    this.touchStartTime = (new Date).getTime(), this.touchStartPageY = mouseEvent.pageY, 
                    this.onTouchMouseDown(mouseEvent);
                }
            }, TouchEventInterpreter.prototype.onTouchMove = function(e) {
                if (1 === e.touches.length) {
                    e.preventDefault && e.preventDefault();
                    var mouseEvent = e.touches[0];
                    this.touchLastPageY = mouseEvent.pageY, this.touchLastPageX = mouseEvent.pageX, 
                    this.sliding || this.onTouchMouseMove(mouseEvent);
                }
            }, TouchEventInterpreter.prototype.onTouchEnd = function(e) {
                this.clearTouchDocumentEvents();
                var swipeInfo = this.getSwipeInfo();
                this.didUserSwipe(swipeInfo) ? this.startSlideAffect(swipeInfo) : this.sliding || this.upAllTouches();
            }, TouchEventInterpreter.prototype.onTouchMouseDown = function(e) {
                this.scale = (0, tablixUtils1.df)(this.touchPanel), document.getSelection().removeAllRanges(), 
                this.rect = (this.touchReferencePoint ? this.touchReferencePoint : this.touchPanel).getBoundingClientRect(), 
                this.startTouchDocumentEvents();
            }, TouchEventInterpreter.prototype.startTouchDocumentEvents = function() {
                var _this = this;
                "ontouchmove" in this.touchPanel && (this.documentCallbacksWrapper = {
                    moveCallback: function(e) {
                        return _this.onTouchMove(e);
                    },
                    endCallback: function(e) {
                        return _this.onTouchEnd(e);
                    }
                }, document.addEventListener("touchend", this.documentCallbacksWrapper.endCallback), 
                document.addEventListener("touchmove", this.documentCallbacksWrapper.moveCallback));
            }, TouchEventInterpreter.prototype.onTouchMouseMove = function(e) {
                var event, point, rect = this.rect, validMouseDragEvent = null !== rect && e.which !== MouseButton.NoClick;
                validMouseDragEvent && !this.sliding && (point = this.getXYByClient(e.pageX, e.pageY, rect), 
                event = new TouchEvent(point.x / this.scale, point.y / this.scale, validMouseDragEvent), 
                this.manager.touchEvent(event), e.preventDefault ? e.preventDefault() : "returnValue" in e && (e.returnValue = !1));
            }, TouchEventInterpreter.prototype.getSwipeInfo = function() {
                var touchEndTime = (new Date).getTime(), touchDist = this.touchLastPageY - this.touchStartPageY;
                return {
                    direction: touchDist < 0 ? -1 : 1,
                    distance: touchDist,
                    endTime: touchEndTime,
                    time: touchEndTime - this.touchStartTime
                };
            }, TouchEventInterpreter.prototype.didUserSwipe = function(swipeInfo) {
                return swipeInfo.time < 600 && swipeInfo.distance * swipeInfo.direction > 80;
            }, TouchEventInterpreter.prototype.startSlideAffect = function(swipeInfo) {
                var _this = this;
                if (!this.sliding && null !== this.rect) {
                    this.sliding = !0;
                    var point = this.getXYByClient(this.touchLastPageX, this.touchLastPageY, this.rect);
                    this.slide(point, 300, swipeInfo), requestAnimationFrame(function() {
                        _this.didUserChangeDirection(swipeInfo) || _this.slide(point, 200, swipeInfo), _this.clearSlide();
                    });
                }
            }, TouchEventInterpreter.prototype.didUserChangeDirection = function(swipeInfo) {
                return !(this.touchStartTime <= swipeInfo.endTime) && (this.touchLastPageY - this.touchStartPageY < 0 ? -1 : 1) !== swipeInfo.direction;
            }, TouchEventInterpreter.prototype.slide = function(point, slideDist, swipeInfo) {
                point.y += slideDist * swipeInfo.direction + (this.touchStartTime > swipeInfo.endTime ? this.touchLastPageY - this.touchStartPageY : 0);
                var event = new TouchEvent(point.x / this.scale, point.y / this.scale, !0);
                this.manager.touchEvent(event);
            }, TouchEventInterpreter.prototype.clearSlide = function() {
                this.sliding = !1, this.upAllTouches();
            }, TouchEventInterpreter.prototype.upAllTouches = function() {
                null === this.documentCallbacksWrapper && (this.rect = null, this.manager.upAllTouches());
            }, TouchEventInterpreter.prototype.clearTouchDocumentEvents = function() {
                null !== this.documentCallbacksWrapper && ("ontouchmove" in this.touchPanel && (document.removeEventListener("touchmove", this.documentCallbacksWrapper.moveCallback), 
                document.removeEventListener("touchend", this.documentCallbacksWrapper.endCallback)), 
                this.documentCallbacksWrapper = null);
            }, TouchEventInterpreter.prototype.clearAllTouchEvents = function() {
                this.clearTouchDocumentEvents(), this.clearTouchPanelEvents();
            }, TouchEventInterpreter;
        }(), ColumnTouchDelegate = function() {
            function ColumnTouchDelegate(region) {
                this.dim = region, this.averageSize = 1, this.handlers = null, this.tablixControl = null;
            }
            return Object.defineProperty(ColumnTouchDelegate.prototype, "dimension", {
                get: function() {
                    return this.dim;
                },
                enumerable: !1,
                configurable: !0
            }), ColumnTouchDelegate.prototype.setScrollDensity = function(xRatio) {
                this.averageSize = xRatio;
            }, ColumnTouchDelegate.prototype.resize = function(x, y, width, height) {
                this.dim.x = x, this.dim.y = y, this.dim.width = width, this.dim.height = height;
            }, ColumnTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                return new TouchEvent(x * this.averageSize, 0, down, -dx * this.averageSize, 0);
            }, ColumnTouchDelegate.prototype.touchEvent = function(e) {
                var args = [];
                args[0] = this.tablixControl, args[1] = e.dx, args[2] = e.dy, this.handlers && (0, 
                scrollbar_scrollbar.fw)([ this.handlers ], args);
            }, ColumnTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                this.handlers = handlerCall, this.tablixControl = tablixObj;
            }, ColumnTouchDelegate;
        }(), RowTouchDelegate = function() {
            function RowTouchDelegate(region) {
                this.dim = region, this.averageSize = 30, this.handlers = null, this.tablixControl = null;
            }
            return Object.defineProperty(RowTouchDelegate.prototype, "dimension", {
                get: function() {
                    return this.dim;
                },
                enumerable: !1,
                configurable: !0
            }), RowTouchDelegate.prototype.setScrollDensity = function(yRatio) {
                this.averageSize = yRatio;
            }, RowTouchDelegate.prototype.resize = function(x, y, width, height) {
                this.dim.x = x, this.dim.y = y, this.dim.width = width, this.dim.height = height;
            }, RowTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                return new TouchEvent(0, y * this.averageSize, down, 0, -dy * this.averageSize);
            }, RowTouchDelegate.prototype.touchEvent = function(e) {
                var args = [];
                args[0] = this.tablixControl, args[1] = e.dx, args[2] = e.dy, this.handlers && (0, 
                scrollbar_scrollbar.fw)([ this.handlers ], args);
            }, RowTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                this.handlers = handlerCall, this.tablixControl = tablixObj;
            }, RowTouchDelegate;
        }(), BodyTouchDelegate = function() {
            function BodyTouchDelegate(region) {
                this.dim = region, this.averageSizeX = BodyTouchDelegate.DefaultAverageSizeX, this.averageSizeY = BodyTouchDelegate.DefaultAverageSizeY, 
                this.handlers = null, this.tablixControl = null;
            }
            return Object.defineProperty(BodyTouchDelegate.prototype, "dimension", {
                get: function() {
                    return this.dim;
                },
                enumerable: !1,
                configurable: !0
            }), BodyTouchDelegate.prototype.setScrollDensity = function(xRatio, yRatio) {
                this.averageSizeX = xRatio, this.averageSizeY = yRatio;
            }, BodyTouchDelegate.prototype.resize = function(x, y, width, height) {
                var dimension = this.dim;
                dimension.x = x, dimension.y = y, dimension.width = width, dimension.height = height;
            }, BodyTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                return new TouchEvent(x * this.averageSizeX, y * this.averageSizeY, down, -dx * this.averageSizeX, -dy * this.averageSizeY);
            }, BodyTouchDelegate.prototype.touchEvent = function(e) {
                this.handlers && (0, scrollbar_scrollbar.fw)([ this.handlers ], [ this.tablixControl, e.dx, e.dy ]);
            }, BodyTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                this.handlers = handlerCall, this.tablixControl = tablixObj;
            }, BodyTouchDelegate.DefaultAverageSizeX = 30, BodyTouchDelegate.DefaultAverageSizeY = 30, 
            BodyTouchDelegate;
        }(), TablixDefaultTextSize = StandaloneUtility1.Gj, TablixControl = function() {
            function TablixControl(hierarchyNavigator, layoutManager, binder, parentDomElement, options) {
                var _this = this;
                this.scrollBarElementWidth = 9, this.options = options;
                var isInteractive = options.interactive;
                this.isTouchEnabled = isInteractive && options.enableTouchSupport, this.mainDiv = (0, 
                tablixUtils1.wC)(), this.mainDiv.classList.add(TablixControl.TablixTableAreaClassName), 
                this.footerDiv = (0, tablixUtils1.wC)(), this.footerDiv.classList.add(TablixControl.TablixFooterClassName), 
                this.gridDimensions = {}, this.containerElement = (0, tablixUtils1.wC)(), this.className = layoutManager.getTablixClassName(), 
                this.autoSizeWidth = !1, this.autoSizeHeight = !1, this.fontFamily = tablixConstants.dG, 
                this.fontColor = tablixConstants.ye, this.fontSize = options.fontSize, parentDomElement.className = TablixControl.TablixContainerClassName, 
                parentDomElement.appendChild(this.containerElement), this.containerElement.addEventListener("wheel", function(e) {
                    _this.onWheel(e);
                }), this.containerElement.appendChild(this.mainDiv), this.containerElement.appendChild(this.footerDiv), 
                this.isTouchEnabled && (this.InitializeTouchSupport(), this.bindTouchEvents()), 
                this.controlLayoutManager = layoutManager, this.controlLayoutManager.initialize(this), 
                this.hierarchyTablixNavigator = hierarchyNavigator, this.binder = binder, this.columnDim = new TablixColumnDimension(this), 
                this.rowDim = new TablixRowDimension(this), this.columnDim._otherDimension = this.rowDimension, 
                this.rowDim._otherDimension = this.columnDimension, this.InitializeScrollbars(), 
                isInteractive || (this.scrollbarWidth = 0), this.updateHorizontalPosition(), this.updateVerticalPosition(), 
                this.updateFooterVisibility(), this.lastRenderingArgs = {};
            }
            return TablixControl.prototype.InitializeTouchSupport = function() {
                this.isTouchEventsBound = !1, this.touchManager = new TouchManager, this.touchInterpreter = new TouchEventInterpreter(this.touchManager), 
                this.footerTouchInterpreter = new TouchEventInterpreter(this.touchManager), this.columnTouchDelegate = new ColumnTouchDelegate(new Rectangle), 
                this.rowTouchDelegate = new RowTouchDelegate(new Rectangle), this.bodyTouchDelegate = new BodyTouchDelegate(new Rectangle), 
                this.footerTouchDelegate = new ColumnTouchDelegate(new Rectangle), this.columnTouchDelegate.setHandler(this, this.onTouchEvent), 
                this.rowTouchDelegate.setHandler(this, this.onTouchEvent), this.bodyTouchDelegate.setHandler(this, this.onTouchEvent), 
                this.footerTouchDelegate.setHandler(this, this.onTouchEvent), this.touchManager.addTouchRegion(this.columnTouchDelegate.dimension, this.columnTouchDelegate, this.columnTouchDelegate), 
                this.touchManager.addTouchRegion(this.rowTouchDelegate.dimension, this.rowTouchDelegate, this.rowTouchDelegate), 
                this.touchManager.addTouchRegion(this.bodyTouchDelegate.dimension, this.bodyTouchDelegate, this.bodyTouchDelegate), 
                this.touchManager.addTouchRegion(this.footerTouchDelegate.dimension, this.footerTouchDelegate, this.footerTouchDelegate);
            }, TablixControl.prototype.unBindTouchEvents = function() {
                this.isTouchEventsBound && (this.touchInterpreter.clearAllTouchEvents(), this.footerTouchInterpreter.clearAllTouchEvents(), 
                this.isTouchEventsBound = !1);
            }, TablixControl.prototype.bindTouchEvents = function() {
                this.isTouchEventsBound || (this.touchInterpreter.initTouch(this.mainDiv, null), 
                this.footerTouchInterpreter.initTouch(this.footerDiv, this.mainDiv), this.isTouchEventsBound = !0);
            }, TablixControl.prototype.InitializeScrollbars = function() {
                this.rowDim._initializeScrollbar(this.containerElement, null, this.options.layoutKind);
                var rowDimensionScrollbarStyle = this.rowDim.scrollbar.element.style;
                rowDimensionScrollbarStyle.position = "absolute", rowDimensionScrollbarStyle.top = "0" + TablixControl.UnitOfMeasurement, 
                rowDimensionScrollbarStyle.right = "0" + TablixControl.UnitOfMeasurement, this.rowDim.scrollbar.width = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                this.rowDim.scrollbar.show(!0), this.columnDim._initializeScrollbar(this.containerElement, null, this.options.layoutKind);
                var columnDimensionScrollbarStyle = this.columnDim.scrollbar.element.style;
                columnDimensionScrollbarStyle.position = "absolute", columnDimensionScrollbarStyle.left = "0" + TablixControl.UnitOfMeasurement, 
                columnDimensionScrollbarStyle.bottom = "0" + TablixControl.UnitOfMeasurement, this.columnDim.scrollbar.height = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                this.columnDim.scrollbar.show(!1);
            }, TablixControl.prototype.toggleTouchBindings = function(touchBindingEnabled) {
                this.isTouchEnabled && (touchBindingEnabled ? this.bindTouchEvents() : this.unBindTouchEvents());
            }, Object.defineProperty(TablixControl.prototype, "container", {
                get: function() {
                    return this.containerElement;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "contentHost", {
                get: function() {
                    return this.mainDiv;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "footerHost", {
                get: function() {
                    return this.footerDiv;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "className", {
                set: function(value) {
                    this.containerElement.className = value;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "hierarchyNavigator", {
                get: function() {
                    return this.hierarchyTablixNavigator;
                },
                enumerable: !1,
                configurable: !0
            }), TablixControl.prototype.getBinder = function() {
                return this.binder;
            }, Object.defineProperty(TablixControl.prototype, "autoSizeWidth", {
                get: function() {
                    return this._autoSizeWidth;
                },
                set: function(value) {
                    this._autoSizeWidth = value, value || (this.containerElement.style.minWidth = this.containerElement.style.maxWidth = "none");
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "autoSizeHeight", {
                get: function() {
                    return this._autoSizeHeight;
                },
                set: function(value) {
                    value || (this.containerElement.style.minHeight = this.containerElement.style.maxHeight = "none");
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "maxWidth", {
                get: function() {
                    return this.maximumWidth;
                },
                set: function(value) {
                    this.maximumWidth = value, this.containerElement.style.maxWidth = this.maximumWidth + TablixControl.UnitOfMeasurement;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "viewport", {
                get: function() {
                    return this.viewPort;
                },
                set: function(value) {
                    this.viewPort = value, this.containerElement.style.width = this.viewPort.width + TablixControl.UnitOfMeasurement, 
                    this.containerElement.style.height = this.viewPort.height + TablixControl.UnitOfMeasurement, 
                    this.rowDim.scrollbar.invalidateArrange(), this.columnDim.scrollbar.invalidateArrange(), 
                    this.controlLayoutManager.updateViewport(this.viewPort);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "maxHeight", {
                get: function() {
                    return this.maximumHeight;
                },
                set: function(value) {
                    this.maximumHeight = value, this.containerElement.style.maxHeight = this.maximumHeight + TablixControl.UnitOfMeasurement;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "minWidth", {
                get: function() {
                    return this.minimumWidth;
                },
                set: function(value) {
                    this.minimumWidth = value, this.containerElement.style.minWidth = this.minimumWidth + TablixControl.UnitOfMeasurement;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "minHeight", {
                get: function() {
                    return this.minimumHeight;
                },
                set: function(value) {
                    this.minimumHeight = value, this.containerElement.style.minHeight = this.minimumHeight + TablixControl.UnitOfMeasurement;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "fontSize", {
                get: function() {
                    return this.textFontSize;
                },
                set: function(value) {
                    this.textFontSize = value || TablixControl.DefaultFontSize, this.containerElement.style.fontSize = this.textFontSize;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "fontFamily", {
                get: function() {
                    return this.textFontFamily;
                },
                set: function(value) {
                    this.textFontFamily = value, this.containerElement.style.fontFamily = value;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "fontColor", {
                get: function() {
                    return this.textFontColor;
                },
                set: function(value) {
                    this.textFontColor = value, this.containerElement.style.color = value;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "scrollbarWidth", {
                set: function(value) {
                    this.scrollBarElementWidth = value, this.rowDim.scrollbar.width = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.columnDim.scrollbar.height = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement;
                },
                enumerable: !1,
                configurable: !0
            }), TablixControl.prototype.getIsTouchEventsBound = function() {
                return !!this.isTouchEventsBound;
            }, TablixControl.prototype.updateModels = function(resetScrollOffsets, rowModel, columnModel) {
                this.rowDim.model = rowModel, this.rowDim.modelDepth = this.hierarchyNavigator.getRowHierarchyDepth(), 
                this.columnDim.model = columnModel, this.columnDim.modelDepth = this.hierarchyNavigator.getColumnHierarchyDepth(), 
                resetScrollOffsets && (this.rowDim.scrollOffset = 0, this.columnDim.scrollOffset = 0), 
                this.layoutManager.updateColumnCount(this.rowDim, this.columnDim);
            }, TablixControl.prototype.updateColumnDimensions = function(rowHierarchyWidth, columnHierarchyWidth, count) {
                var gridDimensions = this.gridDimensions;
                gridDimensions.columnCount = count, gridDimensions.rowHierarchyWidth = rowHierarchyWidth, 
                gridDimensions.columnHierarchyWidth = columnHierarchyWidth;
            }, TablixControl.prototype.updateRowDimensions = function(columnHierarchyHeight, rowHierarchyHeight, rowHierarchyContentHeight, count, footerHeight) {
                var gridDimensions = this.gridDimensions;
                gridDimensions.rowCount = count, gridDimensions.rowHierarchyHeight = rowHierarchyHeight, 
                gridDimensions.rowHierarchyContentHeight = rowHierarchyContentHeight, gridDimensions.columnHierarchyHeight = columnHierarchyHeight, 
                gridDimensions.footerHeight = footerHeight;
            }, TablixControl.prototype.updateTouchDimensions = function() {
                var gridDimensions = this.gridDimensions;
                this.columnTouchDelegate.resize(gridDimensions.rowHierarchyWidth, 0, gridDimensions.columnHierarchyWidth, gridDimensions.columnHierarchyHeight), 
                this.columnTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth), 
                this.rowTouchDelegate.resize(0, gridDimensions.columnHierarchyHeight, gridDimensions.rowHierarchyWidth, gridDimensions.rowHierarchyHeight), 
                this.rowTouchDelegate.setScrollDensity(gridDimensions.rowCount / gridDimensions.rowHierarchyHeight), 
                this.bodyTouchDelegate.resize(gridDimensions.rowHierarchyWidth, gridDimensions.columnHierarchyHeight, gridDimensions.columnHierarchyWidth, gridDimensions.rowHierarchyHeight), 
                this.bodyTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth, gridDimensions.rowCount / gridDimensions.rowHierarchyHeight), 
                this.footerTouchDelegate.resize(gridDimensions.rowHierarchyWidth, gridDimensions.columnHierarchyHeight + gridDimensions.rowHierarchyHeight, gridDimensions.columnHierarchyWidth, gridDimensions.footerHeight), 
                this.footerTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth);
            }, TablixControl.prototype.onWheel = function(e) {
                this.determineDimensionToScroll(e, function(dimension, delta) {
                    dimension.scrollbar.onMouseWheel(-1 * delta);
                }), 0 === this.options.layoutKind && e.preventDefault();
            }, TablixControl.prototype.determineDimensionToScroll = function(e, scrollCallback) {
                this.rowDim.scrollbar.visible ? (e.deltaY && scrollCallback(this.rowDim, e.deltaY), 
                e.deltaX && this.columnDim.scrollbar.visible && scrollCallback(this.columnDim, e.deltaX)) : this.columnDim.scrollbar.visible && (e.deltaX ? scrollCallback(this.columnDim, e.deltaX) : e.deltaY && scrollCallback(this.columnDim, e.deltaY));
            }, Object.defineProperty(TablixControl.prototype, "layoutManager", {
                get: function() {
                    return this.controlLayoutManager;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "columnDimension", {
                get: function() {
                    return this.columnDim;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixControl.prototype, "rowDimension", {
                get: function() {
                    return this.rowDim;
                },
                enumerable: !1,
                configurable: !0
            }), TablixControl.prototype.refresh = function(clear) {
                this.render(clear, null);
            }, TablixControl.prototype._onScrollAsync = function(dimension) {
                var _this = this;
                requestAnimationFrame(function() {
                    _this.performPendingScroll(dimension);
                });
            }, TablixControl.prototype.performPendingScroll = function(dimension) {
                this.render(!1, dimension);
            }, TablixControl.prototype.updateHorizontalPosition = function() {
                this.rowDim.scrollbar.visible ? (this.columnDim.scrollbar.element.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                this.footerDiv.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                this.mainDiv.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement) : (this.columnDim.scrollbar.element.style.right = "0" + TablixControl.UnitOfMeasurement, 
                this.mainDiv.style.right = "0" + TablixControl.UnitOfMeasurement, this.footerDiv.style.right = "0" + TablixControl.UnitOfMeasurement);
            }, TablixControl.prototype.updateFooterVisibility = function() {
                (this.rowDim.hasFooter() ? "block" !== this.footerDiv.style.display : "none" !== this.footerDiv.style.display) && (this.footerDiv.style.display = this.rowDim.hasFooter() ? "block" : "none");
            }, TablixControl.prototype.updateVerticalPosition = function() {
                var hasVerticalScrollbar = this.rowDim.scrollbar.visible, isDashboardTile = 1 === this.controlLayoutManager.getLayoutKind();
                if (hasVerticalScrollbar || isDashboardTile) {
                    var mainBottom = this.footerDiv.offsetHeight, footerBottom = 0, verticalScrollbarBottom = 0;
                    this.columnDim.scrollbar.visible && (mainBottom += this.scrollBarElementWidth, footerBottom += this.scrollBarElementWidth, 
                    verticalScrollbarBottom = this.scrollBarElementWidth), this.mainDiv.style.bottom = mainBottom + TablixControl.UnitOfMeasurement, 
                    this.rowDim.scrollbar.element.style.bottom = verticalScrollbarBottom + TablixControl.UnitOfMeasurement, 
                    this.footerDiv.style.bottom = footerBottom + TablixControl.UnitOfMeasurement, this.footerDiv.style.removeProperty("top");
                } else this.footerDiv.style.top = this.gridDimensions.rowHierarchyContentHeight + TablixControl.UnitOfMeasurement, 
                this.footerDiv.style.removeProperty("bottom"), this.mainDiv.style.removeProperty("bottom");
            }, TablixControl.prototype.alreadyRendered = function(scrollingDimension) {
                return scrollingDimension === this.lastRenderingArgs.scrollingDimension && this.rowDimension.scrollOffset === this.lastRenderingArgs.rowScrollOffset && this.columnDimension.scrollOffset === this.lastRenderingArgs.columnScrollOffset;
            }, TablixControl.prototype.render = function(clear, scrollingDimension) {
                if (this.columnDim.makeScrollOffsetValid(), this.rowDim.makeScrollOffsetValid(), 
                clear || null === scrollingDimension) this.lastRenderingArgs = {}; else if (this.alreadyRendered(scrollingDimension)) return;
                var done = !1;
                this.renderIterationCount = 0, this.controlLayoutManager.onStartRenderingSession(scrollingDimension, this.mainDiv, clear);
                var binder = this.binder;
                binder.onStartRenderingSession();
                for (var priorFooterHeight = this.gridDimensions.footerHeight, priorRowHierarchyHeight = this.gridDimensions.rowHierarchyHeight, priorRowHierarchyContentHeight = this.gridDimensions.rowHierarchyContentHeight; !done && this.renderIterationCount < TablixControl.MaxRenderIterationCount; ) {
                    var hScrollbarVisibility = this.columnDim.scrollbar.visible, vScrollbarVisibility = this.rowDim.scrollbar.visible;
                    this.columnDim._onStartRenderingIteration(), this.rowDim._onStartRenderingIteration(), 
                    this.controlLayoutManager.onStartRenderingIteration(clear), this.renderCorner(), 
                    this.columnDim._render(), this.rowDim._render(), done = this.controlLayoutManager.onEndRenderingIteration(), 
                    this.columnDim._onEndRenderingIteration(), this.rowDim._onEndRenderingIteration(), 
                    hScrollbarVisibility !== this.columnDim.scrollbar.visible && this.updateVerticalPosition(), 
                    vScrollbarVisibility !== this.rowDim.scrollbar.visible && this.updateHorizontalPosition(), 
                    this.renderIterationCount++;
                }
                this.controlLayoutManager.onEndRenderingSession(), binder.onEndRenderingSession(), 
                this.isTouchEnabled && this.updateTouchDimensions(), this.lastRenderingArgs.rowScrollOffset = this.rowDimension.scrollOffset, 
                this.lastRenderingArgs.columnScrollOffset = this.columnDimension.scrollOffset, this.updateContainerDimensions();
                var lastRenderingArgs = this.lastRenderingArgs;
                lastRenderingArgs.rowScrollOffset = this.rowDimension.scrollOffset, lastRenderingArgs.columnScrollOffset = this.columnDimension.scrollOffset, 
                lastRenderingArgs.scrollingDimension = scrollingDimension, priorFooterHeight === this.gridDimensions.footerHeight && priorRowHierarchyHeight === this.gridDimensions.rowHierarchyHeight && priorRowHierarchyContentHeight === this.gridDimensions.rowHierarchyContentHeight || this.updateVerticalPosition(), 
                this.options.interactive && (this.columnDim.scrollbar.refresh(), this.rowDim.scrollbar.refresh());
            }, TablixControl.prototype.updateContainerDimensions = function() {
                var gridDimensions = this.gridDimensions;
                this._autoSizeWidth && (this.containerElement.style.width = gridDimensions.rowHierarchyWidth + gridDimensions.columnHierarchyWidth + (this.rowDim.scrollbar.visible ? this.scrollBarElementWidth : 0) + TablixControl.UnitOfMeasurement), 
                this._autoSizeHeight && (this.containerElement.style.height = gridDimensions.columnHierarchyHeight + gridDimensions.rowHierarchyHeight + gridDimensions.footerHeight + (this.columnDim.scrollbar.visible ? this.scrollBarElementWidth : 0) + TablixControl.UnitOfMeasurement);
            }, TablixControl.prototype.cornerCellMatch = function(item, cell) {
                var previousItem = cell.item;
                return 0 === cell.type && previousItem && this.hierarchyTablixNavigator.cornerCellItemEquals(item, previousItem);
            }, TablixControl.prototype.renderCorner = function() {
                for (var columnDepth = this.columnDim.getDepth(), rowDepth = this.rowDim.getDepth(), i = 0; i < columnDepth; i++) for (var j = 0; j < rowDepth; j++) {
                    var item = this.hierarchyTablixNavigator.getCorner(j, i), cell = this.controlLayoutManager.getOrCreateCornerCell(item, j, i);
                    this.cornerCellMatch(item, cell) || (this._unbindCell(cell), cell.type = 0, cell.item = item, 
                    this.binder.bindCornerCell(item, cell)), this.controlLayoutManager.onCornerCellRealized(item, cell);
                }
            }, TablixControl.prototype._unbindCell = function(cell) {
                switch (cell.type) {
                  case 3:
                    this.binder.unbindBodyCell(cell.item, cell);
                    break;

                  case 2:
                    this.binder.unbindColumnHeader(cell.item, cell);
                    break;

                  case 1:
                    this.binder.unbindRowHeader(cell.item, cell);
                    break;

                  case 0:
                    this.binder.unbindCornerCell(cell.item, cell);
                }
                cell.item = null, cell.type = null;
            }, TablixControl.prototype.onTouchEvent = function(args) {
                var colShift, rowShift, that;
                args && args.length > 0 && "columnDim" in args[0] && "rowDim" in args[0] && (colShift = (that = args[0]).columnDim.scrollbar.visible ? args[1] : 0, 
                rowShift = that.rowDim.scrollbar.visible ? args[2] : 0, that.columnDim.scrollbar.viewMin = Math.max(0, that.columnDim.scrollbar.viewMin + colShift), 
                that.columnDim.scrollOffset = Math.max(0, that.columnDim.scrollOffset + colShift), 
                that.rowDim.scrollbar.viewMin = Math.max(0, that.rowDim.scrollbar.viewMin + rowShift), 
                that.rowDim.scrollOffset = Math.max(0, that.rowDim.scrollOffset + rowShift), that._onScrollAsync(0 === colShift ? that.rowDim : 0 === rowShift ? that.columnDim : null));
            }, TablixControl.UnitOfMeasurement = "px", TablixControl.TablixContainerClassName = "tablixContainer", 
            TablixControl.TablixTableAreaClassName = "tablixTableArea", TablixControl.TablixFooterClassName = "tableFooterArea", 
            TablixControl.DefaultFontSize = StandaloneUtility1.FP.fromPoint(TablixDefaultTextSize), 
            TablixControl.MaxRenderIterationCount = 10, TablixControl;
        }();
    },
    74304: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            U: function() {
                return TablixPropertyManager;
            }
        });
        var tslib_es6 = __webpack_require__(81337), pivotTable_capabilities = __webpack_require__(67016), tableEx_capabilities = __webpack_require__(60014), matrix_capabilities = __webpack_require__(85196), conditional_formatting_util = __webpack_require__(29324), converterHelper = __webpack_require__(54522), dataLabelViewModel1Consts = __webpack_require__(56707), textHelper = __webpack_require__(85028), units = __webpack_require__(32105), visualLocKeys = __webpack_require__(33024), tablixProperties = __webpack_require__(55007), sparklineChartType = __webpack_require__(85308), debug = __webpack_require__(62458), build_control_util = __webpack_require__(56578), StandaloneUtility1 = __webpack_require__(64329), dataViewObject2 = __webpack_require__(82755), dataViewObject3 = __webpack_require__(76045), dataViewRoleWildcard = __webpack_require__(91059), dataViewWildcard = __webpack_require__(96915), dataViewMatrixUtils = __webpack_require__(82386), dataViewRegression = __webpack_require__(86878), valueFormatter = __webpack_require__(72489), tablixConstants = __webpack_require__(71090), ITablixFormatting = __webpack_require__(73889), pivotTableLayout = __webpack_require__(66842), rowSubtotalPosition = __webpack_require__(40845), TablixPropertyManager = function() {
            function TablixPropertyManager(style) {
                this.tablixProperties = new tablixProperties.FX(style);
            }
            return TablixPropertyManager.getMetadataObjects = function(dataView) {
                return dataView && dataView.metadata ? dataView.metadata.objects : null;
            }, TablixPropertyManager.prototype.enumerateObjectRepetition = function(enumeration, dataView, tablixType, featureSwitches) {
                var _a, _b, _c, _d, _e, _f, _g;
                debug.fF.assertValue(enumeration, "enumeration should be defined"), debug.fF.assertValue(dataView, "dataView can't be undefined");
                var columns, selectorData = this.getSelectorData(tablixType);
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                  case ITablixFormatting.Y.TableEx:
                    columns = this.getTableColumnMetadata(dataView);
                    break;

                  case ITablixFormatting.Y.Matrix:
                  case ITablixFormatting.Y.PivotTable:
                    columns = this.getMatrixValuesColumnMetadata(dataView);
                    break;

                  default:
                    return void debug.fF.assertNever(tablixType);
                }
                if (columns) {
                    columns = _.uniq(columns);
                    for (var isNewVisual = tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx, _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                        var column = columns_1[_i], isSparkline = null === (_g = column.type.misc) || void 0 === _g ? void 0 : _g.sparkline;
                        if (isNewVisual) {
                            var backColorScalesRepetition = {
                                containerName: column.displayName,
                                selector: this.getSelector(column.queryName, selectorData),
                                allowOverrideSubtotalMatching: !0,
                                objects: (_b = {}, _b[this.tablixProperties.PropValuesBackColor.objectName] = {
                                    formattingProperties: [ this.tablixProperties.PropValuesBackColor.propertyName ]
                                }, _b)
                            };
                            if (enumeration.push(backColorScalesRepetition), !isSparkline) {
                                var fontColorScalesRepetition = {
                                    containerName: column.displayName,
                                    selector: this.getSelector(column.queryName, selectorData),
                                    allowOverrideSubtotalMatching: !0,
                                    objects: (_c = {}, _c[this.tablixProperties.PropValuesFontColor.objectName] = {
                                        formattingProperties: [ this.tablixProperties.PropValuesFontColor.propertyName ]
                                    }, _c)
                                };
                                enumeration.push(fontColorScalesRepetition);
                            }
                            if (column.type.numeric && !isSparkline) {
                                var dataBarsRepetition = {
                                    containerName: column.displayName,
                                    selector: this.getSelector(column.queryName),
                                    objects: (_d = {}, _d[tablixProperties.FX.PropColumnFormattingDataBars.objectName] = {
                                        formattingProperties: [ tablixProperties.FX.PropColumnFormattingDataBars.propertyName ]
                                    }, _d)
                                };
                                enumeration.push(dataBarsRepetition);
                            }
                            var iconRepetition = {
                                containerName: column.displayName,
                                selector: this.getSelector(column.queryName, selectorData),
                                altStaticSelector: this.getSelector(column.queryName),
                                allowOverrideSubtotalMatching: !0,
                                objects: (_e = {}, _e[tablixProperties.FX.PropValuesIcon.objectName] = {
                                    formattingProperties: [ tablixProperties.FX.PropValuesIcon.propertyName ]
                                }, _e)
                            };
                            if (enumeration.push(iconRepetition), isNewVisual && (null == featureSwitches ? void 0 : featureSwitches.conditionalTablixWebURL) && !(0, 
                            converterHelper.cR)(column) && !isSparkline) {
                                var webURLRepetition = {
                                    containerName: column.displayName,
                                    selector: this.getSelector(column.queryName, selectorData),
                                    allowOverrideSubtotalMatching: !0,
                                    objects: (_f = {}, _f[tablixProperties.FX.PropValuesWebURL.objectName] = {
                                        formattingProperties: [ tablixProperties.FX.PropValuesWebURL.propertyName ]
                                    }, _f)
                                };
                                enumeration.push(webURLRepetition);
                            }
                        } else {
                            if (!column.isMeasure || !column.type.numeric) continue;
                            var backColorScalesRepetition_1 = {
                                containerName: column.displayName,
                                selector: this.getSelector(column.queryName, selectorData),
                                objects: (_a = {}, _a[this.tablixProperties.PropValuesBackColor.objectName] = {
                                    formattingProperties: [ this.tablixProperties.PropValuesBackColor.propertyName ]
                                }, _a)
                            };
                            enumeration.push(backColorScalesRepetition_1);
                        }
                    }
                }
            }, TablixPropertyManager.prototype.getSelectorData = function(tablixType) {
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                    return [ (0, dataViewRoleWildcard.Yp)([ "Values" ]) ];

                  case ITablixFormatting.Y.TableEx:
                    return [ (0, dataViewWildcard.Ue)(1) ];

                  case ITablixFormatting.Y.Matrix:
                    return [ (0, dataViewRoleWildcard.Yp)([ "Rows", "Columns" ]) ];

                  case ITablixFormatting.Y.PivotTable:
                    return [ (0, dataViewWildcard.Ue)(1) ];

                  default:
                    return void debug.fF.assertNever(tablixType);
                }
            }, TablixPropertyManager.prototype.getConditionalFormattingSelector = function(tablixType, columnQueryName, includeSelectorData) {
                void 0 === includeSelectorData && (includeSelectorData = !0);
                var selectorData = includeSelectorData ? this.getSelectorData(tablixType) : void 0;
                return this.getSelector(columnQueryName, selectorData);
            }, TablixPropertyManager.prototype.getSelector = function(columnQueryName, selectorData) {
                var selector = {
                    metadata: columnQueryName
                };
                return selectorData && (selector.data = selectorData), selector;
            }, TablixPropertyManager.prototype.getFormattingModel = function(hostServices, formattingProperties, dataView, tablixType, isEnabled, featureSwitches, style) {
                void 0 === isEnabled && (isEnabled = !1), debug.fF.assertValue(dataView, "dataView can't be undefined");
                var totalsShown, objects = TablixPropertyManager.getMetadataObjects(dataView), pivotTableFormattingProperties = formattingProperties, tableExFormattingProperties = formattingProperties, columnsMetadata = this.getColumnsMetadata(dataView, tablixType);
                totalsShown = tablixType === ITablixFormatting.Y.Table ? this.shouldShowTableTotalsOption(dataView) && tablixProperties.FX.PropGeneralTableTotals.getValue(objects) : this.shouldShowColumnSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixColumnSubtotals.getValue(objects) || this.shouldShowRowSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixRowSubtotals.getValue(objects);
                var textClassProperties = this.getTablixTextClassProperties(style), modelBuilder = new build_control_util.Nq(this.getStylePresetCard(hostServices, pivotTableFormattingProperties, tablixType, featureSwitches), this.getGridCard(hostServices, formattingProperties, tablixType, objects, textClassProperties, featureSwitches), this.getBlankRowCard(hostServices, pivotTableFormattingProperties, tablixType, featureSwitches), this.getValueCard(hostServices, formattingProperties, tablixType, objects, featureSwitches), this.getColumnHeadersCard(hostServices, formattingProperties, tablixType, featureSwitches), this.getRowHeadersCard(hostServices, pivotTableFormattingProperties, tablixType, objects, isEnabled, featureSwitches), this.getTotalsCard(hostServices, tableExFormattingProperties, tablixType, featureSwitches), this.getColumnSubtotalCard(hostServices, pivotTableFormattingProperties, dataView, tablixType, totalsShown, featureSwitches), this.getRowSubTotalsCard(hostServices, pivotTableFormattingProperties, dataView, tablixType, totalsShown, featureSwitches), this.getColumnGrandTotalsCard(hostServices, pivotTableFormattingProperties, tablixType), this.getRowGrandTotalsCard(hostServices, pivotTableFormattingProperties, tablixType), this.getColumnFormattingCard(hostServices, formattingProperties, columnsMetadata, tablixType), this.getCellColumnCard(hostServices, tablixType, dataView, featureSwitches), this.getUrlIconCard(hostServices, formattingProperties, tablixType), this.getImageSizeCard(hostServices, formattingProperties, tablixType, featureSwitches), this.getSparklinesCard(columnsMetadata, hostServices, tablixType)), rowsColumns = this.getMatrixRowsColumnMetadata(dataView), columnsColumns = this.getMatrixColumnsColumnMetadata(dataView), card = featureSwitches.a11yShowAsMatrix ? this.getAccessibilityCardNew(rowsColumns, columnsColumns, columnsMetadata, hostServices, tableExFormattingProperties, tablixType) : this.getAccessibilityCard(columnsMetadata, hostServices, tableExFormattingProperties, tablixType);
                return card && modelBuilder.addCards(card), modelBuilder.build();
            }, TablixPropertyManager.prototype.getLayoutSlice = function(formattingProperties, localize) {
                return new build_control_util.vi({
                    uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("visualPlaceholderCard"), "visualPlaceholderGroup"), "layout"),
                    control: new build_control_util.uY({
                        descriptor: pivotTable_capabilities.t.general.layout,
                        value: formattingProperties.general.layout
                    }).build(),
                    localize
                }).build();
            }, TablixPropertyManager.prototype.getIndentationSlice = function(formattingProperties, localize) {
                if (formattingProperties.general.layout === pivotTableLayout.t.Compact) {
                    var rowHeaderProperties = formattingProperties.rowHeaders;
                    return new build_control_util.vi({
                        uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("visualPlaceholderCard"), "visualPlaceholderGroup"), "indentation"),
                        control: this.getIndentationSliderBuilder(rowHeaderProperties, localize).build(),
                        localize
                    }).build();
                }
            }, TablixPropertyManager.prototype.getRepeatRowHeadersSlice = function(formattingProperties, localize) {
                if (formattingProperties.general.layout !== pivotTableLayout.t.Compact) return new build_control_util.vi({
                    uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("visualPlaceholderCard"), "visualPlaceholderGroup"), "repeatRowHeaders"),
                    control: new build_control_util.bd({
                        descriptor: pivotTable_capabilities.t.rowHeaders.repeatRowHeaders,
                        value: formattingProperties.rowHeaders.repeatRowHeaders
                    }).build(),
                    localize
                }).build();
            }, TablixPropertyManager.prototype.getStylePresetCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                var _this = this, styleCardDisplayName = "StylePresets";
                featureSwitches.matrixLayouts && tablixType === ITablixFormatting.Y.PivotTable && (styleCardDisplayName = "Layout_And_StylePresets");
                var localize = function(key) {
                    return hostServices.getLocalizedString(key);
                }, stylePresetCardBuilder = new build_control_util.CQ(new build_control_util.lg("stylePreset"), styleCardDisplayName, [ pivotTable_capabilities.t.general.layout, pivotTable_capabilities.t.rowHeaders.steppedLayoutIndentation, pivotTable_capabilities.t.rowHeaders.repeatRowHeaders ], localize);
                return stylePresetCardBuilder.addGroup(void 0, function(groupBuilder) {
                    if (groupBuilder.addSlicePlaceholder((0, build_control_util.E0)("stylePreset")), 
                    featureSwitches.matrixLayouts && tablixType === ITablixFormatting.Y.PivotTable) {
                        var layoutSlice = _this.getLayoutSlice(formattingProperties, localize), indentationSlice = _this.getIndentationSlice(formattingProperties, localize), repeatRowHeadersSlice = _this.getRepeatRowHeadersSlice(formattingProperties, localize);
                        groupBuilder.addSlice(layoutSlice), indentationSlice && groupBuilder.addSlice(indentationSlice), 
                        repeatRowHeadersSlice && groupBuilder.addSlice(repeatRowHeadersSlice);
                    }
                }), stylePresetCardBuilder.build();
            }, TablixPropertyManager.prototype.getBlankRowCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                if (featureSwitches.matrixLayouts && tablixType === ITablixFormatting.Y.PivotTable) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, blankRowCardProp = pivotTable_capabilities.t.blankRows, cardBuilder = new build_control_util.CQ(new build_control_util.lg("blankRows"), "Visual_Blank_Rows", blankRowCardProp, localize).addTopLevelToggle("blankRow", function() {
                        return new build_control_util.bd({
                            descriptor: blankRowCardProp.showBlankRows,
                            value: formattingProperties.blankRows.showBlankRows
                        }).build();
                    });
                    return cardBuilder.addGroup("colors", function(groupBuilder) {
                        groupBuilder.withDisplayName("Generic_Color").addSimpleSlice("blankRowColor", function() {
                            return new build_control_util.BT({
                                descriptor: blankRowCardProp.blankRowColor,
                                value: {
                                    value: formattingProperties.blankRows.blankRowColor
                                }
                            }).build();
                        }).addSimpleSlice("blankRowTransparency", new build_control_util.JN({
                            descriptor: blankRowCardProp.blankRowTransparency,
                            value: formattingProperties.blankRows.blankRowTransparency,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 100
                                },
                                unitSymbol: visualLocKeys.t2
                            },
                            localize
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Transparency");
                        });
                    }), cardBuilder.addGroup("border", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Border").addTopLevelToggle("blankRowBorder", function() {
                            return new build_control_util.bd({
                                descriptor: blankRowCardProp.showBorder,
                                value: formattingProperties.blankRows.showBorder
                            }).build();
                        }).addSimpleSlice("blankRowBorderPosition", function() {
                            return new build_control_util.uY({
                                descriptor: blankRowCardProp.borderPosition,
                                value: formattingProperties.blankRows.borderPosition
                            }).build();
                        }).addSimpleSlice("blankRowBorderColor", function() {
                            return new build_control_util.BT({
                                descriptor: blankRowCardProp.borderColor,
                                value: {
                                    value: formattingProperties.blankRows.borderColor
                                }
                            }).build();
                        }).addSimpleSlice("blankRowBorderTransparency", new build_control_util.JN({
                            descriptor: blankRowCardProp.borderTransparency,
                            value: formattingProperties.blankRows.borderTransparency,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 100
                                },
                                unitSymbol: visualLocKeys.t2
                            },
                            localize
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Transparency");
                        }).addSimpleSlice("blankRowBorderWidth", new build_control_util.mu({
                            descriptor: blankRowCardProp.borderWidth,
                            value: formattingProperties.blankRows.borderWidth,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 10
                                },
                                unitSymbol: visualLocKeys.e_
                            }
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getGridCard = function(hostServices, formattingProperties, tablixType, objects, textClassProperties, featureSwitches) {
                var localize = function(key) {
                    return hostServices.getLocalizedString(key);
                }, initialGridPropIds = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.grid : pivotTable_capabilities.t.grid, valuesProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.values : pivotTable_capabilities.t.values, valuesOutlineStyle = valuesProps.outlineStyle, valuesOutlineWeight = valuesProps.outlineWeight, valuesOutlineColor = valuesProps.outlineColor, columnHeadersProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.columnHeaders : pivotTable_capabilities.t.columnHeaders, columnHeadersOutlineStyle = columnHeadersProps.outlineStyle, columnHeadersOutlineWeight = columnHeadersProps.outlineWeight, columnHeadersOutlineColor = columnHeadersProps.outlineColor, totalsProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.total : pivotTable_capabilities.t.total, totalsOutlineStyle = totalsProps.outlineStyle, totalsOutlineWeight = totalsProps.outlineWeight, totalsOutlineColor = totalsProps.outlineColor, rowHeaderProps = pivotTable_capabilities.t.rowHeaders, rowHeaderOutlineStyle = rowHeaderProps.outlineStyle, rowHeaderOutlineWeight = rowHeaderProps.outlineWeight, rowHeaderOutlineColor = rowHeaderProps.outlineColor, outlineStyle = initialGridPropIds.outlineStyle, gridCardPropIds = (0, 
                tslib_es6.__rest)(initialGridPropIds, [ "imageHeight", "imageWidth", "outline", "outlineStyle" ]);
                gridCardPropIds = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gridCardPropIds), {
                    outlineStyle,
                    valuesOutlineStyle,
                    valuesOutlineWeight,
                    valuesOutlineColor,
                    columnHeadersOutlineStyle,
                    columnHeadersOutlineWeight,
                    columnHeadersOutlineColor
                }), tablixType === ITablixFormatting.Y.TableEx && (gridCardPropIds = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, gridCardPropIds), {
                    totalsOutlineStyle,
                    totalsOutlineColor,
                    totalsOutlineWeight
                })), tablixType === ITablixFormatting.Y.PivotTable && (gridCardPropIds = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, gridCardPropIds), {
                    rowHeaderOutlineStyle,
                    rowHeaderOutlineWeight,
                    rowHeaderOutlineColor
                }));
                var tableGridData = formattingProperties.grid, cardBuilder = new build_control_util.CQ(new build_control_util.lg("grid"), "Visual_Grid", gridCardPropIds, localize);
                return cardBuilder.addGroup("gridHorizontal", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Gridline_Horizontal").addTopLevelToggle("gridHorizontal", function() {
                        return new build_control_util.bd({
                            descriptor: gridCardPropIds.gridHorizontal,
                            value: tableGridData.gridHorizontal
                        }).build();
                    }).addSimpleSlice("gridHorizontalColor", function() {
                        return new build_control_util.BT({
                            descriptor: gridCardPropIds.gridHorizontalColor,
                            value: {
                                value: tableGridData.gridHorizontalColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice("gridHorizontalWeight", new build_control_util.mu({
                        descriptor: gridCardPropIds.gridHorizontalWeight,
                        value: tableGridData.gridHorizontalWeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }), cardBuilder.addGroup("gridVertical", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Gridline_Vertical").addTopLevelToggle("gridVertical", function() {
                        return new build_control_util.bd({
                            descriptor: gridCardPropIds.gridVertical,
                            value: tableGridData.gridVertical
                        }).build();
                    }).addSimpleSlice("gridVerticalColor", function() {
                        return new build_control_util.BT({
                            descriptor: gridCardPropIds.gridVerticalColor,
                            value: {
                                value: tableGridData.gridVerticalColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice("gridVerticalWeight", new build_control_util.mu({
                        descriptor: gridCardPropIds.gridVerticalWeight,
                        value: tableGridData.gridVerticalWeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }), cardBuilder.addGroup("border", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Border").addContainer("outline", function(containerBuilder) {
                        containerBuilder.withDisplayName("Section"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                            containerItemBuilder.addSimpleSlice("outlineStyle", function() {
                                return new build_control_util.oM({
                                    descriptor: gridCardPropIds.outlineStyle,
                                    value: tableGridData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColor", function() {
                                return new build_control_util.BT({
                                    descriptor: gridCardPropIds.outlineColor,
                                    value: {
                                        value: tableGridData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeight", new build_control_util.mu({
                                descriptor: gridCardPropIds.outlineWeight,
                                value: tableGridData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }).addContainerItem("columnHeaders", localize("Visual_Tablix_ColumnHeader"), function(containerItemBuilder) {
                            var columnHeadersData = formattingProperties.columnHeaders;
                            containerItemBuilder.addSimpleSlice("outlineStyleColumnHeaders", function() {
                                return new build_control_util.oM({
                                    descriptor: columnHeadersOutlineStyle,
                                    value: columnHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColorColumnHeaders", function() {
                                return new build_control_util.BT({
                                    descriptor: columnHeadersOutlineColor,
                                    value: {
                                        value: columnHeadersData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightColumnHeaders", new build_control_util.mu({
                                descriptor: columnHeadersOutlineWeight,
                                value: columnHeadersData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), tablixType === ITablixFormatting.Y.PivotTable && containerBuilder.addContainerItem("rowHeaders", localize("Visual_Tablix_RowHeaders"), function(containerItemBuilder) {
                            var rowHeadersData = formattingProperties.rowHeaders;
                            containerItemBuilder.addSimpleSlice("outlineStyleRowHeaders", function() {
                                return new build_control_util.oM({
                                    descriptor: rowHeaderOutlineStyle,
                                    value: rowHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColorRowHeaders", function() {
                                return new build_control_util.BT({
                                    descriptor: rowHeaderOutlineColor,
                                    value: {
                                        value: rowHeadersData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightRowHeaders", new build_control_util.mu({
                                descriptor: rowHeaderOutlineWeight,
                                value: rowHeadersData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), containerBuilder.addContainerItem("values", localize("Visual_Tablix_ValuesSection"), function(containerItemBuilder) {
                            var valuesData = formattingProperties.values;
                            containerItemBuilder.addSimpleSlice("outlineStyleValues", function() {
                                return new build_control_util.oM({
                                    descriptor: valuesOutlineStyle,
                                    value: valuesData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }).addSimpleSlice("outlineColorValues", function() {
                                return new build_control_util.BT({
                                    descriptor: valuesOutlineColor,
                                    value: {
                                        value: valuesData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightValues", new build_control_util.mu({
                                descriptor: valuesOutlineWeight,
                                value: valuesData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), tablixType === ITablixFormatting.Y.TableEx && containerBuilder.addContainerItem("outline-totals", localize("Visual_Tablix_TotalsSection"), function(containerItemBuilder) {
                            var totalsData = formattingProperties.total;
                            containerItemBuilder.addSimpleSlice("outlineStyleTotals", function() {
                                return new build_control_util.oM({
                                    descriptor: totalsOutlineStyle,
                                    value: totalsData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }).addSimpleSlice("outlineColorTotals", function() {
                                return new build_control_util.BT({
                                    descriptor: totalsOutlineColor,
                                    value: {
                                        value: totalsData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightTotals", new build_control_util.mu({
                                descriptor: totalsOutlineWeight,
                                value: totalsData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        });
                    });
                }), cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("rowPadding", new build_control_util.mu({
                        descriptor: gridCardPropIds.rowPadding,
                        value: tableGridData.rowPadding,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 20
                            }
                        }
                    }).build()).addSimpleSlice("textSize", function() {
                        return new build_control_util.mu({
                            descriptor: gridCardPropIds.textSize,
                            value: tablixProperties.FX.PropGridPivotTableTextSize.setInstanceProperty(void 0, objects, textClassProperties.fontSizeOverrideFn, textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt),
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 8
                                },
                                maxValue: {
                                    type: 1,
                                    value: 60
                                }
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Global_Font_Size");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getValueCard = function(hostServices, formattingProperties, tablixType, objects, featureSwitches) {
                var valueProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.values : pivotTable_capabilities.t.values, [ "webURL", "urlIcon", "icon", "bandedRowHeaders", "outlineStyle", "outlineWeight", "outlineColor" ]), valueData = formattingProperties.values, cardBuilder = new build_control_util.CQ(new build_control_util.lg("values"), "Visual_Tablix_Values", valueProps, function(key) {
                    return hostServices.getLocalizedString(key);
                }), fontControl = (new build_control_util.UN).withFontFamily({
                    descriptor: valueProps.fontFamily,
                    value: valueData.fontFamily
                }).withFontSizeProperties({
                    descriptor: valueProps.fontSize,
                    value: valueData.fontSize.pt
                }).withBold({
                    descriptor: valueProps.bold,
                    value: valueData.bold
                }).withItalic({
                    descriptor: valueProps.italic,
                    value: valueData.italic
                }).withUnderline({
                    descriptor: valueProps.underline,
                    value: valueData.underline
                }).build();
                return cardBuilder.addGroup("values", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Tablix_Values"), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("fontColorPrimary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.fontColorPrimary,
                            value: {
                                value: valueData.fontColorPrimary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColorPrimary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.backColorPrimary,
                            value: {
                                value: valueData.backColorPrimary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }).addSimpleSlice("fontColorSecondary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.fontColorSecondary,
                            value: {
                                value: valueData.fontColorSecondary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_AlternateText_Color");
                    }).addSimpleSlice("backColorSecondary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.backColorSecondary,
                            value: {
                                value: valueData.backColorSecondary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_BackColorSecondary");
                    }).addSimpleSlice("textWrap", new build_control_util.bd({
                        descriptor: valueProps.wordWrap,
                        value: valueData.wordWrap
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("TextWrap");
                    });
                }), tablixType === ITablixFormatting.Y.PivotTable && cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("valuesOnRow", new build_control_util.bd({
                        descriptor: valueProps.valuesOnRow,
                        value: tablixProperties.FX.PropValuesOnRow.setInstanceProperty(void 0, objects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_PivotTable_ValuesSwitchToRows");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getColumnHeadersCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                var columnHeadersProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.columnHeaders : pivotTable_capabilities.t.columnHeaders, [ "urlIcon", "outlineStyle", "outlineWeight", "outlineColor" ]), columnHeadersData = formattingProperties.columnHeaders, cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnHeaders"), "Visual_Tablix_ColumnHeaders", columnHeadersProps, function(key) {
                    return hostServices.getLocalizedString(key);
                }), fontControl = (new build_control_util.UN).withFontFamily({
                    descriptor: columnHeadersProps.fontFamily,
                    value: columnHeadersData.fontFamily
                }).withFontSizeProperties({
                    descriptor: columnHeadersProps.fontSize,
                    value: columnHeadersData.fontSize.pt
                }).withBold({
                    descriptor: columnHeadersProps.bold,
                    value: columnHeadersData.bold
                }).withItalic({
                    descriptor: columnHeadersProps.italic,
                    value: columnHeadersData.italic
                }).withUnderline({
                    descriptor: columnHeadersProps.underline,
                    value: columnHeadersData.underline
                }).build();
                return cardBuilder.addGroup("text", function(groupBuilder) {
                    groupBuilder.withDisplayName("Text"), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("fontColor", function() {
                        return new build_control_util.BT({
                            descriptor: columnHeadersProps.fontColor,
                            value: {
                                value: columnHeadersData.fontColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColor", function() {
                        return new build_control_util.BT({
                            descriptor: columnHeadersProps.backColor,
                            value: {
                                value: columnHeadersData.backColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }), tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || groupBuilder.addSimpleSlice("alignment", new build_control_util.Gp({
                        descriptor: columnHeadersProps.alignment,
                        value: columnHeadersData.alignment,
                        mode: "horizontalAlignment",
                        supportsNoSelection: !0
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_TextAlignment_Header");
                    }), tablixType === ITablixFormatting.Y.PivotTable && groupBuilder.addSimpleSlice("titleAlignment", new build_control_util.Gp({
                        descriptor: columnHeadersProps.titleAlignment,
                        value: formattingProperties.columnHeaders.titleAlignment,
                        mode: "horizontalAlignment",
                        supportsNoSelection: !0
                    }).build()), tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || groupBuilder.addSimpleSlice("wordWrap", new build_control_util.bd({
                        descriptor: columnHeadersProps.wordWrap,
                        value: columnHeadersData.wordWrap
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("TextWrap");
                    });
                }), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("autoSizeColumnWidth", new build_control_util.bd({
                        descriptor: columnHeadersProps.autoSizeColumnWidth,
                        value: formattingProperties.general.autoSizeColumnWidth
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_AutoSize_Width");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getRowHeadersCard = function(hostServices, formattingProperties, tablixType, objects, isEnabled, featureSwitches) {
                var _this = this;
                if (void 0 === isEnabled && (isEnabled = !1), tablixType === ITablixFormatting.Y.PivotTable) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableRowHeaderProps = (0, tslib_es6.__rest)(pivotTable_capabilities.t.rowHeaders, [ "urlIcon", "outlineStyle", "outlineWeight", "outlineColor", "legacyStyleDisabled" ]), bandedRowHeaders = pivotTable_capabilities.t.values.bandedRowHeaders;
                    tablixType === ITablixFormatting.Y.PivotTable && (pivotTableRowHeaderProps = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowHeaderProps), {
                        bandedRowHeaders
                    }));
                    var pivotTableRowHeadersData = formattingProperties.rowHeaders, cardBuilder = new build_control_util.CQ(new build_control_util.lg("rowHeaders"), "Visual_Tablix_RowHeaders", pivotTableRowHeaderProps, localize), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: pivotTableRowHeaderProps.fontFamily,
                        value: pivotTableRowHeadersData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableRowHeaderProps.fontSize,
                        value: pivotTableRowHeadersData.fontSize.pt
                    }).withBold({
                        descriptor: pivotTableRowHeaderProps.bold,
                        value: pivotTableRowHeadersData.bold
                    }).withItalic({
                        descriptor: pivotTableRowHeaderProps.italic,
                        value: pivotTableRowHeadersData.italic
                    }).withUnderline({
                        descriptor: pivotTableRowHeaderProps.underline,
                        value: pivotTableRowHeadersData.underline
                    }).build();
                    return cardBuilder.addGroup("text", function(groupBuilder) {
                        groupBuilder.withDisplayName("Text"), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                        groupBuilder.addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowHeaderProps.fontColor,
                                value: {
                                    value: pivotTableRowHeadersData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowHeaderProps.backColor,
                                value: {
                                    value: pivotTableRowHeadersData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }), tablixType === ITablixFormatting.Y.PivotTable && groupBuilder.addSimpleSlice("bandedRowHeaders", new build_control_util.bd({
                            descriptor: pivotTableRowHeaderProps.bandedRowHeaders,
                            value: tablixProperties.FX.PropValuesBandedRowHeaders.setInstanceProperty(void 0, objects)
                        }).build()), groupBuilder.addSimpleSlice("alignment", new build_control_util.Gp({
                            descriptor: pivotTableRowHeaderProps.alignment,
                            value: pivotTableRowHeadersData.alignment,
                            mode: "horizontalAlignment",
                            supportsNoSelection: !0
                        }).build()).addSimpleSlice("wordWrap", new build_control_util.bd({
                            descriptor: pivotTableRowHeaderProps.wordWrap,
                            value: pivotTableRowHeadersData.wordWrap
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("TextWrap");
                        });
                    }), tablixType === ITablixFormatting.Y.PivotTable && isEnabled && cardBuilder.addGroup("expandCollapseButtons", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_PivotTable_ExpandCollapseButtons_Toggle"), 
                        groupBuilder.addTopLevelToggle("showExpandCollapseButtons", function() {
                            return new build_control_util.bd({
                                descriptor: pivotTableRowHeaderProps.showExpandCollapseButtons,
                                value: pivotTableRowHeadersData.showExpandCollapseButtons
                            }).build();
                        }).addSimpleSlice("expandCollapseButtonsColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowHeaderProps.expandCollapseButtonsColor,
                                value: {
                                    value: pivotTableRowHeadersData.expandCollapseButtonsColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Generic_Color");
                        }).addSimpleSlice("expandCollapseButtonsSize", new build_control_util.mu({
                            descriptor: pivotTableRowHeaderProps.expandCollapseButtonsSize,
                            value: pivotTableRowHeadersData.expandCollapseButtonsSize.pt,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 8
                                },
                                maxValue: {
                                    type: 1,
                                    value: 60
                                },
                                unitSymbol: "Numeric_Pixel"
                            }
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_BubbleSize");
                        });
                    }), featureSwitches.matrixLayouts || cardBuilder.addGroup("options", function(groupBuilder) {
                        groupBuilder.withDisplayName("Desktop_FileMenu_Options"), groupBuilder.addSimpleSlice("stepped", new build_control_util.bd({
                            descriptor: pivotTableRowHeaderProps.stepped,
                            value: pivotTableRowHeadersData.steppedLayout
                        }).build()).addSimpleSlice("steppedLayoutIndentation", _this.getIndentationSliderBuilder(pivotTableRowHeadersData, localize).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getIndentationSliderBuilder = function(pivotTableRowHeadersData, localize) {
                return new build_control_util.JN({
                    descriptor: pivotTable_capabilities.t.rowHeaders.steppedLayoutIndentation,
                    value: pivotTableRowHeadersData.steppedLayoutIndentation,
                    localize,
                    options: {
                        minValue: {
                            type: 0,
                            value: 0
                        },
                        maxValue: {
                            type: 1,
                            value: 150
                        }
                    }
                });
            }, TablixPropertyManager.prototype.getTotalsCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                if (tablixType === ITablixFormatting.Y.TableEx) {
                    var totalsProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.total : pivotTable_capabilities.t.total, [ "outlineStyle", "outlineWeight", "outlineColor" ]), tableTotalsData = formattingProperties.total, cardBuilder = new build_control_util.CQ(new build_control_util.lg("totals"), "Visual_Totals", totalsProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: totalsProps.fontFamily,
                        value: tableTotalsData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: totalsProps.fontSize,
                        value: tableTotalsData.fontSize.pt
                    }).withBold({
                        descriptor: totalsProps.bold,
                        value: tableTotalsData.bold
                    }).withItalic({
                        descriptor: totalsProps.italic,
                        value: tableTotalsData.italic
                    }).withUnderline({
                        descriptor: totalsProps.underline,
                        value: tableTotalsData.underline
                    }).build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        var showProperties;
                        groupBuilder.withDisplayName("Visual_Tablix_Values"), tablixType === ITablixFormatting.Y.TableEx ? (groupBuilder.addTopLevelToggle("gridVertical", function() {
                            return new build_control_util.bd({
                                descriptor: totalsProps.totals,
                                value: formattingProperties.general.totals
                            }).build();
                        }), showProperties = formattingProperties.general.totals) : showProperties = !0, 
                        showProperties && groupBuilder.addSimpleSlice("totalLabel", new build_control_util.fq({
                            descriptor: totalsProps.label,
                            value: tableTotalsData.totalLabel,
                            placeholder: ""
                        }).build()).addCompositeSlice("font", "Font", fontControl), groupBuilder.addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: totalsProps.fontColor,
                                value: {
                                    value: tableTotalsData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: totalsProps.backColor,
                                value: {
                                    value: tableTotalsData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getColumnGrandTotalsCard = function(hostServices, formattingProperties, tablixType) {
                if (tablixType !== ITablixFormatting.Y.TableEx) {
                    var pivotTableColumnTotalProps = (0, tslib_es6.__rest)(pivotTable_capabilities.t.columnTotal, [ "outlineStyle", "outline" ]), pivotTableColumnTotalData = formattingProperties.columnGrandTotal, cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnTotal"), "Visual_Tablix_Matrix_Column_TotalGrand", pivotTableColumnTotalProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: pivotTableColumnTotalProps.fontFamily,
                        value: pivotTableColumnTotalData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableColumnTotalProps.fontSize,
                        value: pivotTableColumnTotalData.fontSize.pt
                    }).withBold({
                        descriptor: pivotTableColumnTotalProps.bold,
                        value: pivotTableColumnTotalData.bold
                    }).withItalic({
                        descriptor: pivotTableColumnTotalProps.italic,
                        value: pivotTableColumnTotalData.italic
                    }).withUnderline({
                        descriptor: pivotTableColumnTotalProps.underline,
                        value: pivotTableColumnTotalData.underline
                    }).build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Tablix_Values").addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableColumnTotalProps.fontColor,
                                value: {
                                    value: pivotTableColumnTotalData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableColumnTotalProps.backColor,
                                value: {
                                    value: pivotTableColumnTotalData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: pivotTableColumnTotalProps.applyToHeaders,
                            value: pivotTableColumnTotalData.applyToHeaders
                        }).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getRowGrandTotalsCard = function(hostServices, formattingProperties, tablixType) {
                if (tablixType !== ITablixFormatting.Y.TableEx) {
                    var pivotTableRowTotalProps = (0, tslib_es6.__rest)(pivotTable_capabilities.t.rowTotal, [ "outlineStyle", "outline" ]), pivotTableRowTotalData = formattingProperties.rowGrandTotal, cardBuilder = new build_control_util.CQ(new build_control_util.lg("rowTotal"), "Visual_Tablix_Matrix_Row_TotalGrand", pivotTableRowTotalProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: pivotTableRowTotalProps.fontFamily,
                        value: pivotTableRowTotalData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableRowTotalProps.fontSize,
                        value: pivotTableRowTotalData.fontSize.pt
                    }).withBold({
                        descriptor: pivotTableRowTotalProps.bold,
                        value: pivotTableRowTotalData.bold
                    }).withItalic({
                        descriptor: pivotTableRowTotalProps.italic,
                        value: pivotTableRowTotalData.italic
                    }).withUnderline({
                        descriptor: pivotTableRowTotalProps.underline,
                        value: pivotTableRowTotalData.underline
                    }).build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Tablix_Values").addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowTotalProps.fontColor,
                                value: {
                                    value: pivotTableRowTotalData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowTotalProps.backColor,
                                value: {
                                    value: pivotTableRowTotalData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: pivotTableRowTotalProps.applyToHeaders,
                            value: pivotTableRowTotalData.applyToHeaders
                        }).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.addAltTextGroup = function(cardBuilder, groupName, displayName, imageColumnsList, accessibilityProps, role) {
                _.isEmpty(imageColumnsList) || cardBuilder.addGroup(groupName, function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_General_Properties_Description").withCollapsible(!1), 
                    groupBuilder.addContainer("measure", function(containerBuilder) {
                        containerBuilder.withDisplayName(displayName);
                        for (var _loop_1 = function(imgColumn) {
                            var selector;
                            role === matrix_capabilities.r.rows || role === matrix_capabilities.r.columns ? selector = {
                                data: [ (0, dataViewRoleWildcard.Yp)([ role ]) ]
                            } : role === matrix_capabilities.r.values ? selector = {
                                data: [ (0, dataViewWildcard.Ue)(0) ],
                                metadata: imgColumn.queryName
                            } : debug.fF.assertFail("unexpected role"), containerBuilder.addContainerItem(imgColumn.queryName, imgColumn.displayName, function(itemBuilder) {
                                return itemBuilder.addSimpleSlice("altTextColumns", new build_control_util.k0({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, accessibilityProps.altTextColumns), {
                                        selector,
                                        instanceKind: 2
                                    }),
                                    validators: {
                                        field: {
                                            kind: 1,
                                            type: {
                                                text: !0
                                            }
                                        }
                                    },
                                    value: void 0,
                                    unwrapExprOnGet: !0
                                }).build());
                            });
                        }, _i = 0, imageColumnsList_1 = imageColumnsList; _i < imageColumnsList_1.length; _i++) _loop_1(imageColumnsList_1[_i]);
                    });
                });
            }, TablixPropertyManager.prototype.getAccessibilityCardNew = function(rowsColumns, columnsColumns, valuesColumns, hostServices, formattingProperties, tablixType) {
                debug.fF.assert(function() {
                    return tablixType === ITablixFormatting.Y.TableEx || tablixType === ITablixFormatting.Y.PivotTable;
                });
                var accessibilityProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.accessibility : pivotTable_capabilities.t.accessibility, rowsImageColumnsList = _.filter(rowsColumns, converterHelper.pt), columnsImageColumnsList = _.filter(columnsColumns, converterHelper.pt), valuesImageColumnsList = _.filter(valuesColumns, converterHelper.pt), columnItems = _.filter(valuesColumns, function(column) {
                    return column.type.text;
                }).map(function(column) {
                    return {
                        displayName: column.displayName,
                        value: column.queryName
                    };
                });
                if (!(_.isEmpty(rowsImageColumnsList) && _.isEmpty(columnsImageColumnsList) && _.isEmpty(valuesImageColumnsList)) || tablixType !== ITablixFormatting.Y.PivotTable && !_.isEmpty(columnItems)) {
                    var cardBuilder = new build_control_util.CQ(new build_control_util.lg("accessibility"), "Accessibility", tablixType === ITablixFormatting.Y.TableEx ? [ accessibilityProps.altTextColumns, accessibilityProps.rowWithReferenceText ] : [ accessibilityProps.altTextColumns ], function(key) {
                        return hostServices.getLocalizedString(key);
                    });
                    if (this.addAltTextGroup(cardBuilder, "AltTextRowHeaders", "Image_Alt_Text_Row_Headers", rowsImageColumnsList, accessibilityProps, matrix_capabilities.r.rows), 
                    this.addAltTextGroup(cardBuilder, "AltTextColumnHeaders", "Image_Alt_Text_Column_Headers", columnsImageColumnsList, accessibilityProps, matrix_capabilities.r.columns), 
                    this.addAltTextGroup(cardBuilder, "AltTextValues", "Image_Alt_Text_Values", valuesImageColumnsList, accessibilityProps, matrix_capabilities.r.values), 
                    tablixType === ITablixFormatting.Y.TableEx && !_.isEmpty(columnItems)) {
                        var nonePlaceHolder = {
                            displayName: hostServices.getLocalizedString("Visual_Tablix_ReferenceRowDefaultText"),
                            value: void 0
                        };
                        columnItems.unshift(nonePlaceHolder), cardBuilder.addGroup("rowWithReferenceText", function(groupBuilder) {
                            var _a;
                            groupBuilder.withDisplayName("Visual_Tablix_RowName_Label").withCollapsible(!1), 
                            groupBuilder.addSimpleSlice("rowWithReferenceText", new build_control_util.uY({
                                descriptor: (0, tslib_es6.__assign)({}, accessibilityProps.rowWithReferenceText),
                                items: columnItems,
                                value: null !== (_a = _.find(columnItems, function(columItem) {
                                    return columItem.value === formattingProperties.rowWithReferenceText.rowWithReferenceText;
                                })) && void 0 !== _a ? _a : columnItems[0]
                            }).build());
                        });
                    }
                    return cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getAccessibilityCard = function(columns, hostServices, formattingProperties, tablixType) {
                if (tablixType === ITablixFormatting.Y.TableEx) {
                    var accessibilityProps = tableEx_capabilities.Z.accessibility, imageColumnsList = _.filter(columns, converterHelper.pt), columnItems = _.filter(columns, function(column) {
                        return column.type.text;
                    }).map(function(column) {
                        return {
                            displayName: column.displayName,
                            value: column.queryName
                        };
                    });
                    if (!_.isEmpty(imageColumnsList) || !_.isEmpty(columnItems)) {
                        var cardBuilder = new build_control_util.CQ(new build_control_util.lg("accessibility"), "Accessibility", [ accessibilityProps.altTextColumns, accessibilityProps.rowWithReferenceText ], function(key) {
                            return hostServices.getLocalizedString(key);
                        });
                        if (_.isEmpty(imageColumnsList) || cardBuilder.addGroup("AltTextValues", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Tablix_Accessibility_Group_AltText_Label").withCollapsible(!1), 
                            groupBuilder.addContainer("measure", function(containerBuilder) {
                                containerBuilder.withDisplayName("Image_Alt_Text_Values");
                                for (var _loop_2 = function(imgColumn) {
                                    containerBuilder.addContainerItem(imgColumn.queryName, imgColumn.displayName, function(itemBuilder) {
                                        return itemBuilder.addSimpleSlice("altTextColumns", new build_control_util.k0({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, accessibilityProps.altTextColumns), {
                                                selector: {
                                                    data: [ (0, dataViewWildcard.Ue)(0) ],
                                                    metadata: imgColumn.queryName
                                                },
                                                instanceKind: 2
                                            }),
                                            validators: {
                                                field: {
                                                    kind: 1,
                                                    type: {
                                                        text: !0
                                                    }
                                                }
                                            },
                                            value: void 0,
                                            unwrapExprOnGet: !0
                                        }).build());
                                    });
                                }, _i = 0, imageColumnsList_2 = imageColumnsList; _i < imageColumnsList_2.length; _i++) _loop_2(imageColumnsList_2[_i]);
                            });
                        }), !_.isEmpty(columnItems)) {
                            var nonePlaceHolder = {
                                displayName: hostServices.getLocalizedString("Visual_Tablix_ReferenceRowDefaultText"),
                                value: void 0
                            };
                            columnItems.unshift(nonePlaceHolder), cardBuilder.addGroup("rowWithReferenceText", function(groupBuilder) {
                                var _a;
                                groupBuilder.withDisplayName("Visual_Tablix_RowName_Label").withCollapsible(!1), 
                                groupBuilder.addSimpleSlice("rowWithReferenceText", new build_control_util.uY({
                                    descriptor: (0, tslib_es6.__assign)({}, accessibilityProps.rowWithReferenceText),
                                    items: columnItems,
                                    value: null !== (_a = _.find(columnItems, function(columItem) {
                                        return columItem.value === formattingProperties.rowWithReferenceText.rowWithReferenceText;
                                    })) && void 0 !== _a ? _a : columnItems[0]
                                }).build());
                            });
                        }
                        return cardBuilder.build();
                    }
                }
            }, TablixPropertyManager.prototype.getRowSubTotalsCard = function(hostServices, formattingProperties, dataView, tablixType, totalsShown, featureSwitches) {
                var _this = this;
                if (totalsShown || tablixType === ITablixFormatting.Y.PivotTable) {
                    var objects = TablixPropertyManager.getMetadataObjects(dataView), perLevel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPerLevel.setInstanceProperty(void 0, objects), localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableRowFormattingProps = pivotTable_capabilities.t.subTotals, pivotTableRowFormattingData = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingProperties.subtotals), formattingProperties.rowSubtotals), cardBuilder = new build_control_util.CQ(new build_control_util.lg("rowSubTotal"), "Visual_SubtotalRow", [ pivotTableRowFormattingProps.rowSubtotalsLabel, pivotTableRowFormattingProps.rowSubtotals, pivotTableRowFormattingProps.rowSubtotalsPosition, pivotTableRowFormattingProps.perRowLevel, pivotTableRowFormattingProps.levelSubtotalEnabled, pivotTableRowFormattingProps.levelSubtotalLabel, pivotTableRowFormattingProps.fontColor, pivotTableRowFormattingProps.backColor, pivotTableRowFormattingProps.fontSize, pivotTableRowFormattingProps.fontFamily, pivotTableRowFormattingProps.bold, pivotTableRowFormattingProps.italic, pivotTableRowFormattingProps.underline, pivotTableRowFormattingProps.applyToHeaders ], localize);
                    cardBuilder.addTopLevelToggle("rowSubtotals", function() {
                        return new build_control_util.bd({
                            descriptor: pivotTableRowFormattingProps.rowSubtotals,
                            value: formattingProperties.general.rowSubtotals
                        }).build();
                    });
                    var counter = 0;
                    return cardBuilder.addGroup("applySettingsTo", function(groupBuilder) {
                        groupBuilder.withContainerDisabled(!perLevel).withDisplayName("Apply_Settings_To").withCollapsible(!1).addSimpleSlice("perRowLevel", new build_control_util.bd({
                            descriptor: pivotTableRowFormattingProps.perRowLevel,
                            value: perLevel
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withDisabled(!_this.shouldShowRowSubtotalsOption(dataView)).withCustomDescriptionIf(function() {
                                return !_this.shouldShowRowSubtotalsOption(dataView);
                            }, "Visual_SubtotalRow_PerLevel_DisabledReason");
                        }).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Visual_Tablix_Row_Level"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                                return _this.getRowSubtotalContainers(formattingProperties, containerItemBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, void 0, objects);
                            });
                            for (var _i = 0, _a = dataView.matrix.rows.levels; _i < _a.length; _i++) for (var _loop_3 = function(source) {
                                if (!source.isMeasure) {
                                    var selector_1 = {
                                        metadata: source.queryName
                                    };
                                    containerBuilder.addContainerItem(source.displayName, source.displayName, function(containerItemBuilder) {
                                        return _this.getRowSubtotalContainers(formattingProperties, containerItemBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, selector_1, source.objects, counter);
                                    }), counter++;
                                }
                            }, _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) _loop_3(_c[_b]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getRowSubtotalContainers = function(formattingProperties, containerBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, selector, sourceObjects, counter) {
                var subTotalsLabel = selector ? tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(sourceObjects, !0) : tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(sourceObjects, !0), defaultTotalLabel = selector ? "" : localize(tablixConstants.qT), subTotalsLabelProp = selector ? pivotTableRowFormattingProps.levelSubtotalLabel : pivotTableRowFormattingProps.rowSubtotalsLabel;
                containerBuilder.addGroup("rows", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Rows"), groupBuilder.addSimpleSlice("levelSubtotalEnabled", new build_control_util.bd({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.levelSubtotalEnabled), {
                            selector
                        }),
                        value: tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(void 0, sourceObjects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_ShowSubtotal").withDisabled(!selector);
                    }).addSimpleSlice("rowSubtotalsLabel", new build_control_util.fq({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, subTotalsLabelProp), {
                            selector
                        }),
                        value: subTotalsLabel || defaultTotalLabel,
                        placeholder: ""
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Subtotal_Label");
                    }).addSimpleSlice(selector ? "rowSubtotalsPositionSeries".concat(counter) : "rowSubtotalsPositionAll", new build_control_util.uY({
                        descriptor: pivotTableRowFormattingProps.rowSubtotalsPosition,
                        value: formattingProperties.subtotals.rowSubtotalsPosition
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Position").withDisabled(!!selector || featureSwitches.matrixLayouts && formattingProperties.general.layout === pivotTableLayout.t.Tabular);
                    });
                }), containerBuilder.addGroup("values", function(groupBuilder) {
                    if (groupBuilder.withDisplayName("Visual_Tablix_Values"), selector) groupBuilder.withDisabled(!0, ""); else {
                        var rowSelector_1 = {
                            id: "Row"
                        }, fontControl = (new build_control_util.UN).withFontFamily({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.fontFamily), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.fontFamily
                        }).withFontSizeProperties({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.fontSize), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.fontSize.pt
                        }).withBold({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.bold), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.bold
                        }).withItalic({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.italic), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.italic
                        }).withUnderline({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.underline), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.underline
                        }).build();
                        groupBuilder.addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: pivotTableRowFormattingData.fontColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.fontColor), {
                                    selector: rowSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: pivotTableRowFormattingData.backColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.backColor), {
                                    selector: rowSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.applyToHeaders), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.applyToHeaders
                        }).build());
                    }
                });
            }, TablixPropertyManager.prototype.getColumnSubtotalCard = function(hostServices, formattingProperties, dataView, tablixType, totalsShown, featureSwitches) {
                var _this = this;
                if (totalsShown || tablixType === ITablixFormatting.Y.PivotTable || this.shouldShowColumnSubtotalsOption(dataView)) {
                    var objects = TablixPropertyManager.getMetadataObjects(dataView), perLevel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(objects), localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableColumnFormattingProps = pivotTable_capabilities.t.subTotals, pivotTableColumnFormattingData = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingProperties.subtotals), formattingProperties.columnSubtotals), cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnSubTotal"), "Visual_SubtotalColumn", [ pivotTableColumnFormattingProps.columnSubtotals, pivotTableColumnFormattingProps.columnSubtotalsLabel, pivotTableColumnFormattingProps.perColumnLevel, pivotTableColumnFormattingProps.levelSubtotalEnabled, pivotTableColumnFormattingProps.levelSubtotalLabel, pivotTableColumnFormattingProps.fontColor, pivotTableColumnFormattingProps.backColor, pivotTableColumnFormattingProps.fontSize, pivotTableColumnFormattingProps.fontFamily, pivotTableColumnFormattingProps.bold, pivotTableColumnFormattingProps.italic, pivotTableColumnFormattingProps.underline, pivotTableColumnFormattingProps.applyToHeaders ], localize);
                    return cardBuilder.addTopLevelToggle("columnSubtotals", function() {
                        return new build_control_util.bd({
                            descriptor: pivotTableColumnFormattingProps.columnSubtotals,
                            value: formattingProperties.general.columnSubtotals
                        }).build();
                    }), cardBuilder.addGroup("applySettingsTo", function(groupBuilder) {
                        groupBuilder.withContainerDisabled(!perLevel).withDisplayName("Apply_Settings_To").withCollapsible(!1).addSimpleSlice("perColumnLevel", new build_control_util.bd({
                            descriptor: pivotTableColumnFormattingProps.perColumnLevel,
                            value: perLevel
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withDisabled(!_this.shouldShowColumnSubtotalsOption(dataView)).withCustomDescriptionIf(function() {
                                return !_this.shouldShowColumnSubtotalsOption(dataView);
                            }, "Visual_SubtotalColumn_PerLevel_DisabledReason");
                        }).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Visual_Tablix_Column_Level"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                                return _this.getColumnSubtotalContainers(containerItemBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, void 0, objects);
                            });
                            for (var _i = 0, _a = dataView.matrix.columns.levels; _i < _a.length; _i++) for (var _loop_4 = function(source) {
                                if (!source.isMeasure) {
                                    var selector_2 = {
                                        metadata: source.queryName
                                    };
                                    containerBuilder.addContainerItem(source.displayName, source.displayName, function(containerItemBuilder) {
                                        return _this.getColumnSubtotalContainers(containerItemBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, selector_2, source.objects);
                                    });
                                }
                            }, _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) _loop_4(_c[_b]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getColumnSubtotalContainers = function(containerBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, selector, sourceObjects) {
                var defaultTotalLabel = localize(tablixConstants.qT), subTotalsLabel = selector ? tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(sourceObjects, !0) : tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(sourceObjects, !0), subTotalLabelProp = selector ? pivotTableColumnFormattingProps.levelSubtotalLabel : pivotTableColumnFormattingProps.columnSubtotalsLabel;
                containerBuilder.addGroup("columns", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Columns"), groupBuilder.addSimpleSlice("levelSubtotalEnabled", new build_control_util.bd({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.levelSubtotalEnabled), {
                            selector
                        }),
                        value: tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(void 0, sourceObjects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_ShowSubtotal").withDisabled(!selector);
                    }).addSimpleSlice("columnSubtotalsLabel", new build_control_util.fq({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, subTotalLabelProp), {
                            selector
                        }),
                        value: subTotalsLabel || defaultTotalLabel,
                        placeholder: ""
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Subtotal_Label");
                    });
                }), containerBuilder.addGroup("values", function(groupBuilder) {
                    if (groupBuilder.withDisplayName("Visual_Tablix_Values"), selector) groupBuilder.withDisabled(!0, ""); else {
                        var columnSelector_1 = {
                            id: "Column"
                        }, fontControl = (new build_control_util.UN).withFontFamily({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.fontFamily), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.fontFamily
                        }).withFontSizeProperties({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.fontSize), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.fontSize.pt
                        }).withBold({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.bold), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.bold
                        }).withItalic({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.italic), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.italic
                        }).withUnderline({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.underline), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.underline
                        }).build();
                        groupBuilder.addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: pivotTableColumnFormattingData.fontColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.fontColor), {
                                    selector: columnSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: pivotTableColumnFormattingData.backColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.backColor), {
                                    selector: columnSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }), groupBuilder.addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.applyToHeaders), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.applyToHeaders
                        }).build());
                    }
                });
            }, TablixPropertyManager.prototype.getColumnFormattingCard = function(hostServices, formattingProperties, columns, tablixType) {
                if (!_.isEmpty(columns)) {
                    var columnFormattingProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.columnFormatting : pivotTable_capabilities.t.columnFormatting, [ "dataBars" ]), columnFormattingData = formattingProperties.columnFormatting, cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnFormatting"), "Visual_Tablix_Specific_Column", columnFormattingProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    });
                    return cardBuilder.withDescription("Visual_Matrix_SpecificColumn_Description"), 
                    cardBuilder.addGroup("columns", function(groupBuilder) {
                        groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Series");
                            for (var _loop_5 = function(column) {
                                var objects = column && column.objects;
                                containerBuilder.addContainerItem(column.queryName, column.displayName, function(containerItemBuilder) {
                                    containerItemBuilder.addSimpleSlice(columnFormattingProps.styleHeader, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleHeader), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleHeader
                                    }).build()), tablixType === ITablixFormatting.Y.PivotTable && containerItemBuilder.addSimpleSlice(columnFormattingProps.styleSubtotals, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleSubtotals), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: tablixProperties.FX.PropColumnFormattingStyleSubtotals.setInstanceProperty(void 0, objects)
                                    }).build()), containerItemBuilder.addSimpleSlice(columnFormattingProps.styleTotal, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleTotal), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleTotal
                                    }).build()).addSimpleSlice(columnFormattingProps.styleValues, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleValues), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleValues
                                    }).build()), containerItemBuilder.addGroup("values", function(containerGroupBuilder) {
                                        if (containerGroupBuilder.withDisplayName("Visual_Tablix_Values").addSimpleSlice("fontColor", function() {
                                            var colorData = {
                                                value: columnFormattingData[column.queryName].fontColor
                                            };
                                            return new build_control_util.BT({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.fontColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }, function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Text_Color");
                                        }).addSimpleSlice("backColor", function() {
                                            var colorData = {
                                                value: columnFormattingData[column.queryName].backColor
                                            };
                                            return new build_control_util.BT({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.backColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }, function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Background_Color");
                                        }).addSimpleSlice("alignment", new build_control_util.Gp({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.alignment), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            mode: "horizontalAlignment",
                                            supportsNoSelection: !0,
                                            value: columnFormattingData[column.queryName].alignment
                                        }).build()), column.type.numeric && (tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx)) {
                                            var objects_1 = column && column.objects;
                                            containerGroupBuilder.addSimpleSlice("labelDisplayUnits", new build_control_util.uY({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.labelDisplayUnits), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: tablixProperties.FX.PropColumnFormattingDisplayUnits.setInstanceProperty(void 0, objects_1)
                                            }).build()).addSimpleSlice("labelPrecision", new build_control_util.mu({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.labelPrecision), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: tablixProperties.FX.PropColumnFormattingPrecision.setInstanceProperty(void 0, objects_1),
                                                options: {
                                                    minValue: {
                                                        type: 0,
                                                        value: 0
                                                    },
                                                    maxValue: {
                                                        type: 1,
                                                        value: dataLabelViewModel1Consts.vo
                                                    }
                                                }
                                            }).build());
                                        }
                                    });
                                });
                            }, _i = 0, columns_2 = columns; _i < columns_2.length; _i++) _loop_5(columns_2[_i]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getCellColumnCard = function(hostServices, tablixType, dataView, featureSwitches) {
                var tableColumnFormattingDescriptors = (0, tableEx_capabilities.k)().objects, VisualObjectRepetitionArray = [];
                return this.enumerateObjectRepetition(VisualObjectRepetitionArray, dataView, tablixType, featureSwitches), 
                (0, conditional_formatting_util.Z)(VisualObjectRepetitionArray, function(key) {
                    return hostServices.getLocalizedString(key);
                }, tableColumnFormattingDescriptors, "Cell_Elements", "Visual_Matrix_CellElements_Description");
            }, TablixPropertyManager.prototype.getUrlIconCard = function(hostServices, formattingProperties, tablixType) {
                var valuesUrlIconProp = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.values.urlIcon : pivotTable_capabilities.t.values.urlIcon, pivotTableFormattingProperties = formattingProperties, columnHeadersUrlIconProp = pivotTable_capabilities.t.columnHeaders.urlIcon, rowHeadersUrlIconProp = pivotTable_capabilities.t.rowHeaders.urlIcon, cardBuilder = new build_control_util.CQ(new build_control_util.lg("urlIcon"), "Visual_Tablix_UrlIcon", [ valuesUrlIconProp, columnHeadersUrlIconProp, rowHeadersUrlIconProp ], function(key) {
                    return hostServices.getLocalizedString(key);
                });
                return cardBuilder.addGroup("urlIcon", function(groupBuilder) {
                    tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || groupBuilder.addSimpleSlice("values", new build_control_util.bd({
                        descriptor: valuesUrlIconProp,
                        value: formattingProperties.values.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_Values");
                    }), tablixType === ITablixFormatting.Y.PivotTable && groupBuilder.addSimpleSlice("columnheaders", new build_control_util.bd({
                        descriptor: columnHeadersUrlIconProp,
                        value: pivotTableFormattingProperties.columnHeaders.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_ColumnHeaders");
                    }).addSimpleSlice("rowheaders", new build_control_util.bd({
                        descriptor: rowHeadersUrlIconProp,
                        value: pivotTableFormattingProperties.rowHeaders.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_RowHeaders");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getImageSizeCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                var imageHeightProp = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.grid.imageHeight : pivotTable_capabilities.t.grid.imageHeight, imageWidthProp = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.grid.imageWidth : pivotTable_capabilities.t.grid.imageWidth, cardBuilder = new build_control_util.CQ(new build_control_util.lg("imageHeight"), "Visual_Tablix_ImageSize", [ imageHeightProp, imageWidthProp ], function(key) {
                    return hostServices.getLocalizedString(key);
                });
                return cardBuilder.addGroup("imageHeight", function(cardBuilder) {
                    cardBuilder.addSimpleSlice("imageHeight", new build_control_util.mu({
                        descriptor: imageHeightProp,
                        value: formattingProperties.grid.imageHeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: TablixPropertyManager.ImageSizeMin
                            },
                            maxValue: {
                                type: 1,
                                value: TablixPropertyManager.ImageSizeMax
                            },
                            unitSymbol: visualLocKeys.e_
                        }
                    }).build()), featureSwitches.tablixImageWidth && cardBuilder.addSimpleSlice("imageWidth", new build_control_util.mu({
                        descriptor: imageWidthProp,
                        value: formattingProperties.grid.imageWidth,
                        options: {
                            minValue: {
                                type: 0,
                                value: TablixPropertyManager.ImageSizeMin
                            },
                            maxValue: {
                                type: 1,
                                value: TablixPropertyManager.ImageSizeMax
                            },
                            unitSymbol: visualLocKeys.e_
                        }
                    }).build());
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getSparklinesCard = function(columns, hostServices, tablixType) {
                var _this = this;
                if (!_.isEmpty(columns) && this.hasSparklines(columns)) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, sparklinesProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.sparklines : pivotTable_capabilities.t.sparklines;
                    return new build_control_util.CQ(new build_control_util.lg("sparklines"), "Sparkline_Label", sparklinesProps, localize).addGroup("columns", function(groupBuilder) {
                        return groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("series", function(containerBuilder) {
                            var _a;
                            containerBuilder.withDisplayName("Sparkline_Singular_Label");
                            for (var _loop_6 = function(column) {
                                if (!(null === (_a = column.type.misc) || void 0 === _a ? void 0 : _a.sparkline)) return "continue";
                                var objects = null == column ? void 0 : column.objects, selector = {
                                    metadata: column.queryName
                                };
                                containerBuilder.addContainerItem(column.queryName, column.displayName, function(containerItemBuilder) {
                                    var sparklineChartTypeData = tablixProperties.FX.PropSparklinesChartType.setInstanceProperty(void 0, objects);
                                    containerItemBuilder.addGroup("sparklines", function(containerGroupBuilder) {
                                        return containerGroupBuilder.withDisplayName("Sparkline_Singular_Label").addSimpleSlice("chartType", new build_control_util.uY({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.chartType), {
                                                selector
                                            }),
                                            value: sparklineChartTypeData
                                        }).build()).addSimpleSlice("dataColor", new build_control_util.BT({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.dataColor), {
                                                selector
                                            }),
                                            value: {
                                                value: _this.tablixProperties.PropSparklinesDataColor.setInstanceProperty(void 0, objects).solid.color
                                            }
                                        }).build()).addSimpleSlice("strokeWidth", new build_control_util.JN({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.strokeWidth), {
                                                selector
                                            }),
                                            value: tablixProperties.FX.PropSparklinesStrokeWidth.setInstanceProperty(void 0, objects),
                                            localize,
                                            options: {
                                                minValue: {
                                                    type: 0,
                                                    value: 1
                                                },
                                                maxValue: {
                                                    type: 1,
                                                    value: 4
                                                }
                                            }
                                        }).build(), function(slicer) {
                                            return slicer.withHidden(sparklineChartTypeData !== sparklineChartType.U.line);
                                        });
                                    }), sparklineChartTypeData === sparklineChartType.U.line && containerItemBuilder.addGroup("markers", function(containerGroupBuilder) {
                                        var markerTypeValue = tablixProperties.FX.PropSparklinesMarkerType.getValue(objects);
                                        containerGroupBuilder.withDisplayName("Marker").addSimpleSlice("markers", new build_control_util.oM({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markers), {
                                                selector
                                            }),
                                            value: markerTypeValue
                                        }).build()), null != markerTypeValue && 0 !== markerTypeValue && containerGroupBuilder.addSimpleSlice("markerColor", new build_control_util.BT({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markerColor), {
                                                selector
                                            }),
                                            value: {
                                                value: _this.tablixProperties.PropSparklinesMarkerColor.setInstanceProperty(void 0, objects).solid.color
                                            }
                                        }).build()).addSimpleSlice("markerShape", new build_control_util.uY({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markerShape), {
                                                selector
                                            }),
                                            value: tablixProperties.FX.PropSparklinesMarkerShape.setInstanceProperty(void 0, objects)
                                        }).build()).addSimpleSlice("markerSize", new build_control_util.JN({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markerSize), {
                                                selector
                                            }),
                                            value: tablixProperties.FX.PropSparklinesMarkerSize.setInstanceProperty(void 0, objects),
                                            localize,
                                            options: {
                                                minValue: {
                                                    type: 0,
                                                    value: 3
                                                },
                                                maxValue: {
                                                    type: 1,
                                                    value: 5
                                                }
                                            }
                                        }).build());
                                    });
                                });
                            }, _i = 0, columns_3 = columns; _i < columns_3.length; _i++) _loop_6(columns_3[_i]);
                        });
                    }).build();
                }
            }, TablixPropertyManager.prototype.hasSparklines = function(columns) {
                for (var _a, _i = 0, columns_4 = columns; _i < columns_4.length; _i++) if (null === (_a = columns_4[_i].type.misc) || void 0 === _a ? void 0 : _a.sparkline) return !0;
                return !1;
            }, TablixPropertyManager.prototype.enumerateObjectInstances = function(options, enumeration, dataView, tablixType, localizer, featureSwitches, isEnabled, style) {
                void 0 === featureSwitches && (featureSwitches = {}), void 0 === isEnabled && (isEnabled = !1), 
                debug.fF.assertValue(dataView, "dataView can't be undefined");
                var totalsShown, objects = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(style);
                switch (totalsShown = tablixType === ITablixFormatting.Y.Table ? this.shouldShowTableTotalsOption(dataView) && tablixProperties.FX.PropGeneralTableTotals.getValue(objects) : this.shouldShowColumnSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixColumnSubtotals.getValue(objects) || this.shouldShowRowSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixRowSubtotals.getValue(objects), 
                options.objectName) {
                  case tablixProperties.FX.ObjectGeneral:
                    this.enumerateGeneralOptions(enumeration, objects, tablixType, dataView);
                    break;

                  case tablixProperties.FX.ObjectGrid:
                    this.enumerateGridOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectColumnHeaders:
                    this.enumerateColumnHeadersOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectRowHeaders:
                    this.enumerateRowHeadersOptions(enumeration, objects, tablixType, isEnabled, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectValues:
                    this.enumerateValuesOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectTotal:
                    tablixType === ITablixFormatting.Y.TableEx ? this.enumerateTotalOptions(enumeration, objects, ITablixFormatting.Y.TableEx, localizer, featureSwitches, textClassProperties) : totalsShown && (tablixType === ITablixFormatting.Y.Table ? this.enumerateTotalOptions(enumeration, objects, ITablixFormatting.Y.TableEx, localizer, featureSwitches, textClassProperties) : this.enumerateGrandTotalOptions(enumeration, objects, tablixType, textClassProperties));
                    break;

                  case tablixProperties.FX.ObjectColumnTotal:
                    tablixType === ITablixFormatting.Y.PivotTable && this.enumerateColumnGrandTotalOptions(enumeration, objects, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectRowTotal:
                    tablixType === ITablixFormatting.Y.PivotTable && this.enumerateRowGrandTotalOptions(enumeration, objects, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectSubTotals:
                    (totalsShown || tablixType === ITablixFormatting.Y.PivotTable) && this.enumerateSubTotalsOptions(enumeration, objects, tablixType, dataView, localizer, featureSwitches, textClassProperties);
                    break;

                  case tablixProperties.FX.ObjectColumnFormatting:
                    this.enumerateColumnFormattingOptions(enumeration, this.getColumnsMetadata(dataView, tablixType), tablixType);
                    break;

                  case tablixProperties.FX.ObjectSparklines:
                    this.enumerateSparklines(enumeration, this.getColumnsMetadata(dataView, tablixType));
                }
            }, TablixPropertyManager.prototype.getColumnsMetadata = function(dataView, tablixType) {
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                  case ITablixFormatting.Y.TableEx:
                    return this.getTableColumnMetadata(dataView);

                  case ITablixFormatting.Y.Matrix:
                  case ITablixFormatting.Y.PivotTable:
                    return this.getMatrixValuesColumnMetadata(dataView);

                  default:
                    return void debug.fF.assertFail("TablixUtils.enumerateObjectInstances - Unexpected tablixType: " + tablixType);
                }
            }, TablixPropertyManager.prototype.getTableColumnMetadata = function(dataView) {
                if (dataView && dataView.table && !_.isEmpty(dataView.table.columns)) return dataView.table.columns;
            }, TablixPropertyManager.prototype.getMatrixRowsColumnMetadata = function(dataView) {
                if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.rows)) {
                    for (var result = [], _i = 0, _a = dataView.matrix.rows.levels; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) result.push(_c[_b]);
                    return result;
                }
            }, TablixPropertyManager.prototype.getMatrixColumnsColumnMetadata = function(dataView) {
                if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.columns)) {
                    for (var result = [], _i = 0, _a = dataView.matrix.columns.levels; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) result.push(_c[_b]);
                    return result;
                }
            }, TablixPropertyManager.prototype.getMatrixValuesColumnMetadata = function(dataView) {
                if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) return dataView.matrix.valueSources;
            }, TablixPropertyManager.prototype.createVisualObjectInstance = function(objectName, selector, displayName) {
                void 0 === selector && (selector = null);
                var instance = {
                    selector,
                    objectName,
                    properties: {}
                };
                return null != displayName && (instance.displayName = displayName), instance;
            }, TablixPropertyManager.prototype.enumerateGeneralOptions = function(enumeration, objects, tablixType, dataView) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectGeneral);
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                    tablixProperties.FX.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGeneralTextSize.setInstanceProperty(instance, objects), 
                    this.shouldShowTableTotalsOption(dataView) && tablixProperties.FX.PropGeneralTableTotals.setInstanceProperty(instance, objects);
                    break;

                  case ITablixFormatting.Y.Matrix:
                    tablixProperties.FX.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGeneralTextSize.setInstanceProperty(instance, objects), 
                    this.shouldShowRowSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixRowSubtotals.setInstanceProperty(instance, objects), 
                    this.shouldShowColumnSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixColumnSubtotals.setInstanceProperty(instance, objects);
                }
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateGridOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectGrid), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, verticalGridEnabled = tablixProperties.FX.PropGridVertical.getValue(objects);
                tablixProperties.FX.PropGridVertical.setInstanceProperty(instance, objects), verticalGridEnabled && (this.tablixProperties.PropGridVerticalColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropGridVerticalWeight.setInstanceProperty(instance, objects));
                var isTable = tablixType === ITablixFormatting.Y.Table || tablixType === ITablixFormatting.Y.TableEx, horizontalGridEnabled = (isTable ? tablixProperties.FX.PropGridHorizontalTable : tablixProperties.FX.PropGridHorizontalMatrix).getValue(objects);
                (isTable ? tablixProperties.FX.PropGridHorizontalTable : tablixProperties.FX.PropGridHorizontalMatrix).setInstanceProperty(instance, objects), 
                horizontalGridEnabled && (this.tablixProperties.PropGridHorizontalColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropGridHorizontalWeight.setInstanceProperty(instance, objects)), 
                tablixProperties.FX.PropGridRowPadding.setInstanceProperty(instance, objects), (tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) && tablixProperties.FX.PropGridOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, tablixProperties.e9), 
                this.tablixProperties.PropGridOutlineColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropGridOutlineWeight.setInstanceProperty(instance, objects), 
                tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || tablixProperties.FX.PropGridPivotTableTextSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                tablixProperties.FX.PropGridImageHeight.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateColumnHeadersOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectColumnHeaders), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                if (this.tablixProperties.PropColumnsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropColumnsBackColor.setInstanceProperty(instance, objects), 
                tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                    var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropColumnsOutlineStyle.getValue(objects), objects, tablixProperties.UR);
                    tablixProperties.FX.PropColumnsOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                    var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropColumnsOutlineWeight.getValue(objects), objects);
                    tablixProperties.FX.PropColumnsOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                    var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects);
                    this.tablixProperties.PropColumnsOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                    tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                    tablixProperties.FX.PropColumnsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                    tablixProperties.FX.PropColumnsBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropColumnsItalic.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnsUnderline.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnsAlignment.setInstanceProperty(instance, objects);
                } else tablixProperties.FX.PropColumnsOutline.setInstanceProperty(instance, objects);
                tablixType === ITablixFormatting.Y.PivotTable && (tablixProperties.FX.PropColumnsAlignmentTitle.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnsUrlIcon.setInstanceProperty(instance, objects)), 
                tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropColumnsWordWrap.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateRowHeadersOptions = function(enumeration, objects, tablixType, isEnabled, textClassProperties, featureSwitches) {
                void 0 === isEnabled && (isEnabled = !1);
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectRowHeaders), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                if (this.tablixProperties.PropRowsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropRowsBackColor.setInstanceProperty(instance, objects), 
                tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                    var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropRowsOutlineStyle.getValue(objects), objects, tablixProperties.Pi);
                    tablixProperties.FX.PropRowsOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                } else tablixProperties.FX.PropRowsOutline.setInstanceProperty(instance, objects);
                if (tablixType === ITablixFormatting.Y.PivotTable) {
                    var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropRowsOutlineWeight.getValue(objects), objects);
                    tablixProperties.FX.PropRowsOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                    var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropRowsOutlineColor.getValue(objects), objects);
                    this.tablixProperties.PropRowsOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                    tablixProperties.FX.PropRowsSteppedLayout.setInstanceProperty(instance, objects) && tablixProperties.FX.PropRowsSteppedLayoutIndentation.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropRowsUrlIcon.setInstanceProperty(instance, objects), tablixProperties.FX.PropGeneralMatrixLayout.setInstanceProperty(instance, objects) !== pivotTableLayout.t.Compact && tablixProperties.FX.PropRowsRepeatRowHeaders.setInstanceProperty(instance, objects);
                }
                tablixType !== ITablixFormatting.Y.Matrix && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropRowsWordWrap.setInstanceProperty(instance, objects), 
                tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropRowsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                tablixProperties.FX.PropRowsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                tablixProperties.FX.PropRowsBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropRowsItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowsUnderline.setInstanceProperty(instance, objects), tablixProperties.FX.PropRowsAlignment.setInstanceProperty(instance, objects)), 
                tablixType === ITablixFormatting.Y.PivotTable && isEnabled && (tablixProperties.FX.PropRowsShowExpandCollapseButtons.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowsShowExpandCollapseButtons.getValue(objects) && (this.tablixProperties.PropRowsExpandCollapseButtonsColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowsExpandCollapseButtonsSize.setInstanceProperty(instance, objects))), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateValuesOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectValues), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                if (this.tablixProperties.PropValuesFontColorPrimary.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropValuesBackColorPrimary.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropValuesFontColorSecondary.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropValuesBackColorSecondary.setInstanceProperty(instance, objects), 
                tablixType === ITablixFormatting.Y.PivotTable && (tablixProperties.FX.PropValuesBandedRowHeaders.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropValuesOnRow.setInstanceProperty(instance, objects)), tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                    var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropValuesOutlineStyle.getValue(objects), objects, tablixProperties.IC);
                    tablixProperties.FX.PropValuesOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                    var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropValuesOutlineWeight.getValue(objects), objects);
                    tablixProperties.FX.PropValuesOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                    var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects);
                    this.tablixProperties.PropValuesOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue);
                } else tablixProperties.FX.PropValuesOutline.setInstanceProperty(instance, objects);
                tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropValuesUrlIcon.setInstanceProperty(instance, objects), 
                tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropValuesWordWrap.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropValuesFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                tablixProperties.FX.PropValuesFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                tablixProperties.FX.PropValuesBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropValuesItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropValuesUnderline.setInstanceProperty(instance, objects)), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateTotalOptions = function(enumeration, objects, tablixType, localizer, featureSwitches, textClassProperties) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                if (tablixType !== ITablixFormatting.Y.TableEx || tablixProperties.FX.PropTotalTableExTotals.setInstanceProperty(instance, objects)) {
                    if (tablixType === ITablixFormatting.Y.TableEx) {
                        var value = tablixProperties.FX.PropTotalTableExTotalLabel.getValue(objects, !0) || localizer(tablixConstants.qT);
                        instance.properties[tablixProperties.FX.PropTotalTableExTotalLabel.propertyName] = value;
                    }
                    if (this.tablixProperties.PropTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                    this.tablixProperties.PropTotalBackColor.setInstanceProperty(instance, objects), 
                    tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                        var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropTotalOutlineStyle.getValue(objects), objects, tablixProperties.Sc);
                        tablixProperties.FX.PropTotalOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                    } else tablixProperties.FX.PropTotalOutline.setInstanceProperty(instance, objects);
                    if (tablixType === ITablixFormatting.Y.TableEx) {
                        var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropTotalOutlineWeight.getValue(objects), objects);
                        tablixProperties.FX.PropTotalOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                        var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropTotalOutlineColor.getValue(objects), objects);
                        this.tablixProperties.PropTotalOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue);
                    }
                    tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                    tablixProperties.FX.PropTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                    tablixProperties.FX.PropTotalBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropTotalItalic.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropTotalUnderline.setInstanceProperty(instance, objects));
                }
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateGrandTotalOptions = function(enumeration, objects, tablixType, textClassProperties) {
                if (tablixType !== ITablixFormatting.Y.PivotTable) {
                    var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                    this.tablixProperties.PropGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                    tablixProperties.FX.PropGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                    this.tablixProperties.PropGrandTotalBackColor.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                    tablixType === ITablixFormatting.Y.TableEx && (tablixProperties.FX.PropGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                    tablixProperties.FX.PropGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                    tablixProperties.FX.PropGrandTotalBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropGrandTotalItalic.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGrandTotalUnderline.setInstanceProperty(instance, objects)), 
                    enumeration.pushInstance(instance);
                }
            }, TablixPropertyManager.prototype.enumerateColumnGrandTotalOptions = function(enumeration, objects, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectColumnTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropColumnGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                tablixProperties.FX.PropColumnGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropColumnGrandTotalBackColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                tablixProperties.FX.PropColumnGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                tablixProperties.FX.PropColumnGrandTotalBold.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalUnderline.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateRowGrandTotalOptions = function(enumeration, objects, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectRowTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropRowGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                tablixProperties.FX.PropRowGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropRowGrandTotalBackColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                tablixProperties.FX.PropRowGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                tablixProperties.FX.PropRowGrandTotalBold.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalUnderline.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateSubTotalsOptions = function(enumeration, objects, tablixType, dataView, localizer, featureSwitches, textClassProperties) {
                var defaultTotalLabel, defaultRowTotalLabel, defaultColumnTotalLabel, rowSubtotalsEnabled = !1, columnSubtotalsEnabled = !1;
                if (tablixType === ITablixFormatting.Y.PivotTable) {
                    debug.fF.assertValue(localizer, "enumerateSubTotalsOptions - localizer"), defaultTotalLabel = localizer(tablixConstants.qT);
                    var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals);
                    this.shouldShowRowSubtotalsOption(dataView) && (rowSubtotalsEnabled = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotals.setInstanceProperty(instance, objects)), 
                    rowSubtotalsEnabled && (defaultRowTotalLabel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(objects, !0) || defaultTotalLabel, 
                    instance.properties[tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.propertyName] = defaultRowTotalLabel), 
                    enumeration.pushInstance(instance);
                }
                if (this.enumerateSubtotalsFontProperties(enumeration, objects, textClassProperties, featureSwitches, tablixType, "Row"), 
                rowSubtotalsEnabled) {
                    instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals), 
                    tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPosition.setInstanceProperty(instance, objects), 
                    enumeration.pushInstance(instance), instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals);
                    var perLevel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPerLevel.setInstanceProperty(instance, objects);
                    enumeration.pushInstance(instance, !1), perLevel && this.enumeratePerLevelSubtotals(enumeration, dataView.matrix.rows.levels, defaultRowTotalLabel, localizer);
                }
                tablixType === ITablixFormatting.Y.PivotTable && (instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals), 
                this.shouldShowColumnSubtotalsOption(dataView) && (columnSubtotalsEnabled = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotals.setInstanceProperty(instance, objects)), 
                columnSubtotalsEnabled && (defaultColumnTotalLabel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(objects, !0) || defaultTotalLabel, 
                instance.properties[tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.propertyName] = defaultColumnTotalLabel), 
                enumeration.pushInstance(instance, !1)), this.enumerateSubtotalsFontProperties(enumeration, objects, textClassProperties, featureSwitches, tablixType, "Column"), 
                columnSubtotalsEnabled && (instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals), 
                perLevel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsPerLevel.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance, !1), debug.fF.assert(function() {
                    return !_.isEmpty(dataView.matrix.columns.levels);
                }, "enumerateSubTotalsOptions: Empty column levels"), perLevel && this.enumeratePerLevelSubtotals(enumeration, dataView.matrix.columns.levels, defaultColumnTotalLabel, localizer));
            }, TablixPropertyManager.prototype.enumerateSubtotalsFontProperties = function(enumeration, objects, textClassProperties, featureSwitches, tablixType, instanceId) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals, instanceId ? {
                    id: instanceId
                } : void 0), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropSubTotalsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, instanceId), 
                tablixProperties.FX.PropSubTotalsFontFamily.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                this.tablixProperties.PropSubTotalsBackColor.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixType === ITablixFormatting.Y.PivotTable && (tablixProperties.FX.PropSubTotalsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, instanceId), 
                tablixProperties.FX.PropSubTotalsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, instanceId), 
                tablixProperties.FX.PropSubTotalsBold.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixProperties.FX.PropSubTotalsItalic.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixProperties.FX.PropSubTotalsUnderline.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixProperties.FX.PropSubTotalsApplyToHeaders.setInstanceProperty(instance, objects, void 0, void 0, instanceId)), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumeratePerLevelSubtotals = function(enumeration, hierarchyLevels, defaultTotalLabel, localizer) {
                debug.fF.assert(function() {
                    return !_.isEmpty(hierarchyLevels);
                }, "enumeratePerLevelSubtotals: Empty levels");
                for (var _i = 0, hierarchyLevels_1 = hierarchyLevels; _i < hierarchyLevels_1.length; _i++) for (var _a = 0, _b = hierarchyLevels_1[_i].sources; _a < _b.length; _a++) {
                    var source = _b[_a];
                    if (!source.isMeasure) {
                        var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals, {
                            metadata: source.queryName
                        }, source.displayName);
                        tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(instance, source.objects), 
                        enumeration.pushInstance(instance, !1), instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals, {
                            metadata: source.queryName
                        }, localizer("Visual_PivotTable_TotalLabel", source.displayName));
                        var value = tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(source.objects, !0) || defaultTotalLabel;
                        instance.properties[tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.propertyName] = value, 
                        enumeration.pushInstance(instance, !1);
                    }
                }
            }, TablixPropertyManager.prototype.enumerateColumnFormattingOptions = function(enumeration, columns, tablixType) {
                if (!_.isEmpty(columns)) for (var _i = 0, columns_5 = columns; _i < columns_5.length; _i++) {
                    var column = columns_5[_i];
                    enumeration.pushContainer({
                        displayName: column.displayName
                    });
                    var objects = column && column.objects, instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectColumnFormatting, {
                        metadata: column.queryName
                    });
                    !column.type.numeric || tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropColumnFormattingDisplayUnits.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingPrecision.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingPrecision.setInstanceValidValues(instance, {
                        numberRange: {
                            min: 0,
                            max: dataLabelViewModel1Consts.vo
                        }
                    })), this.tablixProperties.PropColumnFormattingFontColor.setInstanceProperty(instance, objects), 
                    this.tablixProperties.PropColumnFormattingBackColor.setInstanceProperty(instance, objects), 
                    tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || tablixProperties.FX.PropColumnFormattingAlignment.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingStyleHeader.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingStyleValues.setInstanceProperty(instance, objects), 
                    tablixType !== ITablixFormatting.Y.Matrix && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropColumnFormattingStyleSubtotals.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingStyleTotal.setInstanceProperty(instance, objects), 
                    enumeration.pushInstance(instance), enumeration.popContainer();
                }
            }, TablixPropertyManager.prototype.enumerateSparklines = function(enumeration, columns) {
                var _a;
                if (!_.isEmpty(columns)) for (var _i = 0, columns_6 = columns; _i < columns_6.length; _i++) {
                    var column = columns_6[_i];
                    if (null === (_a = column.type.misc) || void 0 === _a ? void 0 : _a.sparkline) {
                        enumeration.pushContainer({
                            displayName: column.displayName
                        });
                        var objects = column && column.objects, instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSparklines, {
                            metadata: column.queryName
                        });
                        if (tablixProperties.FX.PropSparklinesChartType.setInstanceProperty(instance, objects), 
                        this.tablixProperties.PropSparklinesDataColor.setInstanceProperty(instance, objects), 
                        tablixProperties.FX.PropSparklinesChartType.getValue(objects) === sparklineChartType.U.line) {
                            tablixProperties.FX.PropSparklinesStrokeWidth.setInstanceProperty(instance, objects), 
                            tablixProperties.FX.PropSparklinesStrokeWidth.setInstanceValidValues(instance, {
                                numberRange: {
                                    min: 1,
                                    max: 4
                                }
                            }), tablixProperties.FX.PropSparklinesMarkerType.setInstanceProperty(instance, objects);
                            var markerTypeValue = tablixProperties.FX.PropSparklinesMarkerType.getValue(objects);
                            null != markerTypeValue && 0 !== markerTypeValue && (this.tablixProperties.PropSparklinesMarkerColor.setInstanceProperty(instance, objects), 
                            tablixProperties.FX.PropSparklinesMarkerSize.setInstanceProperty(instance, objects), 
                            tablixProperties.FX.PropSparklinesMarkerSize.setInstanceValidValues(instance, {
                                numberRange: {
                                    min: 3,
                                    max: 5
                                }
                            }), tablixProperties.FX.PropSparklinesMarkerShape.setInstanceProperty(instance, objects));
                        }
                        enumeration.pushInstance(instance), enumeration.popContainer();
                    }
                }
            }, TablixPropertyManager.prototype.getTableObjects = function(dataView) {
                var objects = TablixPropertyManager.getMetadataObjects(dataView), generalTextSizePt = tablixProperties.FX.PropGeneralTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? units.B.createFromPt(+generalTextSizePt) : void 0, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropGeneralAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        totals: tablixProperties.FX.PropGeneralTableTotals.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: tablixProperties.FX.PropGridHorizontalTable.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                    rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                    imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropColumnsOutline.getValue(objects),
                    wordWrap: tablixProperties.FX.PropColumnsWordWrap.getValue(objects)
                }, formattingProperties.values = {
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: tablixProperties.FX.PropValuesOutline.getValue(objects),
                    urlIcon: tablixProperties.FX.PropValuesUrlIcon.getValue(objects)
                }, formattingProperties.total = {
                    fontColor: this.tablixProperties.PropTotalFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropTotalBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropTotalOutline.getValue(objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {};
                var columns = this.getTableColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_7 = columns; _i < columns_7.length; _i++) {
                    var column = columns_7[_i], objects_2 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_2),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_2),
                        styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_2),
                        styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_2),
                        styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_2)
                    }, formattingProperties.formatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !1
                    });
                }
                return formattingProperties;
            }, TablixPropertyManager.prototype.getMatrixObjects = function(dataView) {
                var objects = TablixPropertyManager.getMetadataObjects(dataView), generalTextSizePt = tablixProperties.FX.PropGeneralTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? units.B.createFromPt(+generalTextSizePt) : void 0, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropGeneralAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        rowSubtotals: tablixProperties.FX.PropGeneralMatrixRowSubtotals.getValue(objects),
                        columnSubtotals: tablixProperties.FX.PropGeneralMatrixColumnSubtotals.getValue(objects),
                        layout: tablixProperties.FX.PropGeneralMatrixLayout.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: tablixProperties.FX.PropGridHorizontalMatrix.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                    rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                    imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropColumnsOutline.getValue(objects)
                }, formattingProperties.rowHeaders = {
                    fontColor: this.tablixProperties.PropRowsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropRowsBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropRowsOutline.getValue(objects),
                    wordWrap: tablixProperties.FX.PropRowsWordWrap.getValue(objects),
                    repeatRowHeaders: tablixProperties.FX.PropRowsRepeatRowHeaders.getValue(objects)
                }, formattingProperties.values = {
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: tablixProperties.FX.PropValuesOutline.getValue(objects)
                }, formattingProperties.grandTotal = {
                    fontColor: this.tablixProperties.PropGrandTotalFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropGrandTotalBackColor.getValue(objects),
                    applyToHeaders: tablixProperties.FX.PropGrandTotalApplyToHeaders.getValue(objects)
                }, formattingProperties.subtotals = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {};
                var columns = this.getMatrixValuesColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_8 = columns; _i < columns_8.length; _i++) {
                    var column = columns_8[_i], objects_3 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_3),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_3),
                        styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_3),
                        styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_3),
                        styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_3),
                        styleSubTotals: tablixProperties.FX.PropColumnFormattingStyleSubtotals.getValue(objects_3)
                    }, formattingProperties.formatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !1
                    });
                }
                return this.addMatrixHierarchyColumnsFormatters(dataView.matrix.rows, formattingProperties.formatters), 
                this.addMatrixHierarchyColumnsFormatters(dataView.matrix.columns, formattingProperties.formatters), 
                formattingProperties;
            }, TablixPropertyManager.prototype.addMatrixHierarchyColumnsFormatters = function(hierarchy, formatters, tooltipFormatters) {
                if (hierarchy) {
                    debug.fF.assertValue(hierarchy.levels, "getMatrixHierarchyColumnsMetadata - hierarchy.levels");
                    for (var _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) {
                        var level = _a[_i];
                        debug.fF.assertValue(level.sources, "getMatrixHierarchyColumnsMetadata - level.sources");
                        for (var _b = 0, _c = level.sources; _b < _c.length; _b++) {
                            var column = _c[_b];
                            if (!column.isMeasure) {
                                var queryName = column.queryName;
                                formatters[queryName] = new valueFormatter.g({
                                    column,
                                    formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                                    nullsAreBlank: !1
                                }), tooltipFormatters && (tooltipFormatters[queryName] = new valueFormatter.g({
                                    column,
                                    formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                                    nullsAreBlank: !0
                                }));
                            }
                        }
                    }
                }
            }, TablixPropertyManager.prototype.addMatrixHierarchySubtotalLabels = function(hierarchy, settings, defaultLabel, perLevelSettings) {
                if (hierarchy) {
                    debug.fF.assertValue(hierarchy.levels, "getMatrixHierarchyColumnsProperties - hierarchy.levels");
                    for (var _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) {
                        var level = _a[_i];
                        debug.fF.assertValue(level.sources, "getMatrixHierarchyColumnsProperties - level.sources");
                        for (var subtotalLabel = void 0, _b = 0, _c = level.sources; _b < _c.length; _b++) {
                            var source = _c[_b];
                            source.isMeasure || (perLevelSettings && (subtotalLabel = tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(source.objects)), 
                            subtotalLabel || (subtotalLabel = defaultLabel), settings[source.queryName] = {
                                subtotalLabel
                            });
                        }
                    }
                }
            }, TablixPropertyManager.prototype.getPivotTableObjects = function(dataView, localizer, isEnabled, style, featureSwitches, supportsAnnotationHighlights) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                void 0 === supportsAnnotationHighlights && (supportsAnnotationHighlights = !1);
                var objects = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(style), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, generalFontSizePt = tablixProperties.FX.PropGridPivotTableTextSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), generalFontSize = null != generalFontSizePt ? units.B.createFromPt(+generalFontSizePt) : void 0, columnHeaderFontSizePt = tablixProperties.FX.PropColumnsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), columnHeaderFontSize = null != columnHeaderFontSizePt ? units.B.createFromPt(+columnHeaderFontSizePt) : void 0, rowHeaderFontSizePt = tablixProperties.FX.PropRowsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), rowHeaderFontSize = null != rowHeaderFontSizePt ? units.B.createFromPt(+rowHeaderFontSizePt) : void 0, rowHeaderExpandCollapseButtonSizePt = tablixProperties.FX.PropRowsExpandCollapseButtonsSize.getValue(objects), rowHeaderExpandCollapseButtonsSize = null != rowHeaderExpandCollapseButtonSizePt ? units.B.createFromPt(+rowHeaderExpandCollapseButtonSizePt) : void 0, expandCompositeHierarchy = tablixProperties.FX.PropRowsExpandCompositeHierarchy.getValue(objects), valuesFontSizePt = tablixProperties.FX.PropValuesFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), valuesFontSize = null != valuesFontSizePt ? units.B.createFromPt(+valuesFontSizePt) : void 0, grandTotalFontSizePt = tablixProperties.FX.PropGrandTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), columnGrandTotalFontSizePt = (null != grandTotalFontSizePt && units.B.createFromPt(+grandTotalFontSizePt), 
                tablixProperties.FX.PropColumnGrandTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, void 0, [ "Column" ])), columnGrandTotalFontSize = null != columnGrandTotalFontSizePt ? units.B.createFromPt(+columnGrandTotalFontSizePt) : void 0, rowGrandTotalFontSizePt = tablixProperties.FX.PropRowGrandTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, void 0, [ "Row" ]), rowGrandTotalFontSize = null != rowGrandTotalFontSizePt ? units.B.createFromPt(+rowGrandTotalFontSizePt) : void 0, subtotalsFontSizePt = tablixProperties.FX.PropSubTotalsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), rowSubtotalsFontSizePt = (null != subtotalsFontSizePt && units.B.createFromPt(+subtotalsFontSizePt), 
                tablixProperties.FX.PropSubTotalsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, "Row")), rowSubtotalsFontSize = null != rowSubtotalsFontSizePt ? units.B.createFromPt(+rowSubtotalsFontSizePt) : void 0, columnSubtotalsFontSizePt = tablixProperties.FX.PropSubTotalsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, "Column"), columnSubtotalsFontSize = null != columnSubtotalsFontSizePt ? units.B.createFromPt(+columnSubtotalsFontSizePt) : void 0, defaultTotalLabel = localizer(tablixConstants.qT), rowSubtotalsLabel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(objects) || defaultTotalLabel, columnSubtotalsLabel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(objects) || defaultTotalLabel, steppedLayout = tablixProperties.FX.PropRowsSteppedLayout.getValue(objects), layout = tablixProperties.FX.PropGeneralMatrixLayout.getValue(objects) || (steppedLayout ? pivotTableLayout.t.Compact : pivotTableLayout.t.Outline);
                featureSwitches.matrixLayouts && (steppedLayout = layout === pivotTableLayout.t.Compact);
                var blankRows = {
                    showBlankRows: tablixProperties.FX.PropBlankRowsShowBlankRows.getValue(objects),
                    blankRowColor: null !== (_a = this.tablixProperties.PropBlankRowsBlankRowColor.getValue(objects)) && void 0 !== _a ? _a : this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    blankRowTransparency: tablixProperties.FX.PropBlankRowsTransparency.getValue(objects),
                    showBorder: tablixProperties.FX.PropBlankRowsShowBorder.getValue(objects),
                    borderPosition: null !== (_b = tablixProperties.FX.PropBlankRowsBorderPosition.getValue(objects)) && void 0 !== _b ? _b : "Top",
                    borderColor: null !== (_c = this.tablixProperties.PropBlankRowsBorderColor.getValue(objects)) && void 0 !== _c ? _c : style.colorPalette.foregroundNeutralSecondary.value,
                    borderTransparency: tablixProperties.FX.PropBlankRowsBorderTransparency.getValue(objects),
                    borderWidth: tablixProperties.FX.PropBlankRowsBorderWidth.getValue(objects)
                }, rowSubtotals = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, "Row"),
                    fontFamily: tablixProperties.FX.PropSubTotalsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, "Row"),
                    fontSize: rowSubtotalsFontSize,
                    bold: tablixProperties.FX.PropSubTotalsBold.getValue(objects, void 0, void 0, void 0, "Row"),
                    italic: tablixProperties.FX.PropSubTotalsItalic.getValue(objects, void 0, void 0, void 0, "Row"),
                    underline: tablixProperties.FX.PropSubTotalsUnderline.getValue(objects, void 0, void 0, void 0, "Row"),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(objects, void 0, void 0, void 0, "Row"),
                    applyToHeaders: tablixProperties.FX.PropSubTotalsApplyToHeaders.getValue(objects, void 0, void 0, void 0, "Row")
                }, columnSubtotals = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, "Column"),
                    fontFamily: tablixProperties.FX.PropSubTotalsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, "Column"),
                    fontSize: columnSubtotalsFontSize,
                    bold: tablixProperties.FX.PropSubTotalsBold.getValue(objects, void 0, void 0, void 0, "Column"),
                    italic: tablixProperties.FX.PropSubTotalsItalic.getValue(objects, void 0, void 0, void 0, "Column"),
                    underline: tablixProperties.FX.PropSubTotalsUnderline.getValue(objects, void 0, void 0, void 0, "Column"),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(objects, void 0, void 0, void 0, "Column"),
                    applyToHeaders: tablixProperties.FX.PropSubTotalsApplyToHeaders.getValue(objects, void 0, void 0, void 0, "Column")
                }, columnGrandTotal = {
                    fontColor: this.tablixProperties.PropColumnGrandTotalFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, void 0, [ "Column" ]),
                    fontFamily: tablixProperties.FX.PropColumnGrandTotalFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, void 0, [ "Column" ]),
                    fontSize: columnGrandTotalFontSize,
                    bold: tablixProperties.FX.PropColumnGrandTotalBold.getValue(objects),
                    italic: tablixProperties.FX.PropColumnGrandTotalItalic.getValue(objects),
                    underline: tablixProperties.FX.PropColumnGrandTotalUnderline.getValue(objects),
                    backColor: this.tablixProperties.PropColumnGrandTotalBackColor.getValue(objects),
                    applyToHeaders: tablixProperties.FX.PropColumnGrandTotalApplyToHeaders.getValue(objects)
                }, rowGrandTotal = {
                    fontColor: this.tablixProperties.PropRowGrandTotalFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, void 0, [ "Row" ]),
                    fontFamily: tablixProperties.FX.PropRowGrandTotalFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, void 0, [ "Row" ]),
                    fontSize: rowGrandTotalFontSize,
                    bold: tablixProperties.FX.PropRowGrandTotalBold.getValue(objects),
                    italic: tablixProperties.FX.PropRowGrandTotalItalic.getValue(objects),
                    underline: tablixProperties.FX.PropRowGrandTotalUnderline.getValue(objects),
                    backColor: this.tablixProperties.PropRowGrandTotalBackColor.getValue(objects),
                    applyToHeaders: tablixProperties.FX.PropRowGrandTotalApplyToHeaders.getValue(objects)
                }, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.getValue(objects),
                        textSize: generalFontSize,
                        rowSubtotals: tablixProperties.FX.PropSubTotalsPivotTableRowSubtotals.getValue(objects),
                        columnSubtotals: tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotals.getValue(objects),
                        layout
                    },
                    grid: {
                        gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                        gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                        gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                        gridHorizontal: tablixProperties.FX.PropGridHorizontalMatrix.getValue(objects),
                        gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                        gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                        outline: tablixProperties.FX.PropGridOutlineStyle.getValue(objects) || tablixProperties.e9,
                        outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                        outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                        rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                        imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects),
                        imageWidth: tablixProperties.FX.PropGridImageWidth.getValue(objects)
                    },
                    columnHeaders: {
                        fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        fontFamily: tablixProperties.FX.PropColumnsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: columnHeaderFontSize,
                        bold: tablixProperties.FX.PropColumnsBold.getValue(objects),
                        italic: tablixProperties.FX.PropColumnsItalic.getValue(objects),
                        underline: tablixProperties.FX.PropColumnsUnderline.getValue(objects),
                        backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                        outline: this.ensureOutline(tablixProperties.FX.PropColumnsOutlineStyle.getValue(objects), objects, tablixProperties.UR),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects),
                        outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropColumnsOutlineWeight.getValue(objects), objects),
                        urlIcon: tablixProperties.FX.PropColumnsUrlIcon.getValue(objects),
                        wordWrap: tablixProperties.FX.PropColumnsWordWrap.getValue(objects),
                        alignment: tablixProperties.FX.PropColumnsAlignment.getValue(objects),
                        titleAlignment: tablixProperties.FX.PropColumnsAlignmentTitle.getValue(objects)
                    },
                    rowHeaders: {
                        fontColor: this.tablixProperties.PropRowsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        fontFamily: tablixProperties.FX.PropRowsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: rowHeaderFontSize,
                        bold: tablixProperties.FX.PropRowsBold.getValue(objects),
                        italic: tablixProperties.FX.PropRowsItalic.getValue(objects),
                        underline: tablixProperties.FX.PropRowsUnderline.getValue(objects),
                        backColor: this.tablixProperties.PropRowsBackColor.getValue(objects),
                        outline: this.ensureOutline(tablixProperties.FX.PropRowsOutlineStyle.getValue(objects), objects, tablixProperties.Pi),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropRowsOutlineColor.getValue(objects), objects),
                        outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropRowsOutlineWeight.getValue(objects), objects),
                        steppedLayout,
                        steppedLayoutIndentation: tablixProperties.FX.PropRowsSteppedLayoutIndentation.getValue(objects),
                        urlIcon: tablixProperties.FX.PropRowsUrlIcon.getValue(objects),
                        wordWrap: tablixProperties.FX.PropRowsWordWrap.getValue(objects),
                        alignment: tablixProperties.FX.PropRowsAlignment.getValue(objects),
                        showExpandCollapseButtons: !!isEnabled && tablixProperties.FX.PropRowsShowExpandCollapseButtons.getValue(objects),
                        expandCollapseButtonsColor: this.tablixProperties.PropRowsExpandCollapseButtonsColor.getValue(objects),
                        expandCollapseButtonsSize: rowHeaderExpandCollapseButtonsSize,
                        expandCompositeHierarchy,
                        repeatRowHeaders: tablixProperties.FX.PropRowsRepeatRowHeaders.getValue(objects),
                        legacyStyleDisabled: tablixProperties.FX.PropRowsLegacyStyleDisabled.getValue(objects)
                    },
                    values: {
                        fontFamily: tablixProperties.FX.PropValuesFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: valuesFontSize,
                        bold: tablixProperties.FX.PropValuesBold.getValue(objects),
                        italic: tablixProperties.FX.PropValuesItalic.getValue(objects),
                        underline: tablixProperties.FX.PropValuesUnderline.getValue(objects),
                        fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                        fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                        backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                        bandedRowHeaders: tablixProperties.FX.PropValuesBandedRowHeaders.getValue(objects),
                        outline: this.ensureOutline(tablixProperties.FX.PropValuesOutlineStyle.getValue(objects), objects, tablixProperties.IC),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects),
                        outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropValuesOutlineWeight.getValue(objects), objects),
                        urlIcon: tablixProperties.FX.PropValuesUrlIcon.getValue(objects),
                        wordWrap: tablixProperties.FX.PropValuesWordWrap.getValue(objects),
                        valuesOnRow: tablixProperties.FX.PropValuesOnRow.getValue(objects)
                    },
                    columnGrandTotal,
                    rowGrandTotal,
                    subtotals: {
                        rowSubtotalsPosition: layout === pivotTableLayout.t.Tabular ? rowSubtotalPosition.I : tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPosition.getValue(objects),
                        rowSubtotalsLabel,
                        columnSubtotalsLabel
                    },
                    rowSubtotals,
                    columnSubtotals,
                    blankRows,
                    columnFormatting: {},
                    formatters: {},
                    tooltipFormatters: {},
                    sparklines: {}
                }, columns = this.getMatrixValuesColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_9 = columns; _i < columns_9.length; _i++) {
                    var column = columns_9[_i], objects_4 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_4),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_4),
                        alignment: tablixProperties.FX.PropColumnFormattingAlignment.getValue(objects_4),
                        styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_4),
                        styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_4),
                        styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_4),
                        styleSubTotals: tablixProperties.FX.PropColumnFormattingStyleSubtotals.getValue(objects_4),
                        dataBarsSettings: tablixProperties.FX.PropColumnFormattingDataBars.getValue(objects_4),
                        icon: tablixProperties.FX.PropValuesIcon.getValue(objects_4)
                    };
                    var displayUnit = void 0, precision = void 0;
                    if (column.type.numeric && (displayUnit = tablixProperties.FX.PropColumnFormattingDisplayUnits.getValue(objects_4), 
                    precision = tablixProperties.FX.PropColumnFormattingPrecision.getValue(objects_4)), 
                    formattingProperties.formatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !1,
                        displayUnit,
                        precision,
                        trailingZeroes: !0
                    }), formattingProperties.tooltipFormatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !0,
                        displayUnit,
                        precision,
                        trailingZeroes: !0
                    }), null === (_d = column.type.misc) || void 0 === _d ? void 0 : _d.sparkline) {
                        var chartType = tablixProperties.FX.PropSparklinesChartType.getValue(objects_4), formatter = new SparklineTextFormatter(column.displayName, column.type, localizer);
                        formattingProperties.formatters[column.queryName] = formatter, formattingProperties.tooltipFormatters[column.queryName] = formatter, 
                        formattingProperties.sparklines[column.queryName] = {
                            chartType,
                            dataColor: this.tablixProperties.PropSparklinesDataColor.getValue(objects_4).solid.color,
                            strokeWidth: tablixProperties.FX.PropSparklinesStrokeWidth.getValue(objects_4),
                            marker: {
                                show: !0,
                                typeFlags: tablixProperties.FX.PropSparklinesMarkerType.getValue(objects_4),
                                color: this.tablixProperties.PropSparklinesMarkerColor.getValue(objects_4).solid.color,
                                size: tablixProperties.FX.PropSparklinesMarkerSize.getValue(objects_4),
                                shape: tablixProperties.FX.PropSparklinesMarkerShape.getValue(objects_4)
                            }
                        };
                    }
                }
                supportsAnnotationHighlights && (formattingProperties.annotationFormatting = {
                    columnHeaders: {}
                }, _.forEach(null === (_e = dataView.metadata) || void 0 === _e ? void 0 : _e.columns, function(column) {
                    var _a;
                    if (null === (_a = column.objects) || void 0 === _a ? void 0 : _a.annotations) {
                        var annotationHighlight = (0, dataViewObject2.NA)(column.objects, pivotTable_capabilities.t.annotations.highlights);
                        annotationHighlight && (null == annotationHighlight.backColor && !0 !== annotationHighlight.emphasizeText || (formattingProperties.annotationFormatting.columnHeaders[column.queryName] = {
                            backColor: annotationHighlight.backColor,
                            bold: annotationHighlight.emphasizeText
                        }));
                    }
                }), _.isEmpty(formattingProperties.annotationFormatting.columnHeaders) && (formattingProperties.annotationFormatting = void 0));
                var perRowLevelSubtotal = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPerLevel.getValue(objects), perColumnLevelSubtotal = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(objects);
                return this.addMatrixHierarchySubtotalLabels(null === (_f = null == dataView ? void 0 : dataView.matrix) || void 0 === _f ? void 0 : _f.rows, formattingProperties.columnFormatting, rowSubtotalsLabel, perRowLevelSubtotal), 
                this.addMatrixHierarchySubtotalLabels(null === (_g = null == dataView ? void 0 : dataView.matrix) || void 0 === _g ? void 0 : _g.columns, formattingProperties.columnFormatting, columnSubtotalsLabel, perColumnLevelSubtotal), 
                this.addMatrixHierarchyColumnsFormatters(null === (_h = null == dataView ? void 0 : dataView.matrix) || void 0 === _h ? void 0 : _h.rows, formattingProperties.formatters, formattingProperties.tooltipFormatters), 
                this.addMatrixHierarchyColumnsFormatters(null === (_j = null == dataView ? void 0 : dataView.matrix) || void 0 === _j ? void 0 : _j.columns, formattingProperties.formatters, formattingProperties.tooltipFormatters), 
                formattingProperties;
            }, TablixPropertyManager.prototype.getTableExObjects = function(dataView, localizer, style, featureSwitches) {
                var _a, objects = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(style), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, generalTextSizePt = tablixProperties.FX.PropGridPivotTableTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? units.B.createFromPt(+generalTextSizePt) : void 0, columnHeaderFontSizePt = tablixProperties.FX.PropColumnsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), columnHeaderFontSize = null != columnHeaderFontSizePt ? units.B.createFromPt(+columnHeaderFontSizePt) : void 0, valuesFontSizePt = tablixProperties.FX.PropValuesFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), valuesFontSize = null != valuesFontSizePt ? units.B.createFromPt(+valuesFontSizePt) : void 0, totalFontSizePt = tablixProperties.FX.PropTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), totalFontSize = null != totalFontSizePt ? units.B.createFromPt(+totalFontSizePt) : void 0, rowWithReferenceText = tablixProperties.FX.ProprowWithReferenceText.getValue(objects), formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        totals: tablixProperties.FX.PropTotalTableExTotals.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: tablixProperties.FX.PropGridHorizontalTable.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                    outline: tablixProperties.FX.PropGridOutlineStyle.getValue(objects) || tablixProperties.e9,
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                    rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                    imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects),
                    imageWidth: tablixProperties.FX.PropGridImageWidth.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                    fontFamily: tablixProperties.FX.PropColumnsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                    fontSize: columnHeaderFontSize,
                    bold: tablixProperties.FX.PropColumnsBold.getValue(objects),
                    italic: tablixProperties.FX.PropColumnsItalic.getValue(objects),
                    underline: tablixProperties.FX.PropColumnsUnderline.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: this.ensureOutline(tablixProperties.FX.PropColumnsOutlineStyle.getValue(objects), objects, tablixProperties.UR),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropColumnsOutlineWeight.getValue(objects), objects),
                    wordWrap: tablixProperties.FX.PropColumnsWordWrap.getValue(objects),
                    alignment: tablixProperties.FX.PropColumnsAlignment.getValue(objects)
                }, formattingProperties.values = {
                    fontFamily: tablixProperties.FX.PropValuesFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                    fontSize: valuesFontSize,
                    bold: tablixProperties.FX.PropValuesBold.getValue(objects),
                    italic: tablixProperties.FX.PropValuesItalic.getValue(objects),
                    underline: tablixProperties.FX.PropValuesUnderline.getValue(objects),
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: this.ensureOutline(tablixProperties.FX.PropValuesOutlineStyle.getValue(objects), objects, tablixProperties.IC),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropValuesOutlineWeight.getValue(objects), objects),
                    urlIcon: tablixProperties.FX.PropValuesUrlIcon.getValue(objects),
                    wordWrap: tablixProperties.FX.PropValuesWordWrap.getValue(objects)
                };
                var totalLabel = tablixProperties.FX.PropTotalTableExTotalLabel.getValue(objects);
                formattingProperties.total = {
                    totalLabel: totalLabel || localizer(tablixConstants.qT),
                    totalPlaceholderLabel: localizer(tablixConstants.bn),
                    isDefaultTotalLabel: !totalLabel,
                    fontFamily: tablixProperties.FX.PropTotalFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family),
                    fontSize: totalFontSize,
                    bold: tablixProperties.FX.PropTotalBold.getValue(objects),
                    italic: tablixProperties.FX.PropTotalItalic.getValue(objects),
                    underline: tablixProperties.FX.PropTotalUnderline.getValue(objects),
                    fontColor: this.tablixProperties.PropTotalFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color),
                    backColor: this.tablixProperties.PropTotalBackColor.getValue(objects),
                    outline: this.ensureOutline(tablixProperties.FX.PropTotalOutlineStyle.getValue(objects), objects, tablixProperties.Sc),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropTotalOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropTotalOutlineWeight.getValue(objects), objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {}, 
                formattingProperties.tooltipFormatters = {}, formattingProperties.sparklines = {};
                var columns = this.getTableColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_10 = columns; _i < columns_10.length; _i++) {
                    var column = columns_10[_i];
                    if (column) {
                        var objects_5 = column.objects, queryName = column.queryName;
                        formattingProperties.columnFormatting[queryName] = {
                            fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_5),
                            backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_5),
                            alignment: tablixProperties.FX.PropColumnFormattingAlignment.getValue(objects_5),
                            styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_5),
                            styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_5),
                            styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_5),
                            dataBarsSettings: tablixProperties.FX.PropColumnFormattingDataBars.getValue(objects_5),
                            icon: tablixProperties.FX.PropValuesIcon.getValue(objects_5)
                        };
                        var displayUnit = void 0, precision = void 0;
                        if (column.type.numeric && (displayUnit = tablixProperties.FX.PropColumnFormattingDisplayUnits.getValue(objects_5), 
                        precision = tablixProperties.FX.PropColumnFormattingPrecision.getValue(objects_5)), 
                        formattingProperties.formatters[queryName] = new valueFormatter.g({
                            column,
                            formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                            nullsAreBlank: !1,
                            displayUnit,
                            precision,
                            trailingZeroes: !0
                        }), formattingProperties.tooltipFormatters[queryName] = new valueFormatter.g({
                            column,
                            formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                            nullsAreBlank: !0,
                            displayUnit,
                            precision,
                            trailingZeroes: !0
                        }), null === (_a = column.type.misc) || void 0 === _a ? void 0 : _a.sparkline) {
                            var chartType = tablixProperties.FX.PropSparklinesChartType.getValue(objects_5), formatter = new SparklineTextFormatter(column.displayName, column.type, localizer);
                            formattingProperties.formatters[queryName] = formatter, formattingProperties.tooltipFormatters[queryName] = formatter, 
                            formattingProperties.sparklines[queryName] = {
                                chartType,
                                dataColor: this.tablixProperties.PropSparklinesDataColor.getValue(objects_5).solid.color,
                                strokeWidth: tablixProperties.FX.PropSparklinesStrokeWidth.getValue(objects_5),
                                marker: {
                                    show: !0,
                                    typeFlags: tablixProperties.FX.PropSparklinesMarkerType.getValue(objects_5),
                                    color: this.tablixProperties.PropSparklinesMarkerColor.getValue(objects_5).solid.color,
                                    size: tablixProperties.FX.PropSparklinesMarkerSize.getValue(objects_5),
                                    shape: tablixProperties.FX.PropSparklinesMarkerShape.getValue(objects_5)
                                }
                            };
                        }
                    }
                }
                return formattingProperties.rowWithReferenceText = {
                    rowWithReferenceText
                }, formattingProperties;
            }, TablixPropertyManager.prototype.ensureOutline = function(currentValue, objects, defaultValue) {
                var _a;
                return null !== (_a = null != currentValue ? currentValue : tablixProperties.FX.PropGridOutlineStyle.getValue(objects)) && void 0 !== _a ? _a : defaultValue;
            }, TablixPropertyManager.prototype.ensureOutlineWeight = function(currentValue, objects) {
                return null != currentValue ? currentValue : tablixProperties.FX.PropGridOutlineWeight.getValue(objects);
            }, TablixPropertyManager.prototype.outlineOverrideFn = function(objects, propertyId) {
                return !!(0, dataViewObject2.NA)(objects, propertyId);
            }, TablixPropertyManager.prototype.ensureOutlineColor = function(currentValue, objects) {
                return null != currentValue ? currentValue : this.tablixProperties.PropGridOutlineColor.getValue(objects);
            }, TablixPropertyManager.getTextSizeInPx = function(fontSize) {
                return StandaloneUtility1.FP.toString(fontSize.px);
            }, TablixPropertyManager.prototype.shouldShowTableTotalsOption = function(dataView) {
                return !(dataView && dataView.table && !_.isEmpty(dataView.table.columns) && _.some(dataView.table.columns, function(column) {
                    return column.discourageAggregationAcrossGroups;
                }));
            }, TablixPropertyManager.prototype.shouldShowRowSubtotalsOption = function(dataView) {
                return !(!dataView || (0, dataViewMatrixUtils.be)(dataView.matrix) < 1 || this.isDiscourageAggregationAcrossGroups(dataView.matrix.rows.levels));
            }, TablixPropertyManager.prototype.shouldShowColumnSubtotalsOption = function(dataView) {
                if (!dataView || !dataView.matrix || (0, dataViewMatrixUtils.pr)(dataView.matrix.columns) < 1) return !1;
                var levels = dataView.matrix.columns.levels;
                return dataView.matrix.valueSources.length > 1 && (levels = _.initial(levels)), 
                !this.isDiscourageAggregationAcrossGroups(levels);
            }, TablixPropertyManager.prototype.isDiscourageAggregationAcrossGroups = function(levels) {
                var lastLevel = _.last(levels);
                return lastLevel && _.some(lastLevel.sources, function(source) {
                    return source.discourageAggregationAcrossGroups;
                });
            }, TablixPropertyManager.prototype.getTablixTextClassProperties = function(style) {
                return {
                    fontSizeOverrideFn: this.fontSizeOverridePredicate(),
                    fontFamilyOverrideFn: this.fontFamilyOverridePredicate(),
                    fontColorOverrideFn: this.fontColorOverridePredicate(),
                    labelFontProperties: (0, textHelper.m)(style, "label"),
                    boldLabelFontProperties: (0, textHelper.m)(style, "boldLabel")
                };
            }, TablixPropertyManager.prototype.fontSizeOverridePredicate = function() {
                var _this = this;
                return function(objects, propertyId, instanceId) {
                    var currentObject = (0, dataViewObject2.RK)(objects, propertyId.objectName), gridObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectGrid), valuesObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectValues), subTotalsObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectSubTotals), isGridDependentObject = _this.gridDependentObject(propertyId.objectName), gridOverride = (0, 
                    dataViewObject3.N)(gridObject, "textSize", void 0) && !(0, dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), isValuesDependentObject = _this.valuesDependentObject(propertyId.objectName), valuesOverride = (0, 
                    dataViewObject3.N)(valuesObject, "fontSize", void 0) && !(0, dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), isSubTotalsDependentObject = _this.subTotalsDependentObject(propertyId.objectName), subTotalsOverride = _this.getSubTotalsValue(propertyId.objectName, subTotalsObject, "fontSize", void 0) && !(0, 
                    dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), objectOverride = !!(0, 
                    dataViewObject3.N)(currentObject, propertyId.objectName === tablixProperties.FX.ObjectGrid ? "textSize" : "fontSize", void 0, instanceId);
                    return isGridDependentObject && gridOverride || isValuesDependentObject && valuesOverride || isSubTotalsDependentObject && subTotalsOverride || objectOverride;
                };
            }, TablixPropertyManager.prototype.fontFamilyOverridePredicate = function() {
                var _this = this;
                return function(objects, propertyId, instanceId) {
                    var currentObject = (0, dataViewObject2.RK)(objects, propertyId.objectName), valuesObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectValues), subTotalsObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectSubTotals), isValuesDependentObject = _this.valuesDependentObject(propertyId.objectName), valuesOverride = (0, 
                    dataViewObject3.N)(valuesObject, "fontFamily", void 0) && !(0, dataViewObject3.N)(currentObject, propertyId.propertyName, void 0), isSubTotalsDependentObject = _this.subTotalsDependentObject(propertyId.objectName), subTotalsOverride = _this.getSubTotalsValue(propertyId.objectName, subTotalsObject, "fontFamily", void 0) && !(0, 
                    dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), objectOverride = !!(0, 
                    dataViewObject3.N)(currentObject, "fontFamily", void 0, instanceId);
                    return isValuesDependentObject && valuesOverride || isSubTotalsDependentObject && subTotalsOverride || objectOverride;
                };
            }, TablixPropertyManager.prototype.fontColorOverridePredicate = function() {
                return function(objects, propertyId, instanceId) {
                    var currentObject = (0, dataViewObject2.RK)(objects, propertyId.objectName), propertyName = propertyId.objectName === tablixProperties.FX.ObjectValues ? "fontColorPrimary" : "fontColor", defaultValue = (0, 
                    dataViewObject3.N)(currentObject, propertyName);
                    return !!(0, dataViewObject3.N)(currentObject, propertyName, defaultValue, instanceId);
                };
            }, TablixPropertyManager.prototype.gridDependentObject = function(objectName) {
                return this.valuesDependentObject(objectName) || objectName === tablixProperties.FX.ObjectRowHeaders || objectName === tablixProperties.FX.ObjectColumnHeaders || objectName === tablixProperties.FX.ObjectValues;
            }, TablixPropertyManager.prototype.valuesDependentObject = function(objectName) {
                return this.subTotalsDependentObject(objectName) || objectName === tablixProperties.FX.ObjectSubTotals;
            }, TablixPropertyManager.prototype.subTotalsDependentObject = function(objectName) {
                return objectName === tablixProperties.FX.ObjectTotal || objectName === tablixProperties.FX.ObjectRowTotal || objectName === tablixProperties.FX.ObjectColumnTotal;
            }, TablixPropertyManager.prototype.getSubTotalsValue = function(objectName, subTotalsObject, propertyName, defaultValue) {
                var instanceId = objectName === tablixProperties.FX.ObjectRowTotal ? "Row" : objectName === tablixProperties.FX.ObjectColumnTotal ? "Column" : void 0;
                return defaultValue = null != defaultValue ? defaultValue : (0, dataViewObject3.N)(subTotalsObject, propertyName), 
                (0, dataViewObject3.N)(subTotalsObject, propertyName, defaultValue, instanceId);
            }, TablixPropertyManager.ImageSizeMin = 8, TablixPropertyManager.ImageSizeMax = 512, 
            TablixPropertyManager;
        }(), SparklineTextFormatter = function() {
            function SparklineTextFormatter(displayName, sparklineType, localizer) {
                this.displayName = displayName, this.sparklineType = sparklineType, this.localizer = localizer;
            }
            return SparklineTextFormatter.prototype.format = function(value, _dataPointObjects) {
                var result = function(displayName, sparklineType, value) {
                    if (value) {
                        var data = value.points;
                        if (data = _.filter(data, function(d) {
                            return null != d.x && null != d.y;
                        }), !_.isEmpty(data)) {
                            var numberOfPoints = _.size(data);
                            if (1 === numberOfPoints) return {
                                key: "Sparkline_Tooltip_SinglePoint_CategoricalSameHighLow",
                                parameters: [ displayName, value.lowY ]
                            };
                            var groupingType = sparklineType.misc.sparkline.groupingType;
                            if (groupingType && (groupingType.numeric || groupingType.dateTime || groupingType.temporal)) {
                                var firstValue_1 = data[0].y, lastValue = data[numberOfPoints - 1].y;
                                if (!_.some(data, function(d) {
                                    return d.y !== firstValue_1;
                                })) return {
                                    key: "Sparkline_Tooltip_ScalarNoChange",
                                    parameters: [ displayName, firstValue_1 ]
                                };
                                if ((0, dataViewRegression.JM)(_.map(data, function(p) {
                                    return p.x;
                                }), _.map(data, function(p) {
                                    return p.y;
                                }), !0).rSquared > .5) {
                                    var value_1, key = "Sparkline_Tooltip_ScalarTrend";
                                    return key += lastValue > firstValue_1 ? "Up" : "Down", 0 !== firstValue_1 ? (value_1 = 100 * (lastValue - firstValue_1) / firstValue_1, 
                                    key += "Percent") : (value_1 = lastValue - firstValue_1, key += "Value"), {
                                        key,
                                        parameters: [ displayName, +Math.abs(value_1).toFixed(2) ]
                                    };
                                }
                                return {
                                    key: "Sparkline_Tooltip_CategoricalDifferentHighLow_ScalarNoTrend",
                                    parameters: [ displayName, value.lowY, value.highY ]
                                };
                            }
                            return value.lowY === value.highY ? {
                                key: "Sparkline_Tooltip_SinglePoint_CategoricalSameHighLow",
                                parameters: [ displayName, value.lowY ]
                            } : {
                                key: "Sparkline_Tooltip_CategoricalDifferentHighLow_ScalarNoTrend",
                                parameters: [ displayName, value.lowY, value.highY ]
                            };
                        }
                    }
                }(this.displayName, this.sparklineType, value);
                if (result) return this.localizer.apply(this, (0, tslib_es6.__spreadArray)([ result.key ], result.parameters, !1));
            }, SparklineTextFormatter;
        }();
    },
    72687: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            Table: function() {
                return Table;
            }
        });
        var converterHelper = __webpack_require__(54522), objectEnumerationBuilder = __webpack_require__(28579), tablixProperties = __webpack_require__(55007), debug = __webpack_require__(62458), Prototype = __webpack_require__(39681), enums = __webpack_require__(46135), dataViewUtils = __webpack_require__(99318), tablixLayoutManager = __webpack_require__(16324), tablixUtils1 = __webpack_require__(93340), tablixConstants = __webpack_require__(71090), ITablixFormatting = __webpack_require__(73889), tablixColumnWidthManager = __webpack_require__(81671), tablixControl = __webpack_require__(93414), tablixPropertyManager = __webpack_require__(74304), table_tableBinder = __webpack_require__(44245), TableHierarchyNavigator = function() {
            function TableHierarchyNavigator(tableDataView, isDataComplete, formatters, tablixProperties) {
                this.tableDataView = tableDataView, this.isDataComplete = isDataComplete, this.formatters = formatters, 
                this.tablixProperties = tablixProperties, debug.fF.assertValue(tableDataView, "tableDataView"), 
                debug.fF.assertValue(formatters, "formatters");
            }
            return TableHierarchyNavigator.prototype.getColumnHierarchyDepth = function() {
                return 1;
            }, TableHierarchyNavigator.prototype.getRowHierarchyDepth = function() {
                return 1;
            }, TableHierarchyNavigator.prototype.getLeafCount = function(hierarchy) {
                return hierarchy.length;
            }, TableHierarchyNavigator.prototype.getLeafAt = function(hierarchy, index) {
                return hierarchy[index];
            }, TableHierarchyNavigator.prototype.getParent = function(item) {
                return null;
            }, TableHierarchyNavigator.prototype.getIndex = function(item) {
                return item ? this.isRow(item) ? item.index : this.getColumnIndex(item) : -1;
            }, TableHierarchyNavigator.prototype.isRow = function(item) {
                return !!item && void 0 !== item.index && void 0 !== item.values;
            }, TableHierarchyNavigator.prototype.getColumnIndex = function(item) {
                return TableHierarchyNavigator.getIndex(this.tableDataView.columns, item);
            }, TableHierarchyNavigator.prototype.isLeaf = function(item) {
                return !0;
            }, TableHierarchyNavigator.prototype.isRowHierarchyLeaf = function(cornerItem) {
                return !1;
            }, TableHierarchyNavigator.prototype.isColumnHierarchyLeaf = function(cornerItem) {
                return !0;
            }, TableHierarchyNavigator.prototype.isFirstItem = function(item, items) {
                return item === items[0];
            }, TableHierarchyNavigator.prototype.areAllParentsFirst = function(item, items) {
                return this.isFirstItem(item, items);
            }, TableHierarchyNavigator.prototype.isLastItem = function(item, items) {
                return debug.fF.assertValue(item, "item"), (items === this.tableDataView.columns || this.isDataComplete) && item === _.last(items);
            }, TableHierarchyNavigator.prototype.areAllParentsLast = function(item, items) {
                return this.isLastItem(item, items);
            }, TableHierarchyNavigator.prototype.getChildren = function(item) {
                return null;
            }, TableHierarchyNavigator.prototype.getChildrenLevelDifference = function(item) {
                return 1 / 0;
            }, TableHierarchyNavigator.prototype.getCount = function(items) {
                return items.length;
            }, TableHierarchyNavigator.prototype.getAt = function(items, index) {
                return items[index];
            }, TableHierarchyNavigator.prototype.getLevel = function(item) {
                return 0;
            }, TableHierarchyNavigator.prototype.getIntersection = function(rowItem, columnItem) {
                var value, objects, isTotal = !1, position = new tablixUtils1.ri, columnIndex = TableHierarchyNavigator.getIndex(this.tableDataView.columns, columnItem);
                if (position.column.index = columnIndex, position.column.isFirst = 0 === columnIndex, 
                position.column.isLast = columnIndex === this.tableDataView.columns.length - 1, 
                null != rowItem.totalCells) isTotal = !0, value = rowItem.totalCells[columnIndex], 
                objects = rowItem.objects && rowItem.objects[columnIndex]; else {
                    var row = rowItem, rowIndex = row.index;
                    position.row.index = rowIndex, position.row.isFirst = 0 === rowIndex, position.row.isLast = this.isDataComplete && rowIndex === this.tableDataView.rows.length - 1, 
                    value = row.values[columnIndex], objects = row.values.objects && row.values.objects[columnIndex];
                }
                var cellItem = new tablixUtils1.jG(value, objects, !1, !1, isTotal, !1, !1, columnItem, this.formatters[columnItem.queryName]);
                if (cellItem.position = position, rowItem && rowItem.values) {
                    var rowObjects = rowItem.values.objects;
                    if (rowObjects) {
                        var cellObject = rowObjects[columnIndex];
                        cellObject && (cellItem.backColor = this.tablixProperties.PropValuesBackColor.getValue(cellObject));
                    }
                }
                return cellItem;
            }, TableHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                return null;
            }, TableHierarchyNavigator.prototype.headerItemEquals = function(item1, item2) {
                return item1 === item2 || (item1.displayName && item2.displayName ? (0, dataViewUtils.Mw)(item1, item2) : !(!this.isRow(item1) || !this.isRow(item2)) && item1.index === item2.index);
            }, TableHierarchyNavigator.prototype.bodyCellItemEquals = function(item1, item2) {
                return item1.isMatch(item2);
            }, TableHierarchyNavigator.prototype.cornerCellItemEquals = function(item1, item2) {
                return !0;
            }, TableHierarchyNavigator.prototype.update = function(table, isDataComplete, formatters) {
                this.tableDataView = table, this.isDataComplete = isDataComplete, this.formatters = formatters;
            }, TableHierarchyNavigator.getIndex = function(items, item) {
                for (var index = 0, len = items.length; index < len; index++) {
                    var arrayItem = items[index];
                    if (null != arrayItem.index && null != item.index && arrayItem.index === item.index) return index;
                    if (item === items[index]) return index;
                }
                return -1;
            }, TableHierarchyNavigator;
        }(), Table = function() {
            function Table(options) {
                this.isTouchDisabled = options && options.isTouchDisabled;
            }
            return Table.prototype.init = function(options) {
                this.element = options.element, this.updateViewport(options.viewport), this.isInteractive = options.interactivity && null != options.interactivity.selection, 
                this.getLocalizedString = options.host.getLocalizedString.bind(options.host), this.hostServices = options.host, 
                this.persistingObjects = !1, this.waitingForData = !1, this.lastAllowHeaderResize = !0, 
                this.waitingForSort = !1, this.style = options.style, this.tablixPropertyManager = new tablixPropertyManager.U(this.style);
            }, Table.converter = function(dataView, tablixPropertyManager) {
                var table = dataView.table;
                debug.fF.assertValue(table, "table"), debug.fF.assertValue(table.rows, "table.rows");
                var visualTable = (0, Prototype.ED)(table);
                visualTable.visualRows = [];
                for (var i = 0; i < table.rows.length; i++) visualTable.visualRows.push({
                    index: i,
                    values: table.rows[i]
                });
                return visualTable.formattingProperties = tablixPropertyManager.getTableObjects(dataView), 
                visualTable;
            }, Table.prototype.onResizing = function(finalViewport) {
                this.updateViewport(finalViewport);
            }, Table.prototype.getColumnWidthManager = function() {
                return this.columnWidthManager;
            }, Table.prototype.onDataChanged = function(options) {
                debug.fF.assertValue(options, "options");
                var dataViews = options.dataViews;
                if (dataViews && dataViews.length > 0) {
                    var previousDataView = this.dataView;
                    if (this.dataView = dataViews[0], this.persistingObjects) return void (this.persistingObjects = !1);
                    var visualTable = Table.converter(this.dataView, this.tablixPropertyManager);
                    options.operationKind === enums.su.Append ? (this.createOrUpdateHierarchyNavigator(visualTable), 
                    this.tablixControl.updateModels(!1, visualTable.visualRows, visualTable.columns), 
                    this.refreshControl(!1)) : (this.createOrUpdateHierarchyNavigator(visualTable), 
                    this.createColumnWidthManager(), this.createOrUpdateTablixControl(visualTable), 
                    this.updateInternal(previousDataView, visualTable));
                }
                this.waitingForData = !1, this.waitingForSort = !1;
            }, Table.prototype.createColumnWidthManager = function() {
                var _this = this;
                this.columnWidthManager ? this.columnWidthManager.updateDataView(this.dataView) : this.columnWidthManager = new tablixColumnWidthManager.K(this.dataView, !1, function(objectInstances) {
                    return _this.persistColumnWidths(objectInstances);
                });
            }, Table.prototype.persistColumnWidths = function(objectInstances) {
                this.persistingObjects = !0, this.hostServices.persistProperties(objectInstances);
            }, Table.prototype.updateViewport = function(newViewport) {
                this.currentViewport = newViewport, this.tablixControl && (this.tablixControl.viewport = this.currentViewport, 
                this.verifyHeaderResize(), this.refreshControl(!1));
            }, Table.prototype.refreshControl = function(clear) {
                (this.element.is(":visible") || 1 === this.getLayoutKind()) && this.tablixControl.refresh(clear);
            }, Table.prototype.getLayoutKind = function() {
                return this.isInteractive ? 0 : 1;
            }, Table.prototype.createOrUpdateHierarchyNavigator = function(visualTable) {
                var isDataComplete = !this.dataView.metadata.segment;
                if (this.tablixControl) this.hierarchyNavigator.update(visualTable, isDataComplete, visualTable.formattingProperties.formatters); else {
                    var dataNavigator = new TableHierarchyNavigator(visualTable, isDataComplete, visualTable.formattingProperties.formatters, this.tablixPropertyManager.tablixProperties);
                    this.hierarchyNavigator = dataNavigator;
                }
            }, Table.prototype.createOrUpdateTablixControl = function(visualTable) {
                this.tablixControl ? this.tablixControl.getBinder().updateDataView(visualTable) : this.tablixControl = this.createControl(this.hierarchyNavigator, visualTable);
            }, Table.prototype.createControl = function(dataNavigator, visualTable) {
                var _this = this, layoutKind = this.getLayoutKind(), textSize = visualTable.formattingProperties.general.textSize, tableBinder = new table_tableBinder.Yc({
                    onBindRowHeader: function(item) {
                        return _this.onBindRowHeader(item);
                    },
                    onColumnHeaderClick: function(queryName, sortDirection) {
                        return _this.onColumnHeaderClick(queryName, sortDirection);
                    },
                    layoutKind,
                    columnWidthManager: this.columnWidthManager,
                    tablixProperties: this.tablixPropertyManager.tablixProperties
                }, visualTable), layoutManager = 1 === layoutKind ? tablixLayoutManager.dk.createLayoutManager(tableBinder) : tablixLayoutManager.Vz.createLayoutManager(tableBinder, this.columnWidthManager), tablixContainer = document.createElement("div");
                this.element.append(tablixContainer);
                var tablixOptions = {
                    interactive: this.isInteractive,
                    enableTouchSupport: !this.isTouchDisabled,
                    layoutKind,
                    fontSize: tablixPropertyManager.U.getTextSizeInPx(textSize)
                };
                return new tablixControl.d(dataNavigator, layoutManager, tableBinder, tablixContainer, tablixOptions);
            }, Table.prototype.updateInternal = function(previousDataView, visualTable) {
                var _this = this, textSize = visualTable.formattingProperties.general.textSize;
                1 === this.getLayoutKind() && this.tablixControl.layoutManager.adjustContentSize((0, 
                converterHelper.Gr)(this.dataView)), this.tablixControl.fontSize = tablixPropertyManager.U.getTextSizeInPx(textSize), 
                this.tablixControl.wordWrapColumnHeaders = visualTable.formattingProperties.columnHeaders.wordWrap, 
                this.verifyHeaderResize(), this.tablixControl.updateModels(!0, visualTable.visualRows, visualTable.columns);
                var totals = this.createTotalsRow(this.dataView);
                this.tablixControl.rowDimension.setFooter(totals), this.tablixControl.viewport = this.currentViewport;
                var shouldClearControl = this.shouldClearControl(previousDataView, this.dataView);
                setTimeout(function() {
                    _this.refreshControl(shouldClearControl);
                    var widthChanged = _this.columnWidthManager.onColumnsRendered(_this.tablixControl.layoutManager.columnWidthsToPersist);
                    _this.persistingObjects && !widthChanged && (_this.persistingObjects = !1);
                }, 0);
            }, Table.prototype.shouldClearControl = function(previousDataView, newDataView) {
                return !(this.waitingForSort && previousDataView && newDataView && (0, dataViewUtils.C0)(previousDataView.metadata, newDataView.metadata));
            }, Table.prototype.createTotalsRow = function(dataView) {
                if (!tablixProperties.FX.PropGeneralTableTotals.getValue(dataView.metadata.objects)) return null;
                var totals = dataView.table.totals;
                if (!totals || 0 === totals.length) return null;
                for (var totalRow = [], i = 0, len = dataView.table.columns.length; i < len; ++i) {
                    var totalValue = totals[i];
                    totalRow.push(null != totalValue ? totalValue : 0 === i ? this.getLocalizedString("TableTotalLabel") : "");
                }
                return {
                    totalCells: totalRow,
                    objects: dataView.table.totals.objects
                };
            }, Table.prototype.onBindRowHeader = function(item) {
                this.needsMoreData(item) && (this.hostServices.loadMoreData(), this.waitingForData = !0);
            }, Table.prototype.onColumnHeaderClick = function(queryName, sortDirection) {
                this.waitingForSort = !0, this.hostServices.onCustomSort((0, tablixUtils1.Av)(queryName, sortDirection));
            }, Table.prototype.needsMoreData = function(item) {
                if (this.waitingForData || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var loadMoreThreshold = this.tablixControl.rowDimension.getItemsCount() * tablixConstants.sR;
                return this.hierarchyNavigator.getIndex(item) >= loadMoreThreshold;
            }, Table.prototype.enumerateObjectInstances = function(options) {
                var enumeration = new objectEnumerationBuilder.G;
                return this.dataView && this.tablixPropertyManager.enumerateObjectInstances(options, enumeration, this.dataView, ITablixFormatting.Y.Table), 
                enumeration.complete();
            }, Table.prototype.enumerateObjectRepetition = function() {
                var enumeration = [];
                return this.dataView && this.tablixPropertyManager.enumerateObjectRepetition(enumeration, this.dataView, ITablixFormatting.Y.Table), 
                enumeration;
            }, Table.prototype.shouldAllowHeaderResize = function() {
                return 1 === this.hostServices.getViewMode();
            }, Table.prototype.onViewModeChanged = function(viewMode) {
                this.tablixControl && this.tablixControl.toggleTouchBindings(1 !== viewMode), this.updateViewport(this.currentViewport);
            }, Table.prototype.verifyHeaderResize = function() {
                var currentAllowHeaderResize = this.shouldAllowHeaderResize();
                currentAllowHeaderResize !== this.lastAllowHeaderResize && (this.lastAllowHeaderResize = currentAllowHeaderResize, 
                this.tablixControl.layoutManager.setAllowHeaderResize(currentAllowHeaderResize));
            }, Table;
        }();
    },
    44245: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Yc: function() {
                return TableBinder;
            },
            aV: function() {
                return setColumnHeaderStyle;
            },
            cP: function() {
                return setBodyCellStyle;
            },
            ji: function() {
                return setFooterBodyCellStyle;
            }
        });
        var _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(54522), _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(55007), _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(40550), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(32041), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(64329), _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(48066), _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(66001), _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93340), _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71090);
        function setColumnHeaderStyle(position, cellStyle, formattingProperties, columnFormatting, tablixProperties) {
            var _a, _b;
            cellStyle.fontFamily = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.F2, 
            cellStyle.fontColor = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.lN, 
            cellStyle.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om(_Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__.FX.PropGridOutlineWeight.defaultValue, tablixProperties.PropGridOutlineColor.getValue(null));
            var propsGrid = formattingProperties.grid, props = formattingProperties.columnHeaders, outlineTotal = formattingProperties.total.outline, outlineColumns = props.outline, outlineValues = formattingProperties.values.outline, outlineWeight = null !== (_a = props.outlineWeight) && void 0 !== _a ? _a : propsGrid.outlineWeight, outlineColor = null !== (_b = props.outlineColor) && void 0 !== _b ? _b : propsGrid.outlineColor;
            cellStyle.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            cellStyle.borders.top.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.yo)(outlineColumns), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            cellStyle.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            cellStyle.borders.bottom.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.mv)(outlineColumns), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            cellStyle.borders.left = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isFirst && (cellStyle.borders.left.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineColumns), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineColumns) || !(0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineTotal) && !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineValues) || (cellStyle.paddings.left += outlineWeight)), 
            cellStyle.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isLast ? (cellStyle.borders.right.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineColumns), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineColumns) || !(0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineTotal) && !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineValues) || (cellStyle.paddings.right += outlineWeight)) : cellStyle.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            cellStyle.fontColor = columnFormatting && columnFormatting.styleHeader && columnFormatting.fontColor ? columnFormatting.fontColor : props.fontColor, 
            cellStyle.backColor = columnFormatting && columnFormatting.styleHeader && columnFormatting.backColor ? columnFormatting.backColor : props.backColor, 
            cellStyle.paddings.top = cellStyle.paddings.bottom = propsGrid.rowPadding;
        }
        function setBodyCellStyle(position, item, cellStyle, formattingProperties, columnFormatting, tablixProperties) {
            var _a, _b;
            position.row.isLast || (cellStyle.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om(_Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__.FX.PropGridHorizontalWeight.defaultValue, tablixProperties.PropGridHorizontalColor.getValue(null)));
            var propsGrid = formattingProperties.grid, props = formattingProperties.values, outlineTotal = formattingProperties.total.outline, outlineValues = props.outline, outlineColumns = formattingProperties.columnHeaders.outline, outlineWeight = null !== (_a = props.outlineWeight) && void 0 !== _a ? _a : propsGrid.outlineWeight, outlineColor = null !== (_b = props.outlineColor) && void 0 !== _b ? _b : propsGrid.outlineColor;
            cellStyle.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isFirst && cellStyle.borders.top.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.yo)(outlineValues), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            cellStyle.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isLast ? cellStyle.borders.bottom.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.mv)(outlineValues), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline) : cellStyle.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            cellStyle.borders.left = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isFirst && (cellStyle.borders.left.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineValues), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineValues) || !(0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineTotal) && !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineColumns) || (cellStyle.paddings.left += outlineWeight)), 
            cellStyle.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isLast ? (cellStyle.borders.right.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineValues), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineValues) || !(0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineTotal) && !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineColumns) || (cellStyle.paddings.right += outlineWeight)) : cellStyle.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            cellStyle.fontColor = item.fontColor ? item.fontColor : columnFormatting && columnFormatting.styleValues && columnFormatting.fontColor ? columnFormatting.fontColor : position.row.index % 2 == 0 ? props.fontColorPrimary : props.fontColorSecondary, 
            cellStyle.backColor = item.backColor ? item.backColor : columnFormatting && columnFormatting.styleValues && columnFormatting.backColor ? columnFormatting.backColor : position.row.index % 2 == 0 ? props.backColorPrimary : props.backColorSecondary, 
            cellStyle.paddings.top = cellStyle.paddings.bottom = propsGrid.rowPadding;
        }
        function setFooterBodyCellStyle(position, item, cellStyle, formattingProperties, columnFormatting, tablixProperties) {
            var _a, _b;
            cellStyle.fontFamily = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.Zk, 
            cellStyle.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om(_Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__.FX.PropGridOutlineWeight.defaultValue, tablixProperties.PropGridOutlineColor.getValue(null));
            var columnFontColor, columnBackColor, props = formattingProperties.total, propsGrid = formattingProperties.grid, outlineTotal = props.outline, outlineValues = formattingProperties.values.outline, outlineColumns = formattingProperties.columnHeaders.outline, outlineWeight = null !== (_a = props.outlineWeight) && void 0 !== _a ? _a : propsGrid.outlineWeight, outlineColor = null !== (_b = props.outlineColor) && void 0 !== _b ? _b : propsGrid.outlineColor;
            cellStyle.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            cellStyle.borders.top.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.yo)(outlineTotal), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            cellStyle.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            cellStyle.borders.bottom.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.mv)(outlineTotal), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            cellStyle.borders.left = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isFirst && (cellStyle.borders.left.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineTotal), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineTotal) || !(0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineValues) && !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.fs)(outlineColumns) || (cellStyle.paddings.left += outlineWeight)), 
            cellStyle.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isLast ? (cellStyle.borders.right.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineTotal), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            (0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineTotal) || !(0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineValues) && !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_3__.BK)(outlineColumns) || (cellStyle.paddings.right += outlineWeight)) : cellStyle.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            columnFormatting && columnFormatting.styleTotal && (columnFontColor = columnFormatting.fontColor, 
            columnBackColor = columnFormatting.backColor), cellStyle.fontColor = item.fontColor || columnFontColor || props.fontColor, 
            cellStyle.backColor = item.backColor || columnBackColor || props.backColor, cellStyle.paddings.top = cellStyle.paddings.bottom = propsGrid.rowPadding;
        }
        var TableBinder = function() {
            function TableBinder(options, dataView) {
                this.options = options, dataView && this.updateDataView(dataView);
            }
            return TableBinder.prototype.updateDataView = function(dataView) {
                this.tableDataView = dataView, this.formattingProperties = dataView.formattingProperties, 
                this.updateTextHeights(), this.rowHeight = this.hasImage() ? Math.max(this.textHeightValue, this.formattingProperties.grid.imageHeight) : this.textHeightValue;
            }, TableBinder.prototype.updateTextHeights = function() {
                this.fontSizeHeader = this.formattingProperties.general.textSize.px, this.textPropsHeader = {
                    fontFamily: _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.F2,
                    fontSize: _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_4__.FP.toString(this.fontSizeHeader)
                }, this.textHeightHeader = Math.ceil(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__.b.measureSvgTextHeight(this.textPropsHeader, "a")), 
                this.fontSizeValue = this.formattingProperties.general.textSize.px, this.textPropsValue = {
                    fontFamily: _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.dG,
                    fontSize: _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_4__.FP.toString(this.fontSizeValue)
                }, this.textHeightValue = Math.ceil(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__.b.measureSvgTextHeight(this.textPropsValue, "a")), 
                this.fontSizeTotal = this.formattingProperties.general.textSize.px, this.textPropsTotal = {
                    fontFamily: _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.Zk,
                    fontSize: _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_4__.FP.toString(this.fontSizeTotal)
                }, this.textHeightTotal = Math.ceil(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__.b.measureSvgTextHeight(this.textPropsTotal, "a"));
            }, TableBinder.prototype.hasImage = function() {
                return _.some(this.tableDataView.columns, function(col) {
                    return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_6__.pt)(col);
                });
            }, TableBinder.prototype.getColumnFormatting = function(column) {
                return this.formattingProperties.columnFormatting[column.queryName];
            }, TableBinder.prototype.onStartRenderingSession = function() {}, TableBinder.prototype.onEndRenderingSession = function() {}, 
            TableBinder.prototype.bindRowHeader = function(item, cell) {
                cell.contentHeight = item.totalCells ? this.textHeightTotal : this.rowHeight, (0, 
                _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.G9)(cell), this.options.onBindRowHeader && this.options.onBindRowHeader(item);
            }, TableBinder.prototype.unbindRowHeader = function(item, cell) {}, TableBinder.prototype.bindColumnHeader = function(item, cell) {
                var _this = this;
                cell.extension.disableDragResize(), (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.ey)(cell), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.f), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.mQ);
                var cellStyle = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.qZ;
                setColumnHeaderStyle(cell.position, cellStyle, this.formattingProperties, this.getColumnFormatting(item), this.options.tablixProperties);
                var contentElement = cell.extension.contentHost;
                (contentElement = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Ch)(contentElement)).classList.add(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.WA);
                var wordWrappingLines, maxTextWidth = this.getWordWrappingWidth(item.queryName, cell, cellStyle);
                null != maxTextWidth && (wordWrappingLines = this.getWordWrappingLines(item.displayName, maxTextWidth));
                var isWordWrapped = wordWrappingLines && wordWrappingLines.length > 1;
                if (isWordWrapped) {
                    cell.contentHeight = wordWrappingLines.length * this.textHeightHeader;
                    for (var i = 0, len = wordWrappingLines.length; i < len - 1; i++) (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Ch)(contentElement, wordWrappingLines[i]);
                    contentElement = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Ch)(contentElement);
                } else cell.contentHeight = this.textHeightHeader;
                this.sortIconsEnabled() && (contentElement = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.D6)(item.sort, contentElement), 
                item.sort && !isWordWrapped && (cell.contentWidth = this.fontSizeHeader + _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.fG));
                var columnTitle = item.displayName;
                if (isWordWrapped) {
                    var lastLine = _.last(wordWrappingLines);
                    (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.AB)(lastLine, contentElement), 
                    (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.v4)(columnTitle, cell.extension.contentHost), 
                    cell.contentWidth = maxTextWidth;
                } else (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.DM)(columnTitle, contentElement, cell.extension.contentHost), 
                cell.contentWidth += _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__.b.measureSvgTextWidth(this.textPropsHeader, columnTitle);
                cell.contentWidth = Math.ceil(cell.contentWidth), this.options.onColumnHeaderClick && cell.extension.registerClickHandler(function(e) {
                    if ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.xl)(e)) {
                        var sortDirection = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.x7)(item.sort);
                        _this.options.onColumnHeaderClick(item.queryName ? item.queryName : item.displayName, sortDirection);
                    }
                }), cell.applyStyle(cellStyle);
            }, TableBinder.prototype.getWordWrappingLines = function(text, maxWidth) {
                return (0, _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_7__.ql)(text, this.textPropsHeader, _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__.b.measureSvgTextWidth, maxWidth, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.uZ, void 0, !0);
            }, TableBinder.prototype.getWordWrappingWidth = function(columnQueryName, cell, cellStyle) {
                var cellContainerWidth;
                if (this.formattingProperties.columnHeaders.wordWrap && 0 === this.options.layoutKind && (cell.isColumnResizing() && cell.containerWidth >= 0 ? cellContainerWidth = cell.containerWidth : this.options.columnWidthManager && (cellContainerWidth = this.options.columnWidthManager.getPersistedColumnWidth(columnQueryName)), 
                null != cellContainerWidth)) return Math.max(0, cellContainerWidth - (cellStyle.getExtraLeft() + cellStyle.getExtraRight()));
            }, TableBinder.prototype.unbindColumnHeader = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.G9)(cell), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.aP)(cell), 
                this.sortIconsEnabled() && (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Y4)(cell), 
                this.options.onColumnHeaderClick && cell.extension.unregisterClickHandler();
            }, TableBinder.prototype.bindBodyCell = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.ey)(cell), 
                this.setBodyContent(item, cell), cell.contentWidth = Math.ceil(cell.contentWidth), 
                item.isTotal ? ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.R9), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.s$)) : (0, 
                _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, item.position.row.isLast ? _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.zq : _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.JM), 
                item.isNumeric && (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.s0);
                var cellStyle = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.qZ;
                item.isTotal ? setFooterBodyCellStyle(cell.position, item, cellStyle, this.formattingProperties, this.getColumnFormatting(item.columnMetadata), this.options.tablixProperties) : setBodyCellStyle(cell.position, item, cellStyle, this.formattingProperties, this.getColumnFormatting(item.columnMetadata), this.options.tablixProperties), 
                cell.applyStyle(cellStyle);
            }, TableBinder.prototype.setBodyContent = function(item, cell) {
                var element = cell.extension.contentHost, imgHeight = this.formattingProperties.grid.imageHeight, text = item.textContent;
                cell.contentHeight = item.isTotal ? this.textHeightTotal : item.isImage ? imgHeight : this.textHeightValue;
                var UrlType = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.MN)(item.columnMetadata, item.textContent);
                if (UrlType !== _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_8__.av.NONE) {
                    var showUrlIcon = this.formattingProperties.values.urlIcon, iconName = void 0;
                    return showUrlIcon && (iconName = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.RP)(UrlType)), 
                    showUrlIcon && null != iconName ? (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.vU)(text, element, iconName) : (0, 
                    _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.vU)(text, element), 
                    void (cell.contentWidth = showUrlIcon ? this.fontSizeValue : _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__.b.measureSvgTextWidth(this.textPropsValue, text));
                }
                if (item.isImage && (0, _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_8__.gU)(text)) return (0, 
                _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Hx)(text, element, imgHeight), 
                void (cell.contentWidth = imgHeight * _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wd);
                var kpi = item.kpiContent;
                return kpi ? ($(element).append(kpi), void (cell.contentWidth = this.fontSizeValue)) : text ? ((0, 
                _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.DM)(text, element), 
                void (cell.contentWidth = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_5__.b.measureSvgTextWidth(item.isTotal ? this.textPropsTotal : this.textPropsValue, text))) : ((0, 
                _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.DM)(" ", element), 
                void (cell.contentWidth = 0));
            }, TableBinder.prototype.unbindBodyCell = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.G9)(cell), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.aP)(cell);
            }, TableBinder.prototype.bindCornerCell = function(item, cell) {
                cell.contentWidth = 0;
            }, TableBinder.prototype.unbindCornerCell = function(item, cell) {}, TableBinder.prototype.bindEmptySpaceHeaderCell = function(cell) {}, 
            TableBinder.prototype.unbindEmptySpaceHeaderCell = function(cell) {}, TableBinder.prototype.bindEmptySpaceFooterCell = function(cell) {}, 
            TableBinder.prototype.unbindEmptySpaceFooterCell = function(cell) {}, TableBinder.prototype.getHeaderLabel = function(item) {
                return item ? item.displayName : "";
            }, TableBinder.prototype.getCellContent = function(item) {
                return item;
            }, TableBinder.prototype.hasRowGroups = function() {
                return !1;
            }, TableBinder.prototype.sortIconsEnabled = function() {
                return 0 === this.options.layoutKind;
            }, TableBinder;
        }();
    }
} ]);