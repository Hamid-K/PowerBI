"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "workspace-picker-dialog" ], {
    55924: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            WorkspacePickerDialogModule: function() {
                return WorkspacePickerDialogModule;
            }
        });
        var common = __webpack_require__(77476), dialogs_module = __webpack_require__(76966), copilot_workspace_picker_service = __webpack_require__(59022), tri_message_bar = __webpack_require__(47768), localization_module = __webpack_require__(78035), tri_link = __webpack_require__(16149), tri_dropdown = __webpack_require__(44913), tri_search_box = __webpack_require__(46303), tri_spinner_module = __webpack_require__(5915), tslib_es6 = __webpack_require__(81337), BehaviorSubject = __webpack_require__(35510), combineLatest = __webpack_require__(59017), of = __webpack_require__(11547), map = __webpack_require__(14172), Telemetry = __webpack_require__(21617), template_dialog_payload_service = __webpack_require__(67489), src = __webpack_require__(62345), injection_tokens = __webpack_require__(14714), telemetry_events = __webpack_require__(9522), core = __webpack_require__(50423), localization_service = __webpack_require__(7452), template_dialog_component = __webpack_require__(96777), tri_message_bar_component = __webpack_require__(45769), tri_link_component = __webpack_require__(65e3), tri_dropdown_component = __webpack_require__(20551), tri_dropdown_item_component = __webpack_require__(64716), tri_dropdown_item_menu_directive = __webpack_require__(85721), tri_search_box_component = __webpack_require__(89237), tri_spinner_component = __webpack_require__(54729), localize_pipe = __webpack_require__(55334);
        function WorkspacePickerDialogComponent_tri_message_bar_12_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "tri-message-bar", 9), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("viewModel", ctx_r0.messageBarViewModel);
            }
        }
        function WorkspacePickerDialogComponent_tri_dropdown_trigger_18_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-trigger"), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](ctx_r1.selectedWorkspace.displayName);
            }
        }
        function WorkspacePickerDialogComponent_tri_dropdown_item_21_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-item", 10), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var workspace_r4 = ctx.$implicit;
                core["\u0275\u0275property"]("value", workspace_r4.objectId), core["\u0275\u0275attribute"]("aria-label", workspace_r4.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", workspace_r4.displayName, " ");
            }
        }
        function WorkspacePickerDialogComponent_tri_spinner_23_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementStart"](0, "tri-spinner", 11), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), 
            core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](2, 1, "Workspaces_Picker_Loading")));
        }
        var WorkspacePickerDialogComponent = function() {
            function WorkspacePickerDialogComponent(llmStatusService, triLocalizationService, templateDialogPayload, telemetryService) {
                this.llmStatusService = llmStatusService, this.triLocalizationService = triLocalizationService, 
                this.templateDialogPayload = templateDialogPayload, this.telemetryService = telemetryService, 
                this.selectedWorkspace = void 0, this.messageBarViewModel = void 0, this.loading = !1, 
                this.maxItems = 8, this.dropdownOptions = {
                    showFullContent: !0,
                    dropdownMaxHeight: (0, tri_dropdown.Vh)({
                        totalItems: this.maxItems,
                        hasSearchBox: !0
                    }),
                    dropdownMinHeight: (0, tri_dropdown.Vh)({
                        totalItems: 1
                    })
                }, this.searchText = new BehaviorSubject.X(""), this.responseStatuses = [], this.errors = [];
            }
            return WorkspacePickerDialogComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.messageBarViewModel = this.templateDialogPayload.input.infoMessage, this.workspaces = this.templateDialogPayload.input.workspaces.sort(function(a, b) {
                    return a.displayName.localeCompare(b.displayName);
                }), this.scenarioNames = this.templateDialogPayload.input.scenarioNames, this.templateDialogPayload.setOkButtonState(!0), 
                this.templateDialogPayload.onOkButtonClick = function() {
                    return _this.ok();
                }, this.templateDialogPayload.onCancelButtonClick = function() {
                    return _this.cancel();
                }, this.selectedWorkspace = this.findSelectedWorkspace(this.templateDialogPayload.input.selectedWorkspaceObjectId), 
                this.filteredWorkspaces$ = (0, combineLatest.aj)([ this.searchText, (0, of.of)(this.workspaces) ]).pipe((0, 
                map.U)(function(_a) {
                    var searchText = _a[0];
                    return _a[1].filter(function(workspace) {
                        return workspace.displayName.toLowerCase().includes(searchText.toLowerCase());
                    });
                }));
            }, WorkspacePickerDialogComponent.prototype.ok = function() {
                return this.logTelemetry(), Promise.resolve(this.selectedWorkspace);
            }, WorkspacePickerDialogComponent.prototype.cancel = function() {
                return this.logTelemetry(!0), Promise.resolve(void 0);
            }, WorkspacePickerDialogComponent.prototype.logTelemetry = function(isCancelled) {
                void 0 === isCancelled && (isCancelled = !1);
                var events = JSON.stringify(this.responseStatuses), errors = JSON.stringify(this.errors), scenarioNames = JSON.stringify(this.scenarioNames);
                this.telemetryService.logEvent(telemetry_events.VD, {
                    isCancelled,
                    scenarioNames,
                    events,
                    errors
                });
            }, WorkspacePickerDialogComponent.prototype.onSearch = function(searchText) {
                this.searchText.next(searchText);
            }, WorkspacePickerDialogComponent.prototype.onSelectWorkspace = function(selectedWorkspaceId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.loading = !0, this.resetState(), selectedWorkspaceId ? (this.selectedWorkspace = this.findSelectedWorkspace(selectedWorkspaceId), 
                            [ 4, this.validateSelectedWorkspace(selectedWorkspaceId) ]) : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return this.loading = !1, [ 2 ];
                        }
                    });
                });
            }, WorkspacePickerDialogComponent.prototype.findSelectedWorkspace = function(selectedWorkspaceId) {
                return _.find(this.workspaces, function(workspace) {
                    return workspace.objectId === selectedWorkspaceId;
                });
            }, WorkspacePickerDialogComponent.prototype.validateSelectedWorkspace = function(workspaceId) {
                var _a, _b, _c;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var res, statuses, e_1, errMessage;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            if (!(null === (_a = this.scenarioNames) || void 0 === _a ? void 0 : _a.length)) return this.templateDialogPayload.setOkButtonState(!1), 
                            [ 2 ];
                            _d.label = 1;

                          case 1:
                            return _d.trys.push([ 1, 3, , 4 ]), [ 4, this.llmStatusService.getStatusForLanguageModels({
                                workspaceId,
                                scenarioNames: this.scenarioNames,
                                artifactInfo: {
                                    artifactType: "Report"
                                }
                            }).toPromise() ];

                          case 2:
                            return res = _d.sent(), statuses = Object.values(null !== (_b = null == res ? void 0 : res.copilotModelsStatus) && void 0 !== _b ? _b : {}), 
                            this.responseStatuses.push(statuses), statuses.some(function(status) {
                                return status.reason === src.D3.DisabledForCrossGeo;
                            }) ? (this.setErrorBanner(this.triLocalizationService.get("CopilotCapability_GeoFailed_Message")), 
                            [ 2 ]) : statuses.some(function(status) {
                                return status.reason === src.D3.DisabledForTenant;
                            }) ? (this.setErrorBanner(this.triLocalizationService.get("CopilotCapability_CapacityFailed_Message")), 
                            [ 2 ]) : (this.templateDialogPayload.setOkButtonState(!1), [ 3, 4 ]);

                          case 3:
                            return e_1 = _d.sent(), this.errors.push(e_1), errMessage = (null === (_c = null == e_1 ? void 0 : e_1.error) || void 0 === _c ? void 0 : _c.message) ? e_1.error.message : this.triLocalizationService.get("ServerError_UnknownError"), 
                            this.setErrorBanner(errMessage), [ 3, 4 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, WorkspacePickerDialogComponent.prototype.setErrorBanner = function(message) {
                this.messageBarViewModel = {
                    bannerType: 1,
                    message,
                    isRoundedCorners: !0
                };
            }, WorkspacePickerDialogComponent.prototype.resetState = function() {
                var _a;
                null === (_a = this.searchBox) || void 0 === _a || _a.clear(), this.messageBarViewModel = void 0, 
                this.templateDialogPayload.setOkButtonState(!0);
            }, WorkspacePickerDialogComponent.\u0275fac = function(t) {
                return new (t || WorkspacePickerDialogComponent)(core["\u0275\u0275directiveInject"](injection_tokens.ey), core["\u0275\u0275directiveInject"](localization_service.z), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](Telemetry.y0));
            }, WorkspacePickerDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: WorkspacePickerDialogComponent,
                selectors: [ [ "workspace-picker-dialog" ] ],
                viewQuery: function(rf, ctx) {
                    var _t;
                    1 & rf && core["\u0275\u0275viewQuery"](tri_search_box.U, 5), 2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.searchBox = _t.first);
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 24,
                vars: 33,
                consts: [ [ 1, "picker-description" ], [ "href", "https://go.microsoft.com/fwlink/?linkid=2249079", "target", "_blank", 3, "external", "showExternalIcon" ], [ 3, "viewModel", 4, "ngIf" ], [ 1, "picker-description-title" ], [ 3, "value", "options", "isDisabled", "placeholder", "valueChange" ], [ 4, "ngIf" ], [ 3, "placeholderText", "disableTabIndex", "value" ], [ "class", "dropdown-item", 3, "value", 4, "ngFor", "ngForOf" ], [ "size", "tiny", "labelPosition", "after", 4, "ngIf" ], [ 3, "viewModel" ], [ 1, "dropdown-item", 3, "value" ], [ "size", "tiny", "labelPosition", "after" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "p", 0), core["\u0275\u0275text"](2), 
                    core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275element"](4, "br"), core["\u0275\u0275elementStart"](5, "tri-link", 1), 
                    core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275text"](7), core["\u0275\u0275pipe"](8, "localize"), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](9, "p", 0), 
                    core["\u0275\u0275text"](10), core["\u0275\u0275pipe"](11, "localize"), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275template"](12, WorkspacePickerDialogComponent_tri_message_bar_12_Template, 1, 1, "tri-message-bar", 2), 
                    core["\u0275\u0275elementStart"](13, "p", 3), core["\u0275\u0275text"](14), core["\u0275\u0275pipe"](15, "localize"), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](16, "tri-dropdown", 4), 
                    core["\u0275\u0275listener"]("valueChange", function($event) {
                        return ctx.onSelectWorkspace($event);
                    }), core["\u0275\u0275pipe"](17, "localize"), core["\u0275\u0275template"](18, WorkspacePickerDialogComponent_tri_dropdown_trigger_18_Template, 2, 1, "tri-dropdown-trigger", 5), 
                    core["\u0275\u0275elementStart"](19, "tri-search-box", 6), core["\u0275\u0275listener"]("value", function($event) {
                        return ctx.onSearch($event);
                    }), core["\u0275\u0275pipe"](20, "localize"), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275template"](21, WorkspacePickerDialogComponent_tri_dropdown_item_21_Template, 2, 3, "tri-dropdown-item", 7), 
                    core["\u0275\u0275pipe"](22, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](23, WorkspacePickerDialogComponent_tri_spinner_23_Template, 3, 3, "tri-spinner", 8), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](3, 17, "CopilotCapability_Connect_Message"), " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("external", !0)("showExternalIcon", !1), 
                    core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](6, 19, "CopilotCapability_Requirements_LearnMore")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](8, 21, "CopilotCapability_Requirements_LearnMore"), " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](11, 23, "CopilotCapability_Change_Workspace_Message")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.messageBarViewModel), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](15, 25, "WorkspacesSelect_Label_Text")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("value", null == ctx.selectedWorkspace ? null : ctx.selectedWorkspace.objectId)("options", ctx.dropdownOptions)("isDisabled", ctx.loading)("placeholder", core["\u0275\u0275pipeBind1"](17, 27, "WorkspacesSelect_Label_Text")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.selectedWorkspace), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("placeholderText", core["\u0275\u0275pipeBind1"](20, 29, "Workspaces_Picker_Search"))("disableTabIndex", !0), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](22, 31, ctx.filteredWorkspaces$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.loading));
                },
                dependencies: [ common.NgForOf, common.NgIf, template_dialog_component.J, tri_message_bar_component.h, tri_link_component.v, tri_dropdown_component.M3, tri_dropdown_item_component.l, tri_dropdown_item_menu_directive.q, tri_dropdown_component.ii, tri_search_box_component.U, tri_spinner_component.D, common.AsyncPipe, localize_pipe.Y ],
                styles: [ "[_nghost-%COMP%]{color:var(--colorNeutralForeground1)}.workspace-picker-dialog[_ngcontent-%COMP%]{border-radius:var(--borderRadiusXLarge)}.picker-description-title[_ngcontent-%COMP%]{margin:0 0 4px;font-size:var(--md-font-size);line-height:var(--lineHeightBase300);font-weight:var(--fontWeightSemibold)}.picker-description[_ngcontent-%COMP%]{margin-top:0;margin-bottom:8px;font-size:var(--md-font-size);line-height:var(--lineHeightBase300)}tri-search-box[_ngcontent-%COMP%], tri-dropdown[_ngcontent-%COMP%]{width:100%}tri-message-bar[_ngcontent-%COMP%]{margin-bottom:10px}tri-spinner[_ngcontent-%COMP%]{display:inline-block;margin-top:4px}" ]
            }), WorkspacePickerDialogComponent;
        }(), WorkspacePickerDialogModule = function() {
            function WorkspacePickerDialogModule() {}
            return WorkspacePickerDialogModule.\u0275fac = function(t) {
                return new (t || WorkspacePickerDialogModule);
            }, WorkspacePickerDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: WorkspacePickerDialogModule
            }), WorkspacePickerDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: copilot_workspace_picker_service.U,
                    componentType: WorkspacePickerDialogComponent
                } ]), tri_message_bar.I, localization_module.Y, tri_link.m, tri_dropdown.lK, tri_search_box.b, tri_spinner_module.d ]
            }), WorkspacePickerDialogModule;
        }();
    },
    9522: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            VD: function() {
                return WorkspacePickerDialog;
            },
            pO: function() {
                return QuickSaveDialog;
            }
        });
        var _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41114), QuickSaveDialog = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.QuickSaveDialog"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.QuickSaveDialog"), WorkspacePickerDialog = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.WorkspacePickerDialog"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.WorkspacePickerDialog");
    }
} ]);