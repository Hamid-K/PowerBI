"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "insights" ], {
    77661: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            InsightsModule: function() {
                return InsightsModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), insights_analysis_definition_builder_utils = __webpack_require__(4008), insights_analysis_util = __webpack_require__(72951), visitors = __webpack_require__(29767), conceptual_schema_proxy_service = __webpack_require__(26898), data_proxy_service = __webpack_require__(49092), expansion_path_utils = __webpack_require__(38982), exploration_capabilities_service = __webpack_require__(48145), data_sources_service = __webpack_require__(83008), visual_query_generator_service = __webpack_require__(88565), decomposition_authoring_service = __webpack_require__(3887), feature_switch_service = __webpack_require__(9380), primitiveValueEncoding = __webpack_require__(47639), contracts_visualQuery = __webpack_require__(45114), decompositionTree_capabilities = __webpack_require__(1409), keyDrivers_capabilities = __webpack_require__(50522), plugins = __webpack_require__(47508), keyDriversNumericAnalysisType = __webpack_require__(56045), debug = __webpack_require__(62458), contracts_expansionState = __webpack_require__(47961), dataViewObject2 = __webpack_require__(82755), semanticQuery_primitiveValueEncoding = __webpack_require__(59146), semanticQuery_semanticQuery = __webpack_require__(95462), sqExpr = __webpack_require__(94419), sqExprStaticMembers = __webpack_require__(74082), sqExprEqualityVisitor = __webpack_require__(45413), sqExprVisitor = __webpack_require__(75074), sqHierarchyExprUtils1 = __webpack_require__(45551), isMeasure = __webpack_require__(58295), core = __webpack_require__(50423), continuousAnalysisValue = keyDriversNumericAnalysisType.us, InsightsAnalysisDefinitionBuilderServiceLazyProvider = {
            provide: "insightsAnalysisDefinitionBuilder",
            useFactory: function(conceptualSchemaProxy, explorationCapabilities, dataSources, visualQueryGenerator, dataProxy, featureSwitchService) {
                return new Promise(function(resolve) {
                    resolve(new InsightsAnalysisDefinitionBuilderService(conceptualSchemaProxy, explorationCapabilities, dataSources, visualQueryGenerator, dataProxy, featureSwitchService));
                });
            },
            deps: [ conceptual_schema_proxy_service.i, exploration_capabilities_service.U, data_sources_service.D, visual_query_generator_service.S, data_proxy_service.d, feature_switch_service.vZ ]
        }, InsightsAnalysisDefinitionBuilderService = function() {
            function InsightsAnalysisDefinitionBuilderService(conceptualSchemaProxy, explorationCapabilities, dataSources, visualQueryGenerator, dataProxy, featureSwitchService) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.explorationCapabilities = explorationCapabilities, 
                this.dataSources = dataSources, this.visualQueryGenerator = visualQueryGenerator, 
                this.dataProxy = dataProxy, this.featureSwitchService = featureSwitchService;
            }
            return InsightsAnalysisDefinitionBuilderService.prototype.buildAnalysisDefinition = function(visualType, visualQuery, objects, filter, previousAnalysisDefinition) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var query;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (debug.fF.assertValue(visualType, "visualType"), debug.fF.assertValue(visualQuery, "visualQuery"), 
                        debug.fF.assertAnyValue(objects, "objects"), debug.fF.assertAnyValue(filter, "filter"), 
                        debug.fF.assertAnyValue(previousAnalysisDefinition, "previousAnalysisDefinition"), 
                        query = new contracts_visualQuery.g(visualQuery.defn.rewrite(new insights_analysis_util.X), visualQuery.projections, visualQuery.expansionStates), 
                        visualType) {
                          case plugins.L.keyDriversVisual.name:
                            return [ 2, this.buildKeyDriversAnalysisDefinition(query, objects, filter, previousAnalysisDefinition) ];

                          case plugins.L.decompositionTreeVisual.name:
                            return [ 2, this.buildDecompositionTreeAnalysisDefinition(query, filter, objects) ];

                          default:
                            debug.fF.assertFail("Unknown visual type");
                        }
                        return [ 2 ];
                    });
                });
            }, InsightsAnalysisDefinitionBuilderService.prototype.buildDecompositionTreeAnalysisDefinition = function(visualQuery, inheritedFilters, objects) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var target, dimensions, aiEnabled, analysisType, expansionState, i, schema, supportsDecomposition, projections, aiLevelsInformation, firstAILevel, lastAILevel, aiLevels, pinnedLevelsCount, activeProjections, pathExprs, isComplete, path, analysisMethods, filter;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            if (target = visualQuery.tryGetExpr(decompositionTree_capabilities.Fw.analyze, 0), 
                            dimensions = visualQuery.tryGetExprs(decompositionTree_capabilities.Fw.explainBy), 
                            aiEnabled = (0, dataViewObject2.NA)(objects, {
                                objectName: decompositionTree_capabilities.I8.analysis,
                                propertyName: decompositionTree_capabilities.hq.aiEnabled
                            }, !0), analysisType = (0, dataViewObject2.NA)(objects, {
                                objectName: decompositionTree_capabilities.I8.analysis,
                                propertyName: decompositionTree_capabilities.hq.aiMode
                            }, "absolute"), !aiEnabled && (expansionState = (0, contracts_expansionState.D5)(visualQuery.expansionStates, decompositionTree_capabilities.Fw.explainBy))) for (i = 0; i < _.size(expansionState.levels); i++) expansionState.setAILevelInformation(i, void 0);
                            return target ? [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ] : [ 2, {
                                error: {
                                    code: 0
                                },
                                isComplete: !1,
                                canExecute: aiEnabled,
                                analysisType: "DecompositionTree"
                            } ];

                          case 1:
                            return schema = _a.sent(), supportsDecomposition = (0, decomposition_authoring_service.W)(target, this.explorationCapabilities.getCapabilities(), schema), 
                            !(0, isMeasure.k)(target) || (0, sqExprStaticMembers.ez)(target) && (0, sqHierarchyExprUtils1.cH)(target) ? [ 2, {
                                error: {
                                    code: 1
                                },
                                isComplete: !1,
                                canExecute: aiEnabled,
                                analysisType: "DecompositionTree"
                            } ] : (projections = visualQuery.getRolesUniqueProjectionRefs([ decompositionTree_capabilities.Fw.explainBy ]), 
                            aiLevelsInformation = _.map(projections, function(_, i) {
                                return (0, contracts_expansionState.DX)(visualQuery.expansionStates, [ decompositionTree_capabilities.Fw.explainBy ], i);
                            }), firstAILevel = _.findIndex(aiLevelsInformation, function(aiInfo) {
                                return aiInfo && !aiInfo.disabled;
                            }), lastAILevel = _.findLastIndex(aiLevelsInformation, function(aiInfo) {
                                return aiInfo;
                            }), aiLevels = -1 === firstAILevel ? [] : _.slice(aiLevelsInformation, firstAILevel, lastAILevel + 1), 
                            _.forEach(aiLevels, function(aiLevel) {
                                return debug.fF.assertValue(aiLevel, "AI levels must be contiguous");
                            }), aiLevels = _.takeWhile(aiLevels, function(aiLevel) {
                                return aiLevel;
                            }), pinnedLevelsCount = (0, contracts_expansionState.sz)(visualQuery.expansionStates, [ decompositionTree_capabilities.Fw.explainBy ]), 
                            activeProjections = visualQuery.getRolesActiveProjectionsRefs([ decompositionTree_capabilities.Fw.explainBy ], !0), 
                            debug.fF.assert(function() {
                                return _.size(aiLevels) <= pinnedLevelsCount;
                            }), pathExprs = _.take((0, expansion_path_utils.w9)(visualQuery, [ decompositionTree_capabilities.Fw.explainBy ]), firstAILevel), 
                            isComplete = _.size(activeProjections) > 0 && _.size(aiLevels) > 0 && _.size(pathExprs) >= firstAILevel, 
                            path = semanticQuery_semanticQuery.yl.merge(_.map(pathExprs, function(expr) {
                                return semanticQuery_semanticQuery.yl.fromSQExpr(expr);
                            })), analysisMethods = _.map(aiLevels, function(aiLevel) {
                                return (0, insights_analysis_definition_builder_utils.zU)((0, insights_analysis_definition_builder_utils.N_)(aiLevel.method), analysisType);
                            }), filter = this.liftFilterToSubquery(visualQuery, inheritedFilters), isComplete && aiEnabled && !supportsDecomposition ? [ 2, {
                                error: {
                                    code: 2
                                },
                                isComplete: !0,
                                canExecute: !1,
                                analysisType: "DecompositionTree"
                            } ] : [ 2, {
                                definition: {
                                    findDecompositions: {
                                        target,
                                        dimensions: _.slice(dimensions, pinnedLevelsCount - aiLevels.length),
                                        filters: filter,
                                        methods: isComplete && aiEnabled && supportsDecomposition ? analysisMethods : void 0,
                                        path
                                    }
                                },
                                isComplete,
                                canExecute: aiEnabled && supportsDecomposition,
                                warning: void 0,
                                analysisType: "DecompositionTree"
                            } ]);
                        }
                    });
                });
            }, InsightsAnalysisDefinitionBuilderService.prototype.buildKeyDriversAnalysisDefinition = function(visualQuery, objects, filter, previousAnalysisDefinition) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, keyDriverRoles, targetExpression, predictors, details, targetMetadata, isTargetNumeric, isTargetMeasure, options, target, warning, selectedNumericAnalysis, analysisType, numericTargetSelectedKind, notBlankFilter, encodedValue, previousKeyDriversTarget, oldCategoricalTargetExpression, schema_1, keyColumns_1, oldKeyColumns_1, firstValueResult, result, sqConstantExpr, targetValue, isComplete;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            if (schema = _a.sent(), targetExpression = visualQuery.tryGetExpr((keyDriverRoles = keyDrivers_capabilities.qG).target, 0), 
                            predictors = visualQuery.tryGetExprs(keyDriverRoles.explainBy), details = visualQuery.tryGetExprs(keyDriverRoles.details), 
                            !_.some(schema.schemas, function(s) {
                                return s.capabilities.insights.supportsKeyDrivers;
                            })) return [ 2, {
                                error: {
                                    code: 0
                                },
                                isComplete: !1,
                                canExecute: !1,
                                analysisType: "KeyDrivers"
                            } ];
                            if (_.some(schema.schemas, function(s) {
                                return s.capabilities.supportsDataSourceVariables;
                            })) return [ 2, {
                                error: {
                                    code: 7
                                },
                                isComplete: !1,
                                canExecute: !1,
                                analysisType: "KeyDrivers"
                            } ];
                            if (!targetExpression) return [ 2, {
                                error: {
                                    code: 1
                                },
                                isComplete: !1,
                                canExecute: !0,
                                analysisType: "KeyDrivers"
                            } ];
                            if (!(0, insights_analysis_definition_builder_utils.wg)(targetExpression, schema)) return [ 2, {
                                error: {
                                    code: 2
                                },
                                isComplete: !1,
                                canExecute: !1,
                                analysisType: "KeyDrivers"
                            } ];
                            if (_.some(predictors, function(expr) {
                                var schemaName = expr.getTargetSchemaName(), conceptualSchema = schema.schema(schemaName);
                                return conceptualSchema && conceptualSchema.isExtensionSchema;
                            })) return [ 2, {
                                error: {
                                    code: 4
                                },
                                isComplete: !1,
                                canExecute: !1,
                                analysisType: "KeyDrivers"
                            } ];
                            if (targetMetadata = targetExpression && targetExpression.getMetadata(schema), isTargetNumeric = targetMetadata && targetMetadata.type && (targetMetadata.type.numeric || targetMetadata.type.integer), 
                            isTargetMeasure = targetExpression && (0, isMeasure.k)(targetExpression), options = 1, 
                            isTargetMeasure) {
                                if (_.some(schema.schemas, function(s) {
                                    return !s.capabilities.supportsSubqueryRegrouping;
                                })) return [ 2, {
                                    error: {
                                        code: 8
                                    },
                                    isComplete: !1,
                                    canExecute: !1,
                                    analysisType: "KeyDriversContinuous"
                                } ];
                            } else {
                                if (_.some(schema.schemas, function(s) {
                                    return s.capabilities.discourageQueryAggregateUsage;
                                })) return [ 2, {
                                    error: {
                                        code: 9
                                    },
                                    isComplete: !1,
                                    canExecute: !1,
                                    analysisType: "KeyDriversCategorical"
                                } ];
                                _.some(schema.schemas, function(s) {
                                    return s.capabilities.supportsExtensionColumns;
                                }) || (options &= -2);
                            }
                            return _.isEmpty(details) || isTargetMeasure ? !(selectedNumericAnalysis = objects ? (0, 
                            dataViewObject2.NA)(objects, {
                                objectName: "keyDrivers",
                                propertyName: "selectedNumericAnalysis"
                            }, void 0) : void 0) && isTargetNumeric || isTargetMeasure || selectedNumericAnalysis === continuousAnalysisValue && isTargetNumeric ? (analysisType = "KeyDriversContinuous", 
                            numericTargetSelectedKind = (0, dataViewObject2.NA)(objects, {
                                objectName: "keyDrivers",
                                propertyName: "numericTargetSelectedKind"
                            }, 0), (0, isMeasure.k)(targetExpression) || (notBlankFilter = semanticQuery_semanticQuery.yl.fromSQExpr((0, 
                            sqExpr.ff)((0, sqExpr.qu)(0, targetExpression, (0, sqExpr.IF)()))), filter = filter ? semanticQuery_semanticQuery.yl.merge([ filter, notBlankFilter ]) : notBlankFilter), 
                            target = {
                                continuous: {
                                    expression: targetExpression,
                                    kind: numericTargetSelectedKind
                                }
                            }, [ 3, 5 ]) : [ 3, 2 ] : [ 2, {
                                error: {
                                    code: 6
                                },
                                isComplete: !1,
                                canExecute: !1,
                                analysisType: "KeyDrivers"
                            } ];

                          case 2:
                            return analysisType = "KeyDriversCategorical", encodedValue = (0, dataViewObject2.NA)(objects, {
                                objectName: "keyDrivers",
                                propertyName: "targetValue"
                            }, void 0), oldCategoricalTargetExpression = (previousKeyDriversTarget = previousAnalysisDefinition && previousAnalysisDefinition.findKeyDrivers && previousAnalysisDefinition.findKeyDrivers.target) && previousKeyDriversTarget.categorical && previousKeyDriversTarget.categorical.expression, 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 3:
                            return schema_1 = _a.sent(), keyColumns_1 = targetExpression.getKeyColumns(schema_1), 
                            debug.fF.assert(function() {
                                return 1 === _.size(keyColumns_1);
                            }, "only support 1 groupon key"), oldKeyColumns_1 = oldCategoricalTargetExpression && oldCategoricalTargetExpression.getKeyColumns(schema_1), 
                            debug.fF.assert(function() {
                                return !oldKeyColumns_1 || 1 === _.size(oldKeyColumns_1);
                            }, "only 1 groupon key supported"), [ 4, (0, insights_analysis_definition_builder_utils.wW)(keyColumns_1[0], filter, schema_1, this.dataProxy, this.dataSources, this.visualQueryGenerator) ];

                          case 4:
                            if (!(firstValueResult = _a.sent())) return [ 2, {
                                error: {
                                    code: 10
                                },
                                isComplete: !1,
                                canExecute: !1,
                                analysisType: "KeyDriversCategorical"
                            } ];
                            if (firstValueResult.error) return [ 2, {
                                error: {
                                    code: 11,
                                    details: firstValueResult.error
                                },
                                isComplete: !1,
                                canExecute: !1,
                                analysisType: "KeyDriversCategorical"
                            } ];
                            debug.fF.assertValue(firstValueResult.result, "either result of error has to be set"), 
                            (result = firstValueResult.result).count > 10 && (warning = 1), (previousKeyDriversTarget && previousKeyDriversTarget.continuous || !encodedValue || oldKeyColumns_1 && !(0, 
                            sqExprEqualityVisitor.fS)(keyColumns_1[0], oldKeyColumns_1[0])) && (encodedValue = (0, 
                            semanticQuery_primitiveValueEncoding.CI)(result.firstValue, keyColumns_1[0].getMetadata(schema_1).type)), 
                            sqConstantExpr = (0, primitiveValueEncoding.bE)(encodedValue), targetValue = semanticQuery_semanticQuery.yl.fromSQExpr((0, 
                            sqExpr.Sh)([ keyColumns_1[0] ], [ [ sqConstantExpr ] ])), target = {
                                categorical: {
                                    expression: targetExpression,
                                    targetValue
                                }
                            }, _a.label = 5;

                          case 5:
                            return isComplete = !0, _.isEmpty(predictors) && (warning = 0, isComplete = !1), 
                            [ 2, {
                                definition: {
                                    findKeyDrivers: {
                                        target,
                                        filters: filter,
                                        predictors,
                                        details,
                                        options
                                    }
                                },
                                warning,
                                isComplete,
                                canExecute: !0,
                                analysisType
                            } ];
                        }
                    });
                });
            }, InsightsAnalysisDefinitionBuilderService.prototype.liftFilterToSubquery = function(visualQuery, semanticFilter) {
                if (!semanticFilter || !visualQuery) return semanticFilter;
                for (var filtersToConvert = [], filtersToKeep = [], _i = 0, _a = semanticFilter.where(); _i < _a.length; _i++) {
                    var filter = _a[_i];
                    if (!_.isEmpty(filter.target) && filter.condition) {
                        var measureFilterVisitor = new MeasureExprVisitor;
                        filter.condition.accept(measureFilterVisitor), measureFilterVisitor.hasMeasure ? filtersToConvert.push(filter) : filtersToKeep.push(filter);
                    } else filtersToKeep.push(filter);
                }
                if (_.isEmpty(filtersToConvert)) return semanticFilter;
                var semanticQuery = visualQuery.defn;
                semanticQuery = semanticQuery.addSemanticFilter(semanticFilter);
                var subqueryFilter = semanticQuery_semanticQuery.yl.fromMeasureFilters(semanticQuery, filtersToConvert, null), result = semanticQuery_semanticQuery.vQ.createWith({
                    from: semanticQuery.from(),
                    select: semanticQuery.select(),
                    orderBy: semanticQuery.orderBy(),
                    top: semanticQuery.top(),
                    transforms: semanticQuery.transforms(),
                    groupBy: semanticQuery.groupBy(),
                    where: filtersToKeep
                });
                return result = result.addSemanticFilter(subqueryFilter), semanticQuery_semanticQuery.yl.fromSQFromAndSQFilters(result.from(), result.where());
            }, InsightsAnalysisDefinitionBuilderService.prototype.getClientError = function(definitionBuilderResult) {
                return (0, visitors.EL)(definitionBuilderResult, new InsightsDefinitionBuilderClientErrorVisitor);
            }, InsightsAnalysisDefinitionBuilderService.prototype.getClientWarning = function(definitionBuilderResult) {
                return (0, visitors.hj)(definitionBuilderResult, new InsightsDefinitionBuilderClientWarningVisitor);
            }, InsightsAnalysisDefinitionBuilderService.\u0275fac = function(t) {
                return new (t || InsightsAnalysisDefinitionBuilderService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](exploration_capabilities_service.U), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](visual_query_generator_service.S), core["\u0275\u0275inject"](data_proxy_service.d), core["\u0275\u0275inject"](feature_switch_service.vZ));
            }, InsightsAnalysisDefinitionBuilderService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: InsightsAnalysisDefinitionBuilderService,
                factory: InsightsAnalysisDefinitionBuilderService.\u0275fac
            }), InsightsAnalysisDefinitionBuilderService;
        }(), MeasureExprVisitor = function(_super) {
            function MeasureExprVisitor() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(MeasureExprVisitor, _super), MeasureExprVisitor.prototype.visitMeasureRef = function(expr) {
                this.hasMeasure = !0;
            }, MeasureExprVisitor.prototype.visitAggr = function(expr) {
                this.hasMeasure = !0;
            }, MeasureExprVisitor.prototype.visitNativeMeasure = function(expr) {
                this.hasMeasure = !0;
            }, MeasureExprVisitor;
        }(sqExprVisitor.PA), InsightsDefinitionBuilderClientWarningVisitor = function() {
            function InsightsDefinitionBuilderClientWarningVisitor() {}
            return InsightsDefinitionBuilderClientWarningVisitor.prototype.visitDecompositionTree = function(decompositionAnalysisWarning) {}, 
            InsightsDefinitionBuilderClientWarningVisitor;
        }(), InsightsDefinitionBuilderClientErrorVisitor = function() {
            function InsightsDefinitionBuilderClientErrorVisitor() {}
            return InsightsDefinitionBuilderClientErrorVisitor.prototype.visitDecompositionTree = function(decompositionAnalysisError) {
                var errorInfo = this.getErrorInfoKeys(decompositionAnalysisError);
                return {
                    code: errorInfo.errorInfoValue,
                    source: "User",
                    debugInfo: void 0,
                    ignorable: !1,
                    requestId: void 0,
                    getDetails: function(resourceProvider) {
                        return {
                            message: resourceProvider.get(errorInfo.errorInfoValue),
                            displayableErrorInfo: [ {
                                errorInfoKey: resourceProvider.get(errorInfo.errorInfoKey),
                                errorInfoValue: resourceProvider.get(errorInfo.errorInfoValue)
                            } ]
                        };
                    }
                };
            }, InsightsDefinitionBuilderClientErrorVisitor.prototype.visitExplainAnomalies = function(_anomalyError) {}, 
            InsightsDefinitionBuilderClientErrorVisitor.prototype.getErrorInfoKeys = function(code) {
                switch (code) {
                  case 0:
                    return {
                        errorInfoKey: "VisualContainer_FailedToLoadVisual",
                        errorInfoValue: "DecompositionTree_Error_NoTargetMeasure"
                    };

                  case 1:
                    return {
                        errorInfoKey: "VisualContainer_FailedToLoadVisual",
                        errorInfoValue: "AnalysisVisual_Error_UnsupportedTarget"
                    };

                  case 2:
                    return {
                        errorInfoKey: "DecompositionTree_AnalysisUnsupported_Title",
                        errorInfoValue: "DecompositionTree_AnalysisUnsupported_Description"
                    };

                  default:
                    return debug.fF.assertFail("Unhandled error in builder result: ".concat(code)), 
                    {
                        errorInfoKey: "VisualContainer_FailedToLoadVisual",
                        errorInfoValue: "AnalysisVisual_Error_Generic"
                    };
                }
            }, InsightsDefinitionBuilderClientErrorVisitor;
        }(), analysis_result_analyzer = __webpack_require__(7886), visualContainerUtilsHelper = __webpack_require__(3579), visualContainerUtils = __webpack_require__(60661), contracts_selector = __webpack_require__(32379), windowExpansionState = __webpack_require__(74711), dataViewObjectDefinition1 = __webpack_require__(5265), dataViewScopeIdentity = __webpack_require__(78843), scopeIdentityExtractor = __webpack_require__(26743), decomposition_authoring_core_service = __webpack_require__(23320), expand_collapse_service = __webpack_require__(79006), visual_plugin_service = __webpack_require__(29866), InsightsDecompositionAnalysisResultHandlerService = function() {
            function InsightsDecompositionAnalysisResultHandlerService(dataSources, conceptualSchemaProxy, decompositionAuthoringCore, expandCollapseService, visualPlugin) {
                this.dataSources = dataSources, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.decompositionAuthoringCore = decompositionAuthoringCore, this.expandCollapseService = expandCollapseService, 
                this.visualPlugin = visualPlugin;
            }
            return InsightsDecompositionAnalysisResultHandlerService.prototype.processAnalysisResult = function(visualContainer, findDecompositions) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var capabilities, decompositionCapabilities, explainByRole, aiLevels, aiLevelsCount, skipAILevelsCount, query, projectionRefs, dimensions, pinnedLevelsCount, firstAILevel, firstActiveAILevel, warnings, highlightedAIProperty, decompositions, schema, _loop_1, this_1, i, newProjections, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(visualContainer, "visualContainer not defined"), debug.fF.assertAnyValue(findDecompositions, " findDecompositions can be undefined when there is analysis error."), 
                            capabilities = this.visualPlugin.capabilities((0, visualContainerUtilsHelper.s)(visualContainer)), 
                            debug.fF.assertValue(explainByRole = (decompositionCapabilities = capabilities && capabilities.insights && capabilities.insights.decomposition) && decompositionCapabilities.explainByRole, "Capabilities is missing explainBy role"), 
                            aiLevels = this.decompositionAuthoringCore.getAILevelsInformation(visualContainer, explainByRole), 
                            aiLevelsCount = _.size(aiLevels), skipAILevelsCount = -1 === (skipAILevelsCount = _.findIndex(aiLevels, function(aiLevel) {
                                return !aiLevel.disabled;
                            })) ? 0 : skipAILevelsCount, query = (0, visualContainerUtils.Xf)(visualContainer), 
                            projectionRefs = query.getRolesProjectionRefs([ explainByRole ]), dimensions = query.tryGetExprs(explainByRole), 
                            pinnedLevelsCount = this.decompositionAuthoringCore.getPinnedLevelsCount(visualContainer, explainByRole), 
                            firstActiveAILevel = (firstAILevel = pinnedLevelsCount - aiLevelsCount) + skipAILevelsCount, 
                            findDecompositions && null != findDecompositions.warnings && (warnings = this.processAnalysisWarning(findDecompositions.warnings)), 
                            highlightedAIProperty = decompositionCapabilities && decompositionCapabilities.highlightedAIMatrixNode, 
                            firstActiveAILevel < 0 ? (debug.fF.assertFail("Count of AI levels is greater than the number of dimensions"), 
                            [ 2, {
                                clientWarnings: warnings
                            } ]) : (decompositions = findDecompositions && findDecompositions.decompositions, 
                            _.isEmpty(decompositions) ? (0 === firstAILevel ? this.decompositionAuthoringCore.collapseNode(visualContainer, explainByRole, {
                                dataMap: {}
                            }) : this.decompositionAuthoringCore.truncatePath(visualContainer, explainByRole, firstAILevel - 1), 
                            [ 2, {
                                clientWarnings: warnings
                            } ]) : (this.clearHighlightedAIProperties(visualContainer, highlightedAIProperty), 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ]));

                          case 1:
                            for (schema = _a.sent(), this.decompositionAuthoringCore.clearAILevelsInformation(visualContainer, explainByRole), 
                            debug.fF.assert(function() {
                                return aiLevelsCount >= _.size(decompositions);
                            }, "Received more AI results than requested"), this.decompositionAuthoringCore.truncatePath(visualContainer, explainByRole, firstActiveAILevel), 
                            _loop_1 = function(i) {
                                var _b, decomposition = decompositions[i], projectionIndex = this_1.findProjection(dimensions, decomposition.dimension, schema, firstActiveAILevel), queryRef = projectionRefs[projectionIndex];
                                if (!queryRef) return debug.fF.assertFail("Projection not found"), this_1.decompositionAuthoringCore.truncatePath(visualContainer, explainByRole, firstActiveAILevel + i - 1), 
                                "break";
                                if (this_1.decompositionAuthoringCore.replaceLevelAt(visualContainer, explainByRole, firstActiveAILevel + i, queryRef), 
                                i < _.size(decompositions) - 1) {
                                    debug.fF.assertValue(decomposition.value, "Decomposition result is missing a value"), 
                                    debug.fF.assertValue(_.some(decomposition.value.where()), "Value is not a valid filter");
                                    var condition = decomposition.value.where()[0].condition, identity = (0, dataViewScopeIdentity.TZ)(condition), result_1 = this_1.decompositionAuthoringCore.expandNode(visualContainer, explainByRole, {
                                        dataMap: (_b = {}, _b[queryRef] = [ identity ], _b),
                                        metadata: [ queryRef ]
                                    });
                                    debug.fF.assert(function() {
                                        return result_1;
                                    }, "Could not expand AI node");
                                }
                            }, this_1 = this, i = 0; i < _.size(decompositions) && "break" !== _loop_1(i); i++) ;
                            return this.expandCollapseService.pinLevels(visualContainer, [ explainByRole ], pinnedLevelsCount), 
                            pinnedLevelsCount < _.size(dimensions) && this.expandCollapseService.unpinLevels(visualContainer, [ explainByRole ], pinnedLevelsCount), 
                            newProjections = query.getRolesProjectionRefs([ explainByRole ]), _.map(aiLevels, function(aiLevel, i) {
                                return _this.expandCollapseService.setAILevelInformation(visualContainer, [ explainByRole ], i + firstAILevel, [ newProjections[i + firstAILevel] ], aiLevel);
                            }), this.createDataViewObjectDefinitions(decompositions, visualContainer, schema, firstActiveAILevel, highlightedAIProperty), 
                            [ 2, {
                                windowExpansionTransform: function(windowExpansion) {
                                    for (var newWindowExpansionState = (0, windowExpansionState.W7)(_.first(query.expansionStates), windowExpansion, query.defn.select(), schema), node = newWindowExpansionState.root, depth = 0; !_.isEmpty(node.children); ) node = _.first(node.children), 
                                    depth++;
                                    var lastAILevel = firstActiveAILevel + _.size(decompositions) - 1;
                                    if (depth === lastAILevel) {
                                        var decomposition = _.last(decompositions);
                                        if (-1 !== _this.findProjection(dimensions, decomposition.dimension, schema, firstActiveAILevel)) {
                                            debug.fF.assertValue(decomposition.value, "Decomposition result is missing a value"), 
                                            debug.fF.assertValue(_.some(decomposition.value.where()), "Value is not a valid filter");
                                            var condition = decomposition.value.where()[0].condition, conditionKeyValuePairs = (0, 
                                            scopeIdentityExtractor.Dh)(condition);
                                            newWindowExpansionState.levels[lastAILevel].identityKeys = _.map(conditionKeyValuePairs, function(keyValuePair) {
                                                return keyValuePair.left;
                                            });
                                            var values = _.map(conditionKeyValuePairs, function(keyValuePair) {
                                                return keyValuePair.right;
                                            });
                                            return node.windowValues = [], node.children = [ {
                                                children: [],
                                                identityValues: values,
                                                windowValues: []
                                            } ], newWindowExpansionState;
                                        }
                                        debug.fF.assertFail("Projection not found");
                                    } else debug.fF.assertFail("Incorrect expansion path length");
                                },
                                clientWarnings: warnings
                            } ];
                        }
                    });
                });
            }, InsightsDecompositionAnalysisResultHandlerService.prototype.createDataViewObjectDefinitions = function(decompositions, visualContainer, schema, firstActiveAILevel, highlightedAIProperty) {
                var _a;
                if (!_.isEmpty(decompositions)) {
                    debug.fF.assertValue(visualContainer, "visualContainer"), debug.fF.assertValue(schema, "FederatedConceptualSchema"), 
                    debug.fF.assert(function() {
                        return firstActiveAILevel >= 0;
                    }, "firstActiveAILevel should not be negative.");
                    var objectDefinitions = (0, visualContainerUtils.GQ)(visualContainer);
                    objectDefinitions || (objectDefinitions = visualContainer.config.singleVisual.objects = {});
                    for (var query = (0, visualContainerUtils.Xf)(visualContainer), role = decompositionTree_capabilities.Fw.explainBy, expansionPath = expansion_path_utils.JU(query, [ role ]), projectionRefs = query.getRolesProjectionRefs([ role ]), dimensions = query.tryGetExprs(role), decompositionSize = _.size(decompositions), i = 0; i < decompositionSize - 1; i++) {
                        var selector_1 = (0, contracts_selector.tV)(expansionPath[firstActiveAILevel + i]);
                        if (debug.fF.assertValue(selector_1, "ExpansionPath should not be empty."), !selector_1) break;
                        selector_1.metadata = null, (0, dataViewObjectDefinition1.sO)(objectDefinitions, highlightedAIProperty, selector_1, (0, 
                        sqExpr.O7)(!0));
                    }
                    var lastDecomposition = _.last(decompositions), queryRef = projectionRefs[this.findProjection(dimensions, lastDecomposition.dimension, schema, firstActiveAILevel)], decompFilter = _.first(lastDecomposition.value.where());
                    if (decompFilter) {
                        var nodeIdentity = (0, dataViewScopeIdentity.TZ)(decompFilter.condition), extendedPath = expansion_path_utils.ud(expansionPath, [ {
                            dataMap: (_a = {}, _a[queryRef] = [ nodeIdentity ], _a),
                            metadata: [ queryRef ]
                        } ]), selector = (0, contracts_selector.tV)(_.last(extendedPath));
                        selector && (selector.metadata = null, (0, dataViewObjectDefinition1.sO)(objectDefinitions, highlightedAIProperty, selector, (0, 
                        sqExpr.O7)(!0)));
                    }
                }
            }, InsightsDecompositionAnalysisResultHandlerService.prototype.clearHighlightedAIProperties = function(visualContainer, highlightedAIProperty) {
                debug.fF.assertValue(visualContainer, "visualContainer"), debug.fF.assertValue(highlightedAIProperty, "PropertyIdentifier of highlightedAIMatrixNode should exist.");
                var objectDefinitions = (0, visualContainerUtils.GQ)(visualContainer);
                if (objectDefinitions) {
                    var objDefns = objectDefinitions[highlightedAIProperty.objectName];
                    if (!_.isEmpty(objDefns)) {
                        for (var _i = 0, objDefns_1 = objDefns; _i < objDefns_1.length; _i++) (0, dataViewObjectDefinition1.E2)(objectDefinitions, highlightedAIProperty.objectName, objDefns_1[_i].selector, highlightedAIProperty.propertyName);
                        (0, dataViewObjectDefinition1.u4)(objectDefinitions);
                    }
                }
            }, InsightsDecompositionAnalysisResultHandlerService.prototype.findProjection = function(dimensions, expr, schema, startIndex) {
                return _.findIndex(dimensions, function(dimension) {
                    if ((0, sqExprStaticMembers.ez)(dimension)) {
                        var currentColumn = dimension.getTargetColumnRef(schema);
                        return (0, sqExprStaticMembers.ez)(expr) && (expr = expr.getTargetColumnRef(schema)), 
                        (0, sqExprEqualityVisitor.fS)(currentColumn, expr);
                    }
                    return (0, sqExprEqualityVisitor.fS)(dimension, expr);
                }, startIndex);
            }, InsightsDecompositionAnalysisResultHandlerService.prototype.processAnalysisWarning = function(analysisWarning) {
                debug.fF.assertAnyValue(analysisWarning, "DecompositionAnalysisWarnings");
                var clientWarnings = [];
                if (1 === analysisWarning) {
                    var key_1 = "InvalidConstrainedJoin";
                    clientWarnings.push({
                        code: key_1,
                        columnNameFromIndex: function(index) {},
                        getDetails: function(resourceProvider) {
                            return {
                                message: resourceProvider.get(key_1),
                                displayableErrorInfo: [ {
                                    errorInfoKey: resourceProvider.get(key_1),
                                    errorInfoValue: resourceProvider.get(key_1)
                                } ]
                            };
                        }
                    });
                }
                return clientWarnings;
            }, InsightsDecompositionAnalysisResultHandlerService.prototype.toClientErrorOrWarning = function() {
                throw new Error("Not applied to DecompositionTree result handler");
            }, InsightsDecompositionAnalysisResultHandlerService.\u0275fac = function(t) {
                return new (t || InsightsDecompositionAnalysisResultHandlerService)(core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](decomposition_authoring_core_service.e), core["\u0275\u0275inject"](expand_collapse_service.v), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, InsightsDecompositionAnalysisResultHandlerService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: InsightsDecompositionAnalysisResultHandlerService,
                factory: InsightsDecompositionAnalysisResultHandlerService.\u0275fac
            }), InsightsDecompositionAnalysisResultHandlerService;
        }(), InsightsAnalysisResultHandlerServiceLazyProvider = {
            provide: "insightsAnalysisResultHandler",
            useFactory: function(injector) {
                return new Promise(function(resolve) {
                    resolve(new InsightsAnalysisResultHandlerService(injector));
                });
            },
            deps: [ core.Injector ]
        }, InsightsAnalysisResultHandlerService = function() {
            function InsightsAnalysisResultHandlerService(injector) {
                this.injector = injector;
            }
            return InsightsAnalysisResultHandlerService.prototype.processAnalysisResult = function(visualContainer, analysisResult) {
                if (debug.fF.assertValue(visualContainer, "visualContainer not defined"), debug.fF.assertValue(analysisResult, "analysisResultContainer not defined"), 
                analysisResult.analysisDefinition.findDecompositions) return this.injector.get(InsightsDecompositionAnalysisResultHandlerService).processAnalysisResult(visualContainer, analysisResult.result && analysisResult.result.findDecompositions);
                debug.fF.assertFail("Unexpected analysis result");
            }, InsightsAnalysisResultHandlerService.prototype.toClientErrorOrWarning = function(error) {
                return analysis_result_analyzer.F.processAnalysisErrorToIClientErrorOrWarning(error);
            }, InsightsAnalysisResultHandlerService.\u0275fac = function(t) {
                return new (t || InsightsAnalysisResultHandlerService)(core["\u0275\u0275inject"](core.Injector));
            }, InsightsAnalysisResultHandlerService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: InsightsAnalysisResultHandlerService,
                factory: InsightsAnalysisResultHandlerService.\u0275fac
            }), InsightsAnalysisResultHandlerService;
        }(), anomaly_analysis_definition_builder = __webpack_require__(32557), exploration_display_name_service = __webpack_require__(13702), running_visual_service = __webpack_require__(8082), visual_plugin_operations_service = __webpack_require__(66977), dataViewQuery = __webpack_require__(68273), columnChart_capabilities = __webpack_require__(47287), arrayExtensions = __webpack_require__(50550), Double = __webpack_require__(41640), StandaloneUtility3 = __webpack_require__(43286), valueFormatter = __webpack_require__(72489), sqExprRewriter = __webpack_require__(5361), localization_service = __webpack_require__(65181), InsightsAnalysisServiceLazyProvider = {
            provide: "insightsAnalysisModern",
            useFactory: function(displayNameService, explorationCapabilities, featureSwitchService, localizationService, visualPlugin, visualPluginOperationsService, runningVisuals) {
                return new Promise(function(resolve) {
                    resolve(new InsightsAnalysisService(displayNameService, explorationCapabilities, featureSwitchService, localizationService, visualPlugin, visualPluginOperationsService, runningVisuals));
                });
            },
            deps: [ exploration_display_name_service.O, exploration_capabilities_service.U, feature_switch_service.vZ, localization_service.o, visual_plugin_service.D, visual_plugin_operations_service.f, running_visual_service.s ]
        }, InsightsAnalysisService = function() {
            function InsightsAnalysisService(displayNameService, explorationCapabilities, featureSwitchService, localizationService, visualPlugin, visualPluginOps, runningVisuals) {
                this.displayNameService = displayNameService, this.explorationCapabilities = explorationCapabilities, 
                this.featureSwitchService = featureSwitchService, this.localizationService = localizationService, 
                this.visualPlugin = visualPlugin, this.visualPluginOps = visualPluginOps, this.runningVisuals = runningVisuals;
            }
            return InsightsAnalysisService.prototype.getOptions = function(visualContainer, filterContext, selectors, schema, analysisType) {
                var filterQuery;
                debug.fF.assertValue(visualContainer, "visualContainer"), debug.fF.assertValue(schema, "schema");
                var filters = [];
                filterContext instanceof semanticQuery_semanticQuery.yl ? filters = [ filterContext ] : void 0 !== filterContext && (filterQuery = filterContext.query, 
                filterContext.dataFilters && filters.push.apply(filters, _.map(filterContext.dataFilters, function(fd) {
                    return fd.filter;
                })), filterContext.highlightFilters && filters.push(filterContext.highlightFilters));
                var query = this.addFiltersToQuery(visualContainer, filters);
                if (!query) return [];
                query = query.rewrite(new SQGroupRefToColumnRefRewriter);
                var options = [];
                if (this.analysisTypeMatches(analysisType, "ExplainChange") && !_.isEmpty(selectors)) {
                    var breakdowns = this.getExplainChangeDefinitions(visualContainer, query, selectors, filters, schema, filterQuery);
                    _.isEmpty(breakdowns) || options.push.apply(options, breakdowns || []);
                }
                this.analysisTypeMatches(analysisType, "FindDistributionFactors") && (option = this.getDistributionFactorOption(visualContainer, query, selectors, schema, filterQuery)) && options.push(option);
                var option, featureSwitches = this.featureSwitchService.featureSwitches;
                if (featureSwitches.insightsDevModeEnabled && this.analysisTypeMatches(analysisType, "GetRelatedInsights") && (option = this.getRelatedInsightsDefinition(visualContainer, query, selectors, schema)) && options.push(option), 
                featureSwitches.decompositionAnalysisInsights && this.analysisTypeMatches(analysisType, "DecompositionTree")) {
                    var decompOptions = this.createDecompositionAnalysisOptions(visualContainer, selectors, schema);
                    decompOptions && (options = options.concat(decompOptions));
                }
                if (featureSwitches.daxTransformEnabled && this.analysisTypeMatches(analysisType, "ExplainAnomalies")) {
                    var explainAnomalyOptions = this.getExplainAnomalyOptions(visualContainer, selectors, schema, filters);
                    _.isEmpty(explainAnomalyOptions) || (options = options.concat(explainAnomalyOptions));
                }
                return options;
            }, InsightsAnalysisService.prototype.getExplainChangeDefinition = function(schema, parentSpace, filterContextOrderBy, selects, measureExpr, dimensionExpr, targetFilter, referenceFilter, referenceValue, referenceDimensionValue) {
                debug.fF.assertValue(schema, "schema"), debug.fF.assertValue(selects, "selects"), 
                debug.fF.assertValue(measureExpr, "measureExpr"), debug.fF.assertValue(dimensionExpr, "dimensionExpr"), 
                debug.fF.assertValue(targetFilter, "targetFilter"), debug.fF.assertValue(referenceFilter, "referenceFilter");
                var isScalar = isScalarExpr(dimensionExpr, schema);
                return this.getExplainChangeDefinitionInternal(schema, parentSpace, filterContextOrderBy, selects, measureExpr, isScalar, targetFilter, referenceFilter, referenceValue, referenceDimensionValue);
            }, InsightsAnalysisService.prototype.getFindDistributionAnalysisDefinition = function(schema, parentSpace, filterContextOrderBy, selects, measureExpr, dimensionExpr) {
                if (debug.fF.assertValue(schema, "schema"), debug.fF.assertValue(selects, "selects"), 
                debug.fF.assertValue(measureExpr, "measureExpr"), debug.fF.assertValue(dimensionExpr, "dimensionExpr"), 
                this.isSupported(measureExpr, schema) && this.isSupported(dimensionExpr, schema) && (!parentSpace || this.isSupported(parentSpace, schema))) return {
                    definition: {
                        findDistributionFactors: {
                            measure: measureExpr,
                            dimension: dimensionExpr,
                            parentSpace,
                            requestedInsights: 10,
                            timeoutInMS: 15e3
                        }
                    },
                    insightQueryTransform: {
                        queryRewriters: this.createRewriters(selects, schema),
                        orderBy: filterContextOrderBy
                    }
                };
            }, InsightsAnalysisService.prototype.getExplainChangeDefinitionInternal = function(schema, parentSpace, filterContextOrderBy, selects, measure, isScalar, targetFilter, referenceFilter, referenceValue, referenceDimensionValue) {
                if (targetFilter && referenceFilter && isScalar && _.some(schema.schemas, function(s) {
                    return s.capabilities.insights.supportsExplainChange;
                })) {
                    var rewriters = this.createRewriters(selects, schema);
                    if (!_.isEmpty(rewriters)) for (var _i = 0, rewriters_1 = rewriters; _i < rewriters_1.length; _i++) {
                        var rewriter = rewriters_1[_i];
                        parentSpace = parentSpace && parentSpace.rewrite(rewriter), referenceFilter = referenceFilter.rewrite(rewriter), 
                        targetFilter = targetFilter.rewrite(rewriter);
                    }
                    if ((!(parentSpace = this.removeRedundantFilters(parentSpace, referenceFilter, targetFilter)) || this.isSupported(parentSpace, schema)) && this.isSupported(targetFilter, schema) && this.isSupported(referenceFilter, schema) && this.isSupported(measure, schema)) return {
                        definition: {
                            explainChange: {
                                requestedInsights: 10,
                                timeoutInMS: 15e3,
                                measure,
                                reference: referenceFilter,
                                target: targetFilter,
                                parentSpace,
                                referenceValue,
                                referenceDimensionValue
                            }
                        },
                        insightQueryTransform: {
                            queryRewriters: rewriters,
                            orderBy: filterContextOrderBy
                        }
                    };
                }
            }, InsightsAnalysisService.prototype.addFiltersToQuery = function(visualContainer, filters) {
                var visualQuery = (0, visualContainerUtils.Xf)(visualContainer), query = visualQuery && visualQuery.clone().defn;
                if (query) {
                    for (var _i = 0, filters_1 = filters; _i < filters_1.length; _i++) query = query.addSemanticFilter(filters_1[_i]);
                    return query;
                }
            }, InsightsAnalysisService.prototype.getRelatedInsightsDefinition = function(visualContainer, query, selectors, schema) {
                var _this = this;
                if (_.some(schema.schemas, function(s) {
                    return s.capabilities.insights.supportsRelatedInsights;
                })) {
                    var filter = selectors && semanticQuery_semanticQuery.yl.merge(_.map(selectors, function(selector) {
                        return _this.getFilterFromSelector(selector);
                    }));
                    return filter && (query = query.addSemanticFilter(filter)), {
                        analysisDefinition: {
                            getRelatedInsights: {
                                topicQuery: query,
                                options: 0,
                                requestedInsights: 10,
                                timeoutInMS: 15e3
                            }
                        },
                        question: this.localizationService.get("Insights_AnalysisScopedQuestion"),
                        description: this.localizationService.get("Insights_AnalysisScopedDescription"),
                        sourceVisualContainer: visualContainer,
                        insightQueryTransform: {
                            queryRewriters: this.createRewritersFromVisualContainerSelects(visualContainer, schema)
                        },
                        selectors
                    };
                }
            }, InsightsAnalysisService.prototype.getDistributionFactorOption = function(visualContainer, query, selectors, schema, filterContextQuery) {
                var _a, _b, _c;
                if (_.some(schema.schemas, function(s) {
                    return s.capabilities.insights.supportsDistributionFactors;
                })) {
                    var visualType = (0, visualContainerUtilsHelper.s)(visualContainer);
                    if (!(_.size(selectors) > 1 || visualType !== plugins.L.columnChart.name && visualType !== plugins.L.clusteredColumnChart.name && visualType !== plugins.L.barChart.name && visualType !== plugins.L.clusteredBarChart.name && visualType !== plugins.L.lineClusteredColumnComboChart.name && visualType !== plugins.L.lineStackedColumnComboChart.name)) {
                        var dataViewKinds = this.visualPluginOps.dataViewKinds((0, visualContainerUtilsHelper.s)(visualContainer), (0, 
                        visualContainerUtils.Xf)(visualContainer));
                        if (dataViewKinds && (0, StandaloneUtility3.yE)(dataViewKinds, 1) && void 0 !== this.runningVisuals.getVisual(visualContainer)) {
                            var dataViews = this.runningVisuals.getVisual(visualContainer).getDataViews();
                            if (!_.every(dataViews, function(d) {
                                return _.isEmpty(d.categorical.categories) || _.size(d.categorical.categories[0].values) <= 1;
                            })) {
                                var measureExpr, dimensionExpr, context;
                                if (_.isEmpty(selectors)) {
                                    var visualQuery_1 = (0, visualContainerUtils.Xf)(visualContainer), projections_1 = visualQuery_1.projections, yProjections = projections_1[columnChart_capabilities.au.y], measureRefs_1 = yProjections && yProjections.all();
                                    if (1 !== _.size(measureRefs_1)) return;
                                    measureExpr = null === (_c = _.find(query.select(), function(s) {
                                        return s.name === measureRefs_1[0].queryRef;
                                    })) || void 0 === _c ? void 0 : _c.expr;
                                    var queryDimensions = _.filter(query.select(), function(s) {
                                        return !(0, isMeasure.k)(s.expr);
                                    });
                                    if (1 !== _.size(queryDimensions) && (queryDimensions = _.filter(queryDimensions, function(d) {
                                        var role = visualQuery_1.getRoleNameForExpr(d.expr);
                                        return _.includes(projections_1[role].activeProjectionRefs, d.name);
                                    })), 1 !== _.size(queryDimensions)) return;
                                    dimensionExpr = queryDimensions[0].expr;
                                } else {
                                    var selector = selectors[0], measureMetadata = selector.metadata;
                                    if (1 !== _.size(measureMetadata)) return;
                                    if (measureExpr = null === (_a = query.select().withName(measureMetadata[0])) || void 0 === _a ? void 0 : _a.expr, 
                                    !(context = this.getCategoricalSelectorContext((0, contracts_selector.tV)(selector), visualContainer, schema)) || !context.categoryQueryName) return;
                                    dimensionExpr = null === (_b = query.select().withName(context.categoryQueryName)) || void 0 === _b ? void 0 : _b.expr;
                                }
                                if (measureExpr && dimensionExpr) {
                                    var visualQuery = (0, visualContainerUtils.Xf)(visualContainer), role = visualQuery.getRoleNameForExpr(dimensionExpr), projections = visualQuery.projections[role];
                                    if (!(_.size(projections.all()) > 1 && 1 !== _.size(projections.activeProjectionRefs))) {
                                        if ((0, sqExprStaticMembers.ZG)(measureExpr)) {
                                            for (var _i = 0, additionalFilters_1 = _.map(measureExpr.filters, function(f) {
                                                return semanticQuery_semanticQuery.yl.fromSQExpr(f.condition);
                                            }); _i < additionalFilters_1.length; _i++) query = query.addSemanticFilter(additionalFilters_1[_i]);
                                            measureExpr = measureExpr.expression;
                                        }
                                        var parentSpace, contextLegendFilter = context && context.legendFilter;
                                        contextLegendFilter && (query = query.addSemanticFilter(contextLegendFilter)), _.isEmpty(query.where()) || (parentSpace = semanticQuery_semanticQuery.yl.fromSQFromAndSQFilters(query.from(), query.where()));
                                        var visualCapabilities = (0, visualContainerUtils.cj)(visualContainer, this.visualPlugin), measureDisplayName = this.displayNameService.getDisplayName(measureExpr, schema, visualCapabilities), dimensionDisplayName = this.displayNameService.getDisplayName(dimensionExpr, schema, (0, 
                                        visualContainerUtils.cj)(visualContainer, this.visualPlugin)), description = this.localizationService.format("Insights_AnalysisDistributionFactorsDescription", [ measureDisplayName, dimensionDisplayName ]);
                                        contextLegendFilter && (description = this.localizationService.format("Insights_AnalysisDistributionFactorsWithFiltersDescription", [ measureDisplayName, dimensionDisplayName, this.displayNameService.getFilterRestatement(contextLegendFilter, schema, visualCapabilities) ]));
                                        var visualContainerSelects = (0, visualContainerUtils.oJ)(visualContainer), filterContextOrderBy = filterContextQuery && filterContextQuery.orderBy(), definitionWithTransform = this.getFindDistributionAnalysisDefinition(schema, parentSpace, filterContextOrderBy, visualContainerSelects, measureExpr, dimensionExpr);
                                        if (definitionWithTransform) return {
                                            analysisDefinition: definitionWithTransform.definition,
                                            question: this.localizationService.get("Insights_AnalysisDistributionFactorsQuestion"),
                                            description,
                                            sourceVisualContainer: visualContainer,
                                            insightQueryTransform: definitionWithTransform.insightQueryTransform,
                                            selectors
                                        };
                                    }
                                }
                            }
                        }
                    }
                }
            }, InsightsAnalysisService.prototype.getExplainChangeDefinitions = function(visualContainer, query, selectors, filters, schema, filterContextQuery) {
                if (_.some(schema.schemas, function(s) {
                    return s.capabilities.insights.supportsExplainChange;
                })) {
                    var parentSpace, dataViewKinds = this.visualPluginOps.dataViewKinds((0, visualContainerUtilsHelper.s)(visualContainer), (0, 
                    visualContainerUtils.Xf)(visualContainer));
                    if (null != dataViewKinds && void 0 !== this.runningVisuals.getVisual(visualContainer) && (_.isEmpty(filters) || (parentSpace = semanticQuery_semanticQuery.yl.merge(filters)), 
                    !_.some(selectors, function(s) {
                        return !s.dataMap;
                    }))) {
                        var measureMetadata = selectors[0].metadata;
                        if (1 !== _.size(measureMetadata) || _.some(selectors, function(s) {
                            return 1 !== _.size(s.metadata) || s.metadata[0] !== measureMetadata[0];
                        })) return [];
                        var selectRef = query.select().withName(measureMetadata[0]);
                        if (!selectRef) return [];
                        var measure = selectRef.expr, breakdowns = [];
                        if ((0, StandaloneUtility3.yE)(dataViewKinds, 1)) {
                            var result = this.getCategoricalBreakdownOptions(visualContainer, selectors, schema, measure, parentSpace, filterContextQuery);
                            _.isEmpty(result) || breakdowns.push.apply(breakdowns, result || []);
                        } else (0, StandaloneUtility3.yE)(dataViewKinds, 2) && (result = this.getMatrixBreakdownOptions(visualContainer, selectors, schema, measure, parentSpace, filterContextQuery), 
                        _.isEmpty(result) || breakdowns.push.apply(breakdowns, result || []));
                        return breakdowns;
                    }
                }
            }, InsightsAnalysisService.prototype.createExplainChangeOption = function(targetContext, referenceContext, measure, parentSpace, schema, visualContainer, filterContextQuery, selectors) {
                var comparison = targetContext.value > referenceContext.value ? "Increase" : "Decrease", percentChange = Math.abs(100 * (targetContext.value - referenceContext.value) / referenceContext.value).toFixed(2), questionKey = "Insights_Analysis".concat(comparison, "ChangeBreakdownQuestion"), descriptionKey = "Insights_Analysis".concat(comparison, "ChangeBreakdownDescription"), descriptionParams = [ percentChange ];
                descriptionParams.push.apply(descriptionParams, [ this.displayNameService.getDisplayName(measure, schema, null), referenceContext.formattedCategoryValue, targetContext.formattedCategoryValue ]);
                var definitionWithTransform = this.getExplainChangeDefinitionInternal(schema, parentSpace, filterContextQuery && filterContextQuery.orderBy(), (0, 
                visualContainerUtils.oJ)(visualContainer), measure, !0, targetContext.filter, referenceContext.filter, referenceContext.value, referenceContext.formattedCategoryValue);
                if (definitionWithTransform) return {
                    analysisDefinition: definitionWithTransform.definition,
                    question: this.localizationService.get(questionKey),
                    description: this.localizationService.format(descriptionKey, descriptionParams),
                    sourceVisualContainer: visualContainer,
                    insightQueryTransform: definitionWithTransform.insightQueryTransform,
                    selectors
                };
            }, InsightsAnalysisService.prototype.createDecompositionAnalysisOptions = function(visualContainer, selectors, schema) {
                var visualCapabilities = (0, visualContainerUtils.cj)(visualContainer, this.visualPlugin);
                if (visualCapabilities && visualCapabilities.analyze && visualCapabilities.analyze.supportsAnalyzeHighLowValues) {
                    var measureExpr = this.getMeasureExprForDecomposition(visualContainer, selectors);
                    if (measureExpr) {
                        var explorationCapabilities = this.explorationCapabilities.getCapabilities();
                        if ((0, decomposition_authoring_service.W)(measureExpr, explorationCapabilities, schema)) {
                            var measureName = this.displayNameService.getDisplayName(measureExpr, schema, null);
                            return [ {
                                analysisDefinition: {
                                    findDecompositions: {
                                        target: measureExpr,
                                        methods: [ 1 ],
                                        path: void 0,
                                        strategy: 1
                                    }
                                },
                                question: this.localizationService.get("Insights_AnalysisFindMinDecompositionQuestion"),
                                description: this.localizationService.format("Insights_AnalysisFindMinDecompositionDescription", [ 15, 10, measureName ]),
                                sourceVisualContainer: visualContainer,
                                selectors
                            }, {
                                analysisDefinition: {
                                    findDecompositions: {
                                        target: measureExpr,
                                        methods: [ 2 ],
                                        path: void 0,
                                        strategy: 1
                                    }
                                },
                                question: this.localizationService.get("Insights_AnalysisFindMaxDecompositionQuestion"),
                                description: this.localizationService.format("Insights_AnalysisFindMaxDecompositionDescription", [ 15, 10, measureName ]),
                                sourceVisualContainer: visualContainer,
                                selectors
                            } ];
                        }
                    }
                }
            }, InsightsAnalysisService.prototype.getExplainAnomalyOptions = function(sourceVisualContainer, selectors, schema, filters) {
                debug.fF.assertValue(sourceVisualContainer, "sourceVisualContainer"), debug.fF.assertAnyValue(selectors, "selectors"), 
                debug.fF.assertValue(schema, "schema"), debug.fF.assertAnyValue(filters, "filters");
                var explainAnomalyOptions = [];
                if (_.isEmpty(selectors)) return explainAnomalyOptions;
                var visualCapabilities = (0, visualContainerUtils.cj)(sourceVisualContainer, this.visualPlugin);
                if (!(null == visualCapabilities ? void 0 : visualCapabilities.insights)) return explainAnomalyOptions;
                var explorationContainerOptions = this.explorationCapabilities.getCapabilities(), anomalyOption = new anomaly_analysis_definition_builder.ix(this.displayNameService, this.localizationService, this.runningVisuals).getAnalysisOption(sourceVisualContainer, filters, _.first(selectors), schema, visualCapabilities, explorationContainerOptions);
                return anomalyOption && explainAnomalyOptions.push(anomalyOption), explainAnomalyOptions;
            }, InsightsAnalysisService.prototype.createRewritersFromVisualContainerSelects = function(visualContainer, schema) {
                var selects = (0, visualContainerUtils.oJ)(visualContainer);
                return this.createRewriters(selects, schema);
            }, InsightsAnalysisService.prototype.createRewriters = function(selects, schema) {
                for (var rewriters = [], sourceExprs = [], _loop_1 = function(select) {
                    if ((0, sqExprStaticMembers.ez)(select.expr)) {
                        var variationSource_1 = (0, sqHierarchyExprUtils1.cH)(select.expr), variationTarget = select.expr.getTargetColumnRef(schema).getTargetEntity();
                        variationSource_1 && variationTarget && (_.some(sourceExprs, function(sourceExpr) {
                            return (0, sqExprEqualityVisitor.fS)(sourceExpr, variationSource_1, !1, !0);
                        }) || (rewriters.push(new ColumnToVariationHierarchyLevelRewriter(variationTarget, variationSource_1, schema)), 
                        sourceExprs.push(variationSource_1)));
                    }
                }, _i = 0, selects_1 = selects; _i < selects_1.length; _i++) _loop_1(selects_1[_i]);
                return rewriters;
            }, InsightsAnalysisService.prototype.getCategoricalBreakdownOptions = function(visualContainer, selectors, schema, measure, parentSpace, filterContextQuery) {
                var breakdowns = [], subspace1Context = this.getCategoricalSelectorContext((0, contracts_selector.tV)(selectors[0]), visualContainer, schema);
                if (subspace1Context) {
                    var isScalar = subspace1Context.isScalar, numSelectors = _.size(selectors);
                    if (2 === numSelectors) {
                        if (!(subspace2Context = this.getCategoricalSelectorContext((0, contracts_selector.tV)(selectors[1]), visualContainer, schema))) return;
                        var referenceContext = subspace2Context.index > subspace1Context.index ? subspace1Context : subspace2Context, targetContext = subspace2Context.index > subspace1Context.index ? subspace2Context : subspace1Context;
                        isScalar && !(0, Double.GG)(subspace1Context.value, subspace2Context.value) && (option = this.createExplainChangeOption(targetContext, referenceContext, measure, parentSpace, schema, visualContainer, filterContextQuery, selectors)) && breakdowns.push(option);
                    } else if (1 === numSelectors && isScalar) {
                        var prevSelector = subspace1Context.previousSelector;
                        if (prevSelector) {
                            var subspace2Context, option;
                            if (!(subspace2Context = this.getCategoricalSelectorContext(prevSelector, visualContainer, schema))) return;
                            (0, Double.GG)(subspace1Context.value, subspace2Context.value) || (option = this.createExplainChangeOption(subspace1Context, subspace2Context, measure, parentSpace, schema, visualContainer, filterContextQuery, selectors)) && breakdowns.push(option);
                        }
                    }
                    return breakdowns;
                }
            }, InsightsAnalysisService.prototype.getCategoricalSelectorContext = function(selector, visualContainer, schema) {
                for (var _i = 0, dataViews_1 = this.runningVisuals.getVisual(visualContainer).getDataViews(); _i < dataViews_1.length; _i++) {
                    var dataView = dataViews_1[_i], visitor = new CategoricalSelectorContextVisitor(selector, schema, this.displayNameService, (0, 
                    visualContainerUtils.cj)(visualContainer, this.visualPlugin));
                    if ((0, dataViewQuery.aU)(dataView, visitor), visitor.context) return visitor.context;
                }
            }, InsightsAnalysisService.prototype.getMatrixBreakdownOptions = function(visualContainer, selectors, schema, measure, parentSpace, filterContextQuery) {
                var _a;
                if (1 === _.size(selectors)) {
                    var selector = (0, contracts_selector.tV)(selectors[0]), identity = null === (_a = null == selector ? void 0 : selector.data) || void 0 === _a ? void 0 : _a[0], expr = identity && identity.expr;
                    if (expr && (0, sqExprStaticMembers.Hi)(expr) && 2 === _.size(expr.values)) {
                        for (var dataViews = this.runningVisuals.getVisual(visualContainer).getDataViews(), referenceExpr = (0, 
                        sqExpr.Sh)(expr.args, [ expr.values[0] ]), targetExpr = (0, sqExpr.Sh)(expr.args, [ expr.values[1] ]), referenceContext = void 0, targetContext = void 0, _i = 0, dataViews_2 = dataViews; _i < dataViews_2.length; _i++) {
                            var dataView = dataViews_2[_i];
                            referenceContext = referenceContext || this.getValueFromMatrix(referenceExpr, dataView, schema), 
                            targetContext = targetContext || this.getValueFromMatrix(targetExpr, dataView, schema);
                        }
                        if (!referenceContext || !targetContext) return;
                        var breakdowns = [];
                        if (targetContext.isScalar) {
                            var option = this.createExplainChangeOption(targetContext, referenceContext, measure, parentSpace, schema, visualContainer, filterContextQuery, selectors);
                            option && breakdowns.push(option);
                        }
                        return breakdowns;
                    }
                }
            }, InsightsAnalysisService.prototype.getValueFromMatrix = function(expr, dataView, schema) {
                if ((0, sqExprStaticMembers.Hi)(expr) && 1 === _.size(expr.values)) {
                    var inExpr = expr, rows = dataView.matrix.rows.root.children, columns = dataView.matrix.columns.root.children;
                    if (!_.isEmpty(dataView.matrix.rows.root.childIdentityFields) && !_.isEmpty(dataView.matrix.columns.root.childIdentityFields)) {
                        var rowIdentities = dataView.matrix.rows.root.childIdentityFields, columnIdentity = dataView.matrix.columns.root.childIdentityFields[0], rowMetadata = _.map(rowIdentities, function(r) {
                            return r.getMetadata(schema);
                        }), columnValueIndex = _.findIndex(inExpr.args, function(inArg) {
                            return (0, sqExprEqualityVisitor.fS)(inArg, columnIdentity);
                        });
                        if (!(columnValueIndex < 0)) {
                            var compareExpr = (0, sqExpr.qu)(0, inExpr.args[columnValueIndex], inExpr.values[0][columnValueIndex]), columnIndex = _.findIndex(columns, function(c) {
                                return c.identity && (0, sqExprEqualityVisitor.fS)(c.identity.expr, compareExpr, !1, !0);
                            });
                            if (!(columnIndex < 0)) for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                                var row = rows_1[_i], newInExpr = (0, sqExpr.Sh)((0, tslib_es6.__spreadArray)([], rowIdentities || [], !0), [ (0, 
                                tslib_es6.__spreadArray)([], _.map(row.levelValues, function(lv, index) {
                                    return (0, sqExpr.kQ)(lv.value, rowMetadata[index] && rowMetadata[index].type);
                                }), !0) ]), value = row.values[columnIndex].value;
                                if (null != value && this.isFilterSubset(expr, newInExpr, 0)) {
                                    var lastLevelMetadata = rowMetadata[rowMetadata.length - 1], type = lastLevelMetadata && lastLevelMetadata.type;
                                    return {
                                        formattedCategoryValue: _.map(expr.values[0], function(v, i) {
                                            var metadata = expr.args[i].getMetadata(schema);
                                            return (0, valueFormatter.WU)(v.value, metadata && metadata.format);
                                        }).join(" "),
                                        value,
                                        index: 0,
                                        previousSelector: null,
                                        isScalar: isScalarType(type),
                                        filter: semanticQuery_semanticQuery.yl.fromSQExpr((0, sqExpr.Sh)(expr.args, [ expr.values[0] ]))
                                    };
                                }
                            }
                        }
                    }
                }
            }, InsightsAnalysisService.prototype.removeRedundantFilters = function(parentSpace, referenceFilters, targetFilters) {
                var _this = this;
                if (parentSpace) {
                    var where = parentSpace.where(), filtersToKeep = _.filter(where, function(w) {
                        var keepFilter = !0, condition = w.condition;
                        if ((0, sqExprStaticMembers.Hi)(condition) && 2 === _.size(condition.values)) {
                            var possibleReferenceFilter_1 = (0, sqExpr.Sh)(condition.args, [ condition.values[0] ]), possibleTargetFilter_1 = (0, 
                            sqExpr.Sh)(condition.args, [ condition.values[1] ]);
                            keepFilter = !(_.some(referenceFilters.where(), function(r) {
                                return _this.isFilterSubset(r.condition, possibleReferenceFilter_1, 0);
                            }) && _.some(targetFilters.where(), function(r) {
                                return _this.isFilterSubset(r.condition, possibleTargetFilter_1, 0);
                            }));
                        }
                        return keepFilter;
                    }), filterLength = _.size(filtersToKeep);
                    if (filterLength === _.size(where)) return parentSpace;
                    if (0 !== filterLength) return new semanticQuery_semanticQuery.yl(parentSpace.from(), filtersToKeep);
                }
            }, InsightsAnalysisService.prototype.isFilterSubset = function(expr1, expr2, valueIndex) {
                var _this = this;
                return (0, sqExprStaticMembers.Hi)(expr1) && _.every(expr2.args, function(c, i) {
                    return _.some(expr1.args, function(p, j) {
                        return (0, sqExprEqualityVisitor.fS)(c, p, !1, !0) && _this.areValuesEqual(expr2.values[valueIndex][i], expr1.values[valueIndex][j]);
                    });
                });
            }, InsightsAnalysisService.prototype.areValuesEqual = function(expr1, expr2) {
                return !(!expr1 || !expr2) && (_.isDate(expr1.value) && _.isDate(expr2.value) ? expr1.value.getTime() === expr2.value.getTime() : expr1.value === expr2.value);
            }, InsightsAnalysisService.prototype.getFilterFromSelector = function(selector) {
                return (0, contracts_selector.mV)([ (0, contracts_selector.tV)(selector) ]);
            }, InsightsAnalysisService.prototype.isSupported = function(input, schema) {
                if (input instanceof sqExpr.Il) return !insights_analysis_util.B.isUnsupported(input, schema);
                for (var _i = 0, wheres_1 = input.where(); _i < wheres_1.length; _i++) if (insights_analysis_util.B.isUnsupported(wheres_1[_i].condition, schema)) return !1;
                if (input instanceof semanticQuery_semanticQuery.vQ) for (var _a = 0, selects_2 = input.select(); _a < selects_2.length; _a++) if (insights_analysis_util.B.isUnsupported(selects_2[_a].expr, schema)) return !1;
                return !0;
            }, InsightsAnalysisService.prototype.isSimpleAdditiveMeasure = function(measure, schema) {
                if ((0, sqExprStaticMembers.iV)(measure)) return (0, sqExprStaticMembers.Lk)(measure.arg) ? 2 === measure.func : 0 === measure.func || 5 === measure.func;
                if ((0, sqExprStaticMembers.kb)(measure)) {
                    var conceptualProperty = measure.getConceptualProperty(schema);
                    debug.fF.assertValue(conceptualProperty.measure, "expression has to be a conceptual measure");
                    var aggregationKind = conceptualProperty.measure.distributiveAggregate;
                    if (null == aggregationKind || 0 !== aggregationKind && 1 !== aggregationKind) return !1;
                }
                return !0;
            }, InsightsAnalysisService.prototype.getMeasureExprForDecomposition = function(visualContainer, selectors) {
                var firstSelector = _.first(selectors);
                if (firstSelector && 1 === selectors.length && firstSelector.metadata && 1 === firstSelector.metadata.length) {
                    var visualQuery = (0, visualContainerUtils.Xf)(visualContainer), name = _.first(firstSelector.metadata);
                    return visualQuery.defn.select().withName(name).expr;
                }
            }, InsightsAnalysisService.prototype.analysisTypeMatches = function(analysisTypeToCheck, analysisTypeToMatch) {
                return void 0 === analysisTypeToCheck || analysisTypeToCheck === analysisTypeToMatch;
            }, InsightsAnalysisService.\u0275fac = function(t) {
                return new (t || InsightsAnalysisService)(core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](exploration_capabilities_service.U), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visual_plugin_operations_service.f), core["\u0275\u0275inject"](running_visual_service.s));
            }, InsightsAnalysisService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: InsightsAnalysisService,
                factory: InsightsAnalysisService.\u0275fac
            }), InsightsAnalysisService;
        }(), CategoricalSelectorContextVisitor = function() {
            function CategoricalSelectorContextVisitor(selector, schema, displayNameService, visualCapabilities) {
                this.schema = schema, this.displayNameService = displayNameService, this.visualCapabilities = visualCapabilities, 
                this.identities = selector.data, this.metadata = selector.metadata;
            }
            return CategoricalSelectorContextVisitor.prototype.visitCategoryColumns = function() {}, 
            CategoricalSelectorContextVisitor.prototype.visitValueColumnGroups = function() {}, 
            CategoricalSelectorContextVisitor.prototype.visitValueColumn = function(valueColumn) {
                return this.metadata === valueColumn.source.queryName;
            }, CategoricalSelectorContextVisitor.prototype.visitValue = function(value, selector, _valueColumnMetadata, categories, index) {
                var _this = this;
                if (!(0, dataViewQuery.ON)(this.identities, selector.data) && _.isNumber(value) && _.isFinite(value) && !_.isEmpty(categories)) {
                    var selectorsByColumnPrevious, isScalar = _.every(categories[0].identityFields, function(expr) {
                        return isScalarExpr(expr, _this.schema);
                    }), legendIdentity = _.filter(selector.data, function(d) {
                        return d.key !== categories[0].identity[index].key;
                    });
                    index > 0 && (selectorsByColumnPrevious = {
                        dataMap: {
                            category: [ categories[0].identity[index - 1] ]
                        },
                        metadata: [ selector.metadata ]
                    }, _.size(selector.data) > 1 && (selectorsByColumnPrevious.dataMap.series = legendIdentity));
                    var filter = (0, contracts_selector.mV)([ selector ]);
                    this.context = {
                        value,
                        index,
                        formattedCategoryValue: this.displayNameService.getFilterRestatement(filter, this.schema, this.visualCapabilities),
                        previousSelector: selectorsByColumnPrevious ? (0, contracts_selector.tV)(selectorsByColumnPrevious) : void 0,
                        isScalar,
                        filter,
                        categoryQueryName: categories[0].source.queryName,
                        legendFilter: legendIdentity && (0, dataViewScopeIdentity.SN)(legendIdentity)
                    };
                }
            }, CategoricalSelectorContextVisitor;
        }(), SQGroupRefToColumnRefRewriter = function(_super) {
            function SQGroupRefToColumnRefRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(SQGroupRefToColumnRefRewriter, _super), SQGroupRefToColumnRefRewriter.prototype.visitGroupRef = function(expr) {
                return new sqExpr.Wh(expr.source, expr.ref);
            }, SQGroupRefToColumnRefRewriter;
        }(sqExprRewriter.b), ColumnToVariationHierarchyLevelRewriter = function(_super) {
            function ColumnToVariationHierarchyLevelRewriter(variationTarget, variationSource, schema) {
                var _this = _super.call(this) || this;
                _this.variationTarget = variationTarget;
                var variationSourceColumn = variationSource;
                return (0, sqExprStaticMembers.jc)(variationSource) && (variationSourceColumn = (0, 
                sqExpr.Oh)(variationSource.arg, variationSource.property)), _this.hierarchyLevelExprs = (0, 
                arrayExtensions.rY)((0, sqHierarchyExprUtils1.wA)(schema, variationSourceColumn)), 
                _this.hierarchyTargetColumnRefs = _.map(_this.hierarchyLevelExprs, function(e) {
                    return e.getTargetColumnRef(schema);
                }), _this.variationSourceTargetEntity = variationSource.getTargetEntity(), _this;
            }
            return (0, tslib_es6.__extends)(ColumnToVariationHierarchyLevelRewriter, _super), 
            ColumnToVariationHierarchyLevelRewriter.prototype.visitColumnRef = function(expr) {
                if ((0, sqExprEqualityVisitor.fS)(expr.source, this.variationTarget)) {
                    var index = _.findIndex(this.hierarchyTargetColumnRefs, function(targetColumnRef) {
                        return (0, sqExprEqualityVisitor.fS)(targetColumnRef, expr);
                    });
                    return index >= 0 && index <= _.size(this.hierarchyLevelExprs) - 1 ? this.hierarchyLevelExprs[index] : expr;
                }
                return expr;
            }, ColumnToVariationHierarchyLevelRewriter.prototype.visitEntity = function(expr) {
                return (0, sqExprEqualityVisitor.fS)(expr, this.variationTarget) ? this.variationSourceTargetEntity : expr;
            }, ColumnToVariationHierarchyLevelRewriter;
        }(sqExprRewriter.b);
        function isScalarExpr(expr, schema) {
            var orderByColumns = expr.getOrderByColumns(schema), metadata = (1 === _.size(orderByColumns) ? orderByColumns[0] : expr).getMetadata(schema);
            return isScalarType(metadata && metadata.type);
        }
        function isScalarType(valueType) {
            return !!valueType && !!(valueType.dateTime || valueType.temporal || valueType.numeric || valueType.integer);
        }
        var insights_cache_service = __webpack_require__(31486), map = __webpack_require__(14172), take = __webpack_require__(48787), QuickExploreSupportabilityLazyProvider = {
            provide: "quickExploreSupportability",
            useFactory: function(featureSwitchService) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, new QuickExploreSupportabilityService(featureSwitchService) ];
                    });
                });
            },
            deps: [ feature_switch_service.vZ ]
        }, QuickExploreSupportabilityService = function() {
            function QuickExploreSupportabilityService(featureSwitchService) {
                this.featureSwitchService = featureSwitchService, this.isQuickExploreMultiTableEnabled$ = this.featureSwitchService.featureSwitches$.pipe((0, 
                map.U)(function(fs) {
                    return fs.quickExploreMultiTable;
                }));
            }
            return QuickExploreSupportabilityService.prototype.isQuickExploreSupported = function(model) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.isQuickExploreMultiTableEnabled$.pipe((0, take.q)(1)).toPromise() ];

                          case 1:
                            return [ 2, _a.sent() && !model.isHidden && !(1 & ~model.permissions) && model.insightsQuerySuggestionsSupported ];
                        }
                    });
                });
            }, QuickExploreSupportabilityService.\u0275fac = function(t) {
                return new (t || QuickExploreSupportabilityService)(core["\u0275\u0275inject"](feature_switch_service.vZ));
            }, QuickExploreSupportabilityService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: QuickExploreSupportabilityService,
                factory: QuickExploreSupportabilityService.\u0275fac
            }), QuickExploreSupportabilityService;
        }(), common = __webpack_require__(77476), InsightsModule = function() {
            function InsightsModule() {}
            return InsightsModule.\u0275fac = function(t) {
                return new (t || InsightsModule);
            }, InsightsModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: InsightsModule
            }), InsightsModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ InsightsAnalysisDefinitionBuilderServiceLazyProvider, InsightsAnalysisResultHandlerServiceLazyProvider, insights_cache_service.v, InsightsAnalysisServiceLazyProvider, InsightsDecompositionAnalysisResultHandlerService, QuickExploreSupportabilityLazyProvider ],
                imports: [ common.CommonModule ]
            }), InsightsModule;
        }();
    },
    31486: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            v: function() {
                return InsightsCacheService;
            }
        });
        var _powerbi_legacy_Explore_services_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8590), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50423), _powerbi_GlobalEventBridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(43025), InsightsCacheService = function() {
            function InsightsCacheService(globalEventBridge) {
                var _this = this;
                this.cache = [], this.globalSubscriptionManager = globalEventBridge.createChannelSubscriptionManager().subscribe(_powerbi_legacy_Explore_services_events__WEBPACK_IMPORTED_MODULE_0__.wW, function(_, dataSource) {
                    return _this.clear(dataSource.dsr.modelId);
                });
            }
            return InsightsCacheService.prototype.ngOnDestroy = function() {
                this.globalSubscriptionManager.unsubscribeAll();
            }, InsightsCacheService.prototype.set = function(request, resultPromise) {
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(request, "request"), 
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(resultPromise, "resultPromise");
                var key = createKey(request);
                _.find(this.cache, function(c) {
                    return c.key === key;
                }) && _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertFail("Cache entry already exists"), 
                _.size(this.cache) >= 50 && this.cache.splice(0, 1);
                var cacheEntry = {
                    key,
                    resultPromise,
                    insertTimestamp: new Date,
                    status: 1,
                    modelId: request.ModelId
                };
                this.cache.push(cacheEntry);
            }, InsightsCacheService.prototype.get = function(request, modelRefreshDate) {
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(request, "request"), 
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertAnyValue(modelRefreshDate, "modelRefreshDate");
                var removedEntry = this.delete(request);
                if (removedEntry && !(modelRefreshDate && removedEntry.insertTimestamp.getTime() <= modelRefreshDate.getTime())) return this.cache.push(removedEntry), 
                {
                    resultPromise: removedEntry.resultPromise,
                    status: removedEntry.status
                };
            }, InsightsCacheService.prototype.remove = function(request) {
                var removedEntry = this.delete(request);
                if (removedEntry) return {
                    resultPromise: removedEntry.resultPromise,
                    status: removedEntry.status
                };
            }, InsightsCacheService.prototype.updateStatus = function(request, status, ignoreMissingEntry) {
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(request, "request"), 
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(status, "status");
                var key = createKey(request), cacheEntry = _.find(this.cache, function(c) {
                    return c.key === key;
                });
                ignoreMissingEntry || _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(cacheEntry, "Entry does not exist in cache"), 
                cacheEntry && (cacheEntry.status = status);
            }, InsightsCacheService.prototype.clear = function(modelId) {
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertAnyValue(modelId, "modelId"), 
                null == modelId ? this.cache = [] : _.remove(this.cache, function(c) {
                    return c.modelId === modelId;
                });
            }, InsightsCacheService.prototype.delete = function(request) {
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(request, "request");
                var key = createKey(request), removedEntries = _.remove(this.cache, function(c) {
                    return c.key === key;
                }), removedSize = _.size(removedEntries);
                if (_powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return removedSize <= 1;
                }, "Cache had multiple entries with same key"), 0 !== removedSize) return removedEntries[0];
            }, InsightsCacheService.\u0275fac = function(t) {
                return new (t || InsightsCacheService)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["\u0275\u0275inject"](_powerbi_GlobalEventBridge__WEBPACK_IMPORTED_MODULE_3__.Z));
            }, InsightsCacheService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_2__["\u0275\u0275defineInjectable"]({
                token: InsightsCacheService,
                factory: InsightsCacheService.\u0275fac
            }), InsightsCacheService;
        }();
        function createKey(request) {
            return JSON.stringify(request);
        }
    }
} ]);