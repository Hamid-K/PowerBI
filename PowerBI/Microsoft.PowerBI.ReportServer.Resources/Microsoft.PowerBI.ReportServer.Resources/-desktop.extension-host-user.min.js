"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-user" ], {
    1424: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostUserModule: function() {
                return ExtensionHostUserModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), tslib_es6 = __webpack_require__(81337), combineLatest = __webpack_require__(59017), of = __webpack_require__(11547), map = __webpack_require__(14172), catchError = __webpack_require__(59822), take = __webpack_require__(48787), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), core = __webpack_require__(50423), UserProfileServiceInjectionToken = new core.InjectionToken("UserProfileService"), UserDirectoryHttpServiceInjectionToken = new core.InjectionToken("UserDirectorytHttpService"), user_info_service = __webpack_require__(79226), ExtensionHostUserEffects = function() {
            function ExtensionHostUserEffects(actions$, messageBroker, userProfileService, userDirectoryHttpService, userInfo) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.userProfileService = userProfileService, 
                this.userDirectoryHttpService = userDirectoryHttpService, this.userInfo = userInfo, 
                this.onGetUserProfileReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getUserProfile, function(_a) {
                    var shouldRunTenantAdminCheck = _a.shouldRunTenantAdminCheck;
                    return (0, combineLatest.aj)([ _this.userProfileService.acquireUserProfile(), shouldRunTenantAdminCheck ? _this.isTenantAdmin() : (0, 
                    of.of)(void 0) ]).pipe((0, map.U)(function(_a) {
                        var isTenantAdmin = _a[1];
                        return index_core.Vm.getUserProfile.resolve((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a[0]), {
                            isTenantAdmin
                        }));
                    }), (0, catchError.K)(function(error) {
                        return (0, of.of)(index_core.Vm.getUserProfile.reject({
                            error
                        }));
                    }));
                }), this.onFindUsersReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.findUsers, function(_a) {
                    return _this.userDirectoryHttpService.findUsers(_a.prefix, _a.objectType, 10, !0, !0).pipe((0, 
                    take.q)(1), (0, map.U)(function(result) {
                        return index_core.Vm.findUsers.resolve(result.data);
                    }), (0, catchError.K)(function(error) {
                        return (0, of.of)(index_core.Vm.findUsers.reject({
                            error: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, error), {
                                headers: void 0
                            })
                        }));
                    }));
                });
            }
            return ExtensionHostUserEffects.prototype.isTenantAdmin = function() {
                var _this = this;
                return this.userInfo.userMetadataPromise.then(function() {
                    return _this.userInfo.isTenantAdmin;
                });
            }, ExtensionHostUserEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostUserEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](UserProfileServiceInjectionToken), core["\u0275\u0275inject"](UserDirectoryHttpServiceInjectionToken), core["\u0275\u0275inject"](user_info_service.M));
            }, ExtensionHostUserEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostUserEffects,
                factory: ExtensionHostUserEffects.\u0275fac
            }), ExtensionHostUserEffects;
        }(), ExtensionHostUserModule = function() {
            function ExtensionHostUserModule() {}
            return ExtensionHostUserModule.\u0275fac = function(t) {
                return new (t || ExtensionHostUserModule);
            }, ExtensionHostUserModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostUserModule
            }), ExtensionHostUserModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostUserEffects ]) ]
            }), ExtensionHostUserModule;
        }();
    }
} ]);