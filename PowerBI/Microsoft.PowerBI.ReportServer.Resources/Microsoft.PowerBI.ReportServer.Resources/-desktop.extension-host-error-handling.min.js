"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-error-handling" ], {
    77753: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            GetIFrameByIdInjectionToken: function() {
                return GetIFrameByIdInjectionToken;
            },
            createExtensionHostErrorHandlingModule: function() {
                return createExtensionHostErrorHandlingModule;
            }
        });
        var common = __webpack_require__(77476), core = __webpack_require__(50423), ngrx_effects = __webpack_require__(60756), from = __webpack_require__(82762), of = __webpack_require__(11547), mergeMap = __webpack_require__(42195), map = __webpack_require__(14172), tap = __webpack_require__(17653), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), RequestFailureHandlerInjectionToken = new core.InjectionToken("RequestFailureHandler"), GetIFrameByIdInjectionToken = new core.InjectionToken("GetIFrameById"), telemetry_service = __webpack_require__(54323), TriErrorHandlingService = function() {
            return function() {};
        }(), ExtensionHostErrorHandlingEffects = function() {
            function ExtensionHostErrorHandlingEffects(actions$, messageBroker, telemetryService, errorService, requestFailureHandler, getIFrameById) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.telemetryService = telemetryService, 
                this.errorService = errorService, this.requestFailureHandler = requestFailureHandler, 
                this.getIFrameById = getIFrameById, this.onHandleRequestFailureReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.handleRequestFailure, function(action) {
                    return (0, from.D)(_this.getIFrameById(action.iframeId)).pipe((0, mergeMap.zg)(function(iframe) {
                        var status = action.status;
                        return status >= 400 && (_this.telemetryService.logEvent({
                            name: "handleRequestFailure",
                            properties: {
                                extensionName: null == iframe ? void 0 : iframe.extensionName,
                                status
                            }
                        }), _this.requestFailureHandler) ? _this.requestFailureHandler(action).pipe((0, 
                        map.U)(function(result) {
                            return index_core.Vm.handleRequestFailure.resolve(result);
                        })) : (0, of.of)(index_core.Vm.handleRequestFailure.resolve({
                            handled: !1
                        }));
                    }));
                }), this.onHandleInvalidRouteReceived$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.pR)(index_core.Vm.handleInvalidRoute), (0, 
                    tap.b)(function(_a) {
                        return _this.errorService.handleInvalidRoute({
                            routePath: _a.routePath,
                            invalidRouteErrorMessage: _a.invalidRouteErrorMessage
                        });
                    }));
                }, {
                    dispatch: !1
                }), this.onOpenErrorDialogReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.openError, function(action) {
                    return (0, from.D)(_this.getIFrameById(action.iframeId)).pipe((0, mergeMap.zg)(function(iframe) {
                        if (iframe) {
                            var errorKind = void 0;
                            switch (action.kind) {
                              case index_core.oS.Error:
                                errorKind = index_core.oS.Error;
                                break;

                              case index_core.oS.Fatal:
                                errorKind = index_core.oS.Fatal;
                                break;

                              case index_core.oS.Warning:
                                errorKind = index_core.oS.Warning;
                                break;

                              case index_core.oS.Custom:
                                errorKind = index_core.oS.Custom;
                                break;

                              default:
                                errorKind = index_core.oS.Error;
                            }
                            var asyncId = action.asyncId, iframeId = action.iframeId, errorOptions = action.errorOptions, featureName = action.featureName, extensionName = iframe.extensionName, initBy = iframe.initBy, initState = iframe.initState;
                            if ("preload" !== initBy || "initialized" === initState) return _this.errorService.openError({
                                errorMsg: action.errorMsg,
                                errorOptions: action.errorOptions
                            }).afterClosed().pipe((0, map.U)(function(buttonName) {
                                return index_core.Vm.openError.resolve({
                                    value: buttonName
                                });
                            }));
                            _this.telemetryService.logEvent({
                                name: "ErrorTrace",
                                properties: {
                                    errorMessage: action.errorMsg,
                                    kind: errorKind,
                                    featureName: featureName || "",
                                    errorOptions: (null == errorOptions ? void 0 : errorOptions.title) || "",
                                    asyncId,
                                    iframeId,
                                    extensionName: null != extensionName ? extensionName : "",
                                    initBy: null != initBy ? initBy : "",
                                    initState: null != initState ? initState : ""
                                }
                            });
                        }
                        return (0, of.of)(index_core.Vm.openError.resolve({
                            value: ""
                        }));
                    }));
                }), this.onOpenErrorDialogWithErrorTypeReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.openErrorWithErrorType, function(action) {
                    return (0, from.D)(_this.errorService.openErrorWithErrorType(action)).pipe((0, mergeMap.zg)(function(ref) {
                        return ref ? ref.afterClosed().pipe((0, map.U)(function() {
                            return index_core.Vm.openErrorWithErrorType.resolve({});
                        })) : (0, of.of)(index_core.Vm.openErrorWithErrorType.reject());
                    }));
                });
            }
            return ExtensionHostErrorHandlingEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostErrorHandlingEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](telemetry_service.t), core["\u0275\u0275inject"](TriErrorHandlingService), core["\u0275\u0275inject"](RequestFailureHandlerInjectionToken), core["\u0275\u0275inject"](GetIFrameByIdInjectionToken));
            }, ExtensionHostErrorHandlingEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostErrorHandlingEffects,
                factory: ExtensionHostErrorHandlingEffects.\u0275fac
            }), ExtensionHostErrorHandlingEffects;
        }();
        function createExtensionHostErrorHandlingModule(config, parent) {
            return (0, core.createNgModule)(ExtensionHostErrorHandlingModule, core.Injector.create({
                providers: [ {
                    provide: GetIFrameByIdInjectionToken,
                    useValue: config.getIFrameById
                } ],
                parent
            }));
        }
        var ExtensionHostErrorHandlingModule = function() {
            function ExtensionHostErrorHandlingModule() {}
            return ExtensionHostErrorHandlingModule.\u0275fac = function(t) {
                return new (t || ExtensionHostErrorHandlingModule);
            }, ExtensionHostErrorHandlingModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostErrorHandlingModule
            }), ExtensionHostErrorHandlingModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostErrorHandlingEffects ]) ]
            }), ExtensionHostErrorHandlingModule;
        }();
    }
} ]);