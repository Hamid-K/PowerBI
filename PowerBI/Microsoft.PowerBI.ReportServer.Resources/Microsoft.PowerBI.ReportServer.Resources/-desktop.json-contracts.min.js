"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "json-contracts" ], {
    72138: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            JsonContractsModule: function() {
                return JsonContractsModule;
            }
        });
        var JsonConstants, core = __webpack_require__(50423);
        !function(JsonConstants) {
            JsonConstants.NotIn = "NotIn", JsonConstants.SelectAll = "All", JsonConstants.operatorDictionary = {
                None: 0,
                LessThan: 1,
                LessThanOrEqual: 2,
                GreaterThan: 3,
                GreaterThanOrEqual: 4,
                Contains: 5,
                DoesNotContain: 6,
                StartsWith: 7,
                DoesNotStartWith: 8,
                Is: 9,
                IsNot: 10,
                IsBlank: 11,
                IsNotBlank: 12,
                IsEmptyString: 13,
                IsNotEmptyString: 14
            }, JsonConstants.logicalOperatorDictionary = {
                Or: 1,
                And: 0
            }, function(ErrorCodes) {
                ErrorCodes.InvalidDataType = "InvalidDataType", ErrorCodes.FieldNotFound = "FieldNotFound", 
                ErrorCodes.FilterConditionNotFound = "FilterConditionNotFound";
            }(JsonConstants.ErrorCodes || (JsonConstants.ErrorCodes = {})), function(ErrorMessages) {
                ErrorMessages.InvalidTarget = "Could not serialize json filter target to SQ expression.", 
                ErrorMessages.InvalidDataTypeMessage = "The data type of the value {0} is not supported. Only string, number and boolean are supported.", 
                ErrorMessages.InvalidCondition = "Advanced filter requires a filter condition (None | LessThan | LessThanOrEqual | GreaterThan | GreaterThanOrEqual | Contains | DoesNotContain | StartsWith | DoesNotStartWith | Is | IsNot | IsBlank | IsNotBlank).";
            }(JsonConstants.ErrorMessages || (JsonConstants.ErrorMessages = {}));
        }(JsonConstants || (JsonConstants = {}));
        var JsonFilterBuilder, ErrorCodes = function() {
            function ErrorCodes() {}
            return ErrorCodes.InvalidDataType = "InvalidDataType", ErrorCodes.FieldNotFound = "FieldNotFound", 
            ErrorCodes.FilterConditionNotFound = "FilterConditionNotFound", ErrorCodes.FilterValidationErrors = "FilterValidationErrors", 
            ErrorCodes.LogicalConditionNotFound = "LogicalConditionNotFound", ErrorCodes.BasicFilterSerializationError = "BasicFilterSerializationError", 
            ErrorCodes.TupleFilterSerializationError = "TupleFilterSerializationError", ErrorCodes.AdvancedFilterSerializationError = "AdvancedFilterSerializationError", 
            ErrorCodes.InvalidFilterType = "InvalidFilterType", ErrorCodes.InvalidFilterCondition = "InvalidFilterCondition", 
            ErrorCodes.FilterNotFound = "FilterNotFound", ErrorCodes.TargetNotFound = "TargetNotFound", 
            ErrorCodes.BasicFilterOperatorNotFound = "BasicFilterOperatorNotFound", ErrorCodes.InvalidReportData = "InvalidReportData", 
            ErrorCodes.InvalidPageData = "InvalidPageData", ErrorCodes;
        }(), ErrorMessages = function() {
            function ErrorMessages() {}
            return ErrorMessages.InvalidFilterMessage = "Filter is not valid, validation errors: ", 
            ErrorMessages.InvalidTarget = "Could not serialize json filter target to SQ expression.", 
            ErrorMessages.InvalidCondition = "Advanced filter requires a filter condition (None | LessThan | LessThanOrEqual | GreaterThan | GreaterThanOrEqual | Contains | DoesNotContain | StartsWith | DoesNotStartWith | Is | IsNot | IsBlank | IsNotBlank).", 
            ErrorMessages.InvalidDataTypeMessage = "The data type of the value {0} is not supported. Only string, number and boolean are supported.", 
            ErrorMessages.FilterSerializationError = "Could not serialize filter.", ErrorMessages.InvalidFilterTypeMessage = "Not supported filter type - can't serialize to json syntax.", 
            ErrorMessages.SemanticFilterInvalidCondition = "Filter with invalid condition - can't serialize to json syntax.", 
            ErrorMessages.FilterNotFoundMessage = "Invoked filter serialization function with no filter.", 
            ErrorMessages.TargetNotFoundMessage = "Invoked filter serialization function with no target.", 
            ErrorMessages.FieldNotFoundMessage = "Invoked filter serialization function on a table that has no column/measure/hierarchy.", 
            ErrorMessages.BasicFilterOperatorNotFoundMessage = "Basic filter requires an operator (In | Not).", 
            ErrorMessages.FilterValuesNotFound = " Could not retrieve filter values.", ErrorMessages.InvalidReportDataMessage = "Could not find the report.", 
            ErrorMessages.InvalidPageDataMessage = "Could not find the active page.", ErrorMessages.DataPointSerializationError = "Could not serialize a data point.", 
            ErrorMessages.TupleFilterSerializationError = "Could not serialize Tuple filter.", 
            ErrorMessages;
        }(), powerbi_models = __webpack_require__(56745), contracts_filterContainer = __webpack_require__(40290), advancedFilterUtils = __webpack_require__(98238), filterUtils = __webpack_require__(42614), conditionToSQLConverter = __webpack_require__(94176), JsCommon_Date = __webpack_require__(69615), Utility = __webpack_require__(38078), semanticQuery = __webpack_require__(95462), sqExprUtils = __webpack_require__(45334), tslib_es6 = __webpack_require__(81337), telemetryHelpers = __webpack_require__(41114), JSONFilterUnsupportedFilterType = telemetryHelpers.cx["PBI.JSONFilter.UnsupportedFilterType"] = (0, 
        telemetryHelpers.b1)("PBI.JSONFilter.UnsupportedFilterType"), trace = __webpack_require__(12913), formatUtil = __webpack_require__(59694), JsonFilterParserErrors = function() {
            function JsonFilterParserErrors() {}
            return JsonFilterParserErrors.traceError = function(e) {
                trace.f.error("Throwing exception: ".concat(JSON.stringify(e)), null == e.Stack);
            }, JsonFilterParserErrors.fieldNotFound = function(target) {
                return {
                    name: ErrorCodes.FieldNotFound,
                    message: ErrorMessages.InvalidTarget + (target ? "Target table: " + target.table : "")
                };
            }, JsonFilterParserErrors.filterValidationErrors = function(errors) {
                var consolidatedErrors = errors.map(function(error) {
                    return error.message;
                }).join(", ");
                return {
                    name: ErrorCodes.FilterValidationErrors,
                    message: ErrorMessages.InvalidFilterMessage + consolidatedErrors
                };
            }, JsonFilterParserErrors.invalidDataType = function(value) {
                return {
                    name: ErrorCodes.InvalidDataType,
                    message: (0, formatUtil.W)(ErrorMessages.InvalidDataTypeMessage, value)
                };
            }, JsonFilterParserErrors.filterConditionNotFound = function() {
                return {
                    name: ErrorCodes.FilterConditionNotFound,
                    message: ErrorMessages.InvalidCondition
                };
            }, JsonFilterParserErrors.basicFilterSerializationError = function(message) {
                return {
                    name: ErrorCodes.BasicFilterSerializationError,
                    message: ErrorMessages.FilterSerializationError + message
                };
            }, JsonFilterParserErrors.advancedFilterSerializationError = function() {
                return {
                    name: ErrorCodes.AdvancedFilterSerializationError,
                    message: ErrorMessages.FilterSerializationError
                };
            }, JsonFilterParserErrors.tupleFilterSerializationError = function(message) {
                return {
                    name: ErrorCodes.BasicFilterSerializationError,
                    message: ErrorMessages.TupleFilterSerializationError + message
                };
            }, JsonFilterParserErrors.invalidFilterType = function() {
                return {
                    name: ErrorCodes.InvalidFilterType,
                    message: ErrorMessages.InvalidFilterTypeMessage
                };
            }, JsonFilterParserErrors.invalidFilterCondition = function() {
                return {
                    name: ErrorCodes.InvalidFilterCondition,
                    message: ErrorMessages.SemanticFilterInvalidCondition
                };
            }, JsonFilterParserErrors.filterNotFound = function() {
                return {
                    name: ErrorCodes.FilterNotFound,
                    message: ErrorMessages.FilterNotFoundMessage
                };
            }, JsonFilterParserErrors.targetNotFound = function() {
                return {
                    name: ErrorCodes.TargetNotFound,
                    message: ErrorMessages.TargetNotFoundMessage
                };
            }, JsonFilterParserErrors.fieldExpressionNotFound = function() {
                return {
                    name: ErrorCodes.FieldNotFound,
                    message: ErrorMessages.FieldNotFoundMessage
                };
            }, JsonFilterParserErrors.basicFilterOperatorNotFound = function() {
                return {
                    name: ErrorCodes.BasicFilterOperatorNotFound,
                    message: ErrorMessages.BasicFilterOperatorNotFoundMessage
                };
            }, JsonFilterParserErrors.invalidReportData = function() {
                return {
                    name: ErrorCodes.InvalidReportData,
                    message: ErrorMessages.InvalidReportDataMessage
                };
            }, JsonFilterParserErrors.invalidPageData = function() {
                return {
                    name: ErrorCodes.InvalidPageData,
                    message: ErrorMessages.InvalidPageDataMessage
                };
            }, JsonFilterParserErrors;
        }(), filterUtilsHelper = __webpack_require__(88495), filterViewModelFactory = __webpack_require__(83186), filterCardConverter = __webpack_require__(37532), arrayExtensions = __webpack_require__(50550), debug = __webpack_require__(62458), query = __webpack_require__(19008), dataViewObjectDefinition1 = __webpack_require__(5265), relativeDateRange = __webpack_require__(90031), fieldExprPatternToSQExprConverter = __webpack_require__(80366), filterScopeIdsCollector = __webpack_require__(1629), relativeDateFilterPattern = __webpack_require__(38703), scopeIdentityExtractor = __webpack_require__(26743), topNFilterPattern = __webpack_require__(95778), semanticQuery_sqExpr = __webpack_require__(94419), sqExprStaticMembers = __webpack_require__(74082), sqExprEqualityVisitor = __webpack_require__(45413), sqExprVisitor = __webpack_require__(75074);
        !function(JsonFilterBuilder) {
            function getTarget(expr, schema) {
                var visitor = new SemanticFilterFieldVisitor(schema), serializedTarget = expr.accept(visitor);
                return expr.hasGroupOnKeys(schema) && (serializedTarget.keys = function(expr, visitor, schema) {
                    var keyColumns = expr.getKeyColumns(schema), keys = [];
                    return keyColumns && (keys = keyColumns.map(function(columnExpr) {
                        return columnExpr.accept(visitor).column;
                    })), keys;
                }(expr, visitor, schema)), serializedTarget;
            }
            function updateFilterDisplaySettings(filter, filterContainer) {
                if (filter && filterContainer) {
                    var displaySettings = {};
                    void 0 !== filterContainer.isLockedInViewMode && (displaySettings.isLockedInViewMode = filterContainer.isLockedInViewMode), 
                    void 0 !== filterContainer.isHiddenInViewMode && (displaySettings.isHiddenInViewMode = filterContainer.isHiddenInViewMode), 
                    void 0 !== filterContainer.displayName && (displaySettings.displayName = filterContainer.displayName), 
                    _.isEmpty(displaySettings) || (filter.displaySettings = displaySettings);
                }
            }
            JsonFilterBuilder.fromSemanticFilter = function(contract, schema, filter, powerbiModels, telemetryService, localizationService, featureSwitchService) {
                var jsonFilter;
                if (filter && (!filter.conditions() || _.isEmpty(filter.conditions()) || filter.conditions().length > 1) && Utility.b$.throwException(JsonFilterParserErrors.invalidFilterCondition()), 
                function(contract) {
                    return contract.type === contracts_filterContainer.vA.TopN || contract.type === contracts_filterContainer.vA.Exclude || contract.type === contracts_filterContainer.vA.Include || contract.type === contracts_filterContainer.vA.RelativeDate || contract.type === contracts_filterContainer.vA.RelativeTime || contract.type === contracts_filterContainer.vA.Categorical || contract.type === contracts_filterContainer.vA.Visual || contract.type === contracts_filterContainer.vA.Advanced || contract.type === contracts_filterContainer.vA.Tuple || !contract.type;
                }(contract)) if (contract.type === contracts_filterContainer.vA.TopN) jsonFilter = TopNFilterSerializerHelper.serializeFilter(filter, schema, powerbiModels, contract); else if (contract.type === contracts_filterContainer.vA.RelativeTime || contract.type === contracts_filterContainer.vA.RelativeDate) jsonFilter = RelativeDateTimeFilterSerializerHelper.serializeFilter(filter, schema, powerbiModels, contract); else if (contract.type === contracts_filterContainer.vA.Exclude || contract.type === contracts_filterContainer.vA.Include) jsonFilter = IncludeExcludeFilterSerializerHelper.serializeFilter(filter, schema, powerbiModels, contract, featureSwitchService); else if (contract.type === contracts_filterContainer.vA.Tuple) jsonFilter = TupleFilterSerializerHelper.serializeFilter(filter, schema, powerbiModels, contract); else if (contract.type === contracts_filterContainer.vA.Advanced) {
                    var advancedFilterCard = void 0;
                    if (filter) {
                        var condition = filter.conditions()[0];
                        advancedFilterCard = AdvancedFilterSerializerHelper.getAdvancedFilterExpression(condition, localizationService);
                    } else advancedFilterCard = (0, filterViewModelFactory.l7)(contract, localizationService);
                    advancedFilterCard || Utility.b$.throwException(JsonFilterParserErrors.advancedFilterSerializationError()), 
                    jsonFilter = AdvancedFilterSerializerHelper.serializeFilter(advancedFilterCard, schema, powerbiModels, contract);
                } else {
                    var fieldExpr = contract.expression;
                    advancedFilterCard = void 0, filter && (condition = filter.conditions()[0], advancedFilterCard = AdvancedFilterSerializerHelper.getAdvancedFilterExpression(condition, localizationService));
                    var filterType = contract.type;
                    null == filterType && (fieldExpr || Utility.b$.throwException(JsonFilterParserErrors.fieldExpressionNotFound()), 
                    filterType = (0, filterUtilsHelper.NV)(fieldExpr, schema, contract.howCreated, advancedFilterCard ? advancedFilterCard.field : null)), 
                    advancedFilterCard && filterType === contracts_filterContainer.vA.Advanced ? jsonFilter = AdvancedFilterSerializerHelper.serializeFilter(advancedFilterCard, schema, powerbiModels, contract) : (fieldExpr || Utility.b$.throwException(JsonFilterParserErrors.fieldExpressionNotFound()), 
                    jsonFilter = BasicFilterSerializerHelper.serializeFilter(filter, contract, schema, powerbiModels, contract));
                } else telemetryService.logEvent(JSONFilterUnsupportedFilterType, {
                    filterType: contracts_filterContainer.vA[contract.type]
                }), jsonFilter = new powerbiModels.NotSupportedFilter(null, ErrorMessages.InvalidFilterTypeMessage, contracts_filterContainer.vA[contract.type]).toJSON();
                return jsonFilter;
            }, JsonFilterBuilder.getTarget = getTarget;
            var TopNFilterSerializerHelper = function() {
                function TopNFilterSerializerHelper() {}
                return TopNFilterSerializerHelper.serializeFilter = function(filter, schema, powerbiModels, filterContainer) {
                    filter || Utility.b$.throwException(JsonFilterParserErrors.filterNotFound());
                    var filterParams = (0, topNFilterPattern.J_)(filter), serializedFilter = new powerbiModels.TopNFilter(getTarget(filterParams.fieldBeingFiltered, schema), filterParams.isTop ? "Top" : "Bottom", filterParams.itemCount, getTarget(filterParams.orderByField, schema));
                    return updateFilterDisplaySettings(serializedFilter, filterContainer), serializedFilter.toJSON();
                }, TopNFilterSerializerHelper;
            }(), IncludeExcludeFilterSerializerHelper = function() {
                function IncludeExcludeFilterSerializerHelper() {}
                return IncludeExcludeFilterSerializerHelper.serializeFilter = function(filter, schema, powerbiModels, filterContainer, featureSwitchService) {
                    var _a;
                    filter && !_.isEmpty(filter.conditions()) || Utility.b$.throwException(JsonFilterParserErrors.filterNotFound());
                    var serializedFilter, inExprMergeVisitor = new SemanticFilterConditionVisitor, exprAndValuesArray = filter.conditions()[0].accept(inExprMergeVisitor);
                    if ((null === (_a = null == featureSwitchService ? void 0 : featureSwitchService.featureSwitches) || void 0 === _a ? void 0 : _a.embedGetIncludeExcludeMultiTargetsFilter) && (!exprAndValuesArray || exprAndValuesArray.length > 1)) {
                        for (var dataPoints = [], targets = [], values = [], isExclude = void 0, _i = 0, filtersList_1 = filter ? filter.where() : []; _i < filtersList_1.length; _i++) {
                            var expr = filtersList_1[_i].condition, visitor = new EmbedIncludeExcludeSQExprVisitor(schema, filterContainer.filterExpressionMetadata);
                            expr.accept(visitor), dataPoints.push.apply(dataPoints, visitor.dataPoints || []), 
                            isExclude = visitor.isExclude;
                        }
                        for (var lastPointTargets = void 0, _b = 0, dataPoints_1 = dataPoints; _b < dataPoints_1.length; _b++) {
                            var point = dataPoints_1[_b], pointValues = point.values.map(function(valueExpr) {
                                return valueExpr.keyValues ? {
                                    value: valueExpr.value,
                                    keyValues: valueExpr.keyValues.map(function(keyValue) {
                                        return keyValue.value;
                                    })
                                } : {
                                    value: valueExpr.value
                                };
                            });
                            if (lastPointTargets && sqExprUtils.m.sequenceEqual(point.columns, lastPointTargets)) values[values.length - 1].push(pointValues); else {
                                var pointTargets = point.columns.map(function(columnExpr) {
                                    return getTarget(columnExpr, schema);
                                });
                                targets.push(pointTargets), values.push([ pointValues ]);
                            }
                            lastPointTargets = point.columns;
                        }
                        serializedFilter = new powerbiModels.IncludeExcludeFilter(targets, isExclude || !1, values);
                    } else isExclude = exprAndValuesArray[0].isNot, serializedFilter = new powerbiModels.IncludeExcludeFilter(getTarget(expr = exprAndValuesArray[0].fieldExpr, schema), isExclude || !1, BasicFilterSerializerHelper.getValuesFromSQExpr(expr, schema, filter).displayedValues);
                    return updateFilterDisplaySettings(serializedFilter, filterContainer), serializedFilter.toJSON();
                }, IncludeExcludeFilterSerializerHelper;
            }(), RelativeDateTimeFilterSerializerHelper = function() {
                function RelativeDateTimeFilterSerializerHelper() {}
                return RelativeDateTimeFilterSerializerHelper.serializeFilter = function(filter, schema, powerbiModels, filterContainer) {
                    var filterParams = (0, relativeDateFilterPattern.pi)(filter, filterContainer.type === contracts_filterContainer.vA.RelativeDate ? relativeDateRange.wj.Date : relativeDateRange.wj.Time), target = getTarget(filterParams ? filterParams.field : filterContainer.expression, schema);
                    target || Utility.b$.throwException(JsonFilterParserErrors.targetNotFound());
                    var serializedFilter, options = filterParams && filterParams.options;
                    return filterContainer.type === contracts_filterContainer.vA.RelativeDate ? serializedFilter = RelativeDateTimeFilterSerializerHelper.CreateRelativeDateFilter(target, options, powerbiModels) : filterContainer.type === contracts_filterContainer.vA.RelativeTime ? serializedFilter = RelativeDateTimeFilterSerializerHelper.CreateRelativeTimeFilter(target, options, powerbiModels) : debug.fF.assertFail("invalid relative filter type: ".concat(filterContainer.type)), 
                    updateFilterDisplaySettings(serializedFilter, filterContainer), serializedFilter.toJSON();
                }, RelativeDateTimeFilterSerializerHelper.getRelativeDateFilterOperator = function(options, powerbiModels) {
                    var relativeQualifier = options && options.relativeQualifier;
                    switch (relativeQualifier) {
                      case relativeDateRange.KO.Current:
                        return powerbiModels.RelativeDateOperators.InThis;

                      case relativeDateRange.KO.Next:
                        return powerbiModels.RelativeDateOperators.InNext;

                      case relativeDateRange.KO.Last:
                      case void 0:
                        return powerbiModels.RelativeDateOperators.InLast;

                      default:
                        debug.fF.assertNever(relativeQualifier);
                    }
                }, RelativeDateTimeFilterSerializerHelper.getRelativeDateFilterTimeUnit = function(options, powerbiModels) {
                    if (!options) return powerbiModels.RelativeDateFilterTimeUnit.Days;
                    switch (options.relativeUnit) {
                      case relativeDateRange.hU.Minute:
                        return powerbiModels.RelativeDateFilterTimeUnit.Minutes;

                      case relativeDateRange.hU.Hour:
                        return powerbiModels.RelativeDateFilterTimeUnit.Hours;

                      case relativeDateRange.hU.Day:
                        return powerbiModels.RelativeDateFilterTimeUnit.Days;

                      case relativeDateRange.hU.Week:
                        return powerbiModels.RelativeDateFilterTimeUnit.Weeks;

                      case relativeDateRange.hU.CalendarWeek:
                        return powerbiModels.RelativeDateFilterTimeUnit.CalendarWeeks;

                      case relativeDateRange.hU.Month:
                        return powerbiModels.RelativeDateFilterTimeUnit.Months;

                      case relativeDateRange.hU.CalendarMonth:
                        return powerbiModels.RelativeDateFilterTimeUnit.CalendarMonths;

                      case relativeDateRange.hU.Year:
                        return powerbiModels.RelativeDateFilterTimeUnit.Years;

                      case relativeDateRange.hU.CalendarYear:
                        return powerbiModels.RelativeDateFilterTimeUnit.CalendarYears;

                      default:
                        debug.fF.assertFail("Unsupported relative date unit: ".concat(options.relativeUnit));
                    }
                }, RelativeDateTimeFilterSerializerHelper.getRelativeTimeFilterTimeUnit = function(options, powerbiModels) {
                    if (!options) return powerbiModels.RelativeDateFilterTimeUnit.Hours;
                    switch (options.relativeUnit) {
                      case relativeDateRange.hU.Minute:
                        return powerbiModels.RelativeDateFilterTimeUnit.Minutes;

                      case relativeDateRange.hU.Hour:
                        return powerbiModels.RelativeDateFilterTimeUnit.Hours;

                      default:
                        debug.fF.assertFail("Unsupported relative time unit: ".concat(options.relativeUnit));
                    }
                }, RelativeDateTimeFilterSerializerHelper.CreateRelativeDateFilter = function(target, options, powerbiModels) {
                    return new powerbiModels.RelativeDateFilter(target, RelativeDateTimeFilterSerializerHelper.getRelativeDateFilterOperator(options, powerbiModels), options && options.duration, RelativeDateTimeFilterSerializerHelper.getRelativeDateFilterTimeUnit(options, powerbiModels), !(options && !options.includeToday));
                }, RelativeDateTimeFilterSerializerHelper.CreateRelativeTimeFilter = function(target, options, powerbiModels) {
                    return new powerbiModels.RelativeTimeFilter(target, RelativeDateTimeFilterSerializerHelper.getRelativeDateFilterOperator(options, powerbiModels), options && options.duration, RelativeDateTimeFilterSerializerHelper.getRelativeTimeFilterTimeUnit(options, powerbiModels));
                }, RelativeDateTimeFilterSerializerHelper;
            }(), BasicFilterSerializerHelper = function() {
                function BasicFilterSerializerHelper() {}
                return BasicFilterSerializerHelper.serializeFilter = function(filter, contract, schema, powerbiModels, filterContainer) {
                    var basicFilter, serializedTarget = getTarget(contract.expression, schema), serializedOperator = filter ? BasicFilterSerializerHelper.getOperator(schema, filter, contract.expression) : "All", serializedValues = BasicFilterSerializerHelper.getValuesFromSQExpr(contract.expression, schema, filter, contract.cachedValueItems);
                    return (basicFilter = serializedValues.keyValues && serializedValues.keyValues.length > 0 ? new powerbiModels.BasicFilterWithKeys(serializedTarget, serializedOperator, serializedValues.displayedValues, serializedValues.keyValues) : new powerbiModels.BasicFilter(serializedTarget, serializedOperator, serializedValues.displayedValues)) || Utility.b$.throwException(JsonFilterParserErrors.basicFilterSerializationError()), 
                    updateFilterDisplaySettings(basicFilter, filterContainer), basicFilter.requireSingleSelection = BasicFilterSerializerHelper.requireSingleSelection(filterContainer), 
                    basicFilter.toJSON();
                }, BasicFilterSerializerHelper.requireSingleSelection = function(filterContainer) {
                    if (debug.fF.assertValue(filterContainer, "filterContainer"), !filterContainer.objects) return !1;
                    var expr = (0, dataViewObjectDefinition1.NA)(filterContainer.objects, {
                        objectName: "general",
                        propertyName: "requireSingleSelect"
                    }, void 0);
                    return !(!expr || !expr.value) && semanticQuery_sqExpr.jz.getBooleanValue(expr);
                }, BasicFilterSerializerHelper.getValuesFromSQExpr = function(fieldExpr, schema, filter, cachedValueItems) {
                    var selectedScopeIds, valuesForFilter = {
                        displayedValues: [],
                        keyValues: []
                    };
                    if (!filter) return valuesForFilter;
                    var scopeIdsContainer = BasicFilterSerializerHelper.getSelectedScopeIdsContainerFromFilter(schema, filter, fieldExpr);
                    scopeIdsContainer && (selectedScopeIds = _.isEmpty(scopeIdsContainer.scopeIds) ? [] : scopeIdsContainer.scopeIds[0]), 
                    _.isEmpty(selectedScopeIds) && Utility.b$.throwException(JsonFilterParserErrors.basicFilterSerializationError(ErrorMessages.FilterValuesNotFound));
                    for (var _i = 0, selectedScopeIds_1 = selectedScopeIds; _i < selectedScopeIds_1.length; _i++) {
                        var scopeId = selectedScopeIds_1[_i];
                        if (fieldExpr.hasGroupOnKeys(schema)) {
                            var valuesForAllKeys = (0, filterScopeIdsCollector.F8)(scopeId).map(function(valueAndColumn) {
                                return BasicFilterSerializerHelper.convertValue(valueAndColumn.value);
                            });
                            valuesForFilter.keyValues.push(valuesForAllKeys), _.isEmpty(cachedValueItems) || cachedValueItems.length !== selectedScopeIds.length ? Utility.b$.throwException(JsonFilterParserErrors.basicFilterSerializationError(ErrorMessages.FilterValuesNotFound)) : valuesForFilter.displayedValues = cachedValueItems.map(function(value) {
                                return BasicFilterSerializerHelper.getLabelForGOK(value);
                            });
                        } else {
                            var value = (0, filterScopeIdsCollector.Xz)(scopeId);
                            valuesForFilter.displayedValues.push(BasicFilterSerializerHelper.convertValue(value));
                        }
                    }
                    return valuesForFilter;
                }, BasicFilterSerializerHelper.getOperator = function(schema, filter, fieldExpr) {
                    var scopeIdsContainer = BasicFilterSerializerHelper.getSelectedScopeIdsContainerFromFilter(schema, filter, fieldExpr);
                    if (scopeIdsContainer) return scopeIdsContainer.isNot ? "NotIn" : "In";
                    Utility.b$.throwException(JsonFilterParserErrors.basicFilterOperatorNotFound());
                }, BasicFilterSerializerHelper.getSelectedScopeIdsContainerFromFilter = function(schema, filter, fieldExpr) {
                    var columnExprs = fieldExpr.getKeyColumns(schema);
                    return columnExprs || Utility.b$.throwException(JsonFilterParserErrors.fieldExpressionNotFound()), 
                    (0, filterScopeIdsCollector.Qq)(filter, [ columnExprs ]);
                }, BasicFilterSerializerHelper.convertValue = function(value) {
                    return _.isDate(value) ? value.toISOString() : value;
                }, BasicFilterSerializerHelper.getLabelForGOK = function(value) {
                    return null === value ? null : "string" == typeof value ? value : value && value.displayName ? value.displayName : void Utility.b$.throwException(JsonFilterParserErrors.invalidDataType("Unrecognized type of value: " + value));
                }, BasicFilterSerializerHelper;
            }(), TupleFilterSerializerHelper = function() {
                function TupleFilterSerializerHelper() {}
                return TupleFilterSerializerHelper.serializeFilter = function(semanticFilter, schema, powerbiModels, filterContainer) {
                    if (!semanticFilter) return null;
                    var tupleFilter, args, values, where = semanticFilter.where(), condition = where && where[0] && where[0].condition;
                    if (!((0, sqExprStaticMembers.Hi)(condition) && condition.values && condition.args && condition.args.length > 0)) return null;
                    args = condition.args, values = condition.values;
                    var firstTupleCacheEntry, fem = filterContainer.filterExpressionMetadata, hasCache = fem && !_.isEmpty(fem.cachedValueItems);
                    if (hasCache && (firstTupleCacheEntry = filterUtils.l.findIdentityMapInFilterCache(args, values[0], fem)), 
                    hasCache && firstTupleCacheEntry) {
                        for (var target = [], keyIdxToOrigIdxMap = [], _loop_1 = function(identityIdx) {
                            var identity = firstTupleCacheEntry.identities[identityIdx], extractor = new scopeIdentityExtractor.aL;
                            identity.expr.accept(extractor);
                            var origColumnRef = fem.expressions[identityIdx], origTable = origColumnRef.getTargetEntity().entity, origColumn = origColumnRef.ref;
                            if (1 === extractor.keys.length && origColumn === extractor.keys[0].ref) {
                                var columnTarget = {
                                    table: origTable,
                                    column: origColumn
                                };
                                keyIdxToOrigIdxMap.push(identityIdx), target.push(columnTarget);
                            } else {
                                columnTarget = {
                                    table: origTable,
                                    column: origColumn,
                                    keys: []
                                };
                                for (var _loop_3 = function(key) {
                                    var keyColumnRef = key, keyTable = keyColumnRef.getTargetEntity().entity, keyColumn = keyColumnRef.ref;
                                    debug.fF.assert(function() {
                                        return keyTable === origTable;
                                    }, "Key column and original column belong to distinct tables"), columnTarget.keys.push(keyColumn), 
                                    keyIdxToOrigIdxMap.push(identityIdx);
                                }, _a = 0, _b = extractor.keys; _a < _b.length; _a++) _loop_3(_b[_a]);
                                target.push(columnTarget);
                            }
                        }, identityIdx = 0; identityIdx < firstTupleCacheEntry.identities.length; identityIdx++) _loop_1(identityIdx);
                        for (var jsonTuples = [], _loop_2 = function(tuple) {
                            var tupleCacheEntry = filterUtils.l.findIdentityMapInFilterCache(args, tuple, fem);
                            debug.fF.assert(function() {
                                return !!tupleCacheEntry;
                            }, "Cache entry found for the first tuple and NOT found for one of the subsequent tuples");
                            for (var jsonTuple = [], identityIdx = 0; identityIdx < tupleCacheEntry.identities.length; identityIdx++) jsonTuple.push({
                                value: tupleCacheEntry.valueMap[identityIdx]
                            });
                            for (var keyIdx = 0; keyIdx < tuple.length; keyIdx++) {
                                var keyValue = tuple[keyIdx].value, origColIdx = keyIdxToOrigIdxMap[keyIdx];
                                target[origColIdx].keys && (jsonTuple[origColIdx].keyValues || (jsonTuple[origColIdx].keyValues = []), 
                                jsonTuple[origColIdx].keyValues.push(keyValue));
                            }
                            jsonTuples.push(jsonTuple);
                        }, _i = 0, values_1 = values; _i < values_1.length; _i++) _loop_2(values_1[_i]);
                        tupleFilter = new powerbiModels.TupleFilter(target, "In", jsonTuples);
                    } else {
                        var jsonFilterColumnTargets = _.map(args, function(arg) {
                            var targetColumnRef = arg.getTargetColumnRef(schema);
                            return {
                                table: targetColumnRef.getTargetEntity().entity,
                                column: targetColumnRef.ref
                            };
                        }), jsonFilterTupleValues = _.map(values, function(tupleValue) {
                            return _.map(tupleValue, function(tupleElementValue) {
                                if ((0, sqExprStaticMembers.VC)(tupleElementValue)) return {
                                    value: tupleElementValue.value
                                };
                                Utility.b$.throwException(JsonFilterParserErrors.tupleFilterSerializationError());
                            });
                        });
                        tupleFilter = new powerbiModels.TupleFilter(jsonFilterColumnTargets, "In", jsonFilterTupleValues);
                    }
                    return tupleFilter || Utility.b$.throwException(JsonFilterParserErrors.tupleFilterSerializationError()), 
                    updateFilterDisplaySettings(tupleFilter, filterContainer), tupleFilter.toJSON();
                }, TupleFilterSerializerHelper;
            }(), AdvancedFilterSerializerHelper = function() {
                function AdvancedFilterSerializerHelper() {}
                return AdvancedFilterSerializerHelper.serializeFilter = function(advancedFilterCard, _schema, powerbiModels, filterContainer) {
                    var fieldVisitor = new SemanticFilterFieldVisitor(_schema), serializedTarget = advancedFilterCard.field.accept(fieldVisitor), serializedLogicalOperator = AdvancedFilterSerializerHelper.getAdvancedFilterLogicalOperator(advancedFilterCard.logicalOperator), serializedConditions = advancedFilterCard.conditions.map(function(condition) {
                        return AdvancedFilterSerializerHelper.getAdvancedFilterCondition(condition);
                    }), advancedFilter = new powerbiModels.AdvancedFilter(serializedTarget, serializedLogicalOperator, serializedConditions);
                    return advancedFilter || Utility.b$.throwException(JsonFilterParserErrors.advancedFilterSerializationError()), 
                    updateFilterDisplaySettings(advancedFilter, filterContainer), advancedFilter.toJSON();
                }, AdvancedFilterSerializerHelper.getAdvancedFilterExpression = function(filterCondition, localizationService) {
                    return new filterCardConverter.L(localizationService).fromFilterExpr(filterCondition);
                }, AdvancedFilterSerializerHelper.getAdvancedFilterLogicalOperator = function(logicalOperator) {
                    switch (logicalOperator) {
                      case 0:
                      case 2:
                        return "And";

                      case 1:
                        return "Or";
                    }
                }, AdvancedFilterSerializerHelper.getAdvancedFilterCondition = function(condition) {
                    var operatorAsString;
                    !(0, advancedFilterUtils.AJ)(condition.operator) || condition.value && condition.value.hasValue || Utility.b$.throwException(JsonFilterParserErrors.filterConditionNotFound()), 
                    9 === condition.operator ? operatorAsString = "Is" : 10 === condition.operator ? operatorAsString = "IsNot" : 3 === condition.operator ? operatorAsString = "GreaterThan" : 4 === condition.operator ? operatorAsString = "GreaterThanOrEqual" : 1 === condition.operator ? operatorAsString = "LessThan" : 2 === condition.operator ? operatorAsString = "LessThanOrEqual" : 5 === condition.operator ? operatorAsString = "Contains" : 6 === condition.operator ? operatorAsString = "DoesNotContain" : 7 === condition.operator ? operatorAsString = "StartsWith" : 8 === condition.operator ? operatorAsString = "DoesNotStartWith" : 11 === condition.operator ? operatorAsString = "IsBlank" : 12 === condition.operator ? operatorAsString = "IsNotBlank" : 13 === condition.operator ? operatorAsString = "IsEmptyString" : 14 === condition.operator ? operatorAsString = "IsNotEmptyString" : Utility.b$.throwException(JsonFilterParserErrors.filterConditionNotFound());
                    var conditionValue = condition.value;
                    return {
                        operator: operatorAsString,
                        value: condition.value.isDate ? conditionValue.value.toISOString() : conditionValue.value
                    };
                }, AdvancedFilterSerializerHelper;
            }(), SemanticFilterFieldVisitor = function(_super) {
                function SemanticFilterFieldVisitor(schema) {
                    var _this = _super.call(this) || this;
                    return _this.schema = schema, _this;
                }
                return (0, tslib_es6.__extends)(SemanticFilterFieldVisitor, _super), SemanticFilterFieldVisitor.prototype.visitEntity = function(expr) {
                    return debug.fF.assertValue(expr, "expr"), {
                        table: expr.entity,
                        column: null
                    };
                }, SemanticFilterFieldVisitor.prototype.visitPropertyVariationSource = function(expr) {
                    var baseFilterTarget = expr.arg.accept(this);
                    return baseFilterTarget ? {
                        table: baseFilterTarget.table,
                        hierarchy: null,
                        hierarchyLevel: null
                    } : null;
                }, SemanticFilterFieldVisitor.prototype.visitHierarchy = function(expr) {
                    var baseFilterTarget = expr.arg.accept(this);
                    return baseFilterTarget ? {
                        table: baseFilterTarget.table,
                        hierarchy: expr.hierarchy,
                        hierarchyLevel: null
                    } : null;
                }, SemanticFilterFieldVisitor.prototype.visitAggr = function(expr) {
                    var baseFilterTarget = expr.arg.accept(this);
                    if (!baseFilterTarget) return null;
                    var filterColumnTarget = baseFilterTarget;
                    return filterColumnTarget.aggregationFunction = (0, query.b)(expr.func), filterColumnTarget;
                }, SemanticFilterFieldVisitor.prototype.visitColumnRef = function(expr) {
                    var baseFilterTarget = expr.source.accept(this);
                    return baseFilterTarget ? {
                        table: baseFilterTarget.table,
                        column: expr.ref
                    } : null;
                }, SemanticFilterFieldVisitor.prototype.visitMeasureRef = function(expr) {
                    var baseFilterTarget = expr.source.accept(this);
                    return baseFilterTarget ? {
                        table: baseFilterTarget.table,
                        measure: expr.ref
                    } : null;
                }, SemanticFilterFieldVisitor.prototype.visitHierarchyLevel = function(expr) {
                    var hierarchyTarget = expr.arg.accept(this);
                    return hierarchyTarget ? {
                        table: hierarchyTarget.table,
                        hierarchy: hierarchyTarget.hierarchy,
                        hierarchyLevel: expr.level
                    } : null;
                }, SemanticFilterFieldVisitor.prototype.visitGroupRef = function(expr) {
                    var groupedTarget = expr.source.accept(this);
                    if (!groupedTarget) return null;
                    for (var groupedColumnTargets = [], _i = 0, _a = expr.groupedExprs; _i < _a.length; _i++) {
                        var columnTarget = _a[_i].accept(this);
                        columnTarget && groupedColumnTargets.push(columnTarget);
                    }
                    return {
                        table: groupedTarget.table,
                        column: expr.ref,
                        groupedColumns: groupedColumnTargets
                    };
                }, SemanticFilterFieldVisitor.prototype.visitArithmetic = function(expr) {
                    if (!(0, fieldExprPatternToSQExprConverter.uT)(expr, this.schema)) return null;
                    var filterTarget = expr.left.accept(this);
                    return filterTarget.percentOfGrandTotal = !0, filterTarget;
                }, SemanticFilterFieldVisitor;
            }(sqExprVisitor.vq);
            JsonFilterBuilder.SemanticFilterFieldVisitor = SemanticFilterFieldVisitor;
        }(JsonFilterBuilder || (JsonFilterBuilder = {}));
        var FieldExprAndValuesExtensions = function() {
            function FieldExprAndValuesExtensions() {}
            return FieldExprAndValuesExtensions.fromInExpr = function(inExpr, isNot) {
                debug.fF.assertValue(inExpr, "inExpr");
                for (var fieldToValuesMapping = [], _loop_4 = function(index, length_1) {
                    var perExprValues = _.map(inExpr.values, function(valuesArray) {
                        return valuesArray[index];
                    });
                    fieldToValuesMapping.push({
                        fieldExpr: inExpr.args[index],
                        isNot,
                        values: sqExprUtils.m.concatUnique([], perExprValues)
                    });
                }, index = 0, length_1 = inExpr.args.length; index < length_1; index++) _loop_4(index);
                return fieldToValuesMapping;
            }, FieldExprAndValuesExtensions.merge = function(leftExprMapping, rightExprMapping) {
                debug.fF.assertValue(leftExprMapping, "leftExprMapping"), debug.fF.assertValue(rightExprMapping, "rightExprMapping");
                for (var fieldAndValuesArray = (0, arrayExtensions.JG)(leftExprMapping), _loop_5 = function(fieldAndValues) {
                    var index = _.findIndex(fieldAndValuesArray, function(item) {
                        return (0, sqExprEqualityVisitor.fS)(item.fieldExpr, fieldAndValues.fieldExpr) && item.isNot === fieldAndValues.isNot;
                    });
                    if (-1 !== index) {
                        var targetFieldAndValues = fieldAndValuesArray[index];
                        targetFieldAndValues.values = sqExprUtils.m.concatUnique(targetFieldAndValues.values, fieldAndValues.values);
                    } else fieldAndValuesArray.push(fieldAndValues);
                }, _i = 0, rightExprMapping_1 = rightExprMapping; _i < rightExprMapping_1.length; _i++) _loop_5(rightExprMapping_1[_i]);
                return fieldAndValuesArray;
            }, FieldExprAndValuesExtensions;
        }(), SemanticFilterConditionVisitor = function(_super) {
            function SemanticFilterConditionVisitor() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(SemanticFilterConditionVisitor, _super), SemanticFilterConditionVisitor.prototype.visitIn = function(expr) {
                return FieldExprAndValuesExtensions.fromInExpr(expr);
            }, SemanticFilterConditionVisitor.prototype.visitNot = function(expr) {
                return expr && expr.arg && 10 === expr.arg.kind ? FieldExprAndValuesExtensions.fromInExpr(expr.arg, !0) : _super.prototype.visitNot.call(this, expr, void 0);
            }, SemanticFilterConditionVisitor.prototype.visitAnd = function(expr) {
                var leftExprMapping = expr.left.accept(this), rightExprMapping = expr.right.accept(this);
                if (leftExprMapping && rightExprMapping) return FieldExprAndValuesExtensions.merge(leftExprMapping, rightExprMapping);
            }, SemanticFilterConditionVisitor;
        }(sqExprVisitor.vq), EmbedIncludeExcludeSQExprVisitor = function(_super) {
            function EmbedIncludeExcludeSQExprVisitor(schema, metadata) {
                var _this = _super.call(this) || this;
                return _this.schema = schema, _this.metadata = metadata, _this.dataPoints = [], 
                _this.isExclude = !1, _this;
            }
            return (0, tslib_es6.__extends)(EmbedIncludeExcludeSQExprVisitor, _super), EmbedIncludeExcludeSQExprVisitor.prototype.visitNot = function(notExpr) {
                this.isExclude = !0, notExpr.arg.accept(this);
            }, EmbedIncludeExcludeSQExprVisitor.prototype.visitOr = function(orExpr) {
                orExpr.left.accept(this), orExpr.right.accept(this);
            }, EmbedIncludeExcludeSQExprVisitor.prototype.visitIn = function(inExpr) {
                var _a, _b, _this = this;
                if (!_.isEmpty(inExpr.values)) {
                    var result = [], columns = inExpr.args, metadataExprs = [];
                    this.metadata && !_.isEmpty(this.metadata.expressions) && (metadataExprs = this.metadata.expressions.map(function(expr) {
                        var columnExpr = expr;
                        return {
                            columnExpr,
                            keyColumnsLength: columnExpr.hasGroupOnKeys(_this.schema) ? columnExpr.getKeyColumns(_this.schema).length : 0
                        };
                    }));
                    for (var _loop_6 = function(values) {
                        debug.fF.assert(function() {
                            return columns.length === values.length;
                        }, "Columns can't be different from values");
                        var dataPoint = {
                            columns: [],
                            values: []
                        }, identityCache = filterUtils.l.findIdentityMapInFilterCache(columns, values, this_1.metadata);
                        if ((null === (_b = null == identityCache ? void 0 : identityCache.identities) || void 0 === _b ? void 0 : _b.length) > 0) {
                            var valueIndex = 0;
                            for (var key in identityCache.valueMap) {
                                dataPoint.columns.push(metadataExprs[key].columnExpr);
                                var keyColumnsLength = metadataExprs[key].keyColumnsLength;
                                if (keyColumnsLength > 0) {
                                    var targetKeyValues = values.slice(valueIndex, valueIndex + keyColumnsLength);
                                    dataPoint.values.push({
                                        value: identityCache.valueMap[key],
                                        keyValues: targetKeyValues
                                    }), valueIndex += keyColumnsLength;
                                } else dataPoint.values.push({
                                    value: values[valueIndex].value
                                }), valueIndex++;
                            }
                        } else for (var index = 0; index < values.length; index++) dataPoint.values.push({
                            value: values[index].value
                        }), dataPoint.columns.push(columns[index]);
                        result.push(dataPoint);
                    }, this_1 = this, _i = 0, _c = inExpr.values; _i < _c.length; _i++) _loop_6(_c[_i]);
                    (_a = this.dataPoints).push.apply(_a, result || []);
                }
            }, EmbedIncludeExcludeSQExprVisitor;
        }(sqExprVisitor.vq), fieldExprPatternBuilder = __webpack_require__(76001), JsonTargetParserService = function() {
            function JsonTargetParserService() {}
            return JsonTargetParserService.prototype.getFilterTarget = function(expr, schema) {
                return JsonFilterBuilder.getTarget(expr, schema);
            }, JsonTargetParserService.prototype.getTarget = function(expr, schema, supportGrouping) {
                if (void 0 === supportGrouping && (supportGrouping = !0), !expr) return null;
                var target, targetProperties = (0, fieldExprPatternBuilder.Q)(expr, schema);
                return targetProperties ? (targetProperties.columnAggr || supportGrouping && targetProperties.groupingColumnAggr ? target = this.getColumnAggrTarget(targetProperties) : targetProperties.hierarchyLevelAggr ? target = this.getHierarchyLevelAggrTarget(targetProperties) : targetProperties.measure ? target = this.getMeasureTarget(targetProperties) : targetProperties.hierarchyLevel ? target = this.getHierarchyLevelTarget(targetProperties) : targetProperties.column && (target = this.getColumnTarget(targetProperties)), 
                target) : null;
            }, JsonTargetParserService.prototype.getFieldExpr = function(target, schema, key) {
                var fieldExprPattern;
                if (debug.fF.assert(function() {
                    return !_.isEmpty(schema.schemas);
                }, "schema must contain schemas"), key) fieldExprPattern = this.getColumnFieldPattern(target, schema, key); else if ((0, 
                powerbi_models.isHierarchyLevelAggr)(target)) fieldExprPattern = this.getHierarchyLevelAggrFieldPattern(target, schema); else if ((0, 
                powerbi_models.isColumnAggr)(target)) fieldExprPattern = this.getColumnAggrFieldPattern(target, schema); else if ((0, 
                powerbi_models.isMeasure)(target)) fieldExprPattern = this.getMeasureFieldPattern(target, schema); else if ((0, 
                powerbi_models.isHierarchyLevel)(target)) fieldExprPattern = this.getHierarchyLevelFieldPattern(target, schema); else {
                    if (!(0, powerbi_models.isColumn)(target)) throw new Error("Invalid or unsupported target");
                    fieldExprPattern = this.getColumnFieldPattern(target, schema);
                }
                return fieldExprPattern && (0, powerbi_models.isPercentOfGrandTotal)(target) && (fieldExprPattern = this.getPercentOfGrandTotalFieldPattern(fieldExprPattern)), 
                (0, fieldExprPatternToSQExprConverter.og)(fieldExprPattern);
            }, JsonTargetParserService.prototype.getColumnFieldPattern = function(target, schema, key) {
                var name = key || target.column;
                return {
                    column: {
                        schema: this.getSchemaName(name, target.table, schema),
                        entity: target.table,
                        name
                    }
                };
            }, JsonTargetParserService.prototype.getMeasureFieldPattern = function(measure, schema) {
                return {
                    measure: {
                        schema: this.getSchemaName(measure.measure, measure.table, schema),
                        entity: measure.table,
                        name: measure.measure
                    }
                };
            }, JsonTargetParserService.prototype.getHierarchyLevelFieldPattern = function(hierarchyLevel, schema) {
                return {
                    hierarchyLevel: {
                        schema: this.getSchemaName(hierarchyLevel.hierarchy, hierarchyLevel.table, schema, !0),
                        entity: hierarchyLevel.table,
                        name: hierarchyLevel.hierarchy,
                        level: hierarchyLevel.hierarchyLevel
                    }
                };
            }, JsonTargetParserService.prototype.getHierarchyLevelAggrFieldPattern = function(hierarchyLevelAggr, schema) {
                return {
                    hierarchyLevelAggr: {
                        schema: this.getSchemaName(hierarchyLevelAggr.hierarchy, hierarchyLevelAggr.table, schema, !0),
                        entity: hierarchyLevelAggr.table,
                        name: hierarchyLevelAggr.hierarchy,
                        level: hierarchyLevelAggr.hierarchyLevel,
                        aggregate: this.getQueryAggregateFunction(hierarchyLevelAggr.aggregationFunction)
                    }
                };
            }, JsonTargetParserService.prototype.getColumnAggrFieldPattern = function(columnAggrTarget, schema) {
                return {
                    columnAggr: {
                        schema: this.getSchemaName(columnAggrTarget.column, columnAggrTarget.table, schema),
                        entity: columnAggrTarget.table,
                        name: columnAggrTarget.column,
                        aggregate: this.getQueryAggregateFunction(columnAggrTarget.aggregationFunction)
                    }
                };
            }, JsonTargetParserService.prototype.getPercentOfGrandTotalFieldPattern = function(fieldExprPattern) {
                return {
                    percentOfGrandTotal: {
                        baseExpr: fieldExprPattern
                    }
                };
            }, JsonTargetParserService.prototype.getQueryAggregateFunction = function(aggregateFunction) {
                switch (aggregateFunction) {
                  case "Sum":
                    return 0;

                  case "Avg":
                    return 1;

                  case "Count":
                    return 2;

                  case "Min":
                    return 3;

                  case "Max":
                    return 4;

                  case "CountNonNull":
                    return 5;

                  case "Median":
                    return 6;

                  case "StandardDeviation":
                    return 7;

                  case "Variance":
                    return 8;

                  default:
                    debug.fF.assert(function() {
                        return !1;
                    }, "unsupported aggregation function: ".concat(aggregateFunction));
                }
            }, JsonTargetParserService.prototype.getColumnTarget = function(fieldExpr) {
                var columnExprPattern = fieldExpr.column;
                return {
                    $schema: "http://powerbi.com/product/schema#column",
                    column: columnExprPattern.name,
                    table: columnExprPattern.entity
                };
            }, JsonTargetParserService.prototype.getColumnAggrTarget = function(fieldExpr, supportGrouping) {
                void 0 === supportGrouping && (supportGrouping = !0);
                var columnAgrExprPattern = fieldExpr.columnAggr || supportGrouping && fieldExpr.groupingColumnAggr;
                return columnAgrExprPattern ? {
                    $schema: "http://powerbi.com/product/schema#columnAggr",
                    column: columnAgrExprPattern.name,
                    table: columnAgrExprPattern.entity,
                    aggregationFunction: (0, query.b)(columnAgrExprPattern.aggregate)
                } : null;
            }, JsonTargetParserService.prototype.getMeasureTarget = function(fieldExpr) {
                var measureExprPattern = fieldExpr.measure;
                return {
                    $schema: "http://powerbi.com/product/schema#measure",
                    measure: measureExprPattern.name,
                    table: measureExprPattern.entity
                };
            }, JsonTargetParserService.prototype.getHierarchyLevelTarget = function(fieldExpr) {
                var hierarchyLevelExprPattern = fieldExpr.hierarchyLevel;
                return {
                    $schema: "http://powerbi.com/product/schema#hierarchyLevel",
                    hierarchy: hierarchyLevelExprPattern.name,
                    hierarchyLevel: hierarchyLevelExprPattern.level,
                    table: hierarchyLevelExprPattern.entity
                };
            }, JsonTargetParserService.prototype.getHierarchyLevelAggrTarget = function(fieldExpr) {
                var hierarchyLevelAggrExprPattern = fieldExpr.hierarchyLevelAggr;
                return {
                    $schema: "http://powerbi.com/product/schema#hierarchyLevelAggr",
                    hierarchy: hierarchyLevelAggrExprPattern.name,
                    hierarchyLevel: hierarchyLevelAggrExprPattern.level,
                    table: hierarchyLevelAggrExprPattern.entity,
                    aggregationFunction: (0, query.b)(hierarchyLevelAggrExprPattern.aggregate)
                };
            }, JsonTargetParserService.prototype.getSchemaName = function(propertyName, entity, schema, isHierarchy) {
                void 0 === isHierarchy && (isHierarchy = !1);
                for (var _i = 0, _a = schema.schemas; _i < _a.length; _i++) {
                    var s = _a[_i];
                    if (s.findProperty(entity, propertyName) || isHierarchy && s.findHierarchy(entity, propertyName)) return s.name;
                }
                debug.fF.assertFail("propetyName was not found in any Schema");
            }, JsonTargetParserService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: JsonTargetParserService,
                factory: JsonTargetParserService.\u0275fac = function(t) {
                    return new (t || JsonTargetParserService);
                },
                providedIn: "root"
            }), JsonTargetParserService;
        }(), ErrorProvider = function() {
            function ErrorProvider() {}
            return ErrorProvider.prototype.fieldNotFound = function(target) {
                return {
                    name: JsonConstants.ErrorCodes.FieldNotFound,
                    message: JsonConstants.ErrorMessages.InvalidTarget + (target ? "Target table: " + target.table : "")
                };
            }, ErrorProvider.prototype.invalidDataType = function(value) {
                return {
                    name: JsonConstants.ErrorCodes.InvalidDataType,
                    message: (0, formatUtil.W)(JsonConstants.ErrorMessages.InvalidDataTypeMessage, value)
                };
            }, ErrorProvider.prototype.filterConditionNotFound = function() {
                return {
                    name: JsonConstants.ErrorCodes.FilterConditionNotFound,
                    message: JsonConstants.ErrorMessages.InvalidCondition
                };
            }, ErrorProvider.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ErrorProvider,
                factory: ErrorProvider.\u0275fac = function(t) {
                    return new (t || ErrorProvider);
                },
                providedIn: "root"
            }), ErrorProvider;
        }(), AdvancedFilterContainerBuilder = function() {
            function AdvancedFilterContainerBuilder(jsonTargetParserService, errorProvider) {
                this.jsonTargetParserService = jsonTargetParserService, this.errorProvider = errorProvider;
            }
            return AdvancedFilterContainerBuilder.prototype.tryBuildFilterContainer = function(contract, schema, filter) {
                if ((0, powerbi_models.getFilterType)(filter) !== this.getFilterType()) return null;
                var advancedFilter = filter, fieldExpr = this.jsonTargetParserService.getFieldExpr(advancedFilter.target, schema);
                fieldExpr || Utility.b$.throwException(this.errorProvider.fieldNotFound(advancedFilter.target));
                for (var conditions = [], _i = 0, _a = advancedFilter.conditions; _i < _a.length; _i++) {
                    var condition = this.getCondition(_a[_i]);
                    condition && conditions.push(condition);
                }
                var metadata = fieldExpr.getMetadata(schema), fieldType = metadata ? metadata.type : null, logicalOperator = JsonConstants.logicalOperatorDictionary[advancedFilter.logicalOperator], isMappedToMParameter = sqExprUtils.m.hasMappedMParameter(fieldExpr, schema), filterSQExpr = (0, 
                conditionToSQLConverter.d_)(fieldExpr, fieldType, conditions, logicalOperator, isMappedToMParameter);
                return {
                    name: filterUtils.l.getNextFilterName(contract.filters),
                    expression: fieldExpr,
                    filter: filterSQExpr ? semanticQuery.yl.fromSQExpr(filterSQExpr) : void 0,
                    type: contracts_filterContainer.vA.Advanced
                };
            }, AdvancedFilterContainerBuilder.prototype.getFilterType = function() {
                return powerbi_models.FilterType.Advanced;
            }, AdvancedFilterContainerBuilder.prototype.getCondition = function(jsonCondition) {
                jsonCondition || Utility.b$.throwException(this.errorProvider.filterConditionNotFound());
                var formattedValue, operator = JsonConstants.operatorDictionary[jsonCondition.operator];
                return formattedValue = _.isString(jsonCondition.value) && (0, JsCommon_Date.xv)(jsonCondition.value.substr(0, 26)) ? (0, 
                JsCommon_Date.xv)(jsonCondition.value.substr(0, 26)) : jsonCondition.value, new advancedFilterUtils.gP(operator, formattedValue);
            }, AdvancedFilterContainerBuilder.\u0275fac = function(t) {
                return new (t || AdvancedFilterContainerBuilder)(core["\u0275\u0275inject"](JsonTargetParserService), core["\u0275\u0275inject"](ErrorProvider));
            }, AdvancedFilterContainerBuilder.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: AdvancedFilterContainerBuilder,
                factory: AdvancedFilterContainerBuilder.\u0275fac,
                providedIn: "root"
            }), AdvancedFilterContainerBuilder;
        }(), dsr_queryGenerator = __webpack_require__(49642), filterExpressionMetadataUtils = __webpack_require__(89804), featureSwitchUtils = __webpack_require__(16699), Double = __webpack_require__(41640), feature_switch_service = __webpack_require__(9380), BasicFilterContainerBuilder = function() {
            function BasicFilterContainerBuilder(jsonTargetParserService, errorProvider, featureSwitchesService) {
                this.jsonTargetParserService = jsonTargetParserService, this.errorProvider = errorProvider, 
                this.featureSwitchesService = featureSwitchesService;
            }
            return BasicFilterContainerBuilder.prototype.tryBuildFilterContainer = function(contract, schema, filter) {
                if ((0, powerbi_models.getFilterType)(filter) !== this.getFilterType()) return null;
                var semanticFilter, basicFilter = filter, filterExpressionMetadata = {
                    cachedValueItems: [],
                    expressions: []
                }, fieldExpr = this.jsonTargetParserService.getFieldExpr(basicFilter.target, schema);
                if (fieldExpr || Utility.b$.throwException(this.errorProvider.fieldNotFound(basicFilter.target)), 
                basicFilter.operator !== JsonConstants.SelectAll) {
                    var keyColumnsFieldExprs = this.getFieldExprsForKeys(basicFilter.target, schema), exprsForInValues = [], valueIndex = 0;
                    filterExpressionMetadata.expressions = [ fieldExpr ];
                    for (var _i = 0, _a = basicFilter.values; _i < _a.length; _i++) {
                        var value = _a[_i], cachedValueItem = {
                            identities: [],
                            valueMap: {
                                0: null != value ? value.toString() : null
                            }
                        }, exprForInValue = [], keyValues = basicFilter.keyValues;
                        if (keyColumnsFieldExprs && keyValues) for (var _b = 0, _c = keyValues[valueIndex]; _b < _c.length; _b++) exprForInValue.push(this.buildSQConstantExpr(_c[_b])); else exprForInValue.push(this.buildSQConstantExpr(value));
                        if (keyColumnsFieldExprs) {
                            var identity = (0, filterExpressionMetadataUtils.Pb)(keyColumnsFieldExprs, exprForInValue);
                            cachedValueItem.identities.push(identity), filterExpressionMetadata.cachedValueItems.push(cachedValueItem);
                        }
                        exprsForInValues.push(exprForInValue), valueIndex++;
                    }
                    var filterExpression, isHierarchyLevelConst = (0, sqExprStaticMembers.ez)(fieldExpr), inExpr = void 0;
                    if (!keyColumnsFieldExprs && isHierarchyLevelConst && this.doesHierarchyLevelExistsOnSchema(schema, basicFilter.target)) {
                        var identities = (0, dsr_queryGenerator.Zl)((0, featureSwitchUtils.u)(this.featureSwitchesService.featureSwitches)).produceIdentities(fieldExpr, schema);
                        inExpr = (0, semanticQuery_sqExpr.Sh)(identities, exprsForInValues);
                    } else inExpr = (0, semanticQuery_sqExpr.Sh)(keyColumnsFieldExprs || [ fieldExpr ], exprsForInValues);
                    filterExpression = basicFilter.operator === JsonConstants.NotIn ? (0, semanticQuery_sqExpr.ff)(inExpr) : inExpr, 
                    semanticFilter = semanticQuery.yl.fromSQExpr(filterExpression);
                }
                return {
                    cachedValueItems: (0, filterExpressionMetadataUtils.cr)(filterExpressionMetadata),
                    name: filterUtils.l.getNextFilterName(contract.filters),
                    expression: fieldExpr,
                    filter: semanticFilter,
                    filterExpressionMetadata,
                    type: contracts_filterContainer.vA.Categorical
                };
            }, BasicFilterContainerBuilder.prototype.getFilterType = function() {
                return powerbi_models.FilterType.Basic;
            }, BasicFilterContainerBuilder.prototype.doesHierarchyLevelExistsOnSchema = function(schema, target) {
                if (!(target && target.table && target.hierarchy && target.hierarchyLevel)) return !1;
                for (var _i = 0, _a = schema.schemas; _i < _a.length; _i++) if (_a[_i].findHierarchyLevel(target.table, target.hierarchy, target.hierarchyLevel)) return !0;
                return !1;
            }, BasicFilterContainerBuilder.prototype.buildSQConstantExpr = function(value) {
                var sqExpr;
                if (_.isString(value)) if (null != (0, JsCommon_Date.xv)(value.substr(0, 26))) {
                    var dateValue = (0, JsCommon_Date.xv)(value.substr(0, 26));
                    sqExpr = (0, semanticQuery_sqExpr.CQ)(dateValue);
                } else sqExpr = (0, semanticQuery_sqExpr.fL)(value); else _.isBoolean(value) ? sqExpr = (0, 
                semanticQuery_sqExpr.O7)(value) : _.isNumber(value) ? sqExpr = (0, Double.U)(value) ? (0, 
                semanticQuery_sqExpr.cA)(value) : (0, semanticQuery_sqExpr.tx)(value) : null === value ? sqExpr = (0, 
                semanticQuery_sqExpr.IF)() : Utility.b$.throwException(this.errorProvider.invalidDataType(value));
                return sqExpr;
            }, BasicFilterContainerBuilder.prototype.getFieldExprsForKeys = function(target, schema) {
                var _this = this;
                return target && target.keys ? _.map(target.keys, function(key) {
                    return _this.jsonTargetParserService.getFieldExpr(target, schema, key);
                }) : null;
            }, BasicFilterContainerBuilder.\u0275fac = function(t) {
                return new (t || BasicFilterContainerBuilder)(core["\u0275\u0275inject"](JsonTargetParserService), core["\u0275\u0275inject"](ErrorProvider), core["\u0275\u0275inject"](feature_switch_service.vZ));
            }, BasicFilterContainerBuilder.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: BasicFilterContainerBuilder,
                factory: BasicFilterContainerBuilder.\u0275fac,
                providedIn: "root"
            }), BasicFilterContainerBuilder;
        }(), TopNFilterContainerBuilder = function() {
            function TopNFilterContainerBuilder(jsonTargetParserService, errorProvider) {
                this.jsonTargetParserService = jsonTargetParserService, this.errorProvider = errorProvider;
            }
            return TopNFilterContainerBuilder.prototype.tryBuildFilterContainer = function(contract, schema, filter) {
                if ((0, powerbi_models.getFilterType)(filter) !== this.getFilterType()) return null;
                var topNFilter = filter, fieldExpr = this.jsonTargetParserService.getFieldExpr(filter.target, schema), orderByExpr = this.jsonTargetParserService.getFieldExpr(topNFilter.orderBy, schema);
                if (!fieldExpr || !orderByExpr) throw Utility.b$.throwException(this.errorProvider.fieldNotFound(filter.target)), 
                {};
                var semanticFilter = (0, topNFilterPattern.VK)({
                    fieldBeingFiltered: fieldExpr,
                    isTop: "Top" === topNFilter.operator,
                    itemCount: topNFilter.itemCount,
                    orderByField: orderByExpr
                });
                return {
                    name: filterUtils.l.getNextFilterName(contract.filters),
                    expression: fieldExpr,
                    filter: semanticFilter,
                    type: contracts_filterContainer.vA.TopN
                };
            }, TopNFilterContainerBuilder.prototype.getFilterType = function() {
                return powerbi_models.FilterType.TopN;
            }, TopNFilterContainerBuilder.\u0275fac = function(t) {
                return new (t || TopNFilterContainerBuilder)(core["\u0275\u0275inject"](JsonTargetParserService), core["\u0275\u0275inject"](ErrorProvider));
            }, TopNFilterContainerBuilder.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: TopNFilterContainerBuilder,
                factory: TopNFilterContainerBuilder.\u0275fac,
                providedIn: "root"
            }), TopNFilterContainerBuilder;
        }(), RelativeFilterContainerBuilder = function() {
            function RelativeFilterContainerBuilder(jsonTargetParserService, errorProvider) {
                this.jsonTargetParserService = jsonTargetParserService, this.errorProvider = errorProvider;
            }
            return RelativeFilterContainerBuilder.prototype.tryBuildFilterContainer = function(contract, schema, filter) {
                return (0, powerbi_models.getFilterType)(filter) !== this.getFilterType() ? null : (null != filter.timeUnitsCount && (semanticFilter = (0, 
                relativeDateFilterPattern.nh)(this.createRelativeFilterParameters(filter, schema))), 
                {
                    name: filterUtils.l.getNextFilterName(contract.filters),
                    expression: this.jsonTargetParserService.getFieldExpr(filter.target, schema),
                    filter: semanticFilter,
                    type: this.getContractFilterType()
                });
                var semanticFilter;
            }, RelativeFilterContainerBuilder.prototype.createRelativeFilterParameters = function(filter, schema) {
                var fieldExpr = this.jsonTargetParserService.getFieldExpr(filter.target, schema);
                return fieldExpr || Utility.b$.throwException(this.errorProvider.fieldNotFound(filter.target)), 
                {
                    field: fieldExpr,
                    options: {
                        duration: filter.timeUnitsCount,
                        includeToday: filter && (filter.includeToday || filter.filterType === powerbi_models.FilterType.RelativeTime),
                        relativeQualifier: this.translateToRelativeQualifierEnum(filter.operator),
                        relativeUnit: this.translateToRelativeFilterUnitEnum(filter.timeUnitType)
                    }
                };
            }, RelativeFilterContainerBuilder.prototype.translateToRelativeQualifierEnum = function(relativeFilterOperator) {
                switch (relativeFilterOperator) {
                  case powerbi_models.RelativeDateOperators.InLast:
                    return relativeDateRange.KO.Last;

                  case powerbi_models.RelativeDateOperators.InThis:
                    return relativeDateRange.KO.Current;

                  case powerbi_models.RelativeDateOperators.InNext:
                    return relativeDateRange.KO.Next;

                  default:
                    return void debug.fF.assertFail("Unexpected RelativeDateOperator: " + relativeFilterOperator);
                }
            }, RelativeFilterContainerBuilder;
        }(), RelativeDateFilterContainerBuilder = function(_super) {
            function RelativeDateFilterContainerBuilder(jsonTargetParserService, errorProvider) {
                return _super.call(this, jsonTargetParserService, errorProvider) || this;
            }
            return (0, tslib_es6.__extends)(RelativeDateFilterContainerBuilder, _super), RelativeDateFilterContainerBuilder.prototype.translateToRelativeFilterUnitEnum = function(relativeDateUnit) {
                switch (relativeDateUnit) {
                  case powerbi_models.RelativeDateFilterTimeUnit.Days:
                    return relativeDateRange.hU.Day;

                  case powerbi_models.RelativeDateFilterTimeUnit.Weeks:
                    return relativeDateRange.hU.Week;

                  case powerbi_models.RelativeDateFilterTimeUnit.CalendarWeeks:
                    return relativeDateRange.hU.CalendarWeek;

                  case powerbi_models.RelativeDateFilterTimeUnit.Months:
                    return relativeDateRange.hU.Month;

                  case powerbi_models.RelativeDateFilterTimeUnit.CalendarMonths:
                    return relativeDateRange.hU.CalendarMonth;

                  case powerbi_models.RelativeDateFilterTimeUnit.Years:
                    return relativeDateRange.hU.Year;

                  case powerbi_models.RelativeDateFilterTimeUnit.CalendarYears:
                    return relativeDateRange.hU.CalendarYear;

                  default:
                    return void debug.fF.assertFail("Unexpected RelativeDateFilterTimeUnit: " + relativeDateUnit);
                }
            }, RelativeDateFilterContainerBuilder.prototype.getFilterType = function() {
                return powerbi_models.FilterType.RelativeDate;
            }, RelativeDateFilterContainerBuilder.prototype.getContractFilterType = function() {
                return contracts_filterContainer.vA.RelativeDate;
            }, RelativeDateFilterContainerBuilder.\u0275fac = function(t) {
                return new (t || RelativeDateFilterContainerBuilder)(core["\u0275\u0275inject"](JsonTargetParserService), core["\u0275\u0275inject"](ErrorProvider));
            }, RelativeDateFilterContainerBuilder.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: RelativeDateFilterContainerBuilder,
                factory: RelativeDateFilterContainerBuilder.\u0275fac,
                providedIn: "root"
            }), RelativeDateFilterContainerBuilder;
        }(RelativeFilterContainerBuilder), RelativeTimeFilterContainerBuilder = function(_super) {
            function RelativeTimeFilterContainerBuilder(jsonTargetParserService, errorProvider) {
                return _super.call(this, jsonTargetParserService, errorProvider) || this;
            }
            return (0, tslib_es6.__extends)(RelativeTimeFilterContainerBuilder, _super), RelativeTimeFilterContainerBuilder.prototype.translateToRelativeFilterUnitEnum = function(relativeTimeUnit) {
                switch (relativeTimeUnit) {
                  case powerbi_models.RelativeDateFilterTimeUnit.Minutes:
                    return relativeDateRange.hU.Minute;

                  case powerbi_models.RelativeDateFilterTimeUnit.Hours:
                    return relativeDateRange.hU.Hour;

                  default:
                    return void debug.fF.assertFail("Unexpected RelativeDateFilterTimeUnit: " + relativeTimeUnit);
                }
            }, RelativeTimeFilterContainerBuilder.prototype.getContractFilterType = function() {
                return contracts_filterContainer.vA.RelativeTime;
            }, RelativeTimeFilterContainerBuilder.prototype.getFilterType = function() {
                return powerbi_models.FilterType.RelativeTime;
            }, RelativeTimeFilterContainerBuilder.\u0275fac = function(t) {
                return new (t || RelativeTimeFilterContainerBuilder)(core["\u0275\u0275inject"](JsonTargetParserService), core["\u0275\u0275inject"](ErrorProvider));
            }, RelativeTimeFilterContainerBuilder.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: RelativeTimeFilterContainerBuilder,
                factory: RelativeTimeFilterContainerBuilder.\u0275fac,
                providedIn: "root"
            }), RelativeTimeFilterContainerBuilder;
        }(RelativeFilterContainerBuilder), FilterContainerProvider = function() {
            function FilterContainerProvider(advancedFilterContainerBuilder, basicFilterContainerBuilder, topNFilterContainerBuilder, relativeDateFilterContainerBuilder, relativeTimeFilterContainerBuilder) {
                this.filterContainerBuilders = [ advancedFilterContainerBuilder, basicFilterContainerBuilder, topNFilterContainerBuilder, relativeDateFilterContainerBuilder, relativeTimeFilterContainerBuilder ];
            }
            return FilterContainerProvider.prototype.tryBuildFilterContainer = function(contract, schema, filter) {
                for (var _i = 0, _a = this.filterContainerBuilders; _i < _a.length; _i++) {
                    var filterContainer = _a[_i].tryBuildFilterContainer(contract, schema, filter);
                    if (filterContainer) return filterContainer;
                }
            }, FilterContainerProvider.\u0275fac = function(t) {
                return new (t || FilterContainerProvider)(core["\u0275\u0275inject"](AdvancedFilterContainerBuilder), core["\u0275\u0275inject"](BasicFilterContainerBuilder), core["\u0275\u0275inject"](TopNFilterContainerBuilder), core["\u0275\u0275inject"](RelativeDateFilterContainerBuilder), core["\u0275\u0275inject"](RelativeTimeFilterContainerBuilder));
            }, FilterContainerProvider.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FilterContainerProvider,
                factory: FilterContainerProvider.\u0275fac,
                providedIn: "root"
            }), FilterContainerProvider;
        }(), dataViewScopeIdentity = __webpack_require__(78843), isMeasure = __webpack_require__(58295);
        function extractParametersFromFilter(semanticFilter, _federatedConceptualSchema, filterExpressionMetadata) {
            if (!semanticFilter) return null;
            var where = semanticFilter.where(), condition = where && where[0] && where[0].condition;
            return (0, sqExprStaticMembers.Hi)(condition) && condition.values && condition.args && (condition.args.length > 1 || 1 === condition.args.length && function(keyColumn, keyColumnValue, filterExpressionMetadata) {
                if (!(0, sqExprStaticMembers.VC)(keyColumnValue)) return !1;
                if (!filterExpressionMetadata || _.isEmpty(filterExpressionMetadata.cachedValueItems)) return !1;
                for (var _i = 0, _a = filterExpressionMetadata.cachedValueItems; _i < _a.length; _i++) {
                    var cache = _a[_i];
                    if (1 === cache.identities.length) {
                        var extractor = new scopeIdentityExtractor.aL;
                        if (cache.identities[0].expr.accept(extractor), 1 === extractor.keys.length && (0, 
                        sqExprEqualityVisitor.fS)(keyColumn, extractor.keys[0]) && keyColumnValue.value === extractor.values[0].value) return !0;
                    }
                }
                return !1;
            }(condition.args[0], condition.values[0][0], filterExpressionMetadata) || 1 === condition.values.length && ((0, 
            isMeasure.k)(condition) || (0, sqExprStaticMembers.ez)(condition.args[0])) || 1 === condition.args.length && condition.values.length > 2 && (0, 
            sqExprStaticMembers.ez)(condition.args[0])) ? {
                args: condition.args,
                values: condition.values
            } : null;
        }
        var getDataViewScopeIdentityComparisonExpr = __webpack_require__(3222), selector = __webpack_require__(32379), hierarchy_filters_utils = __webpack_require__(75600), Telemetry = __webpack_require__(21617), localization_service = __webpack_require__(65181), JSONFilterParserService = function() {
            function JSONFilterParserService(telemetryService, jsonTargetParserService, filterContainerProvider, featureSwitchService, localizationService) {
                this.telemetryService = telemetryService, this.jsonTargetParserService = jsonTargetParserService, 
                this.filterContainerProvider = filterContainerProvider, this.featureSwitchService = featureSwitchService, 
                this.localizationService = localizationService, this.advancedFilterCardConverter = new filterCardConverter.L(localizationService);
            }
            return JSONFilterParserService.prototype.tryCreateSemanticFilter = function(name, schema, filter) {
                var filterContainer = this.tryCreateFilterContainer({
                    filters: [ {
                        name
                    } ]
                }, schema, filter);
                if (filterContainer) return filterContainer.filter;
            }, JSONFilterParserService.prototype.tryCreateJSONFilter = function(filter, schema, filterExpressionMetadata) {
                var simpleFilterArray = semanticQuery.yl.unmerge(filter);
                if (_.isEmpty(simpleFilterArray)) return [];
                for (var filterContainerArray = [], _i = 0, simpleFilterArray_1 = simpleFilterArray; _i < simpleFilterArray_1.length; _i++) {
                    var simpleFilter = simpleFilterArray_1[_i], filterContainer = {
                        name: "filter",
                        filter: simpleFilter
                    }, isFilterContainerInitialized = !1;
                    if (isFilterContainerInitialized || (0, topNFilterPattern.J_)(simpleFilter) && (filterContainer.type = contracts_filterContainer.vA.TopN, 
                    isFilterContainerInitialized = !0), isFilterContainerInitialized || (0, relativeDateFilterPattern.pi)(simpleFilter, relativeDateRange.wj.Date) && (filterContainer.type = contracts_filterContainer.vA.RelativeDate, 
                    isFilterContainerInitialized = !0), isFilterContainerInitialized || (0, relativeDateFilterPattern.pi)(simpleFilter, relativeDateRange.wj.Time) && (filterContainer.type = contracts_filterContainer.vA.RelativeTime, 
                    isFilterContainerInitialized = !0), isFilterContainerInitialized || extractParametersFromFilter(simpleFilter, 0, filterExpressionMetadata) && (filterContainer.type = contracts_filterContainer.vA.Tuple, 
                    filterContainer.filterExpressionMetadata = filterExpressionMetadata, isFilterContainerInitialized = !0), 
                    !isFilterContainerInitialized) {
                        var filterCard = this.advancedFilterCardConverter.fromFilterExpr(simpleFilter.conditions()[0]);
                        filterCard && (filterContainer.type = filterUtils.l.getFilterType(filterCard.field, filterCard.supportsCategorical), 
                        filterContainer.expression = filterCard.field, isFilterContainerInitialized = !0);
                    }
                    if (!isFilterContainerInitialized) return null;
                    filterContainerArray.push(filterContainer);
                }
                return this.tryGetFilters({
                    filters: filterContainerArray
                }, schema);
            }, JSONFilterParserService.prototype.getVisualsInfo = function(visualContainers) {
                var _this = this;
                return visualContainers.map(function(visualContainer) {
                    return _this.getVisualInfo(visualContainer.name, null, visualContainer.config.singleVisual.visualType);
                });
            }, JSONFilterParserService.prototype.tryCreateFilterContainer = function(contract, schema, filter) {
                try {
                    return this.constructFilterContainer(contract, schema, filter);
                } catch (e) {
                    return JsonFilterParserErrors.traceError(e), null;
                }
            }, JSONFilterParserService.prototype.tryConvertJsonFilterArrayToFilterDataArray = function(filters, schema, options) {
                try {
                    return this.convertJsonFilterArrayToFilterDataArray(filters, schema, options);
                } catch (e) {
                    JsonFilterParserErrors.traceError(e);
                }
                return null;
            }, JSONFilterParserService.prototype.tryGetFilters = function(contract, schema) {
                var _this = this;
                if (!contract.filters || 0 === contract.filters.length) return [];
                try {
                    return contract.filters.map(function(filterContainer) {
                        return JsonFilterBuilder.fromSemanticFilter(filterContainer, schema, filterContainer.filter, powerbi_models, _this.telemetryService, _this.localizationService, _this.featureSwitchService);
                    });
                } catch (error) {
                    throw JsonFilterParserErrors.traceError(error), void 0 !== error.message ? {
                        message: error.message
                    } : {
                        message: ErrorMessages.FilterSerializationError
                    };
                }
            }, JSONFilterParserService.prototype.getReportAndPageInfo = function(exploration) {
                return {
                    report: this.getReportInfo(exploration),
                    page: this.getActivePageInfo(exploration),
                    visual: null,
                    dataPoints: null,
                    regions: null,
                    filters: null
                };
            }, JSONFilterParserService.prototype.tryCreateDataViewScopeIdentityFromExpr = function(fieldExpr, jsonValues) {
                try {
                    for (var valuesExpr = [], _i = 0, jsonValues_1 = jsonValues; _i < jsonValues_1.length; _i++) valuesExpr.push(this.buildSQConstantExpr(jsonValues_1[_i]));
                    return (0, dataViewScopeIdentity.TZ)((0, getDataViewScopeIdentityComparisonExpr.R)(fieldExpr, valuesExpr));
                } catch (e) {
                    return null;
                }
            }, JSONFilterParserService.prototype.tryGetSelectedDataPoints = function(exploration, schema, dataPointsDescriptions, visualContainer, visualTitleText) {
                if (!visualContainer || !visualContainer.config || !visualContainer.config.singleVisual) throw {
                    message: ErrorMessages.DataPointSerializationError
                };
                var visualConfig = visualContainer.config.singleVisual;
                try {
                    var filters = this.tryGetFilters(visualContainer, schema);
                    return {
                        report: this.getReportInfo(exploration),
                        page: this.getActivePageInfo(exploration),
                        visual: this.getVisualInfo(visualContainer.name, visualTitleText, visualConfig.visualType),
                        dataPoints: this.getDataPoints(dataPointsDescriptions, schema),
                        regions: null,
                        filters
                    };
                } catch (error) {
                    throw JsonFilterParserErrors.traceError(error), void 0 !== error.message ? {
                        message: error.message
                    } : {
                        message: ErrorMessages.DataPointSerializationError
                    };
                }
            }, JSONFilterParserService.prototype.getValues = function(selectedValues, schema) {
                var _this = this;
                if (!selectedValues) return [];
                var nonEmptySelectedValues = _.filter(selectedValues, function(selectedValue) {
                    return "" !== selectedValue.value;
                });
                return _.map(nonEmptySelectedValues, function(selectedValue) {
                    return {
                        target: _this.jsonTargetParserService.getTarget(selectedValue.expr, schema),
                        value: selectedValue.value,
                        formattedValue: selectedValue.formattedValue
                    };
                });
            }, JSONFilterParserService.prototype.getDataPoints = function(dataPointsDescriptions, schema) {
                var serializedDataPoints = [];
                if (_.isEmpty(dataPointsDescriptions)) return serializedDataPoints;
                for (var _i = 0, dataPointsDescriptions_1 = dataPointsDescriptions; _i < dataPointsDescriptions_1.length; _i++) {
                    var dataPointsDescription = dataPointsDescriptions_1[_i], serializedDataPoint = {
                        identity: [],
                        values: this.getValues(dataPointsDescription.values, schema)
                    }, selectorData = (0, selector.gU)(dataPointsDescription.selector);
                    if (selectorData) for (var fieldVisitor = new JsonFilterBuilder.SemanticFilterFieldVisitor(schema), _a = 0, selectorData_1 = selectorData; _a < selectorData_1.length; _a++) {
                        var data = selectorData_1[_a];
                        if (data.expr) {
                            var comparands = (0, filterScopeIdsCollector.F8)(data);
                            if (!comparands) return serializedDataPoints;
                            for (var _loop_1 = function(comparand) {
                                debug.fF.assert(function() {
                                    return null != comparand.expr;
                                }, "comparand.expr is null");
                                var serializedTarget = comparand.expr.accept(fieldVisitor);
                                serializedDataPoint.identity.push({
                                    target: serializedTarget,
                                    equals: comparand.value
                                });
                            }, _b = 0, comparands_1 = comparands; _b < comparands_1.length; _b++) _loop_1(comparands_1[_b]);
                        }
                    }
                    serializedDataPoints.push(serializedDataPoint);
                }
                return serializedDataPoints;
            }, JSONFilterParserService.prototype.getReportInfo = function(exploration) {
                return exploration && null != exploration.activeSectionIndex || Utility.b$.throwException(JsonFilterParserErrors.invalidReportData()), 
                exploration.report && {
                    id: exploration.report.objectId,
                    displayName: exploration.report.displayName
                };
            }, JSONFilterParserService.prototype.getActivePageInfo = function(exploration) {
                exploration && null != exploration.activeSectionIndex || Utility.b$.throwException(JsonFilterParserErrors.invalidPageData());
                var activeSection = exploration.sections[exploration.activeSectionIndex];
                return {
                    name: activeSection.name,
                    displayName: activeSection.displayName
                };
            }, JSONFilterParserService.prototype.getVisualInfo = function(visualName, visualTitleText, type) {
                var visualInfo = {
                    name: visualName,
                    type
                };
                return visualTitleText && (visualInfo.title = visualTitleText), visualInfo;
            }, JSONFilterParserService.prototype.constructFilterContainer = function(contract, schema, filter) {
                var errors = this.validateFilter(filter);
                errors && Utility.b$.throwException(JsonFilterParserErrors.filterValidationErrors(errors));
                var filterContainer = this.filterContainerProvider.tryBuildFilterContainer(contract, schema, filter);
                return this.updateFilterDisplaySettings(filterContainer, filter.displaySettings), 
                filterContainer;
            }, JSONFilterParserService.prototype.updateFilterDisplaySettings = function(filterContainer, displaySettings) {
                filterContainer && displaySettings && (filterContainer.isLockedInViewMode = displaySettings.isLockedInViewMode, 
                filterContainer.isHiddenInViewMode = displaySettings.isHiddenInViewMode, filterContainer.displayName = displaySettings.displayName);
            }, JSONFilterParserService.prototype.getTupleElementTargetExpressions = function(tupleElementTarget, schema) {
                var fieldExpr = this.jsonTargetParserService.getFieldExpr(tupleElementTarget, schema);
                return fieldExpr || Utility.b$.throwException(JsonFilterParserErrors.fieldNotFound(tupleElementTarget)), 
                this.getFieldExprsForKeys(tupleElementTarget, schema) || [ fieldExpr ];
            }, JSONFilterParserService.prototype.getTupleElementTargetKeyExpressions = function(tupleElementTarget, schema) {
                return this.getFieldExprsForKeys(tupleElementTarget, schema) || [];
            }, JSONFilterParserService.prototype.getTupleElementTargetNonKeyExpression = function(tupleElementTarget, schema) {
                var fieldExpr = this.jsonTargetParserService.getFieldExpr(tupleElementTarget, schema);
                return fieldExpr || Utility.b$.throwException(JsonFilterParserErrors.fieldNotFound(tupleElementTarget)), 
                fieldExpr;
            }, JSONFilterParserService.prototype.getTupleTargetExpressions = function(tupleTarget, schema) {
                for (var tupleTargetExpressions = [], _i = 0, tupleTarget_1 = tupleTarget; _i < tupleTarget_1.length; _i++) tupleTargetExpressions = tupleTargetExpressions.concat(this.getTupleElementTargetExpressions(tupleTarget_1[_i], schema));
                return tupleTargetExpressions;
            }, JSONFilterParserService.prototype.getTupleElementValueExpressions = function(tupleElementValue) {
                var valueExpressions = [];
                if (tupleElementValue.keyValues) for (var _i = 0, _a = tupleElementValue.keyValues; _i < _a.length; _i++) valueExpressions.push(this.buildSQConstantExpr(_a[_i])); else valueExpressions.push(this.buildSQConstantExpr(tupleElementValue.value));
                return valueExpressions;
            }, JSONFilterParserService.prototype.getTupleElementKeyValueExpressions = function(tupleElementValue) {
                var valueExpressions = [];
                if (tupleElementValue.keyValues) for (var _i = 0, _a = tupleElementValue.keyValues; _i < _a.length; _i++) valueExpressions.push(this.buildSQConstantExpr(_a[_i]));
                return valueExpressions;
            }, JSONFilterParserService.prototype.getTupleElementNonKeyValueExpression = function(tupleElementValue) {
                return this.buildSQConstantExpr(tupleElementValue.value);
            }, JSONFilterParserService.prototype.getTupleValueExpressions = function(tupleValue) {
                for (var tupleValueExpressions = [], _i = 0, tupleValue_1 = tupleValue; _i < tupleValue_1.length; _i++) tupleValueExpressions = tupleValueExpressions.concat(this.getTupleElementValueExpressions(tupleValue_1[_i]));
                return tupleValueExpressions;
            }, JSONFilterParserService.prototype.convertJsonFilterArrayToFilterDataArray = function(jsonFilters, schema, options) {
                var _this = this;
                return _.isEmpty(jsonFilters) ? [] : _.map(jsonFilters, function(jsonFilter) {
                    return _this.convertJsonFilterToFilterData(jsonFilter, schema, options);
                });
            }, JSONFilterParserService.prototype.convertJsonFilterToFilterData = function(jsonFilter, schema, options) {
                var fd = {
                    filter: null,
                    type: null,
                    filterExpressionMetadata: null,
                    displayName: null
                };
                if (jsonFilter) if (jsonFilter.filterType === powerbi_models.FilterType.Tuple) fd.type = contracts_filterContainer.vA.Tuple, 
                fd.filter = this.convertJsonTupleFilterToSemanticFilter(jsonFilter, schema), fd.filterExpressionMetadata = this.extractFilterExpressionMetadataFromJsonTupleFilter(jsonFilter, schema); else if ((0, 
                hierarchy_filters_utils.yL)(jsonFilter)) {
                    if (options) {
                        var filterData = (0, hierarchy_filters_utils.Xx)(jsonFilter, options.columns, options.filterExpressionMetadata);
                        fd.filter = filterData.filter, fd.filterExpressionMetadata = filterData.filterExpressionMetadata;
                    }
                } else {
                    var filterContainer = this.constructFilterContainer({
                        filters: [ {
                            name: "Filter"
                        } ]
                    }, schema, jsonFilter);
                    fd.filter = filterContainer && filterContainer.filter;
                }
                return fd;
            }, JSONFilterParserService.prototype.convertJsonTupleFilterToSemanticFilter = function(tupleFilter, schema) {
                for (var tupleTargetExpressions = this.getTupleTargetExpressions(tupleFilter.target, schema), tupleValueExpressionsArray = [], _i = 0, _a = tupleFilter.values; _i < _a.length; _i++) tupleValueExpressionsArray.push(this.getTupleValueExpressions(_a[_i]));
                var inExpr = (0, semanticQuery_sqExpr.Sh)(tupleTargetExpressions, tupleValueExpressionsArray);
                return semanticQuery.yl.fromSQExpr(inExpr);
            }, JSONFilterParserService.prototype.extractFilterExpressionMetadataFromJsonTupleFilter = function(tupleFilter, schema) {
                var fem = {
                    expressions: [],
                    cachedValueItems: []
                };
                return this.populateFilterExpressionMetadata(fem, tupleFilter, schema), fem;
            }, JSONFilterParserService.prototype.populateFilterExpressionMetadata = function(fem, tupleFilter, schema) {
                var _this = this;
                if (_.find(tupleFilter.target, function(tupleElementTarget) {
                    return !_.isEmpty(_this.getTupleElementTargetKeyExpressions(tupleElementTarget, schema));
                })) {
                    var keyExpressions = _.map(tupleFilter.target, function(tupleElementTarget) {
                        return _this.getTupleElementTargetKeyExpressions(tupleElementTarget, schema);
                    });
                    fem.expressions = _.map(tupleFilter.target, function(tupleElementTarget) {
                        return _this.getTupleElementTargetNonKeyExpression(tupleElementTarget, schema);
                    });
                    for (var _i = 0, _a = tupleFilter.values; _i < _a.length; _i++) {
                        for (var tupleFilterValue = _a[_i], cachedValueItem = {
                            identities: [],
                            valueMap: {}
                        }, targetIdx = 0; targetIdx < tupleFilter.target.length; targetIdx++) {
                            var tupleElementValue = tupleFilterValue[targetIdx];
                            _.isString(tupleElementValue.value) ? cachedValueItem.valueMap[targetIdx] = tupleElementValue.value : Utility.b$.throwException(JsonFilterParserErrors.invalidDataType(tupleElementValue.value));
                            var identity = void 0;
                            if (_.isEmpty(keyExpressions[targetIdx])) {
                                var tupleValueNonKeyExpression = this.getTupleElementNonKeyValueExpression(tupleElementValue);
                                identity = (0, filterExpressionMetadataUtils.Pb)([ fem.expressions[targetIdx] ], [ tupleValueNonKeyExpression ]);
                            } else {
                                var tupleValueKeyExpressions = this.getTupleElementKeyValueExpressions(tupleElementValue);
                                identity = (0, filterExpressionMetadataUtils.Pb)(keyExpressions[targetIdx], tupleValueKeyExpressions);
                            }
                            cachedValueItem.identities.push(identity);
                        }
                        fem.cachedValueItems.push(cachedValueItem);
                    }
                }
            }, JSONFilterParserService.prototype.getFieldExprsForKeys = function(target, schema) {
                var _this = this;
                return target && target.keys ? _.map(target.keys, function(key) {
                    return _this.jsonTargetParserService.getFieldExpr(target, schema, key);
                }) : null;
            }, JSONFilterParserService.prototype.buildSQConstantExpr = function(value) {
                var sqExpr;
                if (_.isString(value)) if (null != (0, JsCommon_Date.xv)(value.substr(0, 26))) {
                    var dateValue = (0, JsCommon_Date.xv)(value.substr(0, 26));
                    sqExpr = (0, semanticQuery_sqExpr.CQ)(dateValue);
                } else sqExpr = (0, semanticQuery_sqExpr.fL)(value); else _.isBoolean(value) ? sqExpr = (0, 
                semanticQuery_sqExpr.O7)(value) : _.isNumber(value) ? sqExpr = (0, Double.U)(value) ? (0, 
                semanticQuery_sqExpr.cA)(value) : (0, semanticQuery_sqExpr.tx)(value) : null === value ? sqExpr = (0, 
                semanticQuery_sqExpr.IF)() : Utility.b$.throwException(JsonFilterParserErrors.invalidDataType(value));
                return sqExpr;
            }, JSONFilterParserService.prototype.validateFilter = function(filter) {
                return (0, powerbi_models.validateFilter)(filter);
            }, JSONFilterParserService.\u0275fac = function(t) {
                return new (t || JSONFilterParserService)(core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](JsonTargetParserService), core["\u0275\u0275inject"](FilterContainerProvider), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o));
            }, JSONFilterParserService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: JSONFilterParserService,
                factory: JSONFilterParserService.\u0275fac,
                providedIn: "root"
            }), JSONFilterParserService;
        }(), common = __webpack_require__(77476), providers = [ {
            provide: "jsonTargetParserService",
            useClass: JsonTargetParserService
        }, {
            provide: "filterContainerProvider",
            useClass: FilterContainerProvider
        }, {
            provide: "jsonFilterParserModern",
            useClass: JSONFilterParserService
        } ], JsonContractsModule = function() {
            function JsonContractsModule() {}
            return JsonContractsModule.\u0275fac = function(t) {
                return new (t || JsonContractsModule);
            }, JsonContractsModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: JsonContractsModule
            }), JsonContractsModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers,
                imports: [ common.CommonModule ]
            }), JsonContractsModule;
        }();
    }
} ]);