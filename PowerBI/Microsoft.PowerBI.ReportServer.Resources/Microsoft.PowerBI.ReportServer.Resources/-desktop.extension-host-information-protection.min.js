"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-information-protection" ], {
    48683: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostInformationProtectionModule: function() {
                return ExtensionHostInformationProtectionModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), of = __webpack_require__(11547), combineLatest = __webpack_require__(59017), mergeMap = __webpack_require__(42195), take = __webpack_require__(48787), map = __webpack_require__(14172), catchError = __webpack_require__(59822), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), information_protection_src = __webpack_require__(69388), feature_switch_service = __webpack_require__(94771), core = __webpack_require__(50423), telemetry_service = __webpack_require__(54323), ExtensionHostInformationProtectionEffects = function() {
            function ExtensionHostInformationProtectionEffects(actions$, messageBroker, telemetryService, informationProtectionService, featureSwitchService) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.telemetryService = telemetryService, 
                this.informationProtectionService = informationProtectionService, this.featureSwitchService = featureSwitchService, 
                this.onGetInformationProtectionLabelsReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getInformationProtectionLabels, function() {
                    return _this.ensureInformationProtectionInitializedSuccessfully().pipe((0, mergeMap.zg)(function(success) {
                        if (success) return _this.informationProtectionService.getLabelsList().pipe((0, 
                        take.q)(1), (0, map.U)(function(labels) {
                            return index_core.Vm.getInformationProtectionLabels.resolve({
                                labels
                            });
                        }), (0, catchError.K)(function(error) {
                            return (0, of.of)(index_core.Vm.getInformationProtectionLabels.reject({
                                error
                            }));
                        }));
                        var message = "ensureInformationProtectionInitializedSuccessfully returned false";
                        return _this.telemetryService.logEvent({
                            name: "ExtensionHostEffects.onGetInformationProtectionLabelsReceived",
                            properties: {
                                message
                            }
                        }), (0, of.of)(index_core.Vm.getInformationProtectionLabels.reject({
                            error: message
                        }));
                    }));
                }), this.onGetInformationProtectionUserPolicySettingsReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getInformationProtectionUserPolicySettings, function() {
                    return _this.ensureInformationProtectionInitializedSuccessfully().pipe((0, mergeMap.zg)(function(success) {
                        if (success) return _this.informationProtectionService.getUserPolicySettings().pipe((0, 
                        take.q)(1), (0, map.U)(function(settings) {
                            return index_core.Vm.getInformationProtectionUserPolicySettings.resolve({
                                settings
                            });
                        }));
                        var message = "ensureInformationProtectionInitializedSuccessfully returned false";
                        return _this.telemetryService.logEvent({
                            name: "ExtensionHostEffects.onGetInformationProtectionUserPolicySettingsReceived",
                            properties: {
                                message
                            }
                        }), (0, of.of)(index_core.Vm.getInformationProtectionUserPolicySettings.reject({
                            error: message
                        }));
                    }));
                }), this.onShouldShowInformationProtectionCreateComponentReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.shouldShowInformationProtectionCreateComponent, function() {
                    var _a, isIpCreateComponentEnabled$ = (0, of.of)(null !== (_a = _this.featureSwitchService.featureSwitches.eimSensitivityDropdownCreateReactComponent) && void 0 !== _a && _a), isIpCreateTermsOn$ = _this.informationProtectionService.getUserPolicySettings().pipe((0, 
                    map.U)(function(userPolicySettings) {
                        return !0 === (null == userPolicySettings ? void 0 : userPolicySettings.isLabelingRequired) && _.isEmpty(null == userPolicySettings ? void 0 : userPolicySettings.defaultLabelId);
                    }));
                    return isIpCreateComponentEnabled$.pipe((0, mergeMap.zg)(function(isIpCreateComponentEnabled) {
                        return isIpCreateComponentEnabled ? (0, combineLatest.aj)([ _this.ensureInformationProtectionInitializedSuccessfully(), isIpCreateTermsOn$ ]) : (0, 
                        of.of)([ !1, !1 ]);
                    }), (0, mergeMap.zg)(function(_a) {
                        return (0, of.of)(index_core.Vm.shouldShowInformationProtectionCreateComponent.resolve({
                            show: _a[0] && _a[1]
                        }));
                    }));
                }), this.onGetLabelByArtifactObjectIdReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getLabelByArtifactObjectId, function(_a) {
                    var artifactObjectId = _a.artifactObjectId;
                    return _this.ensureInformationProtectionInitializedSuccessfully().pipe((0, mergeMap.zg)(function(success) {
                        if (success) return _this.informationProtectionService.getOrLoadArtifactInformationProtection(information_protection_src.Bz.Artifact, void 0, artifactObjectId).pipe((0, 
                        take.q)(1), (0, map.U)(function(label) {
                            return index_core.Vm.getLabelByArtifactObjectId.resolve({
                                label
                            });
                        }), (0, catchError.K)(function(error) {
                            return (0, of.of)(index_core.Vm.getLabelByArtifactObjectId.reject({
                                error
                            }));
                        }));
                        var message = "ensureInformationProtectionInitializedSuccessfully returned false";
                        return _this.telemetryService.logEvent({
                            name: "ExtensionHostEffects.onGetLabelByArtifactObjectIdReceived",
                            properties: {
                                message
                            }
                        }), (0, of.of)(index_core.Vm.getLabelByArtifactObjectId.reject({
                            error: message
                        }));
                    }));
                }), this.onInformationProtectionInitializationCheck$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.informationProtectionInitializationCheck, function() {
                    return _this.ensureInformationProtectionInitializedSuccessfully().pipe((0, map.U)(function(result) {
                        return index_core.Vm.informationProtectionInitializationCheck.resolve({
                            isInitialized: result
                        });
                    }));
                });
            }
            return ExtensionHostInformationProtectionEffects.prototype.ensureInformationProtectionInitializedSuccessfully = function() {
                return (0, combineLatest.aj)([ (0, of.of)(this.informationProtectionService.isInformationProtectionSupportedForTridentEnabled()), this.informationProtectionService.isLabelsListLoadingFailed() ]).pipe((0, 
                take.q)(1), (0, map.U)(function(_a) {
                    return _a[0] && !_a[1];
                }));
            }, ExtensionHostInformationProtectionEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostInformationProtectionEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](telemetry_service.t), core["\u0275\u0275inject"](information_protection_src.Gb), core["\u0275\u0275inject"](feature_switch_service.V$));
            }, ExtensionHostInformationProtectionEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostInformationProtectionEffects,
                factory: ExtensionHostInformationProtectionEffects.\u0275fac
            }), ExtensionHostInformationProtectionEffects;
        }(), ExtensionHostInformationProtectionModule = function() {
            function ExtensionHostInformationProtectionModule() {}
            return ExtensionHostInformationProtectionModule.\u0275fac = function(t) {
                return new (t || ExtensionHostInformationProtectionModule);
            }, ExtensionHostInformationProtectionModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostInformationProtectionModule
            }), ExtensionHostInformationProtectionModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostInformationProtectionEffects ]) ]
            }), ExtensionHostInformationProtectionModule;
        }();
    }
} ]);