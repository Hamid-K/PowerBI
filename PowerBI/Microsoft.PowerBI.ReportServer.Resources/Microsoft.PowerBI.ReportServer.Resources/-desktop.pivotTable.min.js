"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "pivotTable" ], {
    52073: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        function getHeaderSpan(item, navigator) {
            var childrenLevel = navigator.getHierarchyDepth(), children = navigator.getChildren(item);
            if (!_.isEmpty(children)) for (var _i = 0, children_1 = children; _i < children_1.length; _i++) childrenLevel = Math.min(childrenLevel, navigator.getLevel(children_1[_i]));
            return childrenLevel - navigator.getLevel(item);
        }
        function getFirstLeaf(item, navigator) {
            return navigator.isLeaf(item) ? item : getFirstLeaf(_.head(navigator.getChildren(item)), navigator);
        }
        function getFirstVisualLeaf(item, navigator) {
            return void 0 !== navigator.getLeafIndex(item) ? item : getFirstVisualLeaf(_.head(navigator.getChildren(item)), navigator);
        }
        function getLastLeaf(item, navigator) {
            return navigator.isLeaf(item) ? item : getLastLeaf(_.last(navigator.getChildren(item)), navigator);
        }
        function getLastVisualLeaf(item, navigator) {
            return void 0 !== navigator.getLeafIndex(item) ? item : getLastVisualLeaf(_.last(navigator.getChildren(item)), navigator);
        }
        function getFirstLeafIndex(item, navigator) {
            return navigator.getLeafIndex(getFirstLeaf(item, navigator));
        }
        function getFirstVisualLeafIndex(item, navigator) {
            return navigator.getLeafIndex(getFirstVisualLeaf(item, navigator));
        }
        function getLastLeafIndex(item, navigator) {
            return navigator.getLeafIndex(getLastLeaf(item, navigator));
        }
        function getLastVisualLeafIndex(item, navigator) {
            return navigator.getLeafIndex(getLastVisualLeaf(item, navigator));
        }
        __webpack_require__.d(__webpack_exports__, {
            LF: function() {
                return getFirstLeafIndex;
            },
            O3: function() {
                return getLastVisualLeafIndex;
            },
            hG: function() {
                return getFirstVisualLeafIndex;
            },
            oj: function() {
                return getLastLeaf;
            },
            pA: function() {
                return getLastLeafIndex;
            },
            zG: function() {
                return getHeaderSpan;
            }
        });
    },
    15366: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            AV: function() {
                return SteppedRowHeightMeasureManager;
            },
            DJ: function() {
                return BlockedRowHeightMeasureManager;
            },
            DX: function() {
                return BlockedRowLevelWidthMeasureManager;
            },
            EO: function() {
                return MeasureColumnSampleCount;
            },
            FA: function() {
                return SteppedRowLevelWidthMeasureManager;
            },
            MN: function() {
                return PageColumnCount;
            },
            Ms: function() {
                return MeasureRowSampleCount;
            },
            Sv: function() {
                return ColumnWidthMeasureManager;
            },
            _E: function() {
                return RowMeasurementUtil;
            },
            hw: function() {
                return PageRowCount;
            },
            sB: function() {
                return ColumnLevelHeightMeasureManager;
            },
            sW: function() {
                return ColumnMeasurementUtil;
            },
            yl: function() {
                return MeasureUtil;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62458), _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52073), _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7911), _pivotTableControlUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(44404), PageColumnCount = 10, MeasureRowSampleCount = 50, PageRowCount = 20, MeasureColumnSampleCount = 20, MeasureUtil = function() {
            function MeasureUtil() {}
            return MeasureUtil.getAncestorsToMeasure = function(item, navigator) {
                for (var ancestorsToMeasure = []; ;) {
                    var parent_1 = navigator.getParent(item);
                    if (!parent_1 || !navigator.isLastItem(item, navigator.getChildren(parent_1))) break;
                    ancestorsToMeasure.push({
                        node: parent_1,
                        size: -1
                    }), item = parent_1;
                }
                return ancestorsToMeasure;
            }, MeasureUtil.getSizeDifference = function(ancestors, lastLeafIndex, navigator, getSize) {
                for (var size = 0, _i = 0, ancestors_1 = ancestors; _i < ancestors_1.length; _i++) size = Math.max(size, this.getItemSizeDifference(ancestors_1[_i], lastLeafIndex, navigator, getSize));
                return size;
            }, MeasureUtil.getItemSizeDifference = function(ancestor, lastLeafIndex, navigator, getSize) {
                for (var leavesSize = 0, index = (0, _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.LF)(ancestor.node, navigator); index <= lastLeafIndex; index++) if ((leavesSize += getSize(index)) >= ancestor.size) return 0;
                return ancestor.size - leavesSize;
            }, MeasureUtil.getPageIndex = function(index, pageItemCount) {
                return Math.floor(index / pageItemCount);
            }, MeasureUtil.itemRangeToPageRange = function(startIndex, endIndex, pageItemCount) {
                var startPageIndex = this.getPageIndex(startIndex, pageItemCount), endPageIndex = this.getPageIndex(endIndex, pageItemCount);
                if (startPageIndex === endPageIndex) return [ {
                    pageIndex: startPageIndex,
                    startIndex: startIndex % pageItemCount,
                    endIndex: endIndex % pageItemCount
                } ];
                var ranges = [];
                ranges.push({
                    pageIndex: startPageIndex,
                    startIndex: startIndex % pageItemCount,
                    endIndex: pageItemCount - 1
                });
                for (var i = startPageIndex + 1; i < endPageIndex; i++) ranges.push({
                    pageIndex: i,
                    startIndex: 0,
                    endIndex: pageItemCount - 1
                });
                return ranges.push({
                    pageIndex: endPageIndex,
                    startIndex: 0,
                    endIndex: endIndex % pageItemCount
                }), ranges;
            }, MeasureUtil;
        }(), RowMeasurementUtil = function() {
            function RowMeasurementUtil() {}
            return RowMeasurementUtil.linesOverlapVertically = function(top1, height1, top2, height2) {
                return !(top2 > top1 + height1 || top2 + height2 < top1);
            }, RowMeasurementUtil.isRowMeasured = function(rowLeafIndex, rowHeightMeasureManager) {
                return this.getMeasuredRowCount(rowHeightMeasureManager) > rowLeafIndex;
            }, RowMeasurementUtil.getMeasuredRowCount = function(rowHeightMeasureManager) {
                var pages = rowHeightMeasureManager.getPageRows();
                return _.isEmpty(pages) ? 0 : (pages.length - 1) * PageRowCount + _.last(pages).getRowHeights().length;
            }, RowMeasurementUtil.remeasureRows = function(binder, rowNavigator, columnNavigator, startRowIndex, endRowIndex, startColumnIndex, rowHeightMeasureManager) {
                for (var _i = 0, ranges_1 = MeasureUtil.itemRangeToPageRange(startRowIndex, endRowIndex, PageRowCount); _i < ranges_1.length; _i++) {
                    var range = ranges_1[_i];
                    rowHeightMeasureManager.measurePage(rowHeightMeasureManager.getPageRows()[range.pageIndex], binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, MeasureColumnSampleCount, range.startIndex, range.endIndex - range.startIndex + 1);
                }
            }, RowMeasurementUtil.getVisibleRowStart = function(visibleRowRange, viewportTop, rowHeightMeasureManager) {
                var firstLeafHeight = rowHeightMeasureManager.getRowHeight(visibleRowRange.firstLeafIndex);
                return {
                    rowIndex: visibleRowRange.firstLeafIndex,
                    visibleHeight: firstLeafHeight - viewportTop + visibleRowRange.firstLeafTop
                };
            }, RowMeasurementUtil.getVisibleRange = function(viewportTop, viewportHeight, rowHeightMeasureManager, minRowCount, rowEnd) {
                var pageResult = this.getVisiblePageRange(viewportTop, viewportHeight, rowHeightMeasureManager);
                if (!pageResult) return null;
                var firstRowResult = this.getFirstVisibleIndex(pageResult.firstPageRow, pageResult.firstPageIndex, pageResult.firstPageTop, viewportTop, viewportHeight);
                if (null != firstRowResult) {
                    var extendedRowEnd, lastRowIndex = this.getLastVisibleIndex(pageResult.lastPageRow, pageResult.lastPageIndex, pageResult.lastPageTop, viewportTop, viewportHeight);
                    if (null != lastRowIndex) return null != minRowCount && minRowCount >= 0 && null != rowEnd && rowEnd >= 0 && (extendedRowEnd = Math.max(lastRowIndex, firstRowResult.leafIndex + minRowCount - 1), 
                    extendedRowEnd = Math.min(extendedRowEnd, rowEnd)), {
                        firstLeafIndex: firstRowResult.leafIndex,
                        firstLeafTop: firstRowResult.top,
                        lastLeafIndex: null != extendedRowEnd ? extendedRowEnd : lastRowIndex
                    };
                }
            }, RowMeasurementUtil.getVisiblePageRange = function(viewportTop, viewportHeight, rowHeightMeasureManager) {
                for (var top = 0, pageIndex = 0, result = null, _i = 0, pageRows_1 = rowHeightMeasureManager.getPageRows(); _i < pageRows_1.length; _i++) {
                    var pageRow = pageRows_1[_i], height = pageRow.getHeight();
                    if (this.linesOverlapVertically(top, height, viewportTop, viewportHeight)) result ? (result.lastPageRow = pageRow, 
                    result.lastPageIndex = pageIndex, result.lastPageTop = top) : result = {
                        firstPageRow: pageRow,
                        firstPageIndex: pageIndex,
                        firstPageTop: top,
                        lastPageRow: pageRow,
                        lastPageIndex: pageIndex,
                        lastPageTop: top
                    }; else if (result) break;
                    top += height, pageIndex++;
                }
                return result;
            }, RowMeasurementUtil.getFirstVisibleIndex = function(pageRow, pageIndex, pageTop, viewportTop, viewportHeight) {
                for (var rowIndex = 0, top = pageTop, _i = 0, _a = pageRow.getRowHeights(); _i < _a.length; _i++) {
                    var rowHeight = _a[_i];
                    if (this.linesOverlapVertically(top, rowHeight, viewportTop, viewportHeight)) return {
                        leafIndex: pageIndex * PageRowCount + rowIndex,
                        top
                    };
                    top += rowHeight, rowIndex++;
                }
            }, RowMeasurementUtil.getLastVisibleIndex = function(pageRow, pageIndex, pageTop, viewportTop, viewportHeight) {
                for (var result, rowIndex = 0, top = pageTop, _i = 0, _a = pageRow.getRowHeights(); _i < _a.length; _i++) {
                    var rowHeight = _a[_i];
                    this.linesOverlapVertically(top, rowHeight, viewportTop, viewportHeight) && (result = pageIndex * PageRowCount + rowIndex), 
                    top += rowHeight, rowIndex++;
                }
                return result;
            }, RowMeasurementUtil.getBounds = function(rowIndex, rowHeightMeasureManager) {
                var pageIndex = MeasureUtil.getPageIndex(rowIndex, PageRowCount);
                if (!(pageIndex >= rowHeightMeasureManager.getPageRows().length)) {
                    for (var page = rowHeightMeasureManager.getPageRows()[pageIndex], offset = rowHeightMeasureManager.getPageRowTop(page), index = rowIndex % PageRowCount, i = 0; i < index; i++) offset += page.getRowHeights()[i];
                    return {
                        top: offset,
                        height: page.getRowHeights()[index]
                    };
                }
            }, RowMeasurementUtil.getOffset = function(alignedRow, rowHeightMeasureManager) {
                var bounds = this.getBounds(alignedRow.rowIndex, rowHeightMeasureManager);
                return bounds ? alignedRow.alignBottom ? alignedRow.visibleHeight >= bounds.height ? bounds.top + bounds.height : bounds.top + alignedRow.visibleHeight : alignedRow.visibleHeight >= bounds.height ? bounds.top : bounds.top + bounds.height - alignedRow.visibleHeight : 0;
            }, RowMeasurementUtil;
        }(), ColumnMeasurementUtil = function() {
            function ColumnMeasurementUtil() {}
            return ColumnMeasurementUtil.linesOverlapHorizontally = function(left1, width1, left2, width2) {
                return !(left2 > left1 + width1 || left2 + width2 < left1);
            }, ColumnMeasurementUtil.isColumnMeasured = function(columnLeafIndex, columnWidthMeasureManager) {
                return this.getMeasuredColumnCount(columnWidthMeasureManager) > columnLeafIndex;
            }, ColumnMeasurementUtil.getMeasuredColumnCount = function(columnWidthMeasureManager) {
                var pages = columnWidthMeasureManager.getPageColumns();
                return _.isEmpty(pages) ? 0 : (pages.length - 1) * PageColumnCount + _.last(pages).getColumnWidths().length;
            }, ColumnMeasurementUtil.remeasureColumn = function(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex, columnwidthMeasureManager) {
                var page = columnwidthMeasureManager.getPageColumn(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex);
                columnwidthMeasureManager.measurePage(page, binder, rowNavigator, columnNavigator, startRowIndex, MeasureRowSampleCount, columnLeafIndex % PageColumnCount, 1);
            }, ColumnMeasurementUtil.getVisibleColumnStart = function(visibleColumnRange, viewportLeft, columnWidthMeasureManager) {
                var firstLeafWidth = columnWidthMeasureManager.getColumnWidth(visibleColumnRange.firstLeafIndex);
                return {
                    columnIndex: visibleColumnRange.firstLeafIndex,
                    visibleWidth: firstLeafWidth - viewportLeft + visibleColumnRange.firstLeafLeft
                };
            }, ColumnMeasurementUtil.getVisibleRange = function(viewportLeft, viewportWidth, columnWidthMeasureManager, minColumnCount, columnEnd) {
                var pageResult = this.getVisiblePageRange(viewportLeft, viewportWidth, columnWidthMeasureManager);
                if (!pageResult) return null;
                var firstColumnResult = this.getFirstVisibleIndex(pageResult.firstPageColumn, pageResult.firstPageIndex, pageResult.firstPageLeft, viewportLeft, viewportWidth);
                if (null != firstColumnResult) {
                    var extendedColumnEnd, lastcolumnIndex = this.getLastVisibleIndex(pageResult.lastPageColumn, pageResult.lastPageIndex, pageResult.lastPageLeft, viewportLeft, viewportWidth);
                    if (null != lastcolumnIndex) return null != minColumnCount && minColumnCount >= 0 && null != columnEnd && columnEnd >= 0 && (extendedColumnEnd = Math.max(lastcolumnIndex, firstColumnResult.leafIndex + minColumnCount - 1), 
                    extendedColumnEnd = Math.min(extendedColumnEnd, columnEnd)), {
                        firstLeafIndex: firstColumnResult.leafIndex,
                        firstLeafLeft: firstColumnResult.left,
                        lastLeafIndex: null != extendedColumnEnd ? extendedColumnEnd : lastcolumnIndex
                    };
                }
            }, ColumnMeasurementUtil.getVisiblePageRange = function(viewportLeft, viewportWidth, columnWidthMeasureManager) {
                for (var left = 0, pageIndex = 0, result = null, _i = 0, _a = columnWidthMeasureManager.getPageColumns(); _i < _a.length; _i++) {
                    var pageColumn = _a[_i], width = pageColumn.getWidth();
                    if (this.linesOverlapHorizontally(left, width, viewportLeft, viewportWidth)) result ? (result.lastPageColumn = pageColumn, 
                    result.lastPageIndex = pageIndex, result.lastPageLeft = left) : result = {
                        firstPageColumn: pageColumn,
                        firstPageIndex: pageIndex,
                        firstPageLeft: left,
                        lastPageColumn: pageColumn,
                        lastPageIndex: pageIndex,
                        lastPageLeft: left
                    }; else if (result) break;
                    left += width, pageIndex++;
                }
                return result;
            }, ColumnMeasurementUtil.getFirstVisibleIndex = function(pageColumn, pageIndex, pageLeft, viewportLeft, viewportWidth) {
                for (var columnIndex = 0, left = pageLeft, _i = 0, _a = pageColumn.getColumnWidths(); _i < _a.length; _i++) {
                    var columnWidth = _a[_i];
                    if (this.linesOverlapHorizontally(left, columnWidth, viewportLeft, viewportWidth)) return {
                        leafIndex: pageIndex * PageColumnCount + columnIndex,
                        left
                    };
                    left += columnWidth, columnIndex++;
                }
                return null;
            }, ColumnMeasurementUtil.getLastVisibleIndex = function(pageColumn, pageIndex, pageLeft, viewportLeft, viewportWidth) {
                for (var result, columnIndex = 0, left = pageLeft, _i = 0, _a = pageColumn.getColumnWidths(); _i < _a.length; _i++) {
                    var columnWidth = _a[_i];
                    this.linesOverlapHorizontally(left, columnWidth, viewportLeft, viewportWidth) && (result = pageIndex * PageColumnCount + columnIndex), 
                    left += columnWidth, columnIndex++;
                }
                return result;
            }, ColumnMeasurementUtil.getBounds = function(columnIndex, columnWidthMeasureManager) {
                var pageIndex = MeasureUtil.getPageIndex(columnIndex, PageColumnCount);
                if (!(pageIndex >= columnWidthMeasureManager.getPageColumns().length)) {
                    for (var page = columnWidthMeasureManager.getPageColumns()[pageIndex], offset = columnWidthMeasureManager.getPageColumnLeft(page), index = columnIndex % PageColumnCount, columnWidths = page.getColumnWidths(), i = 0; i < index; i++) offset += columnWidths[i];
                    return {
                        left: offset,
                        width: columnWidths[index]
                    };
                }
            }, ColumnMeasurementUtil.getOffset = function(alignedColumn, columnWidthMeasureManager) {
                var bounds = this.getBounds(alignedColumn.columnIndex, columnWidthMeasureManager);
                return bounds ? alignedColumn.alignRight ? alignedColumn.visibleWidth >= bounds.width ? bounds.left + bounds.width : bounds.left + alignedColumn.visibleWidth : alignedColumn.visibleWidth >= bounds.width ? bounds.left : bounds.left + bounds.width - alignedColumn.visibleWidth : 0;
            }, ColumnMeasurementUtil;
        }(), ColumnWidthMeasureManager = function() {
            function ColumnWidthMeasureManager(measureElement, sizeManager) {
                this.pageColumns = [], this.measureElement = measureElement, this.sizeManager = sizeManager;
            }
            return ColumnWidthMeasureManager.prototype.canAddPageColumn = function(columnNavigator) {
                return this.pageColumns.length < this.getMaxPageColumnCount(columnNavigator);
            }, ColumnWidthMeasureManager.prototype.getMaxPageColumnCount = function(columnNavigator) {
                return Math.ceil(columnNavigator.getHierarchyLeafCount() / PageColumnCount);
            }, ColumnWidthMeasureManager.prototype.getPageColumns = function() {
                return this.pageColumns;
            }, ColumnWidthMeasureManager.prototype.getPageColumnStartIndex = function(pageColumn) {
                var index = this.pageColumns.indexOf(pageColumn);
                return -1 === index ? -1 : index * PageColumnCount;
            }, ColumnWidthMeasureManager.prototype.getPageColumnLeft = function(pageColumn) {
                for (var left = 0, _i = 0, _a = this.pageColumns; _i < _a.length; _i++) {
                    var currentPageColumn = _a[_i];
                    if (pageColumn === currentPageColumn) break;
                    left += currentPageColumn.getWidth();
                }
                return left;
            }, ColumnWidthMeasureManager.prototype.getColumnsWidth = function() {
                for (var width = 0, _i = 0, _a = this.pageColumns; _i < _a.length; _i++) width += _a[_i].getWidth();
                return width;
            }, ColumnWidthMeasureManager.prototype.clear = function() {
                this.pageColumns = [];
            }, ColumnWidthMeasureManager.prototype.measureNextPage = function(binder, rowNavigator, columnNavigator, startRowIndex) {
                var pageColumn = new _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.VG;
                this.getPageColumns().push(pageColumn), this.measurePage(pageColumn, binder, rowNavigator, columnNavigator, startRowIndex, MeasureRowSampleCount);
            }, ColumnWidthMeasureManager.prototype.getWidestCellBindingString = function(columnItem, floatingRowItems, binder, rowNavigator, columnNavigator, rowCount, startRowIndex) {
                for (var widest = {
                    item: null,
                    width: -1
                }, j = 0; j < rowCount; j++) this.updateWidestItemFromBodyCell(rowNavigator.getHierarchyLeafAt(j + startRowIndex), columnItem, binder, rowNavigator, widest);
                if (floatingRowItems) {
                    var floatingLeafCount = rowNavigator.getFloatingHierarchyLeafCount();
                    for (j = 0; j < floatingLeafCount; j++) this.updateWidestItemFromBodyCell(rowNavigator.getFloatingHierarchyLeafAt(j), columnItem, binder, rowNavigator, widest);
                }
                var cellBinding, width = binder.getApproximateColumnHeaderWidth(columnItem);
                return width > widest.width && (widest.item = columnItem, widest.width = width), 
                cellBinding = widest.item === columnItem ? binder.getColumnHeaderBinding(widest.item, !0) : binder.getBodyCellBinding(widest.item, !0), 
                _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cellBinding, ColumnWidthMeasureManager.measureRequiredStyle);
            }, ColumnWidthMeasureManager.prototype.measurePage = function(pageColumn, binder, rowNavigator, columnNavigator, startRowIndex, rowSampleCount, startOffset, columnCount) {
                var pageColumnStartIndex = this.getPageColumnStartIndex(pageColumn);
                void 0 === startOffset && (startOffset = 0), void 0 === columnCount && (columnCount = Math.min(columnNavigator.getHierarchyLeafCount() - pageColumnStartIndex, PageColumnCount) + startOffset);
                for (var rowCount = Math.min(rowNavigator.getHierarchyLeafCount() - startRowIndex, rowSampleCount), cellsString = "", floatingRowItems = rowNavigator.getFloatingHierarchyItems(), i = 0; i < columnCount; i++) {
                    var columnItem = columnNavigator.getHierarchyLeafAt(i + startOffset + pageColumnStartIndex);
                    void 0 === (pageColumn.getColumnWidths()[i + startOffset] = this.sizeManager.getColumnWidth(columnItem)) && (cellsString += this.getWidestCellBindingString(columnItem, floatingRowItems, binder, rowNavigator, columnNavigator, rowCount, startRowIndex));
                }
                if (cellsString) {
                    this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                    var current = this.measureElement.firstChild;
                    for (i = 0; i < columnCount; i++) void 0 === pageColumn.getColumnWidths()[i + startOffset] && (pageColumn.getColumnWidths()[i + startOffset] = current.offsetWidth + 1, 
                    current = current.nextSibling);
                    this.measureElement.innerHTML = "", this.adjustItemsWidth(pageColumn, binder, columnNavigator, pageColumnStartIndex, startOffset, columnCount);
                }
            }, ColumnWidthMeasureManager.prototype.updateWidestItemFromBodyCell = function(rowItem, columnItem, binder, rowNavigator, widest) {
                var bodyCell = rowNavigator.getIntersection(rowItem, columnItem), width = binder.getApproximateBodyCellWidth(bodyCell);
                width > widest.width && (widest.item = bodyCell, widest.width = width);
            }, ColumnWidthMeasureManager.prototype.adjustItemsWidth = function(pageColumn, binder, columnNavigator, columnPageStartIndex, startOffset, columnCount) {
                for (var i = 0; i < columnCount; i++) {
                    var columnItem = columnNavigator.getHierarchyLeafAt(i + startOffset + columnPageStartIndex);
                    void 0 === this.sizeManager.getColumnWidth(columnItem) && this.adjustItemWidth(pageColumn, i + startOffset, columnPageStartIndex, binder, columnNavigator, columnItem);
                }
            }, ColumnWidthMeasureManager.prototype.adjustItemWidth = function(pageColumn, columnIndex, pageStartColumnIndex, binder, columnNavigator, columnItem) {
                var _this = this, ancestors = MeasureUtil.getAncestorsToMeasure(columnItem, columnNavigator);
                _.isEmpty(ancestors) || (this.measureAncestors(ancestors, binder), pageColumn.getColumnWidths()[columnIndex] += MeasureUtil.getSizeDifference(ancestors, columnIndex + pageStartColumnIndex, columnNavigator, function(index) {
                    return _this.getColumnWidth(index);
                }));
            }, ColumnWidthMeasureManager.prototype.measureAncestors = function(ancestors, binder) {
                for (var cellsString = "", _i = 0, ancestors_2 = ancestors; _i < ancestors_2.length; _i++) {
                    var binding = binder.getColumnHeaderBinding(ancestors_2[_i].node, !0);
                    cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(binding, ColumnWidthMeasureManager.measureRequiredStyle);
                }
                this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                for (var current = this.measureElement.firstChild, _a = 0, ancestors_3 = ancestors; _a < ancestors_3.length; _a++) ancestors_3[_a].size = current.offsetWidth + 1, 
                current = current.nextSibling;
                this.measureElement.innerHTML = "";
            }, ColumnWidthMeasureManager.prototype.getColumnWidth = function(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex) {
                return this.getPageColumn(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex).getColumnWidths()[columnLeafIndex % PageColumnCount];
            }, ColumnWidthMeasureManager.prototype.setColumnWidth = function(columnLeafIndex, width) {
                this.getPageColumn(columnLeafIndex).getColumnWidths()[columnLeafIndex % PageColumnCount] = width;
            }, ColumnWidthMeasureManager.prototype.getPageColumn = function(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex) {
                var pageColumnIndex = this.getPageIndex(columnLeafIndex);
                if (binder && pageColumnIndex >= this.pageColumns.length) for (var pageCountToMeasure = pageColumnIndex - this.pageColumns.length + 1, i = 0; i < pageCountToMeasure; i++) this.measureNextPage(binder, rowNavigator, columnNavigator, startRowIndex);
                return this.pageColumns[pageColumnIndex];
            }, ColumnWidthMeasureManager.prototype.getPageIndex = function(columnIndex) {
                return MeasureUtil.getPageIndex(columnIndex, PageColumnCount);
            }, ColumnWidthMeasureManager.prototype.getLastMeasuredIndex = function() {
                var numPageColumns = this.pageColumns.length;
                if (0 === numPageColumns) return -1;
                var lastPageColumn = _.last(this.pageColumns);
                return (numPageColumns - 1) * PageColumnCount + (lastPageColumn.getColumnWidths().length - 1);
            }, ColumnWidthMeasureManager.measureRequiredStyle = {
                "box-sizing": "border-box",
                display: "inline-flex"
            }, ColumnWidthMeasureManager;
        }(), RowHeightMeasureManager = function() {
            function RowHeightMeasureManager(measureElement, columnWidthMeasureManager, rowLevelWidthMeasureManager, sizeManager) {
                this.pageRows = [], this.measureElement = measureElement, this.columnWidthMeasureManager = columnWidthMeasureManager, 
                this.rowLevelWidthMeasureManager = rowLevelWidthMeasureManager, this.sizeManager = sizeManager;
            }
            return RowHeightMeasureManager.prototype.clear = function() {
                this.pageRows = [], this.clearFloatingRows();
            }, RowHeightMeasureManager.prototype.clearFloatingRows = function() {
                this.floatingPageRow = new _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.BJ;
            }, RowHeightMeasureManager.prototype.ensureLastPageComplete = function(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, columnSampleCount) {
                if (0 === this.pageRows.length) return -1;
                var index = this.pageRows.length - 1, lastPage = this.pageRows[index], originalCount = lastPage.getRowHeights().length;
                return originalCount < PageRowCount && this.gotMoreRows(lastPage, rowNavigator) && (this.measurePage(lastPage, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, columnSampleCount, lastPage.getRowHeights().length - 1), 
                lastPage.getRowHeights().length > originalCount) ? index : -1;
            }, RowHeightMeasureManager.prototype.measureNextPage = function(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex) {
                var pageRow = new _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.BJ;
                this.getPageRows().push(pageRow), this.measurePage(pageRow, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, MeasureColumnSampleCount);
            }, RowHeightMeasureManager.prototype.measureFloatingRows = function(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, onObject, showTotalPlaceHolders) {
                if (_.isEmpty(this.floatingPageRow.getRowHeights())) {
                    var floatingRowItems = rowNavigator.getFloatingHierarchyItems();
                    if (!_.isEmpty(floatingRowItems)) {
                        for (var columnCount = Math.min(columnNavigator.getHierarchyLeafCount() - startColumnIndex, MeasureColumnSampleCount), cellsString = "", floatingLeafCount = rowNavigator.getFloatingHierarchyLeafCount(), i = 0; i < floatingLeafCount; i++) {
                            var floatingLeaf = rowNavigator.getFloatingHierarchyLeafAt(i);
                            this.floatingPageRow.getRowHeights()[i] = this.sizeManager.getRowHeight(floatingLeaf), 
                            void 0 === this.floatingPageRow.getRowHeights()[i] && (cellsString += this.getHeighestCellBindingString(floatingLeaf, binder, rowNavigator, columnNavigator, columnCount, startColumnIndex, startRowIndex, onObject, showTotalPlaceHolders));
                        }
                        if (cellsString) {
                            this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                            var current = this.measureElement.firstChild;
                            for (i = 0; i < floatingLeafCount; i++) void 0 === this.floatingPageRow.getRowHeights()[i] && (this.floatingPageRow.getRowHeights()[i] = current.offsetHeight, 
                            current = current.nextSibling);
                            this.measureElement.innerHTML = "", this.adjustItemsHeight(this.floatingPageRow, binder, rowNavigator, 0, 0, floatingLeafCount);
                        }
                    }
                }
            }, RowHeightMeasureManager.prototype.getPageIndex = function(rowIndex) {
                return MeasureUtil.getPageIndex(rowIndex, PageRowCount);
            }, RowHeightMeasureManager.prototype.getMeasureRequiredStyle = function(width) {
                return {
                    "box-sizing": "border-box",
                    width: (0, _pivotTableControlUtils__WEBPACK_IMPORTED_MODULE_2__.S)(width)
                };
            }, RowHeightMeasureManager.prototype.gotMoreRows = function(pageRow, rowNavigator) {
                return rowNavigator.getHierarchyLeafCount() - this.getPageRowStartIndex(pageRow) - pageRow.getRowHeights().length > 0;
            }, RowHeightMeasureManager.prototype.measurePage = function(pageRow, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, columnSampleCount, startOffset, rowCount) {
                var pageStartRowIndex = this.getPageRowStartIndex(pageRow);
                void 0 === startOffset && (startOffset = 0), void 0 === rowCount && (rowCount = Math.min(rowNavigator.getHierarchyLeafCount() - pageStartRowIndex, PageRowCount) - startOffset);
                for (var columnCount = Math.min(columnNavigator.getHierarchyLeafCount() - startColumnIndex, columnSampleCount), cellsString = "", i = 0; i < rowCount; i++) {
                    var rowItem = rowNavigator.getHierarchyLeafAt(i + startOffset + pageStartRowIndex);
                    void 0 === (pageRow.getRowHeights()[i + startOffset] = this.sizeManager.getRowHeight(rowItem)) && (cellsString += this.getHeighestCellBindingString(rowItem, binder, rowNavigator, columnNavigator, columnCount, startColumnIndex, startRowIndex));
                }
                if (cellsString) {
                    this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                    var current = this.measureElement.firstChild;
                    for (i = 0; i < rowCount; i++) void 0 === pageRow.getRowHeights()[i + startOffset] && (pageRow.getRowHeights()[i + startOffset] = current.offsetHeight, 
                    current = current.nextSibling);
                    this.measureElement.innerHTML = "", this.adjustItemsHeight(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount);
                }
            }, RowHeightMeasureManager.prototype.getHeighestCellBindingString = function(rowItem, binder, rowNavigator, columnNavigator, columnCount, startColumnIndex, startRowIndex, onObject, showTotalPlaceHolders) {
                for (var heighestItem = {
                    item: null,
                    width: -1,
                    height: -1
                }, j = 0; j < columnCount; j++) {
                    var columnItem = columnNavigator.getHierarchyLeafAt(j + startColumnIndex), cellItem = rowNavigator.getIntersection(rowItem, columnItem), cellWidth = this.columnWidthMeasureManager.getColumnWidth(j + startColumnIndex, binder, rowNavigator, columnNavigator, startRowIndex), height_1 = binder.getApproximateBodyCellHeight(cellItem, cellWidth);
                    height_1 > heighestItem.height && (heighestItem.item = cellItem, heighestItem.width = cellWidth, 
                    heighestItem.height = height_1);
                }
                var cellBinding, rowItemWidth = this.getItemWidth(rowItem, rowNavigator), height = binder.getApproximateRowHeaderHeight(rowItem, rowItemWidth);
                return height > heighestItem.height && (heighestItem.item = rowItem, heighestItem.height = height, 
                heighestItem.width = rowItemWidth), cellBinding = heighestItem.item === rowItem ? binder.getRowHeaderBinding(heighestItem.item, !0) : binder.getBodyCellBinding(heighestItem.item, !0, void 0, void 0, void 0, onObject, void 0, showTotalPlaceHolders), 
                _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cellBinding, this.getMeasureRequiredStyle(heighestItem.width));
            }, RowHeightMeasureManager.prototype.getItemWidth = function(rowItem, rowNavigator) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertFail("abstract method"), 
                0;
            }, RowHeightMeasureManager.prototype.adjustItemsHeight = function(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertFail("abstract method");
            }, RowHeightMeasureManager.prototype.getMaxPageRowCount = function(rowNavigator) {
                return Math.ceil(rowNavigator.getHierarchyLeafCount() / PageRowCount);
            }, RowHeightMeasureManager.prototype.getPageRows = function() {
                return this.pageRows;
            }, RowHeightMeasureManager.prototype.getFloatingPageRow = function() {
                return this.floatingPageRow;
            }, RowHeightMeasureManager.prototype.getFloatingRowHeights = function() {
                return _.sum(this.floatingPageRow.getRowHeights());
            }, RowHeightMeasureManager.prototype.canAddPageRow = function(rowNavigator) {
                return this.pageRows.length < this.getMaxPageRowCount(rowNavigator);
            }, RowHeightMeasureManager.prototype.getPageRowStartIndex = function(pageRow) {
                if (pageRow === this.floatingPageRow) return 0;
                var index = this.pageRows.indexOf(pageRow);
                return -1 === index ? -1 : index * PageRowCount;
            }, RowHeightMeasureManager.prototype.getPageRowTop = function(pageRow) {
                if (pageRow === this.floatingPageRow) return 0;
                for (var top = 0, _i = 0, _a = this.pageRows; _i < _a.length; _i++) {
                    var currentPageRow = _a[_i];
                    if (pageRow === currentPageRow) break;
                    top += currentPageRow.getHeight();
                }
                return top;
            }, RowHeightMeasureManager.prototype.getRowsHeight = function() {
                for (var height = 0, _i = 0, _a = this.pageRows; _i < _a.length; _i++) height += _a[_i].getHeight();
                return height;
            }, RowHeightMeasureManager.prototype.getRowHeight = function(rowLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex) {
                return this.getPageRow(rowLeafIndex, binder, rowNavigator, columnNavigator, startColumnIndex).getRowHeights()[rowLeafIndex % PageRowCount];
            }, RowHeightMeasureManager.prototype.getFloatingRowHeight = function(rowLeafIndex) {
                return this.floatingPageRow.getRowHeights()[rowLeafIndex];
            }, RowHeightMeasureManager.prototype.getPageRow = function(rowLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex) {
                var pageRowIndex = this.getPageIndex(rowLeafIndex);
                if (binder && pageRowIndex > this.pageRows.length) for (var pageCountToMeasure = pageRowIndex - this.pageRows.length + 1, i = 0; i < pageCountToMeasure; i++) this.measureNextPage(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex);
                return this.pageRows[pageRowIndex];
            }, RowHeightMeasureManager.prototype.getLastMeasuredIndex = function() {
                var numPageRows = this.pageRows.length;
                if (0 === numPageRows) return -1;
                var lastPageRow = _.last(this.pageRows);
                return (numPageRows - 1) * PageRowCount + (lastPageRow.getRowHeights().length - 1);
            }, RowHeightMeasureManager;
        }(), BlockedRowHeightMeasureManager = function(_super) {
            function BlockedRowHeightMeasureManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(BlockedRowHeightMeasureManager, _super), 
            BlockedRowHeightMeasureManager.prototype.getItemWidth = function(rowItem, rowNavigator) {
                return this.rowLevelWidthMeasureManager.getWidth(rowNavigator.getLevel(rowItem), (0, 
                _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.zG)(rowItem, rowNavigator));
            }, BlockedRowHeightMeasureManager.prototype.adjustItemsHeight = function(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount) {
                for (var i = 0; i < rowCount; i++) {
                    var rowItem = rowNavigator.getHierarchyLeafAt(i + startOffset + pageStartRowIndex);
                    void 0 === this.sizeManager.getRowHeight(rowItem) && this.adjustItemHeight(pageRow, i + startOffset, pageStartRowIndex, binder, rowNavigator, rowItem);
                }
            }, BlockedRowHeightMeasureManager.prototype.adjustItemHeight = function(pageRow, rowIndex, pageStartRowIndex, binder, rowNavigator, rowItem) {
                var _this = this, ancestors = MeasureUtil.getAncestorsToMeasure(rowItem, rowNavigator);
                _.isEmpty(ancestors) || (this.measureAncestors(ancestors, binder, rowNavigator), 
                pageRow.getRowHeights()[rowIndex] += MeasureUtil.getSizeDifference(ancestors, pageStartRowIndex + rowIndex, rowNavigator, function(index) {
                    return pageRow === _this.getFloatingPageRow() ? _this.getFloatingRowHeight(index) : _this.getRowHeight(index);
                }));
            }, BlockedRowHeightMeasureManager.prototype.measureAncestors = function(ancestors, binder, rowNavigator) {
                for (var cellsString = "", _i = 0, ancestors_4 = ancestors; _i < ancestors_4.length; _i++) {
                    var binding = binder.getRowHeaderBinding((ancestor = ancestors_4[_i]).node, !0);
                    cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(binding, this.getMeasureRequiredStyle(this.getItemWidth(ancestor.node, rowNavigator)));
                }
                this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                for (var current = this.measureElement.firstChild, _a = 0, ancestors_5 = ancestors; _a < ancestors_5.length; _a++) {
                    var ancestor;
                    (ancestor = ancestors_5[_a]).size = current.offsetHeight, current = current.nextSibling;
                }
                this.measureElement.innerHTML = "";
            }, BlockedRowHeightMeasureManager;
        }(RowHeightMeasureManager), SteppedRowHeightMeasureManager = function(_super) {
            function SteppedRowHeightMeasureManager() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(SteppedRowHeightMeasureManager, _super), 
            SteppedRowHeightMeasureManager.prototype.getItemWidth = function(rowItem, rowNavigator) {
                return this.rowLevelWidthMeasureManager.getLevelWidth(rowNavigator.getLevel(rowItem));
            }, SteppedRowHeightMeasureManager.prototype.adjustItemsHeight = function(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount) {}, 
            SteppedRowHeightMeasureManager;
        }(RowHeightMeasureManager), ColumnLevelHeightMeasureManager = function() {
            function ColumnLevelHeightMeasureManager(measureElement, columnWidthMeasureManager, rowLevelWidthMeasureManager, sizeManager) {
                this.columnLevelHeights = [], this.measureElement = measureElement, this.columnWidthMeasureManager = columnWidthMeasureManager, 
                this.rowLevelWidthMeasureManager = rowLevelWidthMeasureManager, this.sizeManager = sizeManager;
            }
            return ColumnLevelHeightMeasureManager.prototype.clear = function() {
                this.columnLevelHeights = [];
            }, ColumnLevelHeightMeasureManager.prototype.getMeasureRequiredStyle = function(width) {
                return {
                    "box-sizing": "border-box",
                    width: (0, _pivotTableControlUtils__WEBPACK_IMPORTED_MODULE_2__.S)(width)
                };
            }, ColumnLevelHeightMeasureManager.prototype.measure = function(binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount, levelToMeasure) {
                if (0 === this.columnLevelHeights.length) {
                    for (var context = {
                        done: !1,
                        levels: [],
                        spanningHeaders: [],
                        leafCount: 0
                    }, columnHierarchyDepth = columnNavigator.getHierarchyDepth(), rowHierarchyDepth = rowNavigator.getHierarchyDepth(), i_1 = 0; i_1 < columnHierarchyDepth; i_1++) void 0 !== levelToMeasure && levelToMeasure !== i_1 || (this.columnLevelHeights[i_1] = this.sizeManager.getColumnLevelHeight(rowNavigator.getCorner(rowHierarchyDepth - 1, i_1))), 
                    context.levels.push({
                        largestItem: null,
                        isHeader: !0,
                        largestItemWidth: -1,
                        largestItemHeight: -1
                    });
                    var columnHierarchy = columnNavigator.getHierarchyItems();
                    columnHierarchy && this.getHeighestColumnHeaders(columnHierarchy, context, binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount);
                    for (var rowLevel = 0; rowLevel < rowHierarchyDepth; rowLevel++) for (var columnLevel = 0; columnLevel < columnHierarchyDepth; columnLevel++) if (void 0 === this.columnLevelHeights[columnLevel]) {
                        var cornerCell = rowNavigator.getCorner(rowLevel, columnLevel), cornerCellwidth = this.rowLevelWidthMeasureManager.getLevelWidth(rowLevel), height = binder.getApproximateCornerCellHeight(cornerCell, cornerCellwidth);
                        height > context.levels[columnLevel].largestItemHeight && (context.levels[columnLevel].isHeader = !1, 
                        context.levels[columnLevel].largestItem = cornerCell, context.levels[columnLevel].largestItemHeight = height, 
                        context.levels[columnLevel].largestItemWidth = cornerCellwidth);
                    }
                    for (var cellsString = "", _i = 0, _a = context.levels; _i < _a.length; _i++) if ((level = _a[_i]).largestItem) {
                        var requiredStyles = this.getMeasureRequiredStyle(level.largestItemWidth);
                        if (level.isHeader) {
                            var cell = binder.getColumnHeaderBinding(level.largestItem, !0);
                            cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cell, requiredStyles);
                        } else cell = binder.getCornerCellBinding(level.largestItem, !0), cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cell, requiredStyles);
                    }
                    if (cellsString) {
                        this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                        for (var current = this.measureElement.firstChild, i = 0, _b = 0, _c = context.levels; _b < _c.length; _b++) {
                            var level;
                            (level = _c[_b]).largestItem && (void 0 !== levelToMeasure && levelToMeasure !== i || (this.columnLevelHeights[i] = current.offsetHeight), 
                            current = current.nextSibling), i++;
                        }
                        this.measureElement.innerHTML = "", this.adjustLevelHeightsFromSpanningHeaders(context, binder, rowNavigator, columnNavigator, rowStartIndex);
                    }
                }
            }, ColumnLevelHeightMeasureManager.prototype.adjustLevelHeightsFromSpanningHeaders = function(context, binder, rowNavigator, columnNavigator, rowStartIndex) {
                for (var cellsString = "", _i = 0, _a = context.spanningHeaders; _i < _a.length; _i++) if (context.levels[(node = _a[_i]).levelToAdjust].largestItem) {
                    var requiredStyles = this.getMeasureRequiredStyle(this.getHeaderWidth(node.item, binder, rowNavigator, columnNavigator, rowStartIndex)), cell = binder.getColumnHeaderBinding(node.item, !0);
                    cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cell, requiredStyles);
                }
                if (cellsString) {
                    this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                    for (var current = this.measureElement.firstChild, _b = 0, _c = context.spanningHeaders; _b < _c.length; _b++) {
                        var node;
                        context.levels[(node = _c[_b]).levelToAdjust].largestItem && (this.adjustLevelFromSpanningHeader(node.item, node.level, node.levelToAdjust, current.offsetHeight, columnNavigator), 
                        current = current.nextSibling);
                    }
                    this.measureElement.innerHTML = "";
                }
            }, ColumnLevelHeightMeasureManager.prototype.adjustLevelFromSpanningHeader = function(header, itemLevel, levelToAdjust, itemHeight, columnNavigator) {
                for (var spanningHeight = 0, level = itemLevel; level <= levelToAdjust; level++) spanningHeight += this.getLevelHeight(level);
                itemHeight > spanningHeight && (this.columnLevelHeights[levelToAdjust] += itemHeight - spanningHeight);
            }, ColumnLevelHeightMeasureManager.prototype.getHeighestColumnHeaders = function(items, context, binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount) {
                for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                    var item = items_1[_i];
                    if (context.done) return;
                    var isLeaf = columnNavigator.isLeaf(item), level = columnNavigator.getLevel(item), span = (0, 
                    _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.zG)(item, columnNavigator), included = (0, 
                    _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.pA)(item, columnNavigator) >= columnStartIndex;
                    if (included) if (1 === span) {
                        if (void 0 === this.columnLevelHeights[level]) {
                            var itemWidth = this.getHeaderWidth(item, binder, rowNavigator, columnNavigator, rowStartIndex), height = binder.getApproximateColumnHeaderHeight(item, itemWidth);
                            height > context.levels[level].largestItemHeight && (context.levels[level].largestItem = item, 
                            context.levels[level].largestItemHeight = height, context.levels[level].largestItemWidth = itemWidth);
                        }
                    } else context.spanningHeaders.push({
                        item,
                        level,
                        levelToAdjust: span + level - 1
                    });
                    var children = columnNavigator.getChildren(item);
                    children && this.getHeighestColumnHeaders(children, context, binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount), 
                    isLeaf && included && context.leafCount++, context.leafCount === columnSampleCount && (context.done = !0);
                }
            }, ColumnLevelHeightMeasureManager.prototype.getHeadersHeight = function() {
                for (var totalHeight = 0, _i = 0, _a = this.columnLevelHeights; _i < _a.length; _i++) totalHeight += _a[_i];
                return totalHeight;
            }, ColumnLevelHeightMeasureManager.prototype.getLevelTop = function(level) {
                for (var top = 0, i = 0; i < level; i++) top += this.columnLevelHeights[i];
                return top;
            }, ColumnLevelHeightMeasureManager.prototype.getLevelHeight = function(level) {
                return this.columnLevelHeights[level];
            }, ColumnLevelHeightMeasureManager.prototype.getHeaderWidth = function(item, binder, rowNavigator, columnNavigator, rowStartIndex) {
                for (var firstLeafIndex = (0, _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.LF)(item, columnNavigator), lastLeafIndex = (0, 
                _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.pA)(item, columnNavigator), width = 0, index = firstLeafIndex; index <= lastLeafIndex; index++) width += this.columnWidthMeasureManager.getColumnWidth(index, binder, rowNavigator, columnNavigator, rowStartIndex);
                return width;
            }, ColumnLevelHeightMeasureManager;
        }(), BlockedRowLevelWidthMeasureManager = function() {
            function BlockedRowLevelWidthMeasureManager(measureElement, sizeManager) {
                this.rowLevelWidths = [], this.measureElement = measureElement, this.sizeManager = sizeManager;
            }
            return BlockedRowLevelWidthMeasureManager.prototype.clear = function() {
                this.rowLevelWidths = [];
            }, BlockedRowLevelWidthMeasureManager.prototype.measure = function(binder, rowNavigator, columnNavigator, startRowIndex, rowSampleCount, levelToMeasure) {
                if (0 === this.rowLevelWidths.length || void 0 !== levelToMeasure) {
                    for (var context = {
                        done: !1,
                        levels: [],
                        spanningHeaders: [],
                        leafCount: 0
                    }, rowHierarchyDepth = rowNavigator.getHierarchyDepth(), columnHierarchyDepth = columnNavigator.getHierarchyDepth(), i_2 = 0; i_2 < rowHierarchyDepth; i_2++) void 0 !== levelToMeasure && levelToMeasure !== i_2 || (this.rowLevelWidths[i_2] = this.sizeManager.getRowLevelWidth(rowNavigator.getCorner(i_2, columnHierarchyDepth - 1))), 
                    context.levels.push({
                        largestItem: null,
                        isHeader: !0,
                        largestItemWidth: -1,
                        largestItemHeight: -1
                    });
                    this.getWidestRowHeaders(rowNavigator.getHierarchyItems(), context, binder, rowNavigator, startRowIndex, rowSampleCount);
                    var floatingRowItems = rowNavigator.getFloatingHierarchyItems();
                    _.isEmpty(floatingRowItems) || (context.done = !1, context.leafCount = 0, this.getWidestRowHeaders(floatingRowItems, context, binder, rowNavigator, -1, rowNavigator.getFloatingHierarchyLeafCount()));
                    for (var columnLevel = 0; columnLevel < columnHierarchyDepth; columnLevel++) for (var rowLevel = 0; rowLevel < rowHierarchyDepth; rowLevel++) if (void 0 === this.rowLevelWidths[rowLevel]) {
                        var cornerCell = rowNavigator.getCorner(rowLevel, columnLevel), width = binder.getApproximateCornerCellWidth(cornerCell);
                        width > context.levels[rowLevel].largestItemWidth && (context.levels[rowLevel].isHeader = !1, 
                        context.levels[rowLevel].largestItem = cornerCell, context.levels[rowLevel].largestItemWidth = width);
                    }
                    for (var cellsString = "", _i = 0, _a = context.levels; _i < _a.length; _i++) if ((level = _a[_i]).largestItem) if (level.isHeader) {
                        var cellBinding = binder.getRowHeaderBinding(level.largestItem, !0);
                        cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cellBinding, BlockedRowLevelWidthMeasureManager.measureRequiredStyles);
                    } else cellBinding = binder.getCornerCellBinding(level.largestItem, !0), cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cellBinding, BlockedRowLevelWidthMeasureManager.measureRequiredStyles);
                    if (cellsString) {
                        this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                        for (var current = this.measureElement.firstChild, i = 0, _b = 0, _c = context.levels; _b < _c.length; _b++) {
                            var level;
                            (level = _c[_b]).largestItem && (void 0 !== levelToMeasure && levelToMeasure !== i || (this.rowLevelWidths[i] = current.offsetWidth + 1), 
                            current = current.nextSibling), i++;
                        }
                        this.measureElement.innerHTML = "", this.adjustLevelWidthsFromSpanningHeaders(context, binder, rowNavigator);
                    }
                }
            }, BlockedRowLevelWidthMeasureManager.prototype.adjustLevelWidthsFromSpanningHeaders = function(context, binder, rowNavigator) {
                for (var cellsString = "", _i = 0, _a = context.spanningHeaders; _i < _a.length; _i++) if (context.levels[(node = _a[_i]).levelToAdjust].largestItem) {
                    var cell = binder.getRowHeaderBinding(node.item, !0);
                    cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cell, BlockedRowLevelWidthMeasureManager.measureRequiredStyles);
                }
                if (cellsString) {
                    this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                    for (var current = this.measureElement.firstChild, _b = 0, _c = context.spanningHeaders; _b < _c.length; _b++) {
                        var node;
                        context.levels[(node = _c[_b]).levelToAdjust].largestItem && (this.adjustLevelWidthFromSpanningHeader(node.item, node.level, node.levelToAdjust, current.offsetWidth, rowNavigator), 
                        current = current.nextSibling);
                    }
                    this.measureElement.innerHTML = "";
                }
            }, BlockedRowLevelWidthMeasureManager.prototype.adjustLevelWidthFromSpanningHeader = function(header, itemLevel, levelToAdjust, itemWidth, rowNavigator) {
                for (var spanningWidth = 0, level = itemLevel; level <= levelToAdjust; level++) spanningWidth += this.getLevelWidth(level);
                itemWidth > spanningWidth && (this.rowLevelWidths[levelToAdjust] += itemWidth - spanningWidth);
            }, BlockedRowLevelWidthMeasureManager.prototype.getWidestRowHeaders = function(items, context, binder, rowNavigator, startRowIndex, rowSampleCount) {
                for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                    var item = items_2[_i];
                    if (context.done) return;
                    var isLeaf = rowNavigator.isLeaf(item), level = rowNavigator.getLevel(item), span = (0, 
                    _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.zG)(item, rowNavigator), include = (0, 
                    _iPivotTableHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.pA)(item, rowNavigator) >= startRowIndex;
                    if (include) if (1 === span) {
                        if (void 0 === this.rowLevelWidths[level]) {
                            var width = binder.getApproximateRowHeaderWidth(item);
                            width > context.levels[level].largestItemWidth && (context.levels[level].largestItem = item, 
                            context.levels[level].largestItemWidth = width);
                        }
                    } else context.spanningHeaders.push({
                        item,
                        level,
                        levelToAdjust: span + level - 1
                    });
                    var children = rowNavigator.getChildren(item);
                    children && this.getWidestRowHeaders(children, context, binder, rowNavigator, startRowIndex, rowSampleCount), 
                    isLeaf && include && context.leafCount++, context.leafCount === rowSampleCount && (context.done = !0);
                }
            }, BlockedRowLevelWidthMeasureManager.prototype.getHeadersWidth = function() {
                for (var totalWidth = 0, _i = 0, _a = this.rowLevelWidths; _i < _a.length; _i++) totalWidth += _a[_i];
                return totalWidth;
            }, BlockedRowLevelWidthMeasureManager.prototype.getLevelLeft = function(level) {
                for (var left = 0, i = 0; i < level; i++) left += this.rowLevelWidths[i];
                return left;
            }, BlockedRowLevelWidthMeasureManager.prototype.getLevelWidth = function(level) {
                return this.rowLevelWidths[level];
            }, BlockedRowLevelWidthMeasureManager.prototype.setLevelWidth = function(level, width) {
                this.rowLevelWidths[level] = width;
            }, BlockedRowLevelWidthMeasureManager.prototype.getWidth = function(level, columnSpan) {
                for (var width = 0, i = level; i < level + columnSpan; i++) width += this.getLevelWidth(i);
                return width;
            }, BlockedRowLevelWidthMeasureManager.measureRequiredStyles = {
                "box-sizing": "border-box",
                display: "inline-flex"
            }, BlockedRowLevelWidthMeasureManager;
        }(), SteppedRowLevelWidthMeasureManager = function() {
            function SteppedRowLevelWidthMeasureManager(measureElement, sizeManager) {
                this.measureElement = measureElement, this.sizeManager = sizeManager;
            }
            return SteppedRowLevelWidthMeasureManager.prototype.clear = function() {
                this.width = void 0;
            }, SteppedRowLevelWidthMeasureManager.prototype.getHeaderBindingString = function(rowItem, binder) {
                var cellBinding = binder.getRowHeaderBinding(rowItem, !0);
                return _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cellBinding, BlockedRowLevelWidthMeasureManager.measureRequiredStyles);
            }, SteppedRowLevelWidthMeasureManager.prototype.measure = function(binder, rowNavigator, columnNavigator, startRowIndex, rowSampleCount, levelToMeasure) {
                if ((void 0 === this.width || void 0 !== levelToMeasure) && (this.width = this.sizeManager.getRowLevelWidth(rowNavigator.getCorner(0, columnNavigator.getHierarchyDepth() - 1)), 
                void 0 === this.width)) {
                    for (var cellsString = "", rowCount = Math.min(rowNavigator.getHierarchyLeafCount() - startRowIndex, rowSampleCount), i = 0; i < rowCount; i++) cellsString += this.getHeaderBindingString(rowNavigator.getHierarchyLeafAt(i + startRowIndex), binder);
                    var floatingHierarchyItems = rowNavigator.getFloatingHierarchyItems();
                    if (!_.isEmpty(floatingHierarchyItems)) {
                        var floatingLeafCount = rowNavigator.getFloatingHierarchyLeafCount();
                        for (i = 0; i < floatingLeafCount; i++) cellsString += this.getHeaderBindingString(rowNavigator.getFloatingHierarchyLeafAt(i), binder);
                    }
                    if (rowNavigator.getHierarchyDepth() > 0) for (i = 0; i < columnNavigator.getHierarchyDepth(); i++) {
                        var cornerItem = rowNavigator.getCorner(0, i), cellBinding = binder.getCornerCellBinding(cornerItem, !0);
                        cellsString += _pivotTablePage__WEBPACK_IMPORTED_MODULE_1__.bG.build(cellBinding, BlockedRowLevelWidthMeasureManager.measureRequiredStyles);
                    }
                    this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                    for (var current = this.measureElement.firstChild, width = 0; current; ) width = Math.max(width, current.offsetWidth + 1), 
                    current = current.nextSibling;
                    this.measureElement.innerHTML = "", this.width = width;
                }
            }, SteppedRowLevelWidthMeasureManager.prototype.getHeadersWidth = function() {
                return this.width;
            }, SteppedRowLevelWidthMeasureManager.prototype.getLevelWidth = function(rowLevel) {
                return this.width;
            }, SteppedRowLevelWidthMeasureManager.prototype.setLevelWidth = function(level, width) {
                this.width = width;
            }, SteppedRowLevelWidthMeasureManager.prototype.getLevelLeft = function(level) {
                return 0;
            }, SteppedRowLevelWidthMeasureManager;
        }();
    },
    87914: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            yv: function() {
                return PivotTableControlAutoMeasureDelay;
            },
            zf: function() {
                return ScrollbarWidth;
            }
        });
        var ScrollbarWidth = 9, PivotTableControlAutoMeasureDelay = 250;
    },
    79465: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            BM: function() {
                return PivotTableRenderingMode;
            },
            aP: function() {
                return TablixRegion;
            },
            p0: function() {
                return TablixSection;
            },
            xU: function() {
                return RowHeaderType;
            },
            y2: function() {
                return RenderType;
            }
        });
        var PivotTableRenderingMode = function(PivotTableRenderingMode) {
            return PivotTableRenderingMode[PivotTableRenderingMode.Incremental = 0] = "Incremental", 
            PivotTableRenderingMode[PivotTableRenderingMode.ClearRendering = 1] = "ClearRendering", 
            PivotTableRenderingMode[PivotTableRenderingMode.ClearMeasurement = 2] = "ClearMeasurement", 
            PivotTableRenderingMode[PivotTableRenderingMode.ClearMeasurementOnly = 3] = "ClearMeasurementOnly", 
            PivotTableRenderingMode[PivotTableRenderingMode.ResizeColumn = 4] = "ResizeColumn", 
            PivotTableRenderingMode;
        }({}), TablixSection = function(TablixSection) {
            return TablixSection[TablixSection.Header = 0] = "Header", TablixSection[TablixSection.Body = 1] = "Body", 
            TablixSection[TablixSection.Footer = 2] = "Footer", TablixSection[TablixSection.FooterHeader = 3] = "FooterHeader", 
            TablixSection[TablixSection.MatrixRowHeader = 4] = "MatrixRowHeader", TablixSection[TablixSection.MatrixCorner = 5] = "MatrixCorner", 
            TablixSection;
        }({}), RenderType = function(RenderType) {
            return RenderType[RenderType.Table = 0] = "Table", RenderType[RenderType.Matrix = 1] = "Matrix", 
            RenderType;
        }({}), RowHeaderType = function(RowHeaderType) {
            return RowHeaderType[RowHeaderType.Blocked = 0] = "Blocked", RowHeaderType[RowHeaderType.Stepped = 1] = "Stepped", 
            RowHeaderType;
        }({}), TablixRegion = function(TablixRegion) {
            return TablixRegion[TablixRegion.Prefix = 0] = "Prefix", TablixRegion[TablixRegion.Main = 1] = "Main", 
            TablixRegion;
        }({});
    },
    44404: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            S: function() {
                return pixelUnits;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458);
        function pixelUnits(value) {
            return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(null != value, "value should be defined"), 
            0 === value ? value.toString() : value + "px";
        }
    },
    7911: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            BJ: function() {
                return PivotTablePageRow;
            },
            VG: function() {
                return PivotTablePageColumn;
            },
            bG: function() {
                return ElementBuilder;
            }
        });
        var _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(55007), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _VisualsCommon_Utility_zone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79602), PivotTablePageColumn = function() {
            function PivotTablePageColumn() {
                this.columnWidths = [];
            }
            return PivotTablePageColumn.prototype.getColumnWidths = function() {
                return this.columnWidths;
            }, PivotTablePageColumn.prototype.getWidth = function() {
                return _.sum(this.columnWidths);
            }, PivotTablePageColumn;
        }(), PivotTablePageRow = function() {
            function PivotTablePageRow() {
                this.rowHeights = [];
            }
            return PivotTablePageRow.prototype.getRowHeights = function() {
                return this.rowHeights;
            }, PivotTablePageRow.prototype.getHeight = function() {
                return _.sum(this.rowHeights);
            }, PivotTablePageRow.prototype.clear = function() {
                this.rowHeights = [];
            }, PivotTablePageRow;
        }(), ElementBuilder = function() {
            function ElementBuilder() {}
            return ElementBuilder.build = function(elementBinding, requiredStyles) {
                if (void 0 === requiredStyles && (requiredStyles = {}), null === elementBinding.tagName) return elementBinding.content;
                var tagName = elementBinding.tagName || "div", str = "<" + tagName + " " + this.buildAttributes(elementBinding.attributes) + this.buildClassNames(elementBinding.classNames) + this.buildStyles(elementBinding.styleProperties, requiredStyles) + ">";
                if (_.isEmpty(elementBinding.children)) null != elementBinding.content && (str += elementBinding.content); else for (var _i = 0, _a = elementBinding.children; _i < _a.length; _i++) str += ElementBuilder.build(_a[_i], null);
                return str + "</" + tagName + ">";
            }, ElementBuilder.buildMultiple = function(elementBindings) {
                return _.map(elementBindings, function(elementBinding) {
                    return ElementBuilder.build(elementBinding);
                }).join("");
            }, ElementBuilder.buildAttributes = function(attributes) {
                var str = "";
                if (attributes) for (var name_1 in attributes) str += name_1 + "=" + _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.u3 + attributes[name_1] + _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.u3;
                return str;
            }, ElementBuilder.buildClassNames = function(classNames) {
                if (!classNames || 0 === classNames.length) return "";
                for (var str = 'class="', _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) str += classNames_1[_i] + " ";
                return str + '"';
            }, ElementBuilder.buildStyles = function(styles, requiredStyles) {
                var hasRequiredStyles = !_.isEmpty(requiredStyles), hasStyles = !_.isEmpty(styles);
                if (!hasRequiredStyles && !hasStyles) return "";
                var str = "style=" + _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.u3;
                if (hasStyles) for (var name_2 in styles) str += name_2 + ":" + styles[name_2] + ";";
                if (hasRequiredStyles) for (var name_3 in requiredStyles) str += name_3 + ":" + requiredStyles[name_3] + ";";
                return str + _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.u3;
            }, ElementBuilder.attachEventHandlers = function(element, binding) {
                if (binding.clickHandler && element.addEventListener("click", function(event) {
                    return binding.clickHandler(event);
                }), binding.contextMenuHandler && element.addEventListener("contextmenu", function(event) {
                    return binding.contextMenuHandler(event);
                }), binding.scrollHandler && _VisualsCommon_Utility_zone__WEBPACK_IMPORTED_MODULE_1__.l.runOutsideAngular(function() {
                    element.addEventListener("scroll", function(event) {
                        return binding.scrollHandler(event);
                    });
                }), !_.isEmpty(binding.children)) {
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assert(function() {
                        return binding.children.length === element.childNodes.length;
                    }, "Element children mismatch");
                    for (var i = 0; i < binding.children.length; i++) null !== binding.children[i].tagName && ElementBuilder.attachEventHandlers(element.childNodes[i], binding.children[i]);
                }
            }, ElementBuilder.attachEventHandlersMultiple = function(firstElement, bindings) {
                var element = firstElement;
                bindings.forEach(function(binding) {
                    ElementBuilder.attachEventHandlers(element, binding), element = element.nextElementSibling;
                });
            }, ElementBuilder;
        }();
    },
    24133: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            d: function() {
                return TablixControl;
            }
        });
        var tslib_es6 = __webpack_require__(81337), focusManager_helpers = __webpack_require__(11034), debug = __webpack_require__(62458), browserUtils = __webpack_require__(59107), promise = __webpack_require__(98094), zone = __webpack_require__(79602), scrollbar = __webpack_require__(44102), tablixUtils1 = __webpack_require__(93340), tablixConstants = __webpack_require__(71090), iPivotTableHierarchyNavigator = __webpack_require__(52073), measurement = __webpack_require__(15366), pivotTableControlUtils = __webpack_require__(44404), pivotTableControlConstants = __webpack_require__(87914), pivotTableControlTypes = __webpack_require__(79465), pivotTableHierarchyNavigator = __webpack_require__(11184), PivotTableFocusManager = function() {
            function PivotTableFocusManager(onFocusChangedHandler, isA11yTable, isA11yMatrix) {
                this.onFocusChangedHandler = onFocusChangedHandler, this.isA11yTable = isA11yTable, 
                this.isA11yMatrix = isA11yMatrix;
            }
            return Object.defineProperty(PivotTableFocusManager.prototype, "CurrentFocus", {
                get: function() {
                    return this.currentFocus;
                },
                enumerable: !1,
                configurable: !0
            }), PivotTableFocusManager.prototype.updateMeasureManagers = function(rowHeightMeasureManager, columnWidthMeasureManager) {
                this.rowHeightMeasureManager = rowHeightMeasureManager, this.columnWidthMeasureManager = columnWidthMeasureManager;
            }, PivotTableFocusManager.prototype.setAsFocusTableEx = function(rowIndex, columnIndex, section, hierarchyIndices) {
                debug.fF.assert(function() {
                    return null != rowIndex || section !== pivotTableControlTypes.p0.Body;
                }, "body cells need row index"), section === pivotTableControlTypes.p0.Header ? this.currentFocus = hierarchyIndices ? {
                    columnHeader: hierarchyIndices
                } : {
                    columnHeader: [ columnIndex ]
                } : section === pivotTableControlTypes.p0.Body ? this.currentFocus = {
                    bodyCell: {
                        rowIndex,
                        columnIndex
                    }
                } : section === pivotTableControlTypes.p0.Footer ? this.currentFocus = {
                    floatingBodyCell: {
                        rowIndex: null != rowIndex ? rowIndex : 0,
                        columnIndex
                    }
                } : section === pivotTableControlTypes.p0.FooterHeader ? this.currentFocus = {
                    floatingRowHeader: rowIndex
                } : section === pivotTableControlTypes.p0.MatrixCorner ? this.currentFocus = {
                    cornerCell: {
                        rowLevel: columnIndex,
                        columnLevel: rowIndex
                    }
                } : section === pivotTableControlTypes.p0.MatrixRowHeader ? this.currentFocus = hierarchyIndices ? {
                    rowHeader: hierarchyIndices
                } : {
                    rowHeader: [ rowIndex ]
                } : debug.fF.assertNever(section), this.updateFocusedItem();
            }, PivotTableFocusManager.prototype.updateFocusedItem = function() {
                if (debug.fF.assertValue(this.currentFocus, "No current focus"), this.currentFocus.columnHeader && -1 === this.currentFocus.columnHeader[0] || this.currentFocus.bodyCell && -1 === this.currentFocus.bodyCell.columnIndex || this.currentFocus.floatingBodyCell && -1 === this.currentFocus.floatingBodyCell.columnIndex) this.currentFocus.item = void 0; else {
                    if (this.currentFocus.bodyCell) {
                        var rowLeaf = this.rowNavigator.getHierarchyLeafAt(this.currentFocus.bodyCell.rowIndex), columnLeaf = this.columnNavigator.getHierarchyLeafAt(this.currentFocus.bodyCell.columnIndex);
                        debug.fF.assertValue(rowLeaf, "row leaf not found"), debug.fF.assertValue(columnLeaf, "column leaf not found"), 
                        this.currentFocus.item = this.rowNavigator.getIntersection(rowLeaf, columnLeaf);
                    } else this.currentFocus.columnHeader ? this.currentFocus.item = this.columnNavigator.getNodeFromPath(this.currentFocus.columnHeader) : this.currentFocus.rowHeader ? this.currentFocus.item = this.rowNavigator.getNodeFromPath(this.currentFocus.rowHeader) : this.currentFocus.cornerCell ? this.currentFocus.item = this.rowNavigator.getCorner(this.currentFocus.cornerCell.rowLevel, this.currentFocus.cornerCell.columnLevel) : this.currentFocus.floatingBodyCell ? (rowLeaf = this.rowNavigator.getFloatingHierarchyLeafAt(this.currentFocus.floatingBodyCell.rowIndex), 
                    columnLeaf = this.columnNavigator.getHierarchyLeafAt(this.currentFocus.floatingBodyCell.columnIndex), 
                    debug.fF.assertValue(rowLeaf, "row leaf not found"), debug.fF.assertValue(columnLeaf, "column leaf not found"), 
                    this.currentFocus.item = this.rowNavigator.getIntersection(rowLeaf, columnLeaf)) : void 0 !== this.currentFocus.floatingRowHeader ? this.currentFocus.item = this.rowNavigator.getFloatingHierarchyLeafAt(this.currentFocus.floatingRowHeader) : debug.fF.assertFail("unexpected focus state");
                    debug.fF.assertValue(this.currentFocus, "Undefined focused item");
                }
            }, PivotTableFocusManager.prototype.moveFocus = function(direction, hasCtrl, isA11yTable, isA11yMatrix, numberOfVisibleRows, keyboardEvent) {
                debug.fF.assertValue(this.currentFocus, "No initial focus");
                var cacheCurrentFocus = this.currentFocus;
                this.currentFocus.bodyCell ? this.currentFocus = this.moveBodyCellFocusTableEx(direction, hasCtrl, numberOfVisibleRows, isA11yMatrix) : this.currentFocus.rowHeader ? this.currentFocus = this.moveRowHeaderFocusTableEx(direction, hasCtrl, numberOfVisibleRows, keyboardEvent) : this.currentFocus.columnHeader ? this.currentFocus = this.moveColumnHeaderFocusTableEx(direction, hasCtrl, isA11yMatrix) : this.currentFocus.cornerCell ? this.currentFocus = this.moveCornerCellFocusTableEx(direction, hasCtrl) : void 0 !== this.currentFocus.floatingRowHeader ? this.currentFocus = this.moveFloatingRowHeaderFocusTableEx(direction, hasCtrl) : this.currentFocus.floatingBodyCell && (this.currentFocus = this.moveFloatingBodyCellFocusTableEx(direction, hasCtrl)), 
                debug.fF.assertValue(this.currentFocus, "Undefined new focus"), this.updateFocusedItem(), 
                this.onFocusChangedHandler && this.onFocusChangedHandler(), this.previousFocus = cacheCurrentFocus;
            }, PivotTableFocusManager.prototype.moveBodyCellFocusTableEx = function(direction, hasCtrl, numVisibleRows, isA11yMatrix) {
                var rowIndex = this.currentFocus.bodyCell.rowIndex, columnIndex = this.currentFocus.bodyCell.columnIndex, hasFooter = this.rowNavigator.getFloatingHierarchyLeafCount() > 0, isSelectionCell = -1 === columnIndex, numPageRows = this.rowHeightMeasureManager.getPageRows().length, lastPageRow = _.last(this.rowHeightMeasureManager.getPageRows()), lastRowIndex = (numPageRows - 1) * measurement.hw + (lastPageRow.getRowHeights().length - 1), numPageColumns = this.columnWidthMeasureManager.getPageColumns().length, lastPageColumn = _.last(this.columnWidthMeasureManager.getPageColumns()), lastColumnIndex = (numPageColumns - 1) * measurement.MN + (lastPageColumn.getColumnWidths().length - 1);
                if (hasCtrl) {
                    if ("home" === direction) return isA11yMatrix ? {
                        cornerCell: {
                            rowLevel: 0,
                            columnLevel: 0
                        }
                    } : {
                        columnHeader: [ 0 ]
                    };
                    if ("end" === direction) return isA11yMatrix ? this.getBottomRightCell() : hasFooter ? {
                        floatingBodyCell: {
                            rowIndex: 0,
                            columnIndex: lastColumnIndex
                        }
                    } : {
                        bodyCell: {
                            rowIndex: lastRowIndex,
                            columnIndex: lastColumnIndex
                        }
                    };
                    if ("up" === direction) return isA11yMatrix ? {
                        columnHeader: [ this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(columnIndex))[0] ]
                    } : isSelectionCell ? {
                        bodyCell: {
                            rowIndex: 0,
                            columnIndex
                        }
                    } : {
                        columnHeader: [ columnIndex ]
                    };
                    if ("down" === direction) return isSelectionCell || !hasFooter ? {
                        bodyCell: {
                            rowIndex: lastRowIndex,
                            columnIndex
                        }
                    } : {
                        floatingBodyCell: {
                            rowIndex: this.rowNavigator.getFloatingHierarchyLeafCount() - 1,
                            columnIndex
                        }
                    };
                    if ("left" === direction) return isA11yMatrix ? {
                        rowHeader: [ this.rowNavigator.getPathIndices(this.rowNavigator.getHierarchyLeafAt(rowIndex))[0] ]
                    } : {
                        bodyCell: {
                            rowIndex,
                            columnIndex: 0
                        }
                    };
                    if ("right" === direction) return {
                        bodyCell: {
                            rowIndex,
                            columnIndex: lastColumnIndex
                        }
                    };
                } else {
                    if ("home" === direction) {
                        if (isA11yMatrix) {
                            var rowLeaf = this.rowNavigator.getHierarchyLeafAt(rowIndex), header = this.rowNavigator.getLeafAncestorAtLevel(rowLeaf, 0);
                            return {
                                rowHeader: this.rowNavigator.getPathIndices(header)
                            };
                        }
                        return {
                            bodyCell: {
                                rowIndex,
                                columnIndex: 0
                            }
                        };
                    }
                    if ("end" === direction) return isA11yMatrix ? {
                        bodyCell: {
                            rowIndex,
                            columnIndex: this.columnWidthMeasureManager.getLastMeasuredIndex()
                        }
                    } : {
                        bodyCell: {
                            rowIndex,
                            columnIndex: lastColumnIndex
                        }
                    };
                    if ("pageup" === direction && numVisibleRows) return {
                        bodyCell: {
                            rowIndex: targetRowIndex = Math.max(this.prevNonblankRowIndex(rowIndex - numVisibleRows + 1), 0),
                            columnIndex
                        }
                    };
                    if ("pagedown" === direction && numVisibleRows) {
                        var lastNonblankRowIndex = this.prevNonblankRowIndex(lastRowIndex + 1);
                        return {
                            bodyCell: {
                                rowIndex: targetRowIndex = Math.min(this.nextNonblankRowIndex(rowIndex + numVisibleRows - 1), lastNonblankRowIndex),
                                columnIndex
                            }
                        };
                    }
                    if ("up" === direction) return (targetRowIndex = this.prevNonblankRowIndex(rowIndex)) < 0 ? isSelectionCell ? {
                        bodyCell: {
                            rowIndex: 0,
                            columnIndex
                        }
                    } : isA11yMatrix && this.columnNavigator.hasHierarchy() ? {
                        columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(columnIndex))
                    } : {
                        columnHeader: [ columnIndex ]
                    } : {
                        bodyCell: {
                            rowIndex: targetRowIndex,
                            columnIndex
                        }
                    };
                    if ("down" === direction) {
                        var targetRowIndex;
                        if (!((targetRowIndex = this.nextNonblankRowIndex(rowIndex)) > lastRowIndex)) return {
                            bodyCell: {
                                rowIndex: targetRowIndex,
                                columnIndex
                            }
                        };
                        if (isSelectionCell || !hasFooter && !isA11yMatrix) return {
                            bodyCell: {
                                rowIndex: lastRowIndex,
                                columnIndex
                            }
                        };
                        if (!isA11yMatrix || hasFooter) return {
                            floatingBodyCell: {
                                rowIndex: 0,
                                columnIndex
                            }
                        };
                    }
                    if ("left" === direction) return isA11yMatrix && 0 === columnIndex ? this.rowNavigator.hasHierarchy() ? {
                        rowHeader: this.rowNavigator.getPathIndices(this.rowNavigator.getHierarchyLeafAt(rowIndex))
                    } : {
                        rowHeader: [ rowIndex ]
                    } : {
                        bodyCell: {
                            rowIndex,
                            columnIndex: Math.max(columnIndex - 1, -1)
                        }
                    };
                    if ("right" === direction) return {
                        bodyCell: {
                            rowIndex,
                            columnIndex: Math.min(columnIndex + 1, lastColumnIndex)
                        }
                    };
                }
                return this.currentFocus;
            }, PivotTableFocusManager.prototype.moveRowHeaderFocusTableEx = function(direction, hasCtrl, numVisibleRows, keyboardEvent) {
                var _a, lastMeasuredColumn = this.columnWidthMeasureManager.getLastMeasuredIndex(), columnsDepth = this.columnNavigator.getHierarchyDepth(), currentPath = this.currentFocus.rowHeader, currentNode = this.rowNavigator.getNodeFromPath(currentPath), currentNodeLevel = this.rowNavigator instanceof pivotTableHierarchyNavigator.S ? 0 : this.rowNavigator.getLevel(currentNode), levelNodes = this.rowNavigator.getItemsByLevel(currentNodeLevel), currentNodeLevelIndex = levelNodes.indexOf(currentNode), hasFooter = this.rowNavigator.getFloatingHierarchyLeafCount() > 0;
                if (hasCtrl) {
                    if ("home" === direction) return {
                        cornerCell: {
                            rowLevel: 0,
                            columnLevel: 0
                        }
                    };
                    if ("end" === direction) return this.getBottomRightCell();
                    if ("up" === direction) return {
                        cornerCell: {
                            rowLevel: currentNodeLevel,
                            columnLevel: 0
                        }
                    };
                    if ("down" === direction) return this.getBottomFooterHeaderCell(currentNodeLevel);
                } else {
                    if ("left" === direction && currentPath.length > 1) return {
                        rowHeader: _.dropRight(currentPath, 1)
                    };
                    if ("right" === direction) {
                        if ((null === (_a = this.previousFocus) || void 0 === _a ? void 0 : _a.rowHeader) && _.isEqual(_.dropRight(this.previousFocus.rowHeader, 1), this.currentFocus.rowHeader)) return this.previousFocus;
                        var currentLeafIndex = this.rowNavigator.getLeafIndex(currentNode);
                        if (void 0 === currentLeafIndex) return {
                            rowHeader: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], currentPath || [], !0), [ 0 ], !1)
                        };
                        if (lastMeasuredColumn > -1) return {
                            bodyCell: {
                                rowIndex: currentLeafIndex,
                                columnIndex: 0
                            }
                        };
                    }
                    if ("up" === direction) return (targetNodeIndex = this.prevNonblankHeaderRowIndex(currentNodeLevelIndex, levelNodes)) >= 0 ? {
                        rowHeader: this.rowNavigator.getPathIndices(levelNodes[targetNodeIndex])
                    } : {
                        cornerCell: {
                            rowLevel: currentNodeLevel,
                            columnLevel: columnsDepth - 1
                        }
                    };
                    if ("down" === direction) {
                        if ((targetNodeIndex = this.nextNonblankHeaderRowIndex(currentNodeLevelIndex, levelNodes)) <= levelNodes.length - 1) return {
                            rowHeader: this.rowNavigator.getPathIndices(levelNodes[targetNodeIndex])
                        };
                        if (hasFooter) return {
                            floatingRowHeader: 0
                        };
                    }
                    if ("pagedown" === direction) {
                        var lastMeasuredRowIndex = this.rowHeightMeasureManager.getLastMeasuredIndex(), firstVisualLeafIndex = (0, 
                        iPivotTableHierarchyNavigator.hG)(this.currentFocus.item, this.rowNavigator), nextNonblankRowIndex = this.nextNonblankRowIndex(firstVisualLeafIndex + numVisibleRows - 1), lastNonblankRowIndex = this.prevNonblankRowIndex(lastMeasuredRowIndex + 1), newRowIndex = Math.min(nextNonblankRowIndex, lastNonblankRowIndex), newLeafIndices = this.rowNavigator.getPathIndices(this.rowNavigator.getHierarchyLeafAt(newRowIndex));
                        if (this.rowNavigator.isLeaf(currentNode) || this.rowNavigator instanceof pivotTableHierarchyNavigator.S) return {
                            rowHeader: newLeafIndices
                        };
                        var newIndices = _.take(newLeafIndices, Math.min(this.currentFocus.rowHeader.length, newLeafIndices.length)), targetNodeIndex = this.nextNonblankHeaderRowIndex(currentNodeLevelIndex, levelNodes);
                        return _.isEqual(newIndices, this.currentFocus.rowHeader) && targetNodeIndex <= levelNodes.length - 1 ? {
                            rowHeader: this.rowNavigator.getPathIndices(levelNodes[targetNodeIndex])
                        } : {
                            rowHeader: newIndices
                        };
                    }
                    if ("pageup" === direction && (firstVisualLeafIndex = (0, iPivotTableHierarchyNavigator.hG)(this.currentFocus.item, this.rowNavigator), 
                    newRowIndex = Math.max(this.prevNonblankRowIndex(firstVisualLeafIndex - numVisibleRows + 1), 0), 
                    newLeafIndices = this.rowNavigator.getPathIndices(this.rowNavigator.getHierarchyLeafAt(newRowIndex)), 
                    (newIndices = _.take(newLeafIndices, Math.min(this.currentFocus.rowHeader.length, newLeafIndices.length))) !== this.currentFocus.rowHeader)) return {
                        rowHeader: newIndices
                    };
                }
                return currentPath.length > 1 && (hasCtrl && "left" === direction || "home" === direction) ? {
                    rowHeader: [ currentPath[0] ]
                } : hasCtrl && "right" === direction || "end" === direction ? {
                    bodyCell: {
                        rowIndex: (0, iPivotTableHierarchyNavigator.hG)(currentNode, this.rowNavigator),
                        columnIndex: lastMeasuredColumn
                    }
                } : this.currentFocus;
            }, PivotTableFocusManager.prototype.moveColumnHeaderFocusTableEx = function(direction, hasCtrl, isA11yMatrix) {
                var _a, columnIndex = this.currentFocus.columnHeader[0], hasFooter = this.rowNavigator.getFloatingHierarchyLeafCount() > 0, numPageRows = this.rowHeightMeasureManager.getPageRows().length, lastPageRow = _.last(this.rowHeightMeasureManager.getPageRows()), lastRowIndex = lastPageRow ? (numPageRows - 1) * measurement.hw + (lastPageRow.getRowHeights().length - 1) : -1, numPageColumns = this.columnWidthMeasureManager.getPageColumns().length, lastPageColumn = _.last(this.columnWidthMeasureManager.getPageColumns()), lastColumnIndex = (numPageColumns - 1) * measurement.MN + (lastPageColumn.getColumnWidths().length - 1), currentPath = this.currentFocus.columnHeader, currentNode = this.columnNavigator.getNodeFromPath(currentPath), currentNodeLevel = this.columnNavigator.getLevel(currentNode), rowsDepth = this.rowNavigator.getHierarchyDepth();
                if (hasCtrl) {
                    if ("home" === direction) return isA11yMatrix ? {
                        cornerCell: {
                            rowLevel: 0,
                            columnLevel: 0
                        }
                    } : {
                        columnHeader: [ 0 ]
                    };
                    if ("end" === direction) {
                        if (isA11yMatrix) return this.getBottomRightCell();
                        if (hasFooter) return {
                            floatingBodyCell: {
                                rowIndex: 0,
                                columnIndex: lastColumnIndex
                            }
                        };
                        if (-1 !== lastRowIndex) return {
                            bodyCell: {
                                rowIndex: lastRowIndex,
                                columnIndex: lastColumnIndex
                            }
                        };
                    }
                    if ("down" === direction) {
                        var firstChildIndex = this.columnNavigator.hasHierarchy ? this.getFirstColumnLeafFromAncestor(currentNode) : columnIndex;
                        return this.getBottomFooterBodyCell(firstChildIndex, lastRowIndex);
                    }
                    if ("up" === direction) return {
                        columnHeader: [ currentPath[0] ]
                    };
                } else {
                    if ("up" === direction && isA11yMatrix && this.columnNavigator.hasHierarchy() && currentPath.length > 1) return {
                        columnHeader: _.dropRight(currentPath, 1)
                    };
                    if ("down" === direction) {
                        if (isA11yMatrix) {
                            if ((null === (_a = this.previousFocus) || void 0 === _a ? void 0 : _a.columnHeader) && _.isEqual(_.dropRight(this.previousFocus.columnHeader, 1), this.currentFocus.columnHeader)) return this.previousFocus;
                            var currentLeafIndex = this.columnNavigator.getLeafIndex(currentNode);
                            if (!this.columnNavigator.isLeaf(currentNode)) return {
                                columnHeader: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], this.currentFocus.columnHeader, !0), [ 0 ], !1)
                            };
                            if (lastRowIndex >= 0) return {
                                bodyCell: {
                                    rowIndex: 0,
                                    columnIndex: currentLeafIndex
                                }
                            };
                            if (hasFooter) return {
                                floatingBodyCell: {
                                    rowIndex: 0,
                                    columnIndex: currentLeafIndex
                                }
                            };
                        }
                        if (-1 !== lastRowIndex) return {
                            bodyCell: {
                                rowIndex: 0,
                                columnIndex
                            }
                        };
                    }
                    var levelNodes = this.columnNavigator.getItemsByLevel(currentNodeLevel), currentNodeLevelIndex = levelNodes.indexOf(currentNode);
                    if ("left" === direction) return isA11yMatrix ? currentNodeLevelIndex > 0 ? {
                        columnHeader: this.columnNavigator.getPathIndices(levelNodes[currentNodeLevelIndex - 1])
                    } : this.rowNavigator.hasHierarchy() ? {
                        cornerCell: {
                            rowLevel: rowsDepth - 1,
                            columnLevel: currentNodeLevel
                        }
                    } : {
                        cornerCell: {
                            rowLevel: 0,
                            columnLevel: currentNodeLevel
                        }
                    } : {
                        columnHeader: [ Math.max(columnIndex - 1, 0) ]
                    };
                    if ("right" === direction) return isA11yMatrix && -1 !== currentNodeLevelIndex ? {
                        columnHeader: this.columnNavigator.getPathIndices(levelNodes[Math.min(currentNodeLevelIndex + 1, levelNodes.length - 1)])
                    } : {
                        columnHeader: [ Math.min(columnIndex + 1, lastColumnIndex) ]
                    };
                }
                return "home" === direction || hasCtrl && "left" === direction ? isA11yMatrix ? {
                    cornerCell: {
                        rowLevel: 0,
                        columnLevel: currentNodeLevel
                    }
                } : {
                    columnHeader: [ 0 ]
                } : "end" === direction || hasCtrl && "right" === direction ? isA11yMatrix ? this.getLastMatrixColumnCell(this.currentFocus.columnHeader.length - 1) : {
                    columnHeader: [ lastColumnIndex ]
                } : this.currentFocus;
            }, PivotTableFocusManager.prototype.moveCornerCellFocusTableEx = function(direction, hasCtrl) {
                var currentRowLevel = this.currentFocus.cornerCell.rowLevel, currentColumnLevel = this.currentFocus.cornerCell.columnLevel, rowLevelNodes = this.rowNavigator.getItemsByLevel(currentRowLevel), columnLevelNodes = this.columnNavigator.getItemsByLevel(currentColumnLevel), rowsCount = this.rowNavigator.getHierarchyLeafCount(), rowsDepth = this.rowNavigator.getHierarchyDepth(), columnsDepth = this.columnNavigator.getHierarchyDepth(), hasFooter = this.rowNavigator.getFloatingHierarchyLeafCount() > 0;
                if (hasCtrl) {
                    if ("home" === direction) return {
                        cornerCell: {
                            rowLevel: 0,
                            columnLevel: 0
                        }
                    };
                    if ("end" === direction) return this.getBottomRightCell();
                    if ("up" === direction) return {
                        cornerCell: {
                            rowLevel: currentRowLevel,
                            columnLevel: 0
                        }
                    };
                    if ("down" === direction) return this.getBottomFooterHeaderCell(currentRowLevel);
                } else {
                    if ("up" === direction && currentColumnLevel > 0) return {
                        cornerCell: {
                            rowLevel: currentRowLevel,
                            columnLevel: currentColumnLevel - 1
                        }
                    };
                    if ("down" === direction) {
                        if (currentColumnLevel < columnsDepth - 1) return {
                            cornerCell: {
                                rowLevel: currentRowLevel,
                                columnLevel: currentColumnLevel + 1
                            }
                        };
                        if (rowsCount > 0) return {
                            rowHeader: this.rowNavigator.getPathIndices(rowLevelNodes[0])
                        };
                        if (hasFooter) return {
                            floatingRowHeader: 0
                        };
                    }
                    if ("right" === direction) {
                        if (currentRowLevel < rowsDepth - 1) return {
                            cornerCell: {
                                rowLevel: currentRowLevel + 1,
                                columnLevel: currentColumnLevel
                            }
                        };
                        if (!_.isEmpty(columnLevelNodes)) return {
                            columnHeader: this.columnNavigator.getPathIndices(columnLevelNodes[0])
                        };
                    }
                    if ("left" === direction && currentRowLevel > 0) return {
                        cornerCell: {
                            rowLevel: currentRowLevel - 1,
                            columnLevel: currentColumnLevel
                        }
                    };
                }
                return currentRowLevel > 0 && ("home" === direction || hasCtrl && "left" === direction) ? {
                    cornerCell: {
                        rowLevel: 0,
                        columnLevel: currentColumnLevel
                    }
                } : "end" === direction || hasCtrl && "right" === direction ? this.getLastMatrixColumnCell(this.currentFocus.cornerCell.columnLevel) : this.currentFocus;
            }, PivotTableFocusManager.prototype.moveFloatingRowHeaderFocusTableEx = function(direction, hasCtrl) {
                var rowsCount = this.rowNavigator.getHierarchyLeafCount(), lastMeasuredColumn = this.columnWidthMeasureManager.getLastMeasuredIndex(), columnsDepth = this.columnNavigator.getHierarchyDepth(), currentIndex = this.currentFocus.floatingRowHeader;
                if (debug.fF.assert(function() {
                    return lastMeasuredColumn > -1;
                }, "There can not be Floating rows without column headers"), hasCtrl) {
                    if ("home" === direction || "up" === direction) return {
                        cornerCell: {
                            rowLevel: 0,
                            columnLevel: 0
                        }
                    };
                    if ("end" === direction) return this.getBottomRightCell();
                    if ("down" === direction && currentIndex < this.rowNavigator.getFloatingHierarchyLeafCount() - 1) return {
                        floatingRowHeader: this.rowNavigator.getFloatingHierarchyLeafCount() - 1
                    };
                } else {
                    if ("right" === direction) return {
                        floatingBodyCell: {
                            rowIndex: currentIndex,
                            columnIndex: 0
                        }
                    };
                    if ("up" === direction) {
                        if (currentIndex > 0) return {
                            floatingRowHeader: currentIndex - 1
                        };
                        if (rowsCount > 0) {
                            var levelNodes = this.rowNavigator.getItemsByLevel(0), targetNodeIndex = this.prevNonblankHeaderRowIndex(levelNodes.length, levelNodes);
                            return {
                                rowHeader: this.rowNavigator.getPathIndices(levelNodes[targetNodeIndex])
                            };
                        }
                        return {
                            cornerCell: {
                                rowLevel: 0,
                                columnLevel: columnsDepth - 1
                            }
                        };
                    }
                    if ("down" === direction && currentIndex < this.rowNavigator.getFloatingHierarchyLeafCount() - 1) return {
                        floatingRowHeader: currentIndex + 1
                    };
                }
                return hasCtrl && "right" === direction || "end" === direction ? {
                    floatingBodyCell: {
                        rowIndex: currentIndex,
                        columnIndex: lastMeasuredColumn
                    }
                } : this.currentFocus;
            }, PivotTableFocusManager.prototype.moveFloatingBodyCellFocusTableEx = function(direction, hasCtrl) {
                var columnIndex = this.currentFocus.floatingBodyCell.columnIndex, rowIndex = this.currentFocus.floatingBodyCell.rowIndex, isSelectionCell = -1 === columnIndex, numPageRows = this.rowHeightMeasureManager.getPageRows().length, lastPageRow = _.last(this.rowHeightMeasureManager.getPageRows()), lastRowIndex = lastPageRow ? (numPageRows - 1) * measurement.hw + (lastPageRow.getRowHeights().length - 1) : -1, numPageColumns = this.columnWidthMeasureManager.getPageColumns().length, lastPageColumn = _.last(this.columnWidthMeasureManager.getPageColumns()), lastColumnIndex = (numPageColumns - 1) * measurement.MN + (lastPageColumn.getColumnWidths().length - 1);
                if (hasCtrl) {
                    if ("home" === direction) return this.isA11yMatrix ? {
                        cornerCell: {
                            rowLevel: 0,
                            columnLevel: 0
                        }
                    } : {
                        columnHeader: [ 0 ]
                    };
                    if ("end" === direction) return this.isA11yMatrix ? this.getBottomRightCell() : {
                        floatingBodyCell: {
                            rowIndex: 0,
                            columnIndex: lastColumnIndex
                        }
                    };
                    if ("up" === direction) {
                        if (this.isA11yMatrix) {
                            var ancestor = this.columnNavigator.getLeafAncestorAtLevel(this.columnNavigator.getHierarchyLeafAt(columnIndex), 0);
                            return {
                                columnHeader: [ this.columnNavigator.getIndex(ancestor) ]
                            };
                        }
                        return isSelectionCell ? {
                            bodyCell: {
                                rowIndex: 0,
                                columnIndex
                            }
                        } : {
                            columnHeader: [ columnIndex ]
                        };
                    }
                    if ("down" === direction) return {
                        floatingBodyCell: {
                            rowIndex: this.rowNavigator.getFloatingHierarchyLeafCount() - 1,
                            columnIndex
                        }
                    };
                    if ("left" === direction) return this.isA11yMatrix ? {
                        floatingRowHeader: rowIndex
                    } : {
                        floatingBodyCell: {
                            rowIndex: 0,
                            columnIndex: 0
                        }
                    };
                    if ("right" === direction) return {
                        floatingBodyCell: {
                            rowIndex,
                            columnIndex: lastColumnIndex
                        }
                    };
                } else {
                    if ("home" === direction) return this.isA11yMatrix ? {
                        floatingRowHeader: rowIndex
                    } : {
                        floatingBodyCell: {
                            rowIndex: 0,
                            columnIndex: 0
                        }
                    };
                    if ("end" === direction) return {
                        floatingBodyCell: {
                            rowIndex: 0,
                            columnIndex: lastColumnIndex
                        }
                    };
                    if ("up" === direction) return 0 === rowIndex ? lastRowIndex >= 0 ? {
                        bodyCell: {
                            rowIndex: this.prevNonblankRowIndex(lastRowIndex + 1),
                            columnIndex
                        }
                    } : (ancestor = this.columnNavigator.getLeafAncestorAtLevel(this.columnNavigator.getHierarchyLeafAt(columnIndex), 0), 
                    {
                        columnHeader: [ this.columnNavigator.getIndex(ancestor) ]
                    }) : {
                        floatingBodyCell: {
                            rowIndex: rowIndex - 1,
                            columnIndex
                        }
                    };
                    if ("down" === direction && rowIndex < this.rowNavigator.getFloatingHierarchyLeafCount() - 1) return {
                        floatingBodyCell: {
                            rowIndex: rowIndex + 1,
                            columnIndex
                        }
                    };
                    if ("left" === direction) return 0 === columnIndex && this.isA11yMatrix ? {
                        floatingRowHeader: rowIndex
                    } : {
                        floatingBodyCell: {
                            rowIndex,
                            columnIndex: Math.max(columnIndex - 1, 0)
                        }
                    };
                    if ("right" === direction) return {
                        floatingBodyCell: {
                            rowIndex,
                            columnIndex: Math.min(columnIndex + 1, lastColumnIndex)
                        }
                    };
                }
                return this.currentFocus;
            }, PivotTableFocusManager.prototype.getBottomRightCell = function() {
                var floatingHierarchyLeafCount = this.rowNavigator.getFloatingHierarchyLeafCount(), lastMeasuredColumnIndex = this.columnWidthMeasureManager.getLastMeasuredIndex(), lastRowIndex = this.rowNavigator.getHierarchyLeafCount() - 1;
                return floatingHierarchyLeafCount > 0 ? {
                    floatingBodyCell: {
                        rowIndex: floatingHierarchyLeafCount - 1,
                        columnIndex: lastMeasuredColumnIndex
                    }
                } : {
                    bodyCell: {
                        rowIndex: lastRowIndex,
                        columnIndex: lastMeasuredColumnIndex
                    }
                };
            }, PivotTableFocusManager.prototype.getLastMatrixColumnCell = function(nodeLevel) {
                var columnsCount = this.columnNavigator.getHierarchyLeafCount(), lastColumnHeader = this.columnNavigator.getHierarchyLeafAt(columnsCount - 1), lastColumnPathIndices = this.columnNavigator.getPathIndices(lastColumnHeader);
                return {
                    columnHeader: _.dropRight(lastColumnPathIndices, lastColumnPathIndices.length - (nodeLevel + 1))
                };
            }, PivotTableFocusManager.prototype.getFirstColumnLeafFromAncestor = function(item) {
                return this.columnNavigator.isLeaf(item) ? this.columnNavigator.getLeafIndex(item) : this.getFirstColumnLeafFromAncestor(this.columnNavigator.getChildren(item)[0]);
            }, PivotTableFocusManager.prototype.getBottomFooterBodyCell = function(columnIndex, lastRowIndex) {
                var hasFooter = this.rowNavigator.getFloatingHierarchyLeafCount() > 0;
                return -1 !== columnIndex && hasFooter ? {
                    floatingBodyCell: {
                        rowIndex: this.rowNavigator.getFloatingHierarchyLeafCount() - 1,
                        columnIndex
                    }
                } : -1 === lastRowIndex ? this.currentFocus : {
                    bodyCell: {
                        rowIndex: lastRowIndex,
                        columnIndex
                    }
                };
            }, PivotTableFocusManager.prototype.getBottomFooterHeaderCell = function(rowLevel) {
                var levelNodes = this.rowNavigator.getItemsByLevel(rowLevel);
                return this.rowNavigator.getFloatingHierarchyLeafCount() > 0 ? {
                    floatingRowHeader: this.rowNavigator.getFloatingHierarchyLeafCount() - 1
                } : {
                    rowHeader: this.rowNavigator.getPathIndices(levelNodes[levelNodes.length - 1])
                };
            }, PivotTableFocusManager.prototype.prevNonblankRowIndex = function(index) {
                for (var i = index - 1; i >= 0; i--) if (!this.rowNavigator.isBlankRow(i)) return i;
                return -1;
            }, PivotTableFocusManager.prototype.nextNonblankRowIndex = function(index) {
                for (var leafCount = this.rowNavigator.getHierarchyLeafCount(), i = index + 1; i < leafCount; i++) if (!this.rowNavigator.isBlankRow(i)) return i;
                return leafCount + 1;
            }, PivotTableFocusManager.prototype.prevNonblankHeaderRowIndex = function(index, levelNodes) {
                for (var i = index - 1; i >= 0; i--) if (!this.rowNavigator.isBlank(levelNodes[i])) return i;
                return -1;
            }, PivotTableFocusManager.prototype.nextNonblankHeaderRowIndex = function(index, levelNodes) {
                for (var i = index + 1; i < levelNodes.length; i++) if (!this.rowNavigator.isBlank(levelNodes[i])) return i;
                return levelNodes.length;
            }, PivotTableFocusManager;
        }(), htmlSubSelectionHelper = __webpack_require__(52287), HeaderResizer = function() {
            function HeaderResizer(item, element, verticalResizeHandler, horizontalResizeHandler, clickHandler, isA11yMatrix) {
                var _this = this;
                this.isA11yMatrix = isA11yMatrix, this.elementOriginalCursor = null == element ? void 0 : element.style.cursor, 
                this.verticalResizeHandler = verticalResizeHandler, this.horizontalResizeHandler = horizontalResizeHandler, 
                (verticalResizeHandler || horizontalResizeHandler) && (element.addEventListener("mousedown", function(e) {
                    return element.closest("[".concat(htmlSubSelectionHelper.y3, "=true]")) ? null : _this.onMouseDown(item, element, e);
                }), element.addEventListener("mousemove", function(e) {
                    return element.closest("[".concat(htmlSubSelectionHelper.y3, "=true]")) ? null : _this.onMouseMove(element, e);
                }), element.addEventListener("dblclick", function(e) {
                    return element.closest("[".concat(htmlSubSelectionHelper.y3, "=true]")) ? null : _this.onDoubleClick(item, element, e);
                })), clickHandler && element.addEventListener("click", function(e) {
                    return _this.onClick(item, element, e, clickHandler);
                });
            }
            return HeaderResizer.prototype.onMouseDown = function(item, element, e) {
                var activeHandler = this.getActiveHandler(element, e);
                if (activeHandler) {
                    this.resizing = !0, this.startMousePosition = HeaderResizer.getMouseCoordinates(e);
                    var scale = (0, tablixUtils1.df)(element);
                    this.initializeDocumentEvents(element, activeHandler, scale), document.documentElement && (this.documentOriginalCursor = document.documentElement.style.cursor, 
                    document.documentElement.style.cursor = this.getCursor(element, e)), activeHandler.onStartResize(item);
                } else this.resizing = !1;
            }, HeaderResizer.prototype.onMouseMove = function(element, e) {
                this.startMousePosition || (element.style.cursor = this.getCursor(element, e));
            }, HeaderResizer.prototype.onDoubleClick = function(item, element, e) {
                var activeHandler = this.getActiveHandler(element, e);
                activeHandler && activeHandler.onReset(item);
            }, HeaderResizer.prototype.onClick = function(item, element, e, clickHandler) {
                this.isA11yMatrix && !element.closest("[".concat(htmlSubSelectionHelper.y3, "=true]")) && e.stopPropagation(), 
                this.resizing || clickHandler && clickHandler(item, e);
            }, HeaderResizer.prototype.getActiveHandler = function(element, e) {
                return this.isMouseOnVerticalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? this.verticalResizeHandler : this.isMouseOnHorizontalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? this.horizontalResizeHandler : null;
            }, HeaderResizer.prototype.getCursor = function(element, e) {
                return this.isMouseOnVerticalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? "col-resize" : this.isMouseOnHorizontalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? "row-resize" : this.elementOriginalCursor;
            }, HeaderResizer.prototype.initializeDocumentEvents = function(element, handler, scale) {
                var _this = this;
                this.documentMouseMoveListener = function(e) {
                    e.preventDefault(), handler.onResize(HeaderResizer.getMouseCoordinatesDelta(_this.startMousePosition, HeaderResizer.getMouseCoordinates(e), scale));
                }, document.addEventListener("mousemove", this.documentMouseMoveListener), this.documentMouseUpListener = function(e) {
                    e.preventDefault(), document.removeEventListener("mousemove", _this.documentMouseMoveListener), 
                    _this.documentMouseMoveListener = null, document.removeEventListener("mouseup", _this.documentMouseUpListener), 
                    _this.documentMouseUpListener = null, document.documentElement && (document.documentElement.style.cursor = _this.documentOriginalCursor, 
                    _this.documentOriginalCursor = void 0), _this.startMousePosition = null, handler.onEndResize();
                }, document.addEventListener("mouseup", this.documentMouseUpListener);
            }, HeaderResizer.prototype.isMouseOnVerticalHandle = function(element, position) {
                return !!this.verticalResizeHandler && position.x >= element.getBoundingClientRect().right - HeaderResizer.HandleSize;
            }, HeaderResizer.prototype.isMouseOnHorizontalHandle = function(element, position) {
                return !!this.horizontalResizeHandler && position.y >= element.getBoundingClientRect().bottom - HeaderResizer.HandleSize;
            }, HeaderResizer.getMouseCoordinates = function(e) {
                return {
                    x: e.pageX,
                    y: e.pageY
                };
            }, HeaderResizer.getMouseCoordinatesDelta = function(previous, current, scale) {
                return current && previous ? {
                    x: (current.x - previous.x) / scale,
                    y: (current.y - previous.y) / scale
                } : {
                    x: 0,
                    y: 0
                };
            }, HeaderResizer.HandleSize = 4, HeaderResizer;
        }(), ColumnWidthResizeHandler = function() {
            function ColumnWidthResizeHandler(control, a11yTableFS, a11yMatrixFS) {
                this.a11yTableFS = a11yTableFS, this.a11yMatrixFS = a11yMatrixFS, this.control = control;
            }
            return ColumnWidthResizeHandler.prototype.onStartResize = function(item) {
                var leafToResize = (0, iPivotTableHierarchyNavigator.oj)(item, this.control.getColumnNavigator()), leafToResizeIndex = this.control.getColumnNavigator().getLeafIndex(leafToResize);
                this.resizeState = {
                    leafToResize,
                    leafToResizeIndex,
                    originalWidth: this.control.getColumnWidthMeasureManager().getColumnWidth(leafToResizeIndex)
                };
            }, ColumnWidthResizeHandler.prototype.onResize = function(delta) {
                if (delta.x && this.resizeState) {
                    var viewport = this.control.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.control.getRowHeightMeasureManager()), visibleColumnRange = measurement.sW.getVisibleRange(viewport.left, viewport.width, this.control.getColumnWidthMeasureManager());
                    if (visibleRowRange && visibleColumnRange) {
                        var newWidth = Math.max(this.resizeState.originalWidth + delta.x, HeaderResizer.HandleSize);
                        this.control.getColumnWidthMeasureManager().setColumnWidth(this.resizeState.leafToResizeIndex, newWidth), 
                        measurement._E.remeasureRows(this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex, visibleColumnRange.firstLeafIndex, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clearFloatingRows(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                        this.control.renderAsync(pivotTableControlTypes.BM.ResizeColumn);
                    }
                }
            }, ColumnWidthResizeHandler.prototype.onEndResize = function() {
                if (this.resizeState) {
                    var leafToResize = this.resizeState.leafToResize, newWidth = this.control.getColumnWidthMeasureManager().getColumnWidth(this.resizeState.leafToResizeIndex), originalWidth = this.resizeState.originalWidth;
                    this.resizeState = void 0;
                    var viewport = this.control.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.control.getRowHeightMeasureManager());
                    if (visibleRowRange && newWidth !== originalWidth) {
                        this.control.getSizeManager().setColumnWidth(leafToResize, newWidth);
                        var visibleRowStart = measurement._E.getVisibleRowStart(visibleRowRange, viewport.top, this.control.getRowHeightMeasureManager());
                        this.control.getRowHeightMeasureManager().clear(), this.control.renderAsync(pivotTableControlTypes.BM.ClearRendering, visibleRowStart);
                    }
                }
            }, ColumnWidthResizeHandler.prototype.onReset = function(item) {
                var viewport = this.control.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.control.getRowHeightMeasureManager());
                if (visibleRowRange) {
                    var leafToResize = (0, iPivotTableHierarchyNavigator.oj)(item, this.control.getColumnNavigator()), leafToResizeIndex = this.control.getColumnNavigator().getLeafIndex(leafToResize);
                    this.control.getSizeManager().setColumnWidth(leafToResize, void 0), measurement.sW.remeasureColumn(leafToResizeIndex, this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, this.control.getColumnWidthMeasureManager());
                    var visibleRowStart = measurement._E.getVisibleRowStart(visibleRowRange, viewport.top, this.control.getRowHeightMeasureManager());
                    this.control.getRowHeightMeasureManager().clear(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                    this.control.renderAsync(pivotTableControlTypes.BM.ClearRendering, visibleRowStart);
                }
            }, ColumnWidthResizeHandler;
        }(), RowLevelWidthResizeHandler = function() {
            function RowLevelWidthResizeHandler(control, a11yMatrixFS) {
                this.a11yMatrixFS = a11yMatrixFS, this.control = control;
            }
            return RowLevelWidthResizeHandler.prototype.onStartResize = function(item) {
                var levelToResize = this.getLevelToResize(item);
                this.resizeState = {
                    cornerCellToResize: this.control.getRowNavigator().getCorner(levelToResize, this.control.getColumnNavigator().getHierarchyDepth() - 1),
                    levelToResize,
                    originalWidth: this.control.getRowLevelWidthMeasureManager().getLevelWidth(levelToResize)
                };
            }, RowLevelWidthResizeHandler.prototype.onResize = function(delta) {
                if (delta.x && this.resizeState) {
                    var viewport = this.control.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.control.getRowHeightMeasureManager()), visibleColumnRange = measurement.sW.getVisibleRange(viewport.left, viewport.width, this.control.getColumnWidthMeasureManager());
                    if (visibleRowRange) {
                        var newWidth = Math.min(this.getMaxWidth(this.resizeState.levelToResize), Math.max(this.resizeState.originalWidth + delta.x, HeaderResizer.HandleSize));
                        this.control.getRowLevelWidthMeasureManager().setLevelWidth(this.resizeState.levelToResize, newWidth), 
                        measurement._E.remeasureRows(this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex, visibleColumnRange ? visibleColumnRange.firstLeafIndex : 0, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clearFloatingRows(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                        this.control.renderAsync(pivotTableControlTypes.BM.ResizeColumn);
                    }
                }
            }, RowLevelWidthResizeHandler.prototype.onEndResize = function() {
                if (this.resizeState) {
                    var cornerCellToResize = this.resizeState.cornerCellToResize, newWidth = this.control.getRowLevelWidthMeasureManager().getLevelWidth(this.resizeState.levelToResize), originalWidth = this.resizeState.originalWidth;
                    this.resizeState = void 0;
                    var viewport = this.control.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.control.getRowHeightMeasureManager());
                    if (visibleRowRange && newWidth !== originalWidth) {
                        this.control.getSizeManager().setRowLevelWidth(cornerCellToResize, newWidth);
                        var visibleRowStart = measurement._E.getVisibleRowStart(visibleRowRange, viewport.top, this.control.getRowHeightMeasureManager());
                        this.control.getRowHeightMeasureManager().clear(), this.control.renderAsync(pivotTableControlTypes.BM.ClearRendering, visibleRowStart);
                    }
                }
            }, RowLevelWidthResizeHandler.prototype.onReset = function(item) {
                var viewport = this.control.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.control.getRowHeightMeasureManager());
                if (visibleRowRange) {
                    var levelToResize = this.getLevelToResize(item), cornerCellToResize = this.control.getRowNavigator().getCorner(levelToResize, this.control.getColumnNavigator().getHierarchyDepth() - 1);
                    this.control.getSizeManager().setRowLevelWidth(cornerCellToResize, void 0), this.control.getRowLevelWidthMeasureManager().measure(this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, measurement.Ms, levelToResize);
                    var visibleRowStart = measurement._E.getVisibleRowStart(visibleRowRange, viewport.top, this.control.getRowHeightMeasureManager());
                    this.control.getRowHeightMeasureManager().clear(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                    this.control.renderAsync(pivotTableControlTypes.BM.Incremental, visibleRowStart);
                }
            }, RowLevelWidthResizeHandler.prototype.getLevelToResize = function(item) {
                return this.control.getSteppedLayout() ? 0 : this.control.getRowNavigator().getRowLevel(item);
            }, RowLevelWidthResizeHandler.prototype.getMaxWidth = function(levelToResize) {
                for (var maxWidth = this.control.getClientWidth(), level = 0; level < levelToResize; level++) maxWidth -= this.control.getRowLevelWidthMeasureManager().getLevelWidth(level);
                return maxWidth;
            }, RowLevelWidthResizeHandler;
        }(), FocusNavigationUtility = __webpack_require__(57470), pivotTablePage = __webpack_require__(7911), TablixRendererFS = function() {
            function TablixRendererFS(element, prefixCellClickHandler, prefixCellContextMenuHandler, mainCellClickHandler, mainCellContextMenuHandler, interactionHandler, section, renderType, onObject, enableCalculationHighlight, isRenderStable, showTotalPlaceHolders, showAsTableNativeMenu) {
                var _a, _this = this;
                this.element = element, this.prefixCellClickHandler = prefixCellClickHandler, this.prefixCellContextMenuHandler = prefixCellContextMenuHandler, 
                this.mainCellClickHandler = mainCellClickHandler, this.mainCellContextMenuHandler = mainCellContextMenuHandler, 
                this.interactionHandler = interactionHandler, this.section = section, this.renderType = renderType, 
                this.onObject = onObject, this.enableCalculationHighlight = enableCalculationHighlight, 
                this.isRenderStable = isRenderStable, this.showTotalPlaceHolders = showTotalPlaceHolders, 
                this.showAsTableNativeMenu = showAsTableNativeMenu, this.unfrozenRowHeaders = !1, 
                this.repeatRowHeaders = !1, this.viewSync = {}, this.xPosition = 0, this.element.addEventListener("click", function(mouseEvent) {
                    var _a, _b, element = mouseEvent.target, cellItem = _this.getItemByElement(element);
                    cellItem && (_this.isPrefixCell(element) ? null === (_a = _this.prefixCellClickHandler) || void 0 === _a || _a.call(_this, cellItem, mouseEvent, void 0, _this.section) : null === (_b = _this.mainCellClickHandler) || void 0 === _b || _b.call(_this, cellItem, mouseEvent, void 0, _this.section));
                }), this.element.addEventListener("contextmenu", function(mouseEvent) {
                    var _a, _b, element = mouseEvent.target, cellItem = _this.getItemByElement(element);
                    cellItem && !showAsTableNativeMenu && (_this.isPrefixCell(element) ? null === (_a = _this.prefixCellContextMenuHandler) || void 0 === _a || _a.call(_this, cellItem, mouseEvent) : null === (_b = _this.mainCellContextMenuHandler) || void 0 === _b || _b.call(_this, cellItem, mouseEvent));
                }), this.renderType === pivotTableControlTypes.y2.Table && this.element.addEventListener("change", function(event) {
                    var _a, rowIndex = d3.select(event.target).attr("checkbox-rowindex");
                    null != rowIndex && (null === (_a = _this.mainCellClickHandler) || void 0 === _a || _a.call(_this, void 0, void 0, +rowIndex, _this.section));
                }), null === (_a = this.interactionHandler) || void 0 === _a || _a.setTooltipDelegate(function(tooltipEventArgs) {
                    return _this.getItemByElement(tooltipEventArgs.context);
                }, this.element, this.getRegion.bind(this), !showAsTableNativeMenu, function(tooltipEventArgs) {
                    return _this.shouldHideDefaultTooltip(tooltipEventArgs.context);
                });
            }
            return TablixRendererFS.prototype.update = function(viewport, binder, rowNavigator, columnNavigator) {
                var rowEnd = this.rowHeightMeasureManager.getLastMeasuredIndex(), columnEnd = this.columnWidthMeasureManager.getLastMeasuredIndex(), visibleRows = measurement._E.getVisibleRange(viewport.top, viewport.height, this.rowHeightMeasureManager, measurement.hw, rowEnd), visibleColumns = measurement.sW.getVisibleRange(viewport.left, viewport.width, this.columnWidthMeasureManager, measurement.MN, columnEnd);
                if (this.section !== pivotTableControlTypes.p0.Body || visibleRows) {
                    var visibleRowRange, pageRows, pageColumns;
                    switch (visibleColumns || (visibleColumns = {
                        firstLeafIndex: -1,
                        firstLeafLeft: 0,
                        lastLeafIndex: -2
                    }), this.section) {
                      case pivotTableControlTypes.p0.Header:
                        visibleRowRange = [ 0, columnNavigator.getHierarchyDepth() - 1 ], pageRows = this.rowHeightMeasureManager.getPageRows(), 
                        pageColumns = this.columnWidthMeasureManager.getPageColumns();
                        break;

                      case pivotTableControlTypes.p0.Body:
                        visibleRowRange = [ visibleRows.firstLeafIndex, visibleRows.lastLeafIndex ], pageRows = this.rowHeightMeasureManager.getPageRows(), 
                        pageColumns = this.columnWidthMeasureManager.getPageColumns();
                        break;

                      case pivotTableControlTypes.p0.Footer:
                        visibleRowRange = [ 0, rowNavigator.getFloatingHierarchyLeafCount() - 1 ], pageRows = [ this.rowHeightMeasureManager.getFloatingPageRow() ], 
                        pageColumns = this.columnWidthMeasureManager.getPageColumns();
                        break;

                      default:
                        debug.fF.assertNever(this.section);
                    }
                    this.renderMeta = {
                        viewport,
                        binder,
                        rowNavigator,
                        columnNavigator,
                        visibleRowRange,
                        visibleColumnRange: [ visibleColumns.firstLeafIndex, visibleColumns.lastLeafIndex ],
                        pageRows,
                        pageColumns
                    }, this.updateRendering();
                }
            }, TablixRendererFS.prototype.setUnfrozenRowHeaders = function(unfrozenRowHeaders) {
                this.unfrozenRowHeaders = unfrozenRowHeaders;
            }, TablixRendererFS.prototype.setRepeatRowHeaders = function(repeatRowHeaders) {
                this.repeatRowHeaders = repeatRowHeaders;
            }, TablixRendererFS.prototype.setRowWidth = function() {
                var rowHeaderWidth = this.rowLevelWidthMeasureManager.getHeadersWidth(), columnsWidth = this.columnWidthMeasureManager.getColumnsWidth();
                this.unfrozenRowHeaders && (columnsWidth += rowHeaderWidth), d3.select(this.element).selectAll(".scrollable-cells-container").style("width", columnsWidth + "px");
            }, TablixRendererFS.prototype.updateBodyLeft = function() {
                var headersWidth = this.unfrozenRowHeaders ? 0 : this.rowLevelWidthMeasureManager.getHeadersWidth();
                d3.select(this.element).selectAll(".scrollable-cells-viewport").style("left", headersWidth + "px");
            }, TablixRendererFS.prototype.shouldHideDefaultTooltip = function(element) {
                var cellElement = FocusNavigationUtility.M.getFirstMatchingAncestor(element, function(e) {
                    return e.matches(".prefix-cell") || e.matches(".main-cell");
                }, this.element, !0);
                if (!cellElement) return !0;
                var contentElement, cellSelection = d3.select(cellElement);
                return !cellSelection.select(".tablixUrlIconGlyph").node() && (!(contentElement = cellSelection.classed("pivotTableCellWrap") || cellSelection.classed("pivotTableCellNoWrap") ? cellSelection.node() : cellSelection.select(".pivotTableCellWrap, .pivotTableCellNoWrap").node()) || contentElement.scrollHeight === contentElement.clientHeight && contentElement.scrollWidth === contentElement.clientWidth);
            }, TablixRendererFS.prototype.updateMeasureManagers = function(rowHeaderType, rowHeightMeasureManager, columnWidthMeasureManager, rowLevelWidthMeasureManager, columnLevelHeightMeasureManager) {
                this.rowHeaderType = rowHeaderType, this.rowHeightMeasureManager = rowHeightMeasureManager, 
                this.columnWidthMeasureManager = columnWidthMeasureManager, this.rowLevelWidthMeasureManager = rowLevelWidthMeasureManager, 
                this.columnLevelHeightMeasureManager = columnLevelHeightMeasureManager;
            }, TablixRendererFS.prototype.scrollToX = function(x) {
                d3.select(this.element).selectAll(".scrollable-cells-container").style("left", -x + "px"), 
                this.xPosition = x;
            }, TablixRendererFS.prototype.onColumnResize = function() {
                var self = this;
                d3.select(this.element).selectAll(".row").each(function() {
                    var rowIndex = self.getRowIndex(this), height = self.getRowHeight(rowIndex), top = self.getRowTop(rowIndex);
                    d3.select(this).style("height", height + "px").style("top", top + "px");
                }), d3.select(this.element).selectAll(".prefix-cell:not(.filler-cell)").each(function() {
                    var rowIndex = self.getRowIndex(this), columnIndex = self.getColumnIndex(this), isFillerCell = self.isFillerCell(this), height = isFillerCell ? 0 : self.getPrefixCellHeight(rowIndex, columnIndex), width = isFillerCell ? 0 : self.getPrefixCellWidth(rowIndex, columnIndex), left = self.getPrefixCellLeft(rowIndex, columnIndex), paddingLeft = parseFloat(d3.select(this).style("--padding-left")), paddingRight = parseFloat(d3.select(this).style("--padding-right")), _a = self.getAdjustedPaddings(width, paddingLeft, paddingRight), adjustedPaddingLeft = _a[0], adjustedPaddingRight = _a[1];
                    d3.select(this).style("height", height + "px").style("width", width + "px").style("left", left + "px").style("padding-left", adjustedPaddingLeft + "px").style("padding-right", adjustedPaddingRight + "px");
                }), d3.select(this.element).selectAll(".main-cell:not(.filler-cell)").each(function() {
                    var rowIndex = self.getRowIndex(this), columnIndex = self.getColumnIndex(this), height = self.getMainCellHeight(rowIndex, columnIndex), width = self.getMainCellWidth(rowIndex, columnIndex), left = self.getMainCellLeft(rowIndex, columnIndex), paddingLeft = parseFloat(d3.select(this).style("--padding-left")), paddingRight = parseFloat(d3.select(this).style("--padding-right")), _a = self.getAdjustedPaddings(width, paddingLeft, paddingRight), adjustedPaddingLeft = _a[0], adjustedPaddingRight = _a[1];
                    d3.select(this).style("height", height + "px").style("width", width + "px").style("left", left + "px").style("padding-left", adjustedPaddingLeft + "px").style("padding-right", adjustedPaddingRight + "px");
                }), this.adjustHeaders();
            }, TablixRendererFS.prototype.clear = function() {
                this.viewSync = {}, d3.select(this.element).html("");
            }, TablixRendererFS.prototype.getElementByIndex = function(rowIndex, columnIndex, region) {
                var regionClassSelector = region === pivotTableControlTypes.aP.Prefix ? ".prefix-cell" : ".main-cell";
                return d3.select(this.element).select('[row-index="'.concat(rowIndex, '"] ').concat(regionClassSelector, '[column-index="').concat(columnIndex, '"]')).node();
            }, TablixRendererFS.prototype.getItemByElement = function(element) {
                if (this.isRenderStable()) {
                    var rowIndex = this.getRowIndex(element);
                    if (null != rowIndex) {
                        var columnIndex = this.getColumnIndex(element);
                        if (null != columnIndex) {
                            var isPrefixCell = this.isPrefixCell(element);
                            return this.getCellItem(rowIndex, columnIndex, isPrefixCell);
                        }
                    }
                }
            }, TablixRendererFS.prototype.updateRendering = function() {
                var _this = this, rowGroupLocations = [], cellGroupLocations = [];
                this.clearUnusedElements(), this.setGroupLocations(rowGroupLocations, cellGroupLocations), 
                rowGroupLocations.forEach(function(rowGroupLocation) {
                    return _this.insertRowGroup(rowGroupLocation);
                }), cellGroupLocations.forEach(function(cellGroupLocation) {
                    return _this.insertCellGroup(cellGroupLocation);
                }), this.scrollToX(this.xPosition), this.adjustHeaders();
            }, TablixRendererFS.prototype.clearUnusedElements = function() {
                var self = this;
                for (var rowIndex in this.viewSync) if (+rowIndex < this.renderMeta.visibleRowRange[0] || +rowIndex > this.renderMeta.visibleRowRange[1]) delete this.viewSync[rowIndex]; else for (var columnIndex in this.viewSync[rowIndex]) +columnIndex >= 0 && (+columnIndex < this.renderMeta.visibleColumnRange[0] || +columnIndex > this.renderMeta.visibleColumnRange[1]) && delete this.viewSync[rowIndex][columnIndex];
                d3.select(this.element).selectAll(".row").filter(function() {
                    var rowIndex = self.getRowIndex(this);
                    return rowIndex < self.renderMeta.visibleRowRange[0] || rowIndex > self.renderMeta.visibleRowRange[1];
                }).remove(), d3.select(this.element).selectAll(".main-cell").filter(function() {
                    var columnIndex = self.getColumnIndex(this);
                    return columnIndex < self.renderMeta.visibleColumnRange[0] || columnIndex > self.renderMeta.visibleColumnRange[1];
                }).remove();
            }, TablixRendererFS.prototype.setGroupLocations = function(rowGroupLocations, cellGroupLocations) {
                for (var isBuildingRowGroup, rowIndex = this.renderMeta.visibleRowRange[0]; rowIndex <= this.renderMeta.visibleRowRange[1]; rowIndex++) if (this.viewSync[rowIndex]) {
                    isBuildingRowGroup = !1;
                    var isBuildingCellGroup = void 0;
                    for (this.viewSync[rowIndex][-1] || cellGroupLocations.push({
                        rowIndex,
                        columnStart: -1,
                        columnEnd: -1
                    }), columnIndex = this.renderMeta.visibleColumnRange[0]; columnIndex <= this.renderMeta.visibleColumnRange[1]; columnIndex++) this.viewSync[rowIndex][columnIndex] ? isBuildingCellGroup = !1 : (isBuildingCellGroup ? _.last(cellGroupLocations).columnEnd++ : (cellGroupLocations.push({
                        rowIndex,
                        columnStart: columnIndex,
                        columnEnd: columnIndex
                    }), isBuildingCellGroup = !0), this.viewSync[rowIndex][columnIndex] = !0);
                } else {
                    isBuildingRowGroup ? _.last(rowGroupLocations).rowEnd++ : (rowGroupLocations.push({
                        rowStart: rowIndex,
                        rowEnd: rowIndex
                    }), isBuildingRowGroup = !0), this.viewSync[rowIndex] = {
                        "-1": !0
                    };
                    for (var columnIndex = this.renderMeta.visibleColumnRange[0]; columnIndex <= this.renderMeta.visibleColumnRange[1]; columnIndex++) this.viewSync[rowIndex][columnIndex] = !0;
                }
            }, TablixRendererFS.prototype.insertRowGroup = function(rowGroupLocation) {
                for (var prevSibling, _this = this, rowElements = d3.select(this.element).selectAll(".row").nodes(), rowElementIndex = rowElements.length - 1; rowElementIndex >= 0; rowElementIndex--) {
                    debug.fF.assert(function() {
                        return _this.section === pivotTableControlTypes.p0.Body;
                    }, "header and footer should never insert additional row groups");
                    var siblingRowIndex = this.getRowIndex(rowElements[rowElementIndex]);
                    if (rowGroupLocation.rowStart > siblingRowIndex) {
                        prevSibling = rowElements[rowElementIndex];
                        break;
                    }
                }
                var rowGroupHead, rowGroupBindings = this.getRowGroupBindings(rowGroupLocation.rowStart, rowGroupLocation.rowEnd);
                prevSibling ? (prevSibling.insertAdjacentHTML("afterend", pivotTablePage.bG.buildMultiple(rowGroupBindings)), 
                rowGroupHead = prevSibling.nextElementSibling) : (this.element.insertAdjacentHTML("afterbegin", pivotTablePage.bG.buildMultiple(rowGroupBindings)), 
                rowGroupHead = _.first(this.element.children)), pivotTablePage.bG.attachEventHandlersMultiple(rowGroupHead, rowGroupBindings);
            }, TablixRendererFS.prototype.insertCellGroup = function(cellGroupLocation) {
                var prevSibling;
                debug.fF.assert(function() {
                    return -1 !== cellGroupLocation.columnStart;
                }, "cell group insertion of prefix cells is not supported");
                for (var containerSelection = d3.select(this.element).select('[row-index="'.concat(cellGroupLocation.rowIndex, '"]')).select(".scrollable-cells-container"), container = containerSelection.node(), prefixCells = containerSelection.selectAll(".prefix-cell").nodes(), mainCells = containerSelection.selectAll(".main-cell").nodes(), cellElementIndex = mainCells.length - 1; cellElementIndex >= 0; cellElementIndex--) {
                    var siblingColumnIndex = this.getColumnIndex(mainCells[cellElementIndex]);
                    if (cellGroupLocation.columnStart > siblingColumnIndex) {
                        prevSibling = mainCells[cellElementIndex];
                        break;
                    }
                }
                prevSibling || _.isEmpty(prefixCells) || (prevSibling = _.last(prefixCells));
                var cellGroupHead, cellGroupBindings = this.getMainBindings(cellGroupLocation.rowIndex, cellGroupLocation.columnStart, cellGroupLocation.columnEnd);
                prevSibling ? (prevSibling.insertAdjacentHTML("afterend", pivotTablePage.bG.buildMultiple(cellGroupBindings)), 
                cellGroupHead = prevSibling.nextElementSibling) : (container.insertAdjacentHTML("afterbegin", pivotTablePage.bG.buildMultiple(cellGroupBindings)), 
                cellGroupHead = _.first(container.children)), pivotTablePage.bG.attachEventHandlersMultiple(cellGroupHead, cellGroupBindings);
            }, TablixRendererFS.prototype.getRowGroupBindings = function(rowStart, rowEnd) {
                for (var _a, rowGroupBindings = [], rowIndex = rowStart; rowIndex <= rowEnd; rowIndex++) {
                    var rowHeight = this.getRowHeight(rowIndex), rowTop = this.getRowTop(rowIndex), isBlankRow = !1, numberOfBlankRowsBefore = 0;
                    this.renderMeta.binder.blankRowsEnabled() && (isBlankRow = this.renderMeta.rowNavigator.isBlankRow(rowIndex), 
                    numberOfBlankRowsBefore = this.renderMeta.rowNavigator.numberOfBlankRowsBefore(rowIndex));
                    var rowBinding = {
                        classNames: [ "row" ],
                        attributes: {
                            role: "row",
                            "row-index": rowIndex.toString()
                        },
                        styleProperties: {
                            position: "absolute",
                            height: rowHeight + "px",
                            width: "100%",
                            top: rowTop + "px",
                            "pointer-events": "none"
                        },
                        children: []
                    };
                    isBlankRow ? rowBinding.attributes["aria-hidden"] = "true" : rowBinding.attributes["aria-rowindex"] = (this.getAriaRowIndex(rowIndex) - numberOfBlankRowsBefore).toString();
                    var headersWidth = this.unfrozenRowHeaders ? 0 : this.rowLevelWidthMeasureManager.getHeadersWidth(), columnsWidth = this.columnWidthMeasureManager.getColumnsWidth(), rowHeaderBindings = this.getPrefixBindings(rowIndex), cellGroupBindings = this.getMainBindings(rowIndex, this.renderMeta.visibleColumnRange[0], this.renderMeta.visibleColumnRange[1]);
                    this.unfrozenRowHeaders || this.renderType !== pivotTableControlTypes.y2.Matrix || (_a = rowBinding.children).push.apply(_a, rowHeaderBindings);
                    var scrollableViewport = {
                        attributes: {
                            role: "presentation"
                        },
                        classNames: [ "scrollable-cells-viewport" ],
                        styleProperties: {
                            position: "absolute",
                            "overflow-x": "clip",
                            height: "100%",
                            left: headersWidth + "px",
                            right: "0"
                        },
                        children: [ {
                            attributes: {
                                role: "presentation"
                            },
                            classNames: [ "scrollable-cells-container" ],
                            styleProperties: {
                                position: "absolute",
                                height: "100%",
                                width: columnsWidth + "px"
                            },
                            children: this.unfrozenRowHeaders || this.renderType === pivotTableControlTypes.y2.Table ? (0, 
                            tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], rowHeaderBindings, !0), cellGroupBindings, !0) : cellGroupBindings
                        } ]
                    };
                    (this.onObject || this.enableCalculationHighlight) && this.renderType === pivotTableControlTypes.y2.Matrix && (scrollableViewport.attributes[htmlSubSelectionHelper.oy] = (0).toString()), 
                    rowBinding.children.push(scrollableViewport), rowGroupBindings.push(rowBinding);
                }
                return rowGroupBindings;
            }, TablixRendererFS.prototype.getPrefixBindings = function(rowIndex) {
                for (var rowHeaderBindings = [], numRowHeaderLevels = this.renderMeta.rowNavigator.getHierarchyDepth(), columnIndex = 0; columnIndex < numRowHeaderLevels; columnIndex++) {
                    var rowHeaderBinding = this.getPrefixCellBinding(rowIndex, columnIndex);
                    rowHeaderBindings.push(rowHeaderBinding);
                }
                return rowHeaderBindings;
            }, TablixRendererFS.prototype.getMainBindings = function(rowIndex, columnStart, columnEnd) {
                for (var mainBindings = [], columnIndex = columnStart; columnIndex <= columnEnd; columnIndex++) {
                    var mainCellBinding = this.getMainCellBinding(rowIndex, columnIndex);
                    mainBindings.push(mainCellBinding);
                }
                return mainBindings;
            }, TablixRendererFS.prototype.adjustCellBindingPadding = function(cellBinding, columnWidth) {
                var paddingLeft = parseFloat(cellBinding.styleProperties["padding-left"]), paddingRight = parseFloat(cellBinding.styleProperties["padding-right"]);
                isNaN(paddingLeft) && (paddingLeft = 0), isNaN(paddingRight) && (paddingRight = 0);
                var _a = this.getAdjustedPaddings(columnWidth, paddingLeft, paddingRight), adjustedPaddingRight = _a[1];
                cellBinding.styleProperties["padding-left"] = _a[0] + "px", cellBinding.styleProperties["padding-right"] = adjustedPaddingRight + "px", 
                cellBinding.styleProperties["--padding-left"] = paddingLeft.toString(), cellBinding.styleProperties["--padding-right"] = paddingRight.toString();
            }, TablixRendererFS.prototype.getAdjustedPaddings = function(columnWidth, paddingLeft, paddingRight) {
                var paddingRightMax = Math.max(columnWidth - paddingLeft, 0), adjustedPaddingRight = Math.min(paddingRight, paddingRightMax);
                return [ Math.min(paddingLeft, columnWidth), adjustedPaddingRight ];
            }, TablixRendererFS.prototype.getRowIndex = function(element) {
                var rowElement = FocusNavigationUtility.M.getFirstMatchingAncestor(element, function(e) {
                    return e.matches("[row-index]");
                }, this.element, !0);
                return rowElement && +rowElement.getAttribute("row-index");
            }, TablixRendererFS.prototype.getColumnIndex = function(element) {
                var cellElement = FocusNavigationUtility.M.getFirstMatchingAncestor(element, function(e) {
                    return e.matches("[column-index]");
                }, this.element, !0);
                return cellElement && +cellElement.getAttribute("column-index");
            }, TablixRendererFS.prototype.isPrefixCell = function(element) {
                return !!FocusNavigationUtility.M.getFirstMatchingAncestor(element, function(e) {
                    return e.matches(".prefix-cell");
                }, this.element, !0);
            }, TablixRendererFS.prototype.getRegion = function(element) {
                return this.isPrefixCell(element) ? pivotTableControlTypes.aP.Prefix : pivotTableControlTypes.aP.Main;
            }, TablixRendererFS.prototype.isFillerCell = function(element) {
                return !!FocusNavigationUtility.M.getFirstMatchingAncestor(element, function(e) {
                    return e.matches(".filler-cell");
                }, this.element, !0);
            }, TablixRendererFS.prototype.getFirstScrollableCellsContainer = function() {
                return d3.select(this.element).select(".scrollable-cells-container").node();
            }, TablixRendererFS.prototype.getAriaColIndex = function(columnIndex, isPrefixCell) {
                return isPrefixCell ? columnIndex + 1 : columnIndex + 1 + this.renderMeta.rowNavigator.getHierarchyDepth();
            }, TablixRendererFS.prototype.getColumnWidth = function(columnIndex, isPrefixCell) {
                return isPrefixCell ? this.rowLevelWidthMeasureManager.getLevelWidth(columnIndex) : this.columnWidthMeasureManager.getPageColumns()[measurement.yl.getPageIndex(columnIndex, measurement.MN)].getColumnWidths()[columnIndex % measurement.MN];
            }, TablixRendererFS.prototype.getColumnLeft = function(columnIndex, isPrefixCell) {
                if (isPrefixCell) return this.rowLevelWidthMeasureManager.getLevelLeft(columnIndex);
                var pageColumn = this.columnWidthMeasureManager.getPageColumns()[measurement.yl.getPageIndex(columnIndex, measurement.MN)];
                return this.columnWidthMeasureManager.getPageColumnLeft(pageColumn) + _.sum(pageColumn.getColumnWidths().slice(0, columnIndex % measurement.MN));
            }, TablixRendererFS;
        }(), TablixRendererTop = function(_super) {
            function TablixRendererTop() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(TablixRendererTop, _super), TablixRendererTop.prototype.setResizeHandlers = function(columnWidthResizeHandler, rowLevelWidthResizeHandler) {
                this.columnWidthResizeHandler = columnWidthResizeHandler, this.rowLevelWidthResizeHandler = rowLevelWidthResizeHandler;
            }, TablixRendererTop.prototype.adjustHeaders = function() {
                var self = this;
                for (var rowIndex in d3.select(this.element).selectAll(".primary-columnheader, .secondary-columnheader").each(function() {
                    var rowIndex = self.getRowIndex(this), columnIndex = self.getColumnIndex(this), width = self.getMainCellWidth(rowIndex, columnIndex), isFirstVisibleColumn = columnIndex === self.renderMeta.visibleColumnRange[0], isVisuallyHidden = d3.select(this).classed("secondary-columnheader") && !isFirstVisibleColumn;
                    if (d3.select(this).classed("visually-hidden", isVisuallyHidden), isFirstVisibleColumn && !d3.select(this).classed("last-secondary-columnheader")) {
                        var offset = self.getColumnHeaderOffset(columnIndex), adjustedWidth = width - offset;
                        d3.select(this).style("transform", "translateX(".concat(offset, "px)")), d3.select(this).style("width", adjustedWidth + "px");
                    } else isVisuallyHidden || (d3.select(this).style("transform", null), d3.select(this).style("width", width + "px"));
                }), this.viewSync) for (var columnIndex in this.viewSync[rowIndex]) if ("resizable" !== this.viewSync[rowIndex][columnIndex]) {
                    if ("-1" === columnIndex) d3.select(this.element).select('[row-index="'.concat(rowIndex, '"]')).selectAll(".prefix-cell").each(function() {
                        if (!self.isFillerCell(this)) {
                            var item = self.getItemByElement(this);
                            new HeaderResizer(item, this, self.rowLevelWidthResizeHandler, null, self.prefixCellClickHandler, !0);
                        }
                    }); else {
                        var element = this.getElementByIndex(rowIndex, columnIndex, pivotTableControlTypes.aP.Main);
                        if (!this.isFillerCell(element)) {
                            var item = this.getItemByElement(element);
                            new HeaderResizer(item, element, this.columnWidthResizeHandler, null, this.mainCellClickHandler, !0);
                        }
                    }
                    this.viewSync[rowIndex][columnIndex] = "resizable";
                }
            }, TablixRendererTop.prototype.getPrefixCellBinding = function(rowIndex, columnIndex) {
                var rowHeaderLevel = columnIndex, columnHeaderLevel = rowIndex, cornerLeft = this.rowLevelWidthMeasureManager.getLevelLeft(rowHeaderLevel), cornerHeight = this.columnLevelHeightMeasureManager.getLevelHeight(columnHeaderLevel), cornerWidth = this.rowLevelWidthMeasureManager.getLevelWidth(rowHeaderLevel), corner = this.renderMeta.rowNavigator.getCorner(rowHeaderLevel, columnHeaderLevel), cornerBinding = this.renderMeta.binder.getCornerCellBinding(corner, !1, !0, this.onObject, cornerWidth);
                return cornerBinding.classNames || (cornerBinding.classNames = []), cornerBinding.attributes || (cornerBinding.attributes = {}), 
                cornerBinding.styleProperties || (cornerBinding.styleProperties = {}), cornerBinding.classNames.push("prefix-cell"), 
                cornerBinding.attributes.role = "columnheader", cornerBinding.attributes["column-index"] = columnIndex.toString(), 
                cornerBinding.attributes["aria-colindex"] = this.getAriaColIndex(columnIndex, !0).toString(), 
                null == cornerBinding.attributes.tabindex && (cornerBinding.attributes.tabindex = "0"), 
                cornerBinding.styleProperties.position = "absolute", cornerBinding.styleProperties.left = cornerLeft + "px", 
                cornerBinding.styleProperties.height = cornerHeight + "px", cornerBinding.styleProperties.width = cornerWidth + "px", 
                cornerBinding.styleProperties["box-sizing"] = "border-box", cornerBinding.styleProperties["pointer-events"] = "auto", 
                this.adjustCellBindingPadding(cornerBinding, cornerWidth), cornerBinding;
            }, TablixRendererTop.prototype.getMainCellBinding = function(rowIndex, columnIndex) {
                var columnHeaderLevel = rowIndex, pageColumn = this.columnWidthMeasureManager.getPageColumns()[measurement.yl.getPageIndex(columnIndex, measurement.MN)], columnHeaderLeft = this.columnWidthMeasureManager.getPageColumnLeft(pageColumn) + _.sum(pageColumn.getColumnWidths().slice(0, columnIndex % measurement.MN));
                this.unfrozenRowHeaders && (columnHeaderLeft += this.rowLevelWidthMeasureManager.getHeadersWidth());
                var columnHeaderLeaf = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex), columnHeader = this.renderMeta.columnNavigator.getLeafAncestorAtLevel(columnHeaderLeaf, columnHeaderLevel, !0);
                if (!columnHeader) return {
                    attributes: {
                        role: "columnheader",
                        "column-index": columnIndex.toString(),
                        "aria-colindex": this.getAriaColIndex(columnIndex, !1).toString()
                    },
                    classNames: [ "main-cell", "filler-cell", "visually-hidden" ],
                    styleProperties: {
                        position: "absolute",
                        left: columnHeaderLeft + "px",
                        height: "0",
                        width: "0",
                        "box-sizing": "border-box",
                        "--padding-left": "0",
                        "--padding-right": "0"
                    }
                };
                var nextColumnHeader, nextColumnHeaderLeaf = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex + 1);
                nextColumnHeaderLeaf && (nextColumnHeader = this.renderMeta.columnNavigator.getLeafAncestorAtLevel(nextColumnHeaderLeaf, columnHeaderLevel, !0)), 
                nextColumnHeader === columnHeader && (nextColumnHeader = void 0);
                var height = this.getMainCellHeight(rowIndex, columnIndex), width = this.getMainCellWidth(rowIndex, columnIndex), columnHeaderBinding = this.renderMeta.binder.getColumnHeaderBinding(columnHeader, !1, !0, this.onObject, nextColumnHeader, width), isLeaf = this.renderMeta.columnNavigator.isLeaf(columnHeader), primaryIndex = this.renderMeta.columnNavigator.getIndexOfFirstLeaf(columnHeader), colSpan = this.renderMeta.columnNavigator.getNodeLeafCount(columnHeader) - (columnIndex - primaryIndex), isPrimaryColumnHeader = !isLeaf && this.renderMeta.columnNavigator.getIndexOfFirstLeaf(columnHeader) === columnIndex, isSecondaryColumnHeader = !isLeaf && this.renderMeta.columnNavigator.getIndexOfFirstLeaf(columnHeader) !== columnIndex, isLastSecondaryColumnHeader = isSecondaryColumnHeader && 1 === colSpan;
                return columnHeaderBinding.classNames || (columnHeaderBinding.classNames = []), 
                columnHeaderBinding.attributes || (columnHeaderBinding.attributes = {}), columnHeaderBinding.styleProperties || (columnHeaderBinding.styleProperties = {}), 
                columnHeaderBinding.classNames.push("main-cell"), isPrimaryColumnHeader && columnHeaderBinding.classNames.push("primary-columnheader"), 
                isSecondaryColumnHeader && columnHeaderBinding.classNames.push("secondary-columnheader"), 
                isLastSecondaryColumnHeader && columnHeaderBinding.classNames.push("last-secondary-columnheader"), 
                columnHeaderBinding.attributes.role = "columnheader", columnHeaderBinding.attributes["column-index"] = columnIndex.toString(), 
                columnHeaderBinding.attributes["aria-colindex"] = this.getAriaColIndex(columnIndex, !1).toString(), 
                columnHeaderBinding.attributes.tabindex = "0", columnHeaderBinding.styleProperties.position = "absolute", 
                columnHeaderBinding.styleProperties.left = columnHeaderLeft + "px", columnHeaderBinding.styleProperties.width = width + "px", 
                columnHeaderBinding.styleProperties.height = height + "px", columnHeaderBinding.styleProperties["box-sizing"] = "border-box", 
                columnHeaderBinding.styleProperties["pointer-events"] = "auto", this.adjustCellBindingPadding(columnHeaderBinding, width), 
                columnHeaderBinding;
            }, TablixRendererTop.prototype.getAriaRowIndex = function(rowIndex) {
                return rowIndex + 1;
            }, TablixRendererTop.prototype.getRowHeight = function(rowIndex) {
                return this.columnLevelHeightMeasureManager.getLevelHeight(rowIndex);
            }, TablixRendererTop.prototype.getRowTop = function(rowIndex) {
                return this.columnLevelHeightMeasureManager.getLevelTop(rowIndex);
            }, TablixRendererTop.prototype.getPrefixCellWidth = function(rowIndex, columnIndex) {
                return this.rowLevelWidthMeasureManager.getLevelWidth(columnIndex);
            }, TablixRendererTop.prototype.getPrefixCellHeight = function(rowIndex, columnIndex) {
                return this.columnLevelHeightMeasureManager.getLevelHeight(rowIndex);
            }, TablixRendererTop.prototype.getPrefixCellLeft = function(rowIndex, columnIndex) {
                return this.rowLevelWidthMeasureManager.getLevelLeft(columnIndex);
            }, TablixRendererTop.prototype.getMainCellWidth = function(rowIndex, columnIndex) {
                var _this = this, columnHeaderLevel = rowIndex, columnHeaderLeaf = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex), columnHeader = this.renderMeta.columnNavigator.getLeafAncestorAtLevel(columnHeaderLeaf, columnHeaderLevel), primaryIndex = this.renderMeta.columnNavigator.getIndexOfFirstLeaf(columnHeader), colSpan = this.renderMeta.columnNavigator.getNodeLeafCount(columnHeader) - (columnIndex - primaryIndex), lastMeasuredColumnIndex = this.columnWidthMeasureManager.getLastMeasuredIndex(), columnEnd = Math.min(columnIndex + colSpan - 1, lastMeasuredColumnIndex);
                return _.sum(_.range(columnIndex, columnEnd + 1).map(function(c) {
                    return _this.columnWidthMeasureManager.getColumnWidth(c);
                }));
            }, TablixRendererTop.prototype.getMainCellHeight = function(rowIndex, columnIndex) {
                var _this = this, columnHeaderLevel = rowIndex, columnHeaderLeaf = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex), columnHeader = this.renderMeta.columnNavigator.getLeafAncestorAtLevel(columnHeaderLeaf, columnHeaderLevel), rowSpan = (0, 
                iPivotTableHierarchyNavigator.zG)(columnHeader, this.renderMeta.columnNavigator);
                return _.sum(_.range(rowIndex, columnHeaderLevel + rowSpan - 1 + 1).map(function(r) {
                    return _this.columnLevelHeightMeasureManager.getLevelHeight(r);
                }));
            }, TablixRendererTop.prototype.getMainCellLeft = function(rowIndex, columnIndex) {
                var pageColumn = this.columnWidthMeasureManager.getPageColumns()[measurement.yl.getPageIndex(columnIndex, measurement.MN)];
                return this.columnWidthMeasureManager.getPageColumnLeft(pageColumn) + _.sum(pageColumn.getColumnWidths().slice(0, columnIndex % measurement.MN));
            }, TablixRendererTop.prototype.getCellItem = function(rowIndex, columnIndex, isPrefixCell) {
                if (isPrefixCell) return this.renderMeta.rowNavigator.getCorner(columnIndex, rowIndex);
                var columnHeaderLeaf = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex);
                return this.renderMeta.columnNavigator.getLeafAncestorAtLevel(columnHeaderLeaf, rowIndex);
            }, TablixRendererTop.prototype.getColumnHeaderOffset = function(columnIndex) {
                return this.renderMeta.viewport.left - this.getColumnLeft(columnIndex, !1);
            }, TablixRendererTop;
        }(TablixRendererFS), TablixRendererMid = function(_super) {
            function TablixRendererMid() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(TablixRendererMid, _super), TablixRendererMid.prototype.scrollToY = function(y) {
                this.element.style.top = -y + "px";
            }, TablixRendererMid.prototype.adjustHeaders = function() {
                if (this.rowHeaderType !== pivotTableControlTypes.xU.Stepped && !this.repeatRowHeaders) {
                    var self = this;
                    d3.select(this.element).selectAll(".primary-rowheader, .secondary-rowheader").each(function() {
                        var rowIndex = self.getRowIndex(this), columnIndex = self.getColumnIndex(this), height = self.getPrefixCellHeight(rowIndex, columnIndex), isFirstVisibleRow = rowIndex === self.renderMeta.visibleRowRange[0], isVisuallyHidden = d3.select(this).classed("secondary-rowheader") && !isFirstVisibleRow;
                        if (d3.select(this).classed("visually-hidden", isVisuallyHidden), isFirstVisibleRow && !d3.select(this).classed("last-secondary-rowheader")) {
                            var offset = self.getRowHeaderOffset(rowIndex), adjustedHeight = height - offset;
                            d3.select(this).style("transform", "translateY(".concat(offset, "px)")), d3.select(this).style("height", adjustedHeight + "px");
                        } else isVisuallyHidden || (d3.select(this).style("transform", null), d3.select(this).style("height", height + "px"));
                    });
                }
            }, TablixRendererMid.prototype.getPrefixCellBinding = function(rowIndex, columnIndex) {
                var referenceCell, rowHeaderLevel = columnIndex, rowHeaderLeaf = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex), rowHeader = this.renderMeta.rowNavigator.getLeafAncestorAtLevel(rowHeaderLeaf, rowHeaderLevel, !0), rowHeaderLeft = this.rowLevelWidthMeasureManager.getLevelLeft(rowHeaderLevel);
                if (!rowHeader) return {
                    attributes: {
                        role: "rowheader",
                        "column-index": columnIndex.toString(),
                        "aria-colindex": this.getAriaColIndex(columnIndex, !0).toString()
                    },
                    classNames: [ "prefix-cell", "filler-cell", "visually-hidden" ],
                    styleProperties: {
                        position: "absolute",
                        left: rowHeaderLeft + "px",
                        height: "0",
                        width: "0",
                        "box-sizing": "border-box",
                        "--padding-left": "0",
                        "--padding-right": "0"
                    }
                };
                if (this.renderType === pivotTableControlTypes.y2.Table) {
                    var currentRow = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex), rowRefColumn = this.renderMeta.columnNavigator.getColumnIndexFromQueryName(this.renderMeta.binder.getRowReferenceQueryName());
                    referenceCell = rowRefColumn ? this.renderMeta.rowNavigator.getIntersection(currentRow, rowRefColumn) : void 0;
                }
                var nextRowHeader, nextRowHeaderLeaf = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex + 1);
                nextRowHeaderLeaf && (nextRowHeader = this.renderMeta.rowNavigator.getLeafAncestorAtLevel(nextRowHeaderLeaf, rowHeaderLevel, !0)), 
                nextRowHeader === rowHeader && (nextRowHeader = void 0);
                var rowHeaderWidth = this.getPrefixCellWidth(rowIndex, columnIndex), rowHeaderHeight = this.getPrefixCellHeight(rowIndex, columnIndex), isLeaf = this.renderMeta.rowNavigator.isLeaf(rowHeader), isSteppedLayout = this.rowHeaderType === pivotTableControlTypes.xU.Stepped, primaryIndex = this.renderMeta.rowNavigator.getIndexOfFirstLeaf(rowHeader), rowSpan = this.renderMeta.rowNavigator.getNodeLeafCount(rowHeader) - (rowIndex - primaryIndex), isPrimaryRowHeader = !isLeaf && !isSteppedLayout && this.renderMeta.rowNavigator.getIndexOfFirstLeaf(rowHeader) === rowIndex, isSecondaryRowHeader = !isLeaf && !isSteppedLayout && this.renderMeta.rowNavigator.getIndexOfFirstLeaf(rowHeader) !== rowIndex, isLastSecondaryRowHeader = isSecondaryRowHeader && 1 === rowSpan, width = this.renderType === pivotTableControlTypes.y2.Table ? this.columnWidthMeasureManager.getColumnsWidth() : rowHeaderWidth, columnWidth = width + "px", rowHeaderBinding = this.renderMeta.binder.getRowHeaderBinding(rowHeader, !1, this.onObject, !1, referenceCell, nextRowHeader, width, this.repeatRowHeaders ? rowHeaderLeaf : void 0, isSecondaryRowHeader);
                if (rowHeaderBinding.classNames || (rowHeaderBinding.classNames = []), rowHeaderBinding.attributes || (rowHeaderBinding.attributes = {}), 
                rowHeaderBinding.styleProperties || (rowHeaderBinding.styleProperties = {}), rowHeaderBinding.classNames.push("prefix-cell"), 
                isPrimaryRowHeader && rowHeaderBinding.classNames.push("primary-rowheader"), isSecondaryRowHeader && rowHeaderBinding.classNames.push("secondary-rowheader"), 
                isLastSecondaryRowHeader && rowHeaderBinding.classNames.push("last-secondary-rowheader"), 
                rowHeaderBinding.attributes["column-index"] = columnIndex.toString(), rowHeaderBinding.attributes["aria-colindex"] = this.getAriaColIndex(columnIndex, !0).toString(), 
                rowHeaderBinding.attributes.tabindex = "0", rowHeaderBinding.styleProperties.position = "absolute", 
                rowHeaderBinding.styleProperties.left = rowHeaderLeft + "px", rowHeaderBinding.styleProperties.height = rowHeaderHeight + "px", 
                rowHeaderBinding.styleProperties.width = columnWidth, rowHeaderBinding.styleProperties["box-sizing"] = "border-box", 
                rowHeaderBinding.styleProperties["pointer-events"] = this.renderType === pivotTableControlTypes.y2.Table ? "none" : "auto", 
                this.renderType === pivotTableControlTypes.y2.Table) {
                    var isFirstRow = rowHeader === _.first(this.renderMeta.rowNavigator.getHierarchyItems()), isLastRow = this.renderMeta.rowNavigator.isLastItem(rowHeader, this.renderMeta.rowNavigator.getHierarchyItems()), borderInfo = this.renderMeta.binder.getBorderInfo(isFirstRow, isLastRow, !0, !0, !0, pivotTableControlTypes.p0.Body);
                    rowHeaderBinding.styleProperties["--outline-top"] = borderInfo.weightTop + 1 + "px", 
                    rowHeaderBinding.styleProperties["--outline-right"] = borderInfo.weightRight + 1 + "px", 
                    rowHeaderBinding.styleProperties["--outline-bottom"] = borderInfo.weightBottom + 1 + "px", 
                    rowHeaderBinding.styleProperties["--outline-left"] = borderInfo.weightLeft + 1 + "px", 
                    rowHeaderBinding.styleProperties["z-index"] = "1";
                }
                return this.adjustCellBindingPadding(rowHeaderBinding, rowHeaderWidth), rowHeaderBinding;
            }, TablixRendererMid.prototype.getMainCellBinding = function(rowIndex, columnIndex) {
                var rowItem = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex), columnItem = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex), cellItem = this.renderMeta.rowNavigator.getIntersection(rowItem, columnItem), rowHeight = this.getRowHeight(rowIndex), columnWidth = this.getColumnWidth(columnIndex, !1), cellLeft = this.getColumnLeft(columnIndex, !1);
                this.unfrozenRowHeaders && (cellLeft += this.rowLevelWidthMeasureManager.getHeadersWidth());
                var nextRowItem = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex + 1), nextBodyCell = nextRowItem && this.renderMeta.rowNavigator.getIntersection(nextRowItem, columnItem), cellBinding = this.renderMeta.binder.getBodyCellBinding(cellItem, !1, rowHeight, columnWidth, !0, this.onObject, nextBodyCell, this.showTotalPlaceHolders);
                return cellBinding.classNames || (cellBinding.classNames = []), cellBinding.attributes || (cellBinding.attributes = {}), 
                cellBinding.styleProperties || (cellBinding.styleProperties = {}), cellBinding.classNames.push("main-cell"), 
                cellBinding.attributes.role = "gridcell", cellBinding.attributes["column-index"] = columnIndex.toString(), 
                cellBinding.attributes["aria-colindex"] = this.getAriaColIndex(columnIndex, !1).toString(), 
                cellBinding.attributes.tabindex = "0", cellBinding.styleProperties.position = "absolute", 
                cellBinding.styleProperties["box-sizing"] = "border-box", cellBinding.styleProperties.height = "100%", 
                cellBinding.styleProperties.width = columnWidth + "px", cellBinding.styleProperties.left = cellLeft + "px", 
                cellBinding.styleProperties["pointer-events"] = "auto", this.adjustCellBindingPadding(cellBinding, columnWidth), 
                cellBinding;
            }, TablixRendererMid.prototype.getAriaRowIndex = function(rowIndex) {
                return rowIndex + 1 + this.renderMeta.columnNavigator.getHierarchyDepth();
            }, TablixRendererMid.prototype.getRowHeight = function(rowIndex) {
                return this.rowHeightMeasureManager.getPageRows()[measurement.yl.getPageIndex(rowIndex, measurement.hw)].getRowHeights()[rowIndex % measurement.hw];
            }, TablixRendererMid.prototype.getRowTop = function(rowIndex) {
                var pageRow = this.rowHeightMeasureManager.getPageRows()[measurement.yl.getPageIndex(rowIndex, measurement.hw)];
                return this.rowHeightMeasureManager.getPageRowTop(pageRow) + _.sum(pageRow.getRowHeights().slice(0, rowIndex % measurement.hw));
            }, TablixRendererMid.prototype.getPrefixCellWidth = function(rowIndex, columnIndex) {
                var _this = this;
                if (this.rowHeaderType === pivotTableControlTypes.xU.Stepped) return this.rowLevelWidthMeasureManager.getHeadersWidth();
                var rowHeaderLevel = columnIndex, rowHeaderLeaf = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex), rowHeader = this.renderMeta.rowNavigator.getLeafAncestorAtLevel(rowHeaderLeaf, rowHeaderLevel), colSpan = (0, 
                iPivotTableHierarchyNavigator.zG)(rowHeader, this.renderMeta.rowNavigator);
                return _.sum(_.range(rowHeaderLevel, rowHeaderLevel + colSpan - 1 + 1).map(function(l) {
                    return _this.rowLevelWidthMeasureManager.getLevelWidth(l);
                }));
            }, TablixRendererMid.prototype.getPrefixCellHeight = function(rowIndex, columnIndex) {
                var _this = this;
                if (this.renderType === pivotTableControlTypes.y2.Table || this.rowHeaderType === pivotTableControlTypes.xU.Stepped) return this.rowHeightMeasureManager.getRowHeight(rowIndex);
                var rowHeaderLevel = columnIndex, rowHeaderLeaf = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex), rowHeader = this.renderMeta.rowNavigator.getLeafAncestorAtLevel(rowHeaderLeaf, rowHeaderLevel), primaryIndex = this.renderMeta.rowNavigator.getIndexOfFirstLeaf(rowHeader), rowSpan = this.renderMeta.rowNavigator.getNodeLeafCount(rowHeader) - (rowIndex - primaryIndex), lastMeasuredRowIndex = this.rowHeightMeasureManager.getLastMeasuredIndex(), rowEnd = Math.min(rowIndex + rowSpan - 1, lastMeasuredRowIndex);
                return _.sum(_.range(rowIndex, rowEnd + 1).map(function(r) {
                    return _this.rowHeightMeasureManager.getRowHeight(r);
                }));
            }, TablixRendererMid.prototype.getPrefixCellLeft = function(rowIndex, columnIndex) {
                return this.getColumnLeft(columnIndex, !0);
            }, TablixRendererMid.prototype.getMainCellWidth = function(rowIndex, columnIndex) {
                return this.getColumnWidth(columnIndex, !1);
            }, TablixRendererMid.prototype.getMainCellHeight = function(rowIndex, columnIndex) {
                return this.getRowHeight(rowIndex);
            }, TablixRendererMid.prototype.getMainCellLeft = function(rowIndex, columnIndex) {
                return this.getColumnLeft(columnIndex, !1);
            }, TablixRendererMid.prototype.getCellItem = function(rowIndex, columnIndex, isPrefixCell) {
                if (isPrefixCell) {
                    var rowHeaderLevel = columnIndex, rowHeaderLeaf = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex);
                    return this.renderMeta.rowNavigator.getLeafAncestorAtLevel(rowHeaderLeaf, rowHeaderLevel);
                }
                var rowItem = this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex), columnItem = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex);
                return this.renderMeta.rowNavigator.getIntersection(rowItem, columnItem);
            }, TablixRendererMid.prototype.getRowHeaderOffset = function(rowIndex) {
                return this.renderMeta.viewport.top - this.getRowTop(rowIndex);
            }, TablixRendererMid;
        }(TablixRendererFS), TablixRendererBot = function(_super) {
            function TablixRendererBot() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(TablixRendererBot, _super), TablixRendererBot.prototype.adjustHeaders = function() {
                for (var ariaRowIndex = this.renderMeta.columnNavigator.getHierarchyDepth() + this.renderMeta.rowNavigator.getHierarchyLeafCount() + this.renderMeta.rowNavigator.getFloatingHierarchyLeafCount(), _i = 0, rowsReversed_1 = d3.select(this.element).selectAll(".row").nodes().reverse(); _i < rowsReversed_1.length; _i++) d3.select(rowsReversed_1[_i]).attr("aria-rowindex", ariaRowIndex--);
            }, TablixRendererBot.prototype.getPrefixCellBinding = function(rowIndex, columnIndex) {
                var rowHeaderHeight = this.rowHeightMeasureManager.getFloatingRowHeight(rowIndex), rowHeaderWidth = this.rowLevelWidthMeasureManager.getHeadersWidth(), rowHeader = this.renderMeta.rowNavigator.getFloatingHierarchyLeafAt(rowIndex), rowHeaderBinding = this.renderMeta.binder.getRowHeaderBinding(rowHeader, !1, this.onObject, !0, void 0, void 0, rowHeaderWidth);
                return rowHeaderBinding.classNames || (rowHeaderBinding.classNames = []), rowHeaderBinding.attributes || (rowHeaderBinding.attributes = {}), 
                rowHeaderBinding.styleProperties || (rowHeaderBinding.styleProperties = {}), rowHeaderBinding.classNames.push("prefix-cell"), 
                rowHeaderBinding.attributes.role = "rowheader", rowHeaderBinding.attributes["column-index"] = columnIndex.toString(), 
                rowHeaderBinding.attributes["aria-colindex"] = this.getAriaColIndex(columnIndex, !0).toString(), 
                rowHeaderBinding.attributes.tabindex = "0", rowHeaderBinding.styleProperties.position = "absolute", 
                rowHeaderBinding.styleProperties.left = "0", rowHeaderBinding.styleProperties.height = rowHeaderHeight + "px", 
                rowHeaderBinding.styleProperties.width = rowHeaderWidth + "px", rowHeaderBinding.styleProperties["box-sizing"] = "border-box", 
                rowHeaderBinding.styleProperties["pointer-events"] = "auto", this.adjustCellBindingPadding(rowHeaderBinding, rowHeaderWidth), 
                rowHeaderBinding;
            }, TablixRendererBot.prototype.getMainCellBinding = function(rowIndex, columnIndex) {
                var rowItem = this.renderMeta.rowNavigator.getFloatingHierarchyLeafAt(rowIndex), columnItem = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex), bodyCell = this.renderMeta.rowNavigator.getIntersection(rowItem, columnItem), bodyCellHeight = this.getRowHeight(rowIndex), bodyCellWidth = this.getColumnWidth(columnIndex, !1), cellLeft = this.getColumnLeft(columnIndex, !1);
                this.unfrozenRowHeaders && (cellLeft += this.rowLevelWidthMeasureManager.getHeadersWidth());
                var bodyCellBinding = this.renderMeta.binder.getBodyCellBinding(bodyCell, !1, bodyCellHeight, bodyCellWidth, !0, this.onObject, void 0, this.showTotalPlaceHolders);
                return bodyCellBinding.classNames || (bodyCellBinding.classNames = []), bodyCellBinding.attributes || (bodyCellBinding.attributes = {}), 
                bodyCellBinding.styleProperties || (bodyCellBinding.styleProperties = {}), bodyCellBinding.classNames.push("main-cell"), 
                bodyCellBinding.attributes.role = "gridcell", bodyCellBinding.attributes["column-index"] = columnIndex.toString(), 
                bodyCellBinding.attributes["aria-colindex"] = this.getAriaColIndex(columnIndex, !1).toString(), 
                bodyCellBinding.attributes.tabindex = "0", bodyCellBinding.styleProperties.position = "absolute", 
                bodyCellBinding.styleProperties["box-sizing"] = "border-box", bodyCellBinding.styleProperties.height = "100%", 
                bodyCellBinding.styleProperties.width = bodyCellWidth + "px", bodyCellBinding.styleProperties.left = cellLeft + "px", 
                bodyCellBinding.styleProperties["pointer-events"] = "auto", this.adjustCellBindingPadding(bodyCellBinding, bodyCellWidth), 
                bodyCellBinding;
            }, TablixRendererBot.prototype.getAriaRowIndex = function(rowIndex) {
                return -1;
            }, TablixRendererBot.prototype.getRowHeight = function(rowIndex) {
                return this.rowHeightMeasureManager.getFloatingPageRow().getRowHeights()[rowIndex];
            }, TablixRendererBot.prototype.getRowTop = function(rowIndex) {
                var pageRow = this.rowHeightMeasureManager.getFloatingPageRow();
                return this.rowHeightMeasureManager.getPageRowTop(pageRow) + _.sum(pageRow.getRowHeights().slice(0, rowIndex));
            }, TablixRendererBot.prototype.getPrefixCellWidth = function(rowIndex, columnIndex) {
                return this.rowLevelWidthMeasureManager.getHeadersWidth();
            }, TablixRendererBot.prototype.getPrefixCellHeight = function(rowIndex, columnIndex) {
                return this.rowHeightMeasureManager.getFloatingRowHeight(rowIndex);
            }, TablixRendererBot.prototype.getPrefixCellLeft = function(rowIndex, columnIndex) {
                return 0;
            }, TablixRendererBot.prototype.getMainCellWidth = function(rowIndex, columnIndex) {
                return this.getColumnWidth(columnIndex, !1);
            }, TablixRendererBot.prototype.getMainCellHeight = function(rowIndex, columnIndex) {
                return this.getRowHeight(rowIndex);
            }, TablixRendererBot.prototype.getMainCellLeft = function(rowIndex, columnIndex) {
                return this.getColumnLeft(columnIndex, !1);
            }, TablixRendererBot.prototype.getCellItem = function(rowIndex, columnIndex, isPrefixCell) {
                if (isPrefixCell) return this.renderMeta.rowNavigator.getFloatingHierarchyLeafAt(rowIndex);
                var rowItem = this.renderMeta.rowNavigator.getFloatingHierarchyLeafAt(rowIndex), columnItem = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex);
                return this.renderMeta.rowNavigator.getIntersection(rowItem, columnItem);
            }, TablixRendererBot;
        }(TablixRendererFS), KeyUpState = function(KeyUpState) {
            return KeyUpState[KeyUpState.Default = 0] = "Default", KeyUpState[KeyUpState.ColumnResizing = 1] = "ColumnResizing", 
            KeyUpState[KeyUpState.RowLevelResizing = 2] = "RowLevelResizing", KeyUpState;
        }({}), TablixControl = function() {
            function TablixControl(parent, sizeManager, options, isA11yTable, isA11yMatrix, onObject, enableCalculationHighlighting, hostServices, visualStyle, onVerticalScrollButtonClick, onHorizontalScrollButtonClick, isInteractive, showTotalPlaceHolders, subSelectionHelper, showAsTableNativeMenu) {
                var _this = this;
                this.hostServices = hostServices, this.visualStyle = visualStyle, this.showTotalPlaceHolders = showTotalPlaceHolders, 
                this.subSelectionHelper = subSelectionHelper, this.showAsTableNativeMenu = showAsTableNativeMenu, 
                this.unfrozenRowHeaders = !1, this.isA11yTable = isA11yTable, this.isA11yMatrix = isA11yMatrix, 
                this.renderIteration = 0, this.prevHorizontalWheelTime = 0, this.onObject = onObject, 
                this.enableCalculationHighlighting = enableCalculationHighlighting, this.sizeManager = sizeManager, 
                this.scrollingEnabled = options.scrollingEnabled;
                var scrollUpLabel = hostServices.getLocalizedString(tablixConstants.iC), scrollDownLabel = hostServices.getLocalizedString(tablixConstants.Hw), scrollLeftLabel = hostServices.getLocalizedString(tablixConstants.dm), scrollRightLabel = hostServices.getLocalizedString(tablixConstants.Ds), interactiveGridClass = isInteractive ? "interactive-grid" : "", TablixTemplate = "<div role='document' ignore-focus-loss='true' style='position:relative'>\n                    <button class='scrollUp visually-hidden' tabindex='-1'>".concat(scrollUpLabel, "</button>\n                    <button class='scrollDown visually-hidden' tabindex='-1'>").concat(scrollDownLabel, "</button>\n                    <button class='scrollLeft visually-hidden' tabindex='-1'>").concat(scrollLeftLabel, "</button>\n                    <button class='scrollRight visually-hidden' tabindex='-1'>").concat(scrollRightLabel, "</button>\n                    <div role='grid' class='").concat(interactiveGridClass, " innerContainer' style='position:absolute;left:0;top:0;right:0;bottom:0'>\n                        <div role='presentation' class='top-viewport' drag-resize-disabled='true' style='position:absolute;overflow:clip;left:0;right:0;top:0'></div>\n                        <div role='presentation' class='mid-viewport' style='position:absolute;overflow:hidden;left:0;top:0;right:0;bottom:0;box-sizing:border-box'>\n                            <div role='presentation'></div>\n                        </div>\n                        <div role='presentation' class='bot-viewport' style='position:absolute;overflow:clip;left:0;right:0'></div>\n                    </div>\n                    <div class='measureElement' style='position:absolute;left:0;top:0;visibility:hidden'></div>\n                </div>");
                parent.insertAdjacentHTML("beforeend", TablixTemplate), this.element = parent.lastChild, 
                this.innerContainer = this.element.querySelector(".innerContainer"), this.measureElement = this.element.querySelector(".measureElement"), 
                this.topViewport = this.element.querySelector(".top-viewport"), this.midViewport = this.element.querySelector(".mid-viewport"), 
                this.innerBodyCellContainer = this.midViewport.firstElementChild, this.botViewport = this.element.querySelector(".bot-viewport"), 
                (this.onObject || this.enableCalculationHighlighting) && (this.topViewport.setAttribute(htmlSubSelectionHelper.oy, (0).toString()), 
                this.midViewport.setAttribute(htmlSubSelectionHelper.oy, (0).toString()), this.botViewport.setAttribute(htmlSubSelectionHelper.oy, (0).toString())), 
                d3.select(this.element).select(".scrollUp").on("click", function() {
                    var _a, _b;
                    null === (_a = _this.rowScrollbar) || void 0 === _a || _a.scrollPageUp();
                    var viewport = _this.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, _this.rowHeightMeasureManager, measurement.hw, null === (_b = _this.rowHeightMeasureManager) || void 0 === _b ? void 0 : _b.getLastMeasuredIndex());
                    onVerticalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                }), d3.select(this.element).select(".scrollDown").on("click", function() {
                    var _a, _b;
                    null === (_a = _this.rowScrollbar) || void 0 === _a || _a.scrollPageDown();
                    var viewport = _this.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, _this.rowHeightMeasureManager, measurement.hw, null === (_b = _this.rowHeightMeasureManager) || void 0 === _b ? void 0 : _b.getLastMeasuredIndex());
                    onVerticalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                }), d3.select(this.element).select(".scrollLeft").on("click", function() {
                    var _a, _b;
                    null === (_a = _this.columnScrollbar) || void 0 === _a || _a.scrollPageUp();
                    var viewport = _this.getViewport(), visibleRowRange = measurement.sW.getVisibleRange(viewport.left, viewport.width, _this.columnWidthMeasureManager, measurement.MN, null === (_b = _this.rowHeightMeasureManager) || void 0 === _b ? void 0 : _b.getLastMeasuredIndex());
                    onHorizontalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                }), d3.select(this.element).select(".scrollRight").on("click", function() {
                    var _a, _b;
                    null === (_a = _this.columnScrollbar) || void 0 === _a || _a.scrollPageDown();
                    var viewport = _this.getViewport(), visibleRowRange = measurement.sW.getVisibleRange(viewport.left, viewport.width, _this.columnWidthMeasureManager, measurement.MN, null === (_b = _this.rowHeightMeasureManager) || void 0 === _b ? void 0 : _b.getLastMeasuredIndex());
                    onHorizontalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                }), this.options = options, this.initializeScrollbars(), this.options.whitespaceClickHandler && this.innerContainer.addEventListener("click", function(mouseEvent) {
                    return _this.onClick(mouseEvent);
                }), this.options.columnResizingEnabled && (this.columnWidthResizeHandler = new ColumnWidthResizeHandler(this, !0, !0)), 
                this.options.rowLevelResizingEnabled && (this.rowLevelWidthResizeHandler = new RowLevelWidthResizeHandler(this, !0)), 
                $(this.element).on(focusManager_helpers.BZ, function() {
                    return _this.onFocusManagerEnter();
                }), this.element.addEventListener("keydown", function(event) {
                    return _this.onKeyDown(event);
                }), this.keyUpState = KeyUpState.Default, this.element.addEventListener("keyup", function() {
                    return _this.onKeyUp();
                }), this.focusManager = new PivotTableFocusManager(function() {
                    return _this.onFocusChanged();
                }, this.isA11yTable, this.isA11yMatrix), this.createRenderers(), this.setSteppedLayout(!1), 
                options.scrollingEnabled && this.attachScrollEventHandlers();
            }
            return TablixControl.prototype.onShowTotalPlaceHoldersChanged = function(showTotalPlaceHolders) {
                showTotalPlaceHolders !== this.showTotalPlaceHolders && (this.showTotalPlaceHolders = showTotalPlaceHolders, 
                this.topRenderer && (this.topRenderer.showTotalPlaceHolders = showTotalPlaceHolders), 
                this.midRenderer && (this.midRenderer.showTotalPlaceHolders = showTotalPlaceHolders), 
                this.botRenderer && (this.botRenderer.showTotalPlaceHolders = showTotalPlaceHolders));
            }, TablixControl.prototype.updateOptions = function(options) {
                this.options = options;
            }, TablixControl.prototype.attachScrollEventHandlers = function() {
                var _this = this;
                zone.l.runOutsideAngular(function() {
                    _this.midViewport.style.overflowY = "auto", _this.midViewport.addEventListener("scroll", function() {
                        return _this.scrollTo(null, _this.midViewport.scrollTop);
                    }), _this.innerContainer.addEventListener("wheel", function(wheelEvent) {
                        var _a;
                        performance.now() - _this.prevHorizontalWheelTime > 100 && (_this.propagateWheel = void 0), 
                        clearInterval(_this.momentumScrollHandle);
                        var isVerticalScroll = !wheelEvent.shiftKey && Math.abs(wheelEvent.deltaX) <= Math.abs(wheelEvent.deltaY);
                        if (!_this.propagateWheel && !isVerticalScroll) {
                            var deltaXUnbound = wheelEvent.shiftKey && Math.abs(wheelEvent.deltaX) <= Math.abs(wheelEvent.deltaY) ? wheelEvent.deltaY : wheelEvent.deltaX, deltaX = Math.max(Math.min(deltaXUnbound, TablixControl.ScrollDeltaMax), -TablixControl.ScrollDeltaMax), visualScrolled = _this.scrollBy(deltaX, 0);
                            null !== (_a = _this.propagateWheel) && void 0 !== _a || (_this.propagateWheel = !visualScrolled), 
                            _this.propagateWheel || (wheelEvent.stopPropagation(), wheelEvent.preventDefault()), 
                            _this.prevHorizontalWheelTime = performance.now();
                        }
                    }), _this.innerContainer.addEventListener("touchstart", function(touchEvent) {
                        clearInterval(_this.momentumScrollHandle), _this.propagateTouch = touchEvent.touches.length > 1 || void 0, 
                        _this.touchPreviousX = touchEvent.touches[0].clientX, _this.touchPreviousY = touchEvent.touches[0].clientY;
                    }), _this.innerContainer.addEventListener("touchmove", function(touchEvent) {
                        var _a, _b;
                        if (!_this.propagateTouch) {
                            var deltaX = _this.touchPreviousX - touchEvent.touches[0].clientX, deltaY = _this.touchPreviousY - touchEvent.touches[0].clientY;
                            if (null !== (_a = _this.propagateTouch) && void 0 !== _a || (_this.propagateTouch = 0 === deltaX || Math.abs(deltaX) <= Math.abs(deltaY) || void 0), 
                            !_this.propagateTouch) {
                                _this.touchDeltaX = Math.max(Math.min(deltaX, TablixControl.ScrollDeltaMax), -TablixControl.ScrollDeltaMax), 
                                _this.touchPreviousX = touchEvent.touches[0].clientX, _this.touchPreviousY = touchEvent.touches[0].clientY;
                                var visualScrolled = _this.scrollBy(_this.touchDeltaX, 0);
                                null !== (_b = _this.propagateTouch) && void 0 !== _b || (_this.propagateTouch = !visualScrolled), 
                                _this.propagateTouch || (touchEvent.stopPropagation(), touchEvent.preventDefault());
                            }
                        }
                    }), _this.innerContainer.addEventListener("touchend", function() {
                        if (!_this.propagateTouch) {
                            var renderIteration = _this.renderIteration;
                            _this.momentumScrollHandle = setInterval(function(nt) {
                                nt[0] += 1 / 120;
                                var deltaX = _this.touchDeltaX * (1 - d3.easeCircleOut(nt[0]));
                                renderIteration !== _this.renderIteration || nt[0] >= 120 || Math.abs(deltaX) < 1 ? clearInterval(_this.momentumScrollHandle) : _this.scrollBy(deltaX, 0);
                            }, 1e3 / 60, [ 0 ]);
                        }
                    });
                });
            }, TablixControl.prototype.onFocusManagerEnter = function() {
                var _a;
                null === (_a = this.hostServices.telemetry()) || void 0 === _a || _a.trace(2, "TableKeyboardFocused"), 
                this.updateFocus(), this.getFocusedCell(this.focusManager.CurrentFocus).focus({
                    preventScroll: !0
                });
            }, TablixControl.prototype.onKeyUp = function() {
                switch (this.keyUpState) {
                  case KeyUpState.ColumnResizing:
                    this.columnWidthResizeHandler.onEndResize(), this.keyUpState = KeyUpState.Default;
                    break;

                  case KeyUpState.RowLevelResizing:
                    this.rowLevelWidthResizeHandler.onEndResize(), this.keyUpState = KeyUpState.Default;
                    break;

                  case KeyUpState.Default:
                    break;

                  default:
                    debug.fF.assertNever(this.keyUpState);
                }
            }, TablixControl.prototype.onKeyDown = function(keyboardEvent) {
                var _this = this;
                if (this.renderLock || this.keyboardLock) return keyboardEvent.stopPropagation(), 
                void keyboardEvent.preventDefault();
                this.updateFocus();
                var code = keyboardEvent.code || keyboardEvent.key, hasShift = keyboardEvent.shiftKey, hasCtrl = browserUtils.M.isCtrlOrMeta(keyboardEvent), hasAlt = keyboardEvent.altKey, isA11yTable = this.isA11yTable, isA11yMatrix = this.isA11yMatrix;
                if ("Escape" !== code && "Esc" !== code && "Tab" !== code) {
                    if ("ArrowRight" === code || "Right" === code) return keyboardEvent.stopPropagation(), 
                    keyboardEvent.preventDefault(), this.runIfFrameReady(function() {
                        if (hasShift) {
                            if (_this.focusManager.CurrentFocus.columnHeader && _this.columnWidthResizeHandler) return _this.columnWidthResizeHandler.onStartResize(_this.focusManager.CurrentFocus.item), 
                            _this.columnWidthResizeHandler.onResize({
                                x: 1,
                                y: 0
                            }), void (_this.keyUpState = KeyUpState.ColumnResizing);
                            if (_this.focusManager.CurrentFocus.cornerCell && _this.columnWidthResizeHandler) return _this.rowLevelWidthResizeHandler.onStartResize(_this.focusManager.CurrentFocus.item), 
                            _this.rowLevelWidthResizeHandler.onResize({
                                x: 1,
                                y: 0
                            }), void (_this.keyUpState = KeyUpState.RowLevelResizing);
                            _this.options.rowHeaderExpandCollapseHandler && _this.focusManager.CurrentFocus.rowHeader && 1 === _this.rowNavigator.getExpansionState(_this.focusManager.CurrentFocus.item) && _this.options.rowHeaderExpandCollapseHandler(_this.focusManager.CurrentFocus.item, !1);
                        } else _this.focusManager.moveFocus("right", hasCtrl, isA11yTable, isA11yMatrix);
                    });
                    if ("ArrowLeft" === code || "Left" === code) return keyboardEvent.stopPropagation(), 
                    keyboardEvent.preventDefault(), this.runIfFrameReady(function() {
                        if (hasShift) {
                            if (_this.focusManager.CurrentFocus.columnHeader && _this.columnWidthResizeHandler) return _this.columnWidthResizeHandler.onStartResize(_this.focusManager.CurrentFocus.item), 
                            _this.columnWidthResizeHandler.onResize({
                                x: -1,
                                y: 0
                            }), void (_this.keyUpState = KeyUpState.ColumnResizing);
                            if (_this.focusManager.CurrentFocus.cornerCell && _this.columnWidthResizeHandler) return _this.rowLevelWidthResizeHandler.onStartResize(_this.focusManager.CurrentFocus.item), 
                            _this.rowLevelWidthResizeHandler.onResize({
                                x: -1,
                                y: 0
                            }), void (_this.keyUpState = KeyUpState.RowLevelResizing);
                            _this.options.rowHeaderExpandCollapseHandler && _this.focusManager.CurrentFocus.rowHeader && 0 === _this.rowNavigator.getExpansionState(_this.focusManager.CurrentFocus.item) && _this.options.rowHeaderExpandCollapseHandler(_this.focusManager.CurrentFocus.item, !0);
                        } else _this.focusManager.moveFocus("left", hasCtrl, isA11yTable, isA11yMatrix);
                    });
                    if ("ArrowUp" === code || "Up" === code) return keyboardEvent.stopPropagation(), 
                    keyboardEvent.preventDefault(), this.runIfFrameReady(function() {
                        if (hasShift && !hasCtrl) {
                            if (isA11yTable) {
                                var currentFocus = _this.focusManager.CurrentFocus;
                                _this.focusManager.moveFocus("up", hasCtrl, isA11yTable, isA11yMatrix);
                                var nextFocus = _this.focusManager.CurrentFocus;
                                _this.selectFocus(keyboardEvent, currentFocus), _this.selectFocus(keyboardEvent, nextFocus);
                            }
                        } else _this.focusManager.moveFocus("up", hasCtrl, isA11yTable, isA11yMatrix);
                    });
                    if ("ArrowDown" === code || "Down" === code) return keyboardEvent.stopPropagation(), 
                    keyboardEvent.preventDefault(), this.runIfFrameReady(function() {
                        if (hasShift && !hasCtrl) {
                            if (isA11yTable) {
                                var currentFocus = _this.focusManager.CurrentFocus;
                                _this.focusManager.moveFocus("down", hasCtrl, isA11yTable, isA11yMatrix);
                                var nextFocus = _this.focusManager.CurrentFocus;
                                _this.selectFocus(keyboardEvent, currentFocus), _this.selectFocus(keyboardEvent, nextFocus);
                            }
                        } else _this.focusManager.moveFocus("down", hasCtrl, isA11yTable, isA11yMatrix);
                    });
                    if ("Home" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                    this.runIfFrameReady(function() {
                        _this.focusManager.moveFocus("home", hasCtrl, isA11yTable, isA11yMatrix);
                    });
                    if ("End" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                    this.runIfFrameReady(function() {
                        _this.focusManager.moveFocus("end", hasCtrl, isA11yTable, isA11yMatrix);
                    });
                    if (this.focusManager.CurrentFocus && (this.focusManager.CurrentFocus.bodyCell || this.focusManager.CurrentFocus.rowHeader)) {
                        if ("PageDown" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                        this.runIfFrameReady(function() {
                            _this.focusManager.moveFocus("pagedown", hasCtrl, isA11yTable, isA11yMatrix, _this.getNumberOfVisibleRows());
                        });
                        if ("PageUp" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                        this.runIfFrameReady(function() {
                            _this.focusManager.moveFocus("pageup", hasCtrl, isA11yTable, isA11yMatrix, _this.getNumberOfVisibleRows());
                        });
                    }
                    return "F10" === code && hasShift ? hasCtrl ? void 0 : (keyboardEvent.preventDefault(), 
                    keyboardEvent.stopPropagation(), this.runIfFrameReady(function() {
                        _this.showContextMenuForFocus(keyboardEvent);
                    })) : "Enter" === code || "Space" === code || "Spacebar" === code || " " === code ? (keyboardEvent.preventDefault(), 
                    keyboardEvent.stopPropagation(), this.runIfFrameReady(function() {
                        _this.selectFocus(keyboardEvent, _this.focusManager.CurrentFocus);
                    })) : "KeyO" === code && hasCtrl && hasAlt ? (keyboardEvent.preventDefault(), keyboardEvent.stopPropagation(), 
                    this.runIfFrameReady(function() {
                        _this.activateCellContent();
                    })) : ("KeyC" === code || "c" === code) && hasCtrl && hasShift ? (keyboardEvent.stopPropagation(), 
                    keyboardEvent.preventDefault(), this.runIfFrameReady(function() {
                        _this.options.whitespaceClickHandler(null, !0);
                    })) : void 0;
                }
            }, TablixControl.prototype.runIfFrameReady = function(task) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.keyboardLock = !0, task(), [ 4, this.requestAnimationFrameAsync() ];

                          case 1:
                            return _a.sent(), this.keyboardLock = !1, [ 2 ];
                        }
                    });
                });
            }, TablixControl.prototype.notifyVisual = function(focus) {
                focus.bodyCell && this.options.bodyCellFocusHandler ? this.options.bodyCellFocusHandler(focus.item, focus.bodyCell.rowIndex) : focus.columnHeader && this.options.columnHeaderFocusHandler ? this.options.columnHeaderFocusHandler(focus.item) : focus.rowHeader && this.options.rowHeaderFocusHandler ? this.options.rowHeaderFocusHandler(focus.item) : focus.cornerCell && this.options.cornerCellFocusHandler ? this.options.cornerCellFocusHandler(focus.item) : focus.floatingBodyCell && this.options.bodyCellFocusHandler ? this.options.bodyCellFocusHandler(focus.item) : void 0 !== focus.floatingRowHeader && this.options.rowHeaderFocusHandler && this.options.rowHeaderFocusHandler(focus.item);
            }, TablixControl.prototype.setUnfrozenRowHeaders = function(unfrozenRowHeaders) {
                this.unfrozenRowHeaders = unfrozenRowHeaders, this.topRenderer.setUnfrozenRowHeaders(unfrozenRowHeaders), 
                this.midRenderer.setUnfrozenRowHeaders(unfrozenRowHeaders), this.botRenderer.setUnfrozenRowHeaders(unfrozenRowHeaders);
            }, TablixControl.prototype.setRepeatRowHeaders = function(repeatRowHeaders) {
                this.topRenderer.setRepeatRowHeaders(repeatRowHeaders), this.midRenderer.setRepeatRowHeaders(repeatRowHeaders), 
                this.botRenderer.setRepeatRowHeaders(repeatRowHeaders);
            }, TablixControl.prototype.onFocusChanged = function() {
                var _a, focus = this.focusManager.CurrentFocus;
                debug.fF.assertValue(focus, "No current focus"), this.notifyVisual(focus);
                var targetRowIndex, alignBottom, alignedRow, targetColumnIndex, alignedColumn, alignRight, rowScrollOffset, columnScrollOffset, viewPort = this.getViewport();
                if (focus.bodyCell) focus.bodyCell.columnIndex >= 0 && (targetColumnIndex = focus.bodyCell.columnIndex), 
                targetRowIndex = focus.bodyCell.rowIndex; else if (focus.rowHeader) {
                    var rowsRange = measurement._E.getVisibleRange(viewPort.top, viewPort.height, this.rowHeightMeasureManager), firstVisualLeafIndex = (0, 
                    iPivotTableHierarchyNavigator.hG)(focus.item, this.rowNavigator), lastVisualLeafIndex = (0, 
                    iPivotTableHierarchyNavigator.O3)(focus.item, this.rowNavigator);
                    firstVisualLeafIndex <= rowsRange.firstLeafIndex || lastVisualLeafIndex - firstVisualLeafIndex + 1 >= rowsRange.lastLeafIndex - rowsRange.firstLeafIndex + 1 ? (targetRowIndex = firstVisualLeafIndex, 
                    alignBottom = !1) : (targetRowIndex = Math.min(lastVisualLeafIndex, this.rowHeightMeasureManager.getLastMeasuredIndex()), 
                    alignBottom = !0);
                } else if (focus.columnHeader) {
                    var columnsRange = measurement.sW.getVisibleRange(viewPort.left, viewPort.width, this.columnWidthMeasureManager);
                    firstVisualLeafIndex = (0, iPivotTableHierarchyNavigator.hG)(focus.item, this.columnNavigator), 
                    lastVisualLeafIndex = (0, iPivotTableHierarchyNavigator.O3)(focus.item, this.columnNavigator), 
                    firstVisualLeafIndex <= columnsRange.firstLeafIndex || lastVisualLeafIndex - firstVisualLeafIndex + 1 >= columnsRange.lastLeafIndex - columnsRange.firstLeafIndex + 1 ? (targetColumnIndex = firstVisualLeafIndex, 
                    alignRight = !1) : (targetColumnIndex = Math.min(lastVisualLeafIndex, this.columnWidthMeasureManager.getLastMeasuredIndex()), 
                    alignRight = !0);
                } else focus.floatingBodyCell && (targetColumnIndex = focus.floatingBodyCell.columnIndex);
                if (void 0 !== targetRowIndex && this.rowScrollbar.visible && (rowsRange = measurement._E.getVisibleRange(viewPort.top, viewPort.height, this.rowHeightMeasureManager)) && (targetRowIndex <= rowsRange.firstLeafIndex ? alignedRow = {
                    rowIndex: targetRowIndex,
                    visibleHeight: Number.MAX_VALUE,
                    alignBottom: null != alignBottom && alignBottom
                } : targetRowIndex >= rowsRange.lastLeafIndex && (alignedRow = {
                    rowIndex: targetRowIndex,
                    visibleHeight: Number.MAX_VALUE,
                    alignBottom: null == alignBottom || alignBottom
                })), void 0 !== targetColumnIndex && this.columnScrollbar.visible && (columnsRange = measurement.sW.getVisibleRange(viewPort.left, viewPort.width, this.columnWidthMeasureManager)) && (targetColumnIndex <= columnsRange.firstLeafIndex ? alignedColumn = this.unfrozenRowHeaders && 0 === targetColumnIndex && this.rowLevelWidthMeasureManager.getHeadersWidth() - this.columnScrollbar.viewMin > 0 ? null : {
                    columnIndex: targetColumnIndex,
                    visibleWidth: Number.MAX_VALUE,
                    alignRight: null != alignRight && alignRight
                } : targetColumnIndex >= columnsRange.lastLeafIndex && (alignedColumn = {
                    columnIndex: targetColumnIndex,
                    visibleWidth: Number.MAX_VALUE,
                    alignRight: null == alignRight || alignRight
                })), alignedRow && (rowScrollOffset = measurement._E.getOffset(alignedRow, this.rowHeightMeasureManager), 
                alignedRow.alignBottom && (rowScrollOffset -= this.rowScrollbar.viewSize)), alignedColumn && (columnScrollOffset = measurement.sW.getOffset(alignedColumn, this.columnWidthMeasureManager), 
                alignedColumn.alignRight && (columnScrollOffset -= this.columnScrollbar.viewSize), 
                this.unfrozenRowHeaders && (columnScrollOffset += this.rowLevelWidthMeasureManager.getHeadersWidth())), 
                this.unfrozenRowHeaders && (focus.cornerCell || focus.rowHeader || focus.floatingRowHeader)) {
                    var element = this.getFocusedCell(focus), left = element.offsetLeft, width = element.offsetWidth;
                    columnScrollOffset = left < this.columnScrollbar.viewMin || width > this.columnScrollbar.viewSize ? left : left + width > this.columnScrollbar.viewMin + this.columnScrollbar.viewSize ? left - this.columnScrollbar.viewSize : null;
                }
                this.scrollTo(columnScrollOffset, rowScrollOffset), null === (_a = this.getFocusedCell(focus)) || void 0 === _a || _a.focus({
                    preventScroll: !0
                });
            }, TablixControl.prototype.getFocusedCell = function(focus) {
                var _a, _b;
                if (focus.bodyCell) return -1 === focus.bodyCell.columnIndex ? this.midRenderer.getElementByIndex(focus.bodyCell.rowIndex, 0, pivotTableControlTypes.aP.Prefix) : this.midRenderer.getElementByIndex(focus.bodyCell.rowIndex, focus.bodyCell.columnIndex, pivotTableControlTypes.aP.Main);
                if (focus.columnHeader) {
                    var columnHeader = focus.item, rowIndex = this.columnNavigator.getLevel(columnHeader), columnIndex = void 0;
                    return columnIndex = this.isA11yTable ? this.columnNavigator.getIndexOfFirstLeaf(columnHeader) : null !== (_a = this.rowNavigator.getLeafIndex(columnHeader)) && void 0 !== _a ? _a : this.rowNavigator.getIndexOfFirstLeaf(columnHeader), 
                    this.topRenderer.getElementByIndex(rowIndex, columnIndex, pivotTableControlTypes.aP.Main);
                }
                if (focus.rowHeader) {
                    var rowHeader = focus.item;
                    return rowIndex = null !== (_b = this.columnNavigator.getLeafIndex(rowHeader)) && void 0 !== _b ? _b : this.columnNavigator.getIndexOfFirstLeaf(rowHeader), 
                    columnIndex = this.steppedLayout ? 0 : this.rowNavigator.getLevel(rowHeader), this.midRenderer.getElementByIndex(rowIndex, columnIndex, pivotTableControlTypes.aP.Prefix);
                }
                return focus.cornerCell ? this.topRenderer.getElementByIndex(focus.cornerCell.columnLevel, focus.cornerCell.rowLevel, pivotTableControlTypes.aP.Prefix) : focus.floatingBodyCell ? this.botRenderer.getElementByIndex(focus.floatingBodyCell.rowIndex, focus.floatingBodyCell.columnIndex, pivotTableControlTypes.aP.Main) : null != focus.floatingRowHeader ? this.botRenderer.getElementByIndex(focus.floatingRowHeader, 0, pivotTableControlTypes.aP.Prefix) : void debug.fF.assertFail("Unexpected focused item");
            }, TablixControl.prototype.getCurrentFocusBoundingRect = function() {
                var focusedElement = document.activeElement;
                if (focusedElement) {
                    var rect = focusedElement.getBoundingClientRect();
                    return {
                        top: rect.top,
                        left: rect.left,
                        width: rect.width,
                        height: rect.height
                    };
                }
                return {
                    top: 0,
                    left: 0,
                    width: 0,
                    height: 0
                };
            }, TablixControl.prototype.selectFocus = function(keyboardEvent, focusState) {
                var item = focusState.item, mouseEvent = this.createMouseEvent(keyboardEvent);
                focusState.bodyCell ? this.options.bodyCellClickHandler && this.options.bodyCellClickHandler(item, mouseEvent, focusState.bodyCell.rowIndex, pivotTableControlTypes.p0.Body) : focusState.floatingBodyCell ? this.options.bodyCellClickHandler && this.options.bodyCellClickHandler(item, mouseEvent, void 0, pivotTableControlTypes.p0.Footer) : focusState.rowHeader || void 0 !== focusState.floatingRowHeader ? this.options.rowHeaderClickHandler && this.options.rowHeaderClickHandler(item, mouseEvent) : focusState.columnHeader ? this.options.columnHeaderClickHandler && this.options.columnHeaderClickHandler(item, mouseEvent) : focusState.cornerCell ? this.options.cornerCellClickHandler && this.options.cornerCellClickHandler(item, mouseEvent) : debug.fF.assertFail("Unexpected focused item");
            }, TablixControl.prototype.activateCellContent = function() {
                var element = document.activeElement;
                if (element && this.focusManager.CurrentFocus && this.options.cellContentActivationHandler) {
                    var mouseEvent = this.createSimpleMouseClickEvent();
                    this.options.cellContentActivationHandler(element, mouseEvent);
                }
            }, TablixControl.prototype.createSimpleMouseClickEvent = function() {
                var elementRect = this.getCurrentFocusBoundingRect();
                return new MouseEvent("click", {
                    clientX: elementRect.left,
                    clientY: elementRect.top,
                    ctrlKey: !1,
                    metaKey: !1,
                    shiftKey: !1,
                    altKey: !1
                });
            }, TablixControl.prototype.createMouseEvent = function(keyboardEvent) {
                var elementRect = this.getCurrentFocusBoundingRect();
                return new MouseEvent("click", {
                    clientX: elementRect.left,
                    clientY: elementRect.top,
                    ctrlKey: keyboardEvent.ctrlKey,
                    metaKey: keyboardEvent.metaKey,
                    shiftKey: keyboardEvent.shiftKey,
                    altKey: keyboardEvent.altKey
                });
            }, TablixControl.prototype.showContextMenuForFocus = function(keyboardEvent) {
                var _a, currentFocus = this.focusManager.CurrentFocus;
                if (-1 !== (null === (_a = currentFocus.bodyCell) || void 0 === _a ? void 0 : _a.columnIndex)) {
                    debug.fF.assertValue(currentFocus && currentFocus.item, "Keyboard Selection triggered with no focused cell");
                    var item = currentFocus.item, elementRect = this.getCurrentFocusBoundingRect(), mouseEvent = new MouseEvent("contextmenu", {
                        clientX: elementRect.left,
                        clientY: elementRect.top,
                        ctrlKey: keyboardEvent.ctrlKey,
                        metaKey: keyboardEvent.metaKey
                    });
                    currentFocus.bodyCell || currentFocus.floatingBodyCell ? this.options.bodyCellContextMenuHandler && this.options.bodyCellContextMenuHandler(item, mouseEvent) : currentFocus.rowHeader || void 0 !== currentFocus.floatingRowHeader ? this.options.rowHeaderContextMenuHandler && this.options.rowHeaderContextMenuHandler(item, mouseEvent) : currentFocus.columnHeader ? this.options.columnHeaderContextMenuHandler && this.options.columnHeaderContextMenuHandler(item, mouseEvent) : currentFocus.cornerCell ? this.options.cornerCellContextMenuHandler && this.options.cornerCellContextMenuHandler(item, mouseEvent) : debug.fF.assertFail("Unexpected focused item");
                }
            }, TablixControl.prototype.onClick = function(mouseEvent) {
                var contentWidth = this.rowLevelWidthMeasureManager.getHeadersWidth() + this.columnWidthMeasureManager.getColumnsWidth(), contentHeight = this.columnLevelHeightMeasureManager.getHeadersHeight() + this.rowHeightMeasureManager.getRowsHeight() + this.rowHeightMeasureManager.getFloatingRowHeights();
                if (!(contentWidth >= this.width && contentHeight >= this.height)) {
                    var coordinates = (0, tablixUtils1.ut)(this.element, mouseEvent);
                    (coordinates.x > contentWidth || coordinates.y > contentHeight) && this.options.whitespaceClickHandler(mouseEvent);
                }
            }, TablixControl.prototype.initializeScrollbars = function() {
                var _this = this;
                this.columnScrollbar = new scrollbar.Xg(this.element, 0, !0, this.options.onScroll), 
                this.columnScrollbar.smallIncrement = 20, this.columnScrollbar.min = 0, this.columnScrollbar.height = (0, 
                pivotTableControlUtils.S)(pivotTableControlConstants.zf), this.columnScrollbar.element.style.position = "absolute", 
                this.columnScrollbar.element.style.left = this.isA11yTable ? "1px" : "0", this.columnScrollbar.element.style.bottom = "0", 
                this.columnScrollbar._onscroll.push(function() {
                    clearInterval(_this.momentumScrollHandle), _this.refresh();
                }), this.rowScrollbar = new scrollbar.AT(this.element, 0, !0, this.options.onScroll), 
                this.rowScrollbar.smallIncrement = 20, this.rowScrollbar.min = 0, this.rowScrollbar.width = (0, 
                pivotTableControlUtils.S)(pivotTableControlConstants.zf), this.rowScrollbar.element.style.position = "absolute", 
                this.rowScrollbar.element.style.right = "0", this.rowScrollbar.element.style.top = "0", 
                this.rowScrollbar._onscroll.push(function() {
                    clearInterval(_this.momentumScrollHandle), _this.refresh();
                }), this.rowScrollbar.element.setAttribute("aria-hidden", "true"), this.columnScrollbar.element.setAttribute("aria-hidden", "true");
            }, TablixControl.prototype.setSteppedLayout = function(steppedLayout) {
                if (steppedLayout !== this.steppedLayout) {
                    this.steppedLayout = steppedLayout;
                    var rowHeaderType = steppedLayout ? pivotTableControlTypes.xU.Stepped : pivotTableControlTypes.xU.Blocked;
                    this.columnWidthMeasureManager = new measurement.Sv(this.measureElement, this.sizeManager), 
                    this.rowLevelWidthMeasureManager = this.steppedLayout ? new measurement.FA(this.measureElement, this.sizeManager) : new measurement.DX(this.measureElement, this.sizeManager), 
                    this.rowHeightMeasureManager = this.steppedLayout ? new measurement.AV(this.measureElement, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.sizeManager) : new measurement.DJ(this.measureElement, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.sizeManager), 
                    this.columnLevelHeightMeasureManager = new measurement.sB(this.measureElement, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.sizeManager), 
                    this.topRenderer.updateMeasureManagers(rowHeaderType, this.rowHeightMeasureManager, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.columnLevelHeightMeasureManager), 
                    this.midRenderer.updateMeasureManagers(rowHeaderType, this.rowHeightMeasureManager, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.columnLevelHeightMeasureManager), 
                    this.botRenderer.updateMeasureManagers(rowHeaderType, this.rowHeightMeasureManager, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.columnLevelHeightMeasureManager), 
                    this.focusManager.updateMeasureManagers(this.rowHeightMeasureManager, this.columnWidthMeasureManager), 
                    this.clearMeasurement();
                }
            }, TablixControl.prototype.createRenderers = function() {
                var _this = this, renderType = this.isA11yTable ? pivotTableControlTypes.y2.Table : pivotTableControlTypes.y2.Matrix;
                this.topRenderer = new TablixRendererTop(this.topViewport, this.options.cornerCellClickHandler, this.options.cornerCellContextMenuHandler, this.options.columnHeaderClickHandler, this.options.columnHeaderContextMenuHandler, this.options.columnHeaderInteractionHandler, pivotTableControlTypes.p0.Header, renderType, this.onObject, this.enableCalculationHighlighting, function() {
                    return !_this.renderLock;
                }, this.showTotalPlaceHolders, this.showAsTableNativeMenu), this.topRenderer.setResizeHandlers(this.columnWidthResizeHandler, this.rowLevelWidthResizeHandler), 
                this.midRenderer = new TablixRendererMid(this.innerBodyCellContainer, this.options.rowHeaderClickHandler, this.options.rowHeaderContextMenuHandler, this.options.bodyCellClickHandler, this.options.bodyCellContextMenuHandler, this.options.bodyCellInteractionHandler, pivotTableControlTypes.p0.Body, renderType, this.onObject, this.enableCalculationHighlighting, function() {
                    return !_this.renderLock;
                }, this.showTotalPlaceHolders, this.showAsTableNativeMenu), this.botRenderer = new TablixRendererBot(this.botViewport, this.options.rowHeaderClickHandler, this.options.rowHeaderContextMenuHandler, this.options.bodyCellClickHandler, this.options.bodyCellContextMenuHandler, this.options.bodyCellInteractionHandler, pivotTableControlTypes.p0.Footer, renderType, this.onObject, this.enableCalculationHighlighting, function() {
                    return !_this.renderLock;
                }, this.showTotalPlaceHolders, this.showAsTableNativeMenu);
            }, TablixControl.prototype.setWidth = function(width) {
                this.width = width, this.element.style.width = (0, pivotTableControlUtils.S)(this.width), 
                this.columnScrollbar.invalidateArrange();
            }, TablixControl.prototype.setHeight = function(height) {
                this.height = height, this.element.style.height = (0, pivotTableControlUtils.S)(this.height), 
                this.rowScrollbar.invalidateArrange();
            }, TablixControl.prototype.getWidth = function() {
                return this.width;
            }, TablixControl.prototype.getHeight = function() {
                return this.height;
            }, TablixControl.prototype.setClassName = function(value) {
                this.element.className = value;
            }, TablixControl.prototype.setColumnNavigator = function(hierarchyNavigator) {
                this.columnNavigator = hierarchyNavigator, this.focusManager.columnNavigator = hierarchyNavigator;
            }, TablixControl.prototype.setRowNavigator = function(hierarchyNavigator) {
                this.rowNavigator = hierarchyNavigator, this.focusManager.rowNavigator = hierarchyNavigator;
            }, TablixControl.prototype.setBinder = function(binder) {
                this.binder = binder;
            }, TablixControl.prototype.getSteppedLayout = function() {
                return this.steppedLayout;
            }, TablixControl.prototype.getColumnNavigator = function() {
                return this.columnNavigator;
            }, TablixControl.prototype.getRowNavigator = function() {
                return this.rowNavigator;
            }, TablixControl.prototype.getSizeManager = function() {
                return this.sizeManager;
            }, TablixControl.prototype.getBinder = function() {
                return this.binder;
            }, TablixControl.prototype.getColumnWidthMeasureManager = function() {
                return this.columnWidthMeasureManager;
            }, TablixControl.prototype.getRowHeightMeasureManager = function() {
                return this.rowHeightMeasureManager;
            }, TablixControl.prototype.getColumnLevelHeightMeasureManager = function() {
                return this.columnLevelHeightMeasureManager;
            }, TablixControl.prototype.getRowLevelWidthMeasureManager = function() {
                return this.rowLevelWidthMeasureManager;
            }, TablixControl.prototype.getTopRenderer = function() {
                return this.topRenderer;
            }, TablixControl.prototype.getMidRenderer = function() {
                return this.midRenderer;
            }, TablixControl.prototype.getBotRenderer = function() {
                return this.botRenderer;
            }, TablixControl.prototype.getViewport = function() {
                var left = this.columnScrollbar.viewMin, top = this.rowScrollbar.viewMin, width = this.columnScrollbar.viewSize, height = this.rowScrollbar.viewSize;
                return this.unfrozenRowHeaders && (left = Math.max(left - this.rowLevelWidthMeasureManager.getHeadersWidth(), 0), 
                width -= Math.max(this.rowLevelWidthMeasureManager.getHeadersWidth() - this.columnScrollbar.viewMin, 0)), 
                {
                    left,
                    top,
                    width: width = Math.max(width, 0),
                    height: height = Math.max(height, 0)
                };
            }, TablixControl.prototype.getClientWidth = function() {
                return this.width - (this.rowScrollbar.visible ? pivotTableControlConstants.zf : 0);
            }, TablixControl.prototype.storeFocus = function() {
                var rowIndex, columnIndex, section, region, activeElement = document.activeElement;
                if (this.topViewport.contains(activeElement)) this.topRenderer.isPrefixCell(activeElement) ? (rowIndex = this.topRenderer.getRowIndex(activeElement), 
                columnIndex = this.isA11yTable ? -1 : this.topRenderer.getColumnIndex(activeElement), 
                section = pivotTableControlTypes.p0.Header, region = pivotTableControlTypes.aP.Prefix) : (rowIndex = this.topRenderer.getRowIndex(activeElement), 
                columnIndex = this.topRenderer.getColumnIndex(activeElement), section = pivotTableControlTypes.p0.Header, 
                region = pivotTableControlTypes.aP.Main); else if (this.midViewport.contains(activeElement)) this.midRenderer.isPrefixCell(activeElement) ? (rowIndex = this.midRenderer.getRowIndex(activeElement), 
                columnIndex = this.isA11yTable ? -1 : this.midRenderer.getColumnIndex(activeElement), 
                section = pivotTableControlTypes.p0.Body, region = pivotTableControlTypes.aP.Prefix) : (rowIndex = this.midRenderer.getRowIndex(activeElement), 
                columnIndex = this.midRenderer.getColumnIndex(activeElement), section = pivotTableControlTypes.p0.Body, 
                region = pivotTableControlTypes.aP.Main); else if (this.botViewport.contains(activeElement)) this.botRenderer.isPrefixCell(activeElement) ? (rowIndex = this.botRenderer.getRowIndex(activeElement), 
                columnIndex = this.isA11yTable ? -1 : this.midRenderer.getColumnIndex(activeElement), 
                section = pivotTableControlTypes.p0.Footer, region = pivotTableControlTypes.aP.Prefix) : (rowIndex = this.botRenderer.getRowIndex(activeElement), 
                columnIndex = this.botRenderer.getColumnIndex(activeElement), section = pivotTableControlTypes.p0.Footer, 
                region = pivotTableControlTypes.aP.Main); else if (this.isA11yTable) {
                    var firstVisibleColumnHeader = d3.select(this.topViewport).select(".main-cell").node();
                    rowIndex = this.topRenderer.getRowIndex(firstVisibleColumnHeader), columnIndex = this.topRenderer.getColumnIndex(firstVisibleColumnHeader), 
                    section = pivotTableControlTypes.p0.Header, region = pivotTableControlTypes.aP.Main;
                } else {
                    var corner = d3.select(this.topViewport).select(".prefix-cell").node();
                    rowIndex = this.topRenderer.getRowIndex(corner), columnIndex = this.topRenderer.getColumnIndex(corner), 
                    section = pivotTableControlTypes.p0.Header, region = pivotTableControlTypes.aP.Prefix;
                }
                this.tempFocus = {
                    rowIndex,
                    columnIndex,
                    section,
                    region
                };
            }, TablixControl.prototype.restoreFocus = function() {
                var cellToFocus, _this = this;
                debug.fF.assert(function() {
                    return !!_this.tempFocus;
                }, "tempFocus must be defined"), this.tempFocus.section === pivotTableControlTypes.p0.Header ? cellToFocus = this.topRenderer.getElementByIndex(this.tempFocus.rowIndex, this.tempFocus.columnIndex, this.tempFocus.region) : this.tempFocus.section === pivotTableControlTypes.p0.Body ? cellToFocus = -1 === this.tempFocus.columnIndex ? this.midRenderer.getElementByIndex(this.tempFocus.rowIndex, 0, pivotTableControlTypes.aP.Prefix) : this.midRenderer.getElementByIndex(this.tempFocus.rowIndex, this.tempFocus.columnIndex, this.tempFocus.region) : this.tempFocus.section === pivotTableControlTypes.p0.Footer && (cellToFocus = this.botRenderer.getElementByIndex(this.tempFocus.rowIndex, this.tempFocus.columnIndex, this.tempFocus.region)), 
                cellToFocus || (this.updateFocus(), cellToFocus = this.getFocusedCell(this.focusManager.CurrentFocus)), 
                cellToFocus.focus({
                    preventScroll: !0
                });
            }, TablixControl.prototype.updateFocus = function() {
                var rowIndex, columnIndex, section, hierarchyIndices, activeElement = document.activeElement;
                if (this.topViewport.contains(activeElement)) if (this.topRenderer.isPrefixCell(activeElement)) rowIndex = this.topRenderer.getRowIndex(activeElement), 
                columnIndex = this.isA11yTable ? -1 : this.topRenderer.getColumnIndex(activeElement), 
                section = this.isA11yTable ? pivotTableControlTypes.p0.Header : pivotTableControlTypes.p0.MatrixCorner; else {
                    var item = this.topRenderer.getItemByElement(activeElement);
                    section = pivotTableControlTypes.p0.Header, hierarchyIndices = this.columnNavigator.getPathIndices(item);
                } else if (this.midViewport.contains(activeElement)) this.midRenderer.isPrefixCell(activeElement) ? this.isA11yTable ? (rowIndex = this.midRenderer.getRowIndex(activeElement), 
                columnIndex = -1, section = pivotTableControlTypes.p0.Body) : (item = this.midRenderer.getItemByElement(activeElement), 
                section = pivotTableControlTypes.p0.MatrixRowHeader, hierarchyIndices = this.rowNavigator.getPathIndices(item)) : (rowIndex = this.midRenderer.getRowIndex(activeElement), 
                columnIndex = this.midRenderer.getColumnIndex(activeElement), section = pivotTableControlTypes.p0.Body); else if (this.botViewport.contains(activeElement)) this.botRenderer.isPrefixCell(activeElement) ? this.isA11yTable ? (rowIndex = this.botRenderer.getRowIndex(activeElement), 
                columnIndex = -1, section = pivotTableControlTypes.p0.Footer) : (rowIndex = this.botRenderer.getRowIndex(activeElement), 
                section = pivotTableControlTypes.p0.FooterHeader) : (rowIndex = this.botRenderer.getRowIndex(activeElement), 
                columnIndex = this.botRenderer.getColumnIndex(activeElement), section = pivotTableControlTypes.p0.Footer); else if (this.isA11yTable) {
                    var firstVisibleColumnHeader = d3.select(this.topViewport).select(".main-cell").node();
                    rowIndex = this.topRenderer.getRowIndex(firstVisibleColumnHeader), columnIndex = this.topRenderer.getColumnIndex(firstVisibleColumnHeader), 
                    section = pivotTableControlTypes.p0.Header;
                } else {
                    var corner = d3.select(this.topViewport).select(".prefix-cell").node();
                    rowIndex = this.topRenderer.getRowIndex(corner), columnIndex = this.topRenderer.getColumnIndex(corner), 
                    section = pivotTableControlTypes.p0.MatrixCorner;
                }
                this.focusManager.setAsFocusTableEx(rowIndex, columnIndex, section, hierarchyIndices);
            }, TablixControl.prototype.scrollBy = function(deltaX, deltaY) {
                if (this.renderLock) return !1;
                var xChanged, yChanged;
                if (deltaX) {
                    var prevX = this.columnScrollbar.viewMin;
                    this.columnScrollbar.scrollBy(deltaX, !0), this.columnScrollbar.refresh(), xChanged = prevX !== this.columnScrollbar.viewMin;
                }
                if (deltaY) {
                    var prevY = this.rowScrollbar.viewMin;
                    this.rowScrollbar.scrollBy(deltaY, !0), this.rowScrollbar.refresh(), yChanged = prevY !== this.rowScrollbar.viewMin;
                }
                return !(!xChanged && !yChanged || (this.refresh(), 0));
            }, TablixControl.prototype.scrollTo = function(x, y) {
                this.renderLock || (null != x && (this.columnScrollbar.scrollTo(x, !0), this.columnScrollbar.refresh()), 
                null != y && (this.rowScrollbar.scrollTo(y, !0), this.rowScrollbar.refresh()), this.refresh());
            }, TablixControl.prototype.refresh = function() {
                if (!this.renderLock) {
                    this.options.onScroll && this.options.onScroll();
                    var bodyCellViewport = this.getViewport(), x = this.columnScrollbar.viewMin, y = this.rowScrollbar.viewMin;
                    this.topRenderer.scrollToX(x), this.midRenderer.scrollToX(x), this.botRenderer.scrollToX(x), 
                    this.midViewport.scrollTop = y, this.rowScrollbar.viewMin = this.midViewport.scrollTop, 
                    this.topRenderer.update(bodyCellViewport, this.binder, this.rowNavigator, this.columnNavigator), 
                    this.midRenderer.update(bodyCellViewport, this.binder, this.rowNavigator, this.columnNavigator), 
                    this.botRenderer.update(bodyCellViewport, this.binder, this.rowNavigator, this.columnNavigator);
                }
            }, TablixControl.prototype.renderAsync = function(mode, alignedRow, alignedColumn) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var renderIteration, x, y, isActive, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return renderIteration = ++this.renderIteration, mode === pivotTableControlTypes.BM.ClearMeasurement && this.clearMeasurement(), 
                            this.lockRendering(), [ 4, this.measureAsync(alignedRow, alignedColumn, renderIteration) ];

                          case 1:
                            return _a = _b.sent(), x = _a[0], y = _a[1], renderIteration !== this.renderIteration || (this.unlockRendering(), 
                            (isActive = this.element.contains(document.activeElement)) && this.storeFocus(), 
                            mode !== pivotTableControlTypes.BM.ClearRendering && mode !== pivotTableControlTypes.BM.ClearMeasurement || this.clearRendering(), 
                            this.updateRegionsPosition(), this.updateScrollbars(), this.updateScrollRegionWidth(), 
                            this.updateScrollRegionHeight(), this.scrollTo(x, y), mode === pivotTableControlTypes.BM.ResizeColumn && (this.topRenderer.onColumnResize(), 
                            this.midRenderer.onColumnResize(), this.botRenderer.onColumnResize()), !isActive || mode !== pivotTableControlTypes.BM.ClearRendering && mode !== pivotTableControlTypes.BM.ClearMeasurement || this.restoreFocus(), 
                            this.updateAria(), this.subSelectionHelper && this.onObject && this.subSelectionHelper.addDirectEditPlaceholderOutlines()), 
                            [ 2 ];
                        }
                    });
                });
            }, TablixControl.prototype.lockRendering = function() {
                this.midViewport.style.overflow = "hidden", this.renderLock = !0;
            }, TablixControl.prototype.unlockRendering = function() {
                this.scrollingEnabled && (this.midViewport.style.overflowY = "auto"), this.renderLock = !1;
            }, TablixControl.prototype.measureAsync = function(alignedRow, alignedColumn, renderIteration) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var x, y, columnMeasureStart, rowMeasureStart, viewport, rowVisibleRange, columnVisibleRange;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            if (viewport = this.getViewport(), alignedRow ? rowMeasureStart = alignedRow.rowIndex : (rowVisibleRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.rowHeightMeasureManager), 
                            rowMeasureStart = rowVisibleRange ? rowVisibleRange.firstLeafIndex : 0), alignedColumn ? columnMeasureStart = alignedColumn.columnIndex : (columnVisibleRange = measurement.sW.getVisibleRange(viewport.left, viewport.width, this.columnWidthMeasureManager), 
                            columnMeasureStart = columnVisibleRange ? columnVisibleRange.firstLeafIndex : 0), 
                            columnMeasureStart = Math.max(0, Math.floor(columnMeasureStart - measurement.EO / 2)), 
                            !alignedColumn) return [ 3, 4 ];
                            _a.label = 1;

                          case 1:
                            return this.columnWidthMeasureManager.canAddPageColumn(this.columnNavigator) && alignedColumn.columnIndex > this.columnWidthMeasureManager.getLastMeasuredIndex() ? (this.columnWidthMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart), 
                            [ 4, this.setTimeoutAsync() ]) : [ 3, 3 ];

                          case 2:
                            return _a.sent(), renderIteration !== this.renderIteration ? [ 2, [ 0, 0 ] ] : [ 3, 1 ];

                          case 3:
                            return x = measurement.sW.getOffset(alignedColumn, this.columnWidthMeasureManager), 
                            alignedColumn.alignRight && (x -= this.columnScrollbar.viewSize), [ 3, 5 ];

                          case 4:
                            x = this.columnScrollbar.viewMin, _a.label = 5;

                          case 5:
                            return this.columnWidthMeasureManager.canAddPageColumn(this.columnNavigator) && this.columnWidthMeasureManager.getColumnsWidth() - x <= this.width ? (this.columnWidthMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart), 
                            [ 4, this.setTimeoutAsync() ]) : [ 3, 7 ];

                          case 6:
                            return _a.sent(), renderIteration !== this.renderIteration ? [ 2, [ 0, 0 ] ] : [ 3, 5 ];

                          case 7:
                            if (this.rowLevelWidthMeasureManager.measure(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart, measurement.Ms), 
                            this.rowHeightMeasureManager.ensureLastPageComplete(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart, columnMeasureStart, measurement.EO), 
                            !alignedRow) return [ 3, 11 ];
                            _a.label = 8;

                          case 8:
                            return this.rowHeightMeasureManager.canAddPageRow(this.rowNavigator) && alignedRow.rowIndex > this.rowHeightMeasureManager.getLastMeasuredIndex() ? (this.rowHeightMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart, columnMeasureStart), 
                            [ 4, this.setTimeoutAsync() ]) : [ 3, 10 ];

                          case 9:
                            return _a.sent(), renderIteration !== this.renderIteration ? [ 2, [ 0, 0 ] ] : [ 3, 8 ];

                          case 10:
                            return y = measurement._E.getOffset(alignedRow, this.rowHeightMeasureManager), alignedRow.alignBottom && (y -= this.rowScrollbar.viewSize), 
                            [ 3, 12 ];

                          case 11:
                            y = this.rowScrollbar.viewMin, _a.label = 12;

                          case 12:
                            return this.rowHeightMeasureManager.canAddPageRow(this.rowNavigator) && this.rowHeightMeasureManager.getRowsHeight() - y <= this.height ? (this.rowHeightMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart, columnMeasureStart), 
                            [ 4, this.setTimeoutAsync() ]) : [ 3, 14 ];

                          case 13:
                            return _a.sent(), renderIteration !== this.renderIteration ? [ 2, [ 0, 0 ] ] : [ 3, 12 ];

                          case 14:
                            return this.rowHeightMeasureManager.measureFloatingRows(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart, columnMeasureStart, this.onObject, this.showTotalPlaceHolders), 
                            this.columnLevelHeightMeasureManager.measure(this.binder, this.rowNavigator, this.columnNavigator, rowMeasureStart, columnMeasureStart, measurement.EO), 
                            this.measurePageColumnsAsync(rowMeasureStart, renderIteration), this.measurePageRowsAsync(rowMeasureStart, columnMeasureStart, renderIteration), 
                            [ 2, [ x, y ] ];
                        }
                    });
                });
            }, TablixControl.prototype.updateAria = function() {
                var ariaRowCount = this.columnNavigator.getHierarchyDepth() + this.rowNavigator.getHierarchyLeafCount() + this.rowNavigator.getFloatingHierarchyLeafCount(), ariaColCount = this.rowNavigator.getHierarchyDepth() + this.columnNavigator.getHierarchyLeafCount();
                d3.select(this.innerContainer).attr("aria-rowcount", ariaRowCount), d3.select(this.innerContainer).attr("aria-colcount", ariaColCount);
            }, TablixControl.prototype.setTimeoutAsync = function(milliseconds) {
                return void 0 === milliseconds && (milliseconds = 0), (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, new promise.J(function(resolve) {
                            return zone.l.setTimeout(function() {
                                return resolve();
                            }, milliseconds);
                        }) ];
                    });
                });
            }, TablixControl.prototype.requestAnimationFrameAsync = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, new promise.J(function(resolve) {
                            return zone.l.requestAnimationFrame(function() {
                                return resolve();
                            });
                        }) ];
                    });
                });
            }, TablixControl.prototype.getVisibleRowStart = function() {
                var viewport = this.getViewport(), visibleRowRange = measurement._E.getVisibleRange(viewport.top, viewport.height, this.rowHeightMeasureManager);
                return visibleRowRange ? measurement._E.getVisibleRowStart(visibleRowRange, viewport.top, this.rowHeightMeasureManager) : null;
            }, TablixControl.prototype.getVisibleColumnStart = function() {
                var viewport = this.getViewport(), visibleColumnRange = measurement.sW.getVisibleRange(viewport.left, viewport.width, this.columnWidthMeasureManager);
                return visibleColumnRange ? measurement.sW.getVisibleColumnStart(visibleColumnRange, viewport.left, this.columnWidthMeasureManager) : null;
            }, TablixControl.prototype.clearRendering = function() {
                this.midRenderer.clear(), this.topRenderer.clear(), this.botRenderer.clear();
            }, TablixControl.prototype.clearMeasurement = function() {
                this.columnWidthMeasureManager.clear(), this.rowHeightMeasureManager.clear(), this.columnLevelHeightMeasureManager.clear(), 
                this.rowLevelWidthMeasureManager.clear();
            }, TablixControl.prototype.clear = function() {
                this.renderIteration++, this.clearRendering(), this.clearMeasurement(), this.unlockRendering();
            }, TablixControl.prototype.updateRegionsPosition = function() {
                this.midViewport.style.top = this.topViewport.style.height = (0, pivotTableControlUtils.S)(this.columnLevelHeightMeasureManager.getHeadersHeight()), 
                this.topRenderer.updateBodyLeft(), this.midRenderer.updateBodyLeft(), this.botRenderer.updateBodyLeft();
                var floatingRowHeight = (0, pivotTableControlUtils.S)(this.rowHeightMeasureManager.getFloatingRowHeights());
                this.botViewport.style.height = floatingRowHeight;
            }, TablixControl.prototype.updateScrollbars = function() {
                this.rowScrollbar.invalidateArrange(), this.columnScrollbar.invalidateArrange();
                var floatingRowHeight = this.rowHeightMeasureManager.getFloatingRowHeights(), possibleClientHeight = this.height - this.columnLevelHeightMeasureManager.getHeadersHeight() - floatingRowHeight, possibleClientWidth = this.width - this.rowLevelWidthMeasureManager.getHeadersWidth(), rowsHeight = this.rowHeightMeasureManager.getRowsHeight(), columnsWidth = this.columnWidthMeasureManager.getColumnsWidth(), shouldShowRowScrollbar = this.options.scrollingEnabled && rowsHeight > 0 && rowsHeight > possibleClientHeight, shouldShowColumnScrollbar = this.options.scrollingEnabled && columnsWidth > 0 && columnsWidth > possibleClientWidth;
                !shouldShowRowScrollbar && shouldShowColumnScrollbar && rowsHeight > 0 && (shouldShowRowScrollbar = rowsHeight > possibleClientHeight - pivotTableControlConstants.zf), 
                !shouldShowColumnScrollbar && shouldShowRowScrollbar && columnsWidth > 0 && (shouldShowColumnScrollbar = columnsWidth > possibleClientWidth - pivotTableControlConstants.zf), 
                this.midViewport.style.right = this.topViewport.style.right = this.botViewport.style.right = shouldShowRowScrollbar ? this.rowScrollbar.width : (0, 
                pivotTableControlUtils.S)(0);
                var bodyBottom, floatingBodyBottom, columnScrollbarHeight = shouldShowColumnScrollbar ? pivotTableControlConstants.zf : 0;
                rowsHeight > possibleClientHeight - columnScrollbarHeight ? (bodyBottom = columnScrollbarHeight + floatingRowHeight, 
                floatingBodyBottom = columnScrollbarHeight) : (bodyBottom = possibleClientHeight + floatingRowHeight - rowsHeight, 
                floatingBodyBottom = possibleClientHeight - rowsHeight), this.midViewport.style.bottom = (0, 
                pivotTableControlUtils.S)(bodyBottom), this.botViewport.style.bottom = (0, pivotTableControlUtils.S)(floatingBodyBottom), 
                this.rowScrollbar.show(shouldShowRowScrollbar), this.rowScrollbar.viewSize = this.midViewport.clientHeight, 
                this.rowScrollbar.element.style.bottom = shouldShowColumnScrollbar ? pivotTableControlConstants.zf + "px" : "0", 
                this.rowScrollbar.refresh(), this.columnScrollbar.show(shouldShowColumnScrollbar), 
                this.columnScrollbar.viewSize = this.getBodyCellWidth(), this.unfrozenRowHeaders && (this.columnScrollbar.viewSize += this.rowLevelWidthMeasureManager.getHeadersWidth()), 
                this.columnScrollbar.element.style.right = shouldShowRowScrollbar ? pivotTableControlConstants.zf + "px" : "0", 
                this.columnScrollbar.refresh();
            }, TablixControl.prototype.getBodyCellWidth = function() {
                var rowHeaderWidth = this.rowLevelWidthMeasureManager.getHeadersWidth(), columnsWidth = this.columnWidthMeasureManager.getColumnsWidth();
                return Math.min(this.midViewport.clientWidth - rowHeaderWidth, columnsWidth);
            }, TablixControl.prototype.measurePageColumnsAsync = function(startRowIndex, renderIteration) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.setTimeoutAsync(pivotTableControlConstants.yv) ];

                          case 1:
                            if (_a.sent(), renderIteration !== this.renderIteration) return [ 2 ];
                            _a.label = 2;

                          case 2:
                            return this.columnWidthMeasureManager.canAddPageColumn(this.columnNavigator) ? (this.columnWidthMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex), 
                            this.updateScrollRegionWidth(), [ 4, this.setTimeoutAsync(pivotTableControlConstants.yv) ]) : [ 3, 4 ];

                          case 3:
                            return _a.sent(), renderIteration !== this.renderIteration ? [ 2 ] : [ 3, 2 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, TablixControl.prototype.measurePageRowsAsync = function(rowStartIndex, columnStartIndex, renderIteration) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.setTimeoutAsync(pivotTableControlConstants.yv) ];

                          case 1:
                            if (_a.sent(), renderIteration !== this.renderIteration) return [ 2 ];
                            _a.label = 2;

                          case 2:
                            return this.rowHeightMeasureManager.canAddPageRow(this.rowNavigator) ? (this.rowHeightMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, rowStartIndex, columnStartIndex), 
                            this.updateScrollRegionHeight(), [ 4, this.setTimeoutAsync(pivotTableControlConstants.yv) ]) : [ 3, 4 ];

                          case 3:
                            return _a.sent(), renderIteration !== this.renderIteration ? [ 2 ] : [ 3, 2 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, TablixControl.prototype.updateScrollRegionWidth = function() {
                var rowHeadersWidth = this.rowLevelWidthMeasureManager.getHeadersWidth(), columnsWidth = this.columnWidthMeasureManager.getColumnsWidth(), bodyCellContainerWidth = this.midViewport.clientWidth;
                this.columnScrollbar.max = this.unfrozenRowHeaders ? columnsWidth + rowHeadersWidth : columnsWidth, 
                this.columnScrollbar.viewSize = this.unfrozenRowHeaders ? bodyCellContainerWidth : bodyCellContainerWidth - rowHeadersWidth, 
                this.columnScrollbar.refresh(), this.topRenderer.setRowWidth(), this.midRenderer.setRowWidth(), 
                this.botRenderer.setRowWidth();
            }, TablixControl.prototype.updateScrollRegionHeight = function() {
                var rowsHeight = this.rowHeightMeasureManager.getRowsHeight(), bodyCellContainerHeight = this.midViewport.clientHeight, height = (0, 
                pivotTableControlUtils.S)(Math.max(rowsHeight, bodyCellContainerHeight));
                this.innerBodyCellContainer.style.height = height, this.rowScrollbar.max = rowsHeight, 
                this.rowScrollbar.viewSize = bodyCellContainerHeight, this.rowScrollbar.refresh();
            }, TablixControl.prototype.getNumberOfVisibleRows = function() {
                var viewPort = this.getViewport(), rowsRange = measurement._E.getVisibleRange(viewPort.top, viewPort.height, this.rowHeightMeasureManager);
                if (rowsRange) return Math.max(0 === rowsRange.firstLeafIndex ? rowsRange.lastLeafIndex - rowsRange.firstLeafIndex : rowsRange.lastLeafIndex - rowsRange.firstLeafIndex - 1, 1);
            }, TablixControl.prototype.getMidViewportBoundingClientRect = function() {
                return this.midViewport.getBoundingClientRect();
            }, TablixControl.prototype.getTopViewportBoundingClientRect = function() {
                return this.topViewport.getBoundingClientRect();
            }, TablixControl.prototype.getBotViewportBoundingClientRect = function() {
                return this.botViewport.getBoundingClientRect();
            }, TablixControl.prototype.destroy = function() {
                this.renderIteration = NaN;
            }, TablixControl.ScrollDeltaMax = 200, TablixControl;
        }();
    },
    44102: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            AT: function() {
                return VerticalScrollbar;
            },
            Xg: function() {
                return HorizontalScrollbar;
            },
            fw: function() {
                return fire;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81337), _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66232), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _pivotTable_pivotTableControlConstants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(87914), _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(93340);
        function fire(eventHandlers, eventArgs) {
            if (eventHandlers) for (var _i = 0, eventHandlers_1 = eventHandlers; _i < eventHandlers_1.length; _i++) (0, 
            eventHandlers_1[_i])(eventArgs);
        }
        var ScrollbarButton = function() {
            function ScrollbarButton(owner, direction) {
                this._owner = owner, this._direction = direction, this._timerHandle = void 0, this.createView();
                var that = this;
                this._element.addEventListener("mousedown", function(e) {
                    that.onMouseDown(e);
                }), $(this._element).addClass("unselectable"), $(this._svg).addClass("unselectable"), 
                $(this._polygon).addClass("unselectable");
            }
            return Object.defineProperty(ScrollbarButton.prototype, "element", {
                get: function() {
                    return this._element;
                },
                enumerable: !1,
                configurable: !0
            }), ScrollbarButton.prototype.createView = function() {
                var svgns = "http://www.w3.org/2000/svg";
                this._polygon = document.createElementNS(svgns, "polygon"), this._polygon.setAttributeNS(null, "points", "3,3 6,3 13,8 6,13 3,13 10,8"), 
                this._polygon.setAttributeNS(null, "fill", ScrollbarButton.ARROW_COLOR), this._svg = document.createElementNS(svgns, "svg");
                var svgStyle = this._svg.style;
                svgStyle.position = "absolute", svgStyle.left = "0px", svgStyle.top = "0px", this._svg.appendChild(this._polygon), 
                this._element = document.createElement("div"), this._element.className = Scrollbar.arrowClassName, 
                this._element.appendChild(this._svg), this._owner.element.appendChild(this._element);
            }, ScrollbarButton.prototype.onMouseDown = function(event) {
                var that = this;
                if (clearTimeout(this._timerHandle), !this._mouseUpWrapper) {
                    event.cancelBubble = !0;
                    var that_1 = this;
                    this._mouseUpWrapper = function(event) {
                        that_1.onMouseUp(event);
                    }, Scrollbar.addDocumentMouseUpEvent(this._mouseUpWrapper);
                }
                this._owner._scrollSmallIncrement(this._direction), this._owner.refresh(), this._timerHandle = setTimeout(function() {
                    that.onMouseDown(event);
                }, 100), event.preventDefault && event.preventDefault();
            }, ScrollbarButton.prototype.onMouseUp = function(event) {
                clearTimeout(this._timerHandle), Scrollbar.removeDocumentMouseUpEvent(this._mouseUpWrapper), 
                this._mouseUpWrapper = void 0;
            }, ScrollbarButton.prototype.arrange = function(width, height, angle) {
                var size = Math.min(width, height);
                this._polygon.setAttributeNS(null, "transform", "translate(" + (width - size) / 2 + ", " + (height - size) / 2 + ") scale(" + size / 16 + ") rotate(" + angle + ",8,8)"), 
                this._svg.setAttributeNS(null, "width", width + "px"), this._svg.setAttributeNS(null, "height", height + "px"), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this._element, width), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this._element, height);
            }, ScrollbarButton.MIN_WIDTH = 26, ScrollbarButton.ARROW_COLOR = "#404040", ScrollbarButton;
        }(), Scrollbar = function() {
            function Scrollbar(parentElement, layoutKind, isModern, onScrollBehavior) {
                this.isModern = isModern, this.MIN_BAR_SIZE = 10, this.min = 0, this.max = 10, this.viewMin = 0, 
                this.viewSize = 2, this.smallIncrement = 1, this._onscroll = [], this._screenToOffsetScale = 1, 
                this.createView(parentElement, layoutKind);
                var that = this;
                this._element.addEventListener("mousedown", function(e) {
                    that.onBackgroundMouseDown(e);
                }), this._element.addEventListener("pointerdown", function(e) {
                    (0, _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__.n)(e);
                }), this._element.addEventListener("dblclick", function(e) {
                    (0, _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__.n)(e);
                }), this._middleBar.addEventListener("mousedown", function(e) {
                    that.onMiddleBarMouseDown(e);
                }), this._middleBar.addEventListener("pointerdown", function(e) {
                    (0, _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_1__.n)(e);
                }), this._timerHandle = void 0, this._visible = !0, this.element.winControl = this, 
                $(this._touchPanel).addClass("unselectable"), this.onScrollBehavior = onScrollBehavior;
            }
            return Scrollbar.prototype.scrollBy = function(delta, suppressScrollEvent) {
                this.scrollTo(this.viewMin + delta, suppressScrollEvent);
            }, Scrollbar.prototype.scrollUp = function() {
                this.scrollBy(-this.smallIncrement);
            }, Scrollbar.prototype.scrollDown = function() {
                this.scrollBy(this.smallIncrement);
            }, Scrollbar.prototype.scrollPageUp = function() {
                this.scrollBy(-this.viewSize);
            }, Scrollbar.prototype.scrollPageDown = function() {
                this.scrollBy(this.viewSize);
            }, Object.defineProperty(Scrollbar.prototype, "width", {
                get: function() {
                    return this._width;
                },
                set: function(value) {
                    this._width = value, this._element.style.width = value, this.invalidateArrange();
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "height", {
                get: function() {
                    return this._height;
                },
                set: function(value) {
                    this._height = value, this._element.style.height = value, this.invalidateArrange();
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype.refresh = function() {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar.refresh()");
            }, Object.defineProperty(Scrollbar.prototype, "element", {
                get: function() {
                    return this._element;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "maxButton", {
                get: function() {
                    return this._maxButton;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "middleBar", {
                get: function() {
                    return this._middleBar;
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype._scrollSmallIncrement = function(direction) {
                this.scrollBy(this.smallIncrement * direction);
            }, Object.defineProperty(Scrollbar.prototype, "visible", {
                get: function() {
                    return this._visible;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "isInMouseCapture", {
                get: function() {
                    return void 0 !== this._timerHandle;
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype.show = function(value) {
                this._visible = value, this.element.style.visibility = value ? "visible" : "hidden", 
                this.invalidateArrange();
            }, Scrollbar.prototype._getMouseOffset = function(event) {
                return void 0 !== event.offsetX ? {
                    x: event.offsetX,
                    y: event.offsetY
                } : void 0 !== event.layerX ? {
                    x: event.layerX,
                    y: event.layerY
                } : {
                    x: event.screenX,
                    y: event.screenY
                };
            }, Scrollbar.prototype._getOffsetXDelta = function(event) {
                return (event.screenX - this._screenPrevMousePos.x) / this._screenToOffsetScale;
            }, Scrollbar.prototype._getOffsetYDelta = function(event) {
                return (event.screenY - this._screenPrevMousePos.y) / this._screenToOffsetScale;
            }, Scrollbar.prototype._getOffsetXTouchDelta = function(event) {
                return this._getMouseOffset(event).x - this._offsetTouchPrevPos.x;
            }, Scrollbar.prototype._getOffsetYTouchDelta = function(event) {
                return this._getMouseOffset(event).y - this._offsetTouchPrevPos.y;
            }, Scrollbar.prototype.onTouchStart = function(e) {
                1 === e.touches.length && this.onTouchMouseDown(e.touches[0]);
            }, Scrollbar.prototype.onTouchMove = function(e) {
                1 === e.touches.length && (e.preventDefault && e.preventDefault(), this.onTouchMouseMove(e.touches[0]));
            }, Scrollbar.prototype.onTouchEnd = function(e) {
                this.onTouchMouseUp(1 === e.touches.length ? e.touches[0] : e, !0);
            }, Scrollbar.prototype.onTouchMouseDown = function(e) {
                (this._allowMouseDrag || e.pointerType !== MSPointerEvent.MSPOINTER_TYPE_MOUSE) && (this._offsetTouchPrevPos = this._offsetTouchStartPos = null, 
                this._touchStarted = !0);
            }, Scrollbar.prototype._getOffsetTouchDelta = function(e) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getOffsetTouchDelta()"), 
                null;
            }, Scrollbar.prototype.onTouchMouseMove = function(e) {
                if (this._touchStarted) {
                    this._offsetTouchStartPos || (this._offsetTouchPrevPos = this._offsetTouchStartPos = this._getMouseOffset(e));
                    var delta = this._getOffsetTouchDelta(e);
                    0 !== delta && (this.scrollBy(-delta / this._getRunningSize(!1) * this.viewSize), 
                    this._offsetTouchPrevPos = this._getMouseOffset(e)), e.preventDefault && e.preventDefault(), 
                    e.cancelBubble = !0;
                }
            }, Scrollbar.prototype.onTouchMouseUp = function(e, bubble) {
                if (this._touchStarted && this._offsetTouchStartPos) {
                    var end = this._getMouseOffset(e);
                    !bubble && (Math.abs(this._offsetTouchStartPos.x - end.x) > 3 || Math.abs(this._offsetTouchStartPos.y - end.y) > 3) && (e.preventDefault && e.preventDefault(), 
                    e.cancelBubble = !0);
                }
                this._touchStarted = !1;
            }, Scrollbar.prototype.createView = function(parentElement, layoutKind) {
                this._element = document.createElement("div"), this._element.className = Scrollbar.className, 
                this._element.setAttribute("drag-resize-disabled", "true"), this._element.style.zIndex = "2", 
                this.isModern && (this._element.style.setProperty("--background", "white"), this._element.style.borderRadius = Math.ceil(_pivotTable_pivotTableControlConstants__WEBPACK_IMPORTED_MODULE_3__.zf / 2) + "px", 
                this._element.style.setProperty("--opacity", ".5"), this._element.style.setProperty("--opacity-hover", ".6")), 
                0 === layoutKind && parentElement.appendChild(this._element), this.isModern || (this._minButton = new ScrollbarButton(this, -1), 
                this._maxButton = new ScrollbarButton(this, 1)), this._middleBar = document.createElement("div"), 
                this._middleBar.className = Scrollbar.barClassName, this.isModern && (this._middleBar.style.setProperty("--bar-color", "#605E5C"), 
                this._middleBar.style.setProperty("--bar-color-hover", "#605E5C"), this._middleBar.style.borderRadius = Math.ceil(_pivotTable_pivotTableControlConstants__WEBPACK_IMPORTED_MODULE_3__.zf / 2) + "px", 
                this._middleBar.style.border = "1px solid white", this._middleBar.style.boxSizing = "border-box"), 
                this._element.appendChild(this._middleBar);
            }, Scrollbar.prototype.scrollTo = function(pos, suppressScrollEvent) {
                var viewMin = Math.min(this.max - this.viewSize, Math.max(this.min, pos));
                (viewMin = Math.max(this.min, viewMin)) !== this.viewMin && (this.viewMin = viewMin, 
                suppressScrollEvent || fire(this._onscroll, null)), this.onScrollBehavior && this.onScrollBehavior();
            }, Scrollbar.prototype._scrollByPage = function(event) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._scrollByPage()");
            }, Scrollbar.prototype._getRunningSize = function(net) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getRunningSize()"), 
                null;
            }, Scrollbar.prototype._getOffsetDelta = function(event) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getOffsetDelta()"), 
                null;
            }, Scrollbar.prototype.scroll = function(event) {
                var delta = this._getOffsetDelta(event) / this._getRunningSize(!0) * (this.max - this.min);
                if (delta < 0) {
                    if (this._getScreenMousePos(event) >= this._screenMaxMousePos) return;
                } else if (delta > 0 && this._getScreenMousePos(event) <= this._screenMinMousePos) return;
                this.scrollBy(delta);
            }, Object.defineProperty(Scrollbar.prototype, "actualWidth", {
                get: function() {
                    return void 0 === this._actualWidth && this.arrange(), this._actualWidth;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "actualHeight", {
                get: function() {
                    return void 0 === this._actualHeight && this.arrange(), this._actualHeight;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "actualButtonWidth", {
                get: function() {
                    return this.isModern ? -1 : (void 0 === !this._actualButtonWidth && this.arrange(), 
                    this._actualButtonWidth);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(Scrollbar.prototype, "actualButtonHeight", {
                get: function() {
                    return this.isModern ? -1 : (void 0 === !this._actualButtonHeight && this.arrange(), 
                    this._actualButtonHeight);
                },
                enumerable: !1,
                configurable: !0
            }), Scrollbar.prototype.arrange = function() {
                this._actualWidth && this._actualHeight || (this._actualWidth = this._element.offsetWidth, 
                this._actualHeight = this._element.offsetHeight, this._actualButtonWidth = -1, this._actualButtonHeight = -1, 
                this.isModern || (this._actualButtonWidth = this._calculateButtonWidth(), this._actualButtonHeight = this._calculateButtonHeight(), 
                this._minButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMinButtonAngle()), 
                this._maxButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMaxButtonAngle()), 
                this._setMaxButtonPosition()));
            }, Scrollbar.prototype._calculateButtonWidth = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._calculateButtonWidth()"), 
                null;
            }, Scrollbar.prototype._calculateButtonHeight = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._calculateButtonHeight()"), 
                null;
            }, Scrollbar.prototype._getMinButtonAngle = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getMinButtonAngle()"), 
                null;
            }, Scrollbar.prototype._getMaxButtonAngle = function() {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getMaxButtonAngle()"), 
                null;
            }, Scrollbar.prototype._setMaxButtonPosition = function() {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._setMaxButtonPosition()");
            }, Scrollbar.prototype.invalidateArrange = function() {
                this._actualWidth = void 0, this._actualHeight = void 0, this._actualButtonWidth = void 0, 
                this._actualButtonHeight = void 0;
            }, Scrollbar.prototype.onHoldBackgroundMouseDown = function(event) {
                var _this = this;
                this._timerHandle = setTimeout(function() {
                    _this.onBackgroundMouseDown(event);
                }, this._timerHandle ? Scrollbar.ScrollbarBackgroundMousedownHoldDelay : Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay);
            }, Scrollbar.prototype.onBackgroundMouseDown = function(event) {
                var that = this;
                clearTimeout(this._timerHandle), this._backgroundMouseUpWrapper || (event.cancelBubble = !0, 
                this._backgroundMouseUpWrapper = function(event) {
                    that.onBackgroundMouseUp(event);
                }, Scrollbar.addDocumentMouseUpEvent(this._backgroundMouseUpWrapper)), this._scrollByPage(event), 
                this.refresh(), this.onHoldBackgroundMouseDown(event), event.preventDefault && event.preventDefault();
            }, Scrollbar.prototype.onBackgroundMouseUp = function(event) {
                clearTimeout(this._timerHandle), this._timerHandle = void 0, Scrollbar.removeDocumentMouseUpEvent(this._backgroundMouseUpWrapper), 
                this._backgroundMouseUpWrapper = void 0;
            }, Scrollbar.prototype.getPinchZoomY = function() {
                return document.documentElement.clientHeight / window.innerHeight;
            }, Scrollbar.prototype.onMiddleBarMouseDown = function(event) {
                event.cancelBubble = !0, this._screenPrevMousePos = {
                    x: event.screenX,
                    y: event.screenY
                }, this.isModern ? (this._screenMinMousePos = this._getScreenMousePos(event) - (this._getScreenContextualLeft(this._middleBar) - this._getScreenContextualLeft(this.element)), 
                this._screenMaxMousePos = this._getScreenMousePos(event) + (this._getScreenContextualRight(this.element) - this._getScreenContextualRight(this._middleBar))) : (this._screenMinMousePos = this._getScreenMousePos(event) - (this._getScreenContextualLeft(this._middleBar) - this._getScreenContextualRight(this._minButton.element)), 
                this._screenMaxMousePos = this._getScreenMousePos(event) + (this._getScreenContextualLeft(this._maxButton.element) - this._getScreenContextualRight(this._middleBar))), 
                this._screenToOffsetScale = (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.df)(this.element) * this.getPinchZoomY();
                var that = this;
                this._middleBarMouseMoveWrapper = function(e) {
                    that.onMiddleBarMouseMove(e);
                }, Scrollbar.addDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), this._middleBarMouseUpWrapper = function(e) {
                    that.onMiddleBarMouseUp(e);
                }, Scrollbar.addDocumentMouseUpEvent(this._middleBarMouseUpWrapper), event.preventDefault && event.preventDefault();
            }, Scrollbar.prototype.onMiddleBarMouseMove = function(event) {
                this._screenPrevMousePos && (this.scroll(event), this.refresh(), this._screenPrevMousePos = {
                    x: event.screenX,
                    y: event.screenY
                });
            }, Scrollbar.prototype.onMiddleBarMouseUp = function(event) {
                this._screenPrevMousePos = void 0, Scrollbar.removeDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), 
                this._middleBarMouseMoveWrapper = void 0, Scrollbar.removeDocumentMouseUpEvent(this._middleBarMouseUpWrapper), 
                this._middleBarMouseUpWrapper = void 0, event.preventDefault && event.preventDefault();
            }, Scrollbar.prototype._getScreenContextualLeft = function(element) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getScreenContextualLeft()"), 
                null;
            }, Scrollbar.prototype._getScreenContextualRight = function(element) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getScreenContextualRight()"), 
                null;
            }, Scrollbar.prototype.onMouseWheel = function(delta) {
                delta && this.mouseWheel(delta);
            }, Scrollbar.prototype.mouseWheel = function(delta) {
                this.visible && (delta < 0 ? delta = Math.min(-Scrollbar.MouseWheelRange, delta) : delta > 0 && (delta = Math.max(Scrollbar.MouseWheelRange, delta)), 
                this.scrollBy(-delta / Scrollbar.MouseWheelRange * this.smallIncrement));
            }, Scrollbar.prototype._getScreenMousePos = function(event) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PureVirtualMethod: Scrollbar._getScreenMousePos()"), 
                null;
            }, Scrollbar.addDocumentMouseUpEvent = function(func) {
                document.addEventListener("mouseup", func);
            }, Scrollbar.removeDocumentMouseUpEvent = function(func) {
                document.removeEventListener("mouseup", func);
            }, Scrollbar.addDocumentMouseMoveEvent = function(func) {
                document.addEventListener("mousemove", func);
            }, Scrollbar.removeDocumentMouseMoveEvent = function(func) {
                document.removeEventListener("mousemove", func);
            }, Scrollbar.DefaultScrollbarWidth = "15px", Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay = 500, 
            Scrollbar.ScrollbarBackgroundMousedownHoldDelay = 50, Scrollbar.MouseWheelRange = 120, 
            Scrollbar.className = "scroll-bar-div", Scrollbar.barClassName = "scroll-bar-part-bar", 
            Scrollbar.arrowClassName = "scroll-bar-part-arrow", Scrollbar;
        }(), HorizontalScrollbar = function(_super) {
            function HorizontalScrollbar(parentElement, layoutKind, isModern, onScroll) {
                var _this = _super.call(this, parentElement, layoutKind, isModern, onScroll) || this;
                return _this.height = Scrollbar.DefaultScrollbarWidth, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(HorizontalScrollbar, _super), 
            HorizontalScrollbar.prototype._calculateButtonWidth = function() {
                return Math.min(this.actualWidth / 2, Math.max(this.actualHeight, ScrollbarButton.MIN_WIDTH));
            }, HorizontalScrollbar.prototype._calculateButtonHeight = function() {
                return this.actualHeight;
            }, HorizontalScrollbar.prototype._getMinButtonAngle = function() {
                return -180;
            }, HorizontalScrollbar.prototype._getMaxButtonAngle = function() {
                return 0;
            }, HorizontalScrollbar.prototype._setMaxButtonPosition = function() {
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.hn)(this.maxButton.element, this.actualWidth - this.actualButtonWidth);
            }, HorizontalScrollbar.prototype.refresh = function() {
                this.arrange();
                var runningSize = this.actualWidth - 2 * this.actualButtonWidth - 2, barSize = this.viewSize / (this.max - this.min) * runningSize;
                barSize < this.MIN_BAR_SIZE && (runningSize -= this.MIN_BAR_SIZE - barSize, barSize = this.MIN_BAR_SIZE), 
                runningSize < 0 && (runningSize = 0, barSize = 0), barSize = Math.min(barSize, runningSize);
                var barPos = this.viewMin / (this.max - this.min) * runningSize;
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this.middleBar, barSize), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this.middleBar, this.actualHeight);
                var x = this.actualButtonWidth + 1 + barPos;
                this.isModern ? this.middleBar.style.transform = "translateX(".concat(x, "px)") : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.hn)(this.middleBar, x);
            }, HorizontalScrollbar.prototype.show = function(visible) {
                visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.height = this.height : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this.element, 0));
            }, HorizontalScrollbar.prototype._scrollByPage = function(event) {
                var left;
                if (this.isModern) {
                    var style = window.getComputedStyle(this.middleBar);
                    left = new WebKitCSSMatrix(style.transform).m41;
                } else left = this.middleBar.offsetLeft;
                var x = void 0 === event.offsetX ? event.layerX : event.offsetX;
                x > left + this.middleBar.offsetWidth ? this.scrollPageDown() : x < left && this.scrollPageUp();
            }, HorizontalScrollbar.prototype._getRunningSize = function(net) {
                var result = this.actualWidth;
                if (net) {
                    var barSize = (result -= 2 * (this.actualButtonWidth + 1)) * (this.viewSize / (this.max - this.min));
                    barSize < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize);
                }
                return result;
            }, HorizontalScrollbar.prototype._getOffsetDelta = function(event) {
                return this._getOffsetXDelta(event);
            }, HorizontalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                return this._getOffsetXTouchDelta(e);
            }, HorizontalScrollbar.prototype._getScreenContextualLeft = function(element) {
                return element.getBoundingClientRect().left;
            }, HorizontalScrollbar.prototype._getScreenContextualRight = function(element) {
                return element.getBoundingClientRect().right;
            }, HorizontalScrollbar.prototype._getScreenMousePos = function(event) {
                return event.screenX;
            }, HorizontalScrollbar;
        }(Scrollbar), VerticalScrollbar = function(_super) {
            function VerticalScrollbar(parentElement, layoutKind, isModern, onScroll) {
                var _this = _super.call(this, parentElement, layoutKind, isModern, onScroll) || this;
                return _this.width = Scrollbar.DefaultScrollbarWidth, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(VerticalScrollbar, _super), 
            VerticalScrollbar.prototype._calculateButtonWidth = function() {
                return this.actualWidth;
            }, VerticalScrollbar.prototype._calculateButtonHeight = function() {
                return Math.min(this.actualHeight / 2, Math.max(this.actualWidth, ScrollbarButton.MIN_WIDTH));
            }, VerticalScrollbar.prototype._getMinButtonAngle = function() {
                return -90;
            }, VerticalScrollbar.prototype._getMaxButtonAngle = function() {
                return 90;
            }, VerticalScrollbar.prototype._setMaxButtonPosition = function() {
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.FX)(this.maxButton.element, this.actualHeight - this.actualButtonHeight);
            }, VerticalScrollbar.prototype.refresh = function() {
                this.arrange();
                var runningSize = this.actualHeight - 2 * this.actualButtonHeight - 2, barSize = this.viewSize / (this.max - this.min) * runningSize;
                barSize < this.MIN_BAR_SIZE && (runningSize -= this.MIN_BAR_SIZE - barSize, barSize = this.MIN_BAR_SIZE), 
                runningSize < 0 && (runningSize = 0, barSize = 0);
                var barPos = this.viewMin / (this.max - this.min) * runningSize;
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this.middleBar, this.actualWidth), 
                (0, _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Iw)(this.middleBar, barSize);
                var y = this.actualButtonHeight + 1 + barPos;
                this.isModern ? this.middleBar.style.transform = "translateY(".concat(y, "px)") : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.FX)(this.middleBar, y);
            }, VerticalScrollbar.prototype.show = function(visible) {
                visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.width = this.width : (0, 
                _tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_0__.Py)(this.element, 0));
            }, VerticalScrollbar.prototype._scrollByPage = function(event) {
                var top;
                if (this.isModern) {
                    var style = window.getComputedStyle(this.middleBar);
                    top = new WebKitCSSMatrix(style.transform).m42;
                } else top = this.middleBar.offsetTop;
                var y = void 0 === event.offsetY ? event.layerY : event.offsetY;
                y > top + this.middleBar.offsetHeight ? this.scrollPageDown() : y < top && this.scrollPageUp();
            }, VerticalScrollbar.prototype._getRunningSize = function(net) {
                var result = this.actualHeight;
                if (net) {
                    var barSize = (result -= 2 * (this.actualButtonHeight + 1)) * (this.viewSize / (this.max - this.min));
                    barSize < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize);
                }
                return result;
            }, VerticalScrollbar.prototype._getOffsetDelta = function(event) {
                return this._getOffsetYDelta(event);
            }, VerticalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                return this._getOffsetYTouchDelta(e);
            }, VerticalScrollbar.prototype._getScreenContextualLeft = function(element) {
                return element.getBoundingClientRect().top;
            }, VerticalScrollbar.prototype._getScreenContextualRight = function(element) {
                return element.getBoundingClientRect().bottom;
            }, VerticalScrollbar.prototype._getScreenMousePos = function(event) {
                return event.screenY;
            }, VerticalScrollbar;
        }(Scrollbar);
    },
    73889: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Y: function() {
                return TablixType;
            }
        });
        var TablixType = function(TablixType) {
            return TablixType[TablixType.Matrix = 0] = "Matrix", TablixType[TablixType.Table = 1] = "Table", 
            TablixType[TablixType.PivotTable = 2] = "PivotTable", TablixType[TablixType.TableEx = 3] = "TableEx", 
            TablixType;
        }({});
    },
    71090: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ds: function() {
                return ScrollRightLabel;
            },
            Ed: function() {
                return CssClassImageContainer;
            },
            Eo: function() {
                return CssClassMatrixRowHeaderLeaf;
            },
            F2: function() {
                return FontFamilyHeader;
            },
            Hw: function() {
                return ScrollDownLabel;
            },
            JM: function() {
                return CssClassTableBodyCell;
            },
            LU: function() {
                return CssClassValueURLIconContainer;
            },
            Mh: function() {
                return SelectRow;
            },
            NA: function() {
                return CssClassValueURLIcon;
            },
            OM: function() {
                return CSSClassPivotTableAlignRight;
            },
            P$: function() {
                return CellPaddingLeftMatrixTotal;
            },
            Pr: function() {
                return CssClassContentHost;
            },
            QM: function() {
                return CSSClassPivotTableAlignCenter;
            },
            R9: function() {
                return CssClassTablixValueTotal;
            },
            Sl: function() {
                return AdditionalConditionalFormatting;
            },
            TV: function() {
                return UnselectedLabel;
            },
            Vz: function() {
                return FontFamilyGlyphs;
            },
            WA: function() {
                return CssClassWrappingContainer;
            },
            YR: function() {
                return CellPaddingLeft;
            },
            Yo: function() {
                return SortIconFontSizeRatio;
            },
            Zk: function() {
                return FontFamilyTotal;
            },
            b: function() {
                return SelectedLabel;
            },
            bn: function() {
                return TotalPlaceholderLabel;
            },
            dG: function() {
                return FontFamilyCell;
            },
            dm: function() {
                return ScrollLeftLabel;
            },
            en: function() {
                return CssClassContentElement;
            },
            f: function() {
                return CssClassTablixHeader;
            },
            fG: function() {
                return SortIconPadding;
            },
            iC: function() {
                return ScrollUpLabel;
            },
            jv: function() {
                return StringNonBreakingSpace;
            },
            lN: function() {
                return FontColorHeaders;
            },
            mQ: function() {
                return CssClassTablixColumnHeaderLeaf;
            },
            qT: function() {
                return TotalLabel;
            },
            rJ: function() {
                return CellPaddingRight;
            },
            rx: function() {
                return SortIconContainerClassName;
            },
            rz: function() {
                return CssClassTablixDiv;
            },
            s$: function() {
                return CssClassTableFooter;
            },
            s0: function() {
                return CssClassTablixValueNumeric;
            },
            sR: function() {
                return PreferredLoadMoreThreshold;
            },
            uX: function() {
                return RowSelection;
            },
            uZ: function() {
                return WordWrappingMaxLines;
            },
            wH: function() {
                return UnitOfMeasurement;
            },
            wd: function() {
                return ImageDefaultAspectRatio;
            },
            yF: function() {
                return ValueLabel;
            },
            ye: function() {
                return FontColorCells;
            },
            z7: function() {
                return CSSClassPivotTableAlignLeft;
            },
            zq: function() {
                return CssClassTableBodyCellBottom;
            }
        });
        var _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38265), PreferredLoadMoreThreshold = .8, TotalLabel = "TableTotalLabel", TotalPlaceholderLabel = "Format_AddTotalLabel", ValueLabel = "Visual_LabelText_Value", RowSelection = "Row_Selection", SelectRow = "SelectRow", SelectedLabel = "Row_Selected", UnselectedLabel = "Row_Unselected", AdditionalConditionalFormatting = "Additional_Conditional_Formatting", ScrollUpLabel = "DecompositionTree_ScrollLevelUp_Tooltip", ScrollDownLabel = "DecompositionTree_ScrollLevelDown_Tooltip", ScrollLeftLabel = "Scroll_Left", ScrollRightLabel = "Scroll_Right", CssClassTablixDiv = "tablixDiv", CssClassContentElement = "tablixCellContentElement", CssClassContentHost = "tablixCellContentHost", CssClassWrappingContainer = "tablixWrappingContainer", CssClassTablixHeader = "tablixHeader", CssClassTablixColumnHeaderLeaf = "tablixColumnHeaderLeaf", CssClassTablixValueNumeric = "tablixValueNumeric", CssClassTablixValueTotal = "tablixValueTotal", CssClassValueURLIcon = "powervisuals-glyph tablixUrlIconGlyph", CssClassValueURLIconContainer = "tablixValueUrlIcon", CssClassImageContainer = "tablixImageContainer", CssClassMatrixRowHeaderLeaf = "matrixRowHeaderLeaf", CssClassTableFooter = "tableFooterCell", CssClassTableBodyCell = "tableBodyCell", CssClassTableBodyCellBottom = "tableBodyCellBottom", CSSClassPivotTableAlignLeft = "tablixAlignLeft", CSSClassPivotTableAlignCenter = "tablixAlignCenter", CSSClassPivotTableAlignRight = "tablixAlignRight", StringNonBreakingSpace = "&nbsp;", UnitOfMeasurement = "px", SortIconContainerClassName = "tablixSortIconContainer", CellPaddingLeft = 10, CellPaddingRight = 5, CellPaddingLeftMatrixTotal = 5, SortIconPadding = 5, ImageDefaultAspectRatio = 1, FontFamilyCell = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.regular.css, FontFamilyHeader = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.regular.css, FontFamilyTotal = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.bold.css, FontFamilyGlyphs = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_0__.Wn.glyphs.css, FontColorCells = "#333", FontColorHeaders = "#666", WordWrappingMaxLines = Number.POSITIVE_INFINITY, SortIconFontSizeRatio = .71;
    },
    42737: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            A: function() {
                return TablixResizer;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), TablixResizer = function() {
            function TablixResizer(element, handler) {
                this._element = element, this._handler = handler, this._elementMouseDownWrapper = null, 
                this._elementMouseMoveWrapper = null, this._elementMouseOutWrapper = null, this._documentMouseMoveWrapper = null, 
                this._documentMouseUpWrapper = null, this._startMousePosition = null, this._originalCursor = null;
            }
            return TablixResizer.addDocumentMouseUpEvent = function(listener) {
                document.addEventListener("mouseup", listener);
            }, TablixResizer.removeDocumentMouseUpEvent = function(listener) {
                document.removeEventListener("mouseup", listener);
            }, TablixResizer.addDocumentMouseMoveEvent = function(listener) {
                document.addEventListener("mousemove", listener);
            }, TablixResizer.removeDocumentMouseMoveEvent = function(listener) {
                document.removeEventListener("mousemove", listener);
            }, TablixResizer.getMouseCoordinates = function(event) {
                return {
                    x: event.pageX,
                    y: event.pageY
                };
            }, TablixResizer.getMouseCoordinateDelta = function(previous, current) {
                return {
                    x: current.x - previous.x,
                    y: current.y - previous.y
                };
            }, TablixResizer.prototype.initialize = function() {
                var _this = this;
                this._elementMouseDownWrapper = function(e) {
                    return _this.onElementMouseDown(e);
                }, this._element.addEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseMoveWrapper = function(e) {
                    return _this.onElementMouseMove(e);
                }, this._element.addEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseOutWrapper = function(e) {
                    return _this.onElementMouseOut(e);
                }, this._element.addEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseDoubleClickOutWrapper = function(e) {
                    return _this.onElementMouseDoubleClick(e);
                }, this._element.addEventListener("dblclick", this._elementMouseDoubleClickOutWrapper);
            }, TablixResizer.prototype.uninitialize = function() {
                this._element.removeEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseDownWrapper = null, 
                this._element.removeEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseMoveWrapper = null, 
                this._element.removeEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseOutWrapper = null, 
                this._element.removeEventListener("dblclick", this._elementMouseDoubleClickOutWrapper), 
                this._elementMouseDoubleClickOutWrapper = null;
            }, Object.defineProperty(TablixResizer.prototype, "cell", {
                get: function() {
                    return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("PureVirtualMethod: TablixResizer.cell"), 
                    null;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixResizer.prototype, "element", {
                get: function() {
                    return this._element;
                },
                enumerable: !1,
                configurable: !0
            }), TablixResizer.prototype._hotSpot = function(position) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("PureVirtualMethod: TablixResizer._hotSpot"), 
                !1;
            }, TablixResizer.prototype.onElementMouseDown = function(event) {
                var _this = this, position = TablixResizer.getMouseCoordinates(event);
                this._hotSpot(position) && (event.cancelBubble = !0, this._startMousePosition = position, 
                this._documentMouseMoveWrapper = function(e) {
                    return _this.onDocumentMouseMove(e);
                }, TablixResizer.addDocumentMouseMoveEvent(this._documentMouseMoveWrapper), this._documentMouseUpWrapper = function(e) {
                    return _this.onDocumentMouseUp(e);
                }, TablixResizer.addDocumentMouseUpEvent(this._documentMouseUpWrapper), document.documentElement && (this._originalCursor = document.documentElement.style.cursor, 
                document.documentElement.style.cursor = TablixResizer.resizeCursor), this._handler.onStartResize(this.cell, this._startMousePosition.x, this._startMousePosition.y));
            }, TablixResizer.prototype.onElementMouseMove = function(event) {
                this._startMousePosition || (this._hotSpot(TablixResizer.getMouseCoordinates(event)) ? null === this._originalCursor && (this._originalCursor = this._element.style.cursor, 
                this._element.style.cursor = TablixResizer.resizeCursor) : null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                this._originalCursor = null));
            }, TablixResizer.prototype.onElementMouseOut = function(event) {
                this._startMousePosition || null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                this._originalCursor = null);
            }, TablixResizer.prototype.onElementMouseDoubleClick = function(event) {
                this._hotSpot(TablixResizer.getMouseCoordinates(event)) && this._handler.onReset(this.cell);
            }, TablixResizer.prototype.onDocumentMouseMove = function(event) {
                if (this._startMousePosition) {
                    var delta = TablixResizer.getMouseCoordinateDelta(this._startMousePosition, TablixResizer.getMouseCoordinates(event));
                    this._handler.onResize(this.cell, delta.x, delta.y), event.preventDefault();
                }
            }, TablixResizer.prototype.onDocumentMouseUp = function(event) {
                this._startMousePosition = null, TablixResizer.removeDocumentMouseMoveEvent(this._documentMouseMoveWrapper), 
                this._documentMouseMoveWrapper = null, TablixResizer.removeDocumentMouseUpEvent(this._documentMouseUpWrapper), 
                this._documentMouseUpWrapper = null, document.documentElement && (document.documentElement.style.cursor = this._originalCursor), 
                event.preventDefault && event.preventDefault(), this._handler.onEndResize(this.cell);
            }, TablixResizer.resizeHandleSize = 4, TablixResizer.resizeCursor = "e-resize", 
            TablixResizer;
        }();
    },
    93340: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            AB: function() {
                return setCellText;
            },
            Av: function() {
                return getCustomSortEventArgs;
            },
            Ch: function() {
                return appendDiv;
            },
            D4: function() {
                return clearChildren;
            },
            D6: function() {
                return addSortIconToColumnHeader;
            },
            DM: function() {
                return setCellTextAndTooltip;
            },
            FX: function() {
                return setElementTop;
            },
            G9: function() {
                return clearCellStyle;
            },
            Hd: function() {
                return getAriaRowIndex;
            },
            Hx: function() {
                return appendImgTagToBodyCell;
            },
            Iw: function() {
                return setElementHeight;
            },
            MN: function() {
                return getUrlScheme;
            },
            Or: function() {
                return isImage;
            },
            Pb: function() {
                return EdgeType;
            },
            Py: function() {
                return setElementWidth;
            },
            R5: function() {
                return addCellCssClass;
            },
            RP: function() {
                return getUrlIconName;
            },
            Uy: function() {
                return getElementHeight;
            },
            W_: function() {
                return createTable;
            },
            Y1: function() {
                return isValidStatusGraphic;
            },
            Y4: function() {
                return removeSortIcons;
            },
            aP: function() {
                return clearCellTextAndTooltip;
            },
            df: function() {
                return getAccumulatedScale;
            },
            ey: function() {
                return resetCellCssClass;
            },
            hn: function() {
                return setElementLeft;
            },
            jG: function() {
                return TablixVisualCell;
            },
            jT: function() {
                return getAriaColIndex;
            },
            mx: function() {
                return getElementWidth;
            },
            om: function() {
                return EdgeSettings;
            },
            pW: function() {
                return convertValueToString;
            },
            qZ: function() {
                return CellStyle;
            },
            ri: function() {
                return CellPosition;
            },
            ut: function() {
                return getRelativeMouseCoordinates;
            },
            v4: function() {
                return setCellTooltip;
            },
            vU: function() {
                return appendATagToBodyCell;
            },
            wC: function() {
                return createDiv;
            },
            wX: function() {
                return isValidImage;
            },
            x7: function() {
                return reverseSort;
            },
            xl: function() {
                return isValidSortClick;
            }
        });
        var _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54522), _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(91358), _Visuals_common_textUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44977), _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(38308), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(62458), _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(6444), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64329), _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48066), _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(28326), _tablixResizer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(42737), _tablixConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71090);
        function clearChildren(element) {
            if (element) for (;element.hasChildNodes(); ) element.removeChild(element.firstChild);
        }
        function setElementTop(element, top) {
            element.style.top = top + "px";
        }
        function setElementLeft(element, left) {
            element.style.left = left + "px";
        }
        function setElementHeight(element, height) {
            element.style.height = isAutoSize(height) ? "" : height + "px";
        }
        function setElementWidth(element, width) {
            element.style.width = isAutoSize(width) ? "" : width + "px";
        }
        function getElementWidth(element) {
            return element.offsetWidth;
        }
        function getElementHeight(element) {
            return element.offsetHeight;
        }
        function isAutoSize(size) {
            return -1 === size;
        }
        function getAccumulatedScale(element) {
            var actualWidth = element.offsetWidth;
            return 0 === actualWidth ? 1 : element.getBoundingClientRect().width / actualWidth;
        }
        function getRelativeMouseCoordinates(element, mouseEvent) {
            var rect = element.getBoundingClientRect(), scale = getAccumulatedScale(element);
            return {
                x: (mouseEvent.pageX - rect.left) / scale,
                y: (mouseEvent.pageY - rect.top) / scale
            };
        }
        var EdgeType = function(EdgeType) {
            return EdgeType[EdgeType.Outline = 0] = "Outline", EdgeType[EdgeType.Gridline = 1] = "Gridline", 
            EdgeType;
        }({}), EdgeSettings = function() {
            function EdgeSettings(weight, color) {
                this.applyParams(!0, weight, color);
            }
            return EdgeSettings.prototype.applyParams = function(shown, weight, color, type) {
                shown ? (this.weight = weight ?? 0, this.color = color ?? "black", this.type = type ?? EdgeType.Gridline) : (this.weight = 0, 
                this.color = "black", this.type = EdgeType.Gridline);
            }, EdgeSettings.prototype.getCSS = function() {
                var css = [];
                return _.isNumber(this.weight) && (css.push(this.weight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH), 
                this.color && css.push(this.color), css.push("solid")), css.join(" ");
            }, EdgeSettings.prototype.getPriority = function(edges) {
                return this === edges.top || this === edges.bottom ? this.type === EdgeType.Outline ? 2 : 0 : this === edges.right || this === edges.left ? this.type === EdgeType.Outline ? 3 : 1 : -1;
            }, EdgeSettings.prototype.getShadowCss = function(edges, rightBorderMax) {
                var adjustedWeight = this.weight ? this.weight + 5 : 0, output = "inset ";
                if (this === edges.left) output += adjustedWeight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH + " 0"; else if (this === edges.right) output += "-" + Math.min(adjustedWeight, rightBorderMax + 5) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH + " 0"; else if (this === edges.top) output += "0 " + adjustedWeight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH; else {
                    if (this !== edges.bottom) return "";
                    output += "0 -" + adjustedWeight + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
                }
                return output + " 0 -".concat(5, "px ") + this.color;
            }, EdgeSettings;
        }(), CellStyle = function() {
            function CellStyle(leftPadding, rightPadding) {
                void 0 === leftPadding && (leftPadding = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.YR), 
                void 0 === rightPadding && (rightPadding = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rJ), 
                this.borders = {}, this.paddings = {
                    top: 0,
                    left: leftPadding,
                    bottom: 0,
                    right: rightPadding
                }, this.fontColor = "", this.fontFamily = "", this.backColor = "";
            }
            return CellStyle.prototype.applyStyle = function(cell) {
                var style = cell.extension.contentHost.style;
                style.fontFamily = this.fontFamily, style.fontSize = this.fontSize ? _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__.FP.toString(this.fontSize.px) : void 0, 
                style.fontWeight = this.fontWeight, style.fontStyle = this.fontStyle, style.textDecoration = this.textDecoration, 
                style.color = this.fontColor, style.backgroundColor = this.backColor, style.boxShadow = this.getBoxShadow(), 
                style.border = "none", style.paddingTop = this.getPaddingTop(), style.paddingRight = this.getPaddingRight(), 
                style.paddingBottom = this.getPaddingBottom(), style.paddingLeft = this.getPaddingLeft(), 
                style.maxWidth = this.maxWidth;
            }, CellStyle.prototype.getPaddingTop = function() {
                return (this.paddings.top ?? 0) + (null == this.borders.top ? 0 : this.borders.top.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getPaddingBottom = function() {
                return (this.paddings.bottom ?? 0) + (null == this.borders.bottom ? 0 : this.borders.bottom.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getPaddingRight = function() {
                return (this.paddings.right ?? _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rJ) + (null == this.borders.right ? 0 : this.borders.right.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getPaddingLeft = function() {
                return (this.paddings.left ?? _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.YR) + (null == this.borders.left ? 0 : this.borders.left.weight) + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.wH;
            }, CellStyle.prototype.getBoxShadow = function(rightBorderMax) {
                var _a, _b, _c, _d, _e, _f, _g, _h, edges = [];
                return (null === (_a = this.borders.left) || void 0 === _a ? void 0 : _a.type) === EdgeType.Outline && 0 !== this.borders.left.weight && edges.push(this.borders.left.getShadowCss(this.borders)), 
                (null === (_b = this.borders.right) || void 0 === _b ? void 0 : _b.type) === EdgeType.Outline && 0 !== this.borders.right.weight && 0 !== rightBorderMax && edges.push(this.borders.right.getShadowCss(this.borders, rightBorderMax)), 
                (null === (_c = this.borders.bottom) || void 0 === _c ? void 0 : _c.type) === EdgeType.Outline && 0 !== this.borders.bottom.weight && edges.push(this.borders.bottom.getShadowCss(this.borders)), 
                (null === (_d = this.borders.top) || void 0 === _d ? void 0 : _d.type) === EdgeType.Outline && 0 !== this.borders.top.weight && edges.push(this.borders.top.getShadowCss(this.borders)), 
                (null === (_e = this.borders.left) || void 0 === _e ? void 0 : _e.type) === EdgeType.Gridline && 0 !== this.borders.left.weight && edges.push(this.borders.left.getShadowCss(this.borders)), 
                (null === (_f = this.borders.right) || void 0 === _f ? void 0 : _f.type) === EdgeType.Gridline && 0 !== this.borders.right.weight && 0 !== rightBorderMax && edges.push(this.borders.right.getShadowCss(this.borders, rightBorderMax)), 
                (null === (_g = this.borders.bottom) || void 0 === _g ? void 0 : _g.type) === EdgeType.Gridline && 0 !== this.borders.bottom.weight && edges.push(this.borders.bottom.getShadowCss(this.borders)), 
                (null === (_h = this.borders.top) || void 0 === _h ? void 0 : _h.type) === EdgeType.Gridline && 0 !== this.borders.top.weight && edges.push(this.borders.top.getShadowCss(this.borders)), 
                edges.join(", ");
            }, CellStyle.prototype.setAttributes = function(style, isA11yTable, isA11yMatrix, useLegacyBorders, columnWidth) {
                if (style["padding-top"] = this.getPaddingTop(), style["padding-right"] = this.getPaddingRight(), 
                style["padding-bottom"] = this.getPaddingBottom(), style["padding-left"] = this.getPaddingLeft(), 
                _.isEmpty(this.fontFamily) || (style["font-family"] = this.fontFamily), null != this.fontSize && (style["font-size"] = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__.FP.toString(this.fontSize.px)), 
                null != this.fontWeight && (style["font-weight"] = this.fontWeight), _.isEmpty(this.fontStyle) || (style["font-style"] = this.fontStyle), 
                _.isEmpty(this.textDecoration) || (style["text-decoration"] = this.textDecoration), 
                _.isEmpty(this.fontColor) || (style.color = this.fontColor), _.isEmpty(this.backColor) || (style["background-color"] = this.backColor), 
                useLegacyBorders || !isA11yTable && !isA11yMatrix) {
                    var paddingLeft = parseFloat(this.getPaddingLeft()), paddingRight = parseFloat(this.getPaddingRight()), rightBorderMax = this.getRightBorderMax(columnWidth, paddingLeft, paddingRight), boxShadow = this.getBoxShadow(rightBorderMax);
                    _.isEmpty(boxShadow) || (style["box-shadow"] = boxShadow);
                }
                _.isEmpty(this.maxWidth) || (style["max-width"] = this.maxWidth), (isA11yTable || isA11yMatrix) && (style["--outline-top"] = this.borders.top ? this.borders.top.weight + 1 + "px" : "1px", 
                style["--outline-right"] = this.borders.right ? this.borders.right.weight + 1 + "px" : "1px", 
                style["--outline-bottom"] = this.borders.bottom ? this.borders.bottom.weight + 1 + "px" : "1px", 
                style["--outline-left"] = this.borders.left ? this.borders.left.weight + 1 + "px" : "1px");
            }, CellStyle.prototype.getRightBorderMax = function(columnWidth, paddingLeft, paddingRight) {
                if (null == columnWidth) return paddingRight;
                var paddingRightMax = Math.max(columnWidth - paddingLeft, 0);
                return Math.min(paddingRight, paddingRightMax);
            }, CellStyle.prototype.getAttributes = function(isA11yTable, isA11yMatrix, useLegacyBorders, columnWidth) {
                var style = {};
                return this.setAttributes(style, isA11yTable, isA11yMatrix, useLegacyBorders, columnWidth), 
                style;
            }, CellStyle.prototype.getExtraTop = function() {
                var extra = 0;
                return this.paddings.top && (extra += this.paddings.top), this.borders.top && (extra += this.borders.top.weight), 
                extra;
            }, CellStyle.prototype.getExtraBottom = function() {
                var extra = 0;
                return this.paddings.bottom && (extra += this.paddings.bottom), this.borders.bottom && (extra += this.borders.bottom.weight), 
                extra;
            }, CellStyle.prototype.getExtraRight = function() {
                var extra = 0;
                return this.paddings.right && (extra += this.paddings.right), this.borders.right && (extra += this.borders.right.weight), 
                extra;
            }, CellStyle.prototype.getExtraLeft = function() {
                var extra = 0;
                return this.paddings.left && (extra += this.paddings.left), this.borders.left && (extra += this.borders.left.weight), 
                extra;
            }, CellStyle;
        }(), DimensionPosition = function() {
            return function() {};
        }(), CellPosition = function() {
            function CellPosition() {
                this.row = new DimensionPosition, this.column = new DimensionPosition;
            }
            return CellPosition.prototype.isMatch = function(position) {
                return this.column.index === position.column.index && this.row.index === position.row.index;
            }, CellPosition;
        }(), TablixVisualCell = function() {
            function TablixVisualCell(dataPoint, objects, isRowSubTotal, isColumnSubTotal, isRowGrandTotal, isColumnGrandTotal, isBlankRow, columnMetadata, formatter, tooltipFormatter, type) {
                this.dataPoint = dataPoint, this.objects = objects, this.isRowSubTotal = isRowSubTotal, 
                this.isColumnSubTotal = isColumnSubTotal, this.isRowGrandTotal = isRowGrandTotal, 
                this.isColumnGrandTotal = isColumnGrandTotal, this.isBlankRow = isBlankRow, this.columnMetadata = columnMetadata, 
                this.formatter = formatter, this.tooltipFormatter = tooltipFormatter, this.type = type, 
                this.position = new CellPosition, this.cachedTextContent = formatter ? this.formatter.format(dataPoint, objects) : null != this.dataPoint ? dataPoint : "";
            }
            return Object.defineProperty(TablixVisualCell.prototype, "isTotal", {
                get: function() {
                    return this.isSubtotal || this.isGrandTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isSubtotal", {
                get: function() {
                    return this.isColumnSubTotal || this.isRowSubTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isGrandTotal", {
                get: function() {
                    return this.isColumnGrandTotal || this.isRowGrandTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isRowAndColumnGrandTotal", {
                get: function() {
                    return this.isRowGrandTotal && this.isColumnGrandTotal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "textContent", {
                get: function() {
                    return this.cachedTextContent;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "tooltipContent", {
                get: function() {
                    return void 0 === this.cachedTooltipContent && (this.cachedTooltipContent = this.tooltipFormatter ? this.tooltipFormatter.format(this.dataPoint, this.objects) : this.textContent), 
                    this.cachedTooltipContent;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isKpi", {
                get: function() {
                    return this.columnMetadata && isValidStatusGraphic(this.columnMetadata.kpi, this.textContent);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "kpiContent", {
                get: function() {
                    if (this.isKpi) return function(kpi, kpiValue) {
                        _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__.fF.assertValue(kpi, "kpi"), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__.fF.assertValue(kpiValue, "kpiValue");
                        var className = (0, _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_7__.sq)(kpi, kpiValue) || "";
                        return (0, _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_8__.hi)().addClass(className).css({
                            display: "inline-block",
                            "vertical-align": "bottom",
                            margin: "0"
                        });
                    }(this.columnMetadata.kpi, this.textContent);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isNumeric", {
                get: function() {
                    if (this.columnMetadata) return this.columnMetadata.type.numeric && !this.columnMetadata.kpi;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isUrl", {
                get: function() {
                    if (this.columnMetadata) return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.cR)(this.columnMetadata);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isImage", {
                get: function() {
                    if (this.columnMetadata) return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.pt)(this.columnMetadata);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TablixVisualCell.prototype, "isValidUrl", {
                get: function() {
                    return getUrlScheme(this.columnMetadata, this.textContent) !== _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.NONE;
                },
                enumerable: !1,
                configurable: !0
            }), TablixVisualCell.prototype.isMatch = function(item) {
                return this.position.isMatch(item.position) && this.backColor === item.backColor;
            }, TablixVisualCell;
        }();
        function createTable() {
            return document.createElement("table");
        }
        function createDiv() {
            var div = document.createElement("div");
            return div.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rz, div;
        }
        function resetCellCssClass(cell) {
            cell.extension.contentElement.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rz + " " + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.en, 
            cell.extension.contentHost.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rz + " " + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.Pr;
        }
        function addCellCssClass(cell, style) {
            cell.extension.contentHost.className += " " + style;
        }
        function clearCellStyle(cell) {
            cell.extension.contentHost.className = "", cell.extension.contentHost.style.cssText = "";
        }
        function clearCellTextAndTooltip(cell) {
            cell.extension.contentHost.textContent = "", cell.extension.contentHost.removeAttribute("title"), 
            cell.contentHeight = cell.contentWidth = 0, clearChildren(cell.extension.contentHost);
        }
        function setCellTextAndTooltip(text, elementText, elementTooltip) {
            setCellText(text, elementText), setCellTooltip(text, elementTooltip || elementText);
        }
        function setCellText(text, element) {
            element.textContent = (0, _Visuals_common_textUtil__WEBPACK_IMPORTED_MODULE_4__.PC)(text);
        }
        function setCellTooltip(text, element) {
            element.title = text;
        }
        function appendDiv(container, text) {
            var div = createDiv();
            return container.appendChild(div), text && (div.textContent = text), div;
        }
        function isValidSortClick(e) {
            var x = e.offsetX;
            return x >= 0 && x < e.target.offsetWidth - _tablixResizer__WEBPACK_IMPORTED_MODULE_5__.A.resizeHandleSize;
        }
        function appendATagToBodyCell(value, cellElement, urlIconName) {
            var atag = null;
            0 === cellElement.childElementCount ? (atag = document.createElement("a"), cellElement.appendChild(atag)) : atag = cellElement.children[0], 
            atag.href = value, atag.target = "_blank", atag.rel = "noopener noreferrer", atag.title = value, 
            null != urlIconName ? (atag.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.NA + " " + urlIconName, 
            $(cellElement).addClass(_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.LU)) : atag.innerText = value;
        }
        function appendImgTagToBodyCell(value, cellElement, imageHeight) {
            var imgContainer = createDiv(), imgTag = document.createElement("img");
            imgContainer.style.height = imageHeight + "px", imgContainer.style.width = "100%", 
            imgContainer.style.textAlign = "center", imgTag.src = value, imgTag.style.maxHeight = "100%", 
            imgTag.style.maxWidth = "100%", imgContainer.appendChild(imgTag), cellElement.appendChild(imgContainer), 
            cellElement.title = value;
        }
        function getUrlScheme(metadata, content) {
            return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.cR)(metadata) ? (0, 
            _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.MN)(content) : _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.NONE;
        }
        function getUrlIconName(scheme) {
            switch (scheme) {
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.file:
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.ftp:
                return "page2";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.mailto:
                return "mail";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.news:
                return "link";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.telnet:
                return "pc1";

              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.http:
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.av.https:
                return "link";

              default:
                return null;
            }
        }
        function isValidImage(header, metadata, content) {
            return isImage(header, metadata) && (0, _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_3__.gU)(content);
        }
        function isImage(header, metadata) {
            return (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_2__.pt)(metadata) && !header.isSubtotal && !!header.identity;
        }
        function isValidStatusGraphic(kpi, kpiValue) {
            return !(!kpi || void 0 === kpiValue || !(0, _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_7__.sq)(kpi, kpiValue));
        }
        function getCustomSortEventArgs(queryName, sortDirection) {
            return {
                sortDescriptors: [ {
                    queryName,
                    sortDirection
                } ]
            };
        }
        function reverseSort(sortDirection) {
            return 2 === sortDirection ? 1 : 2;
        }
        function addSortIconToColumnHeader(itemSort, cellDiv) {
            var colHeaderContainer = createDiv();
            itemSort ? (colHeaderContainer.appendChild(createSortIcon(itemSort, !0)), colHeaderContainer.appendChild(createSortIcon(reverseSort(itemSort), !1))) : colHeaderContainer.appendChild(createSortIcon(2, !1));
            var colHeaderTitle = createDiv();
            return colHeaderContainer.appendChild(colHeaderTitle), cellDiv.appendChild(colHeaderContainer), 
            colHeaderTitle;
        }
        function createSortIcon(sort, isSorted) {
            var imgSort = document.createElement("i");
            return imgSort.className = _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rx + " " + (isSorted ? "sorted" : "future") + " " + (1 === sort ? "powervisuals-glyph caret-up" : "powervisuals-glyph caret-down"), 
            imgSort;
        }
        function removeSortIcons(cell) {
            (function(cell) {
                for (var i = 0, len = cell.extension.contentElement.childElementCount; i < len; i++) if (cell.extension.contentElement.children.item(i).classList.contains(_tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rx)) return !0;
                return !1;
            })(cell) && $(cell.extension.contentElement).find("." + _tablixConstants__WEBPACK_IMPORTED_MODULE_0__.rx).remove();
        }
        function convertValueToString(value) {
            return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__.fF.assert(function() {
                return !(value instanceof Date) || (0, _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_9__.M4)(value);
            }, "dates should implement DateWithEpochValue"), (0, _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_9__.M4)(value) && (value = _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_10__.y3.fromDateWithEpochValue(value).toString()), 
            String(value);
        }
        function getAriaRowIndex(rowIndex) {
            return rowIndex + 2;
        }
        function getAriaColIndex(colIndex) {
            return colIndex + 2;
        }
    },
    74304: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            U: function() {
                return TablixPropertyManager;
            }
        });
        var tslib_es6 = __webpack_require__(81337), pivotTable_capabilities = __webpack_require__(67016), tableEx_capabilities = __webpack_require__(60014), matrix_capabilities = __webpack_require__(85196), conditional_formatting_util = __webpack_require__(29324), converterHelper = __webpack_require__(54522), dataLabelViewModel1Consts = __webpack_require__(56707), textHelper = __webpack_require__(85028), units = __webpack_require__(32105), visualLocKeys = __webpack_require__(33024), tablixProperties = __webpack_require__(55007), sparklineChartType = __webpack_require__(85308), debug = __webpack_require__(62458), build_control_util = __webpack_require__(56578), StandaloneUtility1 = __webpack_require__(64329), dataViewObject2 = __webpack_require__(82755), dataViewObject3 = __webpack_require__(76045), dataViewRoleWildcard = __webpack_require__(91059), dataViewWildcard = __webpack_require__(96915), dataViewMatrixUtils = __webpack_require__(82386), dataViewRegression = __webpack_require__(86878), valueFormatter = __webpack_require__(72489), tablixConstants = __webpack_require__(71090), ITablixFormatting = __webpack_require__(73889), pivotTableLayout = __webpack_require__(66842), rowSubtotalPosition = __webpack_require__(40845), TablixPropertyManager = function() {
            function TablixPropertyManager(style) {
                this.tablixProperties = new tablixProperties.FX(style);
            }
            return TablixPropertyManager.getMetadataObjects = function(dataView) {
                return dataView && dataView.metadata ? dataView.metadata.objects : null;
            }, TablixPropertyManager.prototype.enumerateObjectRepetition = function(enumeration, dataView, tablixType, featureSwitches) {
                var _a, _b, _c, _d, _e, _f, _g;
                debug.fF.assertValue(enumeration, "enumeration should be defined"), debug.fF.assertValue(dataView, "dataView can't be undefined");
                var columns, selectorData = this.getSelectorData(tablixType);
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                  case ITablixFormatting.Y.TableEx:
                    columns = this.getTableColumnMetadata(dataView);
                    break;

                  case ITablixFormatting.Y.Matrix:
                  case ITablixFormatting.Y.PivotTable:
                    columns = this.getMatrixValuesColumnMetadata(dataView);
                    break;

                  default:
                    return void debug.fF.assertNever(tablixType);
                }
                if (columns) {
                    columns = _.uniq(columns);
                    for (var isNewVisual = tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx, _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                        var column = columns_1[_i], isSparkline = null === (_g = column.type.misc) || void 0 === _g ? void 0 : _g.sparkline;
                        if (isNewVisual) {
                            var backColorScalesRepetition = {
                                containerName: column.displayName,
                                selector: this.getSelector(column.queryName, selectorData),
                                allowOverrideSubtotalMatching: !0,
                                objects: (_b = {}, _b[this.tablixProperties.PropValuesBackColor.objectName] = {
                                    formattingProperties: [ this.tablixProperties.PropValuesBackColor.propertyName ]
                                }, _b)
                            };
                            if (enumeration.push(backColorScalesRepetition), !isSparkline) {
                                var fontColorScalesRepetition = {
                                    containerName: column.displayName,
                                    selector: this.getSelector(column.queryName, selectorData),
                                    allowOverrideSubtotalMatching: !0,
                                    objects: (_c = {}, _c[this.tablixProperties.PropValuesFontColor.objectName] = {
                                        formattingProperties: [ this.tablixProperties.PropValuesFontColor.propertyName ]
                                    }, _c)
                                };
                                enumeration.push(fontColorScalesRepetition);
                            }
                            if (column.type.numeric && !isSparkline) {
                                var dataBarsRepetition = {
                                    containerName: column.displayName,
                                    selector: this.getSelector(column.queryName),
                                    objects: (_d = {}, _d[tablixProperties.FX.PropColumnFormattingDataBars.objectName] = {
                                        formattingProperties: [ tablixProperties.FX.PropColumnFormattingDataBars.propertyName ]
                                    }, _d)
                                };
                                enumeration.push(dataBarsRepetition);
                            }
                            var iconRepetition = {
                                containerName: column.displayName,
                                selector: this.getSelector(column.queryName, selectorData),
                                altStaticSelector: this.getSelector(column.queryName),
                                allowOverrideSubtotalMatching: !0,
                                objects: (_e = {}, _e[tablixProperties.FX.PropValuesIcon.objectName] = {
                                    formattingProperties: [ tablixProperties.FX.PropValuesIcon.propertyName ]
                                }, _e)
                            };
                            if (enumeration.push(iconRepetition), isNewVisual && (null == featureSwitches ? void 0 : featureSwitches.conditionalTablixWebURL) && !(0, 
                            converterHelper.cR)(column) && !isSparkline) {
                                var webURLRepetition = {
                                    containerName: column.displayName,
                                    selector: this.getSelector(column.queryName, selectorData),
                                    allowOverrideSubtotalMatching: !0,
                                    objects: (_f = {}, _f[tablixProperties.FX.PropValuesWebURL.objectName] = {
                                        formattingProperties: [ tablixProperties.FX.PropValuesWebURL.propertyName ]
                                    }, _f)
                                };
                                enumeration.push(webURLRepetition);
                            }
                        } else {
                            if (!column.isMeasure || !column.type.numeric) continue;
                            var backColorScalesRepetition_1 = {
                                containerName: column.displayName,
                                selector: this.getSelector(column.queryName, selectorData),
                                objects: (_a = {}, _a[this.tablixProperties.PropValuesBackColor.objectName] = {
                                    formattingProperties: [ this.tablixProperties.PropValuesBackColor.propertyName ]
                                }, _a)
                            };
                            enumeration.push(backColorScalesRepetition_1);
                        }
                    }
                }
            }, TablixPropertyManager.prototype.getSelectorData = function(tablixType) {
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                    return [ (0, dataViewRoleWildcard.Yp)([ "Values" ]) ];

                  case ITablixFormatting.Y.TableEx:
                    return [ (0, dataViewWildcard.Ue)(1) ];

                  case ITablixFormatting.Y.Matrix:
                    return [ (0, dataViewRoleWildcard.Yp)([ "Rows", "Columns" ]) ];

                  case ITablixFormatting.Y.PivotTable:
                    return [ (0, dataViewWildcard.Ue)(1) ];

                  default:
                    return void debug.fF.assertNever(tablixType);
                }
            }, TablixPropertyManager.prototype.getConditionalFormattingSelector = function(tablixType, columnQueryName, includeSelectorData) {
                void 0 === includeSelectorData && (includeSelectorData = !0);
                var selectorData = includeSelectorData ? this.getSelectorData(tablixType) : void 0;
                return this.getSelector(columnQueryName, selectorData);
            }, TablixPropertyManager.prototype.getSelector = function(columnQueryName, selectorData) {
                var selector = {
                    metadata: columnQueryName
                };
                return selectorData && (selector.data = selectorData), selector;
            }, TablixPropertyManager.prototype.getFormattingModel = function(hostServices, formattingProperties, dataView, tablixType, isEnabled, featureSwitches, style) {
                void 0 === isEnabled && (isEnabled = !1), debug.fF.assertValue(dataView, "dataView can't be undefined");
                var totalsShown, objects = TablixPropertyManager.getMetadataObjects(dataView), pivotTableFormattingProperties = formattingProperties, tableExFormattingProperties = formattingProperties, columnsMetadata = this.getColumnsMetadata(dataView, tablixType);
                totalsShown = tablixType === ITablixFormatting.Y.Table ? this.shouldShowTableTotalsOption(dataView) && tablixProperties.FX.PropGeneralTableTotals.getValue(objects) : this.shouldShowColumnSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixColumnSubtotals.getValue(objects) || this.shouldShowRowSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixRowSubtotals.getValue(objects);
                var textClassProperties = this.getTablixTextClassProperties(style), modelBuilder = new build_control_util.Nq(this.getStylePresetCard(hostServices, pivotTableFormattingProperties, tablixType, featureSwitches), this.getGridCard(hostServices, formattingProperties, tablixType, objects, textClassProperties, featureSwitches), this.getBlankRowCard(hostServices, pivotTableFormattingProperties, tablixType, featureSwitches), this.getValueCard(hostServices, formattingProperties, tablixType, objects, featureSwitches), this.getColumnHeadersCard(hostServices, formattingProperties, tablixType, featureSwitches), this.getRowHeadersCard(hostServices, pivotTableFormattingProperties, tablixType, objects, isEnabled, featureSwitches), this.getTotalsCard(hostServices, tableExFormattingProperties, tablixType, featureSwitches), this.getColumnSubtotalCard(hostServices, pivotTableFormattingProperties, dataView, tablixType, totalsShown, featureSwitches), this.getRowSubTotalsCard(hostServices, pivotTableFormattingProperties, dataView, tablixType, totalsShown, featureSwitches), this.getColumnGrandTotalsCard(hostServices, pivotTableFormattingProperties, tablixType), this.getRowGrandTotalsCard(hostServices, pivotTableFormattingProperties, tablixType), this.getColumnFormattingCard(hostServices, formattingProperties, columnsMetadata, tablixType), this.getCellColumnCard(hostServices, tablixType, dataView, featureSwitches), this.getUrlIconCard(hostServices, formattingProperties, tablixType), this.getImageSizeCard(hostServices, formattingProperties, tablixType, featureSwitches), this.getSparklinesCard(columnsMetadata, hostServices, tablixType)), rowsColumns = this.getMatrixRowsColumnMetadata(dataView), columnsColumns = this.getMatrixColumnsColumnMetadata(dataView), card = featureSwitches.a11yShowAsMatrix ? this.getAccessibilityCardNew(rowsColumns, columnsColumns, columnsMetadata, hostServices, tableExFormattingProperties, tablixType) : this.getAccessibilityCard(columnsMetadata, hostServices, tableExFormattingProperties, tablixType);
                return card && modelBuilder.addCards(card), modelBuilder.build();
            }, TablixPropertyManager.prototype.getLayoutSlice = function(formattingProperties, localize) {
                return new build_control_util.vi({
                    uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("visualPlaceholderCard"), "visualPlaceholderGroup"), "layout"),
                    control: new build_control_util.uY({
                        descriptor: pivotTable_capabilities.t.general.layout,
                        value: formattingProperties.general.layout
                    }).build(),
                    localize
                }).build();
            }, TablixPropertyManager.prototype.getIndentationSlice = function(formattingProperties, localize) {
                if (formattingProperties.general.layout === pivotTableLayout.t.Compact) {
                    var rowHeaderProperties = formattingProperties.rowHeaders;
                    return new build_control_util.vi({
                        uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("visualPlaceholderCard"), "visualPlaceholderGroup"), "indentation"),
                        control: this.getIndentationSliderBuilder(rowHeaderProperties, localize).build(),
                        localize
                    }).build();
                }
            }, TablixPropertyManager.prototype.getRepeatRowHeadersSlice = function(formattingProperties, localize) {
                if (formattingProperties.general.layout !== pivotTableLayout.t.Compact) return new build_control_util.vi({
                    uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("visualPlaceholderCard"), "visualPlaceholderGroup"), "repeatRowHeaders"),
                    control: new build_control_util.bd({
                        descriptor: pivotTable_capabilities.t.rowHeaders.repeatRowHeaders,
                        value: formattingProperties.rowHeaders.repeatRowHeaders
                    }).build(),
                    localize
                }).build();
            }, TablixPropertyManager.prototype.getStylePresetCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                var _this = this, styleCardDisplayName = "StylePresets";
                featureSwitches.matrixLayouts && tablixType === ITablixFormatting.Y.PivotTable && (styleCardDisplayName = "Layout_And_StylePresets");
                var localize = function(key) {
                    return hostServices.getLocalizedString(key);
                }, stylePresetCardBuilder = new build_control_util.CQ(new build_control_util.lg("stylePreset"), styleCardDisplayName, [ pivotTable_capabilities.t.general.layout, pivotTable_capabilities.t.rowHeaders.steppedLayoutIndentation, pivotTable_capabilities.t.rowHeaders.repeatRowHeaders ], localize);
                return stylePresetCardBuilder.addGroup(void 0, function(groupBuilder) {
                    if (groupBuilder.addSlicePlaceholder((0, build_control_util.E0)("stylePreset")), 
                    featureSwitches.matrixLayouts && tablixType === ITablixFormatting.Y.PivotTable) {
                        var layoutSlice = _this.getLayoutSlice(formattingProperties, localize), indentationSlice = _this.getIndentationSlice(formattingProperties, localize), repeatRowHeadersSlice = _this.getRepeatRowHeadersSlice(formattingProperties, localize);
                        groupBuilder.addSlice(layoutSlice), indentationSlice && groupBuilder.addSlice(indentationSlice), 
                        repeatRowHeadersSlice && groupBuilder.addSlice(repeatRowHeadersSlice);
                    }
                }), stylePresetCardBuilder.build();
            }, TablixPropertyManager.prototype.getBlankRowCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                if (featureSwitches.matrixLayouts && tablixType === ITablixFormatting.Y.PivotTable) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, blankRowCardProp = pivotTable_capabilities.t.blankRows, cardBuilder = new build_control_util.CQ(new build_control_util.lg("blankRows"), "Visual_Blank_Rows", blankRowCardProp, localize).addTopLevelToggle("blankRow", function() {
                        return new build_control_util.bd({
                            descriptor: blankRowCardProp.showBlankRows,
                            value: formattingProperties.blankRows.showBlankRows
                        }).build();
                    });
                    return cardBuilder.addGroup("colors", function(groupBuilder) {
                        groupBuilder.withDisplayName("Generic_Color").addSimpleSlice("blankRowColor", function() {
                            return new build_control_util.BT({
                                descriptor: blankRowCardProp.blankRowColor,
                                value: {
                                    value: formattingProperties.blankRows.blankRowColor
                                }
                            }).build();
                        }).addSimpleSlice("blankRowTransparency", new build_control_util.JN({
                            descriptor: blankRowCardProp.blankRowTransparency,
                            value: formattingProperties.blankRows.blankRowTransparency,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 100
                                },
                                unitSymbol: visualLocKeys.t2
                            },
                            localize
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Transparency");
                        });
                    }), cardBuilder.addGroup("border", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Border").addTopLevelToggle("blankRowBorder", function() {
                            return new build_control_util.bd({
                                descriptor: blankRowCardProp.showBorder,
                                value: formattingProperties.blankRows.showBorder
                            }).build();
                        }).addSimpleSlice("blankRowBorderPosition", function() {
                            return new build_control_util.uY({
                                descriptor: blankRowCardProp.borderPosition,
                                value: formattingProperties.blankRows.borderPosition
                            }).build();
                        }).addSimpleSlice("blankRowBorderColor", function() {
                            return new build_control_util.BT({
                                descriptor: blankRowCardProp.borderColor,
                                value: {
                                    value: formattingProperties.blankRows.borderColor
                                }
                            }).build();
                        }).addSimpleSlice("blankRowBorderTransparency", new build_control_util.JN({
                            descriptor: blankRowCardProp.borderTransparency,
                            value: formattingProperties.blankRows.borderTransparency,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 100
                                },
                                unitSymbol: visualLocKeys.t2
                            },
                            localize
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Transparency");
                        }).addSimpleSlice("blankRowBorderWidth", new build_control_util.mu({
                            descriptor: blankRowCardProp.borderWidth,
                            value: formattingProperties.blankRows.borderWidth,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 10
                                },
                                unitSymbol: visualLocKeys.e_
                            }
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getGridCard = function(hostServices, formattingProperties, tablixType, objects, textClassProperties, featureSwitches) {
                var localize = function(key) {
                    return hostServices.getLocalizedString(key);
                }, initialGridPropIds = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.grid : pivotTable_capabilities.t.grid, valuesProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.values : pivotTable_capabilities.t.values, valuesOutlineStyle = valuesProps.outlineStyle, valuesOutlineWeight = valuesProps.outlineWeight, valuesOutlineColor = valuesProps.outlineColor, columnHeadersProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.columnHeaders : pivotTable_capabilities.t.columnHeaders, columnHeadersOutlineStyle = columnHeadersProps.outlineStyle, columnHeadersOutlineWeight = columnHeadersProps.outlineWeight, columnHeadersOutlineColor = columnHeadersProps.outlineColor, totalsProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.total : pivotTable_capabilities.t.total, totalsOutlineStyle = totalsProps.outlineStyle, totalsOutlineWeight = totalsProps.outlineWeight, totalsOutlineColor = totalsProps.outlineColor, rowHeaderProps = pivotTable_capabilities.t.rowHeaders, rowHeaderOutlineStyle = rowHeaderProps.outlineStyle, rowHeaderOutlineWeight = rowHeaderProps.outlineWeight, rowHeaderOutlineColor = rowHeaderProps.outlineColor, outlineStyle = initialGridPropIds.outlineStyle, gridCardPropIds = (0, 
                tslib_es6.__rest)(initialGridPropIds, [ "imageHeight", "imageWidth", "outline", "outlineStyle" ]);
                gridCardPropIds = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gridCardPropIds), {
                    outlineStyle,
                    valuesOutlineStyle,
                    valuesOutlineWeight,
                    valuesOutlineColor,
                    columnHeadersOutlineStyle,
                    columnHeadersOutlineWeight,
                    columnHeadersOutlineColor
                }), tablixType === ITablixFormatting.Y.TableEx && (gridCardPropIds = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, gridCardPropIds), {
                    totalsOutlineStyle,
                    totalsOutlineColor,
                    totalsOutlineWeight
                })), tablixType === ITablixFormatting.Y.PivotTable && (gridCardPropIds = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, gridCardPropIds), {
                    rowHeaderOutlineStyle,
                    rowHeaderOutlineWeight,
                    rowHeaderOutlineColor
                }));
                var tableGridData = formattingProperties.grid, cardBuilder = new build_control_util.CQ(new build_control_util.lg("grid"), "Visual_Grid", gridCardPropIds, localize);
                return cardBuilder.addGroup("gridHorizontal", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Gridline_Horizontal").addTopLevelToggle("gridHorizontal", function() {
                        return new build_control_util.bd({
                            descriptor: gridCardPropIds.gridHorizontal,
                            value: tableGridData.gridHorizontal
                        }).build();
                    }).addSimpleSlice("gridHorizontalColor", function() {
                        return new build_control_util.BT({
                            descriptor: gridCardPropIds.gridHorizontalColor,
                            value: {
                                value: tableGridData.gridHorizontalColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice("gridHorizontalWeight", new build_control_util.mu({
                        descriptor: gridCardPropIds.gridHorizontalWeight,
                        value: tableGridData.gridHorizontalWeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }), cardBuilder.addGroup("gridVertical", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Gridline_Vertical").addTopLevelToggle("gridVertical", function() {
                        return new build_control_util.bd({
                            descriptor: gridCardPropIds.gridVertical,
                            value: tableGridData.gridVertical
                        }).build();
                    }).addSimpleSlice("gridVerticalColor", function() {
                        return new build_control_util.BT({
                            descriptor: gridCardPropIds.gridVerticalColor,
                            value: {
                                value: tableGridData.gridVerticalColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice("gridVerticalWeight", new build_control_util.mu({
                        descriptor: gridCardPropIds.gridVerticalWeight,
                        value: tableGridData.gridVerticalWeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }), cardBuilder.addGroup("border", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Border").addContainer("outline", function(containerBuilder) {
                        containerBuilder.withDisplayName("Section"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                            containerItemBuilder.addSimpleSlice("outlineStyle", function() {
                                return new build_control_util.oM({
                                    descriptor: gridCardPropIds.outlineStyle,
                                    value: tableGridData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColor", function() {
                                return new build_control_util.BT({
                                    descriptor: gridCardPropIds.outlineColor,
                                    value: {
                                        value: tableGridData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeight", new build_control_util.mu({
                                descriptor: gridCardPropIds.outlineWeight,
                                value: tableGridData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }).addContainerItem("columnHeaders", localize("Visual_Tablix_ColumnHeader"), function(containerItemBuilder) {
                            var columnHeadersData = formattingProperties.columnHeaders;
                            containerItemBuilder.addSimpleSlice("outlineStyleColumnHeaders", function() {
                                return new build_control_util.oM({
                                    descriptor: columnHeadersOutlineStyle,
                                    value: columnHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColorColumnHeaders", function() {
                                return new build_control_util.BT({
                                    descriptor: columnHeadersOutlineColor,
                                    value: {
                                        value: columnHeadersData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightColumnHeaders", new build_control_util.mu({
                                descriptor: columnHeadersOutlineWeight,
                                value: columnHeadersData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), tablixType === ITablixFormatting.Y.PivotTable && containerBuilder.addContainerItem("rowHeaders", localize("Visual_Tablix_RowHeaders"), function(containerItemBuilder) {
                            var rowHeadersData = formattingProperties.rowHeaders;
                            containerItemBuilder.addSimpleSlice("outlineStyleRowHeaders", function() {
                                return new build_control_util.oM({
                                    descriptor: rowHeaderOutlineStyle,
                                    value: rowHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColorRowHeaders", function() {
                                return new build_control_util.BT({
                                    descriptor: rowHeaderOutlineColor,
                                    value: {
                                        value: rowHeadersData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightRowHeaders", new build_control_util.mu({
                                descriptor: rowHeaderOutlineWeight,
                                value: rowHeadersData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), containerBuilder.addContainerItem("values", localize("Visual_Tablix_ValuesSection"), function(containerItemBuilder) {
                            var valuesData = formattingProperties.values;
                            containerItemBuilder.addSimpleSlice("outlineStyleValues", function() {
                                return new build_control_util.oM({
                                    descriptor: valuesOutlineStyle,
                                    value: valuesData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }).addSimpleSlice("outlineColorValues", function() {
                                return new build_control_util.BT({
                                    descriptor: valuesOutlineColor,
                                    value: {
                                        value: valuesData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightValues", new build_control_util.mu({
                                descriptor: valuesOutlineWeight,
                                value: valuesData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), tablixType === ITablixFormatting.Y.TableEx && containerBuilder.addContainerItem("outline-totals", localize("Visual_Tablix_TotalsSection"), function(containerItemBuilder) {
                            var totalsData = formattingProperties.total;
                            containerItemBuilder.addSimpleSlice("outlineStyleTotals", function() {
                                return new build_control_util.oM({
                                    descriptor: totalsOutlineStyle,
                                    value: totalsData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }).addSimpleSlice("outlineColorTotals", function() {
                                return new build_control_util.BT({
                                    descriptor: totalsOutlineColor,
                                    value: {
                                        value: totalsData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeightTotals", new build_control_util.mu({
                                descriptor: totalsOutlineWeight,
                                value: totalsData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        });
                    });
                }), cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("rowPadding", new build_control_util.mu({
                        descriptor: gridCardPropIds.rowPadding,
                        value: tableGridData.rowPadding,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 20
                            }
                        }
                    }).build()).addSimpleSlice("textSize", function() {
                        return new build_control_util.mu({
                            descriptor: gridCardPropIds.textSize,
                            value: tablixProperties.FX.PropGridPivotTableTextSize.setInstanceProperty(void 0, objects, textClassProperties.fontSizeOverrideFn, textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt),
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 8
                                },
                                maxValue: {
                                    type: 1,
                                    value: 60
                                }
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Global_Font_Size");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getValueCard = function(hostServices, formattingProperties, tablixType, objects, featureSwitches) {
                var valueProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.values : pivotTable_capabilities.t.values, [ "webURL", "urlIcon", "icon", "bandedRowHeaders", "outlineStyle", "outlineWeight", "outlineColor" ]), valueData = formattingProperties.values, cardBuilder = new build_control_util.CQ(new build_control_util.lg("values"), "Visual_Tablix_Values", valueProps, function(key) {
                    return hostServices.getLocalizedString(key);
                }), fontControl = (new build_control_util.UN).withFontFamily({
                    descriptor: valueProps.fontFamily,
                    value: valueData.fontFamily
                }).withFontSizeProperties({
                    descriptor: valueProps.fontSize,
                    value: valueData.fontSize.pt
                }).withBold({
                    descriptor: valueProps.bold,
                    value: valueData.bold
                }).withItalic({
                    descriptor: valueProps.italic,
                    value: valueData.italic
                }).withUnderline({
                    descriptor: valueProps.underline,
                    value: valueData.underline
                }).build();
                return cardBuilder.addGroup("values", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Tablix_Values"), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("fontColorPrimary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.fontColorPrimary,
                            value: {
                                value: valueData.fontColorPrimary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColorPrimary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.backColorPrimary,
                            value: {
                                value: valueData.backColorPrimary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }).addSimpleSlice("fontColorSecondary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.fontColorSecondary,
                            value: {
                                value: valueData.fontColorSecondary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_AlternateText_Color");
                    }).addSimpleSlice("backColorSecondary", function() {
                        return new build_control_util.BT({
                            descriptor: valueProps.backColorSecondary,
                            value: {
                                value: valueData.backColorSecondary
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_BackColorSecondary");
                    }).addSimpleSlice("textWrap", new build_control_util.bd({
                        descriptor: valueProps.wordWrap,
                        value: valueData.wordWrap
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("TextWrap");
                    });
                }), tablixType === ITablixFormatting.Y.PivotTable && cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("valuesOnRow", new build_control_util.bd({
                        descriptor: valueProps.valuesOnRow,
                        value: tablixProperties.FX.PropValuesOnRow.setInstanceProperty(void 0, objects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_PivotTable_ValuesSwitchToRows");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getColumnHeadersCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                var columnHeadersProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.columnHeaders : pivotTable_capabilities.t.columnHeaders, [ "urlIcon", "outlineStyle", "outlineWeight", "outlineColor" ]), columnHeadersData = formattingProperties.columnHeaders, cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnHeaders"), "Visual_Tablix_ColumnHeaders", columnHeadersProps, function(key) {
                    return hostServices.getLocalizedString(key);
                }), fontControl = (new build_control_util.UN).withFontFamily({
                    descriptor: columnHeadersProps.fontFamily,
                    value: columnHeadersData.fontFamily
                }).withFontSizeProperties({
                    descriptor: columnHeadersProps.fontSize,
                    value: columnHeadersData.fontSize.pt
                }).withBold({
                    descriptor: columnHeadersProps.bold,
                    value: columnHeadersData.bold
                }).withItalic({
                    descriptor: columnHeadersProps.italic,
                    value: columnHeadersData.italic
                }).withUnderline({
                    descriptor: columnHeadersProps.underline,
                    value: columnHeadersData.underline
                }).build();
                return cardBuilder.addGroup("text", function(groupBuilder) {
                    groupBuilder.withDisplayName("Text"), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("fontColor", function() {
                        return new build_control_util.BT({
                            descriptor: columnHeadersProps.fontColor,
                            value: {
                                value: columnHeadersData.fontColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColor", function() {
                        return new build_control_util.BT({
                            descriptor: columnHeadersProps.backColor,
                            value: {
                                value: columnHeadersData.backColor
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }), tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || groupBuilder.addSimpleSlice("alignment", new build_control_util.Gp({
                        descriptor: columnHeadersProps.alignment,
                        value: columnHeadersData.alignment,
                        mode: "horizontalAlignment",
                        supportsNoSelection: !0
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_TextAlignment_Header");
                    }), tablixType === ITablixFormatting.Y.PivotTable && groupBuilder.addSimpleSlice("titleAlignment", new build_control_util.Gp({
                        descriptor: columnHeadersProps.titleAlignment,
                        value: formattingProperties.columnHeaders.titleAlignment,
                        mode: "horizontalAlignment",
                        supportsNoSelection: !0
                    }).build()), tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || groupBuilder.addSimpleSlice("wordWrap", new build_control_util.bd({
                        descriptor: columnHeadersProps.wordWrap,
                        value: columnHeadersData.wordWrap
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("TextWrap");
                    });
                }), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("autoSizeColumnWidth", new build_control_util.bd({
                        descriptor: columnHeadersProps.autoSizeColumnWidth,
                        value: formattingProperties.general.autoSizeColumnWidth
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_AutoSize_Width");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getRowHeadersCard = function(hostServices, formattingProperties, tablixType, objects, isEnabled, featureSwitches) {
                var _this = this;
                if (void 0 === isEnabled && (isEnabled = !1), tablixType === ITablixFormatting.Y.PivotTable) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableRowHeaderProps = (0, tslib_es6.__rest)(pivotTable_capabilities.t.rowHeaders, [ "urlIcon", "outlineStyle", "outlineWeight", "outlineColor", "legacyStyleDisabled" ]), bandedRowHeaders = pivotTable_capabilities.t.values.bandedRowHeaders;
                    tablixType === ITablixFormatting.Y.PivotTable && (pivotTableRowHeaderProps = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowHeaderProps), {
                        bandedRowHeaders
                    }));
                    var pivotTableRowHeadersData = formattingProperties.rowHeaders, cardBuilder = new build_control_util.CQ(new build_control_util.lg("rowHeaders"), "Visual_Tablix_RowHeaders", pivotTableRowHeaderProps, localize), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: pivotTableRowHeaderProps.fontFamily,
                        value: pivotTableRowHeadersData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableRowHeaderProps.fontSize,
                        value: pivotTableRowHeadersData.fontSize.pt
                    }).withBold({
                        descriptor: pivotTableRowHeaderProps.bold,
                        value: pivotTableRowHeadersData.bold
                    }).withItalic({
                        descriptor: pivotTableRowHeaderProps.italic,
                        value: pivotTableRowHeadersData.italic
                    }).withUnderline({
                        descriptor: pivotTableRowHeaderProps.underline,
                        value: pivotTableRowHeadersData.underline
                    }).build();
                    return cardBuilder.addGroup("text", function(groupBuilder) {
                        groupBuilder.withDisplayName("Text"), tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                        groupBuilder.addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowHeaderProps.fontColor,
                                value: {
                                    value: pivotTableRowHeadersData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowHeaderProps.backColor,
                                value: {
                                    value: pivotTableRowHeadersData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }), tablixType === ITablixFormatting.Y.PivotTable && groupBuilder.addSimpleSlice("bandedRowHeaders", new build_control_util.bd({
                            descriptor: pivotTableRowHeaderProps.bandedRowHeaders,
                            value: tablixProperties.FX.PropValuesBandedRowHeaders.setInstanceProperty(void 0, objects)
                        }).build()), groupBuilder.addSimpleSlice("alignment", new build_control_util.Gp({
                            descriptor: pivotTableRowHeaderProps.alignment,
                            value: pivotTableRowHeadersData.alignment,
                            mode: "horizontalAlignment",
                            supportsNoSelection: !0
                        }).build()).addSimpleSlice("wordWrap", new build_control_util.bd({
                            descriptor: pivotTableRowHeaderProps.wordWrap,
                            value: pivotTableRowHeadersData.wordWrap
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("TextWrap");
                        });
                    }), tablixType === ITablixFormatting.Y.PivotTable && isEnabled && cardBuilder.addGroup("expandCollapseButtons", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_PivotTable_ExpandCollapseButtons_Toggle"), 
                        groupBuilder.addTopLevelToggle("showExpandCollapseButtons", function() {
                            return new build_control_util.bd({
                                descriptor: pivotTableRowHeaderProps.showExpandCollapseButtons,
                                value: pivotTableRowHeadersData.showExpandCollapseButtons
                            }).build();
                        }).addSimpleSlice("expandCollapseButtonsColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowHeaderProps.expandCollapseButtonsColor,
                                value: {
                                    value: pivotTableRowHeadersData.expandCollapseButtonsColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Generic_Color");
                        }).addSimpleSlice("expandCollapseButtonsSize", new build_control_util.mu({
                            descriptor: pivotTableRowHeaderProps.expandCollapseButtonsSize,
                            value: pivotTableRowHeadersData.expandCollapseButtonsSize.pt,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 8
                                },
                                maxValue: {
                                    type: 1,
                                    value: 60
                                },
                                unitSymbol: "Numeric_Pixel"
                            }
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_BubbleSize");
                        });
                    }), featureSwitches.matrixLayouts || cardBuilder.addGroup("options", function(groupBuilder) {
                        groupBuilder.withDisplayName("Desktop_FileMenu_Options"), groupBuilder.addSimpleSlice("stepped", new build_control_util.bd({
                            descriptor: pivotTableRowHeaderProps.stepped,
                            value: pivotTableRowHeadersData.steppedLayout
                        }).build()).addSimpleSlice("steppedLayoutIndentation", _this.getIndentationSliderBuilder(pivotTableRowHeadersData, localize).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getIndentationSliderBuilder = function(pivotTableRowHeadersData, localize) {
                return new build_control_util.JN({
                    descriptor: pivotTable_capabilities.t.rowHeaders.steppedLayoutIndentation,
                    value: pivotTableRowHeadersData.steppedLayoutIndentation,
                    localize,
                    options: {
                        minValue: {
                            type: 0,
                            value: 0
                        },
                        maxValue: {
                            type: 1,
                            value: 150
                        }
                    }
                });
            }, TablixPropertyManager.prototype.getTotalsCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                if (tablixType === ITablixFormatting.Y.TableEx) {
                    var totalsProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.total : pivotTable_capabilities.t.total, [ "outlineStyle", "outlineWeight", "outlineColor" ]), tableTotalsData = formattingProperties.total, cardBuilder = new build_control_util.CQ(new build_control_util.lg("totals"), "Visual_Totals", totalsProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: totalsProps.fontFamily,
                        value: tableTotalsData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: totalsProps.fontSize,
                        value: tableTotalsData.fontSize.pt
                    }).withBold({
                        descriptor: totalsProps.bold,
                        value: tableTotalsData.bold
                    }).withItalic({
                        descriptor: totalsProps.italic,
                        value: tableTotalsData.italic
                    }).withUnderline({
                        descriptor: totalsProps.underline,
                        value: tableTotalsData.underline
                    }).build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        var showProperties;
                        groupBuilder.withDisplayName("Visual_Tablix_Values"), tablixType === ITablixFormatting.Y.TableEx ? (groupBuilder.addTopLevelToggle("gridVertical", function() {
                            return new build_control_util.bd({
                                descriptor: totalsProps.totals,
                                value: formattingProperties.general.totals
                            }).build();
                        }), showProperties = formattingProperties.general.totals) : showProperties = !0, 
                        showProperties && groupBuilder.addSimpleSlice("totalLabel", new build_control_util.fq({
                            descriptor: totalsProps.label,
                            value: tableTotalsData.totalLabel,
                            placeholder: ""
                        }).build()).addCompositeSlice("font", "Font", fontControl), groupBuilder.addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: totalsProps.fontColor,
                                value: {
                                    value: tableTotalsData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: totalsProps.backColor,
                                value: {
                                    value: tableTotalsData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getColumnGrandTotalsCard = function(hostServices, formattingProperties, tablixType) {
                if (tablixType !== ITablixFormatting.Y.TableEx) {
                    var pivotTableColumnTotalProps = (0, tslib_es6.__rest)(pivotTable_capabilities.t.columnTotal, [ "outlineStyle", "outline" ]), pivotTableColumnTotalData = formattingProperties.columnGrandTotal, cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnTotal"), "Visual_Tablix_Matrix_Column_TotalGrand", pivotTableColumnTotalProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: pivotTableColumnTotalProps.fontFamily,
                        value: pivotTableColumnTotalData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableColumnTotalProps.fontSize,
                        value: pivotTableColumnTotalData.fontSize.pt
                    }).withBold({
                        descriptor: pivotTableColumnTotalProps.bold,
                        value: pivotTableColumnTotalData.bold
                    }).withItalic({
                        descriptor: pivotTableColumnTotalProps.italic,
                        value: pivotTableColumnTotalData.italic
                    }).withUnderline({
                        descriptor: pivotTableColumnTotalProps.underline,
                        value: pivotTableColumnTotalData.underline
                    }).build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Tablix_Values").addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableColumnTotalProps.fontColor,
                                value: {
                                    value: pivotTableColumnTotalData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableColumnTotalProps.backColor,
                                value: {
                                    value: pivotTableColumnTotalData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: pivotTableColumnTotalProps.applyToHeaders,
                            value: pivotTableColumnTotalData.applyToHeaders
                        }).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getRowGrandTotalsCard = function(hostServices, formattingProperties, tablixType) {
                if (tablixType !== ITablixFormatting.Y.TableEx) {
                    var pivotTableRowTotalProps = (0, tslib_es6.__rest)(pivotTable_capabilities.t.rowTotal, [ "outlineStyle", "outline" ]), pivotTableRowTotalData = formattingProperties.rowGrandTotal, cardBuilder = new build_control_util.CQ(new build_control_util.lg("rowTotal"), "Visual_Tablix_Matrix_Row_TotalGrand", pivotTableRowTotalProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControl = (new build_control_util.UN).withFontFamily({
                        descriptor: pivotTableRowTotalProps.fontFamily,
                        value: pivotTableRowTotalData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableRowTotalProps.fontSize,
                        value: pivotTableRowTotalData.fontSize.pt
                    }).withBold({
                        descriptor: pivotTableRowTotalProps.bold,
                        value: pivotTableRowTotalData.bold
                    }).withItalic({
                        descriptor: pivotTableRowTotalProps.italic,
                        value: pivotTableRowTotalData.italic
                    }).withUnderline({
                        descriptor: pivotTableRowTotalProps.underline,
                        value: pivotTableRowTotalData.underline
                    }).build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Tablix_Values").addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowTotalProps.fontColor,
                                value: {
                                    value: pivotTableRowTotalData.fontColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            return new build_control_util.BT({
                                descriptor: pivotTableRowTotalProps.backColor,
                                value: {
                                    value: pivotTableRowTotalData.backColor
                                }
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: pivotTableRowTotalProps.applyToHeaders,
                            value: pivotTableRowTotalData.applyToHeaders
                        }).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.addAltTextGroup = function(cardBuilder, groupName, displayName, imageColumnsList, accessibilityProps, role) {
                _.isEmpty(imageColumnsList) || cardBuilder.addGroup(groupName, function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_General_Properties_Description").withCollapsible(!1), 
                    groupBuilder.addContainer("measure", function(containerBuilder) {
                        containerBuilder.withDisplayName(displayName);
                        for (var _loop_1 = function(imgColumn) {
                            var selector;
                            role === matrix_capabilities.r.rows || role === matrix_capabilities.r.columns ? selector = {
                                data: [ (0, dataViewRoleWildcard.Yp)([ role ]) ]
                            } : role === matrix_capabilities.r.values ? selector = {
                                data: [ (0, dataViewWildcard.Ue)(0) ],
                                metadata: imgColumn.queryName
                            } : debug.fF.assertFail("unexpected role"), containerBuilder.addContainerItem(imgColumn.queryName, imgColumn.displayName, function(itemBuilder) {
                                return itemBuilder.addSimpleSlice("altTextColumns", new build_control_util.k0({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, accessibilityProps.altTextColumns), {
                                        selector,
                                        instanceKind: 2
                                    }),
                                    validators: {
                                        field: {
                                            kind: 1,
                                            type: {
                                                text: !0
                                            }
                                        }
                                    },
                                    value: void 0,
                                    unwrapExprOnGet: !0
                                }).build());
                            });
                        }, _i = 0, imageColumnsList_1 = imageColumnsList; _i < imageColumnsList_1.length; _i++) _loop_1(imageColumnsList_1[_i]);
                    });
                });
            }, TablixPropertyManager.prototype.getAccessibilityCardNew = function(rowsColumns, columnsColumns, valuesColumns, hostServices, formattingProperties, tablixType) {
                debug.fF.assert(function() {
                    return tablixType === ITablixFormatting.Y.TableEx || tablixType === ITablixFormatting.Y.PivotTable;
                });
                var accessibilityProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.accessibility : pivotTable_capabilities.t.accessibility, rowsImageColumnsList = _.filter(rowsColumns, converterHelper.pt), columnsImageColumnsList = _.filter(columnsColumns, converterHelper.pt), valuesImageColumnsList = _.filter(valuesColumns, converterHelper.pt), columnItems = _.filter(valuesColumns, function(column) {
                    return column.type.text;
                }).map(function(column) {
                    return {
                        displayName: column.displayName,
                        value: column.queryName
                    };
                });
                if (!(_.isEmpty(rowsImageColumnsList) && _.isEmpty(columnsImageColumnsList) && _.isEmpty(valuesImageColumnsList)) || tablixType !== ITablixFormatting.Y.PivotTable && !_.isEmpty(columnItems)) {
                    var cardBuilder = new build_control_util.CQ(new build_control_util.lg("accessibility"), "Accessibility", tablixType === ITablixFormatting.Y.TableEx ? [ accessibilityProps.altTextColumns, accessibilityProps.rowWithReferenceText ] : [ accessibilityProps.altTextColumns ], function(key) {
                        return hostServices.getLocalizedString(key);
                    });
                    if (this.addAltTextGroup(cardBuilder, "AltTextRowHeaders", "Image_Alt_Text_Row_Headers", rowsImageColumnsList, accessibilityProps, matrix_capabilities.r.rows), 
                    this.addAltTextGroup(cardBuilder, "AltTextColumnHeaders", "Image_Alt_Text_Column_Headers", columnsImageColumnsList, accessibilityProps, matrix_capabilities.r.columns), 
                    this.addAltTextGroup(cardBuilder, "AltTextValues", "Image_Alt_Text_Values", valuesImageColumnsList, accessibilityProps, matrix_capabilities.r.values), 
                    tablixType === ITablixFormatting.Y.TableEx && !_.isEmpty(columnItems)) {
                        var nonePlaceHolder = {
                            displayName: hostServices.getLocalizedString("Visual_Tablix_ReferenceRowDefaultText"),
                            value: void 0
                        };
                        columnItems.unshift(nonePlaceHolder), cardBuilder.addGroup("rowWithReferenceText", function(groupBuilder) {
                            var _a;
                            groupBuilder.withDisplayName("Visual_Tablix_RowName_Label").withCollapsible(!1), 
                            groupBuilder.addSimpleSlice("rowWithReferenceText", new build_control_util.uY({
                                descriptor: (0, tslib_es6.__assign)({}, accessibilityProps.rowWithReferenceText),
                                items: columnItems,
                                value: null !== (_a = _.find(columnItems, function(columItem) {
                                    return columItem.value === formattingProperties.rowWithReferenceText.rowWithReferenceText;
                                })) && void 0 !== _a ? _a : columnItems[0]
                            }).build());
                        });
                    }
                    return cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getAccessibilityCard = function(columns, hostServices, formattingProperties, tablixType) {
                if (tablixType === ITablixFormatting.Y.TableEx) {
                    var accessibilityProps = tableEx_capabilities.Z.accessibility, imageColumnsList = _.filter(columns, converterHelper.pt), columnItems = _.filter(columns, function(column) {
                        return column.type.text;
                    }).map(function(column) {
                        return {
                            displayName: column.displayName,
                            value: column.queryName
                        };
                    });
                    if (!_.isEmpty(imageColumnsList) || !_.isEmpty(columnItems)) {
                        var cardBuilder = new build_control_util.CQ(new build_control_util.lg("accessibility"), "Accessibility", [ accessibilityProps.altTextColumns, accessibilityProps.rowWithReferenceText ], function(key) {
                            return hostServices.getLocalizedString(key);
                        });
                        if (_.isEmpty(imageColumnsList) || cardBuilder.addGroup("AltTextValues", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Tablix_Accessibility_Group_AltText_Label").withCollapsible(!1), 
                            groupBuilder.addContainer("measure", function(containerBuilder) {
                                containerBuilder.withDisplayName("Image_Alt_Text_Values");
                                for (var _loop_2 = function(imgColumn) {
                                    containerBuilder.addContainerItem(imgColumn.queryName, imgColumn.displayName, function(itemBuilder) {
                                        return itemBuilder.addSimpleSlice("altTextColumns", new build_control_util.k0({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, accessibilityProps.altTextColumns), {
                                                selector: {
                                                    data: [ (0, dataViewWildcard.Ue)(0) ],
                                                    metadata: imgColumn.queryName
                                                },
                                                instanceKind: 2
                                            }),
                                            validators: {
                                                field: {
                                                    kind: 1,
                                                    type: {
                                                        text: !0
                                                    }
                                                }
                                            },
                                            value: void 0,
                                            unwrapExprOnGet: !0
                                        }).build());
                                    });
                                }, _i = 0, imageColumnsList_2 = imageColumnsList; _i < imageColumnsList_2.length; _i++) _loop_2(imageColumnsList_2[_i]);
                            });
                        }), !_.isEmpty(columnItems)) {
                            var nonePlaceHolder = {
                                displayName: hostServices.getLocalizedString("Visual_Tablix_ReferenceRowDefaultText"),
                                value: void 0
                            };
                            columnItems.unshift(nonePlaceHolder), cardBuilder.addGroup("rowWithReferenceText", function(groupBuilder) {
                                var _a;
                                groupBuilder.withDisplayName("Visual_Tablix_RowName_Label").withCollapsible(!1), 
                                groupBuilder.addSimpleSlice("rowWithReferenceText", new build_control_util.uY({
                                    descriptor: (0, tslib_es6.__assign)({}, accessibilityProps.rowWithReferenceText),
                                    items: columnItems,
                                    value: null !== (_a = _.find(columnItems, function(columItem) {
                                        return columItem.value === formattingProperties.rowWithReferenceText.rowWithReferenceText;
                                    })) && void 0 !== _a ? _a : columnItems[0]
                                }).build());
                            });
                        }
                        return cardBuilder.build();
                    }
                }
            }, TablixPropertyManager.prototype.getRowSubTotalsCard = function(hostServices, formattingProperties, dataView, tablixType, totalsShown, featureSwitches) {
                var _this = this;
                if (totalsShown || tablixType === ITablixFormatting.Y.PivotTable) {
                    var objects = TablixPropertyManager.getMetadataObjects(dataView), perLevel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPerLevel.setInstanceProperty(void 0, objects), localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableRowFormattingProps = pivotTable_capabilities.t.subTotals, pivotTableRowFormattingData = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingProperties.subtotals), formattingProperties.rowSubtotals), cardBuilder = new build_control_util.CQ(new build_control_util.lg("rowSubTotal"), "Visual_SubtotalRow", [ pivotTableRowFormattingProps.rowSubtotalsLabel, pivotTableRowFormattingProps.rowSubtotals, pivotTableRowFormattingProps.rowSubtotalsPosition, pivotTableRowFormattingProps.perRowLevel, pivotTableRowFormattingProps.levelSubtotalEnabled, pivotTableRowFormattingProps.levelSubtotalLabel, pivotTableRowFormattingProps.fontColor, pivotTableRowFormattingProps.backColor, pivotTableRowFormattingProps.fontSize, pivotTableRowFormattingProps.fontFamily, pivotTableRowFormattingProps.bold, pivotTableRowFormattingProps.italic, pivotTableRowFormattingProps.underline, pivotTableRowFormattingProps.applyToHeaders ], localize);
                    cardBuilder.addTopLevelToggle("rowSubtotals", function() {
                        return new build_control_util.bd({
                            descriptor: pivotTableRowFormattingProps.rowSubtotals,
                            value: formattingProperties.general.rowSubtotals
                        }).build();
                    });
                    var counter = 0;
                    return cardBuilder.addGroup("applySettingsTo", function(groupBuilder) {
                        groupBuilder.withContainerDisabled(!perLevel).withDisplayName("Apply_Settings_To").withCollapsible(!1).addSimpleSlice("perRowLevel", new build_control_util.bd({
                            descriptor: pivotTableRowFormattingProps.perRowLevel,
                            value: perLevel
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withDisabled(!_this.shouldShowRowSubtotalsOption(dataView)).withCustomDescriptionIf(function() {
                                return !_this.shouldShowRowSubtotalsOption(dataView);
                            }, "Visual_SubtotalRow_PerLevel_DisabledReason");
                        }).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Visual_Tablix_Row_Level"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                                return _this.getRowSubtotalContainers(formattingProperties, containerItemBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, void 0, objects);
                            });
                            for (var _i = 0, _a = dataView.matrix.rows.levels; _i < _a.length; _i++) for (var _loop_3 = function(source) {
                                if (!source.isMeasure) {
                                    var selector_1 = {
                                        metadata: source.queryName
                                    };
                                    containerBuilder.addContainerItem(source.displayName, source.displayName, function(containerItemBuilder) {
                                        return _this.getRowSubtotalContainers(formattingProperties, containerItemBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, selector_1, source.objects, counter);
                                    }), counter++;
                                }
                            }, _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) _loop_3(_c[_b]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getRowSubtotalContainers = function(formattingProperties, containerBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, selector, sourceObjects, counter) {
                var subTotalsLabel = selector ? tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(sourceObjects, !0) : tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(sourceObjects, !0), defaultTotalLabel = selector ? "" : localize(tablixConstants.qT), subTotalsLabelProp = selector ? pivotTableRowFormattingProps.levelSubtotalLabel : pivotTableRowFormattingProps.rowSubtotalsLabel;
                containerBuilder.addGroup("rows", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Rows"), groupBuilder.addSimpleSlice("levelSubtotalEnabled", new build_control_util.bd({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.levelSubtotalEnabled), {
                            selector
                        }),
                        value: tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(void 0, sourceObjects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_ShowSubtotal").withDisabled(!selector);
                    }).addSimpleSlice("rowSubtotalsLabel", new build_control_util.fq({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, subTotalsLabelProp), {
                            selector
                        }),
                        value: subTotalsLabel || defaultTotalLabel,
                        placeholder: ""
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Subtotal_Label");
                    }).addSimpleSlice(selector ? "rowSubtotalsPositionSeries".concat(counter) : "rowSubtotalsPositionAll", new build_control_util.uY({
                        descriptor: pivotTableRowFormattingProps.rowSubtotalsPosition,
                        value: formattingProperties.subtotals.rowSubtotalsPosition
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Position").withDisabled(!!selector || featureSwitches.matrixLayouts && formattingProperties.general.layout === pivotTableLayout.t.Tabular);
                    });
                }), containerBuilder.addGroup("values", function(groupBuilder) {
                    if (groupBuilder.withDisplayName("Visual_Tablix_Values"), selector) groupBuilder.withDisabled(!0, ""); else {
                        var rowSelector_1 = {
                            id: "Row"
                        }, fontControl = (new build_control_util.UN).withFontFamily({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.fontFamily), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.fontFamily
                        }).withFontSizeProperties({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.fontSize), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.fontSize.pt
                        }).withBold({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.bold), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.bold
                        }).withItalic({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.italic), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.italic
                        }).withUnderline({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.underline), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.underline
                        }).build();
                        groupBuilder.addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: pivotTableRowFormattingData.fontColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.fontColor), {
                                    selector: rowSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: pivotTableRowFormattingData.backColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.backColor), {
                                    selector: rowSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableRowFormattingProps.applyToHeaders), {
                                selector: rowSelector_1
                            }),
                            value: pivotTableRowFormattingData.applyToHeaders
                        }).build());
                    }
                });
            }, TablixPropertyManager.prototype.getColumnSubtotalCard = function(hostServices, formattingProperties, dataView, tablixType, totalsShown, featureSwitches) {
                var _this = this;
                if (totalsShown || tablixType === ITablixFormatting.Y.PivotTable || this.shouldShowColumnSubtotalsOption(dataView)) {
                    var objects = TablixPropertyManager.getMetadataObjects(dataView), perLevel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(objects), localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableColumnFormattingProps = pivotTable_capabilities.t.subTotals, pivotTableColumnFormattingData = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingProperties.subtotals), formattingProperties.columnSubtotals), cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnSubTotal"), "Visual_SubtotalColumn", [ pivotTableColumnFormattingProps.columnSubtotals, pivotTableColumnFormattingProps.columnSubtotalsLabel, pivotTableColumnFormattingProps.perColumnLevel, pivotTableColumnFormattingProps.levelSubtotalEnabled, pivotTableColumnFormattingProps.levelSubtotalLabel, pivotTableColumnFormattingProps.fontColor, pivotTableColumnFormattingProps.backColor, pivotTableColumnFormattingProps.fontSize, pivotTableColumnFormattingProps.fontFamily, pivotTableColumnFormattingProps.bold, pivotTableColumnFormattingProps.italic, pivotTableColumnFormattingProps.underline, pivotTableColumnFormattingProps.applyToHeaders ], localize);
                    return cardBuilder.addTopLevelToggle("columnSubtotals", function() {
                        return new build_control_util.bd({
                            descriptor: pivotTableColumnFormattingProps.columnSubtotals,
                            value: formattingProperties.general.columnSubtotals
                        }).build();
                    }), cardBuilder.addGroup("applySettingsTo", function(groupBuilder) {
                        groupBuilder.withContainerDisabled(!perLevel).withDisplayName("Apply_Settings_To").withCollapsible(!1).addSimpleSlice("perColumnLevel", new build_control_util.bd({
                            descriptor: pivotTableColumnFormattingProps.perColumnLevel,
                            value: perLevel
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withDisabled(!_this.shouldShowColumnSubtotalsOption(dataView)).withCustomDescriptionIf(function() {
                                return !_this.shouldShowColumnSubtotalsOption(dataView);
                            }, "Visual_SubtotalColumn_PerLevel_DisabledReason");
                        }).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Visual_Tablix_Column_Level"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                                return _this.getColumnSubtotalContainers(containerItemBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, void 0, objects);
                            });
                            for (var _i = 0, _a = dataView.matrix.columns.levels; _i < _a.length; _i++) for (var _loop_4 = function(source) {
                                if (!source.isMeasure) {
                                    var selector_2 = {
                                        metadata: source.queryName
                                    };
                                    containerBuilder.addContainerItem(source.displayName, source.displayName, function(containerItemBuilder) {
                                        return _this.getColumnSubtotalContainers(containerItemBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, selector_2, source.objects);
                                    });
                                }
                            }, _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) _loop_4(_c[_b]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getColumnSubtotalContainers = function(containerBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, selector, sourceObjects) {
                var defaultTotalLabel = localize(tablixConstants.qT), subTotalsLabel = selector ? tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(sourceObjects, !0) : tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(sourceObjects, !0), subTotalLabelProp = selector ? pivotTableColumnFormattingProps.levelSubtotalLabel : pivotTableColumnFormattingProps.columnSubtotalsLabel;
                containerBuilder.addGroup("columns", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Columns"), groupBuilder.addSimpleSlice("levelSubtotalEnabled", new build_control_util.bd({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.levelSubtotalEnabled), {
                            selector
                        }),
                        value: tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(void 0, sourceObjects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_ShowSubtotal").withDisabled(!selector);
                    }).addSimpleSlice("columnSubtotalsLabel", new build_control_util.fq({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, subTotalLabelProp), {
                            selector
                        }),
                        value: subTotalsLabel || defaultTotalLabel,
                        placeholder: ""
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Subtotal_Label");
                    });
                }), containerBuilder.addGroup("values", function(groupBuilder) {
                    if (groupBuilder.withDisplayName("Visual_Tablix_Values"), selector) groupBuilder.withDisabled(!0, ""); else {
                        var columnSelector_1 = {
                            id: "Column"
                        }, fontControl = (new build_control_util.UN).withFontFamily({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.fontFamily), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.fontFamily
                        }).withFontSizeProperties({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.fontSize), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.fontSize.pt
                        }).withBold({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.bold), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.bold
                        }).withItalic({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.italic), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.italic
                        }).withUnderline({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.underline), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.underline
                        }).build();
                        groupBuilder.addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: pivotTableColumnFormattingData.fontColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.fontColor), {
                                    selector: columnSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: pivotTableColumnFormattingData.backColor
                            };
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.backColor), {
                                    selector: columnSelector_1
                                }),
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }), groupBuilder.addSimpleSlice("applyToHeaders", new build_control_util.bd({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTableColumnFormattingProps.applyToHeaders), {
                                selector: columnSelector_1
                            }),
                            value: pivotTableColumnFormattingData.applyToHeaders
                        }).build());
                    }
                });
            }, TablixPropertyManager.prototype.getColumnFormattingCard = function(hostServices, formattingProperties, columns, tablixType) {
                if (!_.isEmpty(columns)) {
                    var columnFormattingProps = (0, tslib_es6.__rest)(tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.columnFormatting : pivotTable_capabilities.t.columnFormatting, [ "dataBars" ]), columnFormattingData = formattingProperties.columnFormatting, cardBuilder = new build_control_util.CQ(new build_control_util.lg("columnFormatting"), "Visual_Tablix_Specific_Column", columnFormattingProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    });
                    return cardBuilder.withDescription("Visual_Matrix_SpecificColumn_Description"), 
                    cardBuilder.addGroup("columns", function(groupBuilder) {
                        groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Series");
                            for (var _loop_5 = function(column) {
                                var objects = column && column.objects;
                                containerBuilder.addContainerItem(column.queryName, column.displayName, function(containerItemBuilder) {
                                    containerItemBuilder.addSimpleSlice(columnFormattingProps.styleHeader, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleHeader), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleHeader
                                    }).build()), tablixType === ITablixFormatting.Y.PivotTable && containerItemBuilder.addSimpleSlice(columnFormattingProps.styleSubtotals, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleSubtotals), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: tablixProperties.FX.PropColumnFormattingStyleSubtotals.setInstanceProperty(void 0, objects)
                                    }).build()), containerItemBuilder.addSimpleSlice(columnFormattingProps.styleTotal, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleTotal), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleTotal
                                    }).build()).addSimpleSlice(columnFormattingProps.styleValues, new build_control_util.bd({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.styleValues), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleValues
                                    }).build()), containerItemBuilder.addGroup("values", function(containerGroupBuilder) {
                                        if (containerGroupBuilder.withDisplayName("Visual_Tablix_Values").addSimpleSlice("fontColor", function() {
                                            var colorData = {
                                                value: columnFormattingData[column.queryName].fontColor
                                            };
                                            return new build_control_util.BT({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.fontColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }, function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Text_Color");
                                        }).addSimpleSlice("backColor", function() {
                                            var colorData = {
                                                value: columnFormattingData[column.queryName].backColor
                                            };
                                            return new build_control_util.BT({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.backColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }, function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Background_Color");
                                        }).addSimpleSlice("alignment", new build_control_util.Gp({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.alignment), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            mode: "horizontalAlignment",
                                            supportsNoSelection: !0,
                                            value: columnFormattingData[column.queryName].alignment
                                        }).build()), column.type.numeric && (tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx)) {
                                            var objects_1 = column && column.objects;
                                            containerGroupBuilder.addSimpleSlice("labelDisplayUnits", new build_control_util.uY({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.labelDisplayUnits), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: tablixProperties.FX.PropColumnFormattingDisplayUnits.setInstanceProperty(void 0, objects_1)
                                            }).build()).addSimpleSlice("labelPrecision", new build_control_util.mu({
                                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, columnFormattingProps.labelPrecision), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: tablixProperties.FX.PropColumnFormattingPrecision.setInstanceProperty(void 0, objects_1),
                                                options: {
                                                    minValue: {
                                                        type: 0,
                                                        value: 0
                                                    },
                                                    maxValue: {
                                                        type: 1,
                                                        value: dataLabelViewModel1Consts.vo
                                                    }
                                                }
                                            }).build());
                                        }
                                    });
                                });
                            }, _i = 0, columns_2 = columns; _i < columns_2.length; _i++) _loop_5(columns_2[_i]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getCellColumnCard = function(hostServices, tablixType, dataView, featureSwitches) {
                var tableColumnFormattingDescriptors = (0, tableEx_capabilities.k)().objects, VisualObjectRepetitionArray = [];
                return this.enumerateObjectRepetition(VisualObjectRepetitionArray, dataView, tablixType, featureSwitches), 
                (0, conditional_formatting_util.Z)(VisualObjectRepetitionArray, function(key) {
                    return hostServices.getLocalizedString(key);
                }, tableColumnFormattingDescriptors, "Cell_Elements", "Visual_Matrix_CellElements_Description");
            }, TablixPropertyManager.prototype.getUrlIconCard = function(hostServices, formattingProperties, tablixType) {
                var valuesUrlIconProp = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.values.urlIcon : pivotTable_capabilities.t.values.urlIcon, pivotTableFormattingProperties = formattingProperties, columnHeadersUrlIconProp = pivotTable_capabilities.t.columnHeaders.urlIcon, rowHeadersUrlIconProp = pivotTable_capabilities.t.rowHeaders.urlIcon, cardBuilder = new build_control_util.CQ(new build_control_util.lg("urlIcon"), "Visual_Tablix_UrlIcon", [ valuesUrlIconProp, columnHeadersUrlIconProp, rowHeadersUrlIconProp ], function(key) {
                    return hostServices.getLocalizedString(key);
                });
                return cardBuilder.addGroup("urlIcon", function(groupBuilder) {
                    tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || groupBuilder.addSimpleSlice("values", new build_control_util.bd({
                        descriptor: valuesUrlIconProp,
                        value: formattingProperties.values.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_Values");
                    }), tablixType === ITablixFormatting.Y.PivotTable && groupBuilder.addSimpleSlice("columnheaders", new build_control_util.bd({
                        descriptor: columnHeadersUrlIconProp,
                        value: pivotTableFormattingProperties.columnHeaders.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_ColumnHeaders");
                    }).addSimpleSlice("rowheaders", new build_control_util.bd({
                        descriptor: rowHeadersUrlIconProp,
                        value: pivotTableFormattingProperties.rowHeaders.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_RowHeaders");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getImageSizeCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                var imageHeightProp = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.grid.imageHeight : pivotTable_capabilities.t.grid.imageHeight, imageWidthProp = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.grid.imageWidth : pivotTable_capabilities.t.grid.imageWidth, cardBuilder = new build_control_util.CQ(new build_control_util.lg("imageHeight"), "Visual_Tablix_ImageSize", [ imageHeightProp, imageWidthProp ], function(key) {
                    return hostServices.getLocalizedString(key);
                });
                return cardBuilder.addGroup("imageHeight", function(cardBuilder) {
                    cardBuilder.addSimpleSlice("imageHeight", new build_control_util.mu({
                        descriptor: imageHeightProp,
                        value: formattingProperties.grid.imageHeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: TablixPropertyManager.ImageSizeMin
                            },
                            maxValue: {
                                type: 1,
                                value: TablixPropertyManager.ImageSizeMax
                            },
                            unitSymbol: visualLocKeys.e_
                        }
                    }).build()), featureSwitches.tablixImageWidth && cardBuilder.addSimpleSlice("imageWidth", new build_control_util.mu({
                        descriptor: imageWidthProp,
                        value: formattingProperties.grid.imageWidth,
                        options: {
                            minValue: {
                                type: 0,
                                value: TablixPropertyManager.ImageSizeMin
                            },
                            maxValue: {
                                type: 1,
                                value: TablixPropertyManager.ImageSizeMax
                            },
                            unitSymbol: visualLocKeys.e_
                        }
                    }).build());
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getSparklinesCard = function(columns, hostServices, tablixType) {
                var _this = this;
                if (!_.isEmpty(columns) && this.hasSparklines(columns)) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, sparklinesProps = tablixType === ITablixFormatting.Y.TableEx ? tableEx_capabilities.Z.sparklines : pivotTable_capabilities.t.sparklines;
                    return new build_control_util.CQ(new build_control_util.lg("sparklines"), "Sparkline_Label", sparklinesProps, localize).addGroup("columns", function(groupBuilder) {
                        return groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("series", function(containerBuilder) {
                            var _a;
                            containerBuilder.withDisplayName("Sparkline_Singular_Label");
                            for (var _loop_6 = function(column) {
                                if (!(null === (_a = column.type.misc) || void 0 === _a ? void 0 : _a.sparkline)) return "continue";
                                var objects = null == column ? void 0 : column.objects, selector = {
                                    metadata: column.queryName
                                };
                                containerBuilder.addContainerItem(column.queryName, column.displayName, function(containerItemBuilder) {
                                    var sparklineChartTypeData = tablixProperties.FX.PropSparklinesChartType.setInstanceProperty(void 0, objects);
                                    containerItemBuilder.addGroup("sparklines", function(containerGroupBuilder) {
                                        return containerGroupBuilder.withDisplayName("Sparkline_Singular_Label").addSimpleSlice("chartType", new build_control_util.uY({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.chartType), {
                                                selector
                                            }),
                                            value: sparklineChartTypeData
                                        }).build()).addSimpleSlice("dataColor", new build_control_util.BT({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.dataColor), {
                                                selector
                                            }),
                                            value: {
                                                value: _this.tablixProperties.PropSparklinesDataColor.setInstanceProperty(void 0, objects).solid.color
                                            }
                                        }).build()).addSimpleSlice("strokeWidth", new build_control_util.JN({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.strokeWidth), {
                                                selector
                                            }),
                                            value: tablixProperties.FX.PropSparklinesStrokeWidth.setInstanceProperty(void 0, objects),
                                            localize,
                                            options: {
                                                minValue: {
                                                    type: 0,
                                                    value: 1
                                                },
                                                maxValue: {
                                                    type: 1,
                                                    value: 4
                                                }
                                            }
                                        }).build(), function(slicer) {
                                            return slicer.withHidden(sparklineChartTypeData !== sparklineChartType.U.line);
                                        });
                                    }), sparklineChartTypeData === sparklineChartType.U.line && containerItemBuilder.addGroup("markers", function(containerGroupBuilder) {
                                        var markerTypeValue = tablixProperties.FX.PropSparklinesMarkerType.getValue(objects);
                                        containerGroupBuilder.withDisplayName("Marker").addSimpleSlice("markers", new build_control_util.oM({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markers), {
                                                selector
                                            }),
                                            value: markerTypeValue
                                        }).build()), null != markerTypeValue && 0 !== markerTypeValue && containerGroupBuilder.addSimpleSlice("markerColor", new build_control_util.BT({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markerColor), {
                                                selector
                                            }),
                                            value: {
                                                value: _this.tablixProperties.PropSparklinesMarkerColor.setInstanceProperty(void 0, objects).solid.color
                                            }
                                        }).build()).addSimpleSlice("markerShape", new build_control_util.uY({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markerShape), {
                                                selector
                                            }),
                                            value: tablixProperties.FX.PropSparklinesMarkerShape.setInstanceProperty(void 0, objects)
                                        }).build()).addSimpleSlice("markerSize", new build_control_util.JN({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sparklinesProps.markerSize), {
                                                selector
                                            }),
                                            value: tablixProperties.FX.PropSparklinesMarkerSize.setInstanceProperty(void 0, objects),
                                            localize,
                                            options: {
                                                minValue: {
                                                    type: 0,
                                                    value: 3
                                                },
                                                maxValue: {
                                                    type: 1,
                                                    value: 5
                                                }
                                            }
                                        }).build());
                                    });
                                });
                            }, _i = 0, columns_3 = columns; _i < columns_3.length; _i++) _loop_6(columns_3[_i]);
                        });
                    }).build();
                }
            }, TablixPropertyManager.prototype.hasSparklines = function(columns) {
                for (var _a, _i = 0, columns_4 = columns; _i < columns_4.length; _i++) if (null === (_a = columns_4[_i].type.misc) || void 0 === _a ? void 0 : _a.sparkline) return !0;
                return !1;
            }, TablixPropertyManager.prototype.enumerateObjectInstances = function(options, enumeration, dataView, tablixType, localizer, featureSwitches, isEnabled, style) {
                void 0 === featureSwitches && (featureSwitches = {}), void 0 === isEnabled && (isEnabled = !1), 
                debug.fF.assertValue(dataView, "dataView can't be undefined");
                var totalsShown, objects = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(style);
                switch (totalsShown = tablixType === ITablixFormatting.Y.Table ? this.shouldShowTableTotalsOption(dataView) && tablixProperties.FX.PropGeneralTableTotals.getValue(objects) : this.shouldShowColumnSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixColumnSubtotals.getValue(objects) || this.shouldShowRowSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixRowSubtotals.getValue(objects), 
                options.objectName) {
                  case tablixProperties.FX.ObjectGeneral:
                    this.enumerateGeneralOptions(enumeration, objects, tablixType, dataView);
                    break;

                  case tablixProperties.FX.ObjectGrid:
                    this.enumerateGridOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectColumnHeaders:
                    this.enumerateColumnHeadersOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectRowHeaders:
                    this.enumerateRowHeadersOptions(enumeration, objects, tablixType, isEnabled, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectValues:
                    this.enumerateValuesOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectTotal:
                    tablixType === ITablixFormatting.Y.TableEx ? this.enumerateTotalOptions(enumeration, objects, ITablixFormatting.Y.TableEx, localizer, featureSwitches, textClassProperties) : totalsShown && (tablixType === ITablixFormatting.Y.Table ? this.enumerateTotalOptions(enumeration, objects, ITablixFormatting.Y.TableEx, localizer, featureSwitches, textClassProperties) : this.enumerateGrandTotalOptions(enumeration, objects, tablixType, textClassProperties));
                    break;

                  case tablixProperties.FX.ObjectColumnTotal:
                    tablixType === ITablixFormatting.Y.PivotTable && this.enumerateColumnGrandTotalOptions(enumeration, objects, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectRowTotal:
                    tablixType === ITablixFormatting.Y.PivotTable && this.enumerateRowGrandTotalOptions(enumeration, objects, textClassProperties, featureSwitches);
                    break;

                  case tablixProperties.FX.ObjectSubTotals:
                    (totalsShown || tablixType === ITablixFormatting.Y.PivotTable) && this.enumerateSubTotalsOptions(enumeration, objects, tablixType, dataView, localizer, featureSwitches, textClassProperties);
                    break;

                  case tablixProperties.FX.ObjectColumnFormatting:
                    this.enumerateColumnFormattingOptions(enumeration, this.getColumnsMetadata(dataView, tablixType), tablixType);
                    break;

                  case tablixProperties.FX.ObjectSparklines:
                    this.enumerateSparklines(enumeration, this.getColumnsMetadata(dataView, tablixType));
                }
            }, TablixPropertyManager.prototype.getColumnsMetadata = function(dataView, tablixType) {
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                  case ITablixFormatting.Y.TableEx:
                    return this.getTableColumnMetadata(dataView);

                  case ITablixFormatting.Y.Matrix:
                  case ITablixFormatting.Y.PivotTable:
                    return this.getMatrixValuesColumnMetadata(dataView);

                  default:
                    return void debug.fF.assertFail("TablixUtils.enumerateObjectInstances - Unexpected tablixType: " + tablixType);
                }
            }, TablixPropertyManager.prototype.getTableColumnMetadata = function(dataView) {
                if (dataView && dataView.table && !_.isEmpty(dataView.table.columns)) return dataView.table.columns;
            }, TablixPropertyManager.prototype.getMatrixRowsColumnMetadata = function(dataView) {
                if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.rows)) {
                    for (var result = [], _i = 0, _a = dataView.matrix.rows.levels; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) result.push(_c[_b]);
                    return result;
                }
            }, TablixPropertyManager.prototype.getMatrixColumnsColumnMetadata = function(dataView) {
                if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.columns)) {
                    for (var result = [], _i = 0, _a = dataView.matrix.columns.levels; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) result.push(_c[_b]);
                    return result;
                }
            }, TablixPropertyManager.prototype.getMatrixValuesColumnMetadata = function(dataView) {
                if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) return dataView.matrix.valueSources;
            }, TablixPropertyManager.prototype.createVisualObjectInstance = function(objectName, selector, displayName) {
                void 0 === selector && (selector = null);
                var instance = {
                    selector,
                    objectName,
                    properties: {}
                };
                return null != displayName && (instance.displayName = displayName), instance;
            }, TablixPropertyManager.prototype.enumerateGeneralOptions = function(enumeration, objects, tablixType, dataView) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectGeneral);
                switch (tablixType) {
                  case ITablixFormatting.Y.Table:
                    tablixProperties.FX.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGeneralTextSize.setInstanceProperty(instance, objects), 
                    this.shouldShowTableTotalsOption(dataView) && tablixProperties.FX.PropGeneralTableTotals.setInstanceProperty(instance, objects);
                    break;

                  case ITablixFormatting.Y.Matrix:
                    tablixProperties.FX.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGeneralTextSize.setInstanceProperty(instance, objects), 
                    this.shouldShowRowSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixRowSubtotals.setInstanceProperty(instance, objects), 
                    this.shouldShowColumnSubtotalsOption(dataView) && tablixProperties.FX.PropGeneralMatrixColumnSubtotals.setInstanceProperty(instance, objects);
                }
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateGridOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectGrid), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, verticalGridEnabled = tablixProperties.FX.PropGridVertical.getValue(objects);
                tablixProperties.FX.PropGridVertical.setInstanceProperty(instance, objects), verticalGridEnabled && (this.tablixProperties.PropGridVerticalColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropGridVerticalWeight.setInstanceProperty(instance, objects));
                var isTable = tablixType === ITablixFormatting.Y.Table || tablixType === ITablixFormatting.Y.TableEx, horizontalGridEnabled = (isTable ? tablixProperties.FX.PropGridHorizontalTable : tablixProperties.FX.PropGridHorizontalMatrix).getValue(objects);
                (isTable ? tablixProperties.FX.PropGridHorizontalTable : tablixProperties.FX.PropGridHorizontalMatrix).setInstanceProperty(instance, objects), 
                horizontalGridEnabled && (this.tablixProperties.PropGridHorizontalColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropGridHorizontalWeight.setInstanceProperty(instance, objects)), 
                tablixProperties.FX.PropGridRowPadding.setInstanceProperty(instance, objects), (tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) && tablixProperties.FX.PropGridOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, tablixProperties.e9), 
                this.tablixProperties.PropGridOutlineColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropGridOutlineWeight.setInstanceProperty(instance, objects), 
                tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || tablixProperties.FX.PropGridPivotTableTextSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                tablixProperties.FX.PropGridImageHeight.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateColumnHeadersOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectColumnHeaders), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                if (this.tablixProperties.PropColumnsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropColumnsBackColor.setInstanceProperty(instance, objects), 
                tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                    var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropColumnsOutlineStyle.getValue(objects), objects, tablixProperties.UR);
                    tablixProperties.FX.PropColumnsOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                    var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropColumnsOutlineWeight.getValue(objects), objects);
                    tablixProperties.FX.PropColumnsOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                    var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects);
                    this.tablixProperties.PropColumnsOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                    tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                    tablixProperties.FX.PropColumnsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                    tablixProperties.FX.PropColumnsBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropColumnsItalic.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnsUnderline.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnsAlignment.setInstanceProperty(instance, objects);
                } else tablixProperties.FX.PropColumnsOutline.setInstanceProperty(instance, objects);
                tablixType === ITablixFormatting.Y.PivotTable && (tablixProperties.FX.PropColumnsAlignmentTitle.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnsUrlIcon.setInstanceProperty(instance, objects)), 
                tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropColumnsWordWrap.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateRowHeadersOptions = function(enumeration, objects, tablixType, isEnabled, textClassProperties, featureSwitches) {
                void 0 === isEnabled && (isEnabled = !1);
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectRowHeaders), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                if (this.tablixProperties.PropRowsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropRowsBackColor.setInstanceProperty(instance, objects), 
                tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                    var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropRowsOutlineStyle.getValue(objects), objects, tablixProperties.Pi);
                    tablixProperties.FX.PropRowsOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                } else tablixProperties.FX.PropRowsOutline.setInstanceProperty(instance, objects);
                if (tablixType === ITablixFormatting.Y.PivotTable) {
                    var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropRowsOutlineWeight.getValue(objects), objects);
                    tablixProperties.FX.PropRowsOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                    var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropRowsOutlineColor.getValue(objects), objects);
                    this.tablixProperties.PropRowsOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                    tablixProperties.FX.PropRowsSteppedLayout.setInstanceProperty(instance, objects) && tablixProperties.FX.PropRowsSteppedLayoutIndentation.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropRowsUrlIcon.setInstanceProperty(instance, objects), tablixProperties.FX.PropGeneralMatrixLayout.setInstanceProperty(instance, objects) !== pivotTableLayout.t.Compact && tablixProperties.FX.PropRowsRepeatRowHeaders.setInstanceProperty(instance, objects);
                }
                tablixType !== ITablixFormatting.Y.Matrix && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropRowsWordWrap.setInstanceProperty(instance, objects), 
                tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropRowsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                tablixProperties.FX.PropRowsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                tablixProperties.FX.PropRowsBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropRowsItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowsUnderline.setInstanceProperty(instance, objects), tablixProperties.FX.PropRowsAlignment.setInstanceProperty(instance, objects)), 
                tablixType === ITablixFormatting.Y.PivotTable && isEnabled && (tablixProperties.FX.PropRowsShowExpandCollapseButtons.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowsShowExpandCollapseButtons.getValue(objects) && (this.tablixProperties.PropRowsExpandCollapseButtonsColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowsExpandCollapseButtonsSize.setInstanceProperty(instance, objects))), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateValuesOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectValues), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                if (this.tablixProperties.PropValuesFontColorPrimary.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropValuesBackColorPrimary.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropValuesFontColorSecondary.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropValuesBackColorSecondary.setInstanceProperty(instance, objects), 
                tablixType === ITablixFormatting.Y.PivotTable && (tablixProperties.FX.PropValuesBandedRowHeaders.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropValuesOnRow.setInstanceProperty(instance, objects)), tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                    var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropValuesOutlineStyle.getValue(objects), objects, tablixProperties.IC);
                    tablixProperties.FX.PropValuesOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                    var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropValuesOutlineWeight.getValue(objects), objects);
                    tablixProperties.FX.PropValuesOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                    var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects);
                    this.tablixProperties.PropValuesOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue);
                } else tablixProperties.FX.PropValuesOutline.setInstanceProperty(instance, objects);
                tablixType !== ITablixFormatting.Y.Table && tablixType !== ITablixFormatting.Y.TableEx && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropValuesUrlIcon.setInstanceProperty(instance, objects), 
                tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropValuesWordWrap.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropValuesFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                tablixProperties.FX.PropValuesFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                tablixProperties.FX.PropValuesBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropValuesItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropValuesUnderline.setInstanceProperty(instance, objects)), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateTotalOptions = function(enumeration, objects, tablixType, localizer, featureSwitches, textClassProperties) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                if (tablixType !== ITablixFormatting.Y.TableEx || tablixProperties.FX.PropTotalTableExTotals.setInstanceProperty(instance, objects)) {
                    if (tablixType === ITablixFormatting.Y.TableEx) {
                        var value = tablixProperties.FX.PropTotalTableExTotalLabel.getValue(objects, !0) || localizer(tablixConstants.qT);
                        instance.properties[tablixProperties.FX.PropTotalTableExTotalLabel.propertyName] = value;
                    }
                    if (this.tablixProperties.PropTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                    this.tablixProperties.PropTotalBackColor.setInstanceProperty(instance, objects), 
                    tablixType === ITablixFormatting.Y.PivotTable || tablixType === ITablixFormatting.Y.TableEx) {
                        var fallbackOutlineValue = this.ensureOutline(tablixProperties.FX.PropTotalOutlineStyle.getValue(objects), objects, tablixProperties.Sc);
                        tablixProperties.FX.PropTotalOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineValue);
                    } else tablixProperties.FX.PropTotalOutline.setInstanceProperty(instance, objects);
                    if (tablixType === ITablixFormatting.Y.TableEx) {
                        var fallbackOutlineWeightValue = this.ensureOutlineWeight(tablixProperties.FX.PropTotalOutlineWeight.getValue(objects), objects);
                        tablixProperties.FX.PropTotalOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineWeightValue);
                        var fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropTotalOutlineColor.getValue(objects), objects);
                        this.tablixProperties.PropTotalOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue);
                    }
                    tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                    tablixProperties.FX.PropTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                    tablixProperties.FX.PropTotalBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropTotalItalic.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropTotalUnderline.setInstanceProperty(instance, objects));
                }
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateGrandTotalOptions = function(enumeration, objects, tablixType, textClassProperties) {
                if (tablixType !== ITablixFormatting.Y.PivotTable) {
                    var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                    this.tablixProperties.PropGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                    tablixProperties.FX.PropGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                    this.tablixProperties.PropGrandTotalBackColor.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                    tablixType === ITablixFormatting.Y.TableEx && (tablixProperties.FX.PropGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                    tablixProperties.FX.PropGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                    tablixProperties.FX.PropGrandTotalBold.setInstanceProperty(instance, objects), tablixProperties.FX.PropGrandTotalItalic.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropGrandTotalUnderline.setInstanceProperty(instance, objects)), 
                    enumeration.pushInstance(instance);
                }
            }, TablixPropertyManager.prototype.enumerateColumnGrandTotalOptions = function(enumeration, objects, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectColumnTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropColumnGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                tablixProperties.FX.PropColumnGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropColumnGrandTotalBackColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                tablixProperties.FX.PropColumnGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                tablixProperties.FX.PropColumnGrandTotalBold.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropColumnGrandTotalUnderline.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateRowGrandTotalOptions = function(enumeration, objects, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectRowTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropRowGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                tablixProperties.FX.PropRowGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropRowGrandTotalBackColor.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                tablixProperties.FX.PropRowGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                tablixProperties.FX.PropRowGrandTotalBold.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalItalic.setInstanceProperty(instance, objects), 
                tablixProperties.FX.PropRowGrandTotalUnderline.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateSubTotalsOptions = function(enumeration, objects, tablixType, dataView, localizer, featureSwitches, textClassProperties) {
                var defaultTotalLabel, defaultRowTotalLabel, defaultColumnTotalLabel, rowSubtotalsEnabled = !1, columnSubtotalsEnabled = !1;
                if (tablixType === ITablixFormatting.Y.PivotTable) {
                    debug.fF.assertValue(localizer, "enumerateSubTotalsOptions - localizer"), defaultTotalLabel = localizer(tablixConstants.qT);
                    var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals);
                    this.shouldShowRowSubtotalsOption(dataView) && (rowSubtotalsEnabled = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotals.setInstanceProperty(instance, objects)), 
                    rowSubtotalsEnabled && (defaultRowTotalLabel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(objects, !0) || defaultTotalLabel, 
                    instance.properties[tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.propertyName] = defaultRowTotalLabel), 
                    enumeration.pushInstance(instance);
                }
                if (this.enumerateSubtotalsFontProperties(enumeration, objects, textClassProperties, featureSwitches, tablixType, "Row"), 
                rowSubtotalsEnabled) {
                    instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals), 
                    tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPosition.setInstanceProperty(instance, objects), 
                    enumeration.pushInstance(instance), instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals);
                    var perLevel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPerLevel.setInstanceProperty(instance, objects);
                    enumeration.pushInstance(instance, !1), perLevel && this.enumeratePerLevelSubtotals(enumeration, dataView.matrix.rows.levels, defaultRowTotalLabel, localizer);
                }
                tablixType === ITablixFormatting.Y.PivotTable && (instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals), 
                this.shouldShowColumnSubtotalsOption(dataView) && (columnSubtotalsEnabled = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotals.setInstanceProperty(instance, objects)), 
                columnSubtotalsEnabled && (defaultColumnTotalLabel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(objects, !0) || defaultTotalLabel, 
                instance.properties[tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.propertyName] = defaultColumnTotalLabel), 
                enumeration.pushInstance(instance, !1)), this.enumerateSubtotalsFontProperties(enumeration, objects, textClassProperties, featureSwitches, tablixType, "Column"), 
                columnSubtotalsEnabled && (instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals), 
                perLevel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsPerLevel.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance, !1), debug.fF.assert(function() {
                    return !_.isEmpty(dataView.matrix.columns.levels);
                }, "enumerateSubTotalsOptions: Empty column levels"), perLevel && this.enumeratePerLevelSubtotals(enumeration, dataView.matrix.columns.levels, defaultColumnTotalLabel, localizer));
            }, TablixPropertyManager.prototype.enumerateSubtotalsFontProperties = function(enumeration, objects, textClassProperties, featureSwitches, tablixType, instanceId) {
                var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals, instanceId ? {
                    id: instanceId
                } : void 0), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropSubTotalsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, instanceId), 
                tablixProperties.FX.PropSubTotalsFontFamily.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                this.tablixProperties.PropSubTotalsBackColor.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixType === ITablixFormatting.Y.PivotTable && (tablixProperties.FX.PropSubTotalsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, instanceId), 
                tablixProperties.FX.PropSubTotalsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, instanceId), 
                tablixProperties.FX.PropSubTotalsBold.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixProperties.FX.PropSubTotalsItalic.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixProperties.FX.PropSubTotalsUnderline.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixProperties.FX.PropSubTotalsApplyToHeaders.setInstanceProperty(instance, objects, void 0, void 0, instanceId)), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumeratePerLevelSubtotals = function(enumeration, hierarchyLevels, defaultTotalLabel, localizer) {
                debug.fF.assert(function() {
                    return !_.isEmpty(hierarchyLevels);
                }, "enumeratePerLevelSubtotals: Empty levels");
                for (var _i = 0, hierarchyLevels_1 = hierarchyLevels; _i < hierarchyLevels_1.length; _i++) for (var _a = 0, _b = hierarchyLevels_1[_i].sources; _a < _b.length; _a++) {
                    var source = _b[_a];
                    if (!source.isMeasure) {
                        var instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals, {
                            metadata: source.queryName
                        }, source.displayName);
                        tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(instance, source.objects), 
                        enumeration.pushInstance(instance, !1), instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSubTotals, {
                            metadata: source.queryName
                        }, localizer("Visual_PivotTable_TotalLabel", source.displayName));
                        var value = tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(source.objects, !0) || defaultTotalLabel;
                        instance.properties[tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.propertyName] = value, 
                        enumeration.pushInstance(instance, !1);
                    }
                }
            }, TablixPropertyManager.prototype.enumerateColumnFormattingOptions = function(enumeration, columns, tablixType) {
                if (!_.isEmpty(columns)) for (var _i = 0, columns_5 = columns; _i < columns_5.length; _i++) {
                    var column = columns_5[_i];
                    enumeration.pushContainer({
                        displayName: column.displayName
                    });
                    var objects = column && column.objects, instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectColumnFormatting, {
                        metadata: column.queryName
                    });
                    !column.type.numeric || tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || (tablixProperties.FX.PropColumnFormattingDisplayUnits.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingPrecision.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingPrecision.setInstanceValidValues(instance, {
                        numberRange: {
                            min: 0,
                            max: dataLabelViewModel1Consts.vo
                        }
                    })), this.tablixProperties.PropColumnFormattingFontColor.setInstanceProperty(instance, objects), 
                    this.tablixProperties.PropColumnFormattingBackColor.setInstanceProperty(instance, objects), 
                    tablixType !== ITablixFormatting.Y.PivotTable && tablixType !== ITablixFormatting.Y.TableEx || tablixProperties.FX.PropColumnFormattingAlignment.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingStyleHeader.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingStyleValues.setInstanceProperty(instance, objects), 
                    tablixType !== ITablixFormatting.Y.Matrix && tablixType !== ITablixFormatting.Y.PivotTable || tablixProperties.FX.PropColumnFormattingStyleSubtotals.setInstanceProperty(instance, objects), 
                    tablixProperties.FX.PropColumnFormattingStyleTotal.setInstanceProperty(instance, objects), 
                    enumeration.pushInstance(instance), enumeration.popContainer();
                }
            }, TablixPropertyManager.prototype.enumerateSparklines = function(enumeration, columns) {
                var _a;
                if (!_.isEmpty(columns)) for (var _i = 0, columns_6 = columns; _i < columns_6.length; _i++) {
                    var column = columns_6[_i];
                    if (null === (_a = column.type.misc) || void 0 === _a ? void 0 : _a.sparkline) {
                        enumeration.pushContainer({
                            displayName: column.displayName
                        });
                        var objects = column && column.objects, instance = this.createVisualObjectInstance(tablixProperties.FX.ObjectSparklines, {
                            metadata: column.queryName
                        });
                        if (tablixProperties.FX.PropSparklinesChartType.setInstanceProperty(instance, objects), 
                        this.tablixProperties.PropSparklinesDataColor.setInstanceProperty(instance, objects), 
                        tablixProperties.FX.PropSparklinesChartType.getValue(objects) === sparklineChartType.U.line) {
                            tablixProperties.FX.PropSparklinesStrokeWidth.setInstanceProperty(instance, objects), 
                            tablixProperties.FX.PropSparklinesStrokeWidth.setInstanceValidValues(instance, {
                                numberRange: {
                                    min: 1,
                                    max: 4
                                }
                            }), tablixProperties.FX.PropSparklinesMarkerType.setInstanceProperty(instance, objects);
                            var markerTypeValue = tablixProperties.FX.PropSparklinesMarkerType.getValue(objects);
                            null != markerTypeValue && 0 !== markerTypeValue && (this.tablixProperties.PropSparklinesMarkerColor.setInstanceProperty(instance, objects), 
                            tablixProperties.FX.PropSparklinesMarkerSize.setInstanceProperty(instance, objects), 
                            tablixProperties.FX.PropSparklinesMarkerSize.setInstanceValidValues(instance, {
                                numberRange: {
                                    min: 3,
                                    max: 5
                                }
                            }), tablixProperties.FX.PropSparklinesMarkerShape.setInstanceProperty(instance, objects));
                        }
                        enumeration.pushInstance(instance), enumeration.popContainer();
                    }
                }
            }, TablixPropertyManager.prototype.getTableObjects = function(dataView) {
                var objects = TablixPropertyManager.getMetadataObjects(dataView), generalTextSizePt = tablixProperties.FX.PropGeneralTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? units.B.createFromPt(+generalTextSizePt) : void 0, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropGeneralAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        totals: tablixProperties.FX.PropGeneralTableTotals.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: tablixProperties.FX.PropGridHorizontalTable.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                    rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                    imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropColumnsOutline.getValue(objects),
                    wordWrap: tablixProperties.FX.PropColumnsWordWrap.getValue(objects)
                }, formattingProperties.values = {
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: tablixProperties.FX.PropValuesOutline.getValue(objects),
                    urlIcon: tablixProperties.FX.PropValuesUrlIcon.getValue(objects)
                }, formattingProperties.total = {
                    fontColor: this.tablixProperties.PropTotalFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropTotalBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropTotalOutline.getValue(objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {};
                var columns = this.getTableColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_7 = columns; _i < columns_7.length; _i++) {
                    var column = columns_7[_i], objects_2 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_2),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_2),
                        styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_2),
                        styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_2),
                        styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_2)
                    }, formattingProperties.formatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !1
                    });
                }
                return formattingProperties;
            }, TablixPropertyManager.prototype.getMatrixObjects = function(dataView) {
                var objects = TablixPropertyManager.getMetadataObjects(dataView), generalTextSizePt = tablixProperties.FX.PropGeneralTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? units.B.createFromPt(+generalTextSizePt) : void 0, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropGeneralAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        rowSubtotals: tablixProperties.FX.PropGeneralMatrixRowSubtotals.getValue(objects),
                        columnSubtotals: tablixProperties.FX.PropGeneralMatrixColumnSubtotals.getValue(objects),
                        layout: tablixProperties.FX.PropGeneralMatrixLayout.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: tablixProperties.FX.PropGridHorizontalMatrix.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                    rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                    imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropColumnsOutline.getValue(objects)
                }, formattingProperties.rowHeaders = {
                    fontColor: this.tablixProperties.PropRowsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropRowsBackColor.getValue(objects),
                    outline: tablixProperties.FX.PropRowsOutline.getValue(objects),
                    wordWrap: tablixProperties.FX.PropRowsWordWrap.getValue(objects),
                    repeatRowHeaders: tablixProperties.FX.PropRowsRepeatRowHeaders.getValue(objects)
                }, formattingProperties.values = {
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: tablixProperties.FX.PropValuesOutline.getValue(objects)
                }, formattingProperties.grandTotal = {
                    fontColor: this.tablixProperties.PropGrandTotalFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropGrandTotalBackColor.getValue(objects),
                    applyToHeaders: tablixProperties.FX.PropGrandTotalApplyToHeaders.getValue(objects)
                }, formattingProperties.subtotals = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {};
                var columns = this.getMatrixValuesColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_8 = columns; _i < columns_8.length; _i++) {
                    var column = columns_8[_i], objects_3 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_3),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_3),
                        styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_3),
                        styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_3),
                        styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_3),
                        styleSubTotals: tablixProperties.FX.PropColumnFormattingStyleSubtotals.getValue(objects_3)
                    }, formattingProperties.formatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !1
                    });
                }
                return this.addMatrixHierarchyColumnsFormatters(dataView.matrix.rows, formattingProperties.formatters), 
                this.addMatrixHierarchyColumnsFormatters(dataView.matrix.columns, formattingProperties.formatters), 
                formattingProperties;
            }, TablixPropertyManager.prototype.addMatrixHierarchyColumnsFormatters = function(hierarchy, formatters, tooltipFormatters) {
                if (hierarchy) {
                    debug.fF.assertValue(hierarchy.levels, "getMatrixHierarchyColumnsMetadata - hierarchy.levels");
                    for (var _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) {
                        var level = _a[_i];
                        debug.fF.assertValue(level.sources, "getMatrixHierarchyColumnsMetadata - level.sources");
                        for (var _b = 0, _c = level.sources; _b < _c.length; _b++) {
                            var column = _c[_b];
                            if (!column.isMeasure) {
                                var queryName = column.queryName;
                                formatters[queryName] = new valueFormatter.g({
                                    column,
                                    formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                                    nullsAreBlank: !1
                                }), tooltipFormatters && (tooltipFormatters[queryName] = new valueFormatter.g({
                                    column,
                                    formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                                    nullsAreBlank: !0
                                }));
                            }
                        }
                    }
                }
            }, TablixPropertyManager.prototype.addMatrixHierarchySubtotalLabels = function(hierarchy, settings, defaultLabel, perLevelSettings) {
                if (hierarchy) {
                    debug.fF.assertValue(hierarchy.levels, "getMatrixHierarchyColumnsProperties - hierarchy.levels");
                    for (var _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) {
                        var level = _a[_i];
                        debug.fF.assertValue(level.sources, "getMatrixHierarchyColumnsProperties - level.sources");
                        for (var subtotalLabel = void 0, _b = 0, _c = level.sources; _b < _c.length; _b++) {
                            var source = _c[_b];
                            source.isMeasure || (perLevelSettings && (subtotalLabel = tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(source.objects)), 
                            subtotalLabel || (subtotalLabel = defaultLabel), settings[source.queryName] = {
                                subtotalLabel
                            });
                        }
                    }
                }
            }, TablixPropertyManager.prototype.getPivotTableObjects = function(dataView, localizer, isEnabled, style, featureSwitches, supportsAnnotationHighlights) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                void 0 === supportsAnnotationHighlights && (supportsAnnotationHighlights = !1);
                var objects = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(style), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, generalFontSizePt = tablixProperties.FX.PropGridPivotTableTextSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), generalFontSize = null != generalFontSizePt ? units.B.createFromPt(+generalFontSizePt) : void 0, columnHeaderFontSizePt = tablixProperties.FX.PropColumnsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), columnHeaderFontSize = null != columnHeaderFontSizePt ? units.B.createFromPt(+columnHeaderFontSizePt) : void 0, rowHeaderFontSizePt = tablixProperties.FX.PropRowsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), rowHeaderFontSize = null != rowHeaderFontSizePt ? units.B.createFromPt(+rowHeaderFontSizePt) : void 0, rowHeaderExpandCollapseButtonSizePt = tablixProperties.FX.PropRowsExpandCollapseButtonsSize.getValue(objects), rowHeaderExpandCollapseButtonsSize = null != rowHeaderExpandCollapseButtonSizePt ? units.B.createFromPt(+rowHeaderExpandCollapseButtonSizePt) : void 0, expandCompositeHierarchy = tablixProperties.FX.PropRowsExpandCompositeHierarchy.getValue(objects), valuesFontSizePt = tablixProperties.FX.PropValuesFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), valuesFontSize = null != valuesFontSizePt ? units.B.createFromPt(+valuesFontSizePt) : void 0, grandTotalFontSizePt = tablixProperties.FX.PropGrandTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), columnGrandTotalFontSizePt = (null != grandTotalFontSizePt && units.B.createFromPt(+grandTotalFontSizePt), 
                tablixProperties.FX.PropColumnGrandTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, void 0, [ "Column" ])), columnGrandTotalFontSize = null != columnGrandTotalFontSizePt ? units.B.createFromPt(+columnGrandTotalFontSizePt) : void 0, rowGrandTotalFontSizePt = tablixProperties.FX.PropRowGrandTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, void 0, [ "Row" ]), rowGrandTotalFontSize = null != rowGrandTotalFontSizePt ? units.B.createFromPt(+rowGrandTotalFontSizePt) : void 0, subtotalsFontSizePt = tablixProperties.FX.PropSubTotalsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), rowSubtotalsFontSizePt = (null != subtotalsFontSizePt && units.B.createFromPt(+subtotalsFontSizePt), 
                tablixProperties.FX.PropSubTotalsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, "Row")), rowSubtotalsFontSize = null != rowSubtotalsFontSizePt ? units.B.createFromPt(+rowSubtotalsFontSizePt) : void 0, columnSubtotalsFontSizePt = tablixProperties.FX.PropSubTotalsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, "Column"), columnSubtotalsFontSize = null != columnSubtotalsFontSizePt ? units.B.createFromPt(+columnSubtotalsFontSizePt) : void 0, defaultTotalLabel = localizer(tablixConstants.qT), rowSubtotalsLabel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(objects) || defaultTotalLabel, columnSubtotalsLabel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(objects) || defaultTotalLabel, steppedLayout = tablixProperties.FX.PropRowsSteppedLayout.getValue(objects), layout = tablixProperties.FX.PropGeneralMatrixLayout.getValue(objects) || (steppedLayout ? pivotTableLayout.t.Compact : pivotTableLayout.t.Outline);
                featureSwitches.matrixLayouts && (steppedLayout = layout === pivotTableLayout.t.Compact);
                var blankRows = {
                    showBlankRows: tablixProperties.FX.PropBlankRowsShowBlankRows.getValue(objects),
                    blankRowColor: null !== (_a = this.tablixProperties.PropBlankRowsBlankRowColor.getValue(objects)) && void 0 !== _a ? _a : this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    blankRowTransparency: tablixProperties.FX.PropBlankRowsTransparency.getValue(objects),
                    showBorder: tablixProperties.FX.PropBlankRowsShowBorder.getValue(objects),
                    borderPosition: null !== (_b = tablixProperties.FX.PropBlankRowsBorderPosition.getValue(objects)) && void 0 !== _b ? _b : "Top",
                    borderColor: null !== (_c = this.tablixProperties.PropBlankRowsBorderColor.getValue(objects)) && void 0 !== _c ? _c : style.colorPalette.foregroundNeutralSecondary.value,
                    borderTransparency: tablixProperties.FX.PropBlankRowsBorderTransparency.getValue(objects),
                    borderWidth: tablixProperties.FX.PropBlankRowsBorderWidth.getValue(objects)
                }, rowSubtotals = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, "Row"),
                    fontFamily: tablixProperties.FX.PropSubTotalsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, "Row"),
                    fontSize: rowSubtotalsFontSize,
                    bold: tablixProperties.FX.PropSubTotalsBold.getValue(objects, void 0, void 0, void 0, "Row"),
                    italic: tablixProperties.FX.PropSubTotalsItalic.getValue(objects, void 0, void 0, void 0, "Row"),
                    underline: tablixProperties.FX.PropSubTotalsUnderline.getValue(objects, void 0, void 0, void 0, "Row"),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(objects, void 0, void 0, void 0, "Row"),
                    applyToHeaders: tablixProperties.FX.PropSubTotalsApplyToHeaders.getValue(objects, void 0, void 0, void 0, "Row")
                }, columnSubtotals = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, "Column"),
                    fontFamily: tablixProperties.FX.PropSubTotalsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, "Column"),
                    fontSize: columnSubtotalsFontSize,
                    bold: tablixProperties.FX.PropSubTotalsBold.getValue(objects, void 0, void 0, void 0, "Column"),
                    italic: tablixProperties.FX.PropSubTotalsItalic.getValue(objects, void 0, void 0, void 0, "Column"),
                    underline: tablixProperties.FX.PropSubTotalsUnderline.getValue(objects, void 0, void 0, void 0, "Column"),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(objects, void 0, void 0, void 0, "Column"),
                    applyToHeaders: tablixProperties.FX.PropSubTotalsApplyToHeaders.getValue(objects, void 0, void 0, void 0, "Column")
                }, columnGrandTotal = {
                    fontColor: this.tablixProperties.PropColumnGrandTotalFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, void 0, [ "Column" ]),
                    fontFamily: tablixProperties.FX.PropColumnGrandTotalFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, void 0, [ "Column" ]),
                    fontSize: columnGrandTotalFontSize,
                    bold: tablixProperties.FX.PropColumnGrandTotalBold.getValue(objects),
                    italic: tablixProperties.FX.PropColumnGrandTotalItalic.getValue(objects),
                    underline: tablixProperties.FX.PropColumnGrandTotalUnderline.getValue(objects),
                    backColor: this.tablixProperties.PropColumnGrandTotalBackColor.getValue(objects),
                    applyToHeaders: tablixProperties.FX.PropColumnGrandTotalApplyToHeaders.getValue(objects)
                }, rowGrandTotal = {
                    fontColor: this.tablixProperties.PropRowGrandTotalFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, void 0, [ "Row" ]),
                    fontFamily: tablixProperties.FX.PropRowGrandTotalFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, void 0, [ "Row" ]),
                    fontSize: rowGrandTotalFontSize,
                    bold: tablixProperties.FX.PropRowGrandTotalBold.getValue(objects),
                    italic: tablixProperties.FX.PropRowGrandTotalItalic.getValue(objects),
                    underline: tablixProperties.FX.PropRowGrandTotalUnderline.getValue(objects),
                    backColor: this.tablixProperties.PropRowGrandTotalBackColor.getValue(objects),
                    applyToHeaders: tablixProperties.FX.PropRowGrandTotalApplyToHeaders.getValue(objects)
                }, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.getValue(objects),
                        textSize: generalFontSize,
                        rowSubtotals: tablixProperties.FX.PropSubTotalsPivotTableRowSubtotals.getValue(objects),
                        columnSubtotals: tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotals.getValue(objects),
                        layout
                    },
                    grid: {
                        gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                        gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                        gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                        gridHorizontal: tablixProperties.FX.PropGridHorizontalMatrix.getValue(objects),
                        gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                        gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                        outline: tablixProperties.FX.PropGridOutlineStyle.getValue(objects) || tablixProperties.e9,
                        outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                        outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                        rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                        imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects),
                        imageWidth: tablixProperties.FX.PropGridImageWidth.getValue(objects)
                    },
                    columnHeaders: {
                        fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        fontFamily: tablixProperties.FX.PropColumnsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: columnHeaderFontSize,
                        bold: tablixProperties.FX.PropColumnsBold.getValue(objects),
                        italic: tablixProperties.FX.PropColumnsItalic.getValue(objects),
                        underline: tablixProperties.FX.PropColumnsUnderline.getValue(objects),
                        backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                        outline: this.ensureOutline(tablixProperties.FX.PropColumnsOutlineStyle.getValue(objects), objects, tablixProperties.UR),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects),
                        outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropColumnsOutlineWeight.getValue(objects), objects),
                        urlIcon: tablixProperties.FX.PropColumnsUrlIcon.getValue(objects),
                        wordWrap: tablixProperties.FX.PropColumnsWordWrap.getValue(objects),
                        alignment: tablixProperties.FX.PropColumnsAlignment.getValue(objects),
                        titleAlignment: tablixProperties.FX.PropColumnsAlignmentTitle.getValue(objects)
                    },
                    rowHeaders: {
                        fontColor: this.tablixProperties.PropRowsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        fontFamily: tablixProperties.FX.PropRowsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: rowHeaderFontSize,
                        bold: tablixProperties.FX.PropRowsBold.getValue(objects),
                        italic: tablixProperties.FX.PropRowsItalic.getValue(objects),
                        underline: tablixProperties.FX.PropRowsUnderline.getValue(objects),
                        backColor: this.tablixProperties.PropRowsBackColor.getValue(objects),
                        outline: this.ensureOutline(tablixProperties.FX.PropRowsOutlineStyle.getValue(objects), objects, tablixProperties.Pi),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropRowsOutlineColor.getValue(objects), objects),
                        outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropRowsOutlineWeight.getValue(objects), objects),
                        steppedLayout,
                        steppedLayoutIndentation: tablixProperties.FX.PropRowsSteppedLayoutIndentation.getValue(objects),
                        urlIcon: tablixProperties.FX.PropRowsUrlIcon.getValue(objects),
                        wordWrap: tablixProperties.FX.PropRowsWordWrap.getValue(objects),
                        alignment: tablixProperties.FX.PropRowsAlignment.getValue(objects),
                        showExpandCollapseButtons: !!isEnabled && tablixProperties.FX.PropRowsShowExpandCollapseButtons.getValue(objects),
                        expandCollapseButtonsColor: this.tablixProperties.PropRowsExpandCollapseButtonsColor.getValue(objects),
                        expandCollapseButtonsSize: rowHeaderExpandCollapseButtonsSize,
                        expandCompositeHierarchy,
                        repeatRowHeaders: tablixProperties.FX.PropRowsRepeatRowHeaders.getValue(objects),
                        legacyStyleDisabled: tablixProperties.FX.PropRowsLegacyStyleDisabled.getValue(objects)
                    },
                    values: {
                        fontFamily: tablixProperties.FX.PropValuesFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: valuesFontSize,
                        bold: tablixProperties.FX.PropValuesBold.getValue(objects),
                        italic: tablixProperties.FX.PropValuesItalic.getValue(objects),
                        underline: tablixProperties.FX.PropValuesUnderline.getValue(objects),
                        fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                        fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                        backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                        bandedRowHeaders: tablixProperties.FX.PropValuesBandedRowHeaders.getValue(objects),
                        outline: this.ensureOutline(tablixProperties.FX.PropValuesOutlineStyle.getValue(objects), objects, tablixProperties.IC),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects),
                        outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropValuesOutlineWeight.getValue(objects), objects),
                        urlIcon: tablixProperties.FX.PropValuesUrlIcon.getValue(objects),
                        wordWrap: tablixProperties.FX.PropValuesWordWrap.getValue(objects),
                        valuesOnRow: tablixProperties.FX.PropValuesOnRow.getValue(objects)
                    },
                    columnGrandTotal,
                    rowGrandTotal,
                    subtotals: {
                        rowSubtotalsPosition: layout === pivotTableLayout.t.Tabular ? rowSubtotalPosition.I : tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPosition.getValue(objects),
                        rowSubtotalsLabel,
                        columnSubtotalsLabel
                    },
                    rowSubtotals,
                    columnSubtotals,
                    blankRows,
                    columnFormatting: {},
                    formatters: {},
                    tooltipFormatters: {},
                    sparklines: {}
                }, columns = this.getMatrixValuesColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_9 = columns; _i < columns_9.length; _i++) {
                    var column = columns_9[_i], objects_4 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_4),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_4),
                        alignment: tablixProperties.FX.PropColumnFormattingAlignment.getValue(objects_4),
                        styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_4),
                        styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_4),
                        styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_4),
                        styleSubTotals: tablixProperties.FX.PropColumnFormattingStyleSubtotals.getValue(objects_4),
                        dataBarsSettings: tablixProperties.FX.PropColumnFormattingDataBars.getValue(objects_4),
                        icon: tablixProperties.FX.PropValuesIcon.getValue(objects_4)
                    };
                    var displayUnit = void 0, precision = void 0;
                    if (column.type.numeric && (displayUnit = tablixProperties.FX.PropColumnFormattingDisplayUnits.getValue(objects_4), 
                    precision = tablixProperties.FX.PropColumnFormattingPrecision.getValue(objects_4)), 
                    formattingProperties.formatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !1,
                        displayUnit,
                        precision,
                        trailingZeroes: !0
                    }), formattingProperties.tooltipFormatters[column.queryName] = new valueFormatter.g({
                        column,
                        formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                        nullsAreBlank: !0,
                        displayUnit,
                        precision,
                        trailingZeroes: !0
                    }), null === (_d = column.type.misc) || void 0 === _d ? void 0 : _d.sparkline) {
                        var chartType = tablixProperties.FX.PropSparklinesChartType.getValue(objects_4), formatter = new SparklineTextFormatter(column.displayName, column.type, localizer);
                        formattingProperties.formatters[column.queryName] = formatter, formattingProperties.tooltipFormatters[column.queryName] = formatter, 
                        formattingProperties.sparklines[column.queryName] = {
                            chartType,
                            dataColor: this.tablixProperties.PropSparklinesDataColor.getValue(objects_4).solid.color,
                            strokeWidth: tablixProperties.FX.PropSparklinesStrokeWidth.getValue(objects_4),
                            marker: {
                                show: !0,
                                typeFlags: tablixProperties.FX.PropSparklinesMarkerType.getValue(objects_4),
                                color: this.tablixProperties.PropSparklinesMarkerColor.getValue(objects_4).solid.color,
                                size: tablixProperties.FX.PropSparklinesMarkerSize.getValue(objects_4),
                                shape: tablixProperties.FX.PropSparklinesMarkerShape.getValue(objects_4)
                            }
                        };
                    }
                }
                supportsAnnotationHighlights && (formattingProperties.annotationFormatting = {
                    columnHeaders: {}
                }, _.forEach(null === (_e = dataView.metadata) || void 0 === _e ? void 0 : _e.columns, function(column) {
                    var _a;
                    if (null === (_a = column.objects) || void 0 === _a ? void 0 : _a.annotations) {
                        var annotationHighlight = (0, dataViewObject2.NA)(column.objects, pivotTable_capabilities.t.annotations.highlights);
                        annotationHighlight && (null == annotationHighlight.backColor && !0 !== annotationHighlight.emphasizeText || (formattingProperties.annotationFormatting.columnHeaders[column.queryName] = {
                            backColor: annotationHighlight.backColor,
                            bold: annotationHighlight.emphasizeText
                        }));
                    }
                }), _.isEmpty(formattingProperties.annotationFormatting.columnHeaders) && (formattingProperties.annotationFormatting = void 0));
                var perRowLevelSubtotal = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPerLevel.getValue(objects), perColumnLevelSubtotal = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(objects);
                return this.addMatrixHierarchySubtotalLabels(null === (_f = null == dataView ? void 0 : dataView.matrix) || void 0 === _f ? void 0 : _f.rows, formattingProperties.columnFormatting, rowSubtotalsLabel, perRowLevelSubtotal), 
                this.addMatrixHierarchySubtotalLabels(null === (_g = null == dataView ? void 0 : dataView.matrix) || void 0 === _g ? void 0 : _g.columns, formattingProperties.columnFormatting, columnSubtotalsLabel, perColumnLevelSubtotal), 
                this.addMatrixHierarchyColumnsFormatters(null === (_h = null == dataView ? void 0 : dataView.matrix) || void 0 === _h ? void 0 : _h.rows, formattingProperties.formatters, formattingProperties.tooltipFormatters), 
                this.addMatrixHierarchyColumnsFormatters(null === (_j = null == dataView ? void 0 : dataView.matrix) || void 0 === _j ? void 0 : _j.columns, formattingProperties.formatters, formattingProperties.tooltipFormatters), 
                formattingProperties;
            }, TablixPropertyManager.prototype.getTableExObjects = function(dataView, localizer, style, featureSwitches) {
                var _a, objects = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(style), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, generalTextSizePt = tablixProperties.FX.PropGridPivotTableTextSize.getValue(objects), generalTextSize = null != generalTextSizePt ? units.B.createFromPt(+generalTextSizePt) : void 0, columnHeaderFontSizePt = tablixProperties.FX.PropColumnsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), columnHeaderFontSize = null != columnHeaderFontSizePt ? units.B.createFromPt(+columnHeaderFontSizePt) : void 0, valuesFontSizePt = tablixProperties.FX.PropValuesFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, labelFontSize), valuesFontSize = null != valuesFontSizePt ? units.B.createFromPt(+valuesFontSizePt) : void 0, totalFontSizePt = tablixProperties.FX.PropTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), totalFontSize = null != totalFontSizePt ? units.B.createFromPt(+totalFontSizePt) : void 0, rowWithReferenceText = tablixProperties.FX.ProprowWithReferenceText.getValue(objects), formattingProperties = {
                    general: {
                        autoSizeColumnWidth: tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        totals: tablixProperties.FX.PropTotalTableExTotals.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: tablixProperties.FX.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: tablixProperties.FX.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: tablixProperties.FX.PropGridHorizontalTable.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: tablixProperties.FX.PropGridHorizontalWeight.getValue(objects),
                    outline: tablixProperties.FX.PropGridOutlineStyle.getValue(objects) || tablixProperties.e9,
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: tablixProperties.FX.PropGridOutlineWeight.getValue(objects),
                    rowPadding: tablixProperties.FX.PropGridRowPadding.getValue(objects),
                    imageHeight: tablixProperties.FX.PropGridImageHeight.getValue(objects),
                    imageWidth: tablixProperties.FX.PropGridImageWidth.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                    fontFamily: tablixProperties.FX.PropColumnsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                    fontSize: columnHeaderFontSize,
                    bold: tablixProperties.FX.PropColumnsBold.getValue(objects),
                    italic: tablixProperties.FX.PropColumnsItalic.getValue(objects),
                    underline: tablixProperties.FX.PropColumnsUnderline.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: this.ensureOutline(tablixProperties.FX.PropColumnsOutlineStyle.getValue(objects), objects, tablixProperties.UR),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropColumnsOutlineWeight.getValue(objects), objects),
                    wordWrap: tablixProperties.FX.PropColumnsWordWrap.getValue(objects),
                    alignment: tablixProperties.FX.PropColumnsAlignment.getValue(objects)
                }, formattingProperties.values = {
                    fontFamily: tablixProperties.FX.PropValuesFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                    fontSize: valuesFontSize,
                    bold: tablixProperties.FX.PropValuesBold.getValue(objects),
                    italic: tablixProperties.FX.PropValuesItalic.getValue(objects),
                    underline: tablixProperties.FX.PropValuesUnderline.getValue(objects),
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: this.ensureOutline(tablixProperties.FX.PropValuesOutlineStyle.getValue(objects), objects, tablixProperties.IC),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropValuesOutlineWeight.getValue(objects), objects),
                    urlIcon: tablixProperties.FX.PropValuesUrlIcon.getValue(objects),
                    wordWrap: tablixProperties.FX.PropValuesWordWrap.getValue(objects)
                };
                var totalLabel = tablixProperties.FX.PropTotalTableExTotalLabel.getValue(objects);
                formattingProperties.total = {
                    totalLabel: totalLabel || localizer(tablixConstants.qT),
                    totalPlaceholderLabel: localizer(tablixConstants.bn),
                    isDefaultTotalLabel: !totalLabel,
                    fontFamily: tablixProperties.FX.PropTotalFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family),
                    fontSize: totalFontSize,
                    bold: tablixProperties.FX.PropTotalBold.getValue(objects),
                    italic: tablixProperties.FX.PropTotalItalic.getValue(objects),
                    underline: tablixProperties.FX.PropTotalUnderline.getValue(objects),
                    fontColor: this.tablixProperties.PropTotalFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color),
                    backColor: this.tablixProperties.PropTotalBackColor.getValue(objects),
                    outline: this.ensureOutline(tablixProperties.FX.PropTotalOutlineStyle.getValue(objects), objects, tablixProperties.Sc),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropTotalOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(tablixProperties.FX.PropTotalOutlineWeight.getValue(objects), objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {}, 
                formattingProperties.tooltipFormatters = {}, formattingProperties.sparklines = {};
                var columns = this.getTableColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_10 = columns; _i < columns_10.length; _i++) {
                    var column = columns_10[_i];
                    if (column) {
                        var objects_5 = column.objects, queryName = column.queryName;
                        formattingProperties.columnFormatting[queryName] = {
                            fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_5),
                            backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_5),
                            alignment: tablixProperties.FX.PropColumnFormattingAlignment.getValue(objects_5),
                            styleHeader: tablixProperties.FX.PropColumnFormattingStyleHeader.getValue(objects_5),
                            styleValues: tablixProperties.FX.PropColumnFormattingStyleValues.getValue(objects_5),
                            styleTotal: tablixProperties.FX.PropColumnFormattingStyleTotal.getValue(objects_5),
                            dataBarsSettings: tablixProperties.FX.PropColumnFormattingDataBars.getValue(objects_5),
                            icon: tablixProperties.FX.PropValuesIcon.getValue(objects_5)
                        };
                        var displayUnit = void 0, precision = void 0;
                        if (column.type.numeric && (displayUnit = tablixProperties.FX.PropColumnFormattingDisplayUnits.getValue(objects_5), 
                        precision = tablixProperties.FX.PropColumnFormattingPrecision.getValue(objects_5)), 
                        formattingProperties.formatters[queryName] = new valueFormatter.g({
                            column,
                            formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                            nullsAreBlank: !1,
                            displayUnit,
                            precision,
                            trailingZeroes: !0
                        }), formattingProperties.tooltipFormatters[queryName] = new valueFormatter.g({
                            column,
                            formatStringPropId: tablixProperties.FX.PropColumnFormatString,
                            nullsAreBlank: !0,
                            displayUnit,
                            precision,
                            trailingZeroes: !0
                        }), null === (_a = column.type.misc) || void 0 === _a ? void 0 : _a.sparkline) {
                            var chartType = tablixProperties.FX.PropSparklinesChartType.getValue(objects_5), formatter = new SparklineTextFormatter(column.displayName, column.type, localizer);
                            formattingProperties.formatters[queryName] = formatter, formattingProperties.tooltipFormatters[queryName] = formatter, 
                            formattingProperties.sparklines[queryName] = {
                                chartType,
                                dataColor: this.tablixProperties.PropSparklinesDataColor.getValue(objects_5).solid.color,
                                strokeWidth: tablixProperties.FX.PropSparklinesStrokeWidth.getValue(objects_5),
                                marker: {
                                    show: !0,
                                    typeFlags: tablixProperties.FX.PropSparklinesMarkerType.getValue(objects_5),
                                    color: this.tablixProperties.PropSparklinesMarkerColor.getValue(objects_5).solid.color,
                                    size: tablixProperties.FX.PropSparklinesMarkerSize.getValue(objects_5),
                                    shape: tablixProperties.FX.PropSparklinesMarkerShape.getValue(objects_5)
                                }
                            };
                        }
                    }
                }
                return formattingProperties.rowWithReferenceText = {
                    rowWithReferenceText
                }, formattingProperties;
            }, TablixPropertyManager.prototype.ensureOutline = function(currentValue, objects, defaultValue) {
                var _a;
                return null !== (_a = null != currentValue ? currentValue : tablixProperties.FX.PropGridOutlineStyle.getValue(objects)) && void 0 !== _a ? _a : defaultValue;
            }, TablixPropertyManager.prototype.ensureOutlineWeight = function(currentValue, objects) {
                return null != currentValue ? currentValue : tablixProperties.FX.PropGridOutlineWeight.getValue(objects);
            }, TablixPropertyManager.prototype.outlineOverrideFn = function(objects, propertyId) {
                return !!(0, dataViewObject2.NA)(objects, propertyId);
            }, TablixPropertyManager.prototype.ensureOutlineColor = function(currentValue, objects) {
                return null != currentValue ? currentValue : this.tablixProperties.PropGridOutlineColor.getValue(objects);
            }, TablixPropertyManager.getTextSizeInPx = function(fontSize) {
                return StandaloneUtility1.FP.toString(fontSize.px);
            }, TablixPropertyManager.prototype.shouldShowTableTotalsOption = function(dataView) {
                return !(dataView && dataView.table && !_.isEmpty(dataView.table.columns) && _.some(dataView.table.columns, function(column) {
                    return column.discourageAggregationAcrossGroups;
                }));
            }, TablixPropertyManager.prototype.shouldShowRowSubtotalsOption = function(dataView) {
                return !(!dataView || (0, dataViewMatrixUtils.be)(dataView.matrix) < 1 || this.isDiscourageAggregationAcrossGroups(dataView.matrix.rows.levels));
            }, TablixPropertyManager.prototype.shouldShowColumnSubtotalsOption = function(dataView) {
                if (!dataView || !dataView.matrix || (0, dataViewMatrixUtils.pr)(dataView.matrix.columns) < 1) return !1;
                var levels = dataView.matrix.columns.levels;
                return dataView.matrix.valueSources.length > 1 && (levels = _.initial(levels)), 
                !this.isDiscourageAggregationAcrossGroups(levels);
            }, TablixPropertyManager.prototype.isDiscourageAggregationAcrossGroups = function(levels) {
                var lastLevel = _.last(levels);
                return lastLevel && _.some(lastLevel.sources, function(source) {
                    return source.discourageAggregationAcrossGroups;
                });
            }, TablixPropertyManager.prototype.getTablixTextClassProperties = function(style) {
                return {
                    fontSizeOverrideFn: this.fontSizeOverridePredicate(),
                    fontFamilyOverrideFn: this.fontFamilyOverridePredicate(),
                    fontColorOverrideFn: this.fontColorOverridePredicate(),
                    labelFontProperties: (0, textHelper.m)(style, "label"),
                    boldLabelFontProperties: (0, textHelper.m)(style, "boldLabel")
                };
            }, TablixPropertyManager.prototype.fontSizeOverridePredicate = function() {
                var _this = this;
                return function(objects, propertyId, instanceId) {
                    var currentObject = (0, dataViewObject2.RK)(objects, propertyId.objectName), gridObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectGrid), valuesObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectValues), subTotalsObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectSubTotals), isGridDependentObject = _this.gridDependentObject(propertyId.objectName), gridOverride = (0, 
                    dataViewObject3.N)(gridObject, "textSize", void 0) && !(0, dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), isValuesDependentObject = _this.valuesDependentObject(propertyId.objectName), valuesOverride = (0, 
                    dataViewObject3.N)(valuesObject, "fontSize", void 0) && !(0, dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), isSubTotalsDependentObject = _this.subTotalsDependentObject(propertyId.objectName), subTotalsOverride = _this.getSubTotalsValue(propertyId.objectName, subTotalsObject, "fontSize", void 0) && !(0, 
                    dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), objectOverride = !!(0, 
                    dataViewObject3.N)(currentObject, propertyId.objectName === tablixProperties.FX.ObjectGrid ? "textSize" : "fontSize", void 0, instanceId);
                    return isGridDependentObject && gridOverride || isValuesDependentObject && valuesOverride || isSubTotalsDependentObject && subTotalsOverride || objectOverride;
                };
            }, TablixPropertyManager.prototype.fontFamilyOverridePredicate = function() {
                var _this = this;
                return function(objects, propertyId, instanceId) {
                    var currentObject = (0, dataViewObject2.RK)(objects, propertyId.objectName), valuesObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectValues), subTotalsObject = (0, 
                    dataViewObject2.RK)(objects, tablixProperties.FX.ObjectSubTotals), isValuesDependentObject = _this.valuesDependentObject(propertyId.objectName), valuesOverride = (0, 
                    dataViewObject3.N)(valuesObject, "fontFamily", void 0) && !(0, dataViewObject3.N)(currentObject, propertyId.propertyName, void 0), isSubTotalsDependentObject = _this.subTotalsDependentObject(propertyId.objectName), subTotalsOverride = _this.getSubTotalsValue(propertyId.objectName, subTotalsObject, "fontFamily", void 0) && !(0, 
                    dataViewObject3.N)(currentObject, propertyId.propertyName, void 0, instanceId), objectOverride = !!(0, 
                    dataViewObject3.N)(currentObject, "fontFamily", void 0, instanceId);
                    return isValuesDependentObject && valuesOverride || isSubTotalsDependentObject && subTotalsOverride || objectOverride;
                };
            }, TablixPropertyManager.prototype.fontColorOverridePredicate = function() {
                return function(objects, propertyId, instanceId) {
                    var currentObject = (0, dataViewObject2.RK)(objects, propertyId.objectName), propertyName = propertyId.objectName === tablixProperties.FX.ObjectValues ? "fontColorPrimary" : "fontColor", defaultValue = (0, 
                    dataViewObject3.N)(currentObject, propertyName);
                    return !!(0, dataViewObject3.N)(currentObject, propertyName, defaultValue, instanceId);
                };
            }, TablixPropertyManager.prototype.gridDependentObject = function(objectName) {
                return this.valuesDependentObject(objectName) || objectName === tablixProperties.FX.ObjectRowHeaders || objectName === tablixProperties.FX.ObjectColumnHeaders || objectName === tablixProperties.FX.ObjectValues;
            }, TablixPropertyManager.prototype.valuesDependentObject = function(objectName) {
                return this.subTotalsDependentObject(objectName) || objectName === tablixProperties.FX.ObjectSubTotals;
            }, TablixPropertyManager.prototype.subTotalsDependentObject = function(objectName) {
                return objectName === tablixProperties.FX.ObjectTotal || objectName === tablixProperties.FX.ObjectRowTotal || objectName === tablixProperties.FX.ObjectColumnTotal;
            }, TablixPropertyManager.prototype.getSubTotalsValue = function(objectName, subTotalsObject, propertyName, defaultValue) {
                var instanceId = objectName === tablixProperties.FX.ObjectRowTotal ? "Row" : objectName === tablixProperties.FX.ObjectColumnTotal ? "Column" : void 0;
                return defaultValue = null != defaultValue ? defaultValue : (0, dataViewObject3.N)(subTotalsObject, propertyName), 
                (0, dataViewObject3.N)(subTotalsObject, propertyName, defaultValue, instanceId);
            }, TablixPropertyManager.ImageSizeMin = 8, TablixPropertyManager.ImageSizeMax = 512, 
            TablixPropertyManager;
        }(), SparklineTextFormatter = function() {
            function SparklineTextFormatter(displayName, sparklineType, localizer) {
                this.displayName = displayName, this.sparklineType = sparklineType, this.localizer = localizer;
            }
            return SparklineTextFormatter.prototype.format = function(value, _dataPointObjects) {
                var result = function(displayName, sparklineType, value) {
                    if (value) {
                        var data = value.points;
                        if (data = _.filter(data, function(d) {
                            return null != d.x && null != d.y;
                        }), !_.isEmpty(data)) {
                            var numberOfPoints = _.size(data);
                            if (1 === numberOfPoints) return {
                                key: "Sparkline_Tooltip_SinglePoint_CategoricalSameHighLow",
                                parameters: [ displayName, value.lowY ]
                            };
                            var groupingType = sparklineType.misc.sparkline.groupingType;
                            if (groupingType && (groupingType.numeric || groupingType.dateTime || groupingType.temporal)) {
                                var firstValue_1 = data[0].y, lastValue = data[numberOfPoints - 1].y;
                                if (!_.some(data, function(d) {
                                    return d.y !== firstValue_1;
                                })) return {
                                    key: "Sparkline_Tooltip_ScalarNoChange",
                                    parameters: [ displayName, firstValue_1 ]
                                };
                                if ((0, dataViewRegression.JM)(_.map(data, function(p) {
                                    return p.x;
                                }), _.map(data, function(p) {
                                    return p.y;
                                }), !0).rSquared > .5) {
                                    var value_1, key = "Sparkline_Tooltip_ScalarTrend";
                                    return key += lastValue > firstValue_1 ? "Up" : "Down", 0 !== firstValue_1 ? (value_1 = 100 * (lastValue - firstValue_1) / firstValue_1, 
                                    key += "Percent") : (value_1 = lastValue - firstValue_1, key += "Value"), {
                                        key,
                                        parameters: [ displayName, +Math.abs(value_1).toFixed(2) ]
                                    };
                                }
                                return {
                                    key: "Sparkline_Tooltip_CategoricalDifferentHighLow_ScalarNoTrend",
                                    parameters: [ displayName, value.lowY, value.highY ]
                                };
                            }
                            return value.lowY === value.highY ? {
                                key: "Sparkline_Tooltip_SinglePoint_CategoricalSameHighLow",
                                parameters: [ displayName, value.lowY ]
                            } : {
                                key: "Sparkline_Tooltip_CategoricalDifferentHighLow_ScalarNoTrend",
                                parameters: [ displayName, value.lowY, value.highY ]
                            };
                        }
                    }
                }(this.displayName, this.sparklineType, value);
                if (result) return this.localizer.apply(this, (0, tslib_es6.__spreadArray)([ result.key ], result.parameters, !1));
            }, SparklineTextFormatter;
        }();
    },
    91468: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            CQ: function() {
                return setUnselectedStyle;
            },
            D2: function() {
                return buildImage;
            },
            JT: function() {
                return breakLinesAndMeasureText;
            },
            K2: function() {
                return CellHorizontalPadding;
            },
            Km: function() {
                return buildSortIcon;
            },
            Kq: function() {
                return FontInfoMeasurer;
            },
            MO: function() {
                return TablixIconMargin;
            },
            Nk: function() {
                return applyFontInfo;
            },
            Od: function() {
                return createFontInfo;
            },
            Ps: function() {
                return addIconToCell;
            },
            RD: function() {
                return addHyperlink;
            },
            RP: function() {
                return getUrlIconName;
            },
            TQ: function() {
                return overrideFontInfo;
            },
            VM: function() {
                return cssClassCellInteractive;
            },
            X1: function() {
                return measureText;
            },
            aY: function() {
                return addAlignmentCssClass;
            },
            do: function() {
                return getWordWrappingLines;
            },
            jv: function() {
                return isValidUrl;
            },
            kJ: function() {
                return createKpiDomString;
            },
            n2: function() {
                return cssPivotTableCellClassWrap;
            },
            qk: function() {
                return addMeasureElement;
            },
            rP: function() {
                return replaceEncodedNewLines;
            },
            s$: function() {
                return ExpandCollapseRightMargin;
            },
            tO: function() {
                return getSortIconHeight;
            },
            wV: function() {
                return cssPivotTableCellClassNoWrap;
            },
            x9: function() {
                return getNetWidth;
            }
        });
        var _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(18664), _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(91358), _Visuals_common_units__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(32105), _Visuals_types_textAlignment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(19650), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62458), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32041), _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(48066), _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38078), _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66001), _controls_pivotTable_pivotTablePage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7911), _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(93340), _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71090), unselectedOpacity = "0.3", cssClassCellInteractive = "cell-interactive", cssPivotTableCellClassNoWrap = "pivotTableCellNoWrap", cssPivotTableCellClassWrap = "pivotTableCellWrap", CellHorizontalPadding = 5, ExpandCollapseRightMargin = 5, TablixIconMargin = 5;
        function addMeasureElement(container) {
            return container.insertAdjacentHTML("beforeend", _controls_pivotTable_pivotTablePage__WEBPACK_IMPORTED_MODULE_0__.bG.build({
                content: "",
                classNames: null,
                styleProperties: {
                    position: "absolute",
                    left: "0",
                    top: "0",
                    visibility: "hidden"
                },
                attributes: null
            }, null)), container.lastChild;
        }
        function measureText(text, textProperties) {
            return _.isEmpty(text) ? 0 : _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.measureSvgTextWidth(textProperties, text);
        }
        function breakLinesAndMeasureText(text, textProperties) {
            if (_.isEmpty(text)) return 0;
            var widestWidth = 0;
            return text.split("\n").forEach(function(line) {
                var lineWidth = measureText(line, textProperties);
                lineWidth > widestWidth && (widestWidth = lineWidth);
            }), widestWidth;
        }
        function getWordWrappingLines(text, maxWidth, textProperties) {
            return _.isEmpty(text) ? [ text ] : (text = text.trim(), (0, _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_2__.ql)(text, textProperties, _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.measureSvgTextWidth, maxWidth, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__.uZ, void 0, !0, !0));
        }
        function getNetWidth(width, cellStyle) {
            return Math.max(0, width - (cellStyle.getExtraLeft() + cellStyle.getExtraRight()));
        }
        function setUnselectedStyle(style) {
            style.opacity = unselectedOpacity;
        }
        function createKpiDomString(kpi, kpiValue) {
            return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(kpi, "kpi"), 
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(kpiValue, "kpiValue"), 
            _controls_pivotTable_pivotTablePage__WEBPACK_IMPORTED_MODULE_0__.bG.build({
                content: "",
                classNames: [ (0, _Visuals_common_kpiUtil__WEBPACK_IMPORTED_MODULE_5__.sq)(kpi, kpiValue) || "" ],
                styleProperties: {
                    display: "inline-block",
                    "vertical-align": "bottom",
                    margin: "0"
                },
                attributes: null
            }, null);
        }
        function buildImage(src, height, width, altText) {
            var image = {
                tagName: "img",
                content: "",
                classNames: null,
                styleProperties: {
                    "max-height": "100%",
                    "max-width": "100%"
                },
                attributes: {
                    src,
                    referrerpolicy: "no-referrer"
                },
                contextMenuHandler: function(event) {
                    event.stopPropagation();
                }
            };
            return null != altText && (image.attributes.alt = altText), {
                children: [ image ],
                classNames: [ _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__.Ed ],
                styleProperties: {
                    height: height + "px",
                    width: width + "px"
                },
                attributes: null
            };
        }
        function addIconToCell(iconSettings, iconSize, contentBinding, hostService) {
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(iconSettings, "undefined iconSettings");
            var containerBinding = {
                attributes: {},
                styleProperties: {},
                classNames: [ "flex-container" ]
            }, iconBinding = function(icon, size, hostService) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(icon, "undefined icon");
                var pxSize = size + "px";
                return null === icon.value ? {
                    tagName: "div",
                    styleProperties: {
                        height: pxSize,
                        width: pxSize
                    },
                    attributes: {},
                    classNames: null
                } : (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(icon.value, "Undefined icon value"), 
                icon.value.svgId ? {
                    tagName: "svg",
                    attributes: {
                        height: pxSize,
                        width: pxSize,
                        role: "img",
                        "aria-label": hostService.getLocalizedString(icon.value.descriptionKey)
                    },
                    classNames: null,
                    styleProperties: {},
                    children: [ {
                        tagName: "use",
                        attributes: {
                            href: "#" + icon.value.svgId
                        },
                        classNames: null,
                        styleProperties: {}
                    } ]
                } : null != icon.value.url ? {
                    tagName: "img",
                    classNames: null,
                    styleProperties: {
                        height: pxSize,
                        width: pxSize
                    },
                    attributes: {
                        src: (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_6__.HZ)(icon.value.url),
                        referrerpolicy: "no-referrer"
                    }
                } : void _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertFail("Unrecognized icon value"));
            }(iconSettings, iconSize, hostService);
            switch (contentBinding.classNames.push("stretching-content"), iconSettings.layout) {
              case "IconOnly":
                contentBinding.children = [ iconBinding ], setIconElementClasses(iconSettings, contentBinding), 
                containerBinding.children = [ contentBinding ];
                break;

              case "After":
                setIconElementClasses(iconSettings, iconBinding), containerBinding.children = [ contentBinding, iconBinding ];
                break;

              default:
                setIconElementClasses(iconSettings, iconBinding), containerBinding.children = [ iconBinding, contentBinding ];
            }
            return containerBinding;
        }
        function setIconElementClasses(icon, iconElement) {
            iconElement.classNames || (iconElement.classNames = []);
            var classNames = iconElement.classNames;
            switch (classNames.push("tablixIcon"), icon.layout) {
              case "IconOnly":
                break;

              case "Before":
                classNames.push("before");
                break;

              default:
                classNames.push("after");
            }
            switch (icon.verticalAlignment) {
              case "Bottom":
                classNames.push("bottom");
                break;

              case "Middle":
                classNames.push("middle");
                break;

              default:
                classNames.push("top");
            }
        }
        function getUrlIconName(urlIcon, urlScheme) {
            return urlIcon ? (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_7__.RP)(urlScheme) : null;
        }
        function addHyperlink(contents, url, iconName, _clickHandler, inheritColor, createTooltip) {
            var link = {
                tagName: "a",
                classNames: [],
                styleProperties: {},
                attributes: {
                    href: url,
                    target: "_blank",
                    rel: "noopener noreferrer",
                    role: "link"
                },
                clickHandler: function(event) {
                    event.stopPropagation(), _clickHandler(url, event);
                },
                contextMenuHandler: function(event) {
                    event.stopPropagation();
                }
            };
            return "string" == typeof contents ? link.content = contents : link.children = [ contents ], 
            iconName && (link.content = void 0, link.children = void 0, link.classNames.push(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__.NA, iconName), 
            link.attributes["aria-label"] = url), inheritColor && (link.styleProperties.color = "inherit"), 
            createTooltip && (link.attributes.title = url), link;
        }
        function getSortIconHeight(glyphHeight) {
            return glyphHeight - 1;
        }
        function buildSortIcon(sortDirection, sortIconEnabled, showFuture, defaultSortDirection, bottom, fontSize, hostServices) {
            var classNames, attributes = {};
            return sortIconEnabled && (classNames = sortDirection ? [ "powervisuals-glyph", "sort-icon", getSortIconClass(sortDirection) ] : showFuture ? [ "powervisuals-glyph", "sort-icon", getSortIconClass(defaultSortDirection), "future" ] : [ "sort-icon" ]), 
            !sortDirection && showFuture ? attributes["aria-label"] = hostServices.getLocalizedString("Field_Sorting_Possible") : attributes["aria-hidden"] = "true", 
            {
                content: _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__.jv,
                attributes,
                styleProperties: {
                    "font-size": fontSize,
                    bottom: bottom + "px"
                },
                classNames
            };
        }
        function getSortIconClass(sortDirection) {
            switch (sortDirection) {
              case 1:
                return "caret-up";

              case 2:
                return "caret-down";
            }
        }
        function isValidUrl(metadata, content) {
            return (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_7__.MN)(metadata, content) !== _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_8__.av.NONE;
        }
        function replaceEncodedNewLines(text) {
            return text ? text.replace(/&#10;/g, "<BR />") : text;
        }
        function createFontInfo(fontProperties, measurer) {
            fontProperties.size && 8.52 === fontProperties.size.px && (fontProperties = (0, 
            _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_9__.ED)(fontProperties, {
                size: _Visuals_common_units__WEBPACK_IMPORTED_MODULE_10__.B.createFromPx(8)
            }));
            var fontInfo = {
                measuredFontHeight: null,
                textProperties: (0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_9__.qk)(fontProperties),
                fontProperties
            };
            return measurer.addItem(fontInfo), fontInfo;
        }
        function overrideFontInfo(fontInfo, overrides, measurer) {
            return createFontInfo((0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_9__.ED)(fontInfo.fontProperties, overrides), measurer);
        }
        function applyFontInfo(fontInfo, cellStyle, hasContent) {
            var fontProperties = fontInfo.fontProperties;
            fontProperties.family && (cellStyle.fontFamily = fontProperties.family), fontProperties.size && (cellStyle.fontSize = fontProperties.size), 
            fontProperties.weight && (cellStyle.fontWeight = fontProperties.weight), fontProperties.style && (cellStyle.fontStyle = fontProperties.style), 
            fontProperties.textDecoration && hasContent && (cellStyle.textDecoration = fontProperties.textDecoration);
        }
        function addAlignmentCssClass(alignment, classes, defaultAlignment) {
            if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(classes, "PivotTableBinderUtils.addAlignmentCssClass - classes"), 
            null == alignment || alignment === _Visuals_types_textAlignment__WEBPACK_IMPORTED_MODULE_11__.H.auto) {
                if (!defaultAlignment) return;
                alignment = defaultAlignment;
            }
            switch (alignment) {
              case _Visuals_types_textAlignment__WEBPACK_IMPORTED_MODULE_11__.H.left:
                return void classes.push(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__.z7);

              case _Visuals_types_textAlignment__WEBPACK_IMPORTED_MODULE_11__.H.center:
                return void classes.push(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__.QM);

              case _Visuals_types_textAlignment__WEBPACK_IMPORTED_MODULE_11__.H.right:
                return void classes.push(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_3__.OM);

              default:
                return;
            }
        }
        var FontInfoMeasurer = function() {
            function FontInfoMeasurer() {
                this.items = [];
            }
            return FontInfoMeasurer.prototype.addItem = function(fontInfo) {
                this.items.push(fontInfo);
            }, FontInfoMeasurer.prototype.measureAll = function(measureElement) {
                if (!_.isEmpty(this.items)) {
                    for (var elementStrings = [], _i = 0, _a = this.items; _i < _a.length; _i++) {
                        var binding = {
                            content: "a",
                            classNames: null,
                            styleProperties: (0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_9__.wB)(_a[_i].fontProperties),
                            attributes: null
                        };
                        elementStrings.push(_controls_pivotTable_pivotTablePage__WEBPACK_IMPORTED_MODULE_0__.bG.build(binding, null));
                    }
                    var elementsString = elementStrings.join("");
                    measureElement.insertAdjacentHTML("beforeend", elementsString);
                    for (var element, isFirst = !0, _b = 0, _c = this.items; _b < _c.length; _b++) isFirst ? (isFirst = !1, 
                    element = measureElement.firstChild) : element = element.nextSibling, _c[_b].measuredFontHeight = Math.ceil(element.offsetHeight);
                    measureElement.innerHTML = "";
                }
            }, FontInfoMeasurer;
        }();
    },
    59151: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            P: function() {
                return persistWidths;
            }
        });
        var _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(55007);
        function persistWidths(persistedWidths, hostServices, noUndo) {
            for (var visualObjectInstancesToPersist = {
                remove: [],
                merge: []
            }, _i = 0, persistedWidths_1 = persistedWidths; _i < persistedWidths_1.length; _i++) {
                var persistedWidth = persistedWidths_1[_i], visualObjectInstance = {
                    selector: persistedWidth.selector,
                    objectName: _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.FX.PropColumnWidthValue.objectName,
                    properties: {}
                };
                visualObjectInstance.properties[_Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_0__.FX.PropColumnWidthValue.propertyName] = persistedWidth.value, 
                null == persistedWidth.value ? visualObjectInstancesToPersist.remove.push(visualObjectInstance) : visualObjectInstancesToPersist.merge.push(visualObjectInstance);
            }
            hostServices.persistProperties(visualObjectInstancesToPersist, noUndo);
        }
    },
    93568: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $H: function() {
                return MatrixBinder;
            },
            B0: function() {
                return setRowHeaderStyle;
            },
            aV: function() {
                return setColumnHeaderStyle;
            },
            cP: function() {
                return setBodyCellStyle;
            },
            qW: function() {
                return setCornerCellStyle;
            }
        });
        var _powerbi_legacy_PowerBICommon_utils_colorUtility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1521), _powerbi_legacy_PowerBIVisuals_VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79154), _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(54522), _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(55007), _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40550), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(62458), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(32041), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(64329), _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(48066), _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(66001), _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93340), _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(71090), _matrixHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13375), _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(64067);
        function setRowHeaderStyle(position, item, style, isSteppedLayout, formattingProperties, applyBanding, repeatRowHeaders, isPrimaryBanding) {
            var _a, _b, _c, _d, _e;
            void 0 === applyBanding && (applyBanding = !1), void 0 === repeatRowHeaders && (repeatRowHeaders = !1);
            var propsGrid = formattingProperties.grid, propsHeaders = formattingProperties.rowHeaders, propsValues = formattingProperties.values, propsCols = formattingProperties.columnHeaders, propsGrandTotal = null !== (_a = formattingProperties.grandTotal) && void 0 !== _a ? _a : formattingProperties.rowGrandTotal, propSubtotals = formattingProperties.subtotals || {}, propRowSubtotals = formattingProperties.rowSubtotals || {}, outlineWeight = null !== (_b = propsHeaders.outlineWeight) && void 0 !== _b ? _b : propsGrid.outlineWeight, outlineColor = null !== (_c = propsHeaders.outlineColor) && void 0 !== _c ? _c : propsGrid.outlineColor;
            style.paddings.top = style.paddings.bottom = propsGrid.rowPadding;
            var isGrandTotal = _matrixHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.hc.isNodeGrandTotal(item);
            style.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            (position.row.isFirst && !isSteppedLayout || isSteppedLayout && 0 === item.leafIndex) && (style.borders.top.applyParams((0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsHeaders.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsHeaders.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsValues.outline) && (style.paddings.top += outlineWeight)), 
            style.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isLast && (!isSteppedLayout || isSteppedLayout && position.column.isLast && !formattingProperties.general.rowSubtotals) || isSteppedLayout && position.row.isFirst && item.isSubtotal ? (style.borders.bottom.applyParams((0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsHeaders.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsHeaders.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsValues.outline) && (style.paddings.bottom += outlineWeight)) : style.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            style.borders.left = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            (isSteppedLayout || position.column.isFirst) && (style.borders.left.applyParams((0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsHeaders.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsHeaders.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsCols.outline) && (style.paddings.left += outlineWeight)), 
            style.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om;
            var isVisualLeaf = isSteppedLayout || position.column.isLast;
            if (isVisualLeaf ? style.borders.right.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.BK)(propsHeaders.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline) : style.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            item.isBlankRow && setBlankRowBorder(style, formattingProperties), propsGrandTotal.applyToHeaders && isGrandTotal) style.fontColor = propsGrandTotal.fontColor || propsHeaders.fontColor, 
            style.backColor = propsGrandTotal.backColor || propsHeaders.backColor; else {
                var shouldApplyBanding = applyBanding && (propsValues.fontColorPrimary !== propsValues.fontColorSecondary || propsValues.backColorPrimary !== propsValues.backColorSecondary) && (repeatRowHeaders || isVisualLeaf), subtotalsFontColor = null !== (_d = propRowSubtotals.fontColor) && void 0 !== _d ? _d : propSubtotals.fontColor, shouldApplyBandingFontColor = shouldApplyBanding && !(item.hasSubtotalStyle && subtotalsFontColor) && !(isGrandTotal && propsGrandTotal.fontColor), subtotalsBackColor = null !== (_e = propRowSubtotals.backColor) && void 0 !== _e ? _e : propSubtotals.backColor, shouldApplyBandingBackColor = shouldApplyBanding && !(item.hasSubtotalStyle && subtotalsBackColor) && !(isGrandTotal && propsGrandTotal.backColor), isEven = void 0;
                (shouldApplyBandingFontColor || shouldApplyBandingBackColor) && (isEven = null != isPrimaryBanding ? isPrimaryBanding : isEvenRow(item.position, formattingProperties.general, subtotalsBackColor)), 
                style.fontColor = shouldApplyBandingFontColor ? getBandingFontColor(isEven, propsValues) : propsHeaders.fontColor, 
                style.backColor = item.isBlankRow ? calculateBlankRowColor(item.isBlankRow, formattingProperties) : shouldApplyBandingBackColor ? getBandingBackColor(isEven, propsValues) : propsHeaders.backColor;
            }
        }
        function setColumnHeaderStyle(position, item, style, formattingProperties) {
            var _a, _b, _c, _d, _e, propsGrid = formattingProperties.grid, propsColumnHeaders = formattingProperties.columnHeaders, propsValues = formattingProperties.values, propsGrandTotal = null !== (_a = formattingProperties.grandTotal) && void 0 !== _a ? _a : formattingProperties.columnGrandTotal, outlineWeight = null !== (_b = propsColumnHeaders.outlineWeight) && void 0 !== _b ? _b : propsGrid.outlineWeight, outlineColor = null !== (_c = propsColumnHeaders.outlineColor) && void 0 !== _c ? _c : propsGrid.outlineColor, columnFormatting = formattingProperties.columnFormatting[item.queryName], columnHeaderAnnotationFormatting = null === (_e = null === (_d = formattingProperties.annotationFormatting) || void 0 === _d ? void 0 : _d.columnHeaders) || void 0 === _e ? void 0 : _e[item.queryName], isGrandTotal = _matrixHierarchyNavigator__WEBPACK_IMPORTED_MODULE_0__.hc.isNodeGrandTotal(item);
            style.fontColor = columnFormatting && columnFormatting.styleHeader && columnFormatting.fontColor ? columnFormatting.fontColor : propsGrandTotal.applyToHeaders && isGrandTotal && propsGrandTotal.fontColor || propsColumnHeaders.fontColor, 
            style.backColor = columnHeaderAnnotationFormatting && columnHeaderAnnotationFormatting.backColor ? columnHeaderAnnotationFormatting.backColor : columnFormatting && columnFormatting.styleHeader && columnFormatting.backColor ? columnFormatting.backColor : propsGrandTotal.applyToHeaders && isGrandTotal && propsGrandTotal.backColor || propsColumnHeaders.backColor, 
            columnHeaderAnnotationFormatting && columnHeaderAnnotationFormatting.bold && (style.fontWeight = _powerbi_legacy_PowerBIVisuals_VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_3__.en), 
            style.paddings.top = style.paddings.bottom = propsGrid.rowPadding, style.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isFirst && style.borders.top.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsColumnHeaders.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            style.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isLast ? style.borders.bottom.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsColumnHeaders.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline) : style.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            style.borders.left = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isFirst && !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsColumnHeaders.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsValues.outline) && (style.paddings.left += outlineWeight), 
            style.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isLast ? (style.borders.right.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.BK)(propsColumnHeaders.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.BK)(propsColumnHeaders.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.BK)(propsValues.outline) && (style.paddings.right += outlineWeight)) : style.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline);
        }
        function setBodyCellStyle(position, item, style, steppedLayout, formattingProperties, isPrimaryBanding) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, propsGrid = formattingProperties.grid, propsValues = formattingProperties.values, propsRows = formattingProperties.rowHeaders, propsColumns = formattingProperties.columnHeaders, propRowSubtotals = formattingProperties.rowSubtotals || {}, propColumnSubtotals = formattingProperties.columnSubtotals || {}, propSubtotals = formattingProperties.subtotals || {}, outlineWeight = null !== (_a = propsValues.outlineWeight) && void 0 !== _a ? _a : propsGrid.outlineWeight, outlineColor = null !== (_b = propsValues.outlineColor) && void 0 !== _b ? _b : propsGrid.outlineColor;
            style.paddings.top = style.paddings.bottom = propsGrid.rowPadding, style.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isFirst && (style.borders.top.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsValues.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsValues.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsRows.outline) && (style.paddings.top += outlineWeight)), 
            style.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isLast && (!steppedLayout || steppedLayout && !formattingProperties.general.rowSubtotals) || steppedLayout && item.isRowGrandTotal ? (style.borders.bottom.applyParams((0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsValues.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsValues.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsRows.outline) && (style.paddings.bottom += outlineWeight)) : style.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor), 
            style.borders.left = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isFirst && style.borders.left.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsValues.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            style.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.column.isLast ? (style.borders.right.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.BK)(propsValues.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.BK)(propsValues.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.BK)(propsColumns.outline) && (style.paddings.right += outlineWeight)) : style.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            (null === (_c = item.rowItem) || void 0 === _c ? void 0 : _c.isBlankRow) && setBlankRowBorder(style, formattingProperties);
            var columnBackColor, columnFontColor, subtotalsFontColor, subtotalsBackColor, columnFormatting = item.columnMetadata && formattingProperties.columnFormatting[item.columnMetadata.queryName];
            columnFormatting && (item.isGrandTotal ? (columnFontColor = columnFormatting.styleTotal && columnFormatting.fontColor, 
            columnBackColor = columnFormatting.styleTotal && columnFormatting.backColor) : item.hasSubtotalStyle ? (columnFontColor = columnFormatting.styleSubTotals && columnFormatting.fontColor, 
            columnBackColor = columnFormatting.styleSubTotals && columnFormatting.backColor) : (columnFontColor = columnFormatting.styleValues && columnFormatting.fontColor, 
            columnBackColor = columnFormatting.styleValues && columnFormatting.backColor)), 
            item.hasColumnSubtotalStyle ? (subtotalsFontColor = null !== (_d = propColumnSubtotals.fontColor) && void 0 !== _d ? _d : propSubtotals.fontColor, 
            subtotalsBackColor = null !== (_e = propColumnSubtotals.backColor) && void 0 !== _e ? _e : propSubtotals.backColor) : item.hasRowSubtotalStyle ? (subtotalsFontColor = null !== (_f = propRowSubtotals.fontColor) && void 0 !== _f ? _f : propSubtotals.fontColor, 
            subtotalsBackColor = null !== (_g = propRowSubtotals.backColor) && void 0 !== _g ? _g : propSubtotals.backColor) : (subtotalsFontColor = propSubtotals.fontColor, 
            subtotalsBackColor = propSubtotals.backColor);
            var isPrimary = null != isPrimaryBanding ? isPrimaryBanding : isEvenRow(item.position, formattingProperties.general, null != subtotalsBackColor ? subtotalsBackColor : propRowSubtotals.backColor), bandingFontColor = getBandingFontColor(isPrimary, propsValues), bandingBackColor = getBandingBackColor(isPrimary, propsValues), blankRowColor = calculateBlankRowColor(null === (_h = item.rowItem) || void 0 === _h ? void 0 : _h.isBlankRow, formattingProperties);
            if (item.isGrandTotal) {
                var grandTotalProperties = null !== (_j = formattingProperties.grandTotal) && void 0 !== _j ? _j : item.isColumnGrandTotal ? formattingProperties.columnGrandTotal : formattingProperties.rowGrandTotal;
                style.fontColor = item.fontColor || columnFontColor || grandTotalProperties.fontColor || subtotalsFontColor || bandingFontColor, 
                style.backColor = item.backColor || columnBackColor || grandTotalProperties.backColor || subtotalsBackColor || blankRowColor || bandingBackColor;
            } else item.hasSubtotalStyle ? (style.fontColor = item.fontColor || columnFontColor || subtotalsFontColor || bandingFontColor, 
            style.backColor = item.backColor || columnBackColor || subtotalsBackColor || blankRowColor || bandingBackColor) : (style.fontColor = item.fontColor || columnFontColor || bandingFontColor, 
            style.backColor = item.backColor || columnBackColor || blankRowColor || bandingBackColor);
        }
        function calculateBlankRowColor(isBlankRow, formattingProperties) {
            var _a, _b, blankRowColor;
            if (isBlankRow) {
                var transparency = null === (_a = formattingProperties.blankRows) || void 0 === _a ? void 0 : _a.blankRowTransparency;
                blankRowColor = null === (_b = formattingProperties.blankRows) || void 0 === _b ? void 0 : _b.blankRowColor, 
                null != transparency && (blankRowColor = (0, _powerbi_legacy_PowerBICommon_utils_colorUtility__WEBPACK_IMPORTED_MODULE_4__.Et)(blankRowColor, (0, 
                _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_5__.TD)(transparency)));
            }
            return blankRowColor;
        }
        function setBlankRowBorder(style, formattingProperties) {
            var _a, _b, _c, _d, _e;
            if (null === (_a = null == formattingProperties ? void 0 : formattingProperties.blankRows) || void 0 === _a ? void 0 : _a.showBorder) {
                var borderPosition = null === (_b = null == formattingProperties ? void 0 : formattingProperties.blankRows) || void 0 === _b ? void 0 : _b.borderPosition, borderWidth = null === (_c = null == formattingProperties ? void 0 : formattingProperties.blankRows) || void 0 === _c ? void 0 : _c.borderWidth, borderTransparency = null === (_d = null == formattingProperties ? void 0 : formattingProperties.blankRows) || void 0 === _d ? void 0 : _d.borderTransparency, borderColor = null === (_e = null == formattingProperties ? void 0 : formattingProperties.blankRows) || void 0 === _e ? void 0 : _e.borderColor;
                null != borderColor && null != borderTransparency && (borderColor = (0, _powerbi_legacy_PowerBICommon_utils_colorUtility__WEBPACK_IMPORTED_MODULE_4__.Et)(borderColor, (0, 
                _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_5__.TD)(borderTransparency))), "Top" !== borderPosition && "TopAndBottom" !== borderPosition || (style.borders.top.color = borderColor, 
                style.borders.top.weight = borderWidth), "Bottom" !== borderPosition && "TopAndBottom" !== borderPosition || (style.borders.bottom.color = borderColor, 
                style.borders.bottom.weight = borderWidth);
            }
        }
        function isEvenRow(position, general, backColor) {
            var rowIndex;
            return (rowIndex = general.rowSubtotals && backColor ? position.row.indexInSiblings : position.row.index) < 0 || rowIndex % 2 == 0;
        }
        function getBandingFontColor(isEvenRow, values) {
            return isEvenRow ? values.fontColorPrimary : values.fontColorSecondary;
        }
        function getBandingBackColor(isEvenRow, values) {
            return isEvenRow ? values.backColorPrimary : values.backColorSecondary;
        }
        function setCornerCellStyle(position, style, isSteppedLayout, formattingProperties) {
            var _a, _b, propsGrid = formattingProperties.grid, propsCol = formattingProperties.columnHeaders, propsRow = formattingProperties.rowHeaders, outlineWeight = null !== (_a = propsCol.outlineWeight) && void 0 !== _a ? _a : propsGrid.outlineWeight, outlineColor = null !== (_b = propsCol.outlineColor) && void 0 !== _b ? _b : propsGrid.outlineColor;
            style.fontColor = propsCol.fontColor || propsRow.fontColor, style.backColor = propsCol.backColor || propsRow.backColor, 
            style.paddings.top = style.paddings.bottom = propsGrid.rowPadding, style.borders.top = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isFirst && style.borders.top.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.yo)(propsCol.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            style.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            position.row.isLast ? style.borders.bottom.applyParams((0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.mv)(propsCol.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline) : style.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline), 
            style.borders.left = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            (position.column.isFirst || isSteppedLayout) && (style.borders.left.applyParams((0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsCol.outline), outlineWeight, outlineColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Outline), 
            !(0, _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsCol.outline) && (0, 
            _Visuals_types_outline__WEBPACK_IMPORTED_MODULE_2__.fs)(propsRow.outline) && (style.paddings.left += outlineWeight)), 
            style.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om, 
            style.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Pb.Gridline);
        }
        var MatrixBinder = function() {
            function MatrixBinder(hierarchyNavigator, options) {
                this.hierarchyNavigator = hierarchyNavigator, this.options = options;
            }
            return MatrixBinder.prototype.onDataViewChanged = function(formattingProperties) {
                this.formattingProperties = formattingProperties, this.updateTextHeights();
            }, MatrixBinder.prototype.updateTextHeights = function() {
                this.fontSizeHeader = this.formattingProperties.general.textSize.px, this.textPropsHeader = {
                    fontFamily: _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.F2,
                    fontSize: _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_7__.FP.toString(this.fontSizeHeader)
                }, this.textHeightHeader = Math.ceil(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextHeight(this.textPropsHeader, "a")), 
                this.fontSizeValue = this.formattingProperties.general.textSize.px, this.textPropsValue = {
                    fontFamily: _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.dG,
                    fontSize: _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_7__.FP.toString(this.fontSizeValue)
                }, this.textHeightValue = Math.ceil(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextHeight(this.textPropsValue, "a")), 
                this.fontSizeTotal = this.formattingProperties.general.textSize.px, this.textPropsTotal = {
                    fontFamily: _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.Zk,
                    fontSize: _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_7__.FP.toString(this.fontSizeTotal)
                }, this.textHeightTotal = Math.ceil(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextHeight(this.textPropsTotal, "a"));
            }, MatrixBinder.prototype.onStartRenderingSession = function() {}, MatrixBinder.prototype.onEndRenderingSession = function() {}, 
            MatrixBinder.prototype.bindRowHeader = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.ey)(cell);
                var tablixProp = this.options.tablixProperties, cellStyle = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.qZ;
                this.hierarchyNavigator && this.hierarchyNavigator.isLeaf(item) && ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.Eo), 
                cellStyle.borders.right = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om(_Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_9__.FX.PropGridOutlineWeight.defaultValue, tablixProp.PropGridOutlineColor.getValue(null))), 
                item.isSubtotal && (cellStyle.paddings.left = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.P$), 
                cell.contentWidth = 0, this.bindHeader(item, cell, cell.extension.contentHost, this.hierarchyNavigator.getRowHeaderMetadataColumn(item), cellStyle), 
                cell.contentWidth = Math.ceil(cell.contentWidth), this.options.onBindRowHeader && this.options.onBindRowHeader(item), 
                setRowHeaderStyle(cell.position, item, cellStyle, !1, this.formattingProperties), 
                cell.applyStyle(cellStyle);
            }, MatrixBinder.prototype.unbindRowHeader = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.G9)(cell), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.aP)(cell);
            }, MatrixBinder.prototype.bindColumnHeader = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.ey)(cell);
                var cellStyle = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.qZ, tablixProp = this.options.tablixProperties, overwriteTotalLabel = !1, cellElement = cell.extension.contentHost;
                if ((cellElement = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Ch)(cellElement)).classList.add(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.WA), 
                cell.contentWidth = 0, this.hierarchyNavigator && this.hierarchyNavigator.isLeaf(item)) {
                    if (cellStyle.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om(_Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_9__.FX.PropGridOutlineWeight.defaultValue, tablixProp.PropGridOutlineColor.getValue(null)), 
                    (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.mQ), 
                    (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.s0), 
                    this.options.showSortIcons) {
                        var sortableHeaderColumnMetadata = this.getSortableHeaderColumnMetadata(item);
                        sortableHeaderColumnMetadata && (this.registerColumnHeaderClickHandler(sortableHeaderColumnMetadata, cell), 
                        cellElement = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.D6)(sortableHeaderColumnMetadata.sort, cellElement), 
                        sortableHeaderColumnMetadata.sort && (cell.contentWidth = this.fontSizeHeader + _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.fG));
                    }
                    item.isSubtotal && item.parent && item.parent.children.length > 1 && item.parent.children[0].isSubtotal && (overwriteTotalLabel = !0);
                }
                cell.extension.disableDragResize(), this.bindHeader(item, cell, cellElement, this.hierarchyNavigator.getColumnHeaderMetadataColumn(item), cellStyle, overwriteTotalLabel), 
                cell.contentWidth = Math.ceil(cell.contentWidth), setColumnHeaderStyle(cell.position, item, cellStyle, this.formattingProperties), 
                cell.applyStyle(cellStyle);
            }, MatrixBinder.prototype.unbindColumnHeader = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.G9)(cell), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.aP)(cell), 
                this.getSortableHeaderColumnMetadata(item) && this.unregisterColumnHeaderClickHandler(cell), 
                this.options.showSortIcons && (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Y4)(cell);
            }, MatrixBinder.prototype.bindHeader = function(item, cell, cellElement, metadata, style, overwriteSubtotalLabel) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.f), 
                style.fontFamily = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.F2, 
                style.fontColor = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.lN;
                var imgHeight = this.formattingProperties.grid.imageHeight;
                if (cell.contentHeight = (0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_10__.pt)(metadata) ? imgHeight : item.hasSubtotalStyle ? this.textHeightTotal : this.textHeightValue, 
                item.hasSubtotalStyle && ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.R9), 
                style.fontFamily = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.Zk), 
                item.isSubtotal && !overwriteSubtotalLabel) return (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.DM)(this.options.totalLabel, cellElement, cell.extension.contentHost), 
                void (cell.contentWidth = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextWidth(this.textPropsTotal, this.options.totalLabel));
                var value = this.getHeaderLabel(item);
                if (value) {
                    if ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.MN)(metadata, value) !== _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_11__.av.NONE) return (0, 
                    _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.vU)(value, cellElement), 
                    void (cell.contentWidth += _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextWidth(this.textPropsHeader, value));
                    if ((0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_10__.pt)(metadata) && (0, 
                    _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_11__.gU)(value)) return (0, 
                    _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Hx)(item.valueFormatted, cellElement, imgHeight), 
                    void (cell.contentWidth += imgHeight * _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.wd);
                    (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.DM)(value, cellElement, cell.extension.contentHost), 
                    cell.contentWidth += _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextWidth(item.hasSubtotalStyle ? this.textPropsTotal : this.textPropsHeader, value);
                } else cellElement.innerHTML = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.jv;
            }, MatrixBinder.prototype.applyWordWrapping = function(item, cell) {
                if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__.fF.assertValue(cell, "applyWordWrapping - Undefined cell"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__.fF.assert(function() {
                    return null != cell.containerWidth && -1 !== cell.containerWidth;
                }, "applyWordWrapping - Undefined width"), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__.fF.assert(function() {
                    return null != cell.containerHeight && -1 !== cell.containerHeight;
                }, "applyWordWrapping - Undefined height"), 1 === cell.type) {
                    var metadata = this.hierarchyNavigator.getRowHeaderMetadataColumn(item);
                    if (!(0, _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_10__.cR)(metadata) && !(0, 
                    _Visuals_common_converterHelper__WEBPACK_IMPORTED_MODULE_10__.pt)(metadata)) {
                        var containerElement = cell.extension.contentHost;
                        (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.D4)(containerElement);
                        var text = item.valueFormatted, style = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.qZ;
                        setRowHeaderStyle(item.position, item, style, !1, this.formattingProperties);
                        for (var maxWidth = cell.containerWidth - (style.getExtraRight() + style.getExtraLeft()), maxHeight = cell.containerHeight - (style.getExtraTop() + style.getExtraBottom()), maxLines = Math.floor(maxHeight / this.textHeightHeader), _i = 0, lines_1 = (0, 
                        _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_13__.ql)(text, this.textPropsHeader, _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextWidth, maxWidth, maxLines, null, !0); _i < lines_1.length; _i++) (0, 
                        _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Ch)(containerElement, lines_1[_i]);
                    }
                }
            }, MatrixBinder.prototype.registerColumnHeaderClickHandler = function(columnMetadata, cell) {
                var _this = this;
                this.options.onColumnHeaderClick && cell.extension.registerClickHandler(function(e) {
                    if ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.xl)(e)) {
                        var sortDirection = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.x7)(columnMetadata.sort);
                        _this.options.onColumnHeaderClick(columnMetadata.queryName ? columnMetadata.queryName : columnMetadata.displayName, sortDirection);
                    }
                });
            }, MatrixBinder.prototype.unregisterColumnHeaderClickHandler = function(cell) {
                this.options.onColumnHeaderClick && cell.extension.unregisterClickHandler();
            }, MatrixBinder.prototype.bindBodyCell = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.ey)(cell);
                var cellStyle = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.qZ;
                cell.contentHeight = this.textHeightValue;
                var kpi = item.kpiContent;
                if (kpi) $(cell.extension.contentHost).append(kpi), cell.contentWidth = this.fontSizeValue; else {
                    var textProps = this.textPropsValue;
                    (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.s0), 
                    item.isTotal && ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.R9), 
                    cellStyle.fontFamily = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.Zk, 
                    cell.contentHeight = this.textHeightTotal, textProps = this.textPropsTotal);
                    var textContent = item.textContent;
                    textContent && ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.DM)(textContent, cell.extension.contentHost), 
                    cell.contentWidth = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextWidth(textProps, textContent));
                }
                cell.contentWidth = Math.ceil(cell.contentWidth), setBodyCellStyle(cell.position, item, cellStyle, !1, this.formattingProperties), 
                cell.applyStyle(cellStyle);
            }, MatrixBinder.prototype.unbindBodyCell = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.G9)(cell), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.aP)(cell);
            }, MatrixBinder.prototype.bindCornerCell = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.ey)(cell);
                var tablixProp = this.options.tablixProperties, cellStyle = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.qZ;
                cellStyle.fontFamily = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.F2, 
                cellStyle.fontColor = _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.lN, 
                cell.contentHeight = this.textHeightHeader, cell.contentWidth = 0;
                var cellElement = cell.extension.contentHost;
                if ((cellElement = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Ch)(cellElement)).classList.add(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.WA), 
                item.isColumnHeaderLeaf && ((0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.mQ), 
                cellStyle.borders.bottom = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.om(_Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_9__.FX.PropGridOutlineWeight.defaultValue, tablixProp.PropGridOutlineColor.getValue(null)), 
                this.options.showSortIcons)) {
                    var cornerHeaderMetadata = this.getSortableCornerColumnMetadata(item);
                    cornerHeaderMetadata && (this.registerColumnHeaderClickHandler(cornerHeaderMetadata, cell), 
                    cellElement = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.D6)(cornerHeaderMetadata ? cornerHeaderMetadata.sort : void 0, cellElement), 
                    cornerHeaderMetadata.sort && (cell.contentWidth = this.fontSizeHeader + _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.fG));
                }
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.DM)(item.displayName, cellElement, cell.extension.contentHost), 
                cell.contentWidth += _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_8__.b.measureSvgTextWidth(this.textPropsHeader, item.displayName), 
                cell.contentWidth = Math.ceil(cell.contentWidth), item.isRowHeaderLeaf && (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.Eo), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.R5)(cell, _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_6__.f), 
                setCornerCellStyle(cell.position, cellStyle, !1, this.formattingProperties), cell.applyStyle(cellStyle), 
                cell.extension.disableDragResize();
            }, MatrixBinder.prototype.unbindCornerCell = function(item, cell) {
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.G9)(cell), 
                (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.aP)(cell), 
                this.options.showSortIcons && (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_1__.Y4)(cell), 
                item.isColumnHeaderLeaf && this.unregisterColumnHeaderClickHandler(cell);
            }, MatrixBinder.prototype.bindEmptySpaceHeaderCell = function(cell) {}, MatrixBinder.prototype.unbindEmptySpaceHeaderCell = function(cell) {}, 
            MatrixBinder.prototype.bindEmptySpaceFooterCell = function(cell) {}, MatrixBinder.prototype.unbindEmptySpaceFooterCell = function(cell) {}, 
            MatrixBinder.prototype.getHeaderLabel = function(item) {
                return item.valueFormatted;
            }, MatrixBinder.prototype.getCellContent = function(item) {
                return item.textContent || "";
            }, MatrixBinder.prototype.hasRowGroups = function() {
                var rows = this.hierarchyNavigator.getRowHierarchy();
                return !(!rows || !rows.levels || 0 === rows.levels.length);
            }, MatrixBinder.prototype.getSortableCornerColumnMetadata = function(item) {
                if (item.isColumnHeaderLeaf) return item.metadata;
            }, MatrixBinder.prototype.getSortableHeaderColumnMetadata = function(item) {
                var rows = this.hierarchyNavigator.getRowHierarchy();
                if (!rows || !rows.levels || 0 === rows.levels.length) return null;
                var valueSources = this.hierarchyNavigator.getValueSources(), isMultiMeasure = valueSources && valueSources.length > 1, columns = this.hierarchyNavigator.getColumnHierarchy(), columnGroupCount = columns ? columns.levels.length : 0;
                isMultiMeasure ? columnGroupCount-- : 1 === columnGroupCount && columns.levels[0] && columns.levels[0].sources && columns.levels[0].sources[0] && columns.levels[0].sources[0].roles && columns.levels[0].sources[0].roles.Values && (columnGroupCount = 0);
                var valueIndex = -1;
                return 0 === columnGroupCount ? valueIndex = item.levelSourceIndex : item.isSubtotal && (isMultiMeasure ? item.parent && 0 === item.parent.level && (valueIndex = item.levelSourceIndex) : 0 === item.level && (valueIndex = item.levelSourceIndex)), 
                -1 !== valueIndex ? valueSources[valueIndex = valueIndex || 0] : null;
            }, MatrixBinder;
        }();
    },
    13375: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            aD: function() {
                return createMatrixHierarchyNavigator;
            },
            hc: function() {
                return MatrixHierarchyNavigator;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62458), _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39681), _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38078), _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(93340), _pivotTableSparklineUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29043), _Visuals_types_pivotTableLayout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(66842), _Visuals_types_rowSubtotalPosition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40845), MatrixVisualBodyItem = function(_super) {
            function MatrixVisualBodyItem(dataPoint, objects, rowItem, columnItem, columnMetadata, hostServices, formatter, tooltipFormatter) {
                var _a, _b, rowGreatestParent, columnGreatestParent, _this = this;
                if (rowItem) for (rowGreatestParent = rowItem; rowGreatestParent.parent; ) rowGreatestParent = rowGreatestParent.parent;
                if (columnItem) for (columnGreatestParent = columnItem; columnGreatestParent.parent; ) columnGreatestParent = columnGreatestParent.parent;
                var isColumnGrandTotal = columnGreatestParent && !!columnGreatestParent.isSubtotal, isColumnSubtotal = !isColumnGrandTotal && columnItem && !!columnItem.isSubtotal, isRowGrandTotal = rowGreatestParent && !!rowGreatestParent.isSubtotal, isRowSubtotal = !isRowGrandTotal && rowItem && !!rowItem.isSubtotal, isBlankRow = rowItem.isBlankRow;
                return _.isString(dataPoint) && (null === (_b = null === (_a = null == columnMetadata ? void 0 : columnMetadata.type) || void 0 === _a ? void 0 : _a.misc) || void 0 === _b ? void 0 : _b.sparkline) && (dataPoint = (0, 
                _pivotTableSparklineUtils__WEBPACK_IMPORTED_MODULE_1__.th)(dataPoint, hostServices)), 
                (_this = _super.call(this, dataPoint, objects, isRowSubtotal, isColumnSubtotal, isRowGrandTotal, isColumnGrandTotal, isBlankRow, columnMetadata, formatter, tooltipFormatter, 0) || this).rowItem = rowItem, 
                _this.columnItem = columnItem, _this.hasRowSubtotalStyle = rowItem && rowItem.hasSubtotalStyle, 
                _this.hasColumnSubtotalStyle = columnItem && columnItem.hasSubtotalStyle, _this.hasSubtotalStyle = _this.hasRowSubtotalStyle || _this.hasColumnSubtotalStyle, 
                _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MatrixVisualBodyItem, _super), 
            Object.defineProperty(MatrixVisualBodyItem.prototype, "isMeasure", {
                get: function() {
                    return !0;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(MatrixVisualBodyItem.prototype, "isValidUrl", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(MatrixVisualBodyItem.prototype, "isValidImage", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), MatrixVisualBodyItem;
        }(_controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_2__.jG);
        function createMatrixHierarchyNavigator(matrix, isDataComplete, formatters, compositeGroupSeparator, tablixProperties, visualHostServices, update, tooltipFormatters, subtotalByColumn, expandCompositeHierarchy) {
            void 0 === update && (update = !0);
            var hierarchyNavigator = new MatrixHierarchyNavigator(compositeGroupSeparator, tablixProperties, visualHostServices, expandCompositeHierarchy, !0);
            return update && hierarchyNavigator.update(matrix, !1, !1, !1, isDataComplete, !0, formatters, tooltipFormatters, subtotalByColumn, void 0, void 0, !1), 
            hierarchyNavigator;
        }
        var MatrixHierarchyNavigator = function() {
            function MatrixHierarchyNavigator(compositeGroupSeparator, tablixProperties, hostServices, expandCompositeHierarchy, modernRowHeaderStyle) {
                this.tablixProperties = tablixProperties, this.hostServices = hostServices, this.expandCompositeHierarchy = expandCompositeHierarchy, 
                this.modernRowHeaderStyle = modernRowHeaderStyle, this.compositeGroupSeparator = compositeGroupSeparator;
            }
            return MatrixHierarchyNavigator.prototype.getColumnHierarchyDepth = function() {
                return Math.max(this.columnHierarchy.levels.length, 1);
            }, MatrixHierarchyNavigator.prototype.getRowHierarchyDepth = function() {
                return Math.max(this.rowHierarchy.levels.length, 1);
            }, MatrixHierarchyNavigator.prototype.getLeafCount = function(hierarchy) {
                var matrixHierarchy = this.getMatrixHierarchy(hierarchy);
                return matrixHierarchy ? matrixHierarchy.leafNodes.length : 0;
            }, MatrixHierarchyNavigator.prototype.getLeafAt = function(hierarchy, index) {
                var matrixHierarchy = this.getMatrixHierarchy(hierarchy);
                return matrixHierarchy ? matrixHierarchy.leafNodes[index] : null;
            }, MatrixHierarchyNavigator.prototype.getLeafIndex = function(item) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(item, "item"), 
                item.leafIndex;
            }, MatrixHierarchyNavigator.prototype.getParent = function(item) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(item, "item"), 
                0 === item.level ? null : item.parent;
            }, MatrixHierarchyNavigator.prototype.getIndex = function(item) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(item, "item"), 
                item ? item.index : -1;
            }, MatrixHierarchyNavigator.prototype.isLeaf = function(item) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(item, "item"), 
                !item.children || 0 === item.children.length;
            }, MatrixHierarchyNavigator.prototype.isRowHierarchyLeaf = function(item) {
                return !0;
            }, MatrixHierarchyNavigator.prototype.isColumnHierarchyLeaf = function(item) {
                return !1;
            }, MatrixHierarchyNavigator.prototype.isFirstItem = function(item, items) {
                return item === _.head(items);
            }, MatrixHierarchyNavigator.prototype.areAllParentsFirst = function(item, items) {
                if (!item) return !1;
                var parent = this.getParent(item);
                return parent ? this.isFirstItem(item, item.siblings) && this.areAllParentsFirst(parent, parent.siblings) : this.isFirstItem(item, item.siblings);
            }, MatrixHierarchyNavigator.prototype.isLastItem = function(item, items) {
                if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(item, "item"), 
                item !== _.last(items)) return !1;
                if (!this.isItemRow(item) || this.isDataComplete) return !0;
                for (var parent = item.parent; parent; ) {
                    if (parent !== _.last(parent.siblings)) return !0;
                    parent = parent.parent;
                }
                return !1;
            }, MatrixHierarchyNavigator.prototype.isItemRow = function(item) {
                if (!item) return !1;
                for (var firstLevelParent = item; firstLevelParent.parent; ) firstLevelParent = firstLevelParent.parent;
                return firstLevelParent.siblings === this.rowHierarchy.root.children;
            }, MatrixHierarchyNavigator.prototype.areAllParentsLast = function(item, items) {
                if (!item) return !1;
                var parent = this.getParent(item);
                return parent ? this.isLastItem(item, item.siblings) && this.areAllParentsLast(parent, parent.siblings) : this.isLastItem(item, item.siblings);
            }, MatrixHierarchyNavigator.prototype.getChildren = function(item) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(item, "item"), 
                item.children;
            }, MatrixHierarchyNavigator.prototype.getChildrenLevelDifference = function(item) {
                var diff = 1 / 0, children = this.getChildren(item);
                if (!_.isEmpty(children)) for (var i = 0, ilen = children.length; i < ilen; i++) diff = Math.min(diff, children[i].level - item.level);
                return diff;
            }, MatrixHierarchyNavigator.prototype.getCount = function(items) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(items, "items"), 
                items.length;
            }, MatrixHierarchyNavigator.prototype.getAt = function(items, index) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(items, "items"), 
                items[index];
            }, MatrixHierarchyNavigator.prototype.getLevel = function(item) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(item, "item"), 
                item.level;
            }, MatrixHierarchyNavigator.prototype.getRowLeafIndex = function(rowItem) {
                return this.isSteppedLayout && rowItem.isSubtotal ? rowItem.parent ? !this.valuesOnRow && this.areRowSubtotalsBefore ? rowItem.parent.leafIndex : rowItem.leafIndex : this.valuesOnRow ? rowItem.levelSourceIndex : -1 : rowItem.leafIndex;
            }, MatrixHierarchyNavigator.prototype.getIntersection = function(rowItem, columnItem) {
                var node;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(rowItem, "rowItem"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(columnItem, "columnItem");
                var bodyCell, colIndex = columnItem.leafIndex;
                if (node = rowItem.values ? rowItem.values[columnItem.leafIndex] : void 0) {
                    var valueSource = this.valueSources[node.valueSourceIndex || 0], queryName = valueSource.queryName;
                    bodyCell = new MatrixVisualBodyItem(node.value, node.objects, rowItem, columnItem, valueSource, this.hostServices, this.formatters[queryName], this.tooltipFormatters[queryName]);
                } else bodyCell = new MatrixVisualBodyItem(void 0, void 0, rowItem, columnItem, void 0, this.hostServices, void 0, void 0);
                var rowIndex = this.getRowLeafIndex(rowItem);
                return bodyCell.position.row.index = rowIndex, bodyCell.position.row.indexInSiblings = rowItem.siblings.indexOf(rowItem), 
                bodyCell.position.row.isFirst = 0 === rowIndex, bodyCell.position.row.isLast = this.isDataComplete && rowIndex === this.rowHierarchy.leafNodes.length - 1, 
                bodyCell.position.column.index = colIndex, bodyCell.position.column.indexInSiblings = columnItem.siblings.indexOf(columnItem), 
                bodyCell.position.column.isFirst = 0 === colIndex, bodyCell.position.column.isLast = colIndex === this.columnHierarchy.leafNodes.length - 1, 
                node && node.objects && (bodyCell.backColor = (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_4__.HZ)(this.tablixProperties.PropValuesBackColor.getValue(node.objects)), 
                bodyCell.fontColor = (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_4__.HZ)(this.tablixProperties.PropValuesFontColor.getValue(node.objects))), 
                bodyCell;
            }, MatrixHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assert(function() {
                    return rowLevel >= 0;
                }, "rowLevel"), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assert(function() {
                    return columnLevel >= 0;
                }, "columnLevel");
                var levelSource, columnLevels = this.columnHierarchy.levels, rowLevels = this.rowHierarchy.levels;
                if ((columnLevel === columnLevels.length - 1 || 0 === columnLevels.length) && (levelSource = rowLevels[rowLevel])) {
                    var isRowHeaderLeaf = rowLevel === rowLevels.length - 1, isMeasureCorner = this.valuesOnRow && isRowHeaderLeaf;
                    return {
                        metadata: 1 === levelSource.sources.length || levelSource.sources.length > 1 && isMeasureCorner ? levelSource.sources[0] : null,
                        displayName: isMeasureCorner ? "" : _.map(levelSource.sources, function(source) {
                            return source.displayName;
                        }).join(this.compositeGroupSeparator),
                        isColumnHeaderLeaf: !0,
                        isRowHeaderLeaf,
                        position: this.calculateCornerCellPosition(rowLevel, columnLevel),
                        rowLevel,
                        columnLevel
                    };
                }
                if (rowLevel === rowLevels.length - 1 && (levelSource = columnLevels[columnLevel])) {
                    var notMeasureSources = levelSource.sources.filter(function(source) {
                        return !source.isMeasure;
                    });
                    return {
                        metadata: 1 === levelSource.sources.length ? levelSource.sources[0] : null,
                        displayName: _.map(notMeasureSources, function(source) {
                            return source.displayName;
                        }).join(this.compositeGroupSeparator),
                        isColumnHeaderLeaf: !1,
                        isRowHeaderLeaf: !0,
                        position: this.calculateCornerCellPosition(rowLevel, columnLevel),
                        rowLevel,
                        columnLevel
                    };
                }
                return {
                    metadata: null,
                    displayName: "",
                    isColumnHeaderLeaf: !1,
                    isRowHeaderLeaf: !1,
                    position: this.calculateCornerCellPosition(rowLevel, columnLevel),
                    rowLevel,
                    columnLevel
                };
            }, MatrixHierarchyNavigator.prototype.calculateCornerCellPosition = function(rowLevel, columnLevel) {
                var position = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_2__.ri, rowIdx = columnLevel;
                position.row.index = position.row.indexInSiblings = rowIdx, position.row.isFirst = 0 === rowIdx;
                var columnHierarchyDepth = this.getColumnHierarchyDepth();
                position.row.isLast = columnLevel === columnHierarchyDepth - 1;
                var colIdx = rowLevel;
                position.column.index = position.column.indexInSiblings = colIdx, position.column.isFirst = 0 === colIdx;
                var rowHierarchyDepth = this.getRowHierarchyDepth();
                return position.column.isLast = colIdx === rowHierarchyDepth - 1, position;
            }, MatrixHierarchyNavigator.prototype.headerItemEquals = function(item1, item2) {
                return !(!item1 || !item2) && item1 === item2;
            }, MatrixHierarchyNavigator.prototype.bodyCellItemEquals = function(item1, item2) {
                return item1.position.isMatch(item2.position);
            }, MatrixHierarchyNavigator.prototype.cornerCellItemEquals = function(item1, item2) {
                return !(!item1 || !item2) && item1.displayName === item2.displayName && item1.isColumnHeaderLeaf === item2.isColumnHeaderLeaf && item1.isRowHeaderLeaf === item2.isRowHeaderLeaf && item1.metadata === item2.metadata;
            }, MatrixHierarchyNavigator.prototype.getColumnHierarchy = function() {
                return this.columnHierarchy;
            }, MatrixHierarchyNavigator.prototype.getRowHierarchy = function() {
                return this.rowHierarchy;
            }, MatrixHierarchyNavigator.prototype.getValueSources = function() {
                return this.valueSources;
            }, MatrixHierarchyNavigator.prototype.valuesOnRowApplied = function() {
                return this.valuesOnRow;
            }, MatrixHierarchyNavigator.prototype.hasMultipleValueSources = function() {
                return this.multipleValueSources;
            }, MatrixHierarchyNavigator.prototype.update = function(matrix, isStepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, updateColumns, formatters, tooltipFormatters, subtotalByColumn, rowSubtotalPosition, layout, blankRows) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(matrix, "matrix"), 
                this.isSteppedLayout = isStepped, this.valuesOnRow = valuesOnRow, this.areRowSubtotalsBefore = areRowSubtotalsBefore, 
                this.isDataComplete = isDataComplete, this.valueSources = matrix.valueSources, this.formatters = formatters, 
                this.tooltipFormatters = tooltipFormatters || {}, this.subtotalByColumn = subtotalByColumn || {}, 
                this.multipleValueSources = matrix.valueSources.length > 1, this.rowHierarchy = this.wrapHierarchy(matrix.rows, this.expandCompositeHierarchy, this.modernRowHeaderStyle, blankRows, rowSubtotalPosition, layout), 
                (updateColumns = updateColumns || this.valuesOnRow) && (this.columnHierarchy = this.wrapHierarchy(matrix.columns)), 
                this.valuesOnRow && this.pivotValues(), this.updateHierarchy(this.rowHierarchy, this.isSteppedLayout, layout, this.areRowSubtotalsBefore, function(item, items) {
                    return _this.calculateRowHeaderPosition(item, items);
                }), updateColumns && (this.updateHierarchy(this.columnHierarchy, !1, layout, !1, function(item, items) {
                    return _this.calculateColumnHeaderPosition(item, items);
                }), this.updateStaticColumnHeaders(this.columnHierarchy));
            }, MatrixHierarchyNavigator.prototype.pivotValues = function() {
                _.isEmpty(this.columnHierarchy.root.children) || this.removeValueNodesFromColumnHierarchy(this.columnHierarchy.root.children), 
                _.isEmpty(this.rowHierarchy.root.children) || this.addValueNodesToRowHierarchy(this.rowHierarchy.root.children, this.rowHierarchy.levels.length > 0), 
                this.moveValueLevelFromColumnToRowHierarchy();
            }, MatrixHierarchyNavigator.prototype.removeValueNodesFromColumnHierarchy = function(nodes) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertValue(nodes, "nodes");
                for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                    var node = nodes_1[_i];
                    if (!node.parent && this.isLeaf(node)) return nodes.length = 0, void nodes.push({
                        level: 0
                    });
                    this.isLeaf(node.children[0]) ? node.children = void 0 : this.removeValueNodesFromColumnHierarchy(node.children);
                }
            }, MatrixHierarchyNavigator.prototype.addValueNodesToRowHierarchy = function(rowHeaders, hasRowGrouping) {
                for (var rowHierarchyDepth = this.getRowHierarchyDepth(), valueSourceCount = this.valueSources.length, nodesCount = rowHeaders.length, nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) {
                    var rowHeader = rowHeaders[nodeIndex];
                    if (this.isLeaf(rowHeader)) {
                        var container = void 0, insertIndex = void 0, level = void 0;
                        if (this.isSteppedLayout && rowHeader.isSubtotal || !hasRowGrouping ? (rowHeaders.splice(nodeIndex, 1), 
                        container = rowHeaders, insertIndex = nodeIndex, level = rowHeader.level, nodesCount = nodesCount - 1 + valueSourceCount, 
                        nodeIndex = nodeIndex - 1 + valueSourceCount) : (rowHeader.children = [], container = rowHeader.children, 
                        insertIndex = 0, level = rowHierarchyDepth), !rowHeader.isBlankRow) for (var i = 0; i < valueSourceCount; i++) {
                            var valueNode = this.createRowValueNode(i, valueSourceCount, rowHeader, level);
                            container.splice(insertIndex++, 0, valueNode);
                        }
                        rowHeader.values = null;
                    } else this.addValueNodesToRowHierarchy(rowHeader.children, hasRowGrouping);
                }
            }, MatrixHierarchyNavigator.prototype.moveValueLevelFromColumnToRowHierarchy = function() {
                this.rowHierarchy.levels.push(this.columnHierarchy.levels.pop());
            }, MatrixHierarchyNavigator.prototype.createRowValueNode = function(valueSourceIndex, valueSourceCount, rowHeader, level) {
                var valueNode = {
                    level,
                    levelSourceIndex: valueSourceIndex,
                    isSubtotal: rowHeader.isSubtotal,
                    hasSubtotalStyle: !!rowHeader.hasSubtotalStyle,
                    values: {}
                }, originalValuesIndex = 0, newValuesIndex = 0;
                for (var _1 in rowHeader.values) originalValuesIndex % valueSourceCount === valueSourceIndex && (valueNode.values[newValuesIndex++] = rowHeader.values[originalValuesIndex]), 
                originalValuesIndex++;
                return valueNode;
            }, MatrixHierarchyNavigator.prototype.createBlankRowValueNode = function(sibling) {
                return {
                    level: 0,
                    isSubtotal: !1,
                    hasSubtotalStyle: !1,
                    isBlankRow: !0,
                    value: "",
                    values: _.map(this.findValues(sibling), function(value) {
                        return value.valueSourceIndex;
                    }).map(function(valueSourceIndex) {
                        return {
                            value: "",
                            valueSourceIndex,
                            isBlankRow: !0
                        };
                    }),
                    levelValues: [ {
                        levelSourceIndex: 0,
                        value: ""
                    } ]
                };
            }, MatrixHierarchyNavigator.prototype.needsBlankRow = function(node, rowSubtotalPosition, layout) {
                return !node.isSubtotal || rowSubtotalPosition === _Visuals_types_rowSubtotalPosition__WEBPACK_IMPORTED_MODULE_5__.we && layout !== _Visuals_types_pivotTableLayout__WEBPACK_IMPORTED_MODULE_6__.t.Compact;
            }, MatrixHierarchyNavigator.prototype.findValues = function(node) {
                if (node.values) return node.values;
                var firstNode = _.first(node.children);
                return firstNode ? this.findValues(firstNode) : void 0;
            }, MatrixHierarchyNavigator.prototype.wrapHierarchy = function(hierarchy, expandComposite, modernHeaderStyle, blankRows, rowSubtotalPosition, layout) {
                var newHierarchy, _this = this;
                return newHierarchy = {
                    levels: this.wrapLevels(hierarchy.levels, expandComposite),
                    root: {
                        children: this.wrapNodes(hierarchy.root.children, hierarchy, expandComposite, modernHeaderStyle)
                    }
                }, blankRows && newHierarchy.root.children.length > 0 && (newHierarchy.root.children = _.flatMap(newHierarchy.root.children, function(child) {
                    return _this.needsBlankRow(child, rowSubtotalPosition, layout) ? [ child, _this.createBlankRowValueNode(child) ] : [ child ];
                })), newHierarchy.leafNodes = [], newHierarchy;
            }, MatrixHierarchyNavigator.prototype.wrapLevels = function(levels, expandComposite) {
                if (levels) {
                    for (var newLevels = [], _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {
                        var level = levels_1[_i], matrixLevel = (0, _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_7__.ED)(level);
                        if (newLevels.push(matrixLevel), level.sources.length > 1 && expandComposite) {
                            for (var i = 1; i < level.sources.length; i++) newLevels.push({
                                sources: [ level.sources[i] ]
                            });
                            matrixLevel.sources.splice(1, matrixLevel.sources.length - 1);
                        }
                    }
                    return newLevels;
                }
            }, MatrixHierarchyNavigator.prototype.wrapNodes = function(nodes, hierarchy, expandComposite, modernHeaderStyle) {
                if (nodes) {
                    for (var newNodes = [], _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {
                        var node = nodes_2[_i], newNode = (0, _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_7__.ED)(node);
                        if (node.isCollapsed && !_.isEmpty(node.children)) {
                            var subTotalChild = _.find(node.children, function(child) {
                                return child.isSubtotal;
                            });
                            subTotalChild && (newNode.values = subTotalChild.values), newNode.children = null, 
                            newNode.hasSubtotalStyle = !0;
                        } else {
                            if (newNode.isSubtotal) {
                                var nodeLevel = hierarchy.levels[newNode.level || 0];
                                if (1 === nodeLevel.sources.length && !1 === this.subtotalByColumn[nodeLevel.sources[0].queryName]) continue;
                            }
                            newNode.hasSubtotalStyle = !!node.isSubtotal || modernHeaderStyle && !_.isEmpty(node.children), 
                            newNode.children = this.wrapNodes(node.children, hierarchy, expandComposite, modernHeaderStyle);
                        }
                        if (!_.isEmpty(newNode.levelValues) && newNode.levelValues.length > 1 && expandComposite) {
                            for (var children = newNode.children, previousNode = newNode, i = 1; i < newNode.levelValues.length; i++) {
                                var nextNode = (0, _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_7__.ED)(newNode), levelValue = newNode.levelValues[i];
                                levelValue.levelSourceIndex = 0, nextNode.levelValues = [ levelValue ], nextNode.level += i, 
                                nextNode.isCollapsed = !0, nextNode.children = void 0, previousNode.isCollapsed = !1, 
                                previousNode.children = [ nextNode ], previousNode = nextNode;
                            }
                            _.isEmpty(children) || (previousNode.children = children, previousNode.isCollapsed = !1), 
                            previousNode.values = newNode.values, newNode.values = void 0, newNode.levelValues.splice(1, newNode.levelValues.length - 1);
                        }
                        newNodes.push(newNode);
                    }
                    return newNodes;
                }
            }, MatrixHierarchyNavigator.prototype.updateHierarchy = function(hierarchy, isStepped, layout, subtotalsBefore, calculatePosition) {
                hierarchy.leafNodes.length > 0 && (hierarchy.leafNodes.length = 0), hierarchy.root.children && this.updateRecursive(hierarchy, hierarchy.root.children, null, hierarchy.leafNodes, isStepped, layout, subtotalsBefore, calculatePosition);
            }, MatrixHierarchyNavigator.prototype.createEmptyNode = function(level) {
                return void 0 === level && (level = 0), {
                    level,
                    values: {},
                    value: "",
                    levelValues: [ {
                        levelSourceIndex: 0,
                        value: ""
                    } ]
                };
            }, MatrixHierarchyNavigator.prototype.updateRecursive = function(hierarchy, nodes, parent, cache, isStepped, layout, subtotalsBefore, calculatePosition) {
                for (var level, _loop_1 = function(i, ilen) {
                    var node = nodes[i];
                    if (node.siblings = nodes, hierarchy !== this_1.rowHierarchy || node.isCollapsed || _.isEmpty(node.children) || layout !== _Visuals_types_pivotTableLayout__WEBPACK_IMPORTED_MODULE_6__.t.Outline || subtotalsBefore || node.children.unshift(this_1.createEmptyNode(node.children[0].level)), 
                    parent && (node.parent = parent), level = hierarchy === this_1.rowHierarchy && this_1.isSteppedLayout && node.isSubtotal && void 0 !== node.levelSourceIndex ? _.last(hierarchy.levels) : hierarchy.levels[node.level], 
                    node.hierarchyLevel = level, level) if (node.levelValues) {
                        for (var displayNames_1 = [], tooltipDisplayNames_1 = [], _i = 0, _a = node.levelValues; _i < _a.length; _i++) {
                            var component = _a[_i], value = component.value;
                            displayNames_1.push(this_1.formatters[(source = level.sources[component.levelSourceIndex || 0]).queryName].format(value, null));
                            var tooltipFormatter = this_1.tooltipFormatters[source.queryName];
                            tooltipFormatter && tooltipDisplayNames_1.push(tooltipFormatter.format(value, null));
                        }
                        _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assert(function() {
                            return displayNames_1.length === tooltipDisplayNames_1.length || _.isEmpty(tooltipDisplayNames_1);
                        }, "`tooltipDisplayNames` should be empty or the same length as `displayNames`"), 
                        node.valueFormatted = displayNames_1.join(this_1.compositeGroupSeparator), node.tooltipValueFormatted = _.isEmpty(tooltipDisplayNames_1) ? void 0 : tooltipDisplayNames_1.join(this_1.compositeGroupSeparator), 
                        node.queryName = 1 !== level.sources.length ? void 0 : level.sources[0].queryName;
                    } else {
                        var source;
                        node.valueFormatted = (source = level.sources[node.levelSourceIndex || 0]).displayName, 
                        node.tooltipValueFormatted = source.displayName, node.queryName = source.queryName;
                    }
                    node.index = i, _.isEmpty(node.children) ? (!isStepped || !node.isSubtotal || !subtotalsBefore && node.parent && !node.parent.isSubtotal || this_1.valuesOnRow && node.parent) && (node.leafIndex = cache.length, 
                    cache.push(node)) : (isStepped && (node.leafIndex = cache.length, cache.push(node)), 
                    this_1.updateRecursive(hierarchy, node.children, node, cache, isStepped, layout, subtotalsBefore, calculatePosition), 
                    isStepped && (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertAnyValue(_.every(node.children, function(child) {
                        return _.isEqual(child.hierarchyLevel, node.children[0].hierarchyLevel);
                    }), "Children may come from different levels"), this_1.hasMultipleValueSources() && !_.some(node.children, function(child) {
                        return _.some(child.hierarchyLevel.sources, function(source) {
                            return !source.isMeasure;
                        });
                    }) || (node.hasSubtotalStyle = !0))), node.position = calculatePosition(node, nodes);
                }, this_1 = this, i = 0, ilen = nodes.length; i < ilen; i++) _loop_1(i);
            }, MatrixHierarchyNavigator.prototype.updateStaticColumnHeaders = function(columnHierarchy) {
                var columnLeafNodes = columnHierarchy.leafNodes;
                if (columnLeafNodes && columnLeafNodes.length > 0) {
                    if (!columnLeafNodes[0].identity && this.valuesOnRow && 1 === columnLeafNodes.length) return;
                    for (var i = 0, ilen = columnLeafNodes.length; i < ilen; i++) {
                        var columnLeafNode = columnLeafNodes[i];
                        if (!columnLeafNode.identity && _.isEmpty(columnLeafNode.levelValues)) {
                            var source = columnHierarchy.levels[columnLeafNode.level].sources[columnLeafNode.levelSourceIndex ? columnLeafNode.levelSourceIndex : 0];
                            source && (columnLeafNode.valueFormatted = source.displayName);
                        }
                    }
                }
            }, MatrixHierarchyNavigator.prototype.getMatrixHierarchy = function(rootNodes) {
                var rowHierarchyRootNodes = this.rowHierarchy.root.children;
                if (rowHierarchyRootNodes && rootNodes === rowHierarchyRootNodes) return this.rowHierarchy;
                var columnHierarchyRootNodes = this.columnHierarchy.root.children;
                return columnHierarchyRootNodes && rootNodes === columnHierarchyRootNodes ? this.columnHierarchy : null;
            }, MatrixHierarchyNavigator.prototype.calculateRowHeaderPosition = function(item, items) {
                var position = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_2__.ri;
                position.row.index = this.getRowLeafIndex(item), position.row.indexInSiblings = this.getIndex(item), 
                position.row.isFirst = this.areAllParentsFirst(item, items), position.row.isLast = this.areAllParentsLast(item, items);
                var colIdx = this.getLevel(item);
                return position.column.index = position.column.indexInSiblings = colIdx, position.column.isFirst = 0 === colIdx, 
                position.column.isLast = this.isLeaf(item), position;
            }, MatrixHierarchyNavigator.prototype.calculateColumnHeaderPosition = function(item, items) {
                var position = new _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_2__.ri, rowIdx = this.getLevel(item);
                position.row.index = position.row.indexInSiblings = rowIdx, position.row.isFirst = 0 === rowIdx, 
                position.row.isLast = this.isLeaf(item);
                var colIdx = this.getIndex(item);
                return position.column.index = position.column.indexInSiblings = colIdx, position.column.isFirst = this.areAllParentsFirst(item, items), 
                position.column.isLast = this.areAllParentsLast(item, items), position;
            }, MatrixHierarchyNavigator.prototype.getRowHeaderMetadataColumn = function(item) {
                var columns = this.getRowHeaderMetadataColumns(item);
                return columns && columns[0];
            }, MatrixHierarchyNavigator.prototype.getRowHeaderMetadataColumns = function(item) {
                if (item && this.rowHierarchy) return this.getHierarchyMetadataColumns(this.rowHierarchy, item.level);
            }, MatrixHierarchyNavigator.prototype.getColumnHeaderMetadataColumn = function(item) {
                var columns = this.getColumnHeaderMetadataColumns(item);
                return columns && columns[0];
            }, MatrixHierarchyNavigator.prototype.getColumnHeaderMetadataColumns = function(item) {
                if (item && this.columnHierarchy) return this.getHierarchyMetadataColumns(this.columnHierarchy, item.level);
            }, MatrixHierarchyNavigator.prototype.getHierarchyMetadataColumns = function(hierarchy, level) {
                if (hierarchy && hierarchy.levels && !(hierarchy.levels.length < level)) {
                    var levelInfo = hierarchy.levels[level];
                    if (levelInfo && levelInfo.sources && 0 !== levelInfo.sources.length) return levelInfo.sources;
                }
            }, MatrixHierarchyNavigator.isNodeGrandTotal = function(node) {
                if (node) {
                    for (var nodeRoot = node; nodeRoot.parent; ) nodeRoot = nodeRoot.parent;
                    return nodeRoot.isSubtotal;
                }
                return !1;
            }, MatrixHierarchyNavigator;
        }();
    },
    32771: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            JF: function() {
                return addDataBarsToCell;
            },
            az: function() {
                return getColumnDataBarsSettings;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81337), _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90120), _Visuals_common_visualBorderUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(34021), _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(44783), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38078);
        function getColumnDataBarsSettings(column, dataBars, style) {
            if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(column, "getColumnDataBarsSettings: column"), 
            dataBars) {
                var min, max, columnAggregates = column.aggregates;
                if (null != dataBars.minValue ? min = dataBars.minValue : columnAggregates && null != columnAggregates.min && _.isNumber(columnAggregates.min) && (min = columnAggregates.min), 
                null != dataBars.maxValue ? max = dataBars.maxValue : columnAggregates && null != columnAggregates.max && _.isNumber(columnAggregates.max) && (max = columnAggregates.max), 
                !(null == min || null == max || min > max)) {
                    var minSpecified = null != dataBars.minValue, maxSpecified = null != dataBars.maxValue;
                    return min >= 0 && max > 0 && !minSpecified && (min = 0), min < 0 && max < 0 && !maxSpecified && (max = 0), 
                    {
                        min,
                        max,
                        range: max - min,
                        zeroPosition: 0 === min && 0 === max ? .5 : min >= 0 && max > 0 && minSpecified ? 0 : min < 0 && max <= 0 && maxSpecified ? 1 : (0 - min) / (max - min),
                        positiveColor: (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_1__.HZ)(_Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_2__.v.getFillColor(style, dataBars.positiveColor, _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_3__.U)),
                        negativeColor: (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_1__.HZ)(_Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_2__.v.getFillColor(style, dataBars.negativeColor, _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_3__.U)),
                        axisColor: (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_1__.HZ)(_Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_2__.v.getFillColor(style, dataBars.axisColor, _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_3__.fA)),
                        hideText: !!dataBars.hideText,
                        reverseDirection: !!dataBars.reverseDirection,
                        strokeSettings: (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, (0, 
                        _Visuals_common_visualBorderUtil__WEBPACK_IMPORTED_MODULE_5__.kG)(style)), {
                            width: 1
                        }),
                        totalMatching: dataBars.totalMatchingOption
                    };
                }
            }
        }
        function addDataBarsToCell(cellContentBinding, dataBarsSettings, cellStyle, value, hostServices) {
            var _a, left = cellStyle.getExtraLeft() + "px", right = cellStyle.getExtraRight() + "px", top = cellStyle.getExtraTop() + "px", bottom = cellStyle.getExtraBottom() + "px", dataBarContainer = {
                children: [],
                attributes: {},
                classNames: [],
                styleProperties: {
                    position: "absolute",
                    left,
                    right,
                    top,
                    bottom
                }
            }, percentages = [], dataBar = function(dataBarsSettings, value, percentages) {
                if (null != value && _.isNumber(value) && 0 !== value) {
                    var barLeft, barRight, barColor, min = dataBarsSettings.min, max = dataBarsSettings.max, range = dataBarsSettings.range, zeroPosition = dataBarsSettings.zeroPosition;
                    if (value >= max) {
                        if (1 === zeroPosition) return;
                        value = max;
                    } else if (value <= min) {
                        if (0 === zeroPosition) return;
                        value = min;
                    }
                    if (0 === range ? (barLeft = barRight = zeroPosition, barColor = dataBarsSettings.positiveColor) : value > 0 ? (barLeft = zeroPosition, 
                    barRight = (value - min) / range, barColor = dataBarsSettings.positiveColor) : (barLeft = (value - min) / range, 
                    barRight = zeroPosition, barColor = dataBarsSettings.negativeColor), dataBarsSettings.reverseDirection) {
                        var temp = barLeft;
                        barLeft = 1 - barRight, barRight = 1 - temp;
                    }
                    var percentage = 100 * (barRight - barLeft);
                    null == percentages || percentages.push((value >= 0 ? "" : "-") + Math.round(percentage) + "%");
                    var styleProperties = {
                        left: 100 * barLeft + "%",
                        width: percentage + "%",
                        background: barColor
                    }, strokeSettings = dataBarsSettings.strokeSettings;
                    return strokeSettings && strokeSettings.visible && (styleProperties.outline = "".concat(strokeSettings.width, "px solid ").concat(strokeSettings.color), 
                    styleProperties["outline-offset"] = "-".concat(strokeSettings.width, "px")), {
                        content: "",
                        attributes: {},
                        classNames: [ "dataBar" ],
                        styleProperties
                    };
                }
            }(dataBarsSettings, value, percentages);
            dataBar && dataBarContainer.children.push(dataBar);
            var percentageContainer, zeroPosition = dataBarsSettings.zeroPosition;
            dataBarsSettings.reverseDirection && (zeroPosition = 1 - zeroPosition), dataBarContainer.children.push({
                content: "",
                attributes: {},
                classNames: [ "dataBarAxis" ],
                styleProperties: {
                    top: "-" + top,
                    bottom: "-" + bottom,
                    left: 100 * zeroPosition + "%",
                    "border-left-color": dataBarsSettings.axisColor
                }
            }), hostServices && (percentageContainer = {
                attributes: {},
                classNames: [ "visually-hidden" ],
                styleProperties: {},
                content: hostServices.getLocalizedString("Data_Bar_Percentage", null !== (_a = percentages[0]) && void 0 !== _a ? _a : "0%")
            });
            var contentsStyle = cellContentBinding.styleProperties;
            return contentsStyle.position = "absolute", contentsStyle.left = left, contentsStyle.right = right, 
            contentsStyle.top = top, contentsStyle.bottom = bottom, percentageContainer ? {
                children: [ dataBarContainer, cellContentBinding, percentageContainer ],
                classNames: [],
                attributes: {},
                styleProperties: {}
            } : {
                children: [ dataBarContainer, cellContentBinding ],
                classNames: [],
                attributes: {},
                styleProperties: {}
            };
        }
    },
    21242: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ak: function() {
                return explodeHeadersToBodyItems;
            },
            IP: function() {
                return getScreenReaderMessage;
            },
            JW: function() {
                return getCornerCellTooltipInfo;
            },
            MX: function() {
                return getGroupingDataItems;
            },
            d4: function() {
                return getBodyCellTooltipInfo;
            },
            kH: function() {
                return getGivenBodyCellsInfo;
            },
            mM: function() {
                return getGivenGroupingDataItems;
            },
            p_: function() {
                return getCornerCellParts;
            },
            re: function() {
                return getHeaderTooltipInfo;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _matrix_matrixHierarchyNavigator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13375);
        function getBodyCellInfo(item, valueLabel, skipTotalHeaders, totalLabel) {
            var _a, _b, _c, _d, _e, _f;
            void 0 === skipTotalHeaders && (skipTotalHeaders = !0);
            var columnItem = item.columnItem, rowItem = item.rowItem, partIndex = 0, parts = {
                displayNameParts: [],
                valueParts: [],
                concatenatedParts: [],
                headerParts: [],
                otherType: {}
            }, hasValues = rowItem && !_.isEmpty(rowItem.values), rowHeaderInfo = rowItem && getBodyGroupingDataItems(rowItem, valueLabel, skipTotalHeaders, totalLabel);
            rowHeaderInfo && ((_a = parts.displayNameParts).push.apply(_a, rowHeaderInfo.displayNameParts || []), 
            (_b = parts.valueParts).push.apply(_b, rowHeaderInfo.valueParts || []), (_c = parts.headerParts).push.apply(_c, _.map(rowHeaderInfo.valueParts, function() {
                return !0;
            })), parts.concatenatedParts.push(_.map(rowHeaderInfo.displayNameParts, function() {
                return partIndex++;
            })));
            var columnHeaderInfo = columnItem && getBodyGroupingDataItems(columnItem, valueLabel, skipTotalHeaders, totalLabel);
            if (columnHeaderInfo && ((_d = parts.displayNameParts).push.apply(_d, columnHeaderInfo.displayNameParts || []), 
            (_e = parts.valueParts).push.apply(_e, columnHeaderInfo.valueParts || []), (_f = parts.headerParts).push.apply(_f, _.map(columnHeaderInfo.valueParts, function() {
                return !0;
            })), parts.concatenatedParts.push(_.map(columnHeaderInfo.displayNameParts, function() {
                return partIndex++;
            }))), hasValues) if (parts.displayNameParts.push(item.columnMetadata.displayName), 
            parts.concatenatedParts.push([ partIndex++ ]), parts.headerParts.push(!1), item.isKpi) {
                var kpi = {
                    metadata: item.columnMetadata.kpi,
                    value: item.tooltipContent
                };
                (parts.otherType[parts.displayNameParts.length - 1] = {}).kpiValue = kpi, parts.valueParts.push(item.tooltipContent);
            } else _.isEmpty(item.tooltipContent) || parts.valueParts.push(item.tooltipContent);
            return parts;
        }
        function getBodyCellTooltipInfo(item, valueLabel, contentOnly) {
            if (item) return contentOnly ? [ {
                displayName: "",
                value: item.tooltipContent
            } ] : function(parts) {
                for (var tooltipItems = [], _loop_2 = function(concatenation) {
                    var displayNameParts = _.filter(parts.displayNameParts, function(_, i) {
                        return -1 !== concatenation.indexOf(i);
                    }), valueParts = _.filter(parts.valueParts, function(_, i) {
                        return -1 !== concatenation.indexOf(i);
                    });
                    if ((displayNameParts.length > 0 || valueParts.length > 0) && (tooltipItems.push({
                        displayName: displayNameParts.join(" "),
                        value: valueParts.join(" ")
                    }), parts.otherType)) {
                        var itemIndex = _.first(concatenation);
                        if (_.has(parts.otherType, String(itemIndex))) {
                            var lastItemIndex = tooltipItems.length - 1;
                            delete tooltipItems[lastItemIndex].value, tooltipItems[lastItemIndex] = (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, 
                            tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, tooltipItems[lastItemIndex]), parts.otherType[itemIndex]);
                        }
                    }
                }, _i = 0, _a = parts.concatenatedParts; _i < _a.length; _i++) _loop_2(_a[_i]);
                return tooltipItems;
            }(getBodyCellInfo(item, valueLabel));
        }
        function getGivenBodyCellsInfo(items, rowHierarchyNavigator, columnHierarchyNavigator, valueLabel) {
            for (var partCollection = [], _i = 0, items_1 = items; _i < items_1.length; _i++) partCollection.push(getBodyCellInfo(items_1[_i], valueLabel));
            var coveragePercentage = 0, numLeaves = rowHierarchyNavigator.getHierarchyLeafCount() * columnHierarchyNavigator.getHierarchyLeafCount();
            return 0 !== numLeaves && (coveragePercentage = Math.round(items.length / numLeaves * 100)), 
            (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({
                coveragePercentage
            }, reconcileDataHierarchyParts(partCollection));
        }
        function reconcileDataHierarchyParts(partCollection) {
            for (var dataItems = {
                headers: _.uniq(_.flatten(_.map(partCollection, function(p) {
                    return p.displayNameParts;
                }))),
                isHeader: {},
                values: []
            }, dataItemsValues = dataItems.values, masterHeader = dataItems.headers, dataItemsIsHeader = dataItems.isHeader, nameToMasterHeaderIndex = {}, i = 0; i < masterHeader.length; i++) nameToMasterHeaderIndex[masterHeader[i]] = i;
            for (var _i = 0, partCollection_1 = partCollection; _i < partCollection_1.length; _i++) {
                var part = partCollection_1[_i], thisValues = _.fill(new Array(masterHeader.length), "");
                for (i = 0; i < part.displayNameParts.length; i++) {
                    var headerIndex = nameToMasterHeaderIndex[part.displayNameParts[i]];
                    thisValues[headerIndex] = part.valueParts[i], part.headerParts && (dataItems.isHeader[headerIndex] = part.headerParts[i]);
                }
                dataItemsValues.push(thisValues);
            }
            if (!_.isEmpty(partCollection) && partCollection[0].headerParts) for (var _loop_1 = function(n) {
                for (var currentRow = dataItemsValues[n], matchingRowIndices = [], i = n + 1; i < dataItemsValues.length; i++) _.every(dataItemsValues[i], function(value, k) {
                    return dataItemsIsHeader[k] && value === currentRow[k] || !dataItemsIsHeader[k] && ("" === value || "" === currentRow[k]);
                }) && matchingRowIndices.push(i);
                if (matchingRowIndices.length > 0) for (var holes = _.reduce(currentRow, function(accumulator, value, i) {
                    return "" === value && accumulator.push(i), accumulator;
                }, []), _a = 0, matchingRowIndices_1 = matchingRowIndices; _a < matchingRowIndices_1.length; _a++) {
                    var matchingRow = dataItemsValues[matchingRowIndices_1[_a]];
                    for (i = 0; i < holes.length; i++) {
                        var hole = holes[i], thisValue = matchingRow[hole];
                        "" !== thisValue && (currentRow[hole] = thisValue, holes.splice(i, 1), i--);
                    }
                }
                matchingRowIndices.sort(function(a, b) {
                    return b - a;
                });
                for (var _b = 0, matchingRowIndices_2 = matchingRowIndices; _b < matchingRowIndices_2.length; _b++) dataItemsValues.splice(matchingRowIndices_2[_b], 1);
            }, n = 0; n < dataItemsValues.length; n++) _loop_1(n);
            return dataItems;
        }
        function getCornerCellTooltipInfo(cornerCellItem, contentOnly) {
            if (cornerCellItem) return contentOnly ? [ {
                displayName: "",
                value: cornerCellItem.displayName
            } ] : [ {
                displayName: cornerCellItem.displayName
            } ];
        }
        function getHeaderTooltipInfo(headerItem, shouldAddNodeValue, isMultiValueSubtotalDelegate, totalLabel, valueLabel, contentOnly) {
            if (headerItem) {
                if (contentOnly) return [ {
                    displayName: "",
                    value: headerItem.isSubtotal || _matrix_matrixHierarchyNavigator__WEBPACK_IMPORTED_MODULE_1__.hc.isNodeGrandTotal(headerItem) ? totalLabel : headerItem.tooltipValueFormatted
                } ];
                if (_matrix_matrixHierarchyNavigator__WEBPACK_IMPORTED_MODULE_1__.hc.isNodeGrandTotal(headerItem)) return isMultiValueSubtotalDelegate(headerItem) ? [ {
                    displayName: headerItem.tooltipValueFormatted
                } ] : [ {
                    displayName: totalLabel
                } ];
                var tooltipItems = [], headerInfo = function(headerItem, valueLabel) {
                    var _a = getGroupingDataItems(headerItem, valueLabel), displayNameParts = _a.displayNameParts, valueParts = _a.valueParts;
                    if (displayNameParts.length > 0 || valueParts.length > 0) return {
                        displayName: displayNameParts.join(" "),
                        value: valueParts.join(" ")
                    };
                }(headerItem, valueLabel);
                return headerInfo && tooltipItems.push(headerInfo), shouldAddNodeValue(headerItem) && tooltipItems.push({
                    displayName: valueLabel,
                    value: headerItem.valueFormatted
                }), tooltipItems;
            }
        }
        function getBodyGroupingDataItems(headerItem, valueLabel, skipTotalHeaders, totalLabel) {
            void 0 === skipTotalHeaders && (skipTotalHeaders = !0);
            var metadataColumns = getHeaderLevelSources(headerItem), queryName = headerItem.queryName, metadataColumn = _.find(metadataColumns, function(column) {
                return column.queryName === queryName;
            });
            return metadataColumn && metadataColumn.isMeasure && (headerItem = headerItem.parent), 
            getGroupingDataItems(headerItem, valueLabel, skipTotalHeaders, totalLabel);
        }
        function getGroupingDataItems(headerItem, valueLabel, skipTotalHeaders, totalLabel) {
            void 0 === skipTotalHeaders && (skipTotalHeaders = !0);
            for (var displayNameParts = [], valueParts = []; headerItem; ) if (skipTotalHeaders && headerItem.isSubtotal) headerItem = headerItem.parent; else {
                var metadataColumns = getHeaderLevelSources(headerItem);
                if (!_.isEmpty(metadataColumns)) {
                    for (var compositeDisplayNameParts = [], _i = 0, metadataColumns_1 = metadataColumns; _i < metadataColumns_1.length; _i++) {
                        var metadataColumn = metadataColumns_1[_i];
                        compositeDisplayNameParts.push(metadataColumn.isMeasure ? valueLabel : metadataColumn.displayName);
                    }
                    displayNameParts.push(compositeDisplayNameParts.join(" ")), _.every(metadataColumns, function(c) {
                        return c.isMeasure;
                    }) ? valueParts.push(metadataColumns[0].displayName) : valueParts.push(headerItem.isSubtotal ? totalLabel : headerItem.tooltipValueFormatted);
                }
                headerItem = headerItem.parent;
            }
            return {
                displayNameParts: displayNameParts = displayNameParts.reverse(),
                valueParts: valueParts = valueParts.reverse()
            };
        }
        function getGivenGroupingDataItems(rowItems, columnItems, rowHierarchyNavigator, columnHierarchyNavigator, valueLabel) {
            var allBodyNodes = explodeHeadersToBodyItems(rowHierarchyNavigator, columnHierarchyNavigator, rowItems, columnItems), coveragePercentage = 0, numLeaves = rowHierarchyNavigator.getHierarchyLeafCount() * columnHierarchyNavigator.getHierarchyLeafCount();
            0 !== numLeaves && (coveragePercentage = Math.round(allBodyNodes.length / numLeaves * 100));
            for (var partCollection = [], _i = 0, allBodyNodes_1 = allBodyNodes; _i < allBodyNodes_1.length; _i++) partCollection.push(getBodyCellInfo(allBodyNodes_1[_i], valueLabel));
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({
                coveragePercentage
            }, reconcileDataHierarchyParts(partCollection));
        }
        function explodeHeadersToBodyItems(rowHierarchyNavigator, columnHierarchyNavigator, rowItems, columnItems) {
            _.isEmpty(rowItems) && (rowItems = rowHierarchyNavigator.getHierarchyItems()), _.isEmpty(columnItems) && (columnItems = columnHierarchyNavigator.getHierarchyItems());
            var rowLeaves = [];
            rowHierarchyNavigator.getLeaves(rowItems, rowLeaves), rowLeaves = _.filter(rowLeaves, function(leaf) {
                return !leaf.isSubtotal;
            });
            var columnLeaves = [];
            columnHierarchyNavigator.getLeaves(columnItems, columnLeaves), columnLeaves = _.filter(columnLeaves, function(leaf) {
                return !leaf.isSubtotal;
            });
            for (var allBodyNodes = [], _i = 0, rowLeaves_1 = rowLeaves; _i < rowLeaves_1.length; _i++) for (var rowLeaf = rowLeaves_1[_i], _a = 0, columnLeaves_1 = columnLeaves; _a < columnLeaves_1.length; _a++) allBodyNodes.push(rowHierarchyNavigator.getIntersection(rowLeaf, columnLeaves_1[_a]));
            return allBodyNodes.filter(function(node) {
                return !node.isSubtotal && !node.isGrandTotal;
            });
        }
        function getHeaderLevelSources(headerItem) {
            var sources = headerItem.hierarchyLevel && headerItem.hierarchyLevel.sources;
            return _.isEmpty(sources) ? [] : _.every(sources, function(source) {
                return source.isMeasure;
            }) ? [ sources[headerItem.levelSourceIndex || 0] ] : sources;
        }
        function getCornerCellParts(cornerCellItem) {
            return {
                displayNameParts: [ cornerCellItem.displayName ],
                valueParts: [ null ]
            };
        }
        function getScreenReaderMessage(cellInfoParts, additionalInfo) {
            for (var message = [], i = 0; i < cellInfoParts.displayNameParts.length; i++) {
                var part = cellInfoParts.displayNameParts[i], value = cellInfoParts.valueParts[i];
                null != value && (part += ": " + value), message.push(part);
            }
            if (!_.isEmpty(additionalInfo)) for (var _i = 0, additionalInfo_1 = additionalInfo; _i < additionalInfo_1.length; _i++) message.push(additionalInfo_1[_i]);
            return message.join(". ");
        }
    },
    29043: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            MV: function() {
                return addSparklineToCell;
            },
            th: function() {
                return parseSparklineData;
            },
            wJ: function() {
                return getSparklineSettings;
            }
        });
        var _Visuals_common_axisHelper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(53197), _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90120), _Visuals_common_marker_renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(51995), _Visuals_types_sparklineChartType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85308), _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(58520), _Visuals_warnings_visualWarnings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45296), _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(44783), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(43286), sparklineDataReductionCount = 52;
        function parseSparklineData(value, hostServices) {
            var parsedData = {
                points: [],
                lowX: void 0,
                highX: void 0,
                lowY: void 0,
                highY: void 0,
                minXDifference: void 0
            };
            if (!_.isEmpty(value)) {
                var dataRaw;
                try {
                    dataRaw = JSON.parse(value);
                } catch (_a) {
                    return;
                }
                var n, lowY = +dataRaw.yl, highY = +dataRaw.yh, lowX = +dataRaw.xl, highX = +dataRaw.xh, minXDifference = null != dataRaw.md ? +dataRaw.md : void 0;
                _.size(dataRaw.p) > sparklineDataReductionCount && hostServices.setWarnings([ new _Visuals_warnings_visualWarnings__WEBPACK_IMPORTED_MODULE_0__.El ]);
                for (var _i = 0, _b = dataRaw.p; _i < _b.length; _i++) {
                    var row = _b[_i];
                    parsedData.points.push({
                        x: null != row[0] ? +row[0] : void 0,
                        y: null != row[1] ? (n = +row[1], n * (highY - lowY) / 100 + lowY) : void 0
                    });
                }
                return {
                    points: _.filter(parsedData.points, function(d) {
                        return _.isFinite(d.x) && (null != d.y || _.isFinite(d.y));
                    }),
                    lowX,
                    highX,
                    lowY,
                    highY,
                    minXDifference
                };
            }
        }
        function getSparklineSettings(sparkline, typeDescriptor, style) {
            var _a;
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(sparkline, "sparkline"), 
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(null === (_a = null == typeDescriptor ? void 0 : typeDescriptor.misc) || void 0 === _a ? void 0 : _a.sparkline, "invalid type for sparkline"), 
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(style, "style");
            var groupingType = typeDescriptor.misc.sparkline.groupingType;
            return {
                chartType: sparkline.chartType,
                dataColor: style.isHighContrast ? _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_2__.v.getThemeColor(style, _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_3__.fA) : sparkline.dataColor,
                strokeWidth: sparkline.strokeWidth,
                marker: {
                    show: !0,
                    typeFlags: sparkline.marker.typeFlags,
                    color: style.isHighContrast ? _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_2__.v.getThemeColor(style, _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_3__.fA) : sparkline.marker.color,
                    size: sparkline.marker.size,
                    shape: sparkline.marker.shape
                },
                isScalar: groupingType && !!(groupingType.numeric || groupingType.dateTime || groupingType.temporal)
            };
        }
        function addSparklineToCell(contentBinding, sparklineSettings, cellStyle, value, rowHeight, columnWidth, iconSettings, iconSize) {
            var sparklineBinding;
            if (null != value) {
                var width = columnWidth - cellStyle.getExtraLeft() - cellStyle.getExtraRight() - (iconSize ? iconSize + 5 : 0), height = rowHeight - cellStyle.getExtraTop() - cellStyle.getExtraBottom();
                width - sparklineSettings.strokeWidth > 1 && height - sparklineSettings.strokeWidth > 1 && (sparklineBinding = sparklineSettings.chartType === _Visuals_types_sparklineChartType__WEBPACK_IMPORTED_MODULE_4__.U.line ? function(sparklineSettings, width, height, value) {
                    var x, dataColor = sparklineSettings.dataColor, strokeWidth = sparklineSettings.strokeWidth, _a = sparklineSettings.marker, markerColor = _a.color, markerSize = _a.size, markerShape = _a.shape, typeFlags = _a.typeFlags, isScalar = sparklineSettings.isScalar, bitsOn = (0, 
                    _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.Js)(typeFlags), doNotReserveMarkerSpace = 0 === bitsOn || 1 === bitsOn && (0, 
                    _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.qC), artifactPadding = Math.max(strokeWidth, 2) + (doNotReserveMarkerSpace ? 0 : Math.ceil(markerSize / 2)), data = value.points;
                    x = isScalar ? d3.scaleLinear().domain([ value.lowX, value.highX ]).range([ artifactPadding, width - artifactPadding ]) : d3.scalePoint().domain(_.map(_.range(value.lowX, value.highX + 1), function(x) {
                        return x.toString();
                    })).range([ artifactPadding, width - artifactPadding ]);
                    var markerDefinitionBinding, markerLineBinding, y = d3.scaleLinear().domain(d3.extent(data, function(d) {
                        return d.y;
                    })).range([ height - artifactPadding, artifactPadding ]), lineGenerator = d3.line().x(function(d) {
                        return x(d.x);
                    }).y(function(d) {
                        return y(d.y);
                    }), dataToUse = _.filter(data, function(d) {
                        return null != d.y;
                    }), lineBinding = {
                        tagName: "path",
                        attributes: {
                            d: lineGenerator(dataToUse)
                        },
                        classNames: [],
                        styleProperties: {
                            stroke: dataColor,
                            "stroke-width": strokeWidth.toString(),
                            "stroke-linecap": "round",
                            "stroke-linejoin": "round",
                            fill: "transparent"
                        }
                    }, markerDataPoints = function(data, settings) {
                        var typeFlags = settings.marker.typeFlags, _a = d3.extent(data, function(d) {
                            return d.y;
                        }), min = _a[0], max = _a[1];
                        return _.filter(data, function(d, i) {
                            var _a, _b;
                            return null != d.y && (!!(0, _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.$6) || (0, 
                            _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.Ps) && 0 === i || (0, 
                            _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.Z$) && i === data.length - 1 || (0, 
                            _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.pd) && d.y < 0 || (0, 
                            _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.Zc) && d.y === max || (0, 
                            _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.O3) && d.y === min || (0, 
                            _VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_5__.yE)(typeFlags, _Visuals_types_sparklineMarkerType__WEBPACK_IMPORTED_MODULE_6__.qC) && null == (null === (_a = data[i - 1]) || void 0 === _a ? void 0 : _a.y) && null == (null === (_b = data[i + 1]) || void 0 === _b ? void 0 : _b.y));
                        });
                    }(dataToUse, sparklineSettings);
                    if (!_.isEmpty(markerDataPoints)) {
                        var markerKey = "markerKey".concat(markerSize).concat(markerColor).concat(markerShape);
                        markerDefinitionBinding = {
                            tagName: "defs",
                            classNames: [],
                            styleProperties: {},
                            attributes: {},
                            children: [ {
                                tagName: "marker",
                                classNames: [],
                                styleProperties: {},
                                attributes: {
                                    id: markerKey,
                                    markerUnits: "strokeWidth",
                                    orient: "0",
                                    refX: "0",
                                    refY: "0",
                                    viewBox: "-6 -6 12 12",
                                    markerHeight: markerSize.toString(),
                                    markerWidth: markerSize.toString()
                                },
                                children: [ {
                                    tagName: "path",
                                    classNames: [],
                                    styleProperties: {
                                        "stroke-width": (0, _Visuals_common_marker_renderer__WEBPACK_IMPORTED_MODULE_7__.F)(markerShape).toString(),
                                        "stroke-opacity": "1",
                                        stroke: markerColor,
                                        fill: markerColor
                                    },
                                    attributes: {
                                        d: (0, _Visuals_common_marker_renderer__WEBPACK_IMPORTED_MODULE_7__.Ar)(markerShape)
                                    }
                                } ]
                            } ]
                        }, markerLineBinding = {
                            tagName: "path",
                            attributes: {
                                d: lineGenerator(markerDataPoints)
                            },
                            classNames: [],
                            styleProperties: {
                                stroke: dataColor,
                                "stroke-width": 2..toString(),
                                "stroke-opacity": "0",
                                fill: "transparent",
                                "marker-start": "url(#".concat(markerKey, ")"),
                                "marker-mid": "url(#".concat(markerKey, ")"),
                                "marker-end": "url(#".concat(markerKey, ")")
                            }
                        };
                    }
                    return {
                        tagName: "svg",
                        children: markerLineBinding ? [ markerDefinitionBinding, lineBinding, markerLineBinding ] : [ lineBinding ],
                        classNames: [],
                        styleProperties: {},
                        attributes: {
                            height: height + "px",
                            width: width + "px"
                        }
                    };
                }(sparklineSettings, width, height, value) : function(sparklineSettings, width, height, value) {
                    var x, dataColor = sparklineSettings.dataColor, isScalar = sparklineSettings.isScalar, data = value.points, xExtent = [ value.lowX, value.highX ], columnWidth = function(data, minInterval, width, domain, isScalar) {
                        if (_.isEmpty(data)) return 0;
                        var categoryWidth, domainSpan = domain[domain.length - 1] - domain[0];
                        return isScalar && domain && domain.length > 1 ? (0 !== domainSpan ? (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                            return null != minInterval;
                        }, "minXDifference cannot be null for scalar plotted as columns"), categoryWidth = width * (minInterval / (domainSpan + minInterval))) : categoryWidth = width, 
                        categoryWidth = Math.max(categoryWidth, 2)) : categoryWidth = width / (domainSpan + 1), 
                        .8 * categoryWidth;
                    }(data, value.minXDifference, width, xExtent, isScalar), halfColumnWidth = columnWidth / 2;
                    x = isScalar ? d3.scaleLinear().domain(xExtent).range([ halfColumnWidth, width - halfColumnWidth ]) : d3.scalePoint().domain(_.map(_.range(value.lowX, value.highX + 1), function(x) {
                        return x.toString();
                    })).range([ halfColumnWidth, width - halfColumnWidth ]);
                    var yExtent = d3.extent(data, function(d) {
                        return d.y;
                    });
                    yExtent[0] = Math.min(0, yExtent[0]), yExtent[1] = Math.max(0, yExtent[1]);
                    var y = d3.scaleLinear().domain(yExtent).range([ height, 0 ]), scaledY0 = y(0), widthValue = columnWidth.toString();
                    return {
                        tagName: "svg",
                        children: _.chain(data).filter(function(d) {
                            return null != d.y;
                        }).map(function(d) {
                            var xValue = (x(d.x) - halfColumnWidth).toString(), yValue = (scaledY0 + (0, _Visuals_common_axisHelper__WEBPACK_IMPORTED_MODULE_8__.sc)(y, Math.max(0, d.y), 0)).toString(), heightValue = Math.abs((0, 
                            _Visuals_common_axisHelper__WEBPACK_IMPORTED_MODULE_8__.sc)(y, 0, d.y)).toString();
                            return {
                                tagName: "rect",
                                classNames: [],
                                styleProperties: {
                                    fill: dataColor
                                },
                                attributes: {
                                    x: xValue,
                                    y: yValue,
                                    width: widthValue,
                                    height: heightValue
                                }
                            };
                        }).value(),
                        classNames: [],
                        styleProperties: {},
                        attributes: {
                            height: height + "px",
                            width: width + "px"
                        }
                    };
                }(sparklineSettings, width, height, value));
            }
            return {
                attributes: {},
                styleProperties: {},
                classNames: [ "flex-container" ],
                children: _.filter(iconSettings && "Before" !== iconSettings.layout ? [ sparklineBinding, contentBinding ] : [ contentBinding, sparklineBinding ], function(c) {
                    return !!c;
                })
            };
        }
    },
    74764: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            PivotTable: function() {
                return PivotTable;
            }
        });
        var tslib_es6 = __webpack_require__(81337), onObjectUtil = __webpack_require__(80065), dataViewObject2 = __webpack_require__(82755), enums = __webpack_require__(46135), pivotTableControlTypes = __webpack_require__(79465), asyncSerializer = __webpack_require__(57419), browserUtils = __webpack_require__(59107), measurement = __webpack_require__(15366), contracts_selector = __webpack_require__(32379), pivotTableOptions = __webpack_require__(31198), tooltipService = __webpack_require__(40739), debug = __webpack_require__(62458), htmlSubSelectionHelper = __webpack_require__(52287), pivotTableInteractivityUtils = __webpack_require__(21242), matrixHierarchyNavigator = __webpack_require__(13375), matrix_capabilities = __webpack_require__(85196), selectionId = __webpack_require__(26543), PivotTableInteractionManager = function() {
            function PivotTableInteractionManager(tooltipService, selectionManager, valueLabel, totalLabel) {
                this.tooltipService = tooltipService, this.selectionManager = selectionManager, 
                this.valueLabel = valueLabel, this.totalLabel = totalLabel, this.tooltipsEnabled = !0;
            }
            return PivotTableInteractionManager.prototype.getHandlerTop = function() {
                var _this = this, shouldAddNodeValue = function(headerItem) {
                    return headerItem.isSubtotal && !_this.rowHierarchyNavigator.valuesOnRowApplied() && _this.columnHierarchyNavigator.isColumnHeaderMultiValueSubtotal(headerItem);
                }, isMultiValueSubtotal = function(headerItem) {
                    return _this.columnHierarchyNavigator.isColumnHeaderMultiValueSubtotal(headerItem);
                }, role = matrix_capabilities.r.columns;
                return {
                    addTooltip: null,
                    removeTooltip: function(_item, element) {
                        return _this.removeTooltip(element);
                    },
                    isTooltipEnabled: null,
                    setTooltipDelegate: function(getItemFn, itemElement, getRegionFn, showByDefaultOverride, shouldHideDefaultTooltipFn) {
                        return _this.setTooltipDelegateTop(getItemFn, itemElement, getRegionFn, shouldAddNodeValue, isMultiValueSubtotal, role, showByDefaultOverride, shouldHideDefaultTooltipFn);
                    },
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.getHandlerMidOrBot = function() {
                var _this = this, shouldAddNodeValue = function(headerItem) {
                    return headerItem.isSubtotal && _this.rowHierarchyNavigator.valuesOnRowApplied() && _this.rowHierarchyNavigator.isRowHeaderMultiValueSubtotal(headerItem);
                }, isMultiValueSubtotal = function(headerItem) {
                    return _this.rowHierarchyNavigator.isRowHeaderMultiValueSubtotal(headerItem);
                }, role = matrix_capabilities.r.rows;
                return {
                    addTooltip: null,
                    removeTooltip: function(_item, element) {
                        return _this.removeTooltip(element);
                    },
                    isTooltipEnabled: null,
                    setTooltipDelegate: function(getItemFn, element, getRegionFn, showByDefaultOverride, shouldHideDefaultTooltipFn) {
                        return _this.setTooltipDelegateMidOrBot(getItemFn, element, getRegionFn, shouldAddNodeValue, isMultiValueSubtotal, role, showByDefaultOverride, shouldHideDefaultTooltipFn);
                    },
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.getRowHeaderHandler = function() {
                var _this = this;
                return this.getHeaderHandler(function(headerItem) {
                    return headerItem.isSubtotal && _this.rowHierarchyNavigator.valuesOnRowApplied() && _this.rowHierarchyNavigator.isRowHeaderMultiValueSubtotal(headerItem);
                }, function(headerItem) {
                    return _this.rowHierarchyNavigator.isRowHeaderMultiValueSubtotal(headerItem);
                }, matrix_capabilities.r.rows);
            }, PivotTableInteractionManager.prototype.getColumnHeaderHandler = function() {
                var _this = this;
                return this.getHeaderHandler(function(headerItem) {
                    return headerItem.isSubtotal && !_this.rowHierarchyNavigator.valuesOnRowApplied() && _this.columnHierarchyNavigator.isColumnHeaderMultiValueSubtotal(headerItem);
                }, function(headerItem) {
                    return _this.columnHierarchyNavigator.isColumnHeaderMultiValueSubtotal(headerItem);
                }, matrix_capabilities.r.columns);
            }, PivotTableInteractionManager.prototype.getBodyHandler = function() {
                var _this = this;
                return {
                    addTooltip: function(bodyCell, bodyElement) {
                        return _this.addBodyTooltip(bodyCell, bodyElement);
                    },
                    removeTooltip: function(_bodyCell, bodyElement) {
                        return _this.removeTooltip(bodyElement);
                    },
                    isTooltipEnabled: function(bodyElement) {
                        return _this.tooltipsEnabled;
                    },
                    setTooltipDelegate: null,
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.onDataViewChanged = function(rowHierarchyNavigator, columnHierarchyNavigator) {
                this.rowHierarchyNavigator = rowHierarchyNavigator, this.columnHierarchyNavigator = columnHierarchyNavigator;
            }, PivotTableInteractionManager.prototype.addBodyTooltip = function(item, itemElement) {
                var _this = this, selection = d3.select(itemElement);
                this.tooltipService.addTooltip(selection, function() {
                    return (0, pivotTableInteractivityUtils.d4)(item, _this.valueLabel, !_this.tooltipsEnabled);
                }, function() {
                    var itemSelectionId = _this.getItemSelectionId(item, matrix_capabilities.r.values, void 0);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, PivotTableInteractionManager.prototype.getCornerHandler = function() {
                var _this = this;
                return {
                    addTooltip: function(cornerCell, cornerElement) {
                        return _this.addCornerTooltip(cornerCell, cornerElement);
                    },
                    removeTooltip: function(_cornerCell, cornerElement) {
                        return _this.removeTooltip(cornerElement);
                    },
                    isTooltipEnabled: function(cornerCell) {
                        return _this.tooltipsEnabled && !_.isEmpty(cornerCell.displayName);
                    },
                    setTooltipDelegate: null,
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.tooltipVisible = function() {
                return this.tooltipService && this.tooltipService.visible();
            }, PivotTableInteractionManager.prototype.hideTooltip = function() {
                this.tooltipService && this.tooltipService.hide();
            }, PivotTableInteractionManager.prototype.setTooltipsEnabled = function(enabled) {
                this.tooltipsEnabled = enabled;
            }, PivotTableInteractionManager.prototype.addHeaderTooltip = function(item, itemElement, shouldAddNodeValue, isMultiValueSubtotal, role) {
                var _a, _b, _c, _this = this, selection = d3.select(itemElement), isTouchScreenOptimizedEnabled = null === (_c = (_b = this.tooltipService).isTouchScreenOptimizedEnabled) || void 0 === _c ? void 0 : _c.call(_b), excluded = ((_a = {})[0] = !isTouchScreenOptimizedEnabled, 
                _a);
                this.tooltipService.addTooltip(selection, function() {
                    return (0, pivotTableInteractivityUtils.re)(item, shouldAddNodeValue, isMultiValueSubtotal, _this.totalLabel, _this.valueLabel);
                }, function() {
                    var itemSelectionId = _this.getItemSelectionId(item, role, excluded);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, PivotTableInteractionManager.prototype.addCornerTooltip = function(item, itemElement) {
                var _this = this, selection = d3.select(itemElement);
                this.tooltipService.addTooltip(selection, function() {
                    return (0, pivotTableInteractivityUtils.JW)(item);
                }, function() {
                    var itemSelectionId = _this.getItemSelectionId(item, void 0, void 0);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, PivotTableInteractionManager.prototype.getHeaderHandler = function(shouldAddNodeValue, isTotalNode, roleName) {
                var _this = this;
                return {
                    addTooltip: function(headerCell, headerElement) {
                        return _this.addHeaderTooltip(headerCell, headerElement, shouldAddNodeValue, isTotalNode, roleName);
                    },
                    removeTooltip: function(_headerCell, headerElement) {
                        return _this.removeTooltip(headerElement);
                    },
                    isTooltipEnabled: function(headerCell) {
                        return _this.tooltipsEnabled && void 0 !== headerCell.valueFormatted;
                    },
                    setTooltipDelegate: null,
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.removeTooltip = function(itemElement) {
                var selection = d3.select(itemElement);
                this.tooltipService.removeTooltips(selection);
            }, PivotTableInteractionManager.prototype.getItemSelectionId = function(item, role, excluded) {
                if (item) {
                    var selectors = this.selectionManager.createSelectorsByColumn(item), selector = selectors && selectionId.l0.fromSelectorsByColumnAndRoles(selectors, role);
                    return selector && excluded && (selector.exclude = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, selector.exclude), null != excluded ? excluded : {})), 
                    selector;
                }
            }, PivotTableInteractionManager.prototype.setTooltipDelegateTop = function(getItemFn, element, getRegionFn, shouldAddNodeValue, isMultiValueSubtotal, role, showByDefaultOverride, shouldHideDefaultTooltipFn) {
                var _a, _b, _c, _this = this, selection = d3.select(element), isTouchScreenOptimizedEnabled = null === (_c = (_b = this.tooltipService).isTouchScreenOptimizedEnabled) || void 0 === _c ? void 0 : _c.call(_b), excluded = ((_a = {})[0] = !isTouchScreenOptimizedEnabled, 
                _a);
                this.tooltipService.addTooltip(selection, function(tooltipEventArgs) {
                    return !_this.tooltipsEnabled && shouldHideDefaultTooltipFn(tooltipEventArgs) ? null : getRegionFn(tooltipEventArgs.context) === pivotTableControlTypes.aP.Prefix ? (0, 
                    pivotTableInteractivityUtils.JW)(getItemFn(tooltipEventArgs), !_this.tooltipsEnabled) : (0, 
                    pivotTableInteractivityUtils.re)(getItemFn(tooltipEventArgs), shouldAddNodeValue, isMultiValueSubtotal, _this.totalLabel, _this.valueLabel, !_this.tooltipsEnabled);
                }, function(tooltipEventArgs) {
                    return _this.tooltipsEnabled ? getRegionFn(tooltipEventArgs.context) === pivotTableControlTypes.aP.Prefix ? (itemSelectionId = _this.getItemSelectionId(getItemFn(tooltipEventArgs), void 0, void 0)) && [ itemSelectionId ] : (itemSelectionId = _this.getItemSelectionId(getItemFn(tooltipEventArgs), role, excluded)) && [ itemSelectionId ] : null;
                    var itemSelectionId;
                }, !0, !0, showByDefaultOverride);
            }, PivotTableInteractionManager.prototype.setTooltipDelegateMidOrBot = function(getItemFn, element, getRegionFn, shouldAddNodeValue, isMultiValueSubtotal, role, showByDefaultOverride, shouldHideDefaultTooltipFn) {
                var _a, _b, _c, _this = this, selection = d3.select(element), isTouchScreenOptimizedEnabled = null === (_c = (_b = this.tooltipService).isTouchScreenOptimizedEnabled) || void 0 === _c ? void 0 : _c.call(_b), excluded = ((_a = {})[0] = !isTouchScreenOptimizedEnabled, 
                _a);
                this.tooltipService.addTooltip(selection, function(tooltipEventArgs) {
                    return !_this.tooltipsEnabled && shouldHideDefaultTooltipFn(tooltipEventArgs) ? null : getRegionFn(tooltipEventArgs.context) === pivotTableControlTypes.aP.Prefix ? (0, 
                    pivotTableInteractivityUtils.re)(getItemFn(tooltipEventArgs), shouldAddNodeValue, isMultiValueSubtotal, _this.totalLabel, _this.valueLabel, !_this.tooltipsEnabled) : (0, 
                    pivotTableInteractivityUtils.d4)(getItemFn(tooltipEventArgs), _this.valueLabel, !_this.tooltipsEnabled);
                }, function(tooltipEventArgs) {
                    return _this.tooltipsEnabled ? getRegionFn(tooltipEventArgs.context) === pivotTableControlTypes.aP.Prefix ? (itemSelectionId = _this.getItemSelectionId(getItemFn(tooltipEventArgs), role, excluded)) && [ itemSelectionId ] : (itemSelectionId = _this.getItemSelectionId(getItemFn(tooltipEventArgs), matrix_capabilities.r.values, void 0)) && [ itemSelectionId ] : null;
                    var itemSelectionId;
                }, !0, !0, showByDefaultOverride);
            }, PivotTableInteractionManager;
        }(), objectEnumerationBuilder = __webpack_require__(28579), converterHelper = __webpack_require__(54522), textUtil = __webpack_require__(44977), units = __webpack_require__(32105), tablixProperties = __webpack_require__(55007), outline = __webpack_require__(40550), textAlignment = __webpack_require__(19650), color = __webpack_require__(64067), CssConstants = __webpack_require__(79154), urlUtils = __webpack_require__(48066), Utility = __webpack_require__(38078), structuralType = __webpack_require__(58702), pivotTablePage = __webpack_require__(7911), tablixUtils1 = __webpack_require__(93340), tablixConstants = __webpack_require__(71090), matrixBinder = __webpack_require__(93568), PivotTableBinderUtils = __webpack_require__(91468), pivotTableDataBarsUtils = __webpack_require__(32771), pivotTableSparklineUtils = __webpack_require__(29043), pivotTableSelectionManager = __webpack_require__(76797), pivotTableSortingManager = __webpack_require__(59784), pivotTableLayout = __webpack_require__(66842), pivotTable_capabilities = __webpack_require__(67016), PivotTableBinder = function() {
            function PivotTableBinder(options, selectionManager, sortingManager, hostServices, container, isA11yMatrix) {
                this.selectionManager = selectionManager, this.sortingManager = sortingManager, 
                this.hostServices = hostServices, this.isA11yMatrix = isA11yMatrix, this.specificColumnHeaderFontInfo = {}, 
                this.binderOptions = options, this.measureElement = (0, PivotTableBinderUtils.qk)(container), 
                this.legacyTooltipsEnabled = !0;
            }
            return PivotTableBinder.prototype.setFormatMode = function(formatMode) {
                this.formatMode = formatMode;
            }, PivotTableBinder.prototype.setRowNavigator = function(rowHierarchyNavigator) {
                this.rowNavigator = rowHierarchyNavigator;
            }, PivotTableBinder.prototype.setColumnNavigator = function(columnHierarchyNavigator) {
                this.columnNavigator = columnHierarchyNavigator;
            }, PivotTableBinder.prototype.getRowHeaderBinding = function(rowHeader, forMeasure, onObject, isFooter, cellWithReferenceText, nextRowHeader, columnWidth, cellWithReferencePosition, isSecondaryRowHeader) {
                var _this = this;
                this.binderOptions.onBindRowHeader && !forMeasure && this.binderOptions.onBindRowHeader(rowHeader);
                var contentBinding, iconName, cellBinding, columnSources = rowHeader.hierarchyLevel && rowHeader.hierarchyLevel.sources, isCompositeGroup = columnSources && columnSources.length > 1, content = (0, 
                Utility.HZ)(this.getRowHeaderLabel(rowHeader));
                if (this.formattingProperties.rowHeaders.wordWrap && (content = (0, PivotTableBinderUtils.rP)(content)), 
                _.isEmpty(content) && (content = tablixConstants.jv), !isCompositeGroup) {
                    var metadata = this.rowNavigator.getRowHeaderMetadataColumn(rowHeader), urlType = (0, 
                    tablixUtils1.MN)(metadata, content);
                    if (urlType !== urlUtils.av.NONE) {
                        var hyperlink = (0, Utility.HZ)(rowHeader.valueFormatted);
                        iconName = (0, PivotTableBinderUtils.RP)(this.formattingProperties.rowHeaders.urlIcon, urlType), 
                        contentBinding = (0, PivotTableBinderUtils.RD)(content, hyperlink, iconName, function(url, event) {
                            return _this.binderOptions.onHyperlinkClicked(url, event);
                        });
                    } else if ((0, tablixUtils1.Or)(rowHeader, metadata)) {
                        var altText = tablixProperties.FX.PropAltTextValue.getValue(rowHeader.objects), gridFormatting = this.formattingProperties.grid;
                        contentBinding = (0, PivotTableBinderUtils.D2)(content, gridFormatting.imageHeight, gridFormatting.imageWidth, altText);
                    }
                }
                contentBinding = contentBinding ? {
                    children: [ contentBinding ],
                    classNames: [],
                    styleProperties: {},
                    attributes: {}
                } : {
                    content,
                    classNames: [],
                    styleProperties: {},
                    attributes: {}
                };
                var indicatorBinding, expandCollapseButtonBinding = this.getExpandCollapseButtonBinding(rowHeader, isSecondaryRowHeader), isSteppedLayout = this.formattingProperties.rowHeaders.steppedLayout;
                if (!forMeasure && this.selectionManager.isRowHeaderIndicatorOn(rowHeader, isSteppedLayout)) {
                    var borderInfo = this.getBorderInfo(rowHeader.position.row.isFirst, rowHeader.position.row.isLast, rowHeader.position.column.isFirst, rowHeader.position.column.isLast, !0, pivotTableControlTypes.p0.MatrixRowHeader), isNextRowHeaderIndicatorOn = nextRowHeader && this.selectionManager.isRowHeaderIndicatorOn(nextRowHeader, isSteppedLayout);
                    indicatorBinding = {
                        attributes: {},
                        classNames: [],
                        styleProperties: {
                            width: "100%",
                            top: borderInfo.weightTop + "px",
                            bottom: isNextRowHeaderIndicatorOn ? "0" : borderInfo.weightBottom + "px",
                            left: borderInfo.weightLeft + "px",
                            position: "absolute",
                            "box-sizing": "border-box",
                            overflow: "hidden",
                            "pointer-events": "none"
                        },
                        children: [ {
                            tagName: "svg",
                            attributes: {
                                "aria-label": this.hostServices.getLocalizedString("Visual_DataPoint_Selected"),
                                height: "100%",
                                width: "100%"
                            },
                            classNames: [],
                            styleProperties: {
                                left: "0",
                                top: "0",
                                position: "absolute"
                            },
                            children: [ {
                                tagName: "line",
                                attributes: {
                                    x1: "1",
                                    y1: "0",
                                    x2: "1",
                                    y2: "100%",
                                    stroke: "white",
                                    "stroke-width": "2"
                                },
                                classNames: [],
                                styleProperties: {}
                            }, {
                                tagName: "line",
                                attributes: {
                                    x1: "3",
                                    y1: "0",
                                    x2: "3",
                                    y2: "100%",
                                    stroke: "black",
                                    "stroke-width": "2"
                                },
                                classNames: [],
                                styleProperties: {}
                            } ]
                        } ]
                    }, this.selectionManager.getIndicatorStyle() === pivotTableSelectionManager.D.RowHeader ? indicatorBinding.children[0].attributes["aria-label"] = this.hostServices.getLocalizedString("Visual_DataPoint_Selected") : indicatorBinding.children[0].attributes["aria-hidden"] = "true";
                }
                expandCollapseButtonBinding || indicatorBinding ? (cellBinding = {
                    attributes: {},
                    classNames: [],
                    styleProperties: {},
                    children: [ contentBinding ]
                }, expandCollapseButtonBinding && (contentBinding.classNames.push("expandableContent"), 
                cellBinding.classNames.push("expandableCell"), cellBinding.children.unshift(expandCollapseButtonBinding)), 
                indicatorBinding && cellBinding.children.push(indicatorBinding)) : cellBinding = contentBinding;
                var virtualPosition, hasContent = !_.isEmpty(null == content ? void 0 : content.trim());
                return cellWithReferencePosition && ((virtualPosition = new tablixUtils1.ri).row = cellWithReferencePosition.position.row, 
                virtualPosition.column = rowHeader.position.column), _.assign(cellBinding.styleProperties, this.getRowHeaderStyleAttributes(rowHeader, forMeasure, hasContent, columnWidth, cellWithReferencePosition, virtualPosition)), 
                this.addRowHeaderClasses(rowHeader, !!iconName, contentBinding.classNames, cellBinding.classNames), 
                this.isA11yMatrix && (cellBinding.attributes || (cellBinding.attributes = {}), cellBinding.attributes.role = "rowheader"), 
                onObject && (null != rowHeader.children ? (cellBinding.classNames.push(htmlSubSelectionHelper.cy), 
                cellBinding.attributes[htmlSubSelectionHelper.Ez] = "".concat("rowHeaders"), cellBinding.attributes[htmlSubSelectionHelper.QZ] = "".concat(1), 
                cellBinding.attributes[htmlSubSelectionHelper.CK] = "Visual_Tablix_RowHeaders") : rowHeader.isSubtotal && (rowHeader.position.row.isFirst ? (cellBinding.classNames.push(htmlSubSelectionHelper.cy), 
                cellBinding.attributes[htmlSubSelectionHelper.Ez] = "".concat("total-row"), cellBinding.attributes[htmlSubSelectionHelper.QZ] = "".concat(1), 
                cellBinding.attributes[htmlSubSelectionHelper.CK] = "Visual_Tablix_Matrix_Row_TotalGrand") : (cellBinding.classNames.push(htmlSubSelectionHelper.cy), 
                cellBinding.attributes[htmlSubSelectionHelper.Ez] = "".concat("subtotal-row-labels"), 
                cellBinding.attributes[htmlSubSelectionHelper.QZ] = "".concat(1), cellBinding.attributes[htmlSubSelectionHelper.CK] = "Visual_Subtotal_Label", 
                cellBinding.attributes[htmlSubSelectionHelper.kv] = JSON.stringify({
                    reference: pivotTable_capabilities.t.subTotals.rowSubtotalsLabel,
                    style: 3
                }).replace(/\"/g, "&quot;")))), cellBinding;
            }, PivotTableBinder.prototype.getExpandCollapseButtonBinding = function(header, isHidden) {
                var _this = this, buttonSize = this.getRowsExpandCollapseButtonSize(header);
                if (0 !== buttonSize) {
                    var content, clickHandler, classes = [ "expandCollapseButton" ];
                    if (void 0 === header.isCollapsed || isHidden) content = ""; else {
                        var glyphClass = header.isCollapsed ? "pbi-glyph-explore-content-single" : "pbi-glyph-collapse-content-single", label = this.hostServices.getLocalizedString(header.isCollapsed ? "FieldListProperty_Collapsed" : "FieldListProperty_Expanded");
                        content = '<i role="button" aria-label="'.concat(label, '" class="glyphicon ').concat(glyphClass, '"></i>'), 
                        this.isExpandCollapseEnabled ? (classes.push("clickable"), clickHandler = function(event) {
                            _this.binderOptions.onRowHeaderExpansionChange(header, !header.isCollapsed), event.stopPropagation();
                        }) : classes.push("disabled");
                    }
                    return {
                        content,
                        classNames: classes,
                        styleProperties: {
                            width: buttonSize + tablixConstants.wH,
                            height: buttonSize + tablixConstants.wH,
                            color: this.formattingProperties.rowHeaders.expandCollapseButtonsColor,
                            "font-size": this.expandCollapseButtonFontInfo.fontProperties.size.px + tablixConstants.wH
                        },
                        attributes: {},
                        clickHandler
                    };
                }
            }, PivotTableBinder.prototype.getRowsExpandCollapseButtonSize = function(header) {
                return this.formattingProperties.rowHeaders.showExpandCollapseButtons && header.hierarchyLevel && (header.hierarchyLevel.canBeExpanded || header.level && this.formattingProperties.rowHeaders.steppedLayout) ? this.expandCollapseButtonFontInfo.measuredFontHeight : 0;
            }, PivotTableBinder.prototype.getColumnHeaderBinding = function(columnHeader, forMeasure, isA11yTablix, onObject, nextColumnHeader, columnWidth) {
                var content = (0, Utility.HZ)(this.getColumnHeaderLabel(columnHeader));
                this.formattingProperties.columnHeaders.wordWrap && (content = (0, PivotTableBinderUtils.rP)(content)), 
                _.isEmpty(content) && (content = tablixConstants.jv);
                var hasContent = !_.isEmpty(null == content ? void 0 : content.trim()), cellStyle = this.getColumnHeaderStyle(columnHeader, this.getColumnHeaderFontInfo(columnHeader), forMeasure, hasContent), originalBottom = cellStyle.getExtraBottom();
                columnHeader.position.row.isLast && (cellStyle.paddings.bottom += (0, PivotTableBinderUtils.tO)(this.glyphFontInfo.measuredFontHeight));
                var iconName, metadata = this.columnNavigator.getColumnHeaderMetadataColumn(columnHeader), urlType = (0, 
                tablixUtils1.MN)(metadata, content), contentBinding = {
                    tagName: "div",
                    content,
                    attributes: {},
                    classNames: [ this.formattingProperties.columnHeaders.wordWrap ? PivotTableBinderUtils.n2 : PivotTableBinderUtils.wV ],
                    styleProperties: {}
                };
                if (urlType !== urlUtils.av.NONE) {
                    var hyperlink = (0, Utility.HZ)(columnHeader.valueFormatted);
                    iconName = (0, PivotTableBinderUtils.RP)(this.formattingProperties.columnHeaders.urlIcon, urlType), 
                    contentBinding = (0, PivotTableBinderUtils.RD)(contentBinding, hyperlink, iconName, this.binderOptions.onHyperlinkClicked);
                } else if ((0, tablixUtils1.Or)(columnHeader, metadata)) {
                    var altText = tablixProperties.FX.PropAltTextValue.getValue(columnHeader.objects), gridFormatting = this.formattingProperties.grid;
                    contentBinding = (0, PivotTableBinderUtils.D2)(content, gridFormatting.imageHeight, gridFormatting.imageWidth, altText);
                }
                var classes = this.getColumnHeaderClasses(columnHeader, !!iconName), attributes = {};
                onObject && (classes.push(htmlSubSelectionHelper.cy), attributes[htmlSubSelectionHelper.QZ] = "".concat(1), 
                attributes[htmlSubSelectionHelper.Ez] = "".concat("columnHeaders"), attributes[htmlSubSelectionHelper.CK] = "Visual_Tablix_ColumnHeaders");
                var containerBinding = {
                    tagName: "div",
                    children: [ contentBinding ],
                    classNames: classes,
                    styleProperties: this.getColumnHeaderStyleAttributes(columnHeader, cellStyle, columnWidth),
                    attributes
                };
                if (columnHeader.position.row.isLast) {
                    var showFuture = this.binderOptions.sortingEnabled && this.sortingManager.isColumnHeaderSortable(columnHeader), sortDirection = this.sortingManager.getColumnHeaderSortDirection(columnHeader), sortIcon = (0, 
                    PivotTableBinderUtils.Km)(sortDirection, this.binderOptions.sortIconEnabled, showFuture, pivotTableSortingManager.S.getNextSortDirection(sortDirection, metadata), originalBottom, this.glyphFontInfo.textProperties.fontSize, this.hostServices);
                    containerBinding.children.push(sortIcon), 1 === sortDirection ? containerBinding.attributes["aria-sort"] = "ascending" : 2 === sortDirection && (containerBinding.attributes["aria-sort"] = "descending");
                }
                if (!forMeasure && this.selectionManager.isColumnHeaderIndicatorOn(columnHeader)) {
                    var borderInfo = this.getBorderInfo(columnHeader.position.row.isFirst, columnHeader.position.row.isLast, !1, columnHeader.position.column.isLast, !0, pivotTableControlTypes.p0.Header), isNextRowHeaderIndicatorOn = nextColumnHeader && this.selectionManager.isColumnHeaderIndicatorOn(nextColumnHeader), indicatorBinding = {
                        attributes: {},
                        classNames: [],
                        styleProperties: {
                            height: "5px",
                            left: borderInfo.weightLeft + "px",
                            right: isNextRowHeaderIndicatorOn ? "0" : borderInfo.weightRight + "px",
                            bottom: borderInfo.weightBottom + "px",
                            position: "absolute",
                            "box-sizing": "border-box",
                            overflow: "hidden",
                            "pointer-events": "none"
                        },
                        children: [ {
                            tagName: "svg",
                            attributes: {
                                "aria-label": this.hostServices.getLocalizedString("Visual_DataPoint_Selected"),
                                height: "100%",
                                width: "100%"
                            },
                            classNames: [],
                            styleProperties: {
                                left: "0",
                                top: "0",
                                position: "absolute"
                            },
                            children: [ {
                                tagName: "line",
                                attributes: {
                                    x1: "0",
                                    y1: "2",
                                    x2: "100%",
                                    y2: "2",
                                    stroke: "black",
                                    "stroke-width": "2"
                                },
                                classNames: [],
                                styleProperties: {}
                            }, {
                                tagName: "line",
                                attributes: {
                                    x1: "0",
                                    y1: "4",
                                    x2: "100%",
                                    y2: "4",
                                    stroke: "white",
                                    "stroke-width": "2"
                                },
                                classNames: [],
                                styleProperties: {}
                            } ]
                        } ]
                    };
                    this.selectionManager.getIndicatorStyle() === pivotTableSelectionManager.D.ColumnHeader ? indicatorBinding.children[0].attributes["aria-label"] = this.hostServices.getLocalizedString("Visual_DataPoint_Selected") : indicatorBinding.children[0].attributes["aria-hidden"] = "true", 
                    containerBinding.children.push(indicatorBinding);
                }
                return containerBinding;
            }, PivotTableBinder.prototype.getBodyCellBinding = function(bodyCell, forMeasure, rowHeight, columnWidth, isA11yTable, onObject, nextBodyCell) {
                var urlIconName, content = (0, Utility.HZ)(this.getBodyCellContent(bodyCell)), hasContent = !_.isEmpty(null == content ? void 0 : content.trim()), cellStyle = this.getBodyCellStyle(bodyCell, this.getBodyCellFontInfo(bodyCell), forMeasure, hasContent);
                this.formattingProperties.values.underline && hasContent && (cellStyle.textDecoration = CssConstants.f0);
                var contentBinding, columnMetadata = bodyCell.columnMetadata, dataBarsSettings = columnMetadata && this.columnsDataBarsSettings[columnMetadata.queryName], applyNumericDataBars = this.shouldApplyDataBars(dataBarsSettings, bodyCell), columnFormatting = columnMetadata && this.formattingProperties.columnFormatting[columnMetadata.queryName], iconSettings = (0, 
                structuralType.TS)(columnFormatting && columnFormatting.icon, bodyCell.icon), hyperlink = bodyCell.hyperlink;
                if (iconSettings && "IconOnly" === iconSettings.layout) content = ""; else if (_.isEmpty(content) && (content = tablixConstants.jv), 
                bodyCell.isKpi) content = (0, PivotTableBinderUtils.kJ)(bodyCell.columnMetadata.kpi, bodyCell.textContent); else if (applyNumericDataBars && dataBarsSettings.hideText) content = forMeasure ? tablixConstants.jv : ""; else {
                    this.formattingProperties.values.wordWrap && (content = (0, PivotTableBinderUtils.rP)(content));
                    var urlType = (0, tablixUtils1.MN)(bodyCell.columnMetadata, content);
                    if (urlType !== urlUtils.av.NONE) urlIconName = (0, PivotTableBinderUtils.RP)(this.formattingProperties.values.urlIcon, urlType), 
                    contentBinding = (0, PivotTableBinderUtils.RD)(content, (0, Utility.HZ)(bodyCell.textContent), urlIconName, this.binderOptions.onHyperlinkClicked), 
                    hyperlink = void 0; else if (this.isImage(bodyCell)) {
                        var imgSrc = Utility.b$.encodeUriForImageDataSvg(bodyCell.textContent), gridFormatting = this.formattingProperties.grid;
                        contentBinding = (0, PivotTableBinderUtils.D2)(imgSrc, gridFormatting.imageHeight, gridFormatting.imageWidth, (0, 
                        Utility.HZ)(bodyCell.altText));
                    } else this.isSparkline(bodyCell) && (content = forMeasure ? tablixConstants.jv : "");
                }
                this.binderOptions.hyperlinksEnabled && (contentBinding || "" !== content && content !== tablixConstants.jv) && hyperlink && (0, 
                urlUtils.MN)(hyperlink) !== urlUtils.av.NONE && (contentBinding = (0, PivotTableBinderUtils.RD)(contentBinding || content, (0, 
                Utility.HZ)(hyperlink), null, this.binderOptions.onHyperlinkClicked, !0, !0));
                var iconSize, indicatorBinding, containerBinding = {
                    tagName: "div",
                    classNames: [],
                    styleProperties: {},
                    attributes: {}
                };
                if (contentBinding ? containerBinding.children = [ contentBinding ] : containerBinding.content = content, 
                contentBinding = containerBinding, iconSettings && (iconSize = this.getBodyCellFontInfo(bodyCell).measuredFontHeight, 
                containerBinding = (0, PivotTableBinderUtils.Ps)(iconSettings, iconSize, contentBinding, this.hostServices)), 
                applyNumericDataBars && !forMeasure && (containerBinding = (0, pivotTableDataBarsUtils.JF)(containerBinding, dataBarsSettings, cellStyle, bodyCell.dataPoint, this.hostServices)), 
                !forMeasure && this.isSparkline(bodyCell) && (debug.fF.assert(function() {
                    return null != rowHeight && null != columnWidth;
                }, "height and width should be defined for sparkline rendering"), containerBinding = (0, 
                pivotTableSparklineUtils.MV)(containerBinding, this.sparklineSettings[bodyCell.columnMetadata.queryName], cellStyle, bodyCell.dataPoint, rowHeight, columnWidth, iconSettings, iconSize)), 
                this.isA11yMatrix && (bodyCell.fontColor || bodyCell.backColor)) {
                    var additionalMessage = this.hostServices.getLocalizedString(tablixConstants.Sl);
                    _.isEmpty(containerBinding.children) ? containerBinding = {
                        attributes: {},
                        classNames: [],
                        styleProperties: {},
                        children: [ containerBinding, {
                            attributes: {},
                            classNames: [ "visually-hidden" ],
                            styleProperties: {},
                            content: additionalMessage
                        } ]
                    } : containerBinding.children.push({
                        attributes: {},
                        classNames: [ "visually-hidden" ],
                        styleProperties: {},
                        content: additionalMessage
                    });
                }
                if (this.isA11yMatrix && !forMeasure && this.selectionManager.isBodyCellIndicatorOn(bodyCell)) {
                    var steppedLayout = this.formattingProperties.rowHeaders.steppedLayout, borderInfo = this.getBorderInfo(bodyCell.position.row.isFirst, bodyCell.position.row.isLast && (!steppedLayout || steppedLayout && !this.formattingProperties.general.rowSubtotals) || steppedLayout && bodyCell.isRowGrandTotal, bodyCell.position.column.isFirst, bodyCell.position.column.isLast, !0, pivotTableControlTypes.p0.Body), isNextBodyCellIndicatorOn = nextBodyCell && this.selectionManager.isBodyCellIndicatorOn(nextBodyCell);
                    indicatorBinding = {
                        attributes: {},
                        classNames: [],
                        styleProperties: {
                            width: "100%",
                            top: borderInfo.weightTop + "px",
                            bottom: isNextBodyCellIndicatorOn ? "0" : borderInfo.weightBottom + "px",
                            left: borderInfo.weightLeft + "px",
                            position: "absolute",
                            "box-sizing": "border-box",
                            overflow: "hidden",
                            "pointer-events": "none"
                        },
                        children: [ {
                            tagName: "svg",
                            attributes: {
                                "aria-label": this.hostServices.getLocalizedString("Visual_DataPoint_Selected"),
                                height: "100%",
                                width: "100%"
                            },
                            classNames: [],
                            styleProperties: {
                                left: "0",
                                top: "0",
                                position: "absolute"
                            },
                            children: [ {
                                tagName: "line",
                                attributes: {
                                    x1: "1",
                                    y1: "0",
                                    x2: "1",
                                    y2: "100%",
                                    stroke: "white",
                                    "stroke-width": "2"
                                },
                                classNames: [],
                                styleProperties: {}
                            }, {
                                tagName: "line",
                                attributes: {
                                    x1: "3",
                                    y1: "0",
                                    x2: "3",
                                    y2: "100%",
                                    stroke: "black",
                                    "stroke-width": "2"
                                },
                                classNames: [],
                                styleProperties: {}
                            } ]
                        } ]
                    }, containerBinding.content ? containerBinding = {
                        attributes: {},
                        classNames: [],
                        styleProperties: {},
                        children: [ containerBinding, indicatorBinding ]
                    } : (containerBinding.children || (containerBinding.children = []), containerBinding.children.push(indicatorBinding));
                }
                return onObject && (bodyCell.isGrandTotal ? (containerBinding.classNames.push(htmlSubSelectionHelper.cy), 
                containerBinding.attributes[htmlSubSelectionHelper.QZ] = "".concat(1), bodyCell.isColumnGrandTotal ? (containerBinding.attributes[htmlSubSelectionHelper.Ez] = "".concat("total-column"), 
                containerBinding.attributes[htmlSubSelectionHelper.CK] = "Visual_TotalColumn") : (containerBinding.attributes[htmlSubSelectionHelper.Ez] = "".concat("total-row"), 
                containerBinding.attributes[htmlSubSelectionHelper.CK] = "Visual_TotalRow")) : (bodyCell.isRowSubTotal || bodyCell.isColumnSubTotal) && (containerBinding.classNames.push(htmlSubSelectionHelper.cy), 
                containerBinding.attributes[htmlSubSelectionHelper.QZ] = "".concat(1), bodyCell.isColumnSubTotal ? (containerBinding.attributes[htmlSubSelectionHelper.Ez] = "".concat("subtotal-column"), 
                containerBinding.attributes[htmlSubSelectionHelper.CK] = "Visual_SubtotalColumn") : (containerBinding.classNames.push(htmlSubSelectionHelper.cy), 
                containerBinding.attributes[htmlSubSelectionHelper.Ez] = "".concat("subtotal-row"), 
                containerBinding.attributes[htmlSubSelectionHelper.CK] = "Visual_SubtotalRow"))), 
                this.addBodyCellClasses(bodyCell, !!urlIconName, contentBinding.classNames, containerBinding.classNames), 
                this.addBodyCellStyleAttributes(bodyCell, cellStyle, contentBinding.styleProperties, containerBinding.styleProperties, columnWidth), 
                containerBinding;
            }, PivotTableBinder.prototype.getCornerCellBinding = function(cornerCell, forMeasure, a11yMatrixFS, onObject, columnWidth) {
                var content = (0, Utility.HZ)(this.getCornerCellLabel(cornerCell)), attributes = {}, classes = this.getCornerCellClasses(cornerCell);
                onObject && (classes.push(htmlSubSelectionHelper.cy), attributes[htmlSubSelectionHelper.Ez] = "".concat("columnHeaders"), 
                attributes[htmlSubSelectionHelper.QZ] = "".concat(1), attributes[htmlSubSelectionHelper.CK] = "Visual_Tablix_ColumnHeaders"), 
                attributes.columnLevel = this.rowNavigator.getColumnLevel(cornerCell).toString(), 
                attributes.rowLevel = this.rowNavigator.getRowLevel(cornerCell).toString(), this.formattingProperties.columnHeaders.wordWrap && (content = (0, 
                PivotTableBinderUtils.rP)(content)), _.isEmpty(content) && (content = tablixConstants.jv);
                var hasContent = !_.isEmpty(null == content ? void 0 : content.trim()), cellStyle = this.getCornerCellStyle(cornerCell, this.getCornerCellFontInfo(), forMeasure, hasContent);
                if (cornerCell.position.row.isLast) {
                    var showFuture = this.binderOptions.sortingEnabled && this.sortingManager.isCornerSortable(cornerCell), cornerCellSortDirection = this.sortingManager.getCornerSortDirection(cornerCell), sortIcon = (0, 
                    PivotTableBinderUtils.Km)(cornerCellSortDirection, this.binderOptions.sortIconEnabled, showFuture, cornerCellSortDirection ?? 1, cellStyle.getExtraBottom(), this.glyphFontInfo.textProperties.fontSize, this.hostServices);
                    content += pivotTablePage.bG.build(sortIcon), cellStyle.paddings.bottom += (0, PivotTableBinderUtils.tO)(this.glyphFontInfo.measuredFontHeight), 
                    1 === cornerCellSortDirection ? attributes["aria-sort"] = "ascending" : 2 === cornerCellSortDirection && (attributes["aria-sort"] = "descending");
                }
                return {
                    content,
                    classNames: classes,
                    styleProperties: cellStyle.getAttributes(!1, this.isA11yMatrix, this.isA11yMatrix, columnWidth),
                    attributes
                };
            }, PivotTableBinder.prototype.getApproximateRowHeaderWidth = function(rowHeader) {
                var _a, _b, _c, _d, approximateWidth, metadata = this.rowNavigator.getRowHeaderMetadataColumn(rowHeader), content = this.getRowHeaderLabel(rowHeader), urlType = (0, 
                tablixUtils1.MN)(metadata, content), fontHeight = this.rowHeaderFontInfo.fontProperties.size.px;
                if (urlType !== urlUtils.av.NONE && (0, PivotTableBinderUtils.RP)(this.formattingProperties.rowHeaders.urlIcon, urlType)) approximateWidth = fontHeight; else if ((0, 
                tablixUtils1.Or)(rowHeader, metadata)) approximateWidth = this.formattingProperties.grid.imageWidth; else {
                    var rowHeaderFontInfo = this.getRowHeaderFontInfo(rowHeader), cellStyle = this.getRowHeaderStyle(rowHeader, rowHeaderFontInfo, !0, !0, void 0, void 0);
                    approximateWidth = (this.formattingProperties.rowHeaders.wordWrap ? (0, PivotTableBinderUtils.JT)(content, rowHeaderFontInfo.textProperties) : (0, 
                    PivotTableBinderUtils.X1)(content, rowHeaderFontInfo.textProperties)) + (null !== (_b = null === (_a = cellStyle.borders.left) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_c = cellStyle.borders.right) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0);
                }
                var buttonSize = this.getRowsExpandCollapseButtonSize(rowHeader);
                return buttonSize > 0 && (approximateWidth += buttonSize + PivotTableBinderUtils.s$), 
                approximateWidth;
            }, PivotTableBinder.prototype.getApproximateColumnHeaderWidth = function(columnHeader) {
                var _a, _b, _c, _d, metadata = this.columnNavigator.getColumnHeaderMetadataColumn(columnHeader), content = this.getColumnHeaderLabel(columnHeader), urlType = (0, 
                tablixUtils1.MN)(metadata, content);
                if (urlType !== urlUtils.av.NONE && (0, PivotTableBinderUtils.RP)(this.formattingProperties.columnHeaders.urlIcon, urlType)) return this.columnHeaderFontInfo.fontProperties.size.px;
                if ((0, tablixUtils1.Or)(columnHeader, metadata)) return this.formattingProperties.grid.imageWidth;
                var columnHeaderFontInfo = this.getColumnHeaderFontInfo(columnHeader), cellStyle = this.getColumnHeaderStyle(columnHeader, columnHeaderFontInfo, !0, !0);
                return (this.formattingProperties.columnHeaders.wordWrap ? (0, PivotTableBinderUtils.JT)(content, columnHeaderFontInfo.textProperties) : (0, 
                PivotTableBinderUtils.X1)(content, columnHeaderFontInfo.textProperties)) + (null !== (_b = null === (_a = cellStyle.borders.left) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_c = cellStyle.borders.right) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0);
            }, PivotTableBinder.prototype.getApproximateBodyCellWidth = function(bodyCell) {
                var _a, _b, _c, _d, iconSize = 0;
                if (bodyCell.icon) {
                    if (iconSize = this.getBodyCellFontInfo(bodyCell).measuredFontHeight, "IconOnly" === bodyCell.icon.layout) return iconSize;
                    iconSize += PivotTableBinderUtils.MO;
                }
                if (bodyCell.isKpi) return iconSize + this.valueFontInfo.fontProperties.size.px;
                var dataBarsSettings = bodyCell.columnMetadata && this.columnsDataBarsSettings[bodyCell.columnMetadata.queryName];
                if (this.shouldApplyDataBars(dataBarsSettings, bodyCell) && dataBarsSettings.hideText) return iconSize;
                var content = this.getBodyCellContent(bodyCell);
                if (this.isUrlIcon(bodyCell, content)) return iconSize + this.valueFontInfo.fontProperties.size.px;
                if (this.isImage(bodyCell)) return iconSize + this.formattingProperties.grid.imageWidth;
                if (this.isSparkline(bodyCell)) return iconSize;
                var bodyCellFontInfo = this.getBodyCellFontInfo(bodyCell), cellStyle = this.getBodyCellStyle(bodyCell, bodyCellFontInfo, !0, !0);
                return iconSize + (this.formattingProperties.values.wordWrap ? (0, PivotTableBinderUtils.JT)(content, bodyCellFontInfo.textProperties) : (0, 
                PivotTableBinderUtils.X1)(content, bodyCellFontInfo.textProperties)) + (null !== (_b = null === (_a = cellStyle.borders.left) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_c = cellStyle.borders.right) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0);
            }, PivotTableBinder.prototype.getApproximateCornerCellWidth = function(cornerCell) {
                var _a, _b, _c, _d, cornerCellFontInfo = this.getCornerCellFontInfo(), cellStyle = this.getCornerCellStyle(cornerCell, cornerCellFontInfo, !0, !0);
                return (this.formattingProperties.columnHeaders.wordWrap ? (0, PivotTableBinderUtils.JT)(this.getCornerCellLabel(cornerCell), cornerCellFontInfo.textProperties) : (0, 
                PivotTableBinderUtils.X1)(this.getCornerCellLabel(cornerCell), cornerCellFontInfo.textProperties)) + (null !== (_b = null === (_a = cellStyle.borders.left) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_c = cellStyle.borders.right) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0);
            }, PivotTableBinder.prototype.getApproximateRowHeaderHeight = function(rowHeader, width) {
                var _a, _b, _c, _d, contentHeight, metadata = this.rowNavigator.getRowHeaderMetadataColumn(rowHeader), content = this.getRowHeaderLabel(rowHeader), urlType = (0, 
                tablixUtils1.MN)(metadata, content), expandCollapseButtonSize = this.getRowsExpandCollapseButtonSize(rowHeader);
                if (urlType !== urlUtils.av.NONE && (0, PivotTableBinderUtils.RP)(this.formattingProperties.rowHeaders.urlIcon, urlType)) contentHeight = this.rowHeaderFontInfo.fontProperties.size.px; else if ((0, 
                tablixUtils1.Or)(rowHeader, metadata)) contentHeight = this.formattingProperties.grid.imageHeight; else {
                    var lineCount, rowHeaderInfo = this.getRowHeaderFontInfo(rowHeader);
                    width -= this.getRowsExpandCollapseButtonSize(rowHeader);
                    var cellStyle = this.getRowHeaderStyle(rowHeader, rowHeaderInfo, !0, !0, void 0, void 0);
                    lineCount = this.formattingProperties.rowHeaders.wordWrap ? (0, PivotTableBinderUtils.do)(content, (0, 
                    PivotTableBinderUtils.x9)(width, cellStyle), rowHeaderInfo.textProperties).length : 1;
                    var topBorder = null !== (_b = null === (_a = cellStyle.borders.top) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0, bottomBorder = null !== (_d = null === (_c = cellStyle.borders.bottom) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0;
                    contentHeight = rowHeaderInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
                }
                return void 0 === rowHeader.isCollapsed ? contentHeight : Math.max(expandCollapseButtonSize, contentHeight);
            }, PivotTableBinder.prototype.getApproximateColumnHeaderHeight = function(columnHeader, width) {
                var _a, _b, _c, _d, lineCount, metadata = this.columnNavigator.getColumnHeaderMetadataColumn(columnHeader), content = this.getColumnHeaderLabel(columnHeader), urlType = (0, 
                tablixUtils1.MN)(metadata, content);
                if (urlType !== urlUtils.av.NONE && (0, PivotTableBinderUtils.RP)(this.formattingProperties.columnHeaders.urlIcon, urlType)) return this.columnHeaderFontInfo.fontProperties.size.px;
                if ((0, tablixUtils1.Or)(columnHeader, metadata)) return this.formattingProperties.grid.imageHeight;
                var columnHeaderInfo = this.getColumnHeaderFontInfo(columnHeader), cellStyle = this.getColumnHeaderStyle(columnHeader, columnHeaderInfo, !0, !0);
                lineCount = this.formattingProperties.columnHeaders.wordWrap ? (0, PivotTableBinderUtils.do)(content, (0, 
                PivotTableBinderUtils.x9)(width, cellStyle), columnHeaderInfo.textProperties).length : 1;
                var topBorder = null !== (_b = null === (_a = cellStyle.borders.top) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0, bottomBorder = null !== (_d = null === (_c = cellStyle.borders.bottom) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0;
                return columnHeaderInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, PivotTableBinder.prototype.getApproximateBodyCellHeight = function(bodyCell, width) {
                var _a, _b, _c, _d, bodyCellInfo = this.getBodyCellFontInfo(bodyCell);
                if (bodyCell.icon && "IconOnly" === bodyCell.icon.layout) return bodyCellInfo.measuredFontHeight;
                if (bodyCell.isKpi) return this.valueFontInfo.fontProperties.size.px;
                var lineCount, content = this.getBodyCellContent(bodyCell);
                if (this.isUrlIcon(bodyCell, content)) return this.valueFontInfo.fontProperties.size.px;
                if (this.isImage(bodyCell)) return this.formattingProperties.grid.imageHeight;
                if (this.isSparkline(bodyCell)) return bodyCellInfo.measuredFontHeight;
                var cellStyle = this.getBodyCellStyle(bodyCell, bodyCellInfo, !0, !0);
                this.formattingProperties.values.wordWrap && null != width ? (bodyCell.icon && (width -= bodyCellInfo.measuredFontHeight + PivotTableBinderUtils.MO), 
                lineCount = (0, PivotTableBinderUtils.do)(content, (0, PivotTableBinderUtils.x9)(width, cellStyle), bodyCellInfo.textProperties).length) : lineCount = 1;
                var topBorder = null !== (_b = null === (_a = cellStyle.borders.top) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0, bottomBorder = null !== (_d = null === (_c = cellStyle.borders.bottom) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0;
                return bodyCellInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, PivotTableBinder.prototype.getApproximateCornerCellHeight = function(cornerCell, width) {
                var _a, _b, _c, _d, lineCount, cornerCellInfo = this.getCornerCellFontInfo(), cellStyle = this.getCornerCellStyle(cornerCell, cornerCellInfo, !0, !0);
                lineCount = this.formattingProperties.columnHeaders.wordWrap ? (0, PivotTableBinderUtils.do)(this.getCornerCellLabel(cornerCell), (0, 
                PivotTableBinderUtils.x9)(width, cellStyle), cornerCellInfo.textProperties).length : 1;
                var topBorder = null !== (_b = null === (_a = cellStyle.borders.top) || void 0 === _a ? void 0 : _a.weight) && void 0 !== _b ? _b : 0, bottomBorder = null !== (_d = null === (_c = cellStyle.borders.bottom) || void 0 === _c ? void 0 : _c.weight) && void 0 !== _d ? _d : 0;
                return cornerCellInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, PivotTableBinder.prototype.blankRowsEnabled = function() {
                return this.formattingProperties.blankRows.showBlankRows;
            }, PivotTableBinder.prototype.getSectionProperties = function(section) {
                var sectionProperties;
                switch (section) {
                  case pivotTableControlTypes.p0.Header:
                    sectionProperties = this.formattingProperties.columnHeaders;
                    break;

                  case pivotTableControlTypes.p0.Body:
                    sectionProperties = this.formattingProperties.values;
                    break;

                  case pivotTableControlTypes.p0.MatrixRowHeader:
                    sectionProperties = this.formattingProperties.rowHeaders;
                    break;

                  default:
                    debug.fF.assertNever(section);
                }
                return sectionProperties;
            }, PivotTableBinder.prototype.getBorderInfo = function(isFirstRow, isLastRow, isFirstColumn, isLastColumn, isHighlighted, section) {
                var _a, _b, _c, _d, typeTop, typeRight, typeBottom, typeLeft, colorTop, colorRight, colorBottom, colorLeft, weightTop = 0, weightRight = 0, weightBottom = 0, weightLeft = 0, sectionProperties = this.getSectionProperties(section), outlineWeight = null !== (_a = sectionProperties.outlineWeight) && void 0 !== _a ? _a : this.formattingProperties.grid.outlineWeight, outlineColor = null !== (_b = sectionProperties.outlineColor) && void 0 !== _b ? _b : this.formattingProperties.grid.outlineColor, gridHorizontalColor = null === (_c = this.formattingProperties.grid) || void 0 === _c ? void 0 : _c.gridHorizontalColor, gridVerticalColor = null === (_d = this.formattingProperties.grid) || void 0 === _d ? void 0 : _d.gridVerticalColor, gridHorizontalColorLightened = (0, 
                color.ok)("#FFFFFF", .7, gridHorizontalColor), gridVerticalColorLightened = (0, 
                color.ok)("#FFFFFF", .7, gridVerticalColor);
                return isFirstRow && (0, outline.yo)(sectionProperties.outline) && (weightTop = outlineWeight, 
                typeTop = tablixUtils1.Pb.Outline, colorTop = outlineColor), isLastColumn && (0, 
                outline.BK)(sectionProperties.outline) ? (weightRight = outlineWeight, typeRight = tablixUtils1.Pb.Outline, 
                colorRight = outlineColor) : !isLastColumn && this.formattingProperties.grid.gridVertical && (weightRight = this.formattingProperties.grid.gridVerticalWeight, 
                typeRight = tablixUtils1.Pb.Gridline, colorRight = this.selectionManager.isSelectionEmpty() ? gridVerticalColor : gridVerticalColorLightened), 
                isLastRow && (0, outline.mv)(sectionProperties.outline) ? (weightBottom = outlineWeight, 
                typeBottom = tablixUtils1.Pb.Outline, colorBottom = outlineColor) : !isLastRow && this.formattingProperties.grid.gridHorizontal && (weightBottom = this.formattingProperties.grid.gridHorizontalWeight, 
                typeBottom = tablixUtils1.Pb.Gridline, colorBottom = isHighlighted ? gridHorizontalColor : gridHorizontalColorLightened), 
                isFirstColumn && (0, outline.fs)(sectionProperties.outline) && (weightLeft = outlineWeight, 
                typeLeft = tablixUtils1.Pb.Outline, colorLeft = outlineColor), {
                    weightTop,
                    weightRight,
                    weightBottom,
                    weightLeft,
                    typeTop,
                    typeRight,
                    typeBottom,
                    typeLeft,
                    colorTop,
                    colorRight,
                    colorBottom,
                    colorLeft
                };
            }, PivotTableBinder.prototype.isUrlIcon = function(bodyCell, content) {
                var urlType = (0, tablixUtils1.MN)(bodyCell.columnMetadata, content);
                return urlType !== urlUtils.av.NONE && !!(0, PivotTableBinderUtils.RP)(this.formattingProperties.values.urlIcon, urlType);
            }, PivotTableBinder.prototype.getColumnHeaderFontInfo = function(header) {
                return matrixHierarchyNavigator.hc.isNodeGrandTotal(header) ? this.grandTotalColumnHeaderFontInfo : header.hasSubtotalStyle ? this.subtotalColumnHeaderFontInfo : this.specificColumnHeaderFontInfo[header.queryName] || this.columnHeaderFontInfo;
            }, PivotTableBinder.prototype.getRowHeaderFontInfo = function(header) {
                return matrixHierarchyNavigator.hc.isNodeGrandTotal(header) ? this.grandTotalRowHeaderFontInfo : header.hasSubtotalStyle ? this.subtotalRowHeaderFontInfo : this.rowHeaderFontInfo;
            }, PivotTableBinder.prototype.getBodyCellFontInfo = function(bodyCell) {
                return bodyCell.isColumnGrandTotal ? this.columnGrandTotalFontInfo : bodyCell.isRowGrandTotal ? this.rowGrandTotalFontInfo : bodyCell.isColumnSubTotal ? this.columnSubtotalFontInfo : bodyCell.isRowSubTotal || bodyCell.hasSubtotalStyle ? this.rowSubtotalFontInfo : this.valueFontInfo;
            }, PivotTableBinder.prototype.getCornerCellFontInfo = function() {
                return this.columnHeaderFontInfo;
            }, PivotTableBinder.prototype.addRowHeaderClasses = function(rowHeader, urlIcon, contentClasses, cellClasses) {
                var defaultAlignment, rowHeadersFormatting = this.formattingProperties.rowHeaders;
                if (contentClasses.push(rowHeadersFormatting.wordWrap ? PivotTableBinderUtils.n2 : PivotTableBinderUtils.wV), 
                urlIcon && contentClasses.push(tablixConstants.LU), this.binderOptions.interactivityIndicatorEnabled && this.binderOptions.selectionEnabled && pivotTableSelectionManager.l.hasIdentity(rowHeader) && cellClasses.push(PivotTableBinderUtils.VM), 
                urlIcon && (defaultAlignment = textAlignment.H.center), (0, PivotTableBinderUtils.aY)(rowHeadersFormatting.alignment, contentClasses, defaultAlignment), 
                this.isA11yMatrix) {
                    var isSteppedLayout = this.formattingProperties.rowHeaders.steppedLayout;
                    this.selectionManager.isRowHeaderHighlighted(rowHeader) ? (this.selectionManager.isRowHeaderIndicatorOn(rowHeader, isSteppedLayout) || this.selectionManager.isRowHeaderDarkened(rowHeader)) && cellClasses.push("cell-selected") : cellClasses.push("cell-unselected");
                }
            }, PivotTableBinder.prototype.getColumnHeaderClasses = function(columnHeader, urlIcon) {
                var classes = [], columnHeadersFormatting = this.formattingProperties.columnHeaders, columnFormatting = this.formattingProperties.columnFormatting[columnHeader.queryName];
                urlIcon && classes.push(tablixConstants.LU);
                var defaultAlignment, headerSelectable = pivotTableSelectionManager.l.hasIdentity(columnHeader), headerSortable = this.sortingManager.isColumnHeaderSortable(columnHeader);
                return debug.fF.assert(function() {
                    return !(headerSelectable && headerSortable);
                }, "getColumnHeaderClasses: header selectable and sortable"), this.binderOptions.interactivityIndicatorEnabled && (this.binderOptions.selectionEnabled && headerSelectable && !headerSortable || this.binderOptions.sortingEnabled && headerSortable && !headerSelectable) && classes.push(PivotTableBinderUtils.VM), 
                urlIcon && (defaultAlignment = textAlignment.H.center), (0, PivotTableBinderUtils.aY)(columnFormatting && columnFormatting.styleHeader && columnFormatting.alignment || columnHeadersFormatting.alignment, classes, defaultAlignment), 
                this.isA11yMatrix && (this.selectionManager.isColumnHeaderHighlighted(columnHeader) ? (this.selectionManager.isColumnHeaderIndicatorOn(columnHeader) || this.selectionManager.isColumnHeaderDarkened(columnHeader)) && classes.push("cell-selected") : classes.push("cell-unselected")), 
                classes;
            }, PivotTableBinder.prototype.addBodyCellClasses = function(bodyCell, urlIcon, contentClasses, containerClasses) {
                var alignment;
                contentClasses.push(this.formattingProperties.values.wordWrap ? PivotTableBinderUtils.n2 : PivotTableBinderUtils.wV), 
                urlIcon && contentClasses.push(tablixConstants.LU), this.binderOptions.interactivityIndicatorEnabled && this.binderOptions.selectionEnabled && !bodyCell.isRowAndColumnGrandTotal && !bodyCell.isBlankRow && containerClasses.push(PivotTableBinderUtils.VM);
                var defaultAlignment, columnFormatting = this.formattingProperties.columnFormatting[bodyCell.columnMetadata && bodyCell.columnMetadata.queryName];
                columnFormatting && (bodyCell.isGrandTotal ? columnFormatting.styleTotal : bodyCell.hasSubtotalStyle ? columnFormatting.styleSubTotals : columnFormatting.styleValues) && (alignment = columnFormatting.alignment), 
                urlIcon ? defaultAlignment = textAlignment.H.center : !bodyCell.isKpi && bodyCell.isNumeric && (defaultAlignment = textAlignment.H.right), 
                (0, PivotTableBinderUtils.aY)(alignment, contentClasses, defaultAlignment), this.isA11yMatrix && (this.selectionManager.isBodyCellHighlighted(bodyCell) ? !this.selectionManager.isSelectionEmpty() && this.selectionManager.isBodyCellHighlighted(bodyCell) && containerClasses.push("cell-selected") : containerClasses.push("cell-unselected"));
            }, PivotTableBinder.prototype.getCornerCellClasses = function(cornerCell) {
                var classes = [];
                classes.push(this.formattingProperties.columnHeaders.wordWrap ? PivotTableBinderUtils.n2 : PivotTableBinderUtils.wV), 
                this.binderOptions.interactivityIndicatorEnabled && this.binderOptions.sortingEnabled && this.sortingManager.isCornerSortable(cornerCell) && classes.push(PivotTableBinderUtils.VM);
                var alignment = this.formattingProperties.columnHeaders.titleAlignment;
                return alignment === textAlignment.H.auto && (alignment = this.formattingProperties.columnHeaders.alignment), 
                (0, PivotTableBinderUtils.aY)(alignment, classes), classes;
            }, PivotTableBinder.prototype.getSteppedLayoutIndentation = function(rowHeader) {
                return this.rowNavigator.getLevel(rowHeader) * this.formattingProperties.rowHeaders.steppedLayoutIndentation;
            }, PivotTableBinder.prototype.getRowHeaderStyle = function(rowHeader, fontInfo, forMeasure, hasContent, cellWithReferencePosition, virtualPosition) {
                var isPrimaryBanding, position = null != virtualPosition ? virtualPosition : rowHeader.position, cellStyle = new tablixUtils1.qZ(PivotTableBinderUtils.K2, PivotTableBinderUtils.K2);
                if (this.formattingProperties.rowHeaders.underline && hasContent && (cellStyle.textDecoration = CssConstants.f0), 
                position.column.isLast && (cellStyle.borders.right = new tablixUtils1.om(tablixProperties.FX.PropGridOutlineWeight.defaultValue, this.binderOptions.tablixProperties.PropGridOutlineColor.getValue(null))), 
                cellStyle.fontColor = tablixConstants.lN, this.formattingProperties.blankRows.showBlankRows) {
                    var ancestorItem = this.rowNavigator.getAncestor(rowHeader), ancestorIndex = this.formattingProperties.general.layout === pivotTableLayout.t.Compact ? this.rowNavigator.getLeafIndex(ancestorItem) : this.rowNavigator.getIndexOfFirstLeaf(ancestorItem);
                    isPrimaryBanding = (position.row.index - ancestorIndex) % 2 != 0;
                }
                (0, matrixBinder.B0)(position, null != cellWithReferencePosition ? cellWithReferencePosition : rowHeader, cellStyle, this.formattingProperties.rowHeaders.steppedLayout, this.formattingProperties, this.formattingProperties.values.bandedRowHeaders, !!cellWithReferencePosition, isPrimaryBanding), 
                (0, PivotTableBinderUtils.Nk)(fontInfo, cellStyle, hasContent);
                var rowHeaderFormatting = this.formattingProperties.columnFormatting[rowHeader.queryName], hasRowHeaderFormattingStyle = rowHeaderFormatting && rowHeaderFormatting.styleHeader, hasGrandTotalStyle = matrixHierarchyNavigator.hc.isNodeGrandTotal(rowHeader) && this.formattingProperties.rowGrandTotal.applyToHeaders, hasSubtotalStyle = rowHeader.hasSubtotalStyle && this.formattingProperties.rowSubtotals.applyToHeaders;
                return hasRowHeaderFormattingStyle && rowHeaderFormatting.fontColor ? cellStyle.fontColor = rowHeaderFormatting.fontColor : hasGrandTotalStyle && this.formattingProperties.rowGrandTotal.fontColor ? cellStyle.fontColor = this.formattingProperties.rowGrandTotal.fontColor : hasSubtotalStyle && this.formattingProperties.rowSubtotals.fontColor && (cellStyle.fontColor = this.formattingProperties.rowSubtotals.fontColor), 
                hasRowHeaderFormattingStyle && rowHeaderFormatting.backColor ? cellStyle.backColor = rowHeaderFormatting.backColor : hasGrandTotalStyle && this.formattingProperties.rowGrandTotal.backColor ? cellStyle.backColor = this.formattingProperties.rowGrandTotal.backColor : hasSubtotalStyle && this.formattingProperties.rowSubtotals.backColor && (cellStyle.backColor = this.formattingProperties.rowSubtotals.backColor), 
                this.formattingProperties.rowHeaders.steppedLayout && (cellStyle.paddings.left += this.getSteppedLayoutIndentation(rowHeader)), 
                cellStyle;
            }, PivotTableBinder.prototype.getRowHeaderStyleAttributes = function(rowHeader, forMeasure, hasContent, columnWidth, cellWithReferencePosition, virtualPosition) {
                return this.getRowHeaderStyle(rowHeader, this.getRowHeaderFontInfo(rowHeader), forMeasure, hasContent, cellWithReferencePosition, virtualPosition).getAttributes(!1, this.isA11yMatrix, this.isA11yMatrix, columnWidth);
            }, PivotTableBinder.prototype.getColumnHeaderStyle = function(columnHeader, fontInfo, forMeasure, hasContent) {
                var cellStyle = new tablixUtils1.qZ(PivotTableBinderUtils.K2, PivotTableBinderUtils.K2);
                columnHeader.position.row.isLast && (cellStyle.borders.bottom = new tablixUtils1.om(tablixProperties.FX.PropGridOutlineWeight.defaultValue, this.binderOptions.tablixProperties.PropGridOutlineColor.getValue(null))), 
                cellStyle.fontColor = tablixConstants.lN, (0, matrixBinder.aV)(columnHeader.position, columnHeader, cellStyle, this.formattingProperties), 
                (0, PivotTableBinderUtils.Nk)(fontInfo, cellStyle, hasContent);
                var columnFormatting = this.formattingProperties.columnFormatting[columnHeader.queryName], hasColumnFormattingStyle = columnFormatting && columnFormatting.styleHeader, hasGrandTotalStyle = matrixHierarchyNavigator.hc.isNodeGrandTotal(columnHeader) && this.formattingProperties.columnGrandTotal.applyToHeaders, hasSubtotalStyle = columnHeader.hasSubtotalStyle && this.formattingProperties.columnSubtotals.applyToHeaders;
                return hasColumnFormattingStyle && columnFormatting.fontColor ? cellStyle.fontColor = columnFormatting.fontColor : hasGrandTotalStyle && this.formattingProperties.columnGrandTotal.fontColor ? cellStyle.fontColor = this.formattingProperties.columnGrandTotal.fontColor : hasSubtotalStyle && this.formattingProperties.columnSubtotals.fontColor && (cellStyle.fontColor = this.formattingProperties.columnSubtotals.fontColor), 
                hasColumnFormattingStyle && columnFormatting.backColor ? cellStyle.backColor = columnFormatting.backColor : hasGrandTotalStyle && this.formattingProperties.columnGrandTotal.backColor ? cellStyle.backColor = this.formattingProperties.columnGrandTotal.backColor : hasSubtotalStyle && this.formattingProperties.columnSubtotals.backColor && (cellStyle.backColor = this.formattingProperties.columnSubtotals.backColor), 
                this.formattingProperties.columnHeaders.underline && hasContent && (cellStyle.textDecoration = CssConstants.f0), 
                cellStyle;
            }, PivotTableBinder.prototype.getColumnHeaderStyleAttributes = function(columnHeader, cellStyle, columnWidth) {
                var style = cellStyle.getAttributes(!1, this.isA11yMatrix, this.isA11yMatrix, columnWidth);
                return this.isA11yMatrix || this.selectionManager.isColumnHeaderHighlighted(columnHeader) || (0, 
                PivotTableBinderUtils.CQ)(style), style;
            }, PivotTableBinder.prototype.getBodyCellStyle = function(bodyCell, fontInfo, forMeasure, hasContent) {
                var isPrimaryBanding, cellStyle = new tablixUtils1.qZ(PivotTableBinderUtils.K2, PivotTableBinderUtils.K2);
                if (this.formattingProperties.blankRows.showBlankRows) {
                    var ancestorItem = this.rowNavigator.getAncestor(bodyCell.rowItem), ancestorIndex = this.formattingProperties.general.layout === pivotTableLayout.t.Compact ? this.rowNavigator.getLeafIndex(ancestorItem) : this.rowNavigator.getIndexOfFirstLeaf(ancestorItem);
                    isPrimaryBanding = (bodyCell.position.row.index - ancestorIndex) % 2 != 0;
                }
                return (0, matrixBinder.cP)(bodyCell.position, bodyCell, cellStyle, this.formattingProperties.rowHeaders.steppedLayout, this.formattingProperties, isPrimaryBanding), 
                (0, PivotTableBinderUtils.Nk)(fontInfo, cellStyle, hasContent), cellStyle;
            }, PivotTableBinder.prototype.addBodyCellStyleAttributes = function(bodyCell, cellStyle, contentStyleAttributes, containerStyleAttributes, columnWidth) {
                cellStyle.setAttributes(containerStyleAttributes, !1, this.isA11yMatrix, this.isA11yMatrix, columnWidth), 
                containerStyleAttributes.position = "relative", this.isA11yMatrix || this.selectionManager.isBodyCellHighlighted(bodyCell) || (0, 
                PivotTableBinderUtils.CQ)(containerStyleAttributes);
            }, PivotTableBinder.prototype.getCornerCellStyle = function(cornerCell, fontInfo, forMeasure, hasContent) {
                var cellStyle = new tablixUtils1.qZ(PivotTableBinderUtils.K2, PivotTableBinderUtils.K2);
                return cellStyle.fontColor = tablixConstants.lN, this.formattingProperties.columnHeaders.underline && hasContent && (cellStyle.textDecoration = CssConstants.f0), 
                cornerCell.position.row.isLast && (cellStyle.borders.bottom = new tablixUtils1.om(tablixProperties.FX.PropGridOutlineWeight.defaultValue, this.binderOptions.tablixProperties.PropGridOutlineColor.getValue(null))), 
                (0, matrixBinder.qW)(cornerCell.position, cellStyle, this.formattingProperties.rowHeaders.steppedLayout, this.formattingProperties), 
                (0, PivotTableBinderUtils.Nk)(fontInfo, cellStyle, hasContent), cellStyle;
            }, PivotTableBinder.prototype.getColumnHeaderLabel = function(columnHeader) {
                return this.getHeaderContent(columnHeader, this.columnNavigator.getColumnHeaderMetadataColumn(columnHeader), this.columnNavigator.isColumnHeaderMultiValueSubtotal(columnHeader), this.formattingProperties.columnHeaders.wordWrap);
            }, PivotTableBinder.prototype.getRowHeaderLabel = function(rowHeader) {
                return this.getHeaderContent(rowHeader, this.rowNavigator.getRowHeaderMetadataColumn(rowHeader), this.rowNavigator.isRowHeaderMultiValueSubtotal(rowHeader), this.formattingProperties.rowHeaders.wordWrap);
            }, PivotTableBinder.prototype.getBodyCellContent = function(bodyCell) {
                return this.formattingProperties.values.wordWrap ? bodyCell.textContent : (0, textUtil.PC)(bodyCell.textContent);
            }, PivotTableBinder.prototype.getCornerCellLabel = function(corner) {
                return this.formattingProperties.columnHeaders.wordWrap ? corner.displayName : (0, 
                textUtil.PC)(corner.displayName);
            }, PivotTableBinder.prototype.getHeaderContent = function(header, metadata, overwriteSubtotalLabel, wordWrap) {
                if (header.isSubtotal && !overwriteSubtotalLabel) {
                    var columnFormatting = this.formattingProperties.columnFormatting[metadata.queryName], totalLabel = columnFormatting ? columnFormatting.subtotalLabel : this.binderOptions.defaultTotalLabel;
                    return wordWrap ? totalLabel : (0, textUtil.PC)(totalLabel);
                }
                var value = header.valueFormatted;
                return (0, PivotTableBinderUtils.jv)(metadata, value) ? value : value && (0, tablixUtils1.wX)(header, metadata, value) ? Utility.b$.encodeUriForImageDataSvg(value) : wordWrap ? value : (0, 
                textUtil.PC)(value);
            }, PivotTableBinder.prototype.onDataViewChanged = function(dataView, formattingProperties, style, legacyTooltipsEnabled, isExpandCollapseEnabled) {
                var _a, _this = this;
                this.formattingProperties = formattingProperties, this.legacyTooltipsEnabled = legacyTooltipsEnabled, 
                this.isExpandCollapseEnabled = !!isExpandCollapseEnabled;
                var generalFontSize = formattingProperties.general.textSize, measurer = new PivotTableBinderUtils.Kq, columnFormattingProperties = {}, valuesFormattingProperties = {}, rowheaderFormattingProperties = {};
                columnFormattingProperties.family = formattingProperties.columnHeaders.fontFamily || tablixConstants.F2, 
                columnFormattingProperties.size = formattingProperties.columnHeaders.fontSize || generalFontSize, 
                formattingProperties.columnHeaders.bold && (columnFormattingProperties.weight = CssConstants.en), 
                formattingProperties.columnHeaders.italic && (columnFormattingProperties.style = CssConstants.BF), 
                formattingProperties.columnHeaders.underline && (columnFormattingProperties.textDecoration = CssConstants.f0), 
                this.columnHeaderFontInfo = (0, PivotTableBinderUtils.Od)(columnFormattingProperties, measurer), 
                this.specificColumnHeaderFontInfo = {};
                var annotationColumnHeaderFormats = null === (_a = this.formattingProperties.annotationFormatting) || void 0 === _a ? void 0 : _a.columnHeaders;
                annotationColumnHeaderFormats && _.forEach(annotationColumnHeaderFormats, function(colHeaderAnnotationFormat, queryName) {
                    var specificColumnHeaderFontProps = (0, tslib_es6.__assign)({}, columnFormattingProperties);
                    (colHeaderAnnotationFormat.bold || formattingProperties.columnHeaders.bold) && (specificColumnHeaderFontProps.weight = CssConstants.en), 
                    _this.specificColumnHeaderFontInfo[queryName] = (0, PivotTableBinderUtils.Od)(specificColumnHeaderFontProps, measurer);
                }), rowheaderFormattingProperties.family = formattingProperties.rowHeaders.fontFamily || tablixConstants.F2, 
                rowheaderFormattingProperties.size = formattingProperties.rowHeaders.fontSize || generalFontSize, 
                formattingProperties.rowHeaders.bold && (rowheaderFormattingProperties.weight = CssConstants.en), 
                formattingProperties.rowHeaders.italic && (rowheaderFormattingProperties.style = CssConstants.BF), 
                formattingProperties.rowHeaders.underline && (rowheaderFormattingProperties.textDecoration = CssConstants.f0), 
                this.rowHeaderFontInfo = (0, PivotTableBinderUtils.Od)(rowheaderFormattingProperties, measurer), 
                this.expandCollapseButtonFontInfo = (0, PivotTableBinderUtils.Od)({
                    family: "PowrMDL2",
                    size: formattingProperties.rowHeaders.expandCollapseButtonsSize || this.rowHeaderFontInfo.fontProperties.size
                }, measurer), valuesFormattingProperties.family = formattingProperties.values.fontFamily || tablixConstants.dG, 
                valuesFormattingProperties.size = formattingProperties.values.fontSize || generalFontSize, 
                formattingProperties.values.bold && (valuesFormattingProperties.weight = CssConstants.en), 
                formattingProperties.values.italic && (valuesFormattingProperties.style = CssConstants.BF), 
                formattingProperties.values.underline && (valuesFormattingProperties.textDecoration = CssConstants.f0), 
                this.valueFontInfo = (0, PivotTableBinderUtils.Od)(valuesFormattingProperties, measurer), 
                this.columnSubtotalFontInfo = this.getSubtotalFontInfo(formattingProperties.columnSubtotals, measurer), 
                this.rowSubtotalFontInfo = this.getSubtotalFontInfo(formattingProperties.rowSubtotals, measurer), 
                this.columnGrandTotalFontInfo = this.getGrandTotalFontInfo(formattingProperties.columnGrandTotal, measurer, this.columnSubtotalFontInfo), 
                this.rowGrandTotalFontInfo = this.getGrandTotalFontInfo(formattingProperties.rowGrandTotal, measurer, this.rowSubtotalFontInfo);
                var usingDefaultColumnHeaderFontFamily = this.columnHeaderFontInfo.fontProperties.family === tablixConstants.F2, usingDefaultRowHeaderFontFamily = this.rowHeaderFontInfo.fontProperties.family === tablixConstants.F2;
                this.subtotalColumnHeaderFontInfo = formattingProperties.columnSubtotals.applyToHeaders ? this.subtotalRowHeaderFontInfo = (0, 
                PivotTableBinderUtils.TQ)(this.columnSubtotalFontInfo, {}, measurer) : (0, PivotTableBinderUtils.TQ)(this.columnHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultColumnHeaderFontFamily), measurer), 
                this.subtotalRowHeaderFontInfo = formattingProperties.rowSubtotals.applyToHeaders ? this.subtotalRowHeaderFontInfo = (0, 
                PivotTableBinderUtils.TQ)(this.rowSubtotalFontInfo, {}, measurer) : (0, PivotTableBinderUtils.TQ)(this.rowHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultRowHeaderFontFamily), measurer), 
                this.grandTotalColumnHeaderFontInfo = formattingProperties.columnGrandTotal.applyToHeaders ? (0, 
                PivotTableBinderUtils.TQ)(this.columnGrandTotalFontInfo, {}, measurer) : (0, PivotTableBinderUtils.TQ)(this.columnHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultColumnHeaderFontFamily), measurer), 
                this.grandTotalRowHeaderFontInfo = formattingProperties.rowGrandTotal.applyToHeaders ? (0, 
                PivotTableBinderUtils.TQ)(this.rowGrandTotalFontInfo, {}, measurer) : (0, PivotTableBinderUtils.TQ)(this.rowHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultRowHeaderFontFamily), measurer), 
                this.glyphFontInfo = (0, PivotTableBinderUtils.Od)({
                    family: tablixConstants.Vz,
                    size: units.B.createFromPt((formattingProperties.columnHeaders.fontSize || generalFontSize).pt * tablixConstants.Yo),
                    lineHeight: "100%"
                }, measurer), measurer.measureAll(this.measureElement), this.columnsDataBarsSettings = {};
                var columnFormatting = formattingProperties.columnFormatting;
                if (columnFormatting && dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) for (var _i = 0, _b = dataView.matrix.valueSources; _i < _b.length; _i++) (queryName = (column = _b[_i]).queryName) && columnFormatting[queryName] && (this.columnsDataBarsSettings[queryName] = (0, 
                pivotTableDataBarsUtils.az)(column, columnFormatting[queryName].dataBarsSettings, style));
                this.sparklineSettings = {};
                var sparklineFormatting = formattingProperties.sparklines;
                if (sparklineFormatting && dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) for (var _c = 0, _d = dataView.matrix.valueSources; _c < _d.length; _c++) {
                    var column, queryName;
                    (queryName = (column = _d[_c]).queryName) && sparklineFormatting[queryName] && (this.sparklineSettings[queryName] = (0, 
                    pivotTableSparklineUtils.wJ)(sparklineFormatting[queryName], column.type, style));
                }
            }, PivotTableBinder.prototype.getGrandTotalFontInfo = function(grandTotalProperties, measurer, subtotalFontInfo) {
                var totalFormattingProperties = {}, grandTotalFontFamily = grandTotalProperties.fontFamily;
                return totalFormattingProperties.family = grandTotalFontFamily, totalFormattingProperties.size = grandTotalProperties.fontSize, 
                grandTotalProperties.bold && grandTotalFontFamily && (totalFormattingProperties.weight = CssConstants.en), 
                grandTotalProperties.italic && (totalFormattingProperties.style = CssConstants.BF), 
                grandTotalProperties.underline && (totalFormattingProperties.textDecoration = CssConstants.f0), 
                (0, PivotTableBinderUtils.TQ)(subtotalFontInfo, totalFormattingProperties, measurer);
            }, PivotTableBinder.prototype.shouldApplyDataBars = function(dataBarsSettings, bodyCell) {
                if (!dataBarsSettings || !_.isNumber(bodyCell.dataPoint)) return !1;
                var isTotalCell = bodyCell.isTotal || bodyCell.hasSubtotalStyle;
                switch (dataBarsSettings.totalMatching) {
                  case 0:
                    return !0;

                  case 1:
                  case void 0:
                    return !isTotalCell;

                  case 2:
                    return isTotalCell;

                  default:
                    return debug.fF.assertNever(dataBarsSettings.totalMatching), !isTotalCell;
                }
            }, PivotTableBinder.prototype.isImage = function(bodyCell) {
                return (0, converterHelper.pt)(bodyCell.columnMetadata);
            }, PivotTableBinder.prototype.isSparkline = function(bodyCell) {
                var _a, columnMetadata = bodyCell.columnMetadata, misc = null === (_a = null == columnMetadata ? void 0 : columnMetadata.type) || void 0 === _a ? void 0 : _a.misc;
                return null != misc && null != misc.sparkline;
            }, PivotTableBinder.applyBold = function(usingDefault) {
                return {
                    family: usingDefault ? tablixConstants.Zk : void 0,
                    weight: usingDefault ? void 0 : CssConstants.en
                };
            }, PivotTableBinder.prototype.getSubtotalFontInfo = function(subtotalsProperties, measurer) {
                var subtotalFontWeight, subtotalFontFamily = subtotalsProperties.fontFamily;
                subtotalFontFamily || this.valueFontInfo.fontProperties.family !== tablixConstants.dG ? subtotalFontWeight = !0 : this.valueFontInfo.fontProperties.family === tablixConstants.dG && (subtotalFontFamily = tablixConstants.Zk);
                var subtotalFormattingProperties = {};
                return subtotalFormattingProperties.family = subtotalFontFamily, subtotalFormattingProperties.size = subtotalsProperties.fontSize, 
                subtotalsProperties.bold && subtotalFontWeight && (subtotalFormattingProperties.weight = CssConstants.en), 
                subtotalsProperties.italic && (subtotalFormattingProperties.style = CssConstants.BF), 
                subtotalsProperties.underline && (subtotalFormattingProperties.textDecoration = CssConstants.f0), 
                (0, PivotTableBinderUtils.TQ)(this.valueFontInfo, subtotalFormattingProperties, measurer);
            }, PivotTableBinder.prototype.setHorizontalBorderXPositions = function(rowHeaderSectionWidth, section) {
                var x1 = "0", x2 = "100%";
                if (this.formattingProperties.rowHeaders.steppedLayout) return [ x1, x2 ];
                switch (section) {
                  case pivotTableControlTypes.p0.Header:
                    x1 = "0", x2 = "100%";
                    break;

                  case pivotTableControlTypes.p0.Body:
                    x1 = rowHeaderSectionWidth.toString();
                    break;

                  case pivotTableControlTypes.p0.MatrixRowHeader:
                    x1 = "0", x2 = rowHeaderSectionWidth.toString();
                    break;

                  default:
                    debug.fF.assertFail("this should never be the case");
                }
                return [ x1, x2 ];
            }, PivotTableBinder.prototype.setVerticalBorderYPositions = function(columnHeaderSectionHeight, section) {
                var y1 = "0", y2 = "100%";
                if (this.formattingProperties.rowHeaders.steppedLayout) return [ y1, y2 ];
                switch (section) {
                  case pivotTableControlTypes.p0.Header:
                    y1 = "0", y2 = "100%";
                    break;

                  case pivotTableControlTypes.p0.Body:
                    break;

                  case pivotTableControlTypes.p0.MatrixRowHeader:
                    y1 = "0", y2 = columnHeaderSectionHeight.toString();
                    break;

                  default:
                    debug.fF.assertFail("this should never be the case");
                }
                return [ y1, y2 ];
            }, PivotTableBinder;
        }(), dataViewScopeTotal = __webpack_require__(31577), dataViewMatrixUtils = __webpack_require__(82386), PivotTableSizeManagerUtils = __webpack_require__(59151), PivotTableSizeManager = function() {
            function PivotTableSizeManager(hostServices) {
                this.hostServices = hostServices;
            }
            return PivotTableSizeManager.prototype.onDataViewChanged = function(columnHierarchy, valueSources, metatdataObjects, valuesOnRowApplied) {
                this.columnHierarchy = columnHierarchy, this.valueSources = valueSources, this.metatdataObjects = metatdataObjects, 
                this.valuesOnRowApplied = valuesOnRowApplied, this.hasColumnGrouping = (0, dataViewMatrixUtils.pr)(this.columnHierarchy) > 0, 
                this.hasMultiMeasureOnColumns = !_.isEmpty(this.valueSources) && this.valueSources.length > 1 && !this.valuesOnRowApplied, 
                this.headerPendingChanges = [], this.cornerPendingChanges = [];
            }, PivotTableSizeManager.prototype.getNodeSelector = function(header) {
                if (debug.fF.assertValue(header, "PivotTableSizeManager.getNodeSelector: header"), 
                !this.hasColumnGrouping) {
                    if (header.queryName) return {
                        metadata: header.queryName
                    };
                    if (this.valuesOnRowApplied) return null;
                }
                for (var selector = {}; header; ) {
                    if (this.hasMultiMeasureOnColumns && header.level === this.columnHierarchy.levels.length - 1) selector.metadata = header.queryName; else if (header.isSubtotal) {
                        for (var totalExprs = [], _i = 0, levelSources_1 = this.columnHierarchy.levels[header.level].sources; _i < levelSources_1.length; _i++) {
                            var source = levelSources_1[_i];
                            _.isEmpty(source.identityExprs) || totalExprs.push.apply(totalExprs, source.identityExprs || []);
                        }
                        _.isEmpty(totalExprs) || (selector.data = [ (0, dataViewScopeTotal.ms)(totalExprs) ]);
                    } else header.identity && (selector.data ? selector.data.splice(0, 0, header.identity) : selector.data = [ header.identity ]);
                    header = header.parent;
                }
                return selector;
            }, PivotTableSizeManager.prototype.getCornerSelector = function(corner) {
                if (debug.fF.assertValue(corner, "PivotTableSizeManager.getCornerSelector: corner"), 
                corner.metadata && corner.metadata.queryName) return {
                    metadata: corner.metadata.queryName
                };
            }, PivotTableSizeManager.prototype.getHeaderPendingChange = function(header) {
                return _.find(this.headerPendingChanges, function(change) {
                    return pivotTableSelectionManager.l.areHeadersEqual(change.cell, header);
                });
            }, PivotTableSizeManager.prototype.getCornerPendingChange = function(corner) {
                return _.find(this.cornerPendingChanges, function(change) {
                    return pivotTableSelectionManager.l.areCornerItemsEqual(change.cell, corner);
                });
            }, PivotTableSizeManager.prototype.queueHeaderPendingChange = function(header, width) {
                var pendingChange = this.getHeaderPendingChange(header);
                pendingChange ? pendingChange.width = width : this.headerPendingChanges.push({
                    cell: header,
                    width
                });
            }, PivotTableSizeManager.prototype.queueCornerPendingChange = function(corner, width) {
                var pendingChange = this.getCornerPendingChange(corner);
                pendingChange ? pendingChange.width = width : this.cornerPendingChanges.push({
                    cell: corner,
                    width
                });
            }, PivotTableSizeManager.prototype.getColumnWidth = function(header) {
                debug.fF.assertValue(header, "PivotTableSizeManager.getColumnWidth: header");
                var objects, pendingChange = this.getHeaderPendingChange(header);
                return pendingChange ? pendingChange.width : (this.hasColumnGrouping ? objects = header.objects : header.queryName ? objects = this.valueSources[header.levelSourceIndex || 0].objects : this.valuesOnRowApplied && (objects = this.metatdataObjects), 
                tablixProperties.FX.PropColumnWidthValue.getValue(objects));
            }, PivotTableSizeManager.prototype.setColumnWidth = function(header, width) {
                var selector = this.getNodeSelector(header);
                this.queueHeaderPendingChange(header, width), (0, PivotTableSizeManagerUtils.P)([ {
                    selector,
                    value: width
                } ], this.hostServices, !1);
            }, PivotTableSizeManager.prototype.getRowHeight = function(header) {}, PivotTableSizeManager.prototype.setRowHeight = function(header, height) {}, 
            PivotTableSizeManager.prototype.getRowLevelWidth = function(cornerCell) {
                debug.fF.assertValue(cornerCell, "PivotTableSizeManager.getRowLevelWidth: cornerCell");
                var pendingChange = this.getCornerPendingChange(cornerCell);
                return pendingChange ? pendingChange.width : cornerCell.metadata && cornerCell.metadata.objects ? tablixProperties.FX.PropColumnWidthValue.getValue(cornerCell.metadata.objects) : void 0;
            }, PivotTableSizeManager.prototype.setRowLevelWidth = function(cornerCell, width) {
                var selector = this.getCornerSelector(cornerCell);
                selector && (this.queueCornerPendingChange(cornerCell, width), (0, PivotTableSizeManagerUtils.P)([ {
                    selector,
                    value: width
                } ], this.hostServices, !1));
            }, PivotTableSizeManager.prototype.getColumnLevelHeight = function(cornerCell) {}, 
            PivotTableSizeManager.prototype.setColumnLevelHeight = function(cornerCell, height) {}, 
            PivotTableSizeManager.prototype.setMissingWidths = function(headersWidth, cornersWidth) {
                for (var widthsToPersist = [], _i = 0, headersWidth_1 = headersWidth; _i < headersWidth_1.length; _i++) {
                    var headerWidth = headersWidth_1[_i], node = headerWidth.node, width = headerWidth.width;
                    null == this.getColumnWidth(node) && (this.queueHeaderPendingChange(node, width), 
                    widthsToPersist.push({
                        selector: this.getNodeSelector(node),
                        value: width
                    }));
                }
                for (var _a = 0, cornersWidth_1 = cornersWidth; _a < cornersWidth_1.length; _a++) {
                    var cornerWidth = cornersWidth_1[_a], corner = cornerWidth.corner, selector = (width = cornerWidth.width, 
                    this.getCornerSelector(corner));
                    selector && null == this.getRowLevelWidth(corner) && (this.queueCornerPendingChange(corner, width), 
                    widthsToPersist.push({
                        selector,
                        value: width
                    }));
                }
                _.isEmpty(widthsToPersist) || (0, PivotTableSizeManagerUtils.P)(widthsToPersist, this.hostServices, !0);
            }, PivotTableSizeManager.prototype.clearWidths = function(columnHeaders, cornerItems) {
                for (var widthsToPersist = [], _i = 0, columnHeaders_1 = columnHeaders; _i < columnHeaders_1.length; _i++) {
                    var node = columnHeaders_1[_i];
                    null != this.getColumnWidth(node) && widthsToPersist.push({
                        selector: this.getNodeSelector(node),
                        value: void 0
                    }), this.queueHeaderPendingChange(node, void 0);
                }
                for (var _a = 0, cornerItems_1 = cornerItems; _a < cornerItems_1.length; _a++) {
                    var corner = cornerItems_1[_a];
                    null != this.getRowLevelWidth(corner) && widthsToPersist.push({
                        selector: this.getCornerSelector(corner),
                        value: void 0
                    }), this.queueCornerPendingChange(corner, void 0);
                }
                _.isEmpty(widthsToPersist) || (0, PivotTableSizeManagerUtils.P)(widthsToPersist, this.hostServices, !0);
            }, PivotTableSizeManager;
        }(), pivotTableHierarchyNavigator = __webpack_require__(11184), promise = __webpack_require__(98094), subSelectionCellOutlineRenderer = __webpack_require__(48645), subSelectionOutlineRenderer = __webpack_require__(86900), tablixControl = __webpack_require__(24133), ITablixFormatting = __webpack_require__(73889), tablixPropertyManager = __webpack_require__(74304), rowSubtotalPosition = __webpack_require__(40845), trace = __webpack_require__(12913), PivotTable = function() {
            function PivotTable(options, featureSwitches) {
                void 0 === options && (options = (0, pivotTableOptions.DH)()), this.options = options, 
                this.annotationHighlightElementToRegionIdMap = new Map, this.featureSwitches = featureSwitches || {}, 
                this.options.tooltipsEnabled = this.options.tooltipsEnabled, this.showAsTableNativeMenuEnabled = this.options.showAsTableNativeMenuEnabled, 
                this.tooltipType = 0, this.asyncSerializer = new asyncSerializer.W, this.supportsOnObject = !!this.featureSwitches.onObject, 
                this.enableCalculationHighlighting = !!this.featureSwitches.enableCalculationHighlighting, 
                this.numFontDelays = 0;
            }
            return PivotTable.prototype.init = function(options) {
                var _a, _this = this;
                this.currentViewport = options.viewport, this.element = options.element, this.hostServices = options.host, 
                this.waitingForData = !1, this.style = options.style, this.tablixPropertyManager = new tablixPropertyManager.U(this.style), 
                this.selectionManager = new pivotTableSelectionManager.l(this.hostServices, this.featureSwitches), 
                this.sortingManager = new pivotTableSortingManager.S(this.hostServices), this.sizeManager = new PivotTableSizeManager(this.hostServices), 
                this.tooltipService = (0, tooltipService.r)(options.host), this.valueLabel = this.hostServices.getLocalizedString(tablixConstants.yF), 
                this.totalLabel = this.hostServices.getLocalizedString(tablixConstants.qT);
                var subSelectionHostService = null === (_a = this.hostServices) || void 0 === _a ? void 0 : _a.getSubSelectionService(), originalRenderer = null != subSelectionHostService ? subSelectionHostService : subSelectionOutlineRenderer.D.createWithDefaultHost(), renderer = new subSelectionCellOutlineRenderer.y(originalRenderer);
                this.enableCalculationHighlighting && (this.annotationHelper = htmlSubSelectionHelper.O5.createHtmlSubselectionHelper({
                    hostElement: this.element.get(0),
                    hostServices: this.hostServices,
                    renderer,
                    targetSource: "annotation",
                    scale: function() {
                        return _this.currentViewport.scale;
                    },
                    customElementRegionOutlineIdCallback: function(element) {
                        return _this.getAnnotationHighlightElementSubSelectionOutlineRegionId(element);
                    },
                    customScrollCallbacks: {
                        onScrollStart: function() {
                            return _this.annotationHighlightOnScrollStart();
                        },
                        onScrollEnd: function() {
                            return _this.annotationHighlightOnScrollEnd();
                        }
                    }
                })), this.supportsOnObject && (this.subSelectionHelper = htmlSubSelectionHelper.O5.createHtmlSubselectionHelper({
                    hostElement: this.element.get(0),
                    hostServices: this.hostServices,
                    renderer,
                    targetSource: "format",
                    scale: function() {
                        return _this.currentViewport.scale;
                    }
                }));
            }, PivotTable.prototype.update = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.asyncSerializer.enqueue(function() {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    var visibleRowStart, visibleColumnStart, shouldUpdateSubSelection, shouldAlertScreenReader, labels, message, shouldUpdateAnnotations;
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        switch (_a.label) {
                                          case 0:
                                            return document.fonts && "loaded" !== document.fonts.status && this.numFontDelays < 2 ? [ 4, new promise.J(function(resolve) {
                                                return setTimeout(resolve, 500);
                                            }) ] : [ 3, 2 ];

                                          case 1:
                                            return _a.sent(), this.numFontDelays++, [ 3, 0 ];

                                          case 2:
                                            return options.type & enums.EP.Data ? [ 4, this.onDataViewChanged(options.dataViews, options.operationKind, options.viewport) ] : [ 3, 4 ];

                                          case 3:
                                            _a.sent(), _a.label = 4;

                                          case 4:
                                            return this.pivotTableControl && options.type & enums.EP.Resize ? (visibleRowStart = this.getVisibleRowStart(this.getPreviousVisibleRowStart(), !1), 
                                            visibleColumnStart = this.getVisibleColumnStart(this.getPreviousVisibleColumnStart()), 
                                            this.pivotTableControl.setWidth(options.viewport.width), this.pivotTableControl.setHeight(options.viewport.height), 
                                            [ 4, this.renderControl(pivotTableControlTypes.BM.Incremental, visibleRowStart, visibleColumnStart) ]) : [ 3, 6 ];

                                          case 5:
                                            _a.sent(), _a.label = 6;

                                          case 6:
                                            return this.supportsOnObject ? options.formatMode === this.formatMode ? [ 3, 8 ] : (this.formatMode = options.formatMode, 
                                            this.subSelectionHelper.setFormatMode(options.formatMode), options.formatMode ? (this.element.get(0).setAttribute(htmlSubSelectionHelper.y3, "true"), 
                                            this.selectionManager.clearLocal()) : this.element.get(0).removeAttribute(htmlSubSelectionHelper.y3), 
                                            this.pivotTableControl && this.pivotTableControl instanceof tablixControl.d ? (this.pivotTableControl.getBinder().setFormatMode(options.formatMode), 
                                            [ 4, this.pivotTableControl.renderAsync(pivotTableControlTypes.BM.ClearRendering) ]) : [ 3, 8 ]) : [ 3, 8 ];

                                          case 7:
                                            _a.sent(), _a.label = 8;

                                          case 8:
                                            return this.enableCalculationHighlighting && (this.allowAnnotationHighlights = options.allowAnnotationHighlights), 
                                            shouldUpdateSubSelection = options.type & enums.EP.Data || options.type & enums.EP.Resize || options.type & enums.EP.FormattingSubSelectionChange, 
                                            shouldAlertScreenReader = options.type & enums.EP.FormattingSubSelectionChange, 
                                            this.subSelectionHelper && shouldUpdateSubSelection && (this.subSelectionHelper.updateOutlinesFromSubSelections(options.subSelections, !0), 
                                            this.hostServices.alertScreenReader && shouldAlertScreenReader && (labels = this.subSelectionHelper.getLabelsFromSubSelections(options.subSelections, [ "aria-label" ]), 
                                            (message = (null == labels ? void 0 : labels.length) && labels.join(" ")) && this.hostServices.alertScreenReader(message))), 
                                            shouldUpdateAnnotations = options.type & enums.EP.Data || options.type & enums.EP.Resize, 
                                            this.annotationHelper && shouldUpdateAnnotations && this.allowAnnotationHighlights && this.updateOutlinesFromAnnotations(), 
                                            [ 2 ];
                                        }
                                    });
                                });
                            }) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.hasNoColumnData = function() {
                var _a, _b, _c, _d, children = null === (_d = null === (_c = null === (_b = null === (_a = this.dataView) || void 0 === _a ? void 0 : _a.matrix) || void 0 === _b ? void 0 : _b.columns) || void 0 === _c ? void 0 : _c.root) || void 0 === _d ? void 0 : _d.children;
                return !children || !_.some(children, function(child) {
                    return !(null == child ? void 0 : child.isSubtotal);
                });
            }, PivotTable.prototype.updatePersistedWidths = function(previousDataView) {
                var currentAutoSizeColumns = tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.getValue(this.dataView.metadata.objects);
                if (!currentAutoSizeColumns && this.pivotTableControl) {
                    if (this.hasNoColumnData()) return;
                    for (var columnsWidth = [], columnHeaders = this.columnHierarchyNavigator.getHierarchyLeafNodes(), columnIndex = 0, _i = 0, pages_1 = this.pivotTableControl.getColumnWidthMeasureManager().getPageColumns(); _i < pages_1.length; _i++) for (var _a = 0, widths_1 = pages_1[_i].getColumnWidths(); _a < widths_1.length; _a++) columnsWidth.push({
                        node: columnHeaders[columnIndex],
                        width: widths_1[_a]
                    }), columnIndex++;
                    for (var cornersWidth = [], rowDepth = this.rowHierarchyNavigator.getHierarchyDepth(), colDepth = this.columnHierarchyNavigator.getHierarchyDepth(), i = 0; i < rowDepth; i++) cornersWidth.push({
                        corner: this.rowHierarchyNavigator.getCorner(i, colDepth - 1),
                        width: this.pivotTableControl.getRowLevelWidthMeasureManager().getLevelWidth(i)
                    });
                    this.sizeManager.setMissingWidths(columnsWidth, cornersWidth);
                } else if (currentAutoSizeColumns && previousDataView && previousDataView.metadata && previousDataView.metadata.objects && !tablixProperties.FX.PropColumnPivotTableAutoSizeColumns.getValue(previousDataView.metadata.objects)) {
                    columnHeaders = this.columnHierarchyNavigator.getHierarchyLeafNodes();
                    var cornerItems = [];
                    for (rowDepth = this.rowHierarchyNavigator.getHierarchyDepth(), colDepth = this.columnHierarchyNavigator.getHierarchyDepth(), 
                    i = 0; i < rowDepth; i++) cornerItems.push(this.rowHierarchyNavigator.getCorner(i, colDepth - 1));
                    this.sizeManager.clearWidths(columnHeaders, cornerItems);
                }
            }, PivotTable.prototype.onDataViewChanged = function(dataViews, operationKind, viewport) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var previousDataView, isDataComplete, valuesOnRow, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.setExpandCollapseEnabled(), _.isEmpty(dataViews) ? [ 3, 5 ] : (previousDataView = this.dataView, 
                            this.dataView = dataViews[0], isDataComplete = !this.dataView.metadata.segment, 
                            this.formattingProperties = this.tablixPropertyManager.getPivotTableObjects(this.dataView, function(key) {
                                for (var _a, args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                                return (_a = _this.hostServices).getLocalizedString.apply(_a, (0, tslib_es6.__spreadArray)([ key ], args || [], !1));
                            }, this.expandCollapseEnabled, this.style, this.featureSwitches, this.featureSwitches.enableCalculationHighlighting), 
                            this.formatters = this.formattingProperties.formatters, this.tooltipFormatters = this.formattingProperties.tooltipFormatters, 
                            valuesOnRow = this.shouldApplyValuesOnRow(), operationKind !== enums.su.Append ? [ 3, 2 ] : [ 4, this.onAppendDataView(previousDataView, valuesOnRow, isDataComplete) ]);

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.onNewDataView(previousDataView, viewport, valuesOnRow, isDataComplete) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 3, 6 ];

                          case 5:
                            this.dataView = void 0, this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(void 0, void 0), 
                            this.pivotTableControl && this.pivotTableControl.clear(), _a.label = 6;

                          case 6:
                            return this.waitingForData = !1, [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.destroy = function() {
                var _a;
                null === (_a = this.pivotTableControl) || void 0 === _a || _a.destroy();
            }, PivotTable.prototype.onAppendDataView = function(previousDataView, valuesOnRow, isDataComplete) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var previousRowLeafCount, visibleRowItemStart, visibleColumnItemStart, stepped, columnHierarchy, valueSources;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.pivotTableControl.setUnfrozenRowHeaders(tablixProperties.FX.PropUnfrozenRowHeaders.getValue(this.dataView.metadata.objects)), 
                            this.pivotTableControl.setRepeatRowHeaders(tablixProperties.FX.PropRowsRepeatRowHeaders.getValue(this.dataView.metadata.objects)), 
                            previousRowLeafCount = this.rowHierarchyNavigator.getHierarchyLeafCount(), visibleRowItemStart = this.getPreviousVisibleRowStart(), 
                            visibleColumnItemStart = this.getPreviousVisibleColumnStart(), this.updateHierarchyNavigators(this.formattingProperties.rowHeaders.steppedLayout, valuesOnRow, this.formattingProperties.subtotals.rowSubtotalsPosition === rowSubtotalPosition.we, isDataComplete, previousDataView.matrix.rows.root !== this.dataView.matrix.rows.root), 
                            this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            stepped = this.formattingProperties.rowHeaders.steppedLayout, columnHierarchy = this.matrixNavigator.getColumnHierarchy(), 
                            valueSources = this.matrixNavigator.getValueSources(), this.sortingManager.onDataViewChanged(this.matrixNavigator.getRowHierarchy(), columnHierarchy, valueSources, stepped, valuesOnRow), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            previousRowLeafCount > this.rowHierarchyNavigator.getHierarchyLeafCount() || !_.isEqual(previousDataView.metadata.columns, this.dataView.metadata.columns) ? [ 4, this.renderControl(pivotTableControlTypes.BM.ClearMeasurement, this.getVisibleRowStart(visibleRowItemStart, !1), this.getVisibleColumnStart(visibleColumnItemStart)) ] : [ 3, 2 ];

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.renderControl(pivotTableControlTypes.BM.ClearRendering, null, null) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.onNewDataView = function(previousDataView, viewport, valuesOnRow, isDataComplete) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var stepped, visibleRowItemStart, visibleColumnItemStart, columnHierarchy, valueSources, hostTooltipService;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return stepped = this.formattingProperties.rowHeaders.steppedLayout, visibleRowItemStart = this.getPreviousVisibleRowStart(), 
                            visibleColumnItemStart = this.getPreviousVisibleColumnStart(), this.createOrUpdateControlAndNavigators(stepped, valuesOnRow, this.formattingProperties.subtotals.rowSubtotalsPosition === rowSubtotalPosition.we, isDataComplete, this.formattingProperties.rowHeaders.expandCompositeHierarchy), 
                            this.pivotTableControl.setUnfrozenRowHeaders(tablixProperties.FX.PropUnfrozenRowHeaders.getValue(this.dataView.metadata.objects)), 
                            this.pivotTableControl.setRepeatRowHeaders(tablixProperties.FX.PropRowsRepeatRowHeaders.getValue(this.dataView.metadata.objects)), 
                            columnHierarchy = this.matrixNavigator.getColumnHierarchy(), valueSources = this.matrixNavigator.getValueSources(), 
                            this.sizeManager.onDataViewChanged(columnHierarchy, valueSources, this.dataView && this.dataView.metadata && this.dataView.metadata.objects, valuesOnRow), 
                            this.sortingManager.onDataViewChanged(this.matrixNavigator.getRowHierarchy(), columnHierarchy, valueSources, stepped, valuesOnRow), 
                            this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.pivotTableControl.setWidth(viewport.width), this.pivotTableControl.setHeight(viewport.height), 
                            hostTooltipService = this.hostServices.tooltips(), this.tooltipType = this.options.tooltipsEnabled && hostTooltipService && hostTooltipService.enabled() ? 1 : 0, 
                            this.interactionManager && this.interactionManager.setTooltipsEnabled(1 === this.tooltipType), 
                            this.binder.onDataViewChanged(this.dataView, this.formattingProperties, this.style, 0 === this.tooltipType, this.expandCollapseEnabled && "interactive" === this.options.expandCollapse.buttonsOption), 
                            [ 4, this.renderControl(pivotTableControlTypes.BM.ClearMeasurement, this.getVisibleRowStart(visibleRowItemStart, pivotTableSortingManager.S.hasSortingChanged(previousDataView, this.dataView)), this.getVisibleColumnStart(visibleColumnItemStart)) ];

                          case 1:
                            return _a.sent(), this.updatePersistedWidths(previousDataView), [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.onVerticalScrollButtonClick = function(rowStart, rowEnd) {
                var message = this.hostServices.getLocalizedString("Table_Location_Vertical", this.getScrollRowIndex(rowStart), this.getScrollRowIndex(rowEnd));
                this.hostServices.alertScreenReader(message);
            }, PivotTable.prototype.onHorizontalScrollButtonClick = function(columnStart, columnEnd) {
                var message = this.hostServices.getLocalizedString("Table_Location_Horizontal", this.getScrollColumnIndex(columnStart), this.getScrollColumnIndex(columnEnd));
                this.hostServices.alertScreenReader(message);
            }, PivotTable.prototype.getScrollRowIndex = function(rowIndex) {
                return 0 === rowIndex ? 1 : this.pivotTableControl.getMidRenderer().getAriaRowIndex(rowIndex);
            }, PivotTable.prototype.getScrollColumnIndex = function(columnIndex) {
                return 0 === columnIndex ? 1 : this.pivotTableControl.getMidRenderer().getAriaColIndex(columnIndex, !1);
            }, PivotTable.prototype.onClearSelection = function() {
                this.selectionManager.clearLocal(), this.renderSelection();
            }, PivotTable.prototype.onRestoreSelection = function(options) {
                var matchingSelectionFound = this.selectionManager.restoreSelectionState(options.selection, this.matrixNavigator);
                return this.renderSelection(), matchingSelectionFound;
            }, PivotTable.prototype.shouldApplyValuesOnRow = function() {
                var dvMatrix = this.dataView.matrix, valueSources = dvMatrix.valueSources, columnLevels = dvMatrix.columns.levels;
                if (_.isEmpty(columnLevels)) return !1;
                var firstColumnLevelSources = columnLevels[0].sources;
                return this.formattingProperties.values.valuesOnRow && valueSources.length > 1 && !(_.find(firstColumnLevelSources, function(source) {
                    return source.isMeasure;
                }) && _.find(firstColumnLevelSources, function(source) {
                    return !source.isMeasure;
                }));
            }, PivotTable.prototype.updateHierarchyNavigators = function(stepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, rootChanged) {
                this.matrixNavigator.update(this.dataView.matrix, stepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, rootChanged, this.formatters, this.tooltipFormatters, this.getSubtotalByColumn(), this.formattingProperties.subtotals.rowSubtotalsPosition, this.featureSwitches.matrixLayouts ? this.formattingProperties.general.layout : void 0, this.formattingProperties.blankRows.showBlankRows), 
                this.rowHierarchyNavigator.setHierarchy(this.matrixNavigator.getRowHierarchy()), 
                this.columnHierarchyNavigator.setHierarchy(this.matrixNavigator.getColumnHierarchy());
            }, PivotTable.prototype.getSubtotalByColumn = function() {
                for (var columnsSubtotals = {}, staticObjects = this.dataView.metadata.objects, areRowSubtotalsEnabled = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotals.getValue(staticObjects), areRowSubtotalsPerLevel = tablixProperties.FX.PropSubTotalsPivotTableRowSubtotalsPerLevel.getValue(staticObjects), areColumnSubtotalsEnabled = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotals.getValue(staticObjects), areColumnSubtotalsPerLevel = tablixProperties.FX.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(staticObjects), _i = 0, _a = this.dataView.metadata.columns; _i < _a.length; _i++) {
                    var column = _a[_i], masterSubtotalEnabled = void 0, perLevel = void 0;
                    if (column.roles) {
                        if (column.roles[matrix_capabilities.r.rows]) masterSubtotalEnabled = areRowSubtotalsEnabled, 
                        perLevel = areRowSubtotalsPerLevel; else {
                            if (!column.roles[matrix_capabilities.r.columns]) continue;
                            masterSubtotalEnabled = areColumnSubtotalsEnabled, perLevel = areColumnSubtotalsPerLevel;
                        }
                        columnsSubtotals[column.queryName] = masterSubtotalEnabled && (!perLevel || tablixProperties.FX.PropSubTotalsPivotTableLevelSubtotalEnabled.getValue(column.objects));
                    }
                }
                return columnsSubtotals;
            }, PivotTable.prototype.renderControl = function(renderingMode, visibleRowStart, visibleColumnStart) {
                return this.pivotTableControl.renderAsync(renderingMode, visibleRowStart, visibleColumnStart);
            }, PivotTable.prototype.getPreviousVisibleRowStart = function() {
                if (this.pivotTableControl) {
                    var visibleRowStart = this.pivotTableControl.getVisibleRowStart();
                    if (!visibleRowStart) return null;
                    var visibleRowStartItem = this.rowHierarchyNavigator.getHierarchyLeafAt(visibleRowStart.rowIndex);
                    return visibleRowStartItem ? {
                        item: visibleRowStartItem,
                        offset: visibleRowStart.visibleHeight
                    } : null;
                }
            }, PivotTable.prototype.getPreviousVisibleColumnStart = function() {
                if (this.pivotTableControl) {
                    var visibleColumnStart = this.pivotTableControl.getVisibleColumnStart();
                    if (!visibleColumnStart) return null;
                    var visibleColumnStartItem = this.columnHierarchyNavigator.getHierarchyLeafAt(visibleColumnStart.columnIndex);
                    return visibleColumnStartItem ? {
                        item: visibleColumnStartItem,
                        offset: visibleColumnStart.visibleWidth
                    } : null;
                }
            }, PivotTable.prototype.getSubSelectionShortcuts = function(subselections) {
                if (this.supportsOnObject) for (var _i = 0, visualObjects_1 = _.first(subselections).visualObjects; _i < visualObjects_1.length; _i++) {
                    var visualObject = visualObjects_1[_i];
                    switch (_.isEmpty(visualObject.selectorsByColumn) || (0, contracts_selector.tV)(visualObject.selectorsByColumn), 
                    visualObject.objectName) {
                      case "columnHeaders":
                        return [ {
                            type: 0
                        }, (0, tslib_es6.__assign)({
                            type: 2,
                            enabledLabel: this.hostServices.getLocalizedString("Add_Column_Subtotals")
                        }, pivotTable_capabilities.t.subTotals.columnSubtotals), {
                            type: 1,
                            destinationInfo: {
                                cardUid: "".concat("Visual", "-").concat("columnHeaders"),
                                groupUid: "".concat("columnHeaders", "-").concat("text")
                            },
                            label: this.hostServices.getLocalizedString("Format_Column_Headers")
                        } ];

                      case "rowHeaders":
                        return [ {
                            type: 0,
                            excludedResetFormattingIds: [ pivotTable_capabilities.t.rowHeaders.showExpandCollapseButtons, pivotTable_capabilities.t.subTotals.rowSubtotals ]
                        }, (0, tslib_es6.__assign)({
                            type: 2,
                            enabledLabel: this.hostServices.getLocalizedString("Add_ExpandCollapse")
                        }, pivotTable_capabilities.t.rowHeaders.showExpandCollapseButtons), (0, tslib_es6.__assign)({
                            type: 2,
                            enabledLabel: this.hostServices.getLocalizedString("Add_Row_Subtotals")
                        }, pivotTable_capabilities.t.subTotals.rowSubtotals), {
                            type: 1,
                            destinationInfo: {
                                cardUid: "".concat("Visual", "-").concat("rowHeaders"),
                                groupUid: "".concat("rowHeaders", "-").concat("text")
                            },
                            label: this.hostServices.getLocalizedString("Format_Row_Headers")
                        } ];

                      case "subtotal-row":
                        return [ {
                            type: 0
                        }, (0, tslib_es6.__assign)({
                            type: 3,
                            label: this.hostServices.getLocalizedString("Visual_Position")
                        }, pivotTable_capabilities.t.subTotals.rowSubtotalsPosition), {
                            type: 1,
                            destinationInfo: {
                                cardUid: "".concat("Visual", "-").concat("rowSubTotal")
                            },
                            label: this.hostServices.getLocalizedString("Format_Row_Subtotals")
                        } ];

                      case "subtotal-row-labels":
                        return [ {
                            type: 0
                        }, {
                            type: 1,
                            destinationInfo: {
                                cardUid: "".concat("Visual", "-").concat("rowSubTotal")
                            },
                            label: this.hostServices.getLocalizedString("Format_Row_Subtotal_Label")
                        } ];

                      case "subtotal-column":
                        return [ {
                            type: 0
                        }, {
                            type: 1,
                            destinationInfo: {
                                cardUid: "".concat("Visual", "-").concat("columnSubTotal")
                            },
                            label: this.hostServices.getLocalizedString("Format_Column_Subtotals")
                        } ];

                      case "total-column":
                        return [ {
                            type: 0
                        }, {
                            type: 1,
                            destinationInfo: {
                                cardUid: "".concat("Visual", "-").concat("columnTotal"),
                                groupUid: "".concat("columnTotal", "-").concat("values")
                            },
                            label: this.hostServices.getLocalizedString("Format_Grand_Total_Row")
                        } ];

                      case "total-row":
                        return [ {
                            type: 0
                        }, {
                            type: 1,
                            destinationInfo: {
                                cardUid: "".concat("Visual", "-").concat("rowTotal"),
                                groupUid: "".concat("rowTotal", "-").concat("values")
                            },
                            label: this.hostServices.getLocalizedString("Format_Grand_Total_Row")
                        } ];
                    }
                }
            }, PivotTable.prototype.getSubSelectionStyles = function(subselections) {
                if (this.supportsOnObject) {
                    var visualObject, selector, visualObjects = _.first(subselections).visualObjects;
                    if (visualObjects.length > 0) switch (visualObject = visualObjects[0], _.isEmpty(visualObject.selectorsByColumn) || (selector = (0, 
                    contracts_selector.tV)(visualObject.selectorsByColumn)), visualObject.objectName) {
                      case "columnHeaders":
                        var textSubSelectionStylesColumnHeaders = (0, onObjectUtil.RM)(this.hostServices, {
                            boldReference: pivotTable_capabilities.t.columnHeaders.bold,
                            italicReference: pivotTable_capabilities.t.columnHeaders.italic,
                            underlineReference: pivotTable_capabilities.t.columnHeaders.underline,
                            fontColorReference: pivotTable_capabilities.t.columnHeaders.fontColor,
                            fontFamilyReference: pivotTable_capabilities.t.columnHeaders.fontFamily,
                            fontSizeReference: pivotTable_capabilities.t.columnHeaders.fontSize,
                            backgroundReference: pivotTable_capabilities.t.columnHeaders.backColor,
                            horizontalAlignmentReference: pivotTable_capabilities.t.columnHeaders.alignment,
                            wordWrapReference: pivotTable_capabilities.t.columnHeaders.wordWrap
                        });
                        return (0, tslib_es6.__assign)({
                            type: 1
                        }, textSubSelectionStylesColumnHeaders);

                      case "rowHeaders":
                        var textSubSelectionStylesRowHeaders = (0, onObjectUtil.RM)(this.hostServices, {
                            boldReference: pivotTable_capabilities.t.rowHeaders.bold,
                            italicReference: pivotTable_capabilities.t.rowHeaders.italic,
                            underlineReference: pivotTable_capabilities.t.rowHeaders.underline,
                            fontColorReference: pivotTable_capabilities.t.rowHeaders.fontColor,
                            fontFamilyReference: pivotTable_capabilities.t.rowHeaders.fontFamily,
                            fontSizeReference: pivotTable_capabilities.t.rowHeaders.fontSize,
                            backgroundReference: pivotTable_capabilities.t.rowHeaders.backColor,
                            horizontalAlignmentReference: pivotTable_capabilities.t.rowHeaders.alignment,
                            wordWrapReference: pivotTable_capabilities.t.rowHeaders.wordWrap
                        });
                        return (0, tslib_es6.__assign)({
                            type: 1
                        }, textSubSelectionStylesRowHeaders);

                      case "subtotal-row":
                        selector = {
                            id: "Row"
                        };
                        var textSubSelectionStylesSubTotalRow = (0, onObjectUtil.RM)(this.hostServices, {
                            boldReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.bold), {
                                selector
                            }),
                            italicReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.italic), {
                                selector
                            }),
                            underlineReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.underline), {
                                selector
                            }),
                            fontColorReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.fontColor), {
                                selector
                            }),
                            fontFamilyReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.fontFamily), {
                                selector
                            }),
                            fontSizeReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.fontSize), {
                                selector
                            }),
                            backgroundReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.backColor), {
                                selector
                            })
                        });
                        return (0, tslib_es6.__assign)({
                            type: 1
                        }, textSubSelectionStylesSubTotalRow);

                      case "subtotal-column":
                        selector = {
                            id: "Column"
                        };
                        var textSubSelectionStylesTotalColumnLabels = (0, onObjectUtil.RM)(this.hostServices, {
                            boldReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.bold), {
                                selector
                            }),
                            italicReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.italic), {
                                selector
                            }),
                            underlineReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.underline), {
                                selector
                            }),
                            fontColorReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.fontColor), {
                                selector
                            }),
                            fontFamilyReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.fontFamily), {
                                selector
                            }),
                            fontSizeReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.fontSize), {
                                selector
                            }),
                            backgroundReference: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, pivotTable_capabilities.t.subTotals.backColor), {
                                selector
                            })
                        });
                        return (0, tslib_es6.__assign)({
                            type: 1
                        }, textSubSelectionStylesTotalColumnLabels);

                      case "total-column":
                        var textSubSelectionStylesTotalColumn = (0, onObjectUtil.RM)(this.hostServices, {
                            boldReference: pivotTable_capabilities.t.columnTotal.bold,
                            italicReference: pivotTable_capabilities.t.columnTotal.italic,
                            underlineReference: pivotTable_capabilities.t.columnTotal.underline,
                            fontColorReference: pivotTable_capabilities.t.columnTotal.fontColor,
                            fontFamilyReference: pivotTable_capabilities.t.columnTotal.fontFamily,
                            fontSizeReference: pivotTable_capabilities.t.columnTotal.fontSize,
                            backgroundReference: pivotTable_capabilities.t.columnTotal.backColor
                        });
                        return (0, tslib_es6.__assign)({
                            type: 1
                        }, textSubSelectionStylesTotalColumn);

                      case "total-row":
                        var textSubSelectionStylesTotalRow = (0, onObjectUtil.RM)(this.hostServices, {
                            boldReference: pivotTable_capabilities.t.rowTotal.bold,
                            italicReference: pivotTable_capabilities.t.rowTotal.italic,
                            underlineReference: pivotTable_capabilities.t.rowTotal.underline,
                            fontColorReference: pivotTable_capabilities.t.rowTotal.fontColor,
                            fontFamilyReference: pivotTable_capabilities.t.rowTotal.fontFamily,
                            fontSizeReference: pivotTable_capabilities.t.rowTotal.fontSize,
                            backgroundReference: pivotTable_capabilities.t.rowTotal.backColor
                        });
                        return (0, tslib_es6.__assign)({
                            type: 1
                        }, textSubSelectionStylesTotalRow);
                    }
                }
            }, PivotTable.prototype.getVisibleRowStart = function(previousVisibleRowStart, sortingChanged) {
                if (!previousVisibleRowStart) return null;
                if (0 === this.pivotTableControl.getViewport().top) return null;
                if (sortingChanged) return {
                    rowIndex: 0,
                    visibleHeight: Number.MAX_VALUE
                };
                var matchingRowStartItem = pivotTableSelectionManager.l.getMatchingHeader(previousVisibleRowStart.item, this.rowHierarchyNavigator.getHierarchyItems());
                if (!matchingRowStartItem) return null;
                var rowIndex = this.rowHierarchyNavigator.getLeafIndex(matchingRowStartItem);
                return void 0 === rowIndex ? null : {
                    rowIndex,
                    visibleHeight: previousVisibleRowStart.offset
                };
            }, PivotTable.prototype.getVisibleColumnStart = function(previousVisibleColumnStart) {
                if (!previousVisibleColumnStart) return null;
                if (0 === this.pivotTableControl.getViewport().left) return null;
                var matchingColumnStartItem = pivotTableSelectionManager.l.getMatchingHeader(previousVisibleColumnStart.item, this.columnHierarchyNavigator.getHierarchyItems());
                return matchingColumnStartItem && this.columnHierarchyNavigator.isLeaf(matchingColumnStartItem) ? {
                    columnIndex: this.columnHierarchyNavigator.getLeafIndex(matchingColumnStartItem),
                    visibleWidth: previousVisibleColumnStart.offset
                } : null;
            }, PivotTable.prototype.renderSelection = function() {
                this.pivotTableControl.renderAsync(pivotTableControlTypes.BM.ClearRendering).catch(function(reason) {
                    return trace.f.error(reason);
                });
            }, PivotTable.prototype.createOrUpdateControlAndNavigators = function(stepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, expandCompositeHierarchy) {
                var _this = this, compositeGroupSeparator = this.hostServices.getLocalizedString("ListJoin_Separator");
                if (this.matrixNavigator || (this.matrixNavigator = new matrixHierarchyNavigator.hc(compositeGroupSeparator, this.tablixPropertyManager.tablixProperties, this.hostServices, expandCompositeHierarchy, this.isModernRowHeaderStyle())), 
                this.rowHierarchyNavigator ? stepped ? this.rowHierarchyNavigator instanceof pivotTableHierarchyNavigator.S || (this.rowHierarchyNavigator = new pivotTableHierarchyNavigator.S(this.matrixNavigator)) : this.rowHierarchyNavigator instanceof pivotTableHierarchyNavigator.S && (this.rowHierarchyNavigator = new pivotTableHierarchyNavigator.Q(this.matrixNavigator)) : (this.rowHierarchyNavigator = stepped ? new pivotTableHierarchyNavigator.S(this.matrixNavigator) : new pivotTableHierarchyNavigator.Q(this.matrixNavigator), 
                this.columnHierarchyNavigator = new pivotTableHierarchyNavigator.Q(this.matrixNavigator)), 
                this.updateHierarchyNavigators(stepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, !0), 
                this.pivotTableControl) this.pivotTableControl.getSteppedLayout() !== stepped && this.switchRowHeadersLayout(stepped); else {
                    var binderOptions = {
                        onBindRowHeader: function(item) {
                            _this.onBindRowHeader(item);
                        },
                        onHyperlinkClicked: function(url, event) {
                            return _this.onHyperlinkClicked(url, event);
                        },
                        onRowHeaderExpansionChange: function(header, isCollapsed) {
                            return _this.onHeaderExpansionChange(header, [ matrix_capabilities.r.rows ], isCollapsed);
                        },
                        defaultTotalLabel: this.totalLabel,
                        selectionEnabled: this.options.selection && this.options.selection.enabled,
                        sortingEnabled: this.options.sorting && this.options.sorting.enabled,
                        sortIconEnabled: this.options.sorting && this.options.sorting.showActiveSortIcon,
                        interactivityIndicatorEnabled: this.options.interactivityIndicatorEnabled,
                        hyperlinksEnabled: this.featureSwitches.conditionalTablixWebURL,
                        tablixProperties: this.tablixPropertyManager.tablixProperties
                    }, pivotTableContainer = document.createElement("div");
                    pivotTableContainer.className = "pivotTableContainer", this.element.append(pivotTableContainer), 
                    this.binder = new PivotTableBinder(binderOptions, this.selectionManager, this.sortingManager, this.hostServices, pivotTableContainer, !0);
                    var onObject = this.supportsOnObject;
                    this.pivotTableControl = new tablixControl.d(pivotTableContainer, this.sizeManager, this.createControlOptions(), !1, !0, onObject, this.enableCalculationHighlighting, this.hostServices, this.style, this.onVerticalScrollButtonClick.bind(this), this.onHorizontalScrollButtonClick.bind(this), this.options.interactivityIndicatorEnabled, void 0, void 0, this.showAsTableNativeMenuEnabled), 
                    this.pivotTableControl.setClassName("pivotTable"), this.switchRowHeadersLayout(stepped), 
                    this.pivotTableControl.setColumnNavigator(this.columnHierarchyNavigator), this.binder.setColumnNavigator(this.columnHierarchyNavigator), 
                    this.pivotTableControl.setBinder(this.binder);
                }
            }, PivotTable.prototype.isModernRowHeaderStyle = function() {
                var _a;
                return !(!this.featureSwitches.matrixLayouts || !(null === (_a = this.formattingProperties.rowHeaders) || void 0 === _a ? void 0 : _a.legacyStyleDisabled));
            }, PivotTable.prototype.createControlOptions = function() {
                var _this = this, scrollingEnabled = this.options.scrolling.enabled, columnResizingEnabled = this.options.columnResizing.enabled;
                this.options.tooltipsEnabled && (this.interactionManager = new PivotTableInteractionManager(this.tooltipService, this.selectionManager, this.valueLabel, this.totalLabel));
                var interactionManager = this.interactionManager, isExpandCollapseEnabled = "interactive" === this.options.expandCollapse.buttonsOption, columnHeaderInteractionHandler = null;
                interactionManager && (columnHeaderInteractionHandler = interactionManager.getHandlerTop());
                var bodyCellInteractionHandler = null;
                return interactionManager && (bodyCellInteractionHandler = interactionManager.getHandlerMidOrBot()), 
                this.options.selection.enabled ? {
                    rowHeaderClickHandler: function(rowHeader, mouseEvent) {
                        return !_this.formatMode && _this.onItemClick(rowHeader, mouseEvent, pivotTableSelectionManager.D.RowHeader);
                    },
                    rowHeaderContextMenuHandler: function(rowHeader, mouseEvent) {
                        return !_this.formatMode && _this.onItemContextMenu(rowHeader, pivotTableSelectionManager.D.RowHeader, mouseEvent, matrix_capabilities.r.rows);
                    },
                    rowHeaderInteractionHandler: null,
                    rowHeaderFocusHandler: function(rowHeader) {
                        return _this.onRowHeaderFocus(rowHeader);
                    },
                    rowHeaderExpandCollapseHandler: isExpandCollapseEnabled ? function(rowHeader, isCollapsed) {
                        return _this.onHeaderExpansionChange(rowHeader, [ matrix_capabilities.r.rows ], isCollapsed);
                    } : null,
                    columnHeaderClickHandler: function(columnHeader, mouseEvent) {
                        return !_this.formatMode && _this.onItemClick(columnHeader, mouseEvent, pivotTableSelectionManager.D.ColumnHeader);
                    },
                    columnHeaderContextMenuHandler: function(columnHeader, mouseEvent) {
                        return !_this.formatMode && _this.onItemContextMenu(columnHeader, pivotTableSelectionManager.D.ColumnHeader, mouseEvent, matrix_capabilities.r.columns);
                    },
                    columnHeaderInteractionHandler: this.formatMode ? null : columnHeaderInteractionHandler,
                    columnHeaderFocusHandler: function(columnHeader) {
                        return _this.onColumnHeaderFocus(columnHeader);
                    },
                    bodyCellClickHandler: function(bodyCell, mouseEvent) {
                        return !_this.formatMode && _this.onItemClick(bodyCell, mouseEvent, pivotTableSelectionManager.D.BodyCell);
                    },
                    bodyCellContextMenuHandler: function(bodyCell, mouseEvent) {
                        return !_this.formatMode && _this.onItemContextMenu(bodyCell, pivotTableSelectionManager.D.BodyCell, mouseEvent, matrix_capabilities.r.values);
                    },
                    bodyCellInteractionHandler: this.formatMode ? null : bodyCellInteractionHandler,
                    bodyCellFocusHandler: function(bodyCell) {
                        return null;
                    },
                    cornerCellClickHandler: function(cornerCell, mouseEvent) {
                        return !_this.formatMode && _this.onCornerCellClick(cornerCell, mouseEvent);
                    },
                    cornerCellContextMenuHandler: function(cornerCell, mouseEvent) {
                        return !_this.formatMode && _this.onCornerCellContextMenu(cornerCell, mouseEvent);
                    },
                    cornerCellInteractionHandler: null,
                    cornerCellFocusHandler: function(cornerCell) {
                        return _this.onCornerCellFocus(cornerCell);
                    },
                    cellContentActivationHandler: function(element, event) {
                        return !_this.formatMode && _this.onContentActivation(element, event);
                    },
                    whitespaceClickHandler: function(mouseEvent, shouldAlertScreenReader) {
                        return !_this.formatMode && _this.onWhitespaceClick(shouldAlertScreenReader);
                    },
                    scrollingEnabled,
                    columnResizingEnabled,
                    rowLevelResizingEnabled: columnResizingEnabled,
                    onScroll: function() {
                        return _this.onScroll();
                    }
                } : {
                    rowHeaderClickHandler: null,
                    rowHeaderContextMenuHandler: null,
                    rowHeaderInteractionHandler: null,
                    rowHeaderFocusHandler: null,
                    rowHeaderExpandCollapseHandler: isExpandCollapseEnabled ? function(rowHeader, isCollapsed) {
                        return _this.onHeaderExpansionChange(rowHeader, [ matrix_capabilities.r.rows ], isCollapsed);
                    } : null,
                    columnHeaderClickHandler: null,
                    columnHeaderContextMenuHandler: null,
                    columnHeaderInteractionHandler,
                    columnHeaderFocusHandler: null,
                    bodyCellClickHandler: null,
                    bodyCellContextMenuHandler: null,
                    bodyCellInteractionHandler,
                    bodyCellFocusHandler: null,
                    cornerCellClickHandler: null,
                    cornerCellContextMenuHandler: null,
                    cornerCellInteractionHandler: null,
                    cornerCellFocusHandler: null,
                    cellContentActivationHandler: null,
                    whitespaceClickHandler: null,
                    scrollingEnabled,
                    columnResizingEnabled,
                    rowLevelResizingEnabled: columnResizingEnabled,
                    onScroll: function() {
                        return _this.onScroll();
                    }
                };
            }, PivotTable.prototype.onScroll = function() {
                this.interactionManager && !this.interactionManager.tooltipVisible() && this.interactionManager.hideTooltip(), 
                this.supportsOnObject && this.subSelectionHelper && this.formatMode && (this.subSelectionHelper.onVisualScroll(), 
                this.subSelectionHelper.clearHoveredOutline()), this.enableCalculationHighlighting && this.annotationHelper && this.allowAnnotationHighlights && this.annotationHelper.onVisualScroll();
            }, PivotTable.prototype.onWhitespaceClick = function(shouldAlertScreenReader) {
                if (this.selectionManager.onWhitespaceClick(), this.renderSelection(), shouldAlertScreenReader) {
                    var message = this.hostServices.getLocalizedString("Tablix_Selections_Cleared");
                    this.hostServices.alertScreenReader(message);
                }
            }, PivotTable.prototype.onHyperlinkClicked = function(url, event) {
                this.hostServices.onHyperlinkClick(url, event);
            }, PivotTable.prototype.onItemClick = function(item, mouseEvent, selectionMode) {
                if (!this.selectionManager.isDrillingEnabled(item, mouseEvent, selectionMode)) if (selectionMode === pivotTableSelectionManager.D.ColumnHeader && this.sortingManager.isColumnHeaderSortable(item)) this.options.sorting.enabled && this.sortingManager.sortColumnHeader(item); else {
                    var matchingItem = pivotTableSelectionManager.l.getMatchingItem(item, selectionMode, this.rowHierarchyNavigator.getHierarchyItems(), this.columnHierarchyNavigator.getHierarchyItems(), this.rowHierarchyNavigator), selectMode = browserUtils.M.isCtrlOrMeta(mouseEvent) || 1 === this.hostServices.dataMultiSelectMode() ? 3 : 0;
                    matchingItem && (this.selectionManager.select(matchingItem, selectionMode, selectMode), 
                    this.renderSelection());
                }
            }, PivotTable.prototype.onRowHeaderFocus = function(item) {
                (0, pivotTableInteractivityUtils.MX)(item, this.valueLabel, !1, this.totalLabel);
                var additionalInfo = [], expansionState = this.rowHierarchyNavigator.getExpansionState(item);
                if (!this.pivotTableControl.getSteppedLayout() && 1 !== expansionState) {
                    var childrensSpanned = this.rowHierarchyNavigator.getNodeLeafCount(item);
                    childrensSpanned > 1 && additionalInfo.push(this.hostServices.getLocalizedString("SpansXRows", childrensSpanned));
                }
                if (this.rowHierarchyNavigator.isMultiLevelHierarchy()) {
                    var hierarchyLevelText = this.getHierarchyLevelInfo(item);
                    additionalInfo.push(hierarchyLevelText);
                }
                if (this.rowHierarchyNavigator.getLevel(item) > 0) {
                    var numChildren = this.rowHierarchyNavigator.getParent(item).children.length, childIndex = this.rowHierarchyNavigator.getIndex(item) + 1;
                    this.pivotTableControl.getSteppedLayout() && (numChildren -= 1, childIndex -= 1), 
                    additionalInfo.push(this.hostServices.getLocalizedString("Generic_ListPosition", childIndex, numChildren));
                }
                this.hostServices.alertScreenReader((0, pivotTableInteractivityUtils.IP)({
                    displayNameParts: [],
                    valueParts: []
                }, additionalInfo));
            }, PivotTable.prototype.onColumnHeaderFocus = function(item) {
                (0, pivotTableInteractivityUtils.MX)(item, this.valueLabel, !1, this.totalLabel);
                var additionalInfo = [], childrensSpanned = this.columnHierarchyNavigator.getNodeLeafCount(item);
                if (childrensSpanned > 1 && additionalInfo.push(this.hostServices.getLocalizedString("SpansXColumns", childrensSpanned)), 
                this.columnHierarchyNavigator.isMultiLevelHierarchy()) {
                    var hierarchyLevelText = this.getHierarchyLevelInfo(item);
                    additionalInfo.push(hierarchyLevelText);
                }
                if (this.columnHierarchyNavigator.getLevel(item) > 0) {
                    var numChildren = this.columnHierarchyNavigator.getParent(item).children.length, childIndex = this.columnHierarchyNavigator.getIndex(item) + 1;
                    additionalInfo.push(this.hostServices.getLocalizedString("Generic_ListPosition", childIndex, numChildren));
                }
                this.hostServices.alertScreenReader((0, pivotTableInteractivityUtils.IP)({
                    displayNameParts: [],
                    valueParts: []
                }, additionalInfo));
            }, PivotTable.prototype.onHeaderExpansionChange = function(header, roles, isCollapsed) {
                var selector = this.selectionManager.createSelectorsByColumn(header), nodeIndex = this.selectionManager.getHierarchyNodeIndex(header);
                this.hostServices.setNodeExpansionState({
                    dataRoles: roles,
                    data: selector,
                    isCollapse: isCollapsed,
                    nodeIndex
                });
            }, PivotTable.prototype.onItemContextMenu = function(item, selectionMode, mouseEvent, roleName) {
                var _a;
                mouseEvent.stopPropagation(), mouseEvent.preventDefault(), this.selectionManager.onItemContextMenu(item, selectionMode, mouseEvent, [ roleName ], tablixProperties.FX.PropUnfrozenRowHeaders.getValue(null === (_a = this.dataView) || void 0 === _a ? void 0 : _a.metadata.objects));
            }, PivotTable.prototype.onCornerCellClick = function(cornerCell, mouseEvent) {
                this.options.sorting.enabled && this.sortingManager.isCornerSortable(cornerCell) && this.sortingManager.sortCorner(cornerCell);
            }, PivotTable.prototype.onCornerCellContextMenu = function(cornerCell, mouseEvent) {}, 
            PivotTable.prototype.onCornerCellFocus = function(cornerCell) {
                (0, pivotTableInteractivityUtils.p_)(cornerCell), this.hostServices.alertScreenReader((0, 
                pivotTableInteractivityUtils.IP)({
                    displayNameParts: [],
                    valueParts: []
                }));
            }, PivotTable.prototype.onContentActivation = function(cellElement, event) {
                debug.fF.assertValue(cellElement, "onContentActivated - null cellElement");
                var link = cellElement.querySelector("a");
                link && link.dispatchEvent(event);
            }, PivotTable.prototype.switchRowHeadersLayout = function(stepped) {
                this.pivotTableControl.setSteppedLayout(stepped), this.pivotTableControl.setRowNavigator(this.rowHierarchyNavigator), 
                this.binder.setRowNavigator(this.rowHierarchyNavigator);
            }, PivotTable.prototype.onBindRowHeader = function(item) {
                this.needsMoreData(item) && (setTimeout(this.hostServices.loadMoreData), this.waitingForData = !0, 
                this.hostServices.alertScreenReader(this.hostServices.getLocalizedString("Table_Loading_More_Data")));
            }, PivotTable.prototype.needsMoreData = function(item) {
                if (this.waitingForData || !this.dataView || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var loadMoreThreshold = this.rowHierarchyNavigator.getHierarchyLeafCount() * PivotTable.preferredLoadMoreThreshold;
                return this.rowHierarchyNavigator.getLeafIndex(item) >= loadMoreThreshold;
            }, PivotTable.prototype.getFormattingModel = function() {
                if (this.dataView) return this.tablixPropertyManager.getFormattingModel(this.hostServices, this.formattingProperties, this.dataView, ITablixFormatting.Y.PivotTable, this.expandCollapseEnabled, this.featureSwitches, this.style);
            }, PivotTable.prototype.enumerateObjectInstances = function(options) {
                var _this = this, enumeration = new objectEnumerationBuilder.G;
                return this.dataView && this.tablixPropertyManager.enumerateObjectInstances(options, enumeration, this.dataView, ITablixFormatting.Y.PivotTable, function(key) {
                    for (var _a, args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                    return (_a = _this.hostServices).getLocalizedString.apply(_a, (0, tslib_es6.__spreadArray)([ key ], args || [], !1));
                }, this.featureSwitches, this.expandCollapseEnabled, this.style), enumeration.complete();
            }, PivotTable.prototype.enumerateObjectRepetition = function() {
                var enumeration = [];
                return this.dataView && this.tablixPropertyManager.enumerateObjectRepetition(enumeration, this.dataView, ITablixFormatting.Y.PivotTable, this.featureSwitches), 
                enumeration;
            }, PivotTable.prototype.getHierarchyLevelInfo = function(item) {
                return "".concat(this.hostServices.getLocalizedString("Level"), " ").concat(this.rowHierarchyNavigator.getLevel(item) + 1);
            }, PivotTable.prototype.setExpandCollapseEnabled = function() {
                this.expandCollapseEnabled = this.hostServices.canExpandCollapse([ matrix_capabilities.r.rows ]) && "hidden" !== this.options.expandCollapse.buttonsOption;
            }, PivotTable.prototype.getSubSelectables = function(filter) {
                return this.subSelectionHelper.getAllSubSelectables(filter);
            }, PivotTable.prototype.updateOutlinesFromAnnotations = function() {
                var _this = this;
                this.annotationHighlightElementToRegionIdMap.clear(), this.annotationHelper.hideAllOutlines(!0);
                var columnQueryNameToAnnotationMap = function(dataView) {
                    var _a;
                    if (dataView) {
                        var columnQueryNameToAnnotationMap = {};
                        return _.forEach(null === (_a = dataView.metadata) || void 0 === _a ? void 0 : _a.columns, function(column) {
                            var _a;
                            if (null === (_a = column.objects) || void 0 === _a ? void 0 : _a.annotations) {
                                var annotatedColumnQueryName = column.queryName, highlightsAnnotation = (0, dataViewObject2.NA)(column.objects, pivotTable_capabilities.t.annotations.highlights);
                                annotatedColumnQueryName && highlightsAnnotation && (columnQueryNameToAnnotationMap[annotatedColumnQueryName] = highlightsAnnotation);
                            }
                        }), columnQueryNameToAnnotationMap;
                    }
                }(this.dataView);
                if (_.isEmpty(columnQueryNameToAnnotationMap)) this.annotationHelper.renderOutlines(); else {
                    var pivotTableControl = this.pivotTableControl, viewPort = pivotTableControl.getViewport(), visibleColumns = measurement.sW.getVisibleRange(viewPort.left, viewPort.width, pivotTableControl.getColumnWidthMeasureManager());
                    if (visibleColumns) {
                        var visibleRows = measurement._E.getVisibleRange(viewPort.top, viewPort.height, pivotTableControl.getRowHeightMeasureManager());
                        if (visibleRows) {
                            var midRenderer = pivotTableControl.getMidRenderer(), columnQueryNameToElementsMap = function(targetColumnQueryNames, visibleColumnsRange, visibleRowsRange, midRenderer) {
                                for (var _a, queryNames = new Set(targetColumnQueryNames), columnQueryNameToElementsMap = {}, columnIdx = visibleColumnsRange.firstLeafIndex; columnIdx <= visibleColumnsRange.lastLeafIndex; columnIdx++) for (var rowIdx = visibleRowsRange.firstLeafIndex; rowIdx <= visibleRowsRange.lastLeafIndex; rowIdx++) {
                                    var element = midRenderer.getElementByIndex(rowIdx, columnIdx, pivotTableControlTypes.aP.Main);
                                    if (element) {
                                        var item = midRenderer.getItemByElement(element), itemQueryName = null === (_a = null == item ? void 0 : item.columnMetadata) || void 0 === _a ? void 0 : _a.queryName;
                                        if (itemQueryName && queryNames.has(itemQueryName)) {
                                            var matchingElements = columnQueryNameToElementsMap[itemQueryName];
                                            null == matchingElements && (columnQueryNameToElementsMap[itemQueryName] = matchingElements = []), 
                                            matchingElements.push(element);
                                        }
                                    }
                                }
                                return columnQueryNameToElementsMap;
                            }(_.keys(columnQueryNameToAnnotationMap), visibleColumns, visibleRows, midRenderer);
                            _.forEach(columnQueryNameToElementsMap, function(elements, queryName) {
                                _.forEach(elements, function(e) {
                                    _this.annotationHighlightElementToRegionIdMap.set(e, "".concat("fullColumn", "_").concat(queryName));
                                });
                                var extendedProps = {
                                    showHandles: !1,
                                    thickness: 2
                                }, highlightColor = columnQueryNameToAnnotationMap[queryName].color;
                                highlightColor && (extendedProps.color = highlightColor), _this.annotationHelper.updateOutlinesFromSubSelectionElements(elements, 2, extendedProps);
                            }), this.annotationHelper.renderOutlines();
                        } else this.annotationHelper.renderOutlines();
                    } else this.annotationHelper.renderOutlines();
                }
            }, PivotTable.prototype.getAnnotationHighlightElementSubSelectionOutlineRegionId = function(element) {
                var id = this.annotationHighlightElementToRegionIdMap.get(element);
                return debug.fF.assert(function() {
                    return null != id;
                }, "the given element should have an entry in this.annotationHighlightElementToRegionIdMap"), 
                id;
            }, PivotTable.prototype.annotationHighlightOnScrollStart = function() {
                this.annotationHelper.hideAllOutlines();
            }, PivotTable.prototype.annotationHighlightOnScrollEnd = function() {
                this.updateOutlinesFromAnnotations();
            }, PivotTable.preferredLoadMoreThreshold = .8, PivotTable;
        }();
    },
    11184: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Q: function() {
                return PivotTableHierarchyNavigator;
            },
            S: function() {
                return PivotTableSteppedHierarchyNavigator;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(55007), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), PivotTableHierarchyNavigator = function() {
            function PivotTableHierarchyNavigator(matrixNavigator) {
                this.matrixNavigator = matrixNavigator;
            }
            return PivotTableHierarchyNavigator.prototype.setHierarchy = function(hierarchy) {
                this.hierarchy = hierarchy, this.floatingLeaves = [], this.getLeaves(this.getFloatingHierarchyItems(), this.floatingLeaves);
            }, PivotTableHierarchyNavigator.prototype.hasHierarchy = function() {
                return !_.isEmpty(this.hierarchy.levels);
            }, PivotTableHierarchyNavigator.prototype.isMultiLevelHierarchy = function() {
                return this.hierarchy.levels.length > 1;
            }, PivotTableHierarchyNavigator.prototype.getHierarchyDepth = function() {
                return Math.max(this.hierarchy.levels.length, 1);
            }, PivotTableHierarchyNavigator.prototype.getHierarchyLeafNodes = function() {
                return this.hierarchy.leafNodes;
            }, PivotTableHierarchyNavigator.prototype.getHierarchyLeafCount = function() {
                return this.hierarchy.leafNodes.length;
            }, PivotTableHierarchyNavigator.prototype.getHierarchyLeafAt = function(index) {
                return this.hierarchy.leafNodes[index];
            }, PivotTableHierarchyNavigator.prototype.getFloatingHierarchyLeafCount = function() {
                return this.floatingLeaves.length;
            }, PivotTableHierarchyNavigator.prototype.getFloatingHierarchyLeafAt = function(index) {
                return this.floatingLeaves[index];
            }, PivotTableHierarchyNavigator.prototype.isBlank = function(node) {
                return node.isBlankRow;
            }, PivotTableHierarchyNavigator.prototype.isBlankRow = function(index) {
                return this.getHierarchyLeafAt(index).isBlankRow;
            }, PivotTableHierarchyNavigator.prototype.numberOfBlankRowsBefore = function(index) {
                var node = this.getHierarchyLeafAt(index), ancestorNode = this.getAncestor(node);
                return Math.floor(ancestorNode.index / 2);
            }, PivotTableHierarchyNavigator.prototype.getHierarchyItems = function() {
                return this.hierarchy.root.children || [];
            }, PivotTableHierarchyNavigator.prototype.getFloatingHierarchyItems = function() {
                return null;
            }, PivotTableHierarchyNavigator.prototype.getLeafIndex = function(item) {
                return this.matrixNavigator.getLeafIndex(item);
            }, PivotTableHierarchyNavigator.prototype.isLeaf = function(item) {
                return this.matrixNavigator.isLeaf(item);
            }, PivotTableHierarchyNavigator.prototype.isLastItem = function(item, items) {
                return this.matrixNavigator.isLastItem(item, items);
            }, PivotTableHierarchyNavigator.prototype.getAncestor = function(item) {
                for (;item.parent; ) item = item.parent;
                return item;
            }, PivotTableHierarchyNavigator.prototype.getParent = function(item) {
                return this.matrixNavigator.getParent(item);
            }, PivotTableHierarchyNavigator.prototype.getIndex = function(item) {
                return this.matrixNavigator.getIndex(item);
            }, PivotTableHierarchyNavigator.prototype.getNodeLeafCount = function(item) {
                var _this = this;
                return this.isLeaf(item) ? 1 : _.sum(_.map(item.children, function(child) {
                    return _this.getNodeLeafCount(child);
                }));
            }, PivotTableHierarchyNavigator.prototype.getIndexOfFirstLeaf = function(item) {
                for (;!_.isEmpty(item.children); ) item = item.children[0];
                return this.getLeafIndex(item);
            }, PivotTableHierarchyNavigator.prototype.getPathIndices = function(item) {
                for (var result = [ this.getIndex(item) ], parent = this.getParent(item); parent; ) result = (0, 
                tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([ this.getIndex(parent) ], result || [], !0), 
                parent = this.getParent(parent);
                return result;
            }, PivotTableHierarchyNavigator.prototype.getNodeFromPath = function(indices) {
                var hierarchyLength = this.hierarchy.levels.length || 1;
                if (!(_.isEmpty(indices) || indices.length > hierarchyLength)) {
                    for (var node = this.hierarchy.root, _i = 0, indices_1 = indices; _i < indices_1.length; _i++) if (!(node = node.children[indices_1[_i]])) return;
                    return node;
                }
            }, PivotTableHierarchyNavigator.prototype.getLeafAncestorAtLevel = function(leafNode, targetLevel, exactMatch) {
                if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(leafNode, "Undefined leaf node"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return targetLevel >= 0;
                }, "Invalid target level"), !(targetLevel > this.getLevel(leafNode))) {
                    for (var node = leafNode; this.getLevel(node) > targetLevel; ) {
                        if (node = this.getParent(node), exactMatch && this.getLevel(node) < targetLevel) return;
                        _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(node, "reached root without finding a matching ancestor");
                    }
                    return node;
                }
            }, PivotTableHierarchyNavigator.prototype.getItemsByLevel = function(levelIndex) {
                var items = [];
                return this.findLevelItems(levelIndex, this.hierarchy.root, -1, items), items;
            }, PivotTableHierarchyNavigator.prototype.findLevelItems = function(levelIndex, root, rootLevel, items) {
                if (!_.isEmpty(root.children)) for (var childLevel = rootLevel + 1, _i = 0, _a = root.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    childLevel === levelIndex || childLevel + this.matrixNavigator.getChildrenLevelDifference(child) > levelIndex ? items.push(child) : childLevel < levelIndex && this.findLevelItems(levelIndex, child, childLevel, items);
                }
            }, PivotTableHierarchyNavigator.prototype.getExpansionState = function(item) {
                return item.isCollapsed ? 1 : !1 === item.isCollapsed ? 0 : 2;
            }, PivotTableHierarchyNavigator.prototype.getChildren = function(item) {
                return this.matrixNavigator.getChildren(item);
            }, PivotTableHierarchyNavigator.prototype.getLevel = function(item) {
                return this.matrixNavigator.getLevel(item);
            }, PivotTableHierarchyNavigator.prototype.getIntersection = function(rowItem, columnItem) {
                var bodyItem = this.matrixNavigator.getIntersection(rowItem, columnItem);
                return bodyItem && bodyItem.objects && (bodyItem.icon = _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__.FX.PropValuesIcon.getValue(bodyItem.objects), 
                bodyItem.hyperlink = _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__.FX.PropValuesWebURL.getValue(bodyItem.objects), 
                bodyItem.altText = _Visuals_controls_tablix_tablixProperties__WEBPACK_IMPORTED_MODULE_2__.FX.PropAltTextValue.getValue(bodyItem.objects)), 
                bodyItem;
            }, PivotTableHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                return this.matrixNavigator.getCorner(rowLevel, columnLevel);
            }, PivotTableHierarchyNavigator.prototype.getRowLevel = function(cornerItem) {
                return cornerItem.rowLevel;
            }, PivotTableHierarchyNavigator.prototype.getColumnLevel = function(cornerItem) {
                return cornerItem.columnLevel;
            }, PivotTableHierarchyNavigator.prototype.getRowHeaderMetadataColumn = function(item) {
                return this.matrixNavigator.getRowHeaderMetadataColumn(item);
            }, PivotTableHierarchyNavigator.prototype.getRowHeaderMetadataColumns = function(item) {
                return this.matrixNavigator.getRowHeaderMetadataColumns(item);
            }, PivotTableHierarchyNavigator.prototype.getColumnHeaderMetadataColumn = function(item) {
                return this.matrixNavigator.getColumnHeaderMetadataColumn(item);
            }, PivotTableHierarchyNavigator.prototype.getColumnHeaderMetadataColumns = function(item) {
                return this.matrixNavigator.getColumnHeaderMetadataColumns(item);
            }, PivotTableHierarchyNavigator.prototype.valuesOnRowApplied = function() {
                return this.matrixNavigator.valuesOnRowApplied();
            }, PivotTableHierarchyNavigator.prototype.hasMultipleValueSources = function() {
                return this.matrixNavigator.hasMultipleValueSources();
            }, PivotTableHierarchyNavigator.prototype.isColumnHeaderMultiValueSubtotal = function(header) {
                return header.isSubtotal && header.parent && header.parent.isSubtotal;
            }, PivotTableHierarchyNavigator.prototype.isRowHeaderMultiValueSubtotal = function(header) {
                return this.valuesOnRowApplied() && header.parent && header.parent.isSubtotal;
            }, PivotTableHierarchyNavigator.prototype.getLeaves = function(items, leaves) {
                if (!_.isEmpty(items)) for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                    var item = items_1[_i];
                    this.isLeaf(item) ? leaves.push(item) : this.getLeaves(this.getChildren(item), leaves);
                }
            }, PivotTableHierarchyNavigator.prototype.getColumnIndexFromQueryName = function(queryName) {
                return null;
            }, PivotTableHierarchyNavigator;
        }(), PivotTableSteppedHierarchyNavigator = function(_super) {
            function PivotTableSteppedHierarchyNavigator() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PivotTableSteppedHierarchyNavigator, _super), 
            PivotTableSteppedHierarchyNavigator.prototype.getIntersection = function(rowItem, columnItem) {
                return this.isLeaf(rowItem) || _.isEmpty(rowItem.children) || !rowItem.children[0].isSubtotal || this.valuesOnRowApplied() ? _super.prototype.getIntersection.call(this, rowItem, columnItem) : _super.prototype.getIntersection.call(this, rowItem.children[0], columnItem);
            }, PivotTableSteppedHierarchyNavigator.prototype.getChildren = function(item) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(item, "item"), 
                !_.isEmpty(item.children) && item.children[0].isSubtotal ? item.children.slice(1) : item.children;
            }, PivotTableSteppedHierarchyNavigator.prototype.getHierarchyDepth = function() {
                return _super.prototype.getHierarchyDepth.call(this) > 0 ? 1 : 0;
            }, PivotTableSteppedHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                var adjustedRowLevel = columnLevel === this.matrixNavigator.getColumnHierarchyDepth() - 1 ? 0 : this.matrixNavigator.getRowHierarchyDepth() - 1;
                return _super.prototype.getCorner.call(this, adjustedRowLevel, columnLevel);
            }, PivotTableSteppedHierarchyNavigator.prototype.getFloatingHierarchyItems = function() {
                var items = this.getHierarchyItems();
                if (_.isEmpty(items)) return null;
                for (var index = 0, floatingItems = []; ;) {
                    var item = items[index];
                    if (!item || !item.isSubtotal) break;
                    floatingItems.push(item), index++;
                }
                return _.isEmpty(floatingItems) ? null : floatingItems;
            }, PivotTableSteppedHierarchyNavigator.prototype.isRowHeaderMultiValueSubtotal = function(header) {
                return this.valuesOnRowApplied() && header.isSubtotal;
            }, PivotTableSteppedHierarchyNavigator.prototype.getLeaves = function(items, leaves) {
                if (!_.isEmpty(items)) for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                    var item = items_2[_i];
                    leaves.push(item), this.getLeaves(this.getChildren(item), leaves);
                }
            }, PivotTableSteppedHierarchyNavigator.prototype.getPathIndices = function(item) {
                return [ this.getLeafIndex(item) ];
            }, PivotTableSteppedHierarchyNavigator.prototype.getNodeFromPath = function(indices) {
                if (1 === indices.length) return this.getHierarchyLeafAt(indices[0]);
            }, PivotTableSteppedHierarchyNavigator.prototype.getItemsByLevel = function(levelIndex) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return 0 === levelIndex;
                }, "Stepped PivotTable rows hierarchy has 1 level"), (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], this.getHierarchyLeafNodes() || [], !0);
            }, PivotTableSteppedHierarchyNavigator.prototype.getLeafAncestorAtLevel = function(leafNode, levelIndex) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return 0 === levelIndex;
                }, "Stepped PivotTable rows hierarchy has 1 level"), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(leafNode, "Undefined leaf node"), 
                leafNode;
            }, PivotTableSteppedHierarchyNavigator;
        }(PivotTableHierarchyNavigator);
    },
    76797: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            D: function() {
                return PivotTableSelectionMode;
            },
            l: function() {
                return PivotTableSelectionManager;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81337), _Visuals_capabilities_matrix_capabilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85196), _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66232), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _VisualsData_dataView_dataViewScopeIdentity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(78843), _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(93340), _controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(71090), _pivotTableInteractivityUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21242), PivotTableSelectionMode = function(PivotTableSelectionMode) {
            return PivotTableSelectionMode[PivotTableSelectionMode.RowHeader = 0] = "RowHeader", 
            PivotTableSelectionMode[PivotTableSelectionMode.ColumnHeader = 1] = "ColumnHeader", 
            PivotTableSelectionMode[PivotTableSelectionMode.BodyCell = 2] = "BodyCell", PivotTableSelectionMode;
        }({});
        function isBodyItem(item) {
            return 0 === item.type;
        }
        var PivotTableSelectionManager = function() {
            function PivotTableSelectionManager(hostServices, featureSwitches) {
                this.hostServices = hostServices, this.featureSwitches = featureSwitches, this.clearLocal();
            }
            return PivotTableSelectionManager.prototype.onItemContextMenu = function(item, selectionMode, mouseEvent, roleNames, unfrozenRowHeaders) {
                var contextMenuItems;
                (0, _Visuals_common_eventBubblingUtil__WEBPACK_IMPORTED_MODULE_0__.n)(mouseEvent), 
                !this.isEmpty() && this.isItemSelected(item, !0) ? (contextMenuItems = this.selectedItems, 
                selectionMode = this.selectionMode) : contextMenuItems = [ item ];
                var args = this.createContextMenuArgs(item, selectionMode, contextMenuItems, mouseEvent, roleNames, unfrozenRowHeaders);
                args && this.hostServices.onContextMenu(args);
            }, PivotTableSelectionManager.prototype.onWhitespaceClick = function() {
                this.clearLocal(), this.hostServices.onSelect(this.createSelectArgs(this.selectedItems));
            }, PivotTableSelectionManager.prototype.isDrillingEnabled = function(item, mouseEvent, selectionMode) {
                var args = this.createSelectingArgs(item, selectionMode, mouseEvent);
                return this.hostServices.onSelecting(args), 1 === args.action;
            }, PivotTableSelectionManager.prototype.select = function(item, selectionMode, multiSelectionMode) {
                this.updateSelection(item, selectionMode, multiSelectionMode, !1), this.hostServices.alertScreenReader(this.getSelectionScreenReaderMessage(item)), 
                this.hostServices.onSelect(this.createSelectArgs(this.selectedItems, multiSelectionMode));
            }, PivotTableSelectionManager.prototype.getSelectionScreenReaderMessage = function(item) {
                var stringId, isRowLeaf, isColumnLeaf;
                switch (this.indicatorStyle) {
                  case PivotTableSelectionMode.RowHeader:
                    isRowLeaf = this.rowHierarchyNavigator.isLeaf(this.getEffectiveSelectedHeader(item));
                    var isCollapsed = 1 === this.rowHierarchyNavigator.getExpansionState(item);
                    stringId = _.isEmpty(this.selectedItems) ? !isRowLeaf || item.isSubtotal || isCollapsed ? "Row_Group_Unselected" : "Row_Unselected" : !isRowLeaf || item.isSubtotal || isCollapsed ? "Row_Group_Selected" : "Row_Selected";
                    break;

                  case PivotTableSelectionMode.ColumnHeader:
                    isColumnLeaf = this.columnHierarchyNavigator.isLeaf(this.getEffectiveSelectedHeader(item)), 
                    stringId = _.isEmpty(this.selectedItems) ? isColumnLeaf && !item.isSubtotal ? "Column_Unselected" : "Column_Group_Unselected" : isColumnLeaf && !item.isSubtotal ? "Column_Selected" : "Column_Group_Selected";
                    break;

                  case PivotTableSelectionMode.BodyCell:
                    isRowLeaf = this.rowHierarchyNavigator.isLeaf(this.getEffectiveSelectedHeader(item.rowItem)), 
                    isColumnLeaf = this.columnHierarchyNavigator.isLeaf(this.getEffectiveSelectedHeader(item.columnItem)), 
                    stringId = _.isEmpty(this.selectedItems) ? isRowLeaf && isColumnLeaf && !item.isSubtotal ? "Intersection_Unselected" : "Intersection_Group_Unselected" : isRowLeaf && isColumnLeaf && !item.isSubtotal ? "Intersection_Selected" : "Intersection_Group_Selected";
                    break;

                  default:
                    stringId = "Tablix_Selections_Cleared";
                }
                return this.hostServices.getLocalizedString(stringId);
            }, PivotTableSelectionManager.prototype.getIndicatorStyle = function() {
                return this.indicatorStyle;
            }, PivotTableSelectionManager.prototype.updateSelection = function(item, selectionMode, multiSelectionMode, isContextClick) {
                if (this.featureSwitches.a11yMatrix && "isRowAndColumnGrandTotal" in item && (item.isRowAndColumnGrandTotal || item.isBlankRow)) return this.clearLocal(), 
                this.selectionMode = void 0, this.indicatorStyle = void 0, !0;
                if (isContextClick || selectionMode === this.selectionMode || this.clearLocal(), 
                this.createSelectorsByColumn(item)) if (this.isItemSelected(item, isContextClick)) {
                    if (isContextClick) return !1;
                    1 === this.selectedItems.length && 1 !== multiSelectionMode ? this.clearLocal() : 3 === multiSelectionMode ? this.unselectItem(item) : 0 === multiSelectionMode && (this.selectedItems = [ item ]);
                } else 0 !== multiSelectionMode && selectionMode === this.selectionMode || this.clearLocal(), 
                this.selectionMode = selectionMode, this.indicatorStyle = selectionMode, this.selectedItems.push(item), 
                this.hostServices.canSelect(this.createSelectArgs(this.selectedItems)) || (this.selectedItems = [ item ]); else this.clearLocal(), 
                this.selectionMode = void 0, this.indicatorStyle = void 0;
                return item.isRowGrandTotal ? this.indicatorStyle = PivotTableSelectionMode.ColumnHeader : item.isColumnGrandTotal && (this.indicatorStyle = PivotTableSelectionMode.RowHeader), 
                !0;
            }, PivotTableSelectionManager.prototype.isRowHeaderHighlighted = function(header) {
                if (this.isEmpty()) return !0;
                for (var _i = 0, _a = this.selectedItems; _i < _a.length; _i++) if (this.isRowHeaderOnSelectedPath(_a[_i], header)) return !0;
                return !1;
            }, PivotTableSelectionManager.prototype.isColumnHeaderHighlighted = function(header) {
                if (this.isEmpty()) return !0;
                for (var _i = 0, _a = this.selectedItems; _i < _a.length; _i++) if (this.isColumnHeaderOnSelectedPath(_a[_i], header)) return !0;
                return !1;
            }, PivotTableSelectionManager.prototype.isRowHeaderIndicatorOn = function(header, isSteppedLayout) {
                var _this = this;
                return !!this.featureSwitches.a11yMatrix && _.some(this.selectedItems, function(selectedItem) {
                    return _this.isRowHeaderOnSelectedPath(selectedItem, header, !0, !isSteppedLayout);
                }) && !(this.indicatorStyle === PivotTableSelectionMode.ColumnHeader);
            }, PivotTableSelectionManager.prototype.isRowHeaderDarkened = function(header) {
                var _this = this;
                return !!this.featureSwitches.a11yMatrix && _.some(this.selectedItems, function(selectedItem) {
                    return _this.isRowHeaderOnSelectedPath(selectedItem, header, !0, !1);
                }) && this.indicatorStyle === PivotTableSelectionMode.RowHeader;
            }, PivotTableSelectionManager.prototype.isColumnHeaderIndicatorOn = function(header) {
                var _this = this;
                if (!this.featureSwitches.a11yMatrix) return !1;
                var isLeaf = this.columnHierarchyNavigator.isLeaf(header), isOnSelectedPath = _.some(this.selectedItems, function(selectedItem) {
                    return _this.isColumnHeaderOnSelectedPath(selectedItem, header);
                });
                return isLeaf && isOnSelectedPath && !(this.indicatorStyle === PivotTableSelectionMode.RowHeader);
            }, PivotTableSelectionManager.prototype.isColumnHeaderDarkened = function(header) {
                var _this = this;
                return _.some(this.selectedItems, function(selectedItem) {
                    return _this.isColumnHeaderOnSelectedPath(selectedItem, header);
                }) && !(this.indicatorStyle === PivotTableSelectionMode.RowHeader);
            }, PivotTableSelectionManager.prototype.isBodyCellHighlighted = function(bodyCell) {
                if (this.isEmpty()) return !0;
                for (var _i = 0, _a = this.selectedItems; _i < _a.length; _i++) if (this.isBodyCellOnSelectedPath(_a[_i], bodyCell)) return !0;
                return !1;
            }, PivotTableSelectionManager.prototype.isBodyCellIndicatorOn = function(bodyCell) {
                if (this.isEmpty()) return !1;
                for (var _i = 0, _a = this.selectedItems; _i < _a.length; _i++) if (this.isBodyCellOnSelectedPath(_a[_i], bodyCell) && this.indicatorStyle === PivotTableSelectionMode.BodyCell) return !0;
                return !1;
            }, PivotTableSelectionManager.prototype.isRowHeaderOnSelectedPath = function(selectedItem, header, skipAncestors, skipDescendants) {
                return this.indicatorStyle === PivotTableSelectionMode.ColumnHeader || (item = isBodyItem(selectedItem) ? selectedItem.rowItem : selectedItem, 
                this.isOnSelectedPath(this.getEffectiveSelectedHeader(item), header, skipAncestors, skipDescendants));
                var item;
            }, PivotTableSelectionManager.prototype.isColumnHeaderOnSelectedPath = function(selectedItem, header) {
                return this.indicatorStyle === PivotTableSelectionMode.RowHeader || (item = isBodyItem(selectedItem) ? selectedItem.columnItem : selectedItem, 
                this.isOnSelectedPath(this.getEffectiveSelectedHeader(item), header));
                var item;
            }, PivotTableSelectionManager.prototype.isBodyCellOnSelectedPath = function(selectedItem, bodyCell) {
                return this.isRowHeaderOnSelectedPath(selectedItem, bodyCell.rowItem) && this.isColumnHeaderOnSelectedPath(selectedItem, bodyCell.columnItem);
            }, PivotTableSelectionManager.prototype.isOnSelectedPath = function(selectedItem, header, skipAncestors, skipDescendants) {
                if (!selectedItem) return !0;
                if (selectedItem === header) return !0;
                var current = selectedItem;
                if (!skipAncestors) for (;current; ) {
                    if (current === header) return !0;
                    current = current.parent;
                }
                if (current = header, !skipDescendants) for (;current; ) {
                    if (current === selectedItem) return !0;
                    current = current.parent;
                }
                return !1;
            }, PivotTableSelectionManager.prototype.onDataViewChanged = function(rowHierarchyNavigator, columnHierarchyNavigator) {
                this.rowHierarchyNavigator = rowHierarchyNavigator, this.columnHierarchyNavigator = columnHierarchyNavigator;
                var rowItems = rowHierarchyNavigator && rowHierarchyNavigator.getHierarchyItems(), columnItems = columnHierarchyNavigator && columnHierarchyNavigator.getHierarchyItems();
                if (!this.isEmpty()) {
                    for (var newSelectedItems = [], _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                        var selectedItem = _a[_i], newSelectedItem = PivotTableSelectionManager.getMatchingItem(selectedItem, this.selectionMode, rowItems, columnItems, rowHierarchyNavigator);
                        newSelectedItems.push(newSelectedItem || selectedItem);
                    }
                    this.selectedItems = newSelectedItems;
                }
            }, PivotTableSelectionManager.getMatchingItem = function(selectedItem, selectionMode, rowItems, columnItems, hierarchyNavigator) {
                if (selectedItem.isBlankRow) return null;
                switch (selectionMode) {
                  case PivotTableSelectionMode.RowHeader:
                    return this.getMatchingHeader(selectedItem, rowItems);

                  case PivotTableSelectionMode.ColumnHeader:
                    return this.getMatchingHeader(selectedItem, columnItems);

                  case PivotTableSelectionMode.BodyCell:
                    var selectedBodyCell = selectedItem, rowItem = this.getMatchingHeader(selectedBodyCell.rowItem, rowItems), columnItem = this.getMatchingHeader(selectedBodyCell.columnItem, columnItems);
                    return rowItem && columnItem ? hierarchyNavigator.getIntersection(rowItem, columnItem) : null;
                }
            }, PivotTableSelectionManager.getMatchingHeader = function(selectedItem, items) {
                if (items) for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                    var item = items_1[_i];
                    if (this.areHeadersEqual(selectedItem, item)) return item;
                    var matching = this.getMatchingHeader(selectedItem, item.children);
                    if (matching) return matching;
                }
                return null;
            }, PivotTableSelectionManager.areHeadersEqual = function(item1, item2) {
                if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return !!item1 && !!item2;
                }, "items cannot be null"), (0, _VisualsData_dataView_dataViewScopeIdentity__WEBPACK_IMPORTED_MODULE_2__.fS)(item1.identity, item2.identity) && item1.queryName === item2.queryName) {
                    if (!item1.parent && !item2.parent) return !0;
                    if (item1.parent && item2.parent) return this.areHeadersEqual(item1.parent, item2.parent);
                }
                return !1;
            }, PivotTableSelectionManager.getMatchingItemById = function(selectorsByColumn, selectionMode, rowItems, columnItems, hierarchyNavigator) {
                var selectorsByColumnKeys = _.keys(selectorsByColumn.dataMap), columnQueryNames = _.chain(hierarchyNavigator.getColumnHierarchy().levels).filter(function(level) {
                    return !level.sources[0].isMeasure;
                }).map(function(level) {
                    return level.sources[0].queryName;
                }).filter(function(queryName) {
                    return _.includes(selectorsByColumnKeys, queryName);
                }).value(), rowQueryNames = _.chain(hierarchyNavigator.getRowHierarchy().levels).map(function(level) {
                    return level.sources[0].queryName;
                }).filter(function(queryName) {
                    return _.includes(selectorsByColumnKeys, queryName);
                }).value();
                switch (selectionMode) {
                  case PivotTableSelectionMode.RowHeader:
                    return this.getMatchingHeaderById(selectorsByColumn, rowQueryNames, rowItems);

                  case PivotTableSelectionMode.ColumnHeader:
                    return this.getMatchingHeaderById(selectorsByColumn, columnQueryNames, columnItems);

                  case PivotTableSelectionMode.BodyCell:
                    var rowItem = this.getMatchingHeaderById(selectorsByColumn, rowQueryNames, rowItems), columnItem = this.getMatchingHeaderById(selectorsByColumn, columnQueryNames, columnItems);
                    return rowItem && columnItem ? hierarchyNavigator.getIntersection(rowItem, columnItem) : null;
                }
            }, PivotTableSelectionManager.getMatchingHeaderById = function(selectorsByColumn, queryNames, items) {
                if (items) for (var _i = 0, items_2 = items; _i < items_2.length; _i++) for (var item = items_2[_i], _loop_1 = function(i, ilen) {
                    var currentQueryName = queryNames[i];
                    if (this_1.headerMatchesId(selectorsByColumn, currentQueryName, item)) {
                        if (1 === ilen) return {
                            value: item
                        };
                        _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertAnyValue(item.children, "PivotTableSelectionManager.getMatchingHeaderById encountered an ID that does not match the matrix, which should be caught earlier.");
                        var matching = this_1.getMatchingHeaderById(selectorsByColumn, _.filter(queryNames, function(queryName) {
                            return queryName !== currentQueryName;
                        }), item.children);
                        if (matching) return {
                            value: matching
                        };
                    }
                }, this_1 = this, i = 0, ilen = queryNames.length; i < ilen; i++) {
                    var state_1 = _loop_1(i, ilen);
                    if ("object" == typeof state_1) return state_1.value;
                }
                return null;
            }, PivotTableSelectionManager.headerMatchesId = function(selectorsByColumn, queryName, node) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return !!selectorsByColumn && !!node;
                }, "items cannot be null"), !!(queryName === node.queryName && selectorsByColumn.dataMap && selectorsByColumn.dataMap[queryName] && (0, 
                _VisualsData_dataView_dataViewScopeIdentity__WEBPACK_IMPORTED_MODULE_2__.fS)(_.head(selectorsByColumn.dataMap[queryName]), node.identity));
            }, PivotTableSelectionManager.areCornerItemsEqual = function(item1, item2) {
                return !(!item1.metadata || !item2.metadata) && item1.metadata.queryName === item2.metadata.queryName;
            }, PivotTableSelectionManager.prototype.clearLocal = function() {
                this.selectedItems = [];
            }, PivotTableSelectionManager.prototype.isSelectionEmpty = function() {
                return _.isEmpty(this.selectedItems);
            }, PivotTableSelectionManager.prototype.restoreSelectionState = function(selection, hierarchyNavigator) {
                if (this.clearLocal(), _.isEmpty(selection)) return !0;
                for (var foundMatchingId = !1, selectedItems = this.selectedItems, _i = 0, selection_1 = selection; _i < selection_1.length; _i++) {
                    var selectorsByColumn = selection_1[_i], selectionMode = this.determineSelectionModeFromIds(selectorsByColumn, hierarchyNavigator);
                    if (null != selectionMode) {
                        this.selectionMode = selectionMode, this.indicatorStyle = selectionMode;
                        var newSelectedItem = PivotTableSelectionManager.getMatchingItemById(selectorsByColumn, selectionMode, hierarchyNavigator.getRowHierarchy().root.children, hierarchyNavigator.getColumnHierarchy().root.children, hierarchyNavigator);
                        newSelectedItem && (selectedItems.push(newSelectedItem), foundMatchingId = !0, newSelectedItem.isRowGrandTotal ? this.indicatorStyle = PivotTableSelectionMode.ColumnHeader : newSelectedItem.isColumnGrandTotal && (this.indicatorStyle = PivotTableSelectionMode.RowHeader));
                    }
                }
                return foundMatchingId;
            }, PivotTableSelectionManager.prototype.determineSelectionModeFromIds = function(selectorsByColumn, hierarchyNavigator) {
                if (!selectorsByColumn) return this.selectionMode;
                var columnQueryNames = _.map(hierarchyNavigator.getColumnHierarchy().levels, function(level) {
                    return level.sources[0].queryName;
                }), columnMatchFound = !1, rowQueryNames = _.map(hierarchyNavigator.getRowHierarchy().levels, function(level) {
                    return level.sources[0].queryName;
                }), rowMatchFound = !1;
                for (var key in selectorsByColumn.dataMap) if (_.includes(columnQueryNames, key)) columnMatchFound = !0; else {
                    if (!_.includes(rowQueryNames, key)) return;
                    rowMatchFound = !0;
                }
                return columnMatchFound && rowMatchFound ? PivotTableSelectionMode.BodyCell : columnMatchFound ? PivotTableSelectionMode.ColumnHeader : rowMatchFound ? PivotTableSelectionMode.RowHeader : void 0;
            }, PivotTableSelectionManager.prototype.isEmpty = function() {
                return _.isEmpty(this.selectedItems);
            }, PivotTableSelectionManager.prototype.isItemSelected = function(item, considerMixedSelections) {
                void 0 === considerMixedSelections && (considerMixedSelections = !1);
                for (var bodyItem = isBodyItem(item) ? item : void 0, _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                    var selectedItem = _a[_i];
                    if (isBodyItem(selectedItem) && bodyItem) {
                        if (this.areBodyCellsEqual(selectedItem, bodyItem)) return !0;
                    } else if (selectedItem === item) return !0;
                }
                return !(!considerMixedSelections || this.isEmpty() || !bodyItem) && this.isBodyCellHighlighted(bodyItem);
            }, PivotTableSelectionManager.prototype.unselectItem = function(item) {
                var _this = this;
                isBodyItem(item) ? _.remove(this.selectedItems, function(selectedItem) {
                    return _this.areBodyCellsEqual(selectedItem, item);
                }) : _.pull(this.selectedItems, item);
            }, PivotTableSelectionManager.prototype.areBodyCellsEqual = function(bodyCell1, bodyCell2) {
                return bodyCell1.rowItem === bodyCell2.rowItem && bodyCell1.columnItem === bodyCell2.columnItem;
            }, PivotTableSelectionManager.prototype.getEffectiveSelectedHeader = function(header) {
                return header && !header.identity && header.parent ? this.getEffectiveSelectedHeader(header.parent) : header;
            }, PivotTableSelectionManager.prototype.getEffectiveSelectedNodes = function(header) {
                return header.parent ? [ this.getEffectiveSelectedHeader(header) ] : header.identity ? [ header ] : header.siblings;
            }, PivotTableSelectionManager.getRoleNames = function(selectionMode) {
                switch (selectionMode) {
                  case PivotTableSelectionMode.ColumnHeader:
                    return [ _Visuals_capabilities_matrix_capabilities__WEBPACK_IMPORTED_MODULE_3__.r.columns ];

                  case PivotTableSelectionMode.RowHeader:
                    return [ _Visuals_capabilities_matrix_capabilities__WEBPACK_IMPORTED_MODULE_3__.r.rows ];

                  case PivotTableSelectionMode.BodyCell:
                    return [ _Visuals_capabilities_matrix_capabilities__WEBPACK_IMPORTED_MODULE_3__.r.values ];

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertFail("unexpected PivotTableSelectionMode");
                }
            }, PivotTableSelectionManager.prototype.createSelectingArgs = function(item, selectionMode, mouseEvent) {
                return {
                    type: 0,
                    visualObjects: this.getVisualObjects([ item ]),
                    position: PivotTableSelectionManager.getMouseEventPosition(mouseEvent),
                    dataRoles: PivotTableSelectionManager.getRoleNames(selectionMode)
                };
            }, PivotTableSelectionManager.prototype.createSelectArgs = function(items, multiSelectionMode) {
                for (var visualObjects = [], _i = 0, items_3 = items; _i < items_3.length; _i++) {
                    var selector = this.createSelectorsByColumn(items_3[_i]);
                    selector && visualObjects.push({
                        objectName: "",
                        selectorsByColumn: selector
                    });
                }
                return {
                    type: 0,
                    visualObjects: this.getVisualObjects(items),
                    selectionMode: multiSelectionMode
                };
            }, PivotTableSelectionManager.prototype.getVisualObjects = function(items) {
                for (var visualObjects = [], _i = 0, items_4 = items; _i < items_4.length; _i++) {
                    var selector = this.createSelectorsByColumn(items_4[_i]);
                    selector && visualObjects.push({
                        objectName: "",
                        selectorsByColumn: selector
                    });
                }
                return visualObjects;
            }, PivotTableSelectionManager.prototype.createContextMenuArgs = function(rightClickedItem, itemKind, selectedItems, mouseEvent, roleNames, unfrozenRowHeaders) {
                for (var _a, _b, _c, _d, _e, _f, _this = this, data = [], _i = 0, selectedItems_1 = selectedItems; _i < selectedItems_1.length; _i++) {
                    var selector = this.createSelectorsByColumn(selectedItems_1[_i]);
                    selector && data.push(selector);
                }
                var singleValue, args = {
                    dataRoles: roleNames,
                    data,
                    position: PivotTableSelectionManager.getMouseEventPosition(mouseEvent)
                };
                if (isBodyItem(rightClickedItem) || (args.nodeIndex = this.getHierarchyNodeIndex(rightClickedItem)), 
                (_.isEmpty(data) || data.every(function(selector) {
                    return _.isEmpty(selector.dataMap);
                })) && isBodyItem(rightClickedItem) && rightClickedItem.isRowAndColumnGrandTotal) {
                    var isSparkline_1 = null === (_c = null === (_b = null === (_a = rightClickedItem.columnMetadata) || void 0 === _a ? void 0 : _a.type) || void 0 === _b ? void 0 : _b.misc) || void 0 === _c ? void 0 : _c.sparkline;
                    return args.copyArgs = {
                        singleValue: function() {
                            return isSparkline_1 ? rightClickedItem.textContent : String(rightClickedItem.dataPoint);
                        }
                    }, args;
                }
                if (isBodyItem(rightClickedItem)) if (null === (_f = null === (_e = null === (_d = rightClickedItem.columnMetadata) || void 0 === _d ? void 0 : _d.type) || void 0 === _e ? void 0 : _e.misc) || void 0 === _f ? void 0 : _f.sparkline) singleValue = rightClickedItem.textContent; else {
                    var thisValue = rightClickedItem.dataPoint;
                    null != thisValue && (singleValue = (0, _controls_tablix_internal_tablixUtils1__WEBPACK_IMPORTED_MODULE_4__.pW)(thisValue));
                } else singleValue = rightClickedItem.tooltipValueFormatted;
                return args.copyArgs = {
                    grid: function() {
                        return _this.generateGridCopyCallback(selectedItems, itemKind);
                    }
                }, void 0 !== singleValue && (args.copyArgs.singleValue = function() {
                    return String(singleValue);
                }), this.featureSwitches.a11yShowAsMatrix && (args.visualCommandConfigs = [ {
                    titleKey: "UnfreezeRowHeaders",
                    executeFn: function() {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(_this, void 0, void 0, function() {
                            return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                                return this.hostServices.persistProperties({
                                    merge: [ {
                                        objectName: "rowHeaders",
                                        properties: {
                                            unfrozen: !0
                                        },
                                        selector: null
                                    } ]
                                }), [ 2 ];
                            });
                        });
                    },
                    isVisibleFn: function() {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(_this, void 0, void 0, function() {
                            return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                                return [ 2, !unfrozenRowHeaders ];
                            });
                        });
                    }
                }, {
                    titleKey: "FreezeRowHeaders",
                    executeFn: function() {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(_this, void 0, void 0, function() {
                            return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                                return this.hostServices.persistProperties({
                                    merge: [ {
                                        objectName: "rowHeaders",
                                        properties: {
                                            unfrozen: !1
                                        },
                                        selector: null
                                    } ]
                                }), [ 2 ];
                            });
                        });
                    },
                    isVisibleFn: function() {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(_this, void 0, void 0, function() {
                            return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                                return [ 2, unfrozenRowHeaders ];
                            });
                        });
                    }
                } ]), args;
            }, PivotTableSelectionManager.prototype.generateGridCopyCallback = function(selectedItems, itemKind) {
                var info, itemsToCopy = selectedItems.slice(), grid = [];
                switch (itemKind) {
                  case PivotTableSelectionMode.BodyCell:
                    itemsToCopy = this.collectSelectedBodyNodes(itemsToCopy), info = (0, _pivotTableInteractivityUtils__WEBPACK_IMPORTED_MODULE_6__.kH)(itemsToCopy, this.rowHierarchyNavigator, this.columnHierarchyNavigator, this.hostServices.getLocalizedString(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_7__.yF)), 
                    grid.push.apply(grid, (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([ info.headers ], info.values || [], !1));
                    break;

                  case PivotTableSelectionMode.ColumnHeader:
                    for (var headersWithMeasureSiblings = [], _i = 0, _a = itemsToCopy; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.columnHierarchyNavigator.isLeaf(item) && this.columnHierarchyNavigator.getColumnHeaderMetadataColumn(item).isMeasure ? headersWithMeasureSiblings.push.apply(headersWithMeasureSiblings, item.siblings || []) : headersWithMeasureSiblings.push(item);
                    }
                    info = (0, _pivotTableInteractivityUtils__WEBPACK_IMPORTED_MODULE_6__.mM)([], itemsToCopy = headersWithMeasureSiblings, this.rowHierarchyNavigator, this.columnHierarchyNavigator, this.hostServices.getLocalizedString(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_7__.yF)), 
                    grid.push.apply(grid, (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([ info.headers ], info.values || [], !1));
                    break;

                  case PivotTableSelectionMode.RowHeader:
                    info = (0, _pivotTableInteractivityUtils__WEBPACK_IMPORTED_MODULE_6__.mM)(itemsToCopy, [], this.rowHierarchyNavigator, this.columnHierarchyNavigator, this.hostServices.getLocalizedString(_controls_tablix_internal_tablixConstants__WEBPACK_IMPORTED_MODULE_7__.yF)), 
                    grid.push.apply(grid, (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([ info.headers ], info.values || [], !1));
                    break;

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertNever(itemKind);
                }
                return {
                    grid,
                    coveragePercentage: info ? info.coveragePercentage : void 0
                };
            }, PivotTableSelectionManager.prototype.getHierarchyNodeIndex = function(node) {
                for (var nodeIndex = []; node && null != node.index; ) nodeIndex.splice(0, 0, node.index), 
                node = node.parent;
                return nodeIndex;
            }, PivotTableSelectionManager.prototype.collectSelectedBodyNodes = function(itemsToSelect) {
                for (var highlightedItems = [], _i = 0, itemsToSelect_1 = itemsToSelect; _i < itemsToSelect_1.length; _i++) {
                    var item = itemsToSelect_1[_i];
                    if (!item.isSubtotal && item.columnItem.identity && item.rowItem.identity) highlightedItems.push(item); else {
                        var rowHeaders = [], columnHeaders = [];
                        item.isRowGrandTotal || (rowHeaders = this.getEffectiveSelectedNodes(item.rowItem)), 
                        item.isColumnGrandTotal || (columnHeaders = this.getEffectiveSelectedNodes(item.columnItem));
                        var selectedRange = (0, _pivotTableInteractivityUtils__WEBPACK_IMPORTED_MODULE_6__.Ak)(this.rowHierarchyNavigator, this.columnHierarchyNavigator, rowHeaders, columnHeaders);
                        highlightedItems.push.apply(highlightedItems, selectedRange || []);
                    }
                }
                for (var i = 0; i < highlightedItems.length; i++) for (var item1 = highlightedItems[i], j = i + 1; j < highlightedItems.length; j++) _.isEqual(item1, highlightedItems[j]) && (highlightedItems.splice(j, 1), 
                j--);
                return highlightedItems;
            }, PivotTableSelectionManager.prototype.createSelectorsByColumn = function(item) {
                return isBodyItem(item) ? this.createSelectorsByColumnForBodyCell(item) : this.createSelectorsByColumnForHeader(item);
            }, PivotTableSelectionManager.prototype.createSelectorsByColumnForHeader = function(header) {
                var queryName = header.queryName, dataMap = {};
                return PivotTableSelectionManager.addHeaderIdentities(header, dataMap) ? {
                    dataMap,
                    metadata: [ queryName ]
                } : void 0;
            }, PivotTableSelectionManager.prototype.createSelectorsByColumnForBodyCell = function(bodyCell) {
                var _a, dataMap = {}, rowIdentity = PivotTableSelectionManager.addHeaderIdentities(bodyCell.rowItem, dataMap), columnIdentity = PivotTableSelectionManager.addHeaderIdentities(bodyCell.columnItem, dataMap), columnQueryName = null === (_a = bodyCell.columnMetadata) || void 0 === _a ? void 0 : _a.queryName;
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return rowIdentity || columnIdentity || !!columnQueryName;
                }, "Must have a row or column identity or column metadata"), {
                    dataMap,
                    metadata: columnQueryName ? [ columnQueryName ] : void 0
                };
            }, PivotTableSelectionManager.addHeaderIdentities = function(header, dataMap) {
                for (var path = []; header; ) header.identity && path.splice(0, 0, header), header = header.parent;
                for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
                    var node = path_1[_i];
                    dataMap[node.queryName] = [ node.identity ];
                }
                return path.length > 0;
            }, PivotTableSelectionManager.hasIdentity = function(header) {
                return PivotTableSelectionManager.addHeaderIdentities(header, {});
            }, PivotTableSelectionManager.getMouseEventPosition = function(mouseEvent) {
                return {
                    x: mouseEvent.clientX,
                    y: mouseEvent.clientY
                };
            }, PivotTableSelectionManager;
        }();
    },
    59784: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            S: function() {
                return PivotTableSortingManager;
            }
        });
        var _pivotTableSelectionManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(76797), PivotTableSortingManager = function() {
            function PivotTableSortingManager(hostServices) {
                this.hostServices = hostServices;
            }
            return PivotTableSortingManager.prototype.onDataViewChanged = function(rowHierarchy, columnHierarchy, valueSources, isSteppedLayout, valuesOnRowApplied) {
                this.isSteppedLayout = isSteppedLayout, this.valuesOnRowApplied = valuesOnRowApplied, 
                this.nonMeasureRowLevels = this.getNonMeasureRowLevels(rowHierarchy), this.valueSources = valueSources, 
                this.hasRows = rowHierarchy && !_.isEmpty(this.nonMeasureRowLevels), this.hasColumns = columnHierarchy && !_.isEmpty(columnHierarchy.levels), 
                this.measureCount = valueSources ? valueSources.length : 0;
            }, PivotTableSortingManager.hasSortingChanged = function(previousDataView, newDataView) {
                if (!previousDataView || !newDataView) return !1;
                var previousColumns = previousDataView.metadata.columns;
                if (_.isEmpty(previousColumns)) return !1;
                var newColumns = newDataView.metadata.columns;
                if (_.isEmpty(newColumns)) return !1;
                for (var _loop_1 = function(newColumn) {
                    var previousColumn = _.find(previousColumns, function(previousColumn) {
                        return newColumn.queryName === previousColumn.queryName;
                    });
                    if (previousColumn && newColumn.sort !== previousColumn.sort) return {
                        value: !0
                    };
                }, _i = 0, newColumns_1 = newColumns; _i < newColumns_1.length; _i++) {
                    var state_1 = _loop_1(newColumns_1[_i]);
                    if ("object" == typeof state_1) return state_1.value;
                }
                return !1;
            }, PivotTableSortingManager.prototype.isCornerSortable = function(header) {
                return this.hasRows && null != header.metadata && header.position.row.isLast && (!this.valuesOnRowApplied || !header.position.column.isLast);
            }, PivotTableSortingManager.prototype.getNonMeasureRowLevels = function(rowHierarchy) {
                if (this.valuesOnRowApplied) {
                    var levels = [];
                    return levels.push.apply(levels, rowHierarchy.levels || []), levels.pop(), levels;
                }
                return rowHierarchy.levels;
            }, PivotTableSortingManager.prototype.isColumnHeaderSortable = function(header) {
                var hasIdentity = _pivotTableSelectionManager__WEBPACK_IMPORTED_MODULE_0__.l.hasIdentity(header);
                return this.hasRows && this.measureCount > 0 && !hasIdentity && header.position.row.isLast && !this.valuesOnRowApplied;
            }, PivotTableSortingManager.prototype.getCornerSortDirection = function(header) {
                if (!this.isCornerSortable(header)) return null;
                if (this.isSteppedLayout) {
                    for (var sortDirection = null, _i = 0, _a = this.nonMeasureRowLevels; _i < _a.length; _i++) {
                        var rowLevel = _a[_i];
                        if (1 !== rowLevel.sources.length) return null;
                        var levelSortDirection = rowLevel.sources[0].sort;
                        if (null == levelSortDirection) return null;
                        if (null !== sortDirection) {
                            if (levelSortDirection !== sortDirection) return null;
                        } else sortDirection = levelSortDirection;
                    }
                    return sortDirection;
                }
                return this.nonMeasureRowLevels[header.position.column.index].sources[0].sort;
            }, PivotTableSortingManager.prototype.getColumnHeaderSortDirection = function(header) {
                return this.isColumnHeaderSortable(header) ? this.getMeasureSortDirection(this.getMeasureQueryName(header)) : null;
            }, PivotTableSortingManager.prototype.getMeasureQueryName = function(header) {
                return this.hasColumns && 1 === this.measureCount ? this.valueSources[0].queryName : header.queryName;
            }, PivotTableSortingManager.prototype.sortCorner = function(corner) {
                var sortDescriptors, currentSort = this.getCornerSortDirection(corner), futureSortDirection = PivotTableSortingManager.getNextSortDirection(currentSort);
                if (this.isSteppedLayout) {
                    sortDescriptors = [];
                    for (var _i = 0, _a = this.nonMeasureRowLevels; _i < _a.length; _i++) sortDescriptors.push({
                        queryName: _a[_i].sources[0].queryName,
                        sortDirection: futureSortDirection
                    });
                } else sortDescriptors = [ {
                    queryName: corner.metadata.queryName,
                    sortDirection: futureSortDirection
                } ];
                this.hostServices.onCustomSort({
                    sortDescriptors,
                    suppressAnnouncements: !0
                });
            }, PivotTableSortingManager.prototype.sortColumnHeader = function(header) {
                var sortDirection = this.getColumnHeaderSortDirection(header), column = this.getMeasureColumn(this.getMeasureQueryName(header));
                this.hostServices.onCustomSort({
                    sortDescriptors: [ {
                        queryName: this.getMeasureQueryName(header),
                        sortDirection: PivotTableSortingManager.getNextSortDirection(sortDirection, column)
                    } ],
                    suppressAnnouncements: !0
                });
            }, PivotTableSortingManager.getNextSortDirection = function(currentSortDirection, column) {
                return void 0 === currentSortDirection ? PivotTableSortingManager.getDefaultSortDirection(column) : 1 === currentSortDirection ? 2 : 1;
            }, PivotTableSortingManager.getDefaultSortDirection = function(column) {
                return column && column.isMeasure && column.type && column.type.numeric && !column.type.temporal ? 2 : 1;
            }, PivotTableSortingManager.prototype.getMeasureSortDirection = function(queryName) {
                var valueSource = this.getMeasureColumn(queryName);
                if (null != valueSource) return valueSource.sort;
            }, PivotTableSortingManager.prototype.getMeasureColumn = function(queryName) {
                return _.find(this.valueSources, function(value) {
                    return value.queryName === queryName;
                });
            }, PivotTableSortingManager;
        }();
    }
} ]);