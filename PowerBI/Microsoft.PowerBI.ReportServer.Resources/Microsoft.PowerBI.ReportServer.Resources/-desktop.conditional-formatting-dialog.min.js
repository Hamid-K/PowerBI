"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "conditional-formatting-dialog", "field-list" ], {
    32441: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            u: function() {
                return FormattingPaneLazyComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0, a1, a2, a3, a4) {
            return {
                formattingSources: a0,
                indicatorEnabled: a1,
                mobileFormatting: a2,
                disabledCards: a3,
                disabledSlices: a4
            };
        }, FormattingPaneLazyComponent = function() {
            function FormattingPaneLazyComponent() {
                var _this = this;
                this.mobileFormatting = !1, this.propertyChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, 
                this.outputArgs = {
                    propertyChanged: function(args) {
                        return _this.propertyChanged.emit(args);
                    }
                }, this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "FormattingPaneComponentId";
            }
            return FormattingPaneLazyComponent.\u0275fac = function(t) {
                return new (t || FormattingPaneLazyComponent);
            }, FormattingPaneLazyComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: FormattingPaneLazyComponent,
                selectors: [ [ "formatting-pane-lazy" ] ],
                inputs: {
                    formattingSources: "formattingSources",
                    indicatorEnabled: "indicatorEnabled",
                    mobileFormatting: "mobileFormatting",
                    disabledCards: "disabledCards",
                    disabledSlices: "disabledSlices"
                },
                outputs: {
                    propertyChanged: "propertyChanged"
                },
                decls: 1,
                vars: 10,
                consts: [ [ 3, "inputArgs", "modulePath", "outputArgs", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction5"](4, _c0, ctx.formattingSources, ctx.indicatorEnabled, ctx.mobileFormatting, ctx.disabledCards, ctx.disabledSlices))("modulePath", ctx.modulePath)("outputArgs", ctx.outputArgs)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), FormattingPaneLazyComponent;
        }();
    },
    78633: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            a: function() {
                return GradientBarLazyComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0) {
            return {
                colors: a0
            };
        }, GradientBarLazyComponent = function() {
            function GradientBarLazyComponent() {
                this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "GradientBarComponentId";
            }
            return GradientBarLazyComponent.\u0275fac = function(t) {
                return new (t || GradientBarLazyComponent);
            }, GradientBarLazyComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: GradientBarLazyComponent,
                selectors: [ [ "gradient-bar-lazy" ] ],
                inputs: {
                    colors: "colors"
                },
                decls: 1,
                vars: 5,
                consts: [ [ 3, "inputArgs", "modulePath", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction1"](3, _c0, ctx.colors))("modulePath", ctx.modulePath)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), GradientBarLazyComponent;
        }();
    },
    71707: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            I: function() {
                return ToggleSwitchModernLazyComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0, a1, a2, a3, a4) {
            return {
                toggle: a0,
                ariaLabelledby: a1,
                ariaDescribedby: a2,
                toggleLabel: a3,
                isDisabled: a4
            };
        }, ToggleSwitchModernLazyComponent = function() {
            function ToggleSwitchModernLazyComponent() {
                var _this = this;
                this.onToggleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, 
                this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "ToggleSwitchModernComponentId", this.outputArgs = {
                    onToggleChange: function(args) {
                        return _this.onToggleChange.emit(args);
                    }
                };
            }
            return ToggleSwitchModernLazyComponent.\u0275fac = function(t) {
                return new (t || ToggleSwitchModernLazyComponent);
            }, ToggleSwitchModernLazyComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: ToggleSwitchModernLazyComponent,
                selectors: [ [ "toggle-switch-modern-lazy" ] ],
                inputs: {
                    toggle: "toggle",
                    ariaLabelledby: "ariaLabelledby",
                    ariaDescribedby: "ariaDescribedby",
                    toggleLabel: "toggleLabel",
                    isDisabled: "isDisabled"
                },
                outputs: {
                    onToggleChange: "onToggleChange"
                },
                decls: 1,
                vars: 10,
                consts: [ [ 3, "inputArgs", "modulePath", "outputArgs", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction5"](4, _c0, ctx.toggle, ctx.ariaLabelledby, ctx.ariaDescribedby, ctx.toggleLabel, ctx.isDisabled))("modulePath", ctx.modulePath)("outputArgs", ctx.outputArgs)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), ToggleSwitchModernLazyComponent;
        }();
    },
    90094: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            l: function() {
                return WarningEagerComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0) {
            return {
                warningMessage: a0
            };
        }, WarningEagerComponent = function() {
            function WarningEagerComponent() {
                this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "WarningComponentId";
            }
            return WarningEagerComponent.\u0275fac = function(t) {
                return new (t || WarningEagerComponent);
            }, WarningEagerComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: WarningEagerComponent,
                selectors: [ [ "warning-eager" ] ],
                inputs: {
                    warningMessage: "warningMessage"
                },
                decls: 1,
                vars: 5,
                consts: [ [ 3, "inputArgs", "modulePath", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction1"](3, _c0, ctx.warningMessage))("modulePath", ctx.modulePath)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), WarningEagerComponent;
        }();
    },
    42101: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            p: function() {
                return PaneFormattingEagerModule;
            }
        });
        var _format_mode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9844), _angular_common__WEBPACK_IMPORTED_MODULE_6__ = (__webpack_require__(32441), 
        __webpack_require__(78633), __webpack_require__(71707), __webpack_require__(90094), 
        __webpack_require__(77476)), _angular_router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9398), _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(57786), _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82156), _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50423), lazyLoadPaneFormatting = {
            loadChildren: function() {
                return Promise.all([ __webpack_require__.e(4), __webpack_require__.e("pane-formatting") ]).then(__webpack_require__.bind(__webpack_require__, 71980)).then(function(m) {
                    return m.PaneFormattingModule;
                });
            }
        };
        _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_0__.E.addLazyLoadForLegacyMapping("@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", lazyLoadPaneFormatting.loadChildren);
        var LazyLoadRoutes = [ {
            path: "dummy-pane-formatting-lazy",
            loadChildren: lazyLoadPaneFormatting.loadChildren
        } ], PaneFormattingEagerModule = function() {
            function PaneFormattingEagerModule() {}
            return PaneFormattingEagerModule.\u0275fac = function(t) {
                return new (t || PaneFormattingEagerModule);
            }, PaneFormattingEagerModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_5__["\u0275\u0275defineNgModule"]({
                type: PaneFormattingEagerModule
            }), PaneFormattingEagerModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_5__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _format_mode__WEBPACK_IMPORTED_MODULE_7__.j, _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_8__.N, _angular_router__WEBPACK_IMPORTED_MODULE_9__.Bz.forChild(LazyLoadRoutes) ]
            }), PaneFormattingEagerModule;
        }();
    },
    48311: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ConditionalFormattingDialogModule: function() {
                return ConditionalFormattingDialogModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), pane_formatting_eager_module = __webpack_require__(42101), sqExprStaticMembers = __webpack_require__(74082), CaseViewModel = function() {
            function CaseViewModel(options, featureSwitchService) {
                this.options = options, this.featureSwitchService = featureSwitchService, this.ruleTemplateKind = options.ruleTemplateKind;
            }
            return Object.defineProperty(CaseViewModel.prototype, "propertyType", {
                get: function() {
                    return this.options.propertyType;
                },
                enumerable: !1,
                configurable: !0
            }), CaseViewModel.prototype.isValid = function() {
                return this.lowerBound.isValid();
            }, CaseViewModel.prototype.onColorChanged = function(color) {
                color || (color = {
                    value: this.options.defaultYieldValue
                }), this.value = color.value;
            }, CaseViewModel.prototype.onIconChanged = function(iconId) {
                this.value = iconId, this.options.onCaseIconChanged();
            }, CaseViewModel;
        }(), ConditionalArgumentKindOptions = function() {
            function ConditionalArgumentKindOptions() {}
            return ConditionalArgumentKindOptions.Number = {
                kind: "Number",
                displayNameKey: "ConditionalFormattingDialog_Number"
            }, ConditionalArgumentKindOptions.Text = {
                kind: "Text",
                displayNameKey: "Text"
            }, ConditionalArgumentKindOptions.Percent = {
                kind: "Percent",
                displayNameKey: "ConditionalFormattingDialog_Percent"
            }, ConditionalArgumentKindOptions;
        }(), ConditionalOperatorOptions = function() {
            function ConditionalOperatorOptions(localizationService) {
                this.localizationService = localizationService, this.equal = this._equal, this.isBlank = this._isBlank;
            }
            return Object.defineProperty(ConditionalOperatorOptions.prototype, "_equal", {
                get: function() {
                    return {
                        id: 2,
                        displayName: "=",
                        disableOtherOperator: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ConditionalOperatorOptions.prototype, "_isBlank", {
                get: function() {
                    return {
                        id: 5,
                        displayName: this.localizationService.get("FilterOperator_IsBlank"),
                        disableOtherOperator: !0,
                        disableInput: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), ConditionalOperatorOptions;
        }(), TextConditionalOperatorOptions = function(_super) {
            function TextConditionalOperatorOptions(localizationService) {
                var _this = _super.call(this, localizationService) || this;
                return _this.contains = _this._contains, _this.startsWith = _this._startsWith, _this.doesNotContain = _this._doesNotContain, 
                _this.doesNotStartWith = _this._doesNotStartWith, _this.isNotBlank = _this._isNotBlank, 
                _this.isEmpty = _this._isEmpty, _this.isNotEmpty = _this._isNotEmpty, _this.notEqual = _this._notEqual, 
                _this.equal = _this._textEqual, _this.lowerBoundOptions = [ _this.contains, _this.startsWith, _this.doesNotContain, _this.doesNotStartWith, _this.equal, _this.notEqual, _this.isEmpty, _this.isBlank, _this.isNotEmpty, _this.isNotBlank ], 
                _this;
            }
            return (0, tslib_es6.__extends)(TextConditionalOperatorOptions, _super), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_textEqual", {
                get: function() {
                    return {
                        id: 2,
                        displayName: this.localizationService.get("FilterOperator_Is"),
                        disableOtherOperator: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_doesNotStartWith", {
                get: function() {
                    return {
                        id: 9,
                        displayName: this.localizationService.get("FilterOperator_DoesNotStartWith"),
                        disableOtherOperator: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_startsWith", {
                get: function() {
                    return {
                        id: 8,
                        displayName: this.localizationService.get("FilterOperator_StartsWith"),
                        disableOtherOperator: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_doesNotContain", {
                get: function() {
                    return {
                        id: 7,
                        displayName: this.localizationService.get("FilterOperator_DoesNotContain"),
                        disableOtherOperator: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_contains", {
                get: function() {
                    return {
                        id: 6,
                        displayName: this.localizationService.get("FilterOperator_Contains"),
                        disableOtherOperator: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_notEqual", {
                get: function() {
                    return {
                        id: 13,
                        displayName: this.localizationService.get("FilterOperator_IsNot"),
                        disableOtherOperator: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_isEmpty", {
                get: function() {
                    return {
                        id: 11,
                        displayName: this.localizationService.get("FilterOperator_IsEmptyString"),
                        disableOtherOperator: !0,
                        disableInput: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_isNotEmpty", {
                get: function() {
                    return {
                        id: 12,
                        displayName: this.localizationService.get("FilterOperator_IsNotEmptyString"),
                        disableOtherOperator: !0,
                        disableInput: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextConditionalOperatorOptions.prototype, "_isNotBlank", {
                get: function() {
                    return {
                        id: 10,
                        displayName: this.localizationService.get("FilterOperator_IsNotBlank"),
                        disableOtherOperator: !0,
                        disableInput: !0
                    };
                },
                enumerable: !1,
                configurable: !0
            }), TextConditionalOperatorOptions;
        }(ConditionalOperatorOptions), NumericConditionalOperatorOptions = function(_super) {
            function NumericConditionalOperatorOptions(localizationService) {
                var _this = _super.call(this, localizationService) || this;
                return _this.greaterThan = _this._greaterThan, _this.greaterThanOrEqual = _this._greaterThanOrEqual, 
                _this.lessThan = _this._lessThan, _this.lessThanOrEqual = _this._lessThanOrEqual, 
                _this.lowerBoundOptions = [ _this.greaterThan, _this.greaterThanOrEqual, _this.equal, _this.isBlank ], 
                _this.upperBoundOptions = [ _this._lessThan, _this._lessThanOrEqual ], _this;
            }
            return (0, tslib_es6.__extends)(NumericConditionalOperatorOptions, _super), Object.defineProperty(NumericConditionalOperatorOptions.prototype, "_greaterThan", {
                get: function() {
                    return {
                        id: 0,
                        displayName: ">"
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(NumericConditionalOperatorOptions.prototype, "_greaterThanOrEqual", {
                get: function() {
                    return {
                        id: 1,
                        displayName: ">="
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(NumericConditionalOperatorOptions.prototype, "_lessThan", {
                get: function() {
                    return {
                        id: 3,
                        displayName: "<"
                    };
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(NumericConditionalOperatorOptions.prototype, "_lessThanOrEqual", {
                get: function() {
                    return {
                        id: 4,
                        displayName: "<="
                    };
                },
                enumerable: !1,
                configurable: !0
            }), NumericConditionalOperatorOptions;
        }(ConditionalOperatorOptions), sqExprEqualityVisitor = __webpack_require__(45413), ConditionViewMode = function() {
            return function() {};
        }(), VisualsCommon_debug = __webpack_require__(62458), sqExpr = __webpack_require__(94419), NumericConditionViewMode = function(_super) {
            function NumericConditionViewMode(part, isPercentEnabled, operatorOptions, featureSwitchService) {
                var _this = _super.call(this) || this;
                return _this.part = part, _this.isPercentEnabled = isPercentEnabled, _this.operatorOptions = operatorOptions, 
                _this.featureSwitchService = featureSwitchService, _this.onIsPercentEnabledChanged(isPercentEnabled), 
                _this;
            }
            return (0, tslib_es6.__extends)(NumericConditionViewMode, _super), NumericConditionViewMode.prototype.reset = function() {
                switch (this.part) {
                  case "LowerBound":
                    this.operator = this.operatorOptions.greaterThanOrEqual;
                    break;

                  case "UpperBound":
                    this.operator = this.operatorOptions.lessThan;
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(this.part);
                }
                this.resetValue();
            }, NumericConditionViewMode.prototype.update = function(conditionExpr) {
                var argumentExpr = conditionExpr.right;
                this.operator = this.getOperatorOption(conditionExpr.comparison, argumentExpr), 
                this.updateArgument(argumentExpr);
            }, NumericConditionViewMode.prototype.onIsPercentEnabledChanged = function(value) {
                this.isPercentEnabled = value, this.isPercentEnabled || (this.valueKind = ConditionalArgumentKindOptions.Number);
            }, NumericConditionViewMode.prototype.updateToOpenEnded = function() {
                switch (this.part) {
                  case "LowerBound":
                    return void this.reset();

                  case "UpperBound":
                    return this.operator = this.operatorOptions.lessThanOrEqual, void (this.isPercentEnabled ? (this.value = 100, 
                    this.valueKind = ConditionalArgumentKindOptions.Percent) : (this.value = null, this.valueKind = ConditionalArgumentKindOptions.Number));

                  default:
                    VisualsCommon_debug.fF.assertNever(this.part);
                }
            }, NumericConditionViewMode.prototype.isOpenEnded = function() {
                switch (this.part) {
                  case "LowerBound":
                    return null === this.value && this.valueKind === ConditionalArgumentKindOptions.Number || 0 === this.value && this.valueKind === ConditionalArgumentKindOptions.Percent;

                  case "UpperBound":
                    return null === this.value && this.valueKind === ConditionalArgumentKindOptions.Number || 100 === this.value && this.valueKind === ConditionalArgumentKindOptions.Percent;

                  default:
                    VisualsCommon_debug.fF.assertNever(this.part);
                }
            }, NumericConditionViewMode.prototype.isValid = function() {
                if (_.isEqual(this.operator, this.operatorOptions.isBlank)) return !0;
                if (void 0 === this.value) return !1;
                if (_.isEqual(this.operator, this.operatorOptions.equal)) {
                    if (null === this.value) return !1;
                    switch (this.valueKind.kind) {
                      case "Percent":
                        return this.value >= 0 && this.value <= 100;

                      case "Number":
                        return !0;

                      case "Text":
                        return !!this.featureSwitchService.featureSwitches.cfStrings;

                      default:
                        VisualsCommon_debug.fF.assertNever(this.valueKind.kind);
                    }
                }
                switch (this.valueKind.kind) {
                  case "Percent":
                    if (null === this.value) return !1;
                    switch (this.part) {
                      case "LowerBound":
                        return this.value >= 0 && this.value < 100;

                      case "UpperBound":
                        return this.value > 0 && this.value <= 100;

                      default:
                        VisualsCommon_debug.fF.assertNever(this.part);
                    }

                  case "Number":
                    return !0;

                  case "Text":
                    return VisualsCommon_debug.fF.assertFail("Text is not a valid value kind for numeric condition"), 
                    !1;

                  default:
                    VisualsCommon_debug.fF.assertNever(this.valueKind.kind);
                }
            }, NumericConditionViewMode.prototype.getDefinition = function(sourceExpr) {
                var _this = this;
                return VisualsCommon_debug.fF.assert(function() {
                    return _this.isValid();
                }, "getDefinition called for an invalid Condition"), _.isEqual(this.operator, this.operatorOptions.isBlank) ? (0, 
                sqExpr.qu)(0, sourceExpr, (0, sqExpr.IF)()) : !this.isOpenEnded() || this.operator.disableOtherOperator ? (0, 
                sqExpr.qu)(this.getComparisonKind(), sourceExpr, this.getArgumentExpr(sourceExpr)) : void 0;
            }, NumericConditionViewMode.prototype.resetValue = function() {
                switch (this.part) {
                  case "LowerBound":
                    return void (this.isPercentEnabled ? (this.value = 0, this.valueKind = ConditionalArgumentKindOptions.Percent) : (this.value = null, 
                    this.valueKind = ConditionalArgumentKindOptions.Number));

                  case "UpperBound":
                    return this.value = 0, void (this.valueKind = ConditionalArgumentKindOptions.Number);

                  default:
                    VisualsCommon_debug.fF.assertNever(this.part);
                }
            }, NumericConditionViewMode.prototype.getOperatorOption = function(comparisonKind, argument) {
                var _this = this;
                switch (comparisonKind) {
                  case 1:
                    return VisualsCommon_debug.fF.assert(function() {
                        return "LowerBound" === _this.part;
                    }, "Unexpected condition"), this.operatorOptions.greaterThan;

                  case 2:
                    return VisualsCommon_debug.fF.assert(function() {
                        return "LowerBound" === _this.part;
                    }, "Unexpected condition"), this.operatorOptions.greaterThanOrEqual;

                  case 0:
                    return VisualsCommon_debug.fF.assert(function() {
                        return "LowerBound" === _this.part;
                    }, "Unexpected condition"), (0, sqExprEqualityVisitor.fS)(argument, (0, sqExpr.IF)()) ? this.operatorOptions.isBlank : this.operatorOptions.equal;

                  case 3:
                    return VisualsCommon_debug.fF.assert(function() {
                        return "UpperBound" === _this.part;
                    }, "Unexpected condition"), this.operatorOptions.lessThan;

                  case 4:
                    return VisualsCommon_debug.fF.assert(function() {
                        return "UpperBound" === _this.part;
                    }, "Unexpected condition"), this.operatorOptions.lessThanOrEqual;

                  default:
                    VisualsCommon_debug.fF.assertNever(comparisonKind);
                }
            }, NumericConditionViewMode.prototype.getComparisonKind = function() {
                switch (this.operator.id) {
                  case 5:
                  case 2:
                    return 0;

                  case 0:
                    return 1;

                  case 1:
                    return 2;

                  case 3:
                    return 3;

                  case 4:
                    return 4;

                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                    VisualsCommon_debug.fF.assertFail("Unexpected operator");
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(this.operator.id);
                }
            }, NumericConditionViewMode.prototype.updateArgument = function(argument) {
                if (_.isEqual(this.operator, this.operatorOptions.isBlank)) this.resetValue(); else {
                    if ((0, sqExprStaticMembers.S9)(argument)) return this.value = sqExpr.jz.getNumericValue(argument), 
                    void (this.valueKind = ConditionalArgumentKindOptions.Number);
                    if ((0, sqExprStaticMembers.YF)(argument)) {
                        var parts = argument.decomposeOverRangePattern();
                        if (parts) return this.value = 100 * parts.percent, this.value = parseFloat(this.value.toFixed(4)), 
                        void (this.valueKind = ConditionalArgumentKindOptions.Percent);
                    }
                    VisualsCommon_debug.fF.assertFail("numericConditionviewmode - updateArgument - Unrecognized comparison argument pattern");
                }
            }, NumericConditionViewMode.prototype.getArgumentExpr = function(sourceExpr) {
                switch (this.valueKind.kind) {
                  case "Number":
                    return (0, sqExpr.tx)(this.value);

                  case "Percent":
                    return sqExpr.LE.overRangeOf(sourceExpr, this.value / 100);

                  case "Text":
                    VisualsCommon_debug.fF.assertFail("Text argument is not supported");
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(this.valueKind.kind);
                }
            }, NumericConditionViewMode;
        }(ConditionViewMode), NumericCaseViewModel = function(_super) {
            function NumericCaseViewModel(options, featureSwitchService, localizationService) {
                var _this = _super.call(this, options, featureSwitchService) || this;
                _this.argumentKindOptions = [ ConditionalArgumentKindOptions.Number, ConditionalArgumentKindOptions.Percent ];
                var _a = _this.options, sqCase = _a.sqCase, disableAutoRange = _a.disableAutoRange;
                return _this.operatorOptions = new NumericConditionalOperatorOptions(localizationService), 
                VisualsCommon_debug.fF.assertAnyValue(sqCase, "if sqCase is undefined, create a default Case (If value >= 0% AND < 0 THEN <Yield>)"), 
                VisualsCommon_debug.fF.assert(function() {
                    return _this.operatorOptions instanceof NumericConditionalOperatorOptions;
                }, "operatorOptions should be NumericConditionalOperatorOptions"), _this.isPercentEnabled = !disableAutoRange, 
                _this.lowerBound = new NumericConditionViewMode("LowerBound", _this.isPercentEnabled, _this.operatorOptions, featureSwitchService), 
                _this.upperBound = new NumericConditionViewMode("UpperBound", _this.isPercentEnabled, _this.operatorOptions, featureSwitchService), 
                _this.onIsPercentEnabledChanged(_this.isPercentEnabled), _this.initCase(sqCase), 
                _this;
            }
            return (0, tslib_es6.__extends)(NumericCaseViewModel, _super), NumericCaseViewModel.prototype.isValid = function() {
                if (!_super.prototype.isValid.call(this)) return !1;
                if (this.lowerBound.operator.disableOtherOperator) return !0;
                if (!this.upperBound.isValid()) return !1;
                var hasLowerBound = !this.lowerBound.isOpenEnded(), hasUpperBound = !this.upperBound.isOpenEnded();
                return !hasLowerBound && !hasUpperBound || !hasLowerBound || !hasUpperBound || this.lowerBound.valueKind !== this.upperBound.valueKind || this.upperBound.value > this.lowerBound.value;
            }, NumericCaseViewModel.prototype.getDefinition = function(sourceExpr) {
                var _this = this;
                VisualsCommon_debug.fF.assert(function() {
                    return _this.isValid();
                }, "Invalid case settings");
                var part1 = this.lowerBound.getDefinition(sourceExpr), part2 = this.lowerBound.operator.disableOtherOperator ? null : this.upperBound.getDefinition(sourceExpr);
                return {
                    condition: part1 || part2 ? part1 && part2 ? (0, sqExpr.xD)(part1, part2) : part1 || part2 : (0, 
                    sqExpr.O7)(!0),
                    value: null == this.value ? (0, sqExpr.IF)() : (0, sqExpr.fL)(this.value)
                };
            }, NumericCaseViewModel.prototype.onIsPercentEnabledChanged = function(value) {
                VisualsCommon_debug.fF.assertValue(this.lowerBound, "lowerBound must be defined"), 
                VisualsCommon_debug.fF.assertValue(this.upperBound, "upperBound must be defined"), 
                this.isPercentEnabled = value, this.lowerBound.onIsPercentEnabledChanged(this.isPercentEnabled), 
                this.upperBound.onIsPercentEnabledChanged(this.isPercentEnabled);
            }, NumericCaseViewModel.prototype.initCase = function(sqCase) {
                if (!sqCase) return this.lowerBound.reset(), this.upperBound.reset(), void (this.value = this.options.defaultYieldValue);
                (0, sqExprStaticMembers.AW)(sqCase.value) ? this.value = sqExpr.jz.getTextValue(sqCase.value) : (0, 
                sqExprStaticMembers.uR)(sqCase.value) ? this.value = null : VisualsCommon_debug.fF.assertFail("Unexpected Case yield value type");
                var condition = sqCase.condition;
                if ((0, sqExprStaticMembers.un)(condition)) {
                    var condition1 = condition.left, condition2 = condition.right;
                    (0, sqExprStaticMembers.$Q)(condition1) && (0, sqExprStaticMembers.$Q)(condition2) ? (this.lowerBound.update(condition1), 
                    this.upperBound.update(condition2)) : VisualsCommon_debug.fF.assertFail("Unexpected AND expr");
                } else if ((0, sqExprStaticMembers.IS)(condition)) this.lowerBound.reset(), this.upperBound.reset(); else if ((0, 
                sqExprStaticMembers.VC)(condition) && !0 === condition.value) this.lowerBound.updateToOpenEnded(), 
                this.upperBound.updateToOpenEnded(); else if ((0, sqExprStaticMembers.$Q)(condition)) {
                    var comparisonKind = condition.comparison;
                    switch (comparisonKind) {
                      case 0:
                        return this.lowerBound.update(condition), void this.upperBound.reset();

                      case 1:
                      case 2:
                        return this.lowerBound.update(condition), void this.upperBound.updateToOpenEnded();

                      case 3:
                      case 4:
                        return this.lowerBound.updateToOpenEnded(), void this.upperBound.update(condition);

                      default:
                        VisualsCommon_debug.fF.assertFail("Unexpected QueryComparisonKind: " + comparisonKind);
                    }
                } else VisualsCommon_debug.fF.assertFail("Unexpected Case");
            }, NumericCaseViewModel;
        }(CaseViewModel), sqExprTypes = __webpack_require__(48676), TextConditionViewMode = function(_super) {
            function TextConditionViewMode(part, operatorOptions) {
                var _this = _super.call(this) || this;
                return _this.part = part, _this.operatorOptions = operatorOptions, _this;
            }
            return (0, tslib_es6.__extends)(TextConditionViewMode, _super), TextConditionViewMode.prototype.reset = function() {
                this.operator = this.operatorOptions.equal, this.resetValue();
            }, TextConditionViewMode.prototype.update = function(conditionExpr) {
                var conditionExprArg = (0, sqExprStaticMembers.Ym)(conditionExpr) ? conditionExpr.arg : conditionExpr;
                if ((0, sqExprStaticMembers.IS)(conditionExprArg) || (0, sqExprStaticMembers.f8)(conditionExprArg) || (0, 
                sqExprStaticMembers.$Q)(conditionExprArg)) {
                    var argumentExpr = conditionExprArg.right;
                    return this.operator = this.getOperatorOption(conditionExpr), void this.updateArgument(argumentExpr);
                }
                VisualsCommon_debug.fF.assertFail("TextConditionViewMode - update - Unexpected condition expression");
            }, TextConditionViewMode.prototype.isValid = function() {
                return this.valueKind !== ConditionalArgumentKindOptions.Text ? (VisualsCommon_debug.fF.assertFail("TextConditionViewMode - isValid - Unexpected valueKind"), 
                !1) : !(!_.isEqual(this.operator, this.operatorOptions.isBlank) && !_.isEqual(this.operator, this.operatorOptions.isNotBlank) && !_.isEqual(this.operator, this.operatorOptions.isEmpty) && !_.isEqual(this.operator, this.operatorOptions.isNotEmpty) && (void 0 === this.value || (_.isEqual(this.operator, this.operatorOptions.equal) || _.isEqual(this.operator, this.operatorOptions.notEqual) ? null === this.value : _.isEmpty(this.value))));
            }, TextConditionViewMode.prototype.getDefinition = function(sourceExpr) {
                var _a, _this = this;
                VisualsCommon_debug.fF.assert(function() {
                    return _this.isValid();
                }, "TextConditionViewMode - getDefinition called for an invalid Condition");
                var annotations = null !== (_a = sourceExpr.getAnnotations()) && void 0 !== _a ? _a : {}, operatorOption = this.operator;
                annotations[sqExprTypes.L] = 1, annotations[sqExprTypes.Q] = operatorOption.id;
                var sqCompareEqualsExpr = function() {
                    return (0, sqExpr.qu)(0, sourceExpr, (0, sqExpr.fL)(_this.value), annotations);
                }, sqIsBlankExpr = function() {
                    return (0, sqExpr.qu)(0, sourceExpr, (0, sqExpr.IF)(), annotations);
                }, sqIsEmptyExpr = function() {
                    return (0, sqExpr.qu)(0, sourceExpr, (0, sqExpr.$t)(), annotations);
                }, sqStartsWithExpr = function() {
                    return (0, sqExpr.Ny)(sourceExpr, (0, sqExpr.fL)(_this.value), annotations);
                }, sqContainsExpr = function() {
                    return (0, sqExpr.r3)(sourceExpr, (0, sqExpr.fL)(_this.value), annotations);
                };
                switch (operatorOption.id) {
                  case this.operatorOptions.isBlank.id:
                    return sqIsBlankExpr();

                  case this.operatorOptions.isNotBlank.id:
                    return (0, sqExpr.ff)(sqIsBlankExpr());

                  case this.operatorOptions.isEmpty.id:
                    return sqIsEmptyExpr();

                  case this.operatorOptions.isNotEmpty.id:
                    return (0, sqExpr.ff)(sqIsEmptyExpr());

                  case this.operatorOptions.contains.id:
                    return sqContainsExpr();

                  case this.operatorOptions.doesNotContain.id:
                    return (0, sqExpr.ff)(sqContainsExpr());

                  case this.operatorOptions.startsWith.id:
                    return sqStartsWithExpr();

                  case this.operatorOptions.doesNotStartWith.id:
                    return (0, sqExpr.ff)(sqStartsWithExpr());

                  case this.operatorOptions.equal.id:
                    return sqCompareEqualsExpr();

                  case this.operatorOptions.notEqual.id:
                    return (0, sqExpr.ff)(sqCompareEqualsExpr());

                  default:
                    VisualsCommon_debug.fF.assertFail("TextConditionViewMode - getDefinition - Unexpected operator: ConditionalOperatorOptionId ".concat(this.operator.id));
                }
            }, TextConditionViewMode.prototype.getOperatorOption = function(argument) {
                var _this = this;
                VisualsCommon_debug.fF.assert(function() {
                    return "LowerBound" === _this.part;
                }, "TextConditionViewMode - getOperatorOption - Unexpected condition");
                var isSqNot = (0, sqExprStaticMembers.Ym)(argument), argumentExpr = isSqNot ? argument.arg : argument;
                if ((0, sqExprStaticMembers.$Q)(argumentExpr)) {
                    if (0 === argumentExpr.comparison) {
                        var annotations = argumentExpr.getAnnotations();
                        if (null != annotations) switch (annotations[sqExprTypes.Q]) {
                          case this.operatorOptions.isNotBlank.id:
                            return this.operatorOptions.isNotBlank;

                          case this.operatorOptions.isBlank.id:
                            return this.operatorOptions.isBlank;

                          case this.operatorOptions.isEmpty.id:
                            return this.operatorOptions.isEmpty;

                          case this.operatorOptions.isNotEmpty.id:
                            return this.operatorOptions.isNotEmpty;
                        }
                        return isSqNot ? this.operatorOptions.notEqual : this.operatorOptions.equal;
                    }
                } else {
                    if ((0, sqExprStaticMembers.IS)(argumentExpr)) return isSqNot ? this.operatorOptions.doesNotContain : this.operatorOptions.contains;
                    if ((0, sqExprStaticMembers.f8)(argumentExpr)) return isSqNot ? this.operatorOptions.doesNotStartWith : this.operatorOptions.startsWith;
                }
                VisualsCommon_debug.fF.assertFail("TextConditionViewMode - getOperatorOption - Unexpected argument expression");
            }, TextConditionViewMode.prototype.updateArgument = function(argument) {
                if (!_.isEqual(this.operator, this.operatorOptions.isEmpty) && !_.isEqual(this.operator, this.operatorOptions.isNotEmpty)) return _.isEqual(this.operator, this.operatorOptions.isBlank) || _.isEqual(this.operator, this.operatorOptions.isNotBlank) ? (this.value = null, 
                void (this.valueKind = ConditionalArgumentKindOptions.Text)) : (0, sqExprStaticMembers.AW)(argument) ? (this.value = sqExpr.jz.getTextValue(argument), 
                void (this.valueKind = ConditionalArgumentKindOptions.Text)) : void VisualsCommon_debug.fF.assertFail("TextConditionViewMode - updateArgument - Unexpected argument expression");
                this.resetValue();
            }, TextConditionViewMode.prototype.resetValue = function() {
                this.value = "", this.valueKind = ConditionalArgumentKindOptions.Text;
            }, TextConditionViewMode;
        }(ConditionViewMode), TextCaseViewModel = function(_super) {
            function TextCaseViewModel(options, featureSwitchService, localizationService) {
                var _this = _super.call(this, options, featureSwitchService) || this, sqCase = _this.options.sqCase;
                return _this.operatorOptions = new TextConditionalOperatorOptions(localizationService), 
                _this.lowerBound = new TextConditionViewMode("LowerBound", _this.operatorOptions), 
                _this.initCase(sqCase), _this;
            }
            return (0, tslib_es6.__extends)(TextCaseViewModel, _super), TextCaseViewModel.prototype.getDefinition = function(sourceExpr) {
                var _this = this;
                return VisualsCommon_debug.fF.assert(function() {
                    return _this.isValid();
                }, "TextCaseViewModel - getDefinition - Invalid case settings"), {
                    condition: this.lowerBound.getDefinition(sourceExpr) || (0, sqExpr.O7)(!0),
                    value: null == this.value ? (0, sqExpr.IF)() : (0, sqExpr.fL)(this.value)
                };
            }, TextCaseViewModel.prototype.initCase = function(sqCase) {
                if (!sqCase) return this.lowerBound.reset(), void (this.value = this.options.defaultYieldValue);
                (0, sqExprStaticMembers.AW)(sqCase.value) ? this.value = sqExpr.jz.getTextValue(sqCase.value) : (0, 
                sqExprStaticMembers.uR)(sqCase.value) ? this.value = null : VisualsCommon_debug.fF.assertFail("Unexpected Case yield value type");
                var expr, condition = sqCase.condition;
                (0, sqExprStaticMembers.IS)(expr = condition) || (0, sqExprStaticMembers.f8)(expr) || (0, 
                sqExprStaticMembers.$Q)(expr) || (0, sqExprStaticMembers.Ym)(expr) ? this.lowerBound.update(condition) : (0, 
                sqExprStaticMembers.VC)(condition) && !0 === condition.value ? this.lowerBound.reset() : VisualsCommon_debug.fF.assertFail("TextCaseViewModel - initCase - Unexpected Case condition type");
            }, TextCaseViewModel;
        }(CaseViewModel), CaseViewModelBuilder = function() {
            function CaseViewModelBuilder(featureSwitchService, localizationService) {
                this.featureSwitchService = featureSwitchService, this.localizationService = localizationService;
            }
            return CaseViewModelBuilder.prototype.create = function(caseViewModelOptions) {
                switch (caseViewModelOptions.ruleTemplateKind) {
                  case "number":
                    return new NumericCaseViewModel(caseViewModelOptions, this.featureSwitchService, this.localizationService);

                  case "text":
                    return new TextCaseViewModel(caseViewModelOptions, this.featureSwitchService, this.localizationService);

                  default:
                    VisualsCommon_debug.fF.assertNever(caseViewModelOptions.ruleTemplateKind);
                }
            }, CaseViewModelBuilder;
        }(), conditionalFormattingUtil = __webpack_require__(84631), arrayExtensions = __webpack_require__(50550), ConditionalViewModel = function() {
            function ConditionalViewModel(disableAutoRange, propertyType, defaultYieldValue, expr, iconSets, localizationService, ruleTemplateKind, featureSwitchService) {
                var _this = this;
                switch (this.disableAutoRange = disableAutoRange, this.propertyType = propertyType, 
                this.defaultYieldValue = defaultYieldValue, this.iconSets = iconSets, this.caseTypeStore = new Map, 
                VisualsCommon_debug.fF.assertValue(expr, "ConditionalViewModel - expr"), VisualsCommon_debug.fF.assertValue(ruleTemplateKind, "ConditionalViewModel - ruleTemplateKind"), 
                VisualsCommon_debug.fF.assertNonEmpty(expr.cases, "ConditionalViewModel - expr"), 
                this.caseViewModelBuilder = new CaseViewModelBuilder(featureSwitchService, localizationService), 
                this.ruleTemplateKind = ruleTemplateKind, propertyType) {
                  case "Color":
                    this.reverseButtonLabelKey = "ConditionalFormattingDialog_RuleBased_RulesReverseValues_Color";
                    break;

                  case "Icon":
                    this.reverseButtonLabelKey = "ConditionalFormattingDialog_RuleBased_RulesReverseValues_Icon";
                    break;

                  case "Text":
                  case "WebUrl":
                  case "DataBars":
                    VisualsCommon_debug.fF.assertFail("Rules support only Icons and Colors");
                    break;

                  case "Numeric":
                  case "DateTime":
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(propertyType);
                }
                this.cases = _.chain(expr.cases).reverse().map(function(caseDefinition) {
                    return _this.caseViewModelBuilder.create(_this.getCurrentCaseViewModelOptions(caseDefinition));
                }).value(), this.updateSelectedIconSet();
            }
            return ConditionalViewModel.prototype.onDisableAutoRangeChanged = function(value) {
                if (this.disableAutoRange = value, !_.isEmpty(this.cases)) for (var _i = 0, _a = this.cases; _i < _a.length; _i++) {
                    var caseViewModel = _a[_i];
                    caseViewModel instanceof NumericCaseViewModel ? caseViewModel.onIsPercentEnabledChanged(!value) : VisualsCommon_debug.fF.assertFail("ConditionalViewModel - onDisableAutoRangeChanged - caseViewModel is not NumericCaseViewModel");
                }
            }, ConditionalViewModel.prototype.reinitializeSQConditionalExpr = function(newRuleTemplateKind) {
                VisualsCommon_debug.fF.assertValue(newRuleTemplateKind, "ConditionalViewModel - reinitializeSQConditionalExpr - newRuleTemplateKind");
                var existingCases = this.cases;
                this.cases = [], this.caseTypeStore.set(this.ruleTemplateKind, existingCases), this.ruleTemplateKind = newRuleTemplateKind, 
                this.cases = this.caseTypeStore.get(this.ruleTemplateKind) || [], 0 === this.cases.length && this.addCase(), 
                this.updateSelectedIconSet();
            }, ConditionalViewModel.prototype.getCurrentCaseViewModelOptions = function(sqCase) {
                var _this = this;
                return void 0 === sqCase && (sqCase = void 0), {
                    disableAutoRange: this.disableAutoRange,
                    propertyType: this.propertyType,
                    defaultYieldValue: this.defaultYieldValue,
                    onCaseIconChanged: function() {
                        return _this.updateSelectedIconSet();
                    },
                    sqCase,
                    ruleTemplateKind: this.ruleTemplateKind
                };
            }, ConditionalViewModel.prototype.addCase = function() {
                this.cases.push(this.caseViewModelBuilder.create(this.getCurrentCaseViewModelOptions()));
            }, ConditionalViewModel.prototype.reverseCasesValue = function() {
                for (var casesLength = this.cases.length, i = 0; i < casesLength / 2; i++) {
                    var temp = this.cases[i].value;
                    this.cases[i].value = this.cases[casesLength - i - 1].value, this.cases[casesLength - i - 1].value = temp;
                }
                this.updateSelectedIconSet();
            }, ConditionalViewModel.prototype.moveCaseUp = function(caseIdx) {
                _.size(this.cases) > 1 && caseIdx > 0 && caseIdx < this.cases.length && ((0, arrayExtensions.LF)(this.cases, caseIdx, caseIdx - 1), 
                this.updateSelectedIconSet());
            }, ConditionalViewModel.prototype.moveCaseDown = function(caseIdx) {
                _.size(this.cases) > 1 && caseIdx >= 0 && caseIdx < this.cases.length - 1 && ((0, 
                arrayExtensions.LF)(this.cases, caseIdx, caseIdx + 1), this.updateSelectedIconSet());
            }, ConditionalViewModel.prototype.deleteCase = function(caseIdx) {
                _.size(this.cases) > 1 && caseIdx >= 0 && caseIdx < this.cases.length && (this.cases.splice(caseIdx, 1), 
                this.updateSelectedIconSet());
            }, ConditionalViewModel.prototype.onIconSetSelected = function(sourceField, iconSetId) {
                var _this = this;
                (0, arrayExtensions.ZH)(this.cases);
                var sqCases = this.createIconCases(sourceField, this.iconSets[iconSetId]);
                this.cases = sqCases.map(function(sqCase) {
                    return _this.caseViewModelBuilder.create(_this.getCurrentCaseViewModelOptions(sqCase));
                }), this.iconSetId = iconSetId;
            }, ConditionalViewModel.prototype.isValid = function() {
                return !_.isEmpty(this.cases) && _.every(this.cases, function(c) {
                    return c.isValid();
                });
            }, ConditionalViewModel.prototype.getDefinition = function(sourceExpr) {
                var _this = this;
                return VisualsCommon_debug.fF.assert(function() {
                    return _this.isValid();
                }, "Invalid conditional settings"), (0, sqExpr.u7)(_.chain(this.cases).clone().reverse().map(function(c) {
                    return c.getDefinition(sourceExpr);
                }).value());
            }, ConditionalViewModel.prototype.createIconCases = function(sourceExpr, iconSet) {
                var _this = this, iconCount = iconSet.iconIds.length, cases = [];
                switch (this.ruleTemplateKind) {
                  case "number":
                    !function() {
                        for (var create = _this.disableAutoRange ? conditionalFormattingUtil.MM : conditionalFormattingUtil.CZ, index = 0; index < iconCount; index++) cases.push(create(sourceExpr, Math.round(index / iconCount * 100), Math.round((index + 1) / iconCount * 100), index + 1 === iconCount, (0, 
                        sqExpr.fL)(iconSet.iconIds[index])));
                    }();
                    break;

                  case "text":
                    !function() {
                        for (var create = conditionalFormattingUtil._1, index = 0; index < iconCount; index++) cases.push(create(sourceExpr, (0, 
                        sqExpr.fL)(iconSet.iconIds[index])));
                    }();
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(this.ruleTemplateKind);
                }
                return cases;
            }, ConditionalViewModel.prototype.updateSelectedIconSet = function() {
                if ("Icon" === this.propertyType && (this.iconSetId && (this.iconSetMatching(this.iconSets[this.iconSetId]) || (this.iconSetId = void 0)), 
                !this.iconSetId)) for (var iconSetId in this.iconSets) if (this.iconSetMatching(this.iconSets[iconSetId])) return void (this.iconSetId = iconSetId);
            }, ConditionalViewModel.prototype.iconSetMatching = function(iconSet) {
                if (iconSet.iconIds.length !== this.cases.length) return !1;
                for (var i = 0; i < this.cases.length; i++) if (this.cases[i].value !== iconSet.iconIds[i]) return !1;
                return !0;
            }, ConditionalViewModel;
        }(), dataBarsUtil = __webpack_require__(26902), constants = __webpack_require__(87632), DataBarsViewModel = function() {
            function DataBarsViewModel(localizationService, disableAutoRange, valueType, dataBars) {
                var _this = this;
                this.localizationService = localizationService, this.disableAutoRange = disableAutoRange, 
                this.valueType = valueType, this.onOptionChanged = function(option) {
                    var id = option.id;
                    switch (id) {
                      case 0:
                      case 3:
                        break;

                      case 1:
                        _this.settings.minValue = void 0;
                        break;

                      case 2:
                        _this.settings.maxValue = void 0;
                        break;

                      default:
                        VisualsCommon_debug.fF.assertNever(id);
                    }
                }, this.tooltipConfig = {
                    tooltipDelay: 100,
                    tooltipLocalizeTitle: "Enter_A_Value",
                    isTooltipForModalDialog: !0,
                    tooltipArrowPosition: constants.xI.arrowTopLeft,
                    tooltipShowOnFocus: !0
                }, this.tooltipConfigDisabled = {
                    tooltipDisable: !0
                };
                var numberOption = {
                    id: 0,
                    value: this.localizationService.get("Custom"),
                    disableInput: !1
                };
                this.minimumSelectOptions = [ {
                    id: 1,
                    value: this.localizationService.get("ConditionalFormattingDialog_LowestValue"),
                    disableInput: !0
                }, numberOption ], this.maximumSelectOptions = [ {
                    id: 2,
                    value: this.localizationService.get("ConditionalFormattingDialog_HighestValue"),
                    disableInput: !0
                }, numberOption ], this.barDirectionSelectOptions = [ {
                    reverseDirection: !1,
                    displayName: this.localizationService.get("LeftToRight")
                }, {
                    reverseDirection: !0,
                    displayName: this.localizationService.get("RightToLeft")
                } ], this.updateDataBarsPositiveColor = function(color) {
                    _this.settings.positiveColor = _this.getFillFromColor(color);
                }, this.updateDataBarsNegativeColor = function(color) {
                    _this.settings.negativeColor = _this.getFillFromColor(color);
                }, this.updateDataBarsAxisColor = function(color) {
                    _this.settings.axisColor = _this.getFillFromColor(color);
                }, this.settings = dataBars ? (0, dataBarsUtil.L6)(dataBars) : this.getDefaultDataBarsSettings(), 
                this.minimumSelectedOption = this.minimumSelectOptions[void 0 !== this.settings.minValue || this.disableAutoRange ? 1 : 0], 
                this.maximumSelectedOption = this.maximumSelectOptions[void 0 !== this.settings.maxValue || this.disableAutoRange ? 1 : 0], 
                this.barDirectionSelectedOption = this.barDirectionSelectOptions[this.settings.reverseDirection ? 1 : 0];
            }
            return DataBarsViewModel.prototype.getDefaultDataBarsSettings = function() {
                return {
                    reverseDirection: !1,
                    hideText: !1
                };
            }, DataBarsViewModel.prototype.getFillFromColor = function(color) {
                return {
                    solid: {
                        color: null == color ? null : color.value
                    }
                };
            }, DataBarsViewModel.prototype.onDisableAutoRangeChanged = function(value) {
                this.disableAutoRange = value, this.disableAutoRange ? (this.minimumSelectedOption = this.minimumSelectOptions[1], 
                this.maximumSelectedOption = this.maximumSelectOptions[1]) : (this.minimumSelectedOption = this.minimumSelectOptions[0], 
                this.maximumSelectedOption = this.maximumSelectOptions[0]);
            }, DataBarsViewModel.prototype.getDefinition = function(_sourceExpr, propertyDescriptor, totalMatchingOption) {
                if (propertyDescriptor.type.dataBars) return (0, dataBarsUtil.ac)((0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, this.settings), {
                    totalMatchingOption
                }), this.valueType);
                VisualsCommon_debug.fF.assertFail("Unsupported property type, expected dataBars, received ".concat(JSON.stringify(propertyDescriptor.type)));
            }, DataBarsViewModel;
        }(), FieldValueViewModel = function() {
            function FieldValueViewModel() {}
            return FieldValueViewModel.prototype.getDefinition = function(sourceExpr, propertyType) {
                switch (propertyType) {
                  case "Color":
                    return {
                        solid: {
                            color: sourceExpr
                        }
                    };

                  case "Icon":
                    return {
                        kind: "Icon",
                        value: sourceExpr
                    };

                  case "Text":
                  case "WebUrl":
                  case "Numeric":
                  case "DateTime":
                    return sourceExpr;

                  case "DataBars":
                    return VisualsCommon_debug.fF.assertFail("Data bars not supported for field value"), 
                    null;

                  default:
                    VisualsCommon_debug.fF.assertNever(propertyType);
                }
                VisualsCommon_debug.fF.assertFail("Unsupported property type - expected color, icon, text, url, numeric, dateTime; received ".concat(propertyType));
            }, FieldValueViewModel;
        }(), gradientUtils = __webpack_require__(52083), fillRule = __webpack_require__(4829), GradientViewModel = function() {
            function GradientViewModel(localizationService, disableAutoRange, defaultGradientColors, colorExpr) {
                var _this = this;
                this.localizationService = localizationService, this.disableAutoRange = disableAutoRange, 
                this.defaultGradientColors = defaultGradientColors, this.onOptionChanged = function(option) {
                    var id = option.id;
                    switch (id) {
                      case 0:
                        break;

                      case 1:
                        _this.settings.minValue = void 0;
                        break;

                      case 3:
                        _this.settings.midValue = void 0;
                        break;

                      case 2:
                        _this.settings.maxValue = void 0;
                        break;

                      default:
                        VisualsCommon_debug.fF.assertNever(id);
                    }
                }, this.onDivergingChanged = function() {
                    _this.updateGradientBar();
                }, this.tooltipConfig = {
                    tooltipDelay: 100,
                    tooltipLocalizeTitle: "Enter_A_Value",
                    isTooltipForModalDialog: !0,
                    tooltipArrowPosition: constants.xI.arrowTopLeft,
                    tooltipShowOnFocus: !0
                }, this.tooltipConfigDisabled = {
                    tooltipDisable: !0
                };
                var numberOption = {
                    id: 0,
                    value: this.localizationService.get("Custom"),
                    disableInput: !1
                };
                switch (this.nullStrategyOptions = [ {
                    id: 0,
                    value: this.localizationService.get("ConditionalFormattingDialog_FormatNull_NoFormat"),
                    disableInput: !0,
                    stringValue: fillRule.TJ
                }, {
                    id: 1,
                    value: this.localizationService.get("ConditionalFormattingDialog_FormatNull_AsZero"),
                    disableInput: !0,
                    stringValue: fillRule.LX
                }, {
                    id: 2,
                    value: this.localizationService.get("ConditionalFormattingDialog_FormatNull_SpecificColor"),
                    disableInput: !1,
                    stringValue: fillRule.Sx
                } ], this.updateNullStrategy = function() {
                    _this.settings.nullStrategy = _this.nullStrategyOption.stringValue;
                }, this.updateGradientNullColor = function(color) {
                    _this.settings.nullColor = color && color.value;
                }, this.minimumSelectOptions = [ {
                    id: 1,
                    value: this.localizationService.get("ConditionalFormattingDialog_LowestValue"),
                    disableInput: !0
                }, numberOption ], this.updateGradientMinColor = function(color) {
                    _this.settings.minColor = color && color.value, _this.updateGradientBar();
                }, this.centerSelectOptions = [ {
                    id: 3,
                    value: this.localizationService.get("ConditionalFormattingDialog_MiddleValue"),
                    disableInput: !0
                }, numberOption ], this.updateGradientMidColor = function(color) {
                    _this.settings.midColor = color && color.value, _this.updateGradientBar();
                }, this.maximumSelectOptions = [ {
                    id: 2,
                    value: this.localizationService.get("ConditionalFormattingDialog_HighestValue"),
                    disableInput: !0
                }, numberOption ], this.updateGradientMaxColor = function(color) {
                    _this.settings.maxColor = color && color.value, _this.updateGradientBar();
                }, this.settings = colorExpr ? (0, gradientUtils.qG)(colorExpr.rule) : (0, gradientUtils.d9)(), 
                this.minimumSelectedOption = this.minimumSelectOptions[void 0 !== this.settings.minValue || this.disableAutoRange ? 1 : 0], 
                this.centerSelectedOption = this.centerSelectOptions[void 0 !== this.settings.midValue || this.disableAutoRange ? 1 : 0], 
                this.maximumSelectedOption = this.maximumSelectOptions[void 0 !== this.settings.maxValue || this.disableAutoRange ? 1 : 0], 
                this.settings.nullStrategy) {
                  case fillRule.TJ:
                    this.nullStrategyOption = this.nullStrategyOptions[0];
                    break;

                  case fillRule.Sx:
                    this.nullStrategyOption = this.nullStrategyOptions[2];
                    break;

                  default:
                    this.nullStrategyOption = this.nullStrategyOptions[1];
                }
                this.updateGradientBar();
            }
            return GradientViewModel.prototype.onDisableAutoRangeChanged = function(value) {
                this.disableAutoRange = value, this.disableAutoRange ? (this.minimumSelectedOption = this.minimumSelectOptions[1], 
                this.centerSelectedOption = this.centerSelectOptions[1], this.maximumSelectedOption = this.maximumSelectOptions[1]) : (this.minimumSelectedOption = this.minimumSelectOptions[0], 
                this.centerSelectedOption = this.centerSelectOptions[0], this.maximumSelectedOption = this.maximumSelectOptions[0]);
            }, GradientViewModel.prototype.toggleDiverging = function() {
                this.settings.diverging = !this.settings.diverging, this.onDivergingChanged();
            }, GradientViewModel.prototype.updateGradientBar = function() {
                this.gradientBarValue = (0, gradientUtils.Kj)(this.settings, this.defaultGradientColors);
            }, GradientViewModel.prototype.getDefinition = function(sourceExpr, propertyDescriptor) {
                var structuralType = propertyDescriptor.type;
                if (structuralType.fill && structuralType.fill.solid && structuralType.fill.solid.color) return {
                    solid: {
                        color: (0, conditionalFormattingUtil.xK)(sourceExpr, this.settings)
                    }
                };
                VisualsCommon_debug.fF.assertFail("Unsupported property type, expected color, received ".concat(JSON.stringify(propertyDescriptor.type)));
            }, GradientViewModel;
        }(), displayNameServiceUtils = __webpack_require__(7956), fieldExprChangeAggregateRewriter = __webpack_require__(95862), sqExprRemovePercentOfRoleTotalRewriter = __webpack_require__(88268), sqExprRemovePercentOfGrandTotalRewriter = __webpack_require__(9754), fieldExprRemoveAggregateRewriter = __webpack_require__(68509), sqExprUtils = __webpack_require__(45334), types_valueType = __webpack_require__(80777), SourceFieldSelector = function() {
            function SourceFieldSelector(services, dataSources, sourceField, visualCapabilities, expectedTypes) {
                var _this = this;
                this.services = services, this.dataSources = dataSources, this.sourceField = sourceField, 
                this.visualCapabilities = visualCapabilities, this.expectedTypes = expectedTypes, 
                this.isSourceDisabled = function(expr) {
                    if (!expr) return !1;
                    var metadata = expr.getMetadata(_this.schema);
                    if (!metadata) return !1;
                    switch (metadata.kind) {
                      case 1:
                        return !types_valueType.Ge.isCompatibleTo(metadata.type, _this.expectedTypes);

                      case 0:
                        return _.isEmpty(_this.getSupportedAggregates(expr));

                      default:
                        VisualsCommon_debug.fF.assertFail("Unexpected FieldKind value " + metadata.kind);
                    }
                }, this.onSourceSelected = function(_property, expr) {
                    _this.setSourceField(expr);
                };
            }
            return SourceFieldSelector.prototype.init = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSourcesArray, _a, existingSource, existingAggregate;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return dataSourcesArray = this.services.dataSourceSerializer.deserializeDataSources(this.dataSources), 
                            this.services.dataSourcesService.set(dataSourcesArray), _a = this, [ 4, this.services.conceptualSchemaProxy.get(dataSourcesArray) ];

                          case 1:
                            return _a.schema = _b.sent(), (existingSource = this.sourceField) && (existingSource = (0, 
                            sqExprRemovePercentOfGrandTotalRewriter.H)(existingSource), existingSource = (0, 
                            sqExprRemovePercentOfRoleTotalRewriter.E)(existingSource), (0, sqExprStaticMembers.iV)(existingSource) && (existingAggregate = existingSource.func, 
                            existingSource = this.sourceField = (0, fieldExprRemoveAggregateRewriter.n)(existingSource, this.schema))), 
                            this.setSourceField(existingSource, existingAggregate), [ 2 ];
                        }
                    });
                });
            }, SourceFieldSelector.prototype.onSourceExpectedTypeChange = function(expectedTypes) {
                this.expectedTypes = expectedTypes, this.setSourceField(this.sourceField);
            }, SourceFieldSelector.prototype.setSourceField = function(expr, initialAggregation) {
                if (this.sourceField = expr, this.updateSourceAggregateOptions(), _.isEmpty(this.aggregationOptions)) {
                    if (this.sourceField) {
                        var metadata = this.sourceField.getMetadata(this.schema);
                        metadata && 1 === metadata.kind && !(0, sqExprStaticMembers.jX)(this.sourceField) && types_valueType.Ge.isCompatibleTo(metadata.type, this.expectedTypes) ? (this.aggregationOption = null, 
                        this.setSourceAggregate()) : (this.sourceField = void 0, this.fieldDisplayName = void 0);
                    }
                } else {
                    if (this.aggregationOption = _.find(this.aggregationOptions, function(aggr) {
                        return aggr.aggregate === initialAggregation;
                    }), !this.aggregationOption) {
                        var defaultAggregate_1 = this.services.aggrOps.defaultAggregate(expr, this.schema, !0, this.expectedTypes);
                        this.aggregationOption = _.find(this.aggregationOptions, function(aggr) {
                            return aggr.aggregate === defaultAggregate_1;
                        }), this.aggregationOption || (this.aggregationOption = _.head(this.aggregationOptions));
                    }
                    this.setSourceAggregate();
                }
            }, SourceFieldSelector.prototype.updateSourceAggregateOptions = function() {
                for (var aggregateFunctions = this.getSupportedAggregates(this.sourceField), aggregateOptions = this.aggregationOptions = [], _i = 0, aggregateFunctions_1 = aggregateFunctions; _i < aggregateFunctions_1.length; _i++) {
                    var aggregateFunction = aggregateFunctions_1[_i], argMetadata = (0, fieldExprRemoveAggregateRewriter.n)(this.sourceField, this.schema).getMetadata(this.schema), aggregateKey = (0, 
                    displayNameServiceUtils.z)(aggregateFunction, argMetadata);
                    aggregateOptions.push({
                        aggregate: aggregateFunction,
                        displayName: this.services.localizationService.get("Aggregate_" + aggregateKey)
                    });
                }
            }, SourceFieldSelector.prototype.getSupportedAggregates = function(expr) {
                return !expr || sqExprUtils.m.discourageAggregation(expr, this.schema) ? [] : this.services.aggrOps.getSupportedAggregates(expr, this.schema, this.expectedTypes);
            }, SourceFieldSelector.prototype.setSourceAggregate = function() {
                this.sourceField && (this.aggregationOption && (this.sourceField = (0, fieldExprChangeAggregateRewriter.k)(this.sourceField, this.aggregationOption.aggregate)), 
                this.fieldDisplayName = this.services.displayNameService.getDisplayName(this.sourceField, this.schema, this.visualCapabilities, null, null, {
                    includeDefaultAggregate: !0,
                    includeHierarchyName: !0,
                    includeVariationSource: !0
                }));
            }, SourceFieldSelector;
        }(), ConditionalFormattingTotalMatchingOption = function() {
            function ConditionalFormattingTotalMatchingOption(id) {
                switch (this.id = id, this.id) {
                  case 1:
                    this.displayNameKey = "ConditionalFormattingDialog_TotalMatching_ValuesOnly", this.disableAutoRange = !1;
                    break;

                  case 0:
                    this.displayNameKey = "ConditionalFormattingDialog_TotalMatching_ValuesAndTotals", 
                    this.disableAutoRange = !0;
                    break;

                  case 2:
                    this.displayNameKey = "ConditionalFormattingDialog_TotalMatching_TotalsOnly", this.disableAutoRange = !0;
                }
            }
            return ConditionalFormattingTotalMatchingOption.prototype.changeSelector = function(oldSelector) {
                var selector = {
                    data: [ {
                        dataViewWildcard: {
                            matchingOption: this.id
                        }
                    } ]
                };
                return oldSelector.id && (selector.id = oldSelector.id), oldSelector.metadata && (selector.metadata = oldSelector.metadata), 
                selector;
            }, ConditionalFormattingTotalMatchingOption;
        }(), dataViewObjectDescriptorSerializer = __webpack_require__(77616), dataViewObjectSerializer = __webpack_require__(54766), semanticQuerySerializer = __webpack_require__(3468), structuralType = __webpack_require__(58702), core = __webpack_require__(50423), sq_aggregation_operations_service = __webpack_require__(28199), conceptual_schema_proxy_service = __webpack_require__(26898), data_sources_service = __webpack_require__(83008), exploration_display_name_service = __webpack_require__(13702), data_source_serializer_service = __webpack_require__(40823), feature_switch_service = __webpack_require__(9380), localization_service = __webpack_require__(65181), visual_plugin_service = __webpack_require__(29866), ConditionalFormattingDialogViewModelService = function() {
            function ConditionalFormattingDialogViewModelService(aggrOps, conceptualSchemaProxy, dataSourcesService, displayNameService, featureSwitchService, localizationService, visualPlugin, dataSourceSerializer) {
                this.aggrOps = aggrOps, this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSourcesService = dataSourcesService, 
                this.displayNameService = displayNameService, this.featureSwitchService = featureSwitchService, 
                this.localizationService = localizationService, this.visualPlugin = visualPlugin, 
                this.dataSourceSerializer = dataSourceSerializer, this.modeInitialized = !1;
            }
            return ConditionalFormattingDialogViewModelService.prototype.create = function(colorPalette, inDataSources, subtitle, visualType, iconSets, fieldExprContract, hasGrouping, propertyDescriptorContract, propertyDefinitionContract, propertySelector, allowOverrideTotalMatching) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var propertyDescriptor, targetFieldExpr, visualCapabilities, dataSourceArray, schema, propertyType, viewModel, isDataBars_1, existingOption_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return propertyDescriptor = (0, dataViewObjectDescriptorSerializer.mc)(propertyDescriptorContract), 
                            targetFieldExpr = fieldExprContract ? semanticQuerySerializer.ib.deserializeExpr(fieldExprContract) : null, 
                            [ 4, this.visualPlugin.ensureBuiltInPlugins() ];

                          case 1:
                            return _a.sent(), visualCapabilities = this.visualPlugin.capabilities(visualType), 
                            dataSourceArray = this.dataSourceSerializer.deserializeDataSources(inDataSources), 
                            [ 4, this.conceptualSchemaProxy.get(dataSourceArray) ];

                          case 2:
                            return schema = _a.sent(), propertyType = this.getPropertyType(propertyDescriptor.type), 
                            viewModel = {
                                visualCapabilities,
                                propertyDescriptor,
                                propertyType,
                                dialogTitle: propertyDescriptorContract.displayName,
                                subtitle,
                                targetFieldExpr,
                                disableAutoRange: !hasGrouping,
                                colorPickerType: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                },
                                modeSelectOptions: this.createModeSelectOptions(propertyType, this.localizationService, this.featureSwitchService),
                                schema
                            }, this.initializePropertyDefinition(viewModel, propertyDefinitionContract), allowOverrideTotalMatching && (isDataBars_1 = "DataBars" === propertyType, 
                            VisualsCommon_debug.fF.assert(function() {
                                return isDataBars_1 || !_.isEmpty(propertySelector.data) && 1 === propertySelector.data.length && null != propertySelector.data[0].dataViewWildcard;
                            }, "allowOverrideTotalMatching is only supported for DataViewWildcard Selectors or static-bound dataBars"), 
                            viewModel.totalMatchingOptions = [ new ConditionalFormattingTotalMatchingOption(1), new ConditionalFormattingTotalMatchingOption(0), new ConditionalFormattingTotalMatchingOption(2) ], 
                            existingOption_1 = isDataBars_1 ? (0, dataBarsUtil.L6)(viewModel.originalPropertyDefinition).totalMatchingOption : propertySelector.data[0].dataViewWildcard.matchingOption, 
                            viewModel.totalMatchingOption = _.find(viewModel.totalMatchingOptions, function(option) {
                                return option.id === existingOption_1;
                            }), this.updateDisableAutoRange(viewModel, hasGrouping)), this.initializeExpectedSourceType(viewModel), 
                            this.initializeSourceFieldSelector(viewModel, inDataSources), [ 4, viewModel.sourceSelector.init() ];

                          case 3:
                            return _a.sent(), this.initializeMode(viewModel, viewModel.originalPropertyDefinition, colorPalette, iconSets, this.localizationService, this.featureSwitchService), 
                            [ 2, viewModel ];
                        }
                    });
                });
            }, ConditionalFormattingDialogViewModelService.prototype.updateDisableAutoRange = function(viewModel, hasGrouping) {
                viewModel.disableAutoRange = !hasGrouping || viewModel.totalMatchingOption.disableAutoRange;
            }, ConditionalFormattingDialogViewModelService.prototype.initializeExpectedSourceType = function(viewModel) {
                switch (VisualsCommon_debug.fF.assertValue(viewModel.mode, "mode required to be assigned to the view model before source type(s) can be initialized"), 
                viewModel.mode) {
                  case "gradient":
                  case "dataBars":
                    viewModel.expectedSourceTypes = [ {
                        numeric: !0
                    } ];
                    break;

                  case "conditional":
                    viewModel.expectedSourceTypes = this.featureSwitchService.featureSwitches.cfStrings ? [ {
                        numeric: !0
                    }, {
                        text: !0
                    } ] : [ {
                        numeric: !0
                    } ];
                    break;

                  case "fieldValue":
                    switch (viewModel.propertyType) {
                      case "Numeric":
                        viewModel.expectedSourceTypes = [ {
                            numeric: !0
                        } ];
                        break;

                      case "DateTime":
                        viewModel.expectedSourceTypes = [ {
                            dateTime: !0
                        } ];
                        break;

                      default:
                        viewModel.expectedSourceTypes = [ {
                            text: !0
                        } ];
                    }
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(viewModel.mode);
                }
            }, ConditionalFormattingDialogViewModelService.prototype.initializeSourceFieldSelector = function(viewModel, inDataSources) {
                VisualsCommon_debug.fF.assertValue(viewModel.expectedSourceTypes, "expectedSourceTypes required to initialize source field selector"), 
                viewModel.sourceSelector = new SourceFieldSelector({
                    aggrOps: this.aggrOps,
                    conceptualSchemaProxy: this.conceptualSchemaProxy,
                    dataSourcesService: this.dataSourcesService,
                    displayNameService: this.displayNameService,
                    featureSwitchService: this.featureSwitchService,
                    localizationService: this.localizationService,
                    dataSourceSerializer: this.dataSourceSerializer
                }, inDataSources, viewModel.originalSourceField, viewModel.visualCapabilities, viewModel.expectedSourceTypes);
            }, ConditionalFormattingDialogViewModelService.prototype.getPropertyType = function(propTypeDescriptor) {
                if (propTypeDescriptor.fill && propTypeDescriptor.fill.solid && propTypeDescriptor.fill.solid.color) return "Color";
                if (propTypeDescriptor.icon) return "Icon";
                if (propTypeDescriptor.dataBars) return "DataBars";
                var valueType = types_valueType.Ge.fromDescriptor(propTypeDescriptor);
                return valueType.text ? valueType.misc && valueType.misc.webUrl ? "WebUrl" : "Text" : valueType.numeric ? "Numeric" : valueType.dateTime ? "DateTime" : void VisualsCommon_debug.fF.assertFail("Unexpected property type");
            }, ConditionalFormattingDialogViewModelService.prototype.createModeSelectOptions = function(propertyType, localizationService, featureSwitch) {
                var gradientOption = {
                    name: localizationService.get("ConditionalFormattingDialogModern_Mode_ColorScale"),
                    value: "gradient"
                }, conditionalOption = {
                    name: localizationService.get("ConditionalFormattingDialog_RuleBased_RulesTitle"),
                    value: "conditional"
                }, fieldOption = {
                    name: localizationService.get("ConditionalFormattingDialog_Mode_FieldValue"),
                    value: "fieldValue"
                }, dataBarsOption = {
                    name: localizationService.get("Visual_ConditionalFormatting_DataBars"),
                    value: "dataBars"
                };
                switch (propertyType) {
                  case "Color":
                    return [ gradientOption, conditionalOption, fieldOption ];

                  case "Icon":
                    return [ conditionalOption, fieldOption ];

                  case "Text":
                  case "WebUrl":
                  case "Numeric":
                  case "DateTime":
                    return [ fieldOption ];

                  case "DataBars":
                    return [ dataBarsOption ];

                  default:
                    VisualsCommon_debug.fF.assertNever(propertyType);
                }
                return [];
            }, ConditionalFormattingDialogViewModelService.prototype.getConditionalSourceExpr = function(propDefn) {
                VisualsCommon_debug.fF.assertValue(propDefn, "propDefn"), VisualsCommon_debug.fF.assertNonEmpty(propDefn.cases, "Empty conditional cases");
                var comparisonExpr = _.head(propDefn.cases).condition;
                return (0, sqExprStaticMembers.Ym)(comparisonExpr) && (comparisonExpr = comparisonExpr.arg), 
                (0, sqExprStaticMembers.IS)(comparisonExpr) || (0, sqExprStaticMembers.f8)(comparisonExpr) ? comparisonExpr.left : ((0, 
                sqExprStaticMembers.un)(comparisonExpr) && (comparisonExpr = comparisonExpr.left), 
                (0, sqExprStaticMembers.$Q)(comparisonExpr) ? comparisonExpr.left : void 0);
            }, ConditionalFormattingDialogViewModelService.prototype.initializePropertyDefinition = function(viewModel, propertyDefinitionContract) {
                var _a, existingExpr;
                if (propertyDefinitionContract) {
                    var existingPropertyDefinition = (0, dataViewObjectSerializer.PU)(propertyDefinitionContract, viewModel.propertyDescriptor, !0);
                    switch (viewModel.propertyType) {
                      case "Color":
                        var fillDefinition_1 = existingPropertyDefinition;
                        VisualsCommon_debug.fF.assert(function() {
                            return (0, structuralType.X2)(fillDefinition_1);
                        }, "Expected a FillDefinition"), existingExpr = fillDefinition_1 && fillDefinition_1.solid && fillDefinition_1.solid.color;
                        break;

                      case "Icon":
                        var iconDefinition_1 = existingPropertyDefinition;
                        VisualsCommon_debug.fF.assert(function() {
                            return (0, structuralType.r)(iconDefinition_1);
                        }, "Expected an IconDefinition"), existingExpr = iconDefinition_1.value, VisualsCommon_debug.fF.assert(function() {
                            return (0, sqExprStaticMembers.AW)(iconDefinition_1.layout);
                        }, "Icon layout should be constant"), VisualsCommon_debug.fF.assert(function() {
                            return (0, sqExprStaticMembers.AW)(iconDefinition_1.verticalAlignment);
                        }, "Icon Vertical alignment should be constant"), viewModel.iconLayout = sqExpr.jz.getTextValue(iconDefinition_1.layout), 
                        viewModel.iconVerticalAlignment = sqExpr.jz.getTextValue(iconDefinition_1.verticalAlignment);
                        break;

                      case "DataBars":
                        return viewModel.mode = "dataBars", viewModel.originalSourceField = viewModel.targetFieldExpr, 
                        void (viewModel.originalPropertyDefinition = existingPropertyDefinition);

                      case "Text":
                      case "WebUrl":
                      case "Numeric":
                      case "DateTime":
                        existingExpr = existingPropertyDefinition;
                        break;

                      default:
                        VisualsCommon_debug.fF.assertNever(viewModel.propertyType);
                    }
                }
                if (!existingExpr || (0, sqExprStaticMembers.VC)(existingExpr) || (0, sqExprStaticMembers.wt)(existingExpr) || ((0, 
                sqExprStaticMembers.Tu)(existingExpr) ? (viewModel.mode = "gradient", viewModel.originalPropertyDefinition = existingExpr, 
                viewModel.originalSourceField = existingExpr.input) : (0, sqExprStaticMembers.Gs)(existingExpr) ? (viewModel.mode = "conditional", 
                viewModel.originalPropertyDefinition = existingExpr, viewModel.originalSourceField = this.getConditionalSourceExpr(existingExpr)) : (0, 
                sqExprStaticMembers.kb)(existingExpr) || (0, sqExprStaticMembers.iV)(existingExpr) ? (viewModel.mode = "fieldValue", 
                viewModel.originalPropertyDefinition = existingExpr, viewModel.originalSourceField = existingExpr) : VisualsCommon_debug.fF.assertFail("Unsupported property value, received ".concat(existingExpr))), 
                !viewModel.originalPropertyDefinition) {
                    if ("text" === this.determineRuleTemplateKind(viewModel, !1, viewModel.targetFieldExpr) && "Color" === viewModel.propertyType) {
                        var conditionalModeSelectOption = viewModel.modeSelectOptions.find(function(option) {
                            return "conditional" === option.value;
                        });
                        viewModel.mode = null !== (_a = null == conditionalModeSelectOption ? void 0 : conditionalModeSelectOption.value) && void 0 !== _a ? _a : viewModel.modeSelectOptions[0].value;
                    } else viewModel.mode = viewModel.modeSelectOptions[0].value;
                    viewModel.originalPropertyDefinition = void 0, "Icon" === viewModel.propertyType && (viewModel.iconLayout = viewModel.iconLayout || conditionalFormattingUtil.IA, 
                    viewModel.iconVerticalAlignment = viewModel.iconVerticalAlignment || conditionalFormattingUtil.QZ);
                }
                viewModel.originalSourceField && !(0, sqExprStaticMembers.NH)(viewModel.originalSourceField) || (viewModel.originalSourceField = viewModel.targetFieldExpr);
            }, ConditionalFormattingDialogViewModelService.prototype.initializeMode = function(viewModel, propertyDefinition, colorPalette, iconSets, localizationService, featureSwitchService) {
                VisualsCommon_debug.fF.assertAnyValue(propertyDefinition, "If propertyDefinition is defined, the viewModel will be initialized with it, if not, it will be initialized with default settings"), 
                this.initializeExpectedSourceType(viewModel);
                var fakeSourceExpr = viewModel.targetFieldExpr, dataColorPalette = colorPalette.dataColors;
                switch (viewModel.mode) {
                  case "gradient":
                    return propertyDefinition || (propertyDefinition = (0, conditionalFormattingUtil.vX)(fakeSourceExpr).solid.color), 
                    viewModel.gradient = new GradientViewModel(localizationService, viewModel.disableAutoRange, dataColorPalette.getGradientColors(), propertyDefinition), 
                    void (this.modeInitialized = !0);

                  case "conditional":
                    var defaultCaseYield_1, ruleTemplateKind_1 = "number", useAggregationsToDetermineRuleTemplateKind = !this.modeInitialized;
                    switch (viewModel.propertyType) {
                      case "Color":
                        defaultCaseYield_1 = dataColorPalette.getGradientColors().minColor.value, ruleTemplateKind_1 = this.determineRuleTemplateKind(viewModel, useAggregationsToDetermineRuleTemplateKind), 
                        propertyDefinition = this.determinePropertyDefinition(ruleTemplateKind_1, propertyDefinition, function() {
                            return (0, conditionalFormattingUtil.yY)(fakeSourceExpr, defaultCaseYield_1, ruleTemplateKind_1).solid.color;
                        });
                        break;

                      case "Icon":
                        defaultCaseYield_1 = conditionalFormattingUtil.zB, ruleTemplateKind_1 = this.determineRuleTemplateKind(viewModel, useAggregationsToDetermineRuleTemplateKind), 
                        propertyDefinition = this.determinePropertyDefinition(ruleTemplateKind_1, propertyDefinition, function() {
                            return (0, conditionalFormattingUtil.XB)(fakeSourceExpr, ruleTemplateKind_1).value;
                        });
                        break;

                      default:
                        VisualsCommon_debug.fF.assertFail("Conditional mode supports only Color and Icon");
                    }
                    return viewModel.conditional = new ConditionalViewModel(viewModel.disableAutoRange, viewModel.propertyType, defaultCaseYield_1, propertyDefinition, iconSets, localizationService, ruleTemplateKind_1, featureSwitchService), 
                    void (this.modeInitialized = !0);

                  case "dataBars":
                    var valueType = viewModel.originalSourceField.getMetadata(viewModel.schema).type;
                    return viewModel.dataBars = new DataBarsViewModel(localizationService, viewModel.disableAutoRange, valueType, propertyDefinition), 
                    void (this.modeInitialized = !0);

                  case "fieldValue":
                    viewModel.fieldValue = new FieldValueViewModel, this.modeInitialized = !0;
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(viewModel.mode);
                }
            }, ConditionalFormattingDialogViewModelService.prototype.determinePropertyDefinition = function(ruleTemplateKind, existingPropertyDefinition, createDefaultDefinition) {
                if (null == existingPropertyDefinition) return createDefaultDefinition();
                var casesContainTextRules = _.every(existingPropertyDefinition.cases, function(conditionalCase) {
                    var argument = conditionalCase.condition, annotations = ((0, sqExprStaticMembers.Ym)(argument) ? argument.arg : argument).getAnnotations();
                    return !_.isEmpty(annotations) && null != annotations[sqExprTypes.Q];
                });
                return "text" === ruleTemplateKind && !casesContainTextRules || "number" === ruleTemplateKind && casesContainTextRules ? (VisualsCommon_debug.fF.warn("The rule template kind does not match the existing property definition. Creating a new default property definition."), 
                createDefaultDefinition()) : existingPropertyDefinition;
            }, ConditionalFormattingDialogViewModelService.prototype.retrieveSourceFieldFromViewModel = function(viewModel) {
                var _a;
                return null === (_a = viewModel.sourceSelector) || void 0 === _a ? void 0 : _a.sourceField;
            }, ConditionalFormattingDialogViewModelService.prototype.determineRuleTemplateKind = function(viewModel, useAggregations, sourceField) {
                var _a;
                if (void 0 === useAggregations && (useAggregations = !0), void 0 === sourceField && (sourceField = null), 
                !this.featureSwitchService.featureSwitches.cfStrings) return "number";
                if (null == (sourceField = null != sourceField ? sourceField : this.retrieveSourceFieldFromViewModel(viewModel))) return "number";
                var metaData = this.aggrOps.getMetadataForUnderlyingType(sourceField, viewModel.schema);
                if (useAggregations) {
                    var aggregationOption = null === (_a = viewModel.sourceSelector) || void 0 === _a ? void 0 : _a.aggregationOption;
                    if (null != aggregationOption) {
                        var agg = null == aggregationOption ? void 0 : aggregationOption.aggregate;
                        return !(null == metaData ? void 0 : metaData.type.text) || 3 !== agg && 4 !== agg && null != agg ? "number" : "text";
                    }
                }
                return (null == metaData ? void 0 : metaData.type.text) ? "text" : "number";
            }, ConditionalFormattingDialogViewModelService.\u0275fac = function(t) {
                return new (t || ConditionalFormattingDialogViewModelService)(core["\u0275\u0275inject"](sq_aggregation_operations_service.C), core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](data_source_serializer_service._));
            }, ConditionalFormattingDialogViewModelService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ConditionalFormattingDialogViewModelService,
                factory: ConditionalFormattingDialogViewModelService.\u0275fac
            }), ConditionalFormattingDialogViewModelService;
        }(), events = __webpack_require__(85287), fesm2022_forms = __webpack_require__(17174), fill = __webpack_require__(59897), visualStyleSerializer = __webpack_require__(25740), fieldListPropertyExprGenerator = __webpack_require__(44529), fieldListViewModel = __webpack_require__(88315), rx_component = __webpack_require__(73221), Telemetry = __webpack_require__(21617), takeUntil = __webpack_require__(83317), filter = __webpack_require__(59973), map = __webpack_require__(14172), item_picker_service = __webpack_require__(4877), svg_provider_service = __webpack_require__(84144), template_dialog_payload_service = __webpack_require__(67489), screen_reader_service = __webpack_require__(83309), model_service = __webpack_require__(93215), grouping_design_state_service = __webpack_require__(23983), field_list_tree_service = __webpack_require__(75096), model_to_pbi_tree_caption_strategy = __webpack_require__(29524), model_to_pbi_tree_draggable_item_strategy = __webpack_require__(88023), model_to_pbi_tree_inline_item_strategy = __webpack_require__(72525), model_to_pbi_tree_enabled_item_strategy = __webpack_require__(86612), common = __webpack_require__(77476), template_dialog_component = __webpack_require__(96777), icon_set_picker_input_component = __webpack_require__(96295), keycodes = __webpack_require__(93247), PopupHandler = function() {
            function PopupHandler() {
                var _this = this;
                this.onClick = function(e) {
                    return _this.onButtonClick(e);
                }, this.onKeydown = function(e) {
                    return _this.onButtonKeydown(e);
                }, this.onDocumentMouseDown = function(e) {
                    _this.popup.contains(e.target) || _this.popupButton.contains(e.target) || _this.close();
                };
            }
            return PopupHandler.prototype.subscribe = function(popup, popupButton) {
                this.popup = popup, this.popupButton = popupButton, this.popup.style.position = "fixed", 
                this.close(), this.popupButton.addEventListener("click", this.onClick), this.popupButton.addEventListener("keydown", this.onKeydown), 
                document.addEventListener("mousedown", this.onDocumentMouseDown, !0);
            }, PopupHandler.prototype.unsubscribe = function() {
                this.popupButton.removeEventListener("click", this.onClick), this.popupButton.removeEventListener("keydown", this.onKeydown), 
                document.removeEventListener("mousedown", this.onDocumentMouseDown, !0), this.close(), 
                this.popup = void 0, this.popupButton = void 0;
            }, PopupHandler.prototype.onButtonClick = function(e) {
                this.togglePopup();
            }, PopupHandler.prototype.onButtonKeydown = function(e) {
                switch (e.keyCode) {
                  case keycodes.K5:
                    this.open();
                    break;

                  case keycodes.hY:
                    this.close();
                    break;

                  default:
                    return;
                }
                e.preventDefault(), e.stopPropagation();
            }, PopupHandler.prototype.togglePopup = function() {
                this.closed ? this.open() : this.close();
            }, PopupHandler.prototype.open = function() {
                this.popup.style.display = "block";
                var top, rectPopup = this.popup.getBoundingClientRect(), rectButton = this.popupButton.getBoundingClientRect();
                this.popup.style.left = rectButton.right - rectPopup.width + "px", top = rectButton.bottom + rectPopup.height > window.innerHeight ? Math.max(rectButton.top - rectPopup.height, 0) : rectButton.bottom, 
                this.popup.style.top = top + "px", this.closed = !1;
            }, PopupHandler.prototype.close = function() {
                this.popup.style.display = "none", this.closed = !0;
            }, PopupHandler;
        }(), JsCommon_events = __webpack_require__(91615), event_bridge_service = __webpack_require__(11494), pbi_svg_use_symbol_component = __webpack_require__(45916), localize_pipe = __webpack_require__(85102), _c0 = [ "button" ], _c1 = [ "popup" ], _c2 = [ "noIcon" ], _c3 = [ "icon" ];
        function IconPickerComponent_div_3_img_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "img", 14), 2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("src", ctx_r5.selectedIcon.imageUrl, core["\u0275\u0275sanitizeUrl"]);
            }
        }
        function IconPickerComponent_div_3_pbi_svg_use_symbol_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "pbi-svg-use-symbol", 15), 2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("symbolId", ctx_r6.selectedIcon.svgId);
            }
        }
        function IconPickerComponent_div_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 11), core["\u0275\u0275template"](1, IconPickerComponent_div_3_img_1_Template, 1, 1, "img", 12), 
            core["\u0275\u0275template"](2, IconPickerComponent_div_3_pbi_svg_use_symbol_2_Template, 1, 1, "pbi-svg-use-symbol", 13), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275attribute"]("aria-label", ctx_r1.getIconDescription(ctx_r1.selectedIcon)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !!ctx_r1.selectedIcon.url), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !!ctx_r1.selectedIcon.svgId);
            }
        }
        function IconPickerComponent_div_9_img_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "img", 14), 2 & rf) {
                var current_r7 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275property"]("src", current_r7.imageUrl, core["\u0275\u0275sanitizeUrl"]);
            }
        }
        function IconPickerComponent_div_9_pbi_svg_use_symbol_3_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "pbi-svg-use-symbol", 15), 2 & rf) {
                var current_r7 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275property"]("symbolId", current_r7.svgId);
            }
        }
        function IconPickerComponent_div_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r15 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 16, 17), core["\u0275\u0275listener"]("click", function() {
                    var current_r7 = core["\u0275\u0275restoreView"](_r15).$implicit, ctx_r14 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r14.onIconClick(current_r7));
                })("keydown", function($event) {
                    var current_r7 = core["\u0275\u0275restoreView"](_r15).$implicit, ctx_r16 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r16.onIconKeydown($event, current_r7));
                }), core["\u0275\u0275template"](2, IconPickerComponent_div_9_img_2_Template, 1, 1, "img", 12), 
                core["\u0275\u0275template"](3, IconPickerComponent_div_9_pbi_svg_use_symbol_3_Template, 1, 1, "pbi-svg-use-symbol", 13), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var current_r7 = ctx.$implicit, i_r8 = ctx.index, ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("title", ctx_r3.getIconDescription(current_r7)), core["\u0275\u0275attribute"]("key", i_r8)("tabindex", 0 == i_r8 ? 0 : -1)("aria-selected", ctx_r3.selectedIconId === current_r7.id)("aria-posinset", i_r8 + 1)("aria-setsize", current_r7.length)("data-unique-id", "icon-" + current_r7.id), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !!current_r7.url), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !!current_r7.svgId);
            }
        }
        var IconPickerComponent = function() {
            function IconPickerComponent(eventBridge, localizationService, itemPickerService) {
                this.eventBridge = eventBridge, this.localizationService = localizationService, 
                this.itemPickerService = itemPickerService, this.iconChanged = new core.EventEmitter, 
                this.closed = new core.EventEmitter, this.subscriptionManager = this.eventBridge.createChannelSubscriptionManager();
            }
            return IconPickerComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.noIconLabel = this.localizationService.get("IconPicker_NoIcon"), this.subscriptionManager.subscribe(JsCommon_events.kx, function() {
                    return _this.onVisualThemeChanged();
                }), this.updateIcons(), this.selectedIcon = this.icons.find(function(icon) {
                    return icon.id === _this.selectedIconId;
                });
            }, IconPickerComponent.prototype.ngAfterViewInit = function() {
                this.popupHandler = new PopupHandler, this.popupHandler.subscribe(this.popup.nativeElement, this.headerButton.nativeElement);
            }, IconPickerComponent.prototype.ngOnDestroy = function() {
                this.popupHandler.unsubscribe(), this.subscriptionManager.unsubscribeAll();
            }, IconPickerComponent.prototype.onIconClick = function(icon) {
                this.selectIcon(icon);
            }, IconPickerComponent.prototype.onIconKeydown = function(event, icon) {
                switch (event.keyCode) {
                  case keycodes.hY:
                    this.popupHandler.close();
                    break;

                  case keycodes.K5:
                    this.selectIcon(icon);
                    break;

                  case keycodes.Mf:
                    this.noIcon.nativeElement.focus();
                    break;

                  case keycodes.LH:
                  case keycodes.JH:
                  case keycodes.oh:
                  case keycodes.SV:
                    this.focusOnNextIcon(event.keyCode, this.icons.indexOf(icon));
                }
                event.preventDefault(), event.stopPropagation();
            }, IconPickerComponent.prototype.onNoPickClick = function() {
                this.selectIcon(void 0);
            }, IconPickerComponent.prototype.onNoPickKeyDown = function(event) {
                switch (event.keyCode) {
                  case keycodes.Mf:
                    var index_1;
                    index_1 = event.shiftKey ? this.icons.length - 1 : 0, this.iconElementRefs.map(function(e) {
                        return e.nativeElement;
                    }).find(function(e) {
                        return e.getAttribute("key") === index_1.toString();
                    }).focus();
                    break;

                  case keycodes.K5:
                    this.selectIcon(void 0);
                }
                event.preventDefault(), event.stopPropagation();
            }, IconPickerComponent.prototype.getIconDescription = function(icon) {
                if (icon.description) {
                    if ("string" == typeof icon.description) return icon.description;
                    if (icon.description.resourceKey) return this.localizationService.get(icon.description.resourceKey);
                }
            }, IconPickerComponent.prototype.onVisualThemeChanged = function() {
                this.updateIcons();
            }, IconPickerComponent.prototype.updateIcons = function() {
                var iconsDictionary = _.cloneDeep(this.itemPickerService.getIcons());
                for (var iconId in this.icons = [], iconsDictionary) {
                    var icon = iconsDictionary[iconId];
                    icon.id = iconId, this.icons.push(icon);
                }
            }, IconPickerComponent.prototype.selectIcon = function(icon) {
                this.selectedIcon = icon, this.selectedIconId = icon ? icon.id : void 0, this.popupHandler.close(), 
                this.iconChanged.emit(this.selectedIconId);
            }, IconPickerComponent.prototype.focusOnNextIcon = function(keyCode, iconIndex) {
                var nextIconIndex = this.getNextIconIndex(keyCode, iconIndex);
                this.focusOnIconByIndex(nextIconIndex);
            }, IconPickerComponent.prototype.focusOnIconByIndex = function(index) {
                this.getElementFromIndex(index).focus();
            }, IconPickerComponent.prototype.getElementFromIndex = function(index) {
                return this.iconElementRefs.map(function(e) {
                    return e.nativeElement;
                }).find(function(e) {
                    return e.getAttribute("key") === index.toString();
                });
            }, IconPickerComponent.prototype.getNextIconIndex = function(keyCode, iconIndex) {
                var nextColumnIndex, nextRowIndex, columnIndex = iconIndex % IconPickerComponent.columnCount, rowIndex = Math.floor(iconIndex / IconPickerComponent.columnCount);
                return keyCode === keycodes.LH || keyCode === keycodes.JH ? (nextColumnIndex = columnIndex, 
                nextRowIndex = this.getNextIndex(this.getColumnItemCount(columnIndex), rowIndex, keyCode)) : keyCode !== keycodes.oh && keyCode !== keycodes.SV || (nextColumnIndex = this.getNextIndex(this.getRowItemCount(rowIndex), columnIndex, keyCode), 
                nextRowIndex = rowIndex), this.getIndexFromPosition(nextColumnIndex, nextRowIndex);
            }, IconPickerComponent.prototype.getRowItemCount = function(rowIndex) {
                var itemCount = this.icons.length;
                return rowIndex < Math.floor(itemCount / IconPickerComponent.columnCount) ? IconPickerComponent.columnCount : itemCount % IconPickerComponent.columnCount;
            }, IconPickerComponent.prototype.getColumnItemCount = function(columnIndex) {
                var rowCount = this.icons.length / IconPickerComponent.columnCount, floorRowCount = Math.floor(rowCount);
                return columnIndex < (rowCount - floorRowCount) * IconPickerComponent.columnCount - 1 && floorRowCount++, 
                floorRowCount;
            }, IconPickerComponent.prototype.getNextIndex = function(listLength, index, direction) {
                return direction === keycodes.SV || direction === keycodes.JH ? index = ++index >= listLength ? 0 : index : direction !== keycodes.oh && direction !== keycodes.LH || (index = --index < 0 ? listLength - 1 : index), 
                index;
            }, IconPickerComponent.prototype.getIndexFromPosition = function(columnIndex, rowIndex) {
                return columnIndex + rowIndex * IconPickerComponent.columnCount;
            }, IconPickerComponent.columnCount = 10, IconPickerComponent.\u0275fac = function(t) {
                return new (t || IconPickerComponent)(core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](item_picker_service.a));
            }, IconPickerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: IconPickerComponent,
                selectors: [ [ "icon-picker" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](_c0, 7), core["\u0275\u0275viewQuery"](_c1, 7), 
                    core["\u0275\u0275viewQuery"](_c2, 7), core["\u0275\u0275viewQuery"](_c3, 5)), 2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.headerButton = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.popup = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.noIcon = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.iconElementRefs = _t);
                    }
                },
                inputs: {
                    selectedIconId: "selectedIconId",
                    labelId: "labelId"
                },
                outputs: {
                    iconChanged: "iconChanged",
                    closed: "closed"
                },
                decls: 13,
                vars: 7,
                consts: [ [ "role", "button", "tabindex", "0", 1, "popoutButton" ], [ "button", "" ], [ "class", "icon", 4, "ngIf" ], [ 1, "glyphicon", "pbi-glyph-flickup", "glyph-micro", "dropdown-icon" ], [ 1, "popup" ], [ "popup", "" ], [ "role", "listbox", 1, "icon-container" ], [ 1, "icon-container-scroll" ], [ "class", "icon", "role", "option", 3, "title", "click", "keydown", 4, "ngFor", "ngForOf" ], [ "tabindex", "0", 1, "noIcon", 3, "click", "keydown" ], [ "noIcon", "" ], [ 1, "icon" ], [ "role", "presentation", 3, "src", 4, "ngIf" ], [ "sheet", "conditionalFormattingDialogIcons", 3, "symbolId", 4, "ngIf" ], [ "role", "presentation", 3, "src" ], [ "sheet", "conditionalFormattingDialogIcons", 3, "symbolId" ], [ "role", "option", 1, "icon", 3, "title", "click", "keydown" ], [ "icon", "" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0, 1), core["\u0275\u0275pipe"](2, "localize"), 
                    core["\u0275\u0275template"](3, IconPickerComponent_div_3_Template, 3, 3, "div", 2), 
                    core["\u0275\u0275element"](4, "i", 3), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](5, "div", 4, 5)(7, "div", 6)(8, "div", 7), 
                    core["\u0275\u0275template"](9, IconPickerComponent_div_9_Template, 4, 9, "div", 8), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](10, "div", 9, 10), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.onNoPickClick();
                    })("keydown", function($event) {
                        return ctx.onNoPickKeyDown($event);
                    }), core["\u0275\u0275text"](12), core["\u0275\u0275elementEnd"]()()()), 2 & rf && (core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](2, 5, "Icon_Picker")), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", !!ctx.selectedIcon), 
                    core["\u0275\u0275advance"](6), core["\u0275\u0275property"]("ngForOf", ctx.icons), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("aria-selected", void 0 === ctx.selectedIconId), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](ctx.noIconLabel));
                },
                dependencies: [ common.NgForOf, common.NgIf, pbi_svg_use_symbol_component.R, localize_pipe.F ],
                styles: [ "[_nghost-%COMP%]{display:flex;white-space:nowrap;-webkit-user-select:none;-ms-user-select:none;user-select:none}.popoutButton[_ngcontent-%COMP%]{display:flex;width:44px;height:28px;margin-left:4px;background-color:var(--white-color, #FFF);border:1px solid var(--fluent-theme-neutral-dark-color, #201F1E);box-sizing:border-box}.popoutButton[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{position:relative}.dropdown-icon[_ngcontent-%COMP%]{margin-left:6px;margin-top:6px}.popup[_ngcontent-%COMP%]{position:fixed;color:var(--fluent-theme-neutral-primary-alt-color, #3B3A39);background-color:var(--white-color, #FFF);box-shadow:0 4.8px 14.4px rgba(0,0,0,.11),0 25.6px 57.6px rgba(0,0,0,.13);font-size:12px;padding:5px;z-index:1}.icon-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}.icon-container-scroll[_ngcontent-%COMP%]{overflow:auto;max-height:200px}.icon[_ngcontent-%COMP%]{margin-left:4px;margin-top:4px;width:16px;height:16px;float:left}.icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%;max-height:100%}.noIcon[_ngcontent-%COMP%]{text-align:center}" ],
                changeDetection: 0
            }), IconPickerComponent;
        }(), localize_directive = __webpack_require__(59968), localize_attr_directive = __webpack_require__(22844), localize_tooltip_directive = __webpack_require__(50057), gradient_bar_lazy_component = __webpack_require__(78633), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_field_list_menu_directive = __webpack_require__(58679), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529), pbi_checkbox_component = __webpack_require__(56011), pbi_field_list_component = __webpack_require__(65005), pbi_form_field_component = __webpack_require__(45074), pbi_tooltip_directive = __webpack_require__(36858), theme_color_input_component = __webpack_require__(57274);
        function ConditionalFormattingDialogComponent_form_1_pbi_dropdown_item_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r11 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r11), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"](" ", option_r11.name, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_fieldset_9_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r13 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r13), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](2, 2, option_r13.displayNameKey), " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_fieldset_9_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "fieldset", 27), core["\u0275\u0275element"](1, "legend", 28), 
            core["\u0275\u0275elementStart"](2, "pbi-dropdown", 29)(3, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](4), core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275template"](6, ConditionalFormattingDialogComponent_form_1_fieldset_9_pbi_dropdown_item_6_Template, 3, 4, "pbi-dropdown-item", 20), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](5, 3, ctx_r2.totalMatchingOption.value.displayNameKey), " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", ctx_r2.viewModel.totalMatchingOptions)("ngForTrackBy", ctx_r2.trackBy.id);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_pbi_dropdown_item_26_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r14 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r14), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", option_r14.displayName, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_fieldset_27_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r16 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r16), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r16.value, " ");
            }
        }
        var conditional_formatting_dialog_component_c0 = function(a0) {
            return {
                value: a0
            };
        }, conditional_formatting_dialog_component_c1 = function(a0) {
            return {
                visibility: a0
            };
        };
        function ConditionalFormattingDialogComponent_form_1_fieldset_27_Template(rf, ctx) {
            if (1 & rf) {
                var _r18 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "fieldset", 30), core["\u0275\u0275element"](1, "legend", 31), 
                core["\u0275\u0275elementStart"](2, "section", 32)(3, "pbi-dropdown", 33)(4, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](6, ConditionalFormattingDialogComponent_form_1_fieldset_27_pbi_dropdown_item_6_Template, 2, 2, "pbi-dropdown-item", 20), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](7, "theme-color-input", 34), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r18);
                    var ctx_r17 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r17.viewModel.gradient.updateGradientNullColor($event));
                }), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](3), core["\u0275\u0275attribute"]("aria-label", ctx_r5.defaultFormattingLabel), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](ctx_r5.nullStrategyOption.value.value), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r5.viewModel.gradient.nullStrategyOptions)("ngForTrackBy", ctx_r5.trackBy.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](9, conditional_formatting_dialog_component_c0, ctx_r5.viewModel.gradient.settings.nullColor))("defaultColor", core["\u0275\u0275pureFunction1"](11, conditional_formatting_dialog_component_c0, ctx_r5.colorPalette.dataColors.getGradientColors().nullColor.value))("isNoFillItemSupported", ctx_r5.isNoFillItemSupported)("buttonHeight", 32)("ngStyle", core["\u0275\u0275pureFunction1"](13, conditional_formatting_dialog_component_c1, ctx_r5.viewModel.gradient.nullStrategyOption.disableInput ? "hidden" : "visible"));
            }
        }
        function ConditionalFormattingDialogComponent_form_1_fieldset_28_pbi_dropdown_item_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r20 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r20), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", option_r20.displayName, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_fieldset_28_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "fieldset", 35), core["\u0275\u0275element"](1, "legend", 36), 
            core["\u0275\u0275elementStart"](2, "pbi-dropdown", 37)(3, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](5, ConditionalFormattingDialogComponent_form_1_fieldset_28_pbi_dropdown_item_5_Template, 2, 2, "pbi-dropdown-item", 20), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"](" ", ctx_r6.barDirectionSelectedOption.value.displayName, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r6.viewModel.dataBars.barDirectionSelectOptions)("ngForTrackBy", ctx_r6.trackBy.reverseDirection);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_div_29_pbi_dropdown_item_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r24 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r24), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r24.value, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_div_29_fieldset_14_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r26 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r26), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r26.value, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_div_29_fieldset_14_Template(rf, ctx) {
            if (1 & rf) {
                var _r28 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "fieldset"), core["\u0275\u0275element"](1, "legend", 52), 
                core["\u0275\u0275elementStart"](2, "section", 32)(3, "pbi-dropdown", 53)(4, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](6, ConditionalFormattingDialogComponent_form_1_div_29_fieldset_14_pbi_dropdown_item_6_Template, 2, 2, "pbi-dropdown-item", 20), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](7, "theme-color-input", 42), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r27 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r27.viewModel.gradient.updateGradientMidColor($event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](8, "pbi-form-field"), 
                core["\u0275\u0275element"](9, "input", 54), core["\u0275\u0275pipe"](10, "localize"), 
                core["\u0275\u0275pipe"](11, "localize"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r22 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate1"](" ", ctx_r22.centerSelectedOption.value.value, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r22.viewModel.gradient.centerSelectOptions)("ngForTrackBy", ctx_r22.trackBy.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](15, conditional_formatting_dialog_component_c0, ctx_r22.viewModel.gradient.settings.midColor))("defaultColor", core["\u0275\u0275pureFunction1"](17, conditional_formatting_dialog_component_c0, ctx_r22.colorPalette.dataColors.getGradientColors().midColor.value))("isNoFillItemSupported", ctx_r22.isNoFillItemSupported)("buttonHeight", 32), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](10, 11, "Enter_A_Value"))("pbiTooltip", null == ctx_r22.viewModel.gradient.settings.midValue ? core["\u0275\u0275pipeBind1"](11, 13, "Enter_A_Value") : void 0)("pbiTooltipShowDelay", ctx_r22.viewModel.gradient.tooltipConfig.tooltipDelay)("pbiTooltipHideDelay", ctx_r22.viewModel.gradient.tooltipConfig.tooltipDelay);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_div_29_pbi_dropdown_item_21_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r29 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r29), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r29.value, " ");
            }
        }
        var conditional_formatting_dialog_component_c2 = function() {
            return {
                name: "ConditionalFormattingDialogModern_Diverging",
                "aria-label": "ConditionalFormattingDialogModern_Diverging"
            };
        };
        function ConditionalFormattingDialogComponent_form_1_div_29_Template(rf, ctx) {
            if (1 & rf) {
                var _r31 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 38)(1, "section", 39)(2, "fieldset"), 
                core["\u0275\u0275element"](3, "legend", 40), core["\u0275\u0275elementStart"](4, "section", 32)(5, "pbi-dropdown", 41)(6, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](7), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](8, ConditionalFormattingDialogComponent_form_1_div_29_pbi_dropdown_item_8_Template, 2, 2, "pbi-dropdown-item", 20), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](9, "theme-color-input", 42), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r31);
                    var ctx_r30 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r30.viewModel.gradient.updateGradientMinColor($event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](10, "pbi-form-field"), 
                core["\u0275\u0275element"](11, "input", 43), core["\u0275\u0275pipe"](12, "localize"), 
                core["\u0275\u0275pipe"](13, "localize"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](14, ConditionalFormattingDialogComponent_form_1_div_29_fieldset_14_Template, 12, 19, "fieldset", 44), 
                core["\u0275\u0275elementStart"](15, "fieldset"), core["\u0275\u0275element"](16, "legend", 45), 
                core["\u0275\u0275elementStart"](17, "section", 32)(18, "pbi-dropdown", 46)(19, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](20), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](21, ConditionalFormattingDialogComponent_form_1_div_29_pbi_dropdown_item_21_Template, 2, 2, "pbi-dropdown-item", 20), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](22, "theme-color-input", 42), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r31);
                    var ctx_r32 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r32.viewModel.gradient.updateGradientMaxColor($event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](23, "pbi-form-field"), 
                core["\u0275\u0275element"](24, "input", 47), core["\u0275\u0275pipe"](25, "localize"), 
                core["\u0275\u0275pipe"](26, "localize"), core["\u0275\u0275elementEnd"]()()(), 
                core["\u0275\u0275elementStart"](27, "section", 48), core["\u0275\u0275element"](28, "pbi-checkbox", 49), 
                core["\u0275\u0275pipe"](29, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](30, "section", 50), 
                core["\u0275\u0275element"](31, "gradient-bar-lazy", 51), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r7 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](7), core["\u0275\u0275textInterpolate"](ctx_r7.minimumSelectedOption.value.value), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r7.viewModel.gradient.minimumSelectOptions)("ngForTrackBy", ctx_r7.trackBy.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](36, conditional_formatting_dialog_component_c0, ctx_r7.viewModel.gradient.settings.minColor))("defaultColor", core["\u0275\u0275pureFunction1"](38, conditional_formatting_dialog_component_c0, ctx_r7.colorPalette.dataColors.getGradientColors().minColor.value))("isNoFillItemSupported", ctx_r7.isNoFillItemSupported)("buttonHeight", 32), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](12, 26, "Enter_A_Value"))("pbiTooltip", null == ctx_r7.viewModel.gradient.settings.minValue ? core["\u0275\u0275pipeBind1"](13, 28, "Enter_A_Value") : void 0)("pbiTooltipShowDelay", ctx_r7.viewModel.gradient.tooltipConfig.tooltipDelay)("pbiTooltipHideDelay", ctx_r7.viewModel.gradient.tooltipConfig.tooltipDelay), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx_r7.diverging.value), 
                core["\u0275\u0275advance"](6), core["\u0275\u0275textInterpolate1"](" ", ctx_r7.maximumSelectedOption.value.value, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r7.viewModel.gradient.maximumSelectOptions)("ngForTrackBy", ctx_r7.trackBy.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](40, conditional_formatting_dialog_component_c0, ctx_r7.viewModel.gradient.settings.maxColor))("defaultColor", core["\u0275\u0275pureFunction1"](42, conditional_formatting_dialog_component_c0, ctx_r7.colorPalette.dataColors.getGradientColors().maxColor.value))("isNoFillItemSupported", ctx_r7.isNoFillItemSupported)("buttonHeight", 32), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](25, 30, "Enter_A_Value"))("pbiTooltip", null == ctx_r7.viewModel.gradient.settings.maxValue ? core["\u0275\u0275pipeBind1"](26, 32, "Enter_A_Value") : void 0)("pbiTooltipShowDelay", ctx_r7.viewModel.gradient.tooltipConfig.tooltipDelay)("pbiTooltipHideDelay", ctx_r7.viewModel.gradient.tooltipConfig.tooltipDelay), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("label", core["\u0275\u0275pipeBind1"](29, 34, "ConditionalFormattingDialogModern_Diverging"))("localizeAttr", core["\u0275\u0275pureFunction0"](44, conditional_formatting_dialog_component_c2)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("colors", ctx_r7.viewModel.gradient.gradientBarValue);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_div_30_pbi_dropdown_item_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r35 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r35), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r35.value, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_div_30_pbi_dropdown_item_19_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var element_r36 = ctx.$implicit;
                core["\u0275\u0275property"]("value", element_r36), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", element_r36.value, " ");
            }
        }
        var conditional_formatting_dialog_component_c3 = function() {
            return {
                name: "DataBarsDialog_HideText",
                "aria-label": "DataBarsDialog_HideText"
            };
        };
        function ConditionalFormattingDialogComponent_form_1_div_30_Template(rf, ctx) {
            if (1 & rf) {
                var _r38 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 38)(1, "section", 39)(2, "fieldset"), 
                core["\u0275\u0275element"](3, "legend", 40), core["\u0275\u0275elementStart"](4, "section", 32)(5, "pbi-dropdown", 41)(6, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](7), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](8, ConditionalFormattingDialogComponent_form_1_div_30_pbi_dropdown_item_8_Template, 2, 2, "pbi-dropdown-item", 20), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](9, "pbi-form-field"), 
                core["\u0275\u0275element"](10, "input", 55), core["\u0275\u0275pipe"](11, "localize"), 
                core["\u0275\u0275pipe"](12, "localize"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](13, "fieldset"), 
                core["\u0275\u0275element"](14, "legend", 45), core["\u0275\u0275elementStart"](15, "section", 32)(16, "pbi-dropdown", 46)(17, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](18), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](19, ConditionalFormattingDialogComponent_form_1_div_30_pbi_dropdown_item_19_Template, 2, 2, "pbi-dropdown-item", 20), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](20, "pbi-form-field"), 
                core["\u0275\u0275element"](21, "input", 56), core["\u0275\u0275pipe"](22, "localize"), 
                core["\u0275\u0275pipe"](23, "localize"), core["\u0275\u0275elementEnd"]()()(), 
                core["\u0275\u0275elementStart"](24, "section", 57)(25, "fieldset"), core["\u0275\u0275element"](26, "legend", 58), 
                core["\u0275\u0275elementStart"](27, "theme-color-input", 59), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r38);
                    var ctx_r37 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r37.viewModel.dataBars.updateDataBarsPositiveColor($event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](28, "fieldset"), 
                core["\u0275\u0275element"](29, "legend", 60), core["\u0275\u0275elementStart"](30, "theme-color-input", 61), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r38);
                    var ctx_r39 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r39.viewModel.dataBars.updateDataBarsNegativeColor($event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](31, "fieldset"), 
                core["\u0275\u0275element"](32, "legend", 62), core["\u0275\u0275elementStart"](33, "theme-color-input", 63), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r38);
                    var ctx_r40 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r40.viewModel.dataBars.updateDataBarsAxisColor($event));
                }), core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275elementStart"](34, "section", 48), 
                core["\u0275\u0275element"](35, "pbi-checkbox", 64), core["\u0275\u0275pipe"](36, "localize"), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r8 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](7), core["\u0275\u0275textInterpolate"](ctx_r8.minimumSelectedOption.value.value), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r8.viewModel.dataBars.minimumSelectOptions)("ngForTrackBy", ctx_r8.trackBy.id), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](11, 26, "Enter_A_Value"))("pbiTooltip", null == ctx_r8.viewModel.dataBars.settings.minValue ? core["\u0275\u0275pipeBind1"](12, 28, "Enter_A_Value") : void 0)("pbiTooltipShowDelay", ctx_r8.viewModel.dataBars.tooltipConfig.tooltipDelay)("pbiTooltipHideDelay", ctx_r8.viewModel.dataBars.tooltipConfig.tooltipDelay), 
                core["\u0275\u0275advance"](8), core["\u0275\u0275textInterpolate1"](" ", ctx_r8.maximumSelectedOption.value.value, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r8.viewModel.dataBars.maximumSelectOptions)("ngForTrackBy", ctx_r8.trackBy.id), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](22, 30, "Enter_A_Value"))("pbiTooltip", null == ctx_r8.viewModel.dataBars.settings.maxValue ? core["\u0275\u0275pipeBind1"](23, 32, "Enter_A_Value") : void 0)("pbiTooltipShowDelay", ctx_r8.viewModel.dataBars.tooltipConfig.tooltipDelay)("pbiTooltipHideDelay", ctx_r8.viewModel.dataBars.tooltipConfig.tooltipDelay), 
                core["\u0275\u0275advance"](6), core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](36, conditional_formatting_dialog_component_c0, null == ctx_r8.viewModel.dataBars.settings.positiveColor ? null : ctx_r8.viewModel.dataBars.settings.positiveColor.solid.color))("defaultColor", core["\u0275\u0275pureFunction1"](38, conditional_formatting_dialog_component_c0, ctx_r8.colorPalette.dataColors.getGradientColors().maxColor.value))("buttonHeight", 32), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](40, conditional_formatting_dialog_component_c0, null == ctx_r8.viewModel.dataBars.settings.negativeColor ? null : ctx_r8.viewModel.dataBars.settings.negativeColor.solid.color))("defaultColor", core["\u0275\u0275pureFunction1"](42, conditional_formatting_dialog_component_c0, ctx_r8.colorPalette.dataColors.getGradientColors().minColor.value))("buttonHeight", 32), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](44, conditional_formatting_dialog_component_c0, null == ctx_r8.viewModel.dataBars.settings.axisColor ? null : ctx_r8.viewModel.dataBars.settings.axisColor.solid.color))("defaultColor", core["\u0275\u0275pureFunction1"](46, conditional_formatting_dialog_component_c0, ctx_r8.colorPalette.foreground.value))("buttonHeight", 32)("isNoFillItemSupported", ctx_r8.isNoFillItemSupported), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("label", core["\u0275\u0275pipeBind1"](36, 34, "DataBarsDialog_HideText"))("localizeAttr", core["\u0275\u0275pureFunction0"](48, conditional_formatting_dialog_component_c3));
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_31_pbi_dropdown_item_7_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var iconLayoutOption_r44 = ctx.$implicit;
                core["\u0275\u0275property"]("value", iconLayoutOption_r44), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](2, 2, iconLayoutOption_r44.displayNameKey), " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_31_pbi_dropdown_item_14_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var iconVerticalAlignmentOption_r45 = ctx.$implicit;
                core["\u0275\u0275property"]("value", iconVerticalAlignmentOption_r45), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](2, 2, iconVerticalAlignmentOption_r45.displayNameKey), " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_31_fieldset_15_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "fieldset", 73), core["\u0275\u0275element"](1, "legend", 74)(2, "icon-set-picker-input", 75), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r43 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("iconSetId", ctx_r43.viewModel.conditional.iconSetId)("onIconSetSelected", ctx_r43.onIconSetSelected);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_31_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "section", 65)(1, "fieldset", 66), 
            core["\u0275\u0275element"](2, "legend", 67), core["\u0275\u0275elementStart"](3, "pbi-dropdown", 68)(4, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](5), core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275template"](7, ConditionalFormattingDialogComponent_form_1_section_31_pbi_dropdown_item_7_Template, 3, 4, "pbi-dropdown-item", 7), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](8, "fieldset", 69), 
            core["\u0275\u0275element"](9, "legend", 70), core["\u0275\u0275elementStart"](10, "pbi-dropdown", 71)(11, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](12), core["\u0275\u0275pipe"](13, "localize"), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275template"](14, ConditionalFormattingDialogComponent_form_1_section_31_pbi_dropdown_item_14_Template, 3, 4, "pbi-dropdown-item", 7), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](15, ConditionalFormattingDialogComponent_form_1_section_31_fieldset_15_Template, 3, 2, "fieldset", 72), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r9 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](6, 5, ctx_r9.iconLayout.value.displayNameKey)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", ctx_r9.iconLayoutOptions), 
                core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](13, 7, ctx_r9.iconVerticalAlignment.value.displayNameKey), " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", ctx_r9.iconVerticalAlignmentOptions), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r9.isConditional && ctx_r9.isPropertyTypeIcon);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var operator_r61 = ctx.$implicit;
                core["\u0275\u0275property"]("value", operator_r61), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", operator_r61.displayName, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_13_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r62 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r62), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](2, 2, option_r62.displayNameKey), " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_19_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var operator_r63 = ctx.$implicit;
                core["\u0275\u0275property"]("value", operator_r63), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", operator_r63.displayName, " ");
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_26_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r64 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r64), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](2, 2, option_r64.displayNameKey), " ");
            }
        }
        var _c4 = function(a0) {
            return {
                hiddenNoTransition: a0
            };
        }, _c5 = function() {
            return {
                placeholder: "Min"
            };
        }, _c6 = function() {
            return {
                placeholder: "Max"
            };
        };
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "section")(1, "section"), core["\u0275\u0275element"](2, "h2", 100), 
            core["\u0275\u0275elementStart"](3, "pbi-dropdown", 101)(4, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](6, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_6_Template, 2, 2, "pbi-dropdown-item", 20), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](7, "input", 102), 
            core["\u0275\u0275pipe"](8, "localize"), core["\u0275\u0275elementStart"](9, "pbi-dropdown", 103)(10, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](11), core["\u0275\u0275pipe"](12, "localize"), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275template"](13, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_13_Template, 3, 4, "pbi-dropdown-item", 20), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](14, "section", 104), 
            core["\u0275\u0275element"](15, "h2", 105), core["\u0275\u0275elementStart"](16, "pbi-dropdown", 106)(17, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](18), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](19, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_19_Template, 2, 2, "pbi-dropdown-item", 20), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](20, "input", 107), 
            core["\u0275\u0275pipe"](21, "localize"), core["\u0275\u0275elementStart"](22, "pbi-dropdown", 108)(23, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](24), core["\u0275\u0275pipe"](25, "localize"), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275template"](26, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_pbi_dropdown_item_26_Template, 3, 4, "pbi-dropdown-item", 20), 
            core["\u0275\u0275elementEnd"]()()()), 2 & rf) {
                var case_r52 = core["\u0275\u0275nextContext"]().ngIf, ctx_r53 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate1"]("", case_r52.lowerBound.operator.displayName, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", case_r52.operatorOptions.lowerBoundOptions)("ngForTrackBy", ctx_r53.trackBy.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](27, _c4, case_r52.lowerBound.operator.disableInput))("localizeAttr", core["\u0275\u0275pureFunction0"](29, _c5))("pbiTooltip", core["\u0275\u0275pipeBind1"](8, 19, "Min")), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](30, _c4, case_r52.lowerBound.operator.disableInput)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](12, 21, case_r52.lowerBound.valueKind.displayNameKey), " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", case_r52.argumentKindOptions)("ngForTrackBy", ctx_r53.trackBy.kind), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](32, _c4, case_r52.lowerBound.operator.disableOtherOperator)), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"]("", case_r52.upperBound.operator.displayName, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", case_r52.operatorOptions.upperBoundOptions)("ngForTrackBy", ctx_r53.trackBy.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](34, _c6))("pbiTooltip", core["\u0275\u0275pipeBind1"](21, 23, "Max")), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"]("", core["\u0275\u0275pipeBind1"](25, 25, case_r52.upperBound.valueKind.displayNameKey), " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", case_r52.argumentKindOptions)("ngForTrackBy", ctx_r53.trackBy.kind);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_2_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 26), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var operator_r67 = ctx.$implicit;
                core["\u0275\u0275property"]("value", operator_r67), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"]("", operator_r67.displayName, " ");
            }
        }
        var _c7 = function() {
            return {
                placeholder: "Text"
            };
        };
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "section")(1, "section"), core["\u0275\u0275element"](2, "h2", 100), 
            core["\u0275\u0275elementStart"](3, "pbi-dropdown", 101)(4, "pbi-dropdown-trigger"), 
            core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](6, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_2_pbi_dropdown_item_6_Template, 2, 2, "pbi-dropdown-item", 20), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](7, "input", 109), 
            core["\u0275\u0275pipe"](8, "localize"), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var case_r52 = core["\u0275\u0275nextContext"]().ngIf, ctx_r54 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate1"]("", case_r52.lowerBound.operator.displayName, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", case_r52.operatorOptions.lowerBoundOptions)("ngForTrackBy", ctx_r54.trackBy.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](8, _c4, case_r52.lowerBound.operator.disableInput))("localizeAttr", core["\u0275\u0275pureFunction0"](10, _c7))("pbiTooltip", core["\u0275\u0275pipeBind1"](8, 6, "ConditionalFormattingDialog_StringInput_TooltipText"));
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_theme_color_input_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r71 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "theme-color-input", 42), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r71);
                    var case_r52 = core["\u0275\u0275nextContext"]().ngIf;
                    return core["\u0275\u0275resetView"](case_r52.onColorChanged($event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var case_r52 = core["\u0275\u0275nextContext"]().ngIf, ctx_r55 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("color", core["\u0275\u0275pureFunction1"](4, conditional_formatting_dialog_component_c0, case_r52.value))("defaultColor", core["\u0275\u0275pureFunction1"](6, conditional_formatting_dialog_component_c0, case_r52.defaultValue || ctx_r55.defaultColor))("isNoFillItemSupported", ctx_r55.isNoFillItemSupported)("buttonHeight", 32);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_icon_picker_5_Template(rf, ctx) {
            if (1 & rf) {
                var _r75 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "icon-picker", 110), core["\u0275\u0275listener"]("iconChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r75);
                    var case_r52 = core["\u0275\u0275nextContext"]().ngIf;
                    return core["\u0275\u0275resetView"](case_r52.onIconChanged($event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var case_r52 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275property"]("selectedIconId", case_r52.value);
            }
        }
        var _c8 = function(a0) {
            return {
                disabled: a0
            };
        };
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r79 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0, 90), core["\u0275\u0275template"](1, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_1_Template, 27, 35, "section", 91), 
                core["\u0275\u0275template"](2, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_section_2_Template, 9, 11, "section", 91), 
                core["\u0275\u0275element"](3, "h2", 92), core["\u0275\u0275template"](4, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_theme_color_input_4_Template, 1, 8, "theme-color-input", 93), 
                core["\u0275\u0275template"](5, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_icon_picker_5_Template, 1, 1, "icon-picker", 94), 
                core["\u0275\u0275elementStart"](6, "section", 95), core["\u0275\u0275element"](7, "i", 96), 
                core["\u0275\u0275elementStart"](8, "i", 97), core["\u0275\u0275listener"]("keydown", function($event) {
                    core["\u0275\u0275restoreView"](_r79);
                    var i_r48 = core["\u0275\u0275nextContext"]().index, ctx_r77 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r77.handleKeyDownCase($event, i_r48, ctx_r77.handleMoveCaseUp));
                })("click", function($event) {
                    core["\u0275\u0275restoreView"](_r79);
                    var i_r48 = core["\u0275\u0275nextContext"]().index, ctx_r80 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r80.handleMoveCaseUp(i_r48, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](9, "i", 98), 
                core["\u0275\u0275listener"]("keydown", function($event) {
                    core["\u0275\u0275restoreView"](_r79);
                    var i_r48 = core["\u0275\u0275nextContext"]().index, ctx_r82 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r82.handleKeyDownCase($event, i_r48, ctx_r82.handleMoveCaseDown));
                })("click", function($event) {
                    core["\u0275\u0275restoreView"](_r79);
                    var i_r48 = core["\u0275\u0275nextContext"]().index, ctx_r84 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r84.handleMoveCaseDown(i_r48, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](10, "i", 99), 
                core["\u0275\u0275listener"]("keydown", function($event) {
                    core["\u0275\u0275restoreView"](_r79);
                    var i_r48 = core["\u0275\u0275nextContext"]().index, ctx_r86 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r86.handleKeyDownCase($event, i_r48, ctx_r86.handleDeleteCase));
                })("click", function($event) {
                    core["\u0275\u0275restoreView"](_r79);
                    var i_r48 = core["\u0275\u0275nextContext"]().index, ctx_r88 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r88.handleDeleteCase(i_r48, $event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var case_r52 = ctx.ngIf, ctx_r90 = core["\u0275\u0275nextContext"](), rule_r47 = ctx_r90.$implicit, isFirst_r49 = ctx_r90.first, isLast_r50 = ctx_r90.last, ctx_r51 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("formGroup", rule_r47)("ngSwitch", ctx_r51.viewModel.conditional.ruleTemplateKind), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", "number"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", "text"), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", "Color" === case_r52.propertyType), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", "Icon" === case_r52.propertyType), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](15, _c4, case_r52.isValid())), 
                core["\u0275\u0275attribute"]("tabindex", case_r52.isValid() ? -1 : 0)("aria-label", ctx_r51.caseHasAnErrorMessage), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](17, _c8, isFirst_r49)), 
                core["\u0275\u0275attribute"]("tabindex", isFirst_r49 ? -1 : 0), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](19, _c8, isLast_r50)), 
                core["\u0275\u0275attribute"]("tabindex", isLast_r50 ? -1 : 0), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](21, _c8, isFirst_r49 && isLast_r50)), 
                core["\u0275\u0275attribute"]("tabindex", isFirst_r49 && isLast_r50 ? -1 : 0);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_section_12_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "section", 88), core["\u0275\u0275template"](1, ConditionalFormattingDialogComponent_form_1_section_32_section_12_ng_container_1_Template, 11, 23, "ng-container", 89), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var i_r48 = ctx.index, ctx_r46 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r46.viewModel.conditional.cases[i_r48]);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_section_32_Template(rf, ctx) {
            if (1 & rf) {
                var _r92 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "section", 76)(1, "section", 77)(2, "div", 78)(3, "button", 79), 
                core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r92);
                    var ctx_r91 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r91.reverseCasesValue());
                }), core["\u0275\u0275element"](4, "i", 80)(5, "span", 81), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementStart"](6, "button", 79), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r92);
                    var ctx_r93 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r93.addCase());
                }), core["\u0275\u0275element"](7, "i", 82)(8, "span", 83), core["\u0275\u0275elementEnd"]()(), 
                core["\u0275\u0275element"](9, "legend", 84), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementStart"](10, "section", 85), core["\u0275\u0275elementContainerStart"](11, 86), 
                core["\u0275\u0275template"](12, ConditionalFormattingDialogComponent_form_1_section_32_section_12_Template, 2, 1, "section", 87), 
                core["\u0275\u0275elementContainerEnd"](), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r10 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](5), core["\u0275\u0275property"]("localize", ctx_r10.viewModel.conditional.reverseButtonLabelKey)("localizeTooltip", ctx_r10.viewModel.conditional.reverseButtonLabelKey), 
                core["\u0275\u0275advance"](7), core["\u0275\u0275property"]("ngForOf", ctx_r10.rulesFormArray.controls);
            }
        }
        function ConditionalFormattingDialogComponent_form_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r95 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "form", 1), core["\u0275\u0275element"](1, "label", 2), 
                core["\u0275\u0275elementStart"](2, "section", 3)(3, "fieldset", 4), core["\u0275\u0275element"](4, "legend", 5), 
                core["\u0275\u0275elementStart"](5, "pbi-dropdown", 6)(6, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](7), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](8, ConditionalFormattingDialogComponent_form_1_pbi_dropdown_item_8_Template, 2, 2, "pbi-dropdown-item", 7), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](9, ConditionalFormattingDialogComponent_form_1_fieldset_9_Template, 7, 5, "fieldset", 8), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](10, "section", 9)(11, "fieldset", 10), 
                core["\u0275\u0275element"](12, "legend", 11), core["\u0275\u0275elementStart"](13, "pbi-dropdown", 12, 13)(15, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](16), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](17, "div", 14)(18, "pbi-field-list", 15), 
                core["\u0275\u0275listener"]("onNodeClick", function($event) {
                    core["\u0275\u0275restoreView"](_r95);
                    var _r3 = core["\u0275\u0275reference"](14), ctx_r94 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r94.handleNodeSelect($event, _r3));
                })("onNodeCheck", function($event) {
                    core["\u0275\u0275restoreView"](_r95);
                    var _r3 = core["\u0275\u0275reference"](14), ctx_r96 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r96.handleNodeSelect($event, _r3));
                }), core["\u0275\u0275pipe"](19, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](20, "div", 16), 
                core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275elementStart"](21, "fieldset", 17), 
                core["\u0275\u0275element"](22, "legend", 18), core["\u0275\u0275elementStart"](23, "pbi-dropdown", 19)(24, "pbi-dropdown-trigger"), 
                core["\u0275\u0275text"](25), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](26, ConditionalFormattingDialogComponent_form_1_pbi_dropdown_item_26_Template, 2, 2, "pbi-dropdown-item", 20), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](27, ConditionalFormattingDialogComponent_form_1_fieldset_27_Template, 8, 15, "fieldset", 21), 
                core["\u0275\u0275template"](28, ConditionalFormattingDialogComponent_form_1_fieldset_28_Template, 6, 3, "fieldset", 22), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](29, ConditionalFormattingDialogComponent_form_1_div_29_Template, 32, 45, "div", 23), 
                core["\u0275\u0275template"](30, ConditionalFormattingDialogComponent_form_1_div_30_Template, 37, 49, "div", 23), 
                core["\u0275\u0275template"](31, ConditionalFormattingDialogComponent_form_1_section_31_Template, 16, 9, "section", 24), 
                core["\u0275\u0275template"](32, ConditionalFormattingDialogComponent_form_1_section_32_Template, 13, 3, "section", 25), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("formGroup", ctx_r0.conditionalFormattingForm), core["\u0275\u0275advance"](7), 
                core["\u0275\u0275textInterpolate"](ctx_r0.formattingMode.value.name), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngForOf", ctx_r0.viewModel.modeSelectOptions), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngIf", ctx_r0.viewModel.totalMatchingOptions), core["\u0275\u0275advance"](4), 
                core["\u0275\u0275property"]("options", ctx_r0.dropdownOptions), core["\u0275\u0275advance"](3), 
                core["\u0275\u0275textInterpolate"](ctx_r0.viewModel.sourceSelector.fieldDisplayName), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("fieldListTree", core["\u0275\u0275pipeBind1"](19, 20, ctx_r0.fieldListTree$))("scrollSelectedItemIntoViewOnInit", !0)("hasHighlights", !1)("options", ctx_r0.fieldListTreeOptions), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](22, _c4, 0 == ctx_r0.viewModel.sourceSelector.aggregationOptions.length)), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"](" ", null == ctx_r0.sourceSummarization.value ? null : ctx_r0.sourceSummarization.value.displayName, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r0.viewModel.sourceSelector.aggregationOptions)("ngForTrackBy", ctx_r0.trackBy.aggregate), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.isGradient), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.isDataBars), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.isGradient), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.isDataBars), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.isPropertyTypeIcon), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.isConditional);
            }
        }
        var ConditionalFormattingDialogComponent = function(_super) {
            function ConditionalFormattingDialogComponent(itemPicker, featureSwitchService, localizationService, screenReaderService, svgProvider, modelService, fieldListTreeService, captionSetting, draggableSetting, inlineItemsSetting, groupingDesignStateService, changeDetectorRef, templateDialogPayload, conditionalFormattingDialogViewModelService, enabledSetting, telemetryService) {
                var _this = _super.call(this) || this;
                return _this.itemPicker = itemPicker, _this.featureSwitchService = featureSwitchService, 
                _this.localizationService = localizationService, _this.screenReaderService = screenReaderService, 
                _this.svgProvider = svgProvider, _this.modelService = modelService, _this.fieldListTreeService = fieldListTreeService, 
                _this.captionSetting = captionSetting, _this.draggableSetting = draggableSetting, 
                _this.inlineItemsSetting = inlineItemsSetting, _this.groupingDesignStateService = groupingDesignStateService, 
                _this.changeDetectorRef = changeDetectorRef, _this.templateDialogPayload = templateDialogPayload, 
                _this.conditionalFormattingDialogViewModelService = conditionalFormattingDialogViewModelService, 
                _this.enabledSetting = enabledSetting, _this.telemetryService = telemetryService, 
                _this.formSubscriptions = [], _this.conditionalFormSubscriptions = [], _this.fieldListTreeOptions = {
                    editLabel: void 0
                }, _this.pbiTreeNodeSettingOptions = {
                    captionSetting: _this.captionSetting,
                    draggableSetting: _this.draggableSetting,
                    enabledSetting: _this.enabledSetting,
                    inlineItemsSetting: _this.inlineItemsSetting,
                    showMenuSetting: {
                        canShowMenu: function() {
                            return !1;
                        }
                    }
                }, _this.defaultColor = "#fff", _this.fieldListTree$ = _this.fieldListTreeService.fieldListTree$, 
                _this.iconLayoutOptions = [ {
                    value: "Before",
                    displayNameKey: "Visual_IconLayout_Before"
                }, {
                    value: "IconOnly",
                    displayNameKey: "Visual_IconLayout_IconOnly"
                }, {
                    value: "After",
                    displayNameKey: "Visual_IconLayout_After"
                } ], _this.iconVerticalAlignmentOptions = [ {
                    value: "Top",
                    displayNameKey: "Top"
                }, {
                    value: "Middle",
                    displayNameKey: "Middle"
                }, {
                    value: "Bottom",
                    displayNameKey: "Bottom"
                } ], _this.trackBy = {
                    kind: function(_index, item) {
                        return item.kind;
                    },
                    id: function(_index, item) {
                        return item.id;
                    },
                    aggregate: function(_index, item) {
                        return item.aggregate;
                    },
                    reverseDirection: function(_index, item) {
                        return item.reverseDirection;
                    }
                }, _this.dropdownOptions = {
                    dropdownHeight: 312
                }, _this.onIconSetSelected = function(iconSetId) {
                    _this.viewModel.conditional.onIconSetSelected(_this.viewModel.sourceSelector.sourceField, iconSetId), 
                    _this.resetRulesFormArray();
                }, _this.defaultFormattingLabel = _this.localizationService.get("ConditionalFormattingDialog_FormatNull_Desc"), 
                _this.caseHasAnErrorMessage = _this.localizationService.get("ConditionalFormattingDialog_RuleBased_ConditionError"), 
                _this.fieldListTreeService.modelToPbiTreeConverterOptions = _this.pbiTreeNodeSettingOptions, 
                _this;
            }
            return (0, tslib_es6.__extends)(ConditionalFormattingDialogComponent, _super), ConditionalFormattingDialogComponent.prototype.ngOnInit = function() {
                var _a, _b, _c;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _d, _e, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_f) {
                        switch (_f.label) {
                          case 0:
                            return this.allowOverrideTotalMatching = (_e = this.templateDialogPayload.input).allowOverrideTotalMatching, 
                            this.hasGrouping = _e.hasGrouping, this.icons = _e.icons, this.iconSets = _e.iconSets, 
                            this.inDataSources = _e.inDataSources, this.propertyDefinition = _e.propertyDefinition, 
                            this.propertyDescriptor = _e.propertyDescriptor, this.propertySelector = _e.propertySelector, 
                            this.targetFieldDisplayName = _e.targetFieldDisplayName, this.targetFieldExpr = _e.targetFieldExpr, 
                            this.visualType = _e.visualType, this.colorPalette = (0, visualStyleSerializer.DP)(this.templateDialogPayload.input.colorPalette), 
                            this.itemPicker.setThemeItems(this.colorPalette.dataColors, this.icons, this.iconSets), 
                            this.propertyDescriptor.type.icon ? [ 4, this.svgProvider.loadSheet("conditionalFormattingDialogIcons") ] : [ 3, 2 ];

                          case 1:
                            _f.sent(), _f.label = 2;

                          case 2:
                            return this.propertyDescriptor.type.dataBars && (this.allowOverrideTotalMatching = !0), 
                            _d = this, [ 4, this.conditionalFormattingDialogViewModelService.create(this.colorPalette, this.inDataSources, this.targetFieldDisplayName, this.visualType, this.iconSets, this.targetFieldExpr, this.hasGrouping, this.propertyDescriptor, this.propertyDefinition, this.propertySelector, this.allowOverrideTotalMatching) ];

                          case 3:
                            return _d.viewModel = _f.sent(), this.enabledSetting.isEnabled = function(data) {
                                if (data instanceof fieldListViewModel.Xx) {
                                    var expr = (0, fieldListPropertyExprGenerator.Sd)(data, _this.groupingDesignStateService);
                                    return !_this.viewModel.sourceSelector.isSourceDisabled(expr);
                                }
                                return !0;
                            }, this.buildFormGroup(), (null === (_c = null === (_b = null === (_a = this.viewModel.colorPickerType) || void 0 === _a ? void 0 : _a.fill) || void 0 === _b ? void 0 : _b.solid) || void 0 === _c ? void 0 : _c.color) && (this.isNoFillItemSupported = (0, 
                            fill.AG)(this.viewModel.colorPickerType.fill.solid.color)), this.templateDialogPayload.onOkButtonClick = function() {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        return [ 2, this.onSubmit() ];
                                    });
                                });
                            }, [ 4, this.buildFieldListTree() ];

                          case 4:
                            return _f.sent(), this.changeDetectorRef.markForCheck(), [ 2 ];
                        }
                    });
                });
            }, ConditionalFormattingDialogComponent.prototype.ngOnDestroy = function() {
                this.removeConditionalSubscriptions(), _super.prototype.ngOnDestroy.call(this);
            }, ConditionalFormattingDialogComponent.prototype.buildFormGroup = function() {
                for (var _a, _b, _c, _d, _e, _f, _this = this, _i = 0, _g = this.formSubscriptions; _i < _g.length; _i++) this.lifecycleSubscriptions.remove(_g[_i]);
                this.formSubscriptions = [], this.removeConditionalSubscriptions(), this.formattingMode = new fesm2022_forms.p4(this.viewModel.modeSelectOptions.find(function(v) {
                    return v.value === _this.viewModel.mode;
                })), this.totalMatchingOption = new fesm2022_forms.p4(this.viewModel.totalMatchingOption), 
                this.sourceField = new fesm2022_forms.p4(this.viewModel.sourceSelector.sourceField, fesm2022_forms.kI.required), 
                this.sourceSummarization = new fesm2022_forms.p4(this.viewModel.sourceSelector.aggregationOption);
                var controls = {};
                if (this.isGradient && (this.buildGradientFormControls(), (_a = {}).nullStrategyOption = this.nullStrategyOption, 
                _a.minimumSelectedOption = this.minimumSelectedOption, _a.centerSelectedOption = this.centerSelectedOption, 
                _a.maximumSelectedOption = this.maximumSelectedOption, _a.gradientMinValue = this.gradientMinValue, 
                _a.gradientMaxValue = this.gradientMaxValue, _a.diverging = this.diverging, controls = _a, 
                this.diverging.value && (controls.gradientMidValue = this.gradientMidValue)), this.isDataBars && (this.buildDataBarsFormControls(), 
                (_b = {}).barDirectionSelectedOption = this.barDirectionSelectedOption, _b.minimumSelectedOption = this.minimumSelectedOption, 
                _b.maximumSelectedOption = this.maximumSelectedOption, _b.dataBarsMinValue = this.dataBarsMinValue, 
                _b.dataBarsMaxValue = this.dataBarsMaxValue, _b.hideText = this.hideText, controls = _b), 
                this.isConditional) {
                    this.rulesFormArray = new fesm2022_forms.vC([]);
                    for (var _h = 0, _j = this.viewModel.conditional.cases; _h < _j.length; _h++) this.buildConditionalFormGroup(_j[_h]);
                    (_c = {}).rules = this.rulesFormArray, controls = _c;
                }
                if (this.isPropertyTypeIcon) {
                    var selectedIconLayout = null !== (_e = this.iconLayoutOptions.find(function(option) {
                        return _this.viewModel.iconLayout === option.value;
                    })) && void 0 !== _e ? _e : this.iconLayoutOptions[0], selectedIconVerticalAlignment = null !== (_f = this.iconVerticalAlignmentOptions.find(function(option) {
                        return _this.viewModel.iconVerticalAlignment === option.value;
                    })) && void 0 !== _f ? _f : this.iconVerticalAlignmentOptions[0];
                    this.iconLayout = new fesm2022_forms.p4(selectedIconLayout), this.iconVerticalAlignment = new fesm2022_forms.p4(selectedIconVerticalAlignment);
                    var iconLayoutSubscription = this.iconLayout.valueChanges.subscribe(function(option) {
                        _this.viewModel.iconLayout = option.value;
                    }), iconVerticalAlignmentSubscription = this.iconVerticalAlignment.valueChanges.subscribe(function(option) {
                        _this.viewModel.iconVerticalAlignment = option.value;
                    });
                    this.formSubscriptions.push(iconLayoutSubscription, iconVerticalAlignmentSubscription), 
                    controls.iconLayout = this.iconLayout, controls.iconVerticalAlignment = this.iconVerticalAlignment;
                }
                this.conditionalFormattingForm = new fesm2022_forms.nJ((0, tslib_es6.__assign)(((_d = {}).formattingMode = this.formattingMode, 
                _d.totalMatchingOption = this.totalMatchingOption, _d.sourceField = this.sourceField, 
                _d.sourceSummarization = this.sourceSummarization, _d), controls)), this.templateDialogPayload.setOkButtonState(this.conditionalFormattingForm.invalid);
                var formattingModeSubscription = this.formattingMode.valueChanges.subscribe(function(value) {
                    _this.onModeChanged(value.value);
                }), totalMatchingOptionSubscription = this.totalMatchingOption.valueChanges.subscribe(function(value) {
                    _this.onTotalMatchingOptionChanged(value);
                }), onSummarizationOptionChanged = this.sourceSummarization.valueChanges.subscribe(function(value) {
                    _this.onSummarizationOptionChanged(value);
                }), conditionalFormattingFormChangesSubscription = this.conditionalFormattingForm.valueChanges.subscribe(function() {
                    _this.templateDialogPayload.setOkButtonState(_this.setOkButtonStatus());
                });
                this.formSubscriptions.push(formattingModeSubscription, totalMatchingOptionSubscription, onSummarizationOptionChanged, conditionalFormattingFormChangesSubscription);
                for (var _k = 0, _l = this.formSubscriptions; _k < _l.length; _k++) this.lifecycleSubscriptions.add(_l[_k]);
            }, ConditionalFormattingDialogComponent.prototype.removeConditionalSubscriptions = function() {
                for (var _i = 0, _a = this.conditionalFormSubscriptions; _i < _a.length; _i++) _a[_i].forEach(function(subscription) {
                    return subscription.unsubscribe;
                });
                this.conditionalFormSubscriptions = [];
            }, ConditionalFormattingDialogComponent.prototype.buildGradientFormControls = function() {
                var _this = this, gradient = this.viewModel.gradient;
                this.nullStrategyOption = new fesm2022_forms.p4(gradient.nullStrategyOption), this.minimumSelectedOption = new fesm2022_forms.p4({
                    value: gradient.minimumSelectedOption,
                    disabled: this.viewModel.disableAutoRange
                }), this.centerSelectedOption = new fesm2022_forms.p4({
                    value: gradient.centerSelectedOption,
                    disabled: this.viewModel.disableAutoRange
                }), this.maximumSelectedOption = new fesm2022_forms.p4({
                    value: gradient.maximumSelectedOption,
                    disabled: this.viewModel.disableAutoRange
                }), this.gradientMinValue = new fesm2022_forms.p4({
                    value: gradient.settings.minValue,
                    disabled: gradient.minimumSelectedOption.disableInput
                }, fesm2022_forms.kI.required), this.gradientMidValue = new fesm2022_forms.p4({
                    value: gradient.settings.midValue,
                    disabled: gradient.centerSelectedOption.disableInput
                }, fesm2022_forms.kI.required), this.gradientMaxValue = new fesm2022_forms.p4({
                    value: gradient.settings.maxValue,
                    disabled: gradient.maximumSelectedOption.disableInput
                }, fesm2022_forms.kI.required), this.diverging = new fesm2022_forms.p4(gradient.settings.diverging);
                var nullStrategyOptionSubscription = this.nullStrategyOption.valueChanges.subscribe(function(value) {
                    _this.onNullStrategyOptionChanged(value);
                }), minimumSelectedOptionSubscription = this.minimumSelectedOption.valueChanges.subscribe(function(value) {
                    _this.onMinimumSelectedOptionChanged(value);
                }), centerSelectedOptionSubscription = this.centerSelectedOption.valueChanges.subscribe(function(value) {
                    _this.onCenterSelectedOptionChanged(value);
                }), maximumSelectedOptionSubscription = this.maximumSelectedOption.valueChanges.subscribe(function(value) {
                    _this.onMaximumSelectedOptionChanged(value);
                }), gradientMaxValueSubscription = this.gradientMaxValue.valueChanges.subscribe(function(value) {
                    _this.viewModel.gradient.settings.maxValue = value;
                }), gradientMinValueSubscription = this.gradientMinValue.valueChanges.subscribe(function(value) {
                    _this.viewModel.gradient.settings.minValue = value;
                }), gradientMidValueSubscription = this.gradientMidValue.valueChanges.subscribe(function(value) {
                    _this.viewModel.gradient.settings.midValue = value;
                }), divergingSubscription = this.diverging.valueChanges.subscribe(function(value) {
                    _this.onDivergingChanged(value);
                });
                this.formSubscriptions.push(nullStrategyOptionSubscription, minimumSelectedOptionSubscription, centerSelectedOptionSubscription, maximumSelectedOptionSubscription, gradientMaxValueSubscription, gradientMinValueSubscription, gradientMidValueSubscription, divergingSubscription);
            }, ConditionalFormattingDialogComponent.prototype.buildDataBarsFormControls = function() {
                var _this = this, dataBars = this.viewModel.dataBars;
                this.minimumSelectedOption = new fesm2022_forms.p4({
                    value: dataBars.minimumSelectedOption,
                    disabled: this.viewModel.disableAutoRange
                }), this.maximumSelectedOption = new fesm2022_forms.p4({
                    value: dataBars.maximumSelectedOption,
                    disabled: this.viewModel.disableAutoRange
                }), this.barDirectionSelectedOption = new fesm2022_forms.p4(dataBars.barDirectionSelectedOption), 
                this.dataBarsMinValue = new fesm2022_forms.p4({
                    value: dataBars.settings.minValue,
                    disabled: dataBars.minimumSelectedOption.disableInput
                }, fesm2022_forms.kI.required), this.dataBarsMaxValue = new fesm2022_forms.p4({
                    value: dataBars.settings.maxValue,
                    disabled: dataBars.maximumSelectedOption.disableInput
                }, fesm2022_forms.kI.required), this.hideText = new fesm2022_forms.p4(dataBars.settings.hideText);
                var minimumSelectedOptionSubscription = this.minimumSelectedOption.valueChanges.subscribe(function(value) {
                    dataBars.minimumSelectedOption = value, dataBars.onOptionChanged(value), _this.dataBarsMinValue.setValue(dataBars.settings.minValue), 
                    dataBars.minimumSelectedOption.disableInput ? _this.dataBarsMinValue.disable() : _this.dataBarsMinValue.enable();
                }), maximumSelectedOptionSubscription = this.maximumSelectedOption.valueChanges.subscribe(function(value) {
                    dataBars.maximumSelectedOption = value, dataBars.onOptionChanged(value), _this.dataBarsMaxValue.setValue(dataBars.settings.maxValue), 
                    dataBars.maximumSelectedOption.disableInput ? _this.dataBarsMaxValue.disable() : _this.dataBarsMaxValue.enable();
                }), barDirectionOptionSubscription = this.barDirectionSelectedOption.valueChanges.subscribe(function(value) {
                    dataBars.barDirectionSelectedOption = value, dataBars.settings.reverseDirection = value.reverseDirection;
                }), dataBarsMinValueSubscription = this.dataBarsMinValue.valueChanges.subscribe(function(value) {
                    _this.viewModel.dataBars.settings.minValue = value;
                }), dataBarsMaxValueSubscription = this.dataBarsMaxValue.valueChanges.subscribe(function(value) {
                    _this.viewModel.dataBars.settings.maxValue = value;
                }), hideTextSubscription = this.hideText.valueChanges.subscribe(function(value) {
                    _this.viewModel.dataBars.settings.hideText = value;
                });
                this.sourceField.disable(), this.sourceSummarization.disable(), this.formSubscriptions.push(barDirectionOptionSubscription, minimumSelectedOptionSubscription, maximumSelectedOptionSubscription, dataBarsMinValueSubscription, dataBarsMaxValueSubscription, hideTextSubscription);
            }, ConditionalFormattingDialogComponent.prototype.buildConditionalFormGroup = function(caseViewModel) {
                var formGroup;
                switch (caseViewModel.ruleTemplateKind) {
                  case "number":
                    formGroup = this.buildNumericConditionalFormGroup(caseViewModel);
                    break;

                  case "text":
                    formGroup = this.buildStringConditionalFormGroup(caseViewModel);
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(caseViewModel.ruleTemplateKind);
                }
                formGroup.setValidators(this.caseValidator(caseViewModel)), this.rulesFormArray.push(formGroup);
            }, ConditionalFormattingDialogComponent.prototype.buildNumericConditionalFormGroup = function(caseViewModel) {
                var _a, _this = this, formGroup = new fesm2022_forms.nJ(((_a = {}).lowerBoundOperator = new fesm2022_forms.p4(caseViewModel.lowerBound.operator), 
                _a.lowerBoundArgument = new fesm2022_forms.p4(caseViewModel.lowerBound.value), _a.lowerBoundArgumentKind = new fesm2022_forms.p4({
                    value: caseViewModel.lowerBound.valueKind,
                    disabled: !caseViewModel.isPercentEnabled
                }), _a.upperBoundOperator = new fesm2022_forms.p4(caseViewModel.upperBound.operator), 
                _a.upperBoundArgument = new fesm2022_forms.p4(caseViewModel.upperBound.value), _a.upperBoundArgumentKind = new fesm2022_forms.p4({
                    value: caseViewModel.upperBound.valueKind,
                    disabled: !caseViewModel.isPercentEnabled
                }), _a)), controls = formGroup.controls, lowerBoundOperatorSubscription = controls.lowerBoundOperator.valueChanges.subscribe(function(value) {
                    _this.lowerBoundOperatorChanged(value, caseViewModel);
                }), lowerBoundArgumentSubscription = controls.lowerBoundArgument.valueChanges.subscribe(function(value) {
                    _this.lowerBoundArgumentChanged(value, caseViewModel);
                }), lowerBoundArgumentKindSubscription = controls.lowerBoundArgumentKind.valueChanges.subscribe(function(value) {
                    _this.lowerBoundArgumentKindChanged(value, caseViewModel);
                }), upperBoundOperatorSubscription = controls.upperBoundOperator.valueChanges.subscribe(function(value) {
                    _this.upperBoundOperatorChanged(value, caseViewModel);
                }), upperBoundArgumentSubscription = controls.upperBoundArgument.valueChanges.subscribe(function(value) {
                    _this.upperBoundArgumentChanged(value, caseViewModel);
                }), upperBoundArgumentKindSubscription = controls.upperBoundArgumentKind.valueChanges.subscribe(function(value) {
                    _this.upperBoundArgumentKindChanged(value, caseViewModel);
                });
                return this.conditionalFormSubscriptions.push([ lowerBoundOperatorSubscription, lowerBoundArgumentSubscription, lowerBoundArgumentKindSubscription, upperBoundOperatorSubscription, upperBoundArgumentSubscription, upperBoundArgumentKindSubscription ]), 
                formGroup;
            }, ConditionalFormattingDialogComponent.prototype.buildStringConditionalFormGroup = function(caseViewModel) {
                var _a, _this = this, formGroup = new fesm2022_forms.nJ(((_a = {}).lowerBoundOperator = new fesm2022_forms.p4(caseViewModel.lowerBound.operator), 
                _a.lowerBoundArgument = new fesm2022_forms.p4(caseViewModel.lowerBound.value), _a.lowerBoundArgumentKind = new fesm2022_forms.p4({
                    value: caseViewModel.lowerBound.valueKind,
                    disabled: !0
                }), _a)), controls = formGroup.controls, lowerBoundOperatorSubscription = controls.lowerBoundOperator.valueChanges.subscribe(function(value) {
                    _this.lowerBoundOperatorChanged(value, caseViewModel);
                }), lowerBoundArgumentSubscription = controls.lowerBoundArgument.valueChanges.subscribe(function(value) {
                    _this.lowerBoundArgumentChanged(value, caseViewModel);
                }), lowerBoundArgumentKindSubscription = controls.lowerBoundArgumentKind.valueChanges.subscribe(function(value) {
                    _this.lowerBoundArgumentKindChanged(value, caseViewModel);
                });
                return this.conditionalFormSubscriptions.push([ lowerBoundOperatorSubscription, lowerBoundArgumentSubscription, lowerBoundArgumentKindSubscription ]), 
                formGroup;
            }, Object.defineProperty(ConditionalFormattingDialogComponent.prototype, "exploreUIAuthoringModulePath", {
                get: function() {
                    return "@powerbi/ExploreUIAuthoring/lazy-modules/explore-ui-authoring/explore-ui-authoring.module#ExploreUIAuthoringModule";
                },
                enumerable: !1,
                configurable: !0
            }), ConditionalFormattingDialogComponent.prototype.caseValidator = function(caseViewModel) {
                return function(group) {
                    var lowerBoundArgument = group.controls.lowerBoundArgument, error = caseViewModel.isValid() ? null : {
                        caseInvalid: !0
                    };
                    lowerBoundArgument.setErrors(error), group.controls.upperBoundArgument && group.controls.upperBoundArgument.setErrors(error);
                };
            }, ConditionalFormattingDialogComponent.prototype.upperBoundOperatorChanged = function(value, caseViewModel) {
                caseViewModel.upperBound.operator = value, this.screenReaderAlertIfInvalid();
            }, ConditionalFormattingDialogComponent.prototype.upperBoundArgumentChanged = function(value, caseViewModel) {
                caseViewModel.upperBound.value = value, this.screenReaderAlertIfInvalid();
            }, ConditionalFormattingDialogComponent.prototype.upperBoundArgumentKindChanged = function(value, caseViewModel) {
                caseViewModel.upperBound.valueKind = value, this.screenReaderAlertIfInvalid();
            }, ConditionalFormattingDialogComponent.prototype.lowerBoundOperatorChanged = function(value, caseViewModel) {
                switch (caseViewModel.ruleTemplateKind) {
                  case "number":
                  case "text":
                    caseViewModel.lowerBound.operator = value;
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(caseViewModel.ruleTemplateKind);
                }
                this.screenReaderAlertIfInvalid();
            }, ConditionalFormattingDialogComponent.prototype.lowerBoundArgumentChanged = function(value, caseViewModel) {
                switch (caseViewModel.ruleTemplateKind) {
                  case "number":
                  case "text":
                    caseViewModel.lowerBound.value = value;
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(caseViewModel.ruleTemplateKind);
                }
                this.screenReaderAlertIfInvalid();
            }, ConditionalFormattingDialogComponent.prototype.lowerBoundArgumentKindChanged = function(value, caseViewModel) {
                caseViewModel.lowerBound.valueKind = value, this.screenReaderAlertIfInvalid();
            }, ConditionalFormattingDialogComponent.prototype.screenReaderAlertIfInvalid = function() {
                this.isConditional && (this.viewModel.conditional.isValid() ? this.screenReaderService.cancelDebounce("conditionalDialog") : this.screenReaderService.alertWithDebounce("conditionalDialog", this.caseHasAnErrorMessage));
            }, ConditionalFormattingDialogComponent.prototype.handleKeyDownCase = function(event, index, caseFunc) {
                var _this = this, wasHandled = !1;
                switch (event.keyCode) {
                  case 32:
                  case 13:
                    VisualsCommon_debug.fF.assert(function() {
                        return _this.isConditional;
                    }, "Case control is only possible in conditional"), caseFunc.call(this, index), 
                    wasHandled = !0;
                }
                wasHandled && event.stopPropagation();
            }, ConditionalFormattingDialogComponent.prototype.handleDeleteCase = function(index) {
                1 !== this.rulesFormArray.controls.length && (this.viewModel.conditional.deleteCase(index), 
                this.conditionalFormSubscriptions[index].forEach(function(subscription) {
                    return subscription.unsubscribe();
                }), this.conditionalFormSubscriptions = this.conditionalFormSubscriptions.filter(function(subscriptions, i) {
                    return index !== i;
                }), this.rulesFormArray.removeAt(index));
            }, ConditionalFormattingDialogComponent.prototype.handleMoveCaseDown = function(index) {
                if (index !== this.rulesFormArray.controls.length - 1) {
                    this.viewModel.conditional.moveCaseDown(index), (0, arrayExtensions.LF)(this.conditionalFormSubscriptions, index, index + 1);
                    var formGroup = this.rulesFormArray.at(index);
                    this.rulesFormArray.removeAt(index), this.rulesFormArray.insert(index + 1, formGroup);
                }
            }, ConditionalFormattingDialogComponent.prototype.handleMoveCaseUp = function(index) {
                if (0 !== index) {
                    this.viewModel.conditional.moveCaseUp(index), (0, arrayExtensions.LF)(this.conditionalFormSubscriptions, index, index - 1);
                    var formGroup = this.rulesFormArray.at(index);
                    this.rulesFormArray.removeAt(index), this.rulesFormArray.insert(index - 1, formGroup);
                }
            }, ConditionalFormattingDialogComponent.prototype.handleKeyDownDiverging = function(event) {
                var _this = this;
                VisualsCommon_debug.fF.assert(function() {
                    return _this.isGradient;
                }, "Divergent is only possible in gradient");
                var wasHandled = !1;
                switch (event.keyCode) {
                  case 32:
                  case 13:
                    VisualsCommon_debug.fF.assert(function() {
                        return !!_this.viewModel.gradient;
                    }, "Gradient cannot be null"), this.viewModel.gradient.settings.diverging = !this.viewModel.gradient.settings.diverging, 
                    this.viewModel.gradient.onDivergingChanged(), wasHandled = !0;
                }
                wasHandled && event.stopPropagation();
            }, Object.defineProperty(ConditionalFormattingDialogComponent.prototype, "isConditional", {
                get: function() {
                    var _a;
                    return "conditional" === (null === (_a = this.viewModel) || void 0 === _a ? void 0 : _a.mode);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ConditionalFormattingDialogComponent.prototype, "isFieldValue", {
                get: function() {
                    var _a;
                    return "fieldValue" === (null === (_a = this.viewModel) || void 0 === _a ? void 0 : _a.mode);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ConditionalFormattingDialogComponent.prototype, "isGradient", {
                get: function() {
                    var _a;
                    return "gradient" === (null === (_a = this.viewModel) || void 0 === _a ? void 0 : _a.mode);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ConditionalFormattingDialogComponent.prototype, "isDataBars", {
                get: function() {
                    var _a;
                    return "dataBars" === (null === (_a = this.viewModel) || void 0 === _a ? void 0 : _a.mode);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ConditionalFormattingDialogComponent.prototype, "isPropertyTypeIcon", {
                get: function() {
                    var _a;
                    return "Icon" === (null === (_a = this.viewModel) || void 0 === _a ? void 0 : _a.propertyType);
                },
                enumerable: !1,
                configurable: !0
            }), ConditionalFormattingDialogComponent.prototype.onModeChanged = function(mode) {
                this.viewModel.mode = mode, this.viewModel.gradient = void 0, this.viewModel.conditional = void 0, 
                this.viewModel.fieldValue = void 0, this.conditionalFormattingDialogViewModelService.initializeMode(this.viewModel, null, this.colorPalette, this.iconSets, this.localizationService, this.featureSwitchService), 
                this.viewModel.sourceSelector.onSourceExpectedTypeChange(this.viewModel.expectedSourceTypes), 
                this.fieldListTreeService.refresh(), this.buildFormGroup();
            }, ConditionalFormattingDialogComponent.prototype.onTotalMatchingOptionChanged = function(totalMatchingOption) {
                if (this.viewModel.totalMatchingOption = totalMatchingOption, this.viewModel.gradient) {
                    this.conditionalFormattingDialogViewModelService.updateDisableAutoRange(this.viewModel, this.hasGrouping), 
                    this.viewModel.gradient.onDisableAutoRangeChanged(disableAutoRange = this.viewModel.disableAutoRange);
                    var hasCustomValue = null != this.gradientMinValue.value || null != this.gradientMaxValue.value || null != this.gradientMidValue.value;
                    this.enforceGradientSelectionInputs(), disableAutoRange ? this.setSelectedOptionsGradient([ 0 ]) : hasCustomValue || this.setSelectedOptionsGradient([ 1, 2, 3 ]);
                }
                if (this.viewModel.dataBars && (this.conditionalFormattingDialogViewModelService.updateDisableAutoRange(this.viewModel, this.hasGrouping), 
                this.viewModel.dataBars.onDisableAutoRangeChanged(disableAutoRange = this.viewModel.disableAutoRange), 
                hasCustomValue = null != this.dataBarsMinValue.value || null != this.dataBarsMaxValue.value, 
                this.enforceDataBarsSelectionInputs(), disableAutoRange ? this.setSelectedOptionsDataBars([ 0 ]) : hasCustomValue || this.setSelectedOptionsDataBars([ 1, 2 ])), 
                this.viewModel.conditional && "number" === this.viewModel.conditional.ruleTemplateKind) {
                    var disableAutoRange;
                    this.conditionalFormattingDialogViewModelService.updateDisableAutoRange(this.viewModel, this.hasGrouping), 
                    this.viewModel.conditional.onDisableAutoRangeChanged(disableAutoRange = this.viewModel.disableAutoRange);
                    for (var i = 0; i < this.rulesFormArray.controls.length; i++) {
                        var controls = this.rulesFormArray.controls[i].controls;
                        this.viewModel.conditional.cases[i].isPercentEnabled ? (controls.lowerBoundArgumentKind.enable(), 
                        controls.upperBoundArgumentKind.enable()) : (controls.lowerBoundArgumentKind.disable(), 
                        controls.upperBoundArgumentKind.disable());
                    }
                }
                this.changeDetectorRef.markForCheck();
            }, ConditionalFormattingDialogComponent.prototype.enforceGradientSelectionInputs = function() {
                var gradient = this.viewModel.gradient;
                gradient.minimumSelectedOption.disableInput ? this.minimumSelectedOption.enable() : (this.minimumSelectedOption.disable(), 
                this.gradientMinValue.enable()), gradient.centerSelectedOption.disableInput ? this.centerSelectedOption.enable() : (this.centerSelectedOption.disable(), 
                this.gradientMidValue.enable()), gradient.maximumSelectedOption.disableInput ? this.maximumSelectedOption.enable() : (this.maximumSelectedOption.disable(), 
                this.gradientMaxValue.enable());
            }, ConditionalFormattingDialogComponent.prototype.enforceDataBarsSelectionInputs = function() {
                var dataBars = this.viewModel.dataBars;
                dataBars.minimumSelectedOption.disableInput ? this.minimumSelectedOption.enable() : (this.minimumSelectedOption.disable(), 
                this.dataBarsMinValue.enable()), dataBars.maximumSelectedOption.disableInput ? this.maximumSelectedOption.enable() : (this.maximumSelectedOption.disable(), 
                this.dataBarsMaxValue.enable());
            }, ConditionalFormattingDialogComponent.prototype.setSelectedOptionsGradient = function(selectionIds) {
                var gradient = this.viewModel.gradient, setOption = function(selectionOptions, control) {
                    if (!_.isEmpty(selectionOptions)) {
                        var selectedOption = _.first(selectionOptions.filter(function(op) {
                            return selectionIds.includes(op.id);
                        }));
                        null != selectedOption && control.setValue(selectedOption);
                    }
                };
                setOption(gradient.minimumSelectOptions, this.minimumSelectedOption), setOption(gradient.centerSelectOptions, this.centerSelectedOption), 
                setOption(gradient.maximumSelectOptions, this.maximumSelectedOption);
            }, ConditionalFormattingDialogComponent.prototype.setSelectedOptionsDataBars = function(selectionIds) {
                var dataBars = this.viewModel.dataBars, setOption = function(selectionOptions, control) {
                    if (!_.isEmpty(selectionOptions)) {
                        var selectedOption = _.first(selectionOptions.filter(function(op) {
                            return selectionIds.includes(op.id);
                        }));
                        null != selectedOption && control.setValue(selectedOption);
                    }
                };
                setOption(dataBars.minimumSelectOptions, this.minimumSelectedOption), setOption(dataBars.maximumSelectOptions, this.maximumSelectedOption);
            }, ConditionalFormattingDialogComponent.prototype.isModelValid = function() {
                return !(!this.viewModel || !this.viewModel.sourceSelector || !this.viewModel.sourceSelector.sourceField || "conditional" === this.viewModel.mode && !this.viewModel.conditional.isValid());
            }, ConditionalFormattingDialogComponent.prototype.handleNodeSelect = function(event, pbiDropdown) {
                var node = event.node;
                if (!node.disabled && [ 0, 2, 4 ].includes(node.data.fieldType)) {
                    var expr = node.data ? (0, fieldListPropertyExprGenerator.Sd)(node.data, this.groupingDesignStateService) : void 0;
                    this.setSourceField(void 0, expr), this.sourceSummarization.setValue(this.viewModel.sourceSelector.aggregationOption), 
                    this.sourceField.setValue(this.viewModel.sourceSelector.sourceField), pbiDropdown.closeDropdown();
                }
            }, ConditionalFormattingDialogComponent.prototype.onSummarizationOptionChanged = function(aggregationOption) {
                var _a;
                if (null != aggregationOption) {
                    var displayName = null === (_a = this.viewModel.sourceSelector.aggregationOptions.find(function(option) {
                        return _.isEqual(option.aggregate, aggregationOption.aggregate);
                    })) || void 0 === _a ? void 0 : _a.displayName;
                    aggregationOption.displayName = null != displayName ? displayName : aggregationOption.displayName, 
                    this.viewModel.sourceSelector.aggregationOption = aggregationOption;
                }
                if (this.featureSwitchService.featureSwitches.cfStrings && "conditional" === this.viewModel.mode) {
                    var ruleTemplateKind = this.conditionalFormattingDialogViewModelService.determineRuleTemplateKind(this.viewModel);
                    this.viewModel.conditional.reinitializeSQConditionalExpr(ruleTemplateKind), this.resetRulesFormArray(), 
                    this.buildFormGroup(), this.changeDetectorRef.markForCheck();
                }
                this.viewModel.sourceSelector.setSourceAggregate();
            }, ConditionalFormattingDialogComponent.prototype.onNullStrategyOptionChanged = function(nullStrategyOption) {
                this.viewModel.gradient.nullStrategyOption = nullStrategyOption, this.viewModel.gradient.updateNullStrategy();
            }, ConditionalFormattingDialogComponent.prototype.onMaximumSelectedOptionChanged = function(maximumSelectedOption) {
                this.viewModel.gradient.maximumSelectedOption = maximumSelectedOption, this.viewModel.gradient.onOptionChanged(maximumSelectedOption), 
                this.gradientMaxValue.setValue(this.viewModel.gradient.settings.maxValue), this.viewModel.gradient.maximumSelectedOption.disableInput ? this.gradientMaxValue.disable() : this.gradientMaxValue.enable();
            }, ConditionalFormattingDialogComponent.prototype.addCase = function() {
                this.viewModel.conditional.addCase();
                var lastCase = this.viewModel.conditional.cases.slice(-1)[0];
                this.buildConditionalFormGroup(lastCase);
            }, ConditionalFormattingDialogComponent.prototype.reverseCasesValue = function() {
                this.viewModel.conditional.reverseCasesValue(), this.resetRulesFormArray();
            }, ConditionalFormattingDialogComponent.prototype.resetRulesFormArray = function() {
                this.rulesFormArray = new fesm2022_forms.vC([]), this.removeConditionalSubscriptions();
                for (var _i = 0, _a = this.viewModel.conditional.cases; _i < _a.length; _i++) this.buildConditionalFormGroup(_a[_i]);
            }, ConditionalFormattingDialogComponent.prototype.onCenterSelectedOptionChanged = function(centerSelectedOption) {
                this.viewModel.gradient.centerSelectedOption = centerSelectedOption, this.viewModel.gradient.onOptionChanged(centerSelectedOption), 
                this.gradientMidValue.setValue(this.viewModel.gradient.settings.midValue), this.viewModel.gradient.centerSelectedOption.disableInput ? this.gradientMidValue.disable() : this.gradientMidValue.enable();
            }, ConditionalFormattingDialogComponent.prototype.onMinimumSelectedOptionChanged = function(minimumSelectedOption) {
                this.viewModel.gradient.minimumSelectedOption = minimumSelectedOption, this.viewModel.gradient.onOptionChanged(minimumSelectedOption), 
                this.gradientMinValue.setValue(this.viewModel.gradient.settings.minValue), this.viewModel.gradient.minimumSelectedOption.disableInput ? this.gradientMinValue.disable() : this.gradientMinValue.enable();
            }, ConditionalFormattingDialogComponent.prototype.onDivergingChanged = function(diverging) {
                diverging ? this.conditionalFormattingForm.addControl("gradientMidValue", this.gradientMidValue) : this.conditionalFormattingForm.removeControl("gradientMidValue"), 
                this.viewModel.gradient.settings.diverging = diverging, this.viewModel.gradient.onDivergingChanged();
            }, ConditionalFormattingDialogComponent.prototype.setOkButtonStatus = function() {
                var shouldDisableOkButton = this.conditionalFormattingForm.invalid;
                return this.featureSwitchService.featureSwitches.cfStrings && "conditional" === this.viewModel.mode && this.viewModel.sourceSelector.sourceField && (shouldDisableOkButton = !this.viewModel.conditional.isValid()), 
                shouldDisableOkButton;
            }, ConditionalFormattingDialogComponent.prototype.setSourceField = function(property, expr) {
                this.viewModel.sourceSelector.onSourceSelected(property, expr);
            }, ConditionalFormattingDialogComponent.prototype.buildFieldListTree = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.modelService.update([]) ];

                          case 1:
                            return _a.sent(), this.modelService.modelChange$.pipe((0, takeUntil.R)(this.onDestroy$), (0, 
                            filter.h)(function(fieldListModelChange) {
                                return !!(null == fieldListModelChange ? void 0 : fieldListModelChange.model);
                            }), (0, map.U)(function(fieldListModelChange) {
                                return fieldListModelChange.model;
                            })).subscribe(function(fieldListModel) {
                                _this.fieldListTreeService.setOrUpdateFieldListTreeModel(fieldListModel, []);
                            }), [ 2 ];
                        }
                    });
                });
            }, ConditionalFormattingDialogComponent.prototype.onSubmit = function() {
                var _a, _b, _c, resultPropDefn, _this = this;
                VisualsCommon_debug.fF.assert(function() {
                    return _this.isModelValid();
                }, "Invalid Conditional Formatting model");
                var sourceField = this.viewModel.sourceSelector.sourceField, propertyDescriptor = this.viewModel.propertyDescriptor, propertyType = this.viewModel.propertyType, totalMatchingOption = this.viewModel.totalMatchingOption;
                switch (this.viewModel.mode) {
                  case "gradient":
                    resultPropDefn = this.viewModel.gradient.getDefinition(sourceField, propertyDescriptor);
                    break;

                  case "conditional":
                    var conditionalExpr = this.viewModel.conditional.getDefinition(sourceField);
                    switch (propertyType) {
                      case "Color":
                        resultPropDefn = {
                            solid: {
                                color: conditionalExpr
                            }
                        };
                        break;

                      case "Icon":
                        resultPropDefn = {
                            kind: "Icon",
                            value: conditionalExpr
                        };
                        break;

                      case "Text":
                      case "WebUrl":
                      case "Numeric":
                      case "DateTime":
                      case "DataBars":
                        resultPropDefn = conditionalExpr;
                        break;

                      default:
                        VisualsCommon_debug.fF.assertNever(propertyType);
                    }
                    break;

                  case "dataBars":
                    resultPropDefn = this.viewModel.dataBars.getDefinition(sourceField, propertyDescriptor, totalMatchingOption.id);
                    break;

                  case "fieldValue":
                    resultPropDefn = this.viewModel.fieldValue.getDefinition(sourceField, propertyType);
                    break;

                  default:
                    VisualsCommon_debug.fF.assertNever(this.viewModel.mode);
                }
                return "Icon" === propertyType && (resultPropDefn.layout = (0, sqExpr.fL)(this.viewModel.iconLayout), 
                resultPropDefn.verticalAlignment = (0, sqExpr.fL)(this.viewModel.iconVerticalAlignment)), 
                this.featureSwitchService.featureSwitches.cfStrings && this.telemetryService.logEvent(events.vB, {
                    visualType: this.visualType,
                    propertyType: this.viewModel.propertyType,
                    conditionalFormattingMode: this.viewModel.mode,
                    conditionalRuleTemplateKind: null === (_a = this.viewModel.conditional) || void 0 === _a ? void 0 : _a.ruleTemplateKind,
                    numberOfRulesApplied: null === (_c = null === (_b = this.viewModel.conditional) || void 0 === _b ? void 0 : _b.cases) || void 0 === _c ? void 0 : _c.length
                }), {
                    selector: totalMatchingOption && "dataBars" !== this.viewModel.mode ? totalMatchingOption.changeSelector(this.propertySelector) : this.propertySelector,
                    propertyDefinition: (0, dataViewObjectSerializer.W7)(resultPropDefn, propertyDescriptor, !0, this.featureSwitchService.featureSwitches.serializeSpaceOptimization)
                };
            }, ConditionalFormattingDialogComponent.\u0275fac = function(t) {
                return new (t || ConditionalFormattingDialogComponent)(core["\u0275\u0275directiveInject"](item_picker_service.a), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](screen_reader_service.g), core["\u0275\u0275directiveInject"](svg_provider_service.g), core["\u0275\u0275directiveInject"](model_service.b), core["\u0275\u0275directiveInject"](field_list_tree_service.p), core["\u0275\u0275directiveInject"](model_to_pbi_tree_caption_strategy.B), core["\u0275\u0275directiveInject"](model_to_pbi_tree_draggable_item_strategy.F), core["\u0275\u0275directiveInject"](model_to_pbi_tree_inline_item_strategy.wt), core["\u0275\u0275directiveInject"](grouping_design_state_service.AA), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](ConditionalFormattingDialogViewModelService), core["\u0275\u0275directiveInject"](model_to_pbi_tree_enabled_item_strategy.y), core["\u0275\u0275directiveInject"](Telemetry.y0));
            }, ConditionalFormattingDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ConditionalFormattingDialogComponent,
                selectors: [ [ "conditional-formatting-dialog" ] ],
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 1,
                consts: [ [ 3, "formGroup", 4, "ngIf" ], [ 3, "formGroup" ], [ "id", "genericColor", "localize", "Generic_Color", 1, "hidden" ], [ 1, "flex", "spaceBelow" ], [ 1, "conditionalFormattingMode" ], [ "id", "formattingModeLabel", "localize", "ConditionalFormattingDialogModern_Mode_Label" ], [ "id", "formattingMode", "name", "formattingMode", "formControlName", "formattingMode", "aria-labelledby", "formattingModeLabel" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ "id", "totalMatching", 4, "ngIf" ], [ 1, "flex", "space-between" ], [ 1, "sourceField" ], [ "id", "sourceFieldLabel", "localize", "ConditionalFormattingDialogModern_SourceFieldHeader" ], [ "id", "sourceFieldSelect", "formControlName", "sourceField", "aria-labelledby", "sourceFieldLabel", "dropdown-type", "field-list", 3, "options" ], [ "dropdownRef", "" ], [ 1, "conditionalFormattingFieldListContainer" ], [ "focus-nav-mode", "Browser", 1, "fieldList", "themeableElement", 3, "fieldListTree", "scrollSelectedItemIntoViewOnInit", "hasHighlights", "options", "onNodeClick", "onNodeCheck" ], [ "tabindex", "0", 1, "container-stop-bottom" ], [ 1, "sourceSummarization", 3, "ngClass" ], [ "id", "sourceSummarizationLabel", "localize", "ConditionalFormattingDialog_SourceSummarizationHeader" ], [ "id", "sourceSummarization", "formControlName", "sourceSummarization", "aria-labelledby", "sourceSummarizationLabel" ], [ 3, "value", 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ "class", "nullColorStrategy", 4, "ngIf" ], [ "class", "barDirection", 4, "ngIf" ], [ "class", "spaceAbove", 4, "ngIf" ], [ "id", "iconSettingsSection", "class", "flex spaceAbove", 4, "ngIf" ], [ "class", "flex-column conditional spaceAbove", 4, "ngIf" ], [ 3, "value" ], [ "id", "totalMatching" ], [ "id", "totalMatchingOptionLabel", "localize", "ConditionalFormattingDialog_TotalMatching_Label" ], [ "id", "totalMatchingOption", "formControlName", "totalMatchingOption", "aria-labelledby", "totalMatchingOptionLabel" ], [ 1, "nullColorStrategy" ], [ "localize", "ConditionalFormattingDialogModern_FormatNull" ], [ 1, "colorSettings" ], [ "formControlName", "nullStrategyOption" ], [ "tabindex", "-1", "labelId", "genericColor", 1, "whiteTheme", 3, "color", "defaultColor", "isNoFillItemSupported", "buttonHeight", "ngStyle", "colorChanged" ], [ 1, "barDirection" ], [ "id", "barDirectionLabel", "localize", "DataBarsDialog_BarDirection" ], [ "id", "barDirectionSelectedOption", "formControlName", "barDirectionSelectedOption", "aria-labelledby", "barDirectionLabel" ], [ 1, "spaceAbove" ], [ 1, "sectionSettings" ], [ "id", "minimumSelectedOptionLabel", "localize", "ConditionalFormattingDialog_MinimumHeader", "localizeTooltip", "ConditionalFormattingDialog_MinimumHeader" ], [ "formControlName", "minimumSelectedOption", "aria-labelledby", "minimumSelectedOptionLabel" ], [ "tabindex", "-1", "labelId", "genericColor", 1, "whiteTheme", 3, "color", "defaultColor", "isNoFillItemSupported", "buttonHeight", "colorChanged" ], [ "type", "number", "pbiInput", "", "formControlName", "gradientMinValue", "pbiTooltipPosition", "below", 1, "pbi-text-input", 3, "placeholder", "pbiTooltip", "pbiTooltipShowDelay", "pbiTooltipHideDelay" ], [ 4, "ngIf" ], [ "id", "maximumSelectedOptionLabel", "localize", "ConditionalFormattingDialog_MaximumHeader", "localizeTooltip", "ConditionalFormattingDialog_MaximumHeader" ], [ "formControlName", "maximumSelectedOption", "aria-labelledby", "maximumSelectedOptionLabel" ], [ "type", "number", "pbiInput", "", "formControlName", "gradientMaxValue", "pbiTooltipPosition", "below", 1, "pbi-text-input", 3, "placeholder", "pbiTooltip", "pbiTooltipShowDelay", "pbiTooltipHideDelay" ], [ 1, "checkBoxSettings" ], [ "id", "diverging", "formControlName", "diverging", "localizeTooltip", "ConditionalFormattingDialogModern_Diverging", 3, "label", "localizeAttr" ], [ "data-testid", "gradient-value", 1, "gradientValue" ], [ 3, "colors" ], [ "id", "centerSelectedOptionLabel", "localize", "ConditionalFormattingDialog_CenterHeader", "localizeTooltip", "ConditionalFormattingDialog_CenterHeader" ], [ "formControlName", "centerSelectedOption", "aria-labelledby", "centerSelectedOptionLabel" ], [ "type", "number", "pbiInput", "", "formControlName", "gradientMidValue", "pbiTooltipPosition", "below", 1, "pbi-text-input", 3, "placeholder", "pbiTooltip", "pbiTooltipShowDelay", "pbiTooltipHideDelay" ], [ "type", "number", "pbiInput", "", "formControlName", "dataBarsMinValue", "pbiTooltipPosition", "below", 1, "pbi-text-input", 3, "placeholder", "pbiTooltip", "pbiTooltipShowDelay", "pbiTooltipHideDelay" ], [ "type", "number", "pbiInput", "", "formControlName", "dataBarsMaxValue", "pbiTooltipPosition", "below", 1, "pbi-text-input", 3, "placeholder", "pbiTooltip", "pbiTooltipShowDelay", "pbiTooltipHideDelay" ], [ 1, "sectionSettings", "colorList" ], [ "id", "positiveColorLabel", "localize", "DataBarsDialog_PositiveBar" ], [ "tabindex", "-1", "labelId", "positiveColorLabel", 1, "whiteTheme", 3, "color", "defaultColor", "buttonHeight", "colorChanged" ], [ "id", "negativeColorLabel", "localize", "DataBarsDialog_NegativeBar" ], [ "tabindex", "-1", "labelId", "negativeColorLabel", 1, "whiteTheme", 3, "color", "defaultColor", "buttonHeight", "colorChanged" ], [ "id", "axisColorLabel", "localize", "DataBarsDialog_BarAxis" ], [ "tabindex", "-1", "labelId", "axisColorLabel", 1, "whiteTheme", 3, "color", "defaultColor", "buttonHeight", "isNoFillItemSupported", "colorChanged" ], [ "id", "diverging", "formControlName", "hideText", "localizeTooltip", "DataBarsDialog_HideText", 3, "label", "localizeAttr" ], [ "id", "iconSettingsSection", 1, "flex", "spaceAbove" ], [ "id", "iconLayout" ], [ "id", "iconLayoutLabel", "localize", "Visual_IconLayout", "localizeTooltip", "Visual_IconLayout" ], [ "formControlName", "iconLayout", "aria-labelledby", "iconLayoutLabel" ], [ "id", "iconVerticalAlignment" ], [ "id", "iconVerticalAlignmentLabel", "localize", "Visual_IconVerticalAlignment", "localizeTooltip", "Visual_IconVerticalAlignment" ], [ "formControlName", "iconVerticalAlignment", "aria-labelledby", "iconVerticalAlignmentLabel" ], [ "id", "iconSet", 4, "ngIf" ], [ "id", "iconSet" ], [ "localize", "ConditionalFormattingDialog_RuleBased_IconStyleHeader", "id", "genericIconSet" ], [ "tabindex", "-1", "labelId", "genericIconSet", 1, "whiteTheme", 3, "iconSetId", "onIconSetSelected" ], [ 1, "flex-column", "conditional", "spaceAbove" ], [ 1, "header" ], [ "id", "listActions" ], [ "type", "button", 1, "pbi-fluent-small-button", 3, "click" ], [ 1, "glyphicon", "pbi-glyph-sort", "glyph-mini" ], [ 3, "localize", "localizeTooltip" ], [ 1, "glyphicon", "pbi-glyph-add", "glyph-mini" ], [ "localize", "ConditionalFormattingDialog_RuleBased_RulesAdd", "localizeTooltip", "ConditionalFormattingDialog_RuleBased_RulesAdd" ], [ "localize", "ConditionalFormattingDialog_RuleBased_RulesTitle", "localizeTooltip", "ConditionalFormattingDialog_RuleBased_RulesTitle" ], [ 1, "rulesContainer", "spaceAbove" ], [ "formArrayName", "rules" ], [ "class", "ruleSettings", 4, "ngFor", "ngForOf" ], [ 1, "ruleSettings" ], [ 3, "formGroup", "ngSwitch", 4, "ngIf" ], [ 3, "formGroup", "ngSwitch" ], [ 4, "ngSwitchCase" ], [ "localize", "ConditionalFormattingDialog_RuleBased_ConditionPostfix" ], [ "class", "whiteTheme", "tabindex", "-1", "labelId", "genericColor", 3, "color", "defaultColor", "isNoFillItemSupported", "buttonHeight", "colorChanged", 4, "ngIf" ], [ "class", "whiteTheme", "labelId", "genericIcon", 3, "selectedIconId", "iconChanged", 4, "ngIf" ], [ 1, "actionsContainer" ], [ "localizeTooltip", "ConditionalFormattingDialog_RuleBased_ConditionError", 1, "glyphicon", "glyph-small", "pbi-glyph-info", "error", 3, "ngClass" ], [ "role", "button", "localizeTooltip", "ConditionalFormattingDialog_Case_Move_Up", 1, "glyphicon", "glyph-mini", "pbi-glyph-drillup-nocircle", 3, "ngClass", "keydown", "click" ], [ "role", "button", "localizeTooltip", "ConditionalFormattingDialog_Case_Move_Down", 1, "glyphicon", "glyph-mini", "pbi-glyph-drilldowndisabled-nocircle", 3, "ngClass", "keydown", "click" ], [ "role", "button", "localizeTooltip", "ConditionalFormattingDialog_Case_Delete", 1, "glyphicon", "glyph-mini", "pbi-glyph-exit", 3, "ngClass", "keydown", "click" ], [ "localize", "ConditionalFormattingDialog_RuleBased_ConditionPrefix" ], [ "formControlName", "lowerBoundOperator", 1, "operator" ], [ "formControlName", "lowerBoundArgument", "type", "number", "pbiTooltipPosition", "below", 1, "pbi-text-input", "numeric-argument", 3, "ngClass", "localizeAttr", "pbiTooltip" ], [ "formControlName", "lowerBoundArgumentKind", 1, "argumentKind", 3, "ngClass" ], [ 3, "ngClass" ], [ "localize", "ConditionalFormattingDialog_RuleBased_ConditionSeparator" ], [ "formControlName", "upperBoundOperator", 1, "operator" ], [ "formControlName", "upperBoundArgument", "type", "number", "pbiTooltipPosition", "below", 1, "pbi-text-input", "numeric-argument", 3, "localizeAttr", "pbiTooltip" ], [ "formControlName", "upperBoundArgumentKind", 1, "argumentKind" ], [ "formControlName", "lowerBoundArgument", "type", "string", "pbiTooltipPosition", "below", 1, "pbi-text-input", "string-argument", 3, "ngClass", "localizeAttr", "pbiTooltip" ], [ "labelId", "genericIcon", 1, "whiteTheme", 3, "selectedIconId", "iconChanged" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog"), core["\u0275\u0275template"](1, ConditionalFormattingDialogComponent_form_1_Template, 33, 24, "form", 0), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.viewModel));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, common.NgStyle, common.NgSwitch, common.NgSwitchCase, template_dialog_component.J, icon_set_picker_input_component.Z, IconPickerComponent, fesm2022_forms._Y, fesm2022_forms.Fj, fesm2022_forms.wV, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.sg, fesm2022_forms.u, fesm2022_forms.CE, localize_directive.X, localize_attr_directive.b, localize_tooltip_directive.r, gradient_bar_lazy_component.a, pbi_dropdown_component.H, pbi_dropdown_field_list_menu_directive.I, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_checkbox_component.v, pbi_field_list_component.l, pbi_form_field_component.bP, pbi_form_field_component.ug, pbi_tooltip_directive.V, theme_color_input_component.oO, common.AsyncPipe, localize_pipe.F ],
                styles: [ "[_nghost-%COMP%]{--colorDialogForeground: var(--fluent-theme-neutral-primary-color);--colorDialogInputBorder: var(--fluent-theme-neutral-secondary-alt-color);--colorDialogInputBackground: var(--fluent-theme-white-color);--colorDialogInputBackgroundAlt: var(--fluent-theme-neutral-light-color);--colorDialogInputDisabled: var(--fluent-theme-neutral-tertiary-alt-color);--colorDialogInputError: var(--fluent-theme-error-dark-color);--colorDialogBackground: var(--globalColorWhite)}[data-legacy-theming=false]   [_nghost-%COMP%]{--colorDialogForeground: var(--colorNeutralForeground1);--colorDialogBackground: var(--colorNeutralBackground1);--colorDialogInputBorder: var(--colorNeutralStroke1);--colorDialogInputBackground: var(--colorNeutralBackground1);--colorDialogInputBackgroundAlt: var(--colorNeutralBackground2);--colorDialogInputDisabled: var(--colorNeutralForegroundDisabled);--colorDialogInputError: var(--colorDangerBorder2)}[_nghost-%COMP%]   .description[_ngcontent-%COMP%]{margin-top:0;font-size:var(--md-font-size, 14px);line-height:var(--md-font-size, 14px);color:var(--colorDialogForeground)}[_nghost-%COMP%]   h2[_ngcontent-%COMP%]{font-size:var(--sm-font-size, 12px);line-height:var(--sm-font-size, 12px);font-weight:400;color:var(--colorDialogForeground);margin-bottom:8px;margin-top:16px}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid var(--colorDialogInputBorder);outline:0;padding:4px}[_nghost-%COMP%]   input[type=number][_ngcontent-%COMP%]::-webkit-outer-spin-button, [_nghost-%COMP%]   input[type=number][_ngcontent-%COMP%]::-webkit-inner-spin-button{-webkit-appearance:none;-moz-appearance:textfield;margin:0}[_nghost-%COMP%]   input[disabled][_ngcontent-%COMP%]:hover{border-color:var(--colorDialogInputBorder)}[_nghost-%COMP%]   fieldset[_ngcontent-%COMP%]{border:0;margin:0;padding:0}[_nghost-%COMP%]   fieldset[_ngcontent-%COMP%]   legend[_ngcontent-%COMP%]{font-size:var(--lg-font-size, 16px);margin-bottom:12px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin-top:10px;margin-bottom:20px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]{margin-bottom:5px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:122px}[_nghost-%COMP%]   .checkBoxSettings[_ngcontent-%COMP%]{display:flex}[_nghost-%COMP%]   .checkBoxSettings[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin:0 5px 5px;font-size:var(--sm-font-size, 12px);cursor:pointer}[_nghost-%COMP%]   .checkBoxSettings[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin-bottom:0;padding:2px}[_nghost-%COMP%]   theme-color-input[_ngcontent-%COMP%]{margin-left:4px}.conditionalFormattingFieldListContainer[_ngcontent-%COMP%]   pbi-field-list[_ngcontent-%COMP%]{width:264px;height:300px;background:var(--colorDialogInputBackground);border:1px solid var(--colorDialogInputBorder);padding:5px;position:absolute}[_nghost-%COMP%]{display:flex;flex-direction:column;height:100%;position:relative}[_nghost-%COMP%]   form[_ngcontent-%COMP%]{display:flex;flex-direction:column;flex:1;height:494px}[_nghost-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]{width:276px}[_nghost-%COMP%]   .colorSettings[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]{width:224px}[_nghost-%COMP%]   section.flex[_ngcontent-%COMP%]{display:flex;flex-direction:row}[_nghost-%COMP%]   section.flex.space-between[_ngcontent-%COMP%]{justify-content:space-between}[_nghost-%COMP%]   section.flex[_ngcontent-%COMP%] > fieldset[_ngcontent-%COMP%]{margin-top:auto}[_nghost-%COMP%]   section.flex-column[_ngcontent-%COMP%]{display:flex;flex-direction:column}[_nghost-%COMP%]   .spaceAbove[_ngcontent-%COMP%]{margin-top:12px}[_nghost-%COMP%]   .spaceBelow[_ngcontent-%COMP%]{margin-bottom:12px}[_nghost-%COMP%]   fieldset.conditionalFormattingMode[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#totalMatching[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.sourceField[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.sourceSummarization[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.nullColorStrategy[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.barDirection[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#iconLayout[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#iconVerticalAlignment[_ngcontent-%COMP%]{position:relative;width:276px;margin-bottom:8px}[_nghost-%COMP%]   fieldset.conditionalFormattingMode[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#totalMatching[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.sourceField[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.sourceSummarization[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.nullColorStrategy[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.barDirection[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#iconLayout[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#iconVerticalAlignment[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:16px;margin-bottom:12px;display:block}[_nghost-%COMP%]   fieldset.conditionalFormattingMode[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#totalMatching[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.sourceField[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset.sourceSummarization[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#iconLayout[_ngcontent-%COMP%], [_nghost-%COMP%]   fieldset#iconVerticalAlignment[_ngcontent-%COMP%]{margin-right:28px}[_nghost-%COMP%]   fieldset.nullColorStrategy[_ngcontent-%COMP%]{width:276px}[_nghost-%COMP%]   fieldset.nullColorStrategy[_ngcontent-%COMP%]   section[_ngcontent-%COMP%]{display:inline-flex;width:100%}[_nghost-%COMP%]   fieldset#iconSet[_ngcontent-%COMP%]{margin-bottom:12px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   fieldset[_ngcontent-%COMP%]{width:276px}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   fieldset[_ngcontent-%COMP%]   section[_ngcontent-%COMP%]{display:inline-flex;width:100%}[_nghost-%COMP%]   .sectionSettings[_ngcontent-%COMP%]   fieldset[_ngcontent-%COMP%]   input.ng-invalid[_ngcontent-%COMP%]{border:1px solid var(--colorDialogInputError)}[_nghost-%COMP%]   .sectionSettings.colorList[_ngcontent-%COMP%]   fieldset[_ngcontent-%COMP%] > theme-color-input[_ngcontent-%COMP%]{margin:0}[_nghost-%COMP%]   section.gradientValue[_ngcontent-%COMP%]{border:1px solid var(--colorDialogInputBorder);display:block;height:25px;margin-top:20px;margin-right:8px}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]{flex:1}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.header[_ngcontent-%COMP%]{position:relative;height:35px;vertical-align:bottom}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.header[_ngcontent-%COMP%]   legend[_ngcontent-%COMP%]{margin-bottom:0}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.header[_ngcontent-%COMP%]   #listActions[_ngcontent-%COMP%]{position:absolute;right:0;top:0;display:flex;flex-direction:row}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.header[_ngcontent-%COMP%]   #listActions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{min-width:80px;max-width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;margin-right:8px;display:flex;align-items:center}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.header[_ngcontent-%COMP%]   #listActions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:5px}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.header[_ngcontent-%COMP%]   #listActions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-of-type{margin-right:0}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]{overflow-y:auto;overflow-x:hidden;font-size:12px;flex:1}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section[_ngcontent-%COMP%]{display:flex}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]:nth-of-type(odd){background:var(--colorDialogInputBackgroundAlt)}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]{padding:3px 0}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin:8px 4px}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   pbi-dropdown.operator[_ngcontent-%COMP%]{width:120px}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   input.numeric-argument[_ngcontent-%COMP%]{width:50px;margin-left:4px}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   input.string-argument[_ngcontent-%COMP%]{width:250px;margin-left:4px}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   pbi-dropdown.argumentKind[_ngcontent-%COMP%]{width:80px;margin-left:4px}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   input.argument.ng-invalid[_ngcontent-%COMP%]{border-color:var(--colorDialogInputError)}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   .colorpicker[_ngcontent-%COMP%]{background:white}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   section.actionsContainer[_ngcontent-%COMP%]{flex-grow:1;display:flex;justify-content:flex-end}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   section.actionsContainer[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin:6px 10px 6px 0;cursor:pointer}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   section.actionsContainer[_ngcontent-%COMP%]   i.disabled[_ngcontent-%COMP%]{color:var(--colorDialogInputDisabled);cursor:default}[_nghost-%COMP%]   section.conditional[_ngcontent-%COMP%]   section.rulesContainer[_ngcontent-%COMP%]   section.ruleSettings[_ngcontent-%COMP%]   section.actionsContainer[_ngcontent-%COMP%]   i.pbi-glyph-info.error[_ngcontent-%COMP%]{color:var(--colorDialogInputError)}.container-stop-bottom[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;pointer-events:none}" ],
                changeDetection: 0
            }), ConditionalFormattingDialogComponent;
        }(rx_component.w), field_list_module = __webpack_require__(6788), ExploreUI_module = __webpack_require__(87121), scoped_services = __webpack_require__(42680), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), model_to_pbi_tree_show_menu_strategy = __webpack_require__(78963), dialogs_module = __webpack_require__(76966), template_dialog_module = __webpack_require__(16973), pbi_checkbox_module = __webpack_require__(47913), pbi_dropdown_module = __webpack_require__(6015), pbi_field_list_module = __webpack_require__(63654), pbi_form_field_module = __webpack_require__(14525), pbi_tooltip_module = __webpack_require__(16095), theme_color_picker_module = __webpack_require__(27037), resource_loader_service = __webpack_require__(52121), ConditionalFormattingDialogModule = function() {
            function ConditionalFormattingDialogModule() {}
            return ConditionalFormattingDialogModule.\u0275fac = function(t) {
                return new (t || ConditionalFormattingDialogModule);
            }, ConditionalFormattingDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ConditionalFormattingDialogModule
            }), ConditionalFormattingDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], scoped_services.H, !0), [ resource_loader_service.l6, ConditionalFormattingDialogViewModelService, data_sources_service.D, model_to_pbi_tree_enabled_item_strategy.y, event_bridge_service.J, field_list_tree_service.p, grouping_design_state_service.AA, item_picker_service.a, model_service.b, {
                    provide: model_to_pbi_tree_show_menu_strategy.W,
                    useClass: model_to_pbi_tree_show_menu_strategy.w
                }, template_dialog_payload_service.x ], !1),
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: "ConditionalFormattingDialog",
                    componentType: ConditionalFormattingDialogComponent
                } ]), ExploreUI_module.J, field_list_module.FieldListModule, fesm2022_forms.u5, fesm2022_forms.UX, lazy_load_module.N, localization_module.v, pane_formatting_eager_module.p, pbi_dropdown_module.C, pbi_checkbox_module.V, pbi_field_list_module.X, pbi_form_field_module.g, pbi_tooltip_module.Z, theme_color_picker_module.b, template_dialog_module.e ]
            }), ConditionalFormattingDialogModule;
        }();
    },
    85287: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            df: function() {
                return ExploreUIDialogsSampleDatasetDialog;
            },
            vB: function() {
                return EXApplyConditionalFormattingRules;
            }
        });
        var _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41114), ExploreUIDialogsSampleDatasetDialog = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.ExploreUIDialogs.SampleDatasetDialog"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.ExploreUIDialogs.SampleDatasetDialog"), EXApplyConditionalFormattingRules = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.EX.ApplyConditionalFormattingRules"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.EX.ApplyConditionalFormattingRules");
    },
    6788: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            FieldListModule: function() {
                return FieldListModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), ExploreUI_module = __webpack_require__(87121), field_list_scoped_services = __webpack_require__(87616), add_to_drillthrough_menu_item = __webpack_require__(89079), add_to_filters_menu_item = __webpack_require__(63943), add_to_field_menu_item = __webpack_require__(27541), namedModelObjectUtils = __webpack_require__(70863), expand_collapse_menu_items = __webpack_require__(19129), pbi_menu_contracts = __webpack_require__(64560), core = __webpack_require__(50423), menu_factory = __webpack_require__(34162), expand_collapse_menu_item_handlers = __webpack_require__(66444), add_to_field_menu_item_handler = __webpack_require__(89726), add_to_filters_menu_item_handlers = __webpack_require__(40443), add_to_drillthrough_menu_item_handler = __webpack_require__(30527), menuItemSections = [ add_to_field_menu_item.wg, expand_collapse_menu_items.qd, add_to_filters_menu_item.tj, add_to_drillthrough_menu_item._b, add_to_filters_menu_item.z$ ], FieldListMenuStrategy = function() {
            function FieldListMenuStrategy(menuFactory, expandCollapseMenuItemHandlers, checkMenuItemHandler, addToFiltersMenuItemHandler, addToDrillthroughItemHandler) {
                this.menuFactory = menuFactory, this.expandCollapseMenuItemHandlers = expandCollapseMenuItemHandlers, 
                this.checkMenuItemHandler = checkMenuItemHandler, this.addToFiltersMenuItemHandler = addToFiltersMenuItemHandler, 
                this.addToDrillthroughItemHandler = addToDrillthroughItemHandler, this.menuMode = pbi_menu_contracts.Kb.Compact, 
                this.activeContextMenuRef = void 0;
            }
            return FieldListMenuStrategy.prototype.menuClick = function(event) {}, FieldListMenuStrategy.prototype.menuOpen = function(event) {
                this.activeContextMenuRef = event.menuRef;
            }, FieldListMenuStrategy.prototype.menuClose = function(event) {
                this.activeContextMenuRef = void 0;
            }, FieldListMenuStrategy.prototype.closeActiveMenu = function() {
                void 0 !== this.activeContextMenuRef && this.activeContextMenuRef.close();
            }, FieldListMenuStrategy.prototype.getMenu = function(event) {
                var _a;
                return this.menuFactory.getMenu(event, menuItemSections, this.getItemMenuHandlers(null === (_a = event.flatNode) || void 0 === _a ? void 0 : _a.node.data));
            }, FieldListMenuStrategy.prototype.menuItemClick = function(event) {
                var _a, _b, menuItemHandler = this.getItemMenuHandlers(null === (_a = event.flatNode) || void 0 === _a ? void 0 : _a.node.data).get(event.menuItem.id);
                menuItemHandler.execute ? menuItemHandler.execute(event) : menuItemHandler.executeMany && menuItemHandler.executeMany([ null === (_b = event.flatNode) || void 0 === _b ? void 0 : _b.node.data ], event);
            }, FieldListMenuStrategy.prototype.getItemMenuHandlers = function(item) {
                var handlers = [];
                return handlers.push.apply(handlers, this.expandCollapseMenuItemHandlers.getHandlers()), 
                item && (((0, namedModelObjectUtils.t3)(item) || (0, namedModelObjectUtils.kb)(item) || (0, 
                namedModelObjectUtils.y3)(item) || (0, namedModelObjectUtils.ez)(item)) && handlers.push.apply(handlers, this.checkMenuItemHandler.getHandlers(item)), 
                ((0, namedModelObjectUtils.t3)(item) || (0, namedModelObjectUtils.kb)(item) || (0, 
                namedModelObjectUtils.ez)(item)) && (handlers.push.apply(handlers, this.addToFiltersMenuItemHandler.getHandlers(item)), 
                handlers.push(this.addToDrillthroughItemHandler.getHandler(item)))), new Map(handlers);
            }, FieldListMenuStrategy.\u0275fac = function(t) {
                return new (t || FieldListMenuStrategy)(core["\u0275\u0275inject"](menu_factory.E), core["\u0275\u0275inject"](expand_collapse_menu_item_handlers.T), core["\u0275\u0275inject"](add_to_field_menu_item_handler.H), core["\u0275\u0275inject"](add_to_filters_menu_item_handlers.q), core["\u0275\u0275inject"](add_to_drillthrough_menu_item_handler.b));
            }, FieldListMenuStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldListMenuStrategy,
                factory: FieldListMenuStrategy.\u0275fac
            }), FieldListMenuStrategy;
        }(), events = __webpack_require__(8590), modeling_selection_service = __webpack_require__(9738), click_strategy_service = __webpack_require__(90166), field_list_tree_service = __webpack_require__(75096), modeling_scoped_services_providers = __webpack_require__(7779), pbi_tree_contracts = __webpack_require__(46015), Subscription = __webpack_require__(34763), map = __webpack_require__(14172), event_bridge_service = __webpack_require__(11494), model_service = __webpack_require__(93215), schema_item_activation_service_synchronizer = __webpack_require__(8538), getting_started_service = __webpack_require__(29834), model_change_selection_synchronizer = __webpack_require__(50998), model_to_pbi_tree_caption_strategy = __webpack_require__(29524), model_to_pbi_tree_draggable_item_strategy = __webpack_require__(88023), model_to_pbi_tree_hidden_item_strategy = __webpack_require__(72193), model_to_pbi_tree_inline_item_strategy = __webpack_require__(72525), model_to_pbi_tree_checkable_item_strategy = __webpack_require__(81141), key_board_strategy_service = __webpack_require__(412), tooltip_strategy_service = __webpack_require__(66014), field_list_check_strategy = __webpack_require__(78225), drag_drop_strategy_service = __webpack_require__(58286), pbi_field_list_component = __webpack_require__(65005), field_list_watermark_component = __webpack_require__(56213), common = __webpack_require__(77476), FieldListContainerComponent = function() {
            function FieldListContainerComponent(eventBridge, modelService, modelingSelectionService, modelingCheckingService, modelChangeSelectionSynchronizer, schemaItemActivationServiceSynchronizer, captionSetting, draggableSetting, hiddenSetting, inlineItemsSetting, checkableSetting, fieldListTreeService, clickStrategy, menuStrategy, checkStrategy, dragDropStrategy, keyboardStrategy, tooltipStrategy, gettingStartedService) {
                this.modelService = modelService, this.modelingSelectionService = modelingSelectionService, 
                this.modelingCheckingService = modelingCheckingService, this.modelChangeSelectionSynchronizer = modelChangeSelectionSynchronizer, 
                this.schemaItemActivationServiceSynchronizer = schemaItemActivationServiceSynchronizer, 
                this.captionSetting = captionSetting, this.draggableSetting = draggableSetting, 
                this.hiddenSetting = hiddenSetting, this.inlineItemsSetting = inlineItemsSetting, 
                this.checkableSetting = checkableSetting, this.fieldListTreeService = fieldListTreeService, 
                this.clickStrategy = clickStrategy, this.menuStrategy = menuStrategy, this.checkStrategy = checkStrategy, 
                this.dragDropStrategy = dragDropStrategy, this.keyboardStrategy = keyboardStrategy, 
                this.tooltipStrategy = tooltipStrategy, this.gettingStartedService = gettingStartedService, 
                this.fieldListTree$ = this.fieldListTreeService.fieldListTree$, this.fieldListOptions = {
                    click: this.clickStrategy,
                    check: this.checkStrategy,
                    menu: this.menuStrategy,
                    dragDrop: this.dragDropStrategy,
                    keyboard: this.keyboardStrategy,
                    tooltip: this.tooltipStrategy
                }, this.pbiTreeNodeSettingOptions = {
                    captionSetting: this.captionSetting,
                    draggableSetting: this.draggableSetting,
                    inlineItemsSetting: this.inlineItemsSetting,
                    checkableSetting: this.checkableSetting,
                    hiddenSetting: this.hiddenSetting
                }, this.checkMode = pbi_tree_contracts.kH.Multi, this.subscription = new Subscription.w, 
                this.fieldListTreeService.modelToPbiTreeConverterOptions = this.pbiTreeNodeSettingOptions, 
                this.subscriptionManager = eventBridge.createChannelSubscriptionManager();
            }
            return FieldListContainerComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.subscriptionManager.subscribe(events.LE3, function() {
                    return _this.modelService.update(void 0);
                }), this.subscription.add(this.modelService.modelChange$.subscribe(function(modelChange) {
                    return _this.onModelChange(modelChange);
                })), this.subscription.add(this.modelingSelectionService.selectionChanged.subscribe(function(selection) {
                    return _this.updateSelection(selection);
                })), this.subscription.add(this.modelingCheckingService.selectionChanged.subscribe(function(checked) {
                    return _this.fieldListTreeService.updateChecked(checked);
                })), this.loading$ = this.gettingStartedService.currentState$.pipe((0, map.U)(function(state) {
                    return 1 === state;
                })), this.emptyModel$ = this.gettingStartedService.currentState$.pipe((0, map.U)(function(state) {
                    return 0 === state;
                })), this.schemaItemActivationServiceSynchronizer.initialize(), this.modelService.update(void 0);
            }, FieldListContainerComponent.prototype.ngOnDestroy = function() {
                this.subscriptionManager.unsubscribeAll(), this.subscription.unsubscribe();
            }, FieldListContainerComponent.prototype.updateSelection = function(selection) {
                this.closeActiveMenus(), this.fieldListTreeService.updateSelected(selection);
            }, FieldListContainerComponent.prototype.closeActiveMenus = function() {
                this.menuStrategy && this.menuStrategy.closeActiveMenu();
            }, FieldListContainerComponent.prototype.onModelChange = function(modelChange) {
                this.modelChangeSelectionSynchronizer.update(modelChange.model, modelChange.appliedChanges), 
                this.fieldListTreeService.setOrUpdateFieldListTreeModel(modelChange.model, this.modelingSelectionService.selection, this.modelingCheckingService.selection);
            }, FieldListContainerComponent.\u0275fac = function(t) {
                return new (t || FieldListContainerComponent)(core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](model_service.b), core["\u0275\u0275directiveInject"](modeling_selection_service.W6), core["\u0275\u0275directiveInject"](modeling_selection_service.fc), core["\u0275\u0275directiveInject"](model_change_selection_synchronizer.O), core["\u0275\u0275directiveInject"](schema_item_activation_service_synchronizer.h), core["\u0275\u0275directiveInject"](model_to_pbi_tree_caption_strategy.B), core["\u0275\u0275directiveInject"](model_to_pbi_tree_draggable_item_strategy.F), core["\u0275\u0275directiveInject"](model_to_pbi_tree_hidden_item_strategy.J), core["\u0275\u0275directiveInject"](model_to_pbi_tree_inline_item_strategy.wt), core["\u0275\u0275directiveInject"](model_to_pbi_tree_checkable_item_strategy.x), core["\u0275\u0275directiveInject"](field_list_tree_service.p), core["\u0275\u0275directiveInject"](click_strategy_service.Y), core["\u0275\u0275directiveInject"](FieldListMenuStrategy), core["\u0275\u0275directiveInject"](field_list_check_strategy.F), core["\u0275\u0275directiveInject"](drag_drop_strategy_service.H), core["\u0275\u0275directiveInject"](key_board_strategy_service.W), core["\u0275\u0275directiveInject"](tooltip_strategy_service.Z), core["\u0275\u0275directiveInject"](getting_started_service.c));
            }, FieldListContainerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FieldListContainerComponent,
                selectors: [ [ "field-list-container" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]((0, tslib_es6.__spreadArray)((0, 
                tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], field_list_scoped_services.h, !0), modeling_scoped_services_providers.r, !0), [ click_strategy_service.Y, FieldListMenuStrategy, expand_collapse_menu_item_handlers.T, field_list_tree_service.p ], !1)) ],
                decls: 6,
                vars: 11,
                consts: [ [ 1, "container", 3, "click" ], [ "focus-nav-mode", "Browser", "fluent", "true", 3, "fieldListTree", "scrollSelectedItemIntoViewOnInit", "checkMode", "options", "loading" ], [ 1, "pbi-field-list-watermark" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275listener"]("click", function($event) {
                        return $event.stopPropagation();
                    }), core["\u0275\u0275elementStart"](1, "pbi-field-list", 1), core["\u0275\u0275pipe"](2, "async"), 
                    core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275element"](5, "field-list-watermark", 2), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("fieldListTree", core["\u0275\u0275pipeBind1"](2, 5, ctx.emptyModel$) ? null : core["\u0275\u0275pipeBind1"](3, 7, ctx.fieldListTree$))("scrollSelectedItemIntoViewOnInit", !0)("checkMode", ctx.checkMode)("options", ctx.fieldListOptions)("loading", core["\u0275\u0275pipeBind1"](4, 9, ctx.loading$)));
                },
                dependencies: [ pbi_field_list_component.l, field_list_watermark_component.s, common.AsyncPipe ],
                styles: [ ".container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%}pbi-field-list[_ngcontent-%COMP%]{flex:1;padding:0 4px}pbi-field-list[_ngcontent-%COMP%]     pbi-tree{margin-top:8px;padding-top:0!important}" ],
                changeDetection: 0
            }), FieldListContainerComponent;
        }(), Data_module = __webpack_require__(52910), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), modeling_services_providers = __webpack_require__(34256), model_object_tooltip_module = __webpack_require__(69792), field_list_services_providers = __webpack_require__(41920), field_list_watermark_module = __webpack_require__(97930), pbi_scrollbar_module = __webpack_require__(72359), UILibrary_module = __webpack_require__(94785), pbi_field_list_module = __webpack_require__(63654), pbi_menu_module = __webpack_require__(94841), manifests = [ {
            type: FieldListContainerComponent,
            componentId: "FieldListContainerComponentId"
        } ], FieldListModule = function() {
            function FieldListModule() {}
            return FieldListModule.\u0275fac = function(t) {
                return new (t || FieldListModule);
            }, FieldListModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: FieldListModule
            }), FieldListModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], modeling_services_providers.q, !0), field_list_services_providers.U, !0), [ model_to_pbi_tree_hidden_item_strategy.J ], !1),
                imports: [ common.CommonModule, Data_module.O, ExploreUI_module.J, lazy_load_module.N.withManifests(manifests), localization_module.v, pbi_menu_module.b, pbi_scrollbar_module.K, UILibrary_module.g, pbi_field_list_module.X, field_list_watermark_module.g, model_object_tooltip_module.v ]
            }), FieldListModule;
        }();
    },
    58679: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            I: function() {
                return PbiDropdownFieldListMenuDirective;
            }
        });
        var pbi_field_list_component = __webpack_require__(65005), debug = __webpack_require__(62458), keyUtils = __webpack_require__(9795), combineLatest = __webpack_require__(59017), filter = __webpack_require__(59973), map = __webpack_require__(14172), switchMap = __webpack_require__(81905), takeUntil = __webpack_require__(83317), take = __webpack_require__(48787), core = __webpack_require__(50423), pbi_dropdown_service = __webpack_require__(84354), PbiDropdownFieldListStrategy = function() {
            function PbiDropdownFieldListStrategy(pbiDropdownService) {
                this.pbiDropdownService = pbiDropdownService, this.isOpen$ = this.pbiDropdownService.select$("open");
                var dropdownItems$ = this.pbiDropdownService.select$("dropdownItems"), overlayRef$ = this.pbiDropdownService.select$("overlayRef"), fieldListComponent$ = dropdownItems$.pipe((0, 
                filter.h)(function(dropdownItems) {
                    return !!dropdownItems;
                }), (0, map.U)(function(dropdownItems) {
                    return debug.fF.assert(function() {
                        return 1 === dropdownItems.length;
                    }, "Expected 1 FieldListComponent"), dropdownItems.first;
                })), fieldListRendered$ = fieldListComponent$.pipe((0, switchMap.w)(function(fieldListComponent) {
                    return fieldListComponent.onFirstRenderComplete;
                }));
                (0, combineLatest.aj)([ this.isOpen$, overlayRef$, fieldListComponent$, fieldListRendered$ ]).pipe((0, 
                takeUntil.R)(this.pbiDropdownService.onDestroy$), (0, filter.h)(function(_a) {
                    var overlayRef = _a[1];
                    return _a[0] && !!(null == overlayRef ? void 0 : overlayRef.overlayRef.overlayElement) && !!_a[2];
                })).subscribe(function(_a) {
                    _a[2].focusSearchBox();
                });
            }
            return PbiDropdownFieldListStrategy.prototype.buttonKeydown = function(event) {
                var _this = this;
                this.isOpen$.pipe((0, take.q)(1)).subscribe(function(isOpen) {
                    isOpen || (0, keyUtils.Wl)(event.keyCode) && (_this.pbiDropdownService.toggleOpenState(), 
                    event.preventDefault());
                });
            }, PbiDropdownFieldListStrategy.\u0275fac = function(t) {
                return new (t || PbiDropdownFieldListStrategy)(core["\u0275\u0275inject"](pbi_dropdown_service.S));
            }, PbiDropdownFieldListStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: PbiDropdownFieldListStrategy,
                factory: PbiDropdownFieldListStrategy.\u0275fac
            }), PbiDropdownFieldListStrategy;
        }(), scheduled = __webpack_require__(26333), queue = __webpack_require__(31343), PbiDropdownFieldListMenuDirective = function() {
            function PbiDropdownFieldListMenuDirective(pbiDropdownService, strategy) {
                this.pbiDropdownService = pbiDropdownService, this.strategy = strategy;
            }
            return PbiDropdownFieldListMenuDirective.prototype.ngAfterViewInit = function() {
                var _this = this;
                (0, scheduled.x)([ {
                    strategy: this.strategy,
                    dropdownItems: this.dropdownItems
                } ], queue.N).subscribe(function(newValues) {
                    _this.pbiDropdownService.updateState(newValues);
                });
            }, PbiDropdownFieldListMenuDirective.\u0275fac = function(t) {
                return new (t || PbiDropdownFieldListMenuDirective)(core["\u0275\u0275directiveInject"](pbi_dropdown_service.S), core["\u0275\u0275directiveInject"](PbiDropdownFieldListStrategy));
            }, PbiDropdownFieldListMenuDirective.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiDropdownFieldListMenuDirective,
                selectors: [ [ "pbi-dropdown", "dropdown-type", "field-list" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    var _t;
                    1 & rf && core["\u0275\u0275contentQuery"](dirIndex, pbi_field_list_component.l, 5), 
                    2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.dropdownItems = _t);
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ PbiDropdownFieldListStrategy ]) ]
            }), PbiDropdownFieldListMenuDirective;
        }();
    },
    45074: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            bP: function() {
                return PbiFormFieldComponent;
            },
            nm: function() {
                return PbiInputLabelDirective;
            },
            uC: function() {
                return PbiInputErrorDirective;
            },
            ug: function() {
                return PbiInputDirective;
            }
        });
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4437), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _c0 = [ [ [ "", "pbiLabel", "" ] ], [ [ "", "pbiInput", "" ] ], [ [ "", "pbiInputButton", "" ] ], [ [ "", "pbiInputError", "" ] ] ], _c1 = [ "[pbiLabel]", "[pbiInput]", "[pbiInputButton]", "[pbiInputError]" ], pbiInputIdCounter = 0, PbiInputDirective = function() {
            function PbiInputDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputDirective.\u0275fac = function(t) {
                return new (t || PbiInputDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputDirective,
                selectors: [ [ "", "pbiInput", "" ] ],
                hostAttrs: [ "autocomplete", "off" ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("aria-required", ctx.required || null)("aria-describedby", null == ctx.formField.error ? null : ctx.formField.error.id)("aria-invalid", ctx.formField.error ? "true" : "false");
                },
                inputs: {
                    required: "required"
                }
            }), PbiInputDirective;
        }(), PbiInputLabelDirective = function() {
            function PbiInputLabelDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputLabelDirective.\u0275fac = function(t) {
                return new (t || PbiInputLabelDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputLabelDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputLabelDirective,
                selectors: [ [ "", "pbiLabel", "" ] ],
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-label-required", null != ctx.formField.input.required);
                }
            }), PbiInputLabelDirective;
        }(), PbiInputErrorDirective = function() {
            function PbiInputErrorDirective() {
                this.id = "pbi-input-error-id-".concat(pbiInputIdCounter++);
            }
            return PbiInputErrorDirective.\u0275fac = function(t) {
                return new (t || PbiInputErrorDirective);
            }, PbiInputErrorDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputErrorDirective,
                selectors: [ [ "", "pbiInputError", "" ] ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("id", ctx.id), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-input-error", !0));
                }
            }), PbiInputErrorDirective;
        }(), PbiFormFieldComponent = function() {
            function PbiFormFieldComponent(renderer) {
                this.renderer = renderer, this._compact = !1;
            }
            return Object.defineProperty(PbiFormFieldComponent.prototype, "compact", {
                get: function() {
                    return this._compact;
                },
                set: function(value) {
                    this._compact = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.Ig)(value);
                },
                enumerable: !1,
                configurable: !0
            }), PbiFormFieldComponent.prototype.ngAfterContentInit = function() {
                if (this.input && this.label) {
                    var id = "pbi-input-id-".concat(pbiInputIdCounter++);
                    this.renderer.setAttribute(this.input.elementRef.nativeElement, "id", id), this.renderer.setAttribute(this.label.elementRef.nativeElement, "for", id);
                }
            }, PbiFormFieldComponent.\u0275fac = function(t) {
                return new (t || PbiFormFieldComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
            }, PbiFormFieldComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: PbiFormFieldComponent,
                selectors: [ [ "pbi-form-field" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    if (1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputLabelDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputErrorDirective, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.input = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.label = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.error = _t.first);
                    }
                },
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-compact-form-field", ctx.compact);
                },
                inputs: {
                    compact: "compact"
                },
                ngContentSelectors: _c1,
                decls: 5,
                vars: 0,
                consts: [ [ 1, "controls" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projectionDef"](_c0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](0), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementStart"](1, "div", 0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](2, 1), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](3, 2), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](4, 3));
                },
                styles: [ '[_nghost-%COMP%]{display:flex;flex-direction:column;--input-border-color: var(--gray-110);--input-foreground: var(--gray-140);--disabled-input-background: var(--gray-20);--disabled-input-border-color: var(--gray-60);--disabled-input-foreground: var(--gray-90);--focused-input-border-color: var(--gray-130);--focused-input-foreground: var(--gray-180);--error-color: var(--fluent-theme-error-dark-color)}[data-legacy-theming=false]   [_nghost-%COMP%]{--input-border-color: var(--colorNeutralStroke1);--input-foreground: var(--colorNeutralForeground1);--disabled-input-background: var(--colorNeutralBackgroundDisabled);--disabled-input-border-color: var(--colorNeutralStrokeDisabled);--disabled-input-foreground: var(--colorNeutralForegroundDisabled);--focused-input-border-color: var(--colorNeutralStrokeFocus2);--focused-input-foreground: var(--colorNeutralForeground1);--error-color: var(--fluent-theme-error-dark-color)}.pbi-form-field-inline[_nghost-%COMP%] {flex-direction:row;align-items:center;justify-content:space-between}.pbi-form-field-inline[_nghost-%COMP%]  label{margin:0 8px 0 0}.pbi-form-field-inline[_nghost-%COMP%]  .controls{flex-grow:1;justify-content:flex-end}.pbi-compact-form-field[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.pbi-compact-form-field[_nghost-%COMP%]  input{height:28px;padding:4px 6px}.pbi-compact-form-field[_nghost-%COMP%]  textarea{padding:4px 6px}[_nghost-%COMP%]  *{box-sizing:border-box}[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);margin:0 0 4px}[_nghost-%COMP%]  label.pbi-label-required:after{content:"*";margin-left:4px;color:var(--error-color)}[_nghost-%COMP%]  .controls{display:flex}[_nghost-%COMP%]  .controls>*:not(:last-child){margin-right:8px}[_nghost-%COMP%]  input{height:32px}[_nghost-%COMP%]  textarea{resize:none}[_nghost-%COMP%]  input, [_nghost-%COMP%]  textarea{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);width:100%;border-radius:2px;border:1px solid var(--input-border-color);color:var(--input-foreground);outline:none;padding:8px 6px}[_nghost-%COMP%]  input[disabled], [_nghost-%COMP%]  textarea[disabled], [_nghost-%COMP%]  input[aria-disabled=true], [_nghost-%COMP%]  textarea[aria-disabled=true]{background-color:var(--disabled-input-background);border-color:var(--disabled-input-border-color);color:var(--disabled-input-foreground)}[_nghost-%COMP%]  input:focus, [_nghost-%COMP%]  textarea:focus{border-color:var(--focused-input-border-color);color:var(--focused-input-foreground)}[_nghost-%COMP%]  [pbiInput][aria-invalid=true]{border-color:var(--error-color)}[_nghost-%COMP%]  .pbi-input-error{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);margin:4px 0 0;color:var(--error-color)}' ],
                changeDetection: 0
            }), PbiFormFieldComponent;
        }();
    }
} ]);