"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "quick-calc" ], {
    15175: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            QuickCalcModule: function() {
                return QuickCalcModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), quick_measures_dialog_identifier = __webpack_require__(22695), events = __webpack_require__(40112), dax_template_service = __webpack_require__(57151), dax_capabilities_service = __webpack_require__(80435), Common = __webpack_require__(35911), sq_aggregation_operations_service = __webpack_require__(28199), conceptual_schema_proxy_service = __webpack_require__(26898), data_sources_service = __webpack_require__(83008), data_source_serializer_service = __webpack_require__(40823), visual_authoring_service = __webpack_require__(66890), token = __webpack_require__(68082), modelAuthoringService = __webpack_require__(53439), semanticQuerySerializer = __webpack_require__(3468), visualContainerUtils = __webpack_require__(60661), debug = __webpack_require__(62458), promise = __webpack_require__(98094), sqExpr = __webpack_require__(94419), sqExprUtils = __webpack_require__(45334), localization_service = __webpack_require__(65181), name_validator = __webpack_require__(75334), urn_builder = __webpack_require__(12985), Telemetry = __webpack_require__(21617), dialog_service = __webpack_require__(58938), take = __webpack_require__(48787), sqExprStaticMembers = __webpack_require__(74082), isMeasure = __webpack_require__(58295), sqExprEqualityVisitor = __webpack_require__(45413), QuickCalcError = function(_super) {
            function QuickCalcError(message) {
                return _super.call(this, message) || this;
            }
            return (0, tslib_es6.__extends)(QuickCalcError, _super), QuickCalcError;
        }(Common.sH), QuickCalcServiceLazyProvider = {
            provide: "quickCalcModern",
            useFactory: function(aggrOps, conceptualSchemaProxy, dataSources, localizationService, modelAuthoring, dataModelService, daxTemplateService, visualAuthoringService, telemetryService, daxCapabilitiesService, dialogService, dataSourceSerializer) {
                var service = new QuickCalcService(aggrOps, conceptualSchemaProxy, dataSources, localizationService, modelAuthoring, dataModelService, daxTemplateService, visualAuthoringService, telemetryService, daxCapabilitiesService, dialogService, dataSourceSerializer);
                return Promise.resolve(service);
            },
            deps: [ sq_aggregation_operations_service.C, conceptual_schema_proxy_service.i, data_sources_service.D, localization_service.o, modelAuthoringService.S, token.n, dax_template_service.c, visual_authoring_service.$8, Telemetry.y0, dax_capabilities_service.r3, dialog_service.x, data_source_serializer_service._ ]
        }, QuickCalcService = function() {
            function QuickCalcService(aggrOps, conceptualSchemaProxy, dataSources, localizationService, modelAuthoring, dataModelService, daxTemplateService, visualAuthoringService, telemetryService, daxCapabilitiesService, dialogService, dataSourceSerializer) {
                this.aggrOps = aggrOps, this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.localizationService = localizationService, this.modelAuthoring = modelAuthoring, 
                this.dataModelService = dataModelService, this.daxTemplateService = daxTemplateService, 
                this.visualAuthoringService = visualAuthoringService, this.telemetryService = telemetryService, 
                this.daxCapabilitiesService = daxCapabilitiesService, this.dialogService = dialogService, 
                this.dataSourceSerializer = dataSourceSerializer;
            }
            return QuickCalcService.prototype.buildDaxTemplateArgs = function(expression, entryPoint, visualContainerContext) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, schema, selects, targetEntity, newExpr, metadata, openDaxTemplateEvent, schemaName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return dataSources = this.dataSources.get(), [ 4, this.conceptualSchemaProxy.get(dataSources) ];

                          case 1:
                            return schema = _a.sent(), visualContainerContext ? selects = _.sortBy((0, visualContainerUtils.oJ)(visualContainerContext.visualContainer), function(select) {
                                return (0, sqExprEqualityVisitor.fS)(expression, select.expr) ? 0 : 1;
                            }) : (0, sqExprStaticMembers.Lk)(expression) ? (selects = [], targetEntity = expression) : ((metadata = (newExpr = expression).getMetadata(schema)) && metadata.type.numeric && !sqExprUtils.m.discourageAggregation(expression, schema) && (newExpr = this.aggrOps.createExprWithAggregate(expression, schema, !0, [ {
                                numeric: !0
                            } ])), selects = [ {
                                expr: newExpr,
                                name: void 0
                            } ]), openDaxTemplateEvent = this.telemetryService.logEvent(events.lp, {
                                entryPoint,
                                numberOfSelects: selects.length
                            }), schemaName = function(schema) {
                                for (var _i = 0, _a = schema.schemas; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    if (item.capabilities.canEdit) return item.name;
                                }
                            }(schema), [ 2, {
                                selects: _.map(selects, function(expr) {
                                    return semanticQuerySerializer.ib.serializeExpr(expr.expr);
                                }),
                                dataSources: this.dataSourceSerializer.serializeDataSources(dataSources),
                                schemaName,
                                openDaxTemplateEvent,
                                targetEntity: targetEntity && semanticQuerySerializer.ib.serializeExpr(targetEntity)
                            } ];
                        }
                    });
                });
            }, QuickCalcService.prototype.launchDaxTemplateDialog = function(expression, daxTemplateArgs, visualContainerContext) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var daxCapabilities, dialogResultEvent, schema, deferred, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(expression, "expression"), [ 4, this.daxCapabilitiesService.getCapabilities() ];

                          case 1:
                            return daxCapabilities = _a.sent(), dialogResultEvent = this.telemetryService.startChildEvent(daxTemplateArgs.openDaxTemplateEvent, events.Xi, {}), 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 2:
                            return schema = _a.sent(), deferred = new promise.B, [ 4, this.showQuickCalcDialog(daxTemplateArgs) ];

                          case 3:
                            return _a.sent().afterClosed().pipe((0, take.q)(1)).subscribe(function(result) {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        switch (_a.label) {
                                          case 0:
                                            return _a.trys.push([ 0, , 2, 3 ]), [ 4, this.handleQuickCalcDialogResult(expression, result, schema, daxTemplateArgs.schemaName, daxCapabilities, dialogResultEvent, visualContainerContext) ];

                                          case 1:
                                            return _a.sent(), [ 3, 3 ];

                                          case 2:
                                            return deferred.resolve(), [ 7 ];

                                          case 3:
                                            return [ 2 ];
                                        }
                                    });
                                });
                            }), [ 4, deferred.promise ];

                          case 4:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, QuickCalcService.prototype.handleQuickCalcDialogResult = function(expression, result, schema, schemaName, daxCapabilities, dialogResultEvent, visualContainerContext) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, templates, template, newMeasureCreated, newExpression_1, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return dataSources = this.dataSources.get(), dialogResultEvent.event.info.connectionimport = this.getConnectionType(schema, schemaName), 
                            result ? (templates = this.daxTemplateService.getTemplates(schema, daxCapabilities, schemaName, 1), 
                            (template = _.find(templates, function(template) {
                                return template.capabilities.name === result.template.name;
                            })) ? (dialogResultEvent.event.info.selectedQuickMeasure = template.capabilities.name, 
                            dialogResultEvent.resolve(), [ 4, this.createNewMeasureInternal(result, template, schema, daxCapabilities) ]) : (dialogResultEvent.event.info.selectedQuickMeasure = "Cancel", 
                            dialogResultEvent.resolve(), [ 2, Promise.reject(new QuickCalcError("Dax template undefined")) ])) : (dialogResultEvent.event.info.selectedQuickMeasure = "Cancel", 
                            dialogResultEvent.resolve(), [ 2 ]);

                          case 1:
                            return newMeasureCreated = _a.sent(), visualContainerContext && (newExpression_1 = (0, 
                            sqExpr.mv)((0, sqExpr.nw)(newMeasureCreated.schema, newMeasureCreated.entity), newMeasureCreated.name), 
                            this.visualAuthoringService.addFieldToVisual(newExpression_1, dataSources, visualContainerContext.visualContainer).catch(function() {
                                return (0, isMeasure.k)(expression) ? _this.visualAuthoringService.replaceField(newExpression_1, visualContainerContext.role, visualContainerContext.index, visualContainerContext.visualContainer, dataSources) : Promise.reject(new QuickCalcError("Original expression is not a measure"));
                            })), [ 2 ];
                        }
                    });
                });
            }, QuickCalcService.prototype.showQuickCalcDialog = function(daxTemplateArgs) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var bindings;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return bindings = {
                            title: this.localizationService.get("QuickMeasure"),
                            input: daxTemplateArgs,
                            hideOkButton: !1,
                            hideCancelButton: !1,
                            footerLink: {
                                text: this.localizationService.get("DaxTemplates_IdeasPost"),
                                url: "https://go.microsoft.com/fwlink/?linkid=842906",
                                type: "external"
                            }
                        }, [ 2, this.dialogService.showTemplateDialog(quick_measures_dialog_identifier.T, bindings) ];
                    });
                });
            }, QuickCalcService.prototype.createNewQuickMeasure = function(tableName, schemaName, desiredMeasureName, measureExpression, daxTemplateName, getFormattingSchemaChange) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var finalMeasureName, schemaChanges, newMeasureSchemaChange, measureTemplate, formattingSchemaChange;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return finalMeasureName = name_validator.cm.makeValidName(this.dataModelService.getDataModel(), this.localizationService, "Measure", tableName, desiredMeasureName, schemaName), 
                            (schemaChanges = []).push(newMeasureSchemaChange = {
                                newMeasureCreated: {
                                    entity: tableName,
                                    name: finalMeasureName,
                                    schema: schemaName,
                                    expression: measureExpression
                                }
                            }), measureTemplate = {
                                version: 0,
                                daxTemplateName
                            }, schemaChanges.push({
                                setJsonExtendedMetadata: {
                                    modelObject: urn_builder.X6.getMeasureUrn(tableName, finalMeasureName, schemaName),
                                    name: "MeasureTemplate",
                                    value: JSON.stringify(measureTemplate)
                                }
                            }), (formattingSchemaChange = getFormattingSchemaChange(finalMeasureName)) && schemaChanges.push(formattingSchemaChange), 
                            [ 4, this.modelAuthoring.apply({
                                changes: schemaChanges
                            }) ];

                          case 1:
                            return _a.sent(), [ 2, newMeasureSchemaChange.newMeasureCreated ];
                        }
                    });
                });
            }, QuickCalcService.prototype.createNewMeasureInternal = function(dialogResult, template, schema, daxCapabilities) {
                var _this = this, parameterValues = _.mapValues(dialogResult.parameters, function(parameter) {
                    return {
                        expression: semanticQuerySerializer.ib.deserializeExpr(parameter.expression)
                    };
                }), daxResult = template.apply(schema, daxCapabilities, {
                    schemaName: dialogResult.newMeasureMetadata.schema,
                    inputValues: parameterValues
                });
                return this.createNewQuickMeasure(dialogResult.newMeasureMetadata.entity, dialogResult.newMeasureMetadata.schema, dialogResult.newMeasureMetadata.measureName, daxResult.dax, template.capabilities.name, function(finalMeasureName) {
                    return _this.getFormattingSchemaChange(dialogResult.newMeasureMetadata, finalMeasureName, schema);
                });
            }, QuickCalcService.prototype.getFormattingSchemaChange = function(newMeasureMetadata, newMeasureName, schema) {
                if (null != newMeasureMetadata.formatType) {
                    var formatKind = this.convertFormatToFormatKind(newMeasureMetadata.formatType);
                    if (formatKind) return {
                        setFormatting: {
                            format: formatKind,
                            modelObject: urn_builder.X6.getMeasureUrn(newMeasureMetadata.entity, newMeasureName, newMeasureMetadata.schema)
                        }
                    };
                } else if (newMeasureMetadata.formatSource) {
                    var formatSource = this.getActualFormattingSource(newMeasureMetadata.formatSource, schema);
                    if (formatSource) return {
                        copyFormatting: {
                            sourceSchema: formatSource.schema,
                            sourceEntity: formatSource.entity,
                            sourceProperty: formatSource.property,
                            schema: newMeasureMetadata.schema,
                            targetEntity: newMeasureMetadata.entity,
                            targetProperty: newMeasureName,
                            objectType: "Measure"
                        }
                    };
                }
            }, QuickCalcService.prototype.getActualFormattingSource = function(expressionContainer, schema) {
                var expression = semanticQuerySerializer.ib.deserializeExpr(expressionContainer);
                if ((0, sqExprStaticMembers.kb)(expression)) return (targetEntityRef = expression.source.getTargetEntity()) && {
                    schema: targetEntityRef.schema,
                    entity: targetEntityRef.entity,
                    property: expression.ref
                };
                if ((0, sqExprStaticMembers.iV)(expression)) {
                    var aggregatedColumn = expression.arg.getTargetColumnRef(schema);
                    if (!aggregatedColumn) return;
                    var aggregateMetadata = expression.getMetadata(schema), columnMetadata = aggregatedColumn.getMetadata(schema), targetEntityRef = aggregatedColumn.source.getTargetEntity();
                    return aggregateMetadata && columnMetadata && targetEntityRef && aggregateMetadata.type.isCompatibleFrom(columnMetadata.type) && {
                        schema: targetEntityRef.schema,
                        entity: targetEntityRef.entity,
                        property: aggregatedColumn.ref
                    };
                }
            }, QuickCalcService.prototype.convertFormatToFormatKind = function(format) {
                if (0 === format) return "Percentage";
            }, QuickCalcService.prototype.getConnectionType = function(schema, targetSchema) {
                return schema.schema(targetSchema).isExtensionSchema ? "LiveConnect" : "InternalModel";
            }, QuickCalcService;
        }(), Data_module = __webpack_require__(52910), Explore_module = __webpack_require__(31109), ExploreUI_module = __webpack_require__(87121), promises_module = __webpack_require__(75768), UILibrary_module = __webpack_require__(94785), core = __webpack_require__(50423), QuickCalcModule = function() {
            function QuickCalcModule() {}
            return QuickCalcModule.\u0275fac = function(t) {
                return new (t || QuickCalcModule);
            }, QuickCalcModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: QuickCalcModule
            }), QuickCalcModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ QuickCalcServiceLazyProvider ],
                imports: [ Data_module.O, Explore_module.F, ExploreUI_module.J, promises_module.Zz, Telemetry.e3, UILibrary_module.g ]
            }), QuickCalcModule;
        }();
    }
} ]);