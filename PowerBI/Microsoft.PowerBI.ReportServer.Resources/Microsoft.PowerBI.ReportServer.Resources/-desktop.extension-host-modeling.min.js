"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-modeling" ], {
    75436: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            DatasetDetailsServiceInjectionToken: function() {
                return DatasetDetailsServiceInjectionToken;
            },
            ExtensionHostModelingModule: function() {
                return ExtensionHostModelingModule;
            },
            ViewType: function() {
                return ViewType;
            }
        });
        var ViewType = function(ViewType) {
            return ViewType[ViewType.ModelView = 0] = "ModelView", ViewType[ViewType.DaxQueryView = 1] = "DaxQueryView", 
            ViewType;
        }({}), core = __webpack_require__(50423), DatasetDetailsServiceInjectionToken = new core.InjectionToken("DatasetDetailsService"), common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), tslib_es6 = __webpack_require__(81337), from = __webpack_require__(82762), map = __webpack_require__(14172), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), ExtensionHostModelingEffects = function() {
            function ExtensionHostModelingEffects(actions$, messageBroker, datasetDetailsService) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.datasetDetailsService = datasetDetailsService, 
                this.onGetDatasetDetailsReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getModelingDatasetDetails, function(params) {
                    return (0, from.D)(_this.getDatasetDetails(params.datasetId, params.workspaceId)).pipe((0, 
                    map.U)(function(result) {
                        return index_core.Vm.getModelingDatasetDetails.resolve(result);
                    }));
                });
            }
            return ExtensionHostModelingEffects.prototype.getDatasetDetails = function(datasetId, workspaceId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.datasetDetailsService.getDatasetEditingDetails(datasetId, workspaceId) ];
                    });
                });
            }, ExtensionHostModelingEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostModelingEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](DatasetDetailsServiceInjectionToken));
            }, ExtensionHostModelingEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostModelingEffects,
                factory: ExtensionHostModelingEffects.\u0275fac
            }), ExtensionHostModelingEffects;
        }(), ExtensionHostModelingModule = function() {
            function ExtensionHostModelingModule() {}
            return ExtensionHostModelingModule.\u0275fac = function(t) {
                return new (t || ExtensionHostModelingModule);
            }, ExtensionHostModelingModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostModelingModule
            }), ExtensionHostModelingModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostModelingEffects ]) ]
            }), ExtensionHostModelingModule;
        }();
    }
} ]);