"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "format-mode" ], {
    21302: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ol: function() {
                return PropertyChangeIndicatorServiceInjectionToken;
            },
            mF: function() {
                return showPageFormatPane;
            },
            sn: function() {
                return showFormatPane;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), showFormatPane = {
            type: 3,
            name: "showFormatPane"
        }, showPageFormatPane = {
            type: 3,
            name: "showPageFormatPane"
        }, PropertyChangeIndicatorServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("PropertyChangeIndicatorService");
    },
    63205: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            FormatModeModule: function() {
                return FormatModeModule;
            }
        });
        var lazy_load_routes = __webpack_require__(43626), tslib_es6 = __webpack_require__(81337), rx_component = __webpack_require__(73221), combineLatest = __webpack_require__(59017), map = __webpack_require__(14172), core = __webpack_require__(50423), common = __webpack_require__(77476), pbi_office_icon_component = __webpack_require__(69437);
        function MiniToolbarCfGradientIconComponent_div_0__svg_svg_1__svg_stop_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275element"](0, "stop")), 
            2 & rf) {
                var color_r4 = ctx.$implicit, index_r5 = ctx.index, properties_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                core["\u0275\u0275attribute"]("stop-color", color_r4)("offset", index_r5 * (100 / (properties_r1.colors.length - 1)) + "%");
            }
        }
        function MiniToolbarCfGradientIconComponent_div_0__svg_svg_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275elementStart"](0, "svg", 3)(1, "defs")(2, "linearGradient", 4), 
            core["\u0275\u0275template"](3, MiniToolbarCfGradientIconComponent_div_0__svg_svg_1__svg_stop_3_Template, 1, 2, "stop", 5), 
            core["\u0275\u0275elementEnd"]()()()), 2 & rf) {
                var properties_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("id", properties_r1.id), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", properties_r1.colors);
            }
        }
        var _c0 = function(a0) {
            return {
                fill: a0
            };
        }, _c1 = function(a0, a1) {
            return {
                full: a0,
                compact: a1
            };
        };
        function MiniToolbarCfGradientIconComponent_div_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div"), core["\u0275\u0275template"](1, MiniToolbarCfGradientIconComponent_div_0__svg_svg_1_Template, 4, 2, "svg", 1), 
            core["\u0275\u0275element"](2, "pbi-office-icon", 2), core["\u0275\u0275elementEnd"]()), 
            2 & rf) {
                var properties_r1 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", properties_r1.colors.length > 1), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("name", ctx_r0.iconName)("disabled", ctx_r0.disabled)("ngStyle", core["\u0275\u0275pureFunction1"](5, _c0, properties_r1.reference))("ngClass", core["\u0275\u0275pureFunction2"](7, _c1, ctx_r0.iconMode === ctx_r0.iconModeEnum.Full, ctx_r0.iconMode === ctx_r0.iconModeEnum.Compact));
            }
        }
        var IconMode = function(IconMode) {
            return IconMode[IconMode.Full = 0] = "Full", IconMode[IconMode.Compact = 1] = "Compact", 
            IconMode;
        }({}), MiniToolbarCfGradientIconComponent = function(_super) {
            function MiniToolbarCfGradientIconComponent() {
                var _this = null !== _super && _super.apply(this, arguments) || this;
                return _this.iconModeEnum = IconMode, _this;
            }
            return (0, tslib_es6.__extends)(MiniToolbarCfGradientIconComponent, _super), MiniToolbarCfGradientIconComponent.prototype.ngOnInit = function() {
                this.gradientId$ = this.changes$("iconColors").pipe((0, map.U)(function(colors) {
                    return function(colors) {
                        if (colors && !_.isEmpty(colors)) {
                            if (colors.length > 1) {
                                for (var id = "", i = 0; i < colors.length; i++) {
                                    var color = colors[i];
                                    /#/g.test(color) ? id += color.replace(/#/g, "") : /^rgb/gi.test(color) && (id += rgbToHex(color)), 
                                    i < colors.length - 1 && (id += "-");
                                }
                                return id;
                            }
                            if (id = _.first(colors)) return /^rgb/gi.test(id) && (id = "#".concat(rgbToHex(id))), 
                            id;
                        }
                        return "";
                    }(colors);
                })), this.fillColorProperties$ = (0, combineLatest.aj)([ this.gradientId$, this.changes$("iconColors") ]).pipe((0, 
                map.U)(function(_a) {
                    var id = _a[0], colors = _a[1];
                    return {
                        id,
                        colors: null != colors ? colors : [],
                        reference: colors && colors.length > 1 ? "url(#".concat(id, ")") : "".concat(id)
                    };
                }));
            }, MiniToolbarCfGradientIconComponent.\u0275fac = function() {
                var \u0275MiniToolbarCfGradientIconComponent_BaseFactory;
                return function(t) {
                    return (\u0275MiniToolbarCfGradientIconComponent_BaseFactory || (\u0275MiniToolbarCfGradientIconComponent_BaseFactory = core["\u0275\u0275getInheritedFactory"](MiniToolbarCfGradientIconComponent)))(t || MiniToolbarCfGradientIconComponent);
                };
            }(), MiniToolbarCfGradientIconComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarCfGradientIconComponent,
                selectors: [ [ "mini-toolbar-cf-gradient-icon" ] ],
                inputs: {
                    disabled: "disabled",
                    iconName: "iconName",
                    iconColors: "iconColors",
                    iconMode: "iconMode"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ 4, "ngIf" ], [ "class", "cf-gradient-container", 4, "ngIf" ], [ 3, "name", "disabled", "ngStyle", "ngClass" ], [ 1, "cf-gradient-container" ], [ 3, "id" ], [ 4, "ngFor", "ngForOf" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, MiniToolbarCfGradientIconComponent_div_0_Template, 3, 10, "div", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.fillColorProperties$));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, common.NgStyle, pbi_office_icon_component.m, common.AsyncPipe ],
                styles: [ ".cf-gradient-container[_ngcontent-%COMP%]{height:0;width:0}pbi-office-icon.full[_ngcontent-%COMP%]{padding-right:1px;width:24px;height:20px}pbi-office-icon.compact[_ngcontent-%COMP%]{width:20px;height:20px}" ],
                changeDetection: 0
            }), MiniToolbarCfGradientIconComponent;
        }(rx_component.w);
        function rgbToHex(rgbString) {
            var hex = "", result = /^rgb\(\s*(-?\d+)(%?)\s*,\s*(-?\d+)(%?)\s*,\s*(-?\d+)(%?)\s*\)$/.exec(rgbString);
            return result && (hex = (16777216 + (componentFromStr(result[1], !!result[2]) << 16) + (componentFromStr(result[3], !!result[4]) << 8) + componentFromStr(result[5], !!result[6])).toString(16).slice(1)), 
            hex;
        }
        function componentFromStr(numberSr, percent) {
            var num = Math.max(0, parseInt(numberSr, 10));
            return percent ? Math.floor(255 * Math.min(100, num) / 100) : Math.min(255, num);
        }
        var pbi_tooltip_directive = __webpack_require__(36858), MiniToolbarLargeButtonComponent = function(_super) {
            function MiniToolbarLargeButtonComponent() {
                var _this = null !== _super && _super.apply(this, arguments) || this;
                return _this.clicked = new core.EventEmitter, _this.ready = new core.EventEmitter, 
                _this.iconModeEnum = IconMode, _this;
            }
            return (0, tslib_es6.__extends)(MiniToolbarLargeButtonComponent, _super), MiniToolbarLargeButtonComponent.prototype.ngAfterViewInit = function() {
                this.ready.emit();
            }, MiniToolbarLargeButtonComponent.\u0275fac = function() {
                var \u0275MiniToolbarLargeButtonComponent_BaseFactory;
                return function(t) {
                    return (\u0275MiniToolbarLargeButtonComponent_BaseFactory || (\u0275MiniToolbarLargeButtonComponent_BaseFactory = core["\u0275\u0275getInheritedFactory"](MiniToolbarLargeButtonComponent)))(t || MiniToolbarLargeButtonComponent);
                };
            }(), MiniToolbarLargeButtonComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarLargeButtonComponent,
                selectors: [ [ "mini-toolbar-large-button" ] ],
                inputs: {
                    disabled: "disabled",
                    iconName: "iconName",
                    iconColors: "iconColors",
                    label: "label",
                    title: "title",
                    ariaHasPopup: "ariaHasPopup"
                },
                outputs: {
                    clicked: "clicked",
                    ready: "ready"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 6,
                vars: 10,
                consts: [ [ "data-automation-type", "mini-toolbar-button", 1, "mini-toolbar-button", "mini-toolbar-large-button", 3, "disabled", "pbiTooltip", "click" ], [ 1, "icon-container" ], [ 3, "disabled", "iconName", "iconColors", "iconMode" ], [ "name", "CommonControlChevronDown_12", 1, "chevron", 3, "disabled" ], [ 1, "label" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "button", 0), core["\u0275\u0275listener"]("click", function($event) {
                        return ctx.clicked.emit($event);
                    }), core["\u0275\u0275elementStart"](1, "div", 1), core["\u0275\u0275element"](2, "mini-toolbar-cf-gradient-icon", 2)(3, "pbi-office-icon", 3), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "div", 4), 
                    core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275property"]("disabled", ctx.disabled)("pbiTooltip", ctx.title), 
                    core["\u0275\u0275attribute"]("aria-label", ctx.label)("aria-haspopup", ctx.ariaHasPopup), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("disabled", ctx.disabled)("iconName", ctx.iconName)("iconColors", ctx.iconColors)("iconMode", ctx.iconModeEnum.Full), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("disabled", ctx.disabled), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](ctx.label));
                },
                dependencies: [ pbi_office_icon_component.m, pbi_tooltip_directive.V, MiniToolbarCfGradientIconComponent ],
                styles: [ '.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]{background:none;border:none;box-sizing:border-box;--buttonBackgroundSelected: var(--gray-40);--buttonColorSelected: var(--gray-180);flex:none;--buttonBackgroundHover: var(--gray-30);--buttonBackgroundSelectedHover: var(--gray-50);--buttonColorHover: var(--gray-180);display:flex;flex-direction:column;align-items:center;width:58px;height:60px;padding:5px 10px 8px}[data-legacy-theming=false][_ngcontent-%COMP%]   .mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]{--buttonBackgroundSelected: var(--colorNeutralBackground1Selected);--buttonBackgroundHover: var(--colorNeutralBackground1Hover);--buttonBackgroundSelectedHover: var(--colorNeutralBackground1Pressed);--buttonColorSelected: var(--colorNeutralForeground1Selected);--buttonColorHover: var(--colorNeutralForeground1Hover)}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:hover:not(:focus-visible), .mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:active:not(:focus-visible){border:none}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:hover:not(:disabled):not([disabled]):not(.disabled){background-color:var(--buttonBackgroundHover);color:var(--buttonColorHover)}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:active:not(:disabled):not([disabled]):not(.disabled), .mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:hover:active:not(:disabled):not([disabled]):not(.disabled){background-color:var(--buttonBackgroundSelectedHover);color:var(--buttonColorHover)}.mini-toolbar-button.mini-toolbar-large-button.ql-active[_ngcontent-%COMP%]:not(:hover):not(:active), .mini-toolbar-button.mini-toolbar-large-button.selected[_ngcontent-%COMP%]:not(:hover):not(:active){background-color:var(--buttonBackgroundSelected);color:var(--buttonColorSelected)}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:focus-visible{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:-1px}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:disabled, .mini-toolbar-button.mini-toolbar-large-button[disabled][_ngcontent-%COMP%], .mini-toolbar-button.mini-toolbar-large-button.disabled[_ngcontent-%COMP%]{background:none;color:var(--gray-90)}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:disabled   .icon[_ngcontent-%COMP%], .mini-toolbar-button.mini-toolbar-large-button[disabled][_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%], .mini-toolbar-button.mini-toolbar-large-button.disabled[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{opacity:40%}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{width:20px;height:20px}  [data-legacy-theming=false] .mini-toolbar-button.mini-toolbar-large-button{--buttonBackgroundHover: var(--colorNeutralBackground1Hover);--buttonBackgroundSelectedHover: var(--colorNeutralBackground1Pressed);--buttonColorHover: var(--colorNeutralForeground1Hover)}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:hover, .mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:active, .mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]:hover:active{background-color:var(--buttonBackgroundHover);color:var(--buttonColorHover)}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]   .icon-container[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;justify-content:center;align-self:flex-start;flex-grow:1}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]   .icon-container[_ngcontent-%COMP%]   .chevron[_ngcontent-%COMP%]{padding-left:1px;width:12px}.mini-toolbar-button.mini-toolbar-large-button[_ngcontent-%COMP%]   .label[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);text-overflow:ellipsis;overflow:hidden;white-space:nowrap;flex:none;width:inherit}' ],
                changeDetection: 0
            }), MiniToolbarLargeButtonComponent;
        }(rx_component.w), fesm2022_forms = __webpack_require__(17174), switchMap = __webpack_require__(81905), startWith = __webpack_require__(22318), takeUntil = __webpack_require__(83317), pluck = __webpack_require__(6181), shareReplay = __webpack_require__(57243), explore_formatting_lazy_load_routes = __webpack_require__(87644), pbi_menu_contracts = __webpack_require__(64560), pbi_overlay_ref = __webpack_require__(86286), visualContainerGroup2 = __webpack_require__(9215), selectionUtils = __webpack_require__(21728), formattingConstants = __webpack_require__(71286), gradientUtils = __webpack_require__(52083), textAlignment = __webpack_require__(19650), debug = __webpack_require__(62458), dataViewObjectDefinition1 = __webpack_require__(5265), sqExpr = __webpack_require__(94419), sqExprStaticMembers = __webpack_require__(74082), structuralType = __webpack_require__(58702), valueType = __webpack_require__(80777), formatting_contracts = __webpack_require__(89535), context_activity_utils = __webpack_require__(58609), context_activity_service = __webpack_require__(22292), lazy_scoped_provider = __webpack_require__(28894), undo_redo_service = __webpack_require__(84281), pbi_menu_container = __webpack_require__(38561);
        function OnObjectContextMenuComponent_ng_container_0_ng_container_1_pbi_menu_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r5 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-menu-container", 2), core["\u0275\u0275listener"]("menuButtonClick", function($event) {
                    core["\u0275\u0275restoreView"](_r5);
                    var ctx_r4 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r4.executeMenuItem($event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("menu", ctx_r3.menuFactoryObservable)("menuMode", ctx_r3.menuMode);
            }
        }
        function OnObjectContextMenuComponent_ng_container_0_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, OnObjectContextMenuComponent_ng_container_0_ng_container_1_pbi_menu_container_1_Template, 1, 2, "pbi-menu-container", 1), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var menu_r2 = ctx.ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", menu_r2.items && menu_r2.items.length > 0);
            }
        }
        function OnObjectContextMenuComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, OnObjectContextMenuComponent_ng_container_0_ng_container_1_Template, 2, 1, "ng-container", 0), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r0.menu$));
            }
        }
        var OnObjectContextMenuComponent = function(_super) {
            function OnObjectContextMenuComponent(changeDetectorRef, contextActivityService, lazyScoped, undoRedo) {
                var _this = _super.call(this) || this;
                return _this.changeDetectorRef = changeDetectorRef, _this.contextActivityService = contextActivityService, 
                _this.lazyScoped = lazyScoped, _this.undoRedo = undoRedo, _this.onExecuteContextMenuAction = new core.EventEmitter, 
                _this.menuMode = pbi_menu_contracts.Kb.Full, _this.menuFactoryObservable = function() {
                    return _this.menu$;
                }, _this;
            }
            return (0, tslib_es6.__extends)(OnObjectContextMenuComponent, _super), OnObjectContextMenuComponent.prototype.ngOnInit = function() {
                var _this = this;
                Promise.all([ this.lazyScoped.get(explore_formatting_lazy_load_routes.ub), this.lazyScoped.get(explore_formatting_lazy_load_routes.Vj) ]).then(function(_a) {
                    var formattingUIService = _a[1];
                    _this.formattingService = _a[0];
                    var menuGenerated$ = _this.changes$("subSelectionUpdateArgs").pipe((0, pluck.j)("canvasItem"), (0, 
                    map.U)(function(canvasItem) {
                        return canvasItem ? [ canvasItem ] : void 0;
                    })).pipe((0, switchMap.w)(function(containers) {
                        return containers ? formattingUIService.getSubSelectionStyleShortcutsForCanvasItems$(containers) : formattingUIService.getSubSelectionStyleShortcutsForNonCanvasItems$(_this.subSelectionShortcuts);
                    }));
                    _this.menu$ = _this.changes$("menuInput$", !0).pipe((0, switchMap.w)(function(menuInput$) {
                        return menuInput$ || menuGenerated$;
                    })), _this.changeDetectorRef.detectChanges();
                });
            }, OnObjectContextMenuComponent.prototype.executeMenuItem = function(button) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var action;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            switch ((action = button.data).type) {
                              case 0:
                                return [ 3, 1 ];

                              case 1:
                                return [ 3, 3 ];

                              case 2:
                                return [ 3, 5 ];

                              case 3:
                                return [ 3, 7 ];

                              case 4:
                                return [ 3, 9 ];

                              case 6:
                                return [ 3, 11 ];

                              case 5:
                                return [ 3, 13 ];

                              case 9:
                                return [ 3, 14 ];
                            }
                            return [ 3, 16 ];

                          case 1:
                            return [ 4, this.executeResetShortcut(action) ];

                          case 2:
                          case 4:
                          case 6:
                          case 8:
                          case 10:
                          case 12:
                          case 15:
                            return _b.sent(), [ 3, 16 ];

                          case 3:
                            return [ 4, this.executeNavigateShortcut(action) ];

                          case 5:
                            return [ 4, this.executeToggleShortcut(action) ];

                          case 7:
                            return [ 4, this.executePickerShortcut(action) ];

                          case 9:
                            return [ 4, this.executeSortShortcut(action, button.checked) ];

                          case 11:
                            return [ 4, this.executeConditionalFormattingShortcut(action) ];

                          case 13:
                            return this.executeCustomActionShortcut(action), [ 3, 16 ];

                          case 14:
                            return [ 4, this.executeSetValueShortcut(action) ];

                          case 16:
                            return this.onExecuteContextMenuAction.emit(), [ 2 ];
                        }
                    });
                });
            }, OnObjectContextMenuComponent.prototype.executeResetShortcut = function(action) {
                var _a, _b, _c, _this = this;
                debug.fF.assert(function() {
                    return !!_this.subSelectionUpdateArgs;
                }, "requires subselectionUpdateArgs to be defined - executePickerShortcut");
                var result, canvasItem = (_a = this.subSelectionUpdateArgs).canvasItem, objectName = null === (_c = null === (_b = _a.subSelections[0]) || void 0 === _b ? void 0 : _b.visualSubSelection.visualObjects[0]) || void 0 === _c ? void 0 : _c.objectName, revertToDefaultActivity = (0, 
                context_activity_utils.hF)(this.contextActivityService, {
                    name: "Revert To Default",
                    visualName: canvasItem.name,
                    data: {
                        objectName,
                        source: "ContextMenu",
                        contextMenuType: "Visual"
                    }
                }), sortShortcut = this.subSelectionShortcuts.find(function(shortcut) {
                    return 4 === shortcut.type;
                }), resetShortcut = {
                    type: 0,
                    revertToDefaultDescriptors: action.revertToDefaultDescriptors,
                    resetSortRoleKey: null == sortShortcut ? void 0 : sortShortcut.key,
                    telemetrySource: {
                        source: "ContextMenu",
                        contextMenuType: "Visual"
                    }
                };
                return this.undoRedo.register("reset shortcuts", function() {
                    result = _this.getFormatModeService().then(function(formatModeService) {
                        return formatModeService.executeShortcut([ {
                            canvasItem,
                            shortcut: resetShortcut
                        } ], revertToDefaultActivity);
                    }).then(function() {
                        return revertToDefaultActivity.resolve();
                    }).catch(function(exception) {
                        throw revertToDefaultActivity.reject(exception), exception;
                    });
                }), result;
            }, OnObjectContextMenuComponent.prototype.executeNavigateShortcut = function(action) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var shortcut, formatModeService;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return (shortcut = action.shortcut).togglePaneVisibility = !0, [ 4, this.getFormatModeService() ];

                          case 1:
                            return formatModeService = _b.sent(), this.contextActivityService.createActivity({
                                name: "ExecuteNavigateShortcut",
                                data: {
                                    source: "ContextMenu",
                                    contextMenuType: "Visual"
                                }
                            }).resolve(), [ 2, formatModeService.executeShortcut([ {
                                canvasItem: null === (_a = this.subSelectionUpdateArgs) || void 0 === _a ? void 0 : _a.canvasItem,
                                shortcut
                            } ]) ];
                        }
                    });
                });
            }, OnObjectContextMenuComponent.prototype.executeToggleShortcut = function(action) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var shortcut, canvasItem, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return shortcut = action.shortcut, debug.fF.assert(function() {
                                return !!_this.subSelectionUpdateArgs;
                            }, "requires subselectionUpdateArgs to be defined - executeToggleShortcut"), canvasItem = this.subSelectionUpdateArgs.canvasItem, 
                            [ 4, this.getFormatModeService() ];

                          case 1:
                            return [ 2, _a.sent().executeShortcut([ {
                                canvasItem,
                                shortcut
                            } ]) ];
                        }
                    });
                });
            }, OnObjectContextMenuComponent.prototype.executeConditionalFormattingShortcut = function(action) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var shortcut, canvasItem, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return shortcut = action.shortcut, debug.fF.assert(function() {
                                return !!_this.subSelectionUpdateArgs;
                            }, "requires subselectionUpdateArgs to be defined - executeConditionalFormattingShortcut"), 
                            canvasItem = this.subSelectionUpdateArgs.canvasItem, [ 4, this.getFormatModeService() ];

                          case 1:
                            return [ 2, _a.sent().executeShortcut([ {
                                canvasItem,
                                shortcut
                            } ]) ];
                        }
                    });
                });
            }, OnObjectContextMenuComponent.prototype.executePickerShortcut = function(action) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var shortcut, canvasItem, _a, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return debug.fF.assert(function() {
                                return !!_this.subSelectionUpdateArgs;
                            }, "requires subselectionUpdateArgs to be defined - executePickerShortcut"), shortcut = {
                                type: 3,
                                index: action.index,
                                objectName: (_a = action.shortcut).objectName,
                                propertyName: _a.propertyName,
                                selector: _a.selector,
                                telemetrySource: {
                                    source: "ContextMenu",
                                    contextMenuType: "Visual"
                                }
                            }, canvasItem = this.subSelectionUpdateArgs.canvasItem, [ 4, this.getFormatModeService() ];

                          case 1:
                            return [ 2, _b.sent().executeShortcut([ {
                                canvasItem,
                                shortcut
                            } ]) ];
                        }
                    });
                });
            }, OnObjectContextMenuComponent.prototype.executeSortShortcut = function(action, checked) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var canvasItem, shortcut, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assert(function() {
                                return !!_this.subSelectionUpdateArgs;
                            }, "requires subselectionUpdateArgs to be defined - executeSortShortcut"), canvasItem = this.subSelectionUpdateArgs.canvasItem, 
                            shortcut = action.isSortField && checked ? {
                                type: 0,
                                resetSortRoleKey: action.sortGroup.key,
                                telemetrySource: {
                                    source: "ContextMenu",
                                    contextMenuType: "Visual"
                                }
                            } : {
                                type: 4,
                                sortableField: {
                                    queryName: action.sortField.exprs[0].name,
                                    sortDirection: action.sortDirection
                                },
                                key: action.sortGroup.key
                            }, [ 4, this.getFormatModeService() ];

                          case 1:
                            return [ 2, _a.sent().executeShortcut([ {
                                canvasItem,
                                shortcut
                            } ]) ];
                        }
                    });
                });
            }, OnObjectContextMenuComponent.prototype.executeCustomActionShortcut = function(action) {
                action.shortcut.customAction();
            }, OnObjectContextMenuComponent.prototype.executeSetValueShortcut = function(action) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var canvasItem, shortcut;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return canvasItem = this.subSelectionUpdateArgs.canvasItem, shortcut = {
                                type: 9,
                                referencesAndValues: action.shortcut.referencesAndValues,
                                icon: action.shortcut.icon,
                                telemetrySource: {
                                    source: "ContextMenu",
                                    contextMenuType: "Visual"
                                }
                            }, [ 4, this.getFormatModeService() ];

                          case 1:
                            return [ 2, _a.sent().executeShortcut([ {
                                canvasItem,
                                shortcut
                            } ]) ];
                        }
                    });
                });
            }, OnObjectContextMenuComponent.prototype.getFormatModeService = function() {
                return this.formatModeServicePromise || (this.formatModeServicePromise = this.lazyScoped.get("formatModeService")), 
                this.formatModeServicePromise;
            }, OnObjectContextMenuComponent.\u0275fac = function(t) {
                return new (t || OnObjectContextMenuComponent)(core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](context_activity_service.r), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](undo_redo_service.z));
            }, OnObjectContextMenuComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: OnObjectContextMenuComponent,
                selectors: [ [ "on-object-context-menu" ] ],
                hostVars: 1,
                hostBindings: function(rf, ctx) {
                    2 & rf && core["\u0275\u0275attribute"]("data-testid", "on-object-context-menu");
                },
                inputs: {
                    subSelectionUpdateArgs: "subSelectionUpdateArgs",
                    subSelectionStyles: "subSelectionStyles",
                    subSelectionShortcuts: "subSelectionShortcuts",
                    menuInput$: "menuInput$"
                },
                outputs: {
                    onExecuteContextMenuAction: "onExecuteContextMenuAction"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 1,
                vars: 1,
                consts: [ [ 4, "ngIf" ], [ "class", "menu-container", 3, "menu", "menuMode", "menuButtonClick", 4, "ngIf" ], [ 1, "menu-container", 3, "menu", "menuMode", "menuButtonClick" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, OnObjectContextMenuComponent_ng_container_0_Template, 3, 3, "ng-container", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", ctx.formattingService);
                },
                dependencies: [ common.NgIf, pbi_menu_container.m, common.AsyncPipe ],
                encapsulation: 2,
                changeDetection: 0
            }), OnObjectContextMenuComponent;
        }(rx_component.w), MiniToolbarContextMenuComponent = function() {
            function MiniToolbarContextMenuComponent(overlayData) {
                this.overlayData = overlayData;
            }
            return MiniToolbarContextMenuComponent.\u0275fac = function(t) {
                return new (t || MiniToolbarContextMenuComponent)(core["\u0275\u0275directiveInject"](pbi_overlay_ref.M));
            }, MiniToolbarContextMenuComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarContextMenuComponent,
                selectors: [ [ "mini-toolbar-context-menu" ] ],
                decls: 1,
                vars: 4,
                consts: [ [ 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectionShortcuts", "menuInput$", "onExecuteContextMenuAction" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "on-object-context-menu", 0), core["\u0275\u0275listener"]("onExecuteContextMenuAction", function() {
                        return ctx.overlayData.closeOverlays();
                    }), core["\u0275\u0275elementEnd"]()), 2 & rf && core["\u0275\u0275property"]("subSelectionUpdateArgs", ctx.overlayData.subSelectionUpdateArgs)("subSelectionStyles", ctx.overlayData.subSelectionStyles)("subSelectionShortcuts", ctx.overlayData.subSelectionShortcuts)("menuInput$", ctx.overlayData.menuInput$);
                },
                dependencies: [ OnObjectContextMenuComponent ],
                encapsulation: 2,
                changeDetection: 0
            }), MiniToolbarContextMenuComponent;
        }(), pbi_tooltip_contracts = __webpack_require__(14335), MiniToolbarWarningComponent = function() {
            function MiniToolbarWarningComponent(data) {
                this.data = data, this.warning = this.data;
            }
            return MiniToolbarWarningComponent.\u0275fac = function(t) {
                return new (t || MiniToolbarWarningComponent)(core["\u0275\u0275directiveInject"](pbi_tooltip_contracts.HK));
            }, MiniToolbarWarningComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarWarningComponent,
                selectors: [ [ "mini-toolbar-warning" ] ],
                decls: 2,
                vars: 2,
                consts: [ [ 1, "warning-tooltip-title", 3, "textContent" ], [ 3, "textContent" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275element"](0, "div", 0)(1, "div", 1), 2 & rf && (core["\u0275\u0275property"]("textContent", ctx.warning.title), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("textContent", ctx.warning.detail));
                },
                styles: [ ".warning-tooltip-title[_ngcontent-%COMP%]{font-weight:var(--font-weight-bold)}" ],
                changeDetection: 0
            }), MiniToolbarWarningComponent;
        }(), mini_toolbar_icon_component_c0 = function(a0) {
            return {
                fill: a0
            };
        };
        function MiniToolbarIconComponent_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275namespaceSVG"](), 
            core["\u0275\u0275elementStart"](1, "svg", 2), core["\u0275\u0275element"](2, "path", 3), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngStyle", core["\u0275\u0275pureFunction1"](1, mini_toolbar_icon_component_c0, ctx_r0.iconColor));
            }
        }
        var mini_toolbar_icon_component_c1 = function(a0, a1, a2) {
            return {
                toggled: a0,
                narrow: a1,
                disabled: a2
            };
        }, MiniToolbarIconComponent = function() {
            function MiniToolbarIconComponent() {}
            return MiniToolbarIconComponent.\u0275fac = function(t) {
                return new (t || MiniToolbarIconComponent);
            }, MiniToolbarIconComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarIconComponent,
                selectors: [ [ "mini-toolbar-icon" ] ],
                inputs: {
                    iconType: "iconType",
                    iconColor: "iconColor",
                    iconToggled: "iconToggled",
                    iconNarrow: "iconNarrow",
                    iconDisabled: "iconDisabled"
                },
                decls: 2,
                vars: 6,
                consts: [ [ 1, "container", 3, "ngClass" ], [ 4, "ngIf" ], [ "height", "100%", "width", "100%", "viewBox", "0,0,2048,2048", "focusable", "false", 3, "ngStyle" ], [ "d", "M1472 0l576 576L576 2048 0 1472 1472 0zM181 1472l395 395L1867 576l-395-395-88 88 115 115-91 91-115-115-165 165 197 198-90 90-198-197-165 165 115 116-90 90-116-115-165 165 197 198-90 90-198-197-165 165 115 115-91 91-115-115-88 88z" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275template"](1, MiniToolbarIconComponent_ng_container_1_Template, 3, 3, "ng-container", 1), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction3"](2, mini_toolbar_icon_component_c1, ctx.iconToggled, ctx.iconNarrow, ctx.iconDisabled)), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", "DisplayUnits" === ctx.iconType));
                },
                dependencies: [ common.NgClass, common.NgIf, common.NgStyle ],
                styles: [ "svg[_ngcontent-%COMP%]   path.iconFillTransparent[_ngcontent-%COMP%]{fill:transparent}svg[_ngcontent-%COMP%]   path.iconFillInherit[_ngcontent-%COMP%]{fill:inherit}svg[_ngcontent-%COMP%]   path.iconFill1[_ngcontent-%COMP%]{fill:#fafafa}svg[_ngcontent-%COMP%]   path.iconFill2[_ngcontent-%COMP%]{fill:#c8c6c4}svg[_ngcontent-%COMP%]   path.iconFill3[_ngcontent-%COMP%]{fill:#3a3a38}svg[_ngcontent-%COMP%]   path.iconFill4[_ngcontent-%COMP%]{fill:#1e8bcd}svg[_ngcontent-%COMP%]   path.iconFill5[_ngcontent-%COMP%]{fill:#0063b1}svg[_ngcontent-%COMP%]   path.iconFill6[_ngcontent-%COMP%]{fill:#83beec}svg[_ngcontent-%COMP%]   path.iconFill7[_ngcontent-%COMP%]{fill:#252423}svg[_ngcontent-%COMP%]   path.iconFillWhite[_ngcontent-%COMP%]{fill:#fff}.toggled[_ngcontent-%COMP%]{background-color:#d3d3d3}.container[_ngcontent-%COMP%]{width:20px;height:20px;display:inline-block}.container.narrow[_ngcontent-%COMP%]{width:10px}.container.disabled[_ngcontent-%COMP%]{opacity:.2}" ],
                changeDetection: 0
            }), MiniToolbarIconComponent;
        }();
        function MiniToolbarButtonComponent_mini_toolbar_icon_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "mini-toolbar-icon", 4), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("iconType", ctx_r0.iconName);
            }
        }
        function MiniToolbarButtonComponent_ng_template_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "mini-toolbar-cf-gradient-icon", 5), 
            2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("disabled", ctx_r2.disabled)("iconName", ctx_r2.iconName)("iconColors", ctx_r2.iconColors)("iconMode", ctx_r2.iconModeEnum.Compact);
            }
        }
        function MiniToolbarButtonComponent_div_4_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementStart"](0, "div", 6), core["\u0275\u0275element"](1, "pbi-office-icon", 7), 
            core["\u0275\u0275elementEnd"]());
        }
        var MiniToolbarButtonComponent = function() {
            function MiniToolbarButtonComponent() {
                this.customIcon = !1, this.showChevron = !1, this.clicked = new core.EventEmitter, 
                this.iconModeEnum = IconMode;
            }
            return MiniToolbarButtonComponent.\u0275fac = function(t) {
                return new (t || MiniToolbarButtonComponent);
            }, MiniToolbarButtonComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarButtonComponent,
                selectors: [ [ "mini-toolbar-button" ] ],
                inputs: {
                    disabled: "disabled",
                    iconName: "iconName",
                    iconColors: "iconColors",
                    selected: "selected",
                    customIcon: "customIcon",
                    showChevron: "showChevron",
                    ariaLabel: "ariaLabel",
                    ariaHasPopup: "ariaHasPopup"
                },
                outputs: {
                    clicked: "clicked"
                },
                decls: 5,
                vars: 11,
                consts: [ [ "data-automation-type", "mini-toolbar-button", 1, "mini-toolbar-button", 3, "disabled", "click" ], [ "class", "icon", 3, "iconType", 4, "ngIf", "ngIfElse" ], [ "officeIconBlock", "" ], [ "class", "chevron-container", 4, "ngIf" ], [ 1, "icon", 3, "iconType" ], [ 3, "disabled", "iconName", "iconColors", "iconMode" ], [ 1, "chevron-container" ], [ "name", "CommonControlChevronDown_12", 1, "icon" ] ],
                template: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275elementStart"](0, "button", 0), core["\u0275\u0275listener"]("click", function($event) {
                        return !ctx.disabled && ctx.clicked.emit($event);
                    }), core["\u0275\u0275template"](1, MiniToolbarButtonComponent_mini_toolbar_icon_1_Template, 1, 1, "mini-toolbar-icon", 1), 
                    core["\u0275\u0275template"](2, MiniToolbarButtonComponent_ng_template_2_Template, 1, 4, "ng-template", null, 2, core["\u0275\u0275templateRefExtractor"]), 
                    core["\u0275\u0275template"](4, MiniToolbarButtonComponent_div_4_Template, 2, 0, "div", 3), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf) {
                        var _r1 = core["\u0275\u0275reference"](3);
                        core["\u0275\u0275classProp"]("selected", ctx.selected)("show-chevron", ctx.showChevron), 
                        core["\u0275\u0275property"]("disabled", ctx.disabled), core["\u0275\u0275attribute"]("aria-haspopup", ctx.ariaHasPopup)("aria-label", ctx.ariaLabel)("aria-pressed", ctx.selected), 
                        core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.customIcon)("ngIfElse", _r1), 
                        core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx.showChevron);
                    }
                },
                dependencies: [ common.NgIf, pbi_office_icon_component.m, MiniToolbarCfGradientIconComponent, MiniToolbarIconComponent ],
                styles: [ "[_nghost-%COMP%]{display:flex;flex-direction:row}.mini-toolbar-button[_ngcontent-%COMP%]{background:none;border:none;box-sizing:border-box;--buttonBackgroundSelected: var(--gray-40);--buttonBackgroundHover: var(--gray-30);--buttonBackgroundSelectedHover: var(--gray-50);--buttonColorSelected: var(--gray-180);--buttonColorHover: var(--gray-180);flex:none}[data-legacy-theming=false][_ngcontent-%COMP%]   .mini-toolbar-button[_ngcontent-%COMP%]{--buttonBackgroundSelected: var(--colorNeutralBackground1Selected);--buttonBackgroundHover: var(--colorNeutralBackground1Hover);--buttonBackgroundSelectedHover: var(--colorNeutralBackground1Pressed);--buttonColorSelected: var(--colorNeutralForeground1Selected);--buttonColorHover: var(--colorNeutralForeground1Hover)}.mini-toolbar-button[_ngcontent-%COMP%]:hover:not(:focus-visible), .mini-toolbar-button[_ngcontent-%COMP%]:active:not(:focus-visible){border:none}.mini-toolbar-button[_ngcontent-%COMP%]:hover:not(:disabled):not([disabled]):not(.disabled){background-color:var(--buttonBackgroundHover);color:var(--buttonColorHover)}.mini-toolbar-button[_ngcontent-%COMP%]:active:not(:disabled):not([disabled]):not(.disabled), .mini-toolbar-button[_ngcontent-%COMP%]:hover:active:not(:disabled):not([disabled]):not(.disabled){background-color:var(--buttonBackgroundSelectedHover);color:var(--buttonColorHover)}.mini-toolbar-button.ql-active[_ngcontent-%COMP%]:not(:hover):not(:active), .mini-toolbar-button.selected[_ngcontent-%COMP%]:not(:hover):not(:active){background-color:var(--buttonBackgroundSelected);color:var(--buttonColorSelected)}.mini-toolbar-button[_ngcontent-%COMP%]:focus-visible{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:-1px}.mini-toolbar-button[_ngcontent-%COMP%]:disabled, .mini-toolbar-button[disabled][_ngcontent-%COMP%], .mini-toolbar-button.disabled[_ngcontent-%COMP%]{background:none;color:var(--gray-90)}.mini-toolbar-button[_ngcontent-%COMP%]:disabled   .icon[_ngcontent-%COMP%], .mini-toolbar-button[disabled][_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%], .mini-toolbar-button.disabled[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{opacity:40%}.mini-toolbar-button[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{width:20px;height:20px}.mini-toolbar-button[_ngcontent-%COMP%]{width:28px;height:28px;padding:4px;display:flex;align-items:center;justify-content:center}.mini-toolbar-button.show-chevron[_ngcontent-%COMP%]{width:48px}.chevron-container[_ngcontent-%COMP%]{width:20px;padding:0 0 0 4px;display:flex;align-items:center;justify-content:center}.chevron-container[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{width:12px;height:12px}" ],
                changeDetection: 0
            }), MiniToolbarButtonComponent;
        }(), format_mode_lazy_load_routes = __webpack_require__(10342), promiseFactory = __webpack_require__(14463), Subject = __webpack_require__(30794), ReplaySubject = __webpack_require__(33554), selection_service = __webpack_require__(72262), FormattingUIManagerService = function() {
            function FormattingUIManagerService(selectionService) {
                this.selectionService = selectionService, this.contextMenuActionExecuted$ = new Subject.xQ, 
                this.miniToolbarActionTouched$ = new Subject.xQ, this.formatPaneRegistered$ = new ReplaySubject.t(1), 
                this.formatPaneCardExpansion$ = new ReplaySubject.t(1);
            }
            return FormattingUIManagerService.prototype.executeContextMenuAction = function() {
                this.contextMenuActionExecuted$.next();
            }, FormattingUIManagerService.prototype.onMiniToolbarTouched = function() {
                this.miniToolbarActionTouched$.next();
            }, FormattingUIManagerService.prototype.registerFormatPane = function() {
                this.formatPaneRegistered$.next(!0);
            }, FormattingUIManagerService.prototype.deregisterFormatPane = function() {
                this.formatPaneRegistered$.next(!1);
            }, FormattingUIManagerService.prototype.getFormatPaneRegistered$ = function() {
                return this.formatPaneRegistered$;
            }, FormattingUIManagerService.prototype.getFormatPaneCardExpansion$ = function() {
                return this.formatPaneCardExpansion$;
            }, FormattingUIManagerService.prototype.setFormatPaneCardExpansion = function(options) {
                this.formatPaneCardExpansion$.next(options);
            }, FormattingUIManagerService.prototype.markCardNavigationAsHandled = function() {
                this.formatPaneCardExpansion$.next(void 0);
            }, FormattingUIManagerService.prototype.handleFormatPaneInteraction = function() {
                selectionUtils.UP.clearSubSelections(this.selectionService);
            }, FormattingUIManagerService.\u0275fac = function(t) {
                return new (t || FormattingUIManagerService)(core["\u0275\u0275inject"](selection_service.z));
            }, FormattingUIManagerService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingUIManagerService,
                factory: FormattingUIManagerService.\u0275fac
            }), FormattingUIManagerService;
        }(), FormattingUIManagerServiceLazyProvider = {
            provide: format_mode_lazy_load_routes.a,
            useFactory: function(promiseFactory, formattingUIManagerService) {
                return promiseFactory.resolve(formattingUIManagerService);
            },
            deps: [ promiseFactory.t, FormattingUIManagerService ]
        }, item_picker_service = __webpack_require__(4877), localization_service = __webpack_require__(65181), pbi_menu_service = __webpack_require__(5467), pbi_overlay_service = __webpack_require__(86940), running_visual_service = __webpack_require__(8082), font_picker_component = __webpack_require__(91146), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_strategy_util = __webpack_require__(45924), filter = __webpack_require__(59973), take = __webpack_require__(48787), withLatestFrom = __webpack_require__(23558), pbi_dropdown_service = __webpack_require__(84354), PbiDropdownAutocompleteStrategy = function() {
            function PbiDropdownAutocompleteStrategy(pbiDropdownService) {
                var _this = this;
                this.pbiDropdownService = pbiDropdownService, this.autocompleteElementRef$ = this.pbiDropdownService.select$("autocompleteElementRef"), 
                this.compact$ = this.pbiDropdownService.select$("compact"), this.disabled$ = this.pbiDropdownService.select$("disabled"), 
                this.dropdownItems$ = this.pbiDropdownService.select$("dropdownItems"), this.elementRef$ = this.pbiDropdownService.select$("elementRef"), 
                this.isInputFocused$ = this.pbiDropdownService.select$("containerFocused"), this.isOpen$ = this.pbiDropdownService.select$("open"), 
                this.overlayRef$ = this.pbiDropdownService.select$("overlayRef");
                var onDestroy$ = this.pbiDropdownService.onDestroy$;
                this.dropdownItems$.pipe((0, filter.h)(function(dropdownItems) {
                    return !!dropdownItems;
                }), (0, take.q)(1)).subscribe(function(dropdownItems) {
                    dropdownItems.changes.pipe((0, takeUntil.R)(onDestroy$), (0, map.U)(function(items) {
                        return items.length;
                    }), (0, startWith.O)(dropdownItems.length), (0, withLatestFrom.M)(_this.overlayRef$, _this.compact$, _this.elementRef$)).subscribe(function(_a) {
                        var totalItems = _a[0], overlayRef = _a[1], compact = _a[2];
                        if (overlayRef) {
                            var boundingRectangle = _a[3].nativeElement.getBoundingClientRect(), minHeight = _this.getDropdownHeight(boundingRectangle, totalItems, compact);
                            overlayRef.overlayRef.updateSize({
                                minHeight
                            });
                        }
                        _this.pbiDropdownService.updateState({
                            totalItems,
                            overlayRef
                        });
                    });
                }), this.isInputFocused$.pipe((0, takeUntil.R)(onDestroy$), (0, withLatestFrom.M)(this.autocompleteElementRef$, this.isOpen$), (0, 
                filter.h)(function(_a) {
                    return !!_a[1];
                })).subscribe(function(_a) {
                    var el = _a[1], isOpen = _a[2];
                    _a[0] && (el.nativeElement.focus(), el.nativeElement.select(), isOpen || _this.pbiDropdownService.toggleOpenState());
                }), (0, combineLatest.aj)([ this.autocompleteElementRef$, this.disabled$, this.isOpen$ ]).pipe((0, 
                takeUntil.R)(onDestroy$), (0, filter.h)(function(_a) {
                    return !!_a[0];
                })).subscribe(function(_a) {
                    return _this.updateAttributes(_a[0], _a[1], _a[2]);
                });
            }
            return PbiDropdownAutocompleteStrategy.prototype.getDropdownHeight = function(boundingRectangle, totalItems, compact) {
                return (0, pbi_dropdown_strategy_util.z)(boundingRectangle, totalItems, compact);
            }, PbiDropdownAutocompleteStrategy.prototype.buttonKeydown = function(event) {
                var _this = this;
                (0, combineLatest.aj)([ this.dropdownItems$, this.isOpen$ ]).pipe((0, filter.h)(function(_a) {
                    return !!_a[0];
                }), (0, withLatestFrom.M)(this.overlayRef$, this.isInputFocused$), (0, take.q)(1)).subscribe(function(_a) {
                    var _b = _a[0], dropdownItems = _b[0], overlayRef = _a[1], isInputFocused = _a[2];
                    if (_b[1]) switch (event.keyCode) {
                      case 40:
                        if (!isInputFocused) break;
                        event.stopPropagation();

                      case 36:
                      case 33:
                        dropdownItems.first.focus(), event.preventDefault();
                        break;

                      case 38:
                        if (!isInputFocused) break;
                        event.stopPropagation();

                      case 35:
                      case 34:
                        dropdownItems.last.focus(), event.preventDefault();
                        break;

                      case 27:
                        _this.closeDropdown(overlayRef), event.preventDefault(), event.stopPropagation();
                        break;

                      case 9:
                        isInputFocused && _this.closeDropdown(overlayRef);
                        break;

                      case 32:
                        event.stopPropagation();
                        break;

                      default:
                        _this.autoSelect(event.key, dropdownItems);
                    } else switch (event.keyCode) {
                      case 13:
                      case 38:
                      case 40:
                        _this.pbiDropdownService.toggleOpenState(), event.preventDefault();
                        break;

                      case 36:
                      case 33:
                        _this.pbiDropdownService.onSelectionChange({
                            value: dropdownItems.first.value
                        }), event.preventDefault();
                        break;

                      case 35:
                      case 34:
                        _this.pbiDropdownService.onSelectionChange({
                            value: dropdownItems.last.value
                        }), event.preventDefault();
                        break;

                      case 32:
                        event.stopPropagation();
                    }
                });
            }, PbiDropdownAutocompleteStrategy.prototype.containerFocused = function(containerFocused) {
                this.pbiDropdownService.updateState({
                    containerFocused
                });
            }, PbiDropdownAutocompleteStrategy.prototype.closeDropdown = function(overlayRef) {
                overlayRef.close(), this.pbiDropdownService.updateState({
                    overlayRef: overlayRef = void 0,
                    open: !1
                });
            }, PbiDropdownAutocompleteStrategy.prototype.autoSelect = function(userInput, pbiDropdownItemComponents) {
                var firstMatch = pbiDropdownItemComponents.find(function(comp) {
                    return comp.item.nativeElement.textContent.toLocaleLowerCase().startsWith(userInput.toLocaleLowerCase());
                });
                firstMatch && firstMatch.focus();
            }, PbiDropdownAutocompleteStrategy.prototype.updateAttributes = function(el, disabled, isOpen) {
                var nativeElement = el.nativeElement;
                nativeElement.setAttribute("role", "combobox"), nativeElement.setAttribute("aria-haspopup", "listbox"), 
                nativeElement.setAttribute("aria-autocomplete", "list"), nativeElement.setAttribute("aria-expanded", isOpen), 
                nativeElement.style.cursor = "text", nativeElement.style.border = "none", nativeElement.style.outline = "none", 
                nativeElement.style.flexGrow = 1, disabled ? (nativeElement.setAttribute("disabled", !0), 
                nativeElement.style.backgroundColor = "var(--gray-20, @gray-20)", nativeElement.style.color = "var(--gray-90, @gray-90)", 
                nativeElement.style.pointerEvents = "none") : (nativeElement.removeAttribute("disabled"), 
                nativeElement.style.backgroundColor = null, nativeElement.style.color = null, nativeElement.style.pointerEvents = null);
            }, PbiDropdownAutocompleteStrategy.\u0275fac = function(t) {
                return new (t || PbiDropdownAutocompleteStrategy)(core["\u0275\u0275inject"](pbi_dropdown_service.S));
            }, PbiDropdownAutocompleteStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: PbiDropdownAutocompleteStrategy,
                factory: PbiDropdownAutocompleteStrategy.\u0275fac
            }), PbiDropdownAutocompleteStrategy;
        }(), scheduled = __webpack_require__(26333), queue = __webpack_require__(31343), fromEvent = __webpack_require__(59787), pbi_dropdown_autocomplete_directive_c0 = [ "autocompleteInput" ], PbiDropdownAutocompleteDirective = function() {
            function PbiDropdownAutocompleteDirective(elementRef, pbiDropdownService, strategy) {
                this.elementRef = elementRef, this.pbiDropdownService = pbiDropdownService, this.strategy = strategy, 
                this.onDestroy$ = this.pbiDropdownService.onDestroy$;
            }
            return PbiDropdownAutocompleteDirective.prototype.ngAfterViewInit = function() {
                var _this = this;
                (0, scheduled.x)([ {
                    autocompleteElementRef: this.autocompleteInput,
                    dropdownItems: this.dropdownItems,
                    strategy: this.strategy
                } ], queue.N).subscribe(function(newValues) {
                    _this.pbiDropdownService.updateState(newValues);
                }), (0, fromEvent.R)(this.elementRef.nativeElement.children[0], "focus").pipe((0, 
                takeUntil.R)(this.onDestroy$)).subscribe(function() {
                    _this.strategy.containerFocused && _this.strategy.containerFocused(!0);
                }), (0, fromEvent.R)(this.autocompleteInput.nativeElement, "blur").pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function() {
                    _this.strategy.containerFocused && _this.strategy.containerFocused(!1);
                });
            }, PbiDropdownAutocompleteDirective.\u0275fac = function(t) {
                return new (t || PbiDropdownAutocompleteDirective)(core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](pbi_dropdown_service.S), core["\u0275\u0275directiveInject"](PbiDropdownAutocompleteStrategy));
            }, PbiDropdownAutocompleteDirective.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiDropdownAutocompleteDirective,
                selectors: [ [ "pbi-dropdown", "dropdown-type", "autocomplete" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    if (1 & rf && (core["\u0275\u0275contentQuery"](dirIndex, pbi_dropdown_autocomplete_directive_c0, 5), 
                    core["\u0275\u0275contentQuery"](dirIndex, pbi_dropdown_item_component.r, 5)), 2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.autocompleteInput = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.dropdownItems = _t);
                    }
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ PbiDropdownAutocompleteStrategy ]) ]
            }), PbiDropdownAutocompleteDirective;
        }(), pbi_dropdown_component = __webpack_require__(76492), pbi_spin_button_component = __webpack_require__(78173), localize_pipe = __webpack_require__(85102);
        function MiniToolbarAlignmentComponent_mini_toolbar_button_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r3 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "mini-toolbar-button", 2), core["\u0275\u0275listener"]("clicked", function() {
                    var alignment_r1 = core["\u0275\u0275restoreView"](_r3).$implicit, ctx_r2 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r2.clicked(alignment_r1.value));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var alignment_r1 = ctx.$implicit;
                core["\u0275\u0275property"]("iconName", alignment_r1.icon), core["\u0275\u0275attribute"]("data-automation-id", alignment_r1.icon);
            }
        }
        var mini_toolbar_component_c0 = [ "backgroundColorDropdown" ], mini_toolbar_component_c1 = [ "fillColorDropdown" ], _c2 = [ "fontColorDropdown" ], _c3 = [ "lineColorDropdown" ], _c4 = [ "alignDropdown" ], _c5 = [ "displayUnitsDropdown" ], _c6 = [ "largeBorderDropdown" ], _c7 = [ "largeGridDropdown" ], _c8 = [ "self" ];
        function MiniToolbarComponent_ng_container_0_div_5_ng_container_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r14 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "mini-toolbar-button", 13, 14), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var viewModel_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r12 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r12.displayUnitsClicked(viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"](2).ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaHasPopup", "menu")("ariaLabel", core["\u0275\u0275pipeBind1"](3, 5, "Visual_Forecast_Parameter_Units"))("disabled", viewModel_r1.disabled.displayUnits)("customIcon", !0)("showChevron", !0);
            }
        }
        var _c9 = function(a0) {
            return {
                warning: a0
            };
        };
        function MiniToolbarComponent_ng_container_0_div_5_Template(rf, ctx) {
            if (1 & rf) {
                var _r18 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 6)(1, "font-picker", 9), core["\u0275\u0275listener"]("onFontFamilyChange", function($event) {
                    core["\u0275\u0275restoreView"](_r18);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r16 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r16.fontFamilyChanged($event, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "pbi-spin-button", 10), 
                core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r18);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r19 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r19.fontSizeChanged($event, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](5, "mini-toolbar-button", 11), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r18);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r21 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r21.adjustFontSize("increaseFontSize", viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](7, "mini-toolbar-button", 12), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r18);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r23 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r23.adjustFontSize("decreaseFontSize", viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](8, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](9, MiniToolbarComponent_ng_container_0_div_5_ng_container_9_Template, 4, 7, "ng-container", 0), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](2, 18, "Font"))("showFullContent", !0)("fontFamily", viewModel_r1.values.fontProperties.fontFamily)("isDisabled", viewModel_r1.disabled.fontProperties)("size", ctx_r3.fontFamilyPickerSize), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](26, _c9, !!viewModel_r1.warnings.fontSize))("ariaLabel", core["\u0275\u0275pipeBind1"](4, 20, "FontSize"))("ngModel", viewModel_r1.values.fontProperties.fontSize)("options", ctx_r3.fontSizeSpinButtonOptions)("disabled", viewModel_r1.disabled.fontProperties || viewModel_r1.disabled.fontSize)("size", ctx_r3.fontSizePickerSize)("pbiTooltip", viewModel_r1.warnings.fontSize ? ctx_r3.MiniToolbarWarningComponent : void 0)("pbiTooltipComponentData", viewModel_r1.warnings.fontSize || void 0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](6, 22, "Visual_IncreaseFontSize"))("disabled", viewModel_r1.disabled.increaseFontSize), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](8, 24, "Visual_DecreaseFontSize"))("disabled", viewModel_r1.disabled.decreaseFontSize), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", "NumericText" === viewModel_r1.mode);
            }
        }
        function MiniToolbarComponent_ng_container_0_ng_container_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r28 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "mini-toolbar-button", 15), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r28);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r26 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r26.biuChanged("bold", !viewModel_r1.values.bold, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "mini-toolbar-button", 16), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r28);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r29 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r29.biuChanged("italic", !viewModel_r1.values.italic, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](5, "mini-toolbar-button", 17), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r28);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r31 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r31.biuChanged("underline", !viewModel_r1.values.underline, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](2, 9, "Bold"))("selected", viewModel_r1.values.bold)("disabled", viewModel_r1.disabled.bold), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](4, 11, "Italic"))("selected", viewModel_r1.values.italic)("disabled", viewModel_r1.disabled.italic), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](6, 13, "Underline"))("selected", viewModel_r1.values.underline)("disabled", viewModel_r1.disabled.underline);
            }
        }
        function MiniToolbarComponent_ng_container_0_mini_toolbar_button_8_Template(rf, ctx) {
            if (1 & rf) {
                var _r37 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "mini-toolbar-button", 18, 19), core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r37);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r35 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r35.backgroundColorClicked(viewModel_r1.mode, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275property"]("iconColors", viewModel_r1.values.backgroundColors)("disabled", viewModel_r1.disabled.background)("showChevron", !0)("ariaHasPopup", "menu");
            }
        }
        function MiniToolbarComponent_ng_container_0_ng_container_9_pbi_dropdown_5_pbi_dropdown_item_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 29), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var item_r44 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r44), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"](" ", item_r44.visualSubSelection.displayName, " ");
            }
        }
        function MiniToolbarComponent_ng_container_0_ng_container_9_pbi_dropdown_5_Template(rf, ctx) {
            if (1 & rf) {
                var _r47 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-dropdown", 25), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r47);
                    var viewModel_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r45 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r45.onDisambiguationValueChange($event, viewModel_r1.subSelectionPosition));
                }), core["\u0275\u0275elementStart"](1, "pbi-dropdown-trigger"), core["\u0275\u0275element"](2, "input", 26, 27), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](4, MiniToolbarComponent_ng_container_0_ng_container_9_pbi_dropdown_5_pbi_dropdown_item_4_Template, 2, 2, "pbi-dropdown-item", 28), 
                core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r41 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("maxHeight", 324)("value", ctx_r41.subSelectedItem), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("formControl", ctx_r41.autocompleteControl), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](5, 4, ctx_r41.filteredSubselectables$));
            }
        }
        function MiniToolbarComponent_ng_container_0_ng_container_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r50 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "mini-toolbar-large-button", 20, 21), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r50);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r48 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r48.fillColorClicked(viewModel_r1.mode, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "mini-toolbar-large-button", 22, 23), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r50);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r51 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r51.strokeColorClicked(viewModel_r1.mode, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](5, MiniToolbarComponent_ng_container_0_ng_container_9_pbi_dropdown_5_Template, 6, 6, "pbi-dropdown", 24), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaHasPopup", "menu")("iconColors", viewModel_r1.values.fillColors)("disabled", viewModel_r1.disabled.fill)("label", viewModel_r1.labels.fill), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaHasPopup", "menu")("iconColors", viewModel_r1.values.strokeColors)("disabled", viewModel_r1.disabled.stroke)("label", viewModel_r1.labels.stroke), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", viewModel_r1.subSelectables.length > 1);
            }
        }
        function MiniToolbarComponent_ng_container_0_ng_container_10_Template(rf, ctx) {
            if (1 & rf) {
                var _r58 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "mini-toolbar-button", 30, 31), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r58);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r56 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r56.fontColorClicked(viewModel_r1.mode, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "mini-toolbar-button", 32, 33), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r58);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r59 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r59.alignClicked(viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](7, "mini-toolbar-button", 34), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r58);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r61 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r61.wordWrapChanged(!viewModel_r1.values.wordWrap, viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](8, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaHasPopup", "menu")("ariaLabel", core["\u0275\u0275pipeBind1"](3, 11, "Visual_FontColor"))("iconColors", viewModel_r1.values.fontColors)("disabled", viewModel_r1.disabled.fontColor)("showChevron", !0), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](6, 13, "Visual_TextAlignment"))("iconName", viewModel_r1.values.alignIconType || "Centered_20")("disabled", viewModel_r1.disabled.horizontalAlignment), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](8, 15, "Visual_WordWrap"))("selected", viewModel_r1.values.wordWrap)("disabled", viewModel_r1.disabled.wordWrap);
            }
        }
        function MiniToolbarComponent_ng_container_0_ng_container_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r66 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "mini-toolbar-button", 35), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r66);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r64 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r64.adjustDecimal("increaseDecimal", viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "mini-toolbar-button", 36), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r66);
                    var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r67 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r67.adjustDecimal("decreaseDecimal", viewModel_r1.boundSubSelectionStylesSlices));
                }), core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](2, 4, "Visual_IncreaseDecimal"))("disabled", viewModel_r1.disabled.increaseDecimal), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaLabel", core["\u0275\u0275pipeBind1"](4, 6, "Visual_DecreaseDecimal"))("disabled", viewModel_r1.disabled.decreaseDecimal);
            }
        }
        function MiniToolbarComponent_ng_container_0_div_12_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r75 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 4)(2, "div", 6)(3, "mini-toolbar-large-button", 38, 39), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r75);
                    var viewModel_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r73 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r73.borderStyleClicked(viewModel_r1.boundContainer));
                }), core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275elementEnd"]()()(), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            2 & rf && (core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("label", core["\u0275\u0275pipeBind1"](5, 1, "Visual_Border")));
        }
        function MiniToolbarComponent_ng_container_0_div_12_ng_container_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r79 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 4)(2, "div", 6)(3, "mini-toolbar-large-button", 40, 41), 
                core["\u0275\u0275listener"]("clicked", function() {
                    core["\u0275\u0275restoreView"](_r79);
                    var viewModel_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r77 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r77.gridStyleClicked(viewModel_r1.boundContainer));
                }), core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275elementEnd"]()()(), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            2 & rf && (core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("label", core["\u0275\u0275pipeBind1"](5, 1, "Visual_Grid")));
        }
        function MiniToolbarComponent_ng_container_0_div_12_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 37), core["\u0275\u0275template"](1, MiniToolbarComponent_ng_container_0_div_12_ng_container_1_Template, 6, 3, "ng-container", 0), 
            core["\u0275\u0275template"](2, MiniToolbarComponent_ng_container_0_div_12_ng_container_2_Template, 6, 3, "ng-container", 0), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r9 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ("Text" === viewModel_r1.mode || "NumericText" === viewModel_r1.mode) && !!ctx_r9.subSelectionStyles.border), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !!ctx_r9.subSelectionStyles.grid);
            }
        }
        var _c10 = function(a0) {
            return {
                hidden: a0
            };
        };
        function MiniToolbarComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r82 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 1, 2), 
                core["\u0275\u0275listener"]("pointerdown", function() {
                    core["\u0275\u0275restoreView"](_r82);
                    var ctx_r81 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r81.onPointerDown());
                }), core["\u0275\u0275elementStart"](3, "div", 3)(4, "div", 4), core["\u0275\u0275template"](5, MiniToolbarComponent_ng_container_0_div_5_Template, 10, 28, "div", 5), 
                core["\u0275\u0275elementStart"](6, "div", 6), core["\u0275\u0275template"](7, MiniToolbarComponent_ng_container_0_ng_container_7_Template, 7, 15, "ng-container", 0), 
                core["\u0275\u0275template"](8, MiniToolbarComponent_ng_container_0_mini_toolbar_button_8_Template, 2, 4, "mini-toolbar-button", 7), 
                core["\u0275\u0275template"](9, MiniToolbarComponent_ng_container_0_ng_container_9_Template, 6, 9, "ng-container", 0), 
                core["\u0275\u0275template"](10, MiniToolbarComponent_ng_container_0_ng_container_10_Template, 9, 17, "ng-container", 0), 
                core["\u0275\u0275template"](11, MiniToolbarComponent_ng_container_0_ng_container_11_Template, 5, 8, "ng-container", 0), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](12, MiniToolbarComponent_ng_container_0_div_12_Template, 3, 2, "div", 8), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var viewModel_r1 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](8, _c10, !viewModel_r1.mode)), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", "Text" === viewModel_r1.mode || "NumericText" === viewModel_r1.mode), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", "Text" === viewModel_r1.mode || "NumericText" === viewModel_r1.mode), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", "Shape" !== viewModel_r1.mode), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", "Shape" === viewModel_r1.mode), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", "Text" === viewModel_r1.mode || "NumericText" === viewModel_r1.mode), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", "NumericText" === viewModel_r1.mode), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !!ctx_r0.subSelectionStyles.border || !!ctx_r0.subSelectionStyles.grid);
            }
        }
        var _c11 = ".container[_ngcontent-%COMP%]{border-radius:2px;background-color:var(--white-color);box-shadow:var(--fluent-shadow-depth8);padding:4px;width:fit-content}.container.hidden[_ngcontent-%COMP%]{display:none}.container[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{display:flex;flex-direction:row;padding-bottom:4px}.container[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]:last-child{padding-bottom:0}.container[_ngcontent-%COMP%]   .colContainer[_ngcontent-%COMP%]{display:flex;flex-direction:row}.container[_ngcontent-%COMP%]   .extraItemsContainer[_ngcontent-%COMP%]{display:flex;flex-direction:row;border-left:1px solid var(--fluent-theme-neutral-light-color)}.container[_ngcontent-%COMP%]   .colItem[_ngcontent-%COMP%]{display:flex;flex-direction:column}.container[_ngcontent-%COMP%]   .font-family[_ngcontent-%COMP%]{width:128px;margin-right:4px}.container[_ngcontent-%COMP%]   .font-size[_ngcontent-%COMP%]{width:52px}.container[_ngcontent-%COMP%]   .disambiguation-menu[_ngcontent-%COMP%]{padding:14px 8px;width:180px}", AlignmentIcons = {
            left: "LeftAlign_20",
            center: "Centered_20",
            right: "RightAlign_20",
            Auto: void 0
        }, TextAlignmentToAlignment = {
            Left: "left",
            Center: "center",
            Right: "right",
            Auto: "Auto"
        }, MiniToolbarAlignmentComponent = function() {
            function MiniToolbarAlignmentComponent(picked) {
                this.picked = picked, this.alignments = Object.keys(AlignmentIcons).filter(function(key) {
                    return "Auto" !== key;
                }).map(function(key) {
                    return {
                        value: key,
                        icon: AlignmentIcons[key]
                    };
                });
            }
            return MiniToolbarAlignmentComponent.prototype.clicked = function(alignment) {
                this.picked(alignment);
            }, MiniToolbarAlignmentComponent.\u0275fac = function(t) {
                return new (t || MiniToolbarAlignmentComponent)(core["\u0275\u0275directiveInject"](pbi_overlay_ref.M));
            }, MiniToolbarAlignmentComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarAlignmentComponent,
                selectors: [ [ "mini-toolbar-alignment" ] ],
                decls: 2,
                vars: 1,
                consts: [ [ 1, "alignment-container", "container", "row" ], [ 3, "iconName", "clicked", 4, "ngFor", "ngForOf" ], [ 3, "iconName", "clicked" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275template"](1, MiniToolbarAlignmentComponent_mini_toolbar_button_1_Template, 1, 2, "mini-toolbar-button", 1), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx.alignments));
                },
                dependencies: [ common.NgForOf, MiniToolbarButtonComponent ],
                styles: [ _c11 ],
                changeDetection: 0
            }), MiniToolbarAlignmentComponent;
        }(), MiniToolbarComponent = function(_super) {
            function MiniToolbarComponent(changeDetector, componentFactoryResolver, formattingUIManager, injector, itemPickerService, lazyScoped, localizationService, menuService, overlay, runningVisuals, selectionService) {
                var _this = _super.call(this) || this;
                return _this.changeDetector = changeDetector, _this.componentFactoryResolver = componentFactoryResolver, 
                _this.formattingUIManager = formattingUIManager, _this.injector = injector, _this.itemPickerService = itemPickerService, 
                _this.lazyScoped = lazyScoped, _this.localizationService = localizationService, 
                _this.menuService = menuService, _this.overlay = overlay, _this.runningVisuals = runningVisuals, 
                _this.selectionService = selectionService, _this.fontSizeSpinButtonOptions = {
                    minValue: formatting_contracts.r4,
                    maxValue: formatting_contracts.YR,
                    stepAmount: 1
                }, _this.fontFamilyPickerSize = "sm", _this.fontSizePickerSize = "sm", _this.MiniToolbarWarningComponent = MiniToolbarWarningComponent, 
                _this.rainbowColorValues = [ "#Ff0000", "#ff0", "#0f0", "#00BCE3", "#0000ff", "#f0f" ], 
                _this.autocompleteControl = new fesm2022_forms.p4, _this.overlays = {
                    alignOverlayRef: void 0,
                    borderOverlayRef: void 0,
                    colorOverlayRef: void 0,
                    displayUnitsMenuRef: void 0,
                    gridOverlayRef: void 0
                }, _this;
            }
            return (0, tslib_es6.__extends)(MiniToolbarComponent, _super), MiniToolbarComponent.prototype.ngOnInit = function() {
                var _this = this;
                Promise.all([ this.lazyScoped.get(explore_formatting_lazy_load_routes.ub), this.lazyScoped.get(explore_formatting_lazy_load_routes.Vj) ]).then(function(_a) {
                    var formattingService = _a[0], formattingUIService = _a[1];
                    _this.formattingService = formattingService, _this.formattingUIService = formattingUIService, 
                    debug.fF.assert(function() {
                        return 1 === _this.subSelectionUpdateArgs.subSelections.length;
                    }, "expected subselections of length 1"), debug.fF.assert(function() {
                        return !!_this.subSelectedItem;
                    }, "expected subSelectedItem"), debug.fF.assert(function() {
                        return !!_this.subSelectedItem.visualSubSelection.selectionOrigin;
                    }, "miniToolbar - subSelectedItem should not have an empty selectionOrigin, onDisambiguationValueChange should have been handled and added selectionOrigin");
                    var visualSubSelection$ = _this.changes$("subSelectedItem").pipe((0, map.U)(function(subSelectedItem) {
                        return subSelectedItem.visualSubSelection;
                    })), subSelectionPosition$ = visualSubSelection$.pipe((0, map.U)(function(visualSubSelection) {
                        return {
                            x: visualSubSelection.selectionOrigin.x,
                            y: visualSubSelection.selectionOrigin.y
                        };
                    })), subSelectables$ = (0, combineLatest.aj)([ _this.changes$("subSelectionUpdateArgs"), visualSubSelection$ ]).pipe((0, 
                    switchMap.w)(function(_a) {
                        var visualSubSelection = _a[1];
                        return formattingService.getFor({
                            type: 0,
                            canvasItem: _a[0].canvasItem
                        }).getSubSelectables$().pipe((0, map.U)(function(visualSubSelectables) {
                            return _.isEmpty(visualSubSelectables) ? [] : visualSubSelectables.filter(function(visualSubSelectable) {
                                return visualSubSelectable.subSelectionType === visualSubSelection.subSelectionType;
                            }).map(function(visualSubSelectable) {
                                return {
                                    visualSubSelection: visualSubSelectable,
                                    source: "disambiguationMenu",
                                    triggerAction: 0
                                };
                            });
                        }));
                    }));
                    _this.autocompleteControl.setValue(_this.subSelectedItem.visualSubSelection.displayName, {
                        emitEvent: !1
                    }), _this.filteredSubselectables$ = (0, combineLatest.aj)([ _this.autocompleteControl.valueChanges.pipe((0, 
                    startWith.O)("")), subSelectables$ ]).pipe((0, takeUntil.R)(_this.onDestroy$), (0, 
                    map.U)(function(_a) {
                        return _this.getFilteredSubselectables(_a[0], _a[1]);
                    }));
                    var mode$ = _this.changes$("subSelectionStyles").pipe((0, map.U)(function(subSelectionStyles) {
                        return 1 === subSelectionStyles.type ? "Text" : 2 === subSelectionStyles.type ? "NumericText" : "Shape";
                    })), boundContainer$ = _this.changes$("subSelectionUpdateArgs").pipe((0, pluck.j)("canvasItem")), boundSubSelectionStylesSlices$ = _this.formattingUIService.getSubSelectionStylesSlices$(boundContainer$.pipe((0, 
                    map.U)(function(container) {
                        return [ container ];
                    }))), controlProperties$ = (0, combineLatest.aj)([ mode$, boundSubSelectionStylesSlices$, boundContainer$ ]).pipe((0, 
                    map.U)(function(_a) {
                        var mode = _a[0], subSelectionStylesSlices = _a[1], boundContainer = _a[2];
                        return "Text" === mode || "NumericText" === mode ? _this.bindToText(subSelectionStylesSlices, boundContainer) : "Shape" === mode ? _this.bindToShape(subSelectionStylesSlices, boundContainer) : {
                            disabled: {},
                            values: {
                                fontProperties: {
                                    fontFamily: "",
                                    fontSize: 0
                                }
                            },
                            lables: {},
                            warnings: {}
                        };
                    }), (0, shareReplay.d)({
                        bufferSize: 1,
                        refCount: !0
                    })), disabled$ = controlProperties$.pipe((0, pluck.j)("disabled")), values$ = controlProperties$.pipe((0, 
                    pluck.j)("values")), labels$ = controlProperties$.pipe((0, pluck.j)("labels")), warnings$ = controlProperties$.pipe((0, 
                    pluck.j)("warnings"));
                    _this.viewModel$ = (0, combineLatest.aj)([ boundContainer$, boundSubSelectionStylesSlices$, disabled$, labels$, mode$, subSelectables$, subSelectionPosition$, values$, warnings$ ]).pipe((0, 
                    map.U)(function(_a) {
                        return {
                            boundContainer: _a[0],
                            boundSubSelectionStylesSlices: _a[1],
                            disabled: _a[2],
                            labels: _a[3],
                            mode: _a[4],
                            subSelectables: _a[5],
                            subSelectionPosition: _a[6],
                            values: _a[7],
                            warnings: _a[8]
                        };
                    })), _this.onDestroy$.subscribe(function() {
                        return _this.closeOverlays();
                    }), _this.changeDetector.detectChanges();
                });
            }, MiniToolbarComponent.prototype.onDisambiguationValueChange = function(visualContainerSubSelection, subSelectionPosition) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var canvasItem, newVisualContainerSubSelection, newVisualSubSelection;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return canvasItem = selectionUtils.UP.getSelectedCanvasItem(this.selectionService), 
                            newVisualContainerSubSelection = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualContainerSubSelection), {
                                visualSubSelection: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualContainerSubSelection.visualSubSelection), {
                                    showUI: !0
                                })
                            }), this.autocompleteControl.setValue((newVisualSubSelection = newVisualContainerSubSelection.visualSubSelection).displayName, {
                                emitEvent: !1
                            }), subSelectionPosition || debug.fF.assertFail("Disambiguation menu should not be able to be called without a position set"), 
                            newVisualSubSelection.selectionOrigin = {
                                x: subSelectionPosition.x,
                                y: subSelectionPosition.y
                            }, selectionUtils.UP.selectSubSelection(this.selectionService, canvasItem, [ newVisualContainerSubSelection ], 0), 
                            [ 4, this.lazyScoped.get("formatModeService") ];

                          case 1:
                            return [ 4, _a.sent().triggerShowUI({
                                canvasItem,
                                subSelections: [ newVisualContainerSubSelection ]
                            }) ];

                          case 2:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, MiniToolbarComponent.prototype.onPointerDown = function() {
                this.formattingUIManager.onMiniToolbarTouched();
            }, MiniToolbarComponent.prototype.getConditionalFormattingGradient = function(definitions, descriptor) {
                var _a, _b, _c, dataViewObjectProperty, dataViewObjectDefinition = (0, dataViewObjectDefinition1.my)(definitions, descriptor.objectName, descriptor.selector);
                if (dataViewObjectDefinition && (dataViewObjectProperty = dataViewObjectDefinition.properties[descriptor.propertyName]), 
                dataViewObjectProperty && (0, structuralType.X2)(dataViewObjectProperty)) {
                    var colorExpr = dataViewObjectProperty && dataViewObjectProperty.solid && dataViewObjectProperty.solid.color;
                    if (colorExpr && !(0, sqExprStaticMembers.VC)(colorExpr) && !(0, sqExprStaticMembers.wt)(colorExpr)) {
                        if ((0, sqExprStaticMembers.Tu)(colorExpr)) {
                            var gradientSettings = (0, gradientUtils.qG)(colorExpr.rule), gradientColors = this.itemPickerService.getDataColors().getGradientColors(), colors = [];
                            return colors.push(null !== (_a = gradientSettings.minColor) && void 0 !== _a ? _a : gradientColors.minColor.value), 
                            gradientSettings.diverging && colors.push(null !== (_b = gradientSettings.midColor) && void 0 !== _b ? _b : gradientColors.midColor.value), 
                            colors.push(null !== (_c = gradientSettings.maxColor) && void 0 !== _c ? _c : gradientColors.maxColor.value), 
                            colors;
                        }
                        if ((0, sqExprStaticMembers.Gs)(colorExpr)) return colorExpr.cases.reverse().map(function(sqCase) {
                            return sqExpr.jz.getTextValue(sqCase.value);
                        });
                        if ((0, sqExprStaticMembers.kb)(colorExpr) || (0, sqExprStaticMembers.iV)(colorExpr)) return this.rainbowColorValues;
                    }
                }
            }, MiniToolbarComponent.prototype.getColorProperties = function(container, subselectionStyle) {
                var _a, _b, _c, _d;
                if (!subselectionStyle) return {
                    disabled: !0
                };
                var value, properties = subselectionStyle.properties, isConditionalFormattingSet = null === (_a = properties.conditionalFormattingObjects) || void 0 === _a ? void 0 : _a.isSet;
                if (!properties) return {
                    disabled: !0
                };
                if (properties.disabled) value = [ formattingConstants.UD ]; else if (isConditionalFormattingSet) {
                    var definitions;
                    definitions = (0, visualContainerGroup2.Vz)(container) ? _.merge({}, container.config.singleVisual.vcObjects, container.config.singleVisual.objects) : null !== (_b = container.objects) && void 0 !== _b ? _b : {}, 
                    value = subselectionStyle.instances.length > 1 ? [ formattingConstants.UD ] : this.getConditionalFormattingGradient(definitions, subselectionStyle.instances[0].descriptor);
                }
                return value || (value = [ null !== (_d = null === (_c = subselectionStyle.resolvedValue) || void 0 === _c ? void 0 : _c.value) && void 0 !== _d ? _d : formattingConstants.UD ]), 
                {
                    disabled: !1,
                    value,
                    label: properties.label
                };
            }, MiniToolbarComponent.prototype.bindToText = function(subSelectionStylesSlices, container) {
                var disabled = {}, values = {
                    fontProperties: void 0
                }, warnings = {};
                values.fontProperties = {
                    fontFamily: "",
                    fontSize: 0
                };
                var fontFamilyStyle = subSelectionStylesSlices.fontFamily;
                fontFamilyStyle && fontFamilyStyle.properties ? (disabled.fontProperties = !1, values.fontProperties.fontFamily = fontFamilyStyle.resolvedValue) : disabled.fontProperties = !0;
                var fontSizeStyle = subSelectionStylesSlices.fontSize, fontSizeProperties = fontSizeStyle && fontSizeStyle.properties;
                fontSizeProperties ? (disabled.increaseFontSize = !1, disabled.decreaseFontSize = !1, 
                disabled.fontSize = !1, values.fontProperties.fontSize = fontSizeStyle.resolvedValue, 
                fontSizeProperties.options && (this.fontSizeSpinButtonOptions.minValue = null == fontSizeProperties.options.minValue ? formatting_contracts.r4 : fontSizeProperties.options.minValue.value, 
                this.fontSizeSpinButtonOptions.maxValue = null == fontSizeProperties.options.maxValue ? formatting_contracts.YR : fontSizeProperties.options.maxValue.value), 
                warnings.fontSize = fontSizeProperties.warning) : (disabled.increaseFontSize = !0, 
                disabled.decreaseFontSize = !0, disabled.fontSize = !0, warnings.fontSize = void 0, 
                this.fontSizeSpinButtonOptions.minValue = formatting_contracts.r4, this.fontSizeSpinButtonOptions.maxValue = formatting_contracts.YR);
                var boldStyle = subSelectionStylesSlices.bold;
                boldStyle ? (disabled.bold = !1, values.bold = boldStyle.resolvedValue) : disabled.bold = !0;
                var italicStyle = subSelectionStylesSlices.italic;
                italicStyle ? (disabled.italic = !1, values.italic = italicStyle.resolvedValue) : disabled.italic = !0;
                var underlineStyle = subSelectionStylesSlices.underline;
                underlineStyle ? (disabled.underline = !1, values.underline = underlineStyle.resolvedValue) : disabled.underline = !0;
                var backgroundFillColor = this.getColorProperties(container, subSelectionStylesSlices.background);
                disabled.background = !backgroundFillColor || backgroundFillColor.disabled, values.backgroundColors = (null == backgroundFillColor ? void 0 : backgroundFillColor.value) || [ "" ];
                var fontColor = this.getColorProperties(container, subSelectionStylesSlices.fontColor);
                disabled.fontColor = !fontColor || fontColor.disabled, values.fontColors = (null == fontColor ? void 0 : fontColor.value) || [ "" ];
                var horizontalAlignmentStyle = subSelectionStylesSlices.horizontalAlignment;
                if (horizontalAlignmentStyle && horizontalAlignmentStyle.properties) {
                    disabled.horizontalAlignment = !1;
                    var align = this.getAlignmentFromControl(horizontalAlignmentStyle.resolvedValue, horizontalAlignmentStyle.instances);
                    values.alignIconType = AlignmentIcons[align], values.alignIconType || (disabled.horizontalAlignment = "Auto" !== align, 
                    values.alignIconType = "");
                } else disabled.horizontalAlignment = !0, values.alignIconType = "";
                var wordWrapStyle = subSelectionStylesSlices.wordWrap;
                wordWrapStyle && wordWrapStyle.properties ? (disabled.wordWrap = !1, values.wordWrap = wordWrapStyle.resolvedValue) : (disabled.wordWrap = !0, 
                values.wordWrap = !1);
                var precisionStyle = subSelectionStylesSlices.precision;
                return precisionStyle && precisionStyle.properties ? (disabled.increaseDecimal = !1, 
                disabled.decreaseDecimal = !1) : (disabled.increaseDecimal = !0, disabled.decreaseDecimal = !0), 
                disabled.displayUnits = !subSelectionStylesSlices.displayUnits, {
                    disabled,
                    values,
                    labels: {},
                    warnings
                };
            }, MiniToolbarComponent.prototype.bindToShape = function(subSelectionStylesSlices, container) {
                var disabled = {}, values = {
                    fontProperties: void 0
                }, labels = {}, fillColor = this.getColorProperties(container, subSelectionStylesSlices.fill);
                disabled.fill = fillColor.disabled, values.fillColors = fillColor.value || [ "" ], 
                labels.fill = fillColor.label || this.localizationService.get("Visual_Fill");
                var strokeColor = this.getColorProperties(container, subSelectionStylesSlices.stroke);
                return disabled.stroke = strokeColor.disabled, values.strokeColors = strokeColor.value || [ "" ], 
                labels.stroke = strokeColor.label || this.localizationService.get("Visual_Border"), 
                {
                    disabled,
                    values,
                    labels,
                    warnings: {}
                };
            }, MiniToolbarComponent.prototype.fontFamilyChanged = function(value, boundSubSelectionStylesSlices) {
                this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key: "fontFamily",
                    value
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.fontSizeChanged = function(value, boundSubSelectionStylesSlices) {
                this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key: "fontSize",
                    value
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.adjustFontSize = function(key, boundSubSelectionStylesSlices) {
                this.closeOverlays(), this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.biuChanged = function(key, value, boundSubSelectionStylesSlices) {
                this.closeOverlays(), this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key,
                    value
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.colorClicked = function(colorStyle, colorName, mode) {
                var _this = this;
                this.closeOverlays(this.overlays.colorOverlayRef) || colorStyle && (this.overlays.colorOverlayRef = this.formattingUIService.openColorPicker(colorStyle, this.minitoolbar.nativeElement, function() {
                    return _this.closeOverlays();
                }, {
                    source: "MiniToolbar"
                }));
            }, MiniToolbarComponent.prototype.fontColorClicked = function(mode, boundSubSelectionStylesSlices) {
                this.colorClicked(boundSubSelectionStylesSlices.fontColor, "fontColor", mode);
            }, MiniToolbarComponent.prototype.fillColorClicked = function(mode, boundSubSelectionStylesSlices) {
                this.colorClicked(boundSubSelectionStylesSlices.fill, "fill", mode);
            }, MiniToolbarComponent.prototype.backgroundColorClicked = function(mode, boundSubSelectionStylesSlices) {
                this.colorClicked(boundSubSelectionStylesSlices.background, "background", mode);
            }, MiniToolbarComponent.prototype.strokeColorClicked = function(mode, boundSubSelectionStylesSlices) {
                this.closeOverlays(), this.colorClicked(boundSubSelectionStylesSlices.stroke, "stroke", mode);
            }, MiniToolbarComponent.prototype.wordWrapChanged = function(value, boundSubSelectionStylesSlices) {
                this.closeOverlays(), this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key: "wordWrap",
                    value
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.adjustDecimal = function(key, boundSubSelectionStylesSlices) {
                this.closeOverlays(), this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.alignClicked = function(boundSubSelectionStylesSlices) {
                var _this = this;
                if (boundSubSelectionStylesSlices.horizontalAlignment && !this.closeOverlays(this.overlays.alignOverlayRef)) {
                    var positionStrategy = this.overlay.position().flexibleConnectedTo(this.alignDropdown.nativeElement).withPositions([ {
                        originX: "start",
                        originY: "bottom",
                        overlayX: "start",
                        overlayY: "top",
                        offsetY: 10
                    } ]);
                    this.overlays.alignOverlayRef = this.overlay.open({
                        component: MiniToolbarAlignmentComponent,
                        data: function(alignment) {
                            _this.closeOverlays(), _this.alignChanged(alignment, boundSubSelectionStylesSlices);
                        },
                        closeOnBackdropClick: !0,
                        options: {
                            positionStrategy,
                            hasBackdrop: !0,
                            backdropClass: "cdk-overlay-transparent-backdrop"
                        },
                        injector: this.injector,
                        componentFactoryResolver: this.componentFactoryResolver
                    }), this.overlays.alignOverlayRef.onClose.subscribe(function() {
                        _this.overlays.alignOverlayRef = void 0;
                    });
                }
            }, MiniToolbarComponent.prototype.alignChanged = function(alignIcon, boundSubSelectionStylesSlices) {
                this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key: "horizontalAlignment",
                    value: alignIcon
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.displayUnitsClicked = function(boundSubSelectionStylesSlices) {
                var _this = this;
                if (!this.closeOverlays(this.overlays.displayUnitsMenuRef)) {
                    var displayUnitsStyle = boundSubSelectionStylesSlices.displayUnits;
                    if (displayUnitsStyle) {
                        var displayUnitValue = displayUnitsStyle.resolvedValue, menuConfig = {
                            menu: {
                                items: _.map(displayUnitsStyle.properties.items, function(item) {
                                    return {
                                        type: pbi_menu_contracts.iB.Button,
                                        text: item.displayName,
                                        data: item,
                                        checked: item.value === displayUnitValue.value,
                                        checkable: !0
                                    };
                                })
                            },
                            origin: this.displayUnitsDropdown.nativeElement
                        };
                        this.overlays.displayUnitsMenuRef = this.menuService.open(menuConfig), this.overlays.displayUnitsMenuRef.onClose$.subscribe(function() {
                            _this.overlays.displayUnitsMenuRef = void 0;
                        }), this.overlays.displayUnitsMenuRef.onButtonClick$.subscribe(function(item) {
                            _this.displayUnitsChanged(item.data.value, boundSubSelectionStylesSlices), _this.closeOverlays();
                        });
                    }
                }
            }, MiniToolbarComponent.prototype.displayUnitsChanged = function(value, boundSubSelectionStylesSlices) {
                this.formattingUIService.onControlClicked(boundSubSelectionStylesSlices, {
                    key: "displayUnits",
                    value
                }, {
                    source: "MiniToolbar"
                });
            }, MiniToolbarComponent.prototype.borderStyleClicked = function(boundContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var positionStrategy, runningVisual, visualSubSelectionShortcuts, visualSubSelectionStyles, menu$, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.closeOverlays(this.overlays.borderOverlayRef) ? [ 2 ] : (0, visualContainerGroup2.Vz)(boundContainer) ? (positionStrategy = this.overlay.position().flexibleConnectedTo(this.largeBorderDropdown.nativeElement).withPositions([ {
                                originX: "start",
                                originY: "bottom",
                                overlayX: "start",
                                overlayY: "top",
                                offsetY: 0
                            } ]), [ 4, null == (runningVisual = this.runningVisuals.getVisual(boundContainer)) ? void 0 : runningVisual.getSubSelectionShortcuts([ this.subSelectedItem.visualSubSelection ], "border") ]) : [ 2 ];

                          case 1:
                            return visualSubSelectionShortcuts = _a.sent(), [ 4, null == runningVisual ? void 0 : runningVisual.getSubSelectionStyles([ this.subSelectedItem.visualSubSelection ]) ];

                          case 2:
                            return visualSubSelectionStyles = _a.sent(), menu$ = this.formattingUIService.getMenuItems$(visualSubSelectionShortcuts, boundContainer, [ visualSubSelectionStyles ], runningVisual).pipe((0, 
                            map.U)(function(menuItems) {
                                return {
                                    items: _.flatten(menuItems)
                                };
                            })), this.overlays.borderOverlayRef = this.openMiniToolbarContextMenu(boundContainer, visualSubSelectionShortcuts, positionStrategy, menu$), 
                            this.overlays.borderOverlayRef.onClose.subscribe(function() {
                                _this.overlays.borderOverlayRef = void 0;
                            }), [ 2 ];
                        }
                    });
                });
            }, MiniToolbarComponent.prototype.gridStyleClicked = function(boundContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var positionStrategy, runningVisual, visualSubSelectionShortcuts, visualSubSelectionStyles, menu$, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.closeOverlays(this.overlays.gridOverlayRef) ? [ 2 ] : (0, visualContainerGroup2.Vz)(boundContainer) ? (positionStrategy = this.overlay.position().flexibleConnectedTo(this.largeGridDropdown.nativeElement).withPositions([ {
                                originX: "start",
                                originY: "bottom",
                                overlayX: "start",
                                overlayY: "top",
                                offsetY: 0
                            } ]), [ 4, null == (runningVisual = this.runningVisuals.getVisual(boundContainer)) ? void 0 : runningVisual.getSubSelectionShortcuts([ this.subSelectedItem.visualSubSelection ], "grid") ]) : [ 2 ];

                          case 1:
                            return visualSubSelectionShortcuts = _a.sent(), [ 4, null == runningVisual ? void 0 : runningVisual.getSubSelectionStyles([ this.subSelectedItem.visualSubSelection ]) ];

                          case 2:
                            return visualSubSelectionStyles = _a.sent(), menu$ = this.formattingUIService.getMenuItems$(visualSubSelectionShortcuts, boundContainer, [ visualSubSelectionStyles ], runningVisual).pipe((0, 
                            map.U)(function(menuItems) {
                                return {
                                    items: _.flatten(menuItems)
                                };
                            })), this.overlays.gridOverlayRef = this.openMiniToolbarContextMenu(boundContainer, visualSubSelectionShortcuts, positionStrategy, menu$), 
                            this.overlays.gridOverlayRef.onClose.subscribe(function() {
                                _this.overlays.gridOverlayRef = void 0;
                            }), [ 2 ];
                        }
                    });
                });
            }, MiniToolbarComponent.prototype.openMiniToolbarContextMenu = function(boundContainer, visualSubSelectionShortcuts, positionStrategy, menuInput$) {
                var _this = this;
                return this.overlay.open({
                    component: MiniToolbarContextMenuComponent,
                    data: {
                        subSelectionUpdateArgs: {
                            canvasItem: boundContainer,
                            subSelections: [ this.subSelectedItem.visualSubSelection ]
                        },
                        subSelectionStyles: void 0,
                        subSelectionShortcuts: visualSubSelectionShortcuts,
                        menuInput$,
                        closeOverlays: function() {
                            return _this.closeOverlays();
                        }
                    },
                    closeOnBackdropClick: !0,
                    options: {
                        positionStrategy,
                        hasBackdrop: !0,
                        backdropClass: "cdk-overlay-transparent-backdrop"
                    },
                    injector: this.injector,
                    componentFactoryResolver: this.componentFactoryResolver
                });
            }, MiniToolbarComponent.prototype.closeOverlays = function(except) {
                var closingException = !1;
                for (var name_1 in this.overlays) {
                    var ref = this.overlays[name_1];
                    ref && (this.overlays[name_1] = void 0, closingException = closingException || except === ref, 
                    ref.close());
                }
                return closingException;
            }, MiniToolbarComponent.prototype.getFilteredSubselectables = function(inputValue, subSelectables) {
                var filterValue = inputValue.toLocaleLowerCase();
                return subSelectables.filter(function(subSelectable) {
                    return subSelectable.visualSubSelection.displayName.toLocaleLowerCase().includes(filterValue);
                });
            }, MiniToolbarComponent.prototype.getAlignmentFromControl = function(alignment, identifiers) {
                var _a, alignmentDescriptorType = identifiers[0].descriptor.type;
                if (debug.fF.assert(function() {
                    return _.every(identifiers, function(identifier) {
                        return identifier.descriptor.type === alignmentDescriptorType;
                    });
                }, "MiniToolbar alignment - expected all the descriptors to have same property type"), 
                valueType.Ge.isValueTypeDescriptor(alignmentDescriptorType)) {
                    var propertyType = valueType.Ge.fromDescriptor(alignmentDescriptorType);
                    if (propertyType.enum === textAlignment.K) return TextAlignmentToAlignment[alignment];
                    if (null === (_a = propertyType.formatting) || void 0 === _a ? void 0 : _a.alignment) return alignment;
                    debug.fF.assertFail("MiniToolbar alignment - unexpected descriptor property type");
                } else debug.fF.assertFail("MiniToolbar alignment - not a value type descriptor");
            }, MiniToolbarComponent.\u0275fac = function(t) {
                return new (t || MiniToolbarComponent)(core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](core.ComponentFactoryResolver), core["\u0275\u0275directiveInject"](FormattingUIManagerService), core["\u0275\u0275directiveInject"](core.Injector), core["\u0275\u0275directiveInject"](item_picker_service.a), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](pbi_menu_service.o), core["\u0275\u0275directiveInject"](pbi_overlay_service._), core["\u0275\u0275directiveInject"](running_visual_service.s), core["\u0275\u0275directiveInject"](selection_service.z));
            }, MiniToolbarComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarComponent,
                selectors: [ [ "mini-toolbar" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](mini_toolbar_component_c0, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](mini_toolbar_component_c1, 5, core.ElementRef), core["\u0275\u0275viewQuery"](_c2, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](_c3, 5, core.ElementRef), core["\u0275\u0275viewQuery"](_c4, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](_c5, 5, core.ElementRef), core["\u0275\u0275viewQuery"](_c6, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](_c7, 5, core.ElementRef), core["\u0275\u0275viewQuery"](_c8, 5, core.ElementRef)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.backgroundColorDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.fillColorDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.fontColorDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.strokeDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.alignDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.displayUnitsDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.largeBorderDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.largeGridDropdown = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.minitoolbar = _t.first);
                    }
                },
                hostVars: 1,
                hostBindings: function(rf, ctx) {
                    2 & rf && core["\u0275\u0275attribute"]("data-testid", "mini-toolbar");
                },
                inputs: {
                    subSelectionUpdateArgs: "subSelectionUpdateArgs",
                    subSelectionStyles: "subSelectionStyles",
                    subSelectedItem: "subSelectedItem"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ 4, "ngIf" ], [ 1, "container", "smallFontSize", 3, "ngClass", "pointerdown" ], [ "self", "" ], [ 1, "colContainer" ], [ 1, "colItem" ], [ "class", "row", 4, "ngIf" ], [ 1, "row" ], [ "iconName", "FillColorSplitDropdown_20", "data-automation-id", "mini-toolbar-fill-color", 3, "iconColors", "disabled", "showChevron", "ariaHasPopup", "clicked", 4, "ngIf" ], [ "class", "extraItemsContainer", 4, "ngIf" ], [ "data-automation-id", "mini-toolbar-font-picker", 1, "font-family", 3, "ariaLabel", "showFullContent", "fontFamily", "isDisabled", "size", "onFontFamilyChange" ], [ "data-automation-id", "mini-toolbar-font-size", 1, "font-size", 3, "ngClass", "ariaLabel", "ngModel", "options", "disabled", "size", "pbiTooltip", "pbiTooltipComponentData", "ngModelChange" ], [ "iconName", "GrowFont_20", "data-automation-id", "mini-toolbar-increase-font-size", 3, "ariaLabel", "disabled", "clicked" ], [ "iconName", "ShrinkFont_20", "data-automation-id", "mini-toolbar-decrease-font-size", 3, "ariaLabel", "disabled", "clicked" ], [ "iconName", "DisplayUnits", "data-automation-id", "mini-toolbar-display-units", 3, "ariaHasPopup", "ariaLabel", "disabled", "customIcon", "showChevron", "clicked" ], [ "displayUnitsDropdown", "" ], [ "iconName", "Bold_20", "data-automation-id", "mini-toolbar-bold", 3, "ariaLabel", "selected", "disabled", "clicked" ], [ "iconName", "Italic_20", "data-automation-id", "mini-toolbar-italic", 3, "ariaLabel", "selected", "disabled", "clicked" ], [ "iconName", "Underline_20", "data-automation-id", "mini-toolbar-underline", 3, "ariaLabel", "selected", "disabled", "clicked" ], [ "iconName", "FillColorSplitDropdown_20", "data-automation-id", "mini-toolbar-fill-color", 3, "iconColors", "disabled", "showChevron", "ariaHasPopup", "clicked" ], [ "backgroundColorDropdown", "" ], [ "iconName", "FillColorSplitDropdown_24", "data-automation-id", "mini-toolbar-shape-fill-color", 3, "ariaHasPopup", "iconColors", "disabled", "label", "clicked" ], [ "fillColorDropdown", "" ], [ "iconName", "TableBorderColorSplitDropdown_24", "data-automation-id", "mini-toolbar-line-color", 3, "ariaHasPopup", "iconColors", "disabled", "label", "clicked" ], [ "lineColorDropdown", "" ], [ "class", "disambiguation-menu", "dropdown-type", "autocomplete", "data-automation-id", "mini-toolbar-disambiguration-menu", 3, "maxHeight", "value", "valueChange", 4, "ngIf" ], [ "dropdown-type", "autocomplete", "data-automation-id", "mini-toolbar-disambiguration-menu", 1, "disambiguation-menu", 3, "maxHeight", "value", "valueChange" ], [ "type", "text", 1, "auto-input", 3, "formControl" ], [ "autocompleteInput", "" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 3, "value" ], [ "iconName", "FontColorNoPreview_20", "data-automation-id", "font-color", 3, "ariaHasPopup", "ariaLabel", "iconColors", "disabled", "showChevron", "clicked" ], [ "fontColorDropdown", "" ], [ "data-automation-id", "mini-toolbar-alignment", 3, "ariaLabel", "iconName", "disabled", "clicked" ], [ "alignDropdown", "" ], [ "iconName", "WrapText_20", "data-automation-id", "mini-toolbar-word-wrap", 3, "ariaLabel", "selected", "disabled", "clicked" ], [ "iconName", "IncreaseDecimal_20", "data-automation-id", "mini-toolbar-increase-decimal", 3, "ariaLabel", "disabled", "clicked" ], [ "iconName", "DecreaseDecimal_20", "data-automation-id", "mini-toolbar-decrease-decimal", 3, "ariaLabel", "disabled", "clicked" ], [ 1, "extraItemsContainer" ], [ "iconName", "BorderDrawToolGrid_20", "data-automation-id", "mini-toolbar-border", 3, "label", "clicked" ], [ "largeBorderDropdown", "" ], [ "iconName", "GridCard_24", "data-automation-id", "mini-toolbar-grid", 3, "label", "clicked" ], [ "largeGridDropdown", "" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, MiniToolbarComponent_ng_container_0_Template, 13, 10, "ng-container", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", ctx.formattingService && core["\u0275\u0275pipeBind1"](1, 1, ctx.viewModel$));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, font_picker_component.w, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, PbiDropdownAutocompleteDirective, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_component.T, pbi_spin_button_component.a, pbi_tooltip_directive.V, fesm2022_forms.oH, MiniToolbarButtonComponent, MiniToolbarLargeButtonComponent, common.AsyncPipe, localize_pipe.F ],
                styles: [ _c11 ],
                changeDetection: 0
            }), MiniToolbarComponent;
        }(rx_component.w), on_object_container_util = __webpack_require__(64548);
        function OnObjectContainerComponent_mini_toolbar_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "mini-toolbar", 4), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("subSelectionUpdateArgs", ctx_r0.data.subSelectionUpdateArgs)("subSelectionStyles", ctx_r0.data.subSelectionStyles)("subSelectedItem", (null == ctx_r0.data.subSelectionUpdateArgs ? null : ctx_r0.data.subSelectionUpdateArgs.subSelections) && (null == ctx_r0.data.subSelectionUpdateArgs ? null : ctx_r0.data.subSelectionUpdateArgs.subSelections[0])), 
                core["\u0275\u0275attribute"]("aria-labelledby", ctx_r0.ariaLabelledby);
            }
        }
        function OnObjectContainerComponent_on_object_context_menu_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r3 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "on-object-context-menu", 5), core["\u0275\u0275listener"]("onExecuteContextMenuAction", function() {
                    core["\u0275\u0275restoreView"](_r3);
                    var ctx_r2 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r2.executeContextMenuAction());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("subSelectionUpdateArgs", ctx_r1.data.subSelectionUpdateArgs)("subSelectionStyles", ctx_r1.data.subSelectionStyles)("subSelectionShortcuts", ctx_r1.data.subSelectionShortcuts);
            }
        }
        var OnObjectContainerComponent = function() {
            function OnObjectContainerComponent(onObjectUIData, formattingUIManager) {
                var _a, _b, _this = this;
                this.onObjectUIData = onObjectUIData, this.formattingUIManager = formattingUIManager, 
                this.hideContextMenu = !1, this.data = this.onObjectUIData;
                var subSelections = null === (_a = this.data.subSelectionUpdateArgs) || void 0 === _a ? void 0 : _a.subSelections;
                subSelections && (this.hideContextMenu = subSelections.some(function(subSelection) {
                    return "disambiguationMenu" === subSelection.source;
                })), this.ariaLabelledby = (0, on_object_container_util.u)(null === (_b = this.data.subSelectionUpdateArgs) || void 0 === _b ? void 0 : _b.canvasItem.name), 
                this.subscription = this.formattingUIManager.miniToolbarActionTouched$.pipe((0, 
                take.q)(1)).subscribe(function() {
                    _this.hideContextMenu = !0;
                });
            }
            return OnObjectContainerComponent.prototype.executeContextMenuAction = function() {
                this.formattingUIManager.executeContextMenuAction();
            }, OnObjectContainerComponent.prototype.ngOnDestroy = function() {
                this.subscription.unsubscribe();
            }, OnObjectContainerComponent.\u0275fac = function(t) {
                return new (t || OnObjectContainerComponent)(core["\u0275\u0275directiveInject"](pbi_overlay_ref.M), core["\u0275\u0275directiveInject"](FormattingUIManagerService));
            }, OnObjectContainerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: OnObjectContainerComponent,
                selectors: [ [ "on-object-container" ] ],
                decls: 4,
                vars: 4,
                consts: [ [ 1, "on-object-container" ], [ "class", "mini-toolbar", "role", "toolbar", 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectedItem", 4, "ngIf" ], [ 1, "context-menu" ], [ 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectionShortcuts", "onExecuteContextMenuAction", 4, "ngIf" ], [ "role", "toolbar", 1, "mini-toolbar", 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectedItem" ], [ 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectionShortcuts", "onExecuteContextMenuAction" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275template"](1, OnObjectContainerComponent_mini_toolbar_1_Template, 1, 4, "mini-toolbar", 1), 
                    core["\u0275\u0275elementStart"](2, "div", 2), core["\u0275\u0275template"](3, OnObjectContainerComponent_on_object_context_menu_3_Template, 1, 3, "on-object-context-menu", 3), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275classProp"]("flip", null == ctx.data ? null : ctx.data.flip), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", (null == ctx.data ? null : ctx.data.subSelectionStyles) && (null == ctx.data ? null : ctx.data.subSelectionUpdateArgs)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", (null == ctx.data ? null : ctx.data.subSelectionShortcuts) && !ctx.hideContextMenu));
                },
                styles: [ ".on-object-container[_ngcontent-%COMP%]{pointer-events:none;display:flex;flex-direction:column}.on-object-container.flip[_ngcontent-%COMP%]   .mini-toolbar[_ngcontent-%COMP%]{order:1;margin-top:8px}.on-object-container.flip[_ngcontent-%COMP%]   .context-menu[_ngcontent-%COMP%]{order:0;margin-top:0}.on-object-container[_ngcontent-%COMP%]   .mini-toolbar[_ngcontent-%COMP%]{pointer-events:auto;max-width:fit-content;order:0}.on-object-container[_ngcontent-%COMP%]   .context-menu[_ngcontent-%COMP%]{margin-top:8px;min-width:180px;max-width:fit-content;height:auto;pointer-events:auto;order:1}" ],
                changeDetection: 0
            }), OnObjectContainerComponent;
        }(), formattingModelUtil = __webpack_require__(61617), asyncSerializer = __webpack_require__(57419), promise = __webpack_require__(65966), build_control_util = __webpack_require__(56578), subSelectionOutlineRenderer = __webpack_require__(86900), textMeasurementService = __webpack_require__(32041), outline_overlay_component_c0 = [ "outlineContainer" ], outline_overlay_component_c1 = [ "directEditTextBox" ];
        function OutlineOverlayComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r4 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "textarea", 1, 2), 
                core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r3 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r3.directEditTextBoxMouseEvent($event));
                })("mousedown", function($event) {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r5 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r5.directEditTextBoxMouseEvent($event));
                })("pointerdown", function($event) {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.directEditTextBoxMouseEvent($event));
                })("input", function() {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r7 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r7.directEditTextBoxChange());
                })("blur", function() {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r8 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r8.directEditTextBoxBlur());
                })("keydown", function($event) {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.directEditKeyDown($event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](3, "div", 3, 4), 
                core["\u0275\u0275elementContainerEnd"]();
            }
        }
        var directEditTextLineHeight, directEditTextMWidth, maxOutlineStyleHeight, TextboxDimensions = function() {
            function TextboxDimensions(textbox) {
                this.textbox = textbox;
            }
            return Object.defineProperty(TextboxDimensions.prototype, "left", {
                get: function() {
                    return this._left;
                },
                set: function(value) {
                    value !== this._left && (this._left = value, this.textbox.style.left = "".concat(value, "px"));
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextboxDimensions.prototype, "top", {
                get: function() {
                    return this._top;
                },
                set: function(value) {
                    value !== this._top && (this._top = value, this.textbox.style.top = "".concat(value, "px"));
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextboxDimensions.prototype, "width", {
                get: function() {
                    return this._width;
                },
                set: function(value) {
                    value !== this._width && (this._width = value, this.textbox.style.width = "".concat(value, "px"));
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(TextboxDimensions.prototype, "height", {
                get: function() {
                    return this._height;
                },
                set: function(value) {
                    value !== this._height && (this._height = value, this.textbox.style.height = "".concat(value, "px"));
                },
                enumerable: !1,
                configurable: !0
            }), TextboxDimensions;
        }(), OutlineOverlayComponent = function(_super) {
            function OutlineOverlayComponent(element, lazyScoped, selection, changeDetector, contextActivityService) {
                var _this = _super.call(this) || this;
                return _this.element = element, _this.lazyScoped = lazyScoped, _this.selection = selection, 
                _this.changeDetector = changeDetector, _this.contextActivityService = contextActivityService, 
                _this.directEditTextBoxVisible = !1, _this.asyncSerializer = new asyncSerializer.W, 
                _this;
            }
            return (0, tslib_es6.__extends)(OutlineOverlayComponent, _super), OutlineOverlayComponent.prototype.directEditKeyDown = function(event) {
                var _this = this;
                "Enter" !== event.key && "Escape" !== event.key || (event.preventDefault(), event.stopImmediatePropagation(), 
                this.asyncSerializer.enqueue(function() {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            return "Escape" === event.key ? this.directEditState && this.directEditState.changed && (this.directEditState.dirty = !0, 
                            this.directEditState.value = this.directEditState.originalValueUndefined ? void 0 : this.directEditState.originalValue, 
                            this.flushUpdate()) : this.flushUpdate(), this.endDirectEdit(), this.queueRender(), 
                            [ 2 ];
                        });
                    });
                }));
            }, OutlineOverlayComponent.prototype.maintainTextboxHeight = function(minHeight) {
                if (this.directEditState && this.directEditTextBoxVisible) {
                    var textbox = this.directEditTextBox.nativeElement, fitHeight = textbox.scrollHeight + 2;
                    if (null != minHeight && fitHeight < minHeight && (fitHeight = minHeight), fitHeight > maxOutlineStyleHeight && (fitHeight = maxOutlineStyleHeight), 
                    fitHeight > textbox.clientHeight + 2) {
                        this.directEditTextBoxDimensions.height = fitHeight;
                        var outlineContainerBounds = this.outlineContainer.nativeElement.getBoundingClientRect();
                        this.directEditTextBoxDimensions.top + this.directEditTextBoxDimensions.height > outlineContainerBounds.height && (this.directEditTextBoxDimensions.top = outlineContainerBounds.height - this.directEditTextBoxDimensions.height);
                    }
                }
            }, OutlineOverlayComponent.prototype.directEditTextBoxMouseEvent = function(event) {
                event.stopImmediatePropagation();
            }, OutlineOverlayComponent.prototype.directEditTextBoxChange = function() {
                this.directEditState && (this.maintainTextboxHeight(), this.directEditState.value = this.directEditTextBox.nativeElement.value, 
                this.directEditState.dirty = !0, this.queueUpdate());
            }, OutlineOverlayComponent.prototype.directEditTextBoxBlur = function() {
                this.flushUpdate();
            }, OutlineOverlayComponent.prototype.queueUpdate = function() {
                var _this = this;
                this.directEditUpdateTimeout && (clearTimeout(this.directEditUpdateTimeout), this.directEditUpdateTimeout = void 0), 
                this.directEditUpdateTimeout = setTimeout(function() {
                    _this.directEditUpdateTimeout = void 0, _this.directEditState && null != _this.directEditState.value && _this.directEditState.value.trim() && _this.sendUpdate();
                }, 500);
            }, OutlineOverlayComponent.prototype.flushUpdate = function() {
                this.directEditUpdateTimeout && (clearTimeout(this.directEditUpdateTimeout), this.directEditUpdateTimeout = void 0), 
                this.sendUpdate();
            }, OutlineOverlayComponent.prototype.sendUpdate = function() {
                this.directEditState && this.directEditState.dirty && (this.directEditState.dirty = !1, 
                this.directEditState.changed = !0, this.updateDirectEditValue());
            }, OutlineOverlayComponent.prototype.ngAfterViewInit = function() {
                var _this = this;
                this.lazyScoped.get("formatModeService").then(function(formatModeService) {
                    formatModeService.immediateDirectEdit$.pipe((0, takeUntil.R)(_this.onDestroy$)).subscribe(function(immediateDirectEdit) {
                        return _this.asyncSerializer.enqueue(function() {
                            return _this.immediateDirectEdit(immediateDirectEdit);
                        });
                    });
                }), this.lazyScoped.get("formattingService").then(function(store) {
                    _this.formattingService = store, _this.changeDetector.detectChanges(), _this.renderer = subSelectionOutlineRenderer.D.create(_this.outlineContainer.nativeElement, {
                        startEdit: function(outline) {
                            return _this.asyncSerializer.enqueue(function() {
                                return _this.startDirectEdit(outline);
                            });
                        },
                        showUI: function(outline, event) {
                            return _this.asyncSerializer.enqueue(function() {
                                return _this.showUI(outline, event);
                            });
                        }
                    }), _this.changes$("regionOutlines").pipe((0, takeUntil.R)(_this.onDestroy$)).subscribe(function(regionOutlines) {
                        _this.asyncSerializer.enqueue(function() {
                            return _this.updateOutlines(regionOutlines);
                        });
                    });
                });
            }, OutlineOverlayComponent.prototype.queueRender = function() {
                this.render();
            }, OutlineOverlayComponent.prototype.render = function(noWaitForFont) {
                var _this = this, regionOutlines = this.renderOutlines, textbox = this.directEditTextBox.nativeElement;
                if (this.directEditTextBoxDimensions || (this.directEditTextBoxDimensions = new TextboxDimensions(textbox)), 
                this.directEditState) {
                    regionOutlines = _.filter(regionOutlines, function(outline) {
                        return 2 !== outline.visibility;
                    });
                    var style = this.directEditState.directEdit.style, textBoxSizingFont = this.getTextBoxSizingFont();
                    if (!noWaitForFont && !textMeasurementService.b.isFontLoaded(textBoxSizingFont)) return void document.fonts.load("16px " + textBoxSizingFont.fontFamily).then(function(faces) {}, function(error) {
                        throw error;
                    }).finally(function() {
                        return _this.render(!0);
                    });
                    var dimensions = this.calcTextBoxDimensions(textBoxSizingFont, {
                        width: this.directEditTextBoxVisible && !!this.directEditTextBoxDimensions.width && 0 !== style,
                        height: this.directEditTextBoxVisible && !!this.directEditTextBoxDimensions.height
                    });
                    this.directEditTextBoxDimensions.left = dimensions.left, this.directEditTextBoxDimensions.top = dimensions.top, 
                    this.directEditTextBoxDimensions.width = dimensions.width, this.directEditTextBoxVisible && 0 === style || (this.directEditTextBoxDimensions.height = dimensions.height), 
                    this.directEditTextBoxVisible || (this.directEditTextBoxVisible = !0, textbox.value = this.directEditState.value ?? "", 
                    textbox.style.display = "block", 0 === style && (this.directEditTextBoxDimensions.height = Math.min(maxOutlineStyleHeight, textbox.scrollHeight + 2)), 
                    textbox.focus(), textbox.select(), this.directEditState.bodyClickDismissListener = function(event) {
                        textbox.contains(event.target) || (textbox.style.display = "none", _this.asyncSerializer.enqueue(function() {
                            return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                return (0, tslib_es6.__generator)(this, function(_a) {
                                    return this.directEditState && (this.flushUpdate(), this.endDirectEdit(), this.queueRender()), 
                                    [ 2 ];
                                });
                            });
                        }));
                    }, document.body.addEventListener("pointerdown", this.directEditState.bodyClickDismissListener, !0)), 
                    this.maintainTextboxHeight(dimensions.height);
                } else this.directEditTextBoxVisible && (this.directEditTextBoxVisible = !1, textbox.style.display = "none");
                this.sendOutlinesToRenderer(regionOutlines);
            }, OutlineOverlayComponent.prototype.sendStartDirectEditEvent = function() {
                this.contextActivityService.createActivity({
                    name: "StartDirectEdit",
                    visualName: this.directEditState.visualName,
                    data: {
                        formattingId: this.directEditState.directEdit.reference,
                        source: "DirectEdit"
                    }
                }).resolve();
            }, OutlineOverlayComponent.prototype.sendEndDirectEditEvent = function() {
                this.contextActivityService.createActivity({
                    name: "EndDirectEdit",
                    visualName: this.directEditState.visualName,
                    data: {
                        formattingId: this.directEditState.directEdit.reference,
                        changed: this.directEditState.changed,
                        source: "DirectEdit"
                    }
                }).resolve();
            }, OutlineOverlayComponent.prototype.getTextBoxSizingFont = function() {
                var textBoxStyle = window.getComputedStyle(this.directEditTextBox.nativeElement);
                return {
                    fontFamily: textBoxStyle.fontFamily,
                    fontSize: textBoxStyle.fontSize,
                    fontWeight: textBoxStyle.fontWeight,
                    text: (this.directEditState.value || "") + "MMMMMMMMMMMMMMMMMMMM"
                };
            }, OutlineOverlayComponent.prototype.calcTextBoxDimensions = function(textProperties, preserve) {
                var textDimensions = textMeasurementService.b.measureSvgTextRect(textProperties);
                if (void 0 === directEditTextLineHeight) {
                    var mDimensions = textMeasurementService.b.measureSvgTextRect((0, tslib_es6.__assign)((0, 
                    tslib_es6.__assign)({}, textProperties), {
                        text: "M"
                    }));
                    directEditTextMWidth = mDimensions.width, maxOutlineStyleHeight = 4 * (directEditTextLineHeight = mDimensions.height) + 6;
                }
                var directEditFormattingId = this.directEditState.directEditOutline.directEdit().reference, style = this.directEditState.directEdit.style, foundOutline = findSubSelectionOutline(this.directEditState.directEditOutlineRegion, function(currentOutline) {
                    return 1 === currentOutline.type && currentOutline.directEdit && (0, formattingModelUtil.cd)(currentOutline.directEdit().reference, directEditFormattingId);
                }), outlineContainer = this.outlineContainer.nativeElement, outlineContainerBounds = outlineContainer.getBoundingClientRect(), rect = {
                    left: foundOutline.x - outlineContainerBounds.x,
                    top: foundOutline.y - outlineContainerBounds.y,
                    width: foundOutline.width,
                    height: foundOutline.height
                }, preservedContentWidth = preserve && preserve.width && this.directEditTextBoxDimensions.width && this.directEditTextBoxDimensions.width - 6, preservedContentHeight = preserve && preserve.height && this.directEditTextBoxDimensions.height && this.directEditTextBoxDimensions.height - 6;
                switch (style) {
                  case 1:
                  case 2:
                    var xcenter = rect.left + rect.width / 2, ycenter = rect.top + rect.height / 2, width = Math.min(preservedContentWidth || textDimensions.width, 30 * directEditTextMWidth), height = preservedContentHeight || textDimensions.height;
                    rect.left = xcenter - width / 2, rect.top = ycenter - height / 2, rect.width = width, 
                    rect.height = height;
                    break;

                  case 3:
                    ycenter = rect.top + rect.height / 2, width = Math.min(preservedContentWidth || textDimensions.width, 30 * directEditTextMWidth), 
                    rect.top = ycenter - (height = preservedContentHeight || textDimensions.height) / 2, 
                    rect.width = width, rect.height = height;
                    break;

                  case 0:
                    preservedContentWidth && (rect.width = preservedContentWidth), preservedContentHeight && preservedContentHeight > rect.height && (rect.height = preservedContentHeight), 
                    rect.height < textDimensions.height && (rect.height = textDimensions.height);
                }
                rect.left -= 3, rect.top -= 3, rect.width += 6, rect.height += 6;
                var containerWidth = $(outlineContainer).width(), containerHeight = $(outlineContainer).height();
                return rect.width > containerWidth && (rect.width = containerWidth), rect.height > containerHeight && (rect.height = containerHeight), 
                rect.left < 0 && (rect.left = 0), rect.left + rect.width > containerWidth && (rect.left = Math.max(0, containerWidth - rect.width)), 
                rect.top < 0 && (rect.top = 0), rect.top + rect.height > containerHeight && (rect.top = Math.max(0, containerHeight - rect.height)), 
                rect;
            }, OutlineOverlayComponent.prototype.immediateDirectEdit = function(immediateEdit) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _i, _b, renderOutline, directEditOutline;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        if (this.pendingImmediateDirectEdit = void 0, this.directEditState) {
                            if (immediateEdit.outlineId === (null === (_a = this.directEditState.directEditOutlineRegion) || void 0 === _a ? void 0 : _a.id)) return [ 2 ];
                            this.endDirectEdit();
                        }
                        if (this.renderOutlines) for (_i = 0, _b = this.renderOutlines; _i < _b.length; _i++) if ((renderOutline = _b[_i]).id === immediateEdit.outlineId && 2 === renderOutline.visibility && (directEditOutline = findDirectEditOutline(renderOutline.outline))) return this.startDirectEdit(directEditOutline), 
                        [ 2 ];
                        return this.pendingImmediateDirectEdit = immediateEdit, [ 2 ];
                    });
                });
            }, OutlineOverlayComponent.prototype.updateOutlines = function(regionOutlines) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var directEditFormattingId_1, found_1, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return this.renderOutlines = regionOutlines, this.directEditState && (directEditFormattingId_1 = this.directEditState.directEdit.reference, 
                        found_1 = !1, _.forEach(regionOutlines, function(regionOutline) {
                            if (2 === regionOutline.visibility) {
                                var foundOutline = findSubSelectionOutline(regionOutline, function(outline) {
                                    return 1 === outline.type && outline.directEdit && (0, formattingModelUtil.cd)(outline.directEdit().reference, directEditFormattingId_1);
                                });
                                foundOutline && (found_1 = !0, _this.directEditState.directEditOutlineRegion = regionOutline, 
                                _this.directEditState.directEditOutline = foundOutline, _this.directEditState.directEdit = foundOutline.directEdit());
                            }
                        }), found_1 || this.endDirectEdit()), this.queueRender(), [ 2 ];
                    });
                });
            }, OutlineOverlayComponent.prototype.endDirectEdit = function() {
                this.sendEndDirectEditEvent(), this.directEditState.bodyClickDismissListener && document.body.removeEventListener("pointerdown", this.directEditState.bodyClickDismissListener, !0), 
                this.directEditState = void 0, this.changeDetector.markForCheck();
            }, OutlineOverlayComponent.prototype.showUI = function(outline, event) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var selected, formatModeService, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return !(selected = _.first(this.selection.getSelectedElements())) || _.isEmpty(selected.subSelections) ? [ 3, 3 ] : [ 4, this.lazyScoped.get("formatModeService") ];

                          case 1:
                            return (formatModeService = _a.sent()).updateSubSelection({
                                canvasItem: selected.canvasItem,
                                subSelections: _.map(selected.subSelections, function(subSelection) {
                                    return {
                                        source: "external",
                                        triggerAction: 0,
                                        visualSubSelection: {
                                            displayName: subSelection.visualSubSelection.displayName,
                                            subSelectionType: 1,
                                            selectionOrigin: _this.getSelectionOrigin(event),
                                            showUI: !0,
                                            visualObjects: subSelection.visualSubSelection.visualObjects,
                                            target: event.target
                                        }
                                    };
                                })
                            }), [ 4, formatModeService.triggerShowUI(void 0) ];

                          case 2:
                            _a.sent(), _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, OutlineOverlayComponent.prototype.getSelectionOrigin = function(event) {
                var top = event.target.getBoundingClientRect().top, offsetY = -1 * Math.abs(top - event.clientY);
                return {
                    x: event.clientX,
                    y: event.clientY,
                    offset: {
                        x: 0,
                        y: offsetY
                    }
                };
            }, OutlineOverlayComponent.prototype.startDirectEdit = function(outline) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var formatModeService, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.pendingImmediateDirectEdit = void 0, [ 4, this.lazyScoped.get("formatModeService") ];

                          case 1:
                            return formatModeService = _b.sent(), _a = this, [ 4, this.getDirectEditContext(outline) ];

                          case 2:
                            return _a.directEditState = _b.sent(), this.directEditState ? (formatModeService.hideAllUI(), 
                            this.changeDetector.markForCheck(), this.queueRender(), this.sendStartDirectEditEvent(), 
                            [ 2 ]) : [ 2 ];
                        }
                    });
                });
            }, OutlineOverlayComponent.prototype.updateDirectEditValue = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var directEditState, selected;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return directEditState = this.directEditState, (selected = _.first(this.selection.getSelectedElements())) && !_.isEmpty(selected.subSelections) && selected.canvasItem ? directEditState.value ? [ 4, this.formattingService.saveValues({
                                changes: [ {
                                    objectName: directEditState.descriptor.objectName,
                                    uid: directEditState.uid,
                                    formattingSource: directEditState.source,
                                    propertySlice: {
                                        name: directEditState.descriptor.propertyName,
                                        value: directEditState.value,
                                        type: directEditState.descriptor.type
                                    },
                                    hasDynamicExpressionSupport: !1,
                                    canvasItems: [ selected.canvasItem ],
                                    visualUpdateSource: 1
                                } ]
                            }, {
                                source: "DirectEdit"
                            }) ] : [ 3, 2 ] : [ 2 ];

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.formattingService.revertToDefault([ (0, tslib_es6.__assign)((0, 
                            tslib_es6.__assign)({}, directEditState.descriptor), {
                                originSource: directEditState.source,
                                canvasItems: [ selected.canvasItem ]
                            }) ]) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, OutlineOverlayComponent.prototype.getDirectEditContext = function(directEditOutline) {
                var formatting, visualContainerName, _this = this, deferred = new promise.B, directEdit = directEditOutline.directEdit(), reference = directEdit.reference, regionOutlines = this.renderOutlines, selected = _.first(this.selection.getSelectedElements());
                selected ? (formatting = this.formattingService.getFor({
                    type: 0,
                    canvasItem: selected.canvasItem
                }), visualContainerName = selected.canvasItem.name) : formatting = this.formattingService.getFor({
                    type: 1
                });
                var selectCount = 0, selectSliceSubscription = formatting.selectSlice(reference).pipe((0, 
                take.q)(2)).subscribe(function(slice) {
                    if (slice && slice.control && slice.control.properties && slice.control.properties.descriptor) {
                        if ((0, build_control_util.IW)(slice)) return debug.fF.assertFail("Unexpected composite slice"), 
                        void done(void 0);
                        var selected = _.first(_this.selection.getSelectedElements());
                        if (selected && !_.isEmpty(selected.subSelections) && selected.canvasItem) {
                            var source = slice.originSource, pivotName = slice.pivotSource, _a = slice.control.properties, descriptor = _a.descriptor, value = _a.value, sliceUid = slice.uid, originalValue = null == value ? void 0 : "".concat(value), originalValueUndefined = !0, item = selected.canvasItem;
                            if ((0, visualContainerGroup2.Vz)(item)) {
                                originalValueUndefined = !function(singleVisual, objectName, propertyName) {
                                    var vcObjects = singleVisual.vcObjects, vcObject = vcObjects && vcObjects[objectName];
                                    if (vcObject) return null != vcObject[0].properties[propertyName];
                                    var objects = singleVisual.objects, object = objects && objects[objectName];
                                    return !!object && null != object[0].properties[propertyName];
                                }(item.config.singleVisual, descriptor.objectName, descriptor.propertyName);
                                var directEditOutlineRegion = _.find(regionOutlines, function(regionOutline) {
                                    return regionOutline.visualContainerName === visualContainerName && containsDirectEditOutline(regionOutline.outline);
                                });
                                done(directEditOutlineRegion ? {
                                    regionOutlines,
                                    directEditOutlineRegion,
                                    directEditOutline,
                                    directEdit,
                                    source,
                                    pivot: pivotName,
                                    descriptor,
                                    value: originalValueUndefined && void 0 !== directEdit.displayValue ? directEdit.displayValue : originalValue,
                                    originalValue,
                                    originalValueUndefined,
                                    dirty: !1,
                                    visualName: selected && selected.canvasItem.name,
                                    bodyClickDismissListener: void 0,
                                    uid: sliceUid
                                } : void 0);
                            } else done(void 0);
                        } else done(void 0);
                    } else 2 == ++selectCount && done(void 0);
                    function containsDirectEditOutline(regionOutline) {
                        var _a;
                        if (regionOutline === directEditOutline) return !0;
                        if (1 === regionOutline.type && regionOutline.directEdit) {
                            var regionOutlineFormattingId = null === (_a = regionOutline.directEdit()) || void 0 === _a ? void 0 : _a.reference;
                            if ((0, formattingModelUtil.cd)(regionOutlineFormattingId, reference)) return !0;
                        }
                        return !(0 !== regionOutline.type || !_.some(regionOutline.outlines, function(outline) {
                            return containsDirectEditOutline(outline);
                        }));
                    }
                }), isDone = !1;
                function done(state) {
                    isDone = !0, deferred.resolve(state), selectSliceSubscription && selectSliceSubscription.unsubscribe();
                }
                return isDone && selectSliceSubscription.unsubscribe(), deferred.promise;
            }, OutlineOverlayComponent.prototype.sendOutlinesToRenderer = function(regionOutlines) {
                var offset = this.element.nativeElement.getBoundingClientRect();
                if (this.renderer.updateRegionOutlines(regionOutlines, offset), this.pendingImmediateDirectEdit) for (var _i = 0, regionOutlines_1 = regionOutlines; _i < regionOutlines_1.length; _i++) {
                    var regionOutline = regionOutlines_1[_i];
                    if (regionOutline.id === this.pendingImmediateDirectEdit.outlineId && 2 === regionOutline.visibility) {
                        var outline = findDirectEditOutline(regionOutline.outline);
                        outline && this.startDirectEdit(outline);
                    }
                }
            }, OutlineOverlayComponent.\u0275fac = function(t) {
                return new (t || OutlineOverlayComponent)(core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](context_activity_service.r));
            }, OutlineOverlayComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: OutlineOverlayComponent,
                selectors: [ [ "outline-overlay" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](outline_overlay_component_c0, 5), core["\u0275\u0275viewQuery"](outline_overlay_component_c1, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.outlineContainer = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.directEditTextBox = _t.first);
                    }
                },
                hostVars: 1,
                hostBindings: function(rf, ctx) {
                    2 & rf && core["\u0275\u0275attribute"]("data-testid", "outline-overlay");
                },
                inputs: {
                    regionOutlines: "regionOutlines"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 1,
                vars: 1,
                consts: [ [ 4, "ngIf" ], [ "data-testid", "directEditTextBox", 1, "directEditTextBox", 3, "click", "mousedown", "pointerdown", "input", "blur", "keydown" ], [ "directEditTextBox", "" ], [ 1, "outlineContainer" ], [ "outlineContainer", "" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, OutlineOverlayComponent_ng_container_0_Template, 5, 0, "ng-container", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", ctx.formattingService);
                },
                dependencies: [ common.NgIf ],
                styles: [ "[_nghost-%COMP%]{display:block}.directEditTextBox[_ngcontent-%COMP%]{position:absolute;display:none;pointer-events:auto;resize:none;box-sizing:border-box;padding:2px;border-width:1px}.outlineContainer[_ngcontent-%COMP%]{pointer-events:none;position:absolute;height:100%;width:100%;overflow:hidden;top:0;left:0}" ],
                changeDetection: 0
            }), OutlineOverlayComponent;
        }(rx_component.w);
        function findSubSelectionOutline(regionOutline, condition) {
            for (var queue = [ regionOutline.outline ]; !_.isEmpty(queue); ) {
                var currentOutline = queue.shift();
                if (0 === currentOutline.type) queue.push.apply(queue, currentOutline.outlines); else if (condition(currentOutline)) return currentOutline;
            }
        }
        function findDirectEditOutline(outline) {
            if (1 === outline.type) return outline;
            if (0 === outline.type) for (var _i = 0, _a = outline.outlines; _i < _a.length; _i++) {
                var found = findDirectEditOutline(_a[_i]);
                if (found) return found;
            }
        }
        var BehaviorSubject = __webpack_require__(35510), distinctUntilChanged = __webpack_require__(77526), conceptual_schema_proxy_service = __webpack_require__(26898), data_sources_service = __webpack_require__(83008), event_bridge_service = __webpack_require__(11494), eager_format_mode_service = __webpack_require__(53081), panes_visibility_service = __webpack_require__(21024), view_mode_state_service = __webpack_require__(77200), visual_authoring_operations_service = __webpack_require__(27980), formatting_store_helpers = __webpack_require__(92755), pbi_overlay_positions = __webpack_require__(25512), canvasDisplayUtil = __webpack_require__(64466);
        function MiniToolbarComponentWrapper_mini_toolbar_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "mini-toolbar", 2), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("subSelectionUpdateArgs", ctx_r0.data.subSelectionUpdateArgs)("subSelectionStyles", ctx_r0.data.subSelectionStyles)("subSelectedItem", (null == ctx_r0.data.subSelectionUpdateArgs ? null : ctx_r0.data.subSelectionUpdateArgs.subSelections) && (null == ctx_r0.data.subSelectionUpdateArgs ? null : ctx_r0.data.subSelectionUpdateArgs.subSelections[0])), 
                core["\u0275\u0275attribute"]("aria-labelledby", ctx_r0.ariaLabelledby);
            }
        }
        var MiniToolbarComponentWrapper = function() {
            function MiniToolbarComponentWrapper(onObjectUIData) {
                var _a;
                this.onObjectUIData = onObjectUIData, this.data = this.onObjectUIData, this.ariaLabelledby = (0, 
                on_object_container_util.u)(null === (_a = this.data.subSelectionUpdateArgs) || void 0 === _a ? void 0 : _a.canvasItem.name);
            }
            return MiniToolbarComponentWrapper.\u0275fac = function(t) {
                return new (t || MiniToolbarComponentWrapper)(core["\u0275\u0275directiveInject"](pbi_overlay_ref.M));
            }, MiniToolbarComponentWrapper.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: MiniToolbarComponentWrapper,
                selectors: [ [ "mini-toolbar-component-wrapper" ] ],
                decls: 2,
                vars: 1,
                consts: [ [ 1, "on-object-container" ], [ "class", "mini-toolbar", "role", "toolbar", 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectedItem", 4, "ngIf" ], [ "role", "toolbar", 1, "mini-toolbar", 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectedItem" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275template"](1, MiniToolbarComponentWrapper_mini_toolbar_1_Template, 1, 4, "mini-toolbar", 1), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", (null == ctx.data ? null : ctx.data.subSelectionStyles) && (null == ctx.data ? null : ctx.data.subSelectionUpdateArgs)));
                },
                dependencies: [ common.NgIf, MiniToolbarComponent ],
                styles: [ ".on-object-container[_ngcontent-%COMP%]{pointer-events:none}.on-object-container[_ngcontent-%COMP%]   .mini-toolbar[_ngcontent-%COMP%]{pointer-events:auto;max-width:fit-content}" ],
                changeDetection: 0
            }), MiniToolbarComponentWrapper;
        }();
        function OnObjectContextMenuWrapperComponent_on_object_context_menu_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r2 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "on-object-context-menu", 3), core["\u0275\u0275listener"]("onExecuteContextMenuAction", function() {
                    core["\u0275\u0275restoreView"](_r2);
                    var ctx_r1 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r1.executeContextMenuAction());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("subSelectionUpdateArgs", ctx_r0.data.subSelectionUpdateArgs)("subSelectionStyles", ctx_r0.data.subSelectionStyles)("subSelectionShortcuts", ctx_r0.data.subSelectionShortcuts);
            }
        }
        var OnObjectContextMenuWrapperComponent = function() {
            function OnObjectContextMenuWrapperComponent(onObjectUIData, formattingUIManager) {
                var _a;
                this.onObjectUIData = onObjectUIData, this.formattingUIManager = formattingUIManager, 
                this.hideContextMenu = !1, this.data = this.onObjectUIData;
                var subSelections = null === (_a = this.data.subSelectionUpdateArgs) || void 0 === _a ? void 0 : _a.subSelections;
                subSelections && (this.hideContextMenu = subSelections.some(function(subSelection) {
                    return "disambiguationMenu" === subSelection.source;
                }));
            }
            return OnObjectContextMenuWrapperComponent.prototype.executeContextMenuAction = function() {
                this.formattingUIManager.executeContextMenuAction();
            }, OnObjectContextMenuWrapperComponent.\u0275fac = function(t) {
                return new (t || OnObjectContextMenuWrapperComponent)(core["\u0275\u0275directiveInject"](pbi_overlay_ref.M), core["\u0275\u0275directiveInject"](FormattingUIManagerService));
            }, OnObjectContextMenuWrapperComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: OnObjectContextMenuWrapperComponent,
                selectors: [ [ "on-object-context-menu-wrapper" ] ],
                decls: 3,
                vars: 1,
                consts: [ [ 1, "on-object-container" ], [ 1, "context-menu" ], [ 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectionShortcuts", "onExecuteContextMenuAction", 4, "ngIf" ], [ 3, "subSelectionUpdateArgs", "subSelectionStyles", "subSelectionShortcuts", "onExecuteContextMenuAction" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0)(1, "div", 1), core["\u0275\u0275template"](2, OnObjectContextMenuWrapperComponent_on_object_context_menu_2_Template, 1, 3, "on-object-context-menu", 2), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("ngIf", (null == ctx.data ? null : ctx.data.subSelectionShortcuts) && !ctx.hideContextMenu));
                },
                dependencies: [ common.NgIf, OnObjectContextMenuComponent ],
                styles: [ ".on-object-container[_ngcontent-%COMP%]{pointer-events:none}.on-object-container[_ngcontent-%COMP%]   .context-menu[_ngcontent-%COMP%]{min-width:180px;max-width:fit-content;height:auto;pointer-events:auto}" ],
                changeDetection: 0
            }), OnObjectContextMenuWrapperComponent;
        }(), htmlSubSelectionHelper = __webpack_require__(52287), visual_overlay_position_service = __webpack_require__(26691), CANVAS = canvasDisplayUtil.s.DisplayAreaNameSelector.selector, OnObjectOverlayService = function() {
            function OnObjectOverlayService(componentFactoryResolver, formattingUIManager, injector, pbiOverlay, runningVisuals, visualOverlayPositionService) {
                var _this = this;
                this.componentFactoryResolver = componentFactoryResolver, this.formattingUIManager = formattingUIManager, 
                this.injector = injector, this.pbiOverlay = pbiOverlay, this.runningVisuals = runningVisuals, 
                this.visualOverlayPositionService = visualOverlayPositionService, this.formattingUIManager.contextMenuActionExecuted$.subscribe(function() {
                    _this.hide();
                });
            }
            return OnObjectOverlayService.prototype.show = function(args) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, eager_format_mode_service.A)(args) ? [ 4, this.showForVisual(args) ] : [ 3, 2 ];

                          case 1:
                            return _a.sent(), [ 3, 3 ];

                          case 2:
                            this.showForNonVisual(args), _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, OnObjectOverlayService.prototype.showForVisual = function(args) {
                var _a, _b, _c, _d, _e, _f;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var canvasItem, subSelections, runningVisual, shortcuts, styles, visualSubSelections, origin, eventTarget, visualContainerElement, target, showMiniToolbar, showContextMenu, positions, positionStrategy, onObjectUIData, contextMenuPositionStrategy;
                    return (0, tslib_es6.__generator)(this, function(_g) {
                        switch (_g.label) {
                          case 0:
                            return subSelections = args.subSelections, (0, visualContainerGroup2.Vz)(canvasItem = args.canvasItem) ? (debug.fF.assert(function() {
                                return 1 === subSelections.length;
                            }, "Expected 1 sub-selection"), (runningVisual = this.runningVisuals.getVisual(canvasItem)) ? (visualSubSelections = subSelections.map(function(subSelection) {
                                return subSelection.visualSubSelection;
                            }), [ 4, runningVisual.getSubSelectionShortcuts(visualSubSelections, void 0) ]) : [ 3, 3 ]) : (debug.fF.assertFail("Groups are not supported"), 
                            [ 2 ]);

                          case 1:
                            return shortcuts = _g.sent(), [ 4, runningVisual.getSubSelectionStyles(visualSubSelections) ];

                          case 2:
                            styles = _g.sent(), _g.label = 3;

                          case 3:
                            return shortcuts || styles ? (origin = _.first(subSelections).visualSubSelection.selectionOrigin, 
                            eventTarget = null === (_a = _.first(subSelections).visualSubSelection) || void 0 === _a ? void 0 : _a.target, 
                            visualContainerElement = null === (_b = this.visualOverlayPositionService.getElement(canvasItem)) || void 0 === _b ? void 0 : _b.get(0), 
                            (target = (null !== (_d = null === (_c = $(eventTarget).closest("[".concat(htmlSubSelectionHelper.CP, "]"))) || void 0 === _c ? void 0 : _c.get(0)) && void 0 !== _d ? _d : eventTarget) || visualContainerElement).classList.contains(htmlSubSelectionHelper.cy) || (target = visualContainerElement), 
                            positions = this.createPositions(showMiniToolbar = !!styles, showContextMenu = !!shortcuts, target, origin), 
                            positionStrategy = this.pbiOverlay.position().flexibleConnectedTo(target).withPositions(positions), 
                            onObjectUIData = {
                                subSelectionShortcuts: shortcuts,
                                subSelectionStyles: styles,
                                subSelectionUpdateArgs: args
                            }, this.hide(), showMiniToolbar && showContextMenu ? (this.minitoolbarRef = this.openOverlay(onObjectUIData, positionStrategy, MiniToolbarComponentWrapper), 
                            contextMenuPositionStrategy = this.pbiOverlay.position().flexibleConnectedTo(null === (_f = null === (_e = this.minitoolbarRef) || void 0 === _e ? void 0 : _e.overlayRef) || void 0 === _f ? void 0 : _f.overlayElement).withPositions([ (0, 
                            pbi_overlay_positions.Oq)(0, 8), (0, pbi_overlay_positions.w3)(0, -8) ]), this.contextMenuRef = this.openOverlay(onObjectUIData, contextMenuPositionStrategy, OnObjectContextMenuWrapperComponent), 
                            [ 2 ]) : showMiniToolbar ? (this.minitoolbarRef = this.openOverlay(onObjectUIData, positionStrategy, MiniToolbarComponentWrapper), 
                            [ 2 ]) : showContextMenu ? (this.contextMenuRef = this.openOverlay(onObjectUIData, positionStrategy, OnObjectContextMenuWrapperComponent), 
                            [ 2 ]) : [ 2 ]) : [ 2 ];
                        }
                    });
                });
            }, OnObjectOverlayService.prototype.showForNonVisual = function(args) {
                var shortcuts = args.customShortcuts, event = args.sourceEvent;
                if (shortcuts) {
                    var onObjectUIData = {
                        subSelectionShortcuts: shortcuts
                    }, flexibleOrigin = {
                        x: event.clientX,
                        y: event.clientY
                    }, positionStrategy = this.pbiOverlay.position().flexibleConnectedTo(flexibleOrigin).withPositions(this.createNonVisualPositions());
                    this.contextMenuRef = this.openOverlay(onObjectUIData, positionStrategy, OnObjectContextMenuWrapperComponent);
                }
            }, OnObjectOverlayService.prototype.openOverlay = function(onObjectUIData, positionStrategy, component) {
                return this.pbiOverlay.open({
                    component,
                    data: onObjectUIData,
                    options: {
                        positionStrategy,
                        hasBackdrop: !0,
                        backdropClass: [ pbi_overlay_service.L, "pbi-pointer-events-none" ],
                        panelClass: "pbi-pointer-events-none"
                    },
                    injector: this.injector,
                    componentFactoryResolver: this.componentFactoryResolver,
                    closeOnBackdropClick: !0
                });
            }, OnObjectOverlayService.prototype.hide = function() {
                this.minitoolbarRef && (this.minitoolbarRef.close(), this.minitoolbarRef = void 0), 
                this.contextMenuRef && (this.contextMenuRef.close(), this.contextMenuRef = void 0);
            }, OnObjectOverlayService.prototype.createPositions = function(showMiniToolbar, showContextMenu, subSelectedElement, positionOrigin) {
                var _a, endX = (_a = this.visualOverlayPositionService.getRelativeOffsets(subSelectedElement, positionOrigin)).endX, startX = _a.startX, startY = _a.startY, endY = _a.endY;
                if (showMiniToolbar) {
                    var positions = [ (0, pbi_overlay_positions.Zz)(endX, startY - 68), (0, pbi_overlay_positions.Iz)(startX, startY - 68), (0, 
                    pbi_overlay_positions.J7)(endX, endY), (0, pbi_overlay_positions.Kb)(startX, endY) ], top_1 = document.querySelector(CANVAS).getBoundingClientRect().top;
                    return positionOrigin.y - top_1 < 68 && positions.unshift((0, pbi_overlay_positions.Oq)(startY, endY)), 
                    positions;
                }
                if (showContextMenu) return [ (0, pbi_overlay_positions.Zz)(endX, startY), (0, pbi_overlay_positions.Iz)(startX, startY), (0, 
                pbi_overlay_positions.J7)(endX, endY), (0, pbi_overlay_positions.Kb)(startX, endY) ];
            }, OnObjectOverlayService.prototype.createNonVisualPositions = function() {
                return [ (0, pbi_overlay_positions.Zz)(), (0, pbi_overlay_positions.Iz)(), (0, pbi_overlay_positions.J7)(), (0, 
                pbi_overlay_positions.Kb)() ];
            }, OnObjectOverlayService.\u0275fac = function(t) {
                return new (t || OnObjectOverlayService)(core["\u0275\u0275inject"](core.ComponentFactoryResolver), core["\u0275\u0275inject"](FormattingUIManagerService), core["\u0275\u0275inject"](core.Injector), core["\u0275\u0275inject"](pbi_overlay_service._), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](visual_overlay_position_service.z));
            }, OnObjectOverlayService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: OnObjectOverlayService,
                factory: OnObjectOverlayService.\u0275fac
            }), OnObjectOverlayService;
        }(), constants = __webpack_require__(21302), FormatModeService = function() {
            function FormatModeService(conceptualSchemaProxy, dataSourcesService, eventBridge, formattingUIManager, lazyScoped, onObjectOverlayService, paneVisibility, runningVisuals, selection, viewModeState, visualAuthoringOperationsService) {
                var _this = this;
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSourcesService = dataSourcesService, 
                this.eventBridge = eventBridge, this.formattingUIManager = formattingUIManager, 
                this.lazyScoped = lazyScoped, this.onObjectOverlayService = onObjectOverlayService, 
                this.paneVisibility = paneVisibility, this.runningVisuals = runningVisuals, this.selection = selection, 
                this.viewModeState = viewModeState, this.visualAuthoringOperationsService = visualAuthoringOperationsService, 
                this.requestedSubSelection$ = new ReplaySubject.t(1), this.triggerShowUIWithSubSelection$ = new BehaviorSubject.X(void 0), 
                this.navigateShortcut$ = new ReplaySubject.t(1), this.onDestroy$ = new ReplaySubject.t(1), 
                this.navigateId = 0, this.immediateDirectEdit$ = new ReplaySubject.t(1), (0, combineLatest.aj)([ this.formattingUIManager.getFormatPaneRegistered$(), this.navigateShortcut$ ]).pipe((0, 
                takeUntil.R)(this.onDestroy$)).subscribe(function(_a) {
                    var registered = _a[0], navigateOptions = _a[1];
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var currentNavigateId, shortcut, canvasItem, destinationInfo, destinationPivot, destinationCardUid_1, destinationGroupUid_1, formattingContainersNavigationInfo, formattingInformation, slice, group, referenceFormattingSource;
                        return (0, tslib_es6.__generator)(this, function(_b) {
                            switch (_b.label) {
                              case 0:
                                return this.navigateId++, currentNavigateId = this.navigateId, registered && navigateOptions ? (canvasItem = navigateOptions.canvasItem, 
                                destinationInfo = (shortcut = navigateOptions.shortcut).destinationInfo, destinationPivot = void 0, 
                                formattingContainersNavigationInfo = void 0, this.eventBridge.publishToChannel(shortcut.destinationPivot && "Page" === (destinationPivot = shortcut.destinationPivot) ? constants.mF : constants.sn), 
                                formattingInformation = this.formattingService.getFor(canvasItem ? {
                                    type: 0,
                                    canvasItem
                                } : {
                                    type: 1
                                }), (0, formattingModelUtil.LI)(destinationInfo) ? [ 4, formattingInformation.selectSlice(destinationInfo).pipe((0, 
                                takeUntil.R)(this.onDestroy$), (0, filter.h)(function(slice) {
                                    return !!slice;
                                }), (0, take.q)(1)).toPromise() ] : [ 3, 3 ]) : [ 3, 6 ];

                              case 1:
                                return (slice = _b.sent()) && currentNavigateId === this.navigateId ? (destinationPivot = slice.pivotSource, 
                                [ 4, formattingInformation.selectGroup(destinationGroupUid_1 = slice.groupUid).pipe((0, 
                                takeUntil.R)(this.onDestroy$), (0, filter.h)(function(group) {
                                    return !!group;
                                }), (0, take.q)(1)).toPromise() ]) : [ 2 ];

                              case 2:
                                return (group = _b.sent()) && currentNavigateId === this.navigateId ? (destinationCardUid_1 = group.cardUid, 
                                formattingContainersNavigationInfo = group.parentContainers, [ 3, 5 ]) : [ 2 ];

                              case 3:
                                return destinationGroupUid_1 = destinationInfo.groupUid, [ 4, formattingInformation.selectCard(destinationCardUid_1 = destinationInfo.cardUid).pipe((0, 
                                takeUntil.R)(this.onDestroy$), (0, filter.h)(function(card) {
                                    return !!card;
                                }), (0, map.U)(function(card) {
                                    return card.pivotSource;
                                }), (0, take.q)(1)).toPromise() ];

                              case 4:
                                if (!(referenceFormattingSource = _b.sent()) || currentNavigateId !== this.navigateId) return [ 2 ];
                                destinationPivot = null != destinationPivot ? destinationPivot : referenceFormattingSource, 
                                _b.label = 5;

                              case 5:
                                this.formattingUIManager.setFormatPaneCardExpansion({
                                    selectedPivot: destinationPivot,
                                    isCardExpanded: function(cardId) {
                                        return destinationCardUid_1 === cardId;
                                    },
                                    isGroupExpanded: function(cardId, groupId) {
                                        if (destinationCardUid_1 === cardId && null != destinationGroupUid_1) return (0, 
                                        formattingModelUtil.Ko)(destinationGroupUid_1) === (0, formattingModelUtil.Ko)(groupId);
                                    },
                                    formattingContainersNavigationInfo,
                                    canvasItems: [ canvasItem ],
                                    scrollToOpenCard: !0
                                }), shortcut.doNotDismissUI || this.hideAllUI(), this.navigateShortcut$.next(void 0), 
                                _b.label = 6;

                              case 6:
                                return [ 2 ];
                            }
                        });
                    });
                });
            }
            return FormatModeService.prototype.ngOnDestroy = function() {
                this.onDestroy$.next(!0);
            }, FormatModeService.prototype.monitor = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var formatMode$, selectedVisualContainer$, selectedVisualContainerName$, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.monitoring ? [ 2 ] : (this.monitoring = !0, [ 4, this.ensureStoreInitialized() ]);

                          case 1:
                            return _a.sent(), formatMode$ = this.viewModeState.formatMode$, selectedVisualContainer$ = selectionUtils.UP.getSelectedVisualContainer$(this.selection), 
                            selectedVisualContainerName$ = selectedVisualContainer$.pipe((0, map.U)(function(selectedVisualContainer) {
                                return null == selectedVisualContainer ? void 0 : selectedVisualContainer.name;
                            }), (0, distinctUntilChanged.x)()), formatMode$.pipe((0, filter.h)(function(formatMode) {
                                return formatMode;
                            }), (0, takeUntil.R)(this.onDestroy$)).subscribe(function() {
                                return _this.showFormatPane(!0);
                            }), (0, combineLatest.aj)([ formatMode$, selectedVisualContainerName$, this.triggerShowUIWithSubSelection$ ]).pipe((0, 
                            withLatestFrom.M)(this.requestedSubSelection$), (0, takeUntil.R)(this.onDestroy$)).subscribe(function(_a) {
                                var _b, _c, _d = _a[0], formatMode = _d[0], selectedVisualContainerName = _d[1], requestedSubSelection = _a[1];
                                _this.hideUI(null === (_b = requestedSubSelection.canvasItem) || void 0 === _b ? void 0 : _b.name), 
                                formatMode && selectedVisualContainerName === (null === (_c = requestedSubSelection.canvasItem) || void 0 === _c ? void 0 : _c.name) && _.some(requestedSubSelection.subSelections, function(subSelection) {
                                    return subSelection.visualSubSelection.showUI;
                                }) && _this.showUI(requestedSubSelection);
                            }), [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.updateSubSelection = function(args) {
                this.requestedSubSelection$.next(args);
            }, FormatModeService.prototype.triggerShowUI = function(args) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return args ? [ 4, this.showUI(args) ] : [ 3, 2 ];

                          case 1:
                            return _a.sent(), [ 3, 3 ];

                          case 2:
                            this.triggerShowUIWithSubSelection$.next(), _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.triggerImmediateDirectEdit = function(outlineId) {
                this.immediateDirectEdit$.next({
                    outlineId,
                    timestamp: performance.now()
                });
            }, FormatModeService.prototype.ensureStoreInitialized = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.formattingService ? [ 3, 2 ] : (_a = this, [ 4, this.lazyScoped.get("formattingService") ]);

                          case 1:
                            _a.formattingService = _b.sent(), _b.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.showUI = function(args) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var shouldUpdate;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return shouldUpdate = !this.activeContainerName, (0, eager_format_mode_service.A)(args) && (shouldUpdate = shouldUpdate || this.activeContainerName === args.canvasItem.name, 
                            this.activeContainerName = null !== (_a = this.activeContainerName) && void 0 !== _a ? _a : args.canvasItem.name), 
                            shouldUpdate ? [ 4, this.onObjectOverlayService.show(args) ] : [ 3, 2 ];

                          case 1:
                            _b.sent(), _b.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.showFormatPane = function(force) {
                var isVisible = this.paneVisibility.isPaneVisible("format"), isExpanded = this.paneVisibility.isPaneExpanded("format");
                return !!(force || isVisible && isExpanded) && (isVisible || (this.paneVisibility.togglePaneVisibility("format"), 
                isVisible = !0), (isExpanded = this.paneVisibility.isPaneExpanded("format")) || (isExpanded = this.paneVisibility.togglePaneExpansion("format")), 
                isVisible && isExpanded);
            }, FormatModeService.prototype.hideUI = function(containerName) {
                (!this.activeContainerName || this.activeContainerName && containerName === this.activeContainerName) && this.hideAllUI();
            }, FormatModeService.prototype.hideAllUI = function() {
                this.activeContainerName = void 0, this.onObjectOverlayService.hide();
            }, FormatModeService.prototype.executeShortcut = function(options, parentContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var type;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            if (_.isEmpty(options)) return [ 2 ];
                            switch (type = options[0].shortcut.type) {
                              case 0:
                                return [ 3, 1 ];

                              case 1:
                                return [ 3, 3 ];

                              case 2:
                                return [ 3, 5 ];

                              case 3:
                                return [ 3, 7 ];

                              case 4:
                                return [ 3, 9 ];

                              case 5:
                                return [ 3, 10 ];

                              case 6:
                                return [ 3, 11 ];

                              case 9:
                                return [ 3, 13 ];
                            }
                            return [ 3, 15 ];

                          case 1:
                            return [ 4, this.executeResetShortcut(options, parentContextActivity) ];

                          case 2:
                            return _b.sent(), [ 2 ];

                          case 3:
                            return [ 4, this.executeNavigateShortcut(options) ];

                          case 4:
                            return _b.sent(), [ 2 ];

                          case 5:
                            return [ 4, this.executeToggleShortcut(options) ];

                          case 6:
                            return _b.sent(), [ 2 ];

                          case 7:
                            return [ 4, this.executePickerShortcut(options) ];

                          case 8:
                            return _b.sent(), [ 2 ];

                          case 9:
                            return this.executeSortShortcut(options), [ 2 ];

                          case 10:
                            return this.executeCustomActionShortcut(options), [ 2 ];

                          case 11:
                            return [ 4, this.executeConditionalFormattingShortcut(options) ];

                          case 12:
                            return _b.sent(), [ 2 ];

                          case 13:
                            return [ 4, this.executeSetValueShortcut(options) ];

                          case 14:
                            return _b.sent(), [ 2 ];

                          case 15:
                            debug.fF.assertNever(type), _b.label = 16;

                          case 16:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.executeResetShortcut = function(options, parentContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var revertToDefaultDescriptorsWithCanvasItems, _loop_1, this_1, _i, options_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.ensureStoreInitialized() ];

                          case 1:
                            _a.sent(), revertToDefaultDescriptorsWithCanvasItems = [], _loop_1 = function(option) {
                                var canvasItem, shortcut, revertToDefaultDescriptorsDictionary, pivot;
                                return (0, tslib_es6.__generator)(this, function(_b) {
                                    switch (_b.label) {
                                      case 0:
                                        if (canvasItem = option.canvasItem, (shortcut = option.shortcut).revertToDefaultDescriptors) for (pivot in revertToDefaultDescriptorsDictionary = _.groupBy(shortcut.revertToDefaultDescriptors, function(d) {
                                            return d.originSource;
                                        })) revertToDefaultDescriptorsWithCanvasItems.push.apply(revertToDefaultDescriptorsWithCanvasItems, _.map(revertToDefaultDescriptorsDictionary[pivot], function(descriptor) {
                                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                                canvasItems: [ canvasItem ]
                                            });
                                        }));
                                        return shortcut.resetSortRoleKey ? [ 4, this_1.resetSortShortcut(canvasItem, shortcut.resetSortRoleKey) ] : [ 3, 2 ];

                                      case 1:
                                        _b.sent(), _b.label = 2;

                                      case 2:
                                        return [ 2 ];
                                    }
                                });
                            }, this_1 = this, _i = 0, options_1 = options, _a.label = 2;

                          case 2:
                            return _i < options_1.length ? [ 5, _loop_1(options_1[_i]) ] : [ 3, 5 ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return _i++, [ 3, 2 ];

                          case 5:
                            return this.formattingService.revertToDefault(revertToDefaultDescriptorsWithCanvasItems, void 0, parentContextActivity), 
                            [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.executeToggleShortcut = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var updatedOptions, _i, options_2, option, shortcut, canvasItem, _a, _b, relatedShortcut;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        for (updatedOptions = [], _i = 0, options_2 = options; _i < options_2.length; _i++) {
                            if (shortcut = (option = options_2[_i]).shortcut, canvasItem = option.canvasItem, 
                            !_.isEmpty(shortcut.relatedToggledFormattingIds)) for (_a = 0, _b = shortcut.relatedToggledFormattingIds; _a < _b.length; _a++) relatedShortcut = (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({
                                type: 2
                            }, _b[_a]), {
                                telemetrySource: shortcut.telemetrySource
                            }), updatedOptions.push({
                                shortcut: relatedShortcut,
                                canvasItem
                            });
                            updatedOptions.push(option);
                        }
                        return [ 2, this.setToggleValue(updatedOptions) ];
                    });
                });
            }, FormatModeService.prototype.setToggleValue = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var telemetrySource, revertToDefaultDescriptorsWithCanvasItems, formattingChanges, _loop_2, this_2, _i, options_3;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.ensureStoreInitialized() ];

                          case 1:
                            if (_a.sent(), _.isEmpty(options)) return [ 2 ];
                            telemetrySource = options[0].shortcut.telemetrySource, debug.fF.assert(function() {
                                return _.every(options, function(option) {
                                    return option.shortcut.telemetrySource === telemetrySource;
                                });
                            }, "expected only one telemetry source for all the toggle shortcuts"), revertToDefaultDescriptorsWithCanvasItems = [], 
                            formattingChanges = [], _loop_2 = function(option) {
                                var shortcut, canvasItem, formattingInformation, nextValue, selectedToggleSwitch, sourceUid, topLevelToggle, slice_1, slice_2, toggleSwitch, togglePivot, conditionalFormattingObjects, descriptor, change;
                                return (0, tslib_es6.__generator)(this, function(_b) {
                                    switch (_b.label) {
                                      case 0:
                                        return shortcut = option.shortcut, formattingInformation = this_2.formattingService.getFor({
                                            type: 0,
                                            canvasItem: canvasItem = option.canvasItem
                                        }), nextValue = shortcut.nextValue, sourceUid = void 0, this_2.isToggleShortcut(shortcut) ? [ 4, formattingInformation.selectTopLevelToggle(shortcut).pipe((0, 
                                        take.q)(1)).toPromise() ] : [ 3, 5 ];

                                      case 1:
                                        return (topLevelToggle = _b.sent()) ? (sourceUid = topLevelToggle.uid, selectedToggleSwitch = {
                                            toggleSwitch: topLevelToggle.control.properties,
                                            togglePivot: topLevelToggle.originSource
                                        }, [ 3, 4 ]) : [ 3, 2 ];

                                      case 2:
                                        return [ 4, formattingInformation.selectSlice(shortcut).pipe((0, take.q)(1)).toPromise() ];

                                      case 3:
                                        (slice_1 = _b.sent()) && (debug.fF.assert(function() {
                                            return "ToggleSwitch" === slice_1.control.type;
                                        }, "expected slice to be a toggle switch"), sourceUid = slice_1.uid, selectedToggleSwitch = {
                                            toggleSwitch: slice_1.control.properties,
                                            togglePivot: slice_1.originSource,
                                            conditionalFormattingObjects: slice_1.conditionalFormattingObjects
                                        }), _b.label = 4;

                                      case 4:
                                        return [ 3, 7 ];

                                      case 5:
                                        return [ 4, formattingInformation.selectSlice(shortcut).pipe((0, take.q)(1)).toPromise() ];

                                      case 6:
                                        (slice_2 = _b.sent()) && (debug.fF.assert(function() {
                                            return "ToggleSwitch" === slice_2.control.type;
                                        }, "expected slice to be a toggle switch"), sourceUid = slice_2.uid, selectedToggleSwitch = {
                                            toggleSwitch: slice_2.control.properties,
                                            togglePivot: slice_2.originSource,
                                            conditionalFormattingObjects: slice_2.conditionalFormattingObjects
                                        }), _b.label = 7;

                                      case 7:
                                        return selectedToggleSwitch ? (togglePivot = selectedToggleSwitch.togglePivot, conditionalFormattingObjects = selectedToggleSwitch.conditionalFormattingObjects, 
                                        (toggleSwitch = selectedToggleSwitch.toggleSwitch) && (descriptor = toggleSwitch.descriptor, 
                                        void 0 !== nextValue ? (change = (0, formatting_store_helpers.ks)(nextValue, descriptor, sourceUid, togglePivot, [ canvasItem ], 1, conditionalFormattingObjects), 
                                        formattingChanges.push(change)) : revertToDefaultDescriptorsWithCanvasItems.push((0, 
                                        tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                            originSource: togglePivot,
                                            canvasItems: [ canvasItem ]
                                        })))) : debug.fF.assert(function() {
                                            return !!selectedToggleSwitch;
                                        }, "toggle should be present in the store"), [ 2 ];
                                    }
                                });
                            }, this_2 = this, _i = 0, options_3 = options, _a.label = 2;

                          case 2:
                            return _i < options_3.length ? [ 5, _loop_2(options_3[_i]) ] : [ 3, 5 ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return _i++, [ 3, 2 ];

                          case 5:
                            return _.isEmpty(formattingChanges) ? [ 3, 7 ] : [ 4, this.formattingService.saveValues({
                                changes: formattingChanges
                            }, telemetrySource) ];

                          case 6:
                            _a.sent(), _a.label = 7;

                          case 7:
                            return _.isEmpty(revertToDefaultDescriptorsWithCanvasItems) ? [ 3, 9 ] : [ 4, this.formattingService.revertToDefault(revertToDefaultDescriptorsWithCanvasItems) ];

                          case 8:
                            _a.sent(), _a.label = 9;

                          case 9:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.isToggleShortcut = function(shortcut) {
                return 2 === shortcut.type;
            }, FormatModeService.prototype.executeNavigateShortcut = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var shortcut, canvasItem;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.ensureStoreInitialized() ];

                          case 1:
                            return _a.sent(), debug.fF.assert(function() {
                                return 1 === options.length;
                            }, "only one navigate shortcut should be executed at a time"), canvasItem = options[0].canvasItem, 
                            (shortcut = options[0].shortcut).destinationInfo && this.showFormatPane(shortcut.togglePaneVisibility) ? (this.navigateShortcut$.next({
                                shortcut,
                                canvasItem
                            }), [ 2 ]) : [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.executePickerShortcut = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var telemetrySource, revertToDefaultDescriptorsWithCanvasItems, formattingChanges, callback, _i, options_4, option, shortcut, canvasItem, index, _a, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return [ 4, this.ensureStoreInitialized() ];

                          case 1:
                            if (_b.sent(), _.isEmpty(options)) return [ 2 ];
                            telemetrySource = options[0].shortcut.telemetrySource, debug.fF.assert(function() {
                                return _.every(options, function(option) {
                                    return option.shortcut.telemetrySource === telemetrySource;
                                });
                            }, "expected only one telemetry source for all the picker shortcuts"), revertToDefaultDescriptorsWithCanvasItems = [], 
                            formattingChanges = [], callback = function(dropdown, formattingSource, canvasItem, index, sourceUid) {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    var dropdownPivot, value, item, descriptor, change;
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        switch (_a.label) {
                                          case 0:
                                            return dropdownPivot = formattingSource, !dropdown || _.isEmpty(dropdown.items) ? [ 3, 3 ] : (value = void 0, 
                                            void 0 !== index && (item = dropdown.items[index]) && (dropdown.value = item, value = item.value), 
                                            descriptor = dropdown.descriptor, void 0 === value ? [ 3, 1 ] : (change = (0, formatting_store_helpers.ks)(value, descriptor, sourceUid, dropdownPivot, [ canvasItem ], 1), 
                                            formattingChanges.push(change), [ 3, 3 ]));

                                          case 1:
                                            return revertToDefaultDescriptorsWithCanvasItems.push((0, tslib_es6.__assign)((0, 
                                            tslib_es6.__assign)({}, descriptor), {
                                                originSource: dropdownPivot,
                                                canvasItems: [ canvasItem ]
                                            })), [ 4, this.formattingService.revertToDefault([ (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                                originSource: dropdownPivot,
                                                canvasItems: [ canvasItem ]
                                            }) ]) ];

                                          case 2:
                                            _a.sent(), _a.label = 3;

                                          case 3:
                                            return [ 2 ];
                                        }
                                    });
                                });
                            }, _i = 0, options_4 = options, _b.label = 2;

                          case 2:
                            return _i < options_4.length ? (index = (shortcut = (option = options_4[_i]).shortcut).index, 
                            [ 4, this.formattingService.getFor({
                                type: 0,
                                canvasItem: canvasItem = option.canvasItem
                            }).selectSlice(shortcut).pipe((0, map.U)(function(referenceSlice) {
                                return {
                                    dropdown: null == referenceSlice ? void 0 : referenceSlice.control.properties,
                                    dropdownPivot: null == referenceSlice ? void 0 : referenceSlice.pivotSource,
                                    uid: null == referenceSlice ? void 0 : referenceSlice.uid
                                };
                            }), (0, take.q)(1)).toPromise() ]) : [ 3, 6 ];

                          case 3:
                            return _a = _b.sent(), [ 4, callback(_a.dropdown, _a.dropdownPivot, canvasItem, index, _a.uid) ];

                          case 4:
                            _b.sent(), _b.label = 5;

                          case 5:
                            return _i++, [ 3, 2 ];

                          case 6:
                            return _.isEmpty(formattingChanges) ? [ 3, 8 ] : [ 4, this.formattingService.saveValues({
                                changes: formattingChanges
                            }, telemetrySource) ];

                          case 7:
                            _b.sent(), _b.label = 8;

                          case 8:
                            return _.isEmpty(revertToDefaultDescriptorsWithCanvasItems) ? [ 3, 10 ] : [ 4, this.formattingService.revertToDefault(revertToDefaultDescriptorsWithCanvasItems) ];

                          case 9:
                            _b.sent(), _b.label = 10;

                          case 10:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.executeSortShortcut = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var canvasItem, shortcut, runningVisual, sortDescriptors, sortGroups, existingSortDescriptors;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assert(function() {
                                return 1 === options.length;
                            }, "only one sort shortcut supported at a time"), shortcut = options[0].shortcut, 
                            (0, visualContainerGroup2.Vz)(canvasItem = options[0].canvasItem) ? (runningVisual = this.runningVisuals.getVisual(canvasItem)) && runningVisual.sortServices ? (sortDescriptors = [ shortcut.sortableField ], 
                            [ 4, runningVisual.sortServices.getSortableGroups() ]) : [ 3, 2 ] : [ 2 ];

                          case 1:
                            sortGroups = _a.sent(), existingSortDescriptors = sortGroups.filter(function(sortGroup) {
                                return sortGroup.key !== shortcut.key;
                            }).flatMap(function(sortGroup) {
                                return sortGroup.fields.filter(function(field) {
                                    return void 0 !== field.sortDirection;
                                }).map(function(field) {
                                    return {
                                        queryName: field.exprs[0].name,
                                        sortDirection: field.sortDirection
                                    };
                                });
                            }), sortDescriptors.push.apply(sortDescriptors, existingSortDescriptors), runningVisual.sortServices.sort(sortDescriptors), 
                            _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.resetSortShortcut = function(container, sortRoleKey) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var runningVisual, sortGroups, sortGroup, exprs, dataSources, schema;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, visualContainerGroup2.Vz)(container) ? (runningVisual = this.runningVisuals.getVisual(container)) && runningVisual.sortServices ? [ 4, runningVisual.sortServices.getSortableGroups() ] : [ 3, 3 ] : [ 2 ];

                          case 1:
                            return sortGroups = _a.sent(), (sortGroup = sortGroups.find(function(sortGroup) {
                                return sortGroup.key === sortRoleKey;
                            })) ? (exprs = _.flatten(sortGroup.fields.map(function(field) {
                                return field.exprs[0].expr;
                            })), dataSources = this.dataSourcesService.get(), [ 4, this.conceptualSchemaProxy.get(dataSources) ]) : [ 3, 3 ];

                          case 2:
                            schema = _a.sent(), this.visualAuthoringOperationsService.removeOrderBy(container, exprs, schema), 
                            _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.executeCustomActionShortcut = function(options) {
                for (var _i = 0, options_5 = options; _i < options_5.length; _i++) options_5[_i].shortcut.customAction();
            }, FormatModeService.prototype.executeConditionalFormattingShortcut = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.setToggleValue(options) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormatModeService.prototype.executeSetValueShortcut = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var telemetrySource, formattingChanges, revertToDefaultDescriptorsWithCanvasItems, _i, options_6, option, canvasItem, shortcutReferencesAndValues, _a, shortcutReferencesAndValues_1, referenceAndValue, isTopLevelToggle, newValue, formattingInformation, sliceUid, formattingId, slice, descriptor, change;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return [ 4, this.ensureStoreInitialized() ];

                          case 1:
                            if (_b.sent(), _.isEmpty(options)) return [ 2 ];
                            telemetrySource = options[0].shortcut.telemetrySource, debug.fF.assert(function() {
                                return _.every(options, function(option) {
                                    return option.shortcut.telemetrySource === telemetrySource;
                                });
                            }, "expected only one telemetry source for all the picker shortcuts"), formattingChanges = [], 
                            revertToDefaultDescriptorsWithCanvasItems = [], _i = 0, options_6 = options, _b.label = 2;

                          case 2:
                            if (!(_i < options_6.length)) return [ 3, 9 ];
                            if (canvasItem = (option = options_6[_i]).canvasItem, !(shortcutReferencesAndValues = option.shortcut.referencesAndValues)) return [ 3, 8 ];
                            _a = 0, shortcutReferencesAndValues_1 = shortcutReferencesAndValues, _b.label = 3;

                          case 3:
                            return _a < shortcutReferencesAndValues_1.length ? (isTopLevelToggle = (referenceAndValue = shortcutReferencesAndValues_1[_a]).isTopLevelToggle, 
                            newValue = referenceAndValue.value, formattingInformation = this.formattingService.getFor({
                                type: 0,
                                canvasItem
                            }), sliceUid = void 0, formattingId = referenceAndValue, isTopLevelToggle ? [ 4, formattingInformation.selectTopLevelToggle(formattingId).pipe((0, 
                            take.q)(1)).toPromise() ] : [ 3, 5 ]) : [ 3, 8 ];

                          case 4:
                            return (slice = _b.sent()) ? (change = (0, formatting_store_helpers.ks)(newValue, descriptor = slice.control.properties.descriptor, sliceUid = slice.uid, slice.originSource, [ canvasItem ], 1), 
                            formattingChanges.push(change), [ 3, 7 ]) : (debug.fF.assertFail("no top level toggle was found from the reference - setValueShortcut"), 
                            [ 2 ]);

                          case 5:
                            return [ 4, formattingInformation.selectSlice(formattingId).pipe((0, take.q)(1)).toPromise() ];

                          case 6:
                            if (!(slice = _b.sent())) return debug.fF.assertFail("no slice was found from the reference - setValueShortcut"), 
                            [ 2 ];
                            if (sliceUid = slice.uid, (0, build_control_util.IW)(slice)) return debug.fF.assertFail("No support for setting values for composite slices yet"), 
                            [ 2 ];
                            descriptor = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, slice.control.properties.descriptor), {
                                originSource: slice.originSource,
                                canvasItems: [ canvasItem ]
                            }), null != newValue ? (change = (0, formatting_store_helpers.ks)(newValue, descriptor, sliceUid, slice.originSource, [ canvasItem ], 1), 
                            formattingChanges.push(change)) : revertToDefaultDescriptorsWithCanvasItems.push(descriptor), 
                            _b.label = 7;

                          case 7:
                            return _a++, [ 3, 3 ];

                          case 8:
                            return _i++, [ 3, 2 ];

                          case 9:
                            return _.isEmpty(formattingChanges) ? [ 3, 11 ] : [ 4, this.formattingService.saveValues({
                                changes: formattingChanges
                            }, telemetrySource) ];

                          case 10:
                            _b.sent(), _b.label = 11;

                          case 11:
                            return _.isEmpty(revertToDefaultDescriptorsWithCanvasItems) ? [ 3, 13 ] : [ 4, this.formattingService.revertToDefault(revertToDefaultDescriptorsWithCanvasItems) ];

                          case 12:
                            _b.sent(), _b.label = 13;

                          case 13:
                            return [ 2 ];
                        }
                    });
                });
            }, FormatModeService.\u0275fac = function(t) {
                return new (t || FormatModeService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](FormattingUIManagerService), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](OnObjectOverlayService), core["\u0275\u0275inject"](panes_visibility_service.r), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](view_mode_state_service.kc), core["\u0275\u0275inject"](visual_authoring_operations_service.Q));
            }, FormatModeService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormatModeService,
                factory: FormatModeService.\u0275fac
            }), FormatModeService;
        }(), FormatModeServiceLazyProvider = {
            provide: format_mode_lazy_load_routes.e,
            useFactory: function(conceptualSchemaProxy, dataSourcesService, eventBridge, formattingUIManager, lazyScoped, onObjectOverlayService, paneVisibility, promiseFactory, runningVisuals, selection, viewModeState, visualAuthoringOperationsService) {
                var service = new FormatModeService(conceptualSchemaProxy, dataSourcesService, eventBridge, formattingUIManager, lazyScoped, onObjectOverlayService, paneVisibility, runningVisuals, selection, viewModeState, visualAuthoringOperationsService);
                return promiseFactory.resolve(service);
            },
            deps: [ conceptual_schema_proxy_service.i, data_sources_service.D, event_bridge_service.J, FormattingUIManagerService, lazy_scoped_provider.H, OnObjectOverlayService, panes_visibility_service.r, promiseFactory.t, running_visual_service.s, selection_service.z, view_mode_state_service.kc, visual_authoring_operations_service.Q ]
        }, router = __webpack_require__(9398), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), font_picker_module = __webpack_require__(45925), pbi_button_toggle_module = __webpack_require__(53935), pbi_dropdown_module = __webpack_require__(6015), pbi_menu_module = __webpack_require__(94841), pbi_office_icon_module = __webpack_require__(45411), pbi_overlay_module = __webpack_require__(66972), pbi_spin_button_module = __webpack_require__(55533), pbi_tooltip_module = __webpack_require__(16095), theme_color_picker_module = __webpack_require__(27037), pbi_office_icon_provider_service = __webpack_require__(54485), manifests = [ {
            type: MiniToolbarLargeButtonComponent,
            componentId: "MiniToolbarLargeButtonComponentId"
        }, {
            type: OutlineOverlayComponent,
            componentId: "OutlineOverlayComponentId"
        } ], FormatModeModule = function() {
            function FormatModeModule(iconProvider) {
                __webpack_require__.e("on-object").then(__webpack_require__.bind(__webpack_require__, 39875)).then(function(module) {
                    iconProvider.registerIcons(module.iconSpriteSheet.sprite);
                });
            }
            return FormatModeModule.\u0275fac = function(t) {
                return new (t || FormatModeModule)(core["\u0275\u0275inject"](pbi_office_icon_provider_service.u));
            }, FormatModeModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: FormatModeModule
            }), FormatModeModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ OnObjectOverlayService, FormatModeServiceLazyProvider, FormattingUIManagerServiceLazyProvider, FormattingUIManagerService ],
                imports: [ common.CommonModule, font_picker_module.e, fesm2022_forms.u5, lazy_load_module.N.withManifests(manifests), localization_module.v, pbi_button_toggle_module.e, pbi_dropdown_module.C, pbi_menu_module.b, pbi_office_icon_module.m, pbi_overlay_module.N, pbi_spin_button_module.q, pbi_tooltip_module.Z, fesm2022_forms.UX, router.Bz.forChild(lazy_load_routes.Vc), theme_color_picker_module.b ]
            }), FormatModeModule;
        }();
        core["\u0275\u0275setComponentScope"](OnObjectContainerComponent, function() {
            return [ common.NgIf, MiniToolbarComponent, OnObjectContextMenuComponent ];
        }, []);
    },
    91146: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            w: function() {
                return FontPickerComponent;
            }
        });
        var tslib_es6 = __webpack_require__(81337), core = __webpack_require__(50423), fesm2022_forms = __webpack_require__(17174), debug = __webpack_require__(62458);
        function getCustomFontPickerInfo(newFontFamily) {
            debug.fF.assert(function() {
                return !_.isEmpty(newFontFamily);
            }, "Font family should exist");
            var match = newFontFamily.match(/^(?:\s)*('|")?((?:\w|\s|-|\\.)+)(?:\1(?=,|$))/);
            return match && match[2] || newFontFamily;
        }
        var rx_form_control_component = __webpack_require__(72065), of = __webpack_require__(11547), combineLatest = __webpack_require__(59017), map = __webpack_require__(14172), takeUntil = __webpack_require__(83317), distinctUntilChanged = __webpack_require__(77526), font_service = __webpack_require__(49083), common = __webpack_require__(77476), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529);
        function FontPickerComponent_ng_container_0_pbi_dropdown_1_pbi_dropdown_item_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 5)(1, "p", 3), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var item_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r5), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngStyle", item_r5.style), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate"](item_r5.displayName);
            }
        }
        var _c0 = function(a0) {
            return {
                showFullContent: a0
            };
        };
        function FontPickerComponent_ng_container_0_pbi_dropdown_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-dropdown", 2), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r6.setFontFamily($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementStart"](2, "pbi-dropdown-trigger")(3, "p", 3), 
                core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](5, FontPickerComponent_ng_container_0_pbi_dropdown_1_pbi_dropdown_item_5_Template, 3, 3, "pbi-dropdown-item", 4), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var selectedItem_r3 = ctx.ngIf, fontPickerItems_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("aria-label", ctx_r2.ariaLabel)("aria-labelledby", ctx_r2.ariaLabelledby)("aria-describedby", ctx_r2.ariaDescribedby)("compact", ctx_r2.compact)("size", ctx_r2.size)("maxHeight", ctx_r2.maxHeight)("options", core["\u0275\u0275pureFunction1"](14, _c0, ctx_r2.showFullContent))("value", selectedItem_r3)("isDisabled", core["\u0275\u0275pipeBind1"](1, 12, ctx_r2.isDisabled$)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngStyle", selectedItem_r3.style), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](selectedItem_r3.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", fontPickerItems_r1);
            }
        }
        function FontPickerComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FontPickerComponent_ng_container_0_pbi_dropdown_1_Template, 6, 16, "pbi-dropdown", 1), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r0.selectedItem$));
            }
        }
        var FontPickerComponent = function(_super) {
            function FontPickerComponent(fontService) {
                var _this = _super.call(this) || this;
                return _this.fontService = fontService, _this.onFontFamilyChange = new core.EventEmitter, 
                _this.maxHeight = 324, _this;
            }
            return (0, tslib_es6.__extends)(FontPickerComponent, _super), FontPickerComponent.prototype.ngOnInit = function() {
                this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$), 
                this.populateFontPickerItems();
            }, FontPickerComponent.prototype.populateFontPickerItems = function() {
                var _this = this, fontFamily$ = this.mergePropertyInputsAndFormControl(this.changes$("fontFamily"), this.value$, "fontFamily", this.onDestroy$).pipe((0, 
                map.U)(function(fontFamily) {
                    return _this.normalizeFontFamily(fontFamily);
                }), (0, takeUntil.R)(this.onDestroy$), (0, distinctUntilChanged.x)());
                this.fontPickerItems$ = (0, of.of)(this.fontService.getAllFonts()).pipe((0, map.U)(function(fonts) {
                    return fonts.map(function(font) {
                        return _this.getFontPickerItem(font);
                    });
                })), this.selectedItem$ = (0, combineLatest.aj)([ fontFamily$, this.fontPickerItems$ ]).pipe((0, 
                map.U)(function(_a) {
                    var _b, fontFamily = _a[0];
                    return null !== (_b = _.find(_a[1], function(font) {
                        return font.family === fontFamily;
                    })) && void 0 !== _b ? _b : _this.getCustomFontPickerInfo(fontFamily);
                }));
            }, FontPickerComponent.prototype.normalizeFontFamily = function(fontFamily) {
                return (null != fontFamily ? fontFamily : "").split(", ").map(function(font) {
                    return font.indexOf(" ") > 0 && !font.startsWith("'") ? "'".concat(font, "'") : font;
                }).join(", ");
            }, FontPickerComponent.prototype.getFontPickerItem = function(font) {
                return {
                    displayName: font.displayName,
                    family: font.family,
                    style: {
                        fontFamily: font.suppressStyle ? void 0 : font.family
                    }
                };
            }, FontPickerComponent.prototype.setFontFamily = function(selectedItem) {
                var newFontFamily = selectedItem.family;
                this.onFontFamilyChange.emit(newFontFamily), this.onValueChange(newFontFamily), 
                this.onTouched();
            }, FontPickerComponent.prototype.getCustomFontPickerInfo = function(newFontFamily) {
                return {
                    displayName: newFontFamily ? getCustomFontPickerInfo(newFontFamily) : "",
                    family: newFontFamily,
                    style: {
                        fontFamily: newFontFamily
                    }
                };
            }, FontPickerComponent.\u0275fac = function(t) {
                return new (t || FontPickerComponent)(core["\u0275\u0275directiveInject"](font_service.f));
            }, FontPickerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FontPickerComponent,
                selectors: [ [ "font-picker" ] ],
                inputs: {
                    fontFamily: "fontFamily",
                    ariaLabel: "ariaLabel",
                    ariaDescribedby: "ariaDescribedby",
                    ariaLabelledby: "ariaLabelledby",
                    compact: "compact",
                    isDisabled: "isDisabled",
                    showFullContent: "showFullContent",
                    size: "size"
                },
                outputs: {
                    onFontFamilyChange: "onFontFamilyChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return FontPickerComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ 4, "ngIf" ], [ 3, "aria-label", "aria-labelledby", "aria-describedby", "compact", "size", "maxHeight", "options", "value", "isDisabled", "valueChange", 4, "ngIf" ], [ 3, "aria-label", "aria-labelledby", "aria-describedby", "compact", "size", "maxHeight", "options", "value", "isDisabled", "valueChange" ], [ 3, "ngStyle" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, FontPickerComponent_ng_container_0_Template, 3, 3, "ng-container", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.fontPickerItems$));
                },
                dependencies: [ common.NgForOf, common.NgIf, common.NgStyle, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, common.AsyncPipe ],
                styles: [ "pbi-dropdown[_ngcontent-%COMP%]{width:100%}pbi-dropdown-trigger[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}pbi-dropdown-item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:auto}" ],
                changeDetection: 0
            }), FontPickerComponent;
        }(rx_form_control_component.N);
    },
    45925: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return FontPickerModule;
            }
        });
        var _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6015), _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17174), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), FontPickerModule = function() {
            function FontPickerModule() {}
            return FontPickerModule.\u0275fac = function(t) {
                return new (t || FontPickerModule);
            }, FontPickerModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: FontPickerModule
            }), FontPickerModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.u5, _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__.C, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.UX ]
            }), FontPickerModule;
        }();
    },
    53935: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return PbiButtonToggleModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), PbiButtonToggleModule = function() {
            function PbiButtonToggleModule() {}
            return PbiButtonToggleModule.\u0275fac = function(t) {
                return new (t || PbiButtonToggleModule);
            }, PbiButtonToggleModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: PbiButtonToggleModule
            }), PbiButtonToggleModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule ]
            }), PbiButtonToggleModule;
        }();
    }
} ]);