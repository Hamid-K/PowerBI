"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "aiNarratives" ], {
    36883: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            AINarratives: function() {
                return AINarratives;
            }
        });
        var tslib_es6 = __webpack_require__(81337), take = __webpack_require__(48787), aiNarratives_capabilities = __webpack_require__(83978), common_colorHelper = __webpack_require__(90120), fontProperties = __webpack_require__(18664), units = __webpack_require__(32105), horizontalPosition = __webpack_require__(92374), visualWarnings = __webpack_require__(45296), CssConstants = __webpack_require__(79154), clientError = __webpack_require__(2931), debug = __webpack_require__(62458), fontUtils = __webpack_require__(38265), enums = __webpack_require__(46135), dataViewObject2 = __webpack_require__(82755), build_control_util = __webpack_require__(56578), AINarrativesFormattingModel = function() {
            function AINarrativesFormattingModel(host) {
                this.host = host;
            }
            return AINarrativesFormattingModel.prototype.getFormattingModel = function(settings) {
                var _this = this;
                return new build_control_util.Nq(function() {
                    var _a;
                    return _this.getTextFormattingCard(null === (_a = settings.theme) || void 0 === _a ? void 0 : _a.text);
                }).build();
            }, AINarrativesFormattingModel.prototype.getTextFormattingCard = function(textFormattingOptions) {
                var _this = this, builder = new build_control_util.CQ(new build_control_util.lg("text"), "Text", [ aiNarratives_capabilities.w$.text.fontFamily, aiNarratives_capabilities.w$.text.fontSize, aiNarratives_capabilities.w$.text.fontColor, aiNarratives_capabilities.w$.text.textAlignment ], function(key) {
                    return _this.host.getLocalizedString(key);
                });
                return builder.addGroup("style", function(group) {
                    group.addCompositeSlice("fontProperties", "Font", (new build_control_util.UN).withFontFamily({
                        descriptor: aiNarratives_capabilities.w$.text.fontFamily,
                        value: textFormattingOptions.fontFamily
                    }).withFontSizeProperties({
                        descriptor: aiNarratives_capabilities.w$.text.fontSize,
                        value: textFormattingOptions.fontSize.pt
                    }).build()).addSimpleSlice(aiNarratives_capabilities.w$.text.fontColor.propertyName, new build_control_util.BT({
                        descriptor: aiNarratives_capabilities.w$.text.fontColor,
                        value: {
                            value: textFormattingOptions.fontColor
                        }
                    }).build()).addSimpleSlice(aiNarratives_capabilities.w$.text.textAlignment.propertyName, new build_control_util.Gp({
                        descriptor: aiNarratives_capabilities.w$.text.textAlignment,
                        value: textFormattingOptions.textAlignment,
                        mode: "horizontalAlignment"
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Alignment_Horizontal");
                    });
                }), builder.build();
            }, AINarrativesFormattingModel;
        }(), copilotIcon = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class='.concat("copilotIcon", '>\n    <path d="M4.69429 17.2446C5.25015 17.2628 5.50485 17.4557 5.68005 17.6881C5.91763 18.0032 6.05585 18.4507 6.24215 19.0836L6.25279 19.1197C6.4174 19.6793 6.63037 20.4032 7.07683 20.9707C7.58382 21.6151 8.33368 22.0002 9.40384 22.0002H16.6326C18.1223 22.0002 19.2189 21.0357 20.0075 19.8691C20.8007 18.6958 21.3885 17.1702 21.8441 15.71L21.8457 15.7049C22.3665 14.0357 23.0275 11.9171 23.003 10.2055C22.9905 9.33717 22.8027 8.45216 22.2169 7.78029C21.6122 7.08675 20.7052 6.75637 19.5547 6.75637H19.3135C18.7576 6.73824 18.5029 6.54532 18.3277 6.31296C18.0902 5.99786 17.9519 5.55028 17.7656 4.91746L17.755 4.88131C17.5904 4.32172 17.3774 3.59778 16.931 3.03032C16.424 2.38592 15.6741 2.00079 14.6039 2.00079H7.37517C5.88549 2.00079 4.78888 2.96535 4.00031 4.13188C3.20712 5.30525 2.61926 6.83079 2.16369 8.29097L2.16208 8.29611C1.6413 9.96532 0.980312 12.0839 1.00481 13.7955C1.01724 14.6638 1.20514 15.5489 1.79094 16.2207C2.39564 16.9143 3.30262 17.2446 4.45308 17.2446H4.69429ZM3.59561 8.73772C4.03915 7.31613 4.57516 5.95989 5.24302 4.97193C5.9155 3.97712 6.6171 3.50079 7.37517 3.50079H12.0044C11.8124 3.84488 11.6507 4.22575 11.5052 4.6185C11.3068 5.15409 11.1228 5.75728 10.9337 6.37682L10.8916 6.51482C10.1411 8.97189 9.20227 12.1375 8.59743 14.1874C8.33231 15.086 7.52332 15.7101 6.59356 15.7433H4.6071C4.59163 15.7433 4.57627 15.7437 4.56102 15.7446H4.45308C3.58731 15.7446 3.15634 15.5043 2.92154 15.235C2.66783 14.944 2.51468 14.4741 2.50466 13.7741C2.48429 12.3509 3.05144 10.4819 3.59561 8.73772ZM18.7648 19.0291C18.0923 20.0239 17.3907 20.5002 16.6326 20.5002H12.0033C12.1954 20.1561 12.3571 19.7753 12.5026 19.3825C12.701 18.8469 12.885 18.2437 13.0741 17.6242L13.1162 17.4862C13.8667 15.0291 14.8055 11.8636 15.4104 9.81361C15.6755 8.91506 16.4845 8.29097 17.4142 8.25776H19.4007C19.4162 8.25776 19.4315 8.25729 19.4468 8.25637H19.5547C20.4205 8.25637 20.8514 8.49676 21.0863 8.76606C21.34 9.05704 21.4931 9.52695 21.5031 10.2269C21.5235 11.6501 20.9563 13.5191 20.4122 15.2633C19.9686 16.6849 19.4326 18.0411 18.7648 19.0291ZM10.4647 15.7433H9.47652C9.72214 15.4081 9.91354 15.0273 10.0361 14.6119C10.3023 13.7096 10.633 12.5921 10.9836 11.4147L11.4679 9.80149C11.7429 8.8852 12.5864 8.25776 13.5431 8.25776H14.5313C14.2857 8.59293 14.0942 8.97372 13.9717 9.38912C13.7055 10.2914 13.3748 11.4089 13.0242 12.5863L12.5399 14.1995C12.2648 15.1158 11.4214 15.7433 10.4647 15.7433ZM13.5431 6.75776C13.1182 6.75776 12.7065 6.83089 12.322 6.96679L12.3643 6.82822C12.5577 6.19447 12.7294 5.63203 12.9118 5.13951C13.1071 4.61215 13.2967 4.21683 13.5001 3.93828C13.5472 3.87383 13.6783 3.75782 13.906 3.65616C14.1245 3.55862 14.3741 3.50079 14.6039 3.50079C15.2611 3.50079 15.5573 3.71029 15.7521 3.95782C15.9977 4.26999 16.1427 4.71614 16.3267 5.3411L16.3498 5.41962C16.468 5.82265 16.6107 6.30933 16.844 6.75776H13.5431ZM10.4647 17.2433C10.8896 17.2433 11.3013 17.1701 11.6858 17.0342L11.6435 17.1728C11.4501 17.8065 11.2784 18.369 11.096 18.8615C10.9006 19.3889 10.711 19.7842 10.5077 20.0627C10.4606 20.1272 10.3295 20.2432 10.1018 20.3449C9.8833 20.4424 9.63371 20.5002 9.40384 20.5002C8.74665 20.5002 8.45046 20.2907 8.2557 20.0432C8.0101 19.731 7.86508 19.2849 7.68109 18.6599L7.65803 18.5814C7.53983 18.1784 7.39709 17.6917 7.16382 17.2433H10.4647Z" fill="currentColor"/>\n    </svg>'), AINarratives = function() {
            function AINarratives() {
                this.isNew = !0, this.visualDestroyed = !1, this.loadingCounter = 0, this.copilotTermsLink = "https://aka.ms/CopilotTerms", 
                this.learnMoreLink = "https://aka.ms/AAmx9hj";
            }
            return AINarratives.prototype.init = function(options) {
                var _this = this;
                debug.fF.assertValue(options, "options"), this.hostServices = options.host, this.featureSwitches = options.featureSwitches, 
                this.stringResourceProvider = {
                    get: function(id) {
                        return _this.hostServices.getLocalizedString(id);
                    },
                    format: function(id) {
                        for (var _a, args = [], _b = 1; _b < arguments.length; _b++) args[_b - 1] = arguments[_b];
                        return (_a = _this.hostServices).getLocalizedString.apply(_a, (0, tslib_es6.__spreadArray)([ id ], args, !1));
                    },
                    getOptional: function() {}
                }, this.viewModel = {
                    isSummaryAllowed: !1,
                    isEditorAllowed: !1,
                    isEditMode: 1 === this.hostServices.getViewMode()
                }, this.buildVisual(options.element), this.style = options.style, this.settings = {
                    theme: {
                        text: this.getTextFormattingSettings(void 0)
                    }
                }, this.updateSize(options.viewport);
            }, AINarratives.prototype.ensureCopilotStatusSubscription = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.copilotStatusSubscription ? [ 3, 2 ] : (_a = this, [ 4, this.aiNarrativesService.getCopilotStatus$().pipe((0, 
                            take.q)(1)).toPromise() ]);

                          case 1:
                            _a.copilotStatus = _b.sent(), this.setCopilotStatusState(this.copilotStatus), this.copilotStatusSubscription = this.aiNarrativesService.getCopilotStatus$().subscribe(function(status) {
                                _this.setCopilotStatusState(status);
                            }), _b.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, AINarratives.prototype.onResizing = function(viewport) {
                this.updateSize(viewport);
            }, AINarratives.prototype.update = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return options.type === enums.EP.Data ? [ 3, 1 ] : [ 3, 3 ];

                          case 1:
                            return [ 4, this.dataChanged(options) ];

                          case 2:
                            return _b.sent(), [ 3, 3 ];

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, AINarratives.prototype.dataChanged = function(options) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataview, objects, _b, _c, userPrompt, _d;
                    return (0, tslib_es6.__generator)(this, function(_e) {
                        switch (_e.label) {
                          case 0:
                            return (dataview = _.first(options.dataViews)) ? (objects = dataview.metadata && dataview.metadata.objects, 
                            this.aiNarrativesService ? [ 3, 3 ] : (_b = this, [ 4, this.hostServices.aiNarrativesService() ])) : [ 2 ];

                          case 1:
                            return _b.aiNarrativesService = _e.sent(), _c = this, [ 4, this.aiNarrativesService.ensureFeatureSwitches() ];

                          case 2:
                            _c.featureSwitches = _e.sent(), _e.label = 3;

                          case 3:
                            return (null === (_a = this.featureSwitches) || void 0 === _a ? void 0 : _a.aiNarrativesVisual) ? [ 4, this.ensureCopilotStatusSubscription() ] : (this.setFeatureSwitchError(), 
                            [ 2 ]);

                          case 4:
                            return _e.sent(), this.viewModel.requireVisualSelection = this.requireVisualSelection(objects), 
                            [ 4, this.setVisualSelectionState() ];

                          case 5:
                            return _e.sent(), this.viewModel.requireVisualSelection ? [ 2 ] : (this.setEmptyState(), 
                            this.settings.theme.text = this.getTextFormattingSettings(objects), this.applyFormatting(), 
                            _d = {
                                text: this.getUserPromptText(objects)
                            }, [ 4, this.getUserPromptSelectedVisuals(objects) ]);

                          case 6:
                            return _d.selectedVisuals = _e.sent(), userPrompt = _d, _.isEqual(userPrompt, this.viewModel.userPrompt) || (this.viewModel.userPrompt = userPrompt, 
                            this.getSummary(!0)), this.ensureSummarySubscription(), this.setEditorState(), [ 2 ];
                        }
                    });
                });
            }, AINarratives.prototype.destroy = function() {
                var _a, _b;
                null === (_a = this.copilotStatusSubscription) || void 0 === _a || _a.unsubscribe(), 
                null === (_b = this.aiNarrativesService) || void 0 === _b || _b.unsubscribeFromReportUpdates(), 
                this.removeEditorFromVisualContainer(), this.visualDestroyed = !0;
            }, AINarratives.prototype.getSettings = function() {
                return this.settings;
            }, AINarratives.prototype.getFormattingModel = function() {
                return new AINarrativesFormattingModel(this.hostServices).getFormattingModel(this.settings);
            }, AINarratives.prototype.applyFormatting = function() {
                d3.select(this.aiNarrativesContainer.get(0)).style("color", this.settings.theme.text.fontColor).style("font-size", this.settings.theme.text.fontSize.px + "px").style("font-family", this.settings.theme.text.fontFamily).style("text-align", this.settings.theme.text.textAlignment);
            }, AINarratives.prototype.getTextFormattingSettings = function(objects) {
                var colorHelper = common_colorHelper.v.create(this.style), fontSettings = (0, fontProperties.Zi)(null == objects ? void 0 : objects.text, {
                    color: "fontColor",
                    family: "fontFamily",
                    size: "fontSize"
                }, colorHelper, this.style, "foreground", "label", {
                    color: common_colorHelper.v.getThemeColor(this.style, "foreground"),
                    family: fontUtils.Wn.regular.family,
                    size: units.B.createFromPt(9)
                }), textAlignmentSetting = (0, dataViewObject2.NA)(objects, aiNarratives_capabilities.w$.text.textAlignment, horizontalPosition.D.left);
                return {
                    fontColor: fontSettings.color,
                    fontSize: fontSettings.size,
                    fontFamily: fontSettings.family,
                    textAlignment: textAlignmentSetting
                };
            }, AINarratives.prototype.onViewModeChanged = function(viewMode) {
                this.viewModel.isEditMode = 1 === viewMode, (this.viewModel.showDataReductionWarning || this.viewModel.showLLMLimitWarning) && this.setWarnings(), 
                this.viewModel.isEditMode ? this.summaryContainer.addClass(AINarratives.editModeClass) : this.summaryContainer.removeClass(AINarratives.editModeClass), 
                this.setEditorState(), this.setEmptyState(), this.setVisualSelectionState();
            }, AINarratives.prototype.setVisualSelectionState = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return this.viewModel.requireVisualSelection ? (this.initialLoadOverlay.hide(), 
                        this.viewModel.isEditMode ? this.visualSelectionOverlay.show() : (this.visualSelectionOverlay.hide(), 
                        this.emptyStateOverlay.hide())) : this.visualSelectionOverlay.hide(), [ 2 ];
                    });
                });
            }, AINarratives.prototype.requireVisualSelection = function(objects) {
                if (!this.featureSwitches.aiNarrativesSingleEntryPoint) return !1;
                var prompt = (0, dataViewObject2.NA)(objects, aiNarratives_capabilities.w$.userPrompt.text);
                return !(0, dataViewObject2.NA)(objects, aiNarratives_capabilities.w$.narrativeSelection.dismissSelectionScreen) && !this.hasUserSetPrompt(prompt);
            }, AINarratives.prototype.setVisualSelectionCopilotButtonState = function(enabled, disabledReason) {
                var _this = this, copilot = this.visualSelectionOverlay.find(".copilot");
                if (enabled) copilot.prop("disabled", !1), copilot.removeClass("disabled"), this.removeTooltip(copilot), 
                copilot.find(".copilot-button-spinner").hide(); else {
                    copilot.prop("disabled", !0), copilot.addClass("disabled"), "PendingStatus" === disabledReason ? copilot.find(".copilot-button-spinner").show() : copilot.find(".copilot-button-spinner").hide();
                    var tooltip = function() {
                        switch (disabledReason) {
                          case "AINarrativesVisual_NotSupported":
                            return _this.hostServices.getLocalizedString("AINarrativesVisual_Error_NotSupported");

                          case "UserNotSignedIn":
                            return _this.hostServices.getLocalizedString("AINarrativesVisual_Error_SignInRequired_Switcher");

                          case "AI_Disallowed":
                            return _this.hostServices.getLocalizedString("CopilotCapability_AdminDisabled_Message");

                          case "NoneCapacity":
                            return _this.hostServices.getLocalizedString("AINarrativesVisual_Error_NoPremiumCapacity");

                          case "AI_Scenarios_CapacityRequired":
                          case "PowerBIFolderNotFound":
                          case "AI_Scenarios_FolderRequired":
                          case "AI_Scenarios_SkuNotSupported":
                            return _this.hostServices.getLocalizedString("CopilotCapability_SaveToWorkspace_Message");

                          case "AI_DisallowedForCrossRegion":
                            return _this.hostServices.getLocalizedString("CopilotCapability_CrossGeoNotAllowed_Message");

                          case "PendingStatus":
                            return;

                          default:
                            return debug.fF.assertFail("Unexpected disabled reason"), _this.hostServices.getLocalizedString("AINarrativesVisual_GenericDisabled_Message");
                        }
                    }();
                    tooltip && this.applyTextTooltip(copilot, tooltip);
                }
            }, AINarratives.prototype.getUserPromptText = function(objects) {
                var defaultValue = this.featureSwitches.aiNarrativesEmptyState ? void 0 : this.hostServices.getLocalizedString("AINarrativesVisual_DefaultUserPromptString");
                return (0, dataViewObject2.NA)(objects, aiNarratives_capabilities.w$.userPrompt.text, defaultValue);
            }, AINarratives.prototype.getUserPromptSelectedVisuals = function(objects) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var selectedVisualsJson, selectedVisuals, useAllVisualsInCurrentSection;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return (selectedVisualsJson = (0, dataViewObject2.NA)(objects, aiNarratives_capabilities.w$.userPrompt.selectedVisualsJson, "")) ? (selectedVisuals = JSON.parse(selectedVisualsJson), 
                        Array.isArray(selectedVisuals) ? (useAllVisualsInCurrentSection = (0, dataViewObject2.NA)(objects, aiNarratives_capabilities.w$.userPrompt.useAllVisuals, !1), 
                        [ 2, this.aiNarrativesService.convertSelectedVisualsArray(selectedVisuals, useAllVisualsInCurrentSection) ]) : [ 2, selectedVisuals ]) : [ 2, this.featureSwitches.aiNarrativesEmptyState ? void 0 : this.aiNarrativesService.convertSelectedVisualsArray([], !0) ];
                    });
                });
            }, AINarratives.prototype.getSummary = function(refreshVisual) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        return this.hasUserSetPrompt(null === (_a = this.viewModel.userPrompt) || void 0 === _a ? void 0 : _a.text) && this.viewModel.isSummaryAllowed ? (refreshVisual && (setTimeout(function() {
                            _this.currentRequest && _this.setErrorState();
                        }, 200), this.setPausedBannerState(!1)), this.setLoadingState(!0), this.currentRequest && (this.currentRequest.unsubscribe(), 
                        this.currentRequest = null, this.setLoadingState(!1)), this.currentRequest = this.aiNarrativesService.getSummary(this.viewModel.userPrompt, refreshVisual).subscribe(function(summary) {
                            _this.visualDestroyed || (_this.setSummary(summary), _this.setPausedBannerState(!1));
                        }, function(error) {
                            _this.visualDestroyed || (_this.hostServices.setWarnings([]), _this.currentRequest = null, 
                            _this.handleError(error), _this.setLoadingState(!1));
                        }, function() {
                            _this.visualDestroyed || (_this.currentRequest = null, _this.setLoadingState(!1));
                        }), [ 2 ]) : [ 2 ];
                    });
                });
            }, AINarratives.prototype.ensureSummarySubscription = function() {
                var _a, _this = this;
                this.isNew && this.aiNarrativesService && this.hasUserSetPrompt(null === (_a = this.viewModel.userPrompt) || void 0 === _a ? void 0 : _a.text) && this.viewModel.isSummaryAllowed && (setTimeout(function() {
                    return _this.getSummary(!0);
                }, 0), this.aiNarrativesService.subscribeToReportUpdates(function(refreshVisual) {
                    _this.getSummary(refreshVisual);
                }), this.isNew = !1, this.initialLoadOverlay.show(), this.aiNarrativesContainer.show(), 
                this.setEmptyState());
            }, AINarratives.prototype.hasUserSetPrompt = function(userPromptText) {
                return !_.isNil(userPromptText);
            }, AINarratives.prototype.setSummary = function(summaryResponse) {
                this.viewModel.isSummaryAllowed && (this.viewModel.summary = summaryResponse.summaryHtml, 
                this.viewModel.showDataReductionWarning = summaryResponse.dataTruncationWarning, 
                this.viewModel.showLLMLimitWarning = !1 === summaryResponse.isOutputComplete, this.summaryContainer.html(this.viewModel.summary), 
                this.viewModel.summary && this.initialLoadOverlay.hide(), this.setupReferenceLinks(summaryResponse.references), 
                this.setWarnings(), this.setErrorState());
            }, AINarratives.prototype.setWarnings = function() {
                var warnings = [];
                this.viewModel.showDataReductionWarning && warnings.push(this.viewModel.isEditMode ? new visualWarnings.ox : new visualWarnings.GU), 
                this.viewModel.showLLMLimitWarning && warnings.push(this.viewModel.isEditMode ? new visualWarnings.iB : new visualWarnings.pj), 
                this.hostServices.setWarnings(warnings), this.hostServices.triggerUpdate();
            }, AINarratives.prototype.setupReferenceLinks = function(references) {
                var _this = this;
                $(this.summaryContainer).find("a").each(function(_i, e) {
                    var _a, visualId = e.getAttribute("href"), reference = references[visualId];
                    reference ? ($(e).addClass("referenceLink"), _this.applyReferenceTooltip($(e), reference, null === (_a = e.textContent) || void 0 === _a ? void 0 : _a.trim()), 
                    "visual" === reference.referenceType ? ($(e).on("click", function(event) {
                        event.preventDefault(), event.stopImmediatePropagation(), _this.aiNarrativesService.navigateToVisual(reference.visualName, reference.sectionName);
                    }), $(e).on("pointerenter", function() {
                        return _this.aiNarrativesService.highlightVisual(reference.visualName, reference.sectionName);
                    }), $(e).on("pointerleave", function() {
                        return _this.aiNarrativesService.highlightVisual(null);
                    })) : ($(e).attr("tabindex", -1), $(e).attr("focusable", "false"), $(e).addClass("not-clickable"), 
                    $(e).on("click", function(event) {
                        event.preventDefault(), event.stopImmediatePropagation();
                    }))) : debug.fF.assertFail("No reference found in lookup for ".concat(visualId));
                });
            }, AINarratives.prototype.setEmptyState = function() {
                this.isNew && this.featureSwitches.aiNarrativesEmptyState ? (this.emptyStateOverlay.show(), 
                this.viewModel.isEditMode ? this.emptyStateOverlay.find(".banner").show() : this.emptyStateOverlay.find(".banner").hide()) : this.emptyStateOverlay.hide();
            }, AINarratives.prototype.setLoadingState = function(isLoading) {
                var _this = this;
                0 === this.loadingCounter && isLoading ? this.viewModel.summary ? this.aiNarrativesService.startProgressBar(!0) : (this.initialLoadOverlay.find(".loadingContent").text(this.hostServices.getLocalizedString("AINarrativesVisual_LoadingState")), 
                this.initialLoadOverlay.show(), this.aiNarrativesService.startProgressBar(!1)) : 1 !== this.loadingCounter || isLoading || ((this.viewModel.summary || this.viewModel.error) && this.initialLoadOverlay.hide(), 
                this.aiNarrativesService.stopProgressBar()), this.loadingCounter += isLoading ? 1 : -1, 
                debug.fF.assert(function() {
                    return _this.loadingCounter >= 0;
                }, "Loading counter should never be negative");
            }, AINarratives.prototype.setErrorState = function(error, noOverlay) {
                this.viewModel.error = error, error && !noOverlay ? (this.showErrorOverlay(error), 
                this.viewModel.summary = void 0) : this.errorOverlay.hide(), this.viewModel.isSummaryAllowed = !(null == error ? void 0 : error.disallowSummary), 
                this.ensureSummarySubscription(), this.setEditorState();
            }, AINarratives.prototype.setEditorState = function() {
                var _a;
                this.viewModel.isEditorAllowed = !!this.aiNarrativesService && 1 === this.hostServices.getViewMode() && !!this.viewModel.userPrompt && !(null === (_a = this.viewModel.error) || void 0 === _a ? void 0 : _a.disallowEditor), 
                this.viewModel.isEditorAllowed ? (this.createEditorComponentInstance(), this.anchorEditorWithVisualContainer()) : this.removeEditorFromVisualContainer();
            }, AINarratives.prototype.setPausedBannerState = function(show) {
                show ? (this.pauseQueriesOverlay.show(), this.viewModel.showPausedBanner = !0) : (this.pauseQueriesOverlay.hide(), 
                this.viewModel.showPausedBanner = !1);
            }, AINarratives.prototype.createEditorComponentInstance = function() {
                if (!this.aiNarrativesEditorContainer) {
                    var uiComponentFactory = this.hostServices.getUIComponentFactory();
                    debug.fF.assertValue(uiComponentFactory, "uiComponentFactory"), this.aiNarrativesEditorContainer = $("<section>").addClass("ai-narratives-component-container").addClass("themeableElement"), 
                    uiComponentFactory.createAINarrativesEditor({
                        container: this.aiNarrativesEditorContainer.get(0),
                        visualHostService: this.aiNarrativesService,
                        userPrompt: this.viewModel.userPrompt
                    });
                }
            }, AINarratives.prototype.anchorEditorWithVisualContainer = function() {
                this.hostServices.setToolbar(this.aiNarrativesEditorContainer, {
                    preferHorizontalLayout: !0
                });
            }, AINarratives.prototype.removeEditorFromVisualContainer = function() {
                this.hostServices.setToolbar(null);
            }, AINarratives.prototype.updateSize = function(viewport) {
                this.heightWrapper.css("height", "".concat(viewport.height, "px"));
            }, AINarratives.prototype.buildVisual = function(element) {
                this.heightWrapper = $("<div>").addClass("aiNarratives-height-wrapper"), element.append(this.heightWrapper), 
                this.pauseQueriesOverlay = this.buildPauseQueriesMessageBanner(), this.aiNarrativesContainer = this.buildSummary(), 
                this.emptyStateOverlay = this.buildEmptyState(), this.initialLoadOverlay = this.buildInitialLoadOverlay(), 
                this.errorOverlay = this.buildErrorOverlay(), this.visualSelectionOverlay = this.buildVisualSelectionOverlay();
                var contentWrapper = $("<div>").addClass("aiNarratives-wrapper");
                this.heightWrapper.append(this.pauseQueriesOverlay, contentWrapper), contentWrapper.append(this.aiNarrativesContainer, this.emptyStateOverlay, this.initialLoadOverlay, this.errorOverlay, this.visualSelectionOverlay);
            }, AINarratives.prototype.buildSummary = function() {
                var summaryAriaLabel = this.hostServices.getLocalizedString("AINarrativesVisual_Label");
                this.summaryContainer = $("<div>").addClass(AINarratives.SummaryContainer.class), 
                this.viewModel.isEditMode && this.summaryContainer.addClass(AINarratives.editModeClass);
                var footerDisclaimerText = this.hostServices.getLocalizedString("AINarrativesVisual_FooterCreatedWithAI"), summaryFooterDisclaimer = $("<p>").text(footerDisclaimerText), footerTermsText = this.hostServices.getLocalizedString("CopilotInline_PreviewLink"), summaryFooterTermsLink = $("<a>").addClass("termsLink pbi-external-link").text(footerTermsText).attr("href", this.copilotTermsLink).attr("target", "_blank").attr("rel", "noreferrer noopener"), summaryFooter = $("<footer>").addClass("summaryFooter");
                summaryFooter.append(summaryFooterDisclaimer), summaryFooterDisclaimer.append(summaryFooterTermsLink);
                var container = $("<article>").attr("aria-label", summaryAriaLabel).attr("tabindex", 0).attr("focusable", "true").attr("focus-nav-mode", "Group").addClass(AINarratives.AINarrativesContainer.class);
                return container.append(this.summaryContainer, summaryFooter), container.hide(), 
                container;
            }, AINarratives.prototype.buildEmptyState = function() {
                var emptyState = $("<div>").addClass("aiNarratives-overlay emptyState"), banner = $("<div>").addClass("banner");
                emptyState.append(banner), banner.append($("<div>").addClass("glyphicon pbi-glyph-info glyph-small"));
                var bannerText = $("<div>").addClass("bannerText");
                banner.append(bannerText), bannerText.append($("<span>").text(this.hostServices.getLocalizedString("AINarrativesVisual_EmptyState_Text")));
                var termsLink = $("<a>").addClass("termsLink").text(this.hostServices.getLocalizedString("CopilotInline_PreviewLink")).attr("href", this.copilotTermsLink).attr("target", "_blank").attr("rel", "noreferrer noopener");
                return bannerText.append(termsLink), emptyState.append($(copilotIcon)), emptyState.hide(), 
                emptyState;
            }, AINarratives.prototype.buildVisualSelectionOverlay = function() {
                var _this = this, overlay = $("<div>").addClass("aiNarratives-overlay visualSelection"), contentCard = $("<div>").addClass("visualSelectionCard");
                overlay.append(contentCard);
                var title = $("<div>").addClass("title");
                title.text(this.hostServices.getLocalizedString("AINarrativesVisual_VisualSelectionTitle")), 
                contentCard.append(title);
                var content = $("<div>").addClass("content");
                content.text(this.hostServices.getLocalizedString("AINarrativesVisual_VisualSelectionContent")), 
                contentCard.append(content);
                var footerTermsText = this.hostServices.getLocalizedString("AINarrativesVisual_VisualSelectionReadTerms"), summaryFooterTermsLink = $("<a>").addClass("emptyStateTermsLink pbi-external-link").text(footerTermsText).attr("href", this.copilotTermsLink).attr("target", "_blank").attr("rel", "noreferrer noopener");
                content.append(summaryFooterTermsLink);
                var actions = $("<div>").addClass("actions");
                contentCard.append(actions);
                var copilot = $("<button>").addClass("copilot primary"), spinner = $('\n            <svg class="copilot-button-spinner" style="display: none;">\n                <circle class="copilot-button-spinner-track" />\n                <circle class="copilot-button-spinner-tail" />\n            </svg>\n        ');
                copilot.append(spinner, $(copilotIcon), $("<div>").text(this.hostServices.getLocalizedString("Copilot_Preview"))), 
                copilot.on("click", function() {
                    return _this.onClickCopilotButton();
                }), actions.append(copilot);
                var custom = $("<button>").addClass("custom");
                custom.text(this.hostServices.getLocalizedString("Custom")), custom.on("click", function() {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return [ 4, this.hostServices.aiNarrativesService() ];

                              case 1:
                                return _a.sent().convertToSmartNarrativesVisual(), [ 2 ];
                            }
                        });
                    });
                }), actions.append(custom);
                var infoColumn = $("<div>").addClass("infoColumn");
                overlay.append(infoColumn);
                var icon = $("<div>").addClass("glyphicon pbi-glyph-info glyph-small").attr("tabindex", "0");
                return this.applyTextTooltip(icon, this.hostServices.getLocalizedString("AINarrativesVisual_VisualSelectionInfo")), 
                infoColumn.append(icon), overlay.hide(), overlay;
            }, AINarratives.prototype.onClickCopilotButton = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var status, changes, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return (status = this.copilotStatus) ? status.enabled || !status.isFixable ? [ 3, 2 ] : [ 4, this.aiNarrativesService.remediateCopilotStatus() ] : (debug.fF.assertFail("Copilot status should be set by the time you can click the Copilot button"), 
                            [ 2 ]);

                          case 1:
                            return status = _b.sent(), [ 3, 3 ];

                          case 2:
                            status.enabled || status.isFixable || debug.fF.assertFail("Copilot button should be disabled if status is not fixable"), 
                            _b.label = 3;

                          case 3:
                            return status.enabled && (changes = {
                                merge: [ {
                                    objectName: aiNarratives_capabilities.w$.narrativeSelection.dismissSelectionScreen.objectName,
                                    properties: (_a = {}, _a[aiNarratives_capabilities.w$.narrativeSelection.dismissSelectionScreen.propertyName] = !0, 
                                    _a),
                                    selector: null
                                } ]
                            }, this.hostServices.persistProperties(changes), this.hostServices.triggerUpdate()), 
                            [ 2 ];
                        }
                    });
                });
            }, AINarratives.prototype.buildInitialLoadOverlay = function() {
                var overlay = $("<div>").addClass("aiNarratives-overlay initialLoad"), loadingCard = $("<div>").addClass("loadingCard"), loadingContent = $("<div>").addClass("loadingContent");
                loadingContent.text(this.hostServices.getLocalizedString("AINarrativesVisual_LoadingState"));
                var wrapper = $("<div>").addClass("wrapper"), loadingBar = $("<div>").addClass("loadingBar");
                return loadingCard.append(loadingContent), wrapper.append(loadingBar), overlay.append(loadingCard, wrapper), 
                overlay.hide(), overlay;
            }, AINarratives.prototype.buildErrorOverlay = function() {
                var _this = this, overlay = $("<div>").addClass("aiNarratives-overlay errorMessage"), errorIcon = $("<div>").addClass("glyphicon pbi-glyph-error glyph-med");
                overlay.append(errorIcon);
                var errorDiv = $("<div>").addClass("errorDiv");
                overlay.append(errorDiv);
                var errorSpan = $("<span>").addClass("errorSpan").text("Error");
                errorDiv.append(errorSpan);
                var seeDetails = $("<button>").addClass("errorSeeMore").text(this.hostServices.getLocalizedString("VisualContainer_ShowErrorDetails")).on("click", function(e) {
                    return _this.showErrorDetails(e);
                });
                errorDiv.append(seeDetails);
                var fixIt = $("<button>").addClass("errorFixIt").text(this.hostServices.getLocalizedString("ErrorBar_FixItText"));
                errorDiv.append(fixIt);
                var learnMore = $("<a>").addClass("termsLink pbi-external-link").text(this.hostServices.getLocalizedString("Generic_LearnMore_With_Period")).attr("href", this.learnMoreLink).attr("target", "_blank").attr("rel", "noreferrer noopener");
                return errorDiv.append(learnMore), overlay.hide(), overlay;
            }, AINarratives.prototype.buildPauseQueriesMessageBanner = function() {
                var _this = this, overlay = $("<div>").addClass("aiNarratives-messageBanner pauseQueries"), icon = $("<div>").addClass("glyphicon pbi-glyph-info glyph-small pause-info-icon");
                this.applyTextTooltip(icon, this.hostServices.getLocalizedString("AINarrativesVisual_Paused_Visual_Info"));
                var message = $("<span>").text(this.hostServices.getLocalizedString("Paused_Visual_Pending_Status")).addClass("message"), wrapper = $("<div>").addClass("pause-wrapper");
                wrapper.append(icon, message), overlay.append(wrapper);
                var button = $("<button>").text(this.hostServices.getLocalizedString("Refresh")).addClass("pbi-fluent-button banner-refresh-button").on("click", function(e) {
                    e.stopPropagation(), _this.getSummary(!0);
                });
                return overlay.append(button), overlay.hide(), overlay;
            }, AINarratives.prototype.handleError = function(error) {
                if (_.isNil(error)) this.setErrorState({
                    code: "",
                    details: {
                        message: this.hostServices.getLocalizedString("ServiceError_CapacityPausedTitle"),
                        displayableErrorInfo: [],
                        source: "PowerBI"
                    },
                    disallowEditor: !0
                }); else {
                    var errorCode = error.code, isAPIError = "pbi.error" in error;
                    switch (errorCode) {
                      case clientError.e$:
                        this.setPausedBannerState(!0);
                        break;

                      case "PendingStatus":
                        this.initialLoadOverlay.find(".loadingContent").text(this.hostServices.getLocalizedString("AINarrativesVisual_Error_StatusCheckPending")), 
                        this.initialLoadOverlay.show(), this.setErrorState({
                            code: error.code,
                            details: null,
                            disallowSummary: !0,
                            disallowEditor: !0
                        }, !0);
                        break;

                      case "UserNotSignedIn":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString("AINarrativesVisual_Error_SignInRequired"),
                                displayableErrorInfo: []
                            },
                            disallowSummary: !0,
                            disallowEditor: !0,
                            fixItLink: error.isFixable ? "SignIn" : "None"
                        });
                        break;

                      case "AI_Scenarios_CapacityRequired":
                      case "PowerBIFolderNotFound":
                      case "AI_Scenarios_FolderRequired":
                      case "AI_Scenarios_SkuNotSupported":
                      case "NoWorkspaceId":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString(error.isFixable ? "CopilotCapability_SelectAWorkspace_Message" : "CopilotCapability_SaveToWorkspace_Message"),
                                displayableErrorInfo: [],
                                hideDebugInfo: !0
                            },
                            disallowEditor: !0,
                            disallowSummary: !0,
                            showLearnMore: !error.isFixable,
                            fixItLink: error.isFixable ? "FixWorkspace" : "None"
                        });
                        break;

                      case "NoneCapacity":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString("AINarrativesVisual_Error_NoPremiumCapacity"),
                                displayableErrorInfo: [],
                                hideDebugInfo: !0
                            },
                            disallowEditor: !0,
                            disallowSummary: !0,
                            showLearnMore: !error.isFixable,
                            fixItLink: error.isFixable ? "FixWorkspace" : "None"
                        });
                        break;

                      case "AI_Scenarios_CapacityLimitExceeded":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString("Copilot_Throttled"),
                                displayableErrorInfo: []
                            }
                        });
                        break;

                      case "AI_Disallowed":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString("CopilotCapability_AdminDisabled_Message"),
                                displayableErrorInfo: [],
                                hideDebugInfo: !0
                            },
                            disallowEditor: !0,
                            disallowSummary: !0,
                            showLearnMore: !error.isFixable,
                            fixItLink: error.isFixable ? "FixWorkspace" : "None"
                        });
                        break;

                      case "AI_DisallowedForCrossRegion":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString("CopilotCapability_CrossGeoNotAllowed_Message"),
                                displayableErrorInfo: [],
                                hideDebugInfo: !0
                            },
                            disallowEditor: !0,
                            disallowSummary: !0,
                            showLearnMore: !error.isFixable,
                            fixItLink: error.isFixable ? "FixWorkspace" : "None"
                        });
                        break;

                      case "AINarrativesVisual_NotSupported":
                      case "DataContext_Unavailable":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString("AINarrativesVisual_Error_NotSupported"),
                                displayableErrorInfo: [],
                                hideDebugInfo: !0
                            },
                            disallowEditor: !0,
                            disallowSummary: !0
                        });
                        break;

                      case "DataContext_NoAvailableVisuals":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString(this.viewModel.isEditMode ? "AINarrativesVisual_Error_NoAvailableVisuals" : "AINarrativesVisual_Error_ContactReportCreator"),
                                displayableErrorInfo: [],
                                source: error.source
                            },
                            disallowEditor: !1
                        });
                        break;

                      case "DataContext_NoSelectedVisuals":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString(this.viewModel.isEditMode ? "AINarrativesVisual_Error_NoSelectedVisuals" : "AINarrativesVisual_Error_ContactReportCreator"),
                                displayableErrorInfo: [],
                                source: error.source
                            },
                            disallowEditor: !1,
                            fixItLink: this.viewModel.isEditMode ? "OpenEditor" : "None"
                        });
                        break;

                      case "DataContext_NoData":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString(this.viewModel.isEditMode ? "AINarrativesVisual_Error_NoData" : "AINarrativesVisual_Error_ContactReportCreator"),
                                displayableErrorInfo: [],
                                source: error.source
                            },
                            disallowEditor: !1
                        });
                        break;

                      case "DataContext_TooManyVisuals":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString(this.viewModel.isEditMode ? "AINarrativesVisual_Error_TooManyVisuals" : "AINarrativesVisual_Error_ContactReportCreator"),
                                displayableErrorInfo: [],
                                source: error.source
                            },
                            disallowEditor: !1
                        });
                        break;

                      case "DataContext_QueryError":
                        this.setErrorState({
                            code: error.code,
                            details: error.getDetails(this.stringResourceProvider),
                            disallowEditor: !1
                        });
                        break;

                      case "UnknownStatus":
                        this.setErrorState({
                            code: error.code,
                            details: {
                                message: this.hostServices.getLocalizedString("AINarrativesVisual_GenericDisabled_Message"),
                                displayableErrorInfo: []
                            },
                            disallowEditor: !0,
                            disallowSummary: !0
                        });
                        break;

                      default:
                        var errorInfo = void 0;
                        isAPIError ? errorInfo = this.getDisplayableErrorInfo(error["pbi.error"].details) : error.getDetails ? errorInfo = error.getDetails(this.stringResourceProvider).displayableErrorInfo : error.message && (errorInfo = [ {
                            errorInfoKey: this.hostServices.getLocalizedString("AINarrativesVisual_Error_UnableToCreateSummary"),
                            errorInfoValue: error.message
                        } ]);
                        var errorObj = {
                            code: errorCode,
                            details: {
                                message: this.hostServices.getLocalizedString("AINarrativesVisual_Error_UnableToCreateSummary"),
                                displayableErrorInfo: errorInfo,
                                showSeeDetails: !!errorInfo,
                                source: isAPIError ? "PowerBI" : error.source
                            },
                            disallowEditor: !1
                        };
                        this.setErrorState(errorObj);
                    }
                }
            }, AINarratives.prototype.getDisplayableErrorInfo = function(details) {
                if (!details) return null;
                for (var errorInfo = [], _a = 0, details_1 = details; _a < details_1.length; _a++) {
                    var detail = details_1[_a];
                    errorInfo.push({
                        errorInfoKey: detail.code,
                        errorInfoValue: detail.detail.value
                    });
                }
                return errorInfo;
            }, AINarratives.prototype.showErrorOverlay = function(error) {
                var _a, _b, _this = this;
                this.errorOverlay.find(".errorSpan").text(null === (_a = error.details) || void 0 === _a ? void 0 : _a.message);
                var seeDetails = this.errorOverlay.find(".errorSeeMore");
                (null === (_b = error.details) || void 0 === _b ? void 0 : _b.showSeeDetails) ? seeDetails.show() : seeDetails.hide();
                var fixIt = this.errorOverlay.find(".errorFixIt"), onFixStatus = function(event) {
                    event.stopPropagation(), _this.aiNarrativesService.remediateCopilotStatus();
                };
                switch (fixIt.off("click"), error.fixItLink) {
                  case "OpenEditor":
                    fixIt.text(this.hostServices.getLocalizedString("ErrorBar_FixItText")), fixIt.show();
                    break;

                  case "SignIn":
                    fixIt.on("click", onFixStatus), fixIt.text(this.hostServices.getLocalizedString("AuthDialog_LinkText_SignIn")), 
                    fixIt.show();
                    break;

                  case "FixWorkspace":
                    fixIt.on("click", onFixStatus), fixIt.text(this.hostServices.getLocalizedString("WorkspacesSelect_Label_Text")), 
                    fixIt.show();
                    break;

                  default:
                    fixIt.hide();
                }
                var learnMore = this.errorOverlay.find(".termsLink");
                error.showLearnMore ? learnMore.show() : learnMore.hide(), this.errorOverlay.show();
            }, AINarratives.prototype.showErrorDetails = function(event) {
                var _a;
                event.stopPropagation();
                var error = this.viewModel.error;
                debug.fF.assertValue(error, "No error to show details for"), null === (_a = this.aiNarrativesService) || void 0 === _a || _a.showErrorDialog(error.code, error.details, !1, !0);
            }, AINarratives.prototype.setFeatureSwitchError = function() {
                this.setErrorState({
                    code: "AINarrativesDisabled",
                    details: {
                        message: this.hostServices.getLocalizedString("AINarrativesVisual_Error_FeatureDisabled"),
                        displayableErrorInfo: []
                    },
                    disallowSummary: !0,
                    disallowEditor: !0
                });
            }, AINarratives.prototype.setCopilotStatusState = function(status) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var isNewlyValid;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return isNewlyValid = status.enabled && this.copilotStatus && !this.copilotStatus.enabled, 
                        this.copilotStatus = status, status.enabled ? (this.setErrorState(), this.setVisualSelectionCopilotButtonState(!0), 
                        this.initialLoadOverlay.hide()) : (this.handleError({
                            code: status.reason,
                            isFixable: status.isFixable
                        }), this.setVisualSelectionCopilotButtonState(status.isFixable, status.reason), 
                        this.setPausedBannerState(!1)), isNewlyValid && this.getSummary(!0), [ 2 ];
                    });
                });
            }, AINarratives.prototype.applyTextTooltip = function(element, tooltip) {
                var tooltipRef, _this = this;
                element.on("focus mouseenter", function() {
                    tooltipRef = _this.renderTextTooltip(element.get(0), tooltip);
                }), element.on("blur mouseleave", function() {
                    null == tooltipRef || tooltipRef.close(), tooltipRef = null;
                });
            }, AINarratives.prototype.renderTextTooltip = function(element, tooltip) {
                var _a;
                return this.textTooltip && this.textTooltip.close(), this.textTooltip = null === (_a = this.hostServices.getUIComponentFactory()) || void 0 === _a ? void 0 : _a.createTooltip(element, tooltip), 
                this.textTooltip;
            }, AINarratives.prototype.applyReferenceTooltip = function(element, references, referenceNumber) {
                var _this = this;
                element.on("focus mouseenter", function() {
                    _this.renderReferenceTooltip(element.get(0), references, referenceNumber);
                }), element.on("blur mouseleave", function() {
                    _this.aiNarrativesService.hideTooltip();
                });
            }, AINarratives.prototype.renderReferenceTooltip = function(element, references, referenceNumber) {
                this.aiNarrativesService.showTooltip(element, references, referenceNumber);
            }, AINarratives.prototype.removeTooltip = function(element) {
                element.off("focus mouseenter blur mouseleave keydown");
            }, AINarratives.SummaryContainer = (0, CssConstants.CH)("summaryContainer"), AINarratives.AINarrativesContainer = (0, 
            CssConstants.CH)("aiNarrativeContainer"), AINarratives.editModeClass = "editMode", 
            AINarratives;
        }();
    }
} ]);