"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "export-pbip-dialog" ], {
    73191: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExportPbipDialogModule: function() {
                return ExportPbipDialogModule;
            }
        });
        var common = __webpack_require__(77476), fesm2022_forms = __webpack_require__(17174), dialog = __webpack_require__(32293), a11y_module = __webpack_require__(20914), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), dialogs_parts_module = __webpack_require__(96327), pbi_tooltip_module = __webpack_require__(16095), tri_dropdown = __webpack_require__(44913), tri_radio_button = __webpack_require__(95228), tri_checkbox = __webpack_require__(14977), export_pbip_dialog_identifier = __webpack_require__(17890), tslib_es6 = __webpack_require__(81337), template_dialog_payload_service = __webpack_require__(67489), core = __webpack_require__(50423), localization_service = __webpack_require__(65181), file_menu_service = __webpack_require__(83730), dialog_service = __webpack_require__(58938), template_dialog_component = __webpack_require__(96777), tri_checkbox_component = __webpack_require__(10965), localize_pipe = __webpack_require__(85102), ExportPbipDialogComponent = function() {
            function ExportPbipDialogComponent(localizationService, fileMenuService, dialogService, templateDialogPayload) {
                this.localizationService = localizationService, this.fileMenuService = fileMenuService, 
                this.dialogService = dialogService, this.templateDialogPayload = templateDialogPayload;
            }
            return ExportPbipDialogComponent.prototype.ngOnInit = function() {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _b, _c, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return _b = this, null === (_a = this.templateDialogPayload.input.path) || void 0 === _a ? [ 3, 1 ] : (_c = _a, 
                            [ 3, 3 ]);

                          case 1:
                            return [ 4, this.fileMenuService.getDefaultPBIPSaveLocationAsync() ];

                          case 2:
                            _c = _d.sent(), _d.label = 3;

                          case 3:
                            return _b.path = _c, this.keepModelReference = this.templateDialogPayload.input.keepModelReference, 
                            this.openExportFolder = this.templateDialogPayload.input.openExportFolder, this.templateDialogPayload.onOkButtonClick = function() {
                                return _this.onOk();
                            }, this.templateDialogPayload.onCancelButtonClick = function() {
                                return _this.onCancel();
                            }, [ 2 ];
                        }
                    });
                });
            }, ExportPbipDialogComponent.prototype.onOk = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var result, isCollision, confirmResult;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return result = {
                                status: "exportClicked"
                            }, [ 4, this.fileMenuService.checkExportPBIPCollisionAsync(this.path) ];

                          case 1:
                            return isCollision = _a.sent(), confirmResult = !0, isCollision ? [ 4, this.confirmOverwrite() ] : [ 3, 3 ];

                          case 2:
                            confirmResult = _a.sent(), _a.label = 3;

                          case 3:
                            return confirmResult && (this.fileMenuService.exportPBIP(this.path, this.keepModelReference, this.openExportFolder), 
                            this.templateDialogPayload.closeDialogFromConsumer(result)), [ 2, Promise.resolve(result) ];
                        }
                    });
                });
            }, ExportPbipDialogComponent.prototype.onCancel = function() {
                var result = {
                    status: "canceled"
                };
                return this.templateDialogPayload.closeDialogFromConsumer(result), Promise.resolve(result);
            }, ExportPbipDialogComponent.prototype.confirmOverwrite = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var bindings;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return bindings = {
                                title: this.localizationService.get("ExportPbip_ConfirmOverwriteTitle"),
                                message: this.localizationService.get("ExportPbip_ConfirmOverwriteMessage"),
                                okButtonText: this.localizationService.get("Yes"),
                                cancelButtonText: this.localizationService.get("No")
                            }, [ 4, this.dialogService.openHostDialog({
                                dialogName: "SimpleConfirmationDialogComponent",
                                componentName: "SimpleConfirmationDialogComponent",
                                bindings,
                                config: {
                                    width: "500px"
                                }
                            }) ];

                          case 1:
                            return [ 4, _a.sent().afterClosed().toPromise() ];

                          case 2:
                            return [ 2, 1 === _a.sent() ];
                        }
                    });
                });
            }, ExportPbipDialogComponent.prototype.onBrowse = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var newPath;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.fileMenuService.browsePBIPSaveLocationAsync(this.path) ];

                          case 1:
                            return (newPath = _a.sent()) && (this.path = newPath), [ 2 ];
                        }
                    });
                });
            }, ExportPbipDialogComponent.prototype.toggleKeepModelReference = function() {
                this.keepModelReference = !this.keepModelReference;
            }, ExportPbipDialogComponent.prototype.toggleOpenExportFolder = function() {
                this.openExportFolder = !this.openExportFolder;
            }, ExportPbipDialogComponent.\u0275fac = function(t) {
                return new (t || ExportPbipDialogComponent)(core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](file_menu_service.g), core["\u0275\u0275directiveInject"](dialog_service.x), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x));
            }, ExportPbipDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ExportPbipDialogComponent,
                selectors: [ [ "export-pbip-dialog" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 20,
                vars: 15,
                consts: [ [ 1, "export-pbip-dialog" ], [ 1, "export-pbip-browse" ], [ "aria-label", "pathLabel", 1, "pbi-modern-input", "export-pbip-input", 3, "ngModel", "ngModelChange" ], [ 1, "pbi-fluent-button", "export-browse-button", 3, "click" ], [ 1, "export-pbip-checkboxes" ], [ 3, "checked", "onChange" ], [ 1, "checkbox-label" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "div", 0)(2, "div")(3, "b"), 
                    core["\u0275\u0275text"](4), core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275elementEnd"]()(), 
                    core["\u0275\u0275elementStart"](6, "div", 1)(7, "input", 2), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                        return ctx.path = $event;
                    }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](8, "button", 3), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.onBrowse();
                    }), core["\u0275\u0275text"](9), core["\u0275\u0275pipe"](10, "localize"), core["\u0275\u0275elementEnd"]()(), 
                    core["\u0275\u0275elementStart"](11, "div", 4)(12, "tri-checkbox", 5), core["\u0275\u0275listener"]("onChange", function() {
                        return ctx.toggleKeepModelReference();
                    }), core["\u0275\u0275elementStart"](13, "span", 6), core["\u0275\u0275text"](14), 
                    core["\u0275\u0275pipe"](15, "localize"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](16, "tri-checkbox", 5), 
                    core["\u0275\u0275listener"]("onChange", function() {
                        return ctx.toggleOpenExportFolder();
                    }), core["\u0275\u0275elementStart"](17, "span", 6), core["\u0275\u0275text"](18), 
                    core["\u0275\u0275pipe"](19, "localize"), core["\u0275\u0275elementEnd"]()()()()()), 
                    2 & rf && (core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](5, 7, "Location"), " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngModel", ctx.path), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](10, 9, "Browse"), " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("checked", ctx.keepModelReference), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](15, 11, "PBIP_Export_Keep_Reference"), " "), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("checked", ctx.openExportFolder), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](19, 13, "PBIP_Export_Open_Folder"), " "));
                },
                dependencies: [ template_dialog_component.J, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, tri_checkbox_component.r, localize_pipe.F ],
                styles: [ ".export-browse-button[_ngcontent-%COMP%]{margin-left:5px;line-height:1em}.export-pbip-checkboxes[_ngcontent-%COMP%]{margin-top:12px}.export-pbip-input[_ngcontent-%COMP%]{width:430px;height:32px;position:relative;top:1px}.export-pbip-browse[_ngcontent-%COMP%]{margin-top:4px}" ]
            }), ExportPbipDialogComponent;
        }(), ExportPbipDialogModule = function() {
            function ExportPbipDialogModule() {}
            return ExportPbipDialogModule.\u0275fac = function(t) {
                return new (t || ExportPbipDialogModule);
            }, ExportPbipDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExportPbipDialogModule
            }), ExportPbipDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: export_pbip_dialog_identifier.k,
                    componentType: ExportPbipDialogComponent
                } ]), dialogs_parts_module.F, fesm2022_forms.u5, localization_module.v, dialog.Is, tri_checkbox.B, a11y_module._, pbi_tooltip_module.Z, tri_dropdown.lK, tri_radio_button.W ]
            }), ExportPbipDialogModule;
        }();
    }
} ]);