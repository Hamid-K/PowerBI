"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "qnadesktop" ], {
    70940: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            s: function() {
                return getPlugin;
            }
        });
        var _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47508), _powerbi_legacy_PowerBIVisuals_VisualsCommon_Lazy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45034), typeToPluginMap = new _powerbi_legacy_PowerBIVisuals_VisualsCommon_Lazy__WEBPACK_IMPORTED_MODULE_0__.o(function() {
            var result = {};
            return result[3] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.card, 
            result[13] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.lineClusteredColumnComboChart, 
            result[29] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.multiRowCard, 
            result[7] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.clusteredBarChart, 
            result[10] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.clusteredColumnChart, 
            result[20] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.donutChart, 
            result[16] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.funnel, 
            result[30] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.gauge, 
            result[22] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.heatMap, 
            result[9] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.hundredPercentStackedBarChart, 
            result[12] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.hundredPercentStackedColumnChart, 
            result[4] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.lineChart, 
            result[1] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.map, 
            result[19] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.filledMap, 
            result[2] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.pivotTable, 
            result[5] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.pieChart, 
            result[6] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.scatterChart, 
            result[8] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.barChart, 
            result[11] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.columnChart, 
            result[0] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.tableEx, 
            result[17] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.treemap, 
            result[23] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.waterfallChart, 
            result[26] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.stackedAreaChart, 
            result[27] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.hundredPercentStackedAreaChart, 
            result[32] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.areaChart, 
            result[33] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.ribbonChart, 
            result[34] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.kpi, 
            result[35] = _powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.decompositionTreeVisual, 
            result;
        });
        function getPlugin(type) {
            return typeToPluginMap.getValue()[type];
        }
        new _powerbi_legacy_PowerBIVisuals_VisualsCommon_Lazy__WEBPACK_IMPORTED_MODULE_0__.o(function() {
            var result = {};
            return result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.card.name] = 3, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.lineClusteredColumnComboChart.name] = 13, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.multiRowCard.name] = 29, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.clusteredBarChart.name] = 7, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.clusteredColumnChart.name] = 10, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.donutChart.name] = 20, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.funnel.name] = 16, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.gauge.name] = 30, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.heatMap.name] = 22, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.hundredPercentStackedBarChart.name] = 9, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.hundredPercentStackedColumnChart.name] = 12, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.lineChart.name] = 4, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.map.name] = 1, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.filledMap.name] = 19, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.matrix.name] = 2, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.pivotTable.name] = 2, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.pieChart.name] = 5, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.scatterChart.name] = 6, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.barChart.name] = 8, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.columnChart.name] = 11, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.table.name] = 0, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.tableEx.name] = 0, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.treemap.name] = 17, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.waterfallChart.name] = 23, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.stackedAreaChart.name] = 26, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.hundredPercentStackedAreaChart.name] = 27, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.areaChart.name] = 32, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.ribbonChart.name] = 33, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.kpi.name] = 34, 
            result[_powerbi_legacy_PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_1__.L.decompositionTreeVisual.name] = 35, 
            result;
        });
    },
    1931: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            T: function() {
                return QnaModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(77476), _powerbi_Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52910), _powerbi_ErrorService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(13052), _powerbi_Explore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(31109), _powerbi_ExploreUI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(87121), _powerbi_FeatureSwitch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(76521), _powerbi_GeocoderIndexedDB__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(40516), _powerbi_Geocoding__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(84497), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(79061), _powerbi_Telemetry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21617), _powerbi_UILibrary_UILibrary_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(94785), _powerbi_VisualHostCore__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(3176), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), QnaModule = function() {
            function QnaModule() {}
            return QnaModule.\u0275fac = function(t) {
                return new (t || QnaModule);
            }, QnaModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineNgModule"]({
                type: QnaModule
            }), QnaModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _powerbi_Data__WEBPACK_IMPORTED_MODULE_3__.O, _powerbi_ErrorService__WEBPACK_IMPORTED_MODULE_4__.T, _powerbi_Explore__WEBPACK_IMPORTED_MODULE_5__.F, _powerbi_ExploreUI__WEBPACK_IMPORTED_MODULE_6__.J, _powerbi_FeatureSwitch__WEBPACK_IMPORTED_MODULE_7__.A3, _powerbi_GeocoderIndexedDB__WEBPACK_IMPORTED_MODULE_8__.h, _powerbi_Geocoding__WEBPACK_IMPORTED_MODULE_9__.L, _powerbi_Localization__WEBPACK_IMPORTED_MODULE_10__.v, _powerbi_Telemetry__WEBPACK_IMPORTED_MODULE_0__.e3, _powerbi_UILibrary_UILibrary_module__WEBPACK_IMPORTED_MODULE_11__.g, _powerbi_VisualHostCore__WEBPACK_IMPORTED_MODULE_12__.c ]
            }), QnaModule;
        }();
    },
    20327: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            QnaDesktopModule: function() {
                return QnaDesktopModule;
            }
        });
        var Qna_module = __webpack_require__(1931), injectionTokens = __webpack_require__(98875), core = __webpack_require__(50423), desktop_qna_service = __webpack_require__(24215), ImproveLsdlDesktopProxyService = function() {
            function ImproveLsdlDesktopProxyService(desktopQnaService, promiseStore) {
                this.desktopQnaService = desktopQnaService, this.promiseStore = promiseStore;
            }
            return ImproveLsdlDesktopProxyService.prototype.improveLinguisticSchema = function(wireRequest) {
                return this.pendingRequestPromise = this.promiseStore.create(), this.desktopQnaService.improveLinguisticSchema(wireRequest, this.pendingRequestPromise);
            }, ImproveLsdlDesktopProxyService.prototype.cancelImproveLinguisticSchema = function() {
                null != this.pendingRequestPromise && (this.promiseStore.cancelPromise(this.pendingRequestPromise.handle), 
                this.pendingRequestPromise = void 0);
            }, ImproveLsdlDesktopProxyService.\u0275fac = function(t) {
                return new (t || ImproveLsdlDesktopProxyService)(core["\u0275\u0275inject"](desktop_qna_service.r), core["\u0275\u0275inject"](injectionTokens.K));
            }, ImproveLsdlDesktopProxyService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ImproveLsdlDesktopProxyService,
                factory: ImproveLsdlDesktopProxyService.\u0275fac
            }), ImproveLsdlDesktopProxyService;
        }(), tslib_es6 = __webpack_require__(81337), Telemetry = __webpack_require__(21617), debug = __webpack_require__(62458), ImproveLsdlProxyInjectionToken = new core.InjectionToken("ImproveLsdlProxy"), JsonExtensions = __webpack_require__(26112), lsdl_ui_blocker_service = __webpack_require__(74539), src = __webpack_require__(62345), Utility = __webpack_require__(38078), performance = __webpack_require__(29804), ImproveLsdlCopilotTelemetryService = function() {
            function ImproveLsdlCopilotTelemetryService(certifiedEventsService) {
                this.certifiedEventsService = certifiedEventsService;
            }
            return ImproveLsdlCopilotTelemetryService.prototype.startImproveLsdlWithCopilotEvent = function() {
                this.improveLsdlCopilotEventStartTime = (0, performance.z)();
            }, ImproveLsdlCopilotTelemetryService.prototype.stopImproveLsdlWithCopilotEvent = function(activityStatus) {
                debug.fF.assertValue(this.improveLsdlCopilotEventStartTime, "improveLsdlCopilotEventStartTime"), 
                this.certifiedEventsService.logTimedStandardizedFeatureEvent({
                    correlationId: Utility.b$.generateGuid(),
                    originatingService: src.F1,
                    activityName: "Qna-Setup",
                    resultCode: "",
                    featureName: (0, src.mN)("Usage", "Qna-Setup"),
                    activityStatus,
                    operationStartTime: this.improveLsdlCopilotEventStartTime,
                    operationEndTime: (0, performance.z)(),
                    activityAttributes: {
                        IsSignedIn: !0,
                        Location: "Desktop",
                        ContentMode: "Edit"
                    }
                }), this.improveLsdlCopilotEventStartTime = void 0;
            }, ImproveLsdlCopilotTelemetryService.\u0275fac = function(t) {
                return new (t || ImproveLsdlCopilotTelemetryService)(core["\u0275\u0275inject"](Telemetry.ly));
            }, ImproveLsdlCopilotTelemetryService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ImproveLsdlCopilotTelemetryService,
                factory: ImproveLsdlCopilotTelemetryService.\u0275fac,
                providedIn: "root"
            }), ImproveLsdlCopilotTelemetryService;
        }(), events = __webpack_require__(5894), improve_lsdl_util = __webpack_require__(34100), ImproveLsdlServiceProvider = {
            provide: "improveLsdlService",
            useFactory: function(improveLsdlProxy, certifiedEventsService, telemetryService, qnaCopilotTelemetry, lsdlUiBlockerService) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, new ImproveLsdlService(lsdlUiBlockerService, certifiedEventsService, telemetryService, qnaCopilotTelemetry, improveLsdlProxy) ];
                    });
                });
            },
            deps: [ ImproveLsdlProxyInjectionToken, Telemetry.ly, Telemetry.y0, ImproveLsdlCopilotTelemetryService, lsdl_ui_blocker_service.D ]
        }, ImproveLsdlService = function() {
            function ImproveLsdlService(lsdlUiBlockerService, certifiedEventsService, telemetryService, improveLsdlCopilotTelemetry, improveLsdlProxy) {
                this.lsdlUiBlockerService = lsdlUiBlockerService, this.certifiedEventsService = certifiedEventsService, 
                this.telemetryService = telemetryService, this.improveLsdlCopilotTelemetry = improveLsdlCopilotTelemetry, 
                this.improveLsdlProxy = improveLsdlProxy;
            }
            return ImproveLsdlService.prototype.improveLinguisticSchema = function(improveLsdlRequest) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var wireRequest, response, responseJson, wireResponse, hostException_1, hostError;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            if (debug.fF.assertValue(improveLsdlRequest, "improveLsdlRequest"), debug.fF.assertNonEmpty(improveLsdlRequest.requestedAgents, "requestedAgents should not be empty"), 
                            (0, improve_lsdl_util.J_)(improveLsdlRequest.requestedAgents) && _.isEmpty(improveLsdlRequest.copilotWorkspaceId)) return debug.fF.assertFail("copilotWorkspaceId should be defined for copilot agents"), 
                            [ 2 ];
                            wireRequest = {
                                LsdlJson: improveLsdlRequest.lsdlJson,
                                RequestedVersion: "4.0.0",
                                Priority: improveLsdlRequest.requestPriority,
                                RequestedAgents: _.map(improveLsdlRequest.requestedAgents, function(a) {
                                    return a.toString();
                                }),
                                CopilotWorkspaceId: improveLsdlRequest.copilotWorkspaceId
                            }, _.includes(improveLsdlRequest.requestedAgents, "PowerBI.AzureOpenAIPhrasings") ? this.lsdlUiBlockerService.startBlockingTask("improvePhrasings") : this.lsdlUiBlockerService.startBlockingTask("improveSynonyms"), 
                            this.startTelemetryEvent(improveLsdlRequest.requestedAgents), _c.label = 1;

                          case 1:
                            return _c.trys.push([ 1, 3, 4, 5 ]), [ 4, this.improveLsdlProxy.improveLinguisticSchema(wireRequest) ];

                          case 2:
                            return responseJson = _c.sent(), wireResponse = (0, JsonExtensions.K)(responseJson), 
                            response = function(response) {
                                return "1.0.0" === response.Version;
                            }(wireResponse) ? {
                                version: wireResponse.Version,
                                errors: _.map(wireResponse.DiagnosticInfo, function(d) {
                                    return {
                                        category: "powerbi",
                                        code: d.DiagnosticCode,
                                        agent: wireToClientLsdlAgent(d.Agent),
                                        diagnosticMessage: d.DiagnosticMessage
                                    };
                                }),
                                result: wireResponse.LsdlObject ? {
                                    lsdlObject: wireResponse.LsdlObject
                                } : void 0
                            } : {
                                version: wireResponse.Version,
                                errors: [ {
                                    category: "powerbi",
                                    code: "RequiresNewerVersion"
                                } ]
                            }, [ 3, 5 ];

                          case 3:
                            return hostException_1 = _c.sent(), hostError = null !== (_a = hostException_1.hostError) && void 0 !== _a ? _a : hostException_1, 
                            errorCode = null !== (_b = hostError.errorCode) && void 0 !== _b ? _b : hostError.type, 
                            response = {
                                version: "1.0.0",
                                errors: [ {
                                    category: "host",
                                    code: "BadGateway" === errorCode || "ConnectFailure" === errorCode || "ConnectionClosed" === errorCode || "GatewayTimeout" === errorCode || "KeepAliveFailure" === errorCode || "NameResolutionFailure" === errorCode || "NetworkUnavailable" === errorCode || "ProxyAuthenticationRequired" === errorCode || "ProxyNameResolutionFailure" === errorCode || "RequestTimeout" === errorCode || "ServiceUnvailable" === errorCode || "Timeout" === errorCode || "AccessDenied" === errorCode ? "NetworkConnectionIssue" : "FeatureNotAvailableError" === errorCode ? "FeatureNotAvailable" : "System.OperationCanceledException" === errorCode ? "OperationCancelled" : "GenericFailure"
                                } ]
                            }, [ 3, 5 ];

                          case 4:
                            return this.endTelemetryEvent(!!response.result, response.errors, improveLsdlRequest.requestedAgents), 
                            this.lsdlUiBlockerService.endBlockingTask(), [ 7 ];

                          case 5:
                            return [ 2, response ];
                        }
                        var errorCode;
                    });
                });
            }, ImproveLsdlService.prototype.cancelImproveLinguisticSchema = function() {
                this.improveLsdlProxy.cancelImproveLinguisticSchema(), this.improveLsdlTelemetryEvent && (this.improveLsdlTelemetryEvent.event.info.isCancelled = !0), 
                this.improveLsdlRunningEvent && this.improveLsdlRunningEvent.setAttribute("isCancelled", !0);
            }, ImproveLsdlService.prototype.startTelemetryEvent = function(requestedAgents) {
                this.improveLsdlTelemetryEvent = this.telemetryService.startEvent(events.yp, {
                    requestedAgents
                }), this.improveLsdlRunningEvent = this.certifiedEventsService.startTimedStandardizedFeatureEvent("Qna - Improve LSDL Feature", events.Nt), 
                this.improveLsdlRunningEvent.setAttribute("requestedAgents", _.toString(requestedAgents)), 
                (0, improve_lsdl_util.J_)(requestedAgents) && this.improveLsdlCopilotTelemetry.startImproveLsdlWithCopilotEvent();
            }, ImproveLsdlService.prototype.endTelemetryEvent = function(hasSuccessResult, errors, requestedAgents) {
                if (debug.fF.assertValue(this.improveLsdlTelemetryEvent, "improveLsdlTelemetryEvent"), 
                debug.fF.assertValue(this.improveLsdlRunningEvent, "improveLsdlRunningEvent"), !_.isEmpty(errors)) {
                    var errorCodes = _.map(errors, function(e) {
                        return e.code;
                    });
                    this.improveLsdlTelemetryEvent.event.info.errorCodes = errorCodes, this.improveLsdlRunningEvent.setAttribute("errorCodes", _.toString(errorCodes));
                }
                this.improveLsdlTelemetryEvent.resolve();
                var activityStatus = hasSuccessResult && !_.isEmpty(errors) ? "SucceededWithErrors" : hasSuccessResult ? "Succeeded" : "Failed";
                this.improveLsdlRunningEvent.complete(activityStatus), (0, improve_lsdl_util.J_)(requestedAgents) && this.improveLsdlCopilotTelemetry.stopImproveLsdlWithCopilotEvent(activityStatus), 
                this.improveLsdlTelemetryEvent = void 0, this.improveLsdlRunningEvent = void 0;
            }, ImproveLsdlService.\u0275fac = function(t) {
                return new (t || ImproveLsdlService)(core["\u0275\u0275inject"](lsdl_ui_blocker_service.D), core["\u0275\u0275inject"](Telemetry.ly), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](ImproveLsdlCopilotTelemetryService), core["\u0275\u0275inject"](ImproveLsdlProxyInjectionToken));
            }, ImproveLsdlService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ImproveLsdlService,
                factory: ImproveLsdlService.\u0275fac
            }), ImproveLsdlService;
        }();
        function wireToClientLsdlAgent(agentName) {
            if (null != agentName) switch (agentName) {
              case "PowerBI.OrganizationLsdlSharing":
                return "PowerBI.OrganizationLsdlSharing";

              case "PowerBI.AzureOpenAISynonyms":
                return "PowerBI.AzureOpenAISynonyms";

              case "PowerBI.AzureOpenAIPhrasings":
                return "PowerBI.AzureOpenAIPhrasings";

              default:
                debug.fF.assertFail("Unknown agent name ".concat(agentName));
            }
        }
        var wireClientContractsConversion_util = __webpack_require__(35988), from = __webpack_require__(82762), of = __webpack_require__(11547), map = __webpack_require__(14172), switchMap = __webpack_require__(81905), catchError = __webpack_require__(59822), delay = __webpack_require__(70032), InterpretProxyDesktopService = function() {
            function InterpretProxyDesktopService(qnaHostService) {
                this.qnaHostService = qnaHostService, this.retryId = 0;
            }
            return InterpretProxyDesktopService.prototype.getOverwriteResponseModelInfo = function(request) {
                debug.fF.assert(function() {
                    return 1 === _.size(null == request ? void 0 : request.scopes);
                }, "Expect to have 1 and only one scope in the request for desktop");
                var model = request.scopes[0].model;
                return {
                    vsName: model.vsName,
                    dbName: model.dbName
                };
            }, InterpretProxyDesktopService.prototype.convertToWireInterpretRequest = function(request) {
                return (0, from.D)(this.qnaHostService.getServiceModelInfo()).pipe((0, map.U)(function(modelInfo) {
                    return modelInfo ? wireClientContractsConversion_util.tc(request, modelInfo.VirtualServerName, modelInfo.DatabaseName) : wireClientContractsConversion_util.NG(request);
                }));
            }, InterpretProxyDesktopService.prototype.probe = function(_modelScopes) {
                var _this = this;
                return debug.fF.assertAnyValue(_modelScopes, "modelScopes can be any value"), this.convertToWireInterpretRequest(void 0).pipe((0, 
                switchMap.w)(function(wireRequest) {
                    return _this.sendRequest(wireRequest).pipe((0, map.U)(function(wireResponse) {
                        return wireClientContractsConversion_util.Cb(wireResponse);
                    }));
                }), (0, catchError.K)(function(hostException) {
                    return (0, of.of)({
                        error: hostServiceErrorToQnaError(hostException)
                    });
                }));
            }, InterpretProxyDesktopService.prototype.interpret = function(wireInterpretRequest, enableRetries, retryReporter) {
                return debug.fF.assertValue(wireInterpretRequest, "Expect the given wireInterpretRequest to be defined"), 
                this.sendRequest(wireInterpretRequest, enableRetries, retryReporter).pipe((0, map.U)(function(wireResponse) {
                    return function(wireInterpretRequest, wireResponse) {
                        return debug.fF.assertValue(wireResponse, "Expect the given wireResponse to be defined"), 
                        isForSuggestedQuestions(wireInterpretRequest) ? wireClientContractsConversion_util.B4(wireResponse) : wireClientContractsConversion_util.R1(wireInterpretRequest.Utterance, wireInterpretRequest.DesiredInterpretationsCount, void 0, wireResponse);
                    }(wireInterpretRequest, wireResponse);
                }), (0, catchError.K)(function(hostException) {
                    return (0, of.of)(function(interpretRequest, hostServiceError) {
                        debug.fF.assert(function() {
                            return !hostServiceError.HostError;
                        }, "Expect hostError being a IHostServiceError, not hostError.HostError");
                        var qnaError = hostServiceErrorToQnaError(hostServiceError);
                        return isForSuggestedQuestions(interpretRequest) ? {
                            result: void 0,
                            error: qnaError
                        } : {
                            utterance: interpretRequest.Utterance,
                            results: void 0,
                            error: qnaError
                        };
                    }(wireInterpretRequest, hostException));
                }));
            }, InterpretProxyDesktopService.prototype.sendRequest = function(wireInterpretRequest, enableRetries, retryReporter) {
                var _this = this;
                return debug.fF.assertValue(wireInterpretRequest, "The given wireInterpretRequest must be defined"), 
                this.qnaHostService.interpretAsObservable(JSON.stringify(wireInterpretRequest)).pipe((0, 
                delay.g)(this.retryId > 0 ? 1e3 : 0), (0, switchMap.w)(function(jsonResponse) {
                    var wireResponse = (0, JsonExtensions.K)(jsonResponse);
                    if (enableRetries && _this.retryId <= 8) {
                        var retriableClientWarning = function(wireInterpretRequest) {
                            var cloudContext = null == wireInterpretRequest ? void 0 : wireInterpretRequest.Context;
                            return 1 === _.size(null == cloudContext ? void 0 : cloudContext.ModelScopes) && !_.isEmpty(cloudContext.ModelScopes[0].VirtualServerName) && !_.isEmpty(cloudContext.ModelScopes[0].DatabaseName);
                        }(wireInterpretRequest) ? wireClientContractsConversion_util.qV(wireResponse) : wireClientContractsConversion_util.Fm(wireResponse);
                        if (null != retriableClientWarning) return _this.retryId++, retryReporter && retryReporter.reportLoading({
                            warning: retriableClientWarning
                        }), _this.sendRequest(wireInterpretRequest, enableRetries, retryReporter);
                    }
                    return _this.retryId = 0, (0, of.of)(wireResponse);
                }));
            }, InterpretProxyDesktopService.\u0275fac = function(t) {
                return new (t || InterpretProxyDesktopService)(core["\u0275\u0275inject"](desktop_qna_service.r));
            }, InterpretProxyDesktopService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: InterpretProxyDesktopService,
                factory: InterpretProxyDesktopService.\u0275fac
            }), InterpretProxyDesktopService;
        }();
        function isForSuggestedQuestions(interpretRequest) {
            var _a, _b;
            return debug.fF.assertValue(interpretRequest, "Expect the given interpretRequest to be defined."), 
            !!(null === (_a = interpretRequest.Options) || void 0 === _a ? void 0 : _a.SuggestedUtterances) || !!(null === (_b = interpretRequest.Options) || void 0 === _b ? void 0 : _b.SuggestedDefineCalculationUtterances);
        }
        function hostServiceErrorToQnaError(hostError) {
            debug.fF.assertValue(hostError, "Expect the given hostError to be defined");
            var qnaErrorCode = wireClientContractsConversion_util.hj(hostError.errorCode);
            return debug.fF.assertValue(null != qnaErrorCode, "Expect qnaErrorCode not null here"), 
            {
                errorCode: qnaErrorCode,
                source: "GenericRequestFailure" !== qnaErrorCode ? "User" : "PowerBI",
                message: hostError.message,
                stackTrace: hostError.stackTrace
            };
        }
        var BehaviorSubject = __webpack_require__(35510), feature_switch_service = __webpack_require__(9380), modelConverterHelper = __webpack_require__(5708), StandaloneUtility3 = __webpack_require__(43286), localization_service = __webpack_require__(65181), QnaInterpretProxyServiceInjectionToken = new core.InjectionToken("QnaInterpretProxyService"), supportedLanguages = {
            en: {
                resStringSuffix: "_English"
            },
            es: {
                resStringSuffix: "_Spanish",
                preview: !0
            }
        };
        function stripLocale(languageLocale) {
            if (languageLocale) return languageLocale.split("-")[0].toLowerCase();
        }
        function createInterpretService(featureSwitchService, localizationService, telemetryService, interpretProxy) {
            return new InterpretService(featureSwitchService, localizationService, telemetryService, interpretProxy);
        }
        var InterpretService = function() {
            function InterpretService(featureSwitchService, localizationService, telemetryService, interpretProxy) {
                this.featureSwitchService = featureSwitchService, this.localizationService = localizationService, 
                this.telemetryService = telemetryService, this.interpretProxy = interpretProxy, 
                this.answeredQuestionDataLoggerFactory = new AnsweredQuestionDataLoggerFactory(this.telemetryService, 3e3);
            }
            return InterpretService.prototype.sendFeedback = function(feedback, utterance, interpretRequestScopes, tags) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var interpretRequest, wireContractRequest;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return interpretRequest = this.constructInterpretRequest(utterance, void 0, interpretRequestScopes, void 0, {
                                tags
                            }, void 0, feedback), [ 4, this.interpretProxy.convertToWireInterpretRequest(interpretRequest).toPromise() ];

                          case 1:
                            return wireContractRequest = _a.sent(), this.interpretProxy.interpret(wireContractRequest, !1), 
                            [ 2 ];
                        }
                    });
                });
            }, InterpretService.prototype.interpret = function(requestIdentifier, utterance, entryPoint, interpretRequestScopes, interpretListener, requestConfigs, requestParams, reportMetadata) {
                var _this = this;
                if (debug.fF.assertValue(interpretListener, "interpretListener"), _.isEmpty(utterance)) return (0, 
                of.of)(void 0);
                var interpretStart = Date.now(), logger = this.answeredQuestionDataLoggerFactory.startLogger(), answeredQuestionData = {
                    contentProviderType: "Unknown",
                    entryPoint,
                    tags: _.isEmpty(null == requestParams ? void 0 : requestParams.tags) ? void 0 : requestParams.tags.join(",")
                };
                (null == requestParams ? void 0 : requestParams.isQuestionNotCommitted) || interpretListener.onInterpretIssued();
                var options = this.generateRequestOptions(requestConfigs), request = this.constructInterpretRequest(utterance, options, interpretRequestScopes, requestIdentifier, requestParams, reportMetadata), retryReporter = {
                    reportLoading: function(info) {
                        _this.notifyInterpretListenerRetry(interpretListener, info.warning);
                    }
                }, responseModelInfoToOverwrite = this.interpretProxy.getOverwriteResponseModelInfo(request);
                return this.interpretProxy.convertToWireInterpretRequest(request).pipe((0, switchMap.w)(function(wireContractRequest) {
                    return _this.interpretProxy.interpret(wireContractRequest, !0, retryReporter).pipe((0, 
                    map.U)(function(proxyResponse) {
                        var _a, _b, interpretEnd = Date.now();
                        verifyIsInterpretResponse(proxyResponse);
                        var response = proxyResponse;
                        if (_this.checkToOverwriteResponseModelInfo(response, responseModelInfoToOverwrite), 
                        _this.notifyInterpretListenerResult(interpretListener, response, !!(null == requestParams ? void 0 : requestParams.isQuestionNotCommitted), request), 
                        answeredQuestionData.fromCache = !!response.fromCache, response.error ? _this.logAnsweredQuestionDataOnError(logger, interpretStart, interpretEnd, null == response ? void 0 : response.requestId, null === (_b = null === (_a = null == response ? void 0 : response.error) || void 0 === _a ? void 0 : _a.errorCode) || void 0 === _b ? void 0 : _b.toString(), answeredQuestionData) : _this.logAnsweredQuestionDataWithInterpretResult(logger, interpretStart, interpretEnd, null == response ? void 0 : response.requestId, request.scopes, response, answeredQuestionData), 
                        null == response ? void 0 : response.warnings) {
                            var queryUnSupportedLevelWarningsInfo_1 = (0, wireClientContractsConversion_util.vr)(response.warnings);
                            _.remove(response.warnings, function(warning) {
                                return _.find(queryUnSupportedLevelWarningsInfo_1, function(info) {
                                    return info.warning === warning;
                                });
                            }), answeredQuestionData.warnings = response.warnings.join("|");
                        }
                        return response;
                    }));
                }));
            }, InterpretService.prototype.sendTags = function(tags, utterance, entryPoint, interpretRequestScopes, requestConfigs) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var interpretStart, logger, answeredQuestionData, options, request, responseModelInfoToOverwrite, wireContractRequest, proxyResponse, interpretEnd, response;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return debug.fF.assertNonEmpty(tags, "Expect this be called only when tags is not empty"), 
                            _.isEmpty(tags) ? [ 2 ] : (interpretStart = Date.now(), logger = this.answeredQuestionDataLoggerFactory.startLogger(), 
                            answeredQuestionData = {
                                contentProviderType: "Unknown",
                                entryPoint,
                                tags: _.isEmpty(tags) ? void 0 : tags.join(","),
                                fromCache: !1
                            }, options = this.generateRequestOptions(requestConfigs), request = this.constructInterpretRequest(utterance, options, interpretRequestScopes, void 0, {
                                tags
                            }), responseModelInfoToOverwrite = this.interpretProxy.getOverwriteResponseModelInfo(request), 
                            [ 4, this.interpretProxy.convertToWireInterpretRequest(request).toPromise() ]);

                          case 1:
                            return wireContractRequest = _c.sent(), [ 4, this.interpretProxy.interpret(wireContractRequest, !1).toPromise() ];

                          case 2:
                            return proxyResponse = _c.sent(), interpretEnd = Date.now(), verifyIsInterpretResponse(proxyResponse), 
                            this.checkToOverwriteResponseModelInfo(response = proxyResponse, responseModelInfoToOverwrite), 
                            response.error ? this.logAnsweredQuestionDataOnError(logger, interpretStart, interpretEnd, null == response ? void 0 : response.requestId, null === (_b = null === (_a = null == response ? void 0 : response.error) || void 0 === _a ? void 0 : _a.errorCode) || void 0 === _b ? void 0 : _b.toString(), answeredQuestionData) : this.logAnsweredQuestionDataWithInterpretResult(logger, interpretStart, interpretEnd, null == response ? void 0 : response.requestId, request.scopes, response, answeredQuestionData), 
                            [ 2 ];
                        }
                    });
                });
            }, InterpretService.prototype.getSuggestedQuestions = function(interpretRequestScopes) {
                var _this = this, request = this.constructInterpretRequest("", 2048, interpretRequestScopes);
                return this.interpretProxy.convertToWireInterpretRequest(request).pipe((0, switchMap.w)(function(wireContractRequest) {
                    return _this.interpretProxy.interpret(wireContractRequest, !0).pipe((0, map.U)(function(proxyResponse) {
                        return function(proxyResponse) {
                            debug.fF.assert(function() {
                                return !proxyResponse.hasOwnProperty("utterance");
                            }, 'Expect proxyResponse in type SuggestedQuestionResponse, it should not contain property "utterance".'), 
                            debug.fF.assert(function() {
                                return !proxyResponse.hasOwnProperty("requestId");
                            }, 'Expect proxyResponse in type SuggestedQuestionResponse, it should not contain property "requestId".'), 
                            debug.fF.assert(function() {
                                return !proxyResponse.hasOwnProperty("fromCache");
                            }, 'Expect proxyResponse in type SuggestedQuestionResponse, it should not contain property "fromCache".');
                            var suggestedResponse = proxyResponse;
                            suggestedResponse.result && debug.fF.assert(function() {
                                return suggestedResponse.result.hasOwnProperty("utterances");
                            }, 'Expect proxyResponse in type SuggestedQuestionResponse, proxyResponse.result should contain property "utterances".');
                        }(proxyResponse), proxyResponse;
                    }));
                }));
            }, InterpretService.prototype.getSuggestedDefineCalculationQuestions = function(interpretRequestScopes) {
                var _this = this, request = this.constructInterpretRequest("", 16384, interpretRequestScopes);
                return this.interpretProxy.convertToWireInterpretRequest(request).pipe((0, switchMap.w)(function(wireContractRequest) {
                    return _this.interpretProxy.interpret(wireContractRequest, !0).pipe((0, map.U)(function(proxyResponse) {
                        return function(proxyResponse) {
                            var suggestedResponse = proxyResponse;
                            suggestedResponse.result && debug.fF.assert(function() {
                                return suggestedResponse.result.hasOwnProperty("utterances");
                            }, 'Expect proxyResponse in type SuggestedQuestionResponse, proxyResponse.result should contain property "utterances".');
                        }(proxyResponse), proxyResponse;
                    }));
                }));
            }, InterpretService.prototype.getPlaceholderText = function(interpretRequestScopes) {
                var _this = this, filteredScopes = _.filter(interpretRequestScopes, function(s) {
                    return _this.isSupportedScope(s);
                });
                return this.interpretProxy.probe((0, wireClientContractsConversion_util.C2)(filteredScopes)).pipe((0, 
                map.U)(function(response) {
                    return {
                        result: response.results ? (localizationService = _this.localizationService, results = response.results, 
                        commonModelLanguage = function(results) {
                            var commonModelLanguage;
                            if (_.isEmpty(results)) return commonModelLanguage;
                            for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
                                var modelResult = results_1[_i];
                                if (commonModelLanguage && modelResult.language !== commonModelLanguage) {
                                    commonModelLanguage = void 0;
                                    break;
                                }
                                commonModelLanguage = modelResult.language;
                            }
                            return commonModelLanguage;
                        }(results), function(commonModelLanguage, localizationService) {
                            var suffix = "";
                            if (commonModelLanguage) {
                                var preview = !1, currentLanguage = stripLocale(localizationService.currentLanguageLocale);
                                commonModelLanguage = stripLocale(commonModelLanguage);
                                var languageInfo = supportedLanguages[commonModelLanguage];
                                languageInfo && (suffix = languageInfo.resStringSuffix, preview = languageInfo.preview), 
                                preview || commonModelLanguage !== currentLanguage || (suffix = "");
                            }
                            return localizationService.get("Qna_Input_Placeholder" + suffix);
                        }(commonModelLanguage, localizationService)) : void 0,
                        error: response.error
                    };
                    var localizationService, results, commonModelLanguage;
                }));
            }, InterpretService.prototype.constructInterpretRequest = function(utterance, interpretOptions, interpretRequestScopes, requestIdentifier, requestParams, reportMetadata, feedback) {
                var _this = this, request = {
                    version: 2,
                    utterance,
                    scopes: _.filter(interpretRequestScopes, function(s) {
                        return _this.isSupportedScope(s);
                    }),
                    skipCompletion: !0,
                    spans: null == requestParams ? void 0 : requestParams.specifiedSpans,
                    linguisticSchemaJson: null == requestParams ? void 0 : requestParams.linguisticSchemaJson,
                    inferredTermBinding: null == requestParams ? void 0 : requestParams.inferredTermBinding,
                    isCommitted: !(null == requestParams ? void 0 : requestParams.isQuestionNotCommitted),
                    tags: null == requestParams ? void 0 : requestParams.tags,
                    feedback,
                    reportMetadata
                };
                if (this.featureSwitchService.featureSwitches.interpretRequestGroupIdEnabled && (request.groupId = null == requestIdentifier ? void 0 : requestIdentifier.groupId, 
                request.groupSequenceNumber = null == requestIdentifier ? void 0 : requestIdentifier.groupSequenceNumber), 
                interpretOptions && (request.options = interpretOptions, (0, StandaloneUtility3.yE)(request.options, 256))) {
                    var calculation = requestParams.calculation;
                    debug.fF.assertValue(calculation, "requestParams calculation should be defined"), 
                    request.intent = {
                        defineCalculation: {
                            language: calculation.language
                        }
                    }, request.isCommitted = calculation.isCommitted, request.desiredInterpretationsCount = 5;
                }
                return request;
            }, InterpretService.prototype.isSupportedScope = function(scope) {
                return scope && scope.model && (0, modelConverterHelper.KZ)(scope.model) && !_.isEmpty(scope.model.vsName) && !_.isEmpty(scope.model.dbName);
            }, InterpretService.prototype.generateRequestOptions = function(requestConfigs) {
                var options = 66;
                return requestConfigs ? (requestConfigs.supportsInsightsQueries && (options |= 512), 
                requestConfigs.supportsPodQueries && (options |= 8), requestConfigs.inferUnknownModelTerms && (options |= 4096), 
                requestConfigs.singleAnswerBias && (options |= 8192), requestConfigs.supportsCalculation && (options |= 256), 
                requestConfigs.includeRelevantSchemaElements && (options |= 32), requestConfigs.useLlmParser && (options |= 65536), 
                options) : options;
            }, InterpretService.prototype.notifyInterpretListenerResult = function(interpretListener, response, isQuestionNotCommitted, request) {
                debug.fF.assertValue(response, "Expect response to be defined"), debug.fF.assertValue(interpretListener, "Expect interpretListener to be defined"), 
                isQuestionNotCommitted || interpretListener.onInterpretResult(request, response);
            }, InterpretService.prototype.notifyInterpretListenerRetry = function(interpretListener, retryWarning) {
                debug.fF.assertValue(interpretListener, "Expect interpretListener to be defined."), 
                interpretListener.onInterpretRetry && interpretListener.onInterpretRetry(retryWarning);
            }, InterpretService.prototype.logAnsweredQuestionDataOnError = function(logger, interpretStart, interpretEnd, requestId, errorCode, data) {
                data.isResponseEmpty = !0, data.isError = !0, data.interpretRequestId = requestId, 
                data.error = errorCode, logger.log(interpretStart, interpretEnd, data);
            }, InterpretService.prototype.logAnsweredQuestionDataWithInterpretResult = function(logger, interpretStart, interpretEnd, requestId, requestScopes, response, data) {
                debug.fF.assertValue(response, "Expect response to be defined"), data.interpretRequestId = requestId, 
                function(answeredQuestionData, response, requestScopes) {
                    var _a;
                    debug.fF.assertValue(answeredQuestionData, "answeredQuestionData"), debug.fF.assertValue(response, "Expect response to be defined");
                    var result = _.first(response.results);
                    answeredQuestionData.isError = !!response.error, answeredQuestionData.isResponseEmpty = !(null == result ? void 0 : result.command);
                    var scopeUsedForResult = function(interpretResponse, scopes) {
                        debug.fF.assertValue(interpretResponse, "Expect interpretResponse to be defined");
                        var result = _.first(interpretResponse.results);
                        if (result) return _.find(scopes, function(s) {
                            return s.model.vsName.toLowerCase() === result.virtualServerName.toLowerCase() && s.model.dbName.toLowerCase() === result.databaseName.toLowerCase();
                        });
                    }(response, requestScopes);
                    if (scopeUsedForResult && (answeredQuestionData.ownerType = function(scopes) {
                        var _a, permissions = null === (_a = null == scopes ? void 0 : scopes.model) || void 0 === _a ? void 0 : _a.permissions;
                        return permissions ? (0, StandaloneUtility3.yE)(permissions, 7) ? "Owner" : "Shared" : "Unknown";
                    }(scopeUsedForResult)), answeredQuestionData.interpretationState = "No Result", 
                    result) {
                        answeredQuestionData.language = result.language, answeredQuestionData.modelLanguage = result.modelLanguage;
                        var resultCorrectionState = null === (_a = result.correctionInfo) || void 0 === _a ? void 0 : _a.state;
                        if (null == resultCorrectionState) answeredQuestionData.interpretationState = "Understood"; else switch (resultCorrectionState) {
                          case 1:
                            answeredQuestionData.interpretationState = "Did you mean";
                            break;

                          case 2:
                            answeredQuestionData.interpretationState = "Showing results for";
                            break;

                          case 0:
                            answeredQuestionData.interpretationState = "No Result";
                            break;

                          default:
                            debug.fF.assertFail("Unhandled case: " + resultCorrectionState);
                        }
                    }
                }(data, response, requestScopes), logger.log(interpretStart, interpretEnd, data);
            }, InterpretService.prototype.checkToOverwriteResponseModelInfo = function(response, manualModelInfo) {
                var result = response.results;
                if (!_.isEmpty(result) && manualModelInfo) for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                    var r = result_1[_i];
                    r.virtualServerName = manualModelInfo.vsName, r.databaseName = manualModelInfo.dbName;
                }
            }, (0, tslib_es6.__decorate)([ (0, tslib_es6.__param)(3, (0, core.Inject)(QnaInterpretProxyServiceInjectionToken)), (0, 
            tslib_es6.__metadata)("design:paramtypes", [ feature_switch_service.vZ, localization_service.o, Telemetry.y0, Object ]) ], InterpretService);
        }();
        function verifyIsInterpretResponse(proxyResponse) {
            debug.fF.assertValue(proxyResponse.utterance, 'proxyResponse is expected to be in type InterpretResponse here, it should contain property "utterance" which is not null.');
            var interpretResponse = proxyResponse;
            interpretResponse.results && debug.fF.assert(function() {
                return !interpretResponse.results.hasOwnProperty("utterances");
            }, 'Expect proxyResponse in type InterpretResponse, proxyResponse.result should not contain "utterances" property.');
        }
        var AnsweredQuestionDataLoggerFactory = function() {
            function AnsweredQuestionDataLoggerFactory(telemetryService, logDebounceTimeInMilliseconds) {
                this.telemetryService = telemetryService, this.logDebounceTimeInMilliseconds = logDebounceTimeInMilliseconds;
            }
            return AnsweredQuestionDataLoggerFactory.prototype.startLogger = function() {
                var _this = this, logger = new AnsweredQuestionDataLogger(this.telemetryService);
                return null != this.logAnsweredDataDebounceHandler && (clearTimeout(this.logAnsweredDataDebounceHandler), 
                this.logAnsweredDataDebounceHandler = null), this.logAnsweredDataDebounceHandler = setTimeout(function() {
                    _this.logAnsweredDataDebounceHandler = null, logger.setReadyToLogData();
                }, this.logDebounceTimeInMilliseconds), logger;
            }, AnsweredQuestionDataLoggerFactory;
        }(), AnsweredQuestionDataLogger = function() {
            function AnsweredQuestionDataLogger(telemetryService) {
                this.telemetryService = telemetryService, this.eventInfo$ = new BehaviorSubject.X(void 0);
            }
            return AnsweredQuestionDataLogger.prototype.log = function(startTime, endTime, data) {
                this.eventInfo$.next({
                    start: startTime,
                    end: endTime,
                    data
                });
            }, AnsweredQuestionDataLogger.prototype.setReadyToLogData = function() {
                var _this = this;
                this.eventInfo$.subscribe(function(info) {
                    info && _this.logData(info);
                });
            }, AnsweredQuestionDataLogger.prototype.logData = function(eventInfo) {
                var startTime = eventInfo.start, endTime = eventInfo.end, data = eventInfo.data;
                debug.fF.assert(function() {
                    return -1 !== startTime;
                }, "startTime value should be set"), debug.fF.assert(function() {
                    return -1 !== endTime;
                }, "endTime value should be set"), data.wasCancelled && (data.isError = !1), this.telemetryService.logEvent(function(parentId, _isError, errorSource, errorCode) {
                    return void 0 === _isError && (_isError = !1), void 0 === errorSource && (errorSource = void 0), 
                    void 0 === errorCode && (errorCode = void 0), events.yP({
                        EventsKitEventName: "FireActivityCompletionSummaryEvent",
                        howEnded: data.isError ? "3" : "1",
                        isResponseEmpty: data.isResponseEmpty,
                        fromCache: data.fromCache,
                        contentProviderType: data.contentProviderType,
                        ownerType: data.ownerType,
                        duration: endTime - startTime,
                        probeDuration: -1,
                        wasCancelled: data.wasCancelled,
                        interpretRequestId: data.interpretRequestId,
                        entryPoint: data.entryPoint,
                        linguisticSchemaLanguage: data.language,
                        modelLanguage: data.modelLanguage,
                        withContextPresent: !1,
                        usedContext: !1,
                        tags: data.tags,
                        interpretationState: data.interpretationState,
                        parentId,
                        isError: data.isError,
                        errorSource,
                        errorCode,
                        warnings: data.warnings,
                        responseError: data.error
                    });
                });
            }, AnsweredQuestionDataLogger;
        }(), qna_supportability_util = __webpack_require__(91592), canvasVisualsUtility = __webpack_require__(41887), plugins = __webpack_require__(47508), first = __webpack_require__(88255);
        function createQnaLaunchService(conceptualSchemaProxy, dataSources, dialogService, errorService, explorationCapabilitiesService, explorationNavigation, formFactorProvider, layoutAuthoring, lazyProvider, localizationService, telemetryService, viewModeState, visualAuthoring, qnaProxyPathToken) {
            return new QnaLaunchService(conceptualSchemaProxy, dataSources, dialogService, errorService, explorationCapabilitiesService, explorationNavigation, formFactorProvider, layoutAuthoring, lazyProvider, localizationService, telemetryService, viewModeState, visualAuthoring, qnaProxyPathToken);
        }
        var QnaLaunchService = function() {
            function QnaLaunchService(conceptualSchemaProxy, dataSources, dialogService, errorService, explorationCapabilitiesService, explorationNavigation, formFactorProvider, layoutAuthoring, lazyProvider, localizationService, telemetryService, viewModeState, visualAuthoring, qnaProxyPathToken) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.dialogService = dialogService, this.errorService = errorService, this.explorationCapabilitiesService = explorationCapabilitiesService, 
                this.explorationNavigation = explorationNavigation, this.formFactorProvider = formFactorProvider, 
                this.layoutAuthoring = layoutAuthoring, this.lazyProvider = lazyProvider, this.localizationService = localizationService, 
                this.telemetryService = telemetryService, this.viewModeState = viewModeState, this.visualAuthoring = visualAuthoring, 
                this.qnaProxyPathToken = qnaProxyPathToken;
            }
            return QnaLaunchService.prototype.reportConfigAllowsQna = function(configs) {
                return 0 === this.formFactorProvider.getCurrentLayout() && !(0 === this.viewModeState.getMode() && !configs.allowInViewMode);
            }, QnaLaunchService.prototype.tryAddQnaContainerToCanvas = function(canvas, args) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, explorationCapabilities, isQnaAllowedInfo, pointOfInterest, canvasSize, position, sections;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.reportConfigAllowsQna({
                                allowInViewMode: !1
                            }) ? [ 4, this.ensureQnaSupportabilityService() ] : [ 2, !1 ];

                          case 1:
                            return _a.sent(), [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 2:
                            return schema = _a.sent(), explorationCapabilities = this.explorationCapabilitiesService.getCapabilities(), 
                            !(isQnaAllowedInfo = (0, qna_supportability_util.H)(explorationCapabilities, schema, this.qnaSupportabilityService)).isAllowed && "featureDisabledInApp" === isQnaAllowedInfo.disallowedReason || !isQnaAllowedInfo.isAllowed && !explorationCapabilities.allowEnableQnaPrompts ? [ 2, !1 ] : (canvasSize = {
                                width: canvas.contract.size.width,
                                height: canvas.contract.size.height
                            }, (pointOfInterest = args && args.pointOfInterest) && (position = this.layoutAuthoring.getLayoutForNewVisualContainer(canvas.contract.visualContainers, pointOfInterest, canvasSize)), 
                            sections = this.explorationNavigation.getAllSections(), [ 4, (0, canvasVisualsUtility.lN)({
                                telemetrySource: args.creationSource,
                                position,
                                visualType: plugins.L.qnaVisual.name
                            }, sections, canvas, this.dataSources.get(), this.visualAuthoring, this.telemetryService) ]);

                          case 3:
                            return _a.sent(), [ 2, !0 ];
                        }
                    });
                });
            }, QnaLaunchService.prototype.tryShowQnaPopout = function(achorElement, args) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, explorationCapabilities, isQnaAllowedInfo, qnaPopoutBuilder, params, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.reportConfigAllowsQna({
                                allowInViewMode: !0
                            }) ? [ 4, this.ensureQnaSupportabilityService() ] : [ 2 ];

                          case 1:
                            return _a.sent(), [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 2:
                            return schema = _a.sent(), explorationCapabilities = this.explorationCapabilitiesService.getCapabilities(), 
                            (isQnaAllowedInfo = (0, qna_supportability_util.H)(explorationCapabilities, schema, this.qnaSupportabilityService)).isAllowed ? [ 4, this.lazyProvider.get("@powerbi/QnaReportContainer/module#QnaReportContainerModule", "qnaPopoutBuilderModern") ] : [ 3, 5 ];

                          case 3:
                            return qnaPopoutBuilder = _a.sent(), params = {
                                anchorElement: achorElement,
                                dataSources: this.dataSources.get(),
                                explorationCapabilities,
                                sourceExploration: this.explorationNavigation.getCurrentExploration(),
                                sourceFilters: args.sourceFilters,
                                viewMode: this.viewModeState.getMode(),
                                close: function() {
                                    _this.explorationNavigation.hideExplorationMask();
                                }
                            }, [ 4, qnaPopoutBuilder.show(params) ];

                          case 4:
                            return _a.sent(), this.explorationNavigation.showExplorationMask(), [ 3, 6 ];

                          case 5:
                            switch (isQnaAllowedInfo.disallowedReason) {
                              case "featureDisabledInIE":
                                this.errorService.infoCustom(this.localizationService.get("Qna_NotSupportedInIE_Title"), this.localizationService.get("Qna_NotSupportedInIE_Subtitle"));
                                break;

                              case "featureDisabledInApp":
                                debug.fF.assertFail("Expect the code of showing qna popout never be called if app doesn't allow qna feature");
                                break;

                              case "noModel":
                                this.errorService.infoCustom(this.localizationService.get("Qna_NotSupported_Title"), this.localizationService.get("Qna_NotAllowedForReport_WithoutModel"));
                                break;

                              case "qnaNotSupported":
                                this.errorService.infoCustom(this.localizationService.get("VisualContainer_QnaVisual_NotSupportedTitle"), this.localizationService.get("VisualContainer_QnaVisual_NotSupportedMessage"));
                                break;

                              case "qnaNotEnabled":
                                this.qnaSupportabilityService.canAnyUserEnableQna() ? this.dialogService.showConfirmationDialog({
                                    title: this.localizationService.get("Qna_NotSupported_Title"),
                                    message: this.qnaSupportabilityService.modelHasQnaDisabledMessage,
                                    okButtonText: this.localizationService.get("Qna_MessageDialog_EnableQnaButtonText"),
                                    cancelButtonText: this.localizationService.get("Cancel_ButtonText")
                                }, {
                                    maxWidth: 500
                                }).afterClosed().pipe((0, first.P)()).subscribe(function(result) {
                                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                        return (0, tslib_es6.__generator)(this, function(_a) {
                                            switch (_a.label) {
                                              case 0:
                                                return 1 !== result ? [ 3, 3 ] : [ 4, this.qnaSupportabilityService.enableQna() ];

                                              case 1:
                                                return _a.sent(), [ 4, this.tryShowQnaPopout(achorElement, args) ];

                                              case 2:
                                                _a.sent(), _a.label = 3;

                                              case 3:
                                                return [ 2 ];
                                            }
                                        });
                                    });
                                }) : this.errorService.infoCustom(this.localizationService.get("Qna_NotSupported_Title"), this.qnaSupportabilityService.modelHasQnaDisabledMessage);
                                break;

                              default:
                                debug.fF.assertNever(isQnaAllowedInfo.disallowedReason);
                            }
                            _a.label = 6;

                          case 6:
                            return [ 2 ];
                        }
                    });
                });
            }, QnaLaunchService.prototype.ensureQnaSupportabilityService = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.qnaSupportabilityService ? [ 3, 2 ] : (_a = this, [ 4, this.lazyProvider.get(this.qnaProxyPathToken || "@powerbi/Qna/qnaweb.module#QnaWebModule", "qnaSupportabilityService") ]);

                          case 1:
                            _a.qnaSupportabilityService = _b.sent(), _b.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, QnaLaunchService;
        }(), QnaModelUtilsDesktopService = function() {
            function QnaModelUtilsDesktopService(qnaHostService) {
                this.qnaHostService = qnaHostService;
            }
            return QnaModelUtilsDesktopService.prototype.isDQOrLiveConnectToOnPrem = function(_modelInfo) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, Promise.resolve(this.qnaHostService.requiresConsentToQnaForLiveConnect()) ];
                    });
                });
            }, QnaModelUtilsDesktopService.\u0275fac = function(t) {
                return new (t || QnaModelUtilsDesktopService)(core["\u0275\u0275inject"](desktop_qna_service.r));
            }, QnaModelUtilsDesktopService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: QnaModelUtilsDesktopService,
                factory: QnaModelUtilsDesktopService.\u0275fac
            }), QnaModelUtilsDesktopService;
        }(), Subject = __webpack_require__(30794), QnaSupportabilityDesktopService = function() {
            function QnaSupportabilityDesktopService(qnaService, localizationService) {
                var _this = this;
                this.qnaService = qnaService, this.localizationService = localizationService, this.qnaSettingsChangedInternal = new Subject.xQ, 
                this.settingsChangedSubscription = this.qnaService.settingsChanged$.subscribe(function() {
                    return _this.qnaSettingsChangedInternal.next(!0);
                });
            }
            return QnaSupportabilityDesktopService.prototype.ngOnDestroy = function() {
                this.qnaSettingsChangedInternal.complete(), this.settingsChangedSubscription.unsubscribe();
            }, QnaSupportabilityDesktopService.prototype.appShouldHideQnaFeature = function() {
                return this.qnaService.appShouldHideQnaFeature();
            }, QnaSupportabilityDesktopService.prototype.modelSupportsQna = function(_schema, _explorationCapabilities) {
                return this.qnaService.modelSupportsQna();
            }, QnaSupportabilityDesktopService.prototype.modelHasQnaEnabled = function(_schema, _explorationCapabilities) {
                return this.qnaService.modelHasQnaEnabled();
            }, QnaSupportabilityDesktopService.prototype.modelSupportsNlToDax = function() {
                return this.qnaService.modelSupportsNlToDax();
            }, QnaSupportabilityDesktopService.prototype.getNlToDaxStatus = function() {
                return this.qnaService.getNlToDaxStatus();
            }, QnaSupportabilityDesktopService.prototype.canAnyUserEnableQna = function() {
                return !0;
            }, QnaSupportabilityDesktopService.prototype.canCurrentUserEnableQna = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, Promise.resolve(!0) ];
                    });
                });
            }, QnaSupportabilityDesktopService.prototype.enableQna = function() {
                return this.qnaService.setQnaEnabledForReport(!0);
            }, Object.defineProperty(QnaSupportabilityDesktopService.prototype, "qnaSettingsChanged$", {
                get: function() {
                    return this.qnaSettingsChangedInternal;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(QnaSupportabilityDesktopService.prototype, "modelHasQnaDisabledMessage", {
                get: function() {
                    return this.localizationService.get("Visual_Qna_IsNotEnabled_Desktop");
                },
                enumerable: !1,
                configurable: !0
            }), QnaSupportabilityDesktopService.prototype.allowsLinguisticSchemaEdit = function() {
                return this.qnaService.allowsLinguisticSchemaEdit();
            }, QnaSupportabilityDesktopService.\u0275fac = function(t) {
                return new (t || QnaSupportabilityDesktopService)(core["\u0275\u0275inject"](desktop_qna_service.r), core["\u0275\u0275inject"](localization_service.o));
            }, QnaSupportabilityDesktopService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: QnaSupportabilityDesktopService,
                factory: QnaSupportabilityDesktopService.\u0275fac
            }), QnaSupportabilityDesktopService;
        }(), common = __webpack_require__(77476), conceptual_schema_proxy_service = __webpack_require__(26898), error_service = __webpack_require__(81213), error_module = __webpack_require__(13052), exploration_navigation_service = __webpack_require__(39503), event_bridge_service = __webpack_require__(11494), data_sources_service = __webpack_require__(83008), exploration_capabilities_service = __webpack_require__(48145), form_factor_provider_service = __webpack_require__(17328), layout_authoring_service = __webpack_require__(63387), view_mode_state_service = __webpack_require__(77200), visual_authoring_service = __webpack_require__(66890), feature_switch_module = __webpack_require__(76521), qnaModelUtilsPath = __webpack_require__(65947), qnaProxyPath = __webpack_require__(12123), lazy_provider = __webpack_require__(57786), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), dialog_service = __webpack_require__(58938), UILibrary_module = __webpack_require__(94785), pbi_overlay_module = __webpack_require__(66972), InterpretCopilotTelemetryService = function() {
            function InterpretCopilotTelemetryService(certifiedEventsService) {
                this.certifiedEventsService = certifiedEventsService;
            }
            return InterpretCopilotTelemetryService.prototype.logInterpretWithCopilotEvent = function(host, isSignedIn, viewMode) {
                this.certifiedEventsService.logStandardizedFeatureEvent({
                    featureName: (0, src.mN)("Downstream", "Qna-Query"),
                    activityStatus: "Succeeded",
                    activityName: "Qna-Query",
                    resultCode: "",
                    correlationId: "",
                    activityAttributes: {
                        IsSignedIn: isSignedIn,
                        Location: "service" === host ? "Service" : "Desktop",
                        ContentMode: 0 === viewMode ? "View" : "Edit"
                    }
                });
            }, InterpretCopilotTelemetryService.\u0275fac = function(t) {
                return new (t || InterpretCopilotTelemetryService)(core["\u0275\u0275inject"](Telemetry.ly));
            }, InterpretCopilotTelemetryService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: InterpretCopilotTelemetryService,
                factory: InterpretCopilotTelemetryService.\u0275fac
            }), InterpretCopilotTelemetryService;
        }(), QnaDesktopModule = function() {
            function QnaDesktopModule() {}
            return QnaDesktopModule.\u0275fac = function(t) {
                return new (t || QnaDesktopModule);
            }, QnaDesktopModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: QnaDesktopModule
            }), QnaDesktopModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ event_bridge_service.J, InterpretProxyDesktopService, {
                    provide: qnaProxyPath.n,
                    useValue: "@powerbi/Qna/qnadesktop.module#QnaDesktopModule"
                }, {
                    provide: qnaModelUtilsPath.z,
                    useValue: "@powerbi/Qna/qnadesktop.module#QnaDesktopModule"
                }, QnaSupportabilityDesktopService, QnaModelUtilsDesktopService, {
                    provide: "InterpretServiceModern",
                    useFactory: createInterpretService,
                    deps: [ feature_switch_service.vZ, localization_service.o, Telemetry.y0, InterpretProxyDesktopService ]
                }, {
                    provide: "qnaLaunchService",
                    useFactory: createQnaLaunchService,
                    deps: [ conceptual_schema_proxy_service.i, data_sources_service.D, dialog_service.x, error_service.T, exploration_capabilities_service.U, exploration_navigation_service.z, form_factor_provider_service.F, layout_authoring_service.U, lazy_provider.E, localization_service.o, Telemetry.y0, view_mode_state_service.kc, visual_authoring_service.$8, qnaProxyPath.n ]
                }, {
                    provide: "qnaSupportabilityService",
                    useClass: QnaSupportabilityDesktopService
                }, {
                    provide: "qnaModelUtilsService",
                    useClass: QnaModelUtilsDesktopService
                }, {
                    provide: "interpretCopilotTelemetryService",
                    useClass: InterpretCopilotTelemetryService
                }, {
                    provide: ImproveLsdlProxyInjectionToken,
                    useClass: ImproveLsdlDesktopProxyService
                }, ImproveLsdlServiceProvider ],
                imports: [ common.CommonModule, error_module.T, feature_switch_module.A3, lazy_load_module.N, localization_module.v, pbi_overlay_module.N, Telemetry.e3, UILibrary_module.g, Qna_module.T ]
            }), QnaDesktopModule;
        }();
    },
    5894: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Nt: function() {
                return ImproveLsdlRequestEventName;
            },
            WW: function() {
                return QnaVisualSuggestionCardClicked;
            },
            dN: function() {
                return QnaVisualVisualConverted;
            },
            eV: function() {
                return QnAUpdateLsdlSharingPermission;
            },
            v5: function() {
                return QnAFeedback;
            },
            yP: function() {
                return QnAINAQ;
            },
            yp: function() {
                return ImproveLsdlRequestEvent;
            }
        });
        var _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41114), QnaVisualSuggestionCardClicked = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.QnaVisual.SuggestionCardClicked"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.QnaVisual.SuggestionCardClicked"), QnaVisualVisualConverted = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.QnaVisual.VisualConverted"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.QnaVisual.VisualConverted"), QnAINAQ = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.QnA.INAQ"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.QnA.INAQ", {
            logExpAssignment: !0
        }), QnAFeedback = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.QnA.Feedback"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.QnA.Feedback"), QnAUpdateLsdlSharingPermission = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.QnA.UpdateLsdlSharingPermission"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.QnA.UpdateLsdlSharingPermission"), ImproveLsdlRequestEventName = "PBI.QnaTooling.ImproveLsdlRequest", ImproveLsdlRequestEvent = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx[ImproveLsdlRequestEventName] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)(ImproveLsdlRequestEventName);
    },
    34100: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            J8: function() {
                return isFuzzyMatchingFeatureEnabled;
            },
            J_: function() {
                return isCopilotImprovelLsdlAgent;
            },
            NP: function() {
                return checkBaseSupportability;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _qna_supportability_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(91592);
        function checkBaseSupportability(conceptualSchemaProxy, dataSourcesService, explorationCapabilitiesService, qnaSupportabilityService, lsdl) {
            var _a;
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                var schema, capabilities;
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_b) {
                    switch (_b.label) {
                      case 0:
                        return [ 4, conceptualSchemaProxy.get(dataSourcesService.get()) ];

                      case 1:
                        return schema = _b.sent(), capabilities = explorationCapabilitiesService.getCapabilities(), 
                        (0, _qna_supportability_util__WEBPACK_IMPORTED_MODULE_1__.H)(capabilities, schema, qnaSupportabilityService).isAllowed && qnaSupportabilityService.allowsLinguisticSchemaEdit() && "None" !== (null === (_a = lsdl.DynamicImprovement) || void 0 === _a ? void 0 : _a.Schema) ? [ 2, !0 ] : [ 2, !1 ];
                    }
                });
            });
        }
        function isCopilotImprovelLsdlAgent(agents) {
            return _.includes(agents, "PowerBI.AzureOpenAISynonyms") || _.includes(agents, "PowerBI.AzureOpenAIPhrasings");
        }
        function isFuzzyMatchingFeatureEnabled(featureSwitches) {
            return featureSwitches.qnaImproveLsdlCopilot && featureSwitches.qnaSupportCommitQuestionOnDemandForAll && featureSwitches.qnaFuzzyMatch;
        }
    },
    91592: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            H: function() {
                return getIsQnaAllowedInfo;
            }
        });
        var _powerbi_legacy_JsCommon_Utility_BrowserUtility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16808);
        function getIsQnaAllowedInfo(explorationCapabilities, modelSchema, qnaSupportabilityService) {
            return (0, _powerbi_legacy_JsCommon_Utility_BrowserUtility__WEBPACK_IMPORTED_MODULE_0__.rO)() ? {
                isAllowed: !1,
                disallowedReason: "featureDisabledInIE"
            } : qnaSupportabilityService.appShouldHideQnaFeature() ? {
                isAllowed: !1,
                disallowedReason: "featureDisabledInApp"
            } : _.some(null == modelSchema ? void 0 : modelSchema.schemas, function(schema) {
                return !schema.isExtensionSchema && !_.isEmpty(schema.entities);
            }) ? qnaSupportabilityService.modelSupportsQna(modelSchema, explorationCapabilities) ? qnaSupportabilityService.modelHasQnaEnabled(modelSchema, explorationCapabilities) ? {
                isAllowed: !0
            } : {
                isAllowed: !1,
                disallowedReason: "qnaNotEnabled"
            } : {
                isAllowed: !1,
                disallowedReason: "qnaNotSupported"
            } : {
                isAllowed: !1,
                disallowedReason: "noModel"
            };
        }
    },
    35988: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            AU: function() {
                return getUserErrorMessage;
            },
            B4: function() {
                return wireV3ResponseToClientSuggestedQuestionsResponse;
            },
            C2: function() {
                return clientToWireModelScopes;
            },
            Cb: function() {
                return wireV3ResponseToClientProbeResponse;
            },
            Fm: function() {
                return getRetriableClientWarningDesktop;
            },
            NG: function() {
                return clientToWireInterpretRequestDesktop;
            },
            R1: function() {
                return wireV3ResponseToClientInterpretResponse;
            },
            Tm: function() {
                return getUserWarningMessageKeys;
            },
            hj: function() {
                return hostServiceErrorCodeToQnaErrorCode;
            },
            qV: function() {
                return getRetriableClientWarningDesktopToWeb;
            },
            tc: function() {
                return clientToWireInterpretRequestDesktopToWeb;
            },
            vr: function() {
                return getQueryUnSupportedLevelWarningsInfo;
            }
        });
        var _a, _b, _c, _d, _e, _f, _powerbi_Insights__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(70940), _powerbi_legacy_Data_services_serialization_semanticQuerySerializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3468), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43286), _powerbi_legacy_PowerBIVisuals_VisualsData_types_valueType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(80777), interpretDiagnosticCodeToInterpretWarningMappings = ((_a = {}).GeneratedLinguisticSchema = 0, 
        _a.DataIndexBuildingCancelled = 16, _a.DataIndexMissingStatistics = 17, _a.DataIndexNotReady = 8, 
        _a.DataIndexSizeLimitReached = 15, _a.DataIndexUpdateFailure = 10, _a.DomainModelNotReady = 2, 
        _a.DomainModelPartialLoad = 3, _a.DomainModelUpdateFailure = 9, _a.EmptyLinguisticSchema = 1, 
        _a.InterpretationSemanticError = 4, _a.InterpretationSemanticWarning = 5, _a.InterpretCancelled = 18, 
        _a.InvalidTextualEntity = 6, _a.LinguisticSchemaTruncated = 14, _a.MissingOrInvalidPodParameters = 13, 
        _a.QueryAggregateNotSupported = 19, _a.QueryMedianNotSupported = 20, _a.QueryPercentileNotSupported = 21, 
        _a.QueryScopedEvalNotSupported = 22, _a.QuerySubqueryRegroupingNotSupported = 23, 
        _a.StaleDataIndex = 12, _a.StaleDomainModel = 11, _a.RequiresNewerVersion = 7, _a.DataIndexVersionIsOld = 24, 
        _a.QueryGroupByTableNotSupported = 25, _a.QueryNotSupported = 26, _a.NextBestInterpretation = 27, 
        _a), interpretDiagnosticCodeToQnaErrorCodeMappings = ((_b = {}).ActivationFailure = "ActivationFailure", 
        _b.CloudRlsModelAccessDenied = "CloudRlsModelAccessDenied", _b.DataIndexBuildFailure = "DataIndexBuildFailure", 
        _b.DomainModelLoadFailure = "DomainModelLoadFailure", _b.ExternalModelAccessDenied = "ExternalModelAccessDenied", 
        _b.GenericRequestFailure = "GenericRequestFailure", _b.LinguisticSchemaLoadFailure = "LinguisticSchemaLoadFailure", 
        _b.ModelNotFound = "ModelNotFound", _b.ModelQnaNotEnabled = "ModelQnaNotEnabled", 
        _b.ModelQnaNotSupported = "ModelQnaNotSupported", _b.RequiresNewerVersion = "RequiresNewerVersion", 
        _b.SchemaLanguageNotSupported = "SchemaLanguageNotSupported", _b.MissingRuntimeModule = "MissingRuntimeModule", 
        _b.VerifyRuntimeFailure = "VerifyRuntimeFailure", _b.DataIndexMissingAllStatistics = "DataIndexMissingAllStatistics", 
        _b), hostSpecificInterpretWarningToUserMessageKeyMappings_Desktop = ((_c = {})[16] = "Qna_Warning_DataIndexIncomplete_Desktop", 
        _c[15] = "Qna_Warning_DataIndexIncomplete_Desktop", _c[14] = "Qna_Warning_LinguisticSchemaTruncated_Desktop", 
        _c), hostSpecificInterpretWarningToUserMessageKeyMappings_Service = ((_d = {})[16] = "Qna_Warning_DataIndexIncomplete_Service", 
        _d[15] = "Qna_Warning_DataIndexIncomplete_Service", _d[14] = "Qna_Warning_LinguisticSchemaTruncated_Service", 
        _d), retriableClientWarnings_Desktop = [ 2, 8, 11, 12, 24 ], retriableClientWarnings_Service = [ 2, 8 ], interpretWarningToUserMessageKeyMappings = ((_e = {})[1] = "Qna_NotAllowedForReport_WithoutModel", 
        _e[2] = "Qna_Explore_WarningBuildingLanguageModel", _e[7] = "Qna_Warning_RequiresNewerVersion", 
        _e[8] = "Qna_Explore_WarningIndexing", _e[9] = "Qna_Warning_ModelUpdateFailure", 
        _e[10] = "Qna_Warning_DataIndexUpdateFailure", _e[11] = "Qna_Warning_StaleModel", 
        _e[12] = "Qna_Warning_StaleIndex", _e[17] = "Qna_Warning_DataIndexMissingStatistics", 
        _e[19] = "Qna_Warning_UnsupportedFunction", _e[20] = "Qna_Warning_UnsupportedFunction", 
        _e[21] = "Qna_Warning_UnsupportedFunction", _e[22] = "Qna_Warning_UnsupportedFunction", 
        _e[23] = "Qna_Warning_UnsupportedFunction", _e[25] = "Qna_Warning_QueryGroupByTableNotSupported", 
        _e[26] = "Qna_Warning_QueryNotSupported", _e[27] = "Qna_Warning_NextBestInterpretation", 
        _e), qnaErrorCodeToUserMessageKeyMappings = ((_f = {}).FeatureNotAvailable = "Qna_Error_GenericRequestFailure", 
        _f.NetworkConnectionIssue = "Qna_Error_NetworkIssue", _f.RequiresNewerVersion = "Qna_Error_RequiresNewerVersion", 
        _f.ModelNotFound = "Qna_Error_ModelNotFound", _f.ModelQnaNotEnabled = "Qna_Error_ModelQnaNotEnabled", 
        _f.ModelQnaNotSupported = "Qna_Error_ModelQnaNotSupported", _f.MissingRuntimeModule = "Qna_Explore_MissingBinaries", 
        _f.VerifyRuntimeFailure = "Qna_Explore_MissingBinaries", _f.SchemaLanguageNotSupported = "Qna_NotAllowedForReport_QnaNotSupported", 
        _f.SessionIsInactive = "Qna_Error_GenericRequestFailure", _f.GenericRequestFailure = "Qna_Error_GenericRequestFailure", 
        _f.DataIndexBuildFailure = "Qna_Explore_WarningFailedIndexing", _f.CloudRlsModelAccessDenied = "Tile_RLS_NoAccess", 
        _f.ExternalModelAccessDenied = "Qna_Explore_ModelAccessDenied_WithoutSpecifyOwner", 
        _f.DataIndexMissingAllStatistics = "Qna_Error_DataIndexMissingAllStatistics", _f), queryUnSupportedLevelWarnings = [ 19, 20, 22, 21, 23, 25, 26 ];
        function wireV3ResponseToClientSuggestedQuestionsResponse(wireV3Response) {
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireV3Response, "Expect the given wireV3Response to be defined");
            var clientError = getClientErrorFromWireV3Response(wireV3Response);
            if (clientError) return {
                error: clientError
            };
            var wireResult = _.first(wireV3Response.Results), interpretation = _.first(null == wireResult ? void 0 : wireResult.Interpretations);
            return {
                result: {
                    utterances: _.map(null == interpretation ? void 0 : interpretation.SuggestedUtterances, function(utterance) {
                        return {
                            text: utterance.Text,
                            source: utterance.Source
                        };
                    }),
                    warnings: wireV3InterpretDiagnosticMessageToClientWarnings(null == wireResult ? void 0 : wireResult.DiagnosticMessages)
                }
            };
        }
        function wireV3ResponseToClientInterpretResponse(utterance, desiredInterpretationsCount, requestId, wireV3Response) {
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireV3Response, "Expect the given wireV3Response to be defined");
            var clientResult, warnings, clientError = getClientErrorFromWireV3Response(wireV3Response);
            if (!clientError) {
                var firstWireResult_1 = _.first(wireV3Response.Results);
                warnings = wireV3InterpretDiagnosticMessageToClientWarnings(null == firstWireResult_1 ? void 0 : firstWireResult_1.DiagnosticMessages);
                var interpretations = _.take(null == firstWireResult_1 ? void 0 : firstWireResult_1.Interpretations, null != desiredInterpretationsCount ? desiredInterpretationsCount : 1);
                _.isEmpty(interpretations) || (clientResult = _.map(interpretations, function(interpretation) {
                    var _a, _b, _c;
                    return {
                        restatement: interpretation.Restatement,
                        databaseName: null === (_a = firstWireResult_1.Context) || void 0 === _a ? void 0 : _a.DatabaseName,
                        virtualServerName: null === (_b = firstWireResult_1.Context) || void 0 === _b ? void 0 : _b.VirtualServerName,
                        command: wireToClientCommand(interpretation.Command),
                        correctionInfo: generateUtteranceCorrectionInfo(interpretation),
                        spans: wireToClientSpanCollection(utterance, interpretation.Spans),
                        language: firstWireResult_1.Language,
                        modelLanguage: firstWireResult_1.ModelLanguage,
                        modelOwner: null === (_c = firstWireResult_1.Context) || void 0 === _c ? void 0 : _c.ModelOwner,
                        usedAgents: _.map(interpretation.UsedAgents, function(a) {
                            return a;
                        }),
                        score: interpretation.Score,
                        relevantSchemaElements: convertWireSchemaElementsToClientSchemaElements(firstWireResult_1.RelevantSchemaElements)
                    };
                }));
            }
            return {
                utterance,
                requestId,
                error: clientError,
                results: clientResult,
                warnings
            };
        }
        function convertWireSchemaElementsToClientSchemaElements(wireSchemaElements) {
            if (null != wireSchemaElements && (null != wireSchemaElements.Entities || null != wireSchemaElements.Relationships)) {
                var converter = function(wire) {
                    return {
                        description: wire.Description,
                        score: wire.Score
                    };
                };
                return {
                    entities: _.map(wireSchemaElements.Entities, converter),
                    relationships: _.map(wireSchemaElements.Relationships, converter)
                };
            }
        }
        function wireV3ResponseToClientProbeResponse(wireV3Response) {
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireV3Response, "Expect the given wireV3Response to be defined");
            var clientError = getClientErrorFromWireV3Response(wireV3Response);
            if (clientError) return {
                error: clientError
            };
            var firstWireResult = _.first(wireV3Response.Results);
            return {
                results: _.map(null == firstWireResult ? void 0 : firstWireResult.Interpretations, function(_interpretation) {
                    return {
                        language: firstWireResult.Language
                    };
                })
            };
        }
        function getWireV3ResponseClientWarnings(wireV3Response) {
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireV3Response, "Expect the given wireV3Response to be defined");
            var firstWireResult = _.first(wireV3Response.Results);
            return wireV3InterpretDiagnosticMessageToClientWarnings(null == firstWireResult ? void 0 : firstWireResult.DiagnosticMessages);
        }
        function getRetriableClientWarningDesktop(wireResponse) {
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireResponse, "Expect the given wireResponse to be defined");
            var warnings = getWireV3ResponseClientWarnings(wireResponse);
            return _.find(retriableClientWarnings_Desktop, function(retryClientWarning) {
                return _.includes(warnings, retryClientWarning);
            });
        }
        function getRetriableClientWarningDesktopToWeb(wireResponse) {
            return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireResponse, "Expect the given wireResponse to be defined"), 
            function(wireResponse) {
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireResponse, "Expect the given wireResponse to be defined");
                var warnings = getWireV3ResponseClientWarnings(wireResponse);
                return _.find(retriableClientWarnings_Service, function(retryClientWarning) {
                    return _.includes(warnings, retryClientWarning);
                });
            }(wireResponse);
        }
        function wireToClientSpanCollection(utterance, wireSpans) {
            if (_powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(utterance, "utterance"), 
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertAnyValue(wireSpans, "wireSpans"), 
            wireSpans) {
                _.isEmpty(utterance) && _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return _.every(wireSpans, function(wireSpan) {
                        return 0 === wireSpan.Length;
                    });
                }, "utterance is empty, every span should have zero length");
                var baseSpans = [], overlapSpans = [];
                return _.forEach(wireSpans, function(wireSpan) {
                    5 !== wireSpan.Resolution || wireSpan.Binding ? baseSpans.push(new SpanInternal(utterance, wireSpan, !1)) : overlapSpans.push(new SpanInternal(utterance, wireSpan, !0));
                }), _.isEmpty(overlapSpans) || _.forEach(overlapSpans, function(overlapSpan) {
                    _.forEach(baseSpans, function(baseSpan) {
                        if (function(span, overlapSpan) {
                            return overlapSpan.startIndex <= span.startIndex && overlapSpan.endExcludingIndex > span.startIndex || overlapSpan.startIndex < span.endExcludingIndex && overlapSpan.endExcludingIndex > span.endExcludingIndex || span.startIndex <= overlapSpan.startIndex && span.endExcludingIndex >= overlapSpan.endExcludingIndex || overlapSpan.startIndex <= span.startIndex && overlapSpan.endExcludingIndex >= span.endExcludingIndex;
                        }(baseSpan, overlapSpan)) baseSpan.overlapSpans.push(overlapSpan); else if (overlapSpan.endExcludingIndex < baseSpan.startIndex) return;
                    });
                }), baseSpans;
            }
        }
        function hostServiceErrorCodeToQnaErrorCode(errorCode) {
            return "BadGateway" === errorCode || "ConnectFailure" === errorCode || "ConnectionClosed" === errorCode || "GatewayTimeout" === errorCode || "KeepAliveFailure" === errorCode || "NameResolutionFailure" === errorCode || "NetworkUnavailable" === errorCode || "ProxyAuthenticationRequired" === errorCode || "ProxyNameResolutionFailure" === errorCode || "RequestTimeout" === errorCode || "ServiceUnvailable" === errorCode || "Timeout" === errorCode || "AccessDenied" === errorCode ? "NetworkConnectionIssue" : "FeatureNotAvailableError" === errorCode ? "FeatureNotAvailable" : "GenericRequestFailure";
        }
        function clientToWireInterpretRequestDesktop(request) {
            var clientContract, wireRequest = clientToWireInterpretRequestCommon(request);
            return request && (wireRequest.Context = {
                ReportMetadata: (clientContract = request.reportMetadata, clientContract ? {
                    LinguisticSchema: clientContract.linguisticSchema,
                    Pods: _.map(clientContract.pods, function(p) {
                        return {
                            Name: p.name,
                            CortanaEnabled: p.cortanaEnabled,
                            Parameters: _.map(p.parameters, function(param) {
                                return {
                                    Name: param.name,
                                    TargetColumn: param.targetColumn,
                                    TargetEntity: param.targetEntity
                                };
                            })
                        };
                    })
                } : void 0)
            }), wireRequest;
        }
        function clientToWireInterpretRequestDesktopToWeb(request, virtualServerName, databaseName) {
            var feedback, wireRequest = clientToWireInterpretRequestCommon(request);
            return wireRequest.Context = {
                ModelScopes: [ {
                    VirtualServerName: virtualServerName,
                    DatabaseName: databaseName
                } ],
                Tags: null == request ? void 0 : request.tags,
                ImpersonatedUserPrincipalName: null == request ? void 0 : request.impersonatedUserPrincipalName,
                ImpersonatedRoles: null == request ? void 0 : request.impersonatedRoles,
                Feedback: (feedback = null == request ? void 0 : request.feedback, feedback ? {
                    Sentiment: feedback.sentiment,
                    Reason: feedback.reason,
                    Comment: feedback.comment
                } : void 0)
            }, wireRequest.Options || (wireRequest.Options = {}), wireRequest;
        }
        function clientToWireInterpretRequestCommon(request) {
            return request ? {
                Version: "3.3.0",
                Utterance: request.utterance,
                Spans: _.map(request.spans, function(span) {
                    var wireSpan = {
                        StartIndex: span.startIndex,
                        Length: span.endExcludingIndex - span.startIndex
                    };
                    return span.inferredTerm && (wireSpan.Binding = {
                        InferredTerm: clientToWireInferredTermBinding(span.inferredTerm)
                    }), wireSpan;
                }),
                Options: clientToWireInterpretRequestOptions(request),
                LinguisticSchemaJson: request.linguisticSchemaJson,
                InferredTermBinding: clientToWireInferredTermBinding(request.inferredTermBinding),
                Intent: clientToWireIntent(request.intent),
                IsCommitted: request.isCommitted,
                DesiredInterpretationsCount: request.desiredInterpretationsCount,
                GroupId: request.groupId,
                GroupSequenceNumber: request.groupSequenceNumber
            } : {
                Version: "3.3.0",
                Utterance: ""
            };
        }
        function clientToWireIntent(intentContainer) {
            if (null == intentContainer ? void 0 : intentContainer.defineCalculation) return {
                DefineCalculation: {
                    Language: intentContainer.defineCalculation.language,
                    Options: intentContainer.defineCalculation.options
                }
            };
        }
        function clientToWireInterpretRequestOptions(request) {
            return null == (null == request ? void 0 : request.options) ? {} : {
                QueryMetadata: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 2),
                VisualConfiguration: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 4),
                SupportPodQueries: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 8),
                IncludeRelevantSchemaElements: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 32),
                Spans: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 64),
                Diagnostics: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 128),
                FrameTree: !1,
                AllowFollowUpQuestion: !1,
                AllowInsightQueries: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 512),
                InferUnknownModelTerms: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 4096),
                AllowPlaceholderSuggestions: !1,
                SuggestFollowUp: !1,
                SuggestedUtterances: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 2048),
                SkipCompletion: request.skipCompletion,
                SingleAnswerBias: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 8192),
                SuggestedDefineCalculationUtterances: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 16384),
                UseLlmParser: (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_StandaloneUtility3__WEBPACK_IMPORTED_MODULE_1__.yE)(request.options, 65536)
            };
        }
        function clientToWireModelScopes(scopes) {
            return _.map(scopes, function(scope) {
                var _a, _b;
                return {
                    VirtualServerName: null === (_a = scope.model) || void 0 === _a ? void 0 : _a.vsName,
                    DatabaseName: null === (_b = scope.model) || void 0 === _b ? void 0 : _b.dbName,
                    ReportIds: scope.reportIds
                };
            });
        }
        function getQueryUnSupportedLevelWarningsInfo(warnings) {
            if (_.indexOf(warnings, 27) >= 0) return [];
            var specialWarnings = _.intersection(warnings, queryUnSupportedLevelWarnings);
            return _.map(specialWarnings, function(specialWarning) {
                return {
                    warning: specialWarning,
                    messageKey: interpretWarningToUserMessageKeyMappings[specialWarning]
                };
            });
        }
        function getUserWarningMessageKeys(warnings, qnaProxyPath) {
            if (!_.isEmpty(warnings)) {
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return !_.isEmpty(qnaProxyPath);
                }, "Must provide a valid qnaProxyPath");
                for (var userMessages = [], hostSpecificWarningToUserMessageMappings = "@powerbi/Qna/qnadesktop.module#QnaDesktopModule" === qnaProxyPath ? hostSpecificInterpretWarningToUserMessageKeyMappings_Desktop : hostSpecificInterpretWarningToUserMessageKeyMappings_Service, _i = 0, warnings_1 = warnings; _i < warnings_1.length; _i++) {
                    var warning = warnings_1[_i];
                    if (hostSpecificWarningToUserMessageMappings) {
                        var hostSpecificUserMessage = hostSpecificWarningToUserMessageMappings[warning];
                        if (hostSpecificUserMessage) {
                            userMessages.push(hostSpecificUserMessage);
                            continue;
                        }
                    }
                    var hostIndependantUserMessage = interpretWarningToUserMessageKeyMappings[warning];
                    hostIndependantUserMessage && userMessages.push(hostIndependantUserMessage);
                }
                return _.uniq(userMessages);
            }
        }
        function getUserErrorMessage(errorCode, localizationService) {
            return localizationService.get(qnaErrorCodeToUserMessageKeyMappings[errorCode] || "Qna_Error_GenericRequestFailure");
        }
        function getClientErrorFromWireV3Response(wireV3Response) {
            var errorLevelDiagnosticCode, errorLevelDiagnosticMessage;
            if (_powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(wireV3Response, "Expect the given wireV3Response to be defined"), 
            "3.3.0" !== wireV3Response.Version) errorLevelDiagnosticCode = "RequiresNewerVersion"; else {
                var firstWireResult = _.first(wireV3Response.Results);
                if (!firstWireResult) return;
                errorLevelDiagnosticCode = null == (errorLevelDiagnosticMessage = _.find(firstWireResult.DiagnosticMessages, function(msg) {
                    return 1 === msg.Severity;
                })) ? void 0 : errorLevelDiagnosticMessage.Code;
            }
            if (null != errorLevelDiagnosticCode) {
                var qnaErrorCode = function(diagnosticCode) {
                    var qnaErrorCode = interpretDiagnosticCodeToQnaErrorCodeMappings[diagnosticCode];
                    return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                        return null != qnaErrorCode;
                    }, "InterpretDiagnosticCodeToQnaErrorCodeMappings should contain key " + diagnosticCode), 
                    qnaErrorCode || (qnaErrorCode = "NoClientHandling"), qnaErrorCode;
                }(errorLevelDiagnosticCode), qnaError = {
                    errorCode: qnaErrorCode,
                    source: "GenericRequestFailure" === qnaErrorCode ? "PowerBI" : "User",
                    message: null == errorLevelDiagnosticMessage ? void 0 : errorLevelDiagnosticMessage.Message,
                    stackTrace: null == errorLevelDiagnosticMessage ? void 0 : errorLevelDiagnosticMessage.StackTrace
                };
                return "NoClientHandling" === qnaError.errorCode && (qnaError.message = _.isEmpty(qnaError.message) ? errorLevelDiagnosticCode + "." : errorLevelDiagnosticCode + ". " + qnaError.message), 
                qnaError;
            }
        }
        function wireV3InterpretDiagnosticMessageToClientWarnings(diagnosticMessages) {
            if (!_.isEmpty(diagnosticMessages)) {
                for (var warningsResult = [], _loop_1 = function(warning) {
                    _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                        return null != interpretDiagnosticCodeToInterpretWarningMappings[warning.Code];
                    }, 'unknown mapping to convert InterpretDiagnosticMessage "' + warning.Code + '" to client interpret warning code'), 
                    interpretDiagnosticCodeToInterpretWarningMappings[warning.Code] && warningsResult.push(interpretDiagnosticCodeToInterpretWarningMappings[warning.Code]);
                }, _i = 0, warnings_2 = diagnosticMessages.filter(function(m) {
                    return 2 === m.Severity;
                }); _i < warnings_2.length; _i++) _loop_1(warnings_2[_i]);
                return warningsResult;
            }
        }
        var SpanInternal = function() {
            return function(utterance, wireSpan, isOverlappingSpan) {
                var spanText, spanStartIndex;
                this.utterance = utterance, this.wireSpan = wireSpan, this.isOverlappingSpan = isOverlappingSpan, 
                this.startIndex = wireSpan.StartIndex, this.endExcludingIndex = wireSpan.StartIndex + wireSpan.Length, 
                this.text = utterance.substr(wireSpan.StartIndex, wireSpan.Length), this.correctedStartIndex = wireSpan.CorrectedStartIndex, 
                this.correctedEndExcludingIndex = null != wireSpan.CorrectedStartIndex ? wireSpan.CorrectedStartIndex + wireSpan.CorrectedLength : void 0, 
                this.resolution = wireSpan.Resolution, this.isOverlapping = isOverlappingSpan, this.tokens = (spanText = this.text, 
                spanStartIndex = this.startIndex, _.map(wireSpan.Tokens, function(wireToken) {
                    var tokenStartIndexInSpan = wireToken.StartIndex - spanStartIndex;
                    return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                        return _.inRange(tokenStartIndexInSpan, 0, _.size(spanText));
                    }, "Expect each token.StartIndex is a valid index with the given spanText and spanStartIndex"), 
                    _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                        return !_.isEmpty(_.trim(spanText.substr(tokenStartIndexInSpan, wireToken.Length)));
                    }, "Expect no WireToken being pure space"), {
                        startIndex: wireToken.StartIndex,
                        endExcludingIndex: wireToken.StartIndex + wireToken.Length,
                        text: spanText.substr(tokenStartIndexInSpan, wireToken.Length)
                    };
                }));
                var bindingWithCorrected = wireToClientBindingInfo(this.text, wireSpan.Binding);
                this.binding = bindingWithCorrected && bindingWithCorrected.bindingInfo, this.isCorrected = !(!this.binding || !bindingWithCorrected.isCorrected);
                var alternateBindings = wireToClientBindingInfoCollection(this.text, wireSpan.AlternateBindings), phraseCompletions = wireToClientBindingInfoCollection(this.text, wireSpan.PhraseCompletions), phraseExtensions = wireToClientBindingInfoCollection(this.text, wireSpan.PhraseExtensions), suggestedReplacements = wireToClientBindingInfoCollection(this.text, wireSpan.SuggestedReplacements);
                _.isEmpty(alternateBindings) && _.isEmpty(phraseCompletions) && _.isEmpty(phraseExtensions) && _.isEmpty(suggestedReplacements) || (this.replacementBindings = {
                    alternates: alternateBindings,
                    phraseCompletions,
                    phraseExtensions,
                    suggestedReplacements
                }), this.inferredTermBindings = _.map(wireSpan.InferredTermBindings, function(wireContractInferredBinding) {
                    return {
                        inferredBindingType: (wireContract = wireContractInferredBinding.InferredTerm).Type,
                        definitionPrompt: wireContract.DefinitionPrompt,
                        definitionText: wireContract.DefinitionText,
                        prefixText: wireContract.PrefixText,
                        suffixText: wireContract.SuffixText,
                        hintText: wireContract.HintText,
                        alternateDefinitionTexts: wireContract.AlternateDefinitionTexts,
                        linguisticSchemaItems: wireContract.LinguisticSchemaItems,
                        definedTerm: wireContract.DefinedTerm,
                        targetRole: wireContract.TargetRole,
                        metadata: wireContract.Metadata
                    };
                    var wireContract;
                }), this.inferredTermBindingsUnsupported = wireSpan.InferredTermBindingsUnsupported, 
                this.hasBinding = null != this.binding || null != this.replacementBindings || !_.isEmpty(this.inferredTermBindings), 
                this.isWhiteSpace = !_.isEmpty(this.text) && _.isEmpty(_.trim(this.text)), this.isUsed = !this.isOverlapping && (null == this.resolution || 0 === this.resolution || 4 === this.resolution), 
                this.isUnknown = 3 === this.resolution, this.isInferred = 4 === this.resolution, 
                this.overlapSpans = [];
                var definedWithOptions = !this.isOverlapping && !_.isEmpty(this.text) && !isCoreTermAndShouldNotIndicateOptions(this) && !isPhrasingBindingAndShouldNotIndicateOptions(this) && !isSpanUndefinedWithOptions(this) && this.hasBinding && this.isUsed, undefinedWithOptions = isSpanUndefinedWithOptions(this);
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return !(definedWithOptions && undefinedWithOptions);
                }, "A span can not be definedWithOptions and undefinedWithOptions at the same time."), 
                this.state = definedWithOptions ? "accepted" : undefinedWithOptions && this.isUsed ? "warning" : undefinedWithOptions ? "error" : "none";
            };
        }();
        function wireToClientCommand(wireCommand) {
            if (wireCommand) {
                var commandSemanticQuery = wireCommand.Query ? _powerbi_legacy_Data_services_serialization_semanticQuerySerializer__WEBPACK_IMPORTED_MODULE_2__.ib.deserializeQuery(wireCommand.Query) : void 0;
                return {
                    query: commandSemanticQuery,
                    queryMetadata: wireToClientQueryMetaData(commandSemanticQuery, wireCommand.QueryMetadata),
                    data: wireCommand.Data,
                    binding: wireCommand.Binding,
                    visualConfigurations: _.map(wireCommand.VisualConfigurations, function(visualConfig) {
                        var visualConfigSemanticQuery = visualConfig.Query ? _powerbi_legacy_Data_services_serialization_semanticQuerySerializer__WEBPACK_IMPORTED_MODULE_2__.ib.deserializeQuery(visualConfig.Query) : void 0;
                        return {
                            visualizationType: visualConfig.VisualizationType,
                            dataShapeBinding: visualConfig.DataShapeBinding,
                            visualElements: visualConfig.VisualElements,
                            query: visualConfigSemanticQuery,
                            queryMetadata: wireToClientQueryMetaData(commandSemanticQuery, visualConfig.QueryMetadata)
                        };
                    }),
                    suggestedVisualTypes: _.map(wireCommand.SuggestedVisualizations, function(suggestedVisual) {
                        return (0, _powerbi_Insights__WEBPACK_IMPORTED_MODULE_3__.s)(suggestedVisual.VisualizationType).name;
                    }),
                    linguisticSchemaJson: wireCommand.LinguisticSchemaJson,
                    linguisticSchemaItems: wireCommand.LinguisticSchemaItems,
                    inferredTermMetadata: wireCommand.InferredTermMetadata,
                    defineCalculation: wireToClientDefineCalculation(wireCommand.DefineCalculation)
                };
            }
        }
        function wireToClientDefineCalculation(wireDefineCalculation) {
            if (wireDefineCalculation) return {
                expression: wireDefineCalculation.Expression,
                homeTable: wireDefineCalculation.HomeTable,
                format: wireDefineCalculation.Format
            };
        }
        function wireToClientQueryMetaData(query, wireQnaQueryMetadata) {
            if (query && wireQnaQueryMetadata) {
                var wireFilters = _.filter(wireQnaQueryMetadata.Filters, function(f) {
                    return !!f;
                }), wireSelects = _.filter(wireQnaQueryMetadata.Select, function(s) {
                    return !!s;
                });
                return {
                    filters: _.map(wireFilters, function(f) {
                        return {
                            Restatement: f.Restatement,
                            type: void 0
                        };
                    }),
                    selects: _.map(wireSelects, function(s) {
                        return {
                            restatement: s.Restatement,
                            valueType: convertSemanticTypeToValueType(s.DefaultLabel ? s.DefaultLabel.SemanticType : s.SemanticType),
                            isGroup: s.IsGroup,
                            defaultLabel: s.DefaultLabel ? createStandaloneDefaultLabel(s.DefaultLabel.Expression, query) : void 0,
                            isExplicitSortBy: s.IsExplicitSortBy
                        };
                    })
                };
            }
        }
        function isCoreTermAndShouldNotIndicateOptions(span) {
            var _a, _b;
            return 7 === (null === (_a = span.binding) || void 0 === _a ? void 0 : _a.type) && !span.isCorrected && _.isEmpty(null === (_b = span.replacementBindings) || void 0 === _b ? void 0 : _b.suggestedReplacements) && _.isEmpty(span.inferredTermBindings);
        }
        function isPhrasingBindingAndShouldNotIndicateOptions(span) {
            var _a, _b;
            return 8 === (null === (_a = span.binding) || void 0 === _a ? void 0 : _a.type) && !span.isCorrected && 2 === span.resolution && _.isEmpty(null === (_b = span.replacementBindings) || void 0 === _b ? void 0 : _b.suggestedReplacements) && _.isEmpty(span.inferredTermBindings);
        }
        function isSpanUndefinedWithOptions(span) {
            return !(span.isOverlapping || _.isEmpty(span.text) || isCoreTermAndShouldNotIndicateOptions(span) || isPhrasingBindingAndShouldNotIndicateOptions(span) || !span.isCorrected && 3 !== span.resolution && (!span.hasBinding || span.isUsed));
        }
        function wireToClientBindingInfo(spanText, wireBindingContainer) {
            if (wireBindingContainer && !wireBindingContainer.InferredTerm) {
                var wireBinding, bindingType;
                if (wireBindingContainer.Table) wireBinding = wireBindingContainer.Table, bindingType = 0; else if (wireBindingContainer.Pod) wireBinding = wireBindingContainer.Pod, 
                bindingType = 1; else if (wireBindingContainer.Property) wireBinding = wireBindingContainer.Property, 
                bindingType = 2; else if (wireBindingContainer.Value) wireBinding = wireBindingContainer.Value, 
                bindingType = 3; else if (wireBindingContainer.Range) wireBinding = wireBindingContainer.Range, 
                bindingType = 4; else if (wireBindingContainer.VisType) wireBinding = wireBindingContainer.VisType, 
                bindingType = 5; else if (wireBindingContainer.Composite) wireBinding = wireBindingContainer.Composite, 
                bindingType = 6; else if (wireBindingContainer.Core) wireBinding = wireBindingContainer.Core, 
                bindingType = 7; else if (wireBindingContainer.Phrasing) wireBinding = wireBindingContainer.Phrasing, 
                bindingType = 8; else if (wireBindingContainer.TextualEntity) wireBinding = wireBindingContainer.TextualEntity, 
                bindingType = 9; else {
                    if (!wireBindingContainer.AnyEntity) {
                        var unhandledBindingAny_1 = wireBindingContainer;
                        return void _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                            return !!unhandledBindingAny_1.Literal;
                        }, "Has binding type that is unhandled by client right now. Known unhandled types are: [Literal] and this is not a known type. Check to either update the known unhandled type list, or handle it on the client side.");
                    }
                    wireBinding = wireBindingContainer.AnyEntity, bindingType = 10;
                }
                return {
                    bindingInfo: {
                        type: bindingType,
                        text: wireBinding.Text,
                        textSegmentsWithMatchInfo: generateTextSegmentsWithMatchInfo(spanText, wireBinding.Text, wireBinding.MatchedSegments),
                        matchType: wireBinding.MatchType,
                        score: wireBinding.Score
                    },
                    isCorrected: wireBinding.Corrected
                };
            }
        }
        function generateTextSegmentsWithMatchInfo(spanText, bindingText, matchedSegments) {
            if (_.isEmpty(spanText) || _.isEmpty(matchedSegments)) return [ {
                text: bindingText,
                isMatched: !1
            } ];
            for (var resultSegments = [], currentIndex = 0, _i = 0, matchedSegments_1 = matchedSegments; _i < matchedSegments_1.length; _i++) {
                var segment = matchedSegments_1[_i];
                currentIndex < segment.StartIndex && resultSegments.push({
                    text: bindingText.substring(currentIndex, segment.StartIndex),
                    isMatched: !1
                }), resultSegments.push({
                    text: bindingText.substr(segment.StartIndex, segment.Length),
                    isMatched: !0
                }), currentIndex = segment.StartIndex + segment.Length;
            }
            return currentIndex < _.size(bindingText) && resultSegments.push({
                text: bindingText.substring(currentIndex),
                isMatched: !1
            }), resultSegments;
        }
        function wireToClientBindingInfoCollection(spanText, wireContractBindingContainers) {
            if (wireContractBindingContainers) {
                for (var convertedCollection = [], _i = 0, wireContractBindingContainers_1 = wireContractBindingContainers; _i < wireContractBindingContainers_1.length; _i++) {
                    var bindingInfoWithCorrected = wireToClientBindingInfo(spanText, wireContractBindingContainers_1[_i]);
                    bindingInfoWithCorrected && convertedCollection.push(bindingInfoWithCorrected.bindingInfo);
                }
                return convertedCollection;
            }
        }
        function clientToWireInferredTermBinding(clientContract) {
            return null == clientContract ? void 0 : {
                Type: clientContract.inferredBindingType,
                DefinitionPrompt: clientContract.definitionPrompt,
                DefinitionText: clientContract.definitionText,
                PrefixText: clientContract.prefixText,
                SuffixText: clientContract.suffixText,
                HintText: clientContract.hintText,
                AlternateDefinitionTexts: clientContract.alternateDefinitionTexts,
                LinguisticSchemaItems: clientContract.linguisticSchemaItems,
                DefinedTerm: clientContract.definedTerm,
                TargetRole: clientContract.targetRole,
                Metadata: clientContract.metadata
            };
        }
        function generateUtteranceCorrectionInfo(result) {
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(result, "result");
            var wireCorrectedTextSegments, correctedUtterance = result.CorrectedUtterance;
            if (!_.isEmpty(correctedUtterance)) {
                var replacement = result.ReplacementUtterance, state = 2;
                return !!result.Command || (result.ConfidenceLevel <= 5 ? state = 0 : result.ConfidenceLevel <= 20 && (state = 1)), 
                _.isEmpty(result.CorrectedUtteranceTextSegments) ? {
                    correctedUtterance,
                    replacementUtterance: replacement || correctedUtterance,
                    state
                } : {
                    correctedUtterance,
                    correctedTextSegments: (wireCorrectedTextSegments = result.CorrectedUtteranceTextSegments, 
                    _.map(wireCorrectedTextSegments, function(textSegment) {
                        return {
                            startIndex: textSegment.StartIndex,
                            endExcludingIndex: textSegment.StartIndex + textSegment.Length
                        };
                    })),
                    state
                };
            }
        }
        function convertSemanticTypeToValueType(semanticType) {
            switch (semanticType) {
              case 0:
              case 1:
              case 2:
              case 3:
                return;

              case 4:
                return _powerbi_legacy_PowerBIVisuals_VisualsData_types_valueType__WEBPACK_IMPORTED_MODULE_4__.Ge.fromExtendedType(7078913);

              case 5:
                return _powerbi_legacy_PowerBIVisuals_VisualsData_types_valueType__WEBPACK_IMPORTED_MODULE_4__.Ge.fromDescriptor({
                    dateTime: !0
                });

              case 6:
                return _powerbi_legacy_PowerBIVisuals_VisualsData_types_valueType__WEBPACK_IMPORTED_MODULE_4__.Ge.fromDescriptor({
                    numeric: !0
                });
            }
        }
        function createStandaloneDefaultLabel(expression, query) {
            var queryDef = _powerbi_legacy_Data_services_serialization_semanticQuerySerializer__WEBPACK_IMPORTED_MODULE_2__.ib.serializeQuery(query);
            queryDef.Select.push(expression);
            var deserializeQuery = _powerbi_legacy_Data_services_serialization_semanticQuerySerializer__WEBPACK_IMPORTED_MODULE_2__.ib.deserializeQuery(queryDef);
            return _.last(deserializeQuery.select()).expr;
        }
    }
} ]);