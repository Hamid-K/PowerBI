"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "textbox" ], {
    28241: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            AlwaysUseSmallViewport: function() {
                return AlwaysUseSmallViewport;
            },
            ColorPicker: function() {
                return ColorPicker;
            },
            DefaultAlignment: function() {
                return DefaultAlignment;
            },
            DefaultLinkInputValue: function() {
                return DefaultLinkInputValue;
            },
            FontSizePrecision: function() {
                return FontSizePrecision;
            },
            FontSizes: function() {
                return FontSizes;
            },
            Fonts: function() {
                return Fonts;
            },
            FormattingSettings: function() {
                return FormattingSettings;
            },
            LegacyDefaultFont: function() {
                return LegacyDefaultFont;
            },
            LegacyDefaultFontProperties: function() {
                return LegacyDefaultFontProperties;
            },
            LegacyFontSize: function() {
                return LegacyFontSize;
            },
            LinkInput: function() {
                return LinkInput;
            },
            LinkPreview: function() {
                return LinkPreview;
            },
            MiniToolbarLargeButton: function() {
                return MiniToolbarLargeButton;
            },
            ModelKeyName: function() {
                return ModelKeyName;
            },
            QuillPlaceholder: function() {
                return QuillPlaceholder;
            },
            QuillWrapper: function() {
                return QuillWrapper;
            },
            SmartNarrativesEditor: function() {
                return SmartNarrativesEditor;
            },
            TextAlignments: function() {
                return TextAlignments;
            },
            TextIndent: function() {
                return TextIndent;
            },
            TextListTypes: function() {
                return TextListTypes;
            },
            TextRunElement: function() {
                return TextRunElement;
            },
            TextScriptTypes: function() {
                return TextScriptTypes;
            },
            Textbox: function() {
                return Textbox;
            },
            Toolbar: function() {
                return Toolbar;
            },
            ViewModelAdapter: function() {
                return ViewModelAdapter;
            },
            applyTooltip: function() {
                return applyTooltip;
            },
            buildToolbarLinkInputTemplate: function() {
                return buildToolbarLinkInputTemplate;
            },
            button: function() {
                return button;
            },
            convertDeltaToParagraphs: function() {
                return convertDeltaToParagraphs;
            },
            convertFormatAttributesToTextStyle: function() {
                return convertFormatAttributesToTextStyle;
            },
            convertIndentToPadding: function() {
                return convertIndentToPadding;
            },
            convertParagraphsToHtml: function() {
                return convertParagraphsToHtml;
            },
            convertParagraphsToOps: function() {
                return convertParagraphsToOps;
            },
            div: function() {
                return div;
            },
            formatButton: function() {
                return formatButton;
            },
            formatGroup: function() {
                return formatGroup;
            },
            formattingSettingsClass: function() {
                return formattingSettingsClass;
            },
            formattingSettingsGroup: function() {
                return formattingSettingsGroup;
            },
            getAtMentionTextRun: function() {
                return getAtMentionTextRun;
            },
            getBlockStyle: function() {
                return getBlockStyle;
            },
            getCSSFromFont: function() {
                return getCSSFromFont;
            },
            getCssFontFamily: function() {
                return getCssFontFamily;
            },
            getCssFontSize: function() {
                return getCssFontSize;
            },
            getCustomQuillFormatValue: function() {
                return getCustomQuillFormatValue;
            },
            getFontFromCSS: function() {
                return getFontFromCSS;
            },
            getTextRunFromSmartNarrativesInsert: function() {
                return getTextRunFromSmartNarrativesInsert;
            },
            getTooltip: function() {
                return getTooltip;
            },
            getVerticalDivider: function() {
                return getVerticalDivider;
            },
            isValidLinkUrl: function() {
                return isValidLinkUrl;
            },
            linkTooltipTemplateGenerator: function() {
                return linkTooltipTemplateGenerator;
            },
            mentionDefaultMaxSearchLength: function() {
                return mentionDefaultMaxSearchLength;
            },
            options: function() {
                return options;
            },
            picker: function() {
                return picker;
            },
            removeQuotes: function() {
                return removeQuotes;
            },
            selector: function() {
                return selector;
            },
            smartNarrativesEditor: function() {
                return smartNarrativesEditor;
            },
            smartNarrativesEditorClass: function() {
                return smartNarrativesEditorClass;
            },
            span: function() {
                return span;
            },
            toggleGroup: function() {
                return toggleGroup;
            },
            updatePicker: function() {
                return updatePicker;
            },
            updateSelector: function() {
                return updateSelector;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81337), _JsCommon_focus_focusManager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(65302), _JsCommon_focus_focusManager_helpers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(11034), _JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(57470), _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(57869), _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(90120), _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(18664), _Visuals_common_textboxUtil__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(67064), _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32105), _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(64067), _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(44783), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62458), _VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(65195), _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38265), _VisualsCommon_Utility_asyncSerializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(57419), _VisualsCommon_Utility_browserUtils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(59107), _VisualsCommon_Utility_keyUtils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(9795), _VisualsCommon_Utility_promise__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(98094), _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(48066), _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(38078), _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(66001), _VisualsData_types_valueRef__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(38830), _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19060), mentionDefaultMaxSearchLength = 48, TextboxFocusElementClassAndSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("textboxFocusElement"), TextboxToolbarSelectors = {
            linkTooltip: (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("ql-link-tooltip"),
            toolbarUrlInput: (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("toolbar-url-input")
        }, Fonts = [ "Arial", "Arial Black", "Arial Unicode MS", "Calibri", "Cambria", "Cambria Math", "Candara", "Comic Sans MS", "Consolas", "Constantia", "Corbel", "Courier New", "DIN", "DIN Light", "Georgia", "Lucida Sans Unicode", "Segoe (Bold)", "Segoe UI", "Segoe UI Light", "Symbol", "Tahoma", "Times New Roman", "Trebuchet MS", "Verdana", "Wingdings" ], FontSizePrecision = 1, FontSizes = [ 8, 9, 10, 10.5, 11, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 42, 44, 54, 60, 66, 72, 80, 88, 96 ], LegacyDefaultFont = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__.Wn.light.family, LegacyFontSize = _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__.B.createFromPx(14), LegacyDefaultFontProperties = {
            family: LegacyDefaultFont,
            size: LegacyFontSize
        }, TextAlignments = [ "Left", "Center", "Right" ], TextIndent = [ "-1", "+1" ], DefaultAlignment = "Left", TextScriptTypes = function(TextScriptTypes) {
            return TextScriptTypes.Super = "Super", TextScriptTypes.Sub = "Sub", TextScriptTypes;
        }({}), TextListTypes = function(TextListTypes) {
            return TextListTypes.Bullet = "bullet", TextListTypes.Numbered = "ordered", TextListTypes;
        }({});
        function getCSSFromFont(font) {
            var family = _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__.bw[font];
            return family ? family.family : font;
        }
        function getFontFromCSS(fontCSS) {
            return _.findKey(_VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__.bw, function(FontMapCSS) {
                return FontMapCSS.family === fontCSS || FontMapCSS.family.indexOf(fontCSS) > 0;
            }) || fontCSS;
        }
        var Textbox = function() {
            function Textbox(options) {
                var _this = this;
                this.asyncSerializer = new _VisualsCommon_Utility_asyncSerializer__WEBPACK_IMPORTED_MODULE_3__.W, 
                options && (this.supportsNarrativeExpressions = !1 !== options.supportsNarrativeExpressions, 
                this.supportsAtMention = !!options.supportsAtMention, this.textChangeThrottle = options.textChangeThrottle, 
                this.placeholderText = options.placeholderText, this.supportsFormattingChangeIndicationOptions = !!options.supportsFormattingChangeIndication, 
                this.hierarchicalTabbing = !!options.hierarchicalTabbing, _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assert(function() {
                    return !(options.textChangeThrottle && _this.supportsNarrativeExpressions);
                }, "textChangeThrottle cannot be used with supportsNarrativeExpressions"), this.fontFamilies = (0, 
                tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([], options.allowedFonts || Fonts || [], !0), 
                this.fontSizes = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([], options.allowedFontSizes || FontSizes || [], !0), 
                this.restrictFontSizes = _.some(options.allowedFontSizes), options.viewModelAdapter && (this.viewModelAdapter = options.viewModelAdapter), 
                this.disableScrollingInViewMode = options.disableScrollingInViewMode, this.featureSwitches = options.featureSwitches);
            }
            return Textbox.prototype.init = function(options) {
                this.element = options.element, this.host = options.host, this.viewport = options.viewport, 
                this.style = options.style, this.readOnly = 0 === this.host.getViewMode(), this.paragraphs = [], 
                this.defaultFont = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, LegacyDefaultFontProperties), 
                this.fontFamilies = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([], this.fontFamilies || Fonts || [], !0), 
                this.fontSizes = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([], this.fontSizes || FontSizes || [], !0), 
                this.evaluatedValues = {}, this.quillEditorIsReady = this.host.promiseFactory().defer(), 
                this.featureSwitches = options.featureSwitches, this.configureMentions(), this.refreshView();
            }, Textbox.prototype.onResizing = function(viewport) {
                var oldViewport = this.viewport;
                this.viewport = viewport, this.updateSize(), this.viewModelAdapter && this.viewModelAdapter.onResizing(this.element, this.viewport, oldViewport, this.defaultFont);
            }, Textbox.prototype.onDataChanged = function(options) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(options, "options");
                var dataViews = options.dataViews;
                this.evaluatedValues = {}, this.paragraphs = [];
                var dirty = this.editor && this.editor.isDirty;
                if (dirty && (this.paragraphs = this.getContents()), dataViews && dataViews.length > 0) {
                    var objects = dataViews[0].metadata.objects;
                    objects && objects.general && !dirty && (this.paragraphs = objects.general.paragraphs), 
                    (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.Ih)(objects, this.evaluatedValues, this.host.telemetry());
                    var colorHelper = _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__.v.create(this.style);
                    this.defaultFont = (0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_8__.Zi)(objects && objects.text, {
                        family: "fontFamily",
                        size: "fontSize",
                        color: "color"
                    }, colorHelper, this.style, "foreground", "label", LegacyDefaultFontProperties);
                }
                this.mergeParagraphFontsWithStandardFonts(), this.refreshView();
            }, Textbox.prototype.getTelemetryInformation = function() {
                for (var _a, telemetryInformation, hasSmartNarratives = !1, templateIds = [], _i = 0, _b = this.paragraphs; _i < _b.length; _i++) for (var _c = 0, _d = _b[_i].textRuns; _c < _d.length; _c++) {
                    var textRun = _d[_c];
                    if ((0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.ki)(textRun)) {
                        if (hasSmartNarratives = !0, !_.isEmpty(textRun.cases)) {
                            var textRunCase = _.first(textRun.cases);
                            templateIds.push(_.round(textRunCase.pattern, -2));
                        }
                    } else (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.HA)(textRun) ? (0, _VisualsData_types_valueRef__WEBPACK_IMPORTED_MODULE_9__.U)(textRun.value) && (hasSmartNarratives = !0) : _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertNever(textRun);
                }
                return hasSmartNarratives && ((_a = {}).SmartNarratives = !0, _a.SummarizationTemplateIds = templateIds.join(","), 
                telemetryInformation = _a), telemetryInformation;
            }, Textbox.prototype.mergeParagraphFontsWithStandardFonts = function() {
                var fontSizes = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)((0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([], _.map(this.fontSizes, function(fontSize) {
                    return _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__.B.createFromPt(fontSize);
                }), !0), [ this.defaultFont.size ], !1), sortedFontSizes = _.chain(fontSizes).map(function(fontSize) {
                    return fontSize.pt;
                }).uniqBy(function(fontSize) {
                    return fontSize;
                }).sortBy(function(fontSize) {
                    return fontSize;
                }).value(), defaultFontCommonName = getFontFromCSS(this.defaultFont.family), fontFamilies = (0, 
                tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)((0, tslib__WEBPACK_IMPORTED_MODULE_5__.__spreadArray)([], this.fontFamilies, !0), [ defaultFontCommonName ], !1), paragraphs = this.paragraphs;
                if (paragraphs) for (var _i = 0, paragraphs_1 = paragraphs; _i < paragraphs_1.length; _i++) {
                    var paragrah = paragraphs_1[_i];
                    if (paragrah.textRuns) for (var _a = 0, _b = paragrah.textRuns; _a < _b.length; _a++) {
                        var textRun = _b[_a], textStyle = textRun && (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.HA)(textRun) && textRun.textStyle;
                        if (textStyle) {
                            if (textStyle.fontSize) {
                                var textRunFontSize = _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__.B.createFromCSS(textStyle.fontSize, FontSizePrecision);
                                if (textRunFontSize) if (this.restrictFontSizes) {
                                    var closestSize = _.sortedIndex(sortedFontSizes, textRunFontSize.pt);
                                    textStyle.fontSize = sortedFontSizes[Math.min(closestSize, sortedFontSizes.length - 1)] + "pt";
                                } else fontSizes.push(textRunFontSize);
                            }
                            textStyle.fontFamily && fontFamilies.push(textStyle.fontFamily);
                        }
                    }
                }
                this.fontSizes = _.chain(fontSizes).map(function(fontSize) {
                    return fontSize.pt;
                }).sortBy(function(fontSize) {
                    return fontSize;
                }).uniqBy(function(fontSize) {
                    return fontSize;
                }).value(), this.fontFamilies = _.chain(fontFamilies).sortBy(function(fontFamily) {
                    return fontFamily;
                }).uniqBy(function(fontFamily) {
                    return fontFamily;
                }).value();
            }, Textbox.prototype.destroy = function() {
                this.editor && (this.editor.destroy(), this.editor = void 0), this.isDisposed = !0;
            }, Textbox.prototype.focus = function() {
                if (this.editor) return this.editor.focus(), !0;
            }, Textbox.prototype.onViewModeChanged = function(viewMode) {
                this.readOnly = 0 === viewMode, this.refreshView();
            }, Textbox.prototype.setSelection = function(index, length) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.editor, "editor"), 
                this.editor && this.editor.setSelection(index, length);
            }, Textbox.prototype.getSelection = function() {
                return this.editor.getSelection();
            }, Textbox.prototype.ensureFocusableElement = function() {
                var _this = this, container = this.element;
                if (!container.find(TextboxFocusElementClassAndSelector.selector).length) {
                    var element = $("<div>").width(0).height(0).attr("tabindex", 0).addClass(TextboxFocusElementClassAndSelector.class);
                    container.append(element), element.on(_JsCommon_focus_focusManager_helpers__WEBPACK_IMPORTED_MODULE_10__.BZ, function() {
                        _this.focus();
                    });
                }
            }, Textbox.prototype.removeFocusableElement = function() {
                this.element.find(TextboxFocusElementClassAndSelector.selector).remove();
            }, Textbox.prototype.refreshView = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.asyncSerializer.enqueue(function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(_this, void 0, void 0, function() {
                                    var htmlContent, textbox, textboxContainer, toolbarOptions, supportsFormattingChangeIndication, editorElement, selection, contents, _this = this;
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                                        switch (_a.label) {
                                          case 0:
                                            return this.isDisposed ? [ 2 ] : this.readOnly ? (this.editor && (this.editor.isDirty && this.saveContents(), 
                                            this.editor.destroy(), this.editor = null), this.element.empty(), htmlContent = convertParagraphsToHtml(this.paragraphs, this.defaultFont, this.evaluatedValues, this.$mentionsHoverContainer, this.personCardComponent), 
                                            textbox = $("<div>").addClass(Textbox.ClassAndSelector.class).css((0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_8__.wB)(this.defaultFont)).append(htmlContent), 
                                            this.supportsAtMention && textbox.append(this.$mentionsHoverContainer), this.viewModelAdapter && this.viewModelAdapter.onDataChanged(textbox, this.viewport, this.defaultFont), 
                                            textboxContainer = void 0, this.disableScrollingInViewMode ? (textboxContainer = textbox, 
                                            this.element.append(textbox)) : (textboxContainer = this.$scrollableDiv = $("<div></div>").addClass(Textbox.ScrollWrapperClassAndSelector.class).css({
                                                height: "".concat(this.viewport.height, "px"),
                                                "overflow-y": "auto",
                                                "overflow-x": "hidden"
                                            }).append(textbox), this.element.append(this.$scrollableDiv)), this.removeFocusableElement(), 
                                            textboxContainer.attr("tabindex", 0).attr("role", "document").attr(_JsCommon_focus_focusManager_helpers__WEBPACK_IMPORTED_MODULE_10__.Qt, "Browser").on("keydown", function(event) {
                                                27 === event.keyCode && (_JsCommon_focus_focusManager__WEBPACK_IMPORTED_MODULE_11__.IK.focus(_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_12__.M.getParentFocusElement(document.activeElement)), 
                                                event.stopPropagation());
                                            }), [ 3, 5 ]) : [ 3, 1 ];

                                          case 1:
                                            return toolbarOptions = {
                                                defaultFont: this.defaultFont,
                                                evaluatedValues: this.evaluatedValues,
                                                fontFamilies: this.fontFamilies,
                                                fontSizes: this.fontSizes,
                                                supportsNarrativeExpressions: this.supportsNarrativeExpressions,
                                                textChangeThrottle: this.textChangeThrottle,
                                                onEscape: function() {
                                                    return _this.focus();
                                                },
                                                featureSwitches: this.featureSwitches,
                                                supportsFormattingChangeIndication: this.supportsFormattingChangeIndicationOptions,
                                                onRenderTooltip: function(element, text) {
                                                    return _this.getTooltipsComponent(element, text);
                                                },
                                                hierarchicalTabbing: this.hierarchicalTabbing
                                            }, supportsFormattingChangeIndication = this.supportsFormattingChangeIndicationOptions && !this.readOnly, 
                                            this.editor ? [ 3, 3 ] : (this.editor = new QuillWrapper(this.readOnly, this.host, this.style, toolbarOptions, this.supportsAtMention, this.$mentionsHoverContainer, this.personCardComponent, this.placeholderText, supportsFormattingChangeIndication, this.hierarchicalTabbing), 
                                            this.editor.textChanged = function() {
                                                return _this.saveContents();
                                            }, this.element.empty(), this.ensureFocusableElement(), (editorElement = this.editor.getElement()).addClass(Textbox.ClassAndSelector.class), 
                                            this.element.append(editorElement), [ 4, this.editor.init() ]);

                                          case 2:
                                            return _a.sent(), [ 3, 4 ];

                                          case 3:
                                            this.editor.updateOptions(toolbarOptions), _a.label = 4;

                                          case 4:
                                            if (!this.editor) return [ 2 ];
                                            this.editor.getElement().css((0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_8__.wB)(this.defaultFont)), 
                                            this.quillEditorIsReady.resolve(), this.restrictFontSizes && (this.editor.onPaste = function() {
                                                _this.mergeParagraphFontsWithStandardFonts(), _this.refreshView();
                                            }), selection = this.editor.getSelection(), contents = convertParagraphsToOps(this.paragraphs, this.evaluatedValues, this.editor, this.style, this.$mentionsHoverContainer, this.personCardComponent), 
                                            this.editor.setContents(contents), selection && this.editor.setSelection(selection.index, selection.length), 
                                            _a.label = 5;

                                          case 5:
                                            return this.updateSize(), [ 2 ];
                                        }
                                    });
                                });
                            }) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, Textbox.prototype.getContents = function() {
                if (this.editor) {
                    var contents = this.editor.getContents();
                    if (contents) {
                        var paragraphs = convertDeltaToParagraphs(contents, this.supportsNarrativeExpressions, this.evaluatedValues);
                        if (!(paragraphs.length < 1)) return paragraphs;
                    }
                }
            }, Textbox.prototype.saveContents = function() {
                var paragraphs = this.getContents();
                paragraphs && (this.paragraphs = paragraphs, this.host.persistProperties([ {
                    objectName: "general",
                    properties: {
                        paragraphs: this.paragraphs
                    },
                    selector: null
                } ]), this.editor && this.editor.isDirty && (this.editor.isDirty = !1));
            }, Textbox.prototype.updateSize = function() {
                this.editor ? this.editor.resize(this.viewport) : this.$scrollableDiv && this.$scrollableDiv.css("height", "".concat(this.viewport.height, "px"));
            }, Textbox.prototype.configureMentions = function() {
                if (this.supportsAtMention) {
                    this.$mentionsHoverContainer = $("<span>").addClass(Textbox.MentionsHoverClassAndSelector.class).hide();
                    var uiComponentFactory = this.host.getUIComponentFactory();
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(uiComponentFactory, "uiComponentFactory"), 
                    this.personCardComponent = uiComponentFactory.createPersonCard(this.$mentionsHoverContainer.get(0));
                }
            }, Textbox.prototype.onTextEditorReady = function() {
                return this.quillEditorIsReady.promise;
            }, Textbox.prototype.getTooltipsComponent = function(elemet, text) {
                return this.tooltip && this.tooltip.close(), this.tooltip = this.host.getUIComponentFactory().createTooltip(elemet, text), 
                this.tooltip;
            }, Textbox.ClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("textbox"), 
            Textbox.MentionsHoverClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("mentions-hover"), 
            Textbox.ScrollWrapperClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("scrollWrapper"), 
            Textbox;
        }(), DefaultLinkInputValue = "https://", ViewModelAdapter = function() {
            function ViewModelAdapter(smallViewportProperties) {
                this.smallViewportProperties = smallViewportProperties;
            }
            return ViewModelAdapter.prototype.onResizing = function(element, currentViewport, oldViewport, defaultFont) {
                var wasPreviouslySmallViewport = this.isSmallViewport(oldViewport), isCurrentlySmallViewport = this.isSmallViewport(currentViewport);
                wasPreviouslySmallViewport !== isCurrentlySmallViewport && this.applyScaleOnElement(element, isCurrentlySmallViewport, defaultFont);
            }, ViewModelAdapter.prototype.onDataChanged = function(element, viewport, defaultFont) {
                this.isSmallViewport(viewport) && this.applyScaleOnElement(element, !0, defaultFont);
            }, ViewModelAdapter.prototype.isSmallViewport = function(viewport) {
                return !!viewport && !!this.smallViewportProperties && (viewport.height <= this.smallViewportProperties.minHeightToScaleFontSize || viewport.width <= this.smallViewportProperties.minWidthToScaleFontSize);
            }, ViewModelAdapter.prototype.applyScaleOnElement = function(element, enableScale, defaultFont) {
                enableScale && (defaultFont = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0, 
                tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, defaultFont), {
                    size: ViewModelAdapter.scale(defaultFont.size)
                })), element.find(Textbox.ClassAndSelector.selector).css((0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_8__.wB)(defaultFont)), 
                element.find(TextRunElement.selector).each(function(i, elm) {
                    var newFontSize;
                    if (enableScale) {
                        var oldFontSize, oldFontSizeCSS = $(elm).css("font-size");
                        oldFontSize = oldFontSizeCSS ? _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__.B.createFromCSS(oldFontSizeCSS) : defaultFont.size, 
                        newFontSize = ViewModelAdapter.scale(oldFontSize);
                    } else {
                        var textRunObj = $(elm).data(ModelKeyName), originalFontSize = textRunObj.textStyle && textRunObj.textStyle.fontSize;
                        originalFontSize && (newFontSize = _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__.B.createFromCSS(originalFontSize));
                    }
                    var newFont = defaultFont;
                    newFontSize && (newFont = (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, defaultFont), {
                        size: newFontSize
                    })), (0, _Visuals_common_fontProperties__WEBPACK_IMPORTED_MODULE_8__.JZ)(newFont, elm);
                });
            }, ViewModelAdapter.scale = function(originalFontSize) {
                var size = originalFontSize.px;
                return _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__.B.createFromPx(size > 66 ? 32 : size > 42 ? 28 : size > 26 ? 24 : size > 16 ? 20 : size > 11 ? 14 : 12);
            }, ViewModelAdapter;
        }(), AlwaysUseSmallViewport = function(_super) {
            function AlwaysUseSmallViewport() {
                return _super.call(this, {
                    minHeightToScaleFontSize: 1 / 0,
                    minWidthToScaleFontSize: 1 / 0
                }) || this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__extends)(AlwaysUseSmallViewport, _super), 
            AlwaysUseSmallViewport;
        }(ViewModelAdapter), LinkPreview = function() {
            function LinkPreview() {}
            return LinkPreview.format = function(preview) {
                return /^\S+@\S+\.\S+$/.test(preview) ? "mailto:" + preview : /^https?:\/\//i.test(preview) ? preview : DefaultLinkInputValue + preview;
            }, LinkPreview;
        }(), ModelKeyName = "ModelObject", TextRunElement = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("textRun");
        function convertDeltaToParagraphs(contents, supportsNarrativeExpressions, evaluatedValues) {
            for (var paragraphs = [], paragraph = {
                textRuns: []
            }, wasPreviousRunAConditional = !1, _loop_1 = function(i, len) {
                var insertOp = contents.ops[i];
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(insertOp, "operation should be an insert");
                var attributes = insertOp.attributes, insert = insertOp.insert;
                if (void 0 === insert) return "continue";
                if (_.isString(insert)) {
                    var text = insert;
                    wasPreviousRunAConditional = !1, attributes && attributes.align && (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assert(function() {
                        return void 0 === paragraph.horizontalTextAlignment || paragraph.horizontalTextAlignment === attributes.align;
                    }, "paragraph should not have more than one horizontal alignment"), paragraph.horizontalTextAlignment = attributes.align), 
                    attributes && attributes.indent && (paragraph.indent = attributes.indent), attributes && attributes.list && (paragraph.listType = attributes.list);
                    var start = 0, end = 0, newParagraph = void 0;
                    do {
                        if ((end = text.indexOf(_Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.mj, start)) < 0 ? (newParagraph = !1, 
                        end = text.length) : newParagraph = !0, end - start > 0) {
                            var textRun = {
                                value: text.substring(start, end)
                            };
                            if (attributes) {
                                void 0 !== attributes.link && isValidLinkUrl(attributes.link) && (textRun.url = attributes.link);
                                var textStyle = convertFormatAttributesToTextStyle(attributes);
                                textStyle && (textRun.textStyle = textStyle);
                            }
                            paragraph.textRuns.push(textRun);
                        }
                        newParagraph && (0 === paragraph.textRuns.length && paragraph.textRuns.push({
                            value: ""
                        }), paragraphs.push(paragraph), paragraph = {
                            textRuns: []
                        }), start = end + 1;
                    } while (start < text.length);
                } else if (_.isNumber(insert)) _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertFail("embeds not supported"); else {
                    var atMentiontextRun = getAtMentionTextRun(attributes, insert);
                    if (atMentiontextRun) paragraph.textRuns.push(atMentiontextRun); else if (supportsNarrativeExpressions) {
                        if (!(textRun = getTextRunFromSmartNarrativesInsert(attributes, insert))) return "continue";
                        if ((0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.ki)(textRun)) {
                            var textRuns = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.kO)(textRun, evaluatedValues), textRunValue = (0, 
                            _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.AA)(textRuns, evaluatedValues);
                            if ((textRunValue === _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.mj || textRunValue === _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.d$) && !wasPreviousRunAConditional) return 0 === paragraph.textRuns.length && paragraph.textRuns.push({
                                value: ""
                            }), paragraphs.push(paragraph), paragraph = {
                                textRuns: []
                            }, wasPreviousRunAConditional = !1, "continue";
                            wasPreviousRunAConditional = !0;
                        }
                        paragraph.textRuns.push(textRun);
                    }
                }
            }, i = 0, len = contents.ops.length; i < len; i++) _loop_1(i);
            if (paragraph.textRuns.length > 0) {
                var firstTextRun = _.first(paragraph.textRuns);
                (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.HA)(firstTextRun) && _.isString(firstTextRun.value) && firstTextRun.value.length > 0 && paragraphs.push(paragraph);
            }
            return paragraphs;
        }
        function convertParagraphsToHtml(paragraphs, defaultFont, evaluatedValues, $mentionsHoverContainer, personCardComponent) {
            for (var $paragraphs = $(), isContinueOrderedList = 0, $orderListElement = $(), paragraphIndex = 0, len = paragraphs.length; paragraphIndex < len; ++paragraphIndex) {
                var paragraphDef = paragraphs[paragraphIndex], isParagraphEmpty = !0;
                paragraphDef.listType === TextListTypes.Numbered ? isContinueOrderedList++ : (isContinueOrderedList = 0, 
                $orderListElement = void 0);
                var $paragraph = $("<p>").data(ModelKeyName, paragraphDef);
                paragraphDef.horizontalTextAlignment && $paragraph.css("text-align", paragraphDef.horizontalTextAlignment), 
                paragraphDef.indent && $paragraph.css("padding", "0px 0px 0px " + convertIndentToPadding(paragraphDef.indent) + "px");
                for (var _loop_2 = function(textRunIndex, jlen) {
                    var $textRun, textRunMentionEmail, textRunDef = paragraphDef.textRuns[textRunIndex], textRunValue = void 0, textRunStyle = void 0, textRunUrl = void 0;
                    if ((0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.HA)(textRunDef)) textRunValue = textRunDef.value, 
                    textRunStyle = textRunDef.textStyle, textRunUrl = textRunDef.url, (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.n8)(textRunDef) && (textRunValue = "@".concat(textRunValue), 
                    (textRunStyle = textRunStyle || {}).color = "#1453b3", textRunMentionEmail = textRunDef.mentionEmail); else {
                        if (!(0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.ki)(textRunDef)) return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertNever(textRunDef), 
                        "continue";
                        var conditionalTextRuns = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.kO)(textRunDef, evaluatedValues);
                        if ((textRunValue = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.AA)(conditionalTextRuns, evaluatedValues)) === _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.d$) return "continue";
                        _.isEmpty(conditionalTextRuns) || (textRunStyle = conditionalTextRuns[0].textStyle, 
                        textRunUrl = conditionalTextRuns[0].url);
                    }
                    _.isEmpty(textRunValue) || (isParagraphEmpty = !1), $textRun = void 0 !== textRunUrl && isValidLinkUrl(textRunUrl) ? $("<a>").attr("href", textRunUrl).attr("rel", "noopener noreferrer").attr("target", "_blank") : $("<span>");
                    var textAssignment = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.SV)(textRunValue, evaluatedValues);
                    $textRun.text(textAssignment).addClass(TextRunElement.class).data(ModelKeyName, textRunDef);
                    var styleDef = textRunStyle;
                    if (styleDef) {
                        var css = {};
                        if (styleDef.fontFamily && (css["font-family"] = getCssFontFamily(styleDef.fontFamily, defaultFont)), 
                        styleDef.fontSize) {
                            var fontSize = _Visuals_common_units__WEBPACK_IMPORTED_MODULE_2__.B.createFromCSS(styleDef.fontSize);
                            css["font-size"] = getCssFontSize(fontSize, defaultFont);
                        }
                        styleDef.fontStyle && (css["font-style"] = styleDef.fontStyle), styleDef.fontWeight && (css["font-weight"] = styleDef.fontWeight), 
                        styleDef.color && (css.color = styleDef.color), styleDef.textDecoration && (css["text-decoration"] = styleDef.textDecoration), 
                        styleDef.scriptType && (css.lineHeight = "0" === styleDef.lineHeight ? "Normal" : styleDef.lineHeight, 
                        css.position = styleDef.position, css.verticalAlign = styleDef.verticalAlign, styleDef.scriptType === TextScriptTypes.Sub.toLowerCase() ? css.bottom = styleDef.bottom : css.top = styleDef.top), 
                        $textRun.css(css);
                    }
                    textRunMentionEmail && $textRun.on(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.Wo, function() {
                        personCardComponent.showUser(textRunMentionEmail);
                        var textRunNode = $textRun.get(0), bounds = textRunNode.getBoundingClientRect();
                        $mentionsHoverContainer.stop(!0, !0).css({
                            left: textRunNode.offsetLeft,
                            top: textRunNode.offsetTop - bounds.height - 32
                        }).delay(200).queue(function(next) {
                            $textRun.is(":hover") && $mentionsHoverContainer.fadeIn("fast"), next();
                        });
                    }).on(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.xw, function() {
                        $mentionsHoverContainer.delay(500).queue(function(next) {
                            !function fadeOutDelay(next) {
                                $mentionsHoverContainer.is(":hover") ? setTimeout(function() {
                                    return fadeOutDelay(next);
                                }, 500) : next();
                            }(next);
                        }).fadeOut("fast");
                    }), $paragraph.append($textRun);
                }, textRunIndex = 0, jlen = paragraphDef.textRuns.length; textRunIndex < jlen; ++textRunIndex) _loop_2(textRunIndex);
                if (paragraphDef.listType === TextListTypes.Bullet && ($paragraph.css("display", "inline"), 
                ($paragraph = $paragraph.wrap("<ul><li></li></ul>").parent().parent()).css("text-align", paragraphDef.horizontalTextAlignment)), 
                paragraphDef.listType === TextListTypes.Numbered) {
                    var numberedListStyle = "list-style-type: decimal !important; list-style-position: inside !important;";
                    $paragraph.css("display", "inline"), 1 === isContinueOrderedList ? (($orderListElement = $paragraph = $paragraph.wrap("<ol><li></li></ol>").parent().parent()).children().attr("style", numberedListStyle), 
                    $paragraphs = $paragraphs.add($orderListElement)) : isContinueOrderedList > 1 && (($paragraph = $paragraph.wrap("<li></li>").parent()).attr("style", numberedListStyle), 
                    $orderListElement.append($paragraph)), $paragraph.css("text-align", paragraphDef.horizontalTextAlignment);
                } else isParagraphEmpty && $paragraph.append($("<br>")), $paragraphs = $paragraphs.add($paragraph);
            }
            return $paragraphs;
        }
        function convertIndentToPadding(indent) {
            var indentNumber;
            return (indentNumber = Number(indent)) >= 0 && indentNumber <= 9 ? 40 * indentNumber : 0;
        }
        function convertParagraphsToOps(paragraphs, evaluatedValues, editor, style, $mentionsHoverContainer, personCardComponent) {
            for (var _a, _b, _c, ops = [], conditionalIndex = 0, paragraphIndex = 0, len = paragraphs.length; paragraphIndex < len; ++paragraphIndex) {
                for (var paragraphDef = paragraphs[paragraphIndex], textRunIndex = 0, jlen = paragraphDef.textRuns.length; textRunIndex < jlen; ++textRunIndex) {
                    var textRunDef = paragraphDef.textRuns[textRunIndex], textRunStyle = void 0, textRunUrl = void 0, textRunValue = void 0;
                    if ((0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.HA)(textRunDef)) textRunStyle = textRunDef.textStyle, 
                    textRunUrl = textRunDef.url, textRunValue = textRunDef.value; else {
                        if (!(0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.ki)(textRunDef)) {
                            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertNever(textRunDef);
                            continue;
                        }
                        if (!_.isEmpty(textRunDef.cases)) {
                            var textRunCase = _.first(textRunDef.cases);
                            _.isEmpty(textRunCase.textRuns) || (textRunStyle = _.first(textRunCase.textRuns).textStyle, 
                            textRunUrl = _.first(textRunCase.textRuns).url);
                        }
                    }
                    var formats = {}, styleDef = textRunStyle;
                    styleDef && (styleDef.fontFamily && (formats.font = (0, _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(getCSSFromFont(removeQuotes(styleDef.fontFamily)))), 
                    styleDef.fontSize && (formats.size = styleDef.fontSize), styleDef.color && (formats.color = styleDef.color), 
                    formats.italic = "italic" === styleDef.fontStyle || void 0, formats.bold = "bold" === styleDef.fontWeight || void 0, 
                    formats.underline = "underline" === styleDef.textDecoration || void 0, styleDef.scriptType && (formats.script = styleDef.scriptType));
                    var text = textRunValue;
                    textRunUrl && isValidLinkUrl(textRunUrl) && (formats.link = textRunUrl);
                    var op = void 0;
                    if ((0, _VisualsData_types_valueRef__WEBPACK_IMPORTED_MODULE_9__.U)(text)) {
                        var options_1 = {
                            definition: textRunDef,
                            destroyEditorActions: editor.destroyEditorActions,
                            evaluatedValues,
                            localizationProvider: editor.localizationProvider,
                            objRef: objRef = text.selector.id,
                            onSelectSmartNarrativesBlot: function(selectedObjRef) {
                                var _a;
                                null === (_a = null == editor ? void 0 : editor.smartNarrativesEditorContainer) || void 0 === _a || _a.getSmartNarrativesEditor().onSelectEditableObject(selectedObjRef);
                            },
                            style
                        };
                        op = {
                            attributes: formats,
                            insert: (_a = {}, _a[QuillWrapper.smartNarrativesBlotClass.class] = options_1, _a)
                        };
                    } else if ((0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.ki)(textRunDef)) {
                        var objRef = (0, _VisualsData_types_valueRef__WEBPACK_IMPORTED_MODULE_9__.U)(textRunDef.expression) ? textRunDef.expression.selector.id : void 0, options_2 = {
                            conditionalIndex,
                            definition: textRunDef,
                            destroyEditorActions: editor.destroyEditorActions,
                            evaluatedValues,
                            localizationProvider: editor.localizationProvider,
                            objRef,
                            onSelectSmartNarrativesBlot: function(selectedObjRef) {
                                var _a;
                                null === (_a = null == editor ? void 0 : editor.smartNarrativesEditorContainer) || void 0 === _a || _a.getSmartNarrativesEditor().onSelectEditableObject(selectedObjRef);
                            },
                            onSelectSmartNarrativesConditionalBlot: function(conditionalIndex) {
                                setTimeout(function() {
                                    null == editor || editor.setSelectionOfConditional(conditionalIndex);
                                });
                            },
                            style
                        };
                        conditionalIndex++, op = {
                            attributes: formats,
                            insert: (_b = {}, _b[QuillWrapper.smartNarrativesConditionalBlotClass.class] = options_2, 
                            _b)
                        };
                    } else op = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.n8)(textRunDef) ? {
                        attributes: formats,
                        insert: (_c = {}, _c[QuillWrapper.atMentionBlotClass.class] = {
                            email: textRunDef.mentionEmail,
                            displayName: text,
                            hoverContainer: $mentionsHoverContainer,
                            personCardComponent
                        }, _c)
                    } : {
                        attributes: formats,
                        insert: text
                    };
                    ops.push(op);
                }
                var newlineOp = {
                    insert: "\n"
                };
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assert(function() {
                    return !_.endsWith(_.last(ops).insert, "\n");
                }, "paragraphs should not end in a new line");
                var blockStyle = getBlockStyle(paragraphDef);
                blockStyle && (newlineOp.attributes = blockStyle), ops.push(newlineOp);
            }
            return ops;
        }
        function getAtMentionTextRun(attributes, insert) {
            var _a, textRun, textStyle;
            if (attributes && (textStyle = convertFormatAttributesToTextStyle(attributes)), 
            insert[QuillWrapper.atMentionBlotClass.class] && !0 !== insert[QuillWrapper.atMentionBlotClass.class]) {
                var options_4 = insert[QuillWrapper.atMentionBlotClass.class];
                textRun = {
                    mentionEmail: options_4.email,
                    value: null !== (_a = options_4.displayName) && void 0 !== _a ? _a : options_4.email
                }, textStyle && (textRun.textStyle = textStyle);
            }
            return textRun;
        }
        function getTextRunFromSmartNarrativesInsert(attributes, insert) {
            var textRun, narrativeTextStyle, narrativeTextUrl;
            if (attributes) {
                var textStyle = convertFormatAttributesToTextStyle(attributes);
                textStyle && (narrativeTextStyle = textStyle), void 0 !== attributes.link && isValidLinkUrl(attributes.link) && (narrativeTextUrl = attributes.link);
            }
            if (insert[QuillWrapper.smartNarrativesBlotClass.class] && !0 !== insert[QuillWrapper.smartNarrativesBlotClass.class]) {
                var objRef = insert[QuillWrapper.smartNarrativesBlotClass.class].objRef;
                if (!objRef) return void _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertFail("Invalid narrative blot retrieved from QuillJS");
                if (objRef === QuillPlaceholder) return;
                textRun = {
                    textStyle: narrativeTextStyle,
                    url: narrativeTextUrl,
                    value: {
                        propertyIdentifier: _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.RL.values.expr,
                        selector: {
                            id: objRef
                        }
                    }
                };
            } else if (insert[QuillWrapper.smartNarrativesConditionalBlotClass.class] && !0 !== insert[QuillWrapper.smartNarrativesConditionalBlotClass.class]) {
                var options_6 = insert[QuillWrapper.smartNarrativesConditionalBlotClass.class];
                if (!(0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.ki)(options_6.definition)) return void _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertFail("Invalid conditional retrieved from QuillJS");
                for (var _i = 0, _a = (textRun = options_6.definition).cases; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].textRuns; _b < _c.length; _b++) (textRunChild = _c[_b]).textStyle = narrativeTextStyle, 
                textRunChild.url = narrativeTextUrl;
                for (var _d = 0, _e = textRun.defaultCase.textRuns; _d < _e.length; _d++) {
                    var textRunChild;
                    (textRunChild = _e[_d]).textStyle = narrativeTextStyle, textRunChild.url = narrativeTextUrl;
                }
            }
            return textRun;
        }
        function isValidLinkUrl(value) {
            if (_.isEmpty(value)) return !1;
            switch ((0, _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_15__.MN)(value)) {
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_15__.av.http:
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_15__.av.https:
              case _VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_15__.av.mailto:
                return !0;

              default:
                return !1;
            }
        }
        function getBlockStyle(paragraph) {
            var attributes = {};
            return paragraph.horizontalTextAlignment && (attributes.align = paragraph.horizontalTextAlignment), 
            paragraph.listType && (attributes.list = paragraph.listType), paragraph.indent && (attributes.indent = paragraph.indent), 
            !_.isEmpty(attributes) && attributes;
        }
        function convertFormatAttributesToTextStyle(attributes) {
            var style = {};
            if (attributes.bold && (style.fontWeight = "bold"), attributes.font) {
                var font = (0, _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(_.unescape(attributes.font), !1);
                font = getFontFromCSS(font), style.fontFamily = font;
            }
            return attributes.italic && (style.fontStyle = "italic"), attributes.size && (style.fontSize = attributes.size), 
            attributes.underline && (style.textDecoration = "underline"), attributes.color && (style.color = attributes.color), 
            attributes.script && (style.lineHeight = "0", style.position = "relative", style.verticalAlign = "baseline", 
            style.scriptType = attributes.script, attributes.script === TextScriptTypes.Sub.toLowerCase() ? style.bottom = "-0.25em" : style.top = "-0.25em", 
            attributes.indent && (style.indent = attributes.indent)), style;
        }
        function removeQuotes(text) {
            return !_.startsWith(text, "'") || (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_16__.ms)(text, ",") ? text : (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assert(function() {
                return _.endsWith(text, "'");
            }, "mismatched quotes"), text.slice(1, text.length - 1));
        }
        function getCssFontFamily(font, defaultFont) {
            var family = getCSSFromFont(font);
            return family !== defaultFont.family ? family : void 0;
        }
        function getCssFontSize(fontSize, defaultFont) {
            return null == fontSize || fontSize.equals(defaultFont.size) ? "" : "".concat(fontSize.pt, "pt");
        }
        var QuillPlaceholder = "__Placeholder__";
        function getCustomQuillFormatValue(op, format) {
            var value;
            return void 0 === op || _.isString(op.insert) || _.isNumber(op.insert) || void 0 === op.insert || (value = op.insert[format]), 
            value;
        }
        var QuillWrapper = function() {
            function QuillWrapper(readOnly, host, style, options, supportsAtMention, $mentionsHoverContainer, personCardComponent, placeholderText, supportsFormattingChangeIndication, hierarchicalTabbing) {
                var _this = this;
                this.readOnly = readOnly, this.host = host, this.style = style, this.options = options, 
                this.supportsAtMention = supportsAtMention, this.$mentionsHoverContainer = $mentionsHoverContainer, 
                this.personCardComponent = personCardComponent, this.placeholderText = placeholderText, 
                this.supportsFormattingChangeIndication = supportsFormattingChangeIndication, this.hierarchicalTabbing = hierarchicalTabbing, 
                this.textChanged = _.noop, this.isDirty = !1, this.$container = $("<div>"), this.localizationProvider = {
                    get: function(stringId) {
                        return _this.host.getLocalizedString(stringId);
                    },
                    getOptional: function(stringId) {
                        return _this.host.getLocalizedString(stringId);
                    },
                    format: function(stringId) {
                        for (var args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                        return _this.host.getLocalizedString(stringId, args);
                    }
                };
            }
            return QuillWrapper.prototype.init = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    var staticQuill;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, _Visuals_common_textboxUtil__WEBPACK_IMPORTED_MODULE_17__.mR)() ? (this.initialized = !1, 
                            [ 4, this.host.loader().require({
                                javascript: "quill",
                                css: [ "quill.core" ]
                            }) ]) : [ 3, 3 ];

                          case 1:
                            return staticQuill = _a.sent(), this.$container ? [ 4, this.initializeQuill(staticQuill) ] : [ 2 ];

                          case 2:
                            return _a.sent(), [ 3, 5 ];

                          case 3:
                            return [ 4, this.initializeQuill(window.Quill) ];

                          case 4:
                            _a.sent(), _a.label = 5;

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, QuillWrapper.getFormatPath = function(formatName) {
                return "".concat(QuillWrapper.quillFormatsPath, "/").concat(formatName);
            }, QuillWrapper.prototype.updateOptions = function(options) {
                if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(options, "options"), 
                this.initialized) {
                    this.options = options;
                    var toolbar = this.toolbar;
                    toolbar && toolbar.updateOptions(options), this.smartNarrativesEditorContainer && this.smartNarrativesEditorContainer.updateOptions(options);
                }
            }, QuillWrapper.prototype.initializeQuill = function(quillStatic) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.quillStatic = quillStatic, [ 4, this.rebuildQuillEditor() ];

                          case 1:
                            return _a.sent(), this.initialized = !0, this.quillStatic.debug("error"), [ 2 ];
                        }
                    });
                });
            }, QuillWrapper.prototype.getElement = function() {
                return this.$container;
            }, QuillWrapper.prototype.getContents = function() {
                if (this.initialized) return this.editor.getContents();
            }, QuillWrapper.prototype.setContents = function(contents) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assert(function() {
                    return _this.initialized;
                }, "initialized"), this.editor && this.editor.setContents(contents);
            }, QuillWrapper.prototype.resize = function(viewport) {
                this.$container.width(viewport.width), this.$container.height(viewport.height), 
                this.updateToolbar();
            }, QuillWrapper.prototype.setSelection = function(index, length) {
                this.editor && this.editor.setSelection(index, length);
            }, QuillWrapper.prototype.getSelection = function(focus) {
                if (this.editor) return this.editor.getSelection(focus);
            }, QuillWrapper.prototype.focus = function() {
                this.editor && 0 === $(document.activeElement).closest(this.$container).length && this.editor.focus();
            }, QuillWrapper.prototype.destroy = function() {
                this.host.setToolbar(null), this.toolbar = null, this.$container.remove(), this.$container = null, 
                this.destroyEditor();
            }, QuillWrapper.prototype.destroyEditor = function() {
                this.editor && (_.isEmpty(this.destroyEditorActions) || (_.forEach(this.destroyEditorActions, function(action) {
                    return action();
                }), this.destroyEditorActions = void 0), this.editor = null);
            }, QuillWrapper.prototype.getSelectionAtCursor = function() {
                var text = this.getTextWithoutTrailingBreak(), selection = this.getSelection(!0);
                if (selection && 0 === selection.length) {
                    var result = (0, _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_18__.sE)(selection.index, text);
                    return {
                        index: result.start,
                        length: result.end - result.start
                    };
                }
                return selection;
            }, QuillWrapper.prototype.getWord = function() {
                var selection = this.getSelectionAtCursor();
                return this.getTextWithoutTrailingBreak().slice(selection.index, selection.index + selection.length);
            }, QuillWrapper.prototype.getEditorContainer = function() {
                if (this.editor) return $(this.editor.container);
            }, QuillWrapper.prototype.setSelectionOfConditional = function(conditionalIndex) {
                var contents = this.getContents();
                if (contents) for (var currentIndex = 0, _i = 0, _a = contents.ops; _i < _a.length; _i++) {
                    var currentInsertOp = _a[_i];
                    if (!currentInsertOp) return void _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertFail("ops should not be undefined");
                    if (_.isString(currentInsertOp.insert)) currentIndex += currentInsertOp.insert.length; else if (_.isNumber(currentInsertOp.insert)) currentIndex += 1; else {
                        currentIndex += 1;
                        var options_7 = getCustomQuillFormatValue(currentInsertOp, QuillWrapper.smartNarrativesConditionalBlotClass.class);
                        if ((null == options_7 ? void 0 : options_7.conditionalIndex) === conditionalIndex) {
                            this.setSelection(currentIndex, 0);
                            break;
                        }
                    }
                }
            }, QuillWrapper.computeTransparentSmartNarrativesColor = function(color) {
                var rgbaColor = (0, _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_19__.WV)(color);
                return rgbaColor.A = QuillWrapper.smartNarrativesPlaceholderOpacity, (0, _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_19__.U8)(rgbaColor);
            }, QuillWrapper.prototype.getTextWithoutTrailingBreak = function() {
                return this.editor.getText().slice(0, -1);
            }, QuillWrapper.prototype.rebuildQuillEditor = function() {
                var _a;
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    var contents, supportsNarrativeExpressions, $editorDiv, $userSuggestionsContainer, config, uiComponentFactory, mentionConfigs, mentionHandler, linkInputTemplate, linkInputNode, toolbar_1, _b, linkTooltip_1, linkHandler, toolbar, toolbarElement, colorPicker_1, textChange_1, rootBlur, _this = this;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return contents = null, supportsNarrativeExpressions = this.options.supportsNarrativeExpressions, 
                            this.editor && (contents = this.editor.getContents()), this.$container.empty(), 
                            this.$container.keydown(function(e) {
                                var which = e.which;
                                e.ctrlKey && (0, _VisualsCommon_Utility_keyUtils__WEBPACK_IMPORTED_MODULE_20__.iZ)(which) && e.stopPropagation(), 
                                ((0, _VisualsCommon_Utility_keyUtils__WEBPACK_IMPORTED_MODULE_20__.Wl)(which) || (0, 
                                _VisualsCommon_Utility_keyUtils__WEBPACK_IMPORTED_MODULE_20__.SF)(which)) && e.stopPropagation(), 
                                (0, _VisualsCommon_Utility_keyUtils__WEBPACK_IMPORTED_MODULE_20__.rH)(which) && e.stopPropagation(), 
                                _VisualsCommon_Utility_browserUtils__WEBPACK_IMPORTED_MODULE_21__.M.isCtrlOrMeta(e) && 117 === e.keyCode && (_this.focusToolbar(), 
                                e.stopPropagation());
                            }), $editorDiv = $("<div>"), config = {
                                readOnly: this.readOnly,
                                formats: [ "bold", "italic", "underline", "font", "size", "link", "align", "color", "indent", "script", "list" ],
                                modules: {
                                    history: {
                                        userOnly: !0
                                    },
                                    keyboard: {
                                        bindings: {}
                                    }
                                },
                                placeholder: this.placeholderText
                            }, uiComponentFactory = this.host.getUIComponentFactory(), mentionConfigs = [], 
                            this.supportsAtMention ? (this.setupAtMentionFormat(), $userSuggestionsContainer = $("<div>"), 
                            mentionConfigs.push({
                                mentionCharacter: "@",
                                blotName: QuillWrapper.atMentionBlotClass.class,
                                initialize: function(componentFactory, insertBlot) {
                                    $userSuggestionsContainer.addClass(QuillWrapper.atMentionContainerClass.class).hide(), 
                                    _this.userSuggestionsComponent = componentFactory.createUserSuggestions($userSuggestionsContainer.get(0), function(user) {
                                        insertBlot({
                                            displayName: user.displayName,
                                            email: user.email,
                                            hoverContainer: _this.$mentionsHoverContainer,
                                            personCardComponent: _this.personCardComponent
                                        });
                                    });
                                },
                                hideSuggestions: function() {
                                    return $userSuggestionsContainer.hide(), _this.userSuggestionsComponent.hideSuggestions();
                                },
                                renderSuggestions: function(searchText, left, top) {
                                    $userSuggestionsContainer.css({
                                        left,
                                        top
                                    }).show(), _this.userSuggestionsComponent.showSuggestions(searchText);
                                },
                                pickSuggestion: function() {
                                    return _this.userSuggestionsComponent.pickSuggestion();
                                },
                                navigateSuggestions: function(direction) {
                                    return _this.userSuggestionsComponent.navigateSuggestions(direction);
                                }
                            }), config.formats.push(QuillWrapper.atMentionBlotClass.class), config.modules.keyboard.bindings.enter = {
                                handler: mentionHandler = function() {
                                    for (var propogateToDefault = !0, _i = 0, mentionConfigs_1 = mentionConfigs; _i < mentionConfigs_1.length; _i++) propogateToDefault = mentionConfigs_1[_i].pickSuggestion();
                                    return propogateToDefault;
                                },
                                key: 13
                            }, config.modules.keyboard.bindings.tab = {
                                handler: mentionHandler,
                                key: 9
                            }) : this.hierarchicalTabbing && (config.modules.keyboard.bindings.tab = {
                                handler: function() {
                                    return !0;
                                },
                                key: 9
                            }), _.isEmpty(mentionConfigs) || (config.modules.mention = {
                                save: function() {
                                    return _this.saveState();
                                },
                                mentions: mentionConfigs,
                                maxSearchLength: mentionDefaultMaxSearchLength,
                                componentFactory: uiComponentFactory
                            }, this.registerMentionModule()), supportsNarrativeExpressions && (config.formats.push(QuillWrapper.smartNarrativesBlotClass.class), 
                            config.formats.push(QuillWrapper.smartNarrativesConditionalBlotClass.class), config.formats.push(QuillWrapper.smartNarrativesFocusFormatAttributeName)), 
                            linkInputTemplate = buildToolbarLinkInputTemplate(this.localizationProvider), linkInputNode = LinkInput.buildNode(linkInputTemplate), 
                            this.readOnly ? [ 3, 4 ] : (toolbar_1 = this.toolbar, this.toolbar ? [ 3, 2 ] : (_b = this, 
                            [ 4, Toolbar.createToolbar(this.host, this, this.localizationProvider, linkInputNode, this.options) ]));

                          case 1:
                            return toolbar_1 = _b.toolbar = _c.sent(), (toolbarElement = toolbar_1.getElement()).addClass("unselectable"), 
                            toolbarElement.toggleClass("high-contrast", this.style.isHighContrast), config.modules.toolbar = {
                                container: toolbarElement.get(0)
                            }, [ 3, 3 ];

                          case 2:
                            toolbar_1.updateOptions(this.options), _c.label = 3;

                          case 3:
                            $editorDiv.attr("drag-resize-disabled", "true"), _c.label = 4;

                          case 4:
                            return this.destroyEditor(), this.destroyEditorActions = [], supportsNarrativeExpressions && (this.setUpSmartNarrativesFormat(), 
                            this.setUpSmartNarrativesConditionalFormat(), this.setUpSmartNarrativesFocusFormat()), 
                            this.editor = new this.quillStatic($editorDiv.get(0), config), this.readOnly || (linkTooltip_1 = new LinkInput(linkInputNode, this.editor, this.quillStatic, this.toolbar, this.options.featureSwitches), 
                            linkHandler = function(value) {
                                value ? (_this.editor.setSelection(_this.getSelectionAtCursor()), linkTooltip_1.open()) : linkTooltip_1.remove();
                            }, QuillWrapper.setUpFontFormat(this.quillStatic), (toolbar = this.editor.getModule("toolbar")).addHandler("link", linkHandler), 
                            uiComponentFactory && (toolbarElement = this.toolbar.getElement(), colorPicker_1 = new ColorPicker({
                                quill: this.editor,
                                uiComponentFactory,
                                $colorSwatch: toolbarElement.find(ColorPicker.colorSwatchGlyphClassAndSelector.selector),
                                $colorPickerButton: toolbarElement.find(ColorPicker.pickerButtonClassAndSelector.selector),
                                $colorPickerButtonWrapper: toolbarElement.find(ColorPicker.pickerButtonWrapperClassAndSelector.selector),
                                defaultColor: _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__.v.getThemeColor(this.style, _VisualsCommon_colorHelper__WEBPACK_IMPORTED_MODULE_22__.fA),
                                format: "color"
                            }), toolbar.addHandler("color", function() {
                                return colorPicker_1.applyFormat(colorPicker_1.getColor());
                            })), this.destroyEditorActions.push(function() {
                                toolbar.addHandler("link", void 0), toolbar.addHandler("color", void 0);
                            }), supportsNarrativeExpressions && uiComponentFactory && (this.smartNarrativesEditorContainer = new SmartNarrativesEditor({
                                container: this.toolbar.getElement(),
                                destroyEditorActions: this.destroyEditorActions,
                                evaluatedValues: this.options.evaluatedValues,
                                hostServices: this.host,
                                localizationProvider: this.localizationProvider,
                                onEditSmartNarrativePersist: this.textChanged,
                                quill: this.editor,
                                style: this.style,
                                toolbar: this.toolbar
                            }), this.smartNarrativesEditorContainer.getSmartNarrativesEditor()), this.supportsFormattingChangeIndication && (this.formattingSettingsContainer = new FormattingSettings({
                                container: this.toolbar.getElement(),
                                hostServices: this.host
                            }), this.formattingSettingsContainer.getTextboxFormattingSettings()), this.updateToolbar()), 
                            this.$container ? (this.$container.append($editorDiv), this.$mentionsHoverContainer && this.$container.append(this.$mentionsHoverContainer), 
                            $userSuggestionsContainer && this.$container.append($userSuggestionsContainer), 
                            contents && this.setContents(contents), supportsNarrativeExpressions || this.supportsFormattingChangeIndication ? (this.editor.keyboard.addBinding({
                                key: 83,
                                shiftKey: !0,
                                shortKey: !0
                            }, void 0, function() {
                                _this.saveState();
                            }), this.editor.on("text-change", textChange_1 = function(_change, _oldDelta, source) {
                                "api" !== source && (_this.isDirty = !0);
                            }), this.destroyEditorActions.push(function() {
                                _this.editor.off("text-change", textChange_1), textChange_1 = void 0;
                            })) : this.throttleTextChanged(), this.supportsFormattingChangeIndication && (null === (_a = this.formattingSettingsContainer.getTextboxFormattingSettings()) || void 0 === _a ? void 0 : _a.shouldListenToTextChanged()) && this.throttleTextChanged(), 
                            this.editor.root.addEventListener("blur", rootBlur = function(event) {
                                var target = event.relatedTarget || document.activeElement;
                                if (target) {
                                    if (_this.targetIsInToolbar(target, supportsNarrativeExpressions)) return;
                                    if ((supportsNarrativeExpressions || _this.supportsFormattingChangeIndication) && _this.saveState(), 
                                    QuillWrapper.willBrowserHandleFocus(target)) return;
                                }
                                _this.setSelection(null, null);
                            }, !1), this.destroyEditorActions.push(function() {
                                _this.editor.root.removeEventListener("blur", rootBlur, !1);
                            }), [ 2 ]) : [ 2 ];
                        }
                    });
                });
            }, QuillWrapper.prototype.throttleTextChanged = function() {
                var _a, _this = this, textChangeFunc = _.debounce(function() {
                    return _this.onTextChanged();
                }, null !== (_a = this.options.textChangeThrottle) && void 0 !== _a ? _a : QuillWrapper.textChangeThrottle), textChange = function(change, _oldDelta, source) {
                    if ("api" !== source) {
                        _this.isDirty = !0;
                        for (var _i = 0, _a = change.ops; _i < _a.length; _i++) {
                            var op = _a[_i];
                            if (QuillWrapper.isInsertOp(op)) {
                                var insertion = op.insert;
                                if (insertion && (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_16__.Oi)(insertion)) return _this.onTextChanged(), 
                                void textChangeFunc.cancel();
                            }
                        }
                        textChangeFunc();
                    }
                };
                this.editor.on("text-change", textChange), this.destroyEditorActions.push(function() {
                    _this.editor.off("text-change", textChange), textChangeFunc.cancel(), textChangeFunc = void 0;
                }), this.onPaste && this.$container.on("paste", function() {
                    return setTimeout(function() {
                        return _this.onPaste();
                    }, 0);
                });
            }, QuillWrapper.setUpFontFormat = function(quillStatic) {
                var parchment = quillStatic.import("parchment"), fontFormat = quillStatic.import(QuillWrapper.getFormatPath("font"));
                fontFormat.value = function(element) {
                    var key = QuillWrapper.camelize(fontFormat.keyName);
                    return _.escape((0, _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(element.style[key]));
                }, fontFormat.canAdd = function(node, value) {
                    return null != parchment.query(node, parchment.Scope.BLOT & (fontFormat.scope | parchment.Scope.TYPE)) && (null == fontFormat.whitelist || fontFormat.whitelist.indexOf((0, 
                    _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(_.unescape(value))) > -1);
                }, fontFormat.add = function(node, value) {
                    if (!fontFormat.canAdd(node, value)) return !1;
                    var key = QuillWrapper.camelize(fontFormat.keyName), normalizedValue = (0, _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(_.unescape(value));
                    return node.style[key] = normalizedValue, !0;
                };
            }, QuillWrapper.prototype.isFormatRegisteredWithQuill = function(customFormat) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.quillStatic, "quillStatic");
                var imports = this.quillStatic.imports;
                return !_.isEmpty(imports) && !!imports[QuillWrapper.getFormatPath(customFormat)];
            }, QuillWrapper.prototype.setUpSmartNarrativesFormat = function() {
                if (!this.isFormatRegisteredWithQuill(QuillWrapper.smartNarrativesBlotClass.class)) {
                    var SmartNarrativesBlot = function(_super) {
                        function SmartNarrativesBlot() {
                            return null !== _super && _super.apply(this, arguments) || this;
                        }
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__extends)(SmartNarrativesBlot, _super), 
                        SmartNarrativesBlot.create = function(options) {
                            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(options, "options");
                            var smartNarrativesText, smartNarrativesWrapperNode = _super.create.call(this, options.objRef), underlineColor = _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__.v.getDataColorByIndex(options.style, 0);
                            if (options.objRef === QuillPlaceholder) {
                                smartNarrativesText = this.placeholderText;
                                var placeholderColor = QuillWrapper.computeTransparentSmartNarrativesColor(underlineColor);
                                $(smartNarrativesWrapperNode).addClass(QuillWrapper.smartNarrativesPlaceholderClass.class).css("background-color", placeholderColor);
                            } else {
                                smartNarrativesText = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.YA)(options.objRef, options.evaluatedValues) || "";
                                var smartNarrativesEventType_1 = "".concat(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.NN).concat(QuillWrapper.smartNarrativesBlotClass.selector);
                                options.destroyEditorActions && ($(smartNarrativesWrapperNode).on(smartNarrativesEventType_1, function() {
                                    options.onSelectSmartNarrativesBlot(options.objRef);
                                }), options.destroyEditorActions.push(function() {
                                    $(smartNarrativesWrapperNode).off(smartNarrativesEventType_1);
                                }));
                            }
                            return $(smartNarrativesWrapperNode).attr(QuillWrapper.smartNarrativesBlotClass.class, options.objRef).attr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.bd, "false").css("border-bottom", "1px solid ".concat(underlineColor)).data(QuillWrapper.smartNarrativesBlotClass.class, options), 
                            smartNarrativesText ? $(smartNarrativesWrapperNode).text(smartNarrativesText) : QuillWrapper.appendHiddenSmartNarrativesDisplay(smartNarrativesWrapperNode, options.localizationProvider.get("Visual_SmartNarratives_TextBox_Hidden")), 
                            smartNarrativesWrapperNode;
                        }, SmartNarrativesBlot.value = function(node) {
                            return $(node).data(QuillWrapper.smartNarrativesBlotClass.class);
                        }, SmartNarrativesBlot.blotName = QuillWrapper.smartNarrativesBlotClass.class, SmartNarrativesBlot.className = QuillWrapper.smartNarrativesBlotClass.class, 
                        SmartNarrativesBlot.placeholderText = "                ", SmartNarrativesBlot.tagName = "span", 
                        SmartNarrativesBlot;
                    }(this.quillStatic.import("blots/embed"));
                    this.quillStatic.register(SmartNarrativesBlot);
                }
            }, QuillWrapper.prototype.setUpSmartNarrativesConditionalFormat = function() {
                if (!this.isFormatRegisteredWithQuill(QuillWrapper.smartNarrativesConditionalBlotClass.class)) {
                    var SmartNarrativesConditionalBlot = function(_super) {
                        function SmartNarrativesConditionalBlot() {
                            return null !== _super && _super.apply(this, arguments) || this;
                        }
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__extends)(SmartNarrativesConditionalBlot, _super), 
                        SmartNarrativesConditionalBlot.create = function(options) {
                            if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(options, "options"), 
                            (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.ki)(options.definition)) {
                                var smartNarrativesConditionalWrapperNode = _super.create.call(this, options.objRef), smartNarrativesConditionalEventType = "".concat(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.NN).concat(QuillWrapper.smartNarrativesConditionalBlotClass.selector);
                                $(smartNarrativesConditionalWrapperNode).attr(QuillWrapper.smartNarrativesConditionalBlotClass.class, options.objRef).attr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.bd, "false").data(QuillWrapper.smartNarrativesConditionalBlotClass.class, options);
                                for (var isHiddenNewline = !1, textRuns = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.kO)(options.definition, options.evaluatedValues), underlineColor = _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__.v.getDataColorByIndex(options.style, 0), _loop_3 = function(textRunChild) {
                                    var smartNarrativesConditionalText = $("<span>");
                                    if ((0, _VisualsData_types_valueRef__WEBPACK_IMPORTED_MODULE_9__.U)(textRunChild.value)) {
                                        var textRunChildObjRef_1 = textRunChild.value.selector.id, value = (0, _textboxEvaluator__WEBPACK_IMPORTED_MODULE_6__.YA)(textRunChildObjRef_1, options.evaluatedValues);
                                        if (!value) return "continue";
                                        var conditionalText = value;
                                        smartNarrativesConditionalText.addClass(QuillWrapper.smartNarrativesBlotClass.class).css("border-bottom", "1px solid ".concat(underlineColor)).text(conditionalText), 
                                        options.destroyEditorActions && (smartNarrativesConditionalText.on(smartNarrativesConditionalEventType, function() {
                                            options.onSelectSmartNarrativesBlot(textRunChildObjRef_1);
                                        }), options.destroyEditorActions.push(function() {
                                            smartNarrativesConditionalText.off(smartNarrativesConditionalEventType);
                                        }));
                                    } else textRunChild.value === _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.d$ ? (smartNarrativesConditionalText.text(_Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.mj), 
                                    isHiddenNewline = !0) : smartNarrativesConditionalText.text(textRunChild.value);
                                    $(smartNarrativesConditionalWrapperNode).append(smartNarrativesConditionalText);
                                }, _i = 0, textRuns_1 = textRuns; _i < textRuns_1.length; _i++) _loop_3(textRuns_1[_i]);
                                return 0 === smartNarrativesConditionalWrapperNode.childElementCount ? QuillWrapper.appendHiddenSmartNarrativesDisplay(smartNarrativesConditionalWrapperNode, options.localizationProvider.get("Visual_SmartNarratives_TextBox_Hidden")) : smartNarrativesConditionalWrapperNode.innerText === _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.mj && ($(smartNarrativesConditionalWrapperNode).addClass(QuillWrapper.smartNarrativesNewlineClass.class).attr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.bd, "true").empty().text(_Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.mj), 
                                isHiddenNewline && $(smartNarrativesConditionalWrapperNode).addClass(QuillWrapper.smartNarrativesHiddenClass.class)), 
                                options.destroyEditorActions && ($(smartNarrativesConditionalWrapperNode).on(smartNarrativesConditionalEventType, function() {
                                    options.onSelectSmartNarrativesConditionalBlot(options.conditionalIndex);
                                }), options.destroyEditorActions.push(function() {
                                    $(smartNarrativesConditionalWrapperNode).off(smartNarrativesConditionalEventType);
                                })), smartNarrativesConditionalWrapperNode;
                            }
                        }, SmartNarrativesConditionalBlot.value = function(node) {
                            return $(node).data(QuillWrapper.smartNarrativesConditionalBlotClass.class);
                        }, SmartNarrativesConditionalBlot.blotName = QuillWrapper.smartNarrativesConditionalBlotClass.class, 
                        SmartNarrativesConditionalBlot.className = QuillWrapper.smartNarrativesConditionalBlotClass.class, 
                        SmartNarrativesConditionalBlot.tagName = "span", SmartNarrativesConditionalBlot;
                    }(this.quillStatic.import("blots/embed"));
                    this.quillStatic.register(SmartNarrativesConditionalBlot);
                }
            }, QuillWrapper.prototype.setUpSmartNarrativesFocusFormat = function() {
                var _a, focusFormatPath = QuillWrapper.getFormatPath(QuillWrapper.smartNarrativesFocusFormatAttributeName);
                if (!this.isFormatRegisteredWithQuill(focusFormatPath)) {
                    var BackgroundFormat = this.quillStatic.import(QuillWrapper.getFormatPath("background"));
                    BackgroundFormat.attrName = QuillWrapper.smartNarrativesFocusFormatAttributeName, 
                    this.quillStatic.register(((_a = {})[focusFormatPath] = BackgroundFormat, _a));
                }
            }, QuillWrapper.prototype.setupAtMentionFormat = function() {
                if (!this.isFormatRegisteredWithQuill(QuillWrapper.atMentionBlotClass.class)) {
                    var AtMentionBlot = function(_super) {
                        function AtMentionBlot() {
                            return null !== _super && _super.apply(this, arguments) || this;
                        }
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__extends)(AtMentionBlot, _super), 
                        AtMentionBlot.create = function(options) {
                            var _a;
                            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(options, "options");
                            var atMentionNode = _super.create.call(this, options.email);
                            return $(atMentionNode).attr(QuillWrapper.atMentionBlotClass.class, options.email).attr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.bd, "false").data(QuillWrapper.atMentionBlotClass.class, options).on(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.Wo, function() {
                                options.personCardComponent.showUser(options.email);
                                var bounds = atMentionNode.getBoundingClientRect();
                                options.hoverContainer.stop(!0, !0).css({
                                    left: atMentionNode.offsetLeft,
                                    top: atMentionNode.offsetTop - bounds.height - AtMentionBlot.topPaddingOffset
                                }).delay(200).queue(function(next) {
                                    $(atMentionNode).is(":hover") && options.hoverContainer.fadeIn("fast"), next();
                                });
                            }).on(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_14__.xw, function() {
                                options.hoverContainer.delay(500).queue(function(next) {
                                    !function fadeOutDelay(next) {
                                        options.hoverContainer.is(":hover") ? setTimeout(function() {
                                            return fadeOutDelay(next);
                                        }, 500) : next();
                                    }(next);
                                }).fadeOut("fast");
                            }).css("color", "#1453b3").text(null !== (_a = "@" + options.displayName) && void 0 !== _a ? _a : options.email), 
                            atMentionNode;
                        }, AtMentionBlot.value = function(node) {
                            return $(node).data(QuillWrapper.atMentionBlotClass.class);
                        }, AtMentionBlot.blotName = QuillWrapper.atMentionBlotClass.class, AtMentionBlot.className = QuillWrapper.atMentionBlotClass.class, 
                        AtMentionBlot.tagName = "span", AtMentionBlot.topPaddingOffset = 24, AtMentionBlot;
                    }(this.quillStatic.import("blots/embed"));
                    this.quillStatic.register(AtMentionBlot);
                }
            }, QuillWrapper.prototype.registerMentionModule = function() {
                if (!this.quillStatic.imports["modules/mention"]) {
                    var MentionModule = function() {
                        function MentionModule(quill, options) {
                            var _this = this;
                            this.options = options, this.quill = quill, _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assert(function() {
                                return !_.isEmpty(options.mentions);
                            }, "No mention configuration"), quill.on("text-change", function(delta, oldDelta, source) {
                                return _this.onTextChange(delta, oldDelta, source);
                            });
                            for (var _loop_4 = function(config) {
                                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assert(function() {
                                    return 1 === config.mentionCharacter.length;
                                }, "Expected single mention character"), config.initialize(options.componentFactory, function(blotOptions) {
                                    return _this.insertBlot(config.blotName, blotOptions);
                                });
                            }, _i = 0, _a = options.mentions; _i < _a.length; _i++) _loop_4(_a[_i]);
                            this.addKeyBindings();
                        }
                        return MentionModule.prototype.addKeyBindings = function() {
                            var _this = this, keyHandler = function(direction) {
                                for (var propagateToDefault = !0, _i = 0, _a = _this.options.mentions; _i < _a.length; _i++) propagateToDefault = _a[_i].navigateSuggestions(direction);
                                return propagateToDefault;
                            };
                            this.quill.keyboard.addBinding({
                                key: 40
                            }, void 0, function() {
                                return keyHandler(0);
                            }), this.quill.keyboard.addBinding({
                                key: 38
                            }, void 0, function() {
                                return keyHandler(1);
                            }), this.quill.keyboard.addBinding({
                                key: 27
                            }, void 0, function() {
                                return function() {
                                    for (var propagateToDefault = !0, _i = 0, _a = _this.options.mentions; _i < _a.length; _i++) propagateToDefault = _a[_i].hideSuggestions();
                                    return propagateToDefault;
                                }();
                            });
                        }, MentionModule.prototype.onTextChange = function(_delta, _oldDelta, source) {
                            var _a;
                            if ("user" === source) {
                                this.insertPosition = void 0, this.currentPosition = void 0;
                                var range = this.quill.getSelection();
                                if (range) {
                                    this.currentPosition = range.index;
                                    var start = Math.max(0, this.currentPosition - this.options.maxSearchLength), text = this.quill.getText(start, this.currentPosition - start), mentionConfig = (_a = this.getMentionConfig(text)).mentionConfig;
                                    if (mentionConfig) {
                                        for (var searchText = text.substring(_a.mentionCharacterPosition + 1), _i = 0, _b = this.options.mentions; _i < _b.length; _i++) {
                                            var mention = _b[_i];
                                            mention !== mentionConfig && mention.hideSuggestions();
                                        }
                                        this.insertPosition = this.currentPosition - searchText.length - 1;
                                        var cursorBounds = this.quill.getBounds(this.insertPosition), editorBounds = this.quill.root.getBoundingClientRect(), left = Math.min(cursorBounds.left, editorBounds.width - MentionModule.SuggestionWidth);
                                        mentionConfig.renderSuggestions(searchText, left, cursorBounds.height + cursorBounds.bottom);
                                    } else this.hideAllSuggestions();
                                }
                            }
                        }, MentionModule.prototype.getMentionConfig = function(text) {
                            for (var _i = 0, _a = this.options.mentions; _i < _a.length; _i++) {
                                var mention = _a[_i], mentionCharacterPosition = text.lastIndexOf(mention.mentionCharacter);
                                if (-1 !== mentionCharacterPosition) return {
                                    mentionConfig: mention,
                                    mentionCharacterPosition
                                };
                            }
                            return {
                                mentionConfig: void 0,
                                mentionCharacterPosition: -1
                            };
                        }, MentionModule.prototype.insertBlot = function(blotName, options) {
                            this.hideAllSuggestions(), _.isNil(this.insertPosition) || _.isNil(this.currentPosition) || (this.quill.deleteText(this.insertPosition, this.currentPosition - this.insertPosition, "api"), 
                            this.quill.insertEmbed(this.insertPosition, blotName, options, "api"), this.quill.setSelection(this.insertPosition + 1, 0, "api"), 
                            this.options.save());
                        }, MentionModule.prototype.hideAllSuggestions = function() {
                            for (var _i = 0, _a = this.options.mentions; _i < _a.length; _i++) _a[_i].hideSuggestions();
                        }, MentionModule.SuggestionWidth = 200, MentionModule;
                    }();
                    this.quillStatic.register("modules/mention", MentionModule);
                }
            }, QuillWrapper.willBrowserHandleFocus = function(element) {
                return "SELECT" === element.tagName || "INPUT" === element.tagName || !!element.getAttribute("contentEditable");
            }, QuillWrapper.prototype.targetIsInToolbar = function(element, supportsNarrativeExpressions) {
                if (!this.toolbar) return !1;
                if ("A" === element.tagName || "BUTTON" === element.tagName || supportsNarrativeExpressions) {
                    var $element = $(element), toolbarElement = this.toolbar.getElement();
                    return toolbarElement.is(":visible") && ($element.is(toolbarElement) || $element.closest(toolbarElement).length > 0);
                }
                return !1;
            }, QuillWrapper.prototype.onTextChanged = function() {
                var _a;
                this.textChanged(), this.supportsFormattingChangeIndication && (null === (_a = this.formattingSettingsContainer.getTextboxFormattingSettings()) || void 0 === _a || _a.onTextChanged());
            }, QuillWrapper.prototype.saveState = function() {
                var _a, _b;
                null === (_b = null === (_a = this.editor) || void 0 === _a ? void 0 : _a.history) || void 0 === _b || _b.clear(), 
                this.onTextChanged();
            }, QuillWrapper.isInsertOp = function(op) {
                return null != op.insert;
            }, QuillWrapper.camelize = function(name) {
                var parts = name.split("-"), rest = _.map(parts.slice(1), function(part) {
                    return part[0].toUpperCase() + part.slice(1);
                }).join("");
                return parts[0] + rest;
            }, QuillWrapper.prototype.focusToolbar = function() {
                if (!this.editor || !this.toolbar) return !1;
                _JsCommon_focus_focusManager__WEBPACK_IMPORTED_MODULE_11__.IK.focusChildInGroup(this.toolbar.getElement().get(0));
            }, QuillWrapper.appendHiddenSmartNarrativesDisplay = function(container, title) {
                var prefix = $("<span>"), hidden = $("<span>"), suffix = $("<span>");
                prefix.text("["), hidden.addClass("glyphicon glyph-mini pbi-glyph-hide3"), suffix.text("]"), 
                $(container).addClass(QuillWrapper.smartNarrativesHiddenClass.class).append(prefix, hidden, suffix).attr("title", title);
            }, QuillWrapper.prototype.updateToolbar = function() {
                var _a;
                if (this.toolbar) {
                    var supportsNarrativeExpressions = null === (_a = this.options) || void 0 === _a ? void 0 : _a.supportsNarrativeExpressions;
                    this.host.setToolbar(this.toolbar.getElement(), {
                        preferHorizontalLayout: supportsNarrativeExpressions,
                        theme: supportsNarrativeExpressions ? "neutralGrayTheme" : "darkTheme"
                    });
                }
            }, QuillWrapper.quillFormatsPath = "formats", QuillWrapper.atMentionBlotClass = (0, 
            _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("at-mention"), QuillWrapper.atMentionContainerClass = (0, 
            _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("mentions-container"), 
            QuillWrapper.smartNarrativesBlotClass = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("smart-narratives-blot"), 
            QuillWrapper.smartNarrativesConditionalBlotClass = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("smart-narratives-conditional-blot"), 
            QuillWrapper.smartNarrativesFocusFormatAttributeName = "smartNarrativesFocus", QuillWrapper.smartNarrativesHiddenClass = (0, 
            _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("smart-narratives-hidden"), 
            QuillWrapper.smartNarrativesNewlineClass = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("smart-narratives-newline"), 
            QuillWrapper.smartNarrativesPlaceholderClass = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("placeholder"), 
            QuillWrapper.smartNarrativesPlaceholderOpacity = .2, QuillWrapper.textChangeThrottle = 600, 
            QuillWrapper;
        }(), Toolbar = function() {
            function Toolbar(host, quillWrapper, localizationProvider, linkInput, options) {
                this.host = host, this.quillWrapper = quillWrapper, this.localizationProvider = localizationProvider, 
                this.linkInput = linkInput;
            }
            return Toolbar.createToolbar = function(host, quillWrapper, localizationProvider, linkInput, options) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    var toolbar;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, (toolbar = new Toolbar(host, quillWrapper, localizationProvider, linkInput, options)).init(localizationProvider, options) ];

                          case 1:
                            return _a.sent(), [ 2, _VisualsCommon_Utility_promise__WEBPACK_IMPORTED_MODULE_23__.J.resolve(toolbar) ];
                        }
                    });
                });
            }, Toolbar.prototype.init = function(localizationProvider, options) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    var focusNavigationMode, fontColorButtons, container, fontOptions, boldButton, italicButton, underlineButton, bulletedListButton, numberedListButton, linkTooltip, linkButton, toolbarContent, formattingButtonsTopRow, formattingButtonsBottomRow, formattingButtons, uiComponentFactory, addLinkContainer, _a, onEscape;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.featureSwitches = options.featureSwitches, this.updateOptions(options), 
                            focusNavigationMode = options.hierarchicalTabbing ? "Hierarchy" : "Group", fontColorButtons = ColorPicker.buildFontColorButtons(localizationProvider.get("Visual_FontColor"), localizationProvider.get("Visual_FontColor_Picker"), options.onRenderTooltip), 
                            container = this.container = div().addClass("toolbar").addClass("themeableElement").attr("aria-label", getTooltip("FontControl", localizationProvider)).attr("focus-nav-mode", focusNavigationMode), 
                            fontOptions = formatGroup(), _.size(this.fontFamilies) > 1 && fontOptions.append(this.fontFamilyPicker), 
                            _.size(this.fontSizes) > 1 && fontOptions.append(this.fontSizePicker), boldButton = formatButton(options.onRenderTooltip, getTooltip("Bold", localizationProvider), "bold", void 0, void 0, void 0), 
                            italicButton = formatButton(options.onRenderTooltip, getTooltip("Italic", localizationProvider), "italic", null, "italic", !0), 
                            underlineButton = formatButton(options.onRenderTooltip, getTooltip("Underline", localizationProvider), "underline", void 0, void 0, void 0), 
                            bulletedListButton = formatButton(options.onRenderTooltip, getTooltip("BulletedList", localizationProvider), "list", "bullet", "bulletedlist", !0), 
                            numberedListButton = formatButton(options.onRenderTooltip, getTooltip("NumberedList", localizationProvider), "list", "ordered", "numberedlist", !0), 
                            linkTooltip = getTooltip("Link", localizationProvider), linkButton = formatButton(options.onRenderTooltip, linkTooltip, "link", void 0, void 0, void 0), 
                            toolbarContent = div().addClass("toolbar-content"), this.featureSwitches && this.featureSwitches.onObject ? (container.addClass("on-object"), 
                            toolbarContent.addClass("on-object"), formattingButtonsTopRow = div().append(fontOptions), 
                            formattingButtonsBottomRow = div().append(formatGroup().append(boldButton).append(italicButton).append(underlineButton)).append(formatGroup().append(this.textAlignmentGroup)).append(fontColorButtons), 
                            this.featureSwitches.textboxSuperSubScriptBulletedList && (formattingButtonsTopRow.append(formatGroup().append(bulletedListButton)).append(formatGroup().append(numberedListButton)), 
                            formattingButtonsBottomRow.append(formatGroup().append(this.textScriptGroup))), 
                            formattingButtonsTopRow.append(formatGroup().append(this.textIndentGroup)), formattingButtons = div().append(formattingButtonsTopRow).append(formattingButtonsBottomRow), 
                            toolbarContent.append(formattingButtons).append(getVerticalDivider()), uiComponentFactory = this.host.getUIComponentFactory(), 
                            (_a = uiComponentFactory) ? [ 4, this.getAddLinkContainer(linkTooltip, uiComponentFactory) ] : [ 3, 2 ]) : [ 3, 3 ];

                          case 1:
                            _a = _b.sent(), _b.label = 2;

                          case 2:
                            return (addLinkContainer = _a) && toolbarContent.append(addLinkContainer).append(getVerticalDivider()), 
                            [ 3, 4 ];

                          case 3:
                            fontOptions.append(fontColorButtons), toolbarContent.append(fontOptions).append(formatGroup().append(boldButton).append(italicButton).append(underlineButton)).append(formatGroup().append(this.textAlignmentGroup)).append(formatGroup().append(this.textIndentGroup)).append(formatGroup().append(linkButton).append(this.linkInput)), 
                            this.featureSwitches && this.featureSwitches.textboxSuperSubScriptBulletedList && (toolbarContent.append(formatGroup().append(this.textScriptGroup)).append(formatGroup().append(bulletedListButton)).append(formatGroup().append(numberedListButton)), 
                            toolbarContent.css("width", this.getWidth() + "px")), _b.label = 4;

                          case 4:
                            return container.append(toolbarContent), options.supportsNarrativeExpressions && (toolbarContent.addClass("fixed-size"), 
                            container.append(smartNarrativesEditor())), options.supportsFormattingChangeIndication && !this.quillWrapper.readOnly && container.append(formattingSettingsGroup()), 
                            (onEscape = this.onEscape) && container.on("keydown", function(event) {
                                27 === event.keyCode && (event.stopPropagation(), event.preventDefault(), onEscape());
                            }), [ 2 ];
                        }
                    });
                });
            }, Toolbar.prototype.getAddLinkContainer = function(linkTooltip, uiComponentFactory) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    var container;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return container = formatGroup(), [ 4, new MiniToolbarLargeButton({
                                inputArgs: {
                                    disabled: !1,
                                    iconName: "WebGetLink_16",
                                    iconColors: [ "" ],
                                    label: linkTooltip,
                                    title: linkTooltip
                                },
                                outputArgs: {
                                    clicked: function() {},
                                    ready: function() {}
                                },
                                uiComponentFactory
                            }).attach(container) ];

                          case 1:
                            return _a.sent(), container.find("button").addClass("ql-link"), container.append(this.linkInput), 
                            [ 2, _VisualsCommon_Utility_promise__WEBPACK_IMPORTED_MODULE_23__.J.resolve(container) ];
                        }
                    });
                });
            }, Toolbar.prototype.getElement = function() {
                return this.container;
            }, Toolbar.prototype.updateOptions = function(options) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(options, "options");
                var defaultFont = options.defaultFont;
                this.onEscape = options.onEscape, this.updateFontFamilyUI(defaultFont, options.fontFamilies, options.onRenderTooltip), 
                this.updateFontSizeUI(defaultFont, options.fontSizes, options.onRenderTooltip), 
                this.updateTextAlignmentUI(options.onRenderTooltip), this.updateTextIndent(options.onRenderTooltip), 
                this.featureSwitches && this.featureSwitches.textboxSuperSubScriptBulletedList && this.updateTextScriptUI(options.onRenderTooltip);
            }, Toolbar.prototype.updateFontSizeUI = function(defaultFont, fontSizes, onRenderTooltip) {
                var fontSizeFormatPath = QuillWrapper.getFormatPath("size");
                this.updateStyleAllowList(this.quillWrapper.quillStatic, "size", null, fontSizeFormatPath, !0), 
                this.fontSizes = _.map(fontSizes, function(size) {
                    return {
                        label: "".concat(size),
                        value: "".concat(size, "pt")
                    };
                }), this.defaultFontSize = "".concat(defaultFont.size.pt, "pt"), this.fontSizePicker ? updatePicker(this.fontSizePicker, this.fontSizes, this.defaultFontSize) : this.fontSizePicker = picker(getTooltip("Size", this.localizationProvider), this.fontSizes, "size", this.defaultFontSize, onRenderTooltip);
            }, Toolbar.prototype.updateFontFamilyUI = function(defaultFont, fontFamilies, onRenderTooltip) {
                var fontFamilyValues = fontFamilies.map(function(font) {
                    return (0, _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(getCSSFromFont(font));
                }), fontFamilyFormatPath = QuillWrapper.getFormatPath("font");
                this.updateStyleAllowList(this.quillWrapper.quillStatic, "font", fontFamilyValues, fontFamilyFormatPath, !0), 
                this.fontFamilies = _.map(fontFamilies, function(font) {
                    return {
                        label: font,
                        value: _.escape((0, _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(getCSSFromFont(font)))
                    };
                }), this.defaultFontFamily = _.escape((0, _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__._b)(getCSSFromFont(defaultFont.family))), 
                this.fontFamilyPicker ? updatePicker(this.fontFamilyPicker, this.fontFamilies, this.defaultFontFamily) : this.fontFamilyPicker = picker(getTooltip("Font", this.localizationProvider), this.fontFamilies, "font", this.defaultFontFamily, onRenderTooltip, function($option, option) {
                    return $option.css("font-family", option.value), $option;
                });
            }, Toolbar.prototype.updateTextAlignmentUI = function(onRenderTooltip) {
                var defaultTextAlignment = this.defaultTextAlignment = DefaultAlignment;
                this.textAlignments = _.map(TextAlignments, function(alignment) {
                    var alignmentLowerCase = alignment.toLowerCase();
                    return {
                        label: alignment,
                        value: alignment === defaultTextAlignment ? "" : alignmentLowerCase,
                        glyph: "align".concat(alignmentLowerCase)
                    };
                });
                var textAlignmentValues = _.map(this.textAlignments, function(alignment) {
                    return alignment.value;
                }), textAlignmentFormatPath = QuillWrapper.getFormatPath("align");
                this.updateAllowList(this.quillWrapper.quillStatic, textAlignmentFormatPath, textAlignmentValues), 
                this.textAlignmentGroup || (this.textAlignmentGroup = toggleGroup(0, this.textAlignments, "align", 0, this.localizationProvider, !1, onRenderTooltip));
            }, Toolbar.prototype.updateTextIndent = function(onRenderTooltip) {
                this.textIndent = _.map(TextIndent, function(indent) {
                    return {
                        label: "".concat("+1" === indent ? "Increase" : "Decrease", "Indent"),
                        value: indent,
                        glyph: "+1" === indent ? "increaseindent" : "decreaseindent"
                    };
                }), this.textIndentGroup || (this.textIndentGroup = toggleGroup(0, this.textIndent, "indent", 0, this.localizationProvider, !0, onRenderTooltip));
            }, Toolbar.prototype.updateTextScriptUI = function(onRenderTooltip) {
                this.textScripts = _.map(TextScriptTypes, function(script) {
                    var scriptLowerCase = script.toLowerCase();
                    return {
                        label: script,
                        value: scriptLowerCase,
                        glyph: scriptLowerCase + "script"
                    };
                });
                var textScriptValues = _.map(this.textScripts, function(script) {
                    return script.value;
                }), textScriptFormatPath = QuillWrapper.getFormatPath("script");
                this.updateAllowList(this.quillWrapper.quillStatic, textScriptFormatPath, textScriptValues), 
                this.textScriptGroup || (this.textScriptGroup = toggleGroup(0, this.textScripts, "script", 0, this.localizationProvider, !0, onRenderTooltip));
            }, Toolbar.prototype.updateStyleAllowList = function(quillStatic, attributorName, newAllowList, destinationPath, overwrite) {
                void 0 === overwrite && (overwrite = !1), this.updateAllowList(quillStatic, "attributors/style/" + attributorName, newAllowList, destinationPath, overwrite);
            }, Toolbar.prototype.updateAllowList = function(quillStatic, attributorPath, newAllowList, destinationPath, overwrite) {
                void 0 === overwrite && (overwrite = !1);
                var attributor = quillStatic.import(attributorPath);
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(attributor, 'No attributor was found in the path "' + attributorPath + '"'), 
                attributor.whitelist = newAllowList, quillStatic.register(destinationPath || attributorPath, attributor, overwrite);
            }, Toolbar.prototype.getWidth = function() {
                return 750;
            }, Toolbar;
        }();
        function linkTooltipTemplateGenerator(removeText, doneText, editText, inputLinkText) {
            return $('\n                        <a href="#" class="ql-preview" target="_blank"></a>\n                        <input class="input" type="text" aria-label="'.concat(inputLinkText, '">\n                        <span class="bar">&nbsp;|&nbsp;</span>\n                        <button class="ql-action ql-save">').concat(doneText, '</button>\n                        <button class="ql-action ql-edit">').concat(editText, '</button>\n                        <button class="ql-remove">').concat(removeText, "</button>\n                    "));
        }
        function buildToolbarLinkInputTemplate(localizationProvider) {
            var template = div(), doneText = localizationProvider.get("RichTextbox_Link_Done"), removeText = localizationProvider.get("RichTextbox_Link_Remove"), editText = localizationProvider.get("RichTextbox_Link_Edit"), inputLinkText = getTooltip("Link", localizationProvider);
            return template.append(linkTooltipTemplateGenerator(removeText, doneText, editText, inputLinkText)), 
            template.html();
        }
        function formatGroup() {
            return span().addClass("ql-formats");
        }
        function smartNarrativesEditor() {
            return div().addClass(smartNarrativesEditorClass.class);
        }
        function formattingSettingsGroup() {
            return div().addClass(formattingSettingsClass.class);
        }
        function div() {
            return $("<div>");
        }
        function span() {
            return $("<span>");
        }
        function button() {
            return $("<button>");
        }
        function toggleGroup(title, list, format, defaultValue, localizationProvider, newFontFamily, onRenderTooltip) {
            return list.map(function(option) {
                var glyph = null != option.glyph ? option.glyph : format + option.value;
                return formatButton(onRenderTooltip, getTooltip(option.label, localizationProvider), format, option.value, glyph, newFontFamily);
            });
        }
        function picker(tooltip, list, format, defaultValue, onRenderTooltip, optionModifier) {
            return selector(tooltip, list, onRenderTooltip, defaultValue, optionModifier).addClass("ql-" + format + " ql-picker");
        }
        function updatePicker(picker, list, defaultValue, optionModifier) {
            return updateSelector(picker, list, defaultValue, optionModifier);
        }
        function selector(tooltip, list, onRenderTooltip, defaultValue, optionModifier) {
            var $selector = $("<select>").attr("aria-label", tooltip).addClass("themeableElementCustom").append(options(list, defaultValue, optionModifier));
            return applyTooltip($selector, tooltip, onRenderTooltip), $selector;
        }
        function updateSelector(selector, list, defaultValue, optionModifier) {
            return selector.empty().append(options(list, defaultValue, optionModifier));
        }
        function options(list, defaultValue, optionModifier) {
            return _.map(list, function(option) {
                var $option = $("<option>").text(option.label);
                return option.value === defaultValue ? $option.attr("selected", "selected") : $option.attr("value", option.value), 
                void 0 !== optionModifier && ($option = optionModifier($option, option)), $option;
            });
        }
        function applyTooltip(element, tooltip, onRenderTooltip) {
            var ref;
            element.on("focus mouseenter", function(e) {
                ref = onRenderTooltip(element.get(0), tooltip);
            }), element.on("blur mouseleave", function(e) {
                ref && ref.close(), ref = null;
            }), element.on("keydown", function(e) {
                ref && 27 === e.keyCode && (event.stopPropagation(), event.preventDefault(), ref.close(), 
                ref = null);
            });
        }
        function formatButton(onRenderTooltip, tooltip, format, value, glyph, newFontFamily) {
            var $button = button();
            return $button.attr("aria-label", tooltip), applyTooltip($button, tooltip, onRenderTooltip), 
            $button.on("click", function(e) {
                e.target.setAttribute("aria-pressed", $button.hasClass("ql-active") ? "false" : "true");
            }), null != format && $button.addClass("ql-" + format), null != value && $button.attr("value", value), 
            null == glyph && (null != format && (glyph = format), null != value && (glyph = (glyph || "") + value)), 
            $button.addClass("themeableElementCustom"), null != glyph && newFontFamily ? ($button.addClass("pbi-glyph-" + glyph), 
            $button.addClass(format), $button.css("font-family", "PowrMDL2")) : $button.addClass("powervisuals-glyph " + glyph), 
            $button;
        }
        function getTooltip(name, localizationProvider) {
            return localizationProvider.get("RichTextbox_" + name + "_ToolTip");
        }
        function getVerticalDivider() {
            return div().addClass("vertical-divider");
        }
        var smartNarrativesEditorClass = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("smart-narratives-editor"), formattingSettingsClass = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("formatting-settings"), LinkInput = function() {
            function LinkInput(container, quill, quillStatic, toolbar, visualFeatureSwitches) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(container, "container must have a value"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(quill, "quill must have a value"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(quillStatic, "quillStatic"), 
                this.$container = container, this.quill = quill, this.quillStatic = quillStatic, 
                this.$preview = this.$container.find("a.ql-preview"), this.$textbox = this.$container.find("input[type=text]"), 
                this.textbox = this.$textbox[0], this.$action = this.$container.find(".ql-action"), 
                this.toolbar = toolbar, this.hide(), this.featureSwitches = visualFeatureSwitches, 
                this.$textbox.on("keydown", function(event) {
                    13 === event.keyCode ? _this.onSave(event) : 27 === event.keyCode && _this.onHide(event);
                }), [ "click", "touchstart" ].forEach(function(name) {
                    _this.$action.on(name, function(event) {
                        _this.$container.hasClass(LinkInput.editingClass) ? _this.onSave(event) : _this.onEdit(event);
                    }), _this.$container.find(".ql-remove").on(name, function(event) {
                        return _this.onRemove(event);
                    });
                }), quill.on("selection-change", function(range) {
                    var _a;
                    if (null != range || !_this.isEditing) {
                        if (_this.toolbar.getElement().find(".toolbar-content > .ql-formats > button").each(function(i, elm) {
                            $(elm).attr("aria-pressed", $(elm).hasClass("ql-active") ? "true" : "false");
                        }), null != range && 0 === range.length) {
                            if (_a = quill.scroll.descendant(_this.quillStatic.import(QuillWrapper.getFormatPath("link")), range.index), 
                            _this.link = _a[0], null != _this.link) {
                                var newRange = {
                                    index: range.index - _a[1],
                                    length: _this.link.length()
                                };
                                return void (_.isEqual(_this.range, newRange) || (_this.range = newRange, _this.show(), 
                                _this.updateToolbarWidth()));
                            }
                            range.index > 0 && quill.scroll.descendant(_this.quillStatic.import(QuillWrapper.getFormatPath("link")), range.index - 1)[0] && setTimeout(function() {
                                return _this.quill.format("link", !1);
                            });
                        }
                        _this.hide(), _this.updateToolbarWidth();
                    }
                });
            }
            return LinkInput.buildNode = function(template) {
                return div().addClass(TextboxToolbarSelectors.toolbarUrlInput.class).append($(template));
            }, LinkInput.prototype.onHide = function(event) {
                this.hide(), this.stopEvent(event), this.updateToolbarWidth();
            }, LinkInput.prototype.onSave = function(event) {
                this.save(), this.stopEvent(event), this.updateToolbarWidth();
            }, LinkInput.prototype.onEdit = function(event) {
                this.edit(), this.stopEvent(event), this.updateToolbarWidth();
            }, LinkInput.prototype.onRemove = function(event) {
                this.remove(), this.stopEvent(event), this.updateToolbarWidth();
            }, LinkInput.prototype.stopEvent = function(event) {
                event.stopPropagation(), event.preventDefault();
            }, LinkInput.prototype.edit = function() {
                this.isEditing = !0, this.$container.addClass(LinkInput.editingClass), this.$textbox.focus(), 
                this.textbox.setSelectionRange(0, this.textbox.value.length);
            }, LinkInput.prototype.open = function() {
                this.range = this.quill.getSelection(), this.show(), this.edit(), this.updateToolbarWidth();
            }, LinkInput.prototype.hide = function() {
                this.range = this.link = null, this.$container.hide(), this.isEditing = !1;
            }, LinkInput.prototype.remove = function() {
                this.range = this.range || this.quill.getSelection(), this.quill.formatText(this.range, "link", !1, "user"), 
                this.quill.setSelection(this.range, "silent"), this.hide(), this.updateToolbarWidth();
            }, LinkInput.prototype.save = function() {
                var range = this.range, url = this.textbox.value;
                0 === range.length && (this.quill.insertText(this.range.index, url), this.quill.setSelection(this.range.index, url.length), 
                range = this.range = this.quill.getSelection()), this.quill.formatText(range.index, range.length, "link", url, "user"), 
                this.quill.setSelection(range, "silent"), this.link = this.quill.scroll.descendant(this.quillStatic.import(QuillWrapper.getFormatPath("link")), range.index)[0], 
                this.show();
            }, LinkInput.prototype.show = function() {
                var preview;
                this.isEditing = !1, this.$container.removeClass(LinkInput.editingClass), this.$container.show();
                var range = this.range = this.range || this.quill.getSelection();
                null != this.link ? preview = this.link.formats().link : (preview = this.quill.getText(range.index, range.length), 
                preview = LinkPreview.format(preview)), this.$textbox.val(preview), this.$preview.text(preview), 
                this.$preview.attr("href", preview);
            }, LinkInput.prototype.updateToolbarWidth = function() {
                this.featureSwitches && !this.featureSwitches.onObject && this.toolbar.getElement().find(".toolbar-content").css("width", this.toolbar.getWidth() + this.getWidth() + "px");
            }, LinkInput.prototype.getWidth = function() {
                return this.$container.get(0).offsetWidth;
            }, LinkInput.editingClass = "ql-editing", LinkInput;
        }(), ColorPicker = function() {
            function ColorPicker(options) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(options, "options"), 
                this.quill = options.quill, this.uiComponentFactory = options.uiComponentFactory, 
                this.$colorSwatch = options.$colorSwatch, this.$colorPickerButtonWrapper = options.$colorPickerButtonWrapper, 
                this.defaultColor = options.defaultColor, this.format = options.format, this.currentColor = options.defaultColor, 
                this.setSwatch(this.currentColor), options.$colorPickerButton.on("click", function(event) {
                    event.stopPropagation(), _this.toggle();
                });
            }
            return ColorPicker.buildFontColorButtons = function(colorButtonTooltip, colorPickerButtonTooltip, onRenderTooltip) {
                var fontColorGlyph = $("<span></span>").addClass("powervisuals-glyph themeableElementCustom").addClass(ColorPicker.colorGlyphClassAndSelector.class), fontColorSwatch = $("<span></span>").addClass("powervisuals-glyph themeableElementCustom").addClass(ColorPicker.colorSwatchGlyphClassAndSelector.class), fontColorButton = $("<button>").addClass("ql-color themeableElementCustom").addClass(ColorPicker.colorButtonClassAndSelector.class).attr("aria-label", colorButtonTooltip).val("false").append(fontColorGlyph).append(fontColorSwatch), fontColorPickerButton = $("<button>").addClass("colorpicker powervisuals-glyph chevrondown themeableElementCustom").addClass(ColorPicker.pickerButtonClassAndSelector.class).attr("aria-label", colorPickerButtonTooltip).val("false");
                return applyTooltip(fontColorButton, colorButtonTooltip, onRenderTooltip), applyTooltip(fontColorPickerButton, colorPickerButtonTooltip, onRenderTooltip), 
                [ fontColorButton, $("<div>").addClass(ColorPicker.pickerButtonWrapperClassAndSelector.class).append(fontColorPickerButton) ];
            }, ColorPicker.prototype.onColorChange = function(newColor) {
                this.currentColor.toUpperCase() !== newColor.toUpperCase() && (this.setSwatch(newColor || this.defaultColor), 
                this.applyFormat(newColor || null, this.range), this.currentColor = newColor);
            }, ColorPicker.prototype.onClose = function() {
                var range = this.ensureRange();
                this.quill.setSelection(range.index, range.length), this.quill.format(this.format, !!this.color && this.color, "user");
            }, ColorPicker.prototype.getColor = function() {
                return this.currentColor;
            }, ColorPicker.prototype.applyFormat = function(color, range) {
                var rangeToApply = this.ensureRange(range);
                this.color = color, color && color !== this.defaultColor ? (this.quill.formatText(rangeToApply.index, rangeToApply.length, this.format, color, "user"), 
                this.quill.format(this.format, this.color, "user")) : (this.quill.formatText(rangeToApply.index, rangeToApply.length, this.format, !1, "user"), 
                this.quill.format(this.format, !1, "user"));
            }, ColorPicker.prototype.toggle = function() {
                this.range = this.ensureRange(), this.getColorPicker().toggle();
            }, ColorPicker.prototype.getColorPicker = function() {
                var _this = this, element = this.$colorPickerButtonWrapper.get(0);
                return this.colorPicker = this.uiComponentFactory.createColorPicker(element.firstChild, {
                    value: this.getRangeColor()
                }, function(newColor) {
                    return _this.onColorChange(newColor && newColor.value);
                }, function() {
                    return _this.onClose();
                }), this.colorPicker;
            }, ColorPicker.prototype.getRangeColor = function() {
                var range = this.quill.getSelection();
                if (!range) return this.defaultColor;
                var formatAttr = this.quill.getFormat(range.index, range.length);
                return "string" == typeof (null == formatAttr ? void 0 : formatAttr.color) ? formatAttr.color : this.defaultColor;
            }, ColorPicker.prototype.setSwatch = function(color) {
                this.$colorSwatch.get(0).style.setProperty("color", color, "important");
            }, ColorPicker.prototype.ensureRange = function(range) {
                return this.quill.focus(), range || this.quill.getSelection() || {
                    index: 0,
                    length: 0
                };
            }, ColorPicker.colorGlyphClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("fontcolor"), 
            ColorPicker.colorSwatchGlyphClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("fontcolorswatch"), 
            ColorPicker.colorButtonClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("fontcolorbutton"), 
            ColorPicker.pickerButtonClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("fontcolorpicker"), 
            ColorPicker.pickerButtonWrapperClassAndSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("fontcolorbutton-wrapper"), 
            ColorPicker;
        }(), SmartNarrativesEditor = function() {
            function SmartNarrativesEditor(options) {
                this.container = options.container, this.destroyEditorActions = options.destroyEditorActions, 
                this.evaluatedValues = options.evaluatedValues, this.hostServices = options.hostServices, 
                this.localizationProvider = options.localizationProvider, this.onEditSmartNarrativePersist = options.onEditSmartNarrativePersist, 
                this.quill = options.quill, this.style = options.style, this.toolbar = options.toolbar, 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.container, "container"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.destroyEditorActions, "destroyEditorActions"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.evaluatedValues, "evaluatedValues"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.hostServices, "hostServices"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.localizationProvider, "localizationProvider"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.onEditSmartNarrativePersist, "onEditSmartNarrativePersist"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.quill, "quill"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.style, "style"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.toolbar, "toolbar");
                var primaryColor = _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__.v.getDataColorByIndex(options.style, 0);
                this.focusColor = QuillWrapper.computeTransparentSmartNarrativesColor(primaryColor);
            }
            return SmartNarrativesEditor.prototype.getSmartNarrativesEditor = function() {
                var _this = this;
                return this.component = this.component || this.hostServices.getUIComponentFactory().createSmartNarrativesEditor(this.container.find(smartNarrativesEditorClass.selector).get(0), _Visuals_capabilities_textbox_capabilities__WEBPACK_IMPORTED_MODULE_13__.RL.values.expr, {
                    onEditSmartNarrativeCancel: function() {
                        return _this.onEditSmartNarrativeCancel();
                    },
                    onEditSmartNarrativeFinish: function(objRef, prevObjRef) {
                        return _this.onEditSmartNarrativeFinish(objRef, prevObjRef);
                    },
                    onEditSmartNarrativeStart: function() {
                        return _this.onEditSmartNarrativeStart();
                    },
                    onSmartNarrativeFocusChange: function(objRef, focused) {
                        return _this.onSmartNarrativeFocusChange(objRef, focused);
                    },
                    onUpdateToolbar: function(dropdownOptions) {
                        return _this.onUpdateToolbar(dropdownOptions);
                    },
                    onEscape: function() {
                        return _this.focusOnToolbar();
                    }
                }), this.component;
            }, SmartNarrativesEditor.prototype.onGetSmartNarrativesBlot = function(objRef) {
                var smartNarrativesBlot = {
                    index: -1,
                    op: void 0
                }, contents = this.quill.getContents();
                return contents && (smartNarrativesBlot.op = _.find(contents.ops, function(currentInsertOp) {
                    if (currentInsertOp) {
                        if (_.isString(currentInsertOp.insert)) return smartNarrativesBlot.index += currentInsertOp.insert.length, 
                        !1;
                        if (_.isNumber(currentInsertOp.insert)) return smartNarrativesBlot.index += 1, !1;
                        var options_8 = getCustomQuillFormatValue(currentInsertOp, QuillWrapper.smartNarrativesBlotClass.class);
                        return smartNarrativesBlot.index += 1, (null == options_8 ? void 0 : options_8.objRef) === objRef;
                    }
                    return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertFail("ops should not be undefined"), 
                    !1;
                })), smartNarrativesBlot;
            }, SmartNarrativesEditor.prototype.onEditSmartNarrativeCancel = function() {
                var insertionIndex = -1, smartNarrativesBlot = this.onGetSmartNarrativesBlot(QuillPlaceholder);
                return smartNarrativesBlot && smartNarrativesBlot.index >= 0 && smartNarrativesBlot.op && (this.quill.removeFormat(smartNarrativesBlot.index, 1), 
                this.quill.setSelection(insertionIndex = smartNarrativesBlot.index, 0, "api")), 
                insertionIndex;
            }, SmartNarrativesEditor.prototype.onEditSmartNarrativeFinish = function(objRef, prevObjRef) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(objRef, "objRef");
                var insertionIndex = this.onEditSmartNarrativeCancel();
                prevObjRef ? this.applyObjRefUpdate(prevObjRef, function(currentIndex) {
                    var currentFormant = _this.quill.getFormat(currentIndex);
                    _this.quill.removeFormat(currentIndex, 1), _this.insertSmartNarrativesBlot(objRef, currentIndex), 
                    _this.quill.formatText(currentIndex, 1, currentFormant, "api");
                }) : (insertionIndex < 0 && (insertionIndex = this.getInsertionIndex()), this.insertSmartNarrativesBlot(objRef, insertionIndex)), 
                this.onEditSmartNarrativePersist();
            }, SmartNarrativesEditor.prototype.onEditSmartNarrativeStart = function() {
                this.onEditSmartNarrativeCancel();
                var insertionIndex = this.getInsertionIndex();
                this.insertSmartNarrativesBlot(QuillPlaceholder, insertionIndex);
            }, SmartNarrativesEditor.prototype.onSmartNarrativeFocusChange = function(objRef, focused) {
                var _this = this;
                this.applyObjRefUpdate(objRef, function(currentIndex) {
                    var currentFormat = _this.quill.getFormat(currentIndex, 1);
                    currentFormat.smartNarrativesFocus = focused ? _this.focusColor : void 0, _this.quill.formatText(currentIndex, 1, currentFormat, "api");
                });
            }, SmartNarrativesEditor.prototype.updateOptions = function(options) {
                this.evaluatedValues = options.evaluatedValues;
            }, SmartNarrativesEditor.prototype.applyObjRefUpdate = function(objRef, objRefUpdate) {
                var contents = this.quill.getContents();
                if (contents) for (var currentIndex = -1, _i = 0, _a = contents.ops; _i < _a.length; _i++) {
                    var currentInsertOp = _a[_i];
                    if (!currentInsertOp) return void _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertFail("ops should not be undefined");
                    if (_.isString(currentInsertOp.insert)) currentIndex += currentInsertOp.insert.length; else if (_.isNumber(currentInsertOp.insert)) currentIndex += 1; else {
                        currentIndex += 1;
                        var options_9 = getCustomQuillFormatValue(currentInsertOp, QuillWrapper.smartNarrativesBlotClass.class);
                        (null == options_9 ? void 0 : options_9.objRef) === objRef && objRefUpdate(currentIndex);
                    }
                }
            }, SmartNarrativesEditor.prototype.getInsertionIndex = function() {
                var currentQuillSelection = this.quill.getSelection(!0);
                return currentQuillSelection ? currentQuillSelection.index : 0;
            }, SmartNarrativesEditor.prototype.insertSmartNarrativesBlot = function(objRef, insertionIndex) {
                var _this = this;
                this.quill.insertEmbed(insertionIndex, QuillWrapper.smartNarrativesBlotClass.class, {
                    destroyEditorActions: this.destroyEditorActions,
                    evaluatedValues: this.evaluatedValues,
                    localizationProvider: this.localizationProvider,
                    objRef,
                    onSelectSmartNarrativesBlot: function(selectedObjRef) {
                        _this.getSmartNarrativesEditor().onSelectEditableObject(selectedObjRef);
                    },
                    style: this.style
                }, "api"), this.quill.setSelection(insertionIndex + 1, 0, "api");
            }, SmartNarrativesEditor.prototype.onUpdateToolbar = function(dropdownOptions) {
                this.hostServices.setToolbar(this.toolbar.getElement(), {
                    preferHorizontalLayout: !0,
                    theme: "neutralGrayTheme",
                    dropdownOptions
                });
            }, SmartNarrativesEditor.prototype.focusOnToolbar = function() {
                this.toolbar && _JsCommon_focus_focusManager__WEBPACK_IMPORTED_MODULE_11__.IK.focusChildInGroup(this.toolbar.getElement().get(0));
            }, SmartNarrativesEditor;
        }(), FormattingSettings = function() {
            function FormattingSettings(options) {
                this.container = options.container, this.hostServices = options.hostServices, _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.container, "container"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.hostServices, "hostServices");
            }
            return FormattingSettings.prototype.getTextboxFormattingSettings = function() {
                var _a;
                return this.component = this.component || (null === (_a = this.hostServices.getUIComponentFactory()) || void 0 === _a ? void 0 : _a.createTextboxFormattingSettings(this.container.find(formattingSettingsClass.selector).get(0))), 
                this.component;
            }, FormattingSettings;
        }(), MiniToolbarLargeButton = function() {
            function MiniToolbarLargeButton(options) {
                this.uiComponentFactory = options.uiComponentFactory, this.inputArgs = options.inputArgs, 
                this.outputArgs = options.outputArgs, _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.inputArgs, "inputArgs"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.outputArgs, "outputArgs"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_4__.fF.assertValue(this.uiComponentFactory, "uiComponentFactory");
            }
            return MiniToolbarLargeButton.prototype.attach = function(container) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_5__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.uiComponentFactory.createMiniToolbarLargeButton(container.get(0), this.inputArgs, this.outputArgs) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, MiniToolbarLargeButton;
        }();
    }
} ]);