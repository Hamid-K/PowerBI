"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "visual-calc-editor" ], {
    48563: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            w: function() {
                return daxParserFunctionDataFromEngine;
            }
        });
        var _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17819);
        function daxParserFunctionDataFromEngine(daxFunctions) {
            return daxFunctions.map(function(f) {
                return {
                    name: (daxFunction = f).Name,
                    description: daxFunction.Description,
                    category: daxParserFunctionCategory(daxFunction.Category),
                    pushableToDQ: (value = daxFunction.PushableToDirectQuery, result = 0, 1 === value ? result = 1 : 2 === value ? result = 2 : 3 === value && (result = 3), 
                    result),
                    parameters: (parameters = daxFunction.Parameters, parameters ? parameters.map(function(p) {
                        return new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.Hw((parameter = p).Name, parameter.Optional, parameter.Repeatable, parameter.RepeatGroup, parameter.Skippable);
                        var parameter;
                    }) : []),
                    visualCalculationsInfo: daxFunction.VisualCalculationsInfo
                };
                var parameters, value, result, daxFunction;
            });
        }
        function daxParserFunctionCategory(category) {
            switch (category) {
              case 0:
                return 0;

              case 1:
                return 1;

              case 2:
                return 2;

              case 3:
                return 3;

              case 4:
                return 4;

              case 5:
                return 5;

              case 6:
                return 6;

              case 7:
                return 7;

              case 8:
                return 8;

              case 9:
                return 9;
            }
        }
    },
    83269: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            VisualCalcEditorModule: function() {
                return VisualCalcEditorModule;
            },
            VisualCalcServiceLazyProvider: function() {
                return VisualCalcServiceLazyProvider;
            },
            VisualCalcServicePromiseFactory: function() {
                return VisualCalcServicePromiseFactory;
            }
        });
        var common = __webpack_require__(77476), fesm2022_forms = __webpack_require__(17174), Telemetry = __webpack_require__(21617), conceptual_schema_proxy_service = __webpack_require__(26898), data_sources_service = __webpack_require__(83008), panes_visibility_service = __webpack_require__(21024), exploration_capabilities_service = __webpack_require__(48145), visual_authoring_operations_service = __webpack_require__(27980), ExploreUI_module = __webpack_require__(87121), feature_switch_service = __webpack_require__(9380), format_mode_eager_module = __webpack_require__(9844), formula_bar_ui_module = __webpack_require__(17848), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), pbi_icon_module = __webpack_require__(93367), promiseFactory = __webpack_require__(14463), visibility_service = __webpack_require__(15393), visual_authoring_service = __webpack_require__(66890), dax_generator = __webpack_require__(51644), VisualsCommon_debug = __webpack_require__(62458);
        function visualCalcDaxFunctionCall(functionName) {
            for (var args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
            return VisualsCommon_debug.fF.assertValue(functionName, "functionName"), VisualsCommon_debug.fF.assertValue(args, "args"), 
            "".concat(functionName).concat(dax_generator.block("(", args, ")"));
        }
        var _a, arrayExtensions = __webpack_require__(50550), displayNameGetter = __webpack_require__(21571), core = __webpack_require__(50423), localization_service = __webpack_require__(65181), VisualCalcDaxTemplateService = function() {
            function VisualCalcDaxTemplateService(localizationService) {
                this.localizationService = localizationService;
            }
            return VisualCalcDaxTemplateService.prototype.getTemplates = function() {
                return [ new RunningSum(this.localizationService), new MovingAverage(this.localizationService), new PercentOfParent(this.localizationService), new PercentOfGrandTotal(this.localizationService), new AverageOfChildren(this.localizationService), new VersusTemplate(this.localizationService, 0), new VersusTemplate(this.localizationService, 1), new VersusTemplate(this.localizationService, 3), new VersusTemplate(this.localizationService, 2) ];
            }, VisualCalcDaxTemplateService.\u0275fac = function(t) {
                return new (t || VisualCalcDaxTemplateService)(core["\u0275\u0275inject"](localization_service.o));
            }, VisualCalcDaxTemplateService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualCalcDaxTemplateService,
                factory: VisualCalcDaxTemplateService.\u0275fac
            }), VisualCalcDaxTemplateService;
        }(), RunningSum = function() {
            function RunningSum(localizationService) {
                this.localizationService = localizationService, this.capabilities = {
                    name: "RunningSum",
                    displayName: (0, displayNameGetter.V)("VisualCalcTemplate_RunningSum_DisplayName"),
                    description: (0, displayNameGetter.V)("VisualCalcTemplate_RunningSum_Description"),
                    category: "VisualCalculation",
                    input: (0, arrayExtensions.z8)([ {
                        name: "Field",
                        column: {
                            type: {
                                numeric: !0
                            }
                        },
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    } ]),
                    helpLink: -1
                };
            }
            return RunningSum.prototype.getExpression = function() {
                var expression, field = (0, displayNameGetter.G)(this.capabilities.input[0].displayName, this.localizationService);
                return expression = "[".concat(field, "]"), VisualsCommon_debug.fF.assertValue(expression, "expression"), 
                visualCalcDaxFunctionCall("RUNNINGSUM", expression);
            }, RunningSum;
        }(), MovingAverage = function() {
            function MovingAverage(localizationService) {
                this.localizationService = localizationService, this.capabilities = {
                    name: "MovingAverage",
                    displayName: (0, displayNameGetter.V)("VisualCalcTemplate_MovingAverage_DisplayName"),
                    description: (0, displayNameGetter.V)("VisualCalcTemplate_MovingAverage_Description"),
                    category: "VisualCalculation",
                    input: (0, arrayExtensions.z8)([ {
                        name: "Field",
                        column: {
                            type: {
                                numeric: !0
                            }
                        },
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    }, {
                        name: "WindowSize",
                        constant: {
                            type: {
                                numeric: !0
                            },
                            defaultValue: 1
                        },
                        displayName: (0, displayNameGetter.V)("VisualCalcTemplate_WindowSizeField"),
                        description: ""
                    } ]),
                    helpLink: -1
                };
            }
            return MovingAverage.prototype.getExpression = function() {
                var field = (0, displayNameGetter.G)(this.capabilities.input[0].displayName, this.localizationService), windowSize = (0, 
                displayNameGetter.G)(this.capabilities.input[1].displayName, this.localizationService);
                return function(expression, windowSize) {
                    return VisualsCommon_debug.fF.assertValue(expression, "expression"), VisualsCommon_debug.fF.assertValue(windowSize, "windowSize"), 
                    visualCalcDaxFunctionCall("MOVINGAVERAGE", expression, windowSize);
                }("[".concat(field, "]"), "".concat(windowSize));
            }, MovingAverage;
        }(), PercentOfParent = function() {
            function PercentOfParent(localizationService) {
                this.localizationService = localizationService, this.capabilities = {
                    name: "PercentOfParent",
                    displayName: (0, displayNameGetter.V)("VisualCalcTemplate_PercentOfParent_DisplayName"),
                    description: (0, displayNameGetter.V)("VisualCalcTemplate_PercentOfParent_Description"),
                    category: "VisualCalculation",
                    input: (0, arrayExtensions.z8)([ {
                        name: "NumeratorField",
                        column: {
                            type: {
                                numeric: !0
                            }
                        },
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    }, {
                        name: "CollapseDenominatorField",
                        column: {},
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    }, {
                        name: "Axis",
                        displayName: (0, displayNameGetter.V)("VisualCalcTemplate_AxisField"),
                        description: ""
                    } ]),
                    helpLink: -1
                };
            }
            return PercentOfParent.prototype.getExpression = function() {
                var numeratorField = (0, displayNameGetter.G)(this.capabilities.input[0].displayName, this.localizationService), collapseDenominatorField = (0, 
                displayNameGetter.G)(this.capabilities.input[1].displayName, this.localizationService), axis = (0, 
                displayNameGetter.G)(this.capabilities.input[2].displayName, this.localizationService);
                return dax_generator.divide("[".concat(numeratorField, "]"), function(expression, axis) {
                    return VisualsCommon_debug.fF.assertValue(expression, "expression"), VisualsCommon_debug.fF.assertValue(axis, "axis"), 
                    visualCalcDaxFunctionCall("COLLAPSE", expression, axis);
                }("[".concat(collapseDenominatorField, "]"), "".concat(axis)));
            }, PercentOfParent;
        }(), PercentOfGrandTotal = function() {
            function PercentOfGrandTotal(localizationService) {
                this.localizationService = localizationService, this.capabilities = {
                    name: "PercentOfGrandTotal",
                    displayName: (0, displayNameGetter.V)("ShowValueAs_Calculation_PercentOfGrandTotal"),
                    description: (0, displayNameGetter.V)("VisualCalcTemplate_PercentOfGrandTotal_Description"),
                    category: "VisualCalculation",
                    input: (0, arrayExtensions.z8)([ {
                        name: "NumeratorField",
                        column: {
                            type: {
                                numeric: !0
                            }
                        },
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    }, {
                        name: "CollapseAllDenominatorField",
                        column: {},
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    }, {
                        name: "Axis",
                        displayName: (0, displayNameGetter.V)("VisualCalcTemplate_AxisField"),
                        description: ""
                    } ]),
                    helpLink: -1
                };
            }
            return PercentOfGrandTotal.prototype.getExpression = function() {
                var numeratorField = (0, displayNameGetter.G)(this.capabilities.input[0].displayName, this.localizationService), collapseAllDenominatorField = (0, 
                displayNameGetter.G)(this.capabilities.input[1].displayName, this.localizationService), axis = (0, 
                displayNameGetter.G)(this.capabilities.input[2].displayName, this.localizationService);
                return dax_generator.divide("[".concat(numeratorField, "]"), function(expression, axis) {
                    return VisualsCommon_debug.fF.assertValue(expression, "expression"), VisualsCommon_debug.fF.assertValue(axis, "axis"), 
                    visualCalcDaxFunctionCall("COLLAPSEALL", expression, axis);
                }("[".concat(collapseAllDenominatorField, "]"), "".concat(axis)));
            }, PercentOfGrandTotal;
        }(), AverageOfChildren = function() {
            function AverageOfChildren(localizationService) {
                this.localizationService = localizationService, this.capabilities = {
                    name: "AverageOfChildren",
                    displayName: (0, displayNameGetter.V)("VisualCalcTemplate_AverageOfChildren_DisplayName"),
                    description: (0, displayNameGetter.V)("VisualCalcTemplate_AverageOfChildren_Description"),
                    category: "VisualCalculation",
                    input: (0, arrayExtensions.z8)([ {
                        name: "Field",
                        column: {
                            type: {
                                numeric: !0
                            }
                        },
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    }, {
                        name: "Axis",
                        displayName: (0, displayNameGetter.V)("VisualCalcTemplate_AxisField"),
                        description: ""
                    } ]),
                    helpLink: -1
                };
            }
            return AverageOfChildren.prototype.getExpression = function() {
                var field = (0, displayNameGetter.G)(this.capabilities.input[0].displayName, this.localizationService), axis = (0, 
                displayNameGetter.G)(this.capabilities.input[1].displayName, this.localizationService);
                return function(expression, axis) {
                    return VisualsCommon_debug.fF.assertValue(expression, "expression"), VisualsCommon_debug.fF.assertValue(axis, "axis"), 
                    visualCalcDaxFunctionCall("EXPAND", expression, axis);
                }(dax_generator.average("[".concat(field, "]")), "".concat(axis));
            }, AverageOfChildren;
        }(), VersusTemplate = function() {
            function VersusTemplate(localizationService, versusEnum) {
                void 0 === versusEnum && (versusEnum = 3), this.localizationService = localizationService, 
                this.versusEnum = versusEnum;
                var visualCalcFunction = VersusTemplate.versusToDax[this.versusEnum];
                this.capabilities = {
                    name: "Versus".concat(visualCalcFunction),
                    displayName: (0, displayNameGetter.V)("VisualCalcTemplate_Versus_".concat(visualCalcFunction, "_DisplayName")),
                    description: (0, displayNameGetter.V)("VisualCalcTemplate_Versus_".concat(visualCalcFunction, "_Description")),
                    category: "VisualCalculation",
                    input: (0, arrayExtensions.z8)([ {
                        name: "Field",
                        column: {
                            type: {
                                numeric: !0
                            }
                        },
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    }, {
                        name: "DaxFunctionField",
                        column: {},
                        displayName: (0, displayNameGetter.V)("Field"),
                        description: ""
                    } ]),
                    helpLink: -1
                };
            }
            return VersusTemplate.prototype.getExpression = function() {
                var field = (0, displayNameGetter.G)(this.capabilities.input[0].displayName, this.localizationService), field2 = (0, 
                displayNameGetter.G)(this.capabilities.input[1].displayName, this.localizationService), visualCalcFunction = VersusTemplate.versusToDax[this.versusEnum];
                return "[".concat(field, "] - ").concat(visualCalcDaxFunctionCall(visualCalcFunction, "[".concat(field2, "]")));
            }, VersusTemplate.versusToDax = ((_a = {})[3] = "FIRST", _a[2] = "LAST", _a[1] = "NEXT", 
            _a[0] = "PREVIOUS", _a), VersusTemplate;
        }(), visual_calc_eager_service = __webpack_require__(88409), tslib_es6 = __webpack_require__(81337), merge = __webpack_require__(63057), fromEvent = __webpack_require__(59787), filter = __webpack_require__(59973), takeUntil = __webpack_require__(83317), tap = __webpack_require__(17653), switchMap = __webpack_require__(81905), take = __webpack_require__(48787), injection_tokens = __webpack_require__(15903), formula_bar_service = __webpack_require__(15783), intellisense_host_service = __webpack_require__(34103), intellisense_service = __webpack_require__(72080), detail_visual_component = __webpack_require__(49217), focusManager = __webpack_require__(65302), Prototype = __webpack_require__(39681), rx_component = __webpack_require__(73221), subselection_outline_manager_service = __webpack_require__(52570), lazy_load_routes = __webpack_require__(61561), Subject = __webpack_require__(30794), BehaviorSubject = __webpack_require__(35510), withLatestFrom = __webpack_require__(23558), startWith = __webpack_require__(22318), distinctUntilChanged = __webpack_require__(77526), pairwise = __webpack_require__(6663), formula_bar_base_behaviour_service = __webpack_require__(98361), daxParserUtils = __webpack_require__(95792), dax_capabilities_service_interface = __webpack_require__(74249), dax_template_utils = __webpack_require__(26657), visualContainerUtils = __webpack_require__(60661), sqExprStaticMembers = __webpack_require__(74082), lazy_load_route_keys = __webpack_require__(63731), token = __webpack_require__(73027), events = __webpack_require__(8590), visual_calc_utils = __webpack_require__(73202), event_bridge_service = __webpack_require__(11494), lazy_scoped_provider = __webpack_require__(28894), FormulaBarVisualCalcBehaviorService = function(_super) {
            function FormulaBarVisualCalcBehaviorService(uiBlockingService, intellisenseService, localizationService, eventBridge, lazyScopeProvider, visualCalcEagerService, daxCapabilitiesService, zone) {
                var _this = _super.call(this, uiBlockingService, localizationService, intellisenseService) || this;
                return _this.eventBridge = eventBridge, _this.lazyScopeProvider = lazyScopeProvider, 
                _this.visualCalcEagerService = visualCalcEagerService, _this.daxCapabilitiesService = daxCapabilitiesService, 
                _this.zone = zone, _this.submit$ = new Subject.xQ, _this.cancel$ = new Subject.xQ, 
                _this.onContentChanged$ = new BehaviorSubject.X(void 0), _this.destroy$ = new Subject.xQ, 
                _this;
            }
            return (0, tslib_es6.__extends)(FormulaBarVisualCalcBehaviorService, _super), FormulaBarVisualCalcBehaviorService.prototype.hasUnsavedChanges = function(_formulaText) {
                return !1;
            }, FormulaBarVisualCalcBehaviorService.prototype.commitOrDeletePendingCalculation = function(_formulaText) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, !1 ];
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.commitCalculationUpdate = function(formulaCommitInfo) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return this.submit$.next(formulaCommitInfo), [ 2 ];
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.cancel = function(_formulaText) {
                this.cancel$.next();
            }, FormulaBarVisualCalcBehaviorService.prototype.onContentChanged = function(formulaCommitInfo) {
                this.onContentChanged$.next(formulaCommitInfo);
            }, FormulaBarVisualCalcBehaviorService.prototype.onTemplateSelection = function(selectedTemplate) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var templateExpression, templateName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return dax_template_utils.gD(selectedTemplate) ? (templateExpression = selectedTemplate.getExpression(), 
                            templateName = (0, displayNameGetter.G)(selectedTemplate.capabilities.displayName, this.localizationService), 
                            this.formulaBarControl.isEditorEnabled ? [ 3, 3 ] : [ 4, this.lazyScopeProvider.get(lazy_load_routes.w) ]) : (VisualsCommon_debug.fF.assertFail("Selected template is not a visual calculation template"), 
                            [ 2 ]);

                          case 1:
                            return [ 4, _a.sent().enterVisualCalcEditingModeWithPlaceHolder(this.visualContainer, "Template", templateExpression, templateName) ];

                          case 2:
                            return _a.sent(), [ 2 ];

                          case 3:
                            return _.isEmpty(this.formulaBarControl.getCurrentEditorText()) || this.formulaBarControl.getCurrentEditorText() === this.formulaBarControl.getHighlightedText() ? this.formulaBarControl.insertTextAtCurrentCursor("".concat(templateName, " = ").concat(templateExpression)) : this.formulaBarControl.insertTextAtCurrentCursor(templateExpression), 
                            [ 2 ];
                        }
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.setVisualContainer = function(visualContainer) {
                this.visualContainer = visualContainer;
            }, FormulaBarVisualCalcBehaviorService.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete();
            }, FormulaBarVisualCalcBehaviorService.prototype.registerFormulaBarControl = function(control) {
                var _this = this;
                this.formulaBarControl = control, this.formulaBarControl.setReadOnly(!1), this.eventBridge.on(events.jCS).pipe((0, 
                takeUntil.R)(this.destroy$), (0, filter.h)(function(args) {
                    return args.affectContainer(_this.visualContainer);
                })).subscribe(function() {
                    _this.intellisenseService.updateFormulaContextAsync();
                }), this.submit$.pipe((0, takeUntil.R)(this.destroy$)).subscribe(function() {
                    _this.visualCalcEagerService.enterViewMode("PressedSubmit");
                }), this.destroy$.pipe((0, withLatestFrom.M)(this.onContentChanged$, this.visualCalcEagerService.onContextChange$())).subscribe(function(_a) {
                    var formulaCommitInfo = _a[1], context = _a[2];
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_c) {
                            switch (_c.label) {
                              case 0:
                                switch (context.type) {
                                  case "Edit":
                                    return [ 3, 1 ];

                                  case "View":
                                    return [ 3, 4 ];
                                }
                                return [ 3, 4 ];

                              case 1:
                                return [ 4, this.tryToCommitContents(formulaCommitInfo, context) ];

                              case 2:
                                return _c.sent(), [ 4, this.tryRemoveUnchangedNewCalculation(formulaCommitInfo, context) ];

                              case 3:
                                return _c.sent(), [ 3, 5 ];

                              case 4:
                                return [ 3, 5 ];

                              case 5:
                                return [ 2 ];
                            }
                        });
                    });
                }), this.cancel$.pipe((0, takeUntil.R)(this.destroy$)).subscribe(function() {
                    _this.visualCalcEagerService.enterViewMode("PressedCancel");
                }), this.visualCalcEagerService.onContextChange$().pipe((0, startWith.O)({
                    type: "Edit",
                    calculationInfo: {
                        isNew: !1
                    }
                }), (0, distinctUntilChanged.x)(function(prev, curr) {
                    return "Edit" === prev.type && "Edit" === curr.type && prev.queryName === curr.queryName;
                }), (0, takeUntil.R)(this.destroy$), (0, pairwise.G)(), (0, withLatestFrom.M)(this.onContentChanged$)).subscribe(function(_a) {
                    var _b = _a[0], currentContext = _b[0], incomingContext = _b[1], formulaCommitInfo = _a[1];
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var entryPoints, visualQuery, calculationInfo;
                        return (0, tslib_es6.__generator)(this, function(_g) {
                            switch (_g.label) {
                              case 0:
                                if ("Edit" !== currentContext.type) return [ 3, 15 ];
                                switch (incomingContext.type) {
                                  case "Edit":
                                    return [ 3, 1 ];

                                  case "View":
                                    return [ 3, 4 ];
                                }
                                return [ 3, 4 ];

                              case 1:
                                return [ 4, this.tryToCommitContents(formulaCommitInfo, currentContext) ];

                              case 2:
                                return _g.sent(), [ 4, this.tryRemoveUnchangedNewCalculation(formulaCommitInfo, currentContext) ];

                              case 3:
                                return _g.sent(), [ 3, 15 ];

                              case 4:
                                switch (entryPoints = incomingContext.entryPoints) {
                                  case "PressedCancel":
                                    return [ 3, 5 ];

                                  case "PressedSubmit":
                                    return [ 3, 9 ];

                                  case "DeletedCurrentCalc":
                                    return [ 3, 12 ];
                                }
                                return [ 3, 13 ];

                              case 5:
                                return currentContext.calculationInfo.isNew ? [ 4, this.lazyScopeProvider.get(lazy_load_routes.w) ] : [ 3, 8 ];

                              case 6:
                                return [ 4, _g.sent().removeVisualCalculation(this.visualContainer, currentContext.queryName) ];

                              case 7:
                                _g.sent(), _g.label = 8;

                              case 8:
                                return [ 3, 14 ];

                              case 9:
                                return [ 4, this.tryRemoveUnchangedNewCalculation(formulaCommitInfo, currentContext) ];

                              case 10:
                                return _g.sent(), [ 4, this.tryToCommitContents(formulaCommitInfo, currentContext) ];

                              case 11:
                                return _g.sent(), [ 3, 14 ];

                              case 12:
                                return [ 3, 14 ];

                              case 13:
                                return VisualsCommon_debug.fF.assertNever(entryPoints), [ 3, 14 ];

                              case 14:
                                return [ 3, 15 ];

                              case 15:
                                switch (incomingContext.type) {
                                  case "Edit":
                                    return [ 3, 16 ];

                                  case "View":
                                    return [ 3, 23 ];
                                }
                                return [ 3, 23 ];

                              case 16:
                                return (visualQuery = (0, visualContainerUtils.Xf)(this.visualContainer)) && visualQuery.defn.select().withName(incomingContext.queryName) ? [ 4, this.intellisenseService.getCalculationInfo() ] : (this.visualCalcEagerService.enterViewMode("DeletedCurrentCalc"), 
                                [ 3, 24 ]);

                              case 17:
                                switch (calculationInfo = _g.sent(), incomingContext.editingType) {
                                  case "Template":
                                    return [ 3, 18 ];

                                  case "Custom":
                                    return [ 3, 20 ];
                                }
                                return [ 3, 20 ];

                              case 18:
                                return [ 4, this.handleUpdateContents(!1, calculationInfo) ];

                              case 19:
                                return _g.sent(), [ 3, 22 ];

                              case 20:
                                return [ 4, this.handleUpdateContents(calculationInfo.isNew, calculationInfo) ];

                              case 21:
                                return _g.sent(), [ 3, 22 ];

                              case 22:
                                return [ 3, 24 ];

                              case 23:
                                return this.resetFormulaBar(), [ 3, 24 ];

                              case 24:
                                return [ 2 ];
                            }
                        });
                    });
                }), this.visualCalcEagerService.onVisualCalcDeleted$().pipe((0, takeUntil.R)(this.destroy$), (0, 
                withLatestFrom.M)(this.visualCalcEagerService.onContextChange$())).subscribe(function(_a) {
                    var currentContext = _a[1];
                    "Edit" === currentContext.type && _a[0] === currentContext.queryName && _this.visualCalcEagerService.enterViewMode("DeletedCurrentCalc");
                }), this.visualCalcEagerService.onNativeNameReferenceChange$().pipe((0, takeUntil.R)(this.destroy$), (0, 
                withLatestFrom.M)(this.visualCalcEagerService.onContextChange$())).subscribe(function(_a) {
                    var _b = _a[0], oldName = _b.oldName, queryName = _b.queryName, currentContext = _a[1];
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var queryNameInEditing, visualQuery, exprInEditing, renamedFieldSqr, expression, updatedExpression, _c;
                        return (0, tslib_es6.__generator)(this, function(_d) {
                            switch (_d.label) {
                              case 0:
                                return "Edit" !== currentContext.type ? [ 3, 6 ] : (queryNameInEditing = currentContext.queryName, 
                                visualQuery = (0, visualContainerUtils.Xf)(this.visualContainer), (exprInEditing = null == visualQuery ? void 0 : visualQuery.defn.select().withName(queryNameInEditing)) && (0, 
                                sqExprStaticMembers.jX)(exprInEditing.expr) ? null == (renamedFieldSqr = visualQuery.defn.select().withName(queryName)) ? [ 2 ] : (expression = this.formulaBarControl.getCurrentEditorText(), 
                                queryNameInEditing !== queryName ? [ 3, 2 ] : [ 4, this.updateExpressionAfterFieldRenamed(expression) ]) : [ 3, 6 ]);

                              case 1:
                                return _c = _d.sent(), [ 3, 4 ];

                              case 2:
                                return [ 4, this.updateExpressionAfterReferencedFieldRenamed(expression, visualQuery, oldName, renamedFieldSqr.nativeReferenceName) ];

                              case 3:
                                _c = _d.sent(), _d.label = 4;

                              case 4:
                                return (updatedExpression = _c) === expression ? [ 3, 6 ] : [ 4, this.updateContents(updatedExpression, void 0) ];

                              case 5:
                                _d.sent(), this.formulaBarControl.resetModelTokens(updatedExpression), this.intellisenseService.updateFormulaContextAsync(), 
                                _d.label = 6;

                              case 6:
                                return [ 2 ];
                            }
                        });
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.updateExpressionAfterFieldRenamed = function(expression) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var updatedExpression, calculationInfo, exprWithNewName, exprInFormulaBar, inputFormula;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return updatedExpression = expression, [ 4, this.intellisenseService.getCalculationInfo() ];

                          case 1:
                            return null != (calculationInfo = _a.sent()) && (exprWithNewName = (0, daxParserUtils.O5)(calculationInfo.formulaText, !0), 
                            exprInFormulaBar = (0, daxParserUtils.O5)(expression), inputFormula = exprInFormulaBar.formula || " ", 
                            exprInFormulaBar.name && exprInFormulaBar.name === expression && (inputFormula = " ".concat(expression)), 
                            updatedExpression = "".concat(exprWithNewName.name, " =").concat(inputFormula)), 
                            [ 2, updatedExpression ];
                        }
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.updateExpressionAfterReferencedFieldRenamed = function(expression, visualQuery, oldName, newName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var updatedExpression, _a, reservedWords, daxCapabilities, nativeReferences, daxContext;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return updatedExpression = expression, _.isEmpty(expression) ? [ 3, 5 ] : null != this.vcDaxParserService ? [ 3, 2 ] : (_a = this, 
                            [ 4, this.lazyScopeProvider.get(lazy_load_route_keys.M) ]);

                          case 1:
                            _a.vcDaxParserService = _b.sent(), _b.label = 2;

                          case 2:
                            return [ 4, this.daxCapabilitiesService.getReservedWords() ];

                          case 3:
                            return reservedWords = _b.sent(), [ 4, this.daxCapabilitiesService.getCapabilities() ];

                          case 4:
                            daxCapabilities = _b.sent(), nativeReferences = visualQuery.defn.getNativeReferenceNames(!0), 
                            nativeReferences = _.map(nativeReferences, function(ref) {
                                return ref === newName ? oldName : ref;
                            }), daxContext = this.vcDaxParserService.getContext(nativeReferences, reservedWords, daxCapabilities), 
                            updatedExpression = this.vcDaxParserService.renameReference(daxContext, expression, oldName, newName), 
                            _b.label = 5;

                          case 5:
                            return [ 2, updatedExpression ];
                        }
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.handleUpdateContents = function(shouldHighlight, calculationInfo) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.formulaBarControl.clear(), [ 4, this.updateContents(calculationInfo.formulaText, calculationInfo.alertMessage) ];

                          case 1:
                            return _a.sent(), [ 4, this.focusWhenNotBlocked() ];

                          case 2:
                            return _a.sent(), shouldHighlight && this.formulaBarControl.setSelection({
                                startPosition: 0,
                                length: calculationInfo.formulaText.length
                            }), [ 2 ];
                        }
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.resetFormulaBar = function() {
                this.formulaBarControl.clear(), this.formulaBarControl.resetModelTokens(""), this.formulaBarControl.setExpandCollapseState(1), 
                this.formulaBarControl.endFormulaEdit();
            }, FormulaBarVisualCalcBehaviorService.prototype.tryToCommitContents = function(formulaCommitInfo, editingContext) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var queryName, expression, name_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return formulaCommitInfo && formulaCommitInfo.doCommit && !_.isEmpty(formulaCommitInfo.newExpression) ? (expression = formulaCommitInfo.newExpression, 
                            name_1 = this.getName(formulaCommitInfo.newName, queryName = editingContext.queryName), 
                            [ 4, this.lazyScopeProvider.get(lazy_load_routes.w) ]) : [ 3, 3 ];

                          case 1:
                            return [ 4, _a.sent().updateVisualCalculation(this.visualContainer, name_1, expression, queryName, editingContext.calculationInfo.isNew) ];

                          case 2:
                            _a.sent(), _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.tryRemoveUnchangedNewCalculation = function(formulaCommitInfo, editingContext) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return !editingContext.calculationInfo.isNew || !formulaCommitInfo || formulaCommitInfo.doCommit && _.isEmpty(formulaCommitInfo.newInvalidFormula) && !_.isEmpty(formulaCommitInfo.newExpression) ? [ 3, 3 ] : [ 4, this.lazyScopeProvider.get(lazy_load_routes.w) ];

                          case 1:
                            return [ 4, _a.sent().removeVisualCalculation(this.visualContainer, editingContext.queryName) ];

                          case 2:
                            _a.sent(), _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarVisualCalcBehaviorService.prototype.getName = function(formulaCommitName, queryName) {
                if (_.isEmpty(formulaCommitName)) {
                    var visualQuery = (0, visualContainerUtils.Xf)(this.visualContainer);
                    return visual_calc_utils.Fo(visualQuery, queryName);
                }
                return formulaCommitName;
            }, FormulaBarVisualCalcBehaviorService.\u0275fac = function(t) {
                return new (t || FormulaBarVisualCalcBehaviorService)(core["\u0275\u0275inject"](token.D), core["\u0275\u0275inject"](intellisense_service.e), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](visual_calc_eager_service.w), core["\u0275\u0275inject"](dax_capabilities_service_interface.r), core["\u0275\u0275inject"](core.NgZone));
            }, FormulaBarVisualCalcBehaviorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormulaBarVisualCalcBehaviorService,
                factory: FormulaBarVisualCalcBehaviorService.\u0275fac
            }), FormulaBarVisualCalcBehaviorService;
        }(formula_bar_base_behaviour_service.e), FormulaBarVisualCalcBehaviourServiceProvider = {
            provide: injection_tokens.n9,
            useClass: FormulaBarVisualCalcBehaviorService
        }, canvas_zoom_service = __webpack_require__(78384), FormulaBarZoomServiceProvider = {
            provide: injection_tokens.$d,
            useClass: function() {
                function FormulaBarZoomService(canvasZoomService) {
                    this.canvasZoomService = canvasZoomService;
                }
                return FormulaBarZoomService.prototype.getZoomLevel = function() {
                    var zoomLevel = this.canvasZoomService.getCurrentZoomLevel();
                    return VisualsCommon_debug.fF.assert(function() {
                        return zoomLevel > 0;
                    }, "ZoomLevel should greater than 0"), this.canvasZoomService.getCurrentZoomLevel();
                }, FormulaBarZoomService.\u0275fac = function(t) {
                    return new (t || FormulaBarZoomService)(core["\u0275\u0275inject"](canvas_zoom_service.w));
                }, FormulaBarZoomService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                    token: FormulaBarZoomService,
                    factory: FormulaBarZoomService.\u0275fac
                }), FormulaBarZoomService;
            }()
        }, daxTypes = __webpack_require__(63708), dataReaderFactory = __webpack_require__(68405), compiledDataViewMerger = __webpack_require__(13080), dsr_queryGenerator = __webpack_require__(49642), isMeasure = __webpack_require__(58295), VisualAxesTypes = function(VisualAxesTypes) {
            return VisualAxesTypes[VisualAxesTypes.None = 0] = "None", VisualAxesTypes[VisualAxesTypes.Rows = 1] = "Rows", 
            VisualAxesTypes[VisualAxesTypes.Columns = 2] = "Columns", VisualAxesTypes;
        }({}), VisualAxesRetriever = function() {
            function VisualAxesRetriever(selects) {
                this.selects = selects, this.containsRows = !1, this.containsColumns = !1, this.referencedItems = new Set;
            }
            return VisualAxesRetriever.prototype.withRestartToken = function(restartToken) {
                return this;
            }, VisualAxesRetriever.prototype.withPrimaryWindowExpansion = function(windowExpansion) {
                return this;
            }, VisualAxesRetriever.prototype.withDataVolume = function(dataVolume) {
                return this;
            }, VisualAxesRetriever.prototype.withIncludeEmptyGroups = function(value) {
                return this;
            }, VisualAxesRetriever.prototype.withHighlightFilter = function(value) {
                return this;
            }, VisualAxesRetriever.prototype.withGroupBy = function(queryGroupBy) {
                return this;
            }, VisualAxesRetriever.prototype.withPrimaryGrouping = function(items, activeProjections, showAll, roleSubtotalType, appendToLastExistingLevel, noDefaultProjections) {
                return this.containsValidAxisGroup(items) && (this.containsRows = !0), this;
            }, VisualAxesRetriever.prototype.withPrimaryGroupingNestedByRole = function(items, activeProjections, showAll, roleSubtotalType, appendToLastExistingLevel, noDefaultProjections, roleName) {
                return this.withPrimaryGrouping(items, activeProjections, showAll, roleSubtotalType, appendToLastExistingLevel, noDefaultProjections);
            }, VisualAxesRetriever.prototype.withPrimaryExpansion = function(expansion) {
                return this;
            }, VisualAxesRetriever.prototype.withPrimarySynchronization = function(synchronization) {
                return this;
            }, VisualAxesRetriever.prototype.withPrimaryGroupingNested = function(items, activeProjections, showAll, roleSubtotalType, noDefaultProjections) {
                return this.containsValidAxisGroup(items) && (this.containsRows = !0), this;
            }, VisualAxesRetriever.prototype.withSecondaryGrouping = function(items, activeProjections, showAll, roleSubtotalType, noDefaultProjections) {
                return this.containsValidAxisGroup(items) && (this.containsColumns = !0), this;
            }, VisualAxesRetriever.prototype.withSecondaryGroupingNestedByRole = function(items, activeProjections, showAll, roleSubtotalType, noDefaultProjections, roleName) {
                return this.withSecondaryGrouping(items, activeProjections, showAll, roleSubtotalType, noDefaultProjections);
            }, VisualAxesRetriever.prototype.withSecondaryExpansion = function(expansion) {
                return this;
            }, VisualAxesRetriever.prototype.withSecondaryGroupingNested = function(items, activeProjections, showAll, roleSubtotalType, noDefaultProjections) {
                return this.containsValidAxisGroup(items) && (this.containsColumns = !0), this;
            }, VisualAxesRetriever.prototype.withCurrentInnermostGrouping = function(items, showAll, roleSubtotalType) {
                return this;
            }, VisualAxesRetriever.prototype.withCurrentInnermostPrimaryGrouping = function(items, showAll, roleSubtotalType, isGroupedByPrimaryOnly) {
                return this;
            }, VisualAxesRetriever.prototype.withPrimaryDataReduction = function(reductionAlgorithm) {
                return this;
            }, VisualAxesRetriever.prototype.withScopedDataReduction = function(reductionAlgorithm, scope) {
                return this;
            }, VisualAxesRetriever.prototype.withSecondaryDataReduction = function(reductionAlgorithm) {
                return this;
            }, VisualAxesRetriever.prototype.withIntersectionDataReduction = function(reductionAlgorithm) {
                return this;
            }, VisualAxesRetriever.prototype.withTopLevelAggregates = function(compiledDataViewAggregates) {
                return this;
            }, VisualAxesRetriever.prototype.withAdditionalProjections = function(additionalProjections) {
                return this;
            }, VisualAxesRetriever.prototype.withRolesWithHierarchicalGroupingSupport = function(rolesWithHierarchicalGroupingSupport) {
                return this;
            }, VisualAxesRetriever.prototype.toQueryShape = function(mapping) {
                var result = VisualAxesTypes.None;
                return this.containsRows && (result |= VisualAxesTypes.Rows), this.containsColumns && (result |= VisualAxesTypes.Columns), 
                result;
            }, VisualAxesRetriever.prototype.containsValidAxisGroup = function(items) {
                if (_.isEmpty(items)) return !1;
                for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                    var item = items_1[_i];
                    if (this.referencedItems.has(item.queryName)) return !0;
                    var select = (0, arrayExtensions.rC)(this.selects, item.queryName);
                    if (!(0, isMeasure.k)(select.expr)) return this.referencedItems.add(item.queryName), 
                    !0;
                }
                return !1;
            }, VisualAxesRetriever;
        }(), compiledDataViewMappingsUtils = __webpack_require__(453), visual_plugin_service = __webpack_require__(29866), transform_plugin_service = __webpack_require__(39665), data_reader_provider_service = __webpack_require__(24878), exploration_display_name_service = __webpack_require__(13702), sort_service = __webpack_require__(906), IntellisenseModelService = function() {
            function IntellisenseModelService(visualCalcEagerService, featureSwitchService, localizationService, telemetryService, visualPluginService, conceptualSchemaProxy, dataSources, displayNameService, sortService, transformPluginService, dataReaders) {
                this.visualCalcEagerService = visualCalcEagerService, this.featureSwitchService = featureSwitchService, 
                this.localizationService = localizationService, this.telemetryService = telemetryService, 
                this.visualPluginService = visualPluginService, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.dataSources = dataSources, this.displayNameService = displayNameService, this.sortService = sortService, 
                this.transformPluginService = transformPluginService, this.dataReaders = dataReaders;
            }
            return IntellisenseModelService.prototype.setVisualContainer = function(visualContainer) {
                this.visualContainer = visualContainer;
            }, IntellisenseModelService.prototype.init = function(_calculationObjectInfo) {}, 
            IntellisenseModelService.prototype.reset = function() {}, IntellisenseModelService.prototype.getCalculationObject = function() {
                return this.findCalculationObject();
            }, IntellisenseModelService.prototype.findCalculationObject = function(_object) {
                var editingContext = this.visualCalcEagerService.getCurrentEditingContext();
                if (null == editingContext) return {
                    name: "",
                    expression: "",
                    calculationType: daxTypes.eN.VisualCalculation,
                    calculationSyntaxType: daxTypes.Up.Formula
                };
                var isNew = editingContext.calculationInfo.isNew, visualQuery = (0, visualContainerUtils.Xf)(this.visualContainer), expression = visual_calc_utils.zd(visualQuery, editingContext);
                return {
                    name: visual_calc_utils.Fo(visualQuery, editingContext.queryName),
                    expression,
                    calculationType: daxTypes.eN.VisualCalculation,
                    calculationSyntaxType: daxTypes.Up.Formula,
                    isNew
                };
            }, IntellisenseModelService.prototype.getDaxModeConfigInputs = function(unfilteredWireDataSourceInfo) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var editingContext, visualQuery, nativeReferenceNames, axes;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return editingContext = this.visualCalcEagerService.getCurrentEditingContext(), 
                            visualQuery = (0, visualContainerUtils.Xf)(this.visualContainer), nativeReferenceNames = visual_calc_utils.Oq(visualQuery, null == editingContext ? void 0 : editingContext.queryName), 
                            [ 4, this.getVisualAxes() ];

                          case 1:
                            return axes = _a.sent(), [ 2, {
                                serializableModel: visual_calc_utils.qN(nativeReferenceNames),
                                wireDataSourceInfo: unfilteredWireDataSourceInfo,
                                axes
                            } ];
                        }
                    });
                });
            }, IntellisenseModelService.prototype.getVisualAxes = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var singleVisualConfig, visualType, services, dataSources, schema, dataPluginNames, queryGenerator, dataViewMappingsOverride, compileMappingsResult, compiled, supportedMappings, query, indicesByName, mergedQueries, selects, visualAxisType;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return visualType = (singleVisualConfig = this.visualContainer.config.singleVisual).visualType, 
                            services = {
                                displayNameService: this.displayNameService,
                                featureSwitchService: this.featureSwitchService,
                                localizationService: this.localizationService,
                                sortService: this.sortService,
                                telemetryService: this.telemetryService,
                                transformPluginService: this.transformPluginService,
                                visualPluginService: this.visualPluginService
                            }, dataSources = this.dataSources.get(), [ 4, this.conceptualSchemaProxy.get(dataSources) ];

                          case 1:
                            return schema = _a.sent(), dataPluginNames = (0, dataReaderFactory.W5)(dataSources, singleVisualConfig.query && singleVisualConfig.query.defn), 
                            _.isEmpty(dataPluginNames) ? [ 2, [] ] : (queryGenerator = this.dataReaders.queryGenerator(dataPluginNames), 
                            dataViewMappingsOverride = this.visualPluginService.capabilities(singleVisualConfig.visualType).visualShapeDataViewMappings, 
                            !(compileMappingsResult = (0, compiledDataViewMappingsUtils.p0)(singleVisualConfig, visualType, schema, queryGenerator, services, void 0, dataViewMappingsOverride, void 0, _.noop)) || compileMappingsResult.error ? [ 2, [] ] : (compiled = compileMappingsResult.compiled) ? (supportedMappings = (0, 
                            compiledDataViewMappingsUtils.Go)(compiled.mappings), indicesByName = (0, dsr_queryGenerator.Jz)(query = compiled.query.defn), 
                            mergedQueries = (0, compiledDataViewMerger.lr)(supportedMappings, indicesByName), 
                            selects = query.select(), visualAxisType = (0, dsr_queryGenerator.cd)(function() {
                                return new VisualAxesRetriever(selects);
                            }, indicesByName, mergedQueries.mapping, selects, compiled.additionalProjections), 
                            [ 2, this.convertVisualAxesTypesToStringArray(visualAxisType) ]) : [ 2, [] ]);
                        }
                    });
                });
            }, IntellisenseModelService.prototype.convertVisualAxesTypesToStringArray = function(types) {
                var axes = [];
                return types & VisualAxesTypes.Rows && axes.push("ROWS"), types & VisualAxesTypes.Columns && axes.push("COLUMNS"), 
                axes;
            }, IntellisenseModelService.\u0275fac = function(t) {
                return new (t || IntellisenseModelService)(core["\u0275\u0275inject"](visual_calc_eager_service.w), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](sort_service.K), core["\u0275\u0275inject"](transform_plugin_service.y), core["\u0275\u0275inject"](data_reader_provider_service.A));
            }, IntellisenseModelService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: IntellisenseModelService,
                factory: IntellisenseModelService.\u0275fac
            }), IntellisenseModelService;
        }(), IntellisenseModelServiceProvider = {
            provide: injection_tokens.Pm,
            useClass: IntellisenseModelService
        }, tutorial_pop_up_service = __webpack_require__(56083), VisualCalcTutorialService = function() {
            function VisualCalcTutorialService(localizationService, tutorialService) {
                this.localizationService = localizationService, this.tutorialService = tutorialService;
            }
            return VisualCalcTutorialService.prototype.showTutorial = function() {
                var tutorialModel = this.createVisualCalcTutorial();
                this.tutorialService.startTutorial(tutorialModel);
            }, VisualCalcTutorialService.prototype.createVisualCalcTutorial = function() {
                var _a, key1 = "VisualCalcTemplateButton", key2 = "VisualCalcEditInFormulaBar";
                return {
                    itemKeys: [ key1, key2 ],
                    items: (_a = {}, _a[key1] = this.createTemplateModelItem(key1), _a[key2] = this.createFormulaBarModelItem(key2), 
                    _a),
                    isSequentialTutorial: !0
                };
            }, VisualCalcTutorialService.prototype.createTemplateModelItem = function(key) {
                var selector = '[data-unique-id="formula-bar-template-button"]';
                return {
                    title: this.localizationService.get("VisualCalcTeachingCallout_Template_Title"),
                    text: this.localizationService.get("VisualCalcTeachingCallout_Template_Description"),
                    buttonLabel: this.localizationService.get("Next_ButtonText"),
                    dataStoreKey: key,
                    canShow: function() {
                        return !!$(selector);
                    },
                    attachTo: function() {
                        return $(selector);
                    },
                    preferredOrientation: "right",
                    customClass: "trident no-icon big-popup",
                    modalButtonClassOverride: "ok-btn white-btn",
                    overrideCancelWithClose: !0,
                    closeOnBackdropClick: !0
                };
            }, VisualCalcTutorialService.prototype.createFormulaBarModelItem = function(key) {
                var selector = ".formulaBarEditorContainer";
                return {
                    title: this.localizationService.get("VisualCalcTeachingCallout_FormulaBar_Title"),
                    text: this.localizationService.get("VisualCalcTeachingCallout_FormulaBar_Description"),
                    buttonLabel: this.localizationService.get("Next_ButtonText"),
                    dataStoreKey: key,
                    canShow: function() {
                        return !!$(selector);
                    },
                    attachTo: function() {
                        return $(selector);
                    },
                    arrowOffset: {
                        top: 0,
                        left: 500
                    },
                    offset: {
                        top: 0,
                        left: -500
                    },
                    preferredOrientation: "bottom",
                    customClass: "trident no-icon big-popup",
                    modalButtonClassOverride: "ok-btn white-btn",
                    overrideCancelWithClose: !0,
                    closeOnBackdropClick: !0
                };
            }, VisualCalcTutorialService.\u0275fac = function(t) {
                return new (t || VisualCalcTutorialService)(core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](tutorial_pop_up_service.yU));
            }, VisualCalcTutorialService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualCalcTutorialService,
                factory: VisualCalcTutorialService.\u0275fac
            }), VisualCalcTutorialService;
        }(), visual_container_sub_selection_host_service = __webpack_require__(11934), outline_overlay_lazy_component = __webpack_require__(19086), formula_bar_component = __webpack_require__(64018), _c0 = [ "formulaBar" ], _c1 = [ "detailVisual" ];
        function VisualCalcEditorComponent_outline_overlay_lazy_7_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "outline-overlay-lazy", 8), 2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("regionOutlinesData", ctx_r3.regionOutlinesData);
            }
        }
        var _c2 = function() {
            return {
                formulaBarParentClass: ".visualCalcEditor",
                expandScaleFactor: .5,
                expandOffet: 0,
                fullyExpandedTooltip: "Formula_Bar_ExpandToMultiLine"
            };
        }, VisualCalcEditorComponent = function(_super) {
            function VisualCalcEditorComponent(behaviourService, intellisenseModelService, featureSwitchService, visualCalcEagerService, visualCalcDaxTemplateService, lazyScopeProvider, visualCalcTutorialService, subSelectionOutlineManager, visualContainerSubSelectionHostServiceFactory) {
                var _this = _super.call(this) || this;
                return _this.behaviourService = behaviourService, _this.intellisenseModelService = intellisenseModelService, 
                _this.featureSwitchService = featureSwitchService, _this.visualCalcEagerService = visualCalcEagerService, 
                _this.visualCalcDaxTemplateService = visualCalcDaxTemplateService, _this.lazyScopeProvider = lazyScopeProvider, 
                _this.visualCalcTutorialService = visualCalcTutorialService, _this.subSelectionOutlineManager = subSelectionOutlineManager, 
                _this.visualContainerSubSelectionHostServiceFactory = visualContainerSubSelectionHostServiceFactory, 
                _this.visualHTMLElementChanged = new core.EventEmitter, _this.templateSelected = _this.createEventAdapter(), 
                _this.visualCalculationTemplates = _this.visualCalcDaxTemplateService.getTemplates(), 
                _this.enableSubSelection = _this.featureSwitchService.featureSwitches.enableCalculationHighlighting, 
                _this.enableSubSelection && (_this.subSelectionHostService = _this.visualContainerSubSelectionHostServiceFactory.create(), 
                _this.regionOutlinesData = {
                    regionOutlines$: _this.subSelectionOutlineManager.getRegionOutlines$()
                }), _this;
            }
            return (0, tslib_es6.__extends)(VisualCalcEditorComponent, _super), Object.defineProperty(VisualCalcEditorComponent.prototype, "_detailVisualElementRef", {
                set: function(elementRef) {
                    var newValue = null == elementRef ? void 0 : elementRef.nativeElement, changed = newValue !== this.detailVisualElement;
                    this.detailVisualElement = newValue, changed && this.visualHTMLElementChanged.emit(newValue);
                },
                enumerable: !1,
                configurable: !0
            }), VisualCalcEditorComponent.prototype.ngAfterViewInit = function() {
                var _this = this, wantToEditVisualCalculation$ = (0, merge.T)((0, fromEvent.R)(this.formulaBar.nativeElement.querySelector(".formulaBarEditorMain"), "click"), (0, 
                fromEvent.R)(this.formulaBar.nativeElement.querySelector(".formulaBarEditorMain"), "keydown").pipe((0, 
                filter.h)(function(event) {
                    return "Enter" === event.key;
                }))), alreadyStartedEditingVisualCalculation$ = (0, merge.T)(this.visualCalcEagerService.onEditContextChange$(), this.templateSelected.$).pipe((0, 
                takeUntil.R)(this.onDestroy$));
                this.visualCalcEagerService.onViewContextChanged$().pipe((0, takeUntil.R)(this.onDestroy$), (0, 
                tap.b)(function() {
                    return focusManager.IK.focus(_this.formulaBar.nativeElement.querySelector(".formulaBarEditorMain"));
                }), (0, switchMap.w)(function() {
                    return wantToEditVisualCalculation$.pipe((0, takeUntil.R)(alreadyStartedEditingVisualCalculation$), (0, 
                    take.q)(1));
                })).subscribe(function() {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return [ 4, this.lazyScopeProvider.get(lazy_load_routes.w) ];

                              case 1:
                                return [ 4, _a.sent().enterVisualCalcEditingModeWithPlaceHolder(this.visualContainer, "Custom") ];

                              case 2:
                                return _a.sent(), [ 2 ];
                            }
                        });
                    });
                }), this.visualCalcTutorialService.showTutorial();
            }, VisualCalcEditorComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.behaviourService.setVisualContainer(this.visualContainer), this.intellisenseModelService.setVisualContainer(this.visualContainer), 
                this.hostServices = this.parentHostServices, this.enableSubSelection && (this.hostServices = (0, 
                Prototype.ED)(this.parentHostServices, function(h) {
                    h.getSubSelectionService = function() {
                        return _this.getVisualSubSelectionHostService();
                    };
                }), this.subSelectionOutlineManager.registerVisualContainer(this.visualContainer.name, this.subSelectionHostService.regionOutlines$, "annotation"));
            }, VisualCalcEditorComponent.prototype.ngOnDestroy = function() {
                return this.enableSubSelection && this.subSelectionOutlineManager.deregisterVisualContainer(this.visualContainer.name, "annotation"), 
                _super.prototype.ngOnDestroy.call(this);
            }, VisualCalcEditorComponent.prototype.onRightClick = function(e) {
                e.stopPropagation();
            }, VisualCalcEditorComponent.prototype.getVisualSubSelectionHostService = function() {
                var _this = this;
                return {
                    clearAllRegionOutlines: function() {
                        return _this.subSelectionHostService.clearAllRegionOutlines();
                    },
                    getAllRegionOutlines: function() {
                        return _this.subSelectionHostService.getAllRegionOutlines();
                    },
                    getRegionOutline: function(id) {
                        return _this.subSelectionHostService.getRegionOutline(id);
                    },
                    updateRegionOutlines: function(outlines) {
                        var _a, _b, visualBoundingClientRect = null === (_a = _this.detailVisualComponent) || void 0 === _a ? void 0 : _a.getVisualComponentBoundingClientRect();
                        visualBoundingClientRect && _this.subSelectionHostService.updateVisualRegionOutlines(outlines, null === (_b = _this.detailVisualElement) || void 0 === _b ? void 0 : _b.getBoundingClientRect(), visualBoundingClientRect, !1);
                    }
                };
            }, VisualCalcEditorComponent.\u0275fac = function(t) {
                return new (t || VisualCalcEditorComponent)(core["\u0275\u0275directiveInject"](injection_tokens.n9), core["\u0275\u0275directiveInject"](injection_tokens.Pm), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](visual_calc_eager_service.w), core["\u0275\u0275directiveInject"](VisualCalcDaxTemplateService), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](VisualCalcTutorialService), core["\u0275\u0275directiveInject"](subselection_outline_manager_service.g), core["\u0275\u0275directiveInject"](visual_container_sub_selection_host_service._));
            }, VisualCalcEditorComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: VisualCalcEditorComponent,
                selectors: [ [ "visual-calc-editor" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](_c0, 5, core.ElementRef), core["\u0275\u0275viewQuery"](_c1, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](detail_visual_component.X, 5)), 2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.formulaBar = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx._detailVisualElementRef = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.detailVisualComponent = _t.first);
                    }
                },
                inputs: {
                    visualContainer: "visualContainer",
                    themeCollection: "themeCollection",
                    viewport: "viewport",
                    parentHostServices: "parentHostServices",
                    detailVisualSpinnerActionCallback: "detailVisualSpinnerActionCallback"
                },
                outputs: {
                    visualHTMLElementChanged: "visualHTMLElementChanged"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ formula_bar_service.B, FormulaBarVisualCalcBehaviourServiceProvider, FormulaBarZoomServiceProvider, intellisense_host_service.Dz, IntellisenseModelServiceProvider, intellisense_service.e, VisualCalcTutorialService, subselection_outline_manager_service.g ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 8,
                vars: 16,
                consts: [ [ "data-automation-type", "visualCalcEditor", "role", "document", 1, "visualCalcEditor", 3, "contextmenu" ], [ "visualCalcEditor", "" ], [ 3, "isActive", "autoHide", "expandCollapseConfig", "implicitEndEditingOnBlur", "navMode", "shouldAlwaysEnableCancelButton", "daxTemplates", "templateSelected" ], [ "formulaBar", "" ], [ 1, "visualWithOutlinesOverlay" ], [ "data-automation-type", "detailVisual", 3, "inVisualCalcMode", "parentHostServices", "visualContainer", "themeCollection", "viewport", "detailVisualSpinnerActionCallback", "applyUIThemeToVisualModern" ], [ "detailVisual", "" ], [ "class", "outlinesOverlayContainer", 3, "regionOutlinesData", 4, "ngIf" ], [ 1, "outlinesOverlayContainer", 3, "regionOutlinesData" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0, 1), core["\u0275\u0275listener"]("contextmenu", function($event) {
                        return ctx.onRightClick($event);
                    }), core["\u0275\u0275elementStart"](2, "formula-bar", 2, 3), core["\u0275\u0275listener"]("templateSelected", function() {
                        return ctx.templateSelected.fn();
                    }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "div", 4), 
                    core["\u0275\u0275element"](5, "detail-visual", 5, 6), core["\u0275\u0275template"](7, VisualCalcEditorComponent_outline_overlay_lazy_7_Template, 1, 1, "outline-overlay-lazy", 7), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("isActive", !0)("autoHide", !1)("expandCollapseConfig", core["\u0275\u0275pureFunction0"](15, _c2))("implicitEndEditingOnBlur", !1)("navMode", void 0)("shouldAlwaysEnableCancelButton", !1)("daxTemplates", ctx.visualCalculationTemplates), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("inVisualCalcMode", !0)("parentHostServices", ctx.hostServices)("visualContainer", ctx.visualContainer)("themeCollection", ctx.themeCollection)("viewport", ctx.viewport)("detailVisualSpinnerActionCallback", ctx.detailVisualSpinnerActionCallback)("applyUIThemeToVisualModern", !0), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.enableSubSelection));
                },
                dependencies: [ common.NgIf, detail_visual_component.X, outline_overlay_lazy_component.P, formula_bar_component.L ],
                styles: [ ".visualCalcEditor[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:100%;height:100%;overflow:visible;flex-grow:1;box-sizing:border-box;border-width:10px 10px 0 10px;border-style:solid;border-color:var(--colorNeutralStroke1);background-color:var(--colorNeutralBackground1)}.visualCalcEditor[_ngcontent-%COMP%]   .visualWithOutlinesOverlay[_ngcontent-%COMP%]{position:relative;flex-basis:0;flex-grow:1;overflow:hidden;display:flex}.visualCalcEditor[_ngcontent-%COMP%]   .visualWithOutlinesOverlay[_ngcontent-%COMP%]   detail-visual[_ngcontent-%COMP%]{flex:1;height:100%;z-index:0}.visualCalcEditor[_ngcontent-%COMP%]   .visualWithOutlinesOverlay[_ngcontent-%COMP%]   .outlinesOverlayContainer[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;box-sizing:border-box;z-index:1;pointer-events:none;background:transparent}" ]
            }), VisualCalcEditorComponent;
        }(rx_component.w), sqExpr = __webpack_require__(94419), enums = __webpack_require__(46135), VisualCalcService = function() {
            function VisualCalcService(conceptualSchemaProxy, dataSources, vcEagerService, visualAuthoring, visibilityService, panesVisibilityService, featureSwitchService, visualAuthoringOperationService, certifiedEventsService, telemetryService, explorationCapabilitiesService) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.vcEagerService = vcEagerService, this.visualAuthoring = visualAuthoring, this.visibilityService = visibilityService, 
                this.panesVisibilityService = panesVisibilityService, this.featureSwitchService = featureSwitchService, 
                this.visualAuthoringOperationService = visualAuthoringOperationService, this.certifiedEventsService = certifiedEventsService, 
                this.telemetryService = telemetryService, this.explorationCapabilitiesService = explorationCapabilitiesService;
            }
            return VisualCalcService.prototype.enterVisualCalcMode = function(visualContainer, queryName, roleName, parentContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return 16 !== visualContainer.visibility && (visualContainer.config.singleVisual.autoSelectVisualType = !1), 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            return schema = _a.sent(), [ 4, this.visualAuthoring.ensureNativeReferenceName(schema, visualContainer) ];

                          case 2:
                            return _a.sent(), this.panesVisibilityService.closePane("quickMeasures"), this.featureSwitchService.featureSwitches.onObject && this.panesVisibilityService.setPaneExpansion("build", !0, !0), 
                            _.isEmpty(queryName) ? [ 4, this.enterVisualCalcEditingModeWithPlaceHolder(visualContainer, "Custom", void 0, void 0, roleName, parentContextActivity) ] : [ 3, 4 ];

                          case 3:
                            return _a.sent(), [ 3, 5 ];

                          case 4:
                            this.vcEagerService.enterEditMode(queryName, "Custom", !1), _a.label = 5;

                          case 5:
                            return this.visibilityService.set(visualContainer, 16), [ 2 ];
                        }
                    });
                });
            }, VisualCalcService.prototype.updateVisualCalculation = function(visualContainer, name, formula, queryName, isNew) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var fieldIndex, role, hasUpdatedSucceeded, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _a = (0, visual_calc_utils.dQ)(visualContainer, queryName), fieldIndex = _a.fieldIndex, 
                            role = _a.role, VisualsCommon_debug.fF.assert(function() {
                                return fieldIndex >= 0;
                            }, "Query name of field doesn't exist"), [ 4, this.visualAuthoring.updateVisualCalculation({
                                visualContainer,
                                fieldIndex,
                                role,
                                name,
                                expression: formula,
                                shouldUnhide: isNew,
                                dataType: void 0
                            }, isNew) ];

                          case 1:
                            return hasUpdatedSucceeded = _b.sent(), this.certifiedEventsService.logStandardizedFeatureEvent({
                                correlationId: this.telemetryService.root.id,
                                featureName: "VisualCalculationSubmitted",
                                activityName: visual_calc_eager_service.f,
                                activityStatus: "Succeeded",
                                resultCode: "",
                                activityAttributes: {
                                    initialCreation: isNew
                                }
                            }), [ 2, hasUpdatedSucceeded ];
                        }
                    });
                });
            }, VisualCalcService.prototype.removeVisualCalculation = function(visualContainer, queryName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var fieldIndex, role, schema, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _a = (0, visual_calc_utils.dQ)(visualContainer, queryName), fieldIndex = _a.fieldIndex, 
                            role = _a.role, VisualsCommon_debug.fF.assert(function() {
                                return fieldIndex >= 0;
                            }, "Query name of field doesn't exist"), [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            return schema = _b.sent(), [ 2, this.visualAuthoringOperationService.removeFieldFromRole({
                                role,
                                projOptions: {
                                    fieldIndex
                                }
                            }, schema, visualContainer) ];
                        }
                    });
                });
            }, VisualCalcService.prototype.enterVisualCalcEditingModeWithPlaceHolder = function(visualContainer, editingType, overrideFormulaText, calculationName, roleName, parentContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualQuery, uniqueName, dataSources, sqVisualCalc, hasSucceeded, queryName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return visualQuery = (0, visualContainerUtils.Xf)(visualContainer), uniqueName = (0, 
                            visual_calc_utils.ND)(visualQuery, calculationName), dataSources = this.dataSources.get(), 
                            sqVisualCalc = (0, sqExpr.YU)(uniqueName, "BLANK()"), hasSucceeded = !1, null == roleName ? [ 3, 2 ] : [ 4, this.visualAuthoring.addFieldInRole(sqVisualCalc, roleName, dataSources, visualContainer, void 0, void 0, void 0, !0, !0, parentContextActivity) ];

                          case 1:
                            return hasSucceeded = _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.visualAuthoring.addFieldToVisual(sqVisualCalc, dataSources, visualContainer, "VisualCalculationMode", !0, !0, parentContextActivity) ];

                          case 3:
                            hasSucceeded = _a.sent(), _a.label = 4;

                          case 4:
                            return hasSucceeded && (queryName = (0, visual_calc_utils.oG)((0, visualContainerUtils.Xf)(visualContainer), uniqueName), 
                            this.vcEagerService.enterEditMode(queryName, editingType, !0, overrideFormulaText)), 
                            [ 2, hasSucceeded ];
                        }
                    });
                });
            }, VisualCalcService.prototype.getVisualCalcCreationInfo = function(visualContainer, capability, roleName) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var explorationCapabilities, dataRole;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return (null == (explorationCapabilities = this.explorationCapabilitiesService.getCapabilities()) ? void 0 : explorationCapabilities.disableVisualCalcAuthoring) ? [ 2, {
                                supportVisualCalcCreation: !1
                            } ] : [ 4, this.vcEagerService.canSupportVisualCalc(visualContainer) ];

                          case 1:
                            return _c.sent() ? (null === (_b = null === (_a = null == visualContainer ? void 0 : visualContainer.config) || void 0 === _a ? void 0 : _a.singleVisual) || void 0 === _b ? void 0 : _b.autoSelectVisualType) ? [ 2, {
                                supportVisualCalcCreation: !0,
                                tooltip: "NewVisualCalc"
                            } ] : !(dataRole = _.find(capability.dataRoles, function(dataRole) {
                                return dataRole.name === roleName;
                            })) || dataRole.kind !== enums.DW.Measure && dataRole.kind !== enums.DW.GroupingOrMeasure ? [ 2, {
                                supportVisualCalcCreation: !1
                            } ] : [ 2, {
                                supportVisualCalcCreation: !0,
                                tooltip: "NewVisualCalc"
                            } ] : [ 2, {
                                supportVisualCalcCreation: !1
                            } ];
                        }
                    });
                });
            }, VisualCalcService.\u0275fac = function(t) {
                return new (t || VisualCalcService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](visual_calc_eager_service.w), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visibility_service.w), core["\u0275\u0275inject"](panes_visibility_service.r), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](visual_authoring_operations_service.Q), core["\u0275\u0275inject"](Telemetry.ly), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](exploration_capabilities_service.U));
            }, VisualCalcService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualCalcService,
                factory: VisualCalcService.\u0275fac
            }), VisualCalcService;
        }(), manifests = [ {
            type: VisualCalcEditorComponent,
            componentId: "VisualCalcEditorComponentId"
        } ], VisualCalcServiceLazyProvider = {
            provide: "VisualCalcService",
            useFactory: VisualCalcServicePromiseFactory,
            deps: [ conceptual_schema_proxy_service.i, data_sources_service.D, visual_calc_eager_service.w, visual_authoring_service.$8, visibility_service.w, panes_visibility_service.r, feature_switch_service.vZ, visual_authoring_operations_service.Q, Telemetry.ly, Telemetry.y0, promiseFactory.t, exploration_capabilities_service.U ]
        };
        function VisualCalcServicePromiseFactory(conceptualSchemaProxy, dataSources, vcEagerService, visualAuthoring, visibilityService, panesVisibilityService, featureSwitchService, visualAuthoringOperations, certifiedEventsService, telemetryService, promiseFactory, exploreCapabilitiesService) {
            var service = new VisualCalcService(conceptualSchemaProxy, dataSources, vcEagerService, visualAuthoring, visibilityService, panesVisibilityService, featureSwitchService, visualAuthoringOperations, certifiedEventsService, telemetryService, exploreCapabilitiesService);
            return promiseFactory.resolve(service);
        }
        var VisualCalcEditorModule = function() {
            function VisualCalcEditorModule() {}
            return VisualCalcEditorModule.\u0275fac = function(t) {
                return new (t || VisualCalcEditorModule);
            }, VisualCalcEditorModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: VisualCalcEditorModule
            }), VisualCalcEditorModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ VisualCalcServiceLazyProvider, VisualCalcDaxTemplateService ],
                imports: [ common.CommonModule, ExploreUI_module.J, fesm2022_forms.u5, format_mode_eager_module.j, lazy_load_module.N.withManifests(manifests), localization_module.v, pbi_icon_module.U, formula_bar_ui_module.p ]
            }), VisualCalcEditorModule;
        }();
    },
    64018: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            L: function() {
                return FormulaBarComponent;
            }
        });
        var tslib_es6 = __webpack_require__(81337), injection_tokens = __webpack_require__(15903), constants = __webpack_require__(81892), paddingLeft = "padding-left", paddingRight = "padding-right", paddingTop = "padding-top", paddingBottom = "padding-bottom", marginLeft = "margin-left", marginRight = "margin-right", marginTop = "margin-top", marginBottom = "margin-bottom", borderLeft = "border-left-width", borderRight = "border-right-width", borderTop = "border-top-width", borderBottom = "border-bottom-width";
        function getPadding(element, direction) {
            return 1 === direction ? parseInt(element.css(paddingLeft), 10) + parseInt(element.css(paddingRight), 10) : parseInt(element.css(paddingTop), 10) + parseInt(element.css(paddingBottom), 10);
        }
        function getMargin(element, direction) {
            return 1 === direction ? parseInt(element.css(marginLeft), 10) + parseInt(element.css(marginRight), 10) : parseInt(element.css(marginTop), 10) + parseInt(element.css(marginBottom), 10);
        }
        function getBorder(element, direction) {
            return 1 === direction ? parseInt(element.css(borderLeft), 10) + parseInt(element.css(borderRight), 10) : parseInt(element.css(borderTop), 10) + parseInt(element.css(borderBottom), 10);
        }
        function getMinWidth(element) {
            return parseInt(element.css("minWidth"), 10);
        }
        function getAllSpace(startElement, endAncestorElement, direction) {
            for (var result = getMargin(startElement, direction), htmlElement = $("html")[0], parentElement = startElement.parent(); parentElement.length > 0 && parentElement[0] !== htmlElement && parentElement[0] !== endAncestorElement[0]; ) result = result + getPadding(parentElement, direction) + getBorder(parentElement, direction) + getMargin(parentElement, direction), 
            parentElement = parentElement.parent();
            return parentElement[0] === endAncestorElement[0] ? result = result + getPadding(parentElement, direction) + getBorder(parentElement, direction) : 0;
        }
        var animations = __webpack_require__(26124), core = __webpack_require__(50423), assert = __webpack_require__(55863), dax_capabilities_service_interface = __webpack_require__(74249), debug = __webpack_require__(62458), monacoEditorUtility = __webpack_require__(2951), monaco_editor_host_types = __webpack_require__(25261), monaco_editor_host_component = __webpack_require__(1685), Subject = __webpack_require__(30794), BehaviorSubject = __webpack_require__(35510), from = __webpack_require__(82762), combineLatest = __webpack_require__(59017), distinctUntilChanged = __webpack_require__(77526), map = __webpack_require__(14172), takeUntil = __webpack_require__(83317), high_contrast_css_generation_service = __webpack_require__(64647), screen_reader_service = __webpack_require__(83309), formula_bar_service = __webpack_require__(15783), localization_service = __webpack_require__(65181), formula_bar_interaction_service = __webpack_require__(85270), common = __webpack_require__(77476), fesm2022_forms = __webpack_require__(17174), localize_directive = __webpack_require__(59968), pbi_tooltip_directive = __webpack_require__(36858), pbi_svg_use_symbol_component = __webpack_require__(45916), on_resize_directive = __webpack_require__(698), keyboard_shortcuts_directive = __webpack_require__(35756), tri_dropdown_component = __webpack_require__(20551), tri_dropdown_item_component = __webpack_require__(64716), tri_dropdown_item_menu_directive = __webpack_require__(85721), tri_svg_icon_component = __webpack_require__(74913), events = __webpack_require__(4715), displayNameGetter = __webpack_require__(21571), rx_component = __webpack_require__(73221), Telemetry = __webpack_require__(21617), pbi_menu_contracts = __webpack_require__(64560), pbi_overlay_positions = __webpack_require__(25512), take = __webpack_require__(48787), pbi_menu_service = __webpack_require__(5467), localize_pipe = __webpack_require__(85102);
        function TemplateButtonComponent_button_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r2 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 1), core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r2);
                    var ctx_r1 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r1.showTemplatesMenu($event));
                }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275element"](2, "tri-svg-icon", 2), 
                core["\u0275\u0275elementEnd"]();
            }
            2 & rf && core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](1, 1, "Visual_Calculation_Template_Button_Tooltip"));
        }
        var TemplateButtonComponent = function(_super) {
            function TemplateButtonComponent(elementRef, pbiMenuService, localizationService, telemetryService) {
                var _this = _super.call(this) || this;
                return _this.elementRef = elementRef, _this.pbiMenuService = pbiMenuService, _this.localizationService = localizationService, 
                _this.telemetryService = telemetryService, _this.selectedTemplate = new core.EventEmitter, 
                _this.showButton$ = new BehaviorSubject.X(!1), _this;
            }
            return (0, tslib_es6.__extends)(TemplateButtonComponent, _super), TemplateButtonComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("daxTemplates").pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(daxTemplates) {
                    _this.createTemplateMenu(daxTemplates);
                });
            }, TemplateButtonComponent.prototype.showTemplatesMenu = function(event) {
                var _this = this;
                event.preventDefault();
                var menu = this.templatingMenu;
                null != menu && 0 !== menu.items.length && this.pbiMenuService.open({
                    menu,
                    origin: this.elementRef.nativeElement,
                    flexibleConnectedPositions: [ (0, pbi_overlay_positions.Oq)(0, 0) ],
                    closeOnButtonClick: !0,
                    menuMode: pbi_menu_contracts.Kb.Compact
                }).onButtonClick$.pipe((0, take.q)(1)).subscribe(function(value) {
                    var template = value.data;
                    _this.selectedTemplate.emit(template), _this.telemetryService.logEvent(events.Zs, {
                        templateName: template.capabilities.name
                    });
                });
            }, TemplateButtonComponent.prototype.createTemplateMenu = function(templates) {
                var _this = this, items = _.map(templates, function(dax) {
                    var capabilities = dax.capabilities;
                    return {
                        type: pbi_menu_contracts.iB.Button,
                        id: capabilities.name,
                        text: (0, displayNameGetter.G)(capabilities.displayName, _this.localizationService),
                        tooltip: (0, displayNameGetter.G)(capabilities.description, _this.localizationService),
                        data: dax
                    };
                });
                this.templatingMenu = {
                    items
                }, this.showButton$.next(items.length > 0);
            }, TemplateButtonComponent.\u0275fac = function(t) {
                return new (t || TemplateButtonComponent)(core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](pbi_menu_service.o), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](Telemetry.y0));
            }, TemplateButtonComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: TemplateButtonComponent,
                selectors: [ [ "template-button" ] ],
                inputs: {
                    daxTemplates: "daxTemplates"
                },
                outputs: {
                    selectedTemplate: "selectedTemplate"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ "class", "templateButton", "tabindex", "0", 3, "pbiTooltip", "click", 4, "ngIf" ], [ "tabindex", "0", 1, "templateButton", 3, "pbiTooltip", "click" ], [ "tri-svg-icon-24", "", "name", "math_formula_20_regular", "sprite", "visual-calc-icons" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, TemplateButtonComponent_button_0_Template, 3, 3, "button", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.showButton$));
                },
                dependencies: [ common.NgIf, pbi_tooltip_directive.V, tri_svg_icon_component.M, common.AsyncPipe, localize_pipe.F ],
                styles: [ ".templateButton[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;width:24px;background-color:transparent}.templateButton[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{color:var(--colorNeutralForeground2)}.templateButton[_ngcontent-%COMP%]:hover{background:var(--colorNeutralBackground1Hover)}.templateButton[_ngcontent-%COMP%]:hover   tri-svg-icon[_ngcontent-%COMP%]{color:var(--colorNeutralForeground2Hover)}.templateButton[_ngcontent-%COMP%]:active   tri-svg-icon[_ngcontent-%COMP%]{color:var(--colorNeutralForeground2Pressed)}" ]
            }), TemplateButtonComponent;
        }(rx_component.w), _c0 = [ "monacoEditorHostContainer" ];
        function FormulaBarComponent_monaco_editor_host_6_Template(rf, ctx) {
            if (1 & rf) {
                var _r8 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "monaco-editor-host", 21), core["\u0275\u0275listener"]("initialized", function() {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r7 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r7.onMonacoEditorInitialized());
                })("tabFocusMode", function($event) {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.onTabFocusModeChanged($event));
                })("onContentChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r10 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r10.onContentChanged($event));
                })("onContentHeightChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r11 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r11.onContentHeightChanged($event));
                })("onFocus", function() {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r12 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r12.onEditorFocus());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var languageOptions_r6 = ctx.ngIf, ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("selection", ctx_r1.editorHost.selection)("isReadOnly", ctx_r1.isReadOnly)("formulaText", ctx_r1.editorHost.text)("languageOptions", languageOptions_r6)("hidden", !ctx_r1.isEditorEnabled);
            }
        }
        function FormulaBarComponent_button_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r14 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 22), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r13 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r13.toggleTabMovesFocus());
                }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275elementEnd"]();
            }
            2 & rf && core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](1, 1, "Tab_Moves_Focus_Toggle"));
        }
        function FormulaBarComponent_div_12_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 23), core["\u0275\u0275element"](1, "pbi-svg-use-symbol", 24)(2, "tri-svg-icon", 25)(3, "textarea", 26), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbiTooltip", ctx_r3.alertText)("ngModel", ctx_r3.alertText), 
                core["\u0275\u0275attribute"]("aria-label", ctx_r3.alertText);
            }
        }
        function FormulaBarComponent_tri_dropdown_trigger_17_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-trigger"), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]()), 
            2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 1, core["\u0275\u0275pipeBind1"](3, 3, ctx_r4.selectedEditModeOption$).displayName), " ");
            }
        }
        function FormulaBarComponent_tri_dropdown_item_19_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-item", 27), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r15 = ctx.$implicit;
                core["\u0275\u0275property"]("value", option_r15), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 2, option_r15.displayName), " ");
            }
        }
        var formulaInteractableSelectors = [ ".formulaBarEditorContainer", ".formulaBarButtons", "ribbon [data-unique-id='clipboardGroupMlr'], ribbon [data-unique-id='clipboardGroupSlr'], .ms-Callout #FlyoutMenuId", "ribbon [data-automation-type='RibbonTab'][data-unique-id='home']" ], FormulaBarComponent = function() {
            function FormulaBarComponent(element, highContrastCssGenerationService, formulaBarService, localizationService, screenReaderService, formulaBarInteractionService, cdr, daxCapabilitiesService, formulaBarZoomService) {
                var _this = this;
                this.element = element, this.highContrastCssGenerationService = highContrastCssGenerationService, 
                this.formulaBarService = formulaBarService, this.localizationService = localizationService, 
                this.screenReaderService = screenReaderService, this.formulaBarInteractionService = formulaBarInteractionService, 
                this.cdr = cdr, this.daxCapabilitiesService = daxCapabilitiesService, this.formulaBarZoomService = formulaBarZoomService, 
                this.catchOutsideClickEventCallBack = function(event) {
                    return !1;
                }, this.implicitEndEditingOnBlur = !0, this.navMode = "Group", this.daxTemplates = [], 
                this.beginEdit = new core.EventEmitter, this.endEdit = new core.EventEmitter, this.templateSelected = new core.EventEmitter, 
                this.editorHost = {}, this.formulaBarDropdownConfigurations = [], this.destroy$ = new Subject.xQ, 
                this._dropdownOptions$ = new BehaviorSubject.X(void 0), this._dropdownVisible$ = new BehaviorSubject.X(!1), 
                this._selectedEditModeOption$ = new BehaviorSubject.X(void 0), this.onDocumentMouseDownCapture = function(mouseDownEvent) {
                    _this.lastCapturedMousedownEvent = mouseDownEvent, isInteractableWhileEditing(mouseDownEvent.target) || _this.formulaBarService.hasUnsavedChanges(_this.getCurrentEditorText()) && mouseDownEvent.stopImmediatePropagation();
                }, this.onDocumentClickCapture = function(clickEvent) {
                    var mousedownTarget = _this.lastCapturedMousedownEvent && _this.lastCapturedMousedownEvent.target;
                    _this.lastCapturedMousedownEvent = void 0;
                    var mousedownStartedInFormulaBar = !mousedownTarget || isInteractableWhileEditing(mousedownTarget), clickIsInsideFormulaBar = isInteractableWhileEditing(clickEvent.target);
                    mousedownStartedInFormulaBar || clickIsInsideFormulaBar || _this.catchOutsideClickEventCallBack(clickEvent) || (_this.formulaBarService.hasUnsavedChanges(_this.getCurrentEditorText()) && (clickEvent.stopPropagation(), 
                    clickEvent.preventDefault()), _this.onBlur());
                }, this.triDropdownOptions = {
                    panelClass: constants.Uu
                }, this.expandedState = 1, this.languageOptions$ = (0, from.D)(this.daxCapabilitiesService.getCapabilities());
            }
            return Object.defineProperty(FormulaBarComponent.prototype, "selectedEditModeOption$", {
                get: function() {
                    return this._selectedEditModeOption$;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(FormulaBarComponent.prototype, "editMode$", {
                get: function() {
                    return this._selectedEditModeOption$.pipe((0, distinctUntilChanged.x)(), (0, map.U)(function(option) {
                        return null == option ? void 0 : option.key;
                    }));
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.setEditMode = function(editMode) {
                var selectedIndex = this.formulaBarDropdownConfigurations.findIndex(function(config) {
                    return config.key === editMode;
                });
                (0, assert.hu)(selectedIndex > -1, "Invalid calculation edit mode"), this._selectedEditModeOption$.next(this.formulaBarDropdownConfigurations[selectedIndex]);
            }, Object.defineProperty(FormulaBarComponent.prototype, "editModeOptions$", {
                get: function() {
                    return this._dropdownOptions$.asObservable();
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.setEditModeOptions = function(editModeOptions) {
                this._dropdownOptions$.next(editModeOptions), this._selectedEditModeOption$.next(void 0);
            }, Object.defineProperty(FormulaBarComponent.prototype, "showEditModeSelector$", {
                get: function() {
                    return this._dropdownVisible$.asObservable();
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.showEditModeSelector = function(show) {
                this._dropdownVisible$.next(show);
            }, FormulaBarComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.initializeHighContrastRules(), this.isHidden = this.autoHide, this.setReadOnly(!0), 
                            (0, combineLatest.aj)([ this._dropdownOptions$, this._dropdownVisible$ ]).pipe((0, 
                            takeUntil.R)(this.destroy$)).subscribe(function(_a) {
                                var dropdownVisible = _a[1];
                                _this.formulaBarDropdownConfigurations = _a[0], _this.formulaDropdownWidth = dropdownVisible ? getMinWidth($(".dropdownContainer")) : 0, 
                                _this.recalculateOffset(), _this.onResize();
                            }), [ 4, this.formulaBarService.setUICulture() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.ngAfterViewInit = function() {
                var _this = this;
                this.formulaBarService.registerFormulaBarControl(this), this.formulaBarInteractionService.registerFormulaBarInteractionControl(this), 
                this.resizeObserver = new ResizeObserver(function() {
                    window.requestAnimationFrame(function() {
                        _this.onResize();
                    });
                }), this.resizeObserver.observe(this.element.nativeElement.closest(this.expandCollapseConfig.formulaBarParentClass));
            }, FormulaBarComponent.prototype.ngOnDestroy = function() {
                $(this.element.nativeElement).off(".formulaBarController"), $(this.monacoEditorHostContainer.nativeElement).off(".formulaBarController"), 
                this.destroy$.next(), this.destroy$.complete(), this.resizeObserver && (this.resizeObserver.unobserve(this.element.nativeElement.closest(this.expandCollapseConfig.formulaBarParentClass)), 
                this.resizeObserver.disconnect());
            }, FormulaBarComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarButtons", "{ background-color: @buttonBackgroundColor !important; border-color: @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarButtons", "{ background-color: @buttonBackgroundColor !important; border-color: @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarAlert, formula-bar .formulaBar .formulaBarAlert .messageAlert", "{ background-color: @backgroundColor !important; color: @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarAlert", "{ border: 1px solid @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule("formula-bar .formulaBar .formulaBarEditorContainer", "{ background-color: @backgroundColor !important; }");
            }, Object.defineProperty(FormulaBarComponent.prototype, "willCollapse", {
                get: function() {
                    return 0 === this.nextExpandCollapseState;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(FormulaBarComponent.prototype, "isEditorEnabled", {
                get: function() {
                    return !!this.lastCommittedFormulaText || this.isEditing;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(FormulaBarComponent.prototype, "formulaBarExpanderTooltip", {
                get: function() {
                    var _a, tooltipText = "Formula_Bar_ExpandToFull";
                    switch (this.nextExpandCollapseState) {
                      case 0:
                        tooltipText = "Formula_Bar_CollapseToSingleLine";
                        break;

                      case 1:
                        tooltipText = "Formula_Bar_ExpandToFit";
                        break;

                      case 2:
                        tooltipText = null !== (_a = this.expandCollapseConfig.fullyExpandedTooltip) && void 0 !== _a ? _a : "Formula_Bar_ExpandToFull";
                    }
                    return this.localizationService.get(tooltipText);
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarComponent.prototype.setReadOnly = function(value) {
                this.isReadOnly = value;
            }, FormulaBarComponent.prototype.onMonacoEditorInitialized = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var $element, componentCollapsedHeight, componentFullExpandHeight;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.monacoEditorInitialized = !0, $element = $(this.element.nativeElement), 
                            componentCollapsedHeight = parseInt($element.css("min-height"), 10), componentFullExpandHeight = parseInt($element.css("max-height"), 10), 
                            this.monacoEditorUtility = new monacoEditorUtility.j0(this.textEditorHost.textEditor), 
                            [ 4, this.textEditorHost.registerActions(this.getKeyboardActions()) ];

                          case 1:
                            return _a.sent(), this.textEditorHeightOffset = this.calculateTextEditorHeightOffset(), 
                            this.recalculateOffset(), this.textEditorFullExpandHeight = componentFullExpandHeight - this.textEditorHeightOffset, 
                            this.textEditorCollapsedHeight = componentCollapsedHeight - this.textEditorHeightOffset, 
                            this.targetEditorHeight = this.textEditorCollapsedHeight, this.onContentHeightChanged(this.textEditorHost.textEditor.getContentHeight()), 
                            this.onResize(), this.focusOnInitialized && this.focus(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.calculateTextEditorHeightOffset = function() {
                var $element = $(this.element.nativeElement);
                return getAllSpace($element.find("monaco-editor-host"), $element, 0);
            }, FormulaBarComponent.prototype.onTabFocusModeChanged = function(tabMovesFocus) {
                this.tabMovesFocus = tabMovesFocus;
            }, FormulaBarComponent.prototype.updateEditorExpandedHeight = function() {
                var _a, _b, alertHeight = this.alertText ? 20 : 0, formulaBarParentClass = this.expandCollapseConfig.formulaBarParentClass, expandScaleFactor = null !== (_a = this.expandCollapseConfig.expandScaleFactor) && void 0 !== _a ? _a : 1, offset = null !== (_b = this.expandCollapseConfig.expandOffet) && void 0 !== _b ? _b : -80, componentFullExpandHeight = expandScaleFactor * $(this.element.nativeElement).closest(formulaBarParentClass).height() + offset;
                this.textEditorFullExpandHeight = componentFullExpandHeight - this.textEditorHeightOffset - alertHeight;
            }, FormulaBarComponent.prototype.updateFormulaBarMaxHeight = function() {
                var alertHeight = this.alertText ? 20 : 0, maxHeight = 1e7;
                0 === this.expandedState ? maxHeight = this.textEditorCollapsedHeight + this.textEditorHeightOffset + alertHeight : 1 === this.expandedState && (maxHeight = this.targetEditorHeight + this.textEditorHeightOffset + alertHeight), 
                debug.fF.assertValue(maxHeight, "maxHeight"), $(this.element.nativeElement).css("max-height", maxHeight);
            }, FormulaBarComponent.prototype.show = function() {
                this.isHidden && (this.isHidden = !1, this.cdr.detectChanges());
            }, FormulaBarComponent.prototype.hide = function() {
                this.isHidden || (this.isHidden = !0);
            }, FormulaBarComponent.prototype.clear = function() {
                this.setCommittedFormulaBarText(""), this.autoHide && this.hide();
            }, FormulaBarComponent.prototype.setSelection = function(selection) {
                this.editorHost.selection = selection, this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.showAlertMessage = function(content) {
                content = content.replace(/\n/g, ""), this.alertText = content, this.screenReaderService.alert(this.localizationService.format("Formula_Bar_Warning_Aria", content)), 
                this.updateFormulaBarMaxHeight(), this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.toggleTabMovesFocus = function() {
                this.textEditorHost.toggleTabMovesFocus(), this.textEditorHost.focus();
            }, FormulaBarComponent.prototype.hideAlert = function() {
                this.alertText = void 0, this.updateFormulaBarMaxHeight(), this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.setCommittedFormulaBarText = function(value) {
                this.lastCommittedFormulaText = value, this.editorHost.text = value, this.cdr.detectChanges();
            }, FormulaBarComponent.prototype.focus = function() {
                this.monacoEditorInitialized ? (this.textEditorHost.focus(), this.cdr.detectChanges()) : this.focusOnInitialized = !0;
            }, FormulaBarComponent.prototype.scrollTop = function() {
                this.monacoEditorInitialized && this.textEditorHost.scrollTop();
            }, FormulaBarComponent.prototype.copy = function() {
                this.textEditorHost.copy();
            }, FormulaBarComponent.prototype.cut = function() {
                this.textEditorHost.cut();
            }, FormulaBarComponent.prototype.paste = function(text) {
                this.textEditorHost.paste(text);
            }, FormulaBarComponent.prototype.resetModelTokens = function(value) {
                this.textEditorHost.resetModelTokens(value);
            }, FormulaBarComponent.prototype.isFormulaBarActive = function() {
                return this.isActive;
            }, FormulaBarComponent.prototype.onToggleExpandCollapse = function() {
                this.setExpandCollapseState(this.nextExpandCollapseState);
            }, FormulaBarComponent.prototype.setExpandCollapseState = function(desiredState) {
                switch (desiredState) {
                  case 0:
                    this.collapse();
                    break;

                  case 1:
                    this.fitToContent();
                    break;

                  case 2:
                    this.fullExpand();
                }
                this.calculateNextExpandCollapseState();
            }, FormulaBarComponent.prototype.calculateNextExpandCollapseState = function() {
                switch (this.expandedState) {
                  case 0:
                    this.nextExpandCollapseState = this.editorContentHeight <= this.textEditorCollapsedHeight ? 2 : 1;
                    break;

                  case 1:
                    this.nextExpandCollapseState = this.editorContentHeight >= this.textEditorFullExpandHeight ? 0 : this.editorContentHeight <= this.textEditorCollapsedHeight || this.isEditing ? 2 : 0;
                    break;

                  case 2:
                    this.nextExpandCollapseState = this.editorContentHeight <= this.textEditorCollapsedHeight ? 1 : 0;
                    break;

                  default:
                    debug.fF.assertNever(this.expandedState);
                }
            }, FormulaBarComponent.prototype.fullExpand = function() {
                this.expandedState = 2, this.updateEditorExpandedHeight(), this.layout(void 0, this.textEditorFullExpandHeight);
            }, FormulaBarComponent.prototype.fitToContent = function() {
                this.expandedState = 1, this.updateEditorExpandedHeight(), this.targetEditorHeight = Math.max(this.textEditorCollapsedHeight, Math.min(this.textEditorFullExpandHeight, this.editorContentHeight)), 
                this.layout(void 0, this.targetEditorHeight);
            }, FormulaBarComponent.prototype.collapse = function() {
                this.expandedState = 0, this.layout(void 0, this.textEditorCollapsedHeight);
            }, FormulaBarComponent.prototype.layout = function(width, height) {
                this.updateFormulaBarMaxHeight(), this.monacoEditorInitialized && this.textEditorHost.layout(width, height);
            }, FormulaBarComponent.prototype.recalculateOffset = function() {
                var _a, buttonsGroup = $(".formulaBarButtons"), $element = $(this.element.nativeElement), start = $element.find("monaco-editor-host");
                this.textEditorWidthOffset = getAllSpace(start, $element, 1) + getMinWidth(buttonsGroup) + getMargin(buttonsGroup, 1) + (null !== (_a = this.formulaDropdownWidth) && void 0 !== _a ? _a : 0);
            }, FormulaBarComponent.prototype.commitFormulaBarEdit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var newFormulaText;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.endFormulaEdit(), (newFormulaText = this.getCurrentEditorText()) === this.lastCommittedFormulaText ? [ 3, 2 ] : (this.lastCommittedFormulaText = newFormulaText, 
                            [ 4, this.formulaBarService.onSubmit(newFormulaText) ]);

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.formulaBarService.onSubmit(newFormulaText) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.onBlur = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.implicitEndEditingOnBlur ? this.endFormulaEdit() : (this.removeFocus(), 
                            this.removeCatchClickOutsideFormulaBar()), this.lastCommittedFormulaText = this.monacoEditorInitialized ? this.getCurrentEditorText() : "", 
                            [ 4, this.formulaBarService.onBlur(this.lastCommittedFormulaText) ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.removeFocus = function() {
                $(document.activeElement).blur(), $(document.body).focus();
            }, FormulaBarComponent.prototype.onContentChanged = function(changes) {
                var cursorInfo = this.monacoEditorUtility.getCursorPosition();
                this.formulaBarService.onContentChanged(this.monacoEditorUtility.getEditorText(), cursorInfo.position, cursorInfo.selectionStart, changes);
            }, FormulaBarComponent.prototype.onContentHeightChanged = function(contentHeight) {
                this.editorContentHeight = contentHeight + 2, (1 === this.expandedState || 0 === this.expandedState && this.isEditing) && this.fitToContent(), 
                this.calculateNextExpandCollapseState();
            }, FormulaBarComponent.prototype.submit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.commitFormulaBarEdit() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.cancel = function() {
                this.endFormulaEdit(), this.formulaBarService.onCancel(this.lastCommittedFormulaText), 
                this.autoHide && this.hide();
            }, FormulaBarComponent.prototype.onEditorFocus = function() {
                this.isEditorEnabled && (this.isReadOnly || this.isEditing ? this.implicitEndEditingOnBlur || this.catchClickOutsideFormulaBar() : this.beginFormulaEdit(), 
                this.formulaBarService.onEditorFocus());
            }, FormulaBarComponent.prototype.catchClickOutsideFormulaBar = function() {
                document.body.addEventListener("mousedown", this.onDocumentMouseDownCapture, !0), 
                document.body.addEventListener("click", this.onDocumentClickCapture, !0), document.body.addEventListener("contextmenu", this.onDocumentClickCapture, !0);
            }, FormulaBarComponent.prototype.removeCatchClickOutsideFormulaBar = function() {
                document.body.removeEventListener("mousedown", this.onDocumentMouseDownCapture, !0), 
                document.body.removeEventListener("click", this.onDocumentClickCapture, !0), document.body.removeEventListener("contextmenu", this.onDocumentClickCapture, !0);
            }, FormulaBarComponent.prototype.endFormulaEdit = function() {
                this.isEditing = !1, this.removeFocus(), this.removeCatchClickOutsideFormulaBar(), 
                this.endEdit.emit();
            }, FormulaBarComponent.prototype.beginFormulaEdit = function() {
                this.isEditing = !0, this.catchClickOutsideFormulaBar(), this.beginEdit.emit();
            }, FormulaBarComponent.prototype.onResize = function() {
                var _a, _b;
                if (this.monacoEditorInitialized) {
                    var height;
                    2 === this.expandedState ? (this.updateEditorExpandedHeight(), height = this.textEditorFullExpandHeight) : 1 === this.expandedState && (this.updateEditorExpandedHeight(), 
                    height = Math.min(this.textEditorFullExpandHeight, this.targetEditorHeight));
                    var topElementWidth = this.element.nativeElement.getBoundingClientRect().width || 1e3, zoomLevel = null !== (_b = null === (_a = this.formulaBarZoomService) || void 0 === _a ? void 0 : _a.getZoomLevel()) && void 0 !== _b ? _b : 1;
                    this.layout(topElementWidth / zoomLevel - this.textEditorWidthOffset, height);
                }
            }, FormulaBarComponent.prototype.selectTemplate = function(template) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.formulaBarService.onTemplateSelection(template) ];

                          case 1:
                            return _a.sent(), this.templateSelected.emit(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarComponent.prototype.insertTextAtCurrentCursor = function(text) {
                this.textEditorHost.insertTextAtCurrentCursor(text);
            }, FormulaBarComponent.prototype.getCurrentEditorText = function() {
                return this.textEditorHost.getText();
            }, FormulaBarComponent.prototype.getHighlightedText = function() {
                return this.textEditorHost.getHighlightedText();
            }, FormulaBarComponent.prototype.getKeyboardActions = function() {
                var _this = this;
                return [ {
                    id: "formulaBar.find",
                    label: "Find",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlF] ],
                    run: _.noop
                }, {
                    id: "formulaBar.findNext",
                    label: "Find next",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.F3] ],
                    run: _.noop
                }, {
                    id: "formulaBar.findPrevious",
                    label: "Find previous",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlF3] ],
                    run: _.noop
                }, {
                    id: "formulaBar.replace",
                    label: "Replace",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlH] ],
                    run: _.noop
                }, {
                    id: "formulaBar.errorNavigator",
                    label: "Error navigator",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.F8] ],
                    run: _.noop
                }, {
                    id: "formulaBar.escape",
                    label: "Escape",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.Escape] ],
                    run: function() {
                        var selections = _this.textEditorHost.textEditor.getSelections();
                        selections.length <= 1 ? _this.cancel() : _this.textEditorHost.textEditor.setSelection(selections[0]);
                    },
                    keybindingContext: "!".concat(monacoEditorUtility.B6, "&&!").concat(monacoEditorUtility.HW, "&&!").concat(monacoEditorUtility.s1)
                }, {
                    id: "formulaBar.submit",
                    label: "Submit",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlEnter] ],
                    run: function() {
                        _this.submit();
                    }
                }, {
                    id: "formulaBar.enter",
                    label: "Enter",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.Enter] ],
                    run: function() {
                        _this.submit();
                    },
                    keybindingContext: "!".concat(monacoEditorUtility.HW)
                }, {
                    id: "formulaBar.toggleExpandCollapse",
                    label: "Toggle expand collapse",
                    keybindings: [ this.textEditorHost.monacoKeybindingsMap[monaco_editor_host_types.f.CtrlJ] ],
                    run: function() {
                        _this.onToggleExpandCollapse();
                    }
                } ];
            }, FormulaBarComponent.\u0275fac = function(t) {
                return new (t || FormulaBarComponent)(core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](formula_bar_service.B), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](screen_reader_service.g), core["\u0275\u0275directiveInject"](formula_bar_interaction_service.l), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](dax_capabilities_service_interface.r), core["\u0275\u0275directiveInject"](injection_tokens.$d, 8));
            }, FormulaBarComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FormulaBarComponent,
                selectors: [ [ "formula-bar" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](_c0, 7, core.ElementRef), core["\u0275\u0275viewQuery"](monaco_editor_host_component.C, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.monacoEditorHostContainer = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.textEditorHost = _t.first);
                    }
                },
                hostVars: 1,
                hostBindings: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275listener"]("desktopUIResizeFormulaBar", function() {
                        return ctx.onResize();
                    }), 2 & rf && core["\u0275\u0275hostProperty"]("hidden", ctx.isHidden);
                },
                inputs: {
                    autoHide: "autoHide",
                    isActive: "isActive",
                    catchOutsideClickEventCallBack: "catchOutsideClickEventCallBack",
                    expandCollapseConfig: "expandCollapseConfig",
                    implicitEndEditingOnBlur: "implicitEndEditingOnBlur",
                    navMode: "navMode",
                    shouldAlwaysEnableCancelButton: "shouldAlwaysEnableCancelButton",
                    daxTemplates: "daxTemplates"
                },
                outputs: {
                    beginEdit: "beginEdit",
                    endEdit: "endEdit",
                    templateSelected: "templateSelected"
                },
                decls: 29,
                vars: 42,
                consts: [ [ "keyboard-shortcuts", "ctrl-F6", "focus-priority", "11", 1, "formulaBar", 3, "hidden", "on-resize" ], [ 1, "formulaBarEditorContainer" ], [ 1, "formulaBarEditor" ], [ "tabindex", "0", 1, "formulaBarEditorMain", 3, "keydown.enter" ], [ "monacoEditorHostContainer", "" ], [ "mode", "dax", "theme", "dax", 3, "selection", "isReadOnly", "formulaText", "languageOptions", "hidden", "initialized", "tabFocusMode", "onContentChanged", "onContentHeightChanged", "onFocus", 4, "ngIf" ], [ "data-unique-id", "formula-bar-chevron", 1, "formulaBarExpander", 3, "disabled", "pbiTooltip", "click" ], [ "tri-svg-icon-16", "", "name", "chevron_down_16_regular" ], [ 1, "accessibililtyMessages" ], [ "class", "message", "localize", "Tab_Moves_Focus", 3, "pbiTooltip", "click", 4, "ngIf" ], [ "class", "formulaBarAlert", 4, "ngIf" ], [ 1, "formulaBarDropdown" ], [ 1, "dropdownContainer", 3, "compact", "options", "isDisabled", "value", "valueChange" ], [ 4, "ngIf" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 1, "formulaBarButtons" ], [ "data-unique-id", "formula-bar-cancel", 1, "formulaBarCancel", 3, "pbiTooltip", "disabled", "click" ], [ "tri-svg-icon-24", "", "name", "dismiss_20_regular" ], [ "data-unique-id", "formula-bar-commit", 1, "formulaBarCommit", 3, "pbiTooltip", "disabled", "click" ], [ "tri-svg-icon-24", "", "name", "checkmark_20_regular" ], [ "data-unique-id", "formula-bar-template-button", 3, "daxTemplates", "selectedTemplate" ], [ "mode", "dax", "theme", "dax", 3, "selection", "isReadOnly", "formulaText", "languageOptions", "hidden", "initialized", "tabFocusMode", "onContentChanged", "onContentHeightChanged", "onFocus" ], [ "localize", "Tab_Moves_Focus", 1, "message", 3, "pbiTooltip", "click" ], [ 1, "formulaBarAlert" ], [ "symbolId", "alert", "sheet", "filterPaneIcons", 1, "imageAlert" ], [ "tri-svg-icon-16", "", "name", "dismiss_circle_16_filled" ], [ "data-unique-id", "formula-bar-alert", "row", "1", "cols", "1", "readonly", "", "pbiTooltipPosition", "below", 1, "messageAlert", 3, "pbiTooltip", "ngModel" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275listener"]("on-resize", function() {
                        return ctx.onResize();
                    }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275elementStart"](2, "div", 1)(3, "div", 2)(4, "div", 3, 4), 
                    core["\u0275\u0275listener"]("keydown.enter", function() {
                        return ctx.focus();
                    }), core["\u0275\u0275template"](6, FormulaBarComponent_monaco_editor_host_6_Template, 1, 5, "monaco-editor-host", 5), 
                    core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](8, "button", 6), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.onToggleExpandCollapse();
                    }), core["\u0275\u0275element"](9, "tri-svg-icon", 7), core["\u0275\u0275elementEnd"]()(), 
                    core["\u0275\u0275elementStart"](10, "div", 8), core["\u0275\u0275template"](11, FormulaBarComponent_button_11_Template, 2, 3, "button", 9), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](12, FormulaBarComponent_div_12_Template, 4, 3, "div", 10), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](13, "div", 11), 
                    core["\u0275\u0275pipe"](14, "async"), core["\u0275\u0275elementStart"](15, "tri-dropdown", 12), 
                    core["\u0275\u0275listener"]("valueChange", function($event) {
                        return ctx.setEditMode($event.key);
                    }), core["\u0275\u0275pipe"](16, "async"), core["\u0275\u0275template"](17, FormulaBarComponent_tri_dropdown_trigger_17_Template, 4, 5, "tri-dropdown-trigger", 13), 
                    core["\u0275\u0275pipe"](18, "async"), core["\u0275\u0275template"](19, FormulaBarComponent_tri_dropdown_item_19_Template, 3, 4, "tri-dropdown-item", 14), 
                    core["\u0275\u0275pipe"](20, "async"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](21, "div", 15)(22, "button", 16), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.cancel();
                    }), core["\u0275\u0275pipe"](23, "localize"), core["\u0275\u0275element"](24, "tri-svg-icon", 17), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](25, "button", 18), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.submit();
                    }), core["\u0275\u0275pipe"](26, "localize"), core["\u0275\u0275element"](27, "tri-svg-icon", 19), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](28, "template-button", 20), 
                    core["\u0275\u0275listener"]("selectedTemplate", function($event) {
                        return ctx.selectTemplate($event);
                    }), core["\u0275\u0275elementEnd"]()()()), 2 & rf && (core["\u0275\u0275classProp"]("readonly", ctx.isReadOnly), 
                    core["\u0275\u0275property"]("hidden", ctx.isHidden || !ctx.monacoEditorInitialized), 
                    core["\u0275\u0275attribute"]("focus-nav-mode", ctx.navMode)("aria-label", core["\u0275\u0275pipeBind1"](1, 26, "Formula_Bar")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275classProp"]("hasAlert", ctx.alertText), 
                    core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](7, 28, ctx.languageOptions$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("disabled", !ctx.monacoEditorInitialized || !ctx.isEditorEnabled)("pbiTooltip", ctx.formulaBarExpanderTooltip), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("@chevron", ctx.nextExpandCollapseState), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.tabMovesFocus && !ctx.isReadOnly && ctx.isEditorEnabled), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !!ctx.alertText), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("hideFormulaBarDropdown", !core["\u0275\u0275pipeBind1"](14, 30, ctx.showEditModeSelector$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("compact", !0)("options", ctx.triDropdownOptions)("isDisabled", ctx.isReadOnly)("value", core["\u0275\u0275pipeBind1"](16, 32, ctx.selectedEditModeOption$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](18, 34, ctx.selectedEditModeOption$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](20, 36, ctx.editModeOptions$)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](23, 38, "Cancel_ButtonText"))("disabled", ctx.shouldAlwaysEnableCancelButton ? !ctx.monacoEditorInitialized : !ctx.isEditing || !ctx.monacoEditorInitialized), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](26, 40, "Commit_ButtonText"))("disabled", !ctx.isEditing || !ctx.monacoEditorInitialized), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("daxTemplates", ctx.daxTemplates));
                },
                dependencies: [ common.NgForOf, common.NgIf, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, localize_directive.X, monaco_editor_host_component.C, pbi_tooltip_directive.V, pbi_svg_use_symbol_component.R, on_resize_directive.O, keyboard_shortcuts_directive.q, tri_dropdown_component.M3, tri_dropdown_item_component.l, tri_dropdown_item_menu_directive.q, tri_dropdown_component.ii, tri_svg_icon_component.M, TemplateButtonComponent, common.AsyncPipe, localize_pipe.F ],
                styles: [ '[_nghost-%COMP%]{--read-only-button-foreground: var(--fluent-theme-neutral-secondary-alt-color);--read-only-background: var(--fluent-theme-neutral-tertiary-color);--read-only-border-color: var(--fluent-theme-neutral-tertiary-color);--button-background: transparent;--button-foreground: var(--gray-180);--editor-container-border-color: var(--fluent-theme-neutral-tertia-color);--editor-container-background: var(--fluent-theme-white-color);--expander-foreground-hover: var(--fluent-theme-black-color);--accessibility-message-background: var(--fluent-theme-neutral-primary-color);--accessibility-message-foreground: var(--fluent-theme-white-color);--accessibility-message-background-focus: var(--fluent-theme-neutral-tertiary-alt-color);--alert-foreground: var(--fluent-theme-black-color);--alert-background: var(--fluent-theme-warning-background-color);--alert-border: none;--alert-icon: var(--fluent-theme-error-fill-color);--submit-cancel-buttons-border: var(--fluent-theme-neutral-tertiary-alt-color);--submit-cancel-buttons-background: var(--fluent-theme-white-color);--cancel-button-foreground: var(--fluent-theme-error-dark-color);--commit-button-foreground: var(--fluent-theme-success-icon-color);--gray-host-background: var(--gray-20);--gray-border-color: var(--gray-60);--gray-read-only-background: var(--gray-20);--gray-read-only-border: var(--gray-40);position:relative;padding:4px;min-height:36px;max-height:36px;width:100%;box-sizing:border-box;display:flex;flex-direction:column}[data-legacy-theming=false]   [_nghost-%COMP%]{--read-only-button-foreground: var(--colorNeutralForegroundDisabled);--read-only-background: var(--colorNeutralBackgroundDisabled);--read-only-border-color: var(--colorNeutralStrokeDisabled);--button-background: transparent;--button-foreground: var(--colorNeutralForeground1);--editor-container-border-color: var(--colorNeutralStroke1);--editor-container-background: var(--colorNeutralBackground1);--expander-foreground-hover: var(--colorNeutralStrokeFocus2);--accessibility-message-background: var(--colorCompoundBrandBackground);--accessibility-message-foreground: var(--colorNeutralForegroundOnBrand);--accessibility-message-background-focus: var(--colorCompoundBrandBackgroundHover);--alert-foreground: var(--colorNeutralForeground1);--alert-background: var(--colorDangerBackground1);--alert-border: 1px solid var(--colorDangerBorder1);--alert-icon: var(--fluent-theme-error-fill-color);--submit-cancel-buttons-border: var(--colorNeutralStroke1);--submit-cancel-buttons-background: var(--colorNeutralBackground1);--cancel-button-foreground: var(--colorDangerForeground1);--commit-button-foreground: var(--colorSuccessForeground1);--gray-host-background: var(--colorNeutralBackground3);--gray-border-color: var(--colorNeutralStroke2);--gray-read-only-background: var(--colorNeutralBackground3);--gray-read-only-border: var(--colorNeutralStrokeDisabled)}[hidden][_nghost-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]{flex-grow:1;cursor:default;box-sizing:border-box;display:flex}[_nghost-%COMP%]   .formulaBar[hidden][_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{color:var(--read-only-button-foreground)}[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], [_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{border-color:var(--read-only-border-color);background-color:var(--read-only-background)}[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .monaco-editor[_ngcontent-%COMP%]   .cursor[_ngcontent-%COMP%]{background-color:var(--read-only-background)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:var(--button-background);color:var(--button-foreground)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:currentcolor}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   [disabled][_ngcontent-%COMP%]{opacity:.4}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{order:1;flex-grow:1;height:100%;display:flex;flex-direction:column;margin-left:3px;min-height:28px;box-sizing:border-box;border:1px solid var(--editor-container-border-color);background-color:var(--editor-container-background)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer.hasAlert[_ngcontent-%COMP%]{min-height:48px}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]{flex-grow:1;box-sizing:border-box;padding-top:2px;padding-right:21px;display:flex;flex-direction:column;background-color:transparent}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarEditorMain[_ngcontent-%COMP%]{flex-grow:1;box-sizing:border-box;background-color:transparent;-webkit-user-select:none}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarEditorMain[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]{position:absolute;top:8px;right:8px;width:16px;height:16px;background-color:transparent}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:hover:not(:disabled), [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus:not(:disabled){color:var(--expander-foreground-hover)}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus, html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander *:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:0px}html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus, html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarEditor[_ngcontent-%COMP%]   .formulaBarExpander[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus     html[data-focus-source=mouse] -shadowcsshost .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander:focus,   html[data-focus-source=mouse] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander *:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarEditorContainer .formulaBarEditor .formulaBarExpander *:focus{outline:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]{display:flex}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{margin-left:2px;padding:2px;background-color:var(--accessibility-message-background);color:var(--accessibility-message-foreground);font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:hover, [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .accessibililtyMessages[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:focus{background-color:var(--accessibility-message-background-focus)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]{width:100%;height:20px;box-sizing:border-box;color:var(--alert-foreground);background-color:var(--alert-background);outline:var(--alert-border);display:flex;padding-left:2px;align-items:center}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--alert-icon)}[data-legacy-theming=true]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   .imageAlert[_ngcontent-%COMP%]{width:16px;height:16px}[data-legacy-theming=false]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   .imageAlert[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]   .formulaBarAlert[_ngcontent-%COMP%]   .messageAlert[_ngcontent-%COMP%]{cursor:default;flex-grow:1;height:100%;box-sizing:border-box;border:none;padding-top:2px;padding-left:4px;background-color:var(--alert-background);font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:11px;resize:none;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown[_ngcontent-%COMP%]{margin-right:3px;font-size:14px}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown.hideFormulaBarDropdown[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown[_ngcontent-%COMP%]   .dropdownContainer[_ngcontent-%COMP%]{min-width:100px;height:28px;box-sizing:border-box}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarDropdown[_ngcontent-%COMP%]   .dropdownContainer[_ngcontent-%COMP%]     button{min-width:inherit;height:inherit}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]{min-width:76px;flex:0;height:28px;box-sizing:border-box;border:1px solid var(--submit-cancel-buttons-border);display:flex;align-items:center;justify-content:space-evenly;background-color:var(--submit-cancel-buttons-background)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:24px;height:24px;display:flex;align-content:center;justify-content:center}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:disabled   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--colorNeutralForegroundDisabled)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover:not(:disabled), [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus:not(:disabled){background:var(--colorNeutralBackground1Hover)}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--cancel-button-foreground)}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]:focus, html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel *:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:0px}html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]:focus, html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCancel[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus     html[data-focus-source=mouse] -shadowcsshost .formulaBar .formulaBarButtons .formulaBarCancel:focus,   html[data-focus-source=mouse] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel *:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCancel *:focus{outline:none}[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--commit-button-foreground)}html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]:focus, html[data-focus-source=key]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit:focus,   html[data-focus-source=key] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit *:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:0px}html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]:focus, html[data-focus-source=mouse]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]:focus, html[data-focus-source=program]   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%]   .formulaBarCommit[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:focus     html[data-focus-source=mouse] -shadowcsshost .formulaBar .formulaBarButtons .formulaBarCommit:focus,   html[data-focus-source=mouse] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit *:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit:focus,   html[data-focus-source=program] -shadowcsshost-no-combinator .formulaBar .formulaBarButtons .formulaBarCommit *:focus{outline:none}.gray-theme   [_nghost-%COMP%]{background-color:var(--gray-host-background)}.gray-theme[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme[_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{border-radius:2px;border-color:var(--gray-border-color)}.gray-theme[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarButtons[_ngcontent-%COMP%], .gray-theme[_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%], .gray-theme   [_nghost-%COMP%]   .formulaBar.readonly[_ngcontent-%COMP%]   .formulaBarEditorContainer[_ngcontent-%COMP%]{background-color:var(--gray-read-only-background);border-color:var(--gray-read-only-border)}@media print{formula-bar[_ngcontent-%COMP%]   .formulaBar[_ngcontent-%COMP%]{display:none}}' ],
                data: {
                    animation: [ (0, animations.X$)("chevron", [ (0, animations.SB)("".concat(0), (0, 
                    animations.oB)({
                        transform: "rotate(180deg)"
                    })), (0, animations.SB)("".concat(2), (0, animations.oB)({
                        transform: "rotate(0deg)"
                    })), (0, animations.SB)("".concat(1), (0, animations.oB)({
                        transform: "rotate(0deg)"
                    })), (0, animations.eR)("".concat(1, " => ").concat(2, ", ").concat(2, " => ").concat(1), [ (0, 
                    animations.jt)(150, (0, animations.F4)([ (0, animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 0
                    }), (0, animations.oB)({
                        transform: "rotate(45deg)",
                        offset: .5
                    }), (0, animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 1
                    }) ])) ]), (0, animations.eR)("* => ".concat(0), [ (0, animations.jt)(150, (0, animations.F4)([ (0, 
                    animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 0
                    }), (0, animations.oB)({
                        transform: "rotate(180deg)",
                        offset: 1
                    }) ])) ]), (0, animations.eR)("".concat(0, " => *"), [ (0, animations.jt)(150, (0, 
                    animations.F4)([ (0, animations.oB)({
                        transform: "rotate(180deg)",
                        offset: 0
                    }), (0, animations.oB)({
                        transform: "rotate(0deg)",
                        offset: 1
                    }) ])) ]) ]) ]
                }
            }), FormulaBarComponent;
        }();
        function isInteractableWhileEditing(eventTarget) {
            return _.some(formulaInteractableSelectors, function(selector) {
                var target = $(eventTarget), searching = $(selector);
                return searching.is(target) || !!searching.find(target).length;
            });
        }
    },
    17848: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            p: function() {
                return FormulaBarUIModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(77476), _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(17174), _powerbi_A11y__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(20914), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79061), _powerbi_ModelingCommon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(8948), _powerbi_MonacoEditorUI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(68101), _powerbi_UILibrary_pbi_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(93367), _powerbi_UILibrary_pbi_menu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(94841), _powerbi_UILibrary_pbi_svg_use_symbol__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(79725), _powerbi_UILibrary_pbi_tooltip_pbi_tooltip_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(16095), _powerbi_UILibrary_resizer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(53772), _trident_ux_angular_tri_dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44913), _trident_ux_angular_tri_svg_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17177), _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50423), FormulaBarUIModule = function() {
            function FormulaBarUIModule() {}
            return FormulaBarUIModule.\u0275fac = function(t) {
                return new (t || FormulaBarUIModule);
            }, FormulaBarUIModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_2__["\u0275\u0275defineNgModule"]({
                type: FormulaBarUIModule
            }), FormulaBarUIModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_2__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_3__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_4__.u5, _powerbi_UILibrary_pbi_icon__WEBPACK_IMPORTED_MODULE_5__.U, _powerbi_Localization__WEBPACK_IMPORTED_MODULE_6__.v, _powerbi_MonacoEditorUI__WEBPACK_IMPORTED_MODULE_7__.B, _powerbi_UILibrary_pbi_menu__WEBPACK_IMPORTED_MODULE_8__.b, _powerbi_UILibrary_pbi_tooltip_pbi_tooltip_module__WEBPACK_IMPORTED_MODULE_9__.Z, _powerbi_UILibrary_pbi_svg_use_symbol__WEBPACK_IMPORTED_MODULE_10__.j, _powerbi_UILibrary_resizer__WEBPACK_IMPORTED_MODULE_11__.w, _powerbi_ModelingCommon__WEBPACK_IMPORTED_MODULE_12__.y, _powerbi_A11y__WEBPACK_IMPORTED_MODULE_13__._, _trident_ux_angular_tri_dropdown__WEBPACK_IMPORTED_MODULE_0__.lK, _trident_ux_angular_tri_svg_icon__WEBPACK_IMPORTED_MODULE_1__.T6 ]
            }), FormulaBarUIModule;
        }();
    },
    15903: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $d: function() {
                return FormulaBarZoomServiceInjectionToken;
            },
            Pm: function() {
                return IntellisenseModelServiceInjectionToken;
            },
            n9: function() {
                return BehaviorServiceInjectionToken;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), IntellisenseModelServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("IntellisenseModelService"), BehaviorServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("FormulaBarBehaviorService"), FormulaBarZoomServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("FormulaBarZoomService");
    },
    98361: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return FormulaBarBaseBehaviorService;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), FormulaBarBaseBehaviorService = function() {
            function FormulaBarBaseBehaviorService(uiBlockingService, localizationService, intellisenseService) {
                this.uiBlockingService = uiBlockingService, this.localizationService = localizationService, 
                this.intellisenseService = intellisenseService;
            }
            return FormulaBarBaseBehaviorService.prototype.registerFormulaBarControl = function(control) {
                this.formulaBarControl = control, control.setEditModeOptions([]);
            }, FormulaBarBaseBehaviorService.prototype.focusWhenNotBlocked = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.uiBlockingService.waitTillUnblocked() ];

                          case 1:
                            return _a.sent(), this.formulaBarControl.focus(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateReadOnlyState = function(setReadOnly) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.uiBlockingService.waitTillUnblocked() ];

                          case 1:
                            return _a.sent(), this.formulaBarControl.setReadOnly(setReadOnly), [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateContents = function(formulaText, alertText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    var wireDataSourceInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseService.getDataSourceInfo() ];

                          case 1:
                            return wireDataSourceInfo = _a.sent(), !_.isEmpty(wireDataSourceInfo.functionDataFromEngine) && !_.isEmpty(wireDataSourceInfo.reservedWords) || alertText || (alertText = this.localizationService.get("DaxEditor_ErrorMessageToGetIntellisense")), 
                            [ 4, this.updateFormulaText(formulaText, wireDataSourceInfo) ];

                          case 2:
                            return _a.sent(), this.updateAlertText(alertText), [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateFormulaText = function(formulaText, wireDataSourceInfo) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseService.updateDaxContext(wireDataSourceInfo) ];

                          case 1:
                            return _a.sent(), this.formulaBarControl.setCommittedFormulaBarText(formulaText || null), 
                            this.contentChanged = !1, [ 2 ];
                        }
                    });
                });
            }, FormulaBarBaseBehaviorService.prototype.updateAlertText = function(alertText) {
                alertText ? this.formulaBarControl.showAlertMessage(alertText) : this.formulaBarControl.hideAlert();
            }, FormulaBarBaseBehaviorService.\u0275fac = function(t) {
                _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275invalidFactory"]();
            }, FormulaBarBaseBehaviorService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjectable"]({
                token: FormulaBarBaseBehaviorService,
                factory: FormulaBarBaseBehaviorService.\u0275fac
            }), FormulaBarBaseBehaviorService;
        }();
    },
    15783: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            B: function() {
                return FormulaBarService;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _injection_tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15903), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), _intellisense_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72080), _powerbi_A11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(83309), FormulaBarService = function() {
            function FormulaBarService(intellisenseService, screenReaderService, zone, behaviorService) {
                this.intellisenseService = intellisenseService, this.screenReaderService = screenReaderService, 
                this.zone = zone, this.behaviorService = behaviorService, this.suspendParseCount = 0;
            }
            return FormulaBarService.prototype.setUICulture = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseService.setUICulture() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarService.prototype.ngOnDestroy = function() {
                this.behaviorService.ngOnDestroy();
            }, Object.defineProperty(FormulaBarService.prototype, "mode", {
                get: function() {
                    return "dax";
                },
                enumerable: !1,
                configurable: !0
            }), FormulaBarService.prototype.registerFormulaBarControl = function(control) {
                this.formulaBarControl = control, this.behaviorService.registerFormulaBarControl(control), 
                this.intellisenseService.onClientViewLoaded(this);
            }, FormulaBarService.prototype.onContentChanged = function(text, position, selectionStart, changes) {
                var _this_1 = this, formulaCommitInfo = this.intellisenseService.analyzeFinalFormulaCommitInfo(text, !1, !1);
                this.behaviorService.contentChanged || (this.behaviorService.contentChanged = formulaCommitInfo.doCommit), 
                formulaCommitInfo.parseErrorMessages.size && formulaCommitInfo.parseErrorMessages.forEach(function(error, code) {
                    _this_1.screenReaderService.alertWithDebounce("dax-error" + code, error);
                }), this.intellisenseService.onContentChanged(text, position, selectionStart, 0 !== this.suspendParseCount, changes.length > 1), 
                this.behaviorService.onContentChanged(formulaCommitInfo);
            }, FormulaBarService.prototype.onEditorFocus = function() {
                this.intellisenseService.onEditorFocus();
            }, FormulaBarService.prototype.hasUnsavedChanges = function(formulaText) {
                return this.behaviorService.hasUnsavedChanges(formulaText);
            }, FormulaBarService.prototype.onBlur = function(formulaText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.behaviorService.commitOrDeletePendingCalculation(formulaText) ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, FormulaBarService.prototype.onSubmit = function(formulaText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    var formulaCommitInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return formulaCommitInfo = this.intellisenseService.analyzeFinalFormulaCommitInfo(formulaText, !0, !0), 
                            [ 4, this.behaviorService.commitCalculationUpdate(formulaCommitInfo) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormulaBarService.prototype.onCancel = function(formulaText) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                        return this.behaviorService.cancel(formulaText), [ 2 ];
                    });
                });
            }, FormulaBarService.prototype.onTemplateSelection = function(selectedTemplate) {
                return this.behaviorService.onTemplateSelection(selectedTemplate);
            }, FormulaBarService.prototype.setCommittedFormulaBarText = function(value) {
                this.formulaBarControl.setCommittedFormulaBarText(value);
            }, FormulaBarService.prototype.hostServiceCalculationCommitedOrDeleted = function() {
                this.formulaBarControl.endFormulaEdit(), this.behaviorService.contentChanged = !1;
            }, FormulaBarService.\u0275fac = function(t) {
                return new (t || FormulaBarService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_intellisense_service__WEBPACK_IMPORTED_MODULE_2__.e), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_powerbi_A11y__WEBPACK_IMPORTED_MODULE_3__.g), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_injection_tokens__WEBPACK_IMPORTED_MODULE_4__.n9));
            }, FormulaBarService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjectable"]({
                token: FormulaBarService,
                factory: FormulaBarService.\u0275fac
            }), (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([ function(target, propertyKey, descriptor) {
                var originalMethod = descriptor.value;
                descriptor.value = function() {
                    for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var _this = this;
                    this.zone.run(function() {
                        return originalMethod.apply(_this, args);
                    });
                };
            }, (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__metadata)("design:type", Function), (0, 
            tslib__WEBPACK_IMPORTED_MODULE_0__.__metadata)("design:paramtypes", []), (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__metadata)("design:returntype", void 0) ], FormulaBarService.prototype, "hostServiceCalculationCommitedOrDeleted", null), 
            FormulaBarService;
        }();
    },
    72080: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return IntellisenseService;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81337), _injection_tokens__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(15903), _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17819), _powerbi_DaxParser_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63513), _powerbi_DaxParser_dax_capabilities_converter_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(48563), _powerbi_InjectionTokens_dax_capabilities_service_interface__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(74249), _powerbi_legacy_JsCommon_Utility_JsonExtensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26112), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62458), _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59694), _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(63708), _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(49088), _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(50423), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(65181), _intellisense_host_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(34103), whitespaceBeforeFormula = [ " ", "\t" ], IntellisenseService = function() {
            function IntellisenseService(localizationService, intellisenseHostService, intellisenseModelService, daxCapabilitiesService) {
                this.localizationService = localizationService, this.intellisenseHostService = intellisenseHostService, 
                this.intellisenseModelService = intellisenseModelService, this.daxCapabilitiesService = daxCapabilitiesService;
            }
            return IntellisenseService.prototype.onClientViewLoaded = function(interop) {
                this.intellisenseHostService.onClientViewLoaded(interop);
            }, IntellisenseService.prototype.onContentChanged = function(formulaBarContent, cursorPosition, selectionStart, skipParse, textChangedOutsideOfCursor) {
                this.intellisenseHostService.onContentChanged(formulaBarContent, cursorPosition, selectionStart, skipParse, textChangedOutsideOfCursor);
            }, IntellisenseService.prototype.setUICulture = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var cultureInfoJson, cultureInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.intellisenseHostService.getCultureInfo() ];

                          case 1:
                            return cultureInfoJson = _a.sent(), cultureInfo = (0, _powerbi_legacy_JsCommon_Utility_JsonExtensions__WEBPACK_IMPORTED_MODULE_4__.K)(cultureInfoJson), 
                            (0, _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.g5)({
                                listSeparator: cultureInfo.listSeparator,
                                numberDecimalSeparator: cultureInfo.decimalSeparator
                            }), [ 2 ];
                        }
                    });
                });
            }, IntellisenseService.prototype.onEditorFocus = function() {
                this.intellisenseHostService.onEditorFocus();
            }, IntellisenseService.prototype.endIntellisenseSession = function() {
                this.intellisenseModelService.reset(), this.intellisenseHostService.endIntellisenseSession();
            }, IntellisenseService.prototype.startIntellisenseSession = function(entityName, propertyName, schemaName, calculationEditMode) {
                this.intellisenseModelService.init({
                    entityName,
                    propertyName,
                    schemaName,
                    calculationEditMode
                }), this.intellisenseHostService.startIntellisenseSession(entityName, propertyName, schemaName, calculationEditMode);
            }, IntellisenseService.prototype.getCalculationInfo = function(calculationObjectInfo) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var calculation;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_a) {
                        return (calculation = this.intellisenseModelService.findCalculationObject(calculationObjectInfo)) && null != calculation.expression ? [ 2, Promise.resolve({
                            isNew: calculation.isNew,
                            alertMessage: calculation.expressionErrorMessage ? calculation.expressionErrorMessage : void 0,
                            formulaText: this.getCalculationExpression(calculation)
                        }) ] : (_powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertFail((0, 
                        _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_6__.W)("Cannot find editable Calculation: schema:{0} entity:{1} property:{2}", null == calculationObjectInfo ? void 0 : calculationObjectInfo.schemaName, null == calculationObjectInfo ? void 0 : calculationObjectInfo.entityName, null == calculationObjectInfo ? void 0 : calculationObjectInfo.propertyName)), 
                        [ 2, Promise.resolve(void 0) ]);
                    });
                });
            }, IntellisenseService.prototype.getCalculationExpression = function(calculation) {
                if (calculation.formulaOverride) return calculation.formulaOverride.formula;
                var expression = _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_.convertToUI(calculation.expression);
                return calculation.calculationSyntaxType === _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.Up.Expression ? expression : (0, 
                _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.Mk)(calculation.name, expression);
            }, IntellisenseService.prototype.updateFormulaContextAsync = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var wireDataSourceInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getDataSourceInfo() ];

                          case 1:
                            return wireDataSourceInfo = _a.sent(), [ 4, this.updateDaxContext(wireDataSourceInfo) ];

                          case 2:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, IntellisenseService.prototype.updateDaxContext = function(unfilteredWireDataSourceInfo) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return [ 4, this.intellisenseModelService.getDaxModeConfigInputs(unfilteredWireDataSourceInfo) ];

                          case 1:
                            return _a = _b.sent(), _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__._.configureModel(_a.serializableModel, _a.wireDataSourceInfo, _a.daxCalculation, _a.isRestrictedMode, _a.axes), 
                            [ 2 ];
                        }
                    });
                });
            }, IntellisenseService.prototype.getDataSourceInfo = function() {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var reservedASWords, functionData, _a;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return [ 4, Promise.all([ this.daxCapabilitiesService.getReservedWords(), this.daxCapabilitiesService.getCapabilities() ]) ];

                          case 1:
                            return _a = _b.sent(), reservedASWords = _a[0], functionData = (0, _powerbi_DaxParser_dax_capabilities_converter_utils__WEBPACK_IMPORTED_MODULE_2__.w)(_a[1].Functions), 
                            [ 2, {
                                reservedWords: reservedASWords,
                                functionDataFromEngine: functionData
                            } ];
                        }
                    });
                });
            }, IntellisenseService.prototype.analyzeFinalFormulaCommitInfo = function(formula, isExplicitSubmit, doFinalProcessing) {
                var expressionOverride, errorMessage, calculation = this.intellisenseModelService.getCalculationObject(), finalFormulaInfo = {
                    name: void 0,
                    expression: void 0,
                    invalidFormula: void 0,
                    anonymizedExpression: void 0,
                    parseResult: void 0
                }, toCommit = function(formula, result, doFinalProcessing, calculation) {
                    if (!calculation) return result.name = void 0, result.expression = void 0, result.invalidFormula = void 0, 
                    result.anonymizedExpression = void 0, !1;
                    var oldInvalidFormula;
                    !function(formula, result, doFinalProcessing, calculation) {
                        var breakUpSuccess = !1, finalFormulaOut = {
                            name: void 0,
                            expression: void 0
                        };
                        if ((breakUpSuccess = calculation.calculationSyntaxType === _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.Up.Expression) ? finalFormulaOut.expression = _powerbi_DaxParser_utilities__WEBPACK_IMPORTED_MODULE_1__.uI.trimStart(formula, whitespaceBeforeFormula) : breakUpSuccess = (0, 
                        _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.Mn)(formula, finalFormulaOut, calculation.calculationType === _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.VisualCalculation), 
                        !breakUpSuccess) return result.name = calculation.name || "", result.name && !formula ? result.expression = "" : (result.invalidFormula = formula, 
                        result.expression = calculation.expression || ""), null;
                        if (result.name = finalFormulaOut.name, result.expression = finalFormulaOut.expression, 
                        finalFormulaOut.expression) if (doFinalProcessing) {
                            (context = _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__._.getContext()) || _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertFail("Context should be defined");
                            var parser = new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_, finalParseResult = new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.ss, finalParseResultOut = {
                                finalResult: finalParseResult
                            };
                            parser.finalParse(finalFormulaOut.expression, context, finalParseResultOut, _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.MX.AddMissingParens | _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.MX.Anonymize | _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.MX.ConvertToEngine), 
                            result.expression = finalParseResultOut.finalResult.updatedExpression, result.anonymizedExpression = finalParseResultOut.finalResult.anonymizedExpression, 
                            result.parseResult = finalParseResult;
                        } else {
                            parser = new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_;
                            var context = _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_8__._.getContext(), parseResultRef = {
                                result: new _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.bp
                            };
                            parser.parse(finalFormulaOut.expression, 0, void 0, void 0, context, parseResultRef, void 0), 
                            result.expression = _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.w_.convertToEngine(finalFormulaOut.expression), 
                            result.parseResult = parseResultRef.result;
                        }
                    }(formula, result, doFinalProcessing, calculation);
                    var formulaOverride = calculation.formulaOverride;
                    return formulaOverride && (oldInvalidFormula = formulaOverride.formula), calculation.name !== result.name || calculation.expression !== result.expression || oldInvalidFormula !== result.invalidFormula;
                }(formula, finalFormulaInfo, doFinalProcessing, calculation);
                !toCommit && isExplicitSubmit && calculation && (toCommit = !!calculation.expressionErrorMessage && !!calculation.expressionOverride && !calculation.formulaOverride);
                var parseErrorMessages = new Map;
                if (toCommit && finalFormulaInfo.invalidFormula) switch (expressionOverride = {
                    expression: null,
                    formula: finalFormulaInfo.invalidFormula
                }, calculation.calculationType) {
                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.Column:
                    errorMessage = this.localizationService.get("ReportModelInvalidColumnNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.Table:
                    errorMessage = this.localizationService.get("ReportModelInvalidCalculatedTableNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.Measure:
                    errorMessage = this.localizationService.get("ReportModelInvalidMeasureNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.CalculationItem:
                    errorMessage = this.localizationService.get("ReportModelInvalidCalcItemNameMessage");
                    break;

                  case _powerbi_MonacoContributions__WEBPACK_IMPORTED_MODULE_7__.eN.VisualCalculation:
                    break;

                  default:
                    _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertFail("Unknown type " + calculation.calculationType);
                }
                return finalFormulaInfo.parseResult instanceof _powerbi_DaxParser__WEBPACK_IMPORTED_MODULE_0__.bp && finalFormulaInfo.parseResult.errors.length && finalFormulaInfo.parseResult.errors.forEach(function(error) {
                    return parseErrorMessages.set(error.errorCode, error.message);
                }), {
                    doCommit: toCommit,
                    newName: finalFormulaInfo.name,
                    newExpression: finalFormulaInfo.expression,
                    newInvalidFormula: finalFormulaInfo.invalidFormula,
                    anonymizedExpression: finalFormulaInfo.anonymizedExpression,
                    expressionOverride,
                    errorMessage,
                    parseErrorMessages
                };
            }, IntellisenseService.\u0275fac = function(t) {
                return new (t || IntellisenseService)(_angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_powerbi_Localization__WEBPACK_IMPORTED_MODULE_10__.o), _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_intellisense_host_service__WEBPACK_IMPORTED_MODULE_11__.TH), _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_injection_tokens__WEBPACK_IMPORTED_MODULE_12__.Pm), _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275inject"](_powerbi_InjectionTokens_dax_capabilities_service_interface__WEBPACK_IMPORTED_MODULE_13__.r));
            }, IntellisenseService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_9__["\u0275\u0275defineInjectable"]({
                token: IntellisenseService,
                factory: IntellisenseService.\u0275fac,
                providedIn: "root"
            }), IntellisenseService;
        }();
    },
    4715: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            H2: function() {
                return FormulaBarEditFormulaBarObject;
            },
            Zs: function() {
                return FormulaBarSelectTemplate;
            },
            gV: function() {
                return FormulaBarSubmitDynamicFormatString;
            }
        });
        var _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41114), FormulaBarEditFormulaBarObject = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.FormulaBar.EditFormulaBarObject"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.FormulaBar.EditFormulaBarObject"), FormulaBarSubmitDynamicFormatString = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.FormulaBar.SubmitDynamicFormatString"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.FormulaBar.SubmitDynamicFormatString"), FormulaBarSelectTemplate = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.FormulaBar.SelectTemplate"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.FormulaBar.SelectTemplate");
    },
    81892: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Uu: function() {
                return FormulaBarDropdownPanelClass;
            },
            ZI: function() {
                return FormulaBarMeasureDropdownConfigurations;
            },
            dO: function() {
                return FormulaBarCalculationItemDropdownConfigurations;
            }
        });
        var FormulaBarMeasureDropdownConfigurations = [ {
            displayName: "Measure",
            key: 1
        }, {
            displayName: "Format",
            key: 2
        } ], FormulaBarCalculationItemDropdownConfigurations = [ {
            displayName: "Item",
            key: 1
        }, {
            displayName: "Format",
            key: 2
        } ], FormulaBarDropdownPanelClass = "formulaBarDropdownPanel";
    }
} ]);