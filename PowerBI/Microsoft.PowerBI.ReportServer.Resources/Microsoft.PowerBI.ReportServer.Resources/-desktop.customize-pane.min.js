"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "customize-pane" ], {
    7220: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            CustomizePaneModule: function() {
                return CustomizePaneModule;
            }
        });
        var ExploreUI_module = __webpack_require__(87121), tslib_es6 = __webpack_require__(81337), map = __webpack_require__(14172), events = __webpack_require__(10556), exploreUITelemetryUtil = __webpack_require__(9500), rx_component = __webpack_require__(73221), Telemetry = __webpack_require__(21617), core = __webpack_require__(50423), panes_visibility_service = __webpack_require__(21024), view_mode_state_service = __webpack_require__(77200), common = __webpack_require__(77476), pbi_auto_focus_directive = __webpack_require__(54932), keyboard_shortcuts_directive = __webpack_require__(35756), pbi_pane_component = __webpack_require__(21023), pbi_pane_section_component = __webpack_require__(24548), panes_settings_service = __webpack_require__(3681), localize_directive = __webpack_require__(59968), pbi_office_icon_component = __webpack_require__(69437), pbi_toggle_button_component = __webpack_require__(64734), localize_pipe = __webpack_require__(85102);
        function CustomizePaneSliceComponent_pbi_office_icon_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "pbi-office-icon", 8), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("name", ctx_r0.model.iconName);
            }
        }
        function CustomizePaneSliceComponent_span_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 9), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275attribute"]("id", "customize-pane-slice-" + ctx_r1.model.sliceName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](2, 2, ctx_r1.model.sliceDescription));
            }
        }
        var _c0 = function(a0) {
            return {
                disabled: a0
            };
        }, CustomizePaneSliceComponent = function(_super) {
            function CustomizePaneSliceComponent() {
                return _super.call(this) || this;
            }
            return (0, tslib_es6.__extends)(CustomizePaneSliceComponent, _super), CustomizePaneSliceComponent.\u0275fac = function(t) {
                return new (t || CustomizePaneSliceComponent);
            }, CustomizePaneSliceComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: CustomizePaneSliceComponent,
                selectors: [ [ "customize-pane-slice" ] ],
                inputs: {
                    model: "model"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 14,
                vars: 20,
                consts: [ [ 1, "customize-slice" ], [ 1, "align-start" ], [ "class", "icon", 3, "name", 4, "ngIf" ], [ 1, "slice-title-and-description", 3, "ngClass" ], [ 1, "title" ], [ "class", "description", 4, "ngIf" ], [ 1, "align-end" ], [ "compact", "true", 3, "aria-label", "aria-describedby", "checked", "disabled", "change" ], [ 1, "icon", 3, "name" ], [ 1, "description" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0)(1, "div", 1), core["\u0275\u0275template"](2, CustomizePaneSliceComponent_pbi_office_icon_2_Template, 1, 1, "pbi-office-icon", 2), 
                    core["\u0275\u0275elementStart"](3, "div", 3), core["\u0275\u0275pipe"](4, "async"), 
                    core["\u0275\u0275elementStart"](5, "span", 4), core["\u0275\u0275text"](6), core["\u0275\u0275pipe"](7, "localize"), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](8, CustomizePaneSliceComponent_span_8_Template, 3, 4, "span", 5), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](9, "div", 6)(10, "pbi-toggle-button", 7), 
                    core["\u0275\u0275listener"]("change", function($event) {
                        return ctx.model.toggle($event.checked);
                    }), core["\u0275\u0275pipe"](11, "localize"), core["\u0275\u0275pipe"](12, "async"), 
                    core["\u0275\u0275pipe"](13, "async"), core["\u0275\u0275elementEnd"]()()()), 2 & rf && (core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("ngIf", ctx.model.iconName), core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](18, _c0, core["\u0275\u0275pipeBind1"](4, 8, ctx.model.disabled$))), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](7, 10, ctx.model.sliceName)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.model.sliceDescription), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("aria-label", core["\u0275\u0275pipeBind1"](11, 12, ctx.model.sliceName))("aria-describedby", "customize-pane-slice-" + ctx.model.sliceName)("checked", core["\u0275\u0275pipeBind1"](12, 14, ctx.model.toggled$))("disabled", core["\u0275\u0275pipeBind1"](13, 16, ctx.model.disabled$)));
                },
                dependencies: [ common.NgClass, common.NgIf, pbi_office_icon_component.m, pbi_toggle_button_component.d, common.AsyncPipe, localize_pipe.F ],
                styles: [ '.customize-slice[_ngcontent-%COMP%]{display:flex;justify-content:space-between}.customize-slice[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{width:20px;height:20px;flex-shrink:0;padding-block-start:4px;padding-inline-end:8px}.customize-slice[_ngcontent-%COMP%]   .icon.disabled[_ngcontent-%COMP%]{opacity:.3}.customize-slice[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-semi-bold, 600)}.customize-slice[_ngcontent-%COMP%]   .description[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);margin-top:4px}.customize-slice[_ngcontent-%COMP%]   .align-start[_ngcontent-%COMP%]{display:flex;justify-content:flex-start}.customize-slice[_ngcontent-%COMP%]   .align-start[_ngcontent-%COMP%]   .slice-title-and-description[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:flex-start}.customize-slice[_ngcontent-%COMP%]   .align-start[_ngcontent-%COMP%]   .slice-title-and-description.disabled[_ngcontent-%COMP%]{color:var(--colorNeutralForegroundDisabled)}.customize-slice[_ngcontent-%COMP%]   .align-start[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-semi-bold, 600)}.customize-slice[_ngcontent-%COMP%]   .align-start[_ngcontent-%COMP%]   .description[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.customize-slice[_ngcontent-%COMP%]   .align-end[_ngcontent-%COMP%]{display:flex;flex-shrink:0}' ],
                changeDetection: 0
            }), CustomizePaneSliceComponent;
        }(rx_component.w);
        function CustomizePaneListComponent_ng_container_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "customize-pane-slice", 6), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var model_r2 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("model", model_r2);
            }
        }
        function CustomizePaneListComponent_ng_container_7_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "customize-pane-slice", 6), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var model_r3 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("model", model_r3);
            }
        }
        var CustomizePaneListComponent = function(_super) {
            function CustomizePaneListComponent(panesSettings, panesVisibility) {
                var _this = _super.call(this) || this;
                return _this.panesSettings = panesSettings, _this.panesVisibility = panesVisibility, 
                _this.paneModelList = [ {
                    sliceName: "Data",
                    iconName: "PBIData_20",
                    sliceDescription: "CustomizePane_DataDescription",
                    toggled$: _this.getPaneModelToggled$("data"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "data");
                    },
                    paneType: "data"
                }, {
                    sliceName: "Permission_Explore",
                    iconName: "PBIBuild_20",
                    sliceDescription: "CustomizePane_BuildAVisualDescription",
                    toggled$: _this.getPaneModelToggled$("build"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "build");
                    },
                    paneType: "build"
                }, {
                    sliceName: "Format",
                    iconName: "PBIFormat_20",
                    sliceDescription: "Ribbon_Tooltip_FormatPane",
                    toggled$: _this.getPaneModelToggled$("format"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "format");
                    },
                    paneType: "format"
                }, {
                    sliceName: "CopilotPaneEntryPoint_Title",
                    iconName: "Copilot_80",
                    sliceDescription: "CustomizePane_CopilotDescription",
                    toggled$: _this.getPaneModelToggled$("copilot"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "copilot");
                    },
                    paneType: "copilot"
                }, {
                    sliceName: "ExplorationBookmarksPane_Title",
                    iconName: "AudioBookmark_20",
                    sliceDescription: "CustomizePane_BookmarksDescription",
                    toggled$: _this.getPaneModelToggled$("bookmarks"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "bookmarks");
                    },
                    paneType: "bookmarks"
                }, {
                    sliceName: "ExplorationCanvasItemsPane_Title",
                    iconName: "LaunchSelectionPane_20",
                    sliceDescription: "Ribbon_Tooltip_SelectionPane",
                    toggled$: _this.getPaneModelToggled$("canvasItems"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "canvasItems");
                    },
                    paneType: "canvasItems"
                }, {
                    sliceName: "PerformanceAnalyzerPane_Title",
                    iconName: "PBIPerformanceAnalyzer_20",
                    sliceDescription: "Ribbon_Tooltip_PerformanceAnalyzerPane",
                    toggled$: _this.getPaneModelToggled$("performance"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "performance");
                    },
                    paneType: "performance"
                }, {
                    sliceName: "SyncGroupPane_Title",
                    iconName: "PBISyncSlicer_20",
                    sliceDescription: "CustomizePane_SyncSlicersDescription",
                    toggled$: _this.getPaneModelToggled$("syncSlicers"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "syncSlicers");
                    },
                    paneType: "syncSlicers"
                }, {
                    sliceName: "PageVisualsPane_Title",
                    iconName: "PBIPageVisuals_20",
                    sliceDescription: "CustomizePane_PageVisualsDescription",
                    toggled$: _this.getPaneModelToggled$("pageVisuals"),
                    toggle: function(value) {
                        return _this.togglePaneModel(value, "pageVisuals");
                    },
                    paneType: "pageVisuals"
                } ], _this.paneManagerSettingModelList = [ {
                    sliceName: "Always_Show_Sidebar",
                    toggled$: _this.panesSettings.getAlwaysDockSidebar().observable$(),
                    toggle: function(value) {
                        return _this.panesSettings.getAlwaysDockSidebar().setValue(value);
                    }
                }, {
                    sliceName: "Pane_Manager_Settings_Show_Only_One_Active_Pane",
                    sliceDescription: "Pane_Manager_Settings_Show_Only_One_Active_Pane_Description",
                    toggled$: _this.panesSettings.getAlwaysOpenNewPane().observable$().pipe((0, map.U)(function(alwaysOpenNewPane) {
                        return !alwaysOpenNewPane;
                    })),
                    toggle: function(value) {
                        return _this.panesSettings.getAlwaysOpenNewPane().setValue(!value);
                    }
                } ], _this;
            }
            return (0, tslib_es6.__extends)(CustomizePaneListComponent, _super), CustomizePaneListComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.updatedPaneModelList$ = this.changes$("panesViewModel").pipe((0, map.U)(function(panes) {
                    return _this.paneModelList.filter(function(pane) {
                        return panes[pane.paneType] && !panes[pane.paneType].isPaneHiddenInLayout;
                    });
                }));
            }, CustomizePaneListComponent.prototype.getPaneModelToggled$ = function(paneType) {
                return this.panesVisibility.getPanes$().pipe((0, map.U)(function(panes) {
                    var _a;
                    return null === (_a = panes[paneType]) || void 0 === _a ? void 0 : _a.isPaneVisible;
                }));
            }, CustomizePaneListComponent.prototype.togglePaneModel = function(value, paneType) {
                value ? this.panesVisibility.addToPaneSwitcher(paneType) : this.panesVisibility.closePane(paneType);
            }, CustomizePaneListComponent.\u0275fac = function(t) {
                return new (t || CustomizePaneListComponent)(core["\u0275\u0275directiveInject"](panes_settings_service.U), core["\u0275\u0275directiveInject"](panes_visibility_service.r));
            }, CustomizePaneListComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: CustomizePaneListComponent,
                selectors: [ [ "customize-pane-list" ] ],
                inputs: {
                    panesViewModel: "panesViewModel"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 9,
                vars: 4,
                consts: [ [ 1, "pane-manager-settings", "container" ], [ "localize", "Pane_Manager_Settings", 1, "subtitle" ], [ 1, "slices" ], [ 4, "ngFor", "ngForOf" ], [ 1, "panes-list", "container" ], [ "localize", "Add_Or_Remove_Panes", 1, "subtitle" ], [ 3, "model" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275element"](1, "span", 1), 
                    core["\u0275\u0275elementStart"](2, "div", 2), core["\u0275\u0275template"](3, CustomizePaneListComponent_ng_container_3_Template, 2, 1, "ng-container", 3), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](4, "div", 4), 
                    core["\u0275\u0275element"](5, "span", 5), core["\u0275\u0275elementStart"](6, "div", 2), 
                    core["\u0275\u0275template"](7, CustomizePaneListComponent_ng_container_7_Template, 2, 1, "ng-container", 3), 
                    core["\u0275\u0275pipe"](8, "async"), core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](3), 
                    core["\u0275\u0275property"]("ngForOf", ctx.paneManagerSettingModelList), core["\u0275\u0275advance"](4), 
                    core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](8, 2, ctx.updatedPaneModelList$)));
                },
                dependencies: [ common.NgForOf, localize_directive.X, CustomizePaneSliceComponent, common.AsyncPipe ],
                styles: [ '.container[_ngcontent-%COMP%]{padding-inline-start:12px;padding-block-end:12px}.container[_ngcontent-%COMP%]   .subtitle[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--lg-font-size, 16px);font-weight:var(--font-weight-semi-bold, 600)}.container[_ngcontent-%COMP%]   .slices[_ngcontent-%COMP%]{padding-block:8px;padding-inline-start:8px}.container[_ngcontent-%COMP%]   .slices[_ngcontent-%COMP%]   customize-pane-slice[_ngcontent-%COMP%]{display:block}.container[_ngcontent-%COMP%]   .slices[_ngcontent-%COMP%]   customize-pane-slice[_ngcontent-%COMP%]:not(:last-child){margin-block-end:16px}' ],
                changeDetection: 0
            }), CustomizePaneListComponent;
        }(rx_component.w);
        function CustomizePaneComponent_pbi_pane_0_div_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 4)(1, "section"), core["\u0275\u0275element"](2, "customize-pane-list", 5), 
            core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var viewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("hidden", !viewModel_r1.isPaneExpanded), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275property"]("panesViewModel", core["\u0275\u0275pipeBind1"](3, 2, ctx_r2.panesViewModel$));
            }
        }
        function CustomizePaneComponent_pbi_pane_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r5 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-pane", 1), core["\u0275\u0275listener"]("onCollapse", function() {
                    core["\u0275\u0275restoreView"](_r5);
                    var ctx_r4 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r4.onPaneCollapsed());
                }), core["\u0275\u0275elementStart"](1, "pbi-pane-section", 2), core["\u0275\u0275template"](2, CustomizePaneComponent_pbi_pane_0_div_2_Template, 4, 4, "div", 3), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var viewModel_r1 = ctx.ngIf;
                core["\u0275\u0275property"]("expanded", viewModel_r1.isPaneExpanded)("allowToggle", !1)("title", viewModel_r1.title)("optionsSetting", viewModel_r1.optionsSetting)("showCollapse", !0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", viewModel_r1.isPaneVisible);
            }
        }
        var CustomizePaneComponent = function(_super) {
            function CustomizePaneComponent(panesVisibility, telemetryService, viewModeState) {
                var _this = _super.call(this) || this;
                return _this.panesVisibility = panesVisibility, _this.telemetryService = telemetryService, 
                _this.viewModeState = viewModeState, _this.panesViewModel$ = _this.panesVisibility.getPanes$(), 
                _this.viewModel$ = _this.panesViewModel$.pipe((0, map.U)(function(panes) {
                    return panes.customize;
                })), _this;
            }
            return (0, tslib_es6.__extends)(CustomizePaneComponent, _super), CustomizePaneComponent.prototype.onPaneCollapsed = function() {
                this.panesVisibility.setPaneExpansion("customize", !1), this.telemetryService.logEvent(events.vLR, {
                    paneType: "Customize",
                    expanded: !1,
                    viewMode: (0, exploreUITelemetryUtil.ku)(this.viewModeState.getMode())
                });
            }, CustomizePaneComponent.\u0275fac = function(t) {
                return new (t || CustomizePaneComponent)(core["\u0275\u0275directiveInject"](panes_visibility_service.r), core["\u0275\u0275directiveInject"](Telemetry.y0), core["\u0275\u0275directiveInject"](view_mode_state_service.kc));
            }, CustomizePaneComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: CustomizePaneComponent,
                selectors: [ [ "customize-pane" ] ],
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ "class", "customize-pane", "noPadding", "", "pbiAutoFocus", "", "keyboard-shortcuts", "ctrl-F6", "focus-priority", "7", "focus-nav-mode", "Group", 3, "expanded", "allowToggle", "title", "optionsSetting", "showCollapse", "onCollapse", 4, "ngIf" ], [ "noPadding", "", "pbiAutoFocus", "", "keyboard-shortcuts", "ctrl-F6", "focus-priority", "7", "focus-nav-mode", "Group", 1, "customize-pane", 3, "expanded", "allowToggle", "title", "optionsSetting", "showCollapse", "onCollapse" ], [ "noPadding", "", 1, "pane-section" ], [ 3, "hidden", 4, "ngIf" ], [ 3, "hidden" ], [ 3, "panesViewModel" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, CustomizePaneComponent_pbi_pane_0_Template, 3, 6, "pbi-pane", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.viewModel$));
                },
                dependencies: [ common.NgIf, pbi_auto_focus_directive.r, keyboard_shortcuts_directive.q, pbi_pane_component.VO, pbi_pane_section_component.i, CustomizePaneListComponent, common.AsyncPipe ],
                changeDetection: 0
            }), CustomizePaneComponent;
        }(rx_component.w), icon = __webpack_require__(44408), a11y_module = __webpack_require__(20914), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), UILibrary_module = __webpack_require__(94785), pbi_office_icon_module = __webpack_require__(45411), pbi_pane_module = __webpack_require__(13254), pbi_toggle_button_module = __webpack_require__(63766), pbi_office_icon_provider_service = __webpack_require__(54485), manifests = [ {
            type: CustomizePaneComponent,
            componentId: "CustomizePaneComponentId"
        } ], CustomizePaneModule = function() {
            function CustomizePaneModule(iconProvider) {
                __webpack_require__.e("on-object").then(__webpack_require__.bind(__webpack_require__, 39875)).then(function(module) {
                    iconProvider.registerIcons(module.iconSpriteSheet.sprite);
                });
            }
            return CustomizePaneModule.\u0275fac = function(t) {
                return new (t || CustomizePaneModule)(core["\u0275\u0275inject"](pbi_office_icon_provider_service.u));
            }, CustomizePaneModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: CustomizePaneModule
            }), CustomizePaneModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ExploreUI_module.J, localization_module.v, lazy_load_module.N.withManifests(manifests), icon.Ps, a11y_module._, pbi_office_icon_module.m, pbi_pane_module.x, pbi_toggle_button_module.l, UILibrary_module.g ]
            }), CustomizePaneModule;
        }();
    }
} ]);