"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "visual-container-skittles" ], {
    14002: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            C: function() {
                return getSkittlesPosition;
            },
            m: function() {
                return getSkittleFlyoutPosition;
            }
        });
        var _powerbi_legacy_ExploreUI_utils_canvasDisplayUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(64466), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _powerbi_UILibrary_pbi_overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25512), _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(49977), positionFunctions = {
            LeftTop: _powerbi_UILibrary_pbi_overlay__WEBPACK_IMPORTED_MODULE_0__.Iz,
            RightTop: _powerbi_UILibrary_pbi_overlay__WEBPACK_IMPORTED_MODULE_0__.Zz,
            LeftCenter: _powerbi_UILibrary_pbi_overlay__WEBPACK_IMPORTED_MODULE_0__.q6,
            RightCenter: _powerbi_UILibrary_pbi_overlay__WEBPACK_IMPORTED_MODULE_0__.v3,
            LeftBottom: _powerbi_UILibrary_pbi_overlay__WEBPACK_IMPORTED_MODULE_0__.Kb,
            RightBottom: _powerbi_UILibrary_pbi_overlay__WEBPACK_IMPORTED_MODULE_0__.J7,
            RightInsideTop: function(offsetX, offsetY) {
                return {
                    originX: "end",
                    originY: "top",
                    overlayX: "end",
                    overlayY: "top",
                    offsetX,
                    offsetY
                };
            },
            RightInsideBottom: function(offsetX, offsetY) {
                return {
                    originX: "end",
                    originY: "bottom",
                    overlayX: "end",
                    overlayY: "bottom",
                    offsetX,
                    offsetY
                };
            }
        }, numberOfSkittles = 2;
        function getSkittlesPosition(visualContainer, visualOverlayPosition) {
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(visualContainer, "visualContainer"), 
            _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(visualOverlayPosition, "visualOverlayPosition");
            var originElement = visualOverlayPosition.getOrigin(visualContainer);
            if (originElement) if (originElement instanceof Element) {
                var pageElement = document.querySelector(_powerbi_legacy_ExploreUI_utils_canvasDisplayUtil__WEBPACK_IMPORTED_MODULE_2__.s.DisplayAreaContainerNameSelector.selector);
                if (pageElement && pageElement instanceof Element) {
                    var relativeBounds = getRelativeBounds(pageElement, originElement);
                    if (_powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                        return 0 !== relativeBounds.originWidth && 0 !== relativeBounds.originHeight;
                    }, "visual width or height is 0 now, check how to avoid calculating skittle position before visual is rendered"), 
                    function(relativeBounds) {
                        if (relativeBounds.relativeY >= relativeBounds.pageHeight || relativeBounds.relativeY + relativeBounds.originHeight <= 0) return !1;
                        if (relativeBounds.relativeX >= relativeBounds.pageWidth) return !1;
                        var relativeVisualRight = relativeBounds.relativeX + relativeBounds.originWidth;
                        return !(relativeVisualRight <= 0 || relativeBounds.relativeX < 0 && relativeBounds.pageWidth - relativeVisualRight < 0);
                    }(relativeBounds)) {
                        var horizontalLayoutResult = function(relativeBounds) {
                            var skittleButtons, firstLevelFlyout, secondLevelFlyout, rightAvailableSpace = relativeBounds.pageWidth - (relativeBounds.relativeX + relativeBounds.originWidth), leftAvailableSpace = relativeBounds.relativeX, skittleButtonWidth = _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.width + _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.marginHorizontal, flyoutWidth = _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.childOverlayWidth + _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.marginHorizontal, allLevelsTotalWidth = skittleButtonWidth + 2 * flyoutWidth, prioritizedLevelsWidth = skittleButtonWidth + flyoutWidth;
                            return rightAvailableSpace >= prioritizedLevelsWidth ? {
                                skittleButtons: skittleButtons = "Right",
                                firstLevelFlyout: {
                                    alignment: firstLevelFlyout = "Right",
                                    maxWidth: calcAvailableHorizontalFirstLevelFlyoutWidth(relativeBounds, skittleButtons, firstLevelFlyout, secondLevelFlyout = rightAvailableSpace >= allLevelsTotalWidth ? "Right" : "Left")
                                },
                                secondLevelFlyout: {
                                    alignment: secondLevelFlyout
                                }
                            } : leftAvailableSpace >= prioritizedLevelsWidth ? {
                                skittleButtons: skittleButtons = "Left",
                                firstLevelFlyout: {
                                    alignment: firstLevelFlyout = "Left",
                                    maxWidth: calcAvailableHorizontalFirstLevelFlyoutWidth(relativeBounds, skittleButtons, firstLevelFlyout, secondLevelFlyout = leftAvailableSpace >= allLevelsTotalWidth ? "Left" : "Right")
                                },
                                secondLevelFlyout: {
                                    alignment: secondLevelFlyout
                                }
                            } : rightAvailableSpace >= skittleButtonWidth ? {
                                skittleButtons: skittleButtons = "Right",
                                firstLevelFlyout: {
                                    alignment: firstLevelFlyout = "Left",
                                    maxWidth: calcAvailableHorizontalFirstLevelFlyoutWidth(relativeBounds, skittleButtons, firstLevelFlyout, secondLevelFlyout = "Left")
                                },
                                secondLevelFlyout: {
                                    alignment: secondLevelFlyout
                                }
                            } : leftAvailableSpace >= skittleButtonWidth ? {
                                skittleButtons: skittleButtons = "Left",
                                firstLevelFlyout: {
                                    alignment: firstLevelFlyout = "Right",
                                    maxWidth: calcAvailableHorizontalFirstLevelFlyoutWidth(relativeBounds, skittleButtons, firstLevelFlyout, secondLevelFlyout = "Right")
                                },
                                secondLevelFlyout: {
                                    alignment: secondLevelFlyout
                                }
                            } : rightAvailableSpace >= 0 ? {
                                skittleButtons: skittleButtons = "RightInside",
                                firstLevelFlyout: {
                                    alignment: firstLevelFlyout = "Left",
                                    maxWidth: calcAvailableHorizontalFirstLevelFlyoutWidth(relativeBounds, skittleButtons, firstLevelFlyout, secondLevelFlyout = "Left")
                                },
                                secondLevelFlyout: {
                                    alignment: secondLevelFlyout
                                }
                            } : void 0;
                        }(relativeBounds);
                        if (horizontalLayoutResult) {
                            var verticalLayoutResult = function(relativeBounds) {
                                var positionPercentage = relativeBounds.relativeY / relativeBounds.pageHeight * 100;
                                return {
                                    skittleButtons: (relativeBounds.relativeY >= 0 ? relativeBounds.pageHeight - relativeBounds.relativeY : relativeBounds.pageHeight) >= (_powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.height + _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.betweenSkittlesVerticalSpace) * numberOfSkittles - _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.betweenSkittlesVerticalSpace ? "Top" : "Bottom",
                                    firstLevelFlyout: positionPercentage <= 50 ? "Top" : positionPercentage <= 75 ? "Center" : "Bottom",
                                    secondLevelFlyout: "Center"
                                };
                            }(relativeBounds);
                            if (verticalLayoutResult) {
                                var skittlesOffset = function(verticalLayout, relativeBounds) {
                                    var skittleButtonsOffsetY;
                                    if ("Top" === verticalLayout) {
                                        var visualTopOutOfBoundHeight = 0 - relativeBounds.relativeY;
                                        visualTopOutOfBoundHeight > 0 && (skittleButtonsOffsetY = visualTopOutOfBoundHeight);
                                    } else if ("Bottom" === verticalLayout) {
                                        var visualBottomOutOfBoundHeight = relativeBounds.relativeY + relativeBounds.originHeight - relativeBounds.pageHeight;
                                        visualBottomOutOfBoundHeight > 0 && (skittleButtonsOffsetY = -visualBottomOutOfBoundHeight);
                                    }
                                    return skittleButtonsOffsetY;
                                }(verticalLayoutResult.skittleButtons, relativeBounds);
                                return {
                                    skittleButtons: {
                                        overlayPosition: [ getConnectedPosition(horizontalLayoutResult.skittleButtons, verticalLayoutResult.skittleButtons, _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.marginHorizontal, skittlesOffset) ],
                                        buttonHeight: _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.height,
                                        buttonWidth: _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.width,
                                        betweenButtonMargin: _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.betweenSkittlesVerticalSpace,
                                        tooltipPosition: "Left" === horizontalLayoutResult.firstLevelFlyout.alignment ? "after" : "before"
                                    },
                                    verticalLayout: verticalLayoutResult,
                                    horizontalLayout: horizontalLayoutResult
                                };
                            }
                        }
                    }
                } else _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertFail("Canvas area container is not of type Element");
            } else _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertFail("Visual container origin is not of type Element");
        }
        function getSkittleFlyoutPosition(horizontalLayout, verticalLayout, originElement, offsetY) {
            void 0 === offsetY && (offsetY = 0);
            var horizontalSide = horizontalLayout.alignment, maxWidth = horizontalLayout.maxWidth, verticalSide = verticalLayout, pageElement = document.querySelector(_powerbi_legacy_ExploreUI_utils_canvasDisplayUtil__WEBPACK_IMPORTED_MODULE_2__.s.DisplayAreaContainerNameSelector.selector);
            if (pageElement && pageElement instanceof Element) {
                var maxHeight, relativeBounds = getRelativeBounds(pageElement, originElement), relativeSpaceBelow = relativeBounds.pageHeight - relativeBounds.relativeY - 1;
                switch (verticalSide) {
                  case "Top":
                    maxHeight = relativeSpaceBelow - offsetY;
                    break;

                  case "Center":
                    maxHeight = 2 * (relativeSpaceBelow - relativeBounds.originHeight / 2), offsetY = document.documentElement.clientHeight - relativeBounds.originY - offsetY - 1 - relativeSpaceBelow + offsetY;
                    break;

                  case "Bottom":
                    maxHeight = relativeBounds.originY + relativeBounds.originHeight - offsetY;
                }
                return {
                    position: [ getConnectedPosition(horizontalSide, verticalSide, _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.marginHorizontal, offsetY) ],
                    height: void 0,
                    width: _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.childOverlayWidth,
                    maxHeight,
                    maxWidth,
                    minWidth: _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.childOverlayWidth
                };
            }
        }
        function getRelativeBounds(pageElement, originElement) {
            var originBoundingRect = originElement.getBoundingClientRect(), pageBoundingRect = pageElement.getBoundingClientRect();
            return {
                pageHeight: pageBoundingRect.height,
                pageWidth: pageBoundingRect.width,
                pageX: pageBoundingRect.x,
                pageY: pageBoundingRect.y,
                originHeight: originBoundingRect.height,
                originWidth: originBoundingRect.width,
                originX: originBoundingRect.x,
                originY: originBoundingRect.y,
                relativeX: originBoundingRect.x - pageBoundingRect.x,
                relativeY: originBoundingRect.y - pageBoundingRect.y
            };
        }
        function getConnectedPosition(h, v, horizontalMargin, offsetY) {
            if (null == horizontalMargin && null == offsetY) return positionFunctions["".concat(h).concat(v)]();
            var offsetX = "Left" === h || "RightInside" === h ? -horizontalMargin : horizontalMargin;
            return positionFunctions["".concat(h).concat(v)](offsetX, offsetY);
        }
        function calcAvailableHorizontalFirstLevelFlyoutWidth(relativeBounds, skittleButtonsHorizontalLayout, firstLevelFlyoutHorizontalLayout, secondLevelFlyoutHorizontalLayout) {
            var pageWidth = relativeBounds.pageWidth, originWidth = relativeBounds.originWidth, relativeX = relativeBounds.relativeX, skittleButtonWidth = _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.width + 2 * _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.marginHorizontal, flyoutWidth = _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.childOverlayWidth + _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.marginHorizontal;
            if ("Right" === skittleButtonsHorizontalLayout) {
                if ("Right" !== firstLevelFlyoutHorizontalLayout) return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return "Left" === firstLevelFlyoutHorizontalLayout && "Left" === secondLevelFlyoutHorizontalLayout;
                }, "Skittle buttons right; Should match combination in getHorizontalLayout"), relativeX + originWidth - flyoutWidth;
                if ("Right" === secondLevelFlyoutHorizontalLayout) return pageWidth - (relativeX + originWidth) - skittleButtonWidth - flyoutWidth;
                if ("Left" === secondLevelFlyoutHorizontalLayout) return pageWidth - (relativeX + originWidth) - skittleButtonWidth;
            } else if ("Left" === skittleButtonsHorizontalLayout) {
                if ("Left" === firstLevelFlyoutHorizontalLayout) {
                    if ("Right" === secondLevelFlyoutHorizontalLayout) return relativeX - skittleButtonWidth;
                    if ("Left" === secondLevelFlyoutHorizontalLayout) return relativeX - skittleButtonWidth - flyoutWidth;
                } else if ("Right" === firstLevelFlyoutHorizontalLayout) return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return "Right" === secondLevelFlyoutHorizontalLayout;
                }, "SkittlePosition left; should match combinations in getHorizontalLayout"), pageWidth - relativeX - flyoutWidth;
            } else if ("RightInside" === skittleButtonsHorizontalLayout) return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                return "Left" === firstLevelFlyoutHorizontalLayout && "Left" === secondLevelFlyoutHorizontalLayout;
            }, "Skittle buttons are RightInside, but should match combination in getHorizontalLayout"), 
            relativeX + originWidth - skittleButtonWidth - flyoutWidth;
            return _powerbi_Typings_Modern_Shared_ExploreUI_typings__WEBPACK_IMPORTED_MODULE_3__.Lc.childOverlayWidth;
        }
    },
    33093: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            VisualContainerSkittlesModule: function() {
                return VisualContainerSkittlesModule;
            }
        });
        var scrolling = __webpack_require__(21661), core = __webpack_require__(50423), BehaviorSubject = __webpack_require__(35510), Subject = __webpack_require__(30794), combineLatest = __webpack_require__(59017), merge = __webpack_require__(63057), takeUntil = __webpack_require__(83317), map = __webpack_require__(14172), distinctUntilChanged = __webpack_require__(77526), tap = __webpack_require__(17653), startWith = __webpack_require__(22318), skip = __webpack_require__(3307), debounceTime = __webpack_require__(6754), withLatestFrom = __webpack_require__(23558), filter = __webpack_require__(59973), event_bridge_service = __webpack_require__(11494), exploration_navigation_service = __webpack_require__(39503), selection_service = __webpack_require__(72262), visibility_service = __webpack_require__(15393), visual_plugin_operations_service = __webpack_require__(66977), feature_switch_service = __webpack_require__(9380), promiseFactory = __webpack_require__(14463), typings = __webpack_require__(49977), pbi_overlay_positions = __webpack_require__(25512), pbi_overlay_service = __webpack_require__(86940), visual_plugin_service = __webpack_require__(29866), visualContainerGroup2 = __webpack_require__(9215), events = __webpack_require__(8590), visualContainerUtilsHelper = __webpack_require__(3579), canvasDisplayUtil = __webpack_require__(64466), visualContainerUtils = __webpack_require__(93599), PowerBICommon_events = __webpack_require__(58317), plugins = __webpack_require__(47508), debug = __webpack_require__(62458), visual_container_skittles_lazy_component = __webpack_require__(24171), exploration_capabilities_service = __webpack_require__(48145), form_factor_provider_service = __webpack_require__(17328), panes_visibility_service = __webpack_require__(21024), view_mode_state_service = __webpack_require__(77200), visual_overlay_position_service = __webpack_require__(26691), visual_container_skittles_position = __webpack_require__(14002), chartElementsUnsupportedVisuals = [ plugins.L.textbox.name, plugins.L.actionButton.name, plugins.L.shape.name, plugins.L.basicShape.name, plugins.L.image.name ], VisualContainerSkittlesService = function() {
            function VisualContainerSkittlesService(eventBridge, explorationCapabilities, explorationNavigation, featureSwitchService, formFactor, injector, overlay, paneVisibility, scrollDispatcher, selectionService, viewModeStateService, visibilityService, visualOverlayPositionService, visualPluginOperations, visualPluginService) {
                this.eventBridge = eventBridge, this.explorationCapabilities = explorationCapabilities, 
                this.explorationNavigation = explorationNavigation, this.featureSwitchService = featureSwitchService, 
                this.formFactor = formFactor, this.injector = injector, this.overlay = overlay, 
                this.paneVisibility = paneVisibility, this.scrollDispatcher = scrollDispatcher, 
                this.selectionService = selectionService, this.viewModeStateService = viewModeStateService, 
                this.visibilityService = visibilityService, this.visualOverlayPositionService = visualOverlayPositionService, 
                this.visualPluginOperations = visualPluginOperations, this.visualPluginService = visualPluginService, 
                this.skittlesOverlayPosition$ = new BehaviorSubject.X(void 0), this.destroy$ = new Subject.xQ, 
                this.destroyForVisualContainerChange$ = new Subject.xQ, this.destroyForOverlaySupportedTypesChange$ = new Subject.xQ, 
                this.destroyForPaneSupportedTypesChange$ = new Subject.xQ, this.destroyForSkittleDisabledRecreation$ = new Subject.xQ, 
                this.destroyScrollMonitorSession$ = new Subject.xQ, this.showBuildFlyout$ = new BehaviorSubject.X(null), 
                this.overlaySupportedTypes$ = new BehaviorSubject.X(void 0), this.paneSupportedTypes$ = new BehaviorSubject.X(void 0);
            }
            return VisualContainerSkittlesService.prototype.ngOnDestroy = function() {
                this.destroyForVisualContainerChange$.next(), this.destroyForVisualContainerChange$.complete(), 
                this.destroyForOverlaySupportedTypesChange$.next(), this.destroyForOverlaySupportedTypesChange$.complete(), 
                this.destroyForPaneSupportedTypesChange$.next(), this.destroyForPaneSupportedTypesChange$.complete(), 
                this.destroyForSkittleDisabledRecreation$.next(), this.destroyForSkittleDisabledRecreation$.complete(), 
                this.destroyScrollMonitorSession$.next(), this.destroyScrollMonitorSession$.complete(), 
                this.destroy$.next(), this.destroy$.complete(), this.skittlesOverlayPosition$.next(void 0), 
                this.skittlesOverlayPosition$.complete();
            }, Object.defineProperty(VisualContainerSkittlesService.prototype, "skittlesPosition$", {
                get: function() {
                    return this.skittlesOverlayPosition$.asObservable();
                },
                enumerable: !1,
                configurable: !0
            }), VisualContainerSkittlesService.prototype.startMonitoring = function(_getCanvas) {
                var _this = this;
                this.featureSwitchService.featureSwitches.onObject && (this.alreadyMonitoring || (this.alreadyMonitoring = !0, 
                this.eventBridge.on(events.mSO).pipe((0, takeUntil.R)(this.destroy$)).subscribe(function(addedArgs) {
                    _this.newVisual = addedArgs.visualName, _this.startAuthoringOnNewVisual = addedArgs.startAuthoring;
                }), this.boundVisualContainer$ = this.eventBridge.on(events.tRg).pipe((0, map.U)(function(_event) {
                    return _this.getSelectedElement();
                }), (0, distinctUntilChanged.x)(function(prev, curr) {
                    return (null == prev ? void 0 : prev.name) === (null == curr ? void 0 : curr.name);
                }), (0, tap.b)(function(vc) {
                    _this.destroyForVisualContainerChange$.next(), _this.destroyScrollMonitorSession$.next(), 
                    _this.monitorVisualScrolling(vc);
                }), (0, takeUntil.R)(this.destroy$)), this.inFocusVisualContainer$ = this.eventBridge.on(events.y5h).pipe((0, 
                map.U)(function(_event) {
                    return _this.getInFocusedElement();
                }), (0, distinctUntilChanged.x)(function(prev, curr) {
                    return (null == prev ? void 0 : prev.name) === (null == curr ? void 0 : curr.name);
                }), (0, takeUntil.R)(this.destroy$)), (0, combineLatest.aj)([ this.boundVisualContainer$.pipe((0, 
                startWith.O)(void 0)), this.inFocusVisualContainer$.pipe((0, startWith.O)(void 0)), this.viewModeStateService.getMode$() ]).pipe((0, 
                skip.T)(1), (0, distinctUntilChanged.x)(function(_a, _b) {
                    var prevBoundVC = _a[0], prevInFocusVC = _a[1], currBoundVC = _b[0], currInFocusVC = _b[1];
                    return (null == prevBoundVC ? void 0 : prevBoundVC.name) === (null == currBoundVC ? void 0 : currBoundVC.name) && (null == prevInFocusVC ? void 0 : prevInFocusVC.name) === (null == currInFocusVC ? void 0 : currInFocusVC.name) && _a[2] === _b[2];
                }), (0, takeUntil.R)(this.destroy$)).subscribe(function(_a) {
                    var boundVC = _a[0], inFocusVC = _a[1], viewMode = _a[2];
                    _this.viewMode = viewMode;
                    var openSkittleType = _this.lastOpenSkittleType;
                    _this.allowSkittlesUI(viewMode, null != inFocusVC ? inFocusVC : boundVC) ? inFocusVC ? (_this.paneSupportedTypes$.next(_this.getSupportedSkittleTypes(inFocusVC)), 
                    _this.destroyScrollMonitorSession$.next(), _this.ensureSkittlesClosed(), _this.showSkittlesInPaneSwitcher(openSkittleType)) : boundVC ? _this.showSkittlesUIInEditMode({
                        visualContainer: boundVC,
                        ensureNewVisualState: !0,
                        updateSupportedTypes: !0,
                        reopenSkittle: !0
                    }) : _this.removeSkittlesFromOverlay() : _this.removeSkittlesUI(), _this.lastOpenSkittleType = void 0;
                }), this.visualOverlayPositionService.registeredVisualContainers$.pipe((0, takeUntil.R)(this.destroy$)).subscribe(function(registeredVCs) {
                    var selected = _this.getSelectedElement();
                    _.findIndex(registeredVCs, function(vc) {
                        return vc.name === (null == selected ? void 0 : selected.name);
                    }) >= 0 && setTimeout(function() {
                        _this.showSkittlesUIInEditMode({
                            visualContainer: selected,
                            ensureNewVisualState: !0,
                            updateSupportedTypes: !0
                        });
                    });
                }), this.eventBridge.on(PowerBICommon_events.dJ).pipe((0, takeUntil.R)(this.destroy$)).subscribe(function() {
                    _this.ensureSkittlesClosed();
                }), (0, merge.T)(this.eventBridge.on(PowerBICommon_events.v7), this.eventBridge.on(events.Of1)).pipe((0, 
                takeUntil.R)(this.destroy$)).subscribe(function() {
                    var selected = _this.getSelectedElement();
                    selected && _this.showSkittlesUIInEditMode({
                        visualContainer: selected,
                        withSavedFlyoutState: !0,
                        skipSkittleFlyoutAutoFocus: !0
                    });
                }), this.eventBridge.on(events.ubE).pipe((0, tap.b)(function(_) {
                    _this.ensureSkittlesClosed();
                }), (0, debounceTime.b)(200), (0, takeUntil.R)(this.destroy$)).subscribe(function() {
                    var infocused = _this.getInFocusedElement(), selected = _this.getSelectedElement();
                    infocused ? (_this.ensureSkittlesClosed(), null != _this.lastOpenSkittleType && _this.showSkittlesInPaneSwitcher(_this.lastOpenSkittleType)) : selected && _this.showSkittlesOverlay({
                        visualContainer: selected,
                        withSavedFlyoutState: !0,
                        skipSkittleFlyoutAutoFocus: !0
                    });
                }), (0, merge.T)(this.eventBridge.on(events.KD7), this.eventBridge.on(events.jCS)).pipe((0, 
                withLatestFrom.M)(this.boundVisualContainer$), (0, takeUntil.R)(this.destroy$)).subscribe(function(_a) {
                    var eventArgs = _a[0], vc = _a[1], originalTypesEmpty = _.isEmpty(_this.overlaySupportedTypes$.value), newSupportedTypes = _this.getSupportedSkittleTypes(vc);
                    _this.overlaySupportedTypes$.next(newSupportedTypes), _this.paneSupportedTypes$.next(newSupportedTypes), 
                    function(eventArgs) {
                        return void 0 !== eventArgs.affectContainer;
                    }(eventArgs) && ("DraggedToVisual" === eventArgs.fieldSource || "CheckboxTickedInFieldList" === eventArgs.fieldSource) && newSupportedTypes.some(function(supportedType) {
                        return "Build" === supportedType.type;
                    }) && _this.showBuildFlyout(), _.isEmpty(newSupportedTypes) ? (_this.destroyScrollMonitorSession$.next(), 
                    _this.ensureSkittlesClosed()) : originalTypesEmpty && vc !== _this.getInFocusedElement() && (_this.monitorVisualScrolling(vc), 
                    _this.showSkittlesUIInEditMode({
                        visualContainer: vc
                    }));
                })));
            }, VisualContainerSkittlesService.prototype.onFieldDragHover = function() {
                this.showBuildFlyout();
            }, VisualContainerSkittlesService.prototype.showBuildFlyout = function() {
                this.showBuildFlyout$.next();
            }, VisualContainerSkittlesService.prototype.removeSkittlesUI = function() {
                this.removeSkittlesFromOverlay(), this.removeSkittlesFromPaneSwitcher();
            }, VisualContainerSkittlesService.prototype.removeSkittlesFromOverlay = function() {
                this.overlaySupportedTypes$.next(void 0), this.destroyScrollMonitorSession$.next(), 
                this.ensureSkittlesClosed();
            }, VisualContainerSkittlesService.prototype.removeSkittlesFromPaneSwitcher = function() {
                this.paneSupportedTypes$.next(void 0), this.ensurePanesClosed();
            }, VisualContainerSkittlesService.prototype.getSelectedElement = function() {
                var selectedItems = this.selectionService.getSelectedElements();
                if (1 === _.size(selectedItems)) {
                    var selectedCanvasItem = selectedItems[0].canvasItem;
                    if ((0, visualContainerGroup2.Vz)(selectedCanvasItem)) return selectedCanvasItem;
                }
            }, VisualContainerSkittlesService.prototype.getInFocusedElement = function() {
                return this.visibilityService.get(27);
            }, VisualContainerSkittlesService.prototype.showSkittlesUIInEditMode = function(args) {
                var _a, _b, _c, _d, _e, visualContainer = args.visualContainer, withSavedFlyoutState = void 0 !== (_a = args.withSavedFlyoutState) && _a, ensureNewVisualState = void 0 !== (_b = args.ensureNewVisualState) && _b, skipSkittleFlyoutAutoFocus = void 0 !== (_c = args.skipSkittleFlyoutAutoFocus) && _c, updateSupportedTypes = void 0 !== (_d = args.updateSupportedTypes) && _d, reopenSkittle = void 0 !== (_e = args.reopenSkittle) && _e;
                if (updateSupportedTypes) {
                    var supportedSkittleTypes = this.getSupportedSkittleTypes(visualContainer);
                    this.overlaySupportedTypes$.next(supportedSkittleTypes);
                }
                this.ensurePanesClosed(), this.showSkittlesOverlay({
                    visualContainer,
                    withSavedFlyoutState,
                    ensureNewVisualState,
                    skipSkittleFlyoutAutoFocus,
                    reopenSkittle
                });
            }, VisualContainerSkittlesService.prototype.showSkittlesOverlay = function(args) {
                var _a, _b, _c, _d, visualContainer = args.visualContainer, withSavedFlyoutState = void 0 !== (_a = args.withSavedFlyoutState) && _a, ensureNewVisualState = void 0 !== (_b = args.ensureNewVisualState) && _b, skipSkittleFlyoutAutoFocus = void 0 !== (_c = args.skipSkittleFlyoutAutoFocus) && _c, reopenSkittle = void 0 !== (_d = args.reopenSkittle) && _d;
                this.ensureSkittlesClosed(), debug.fF.assertValue(visualContainer, "Expect the given visualContainer is defined");
                var positions = (0, visual_container_skittles_position.C)(visualContainer, this.visualOverlayPositionService);
                if (positions) {
                    var withActiveSkittle = withSavedFlyoutState ? this.lastOpenSkittleType : void 0;
                    this.skittlesOverlayPosition$.next({
                        container: visualContainer,
                        positions
                    }), ensureNewVisualState && this.newVisual === visualContainer.name && (this.startAuthoringOnNewVisual && (withActiveSkittle = "Build"), 
                    this.newVisual = void 0, this.startAuthoringOnNewVisual = !1), reopenSkittle && (withActiveSkittle = this.lastOpenSkittleType), 
                    this.destroyForOverlaySupportedTypesChange$.next();
                    var data = {
                        visualContainer,
                        withActiveSkittle,
                        skipActiveSkittleFlyoutAutoFocus: skipSkittleFlyoutAutoFocus,
                        supportedSkittleTypes$: this.overlaySupportedTypes$.pipe((0, takeUntil.R)(this.destroyForOverlaySupportedTypesChange$)),
                        showBuildFlyout$: this.showBuildFlyout$.pipe((0, takeUntil.R)(this.destroyForOverlaySupportedTypesChange$)),
                        fromPersonalize: 0 === this.viewMode
                    }, scrollStrategy = this.overlay.scrollStrategies.reposition(), skittlesPositionStrategy = this.getPositionStrategy(visualContainer);
                    this.overlayRef = this.overlay.open({
                        component: visual_container_skittles_lazy_component.Z,
                        data,
                        options: {
                            scrollStrategy,
                            positionStrategy: skittlesPositionStrategy,
                            hasBackdrop: !1,
                            disposeOnNavigation: !0,
                            minWidth: typings.Lc.width,
                            minHeight: typings.Lc.height
                        },
                        closeOnBackdropClick: !1,
                        disableCloseOnEsc: !0,
                        disableFocusTrapSetting: {
                            disable: !0
                        },
                        focusElementOnClose: null,
                        injector: this.injector,
                        overlayContainer: "exploreCanvasOverlay"
                    });
                } else ensureNewVisualState && this.newVisual === visualContainer.name && (this.lastOpenSkittleType = "Build");
            }, VisualContainerSkittlesService.prototype.showSkittlesInPaneSwitcher = function(withOpenPane) {
                var _this = this;
                this.destroyForPaneSupportedTypesChange$.next(), this.paneSupportedTypes$.pipe((0, 
                takeUntil.R)(this.destroyForPaneSupportedTypesChange$)).subscribe(function(supportedTypes) {
                    _.find(supportedTypes, function(supported) {
                        return "Build" === supported.type;
                    }) ? "Build" === withOpenPane ? _this.paneVisibility.isPaneExpanded("suggestSkittle") || _this.paneVisibility.togglePaneExpansion("suggestSkittle") : _this.paneVisibility.addToPaneSwitcher("suggestSkittle") : _this.paneVisibility.closePane("suggestSkittle");
                    var chartElementsState = _.find(supportedTypes, function(supported) {
                        return "ChartElements" === supported.type;
                    });
                    if (chartElementsState) {
                        var disabledState = chartElementsState.disabled$.value, disabled = null == disabledState ? void 0 : disabledState.disabled;
                        "ChartElements" === withOpenPane ? _this.paneVisibility.isPaneVisible("chartElementsSkittle") || _this.paneVisibility.togglePaneVisibility("chartElementsSkittle", disabled) : _this.paneVisibility.addToPaneSwitcher("chartElementsSkittle", disabled);
                        var firstTime_1 = !0;
                        chartElementsState.disabled$.pipe((0, takeUntil.R)((0, merge.T)(_this.destroyForVisualContainerChange$, _this.destroyForSkittleDisabledRecreation$))).subscribe(function(disabledState) {
                            firstTime_1 || _this.paneVisibility.setPaneDisabledState("chartElementsSkittle", null == disabledState ? void 0 : disabledState.disabled), 
                            _this.paneVisibility.updatePaneTitle("chartElementsSkittle", (null == disabledState ? void 0 : disabledState.disabled) ? disabledState.disabledReasonKey : "Skittles_ChartElements_Title"), 
                            firstTime_1 = !1;
                        });
                    } else _this.paneVisibility.closePane("chartElementsSkittle");
                    withOpenPane = void 0;
                });
            }, VisualContainerSkittlesService.prototype.ensureSkittlesClosed = function() {
                this.overlayRef && this.closeSkittlesOverlay();
            }, VisualContainerSkittlesService.prototype.ensurePanesClosed = function() {
                this.destroyForPaneSupportedTypesChange$.next(), this.paneVisibility.closePane("suggestSkittle"), 
                this.paneVisibility.closePane("chartElementsSkittle");
            }, VisualContainerSkittlesService.prototype.closeSkittlesOverlay = function() {
                this.destroyForOverlaySupportedTypesChange$.next(), this.overlayRef.close(), this.overlayRef = void 0, 
                this.skittlesOverlayPosition$.next(void 0), this.showBuildFlyout$.next(null);
            }, VisualContainerSkittlesService.prototype.monitorVisualScrolling = function(visualContainer) {
                var _this = this;
                visualContainer && this.scrollDispatcher.scrolled().pipe((0, filter.h)(function(event) {
                    var _a, scrolledElement = null === (_a = null == event ? void 0 : event.getElementRef()) || void 0 === _a ? void 0 : _a.nativeElement;
                    return _.includes(null == scrolledElement ? void 0 : scrolledElement.classList, canvasDisplayUtil.s.DisplayAreaContainerNameSelector.class);
                }), (0, tap.b)(function(_event) {
                    _this.ensureSkittlesClosed();
                }), (0, takeUntil.R)((0, merge.T)(this.destroyScrollMonitorSession$, this.destroy$)), (0, 
                debounceTime.b)(150)).subscribe(function() {
                    _this.visualOverlayPositionService.getOrigin(visualContainer) && (0, visual_container_skittles_position.C)(visualContainer, _this.visualOverlayPositionService) && _this.showSkittlesUIInEditMode({
                        visualContainer,
                        withSavedFlyoutState: !0,
                        skipSkittleFlyoutAutoFocus: !0
                    });
                });
            }, VisualContainerSkittlesService.prototype.allowsPersonalization = function(visualContainer) {
                var _a, _b, _c, _d;
                if (debug.fF.assertValue(visualContainer, "Expect the given visualContainer is defined"), 
                this.explorationCapabilities.getCapabilities().disableInlineExplore) return !1;
                var exploration = this.explorationNavigation.getCurrentExploration();
                if (!(null === (_a = exploration.settings) || void 0 === _a ? void 0 : _a.allowInlineExploration)) return !1;
                var activeSection = exploration.sections[exploration.activeSectionIndex];
                if (!1 === (null === (_c = null === (_b = null == activeSection ? void 0 : activeSection.evaluatedObjects) || void 0 === _b ? void 0 : _b.personalizeVisual) || void 0 === _c ? void 0 : _c.show)) return !1;
                var visualEvaluatedObjects = visualContainer.config.singleVisual.evaluatedObjects;
                return !(!1 === (null === (_d = null == visualEvaluatedObjects ? void 0 : visualEvaluatedObjects.visualHeader) || void 0 === _d ? void 0 : _d.showPersonalizeVisualButton));
            }, VisualContainerSkittlesService.prototype.allowSkittlesUI = function(viewMode, visualContainer) {
                switch (viewMode) {
                  case 1:
                  case 2:
                    return !0;

                  case 0:
                    return null != visualContainer && this.allowsPersonalization(visualContainer);

                  default:
                    return debug.fF.assertNever(viewMode), !1;
                }
            }, VisualContainerSkittlesService.prototype.getPositionStrategy = function(visualContainer) {
                var origin = this.visualOverlayPositionService.getOrigin(visualContainer);
                return this.overlay.position("exploreCanvasOverlay").withinOverlayContainer(origin).withMaxiumumVisibility(!0).withPositions([ (0, 
                pbi_overlay_positions.Zz)(typings.Lc.marginHorizontal, void 0, 1), (0, pbi_overlay_positions.Iz)(-typings.Lc.marginHorizontal, void 0, 1), (0, 
                pbi_overlay_positions.Zz)(-(typings.Lc.marginHorizontal + typings.Lc.width)), (0, 
                pbi_overlay_positions.Iz)(typings.Lc.marginHorizontal + typings.Lc.width) ]);
            }, VisualContainerSkittlesService.prototype.getSupportedSkittleTypes = function(visualContainer) {
                var _this = this, result = [];
                if (this.destroyForSkittleDisabledRecreation$.next(), 1 === this.formFactor.getCurrentLayout()) return result;
                var chartElementsDisabled$_1, visualType = (0, visualContainerUtilsHelper.s)(visualContainer);
                if (visualContainer && (this.visualPluginOperations.isQueryVisual(visualType) || this.visualPluginOperations.canConvertVisual(visualContainer))) {
                    var buildDisabled$ = new BehaviorSubject.X({
                        disabled: !1
                    });
                    buildDisabled$.complete(), result.push({
                        type: "Build",
                        disabled$: buildDisabled$
                    });
                }
                return visualType && _.indexOf(chartElementsUnsupportedVisuals, visualType) < 0 && (this.eventBridge.on(events.jCS).pipe((0, 
                startWith.O)(void 0), (0, filter.h)(function(eventArgs) {
                    return void 0 === eventArgs || eventArgs.affectContainer(visualContainer);
                }), (0, map.U)(function(_args) {
                    return _this.getChartElementsDisabledState(visualContainer);
                }), (0, distinctUntilChanged.x)(), (0, takeUntil.R)((0, merge.T)(this.destroyForVisualContainerChange$, this.destroyForSkittleDisabledRecreation$))).subscribe(function(disabledState) {
                    chartElementsDisabled$_1 ? chartElementsDisabled$_1.next(disabledState) : chartElementsDisabled$_1 = new BehaviorSubject.X(disabledState);
                }), result.push({
                    type: "ChartElements",
                    disabled$: chartElementsDisabled$_1
                })), result;
            }, VisualContainerSkittlesService.prototype.getChartElementsDisabledState = function(visualContainer) {
                return (0, visualContainerUtils.LR)(this.visualPluginService, this.visualPluginOperations, visualContainer) ? {
                    disabled: !0,
                    disabledReasonKey: "VisualContainer_Skittle_Tooltip_ChartElement_EmptyData"
                } : {
                    disabled: !1
                };
            }, VisualContainerSkittlesService.\u0275fac = function(t) {
                return new (t || VisualContainerSkittlesService)(core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](exploration_capabilities_service.U), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](form_factor_provider_service.F), core["\u0275\u0275inject"](core.Injector), core["\u0275\u0275inject"](pbi_overlay_service._), core["\u0275\u0275inject"](panes_visibility_service.r), core["\u0275\u0275inject"](scrolling.mF), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](view_mode_state_service.kc), core["\u0275\u0275inject"](visibility_service.w), core["\u0275\u0275inject"](visual_overlay_position_service.z), core["\u0275\u0275inject"](visual_plugin_operations_service.f), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, VisualContainerSkittlesService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualContainerSkittlesService,
                factory: VisualContainerSkittlesService.\u0275fac
            }), VisualContainerSkittlesService;
        }(), VisualContainerSkittlesServiceLazyProvider = {
            provide: "visualContainerSkittlesService",
            useFactory: function(promiseFactory, eventBridge, explorationCapabilities, explorationNavigation, featureSwitchService, formFactor, injector, overlay, paneVisibility, scrollDispatcher, selectionService, viewModeStateService, visibilityService, visualOverlayPositionService, visualPluginOperations, visualPluginService) {
                var service = new VisualContainerSkittlesService(eventBridge, explorationCapabilities, explorationNavigation, featureSwitchService, formFactor, injector, overlay, paneVisibility, scrollDispatcher, selectionService, viewModeStateService, visibilityService, visualOverlayPositionService, visualPluginOperations, visualPluginService);
                return promiseFactory.resolve(service);
            },
            deps: [ promiseFactory.t, event_bridge_service.J, exploration_capabilities_service.U, exploration_navigation_service.z, feature_switch_service.vZ, form_factor_provider_service.F, core.Injector, pbi_overlay_service._, panes_visibility_service.r, scrolling.mF, selection_service.z, view_mode_state_service.kc, visibility_service.w, visual_overlay_position_service.z, visual_plugin_operations_service.f, visual_plugin_service.D ]
        }, common = __webpack_require__(77476), lazy_load_module = __webpack_require__(82156), VisualContainerSkittlesModule = function() {
            function VisualContainerSkittlesModule() {}
            return VisualContainerSkittlesModule.\u0275fac = function(t) {
                return new (t || VisualContainerSkittlesModule);
            }, VisualContainerSkittlesModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: VisualContainerSkittlesModule
            }), VisualContainerSkittlesModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ VisualContainerSkittlesServiceLazyProvider ],
                imports: [ common.CommonModule, lazy_load_module.N ]
            }), VisualContainerSkittlesModule;
        }();
    }
} ]);