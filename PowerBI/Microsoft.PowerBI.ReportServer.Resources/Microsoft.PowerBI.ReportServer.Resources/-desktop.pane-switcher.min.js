"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "pane-switcher" ], {
    37259: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            PaneSwitcherModule: function() {
                return PaneSwitcherModule;
            }
        });
        var _a, tslib_es6 = __webpack_require__(81337), map = __webpack_require__(14172), takeUntil = __webpack_require__(83317), take = __webpack_require__(48787), fileMenuService = __webpack_require__(82345), browserUtils = __webpack_require__(59107), rx_component = __webpack_require__(73221), pbi_menu_contracts = __webpack_require__(64560), pbi_pane_component = __webpack_require__(21023), core = __webpack_require__(50423), localization_service = __webpack_require__(65181), panes_visibility_service = __webpack_require__(21024), pbi_menu_service = __webpack_require__(5467), common = __webpack_require__(77476), pbi_office_icon_component = __webpack_require__(69437), pbi_scrollbar_directive = __webpack_require__(80649), pbi_tooltip_directive = __webpack_require__(36858), localize_pipe = __webpack_require__(85102), _c0 = function(a0, a1) {
            return {
                selected: a0,
                disabled: a1
            };
        };
        function PaneSwitcherComponent_div_0_button_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 5), core["\u0275\u0275listener"]("click", function($event) {
                    var item_r4 = core["\u0275\u0275restoreView"](_r7).$implicit, ctx_r6 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](!item_r4.isDisabled && ctx_r6.togglePane(item_r4, $event));
                })("contextmenu", function($event) {
                    var item_r4 = core["\u0275\u0275restoreView"](_r7).$implicit, ctx_r8 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](!item_r4.isDisabled && ctx_r8.showContextMenu($event, item_r4));
                }), core["\u0275\u0275element"](1, "pbi-office-icon", 6), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var item_r4 = ctx.$implicit;
                core["\u0275\u0275property"]("id", item_r4.name)("ngClass", core["\u0275\u0275pureFunction2"](7, _c0, item_r4.isExpanded, item_r4.isDisabled))("pbiTooltip", item_r4.name), 
                core["\u0275\u0275attribute"]("data-automation-id", item_r4.name + " button")("aria-pressed", item_r4.isExpanded)("aria-label", item_r4.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("name", item_r4.icon);
            }
        }
        function PaneSwitcherComponent_div_0_ng_container_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r10 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "button", 7), 
                core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r10);
                    var ctx_r9 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r9.openPaneSwitcherUserSettings());
                }), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "localize"), 
                core["\u0275\u0275element"](4, "pbi-office-icon", 8), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 4, "Settings")), 
            core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](2, 2, "Settings")));
        }
        var _c1 = function() {
            return {
                ignoreOverlay: !1,
                ignoreMobile: !1
            };
        };
        function PaneSwitcherComponent_div_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 1), core["\u0275\u0275pipe"](1, "localize"), 
            core["\u0275\u0275elementStart"](2, "div", 2), core["\u0275\u0275template"](3, PaneSwitcherComponent_div_0_button_3_Template, 2, 10, "button", 3), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](4, PaneSwitcherComponent_div_0_ng_container_4_Template, 5, 6, "ng-container", 4), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var viewModel_r1 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](1, 4, "Pane_Manager")), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("pbiScrollbar", core["\u0275\u0275pureFunction0"](6, _c1)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", viewModel_r1), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.showGearButton());
            }
        }
        var DefaultPaneOrder = ((_a = {}).data = 0, _a.build = 1, _a.format = 2, _a.copilot = 3, 
        _a.insights = 4, _a.reflex = 5, _a.quickMeasures = 6, _a.performance = 7, _a.bookmarks = 8, 
        _a.syncSlicers = 9, _a.canvasItems = 10, _a.quickExplore = 11, _a.assistedCreation = 12, 
        _a.suggestSkittle = 13, _a.chartElementsSkittle = 14, _a.pageVisuals = 15, _a.customize = 16, 
        _a), PaneSwitcherComponent = function(_super) {
            function PaneSwitcherComponent(fileMenuService, localizationService, paneVisibilityService, pbiMenuService) {
                var _this = _super.call(this) || this;
                return _this.fileMenuService = fileMenuService, _this.localizationService = localizationService, 
                _this.paneVisibilityService = paneVisibilityService, _this.pbiMenuService = pbiMenuService, 
                _this.viewModel$ = _this.paneVisibilityService.getPanes$().pipe((0, map.U)(function(panes) {
                    return _this.convertToViewModel(panes);
                }), (0, takeUntil.R)(_this.onDestroy$)), _this;
            }
            return (0, tslib_es6.__extends)(PaneSwitcherComponent, _super), PaneSwitcherComponent.prototype.togglePane = function(item, event) {
                this.paneVisibilityService.togglePaneExpansion(item.paneType, !browserUtils.M.isCtrlOrMeta(event)), 
                this.paneVisibilityService.isPaneExpanded(item.paneType) && this.paneVisibilityService.setFocusedPane(item.paneType);
            }, PaneSwitcherComponent.prototype.showContextMenu = function(event, item) {
                var _a, _b;
                event.preventDefault();
                var optionsSetting = null === (_b = (_a = this.paneVisibilityService).getPaneOptionsSetting) || void 0 === _b ? void 0 : _b.call(_a, item.paneType);
                if (null == optionsSetting ? void 0 : optionsSetting.showOptions) {
                    var menu = (0, pbi_pane_component.Ot)(optionsSetting.getDropdownItems(), !1);
                    menu && this.pbiMenuService.open({
                        menu,
                        origin: event.target,
                        closeOnButtonClick: !0,
                        menuMode: pbi_menu_contracts.Kb.Compact
                    }).onButtonClick$.pipe((0, take.q)(1)).subscribe(function(value) {
                        optionsSetting.clickHandler(value.id);
                    });
                }
            }, PaneSwitcherComponent.prototype.convertToViewModel = function(panes) {
                for (var result = [], _i = 0, _a = Object.keys(panes); _i < _a.length; _i++) {
                    var paneType = _a[_i], pane_1 = panes[paneType];
                    if (pane_1.isPaneVisible && "customize" !== paneType && !pane_1.isPaneHiddenInLayout) {
                        var item_1 = this.createPaneSwitcherItem(paneType, pane_1);
                        result.push(item_1);
                    }
                }
                var item = this.createPaneSwitcherItem("customize", panes.customize);
                return result.push(item), _.orderBy(result, function(r) {
                    return DefaultPaneOrder[r.paneType];
                });
            }, PaneSwitcherComponent.prototype.createPaneSwitcherItem = function(paneType, pane) {
                var item = {
                    paneType,
                    isExpanded: pane.isPaneExpanded,
                    name: this.localizationService.get(pane.title),
                    icon: "copilot" === paneType ? "Copilot_80" : "".concat(pane.icon, "_20")
                };
                return null != pane.isPaneDisabled && (item.isDisabled = pane.isPaneDisabled), item;
            }, PaneSwitcherComponent.prototype.openPaneSwitcherUserSettings = function() {
                var _a;
                null === (_a = this.fileMenuService) || void 0 === _a || _a.handleMenuItem("manageSettings", "reportSettings");
            }, PaneSwitcherComponent.prototype.showGearButton = function() {
                return !!this.fileMenuService;
            }, PaneSwitcherComponent.\u0275fac = function(t) {
                return new (t || PaneSwitcherComponent)(core["\u0275\u0275directiveInject"](fileMenuService.P, 8), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](panes_visibility_service.r), core["\u0275\u0275directiveInject"](pbi_menu_service.o));
            }, PaneSwitcherComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: PaneSwitcherComponent,
                selectors: [ [ "pane-switcher" ] ],
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ "class", "paneSwitcher", "role", "toolbar", "aria-orientation", "vertical", 4, "ngIf" ], [ "role", "toolbar", "aria-orientation", "vertical", 1, "paneSwitcher" ], [ 3, "pbiScrollbar" ], [ "class", "paneToggleButton", "aria-haspopup", "true", 3, "id", "ngClass", "pbiTooltip", "click", "contextmenu", 4, "ngFor", "ngForOf" ], [ 4, "ngIf" ], [ "aria-haspopup", "true", 1, "paneToggleButton", 3, "id", "ngClass", "pbiTooltip", "click", "contextmenu" ], [ 3, "name" ], [ 1, "gear-button", "paneToggleButton", 3, "pbiTooltip", "click" ], [ "name", "Gear_16" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, PaneSwitcherComponent_div_0_Template, 5, 7, "div", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.viewModel$));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, pbi_office_icon_component.m, pbi_scrollbar_directive.r, pbi_tooltip_directive.V, common.AsyncPipe, localize_pipe.F ],
                styles: [ ".paneSwitcher[_ngcontent-%COMP%]{--pane-switcher-background-color: var(--fluent-theme-neutral-lighter-alt-color, #FAF9F8);--pane-switcher-button-background-color: var(--gray-10, #FAF9F8);--pane-switcher-button-hover-background-color: var(--gray-30, #EDEBE9);--pane-switcher-button-active-background-color: var(--gray-50, #D2D0CE);--pane-switcher-button-selected-background-color: var(--gray-40, #E1DFDD);--pane-switcher-button-selected-border-color: var(--gray-130, #605E5C);--pane-switcher-button-focus-border-color: var(--fluent-theme-black-color, #000);--pane-switcher-gear-button-border-color: var(--colorNeutralStroke2);display:flex;flex-direction:column;height:100%;width:32px;background-color:var(--pane-switcher-background-color)}  [data-legacy-theming=false] .paneSwitcher{--pane-switcher-background-color: var(--colorNeutralBackground1);--pane-switcher-button-background-color: var(--colorNeutralBackground2);--pane-switcher-button-hover-background-color: var(--colorNeutralBackground2Hover);--pane-switcher-button-active-background-color: var(--colorNeutralBackground2Pressed);--pane-switcher-button-selected-background-color: var(--colorNeutralBackground2Selected);--pane-switcher-button-selected-border-color: var(--colorNeutralStroke1Selected);--pane-switcher-button-focus-border-color: var(--colorNeutralStroke1Selected);--pane-switcher-gear-button-border-color: var(--colorNeutralStroke2)}.paneSwitcher[_ngcontent-%COMP%]   .paneToggleButton[_ngcontent-%COMP%]{background-color:var(--pane-switcher-button-background-color);height:32px;width:100%;box-sizing:border-box;display:flex;align-items:center;justify-content:center}.paneSwitcher[_ngcontent-%COMP%]   .paneToggleButton[_ngcontent-%COMP%]:hover:not(.disabled){background-color:var(--pane-switcher-button-hover-background-color)}.paneSwitcher[_ngcontent-%COMP%]   .paneToggleButton[_ngcontent-%COMP%]:active:not(.disabled){background-color:var(--pane-switcher-button-active-background-color)}.paneSwitcher[_ngcontent-%COMP%]   .paneToggleButton.selected[_ngcontent-%COMP%]{background-color:var(--pane-switcher-button-selected-background-color);border:1px solid var(--pane-switcher-button-selected-border-color)}.paneSwitcher[_ngcontent-%COMP%]   .paneToggleButton.disabled[_ngcontent-%COMP%]{opacity:.4;cursor:default}  html[data-focus-source=key] .paneSwitcher .paneToggleButton:focus,   html[data-focus-source=key] .paneSwitcher .paneToggleButton:hover:focus,   html[data-focus-source=key] .paneSwitcher .paneToggleButton:active:focus,   html[data-focus-source=key] .paneSwitcher .paneToggleButton.selected:focus{border:2px solid var(--pane-switcher-button-focus-border-color)}.paneSwitcher[_ngcontent-%COMP%]   .paneToggleButton[_ngcontent-%COMP%]   pbi-office-icon[_ngcontent-%COMP%]{height:20px;width:20px}  [data-legacy-theming=false] .paneSwitcher #Customize svg{fill:var(--colorNeutralForeground1)}.paneSwitcher[_ngcontent-%COMP%]   .gear-button[_ngcontent-%COMP%]{position:absolute;bottom:0;border-top:1px solid var(--colorNeutralStroke2);width:100%}@media print{[_nghost-%COMP%]{display:none!important}}" ],
                changeDetection: 0
            }), PaneSwitcherComponent;
        }(rx_component.w), ExploreUI_module = __webpack_require__(87121), icon = __webpack_require__(44408), a11y_module = __webpack_require__(20914), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), pbi_scrollbar_module = __webpack_require__(72359), UILibrary_module = __webpack_require__(94785), pbi_office_icon_module = __webpack_require__(45411), pbi_tooltip_module = __webpack_require__(16095), pbi_office_icon_provider_service = __webpack_require__(54485), manifests = [ {
            type: PaneSwitcherComponent,
            componentId: "PaneSwitcherComponentId"
        } ], PaneSwitcherModule = function() {
            function PaneSwitcherModule(iconProvider) {
                __webpack_require__.e("on-object").then(__webpack_require__.bind(__webpack_require__, 39875)).then(function(module) {
                    iconProvider.registerIcons(module.iconSpriteSheet.sprite);
                });
            }
            return PaneSwitcherModule.\u0275fac = function(t) {
                return new (t || PaneSwitcherModule)(core["\u0275\u0275inject"](pbi_office_icon_provider_service.u));
            }, PaneSwitcherModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: PaneSwitcherModule
            }), PaneSwitcherModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ExploreUI_module.J, localization_module.v, lazy_load_module.N.withManifests(manifests), icon.Ps, a11y_module._, pbi_office_icon_module.m, pbi_scrollbar_module.K, pbi_tooltip_module.Z, UILibrary_module.g ]
            }), PaneSwitcherModule;
        }();
    }
} ]);