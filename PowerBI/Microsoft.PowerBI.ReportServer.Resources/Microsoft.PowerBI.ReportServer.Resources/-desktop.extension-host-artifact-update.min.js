"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-artifact-update" ], {
    73582: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostArtifactUpdateModule: function() {
                return ExtensionHostArtifactUpdateModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), ngrx_store = __webpack_require__(85732), map = __webpack_require__(14172), distinctUntilChanged = __webpack_require__(77526), pairwise = __webpack_require__(6663), tap = __webpack_require__(17653), v4 = __webpack_require__(11105), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), workspace_collection_src = __webpack_require__(82618), subscribeArtifactUpdate = (0, 
        ngrx_store.PH)("[Extension Host Artifact Update] Subscribe Artifact Update", (0, 
        ngrx_store.Ky)()), unsubscribeArtifactUpdate = (0, ngrx_store.PH)("[Extension Host Artifact Update] Unsubscribe Artifact Update", (0, 
        ngrx_store.Ky)()), artifactUpdateSubscriptionsAdapter = (0, __webpack_require__(8894).H)({
            selectId: function(e) {
                return e.subscriptionId;
            }
        }), initialState = {
            artifactUpdateSubscriptions: artifactUpdateSubscriptionsAdapter.getInitialState()
        }, getState = (0, ngrx_store.ZF)("extensionHostArtifactUpdate"), getArtifactUpdateSubscriptions = (0, 
        ngrx_store.P1)(getState, function(state) {
            return artifactUpdateSubscriptionsAdapter.getSelectors().selectAll(state.artifactUpdateSubscriptions);
        }), core = __webpack_require__(50423), ExtensionHostArtifactUpdateEffects = function() {
            function ExtensionHostArtifactUpdateEffects(actions$, messageBroker, store) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.store = store, 
                this.onSubscribeArtifactUpdateReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.subscribeArtifactUpdate, function(_a) {
                    var iframeId = _a.iframeId, workspaceObjectId = _a.workspaceObjectId, subscriptionId = (0, 
                    v4.Z)();
                    return _this.store.dispatch(subscribeArtifactUpdate({
                        subscriptionId,
                        iframeId,
                        workspaceObjectId
                    })), index_core.Vm.subscribeArtifactUpdate.resolve({
                        subscriptionId
                    });
                }), this.onUnsubscribeArtifactUpdateReceived$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.pR)(index_core.Vm.unsubscribeArtifactUpdate), (0, 
                    map.U)(function(_a) {
                        return unsubscribeArtifactUpdate({
                            subscriptionId: _a.subscriptionId
                        });
                    }));
                }), this.pushArtifactUpdate$ = (0, ngrx_effects.GW)(function() {
                    return _this.store.select(workspace_collection_src.Fe).pipe((0, distinctUntilChanged.x)(), (0, 
                    pairwise.G)(), (0, ngrx_effects.IC)(function() {
                        return _this.store.select(getArtifactUpdateSubscriptions);
                    }), (0, map.U)(function(_a) {
                        for (var _b = _a[0], prevWorkspaces = _b[0], currWorkspaces = _b[1], messages = [], _loop_1 = function(subscriptionId, iframeId, workspaceObjectId) {
                            var changes = [], prevWorkspaceArtifacts = prevWorkspaces[workspaceObjectId], currWorkspaceArtifacts = currWorkspaces[workspaceObjectId];
                            prevWorkspaceArtifacts && currWorkspaceArtifacts && (currWorkspaceArtifacts.forEach(function(currArtifact) {
                                var prevArtifact = prevWorkspaceArtifacts.find(function(_a) {
                                    return _a.objectId === currArtifact.objectId;
                                });
                                currArtifact.objectId && currArtifact.artifactType && !prevArtifact && changes.push({
                                    changeType: "add",
                                    workspaceObjectId,
                                    artifactObjectId: currArtifact.objectId,
                                    artifactType: currArtifact.artifactType
                                });
                            }), prevWorkspaceArtifacts.forEach(function(prevArtifact) {
                                var currArtifact = currWorkspaceArtifacts.find(function(_a) {
                                    return _a.objectId === prevArtifact.objectId;
                                });
                                prevArtifact.objectId && prevArtifact.artifactType && !currArtifact && changes.push({
                                    changeType: "remove",
                                    workspaceObjectId,
                                    artifactObjectId: prevArtifact.objectId,
                                    artifactType: prevArtifact.artifactType
                                });
                            }), currWorkspaceArtifacts.forEach(function(currArtifact) {
                                var prevArtifact = prevWorkspaceArtifacts.find(function(_a) {
                                    return _a.objectId === currArtifact.objectId;
                                });
                                currArtifact.objectId && currArtifact.artifactType && currArtifact.lastUpdatedDate && prevArtifact && prevArtifact.objectId && prevArtifact.artifactType && prevArtifact.lastUpdatedDate && prevArtifact.lastUpdatedDate.getTime() !== currArtifact.lastUpdatedDate.getTime() && changes.push({
                                    changeType: "edit",
                                    workspaceObjectId,
                                    artifactObjectId: currArtifact.objectId,
                                    artifactType: currArtifact.artifactType
                                });
                            })), changes.length > 0 && messages.push(index_core.Vm.onArtifactUpdate({
                                subscriptionId,
                                changes
                            })(iframeId));
                        }, _i = 0, subscriptions_1 = _a[1]; _i < subscriptions_1.length; _i++) {
                            var _c = subscriptions_1[_i];
                            _loop_1(_c.subscriptionId, _c.iframeId, _c.workspaceObjectId);
                        }
                        return messages;
                    }), (0, tap.b)(function(messages) {
                        messages.forEach(function(message) {
                            _this.messageBroker.send(message);
                        });
                    }));
                }, {
                    dispatch: !1
                });
            }
            return ExtensionHostArtifactUpdateEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostArtifactUpdateEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](ngrx_store.yh));
            }, ExtensionHostArtifactUpdateEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostArtifactUpdateEffects,
                factory: ExtensionHostArtifactUpdateEffects.\u0275fac
            }), ExtensionHostArtifactUpdateEffects;
        }(), ngrx_immer_store = __webpack_require__(36012);
        function reducer(state, action) {
            return (0, ngrx_store.Lq)(initialState, (0, ngrx_immer_store.P)(subscribeArtifactUpdate, function(state, _a) {
                state.artifactUpdateSubscriptions = artifactUpdateSubscriptionsAdapter.upsertOne({
                    subscriptionId: _a.subscriptionId,
                    iframeId: _a.iframeId,
                    workspaceObjectId: _a.workspaceObjectId
                }, state.artifactUpdateSubscriptions);
            }), (0, ngrx_immer_store.P)(unsubscribeArtifactUpdate, function(state, _a) {
                state.artifactUpdateSubscriptions = artifactUpdateSubscriptionsAdapter.removeOne(_a.subscriptionId, state.artifactUpdateSubscriptions);
            }))(state, action);
        }
        var ExtensionHostArtifactUpdateModule = function() {
            function ExtensionHostArtifactUpdateModule() {}
            return ExtensionHostArtifactUpdateModule.\u0275fac = function(t) {
                return new (t || ExtensionHostArtifactUpdateModule);
            }, ExtensionHostArtifactUpdateModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostArtifactUpdateModule
            }), ExtensionHostArtifactUpdateModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_store.Aw.forFeature("extensionHostArtifactUpdate", reducer), ngrx_effects.sQ.forFeature([ ExtensionHostArtifactUpdateEffects ]) ]
            }), ExtensionHostArtifactUpdateModule;
        }();
    }
} ]);