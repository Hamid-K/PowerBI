"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "groups-dialog" ], {
    82584: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            GroupsDialogModule: function() {
                return GroupsDialogModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), binSizeRangeForDateTime = {
            min: 1,
            max: 1e6,
            step: 1
        }, millisecondsInADay = 864e5, timeUnitsSequenceAscending = [ 11, 10, 9, 8, 6, 4 ];
        function getBinSizeRangeForNumbers(valueType) {
            switch (valueType.primitiveType) {
              case 4:
                return {
                    min: 1,
                    max: 1e18,
                    step: 1
                };

              case 2:
                return {
                    min: 1e-4,
                    max: 1e14,
                    step: 1e-4
                };

              case 3:
                return {
                    min: 1e-300,
                    max: 1e300,
                    step: "any"
                };

              default:
                return debug.fF.assertFail("Unsupported numeric primitiveType:" + valueType.primitiveType), 
                {
                    min: 1,
                    max: 1e18,
                    step: 1
                };
            }
        }
        function getMillisecondDividends(timeUnit, allowApproxValue) {
            switch (timeUnit) {
              case 4:
                return debug.fF.assert(function() {
                    return !!allowApproxValue;
                }, "Should not call with BinUnit.Year if not allowing approx value."), 365 * millisecondsInADay;

              case 6:
                return debug.fF.assert(function() {
                    return !!allowApproxValue;
                }, "Should not call with BinUnit.Month if not allowing approx value."), 30 * millisecondsInADay;

              case 8:
                return millisecondsInADay;

              case 9:
                return 36e5;

              case 10:
                return 6e4;

              case 11:
                return 1e3;

              default:
                return debug.fF.assertFail("Unexpected time unit " + timeUnit), 1;
            }
        }
        function getOptimalUnit(milliseconds, allowApproxValue) {
            void 0 === allowApproxValue && (allowApproxValue = !1);
            var calcSequence = allowApproxValue ? timeUnitsSequenceAscending : timeUnitsSequenceAscending.filter(function(unit) {
                return 4 !== unit && 6 !== unit;
            });
            debug.fF.assert(function() {
                return calcSequence.length > 0;
            }, "Expect there is at least one unit to check.");
            var upperBoundIndex, lowerBound = getMillisecondDividends(calcSequence[0], allowApproxValue);
            if (milliseconds < lowerBound) return calcSequence[0];
            for (upperBoundIndex = 1; upperBoundIndex < calcSequence.length; upperBoundIndex++) {
                var upperBound = getMillisecondDividends(calcSequence[upperBoundIndex], allowApproxValue);
                if (milliseconds >= lowerBound && milliseconds < upperBound) return calcSequence[upperBoundIndex - 1];
                lowerBound = upperBound;
            }
            return calcSequence[upperBoundIndex - 1];
        }
        function getSizeRangeCompliedSize(rawSize, sizeRange) {
            var rangeMin = sizeRange.min, rangeMax = sizeRange.max;
            if (rawSize < rangeMin) return rangeMin;
            if (rawSize > rangeMax) return rangeMax;
            var step = sizeRange.step;
            if (_.isString(step)) return rawSize;
            var fractionDigits = function(binSizeRange) {
                var step = binSizeRange.step;
                if ("string" != typeof step) {
                    var digits = Math.floor(Math.log(step) / Math.log(.1));
                    return debug.fF.assert(function() {
                        return step < 10;
                    }, "Expect step < 10"), debug.fF.assert(function() {
                        return step * Math.pow(10, digits) == 1;
                    }, "Expect binSizeRange.step is a power of 0.1, such as 0.001"), digits;
                }
            }(sizeRange), stepNumber = step, floatValue = rangeMin + Math.floor((rawSize - rangeMin) / stepNumber) * stepNumber;
            return null != fractionDigits ? parseFloat(floatValue.toFixed(fractionDigits)) : floatValue;
        }
        var core = __webpack_require__(50423), fesm2022_forms = __webpack_require__(17174), groupUtils = __webpack_require__(42233), valueFormatter = __webpack_require__(72489), sqExpr = __webpack_require__(94419), BehaviorSubject = __webpack_require__(35510), Subject = __webpack_require__(30794), fromEvent = __webpack_require__(59787), combineLatest = __webpack_require__(59017), of = __webpack_require__(11547), withLatestFrom = __webpack_require__(23558), takeUntil = __webpack_require__(83317), distinctUntilChanged = __webpack_require__(77526), filter = __webpack_require__(59973), map = __webpack_require__(14172), data_sources_service = __webpack_require__(83008), error_service = __webpack_require__(81213), group_authoring_service = __webpack_require__(28149), lazy_scoped_provider = __webpack_require__(28894), localization_service = __webpack_require__(65181), common = __webpack_require__(77476), localize_directive = __webpack_require__(59968), pbi_form_field_component = __webpack_require__(45074), _c0 = [ "resetToOptimalElement" ];
        function GroupsBinsPaneComponent_ng_container_1_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "pbi-form-field", 3), 
            core["\u0275\u0275element"](2, "label", 4)(3, "input", 5), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275elementStart"](4, "pbi-form-field", 3), core["\u0275\u0275element"](5, "label", 6)(6, "input", 7), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var fieldValues_r5 = ctx.ngIf;
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("value", null == fieldValues_r5.rangeDisplay ? null : fieldValues_r5.rangeDisplay.min), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("value", null == fieldValues_r5.rangeDisplay ? null : fieldValues_r5.rangeDisplay.max);
            }
        }
        var _c1 = function(a0) {
            return {
                rangeDisplay: a0
            };
        };
        function GroupsBinsPaneComponent_ng_container_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, GroupsBinsPaneComponent_ng_container_1_ng_container_1_Template, 7, 2, "ng-container", 1), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pureFunction1"](3, _c1, core["\u0275\u0275pipeBind1"](2, 1, ctx_r0.fieldValueRangHint$)));
            }
        }
        function GroupsBinsPaneComponent_ng_container_2_input_5_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "input", 12), 2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275propertyInterpolate"]("min", ctx_r6.staticBySizeOrByCountInfo.bySize.valueRange.min), 
                core["\u0275\u0275propertyInterpolate"]("max", ctx_r6.staticBySizeOrByCountInfo.bySize.valueRange.max), 
                core["\u0275\u0275propertyInterpolate"]("step", ctx_r6.staticBySizeOrByCountInfo.bySize.valueRange.step), 
                core["\u0275\u0275property"]("formControlName", ctx_r6.formControlNames.binSizeInput);
            }
        }
        function GroupsBinsPaneComponent_ng_container_2_div_6_option_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "option", 17), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var option_r9 = ctx.$implicit;
                core["\u0275\u0275property"]("ngValue", option_r9.unit), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate"](option_r9.displayName);
            }
        }
        function GroupsBinsPaneComponent_ng_container_2_div_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 13), core["\u0275\u0275element"](1, "input", 14), 
            core["\u0275\u0275elementStart"](2, "select", 15), core["\u0275\u0275template"](3, GroupsBinsPaneComponent_ng_container_2_div_6_option_3_Template, 2, 2, "option", 16), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var ctx_r7 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275propertyInterpolate"]("min", ctx_r7.staticBySizeOrByCountInfo.bySize.valueRange.min), 
                core["\u0275\u0275propertyInterpolate"]("max", ctx_r7.staticBySizeOrByCountInfo.bySize.valueRange.max), 
                core["\u0275\u0275propertyInterpolate"]("step", ctx_r7.staticBySizeOrByCountInfo.bySize.valueRange.step), 
                core["\u0275\u0275property"]("formControlName", ctx_r7.formControlNames.binSizeInput), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("formControlName", ctx_r7.formControlNames.binSizeUnitSelection), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r7.staticBySizeOrByCountInfo.bySize.applicableUnits);
            }
        }
        function GroupsBinsPaneComponent_ng_container_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "legend", 8), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementStart"](3, "pbi-form-field", 3), 
            core["\u0275\u0275element"](4, "label", 9), core["\u0275\u0275template"](5, GroupsBinsPaneComponent_ng_container_2_input_5_Template, 1, 4, "input", 10), 
            core["\u0275\u0275template"](6, GroupsBinsPaneComponent_ng_container_2_div_6_Template, 4, 6, "div", 11), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", core["\u0275\u0275pipeBind1"](2, 3, ctx_r1.descriptionHintOptimalBinSize$) ? "BinsDialog_ModeBySize_Description_WithDefault" : "BinsDialog_ModeBySize_Description"), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", !((null == ctx_r1.staticBySizeOrByCountInfo.bySize.applicableUnits ? null : ctx_r1.staticBySizeOrByCountInfo.bySize.applicableUnits.length) > 0)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", (null == ctx_r1.staticBySizeOrByCountInfo.bySize.applicableUnits ? null : ctx_r1.staticBySizeOrByCountInfo.bySize.applicableUnits.length) > 0);
            }
        }
        function GroupsBinsPaneComponent_ng_container_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "legend", 8), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementStart"](3, "pbi-form-field", 3), 
            core["\u0275\u0275element"](4, "label", 18)(5, "input", 19), core["\u0275\u0275elementEnd"](), 
            core["\u0275\u0275elementStart"](6, "pbi-form-field", 3), core["\u0275\u0275element"](7, "label", 20)(8, "input", 21), 
            core["\u0275\u0275pipe"](9, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", core["\u0275\u0275pipeBind1"](2, 6, ctx_r2.descriptionHintOptimalBinCount$) ? "BinsDialog_ModeByCount_Description_WithDefault" : "BinsDialog_ModeByCount_Description"), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275propertyInterpolate"]("min", ctx_r2.staticBySizeOrByCountInfo.byCount.valueRange.min), 
                core["\u0275\u0275propertyInterpolate"]("max", ctx_r2.staticBySizeOrByCountInfo.byCount.valueRange.max), 
                core["\u0275\u0275propertyInterpolate"]("step", ctx_r2.staticBySizeOrByCountInfo.byCount.valueRange.step), 
                core["\u0275\u0275property"]("formControlName", ctx_r2.formControlNames.binsCountInput), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("value", core["\u0275\u0275pipeBind1"](9, 8, ctx_r2.binByCountModeBinSizeHint$));
            }
        }
        function GroupsBinsPaneComponent_button_4_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "button", 22, 23);
        }
        var binCountRange = {
            min: 1,
            max: 1e9,
            step: 1
        }, groups_bins_pane_component_binSizeRangeForDateTime = {
            min: 1,
            max: 1e6,
            step: 1
        }, defaultBinSizeUnitForNumber = {
            size: 10,
            unit: 0
        }, defaultBinSizeUnitForDateTime = {
            size: 1,
            unit: 9
        }, GroupsBinsPaneComponent = function() {
            function GroupsBinsPaneComponent(rootFormGroup, dataSourcesService, errorService, groupAuthoringService, lazyScopedProviderModern, localizationService) {
                this.rootFormGroup = rootFormGroup, this.dataSourcesService = dataSourcesService, 
                this.errorService = errorService, this.groupAuthoringService = groupAuthoringService, 
                this.lazyScopedProviderModern = lazyScopedProviderModern, this.localizationService = localizationService, 
                this.formControlNames = {
                    binsCountInput: "binsCountInput",
                    binSizeInput: "binSizeInput",
                    binSizeUnitSelection: "binSizeUnitSelection"
                }, this.binMode$ = new BehaviorSubject.X(void 0), this.fieldValueRange$ = new BehaviorSubject.X(void 0), 
                this.optimalBinCount$ = new BehaviorSubject.X(void 0), this.optimalBinSizeUnit$ = new BehaviorSubject.X(void 0), 
                this.descriptionHintOptimalBinCountInternal$ = new BehaviorSubject.X(void 0), this.descriptionHintOptimalBinSizeInternal$ = new BehaviorSubject.X(void 0), 
                this.binByCountModeBinSizeHintInternal$ = new BehaviorSubject.X(void 0), this.showResetToOptimalInternal$ = new BehaviorSubject.X(void 0), 
                this.loadingOptimalValuesDone$ = new BehaviorSubject.X(!1), this.destroy$ = new Subject.xQ;
            }
            return Object.defineProperty(GroupsBinsPaneComponent.prototype, "resetToOptimalElementRef", {
                set: function(elementRef) {
                    var _this = this;
                    elementRef && (this.resetToOptimalElement = elementRef.nativeElement, (0, fromEvent.R)(this.resetToOptimalElement, "click").pipe((0, 
                    withLatestFrom.M)(this.binMode$, this.optimalBinCount$, this.optimalBinSizeUnit$), (0, 
                    takeUntil.R)(this.destroy$)).subscribe(function(_a) {
                        var binMode = _a[1], optimalBinCount = _a[2], optimalBinSizeUnit = _a[3];
                        1 === binMode && null != optimalBinCount && (_this.descriptionHintOptimalBinCountInternal$.next(!0), 
                        _this.binsCountInput.setValue(optimalBinCount)), 0 === binMode && null != optimalBinSizeUnit && (_this.descriptionHintOptimalBinSizeInternal$.next(!0), 
                        _this.setBinSizeControlValues(optimalBinSizeUnit));
                    }));
                },
                enumerable: !1,
                configurable: !0
            }), GroupsBinsPaneComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var initialBinsCount, initialBinSizeUnit, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assert(function() {
                                return !!_this.binningColumnInfo;
                            }, "Expect this.groupColumnInfo is provided."), this.setStaticBySizeOrByCountInfo(), 
                            this.initializeFormGroupAndControls(), this.descriptionHintOptimalBinCount$ = this.descriptionHintOptimalBinCountInternal$.pipe((0, 
                            distinctUntilChanged.x)(), (0, takeUntil.R)(this.destroy$)), this.descriptionHintOptimalBinSize$ = this.descriptionHintOptimalBinSizeInternal$.pipe((0, 
                            distinctUntilChanged.x)(), (0, takeUntil.R)(this.destroy$)), this.showResetToOptimal$ = this.showResetToOptimalInternal$.pipe((0, 
                            distinctUntilChanged.x)(), (0, takeUntil.R)(this.destroy$)), this.binByCountModeBinSizeHint$ = this.binByCountModeBinSizeHintInternal$.pipe((0, 
                            distinctUntilChanged.x)(), (0, takeUntil.R)(this.destroy$)), this.binningColumnInfo.supportBinByCountMode && ((0, 
                            combineLatest.aj)([ this.binsCountInput.valueChanges, this.fieldValueRange$ ]).pipe((0, 
                            filter.h)(function(_a) {
                                return !!_a[1];
                            }), (0, map.U)(function(_a) {
                                return function(binCount, binCountValueRange, fieldValueRange, groupDataType, localizationService) {
                                    var _a, _b;
                                    if (null == binCount || binCount < binCountValueRange.min || binCount > binCountValueRange.max || doesValueFailIntegerType(binCountValueRange, binCount)) return "";
                                    if (!fieldValueRange) return "";
                                    var binSizeUnit = function(sourceColumnValueMin, sourceColumnValueMax, binCount, groupDataType) {
                                        if (!(null == binCount || binCount <= 0 || null == sourceColumnValueMin || null == sourceColumnValueMax)) switch (groupDataType) {
                                          case 1:
                                            return {
                                                size: (sourceColumnValueMax - sourceColumnValueMin) / binCount,
                                                unit: 0
                                            };

                                          case 2:
                                            var binSizeMillisecs = (sourceColumnValueMax.getTime() - sourceColumnValueMin.getTime()) / binCount, optimalDisplayUnit = getOptimalUnit(binSizeMillisecs, !1);
                                            return {
                                                size: binSizeMillisecs / getMillisecondDividends(optimalDisplayUnit, !1),
                                                unit: optimalDisplayUnit
                                            };

                                          default:
                                            debug.fF.assertFail("Unexpected group data type: " + groupDataType);
                                        }
                                    }(null === (_a = fieldValueRange.min) || void 0 === _a ? void 0 : _a.value, null === (_b = fieldValueRange.max) || void 0 === _b ? void 0 : _b.value, binCount, groupDataType), sizeWithFormat = binSizeUnit ? {
                                        value: binSizeUnit.size,
                                        formatString: "G"
                                    } : void 0, sizeString = getValueHint(sizeWithFormat);
                                    if (2 === groupDataType && null != (null == sizeWithFormat ? void 0 : sizeWithFormat.value)) {
                                        var timeUnitString = function(unit, localizationService) {
                                            switch (unit) {
                                              case 4:
                                                return localizationService.get("TimeUnit_Years");

                                              case 6:
                                                return localizationService.get("TimeUnit_Months");

                                              case 8:
                                                return localizationService.get("TimeUnit_Days");

                                              case 9:
                                                return localizationService.get("TimeUnit_Hours");

                                              case 10:
                                                return localizationService.get("TimeUnit_Minutes");

                                              case 11:
                                                return localizationService.get("TimeUnit_Seconds");

                                              default:
                                                debug.fF.assertFail("Unexpected BinUnit " + unit);
                                            }
                                        }(binSizeUnit.unit, localizationService);
                                        return sizeString + " " + timeUnitString;
                                    }
                                    return sizeString;
                                }(_a[0], _this.staticBySizeOrByCountInfo.byCount.valueRange, _a[1], _this.binningColumnInfo.groupDataType, _this.localizationService);
                            }), (0, distinctUntilChanged.x)(), (0, takeUntil.R)(this.destroy$)).subscribe(function(value) {
                                _this.binByCountModeBinSizeHintInternal$.next(value);
                            }), null != (initialBinsCount = this.binningColumnInfo.binCount) && this.binsCountInput.setValue(initialBinsCount)), 
                            null != (null == (initialBinSizeUnit = this.binningColumnInfo.binSizeUnit) ? void 0 : initialBinSizeUnit.size) && this.setBinSizeControlValues(initialBinSizeUnit), 
                            (0, combineLatest.aj)([ this.binMode$, this.optimalBinCount$, this.loadingOptimalValuesDone$ ]).pipe((0, 
                            filter.h)(function(_a) {
                                return 1 === _a[0];
                            }), (0, takeUntil.R)(this.destroy$)).subscribe(function(_a) {
                                var optimalBinCount = _a[1], loadingOptimalDone = _a[2];
                                debug.fF.assertValue(_this.binsCountInput, "Expect this.binsCountInput to be defined when binMode is binByCount"), 
                                _this.showResetToOptimalInternal$.next(null != optimalBinCount), null == optimalBinCount || null != _this.binsCountInput.value && "VALID" === _this.binsCountInput.status || (_this.binsCountInput.setValue(optimalBinCount), 
                                _this.descriptionHintOptimalBinCountInternal$.next(!0)), !loadingOptimalDone || null != optimalBinCount || null != _this.binsCountInput.value && "VALID" === _this.binsCountInput.status || _this.binsCountInput.setValue(10);
                            }), (0, combineLatest.aj)([ this.binMode$, this.optimalBinSizeUnit$, this.loadingOptimalValuesDone$ ]).pipe((0, 
                            filter.h)(function(_a) {
                                return 0 === _a[0];
                            }), (0, takeUntil.R)(this.destroy$)).subscribe(function(_a) {
                                var optimalBinSizeUnit = _a[1], loadingOptimalDone = _a[2];
                                _this.showResetToOptimalInternal$.next(null != optimalBinSizeUnit), null == optimalBinSizeUnit || null != _this.binSizeInput.value && "VALID" === _this.binSizeInput.status || _this.setBinSizeControlValues(optimalBinSizeUnit), 
                                !loadingOptimalDone || null != optimalBinSizeUnit || null != _this.binSizeInput.value && "VALID" === _this.binSizeInput.status || (2 === _this.binningColumnInfo.groupDataType ? _this.setBinSizeControlValues(defaultBinSizeUnitForDateTime) : 1 === _this.binningColumnInfo.groupDataType && _this.setBinSizeControlValues(defaultBinSizeUnitForNumber));
                            }), this.binningColumnInfo.supportBinByCountMode ? (this.fieldValueRangHint$ = this.fieldValueRange$.pipe((0, 
                            filter.h)(function(valueRange) {
                                return !!valueRange;
                            }), (0, map.U)(function(valueRange) {
                                return {
                                    min: getValueHint(valueRange.min),
                                    max: getValueHint(valueRange.max)
                                };
                            }), (0, takeUntil.R)(this.destroy$)), [ 4, this.loadAggregatesAndOptimals() ]) : [ 3, 2 ];

                          case 1:
                            return _a.sent(), this.loadingOptimalValuesDone$.next(!0), [ 3, 3 ];

                          case 2:
                            this.loadingOptimalValuesDone$.next(!0), this.fieldValueRangHint$ = (0, of.of)(void 0), 
                            _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, GroupsBinsPaneComponent.prototype.ngOnChanges = function(changes) {
                changes.hasOwnProperty("binMode") && this.binMode$.next(changes.binMode.currentValue);
            }, GroupsBinsPaneComponent.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete(), this.binsCountInput && this.binsFormGroup.removeControl(this.formControlNames.binsCountInput), 
                this.binsFormGroup.removeControl(this.formControlNames.binSizeInput), this.binSizeUnitSelection && this.binsFormGroup.removeControl(this.formControlNames.binSizeUnitSelection);
            }, GroupsBinsPaneComponent.prototype.getDefinition = function() {
                var _a, binExpr, groupedColumn = (0, sqExpr.Oh)((0, sqExpr.nw)(this.binningColumnInfo.schemaName, this.binningColumnInfo.entityName), this.binningColumnInfo.sourcePropertyName);
                switch (this.binMode) {
                  case 0:
                    binExpr = (0, sqExpr.GW)(groupedColumn, this.binSizeInput.value, (0, groupUtils.qW)(null === (_a = this.binSizeUnitSelection) || void 0 === _a ? void 0 : _a.value));
                    break;

                  case 1:
                    binExpr = (0, sqExpr.fP)((0, sqExpr.h5)(groupedColumn, this.binsCountInput.value), "Min");
                    break;

                  default:
                    debug.fF.assertFail("Unhandled bin mode " + this.binMode);
                }
                return {
                    groupedColumns: [ groupedColumn ],
                    binItem: binExpr
                };
            }, GroupsBinsPaneComponent.prototype.logTelemetryOnCommit = function() {
                var _a, _b, _c, action = this.binningColumnInfo.isNew ? "Create" : "Update";
                switch (this.binMode) {
                  case 0:
                    return void this.groupAuthoringService.telemetry.logBinBySizeActionTelemetry(action, "Dialog", this.binningColumnInfo.valueType, this.binSizeInput.value, null === (_a = this.binSizeUnitSelection) || void 0 === _a ? void 0 : _a.value);

                  case 1:
                    return void this.groupAuthoringService.telemetry.logBinByCountActionTelemetry(action, "Dialog", this.binningColumnInfo.valueType, this.binsCountInput.value, null != (null === (_b = this.fieldValueRange$.value) || void 0 === _b ? void 0 : _b.min) ? getValueHint(this.fieldValueRange$.value.min) : void 0, null != (null === (_c = this.fieldValueRange$.value) || void 0 === _c ? void 0 : _c.max) ? getValueHint(this.fieldValueRange$.value.max) : void 0);

                  default:
                    debug.fF.assertFail("Unhandled bin mode " + this.binMode);
                }
            }, GroupsBinsPaneComponent.prototype.setStaticBySizeOrByCountInfo = function() {
                var staticBySizeInfo;
                switch (this.binningColumnInfo.groupDataType) {
                  case 1:
                    staticBySizeInfo = {
                        valueRange: getBinSizeRangeForNumbers(this.binningColumnInfo.valueType),
                        applicableUnits: []
                    };
                    break;

                  case 2:
                    staticBySizeInfo = {
                        valueRange: groups_bins_pane_component_binSizeRangeForDateTime,
                        applicableUnits: [ {
                            unit: 4,
                            displayName: this.localizationService.get("TimeUnit_Years")
                        }, {
                            unit: 6,
                            displayName: this.localizationService.get("TimeUnit_Months")
                        }, {
                            unit: 8,
                            displayName: this.localizationService.get("TimeUnit_Days")
                        }, {
                            unit: 9,
                            displayName: this.localizationService.get("TimeUnit_Hours")
                        }, {
                            unit: 10,
                            displayName: this.localizationService.get("TimeUnit_Minutes")
                        }, {
                            unit: 11,
                            displayName: this.localizationService.get("TimeUnit_Seconds")
                        } ]
                    };
                    break;

                  default:
                    debug.fF.assertFail("Expect the binning column GroupDataType to be Number/DateTime");
                }
                this.staticBySizeOrByCountInfo = {
                    bySize: staticBySizeInfo
                }, this.binningColumnInfo.supportBinByCountMode && (this.staticBySizeOrByCountInfo.byCount = {
                    valueRange: binCountRange
                });
            }, GroupsBinsPaneComponent.prototype.initializeFormGroupAndControls = function() {
                var _this = this;
                if (debug.fF.assert(function() {
                    var _a;
                    return !!(null === (_a = _this.staticBySizeOrByCountInfo) || void 0 === _a ? void 0 : _a.bySize);
                }, "Expect staticBySizeInfo to be defined already"), debug.fF.assert(function() {
                    var _a;
                    return !_this.binningColumnInfo.supportBinByCountMode || !!(null === (_a = _this.staticBySizeOrByCountInfo) || void 0 === _a ? void 0 : _a.byCount);
                }, "Expect staticByCountInfo to be defined already if it supports binByCount mode"), 
                this.binsFormGroup = this.rootFormGroup.control, debug.fF.assert(function() {
                    return _this.binningColumnInfo.supportBinByCountMode || 0 === _this.binMode;
                }, "When supportBinByCountMode is false, expect binMode to be binBySize"), this.binningColumnInfo.supportBinByCountMode) {
                    var countValueRange = this.staticBySizeOrByCountInfo.byCount.valueRange;
                    this.binsCountInput = new fesm2022_forms.p4(void 0, [ fesm2022_forms.kI.required, fesm2022_forms.kI.min(countValueRange.min), fesm2022_forms.kI.max(countValueRange.max), integerTypeValueValidator(this.staticBySizeOrByCountInfo.byCount.valueRange) ]), 
                    this.binsFormGroup.addControl(this.formControlNames.binsCountInput, this.binsCountInput);
                }
                var sizeValueRange = this.staticBySizeOrByCountInfo.bySize.valueRange;
                this.binSizeInput = new fesm2022_forms.p4(void 0, [ fesm2022_forms.kI.required, fesm2022_forms.kI.min(sizeValueRange.min), fesm2022_forms.kI.max(sizeValueRange.max), integerTypeValueValidator(this.staticBySizeOrByCountInfo.bySize.valueRange) ]), 
                this.binsFormGroup.addControl(this.formControlNames.binSizeInput, this.binSizeInput), 
                _.isEmpty(this.staticBySizeOrByCountInfo.bySize.applicableUnits) || (this.binSizeUnitSelection = new fesm2022_forms.p4, 
                this.binsFormGroup.addControl(this.formControlNames.binSizeUnitSelection, this.binSizeUnitSelection)), 
                this.binMode$.pipe().subscribe(function(mode) {
                    var _a, _b, _c;
                    1 === mode && (_this.binsCountInput.enable(), _this.binSizeInput.disable(), null === (_a = _this.binSizeUnitSelection) || void 0 === _a || _a.disable()), 
                    0 === mode && (_this.binSizeInput.enable(), null === (_b = _this.binSizeUnitSelection) || void 0 === _b || _b.enable(), 
                    null === (_c = _this.binsCountInput) || void 0 === _c || _c.disable());
                });
            }, GroupsBinsPaneComponent.prototype.loadAggregatesAndOptimals = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var baseColumnExpr, dataSources, aggregates, error_1, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            debug.fF.assert(function() {
                                return !!_this.binningColumnInfo;
                            }, "Expect this.groupColumnInfo already set."), baseColumnExpr = (0, sqExpr.Oh)((0, 
                            sqExpr.nw)(this.binningColumnInfo.schemaName, this.binningColumnInfo.entityName), this.binningColumnInfo.sourcePropertyName), 
                            (0, groupUtils.MF)(this.dataSourcesService), dataSources = this.dataSourcesService.get(), 
                            _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 4, , 5 ]), [ 4, this.lazyScopedProviderModern.get("groupQueryService") ];

                          case 2:
                            return [ 4, _a.sent().getAggregatesForColumn(baseColumnExpr, dataSources) ];

                          case 3:
                            return aggregates = _a.sent(), this.fieldValueRange$.next({
                                min: null == aggregates ? void 0 : aggregates.min,
                                max: null == aggregates ? void 0 : aggregates.max
                            }), this.setOptimalValues(aggregates), [ 3, 5 ];

                          case 4:
                            return error_1 = _a.sent(), (0, groupUtils.iA)(this.errorService, error_1, this.localizationService), 
                            [ 3, 5 ];

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, GroupsBinsPaneComponent.prototype.setOptimalValues = function(aggregates) {
                var _a, _b, _this = this;
                if (debug.fF.assert(function() {
                    return !!_this.binningColumnInfo;
                }, "Expect this.groupColumnInfo already set."), aggregates) {
                    var optimalBinCount = function(count) {
                        if (!(null == count || count < 0)) {
                            if (0 === count) return 1;
                            var binCount = Math.ceil(2 * Math.pow(count, 1 / 3));
                            return binCount > count ? count : binCount;
                        }
                    }(aggregates.count);
                    if (null != optimalBinCount && this.optimalBinCount$.next(optimalBinCount), optimalBinCount) {
                        var binSizeRange = function(groupDataType, valueType) {
                            switch (groupDataType) {
                              case 1:
                                return getBinSizeRangeForNumbers(valueType);

                              case 2:
                                return binSizeRangeForDateTime;

                              default:
                                return void debug.fF.assertFail("Unexpected groupDataType: " + groupDataType);
                            }
                        }(this.binningColumnInfo.groupDataType, this.binningColumnInfo.valueType), optimalBinSizeUnit = function(sourceColumnValueMin, sourceColumnValueMax, binCount, binSizeRange, groupDataType) {
                            if (null != sourceColumnValueMin && null != sourceColumnValueMax && binCount) switch (groupDataType) {
                              case 1:
                                return {
                                    size: getSizeRangeCompliedSize((sourceColumnValueMax - sourceColumnValueMin) / binCount, binSizeRange),
                                    unit: 0
                                };

                              case 2:
                                return sizeRange = binSizeRange, {
                                    size: getSizeRangeCompliedSize((milliSeconds = (sourceColumnValueMax.getTime() - sourceColumnValueMin.getTime()) / binCount) / getMillisecondDividends(timeUnit = getOptimalUnit(milliSeconds, !0), !0), sizeRange),
                                    unit: timeUnit
                                };

                              default:
                                return void debug.fF.assertFail("Unexpected group data type: " + groupDataType);
                            }
                            var milliSeconds, sizeRange, timeUnit;
                        }(null === (_a = aggregates.min) || void 0 === _a ? void 0 : _a.value, null === (_b = aggregates.max) || void 0 === _b ? void 0 : _b.value, optimalBinCount, binSizeRange, this.binningColumnInfo.groupDataType);
                        optimalBinSizeUnit && this.optimalBinSizeUnit$.next(optimalBinSizeUnit);
                    }
                }
            }, GroupsBinsPaneComponent.prototype.setBinSizeControlValues = function(baseOnValue) {
                if (this.binSizeInput.setValue(baseOnValue.size), this.binSizeUnitSelection) {
                    var displayUnit = _.find(this.staticBySizeOrByCountInfo.bySize.applicableUnits, function(option) {
                        return option.unit === baseOnValue.unit;
                    });
                    this.binSizeUnitSelection.setValue(null == displayUnit ? void 0 : displayUnit.unit);
                }
            }, GroupsBinsPaneComponent.\u0275fac = function(t) {
                return new (t || GroupsBinsPaneComponent)(core["\u0275\u0275directiveInject"](fesm2022_forms.sg), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](error_service.T), core["\u0275\u0275directiveInject"](group_authoring_service.RD), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](localization_service.o));
            }, GroupsBinsPaneComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GroupsBinsPaneComponent,
                selectors: [ [ "groups-bins-pane" ] ],
                viewQuery: function(rf, ctx) {
                    var _t;
                    1 & rf && core["\u0275\u0275viewQuery"](_c0, 5, core.ElementRef), 2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.resetToOptimalElementRef = _t.first);
                },
                inputs: {
                    binMode: "binMode",
                    binningColumnInfo: "binningColumnInfo"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([]), core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 6,
                vars: 7,
                consts: [ [ 1, "twoColumnSection", 3, "formGroup" ], [ 4, "ngIf" ], [ "class", "resetToOptimalElement pbi-fluent-button", "localize", "Reset_To_Default", 4, "ngIf" ], [ 1, "cell" ], [ "pbiLabel", "", "for", "min-range-display", "localize", "GroupsDialog_ColumnMinValue" ], [ "id", "min-range-display", "pbiInput", "", "readonly", "", "spellcheck", "false", 3, "value" ], [ "pbiLabel", "", "for", "max-range-display", "localize", "GroupsDialog_ColumnMaxValue" ], [ "id", "max-range-display", "pbiInput", "", "readonly", "", "spellcheck", "false", 3, "value" ], [ 1, "overallDescription", 3, "localize" ], [ "pbiLabel", "", "for", "value-range-input-mode-zero", "localize", "GroupsDialog_BinSize" ], [ "pbiInput", "", "id", "value-range-input-mode-zero", "type", "number", "required", "", "spellcheck", "false", 3, "formControlName", "min", "max", "step", 4, "ngIf" ], [ "tabindex", "-1", "pbiInput", "", "class", "compositeControl", 4, "ngIf" ], [ "pbiInput", "", "id", "value-range-input-mode-zero", "type", "number", "required", "", "spellcheck", "false", 3, "formControlName", "min", "max", "step" ], [ "tabindex", "-1", "pbiInput", "", 1, "compositeControl" ], [ "type", "number", "required", "", "spellcheck", "false", 3, "formControlName", "min", "max", "step" ], [ 3, "formControlName" ], [ 3, "ngValue", 4, "ngFor", "ngForOf" ], [ 3, "ngValue" ], [ "pbiLabel", "", "for", "value-range-input-mode-one", "localize", "GroupsDialog_BinCount" ], [ "pbiInput", "", "id", "value-range-input-mode-one", "type", "number", "required", "", "spellcheck", "false", 3, "formControlName", "min", "max", "step" ], [ "pbiLabel", "", "for", "size-hint-input", "localize", "GroupsDialog_BinSize" ], [ "pbiInput", "", "id", "size-hint-input", "readonly", "", "spellcheck", "false", 3, "value" ], [ "localize", "Reset_To_Default", 1, "resetToOptimalElement", "pbi-fluent-button" ], [ "resetToOptimalElement", "" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "form", 0), core["\u0275\u0275template"](1, GroupsBinsPaneComponent_ng_container_1_Template, 3, 5, "ng-container", 1), 
                    core["\u0275\u0275template"](2, GroupsBinsPaneComponent_ng_container_2_Template, 7, 5, "ng-container", 1), 
                    core["\u0275\u0275template"](3, GroupsBinsPaneComponent_ng_container_3_Template, 10, 10, "ng-container", 1), 
                    core["\u0275\u0275template"](4, GroupsBinsPaneComponent_button_4_Template, 2, 0, "button", 2), 
                    core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275property"]("formGroup", ctx.binsFormGroup), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.binningColumnInfo.supportBinByCountMode), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", 0 === ctx.binMode), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", 1 === ctx.binMode), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](5, 5, ctx.showResetToOptimal$)));
                },
                dependencies: [ common.NgForOf, common.NgIf, localize_directive.X, pbi_form_field_component.bP, pbi_form_field_component.ug, pbi_form_field_component.nm, fesm2022_forms._Y, fesm2022_forms.YN, fesm2022_forms.Kr, fesm2022_forms.Fj, fesm2022_forms.wV, fesm2022_forms.EJ, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.Q7, fesm2022_forms.qQ, fesm2022_forms.Fd, fesm2022_forms.sg, fesm2022_forms.u, common.AsyncPipe ],
                styles: [ '.groupsDialogContent[_ngcontent-%COMP%]{width:720px;height:480px;display:flex;flex-direction:column}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection{display:grid;grid-template-columns:1fr 1fr;grid-gap:12px 12px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell{display:flex}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell textarea, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   select[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell select{padding:4px 8px;border-color:var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input:focus, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell textarea:focus, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell select:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input{vertical-align:middle;margin:0;padding:4px 8px;border-color:var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[readonly][_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input[readonly]{background-color:var(--colorNeutralBackgroundDisabled);color:var(--colorNeutralForegroundDisabled);pointer-events:none}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::selection, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input::selection{background:var(--colorNeutralBackgroundInverted);color:var(--colorNeutralForegroundInverted)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell label, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   label.cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection label.cell{font-size:var(--sm-font-size, 12px)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell label, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   label.cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection label.cell{font-weight:var(--font-weight-normal, 500)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-form-field.cell[_ngcontent-%COMP%]     .controls, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-form-field.cell   .controls{flex:1;display:flex}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-form-field.cell[_ngcontent-%COMP%]     .controls [pbiInput], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-form-field.cell   .controls [pbiInput]{flex:1}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown{width:100%}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button{border:1px solid var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button[disabled], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button[disabled]{background-color:var(--colorNeutralBackgroundDisabled)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button .pbi-dropdown-trigger-container, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button .pbi-dropdown-trigger-container{margin:0;padding:4px 8px}.groupsDialogContent[_ngcontent-%COMP%]   .topSection[_ngcontent-%COMP%]{margin-bottom:12px}.groupsDialogContent[_ngcontent-%COMP%]   groups-list-pane[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]   groups-bins-pan[_ngcontent-%COMP%]{flex:1}', '.twoColumnSection[_ngcontent-%COMP%]   .overallDescription[_ngcontent-%COMP%]{grid-column-start:1;grid-column-end:3;margin-top:20px}.twoColumnSection[_ngcontent-%COMP%]   .resetToOptimalElement[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);margin-top:-4px;grid-column-start:1;width:fit-content}.twoColumnSection[_ngcontent-%COMP%]   .compositeControl[_ngcontent-%COMP%]{flex:1;display:flex}.twoColumnSection[_ngcontent-%COMP%]   .compositeControl[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{flex:1}.twoColumnSection[_ngcontent-%COMP%]   .compositeControl[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{width:fit-content}html:not([dir="rtl"])[_nghost-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .compositeControl[_ngcontent-%COMP%]   select[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .compositeControl[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{margin-left:8px}html[dir="rtl"][_nghost-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .compositeControl[_ngcontent-%COMP%]   select[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .compositeControl[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{margin-right:8px}' ],
                changeDetection: 0
            }), GroupsBinsPaneComponent;
        }();
        function getValueHint(valueWithFormat) {
            return valueWithFormat ? (0, valueFormatter.WU)(valueWithFormat.value, valueWithFormat.formatString) : (0, 
            valueFormatter.WU)(null);
        }
        function integerTypeValueValidator(rangeWithStep) {
            return function(control) {
                return doesValueFailIntegerType(rangeWithStep, control.value) ? {
                    valueNotInteger: !0
                } : null;
            };
        }
        function doesValueFailIntegerType(rangeWithStep, value) {
            var step = rangeWithStep.step;
            return _.isNumber(step) && _.isInteger(step) && !_.isInteger(value);
        }
        var groups_dialog_identifier_component = __webpack_require__(14815), scrolling = __webpack_require__(21661), TreeSelectionManager = function() {
            function TreeSelectionManager(getItems, onSelectionChanged) {
                debug.fF.assertValue(getItems, "getItems"), this.selectedItems = [], this.getItems = getItems, 
                this.onSelectionChanged = null != onSelectionChanged ? onSelectionChanged : _.noop;
            }
            return Object.defineProperty(TreeSelectionManager.prototype, "lastSelected", {
                get: function() {
                    return _.last(this.selectedItems);
                },
                enumerable: !1,
                configurable: !0
            }), TreeSelectionManager.prototype.getSelectedItems = function() {
                return (0, tslib_es6.__spreadArray)([], this.selectedItems || [], !0);
            }, TreeSelectionManager.prototype.select = function(item) {
                this.selectInternal(item) && this.onSelectionChanged(this.selectedItems);
            }, TreeSelectionManager.prototype.selectRange = function(items) {
                for (var updated = !1, _i = 0, items_1 = items; _i < items_1.length; _i++) updated = this.selectInternal(items_1[_i]) || updated;
                updated && this.onSelectionChanged(this.selectedItems);
            }, TreeSelectionManager.prototype.selectAll = function() {
                this.selectRange(this.getItems());
            }, TreeSelectionManager.prototype.toggle = function(item) {
                item.isSelected ? (item.isSelected = !1, this.selectedItems.splice(this.selectedItems.indexOf(item), 1)) : (item.isSelected = !0, 
                this.selectedItems.push(item)), this.onSelectionChanged(this.selectedItems);
            }, TreeSelectionManager.prototype.clear = function() {
                for (var hasSelectionBefore = !_.isEmpty(this.selectedItems), _i = 0, _a = this.selectedItems; _i < _a.length; _i++) _a[_i].isSelected = !1;
                this.selectedItems.splice(0), hasSelectionBefore && this.onSelectionChanged([]);
            }, TreeSelectionManager.prototype.selectInternal = function(item) {
                return !item.isSelected && (item.isSelected = !0, this.selectedItems.push(item), 
                !0);
            }, TreeSelectionManager;
        }(), VerticalScrollHelper = function(_super) {
            function VerticalScrollHelper() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(VerticalScrollHelper, _super), Object.defineProperty(VerticalScrollHelper.prototype, "position", {
                get: function() {
                    return this.getContainer().scrollTop();
                },
                set: function(value) {
                    var container = this.getContainer();
                    container.scrollTop() !== value && container.scrollTop(value);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(VerticalScrollHelper.prototype, "max", {
                get: function() {
                    var container = this.getContainer()[0];
                    return container ? container.scrollHeight : void 0;
                },
                enumerable: !1,
                configurable: !0
            }), VerticalScrollHelper.prototype.getNewIndexOnKeyDown = function(selectedIndex, maxIndex, e) {
                switch (e.keyCode) {
                  case $.ui.keyCode.UP:
                    return e.scrollHandled = !0, Math.min(Math.max(selectedIndex - 1, 0), maxIndex);

                  case $.ui.keyCode.DOWN:
                    return Math.min(selectedIndex + 1, maxIndex);
                }
            }, VerticalScrollHelper.prototype.getRange = function(element, includeBorder) {
                void 0 === includeBorder && (includeBorder = !1);
                var offset = element.offset();
                if (offset) {
                    var height = includeBorder ? element.outerHeight() : element.innerHeight();
                    return {
                        min: offset.top,
                        max: offset.top + height,
                        size: height
                    };
                }
                return null;
            }, VerticalScrollHelper.prototype.getDefaultOverscroll = function() {
                return 0;
            }, VerticalScrollHelper;
        }(function() {
            function BaseScrollHelper(containerSelector, itemsSelector, includeDescendants) {
                void 0 === includeDescendants && (includeDescendants = !0), debug.fF.assertValue(containerSelector, "containerSelector"), 
                debug.fF.assertValue(itemsSelector, "itemsSelector"), this.containerSelector = containerSelector, 
                this.itemsSelector = itemsSelector, this.includeDescendants = includeDescendants;
            }
            return Object.defineProperty(BaseScrollHelper.prototype, "position", {
                get: function() {},
                set: function(_value) {},
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(BaseScrollHelper.prototype, "max", {
                get: function() {},
                enumerable: !1,
                configurable: !0
            }), BaseScrollHelper.prototype.scrollItemIntoView = function(itemIndex, overScrollBy, lastOverScrollBy) {
                var container = this.getContainer(), containerRange = this.getRange(container), items = this.getItems(), item = items[itemIndex];
                if (item) {
                    var isFirst = 0 === itemIndex, isLast = itemIndex === items.length - 1, itemRange = this.getRange($(item), !0);
                    if (isFirst ? overScrollBy = 0 : isLast ? overScrollBy = lastOverScrollBy || 0 : null == overScrollBy && (overScrollBy = this.getDefaultOverscroll()), 
                    containerRange && itemRange) {
                        var delta = this.calculatePositionDelta(containerRange, itemRange, overScrollBy);
                        this.position = this.position + delta;
                    }
                }
            }, BaseScrollHelper.prototype.getPageDownItemIndex = function(itemIndex) {
                var containerRange = this.getRange(this.getContainer());
                if (containerRange) {
                    var items = this.getItems();
                    if (0 === items.length) return -1;
                    for (var pageSize = 0, i = itemIndex; i < items.length - 1; i++) if ((pageSize += this.getRange(items.eq(i)).size) > containerRange.size) return i;
                    return items.length - 1;
                }
                return -1;
            }, BaseScrollHelper.prototype.getPageUpItemIndex = function(itemIndex) {
                var containerRange = this.getRange(this.getContainer());
                if (containerRange) {
                    var items = this.getItems();
                    if (0 === items.length) return -1;
                    for (var pageSize = 0, i = itemIndex; i > 0; i--) if ((pageSize += this.getRange(items.eq(i)).size) > containerRange.size) return i;
                    return 0;
                }
                return -1;
            }, BaseScrollHelper.prototype.retainPosition = function(action) {
                var savedPosition = this.position;
                try {
                    action();
                } finally {
                    this.position = savedPosition;
                }
            }, BaseScrollHelper.prototype.handleKeyDown = function(selectedIndex, e, changeSelectedIndex) {
                var keyHandled = !0, newIndex = selectedIndex, maxIndex = this.getItems().length - 1;
                switch (e.keyCode) {
                  case $.ui.keyCode.PAGE_UP:
                    var pageUpIndex = this.getPageUpItemIndex(selectedIndex);
                    newIndex = Math.max(pageUpIndex, 0);
                    break;

                  case $.ui.keyCode.PAGE_DOWN:
                    var pageDownIndex = this.getPageDownItemIndex(selectedIndex);
                    newIndex = Math.min(pageDownIndex, maxIndex);
                    break;

                  case $.ui.keyCode.END:
                    newIndex = maxIndex;
                    break;

                  case $.ui.keyCode.HOME:
                    newIndex = 0;
                    break;

                  default:
                    keyHandled = void 0 !== (newIndex = this.getNewIndexOnKeyDown(selectedIndex, maxIndex, e));
                }
                return void 0 !== newIndex && newIndex !== selectedIndex && (changeSelectedIndex(newIndex), 
                this.scrollItemIntoView(newIndex)), keyHandled;
            }, BaseScrollHelper.prototype.onScroll = function(scrollHandler) {
                var _this = this;
                this.getContainer().scroll(function() {
                    scrollHandler(_this.position / _this.max);
                });
            }, BaseScrollHelper.prototype.getNewIndexOnKeyDown = function(_selectedIndex, _maxIndex, _e) {}, 
            BaseScrollHelper.prototype.getRange = function(_element, _includeBorder) {
                void 0 === _includeBorder && (_includeBorder = !1);
            }, BaseScrollHelper.prototype.getDefaultOverscroll = function() {}, BaseScrollHelper.prototype.getContainer = function() {
                return $(this.containerSelector);
            }, BaseScrollHelper.prototype.getItems = function() {
                return this.retrieveItems();
            }, BaseScrollHelper.prototype.retrieveItems = function() {
                return this.includeDescendants ? this.getContainer().find(this.itemsSelector) : this.getContainer().children(this.itemsSelector);
            }, BaseScrollHelper.prototype.calculatePositionDelta = function(containerRange, itemRange, overScrollBy) {
                return itemRange.min < containerRange.min ? -(containerRange.min - itemRange.min + overScrollBy) : itemRange.max > containerRange.max ? itemRange.max - containerRange.max + overScrollBy : 0;
            }, BaseScrollHelper;
        }()), browserUtils = __webpack_require__(59107), TreeHelper = function() {
            function TreeHelper(getVisibleNodes, containerSelector, itemSelector, allowMultiSelect, onSelectionChanged, onFocusedItemChanged, customScroll) {
                void 0 === allowMultiSelect && (allowMultiSelect = !0), this._hasFocus = !1, this.selection = function(getItems, onSelectionChanged) {
                    return new TreeSelectionManager(getItems, onSelectionChanged);
                }(getVisibleNodes, onSelectionChanged), this.scrollHelper = null != customScroll ? customScroll : new VerticalScrollHelper(containerSelector, itemSelector, !0), 
                this.getVisibleNodes = getVisibleNodes, this.allowMultiSelect = allowMultiSelect, 
                this.onFocusedItemChanged = null != onFocusedItemChanged ? onFocusedItemChanged : _.noop;
            }
            return TreeHelper.prototype.hasFocus = function() {
                return this._hasFocus;
            }, TreeHelper.prototype.onNodeClick = function(node, event) {
                var hasShift = event.shiftKey, hasCtrl = browserUtils.M.isCtrlOrMeta(event);
                hasShift && hasCtrl ? this.shiftSelect(node) : hasShift ? (this.selection.clear(), 
                this.shiftSelect(node)) : hasCtrl ? this.selection.toggle(node) : _.isEqual(this.selection.getSelectedItems(), [ node ]) || (this.selection.clear(), 
                this.selection.select(node)), hasShift || (this.shiftSelectionStartNode = node), 
                this.focus(node), event.preventDefault(), event.stopPropagation();
            }, TreeHelper.prototype.onBackgroundClick = function(event) {
                this.selection.clear(), event.stopPropagation();
            }, TreeHelper.prototype.onFocus = function() {
                this.focus(this.getFocusedNode() || this.getVisibleNodes()[0]), this._hasFocus = !0;
            }, TreeHelper.prototype.onBlur = function() {
                this.getVisibleNodes().map(function(node) {
                    return node.isFocused = !1;
                }), this._hasFocus = !1, this.onFocusedItemChanged(void 0);
            }, TreeHelper.prototype.onKeyDown = function(event) {
                var _this = this, hasShift = event.shiftKey, hasCtrl = browserUtils.M.isCtrlOrMeta(event), handled = !1, lastFocusedNode = this.lastFocusedNode;
                if (hasCtrl && "KeyA" === event.code && this.allowMultiSelect) this.selection.selectAll(), 
                handled = !0; else if ("Escape" === event.code) this.selection.clear(), handled = !0; else if ("Space" === event.code && lastFocusedNode) {
                    if (hasCtrl && hasShift) {
                        if (this.shiftSelectionStartNode) {
                            var nodes = this.getVisibleNodes(), selectNodes = this.getNodesInRange(nodes, this.shiftSelectionStartNode, lastFocusedNode);
                            this.selection.selectRange(selectNodes);
                        }
                    } else hasCtrl ? this.selection.toggle(lastFocusedNode) : this.selection.select(lastFocusedNode);
                    handled = !0;
                } else if ("ArrowLeft" === event.code && lastFocusedNode) {
                    if (lastFocusedNode.isExpanded) this.setExpandValue(lastFocusedNode, !1); else if (lastFocusedNode.parent) {
                        var parentNode = lastFocusedNode.parent;
                        this.selectAndScrollTo([ parentNode ]), this.focus(parentNode);
                    }
                    handled = !0;
                } else if ("ArrowRight" === event.code && lastFocusedNode) {
                    if (!_.isEmpty(lastFocusedNode.children)) if (lastFocusedNode.isExpanded) {
                        var firstChild = lastFocusedNode.children[0];
                        this.selectAndScrollTo([ firstChild ]), this.focus(firstChild);
                    } else this.setExpandValue(lastFocusedNode, !0);
                    handled = !0;
                } else if (lastFocusedNode) {
                    var visibleNodes_1 = this.getVisibleNodes(), lastFocusedNodeIndex_1 = visibleNodes_1.indexOf(lastFocusedNode);
                    debug.fF.assert(function() {
                        return lastFocusedNodeIndex_1 >= 0;
                    }, "expect the last focused node exists in visible nodes list"), handled = !0, lastFocusedNodeIndex_1 >= 0 && (handled = this.scrollHelper.handleKeyDown(lastFocusedNodeIndex_1, event, function(newIndex) {
                        var nodeAtNewIndex = visibleNodes_1[newIndex];
                        _this.allowMultiSelect ? hasShift && hasCtrl ? _this.shiftSelect(nodeAtNewIndex) : hasShift ? (_this.selection.clear(), 
                        _this.shiftSelect(nodeAtNewIndex)) : hasCtrl || (_this.selection.clear(), _this.selection.select(nodeAtNewIndex)) : (_this.selection.clear(), 
                        _this.selection.select(nodeAtNewIndex)), hasShift || (_this.shiftSelectionStartNode = nodeAtNewIndex), 
                        _this.focus(nodeAtNewIndex);
                    }));
                }
                handled && (event.stopPropagation(), event.preventDefault());
            }, TreeHelper.prototype.toggleExpandCollapse = function(node, event) {
                this.setExpandValue(node, !node.isExpanded), event && event.stopPropagation();
            }, TreeHelper.prototype.selectAndScrollTo = function(nodes) {
                var _this = this;
                this.selection.clear(), this.selection.selectRange(nodes), requestAnimationFrame(function() {
                    var index = _this.getVisibleNodes().indexOf(nodes[0]);
                    _this.scrollHelper.scrollItemIntoView(index, 30);
                });
            }, TreeHelper.prototype.syncManagedNodes = function(nodes) {
                var _this = this;
                this.hasNode(nodes, this.shiftSelectionStartNode) || (this.shiftSelectionStartNode = void 0), 
                this.hasNode(nodes, this.lastFocusedNode) || (this.lastFocusedNode = void 0), this.selection.clear();
                var selected = [];
                _.forEach(nodes, function(n) {
                    _this.collectSelectedNodes(n, selected);
                }), _.forEach(selected, function(n) {
                    n.isSelected = !1;
                }), this.selection.selectRange(selected);
            }, TreeHelper.prototype.shiftSelect = function(node) {
                var _a, nodes = this.getVisibleNodes(), fromNode = null !== (_a = this.shiftSelectionStartNode) && void 0 !== _a ? _a : _.first(nodes);
                this.selection.selectRange(this.getNodesInRange(nodes, fromNode, node));
            }, TreeHelper.prototype.collectSelectedNodes = function(node, selectedCollection) {
                var _this = this;
                debug.fF.assertValue(selectedCollection, "selected must not be null"), node && (node.isSelected && selectedCollection.push(node), 
                _.forEach(node.children, function(child) {
                    _this.collectSelectedNodes(child, selectedCollection);
                }));
            }, TreeHelper.prototype.hasNode = function(allNodes, node) {
                for (var _i = 0, _a = null != allNodes ? allNodes : []; _i < _a.length; _i++) {
                    var n = _a[_i];
                    if (n === node) return !0;
                    if (this.hasNode(n.children, node)) return !0;
                }
                return !1;
            }, TreeHelper.prototype.getNodesInRange = function(items, from, to) {
                var result, fromIndex = items.indexOf(from), toIndex = items.indexOf(to), startIndex = Math.min(fromIndex, toIndex), endIndex = Math.max(fromIndex, toIndex);
                if (startIndex > -1) {
                    result = [];
                    for (var i = startIndex; i <= endIndex; i++) result.push(items[i]);
                }
                return result;
            }, TreeHelper.prototype.focus = function(node) {
                node && (this.getVisibleNodes().map(function(node) {
                    return node.isFocused = !1;
                }), node.isFocused = !0, this.lastFocusedNode = node, this.onFocusedItemChanged(node));
            }, TreeHelper.prototype.getFocusedNode = function() {
                var nodes = this.getVisibleNodes(), node = _.find(nodes, function(node) {
                    return node.isSelected;
                });
                return null != node ? node : _.find(nodes, function(node) {
                    return node.isFocused;
                });
            }, TreeHelper.prototype.setExpandValue = function(node, expand) {
                var _a;
                node.isExpanded !== expand && (node.isExpanded = expand, node.isExpanded || (null === (_a = this.shiftSelectionStartNode) || void 0 === _a ? void 0 : _a.parent) !== node || (this.shiftSelectionStartNode = node));
            }, TreeHelper;
        }(), rx_component = __webpack_require__(73221), merge = __webpack_require__(63057), pairwise = __webpack_require__(6663), tap = __webpack_require__(17653), throttleTime = __webpack_require__(69903), sqExprStaticMembers = __webpack_require__(74082), high_contrast_css_generation_service = __webpack_require__(64647), editable_label_component = __webpack_require__(37534), pbi_checkbox_component = __webpack_require__(56011), pbi_icon_component = __webpack_require__(86663), pbi_tooltip_directive = __webpack_require__(36858), localize_pipe = __webpack_require__(85102), groups_list_pane_component_c0 = [ "allGroupsListContainer" ], groups_list_pane_component_c1 = function(a0, a1, a2) {
            return {
                "role-missing": a0,
                "role-selected": a1,
                "role-focused": a2
            };
        };
        function GroupsListPaneComponent_li_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r6 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "li", 18), core["\u0275\u0275listener"]("click", function($event) {
                    var ungrouped_r4 = core["\u0275\u0275restoreView"](_r6).$implicit, ctx_r5 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r5.paneNodeClicked.fn({
                        $event,
                        type: "ungrouped",
                        node: ungrouped_r4
                    }));
                }), core["\u0275\u0275elementStart"](1, "span", 19), core["\u0275\u0275text"](2), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ungrouped_r4 = ctx.$implicit;
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction3"](4, groups_list_pane_component_c1, ungrouped_r4.isMissingInData, ungrouped_r4.isSelected, ungrouped_r4.isFocused)), 
                core["\u0275\u0275attribute"]("aria-selected", ungrouped_r4.isSelected), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("pbiTooltip", ungrouped_r4.displayValue), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate"](ungrouped_r4.displayValue);
            }
        }
        function GroupsListPaneComponent_span_9_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "span", 20);
        }
        function GroupsListPaneComponent_li_19_ul_4_li_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r12 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "li", 28), core["\u0275\u0275listener"]("click", function($event) {
                    var groupedValue_r10 = core["\u0275\u0275restoreView"](_r12).$implicit, ctx_r11 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r11.paneNodeClicked.fn({
                        $event,
                        type: "grouped",
                        node: groupedValue_r10
                    }));
                }), core["\u0275\u0275elementStart"](1, "span", 19), core["\u0275\u0275text"](2), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var groupedValue_r10 = ctx.$implicit;
                core["\u0275\u0275propertyInterpolate1"]("id", "rightPaneNode", groupedValue_r10.id, ""), 
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction3"](5, groups_list_pane_component_c1, groupedValue_r10.isMissingInData, groupedValue_r10.isSelected, groupedValue_r10.isFocused)), 
                core["\u0275\u0275attribute"]("aria-selected", groupedValue_r10.isSelected), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("pbiTooltip", groupedValue_r10.displayValue), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate"](groupedValue_r10.displayValue);
            }
        }
        function GroupsListPaneComponent_li_19_ul_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "ul", 26), core["\u0275\u0275template"](1, GroupsListPaneComponent_li_19_ul_4_li_1_Template, 3, 9, "li", 27), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var groupItem_r7 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", groupItem_r7.children);
            }
        }
        var _c2 = function(a0, a1, a2) {
            return {
                "role-expanded": a0,
                "role-selected": a1,
                "role-focused": a2
            };
        };
        function GroupsListPaneComponent_li_19_Template(rf, ctx) {
            if (1 & rf) {
                var _r15 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "li", 21), core["\u0275\u0275listener"]("click", function($event) {
                    var groupItem_r7 = core["\u0275\u0275restoreView"](_r15).$implicit, ctx_r14 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r14.paneNodeClicked.fn({
                        $event,
                        type: "grouped",
                        node: groupItem_r7
                    }));
                }), core["\u0275\u0275elementStart"](1, "div", 22)(2, "pbi-icon", 23), core["\u0275\u0275listener"]("click", function($event) {
                    var groupItem_r7 = core["\u0275\u0275restoreView"](_r15).$implicit, ctx_r16 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r16.collapseExpandClicked.fn({
                        $event,
                        node: groupItem_r7
                    }));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "editable-label", 24), 
                core["\u0275\u0275listener"]("cancel", function() {
                    var groupItem_r7 = core["\u0275\u0275restoreView"](_r15).$implicit, ctx_r17 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r17.cancelEditNameAndFocus(groupItem_r7));
                })("dblclick", function($event) {
                    var groupItem_r7 = core["\u0275\u0275restoreView"](_r15).$implicit, ctx_r18 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r18.startEditName(groupItem_r7, $event));
                })("onBlur", function($event) {
                    var groupItem_r7 = core["\u0275\u0275restoreView"](_r15).$implicit, ctx_r19 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r19.rename(groupItem_r7, $event.newName));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](4, GroupsListPaneComponent_li_19_ul_4_Template, 2, 1, "ul", 25), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var groupItem_r7 = ctx.$implicit;
                core["\u0275\u0275propertyInterpolate1"]("id", "rightPaneNode", groupItem_r7.id, ""), 
                core["\u0275\u0275attribute"]("aria-selected", groupItem_r7.isSelected)("aria-expanded", groupItem_r7.isExpanded), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction3"](10, _c2, groupItem_r7.isExpanded, groupItem_r7.isSelected, groupItem_r7.isFocused)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("displayName", groupItem_r7.displayValue)("disableClick", !0)("editable", groupItem_r7.isEditingName)("inputMatchLabelWidth", !1)("customTooltip", !1), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", groupItem_r7.isExpanded);
            }
        }
        var GroupsListPaneComponent = function(_super) {
            function GroupsListPaneComponent(rootFormGroup, dataSourcesService, errorService, groupAuthoringService, highContrastCssGenerationService, lazyScopedProviderModern, localizationService) {
                var _this = _super.call(this) || this;
                return _this.rootFormGroup = rootFormGroup, _this.dataSourcesService = dataSourcesService, 
                _this.errorService = errorService, _this.groupAuthoringService = groupAuthoringService, 
                _this.highContrastCssGenerationService = highContrastCssGenerationService, _this.lazyScopedProviderModern = lazyScopedProviderModern, 
                _this.localizationService = localizationService, _this.loadColumnValuesCompleted$ = new BehaviorSubject.X(void 0), 
                _this.includeOtherGroupToggleControlName = "includeOtherGroupToggle", _this.collapseExpandClicked = _this.createEventAdapter(), 
                _this.paneFocused = _this.createEventAdapter(), _this.paneBlured = _this.createEventAdapter(), 
                _this.paneBackgroundClicked = _this.createEventAdapter(), _this.paneNodeClicked = _this.createEventAdapter(), 
                _this.ungroupedInternal$ = new BehaviorSubject.X(void 0), _this.groupedInternal$ = new BehaviorSubject.X(void 0), 
                _this.selectedUngroupedInternal$ = new BehaviorSubject.X([]), _this.selectedGroupedInternal$ = new BehaviorSubject.X([]), 
                _this.focusedUngroupedInternal$ = new Subject.xQ, _this.focusedGroupedInternal$ = new Subject.xQ, 
                _this.specialValidators = [], _this.lastNodeId = 0, _this.initializeHighContrastRules(), 
                _this;
            }
            return (0, tslib_es6.__extends)(GroupsListPaneComponent, _super), Object.defineProperty(GroupsListPaneComponent.prototype, "_vs", {
                set: function(virtualScroll) {
                    var _this = this;
                    this.ungroupedPaneVirtualScroll = virtualScroll, virtualScroll && virtualScroll.scrolledIndexChange.pipe((0, 
                    pairwise.G)(), (0, filter.h)(function(_a) {
                        return !(_a[1] <= _a[0]) && virtualScroll.getRenderedRange().end === virtualScroll.getDataLength();
                    }), (0, takeUntil.R)((0, merge.T)(this.onDestroy$, this.loadColumnValuesCompleted$.pipe((0, 
                    filter.h)(function(value) {
                        return !!value;
                    }))))).subscribe(function(_ignore) {
                        _this.loadUngroupedColumnValues(!0, !0);
                    });
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GroupsListPaneComponent.prototype, "groupsListContainerElementRef", {
                set: function(elementRef) {
                    elementRef && (this.groupsListContainerElement = elementRef.nativeElement);
                },
                enumerable: !1,
                configurable: !0
            }), GroupsListPaneComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var groupExistenceValidator;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.includeOtherGroupToggle = new fesm2022_forms.p4(void 0), this.listFormGroup = this.rootFormGroup.control, 
                            this.listFormGroup.addControl(this.includeOtherGroupToggleControlName, this.includeOtherGroupToggle), 
                            this.otherGroupNode = this.getDefaultOtherGroupNode(), this.grouped$ = this.groupedInternal$.pipe(), 
                            this.ungrouped$ = this.ungroupedInternal$.pipe(), this.setupEventRelatedPipes(), 
                            this.setupPaneHelpers(), this.setupCanGroupUngroup(), this.checkToEnforceIncludeOtherGroup(), 
                            this.loadExistingGroups(), groupExistenceValidator = MustHaveGroupNotEqualToOtherGroupValidator.createValidator(this.groupedInternal$, this.onDestroy$), 
                            this.specialValidators.push(groupExistenceValidator), this.listFormGroup.addValidators(groupExistenceValidator), 
                            this.listFormGroup.updateValueAndValidity(), [ 4, this.loadUngroupedColumnValues(!1) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, GroupsListPaneComponent.prototype.ngOnDestroy = function() {
                return this.listFormGroup.removeControl(this.includeOtherGroupToggleControlName), 
                this.listFormGroup.removeValidators(this.specialValidators), _super.prototype.ngOnDestroy.call(this);
            }, GroupsListPaneComponent.prototype.learnMoreAboutOtherGroup = function() {
                window.open("https://go.microsoft.com/fwlink/?LinkId=828994", "_blank");
            }, GroupsListPaneComponent.prototype.onPaneKeyDown = function(type, $event) {
                if ("ungrouped" !== type || $event.ctrlKey || $event.shiftKey || this.clearPaneSelection("grouped"), 
                "grouped" === type && "F2" === $event.code) {
                    var focused = _.find(this.groupedInternal$.value, function(node) {
                        return node.isFocused;
                    });
                    if (focused) return void this.startEditName(focused, $event);
                }
                this.getTreeHelper(type).onKeyDown($event);
            }, GroupsListPaneComponent.prototype.group = function() {
                var _a, _b, _c, targetGroup, _this = this, currentGroups = (0, tslib_es6.__spreadArray)([], null !== (_a = this.groupedInternal$.value) && void 0 !== _a ? _a : [], !0), currentUngroupedValues = (0, 
                tslib_es6.__spreadArray)([], null !== (_b = this.ungroupedInternal$.value) && void 0 !== _b ? _b : [], !0), selectedUngrouped = null !== (_c = this.ungroupedTreeHelper.selection.getSelectedItems()) && void 0 !== _c ? _c : [], selectedGrouped = _.filter(this.groupedTreeHelper.selection.getSelectedItems(), function(node) {
                    return !(isGroupNode(node) && node.isOther || isGroupNode(null == node ? void 0 : node.parent) && node.parent.isOther);
                }), isTargetGroupNew = !1;
                if (!_.isEmpty(selectedGrouped)) {
                    var lastGrouped_1 = _.last(selectedGrouped), selectedGroups = _.filter(selectedGrouped, function(node) {
                        return isGroupNode(node);
                    }), selectedGroupsCount = _.size(selectedGroups);
                    1 === selectedGroupsCount ? targetGroup = selectedGroups[0] : selectedGroupsCount > 1 ? (targetGroup = this.mergeGroups(selectedGroups), 
                    currentGroups = _.without.apply(_, (0, tslib_es6.__spreadArray)([ currentGroups ], selectedGroups, !1)), 
                    isTargetGroupNew = !0) : (1 === selectedGrouped.length || _.every(selectedGrouped, function(node) {
                        return node.parent === lastGrouped_1.parent;
                    })) && (targetGroup = lastGrouped_1.parent);
                    var valuesToUngroup_1 = _.filter(selectedGrouped, function(node) {
                        return isColumnValueNode(node) && node.parent !== targetGroup;
                    });
                    _.forEach(_.groupBy(valuesToUngroup_1, function(node) {
                        return node.parent.displayValue;
                    }), function(groupMembersToUngroup) {
                        var group = _.first(groupMembersToUngroup).parent;
                        _this.updateGroupChildrenAndFixName(group, currentGroups, function() {
                            group.children = _.without.apply(_, (0, tslib_es6.__spreadArray)([ group.children ], valuesToUngroup_1, !1));
                        }), _.isEmpty(group.children) && (currentGroups = _.without(currentGroups, group));
                    }), currentUngroupedValues.push.apply(currentUngroupedValues, valuesToUngroup_1), 
                    selectedUngrouped.push.apply(selectedUngrouped, valuesToUngroup_1);
                }
                if (!_.isEmpty(selectedUngrouped)) {
                    if (!targetGroup) {
                        if (!this.validateCanCreateGroup()) return;
                        targetGroup = this.createGroupWithEmptyChildren(selectedUngrouped), isTargetGroupNew = !0;
                    }
                    this.updateGroupChildrenAndFixName(targetGroup, currentGroups, function() {
                        currentUngroupedValues = _.without.apply(_, (0, tslib_es6.__spreadArray)([ currentUngroupedValues ], selectedUngrouped, !1)), 
                        targetGroup.children = _.concat.apply(_, (0, tslib_es6.__spreadArray)([ targetGroup.children ], selectedUngrouped, !1)), 
                        sortNodes(targetGroup.children), _.forEach(selectedUngrouped, function(n) {
                            n.parent = targetGroup;
                        });
                    }), targetGroup.isExpanded = !0;
                }
                isTargetGroupNew && (currentGroups.push(targetGroup), this.ensureGroupHasUniqueName(targetGroup, currentGroups), 
                sortNodes(currentGroups)), this.groupedInternal$.next(currentGroups), this.ungroupedInternal$.next(currentUngroupedValues), 
                this.groupedTreeHelper.selectAndScrollTo(isTargetGroupNew ? [ targetGroup ] : selectedUngrouped), 
                this.loadColumnValuesCompleted$.value || this.loadUngroupedColumnValues(!0);
            }, GroupsListPaneComponent.prototype.ungroup = function() {
                for (var _a, _b, currentGroups = (0, tslib_es6.__spreadArray)([], null !== (_a = this.groupedInternal$.value) && void 0 !== _a ? _a : [], !0), currentUngroupedValues = (0, 
                tslib_es6.__spreadArray)([], null !== (_b = this.ungroupedInternal$.value) && void 0 !== _b ? _b : [], !0), selectedFromGroupedPane = this.groupedTreeHelper.selection.getSelectedItems(), selectedGroups = _.filter(selectedFromGroupedPane, function(node) {
                    return isGroupNode(node);
                }), selectedGroupMembers = _.filter(selectedFromGroupedPane, function(node) {
                    return isColumnValueNode(node);
                }), selectedMembersByGroup = _.groupBy(selectedGroupMembers, function(node) {
                    return node.parent.displayValue;
                }), otherGroup = _.find(currentGroups, function(g) {
                    return g.isOther;
                }), removeOtherGroup = !(this.forceIncludeOtherGroup || !_.find(selectedGroups, function(g) {
                    return g.isOther;
                }) && !_.find(selectedGroupMembers, function(m) {
                    return m.parent.isOther;
                })), allValuesToUngroup = [], groupsToDelete = removeOtherGroup ? [ otherGroup ] : [], _loop_1 = function(group) {
                    if (group.isOther) return "continue";
                    var isGroupSelected = !!_.find(selectedGroups, group), selectedChildren = selectedMembersByGroup[group.displayValue], selectedChildrenCount = _.size(selectedChildren);
                    isGroupSelected && 0 === selectedChildrenCount || selectedChildrenCount === group.children.length ? (groupsToDelete.push(group), 
                    allValuesToUngroup.push.apply(allValuesToUngroup, group.children)) : selectedChildrenCount > 0 && (this_1.updateGroupChildrenAndFixName(group, currentGroups, function() {
                        group.children = _.without.apply(_, (0, tslib_es6.__spreadArray)([ group.children ], selectedChildren, !1));
                    }), allValuesToUngroup.push.apply(allValuesToUngroup, selectedChildren));
                }, this_1 = this, _i = 0, currentGroups_1 = currentGroups; _i < currentGroups_1.length; _i++) _loop_1(currentGroups_1[_i]);
                currentGroups = _.without.apply(_, (0, tslib_es6.__spreadArray)([ currentGroups ], groupsToDelete, !1)), 
                _.forEach(allValuesToUngroup, function(n) {
                    n.parent = void 0;
                }), currentUngroupedValues.push.apply(currentUngroupedValues, allValuesToUngroup), 
                sortNodes(currentUngroupedValues), this.groupedInternal$.next(currentGroups), this.ungroupedInternal$.next(currentUngroupedValues), 
                removeOtherGroup && this.includeOtherGroupToggle.setValue(!1), this.ungroupedTreeHelper.selectAndScrollTo(allValuesToUngroup);
            }, GroupsListPaneComponent.prototype.logTelemetryOnCommit = function(definition) {
                this.groupAuthoringService.telemetry.logGroupActionTelemetry(this.groupingListInfo.existing ? "Update" : "Create", "Dialog", this.groupingListInfo.sourceProperty, definition, _.size(this.ungroupedInternal$.value));
            }, GroupsListPaneComponent.prototype.getDefinition = function() {
                var _this = this, definition = {
                    groupedColumns: [ (0, sqExpr.Oh)((0, sqExpr.nw)(this.groupingListInfo.schema, this.groupingListInfo.entity.name), this.groupingListInfo.sourceProperty.name) ],
                    groupItems: []
                };
                (0, groupUtils.lB)(definition.groupItems, this.localizationService);
                for (var _i = 0, _a = this.groupedInternal$.value; _i < _a.length; _i++) {
                    var group = _a[_i], groupItem = {
                        name: group.value
                    };
                    if (!group.isOther) {
                        var groupedValues = _.map(group.children, function(child) {
                            return [ (0, sqExpr.kQ)(child.value, _this.groupingListInfo.sourcePropertyValueType) ];
                        });
                        groupItem.expression = (0, sqExpr.Sh)(definition.groupedColumns, groupedValues);
                    }
                    definition.groupItems.push(groupItem);
                }
                return definition;
            }, GroupsListPaneComponent.prototype.startEditName = function(node, $event) {
                node.isEditingName = !0, $event.stopPropagation(), $event.preventDefault();
            }, GroupsListPaneComponent.prototype.cancelEditNameAndFocus = function(node) {
                var _this = this;
                node.isEditingName = !1, setTimeout(function() {
                    _this.groupsListContainerElement.focus();
                });
            }, GroupsListPaneComponent.prototype.rename = function(node, newName) {
                _.isEmpty(_.trim(newName)) ? this.cancelEditNameAndFocus(node) : (node.value = this.getUniqueNewName(node, this.groupedInternal$.value, newName || node.value), 
                node.displayValue = node.value, node.isEditingName = !1, node.isOther ? this.ensureOtherGroupDislayNameRules(node) : (sortNodes(this.groupedInternal$.value), 
                this.groupedTreeHelper.selectAndScrollTo([ node ])));
            }, GroupsListPaneComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .valuesOrGroupsTopContainer .role-selected, .themeableElement .groupsDialogContent .valuesOrGroupsTopContainer .role-selected *:not(pbi-icon)", "{ background-color: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .valuesOrGroupsTopContainer .role-selected, .themeableElement .groupsDialogContent .valuesOrGroupsTopContainer .role-selected *", "{ color: @selectedForegroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .valuesOrGroupsTopContainer li.role-selected::marker", "{ color: @foregroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .valuesOrGroupsTopContainer li.role-selected.role-missing::marker", "{ color: @disabledTextColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .valuesOrGroupsTopContainer .role-focused", "{ outline-color: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .valuesOrGroupsTopContainer .role-missing:not(.role-selected), .themeableElement .groupsDialogContent .valuesOrGroupsTopContainer .role-missing:not(.role-selected) *", "{ color: @disabledTextColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .valuesOrGroupsTopContainer:focus, .themeableElement .groupsDialogContent .valuesOrGroupsTopContainer:focus-within", "{ border-color: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule('html[data-focus-source="key"] .pbi-checkbox-input:focus + label::before', "{ outline-color: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .groupsDialogContent .glyphicon.infoLink", "{ border: none !important; }");
            }, GroupsListPaneComponent.prototype.validateCanCreateGroup = function() {
                var currentGroupCount = _.size(this.groupedInternal$.value) + 1;
                return this.groupAuthoringService.core.validateGroupCount(this.groupingListInfo.entity, currentGroupCount + 1);
            }, GroupsListPaneComponent.prototype.clearPaneSelection = function(type) {
                this.getTreeHelper(type).selection.clear();
            }, GroupsListPaneComponent.prototype.loadExistingGroups = function() {
                var _this = this;
                if (debug.fF.assertValue(this.groupingListInfo, "Expect this.groupingListInfo to be defined already"), 
                debug.fF.assert(function() {
                    return null == _this.ungroupedInternal$.value;
                }, 'Expect this to be called BEFORE we load any column values, for setting "isMissingInData" value properly'), 
                this.groupingListInfo.existing) {
                    for (var groupNodes = [], _i = 0, groups_1 = (0, groupUtils.$E)(this.groupingListInfo.existing.groups); _i < groups_1.length; _i++) {
                        var group = groups_1[_i], groupNode = {
                            id: this.lastNodeId++,
                            displayValue: group.name,
                            value: group.name,
                            children: [],
                            isOther: !group.expression,
                            isExpanded: !1
                        };
                        if (groupNodes.push(groupNode), debug.fF.assertValue(_.isEmpty(this.ungroupedInternal$.value), "Expect this to be called before the ungrouped column values start to load"), 
                        group.expression && (0, sqExprStaticMembers.Hi)(group.expression)) for (var inExpr = group.expression, i = 0; i < _.size(inExpr.values); i++) {
                            var inMemberExpr = inExpr.values[i][0];
                            if ((0, sqExprStaticMembers.VC)(inMemberExpr)) {
                                var childColumnValue = {
                                    id: this.lastNodeId++,
                                    displayValue: inMemberExpr.value.toString(),
                                    value: inMemberExpr.value,
                                    sortKey: i,
                                    parent: groupNode,
                                    isMissingInData: !0
                                };
                                groupNode.children.push(childColumnValue);
                            }
                        }
                    }
                    var existingOtherGroupNodes = _.remove(groupNodes, function(g) {
                        return g.isOther;
                    });
                    debug.fF.assert(function() {
                        return _.size(existingOtherGroupNodes) <= 1;
                    }, "Maximum 1 Other group is supported");
                    var existingOtherGroupNode = _.first(existingOtherGroupNodes);
                    existingOtherGroupNode && (this.ensureOtherGroupDislayNameRules(existingOtherGroupNode), 
                    this.includeOtherGroupToggle.setValue(!0), this.otherGroupNode.displayValue = existingOtherGroupNode.displayValue, 
                    this.otherGroupNode.value = existingOtherGroupNode.value, groupNodes.push(this.otherGroupNode)), 
                    this.groupedInternal$.next(groupNodes);
                }
            }, GroupsListPaneComponent.prototype.getDefaultOtherGroupNode = function() {
                var otherGroupDisplayValue = this.localizationService.get("Other"), otherGroupChildDisplayValue = this.localizationService.get("GroupsDialog_OtherGroupContainsUngrouped"), otherGroupNode = {
                    id: -1,
                    displayValue: otherGroupDisplayValue,
                    value: otherGroupDisplayValue,
                    children: [],
                    isOther: !0,
                    isExpanded: !0
                };
                return otherGroupNode.children.push({
                    id: -2,
                    displayValue: otherGroupChildDisplayValue,
                    value: otherGroupChildDisplayValue,
                    sortKey: -1,
                    parent: otherGroupNode
                }), otherGroupNode;
            }, GroupsListPaneComponent.prototype.loadUngroupedColumnValues = function(isLoadMore, forceLoad) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var targetColumnExpr, dataSources, groupQueryService, columnValues, error_1, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(this.groupingListInfo, "Expect this.groupingListInfo to be defined already"), 
                            this.shouldLoadMore(forceLoad) ? (targetColumnExpr = (0, sqExpr.Oh)((0, sqExpr.nw)(this.groupingListInfo.schema, this.groupingListInfo.entity.name), this.groupingListInfo.sourceProperty.name), 
                            dataSources = this.dataSourcesService.get(), [ 4, this.lazyScopedProviderModern.get("groupQueryService") ]) : [ 2 ];

                          case 1:
                            groupQueryService = _a.sent(), _a.label = 2;

                          case 2:
                            return _a.trys.push([ 2, 4, , 5 ]), [ 4, groupQueryService.getValuesForColumn(targetColumnExpr, dataSources, isLoadMore) ];

                          case 3:
                            return columnValues = _a.sent(), this.updateNodes(columnValues), this.loadColumnValuesCompleted$.next(!columnValues.canLoadMore), 
                            this.shouldLoadMore(!1) && setTimeout(function() {
                                _this.loadUngroupedColumnValues(!0);
                            }, 100), [ 3, 5 ];

                          case 4:
                            return error_1 = _a.sent(), (0, groupUtils.iA)(this.errorService, error_1, this.localizationService), 
                            [ 3, 5 ];

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, GroupsListPaneComponent.prototype.shouldLoadMore = function(forceLoad) {
                return !this.loadColumnValuesCompleted$.value && (forceLoad || _.size(this.ungroupedInternal$.value) < 3500);
            }, GroupsListPaneComponent.prototype.updateNodes = function(newColumnValuesBatch) {
                var _a, _b, _c, _d, _e, _f;
                if (_.first(null === (_a = null == newColumnValuesBatch ? void 0 : newColumnValuesBatch.table) || void 0 === _a ? void 0 : _a.columns)) {
                    var rows = newColumnValuesBatch.table.rows;
                    if (!_.isEmpty(rows)) {
                        for (var currentGroupNodes = (0, tslib_es6.__spreadArray)([], null !== (_b = this.groupedInternal$.value) && void 0 !== _b ? _b : [], !0), groupedValueNodesByValue = {}, _i = 0, currentGroupNodes_1 = currentGroupNodes; _i < currentGroupNodes_1.length; _i++) {
                            var groupNode = currentGroupNodes_1[_i];
                            if (!groupNode.isOther) for (var _g = 0, _h = null !== (_c = groupNode.children) && void 0 !== _c ? _c : []; _g < _h.length; _g++) groupedValueNodesByValue[(groupedValueNode = _h[_g]).value] = groupedValueNode;
                        }
                        for (var existingUngroupedValueNodes = null !== (_d = this.ungroupedInternal$.value) && void 0 !== _d ? _d : [], existingUngroupedValueNodesByValue = {}, _j = 0, existingUngroupedValueNodes_1 = existingUngroupedValueNodes; _j < existingUngroupedValueNodes_1.length; _j++) {
                            var ungroupedValueNode = existingUngroupedValueNodes_1[_j];
                            existingUngroupedValueNodesByValue[ungroupedValueNode.value] = ungroupedValueNode;
                        }
                        for (var newUngrouped = (0, tslib_es6.__spreadArray)([], existingUngroupedValueNodes, !0), groupedNodesUpdated = !1, sortKeyStart = (null !== (_f = null === (_e = _.last(existingUngroupedValueNodes)) || void 0 === _e ? void 0 : _e.sortKey) && void 0 !== _f ? _f : 0) + 1, index = 0; index < _.size(rows); index++) {
                            var value = rows[index][0];
                            if (null != value) {
                                var groupedValueNode, newUngroupedNode = {
                                    id: this.lastNodeId++,
                                    displayValue: value.toString(),
                                    value,
                                    sortKey: sortKeyStart
                                };
                                if (sortKeyStart++, groupedValueNode = groupedValueNodesByValue[newUngroupedNode.value]) groupedNodesUpdated = !0, 
                                groupedValueNode.isMissingInData = !1, groupedValueNode.sortKey = newUngroupedNode.sortKey, 
                                groupedValueNode.parent.children = (0, tslib_es6.__spreadArray)([], groupedValueNode.parent.children, !0); else {
                                    var existingUngrouped = existingUngroupedValueNodesByValue[newUngroupedNode.value];
                                    if (existingUngrouped) {
                                        var existingIndex = newUngrouped.indexOf(existingUngrouped);
                                        newUngrouped[existingIndex] = newUngroupedNode;
                                    } else newUngrouped.push(newUngroupedNode);
                                }
                            }
                        }
                        this.ungroupedInternal$.next(newUngrouped), groupedNodesUpdated && this.groupedInternal$.next(currentGroupNodes);
                    }
                }
            }, GroupsListPaneComponent.prototype.checkToEnforceIncludeOtherGroup = function() {
                0 !== (0, groupUtils.SK)(this.groupingListInfo.sourcePropertyValueType) && (this.forceIncludeOtherGroup = !0, 
                this.includeOtherGroupToggle.setValue(!0));
            }, GroupsListPaneComponent.prototype.setupEventRelatedPipes = function() {
                var _this = this;
                this.ungroupedFocusedDescription$ = this.focusedUngroupedInternal$.pipe((0, distinctUntilChanged.x)(), (0, 
                map.U)(function(node) {
                    return node ? "leftPaneNode".concat(node.id) : "none";
                })), this.groupedFocusedDescription$ = this.focusedGroupedInternal$.pipe((0, distinctUntilChanged.x)(), (0, 
                map.U)(function(node) {
                    return node ? "rightPaneNode".concat(node.id) : "none";
                })), this.collapseExpandClicked.$.pipe().subscribe(function(_a) {
                    var $event = _a.$event, node = _a.node;
                    $event.stopPropagation(), $event.preventDefault(), isGroupNode(node) && _this.groupedTreeHelper.toggleExpandCollapse(node);
                }), this.paneFocused.$.pipe().subscribe(function(_a) {
                    var $event = _a.$event, type = _a.type;
                    $event.stopPropagation(), $event.preventDefault(), _this.getTreeHelper(type).onFocus();
                }), this.paneBlured.$.pipe().subscribe(function(_a) {
                    var $event = _a.$event, type = _a.type;
                    $event.stopPropagation(), $event.preventDefault(), _this.getTreeHelper(type).onBlur();
                }), this.paneBackgroundClicked.$.pipe().subscribe(function(_a) {
                    var $event = _a.$event, type = _a.type;
                    $event.stopPropagation(), $event.preventDefault(), _this.clearPaneSelection(type);
                }), this.paneNodeClicked.$.pipe((0, tap.b)(function(_a) {
                    var $event = _a.$event;
                    $event.preventDefault(), $event.stopPropagation();
                }), (0, throttleTime.p)(200)).subscribe(function(_a) {
                    var $event = _a.$event, type = _a.type, node = _a.node;
                    "ungrouped" !== type || $event.ctrlKey || $event.shiftKey || _this.clearPaneSelection("grouped"), 
                    _this.getTreeHelper(type).onNodeClick(node, $event);
                }), this.includeOtherGroupToggle.valueChanges.pipe((0, distinctUntilChanged.x)()).subscribe(function(checked) {
                    var _a, currentGroups = (0, tslib_es6.__spreadArray)([], null !== (_a = _this.groupedInternal$.value) && void 0 !== _a ? _a : [], !0), lastGroupNode = _.last(currentGroups), existingOtherGroupNode = (null == lastGroupNode ? void 0 : lastGroupNode.isOther) ? lastGroupNode : void 0;
                    if (checked) {
                        if (!_this.validateCanCreateGroup()) return void setTimeout(function() {
                            _this.includeOtherGroupToggle.setValue(!1);
                        });
                        debug.fF.assert(function() {
                            return !existingOtherGroupNode;
                        }, "this should not be called for checked===true if there is already an Other group"), 
                        _this.ensureGroupHasUniqueName(_this.otherGroupNode, currentGroups), _this.ensureOtherGroupDislayNameRules(_this.otherGroupNode), 
                        _this.otherGroupNode.isExpanded = !0, currentGroups.push(_this.otherGroupNode), 
                        _this.groupedInternal$.next(currentGroups), _this.groupedTreeHelper.selectAndScrollTo([ _this.otherGroupNode ]);
                    } else existingOtherGroupNode && (currentGroups = _.take(currentGroups, _.size(currentGroups) - 1), 
                    _this.groupedInternal$.next(currentGroups));
                });
            }, GroupsListPaneComponent.prototype.setupPaneHelpers = function() {
                var _this = this;
                this.ungroupedTreeHelper = new TreeHelper(function() {
                    return _this.ungroupedInternal$.value || [];
                }, ".valuesOrGroupsTopContainer.valuesTopContainer .cdk-virtual-scroll-content-wrapper", ".item", !0, function(selectedItems) {
                    _this.selectedUngroupedInternal$.next(selectedItems);
                }, function(focusedItem) {
                    _this.focusedUngroupedInternal$.next(focusedItem);
                }, new VerticalVirtualScrollHelper(function() {
                    return _this.ungroupedPaneVirtualScroll;
                }, 24)), this.groupedTreeHelper = new TreeHelper(function() {
                    for (var _a, all = [], _i = 0, _b = null !== (_a = _this.groupedInternal$.value) && void 0 !== _a ? _a : []; _i < _b.length; _i++) {
                        var groupNode = _b[_i];
                        if (all.push(groupNode), groupNode.isExpanded) for (var _c = 0, _d = groupNode.children; _c < _d.length; _c++) all.push(_d[_c]);
                    }
                    return all;
                }, ".valuesOrGroupsTopContainer.groupsTopContainer .scrollableContainer", ".item", !0, function(selectedItems) {
                    _this.selectedGroupedInternal$.next(selectedItems);
                }, function(focusedItem) {
                    _this.focusedGroupedInternal$.next(focusedItem);
                }), this.ungroupedInternal$.pipe((0, filter.h)(function(value) {
                    return !!value;
                }), (0, takeUntil.R)(this.onDestroy$)).subscribe(function(ungroupedValues) {
                    _this.ungroupedTreeHelper.syncManagedNodes(ungroupedValues);
                }), this.groupedInternal$.pipe((0, filter.h)(function(value) {
                    return !!value;
                }), (0, takeUntil.R)(this.onDestroy$)).subscribe(function(groups) {
                    _this.groupedTreeHelper.syncManagedNodes(groups);
                });
            }, GroupsListPaneComponent.prototype.setupCanGroupUngroup = function() {
                var _this = this;
                this.canGroup$ = (0, combineLatest.aj)([ this.selectedUngroupedInternal$, this.selectedGroupedInternal$ ]).pipe((0, 
                map.U)(function(_a) {
                    var selectedUngrouped = _a[0], groupsWithSelfOrMemberSelection = _.uniq(_.map(_a[1], function(n) {
                        return isGroupNode(n) ? n : n.parent;
                    }));
                    return !_.find(groupsWithSelfOrMemberSelection, function(g) {
                        return g.isOther;
                    }) && (_.size(selectedUngrouped) > 0 || _.size(groupsWithSelfOrMemberSelection) > 1);
                }), (0, distinctUntilChanged.x)()), this.canUngroup$ = this.selectedGroupedInternal$.pipe((0, 
                map.U)(function(selectedGrouped) {
                    var candidateForUngroup = selectedGrouped;
                    return _this.forceIncludeOtherGroup && (candidateForUngroup = _.filter(selectedGrouped, function(n) {
                        return isGroupNode(n) ? !n.isOther : !n.parent.isOther;
                    })), _.size(candidateForUngroup) > 0;
                }), (0, distinctUntilChanged.x)());
            }, GroupsListPaneComponent.prototype.mergeGroups = function(groups) {
                var _a, _this = this;
                debug.fF.assert(function() {
                    return _.size(groups) > 1;
                }, "Expecting more than 1 group");
                for (var targetGroup = this.createGroupWithEmptyChildren(groups), _i = 0, groups_2 = groups; _i < groups_2.length; _i++) (_a = targetGroup.children).push.apply(_a, groups_2[_i].children);
                return _.forEach(targetGroup.children, function(n) {
                    n.parent = targetGroup;
                }), sortNodes(targetGroup.children), _.every(groups, function(g) {
                    return g.displayValue === _this.getDefaultGroupName(g.children);
                }) && (targetGroup.displayValue = this.getDefaultGroupName(targetGroup.children), 
                targetGroup.value = targetGroup.displayValue), targetGroup;
            }, GroupsListPaneComponent.prototype.createGroupWithEmptyChildren = function(values) {
                var nodesCopy = (0, tslib_es6.__spreadArray)([], values, !0);
                sortNodes(nodesCopy);
                var name = this.getDefaultGroupName(nodesCopy);
                return {
                    id: this.lastNodeId++,
                    isExpanded: !0,
                    displayValue: name,
                    value: name,
                    children: [],
                    isOther: !1
                };
            }, GroupsListPaneComponent.prototype.ensureOtherGroupDislayNameRules = function(otherGroupNode) {
                if (otherGroupNode) {
                    debug.fF.assert(function() {
                        return otherGroupNode.isOther;
                    }, "Expect this to be called only on OtherGroup node");
                    var otherString = this.localizationService.get("Other");
                    otherGroupNode.displayValue.toLocaleLowerCase().indexOf(otherString.toLocaleLowerCase()) < 0 && (otherGroupNode.displayValue = this.localizationService.format("NamePattern_Bracket", [ otherGroupNode.displayValue, otherString ]));
                }
            }, GroupsListPaneComponent.prototype.ensureGroupHasUniqueName = function(group, groupsToAvoidDupName) {
                var uniqueName = this.getUniqueNewName(group, groupsToAvoidDupName, group.value);
                group.displayValue = uniqueName, group.value = uniqueName;
            }, GroupsListPaneComponent.prototype.getUniqueNewName = function(targetGroupNode, groupNodes, targetName) {
                for (var newGroupName = null != targetName ? targetName : this.getDefaultGroupName(targetGroupNode.children), otherNodes = _.filter(groupNodes, function(n) {
                    return n !== targetGroupNode;
                }), otherNodesNameToNodeMap = _.keyBy(otherNodes, "displayValue"), i = 2; otherNodesNameToNodeMap[newGroupName]; ) newGroupName = newGroupName + " " + i, 
                i++;
                return newGroupName;
            }, GroupsListPaneComponent.prototype.updateGroupChildrenAndFixName = function(groupNode, nodesToAvoidDupName, updateGroupChildrenAction) {
                var groupDefaultNameBeforeUpdate = this.getUniqueNewName(groupNode, nodesToAvoidDupName), hasCustomizedName = groupNode.displayValue !== groupDefaultNameBeforeUpdate;
                updateGroupChildrenAction(), hasCustomizedName || (groupNode.displayValue = this.getUniqueNewName(groupNode, nodesToAvoidDupName), 
                groupNode.value = groupNode.displayValue);
            }, GroupsListPaneComponent.prototype.getDefaultGroupName = function(children) {
                return (0, groupUtils.wU)(_.map(children, function(node) {
                    return node.displayValue;
                }), this.localizationService);
            }, GroupsListPaneComponent.prototype.getTreeHelper = function(type) {
                return "ungrouped" === type ? this.ungroupedTreeHelper : this.groupedTreeHelper;
            }, GroupsListPaneComponent.\u0275fac = function(t) {
                return new (t || GroupsListPaneComponent)(core["\u0275\u0275directiveInject"](fesm2022_forms.sg), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](error_service.T), core["\u0275\u0275directiveInject"](group_authoring_service.RD), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](localization_service.o));
            }, GroupsListPaneComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GroupsListPaneComponent,
                selectors: [ [ "groups-list-pane" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](scrolling.N7, 5), core["\u0275\u0275viewQuery"](groups_list_pane_component_c0, 5, core.ElementRef)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx._vs = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.groupsListContainerElementRef = _t.first);
                    }
                },
                inputs: {
                    groupingListInfo: "groupingListInfo"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 32,
                vars: 43,
                consts: [ [ 1, "listPaneContainer", "twoColumnSection", 3, "formGroup" ], [ 1, "cell" ], [ "pbiLabel", "", "localize", "GroupsDialog_ValuesListTitle" ], [ "pbiInput", "", "itemSize", "24", "tabindex", "-1", 1, "valuesOrGroupsTopContainer", "valuesTopContainer", 3, "click" ], [ "role", "listbox", "aria-multiselectable", "true", "tabindex", "0", 3, "focus", "blur", "keydown" ], [ "class", "item firstLevel", "role", "option", 3, "ngClass", "click", 4, "cdkVirtualFor", "cdkVirtualForOf" ], [ "class", "item loadingMoreIndicator", "localize", "GroupsDialog_LoadingMore", 4, "ngIf" ], [ "pbiLabel", "", "localize", "GroupsDialog_GroupsTreeTitle" ], [ "pbiInput", "", 1, "valuesOrGroupsTopContainer", "groupsTopContainer" ], [ "tabindex", "-1", 1, "scrollableContainer", 3, "click" ], [ "role", "tree", "aria-multiselectable", "true", "tabindex", "0", 1, "listContainer", 3, "focus", "blur", "keydown" ], [ "allGroupsListContainer", "" ], [ "class", "groupNodeOverallContainer firstLevel", "role", "treeitem", 3, "id", "click", 4, "ngFor", "ngForOf" ], [ 1, "cell", "controlsContainer" ], [ "localize", "Group_Action", 1, "pbi-fluent-button", 3, "disabled", "click" ], [ "localize", "Ungroup", 1, "pbi-fluent-button", "ungroup", 3, "disabled", "click" ], [ "type", "checkbox", 3, "formControlName", "isCompact", "label", "disabled" ], [ 1, "pbi-icon-button", "glyphicon", "pbi-glyph-info", "glyph-mini", "infoLink", 3, "click" ], [ "role", "option", 1, "item", "firstLevel", 3, "ngClass", "click" ], [ 3, "pbiTooltip" ], [ "localize", "GroupsDialog_LoadingMore", 1, "item", "loadingMoreIndicator" ], [ "role", "treeitem", 1, "groupNodeOverallContainer", "firstLevel", 3, "id", "click" ], [ 1, "item", "groupSelfContainer", 3, "ngClass" ], [ "name", "caretright", "size", "mini", 1, "expandCollapseIcon", 3, "click" ], [ 1, "unselectable", 3, "displayName", "disableClick", "editable", "inputMatchLabelWidth", "customTooltip", "cancel", "dblclick", "onBlur" ], [ "class", "groupChildrenContainer", "role", "listbox", 4, "ngIf" ], [ "role", "listbox", 1, "groupChildrenContainer" ], [ "class", "item groupChildContainer", "role", "option", 3, "id", "ngClass", "click", 4, "ngFor", "ngForOf" ], [ "role", "option", 1, "item", "groupChildContainer", 3, "id", "ngClass", "click" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "form", 0)(1, "pbi-form-field", 1), 
                    core["\u0275\u0275element"](2, "label", 2), core["\u0275\u0275elementStart"](3, "cdk-virtual-scroll-viewport", 3), 
                    core["\u0275\u0275listener"]("click", function($event) {
                        return ctx.paneBackgroundClicked.fn({
                            $event,
                            type: "ungrouped"
                        });
                    }), core["\u0275\u0275elementStart"](4, "ul", 4), core["\u0275\u0275listener"]("focus", function($event) {
                        return ctx.paneFocused.fn({
                            $event,
                            type: "ungrouped"
                        });
                    })("blur", function($event) {
                        return ctx.paneBlured.fn({
                            $event,
                            type: "ungrouped"
                        });
                    })("keydown", function($event) {
                        return ctx.onPaneKeyDown("ungrouped", $event);
                    }), core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275pipe"](6, "localize"), 
                    core["\u0275\u0275template"](7, GroupsListPaneComponent_li_7_Template, 3, 8, "li", 5), 
                    core["\u0275\u0275pipe"](8, "async"), core["\u0275\u0275template"](9, GroupsListPaneComponent_span_9_Template, 1, 0, "span", 6), 
                    core["\u0275\u0275pipe"](10, "async"), core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275elementStart"](11, "pbi-form-field", 1), 
                    core["\u0275\u0275element"](12, "label", 7), core["\u0275\u0275elementStart"](13, "div", 8)(14, "div", 9), 
                    core["\u0275\u0275listener"]("click", function($event) {
                        return ctx.paneBackgroundClicked.fn({
                            $event,
                            type: "grouped"
                        });
                    }), core["\u0275\u0275elementStart"](15, "ul", 10, 11), core["\u0275\u0275listener"]("focus", function($event) {
                        return ctx.paneFocused.fn({
                            $event,
                            type: "grouped"
                        });
                    })("blur", function($event) {
                        return ctx.paneBlured.fn({
                            $event,
                            type: "grouped"
                        });
                    })("keydown", function($event) {
                        return ctx.onPaneKeyDown("grouped", $event);
                    }), core["\u0275\u0275pipe"](17, "async"), core["\u0275\u0275pipe"](18, "localize"), 
                    core["\u0275\u0275template"](19, GroupsListPaneComponent_li_19_Template, 5, 14, "li", 12), 
                    core["\u0275\u0275pipe"](20, "async"), core["\u0275\u0275elementEnd"]()()()(), core["\u0275\u0275elementStart"](21, "div", 13)(22, "button", 14), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.group();
                    }), core["\u0275\u0275pipe"](23, "async"), core["\u0275\u0275pipe"](24, "localize"), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](25, "button", 15), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.ungroup();
                    }), core["\u0275\u0275pipe"](26, "async"), core["\u0275\u0275pipe"](27, "localize"), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](28, "pbi-checkbox", 16), 
                    core["\u0275\u0275pipe"](29, "localize"), core["\u0275\u0275elementStart"](30, "button", 17), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.learnMoreAboutOtherGroup();
                    }), core["\u0275\u0275pipe"](31, "localize"), core["\u0275\u0275elementEnd"]()()()), 
                    2 & rf && (core["\u0275\u0275property"]("formGroup", ctx.listFormGroup), core["\u0275\u0275advance"](4), 
                    core["\u0275\u0275attribute"]("aria-activedescendant", core["\u0275\u0275pipeBind1"](5, 17, ctx.ungroupedFocusedDescription$))("aria-label", core["\u0275\u0275pipeBind1"](6, 19, "GroupsDialog_ValuesListTitle")), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("cdkVirtualForOf", core["\u0275\u0275pipeBind1"](8, 21, ctx.ungrouped$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !core["\u0275\u0275pipeBind1"](10, 23, ctx.loadColumnValuesCompleted$)), 
                    core["\u0275\u0275advance"](6), core["\u0275\u0275attribute"]("aria-activedescendant", core["\u0275\u0275pipeBind1"](17, 25, ctx.groupedFocusedDescription$))("aria-label", core["\u0275\u0275pipeBind1"](18, 27, "GroupsDialog_GroupsTreeTitle")), 
                    core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](20, 29, ctx.grouped$)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("disabled", !core["\u0275\u0275pipeBind1"](23, 31, ctx.canGroup$)), 
                    core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](24, 33, "Group_Action")), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("disabled", !core["\u0275\u0275pipeBind1"](26, 35, ctx.canUngroup$)), 
                    core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](27, 37, "Ungroup")), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("formControlName", ctx.includeOtherGroupToggleControlName)("isCompact", !0)("label", core["\u0275\u0275pipeBind1"](29, 39, "GroupsDialog_EnableOtherGroupAction"))("disabled", ctx.forceIncludeOtherGroup), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](31, 41, "Generic_LearnMore")));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, editable_label_component.V, localize_directive.X, pbi_checkbox_component.v, pbi_form_field_component.bP, pbi_form_field_component.ug, pbi_form_field_component.nm, pbi_icon_component._, pbi_tooltip_directive.V, fesm2022_forms._Y, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.sg, fesm2022_forms.u, scrolling.xd, scrolling.x0, scrolling.N7, common.AsyncPipe, localize_pipe.F ],
                styles: [ '.groupsDialogContent[_ngcontent-%COMP%]{width:720px;height:480px;display:flex;flex-direction:column}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection{display:grid;grid-template-columns:1fr 1fr;grid-gap:12px 12px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell{display:flex}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell textarea, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   select[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell select{padding:4px 8px;border-color:var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input:focus, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell textarea:focus, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell select:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input{vertical-align:middle;margin:0;padding:4px 8px;border-color:var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[readonly][_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input[readonly]{background-color:var(--colorNeutralBackgroundDisabled);color:var(--colorNeutralForegroundDisabled);pointer-events:none}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::selection, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input::selection{background:var(--colorNeutralBackgroundInverted);color:var(--colorNeutralForegroundInverted)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell label, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   label.cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection label.cell{font-size:var(--sm-font-size, 12px)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell label, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   label.cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection label.cell{font-weight:var(--font-weight-normal, 500)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-form-field.cell[_ngcontent-%COMP%]     .controls, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-form-field.cell   .controls{flex:1;display:flex}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-form-field.cell[_ngcontent-%COMP%]     .controls [pbiInput], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-form-field.cell   .controls [pbiInput]{flex:1}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown{width:100%}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button{border:1px solid var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button[disabled], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button[disabled]{background-color:var(--colorNeutralBackgroundDisabled)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button .pbi-dropdown-trigger-container, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button .pbi-dropdown-trigger-container{margin:0;padding:4px 8px}.groupsDialogContent[_ngcontent-%COMP%]   .topSection[_ngcontent-%COMP%]{margin-bottom:12px}.groupsDialogContent[_ngcontent-%COMP%]   groups-list-pane[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]   groups-bins-pan[_ngcontent-%COMP%]{flex:1}', '.listPaneContainer[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%;grid-template-rows:1fr auto}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .valuesOrGroupsTopContainer[_ngcontent-%COMP%]{border:1px solid var(--gray-60, #C8C6C4);outline:none;flex:1}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   cdk-virtual-scroll-viewport[_ngcontent-%COMP%]     .cdk-virtual-scroll-content-wrapper{width:100%;padding:2px}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   cdk-virtual-scroll-viewport[_ngcontent-%COMP%]:focus, .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   cdk-virtual-scroll-viewport[_ngcontent-%COMP%]:focus-within{border-color:var(--gray-130, #605E5C)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer[_ngcontent-%COMP%]{position:relative}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]:focus, .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]:focus-within{border-color:var(--gray-130, #605E5C)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;top:0;left:0;padding:2px;overflow-x:hidden;overflow-y:auto}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]{padding:0;margin:0}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:list-item}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   li.groupNodeOverallContainer[_ngcontent-%COMP%]{list-style:none;display:block}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   li.groupChildContainer[_ngcontent-%COMP%]{list-style:circle}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]{display:flex;flex-direction:row}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{line-height:12px}html:not([dir="rtl"])[_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{padding-right:4px}html[dir="rtl"][_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{padding-left:4px}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   pbi-icon.expandCollapseIcon[_ngcontent-%COMP%]{transform:translateY(6px)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer.role-expanded[_ngcontent-%COMP%]     .pbi-glyph-caretright{-webkit-transform:rotate(0deg);transform:rotate(0)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%]{flex:1;display:block}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%]     .textLabel{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}html:not([dir="rtl"])[_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupChildrenContainer[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupChildrenContainer[_ngcontent-%COMP%]{padding-left:36px}html[dir="rtl"][_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupChildrenContainer[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   div.valuesOrGroupsTopContainer.groupsTopContainer[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .listContainer[_ngcontent-%COMP%]   .groupChildrenContainer[_ngcontent-%COMP%]{padding-right:36px}.listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]{grid-column-start:1;grid-column-end:3;display:flex;flex-direction:row;align-items:center}.listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   button.pbi-fluent-button[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}html:not([dir="rtl"])[_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   button.pbi-fluent-button.ungroup[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   button.pbi-fluent-button.ungroup[_ngcontent-%COMP%]{margin-left:8px}html[dir="rtl"][_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   button.pbi-fluent-button.ungroup[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   button.pbi-fluent-button.ungroup[_ngcontent-%COMP%]{margin-right:8px}.listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin:0}html:not([dir="rtl"])[_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin-left:auto}html[dir="rtl"][_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin-right:auto}.listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]     input[type=checkbox]{padding:0}.listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]     label{font-weight:var(--font-weight-regular, 400)}.listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{cursor:pointer}html:not([dir="rtl"])[_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{margin-left:4px}html[dir="rtl"][_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{margin-right:4px}.listPaneContainer[_ngcontent-%COMP%]   .cell.controlsContainer[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]     .pbi-glyph-info{transform:translateY(4px)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{padding:0;outline-style:none}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{padding:0}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li.firstLevel[_ngcontent-%COMP%] > span[_ngcontent-%COMP%], .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   .groupSelfContainer[_ngcontent-%COMP%]{padding:0 8px}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li.role-selected[_ngcontent-%COMP%], .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   .role-selected[_ngcontent-%COMP%]{background-color:var(--fluent-theme-neutral-light-color, #EDEBE9)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li.role-focused[_ngcontent-%COMP%], .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   .role-focused[_ngcontent-%COMP%]{outline:dotted 1px var(--fluent-theme-neutral-dark-color, #201F1E);outline-offset:-1px}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li.role-missing[_ngcontent-%COMP%]{color:var(--gray-100, #979593)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]     editable-label .editableLabel{display:flex;align-items:center}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]     editable-label .editableLabel input{padding:0 5px;height:24px}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%], .listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:block;height:24px;line-height:24px}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .item.loadingMoreIndicator[_ngcontent-%COMP%]{text-align:center}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .pbi-icon-button[_ngcontent-%COMP%]{margin:0 4px}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .pbi-icon-button.glyph-mini[_ngcontent-%COMP%]{height:var(--sm-font-size, 12px);width:var(--sm-font-size, 12px)}.listPaneContainer[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   .pbi-icon-button[_ngcontent-%COMP%]:focus{border:none;outline-offset:2px}' ],
                changeDetection: 0
            }), GroupsListPaneComponent;
        }(rx_component.w), VerticalVirtualScrollHelper = function() {
            function VerticalVirtualScrollHelper(getVirtualScroll, itemSize) {
                this.getVirtualScroll = getVirtualScroll, this.itemSize = itemSize;
            }
            return VerticalVirtualScrollHelper.prototype.scrollItemIntoView = function(itemIndex, _overScrollBy) {
                var virtualScroll = this.getVirtualScroll(), itemCountPerPage = Math.floor(virtualScroll.getViewportSize() / this.itemSize), viewPortFirstItemIndex = Math.max(itemIndex - itemCountPerPage + 1, 0);
                virtualScroll.scrollToIndex(viewPortFirstItemIndex);
            }, VerticalVirtualScrollHelper.prototype.handleKeyDown = function(keydownItemIndex, e, changeSelectedIndex) {
                var keyHandled = !0, newIndex = keydownItemIndex, virtualScroll = this.getVirtualScroll(), itemCountPerPage = Math.floor(virtualScroll.getViewportSize() / this.itemSize);
                switch (e.code) {
                  case "PageUp":
                    newIndex = Math.max(keydownItemIndex - itemCountPerPage, 0);
                    break;

                  case "PageDown":
                    newIndex = Math.min(keydownItemIndex + itemCountPerPage, virtualScroll.getDataLength() - 1);
                    break;

                  case "End":
                    newIndex = virtualScroll.getDataLength() - 1;
                    break;

                  case "Home":
                    newIndex = 0;
                    break;

                  case "ArrowUp":
                    newIndex = Math.max(keydownItemIndex - 1, 0);
                    break;

                  case "ArrowDown":
                    newIndex = Math.min(keydownItemIndex + 1, virtualScroll.getDataLength() - 1);
                    break;

                  default:
                    keyHandled = !1;
                }
                return null != newIndex && newIndex !== keydownItemIndex && (changeSelectedIndex(newIndex), 
                this.scrollItemIntoView(newIndex)), keyHandled;
            }, VerticalVirtualScrollHelper.prototype.onScroll = function(_scrollHandler) {}, 
            VerticalVirtualScrollHelper;
        }(), MustHaveGroupNotEqualToOtherGroupValidator = function() {
            function MustHaveGroupNotEqualToOtherGroupValidator() {}
            return MustHaveGroupNotEqualToOtherGroupValidator.createValidator = function(groups$, destroy$) {
                return function(control) {
                    return MustHaveGroupNotEqualToOtherGroupValidator.registeredControls.has(control) || (MustHaveGroupNotEqualToOtherGroupValidator.registeredControls.add(control), 
                    groups$.pipe((0, takeUntil.R)(destroy$), (0, tap.b)(function(_value) {
                        control.updateValueAndValidity();
                    })).subscribe()), _.find(groups$.value, function(g) {
                        return !g.isOther;
                    }) ? null : {
                        noNormalGroup: !0
                    };
                };
            }, MustHaveGroupNotEqualToOtherGroupValidator.registeredControls = new Set, MustHaveGroupNotEqualToOtherGroupValidator;
        }();
        function isGroupNode(node) {
            return !_.isEmpty(null == node ? void 0 : node.children);
        }
        function isColumnValueNode(node) {
            return !!node && !isGroupNode(node);
        }
        function sortNodes(nodes) {
            _.isEmpty(nodes) || nodes.sort(compareNodes);
        }
        function compareNodes(a, b) {
            if (isGroupNode(a) !== isGroupNode(b)) return debug.fF.assertFail("Expect to compare nodes of same type (both group or both value"), 
            -1;
            if (isGroupNode(a) && isGroupNode(b)) {
                if (!a.isOther && b.isOther) return -1;
                if (a.isOther && !b.isOther) return 1;
            }
            return isColumnValueNode(a) && isColumnValueNode(b) ? a.sortKey < b.sortKey ? -1 : a === b ? 0 : 1 : (a.displayValue || "").localeCompare(b.displayValue || "");
        }
        function getDefaultGroupingColumnName(groupMode, sourcePropertyName, localizationService) {
            return localizationService.format(1 === groupMode ? "GroupsDialog_NamePattern" : "BinsDialog_NamePattern", [ sourcePropertyName ]);
        }
        var semanticGroupingDefinition = __webpack_require__(47755), fieldExprPattern1 = __webpack_require__(42111), fieldExprPatternBuilder = __webpack_require__(76001), types_valueType = __webpack_require__(80777), template_dialog_payload_service = __webpack_require__(67489), startWith = __webpack_require__(22318), conceptual_schema_proxy_service = __webpack_require__(26898), grouping_design_state_service = __webpack_require__(23983), template_dialog_component = __webpack_require__(96777), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529);
        function GroupsDialogComponent_pbi_dropdown_item_15_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 13)(1, "span"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var displayGroupMode_r4 = ctx.$implicit;
                core["\u0275\u0275property"]("value", displayGroupMode_r4), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275textInterpolate"](displayGroupMode_r4.displayName);
            }
        }
        function GroupsDialogComponent_pbi_form_field_16_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 13)(1, "span"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var displayBinMode_r6 = ctx.$implicit;
                core["\u0275\u0275property"]("value", displayBinMode_r6), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275textInterpolate"](displayBinMode_r6.displayName);
            }
        }
        function GroupsDialogComponent_pbi_form_field_16_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-form-field", 2), core["\u0275\u0275element"](1, "label", 14), 
            core["\u0275\u0275elementStart"](2, "pbi-dropdown", 15)(3, "pbi-dropdown-trigger")(4, "span"), 
            core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](6, GroupsDialogComponent_pbi_form_field_16_pbi_dropdown_item_6_Template, 3, 2, "pbi-dropdown-item", 9), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var tmp_0_0, ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate"](null == (tmp_0_0 = ctx_r1.dialogForm.get("displayBinModeSelection")) || null == tmp_0_0.value ? null : tmp_0_0.value.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r1.displayBinModes);
            }
        }
        function GroupsDialogComponent_groups_list_pane_17_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "groups-list-pane", 16), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("formGroup", ctx_r2.dialogForm)("groupingListInfo", ctx_r2.groupingListInfo);
            }
        }
        function GroupsDialogComponent_groups_bins_pane_18_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "groups-bins-pane", 17), 2 & rf) {
                var tmp_1_0, ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("formGroup", ctx_r3.dialogForm)("binMode", null == (tmp_1_0 = ctx_r3.dialogForm.get("displayBinModeSelection")) || null == tmp_1_0.value ? null : tmp_1_0.value.value)("binningColumnInfo", ctx_r3.binningColumnInfo);
            }
        }
        var GroupsDialogComponent = function() {
            function GroupsDialogComponent(conceptualSchemaProxy, dataSourcesService, groupAuthoringService, groupingDesignStateService, highContrastCssGenerationService, localizationService, templateDialogPayload) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSourcesService = dataSourcesService, 
                this.groupAuthoringService = groupAuthoringService, this.groupingDesignStateService = groupingDesignStateService, 
                this.highContrastCssGenerationService = highContrastCssGenerationService, this.localizationService = localizationService, 
                this.templateDialogPayload = templateDialogPayload, this.destroy$ = new Subject.xQ, 
                this.initializeHighContrastRules();
            }
            return GroupsDialogComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, _b;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return (0, groupUtils.MF)(this.dataSourcesService), this.groupModeToDisplayGroupModeDict = ((_a = {})[1] = {
                                value: 1,
                                displayName: this.localizationService.get("List")
                            }, _a[2] = {
                                value: 2,
                                displayName: this.localizationService.get("GroupsDialog_ModeBins")
                            }, _a), this.binModeToDisplayBinModeDict = ((_b = {})[1] = {
                                value: 1,
                                displayName: this.localizationService.get("BinsDialog_ModeByCount")
                            }, _b[0] = {
                                value: 0,
                                displayName: this.localizationService.get("BinsDialog_ModeBySize")
                            }, _b), [ 4, this.initialize() ];

                          case 1:
                            return _c.sent(), [ 2 ];
                        }
                    });
                });
            }, GroupsDialogComponent.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete();
            }, GroupsDialogComponent.prototype.initialize = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.groupNameInput = new fesm2022_forms.p4("", [ function(control) {
                                var _a;
                                return _.isEmpty(null === (_a = control.value) || void 0 === _a ? void 0 : _a.trim()) ? {
                                    errorType: "emptyName"
                                } : null;
                            } ]), this.displayGroupModeSelection = new fesm2022_forms.p4, this.displayBinModeSelection = new fesm2022_forms.p4, 
                            this.dialogForm = new fesm2022_forms.nJ({
                                groupNameInput: this.groupNameInput,
                                displayGroupModeSelection: this.displayGroupModeSelection,
                                displayBinModeSelection: this.displayBinModeSelection
                            }), this.dialogForm.statusChanges.pipe((0, filter.h)(function(status) {
                                return "VALID" === status || "INVALID" === status;
                            })).subscribe(function(status) {
                                _this.templateDialogPayload.setOkButtonState("INVALID" === status);
                            }), this.templateDialogPayload.onOkButtonClick = function() {
                                return _this.onCommit();
                            }, _a = this, [ 4, this.parseInitialLoad() ];

                          case 1:
                            return _a.info = _b.sent(), this.initializeNamesInfo(this.info), this.initializeGroupModesInfo(this.info), 
                            this.initializeListModeInfo(this.info), this.initializeBinningModeInfo(this.info), 
                            [ 2 ];
                        }
                    });
                });
            }, GroupsDialogComponent.prototype.parseInitialLoad = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dialogArgs, schemaName, entityName, schema, conceptualSchema, conceptualEntity, sourcePropertyValueType, groupProperty, groupPropertyValueType, groupingDefinition, groupedColumns_1, sourceFieldExpr, sourceFieldName, sourceProperty;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return schemaName = (dialogArgs = this.templateDialogPayload.input).schema, entityName = dialogArgs.entity, 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ];

                          case 1:
                            return schema = _a.sent(), conceptualSchema = schema.schema(schemaName), conceptualEntity = conceptualSchema.entities.withName(entityName), 
                            dialogArgs.isNew ? (sourceProperty = conceptualEntity.properties.withName(dialogArgs.sourcePropertyName), 
                            sourcePropertyValueType = getEnsuredValueType(sourceProperty), [ 2, {
                                schema: conceptualSchema,
                                entity: conceptualEntity,
                                groupDataType: (0, groupUtils.SK)(sourcePropertyValueType),
                                sourceProperty,
                                sourcePropertyValueType
                            } ]) : (groupProperty = conceptualEntity.properties.withName(dialogArgs.name), groupPropertyValueType = getEnsuredValueType(groupProperty), 
                            groupingDefinition = this.groupingDesignStateService.getGroupingDesignState(entityName, groupProperty.name), 
                            groupedColumns_1 = (0, groupUtils.ZP)(groupProperty.column.groupingMetadata, (0, 
                            sqExpr.nw)(schemaName, entityName)), debug.fF.assert(function() {
                                return _.size(groupedColumns_1) <= 1;
                            }, "No more than 1 grouped column is supported noew"), sourceFieldExpr = (0, fieldExprPatternBuilder.Q)(groupedColumns_1[0]), 
                            sourceFieldName = (0, fieldExprPattern1.Hp)(sourceFieldExpr), sourceProperty = conceptualEntity.properties.withName(sourceFieldName), 
                            [ 2, {
                                schema: conceptualSchema,
                                entity: conceptualEntity,
                                groupDataType: (0, groupUtils.SK)(groupPropertyValueType),
                                sourceProperty,
                                sourcePropertyValueType: getEnsuredValueType(sourceProperty),
                                existing: {
                                    groupProperty,
                                    groupPropertyValueType,
                                    definition: groupingDefinition,
                                    binningInfo: getExistingBinningInfo(groupingDefinition)
                                }
                            } ]);
                        }
                    });
                });
            }, GroupsDialogComponent.prototype.initializeGroupModesInfo = function(info) {
                var initialGroupMode, groupingDefinition, groupDataType, _this = this, forNewGroup = !info.existing;
                this.displayGroupModes = [], forNewGroup ? (this.displayGroupModes.push(this.groupModeToDisplayGroupModeDict[1]), 
                0 !== info.groupDataType && this.displayGroupModes.push(this.groupModeToDisplayGroupModeDict[2]), 
                initialGroupMode = getNewGroupDefaultMode(info.groupDataType)) : (groupDataType = info.groupDataType, 
                initialGroupMode = (null == (groupingDefinition = info.existing.definition) ? void 0 : groupingDefinition.binItem) ? 2 : _.isEmpty(null == groupingDefinition ? void 0 : groupingDefinition.groupItems) ? getNewGroupDefaultMode(groupDataType) : 1, 
                this.displayGroupModes.push(this.groupModeToDisplayGroupModeDict[initialGroupMode])), 
                this.displayGroupModeSelection.setValue(this.groupModeToDisplayGroupModeDict[initialGroupMode]), 
                debug.fF.assert(function() {
                    return !!_.find(_this.displayGroupModes, function(displayMode) {
                        return displayMode.value === initialGroupMode;
                    });
                }, "selected group mode has to be one of the displayed modes"), this.isGroupModeSelectionDisabled = !forNewGroup || this.displayGroupModes.length < 2;
            }, GroupsDialogComponent.prototype.initializeBinningModeInfo = function(info) {
                var _a, _b, _this = this;
                if (debug.fF.assert(function() {
                    return !_.isEmpty(_this.displayGroupModes);
                }, "this.displayGroupModes should already been initialized"), _.find(this.displayGroupModes, function(option) {
                    return 2 === option.value;
                })) {
                    var enableBinByCountMode = !!(null === (_a = info.entity.capabilities) || void 0 === _a ? void 0 : _a.supportsBinByCount) && !!info.schema.capabilities.canEdit;
                    this.displayBinModes = [ this.binModeToDisplayBinModeDict[0] ], enableBinByCountMode && this.displayBinModes.push(this.binModeToDisplayBinModeDict[1]);
                    var initialBinMode, existBinningInfo = null === (_b = info.existing) || void 0 === _b ? void 0 : _b.binningInfo;
                    info.existing ? (debug.fF.assert(function() {
                        return !!existBinningInfo;
                    }, "There should be existing binning info"), enableBinByCountMode || 1 !== existBinningInfo.mode || (existBinningInfo = {
                        mode: 0,
                        binSizeUnit: void 0
                    }), initialBinMode = existBinningInfo.mode) : initialBinMode = 0, this.displayBinModeSelection.setValue(this.binModeToDisplayBinModeDict[initialBinMode]), 
                    this.binningColumnInfo = {
                        isNew: !info.existing,
                        schemaName: info.schema.name,
                        entityName: info.entity.name,
                        sourcePropertyName: this.sourcePropertyName,
                        valueType: info.existing ? info.existing.groupPropertyValueType : info.sourcePropertyValueType,
                        groupDataType: info.groupDataType,
                        supportBinByCountMode: enableBinByCountMode
                    }, existBinningInfo && (0 === existBinningInfo.mode ? this.binningColumnInfo.binSizeUnit = existBinningInfo.binSizeUnit : this.binningColumnInfo.binCount = existBinningInfo.binCount);
                }
            }, GroupsDialogComponent.prototype.initializeListModeInfo = function(info) {
                var _a;
                debug.fF.assertValue(this.sourcePropertyName, "This should be called after this.sourcePropertyName is set"), 
                this.groupingListInfo = {
                    schema: info.schema.name,
                    entity: info.entity,
                    existing: info.existing ? {
                        groupProperty: info.existing.groupProperty,
                        groups: null === (_a = info.existing.definition) || void 0 === _a ? void 0 : _a.groupItems
                    } : void 0,
                    sourceProperty: info.sourceProperty,
                    sourcePropertyValueType: info.sourcePropertyValueType
                };
            }, GroupsDialogComponent.prototype.initializeNamesInfo = function(info) {
                var _a, _this = this;
                this.sourcePropertyName = info.sourceProperty.name, info.existing ? this.groupNameInput.setValue(info.existing.groupProperty.name) : (this.groupModeToDefaultGroupNameDict = ((_a = {})[1] = getDefaultGroupingColumnName(1, this.sourcePropertyName, this.localizationService), 
                _a[2] = getDefaultGroupingColumnName(2, this.sourcePropertyName, this.localizationService), 
                _a), debug.fF.assert(function() {
                    var _a;
                    return !(null === (_a = _this.displayGroupModeSelection) || void 0 === _a ? void 0 : _a.value);
                }, "We need to call this BEFORE first time displayGroupModeSelection value is set"), 
                this.displayGroupModeSelection.valueChanges.pipe((0, startWith.O)(null), (0, pairwise.G)()).subscribe(function(_a) {
                    var prevDisplay = _a[0], currDisplay = _a[1];
                    currDisplay && _this.checkToUpdateGroupName(null == prevDisplay ? void 0 : prevDisplay.value, currDisplay.value);
                }));
            }, GroupsDialogComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule('.themeableElement .groupsDialogContent input[readonly=""]', "{ color: @disabledTextColor !important; border-color: @disabledTextColor !important; }");
            }, GroupsDialogComponent.prototype.checkToUpdateGroupName = function(previousMode, newMode) {
                var _a, _this = this;
                debug.fF.assert(function() {
                    return !_.isEmpty(_this.sourcePropertyName);
                }, "Expect this to be called after this.sourcePropertyName is set"), debug.fF.assert(function() {
                    return !_.isEmpty(_this.groupModeToDefaultGroupNameDict);
                }, "Expect this to be called after this.groupModeToDefaultGroupNameDict is set");
                var updateName = !0;
                previousMode !== newMode && null != previousMode && this.groupModeToDefaultGroupNameDict[previousMode] !== (null === (_a = this.groupNameInput.value) || void 0 === _a ? void 0 : _a.trim()) && (updateName = !1), 
                updateName && this.groupNameInput.setValue(this.groupModeToDefaultGroupNameDict[newMode]);
            }, GroupsDialogComponent.prototype.onCommit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var groupMode, definition, schema, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.templateDialogPayload.setOkButtonState(!0), debug.fF.assertValue(this.displayGroupModeSelection.value, "this.displayGroupModeSelection.value should be defined at this point"), 
                            definition = 1 === (groupMode = this.displayGroupModeSelection.value.value) ? this.listPane.getDefinition() : this.binsPane.getDefinition(), 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ];

                          case 1:
                            return schema = _a.sent(), [ 2, new Promise(function(resolve, _reject) {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    var isNew, forBinning, schemaName, entityName, currentGroupName, changes, createNewChange, originalGroupName, updateDefinitionChange, telemetryGroupType, action;
                                    return (0, tslib_es6.__generator)(this, function(_b) {
                                        switch (_b.label) {
                                          case 0:
                                            if (!this.groupAuthoringService.core.validateGroupDefinition(schema, definition)) return this.templateDialogPayload.setOkButtonState(!1), 
                                            [ 2 ];
                                            1 === groupMode ? this.listPane.logTelemetryOnCommit(definition) : this.binsPane.logTelemetryOnCommit(), 
                                            forBinning = 2 === groupMode, schemaName = this.info.schema.name, entityName = this.info.entity.name, 
                                            currentGroupName = this.groupNameInput.value, changes = [], (isNew = !this.info.existing) ? (createNewChange = {
                                                schema: schemaName,
                                                entity: entityName,
                                                name: currentGroupName,
                                                definition: (0, semanticGroupingDefinition.qC)(definition)
                                            }, changes.push(forBinning ? {
                                                newBins: createNewChange
                                            } : {
                                                newGroups: createNewChange
                                            })) : (updateDefinitionChange = {
                                                schema: schemaName,
                                                entity: entityName,
                                                property: originalGroupName = this.info.existing.groupProperty.name,
                                                definition: (0, semanticGroupingDefinition.qC)(definition)
                                            }, changes.push(forBinning ? {
                                                updateBinsMetadata: updateDefinitionChange
                                            } : {
                                                updateGroupsDefinition: updateDefinitionChange
                                            }), currentGroupName !== originalGroupName && changes.push({
                                                propertyRename: {
                                                    schema: schemaName,
                                                    entity: entityName,
                                                    before: originalGroupName,
                                                    after: currentGroupName,
                                                    objectType: "Column"
                                                }
                                            })), telemetryGroupType = forBinning ? "Bin" : "List", action = isNew ? "Create" : "Update", 
                                            _b.label = 1;

                                          case 1:
                                            return _b.trys.push([ 1, 3, , 4 ]), [ 4, this.groupAuthoringService.core.applyModelChanges(telemetryGroupType, action, changes) ];

                                          case 2:
                                            return _b.sent(), resolve({
                                                groupMode
                                            }), [ 3, 4 ];

                                          case 3:
                                            return _b.sent(), this.templateDialogPayload.setOkButtonState(!1), [ 3, 4 ];

                                          case 4:
                                            return [ 2 ];
                                        }
                                    });
                                });
                            }) ];
                        }
                    });
                });
            }, GroupsDialogComponent.\u0275fac = function(t) {
                return new (t || GroupsDialogComponent)(core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](group_authoring_service.RD), core["\u0275\u0275directiveInject"](grouping_design_state_service.AA), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x));
            }, GroupsDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GroupsDialogComponent,
                selectors: [ [ "groups-dialog" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](GroupsListPaneComponent, 5), core["\u0275\u0275viewQuery"](GroupsBinsPaneComponent, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.listPane = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.binsPane = _t.first);
                    }
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 19,
                vars: 8,
                consts: [ [ 1, "groupsDialogContent", 3, "formGroup" ], [ 1, "topSection", "twoColumnSection" ], [ 1, "cell" ], [ "pbiLabel", "", "for", "name-input", "localize", "Name" ], [ "pbiInput", "", "required", "", "id", "name-input", "cdkFocusInitial", "", "formControlName", "groupNameInput", "spellcheck", "false" ], [ "pbiLabel", "", "for", "source-property-name", "localize", "Field" ], [ "pbiInput", "", "readonly", "", "id", "source-property-name", "spellcheck", "false", 3, "value" ], [ "pbiLabel", "", "localize", "GroupsDialog_GroupType" ], [ "pbiInput", "", "formControlName", "displayGroupModeSelection", 3, "isDisabled" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ "class", "cell", 4, "ngIf" ], [ 3, "formGroup", "groupingListInfo", 4, "ngIf" ], [ 3, "formGroup", "binMode", "binningColumnInfo", 4, "ngIf" ], [ 3, "value" ], [ "pbiLabel", "", "localize", "GroupsDialog_BinType" ], [ "pbiInput", "", "formControlName", "displayBinModeSelection" ], [ 3, "formGroup", "groupingListInfo" ], [ 3, "formGroup", "binMode", "binningColumnInfo" ] ],
                template: function(rf, ctx) {
                    var tmp_3_0, tmp_5_0, tmp_6_0, tmp_7_0;
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "form", 0)(2, "div", 1)(3, "pbi-form-field", 2), 
                    core["\u0275\u0275element"](4, "label", 3)(5, "input", 4), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275elementStart"](6, "pbi-form-field", 2), core["\u0275\u0275element"](7, "label", 5)(8, "input", 6), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](9, "pbi-form-field", 2), 
                    core["\u0275\u0275element"](10, "label", 7), core["\u0275\u0275elementStart"](11, "pbi-dropdown", 8)(12, "pbi-dropdown-trigger")(13, "span"), 
                    core["\u0275\u0275text"](14), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](15, GroupsDialogComponent_pbi_dropdown_item_15_Template, 3, 2, "pbi-dropdown-item", 9), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](16, GroupsDialogComponent_pbi_form_field_16_Template, 7, 2, "pbi-form-field", 10), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](17, GroupsDialogComponent_groups_list_pane_17_Template, 1, 2, "groups-list-pane", 11), 
                    core["\u0275\u0275template"](18, GroupsDialogComponent_groups_bins_pane_18_Template, 1, 3, "groups-bins-pane", 12), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("formGroup", ctx.dialogForm), core["\u0275\u0275advance"](7), 
                    core["\u0275\u0275property"]("value", ctx.sourcePropertyName), core["\u0275\u0275advance"](3), 
                    core["\u0275\u0275property"]("isDisabled", ctx.isGroupModeSelectionDisabled), core["\u0275\u0275advance"](3), 
                    core["\u0275\u0275textInterpolate"](null == (tmp_3_0 = ctx.dialogForm.get("displayGroupModeSelection")) || null == tmp_3_0.value ? null : tmp_3_0.value.displayName), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx.displayGroupModes), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", 2 === (null == (tmp_5_0 = ctx.dialogForm.get("displayGroupModeSelection")) || null == tmp_5_0.value ? null : tmp_5_0.value.value)), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", 1 === (null == (tmp_6_0 = ctx.dialogForm.get("displayGroupModeSelection")) || null == tmp_6_0.value ? null : tmp_6_0.value.value)), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", 2 === (null == (tmp_7_0 = ctx.dialogForm.get("displayGroupModeSelection")) || null == tmp_7_0.value ? null : tmp_7_0.value.value)));
                },
                dependencies: [ common.NgForOf, common.NgIf, template_dialog_component.J, localize_directive.X, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_form_field_component.bP, pbi_form_field_component.ug, pbi_form_field_component.nm, fesm2022_forms._Y, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.Q7, fesm2022_forms.sg, fesm2022_forms.u, GroupsBinsPaneComponent, GroupsListPaneComponent ],
                styles: [ '.groupsDialogContent[_ngcontent-%COMP%]{width:720px;height:480px;display:flex;flex-direction:column}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection{display:grid;grid-template-columns:1fr 1fr;grid-gap:12px 12px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell{display:flex}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell textarea, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   select[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell select{padding:4px 8px;border-color:var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input:focus, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell textarea:focus, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell select:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input{vertical-align:middle;margin:0;padding:4px 8px;border-color:var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[readonly][_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input[readonly]{background-color:var(--colorNeutralBackgroundDisabled);color:var(--colorNeutralForegroundDisabled);pointer-events:none}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::selection, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input::selection{background:var(--colorNeutralBackgroundInverted);color:var(--colorNeutralForegroundInverted)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell label, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell input, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   label.cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection label.cell{font-size:var(--sm-font-size, 12px)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   .cell[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection .cell label, .groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   label.cell[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection label.cell{font-weight:var(--font-weight-normal, 500)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-form-field.cell[_ngcontent-%COMP%]     .controls, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-form-field.cell   .controls{flex:1;display:flex}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-form-field.cell[_ngcontent-%COMP%]     .controls [pbiInput], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-form-field.cell   .controls [pbiInput]{flex:1}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown{width:100%}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button{border:1px solid var(--gray-60, #C8C6C4)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button:focus, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button:focus{border-color:var(--gray-130, #605E5C)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button[disabled], .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button[disabled]{background-color:var(--colorNeutralBackgroundDisabled)}.groupsDialogContent[_ngcontent-%COMP%]   .twoColumnSection[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]     button .pbi-dropdown-trigger-container, .groupsDialogContent[_ngcontent-%COMP%]     .twoColumnSection pbi-dropdown   button .pbi-dropdown-trigger-container{margin:0;padding:4px 8px}.groupsDialogContent[_ngcontent-%COMP%]   .topSection[_ngcontent-%COMP%]{margin-bottom:12px}.groupsDialogContent[_ngcontent-%COMP%]   groups-list-pane[_ngcontent-%COMP%], .groupsDialogContent[_ngcontent-%COMP%]   groups-bins-pan[_ngcontent-%COMP%]{flex:1}' ],
                changeDetection: 0
            }), GroupsDialogComponent;
        }();
        function getExistingBinningInfo(groupingDefinition) {
            var binItem = null == groupingDefinition ? void 0 : groupingDefinition.binItem;
            if (binItem) if ((0, sqExprStaticMembers.RN)(binItem)) {
                var sourceExpr = binItem.source;
                if ((0, sqExprStaticMembers.P4)(sourceExpr)) return {
                    mode: 1,
                    binCount: sourceExpr.count
                };
                debug.fF.assertFail("When binItem is of type SQMemberExpr, expect binItem.source is isDiscretize");
            } else {
                if ((0, sqExprStaticMembers.xb)(binItem)) {
                    var timeUnit = binItem.timeUnit;
                    return {
                        mode: 0,
                        binSizeUnit: {
                            size: binItem.size,
                            unit: null != timeUnit ? (0, groupUtils.rU)(timeUnit) : 0
                        }
                    };
                }
                debug.fF.assertFail("Expect binItem to be either SQMemberExpr or SQFloorExpr");
            }
        }
        function getNewGroupDefaultMode(groupDataType) {
            return 0 === groupDataType ? 1 : 2;
        }
        function getEnsuredValueType(property) {
            var valueType = property.type;
            return valueType.underlyingType && (valueType = types_valueType.Ge.fromExtendedType(valueType.underlyingType)), 
            valueType;
        }
        var localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), editable_label_module = __webpack_require__(16987), pbi_checkbox_module = __webpack_require__(47913), pbi_dropdown_module = __webpack_require__(6015), pbi_form_field_module = __webpack_require__(14525), pbi_icon_module = __webpack_require__(93367), pbi_tooltip_module = __webpack_require__(16095), GroupsDialogModule = function() {
            function GroupsDialogModule() {}
            return GroupsDialogModule.\u0275fac = function(t) {
                return new (t || GroupsDialogModule);
            }, GroupsDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: GroupsDialogModule
            }), GroupsDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: groups_dialog_identifier_component.i,
                    componentType: GroupsDialogComponent
                } ]), editable_label_module.w, localization_module.v, pbi_checkbox_module.V, pbi_dropdown_module.C, pbi_form_field_module.g, pbi_icon_module.U, pbi_tooltip_module.Z, fesm2022_forms.UX, scrolling.Cl ]
            }), GroupsDialogModule;
        }();
    },
    45074: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            bP: function() {
                return PbiFormFieldComponent;
            },
            nm: function() {
                return PbiInputLabelDirective;
            },
            uC: function() {
                return PbiInputErrorDirective;
            },
            ug: function() {
                return PbiInputDirective;
            }
        });
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4437), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _c0 = [ [ [ "", "pbiLabel", "" ] ], [ [ "", "pbiInput", "" ] ], [ [ "", "pbiInputButton", "" ] ], [ [ "", "pbiInputError", "" ] ] ], _c1 = [ "[pbiLabel]", "[pbiInput]", "[pbiInputButton]", "[pbiInputError]" ], pbiInputIdCounter = 0, PbiInputDirective = function() {
            function PbiInputDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputDirective.\u0275fac = function(t) {
                return new (t || PbiInputDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputDirective,
                selectors: [ [ "", "pbiInput", "" ] ],
                hostAttrs: [ "autocomplete", "off" ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("aria-required", ctx.required || null)("aria-describedby", null == ctx.formField.error ? null : ctx.formField.error.id)("aria-invalid", ctx.formField.error ? "true" : "false");
                },
                inputs: {
                    required: "required"
                }
            }), PbiInputDirective;
        }(), PbiInputLabelDirective = function() {
            function PbiInputLabelDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputLabelDirective.\u0275fac = function(t) {
                return new (t || PbiInputLabelDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputLabelDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputLabelDirective,
                selectors: [ [ "", "pbiLabel", "" ] ],
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-label-required", null != ctx.formField.input.required);
                }
            }), PbiInputLabelDirective;
        }(), PbiInputErrorDirective = function() {
            function PbiInputErrorDirective() {
                this.id = "pbi-input-error-id-".concat(pbiInputIdCounter++);
            }
            return PbiInputErrorDirective.\u0275fac = function(t) {
                return new (t || PbiInputErrorDirective);
            }, PbiInputErrorDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputErrorDirective,
                selectors: [ [ "", "pbiInputError", "" ] ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("id", ctx.id), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-input-error", !0));
                }
            }), PbiInputErrorDirective;
        }(), PbiFormFieldComponent = function() {
            function PbiFormFieldComponent(renderer) {
                this.renderer = renderer, this._compact = !1;
            }
            return Object.defineProperty(PbiFormFieldComponent.prototype, "compact", {
                get: function() {
                    return this._compact;
                },
                set: function(value) {
                    this._compact = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.Ig)(value);
                },
                enumerable: !1,
                configurable: !0
            }), PbiFormFieldComponent.prototype.ngAfterContentInit = function() {
                if (this.input && this.label) {
                    var id = "pbi-input-id-".concat(pbiInputIdCounter++);
                    this.renderer.setAttribute(this.input.elementRef.nativeElement, "id", id), this.renderer.setAttribute(this.label.elementRef.nativeElement, "for", id);
                }
            }, PbiFormFieldComponent.\u0275fac = function(t) {
                return new (t || PbiFormFieldComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
            }, PbiFormFieldComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: PbiFormFieldComponent,
                selectors: [ [ "pbi-form-field" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    if (1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputLabelDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputErrorDirective, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.input = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.label = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.error = _t.first);
                    }
                },
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-compact-form-field", ctx.compact);
                },
                inputs: {
                    compact: "compact"
                },
                ngContentSelectors: _c1,
                decls: 5,
                vars: 0,
                consts: [ [ 1, "controls" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projectionDef"](_c0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](0), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementStart"](1, "div", 0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](2, 1), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](3, 2), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](4, 3));
                },
                styles: [ '[_nghost-%COMP%]{display:flex;flex-direction:column;--input-border-color: var(--gray-110);--input-foreground: var(--gray-140);--disabled-input-background: var(--gray-20);--disabled-input-border-color: var(--gray-60);--disabled-input-foreground: var(--gray-90);--focused-input-border-color: var(--gray-130);--focused-input-foreground: var(--gray-180);--error-color: var(--fluent-theme-error-dark-color)}[data-legacy-theming=false]   [_nghost-%COMP%]{--input-border-color: var(--colorNeutralStroke1);--input-foreground: var(--colorNeutralForeground1);--disabled-input-background: var(--colorNeutralBackgroundDisabled);--disabled-input-border-color: var(--colorNeutralStrokeDisabled);--disabled-input-foreground: var(--colorNeutralForegroundDisabled);--focused-input-border-color: var(--colorNeutralStrokeFocus2);--focused-input-foreground: var(--colorNeutralForeground1);--error-color: var(--fluent-theme-error-dark-color)}.pbi-form-field-inline[_nghost-%COMP%] {flex-direction:row;align-items:center;justify-content:space-between}.pbi-form-field-inline[_nghost-%COMP%]  label{margin:0 8px 0 0}.pbi-form-field-inline[_nghost-%COMP%]  .controls{flex-grow:1;justify-content:flex-end}.pbi-compact-form-field[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.pbi-compact-form-field[_nghost-%COMP%]  input{height:28px;padding:4px 6px}.pbi-compact-form-field[_nghost-%COMP%]  textarea{padding:4px 6px}[_nghost-%COMP%]  *{box-sizing:border-box}[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);margin:0 0 4px}[_nghost-%COMP%]  label.pbi-label-required:after{content:"*";margin-left:4px;color:var(--error-color)}[_nghost-%COMP%]  .controls{display:flex}[_nghost-%COMP%]  .controls>*:not(:last-child){margin-right:8px}[_nghost-%COMP%]  input{height:32px}[_nghost-%COMP%]  textarea{resize:none}[_nghost-%COMP%]  input, [_nghost-%COMP%]  textarea{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);width:100%;border-radius:2px;border:1px solid var(--input-border-color);color:var(--input-foreground);outline:none;padding:8px 6px}[_nghost-%COMP%]  input[disabled], [_nghost-%COMP%]  textarea[disabled], [_nghost-%COMP%]  input[aria-disabled=true], [_nghost-%COMP%]  textarea[aria-disabled=true]{background-color:var(--disabled-input-background);border-color:var(--disabled-input-border-color);color:var(--disabled-input-foreground)}[_nghost-%COMP%]  input:focus, [_nghost-%COMP%]  textarea:focus{border-color:var(--focused-input-border-color);color:var(--focused-input-foreground)}[_nghost-%COMP%]  [pbiInput][aria-invalid=true]{border-color:var(--error-color)}[_nghost-%COMP%]  .pbi-input-error{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);margin:4px 0 0;color:var(--error-color)}' ],
                changeDetection: 0
            }), PbiFormFieldComponent;
        }();
    }
} ]);