"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ 4 ], {
    58698: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            c: function() {
                return LabelsBehavior;
            }
        });
        var _common_interactivityUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30237), LabelsBehavior = function() {
            function LabelsBehavior() {}
            return LabelsBehavior.prototype.bindEvents = function(options, selectionHandler, dataPointNavigationManagerWithKey, formatMode) {
                this.labelItems = options.labelItems, formatMode ? (0, _common_interactivityUtils__WEBPACK_IMPORTED_MODULE_0__.FO)(this.labelItems) : (0, 
                _common_interactivityUtils__WEBPACK_IMPORTED_MODULE_0__.YG)(this.labelItems, selectionHandler);
            }, LabelsBehavior.prototype.renderSelection = function(hasSelection) {
                this.labelItems.styles(hasSelection ? {
                    opacity: function(d) {
                        return d.selected ? LabelsBehavior.DefaultLabelOpacity : LabelsBehavior.DimmedLabelOpacity;
                    }
                } : {
                    opacity: LabelsBehavior.DefaultLabelOpacity
                });
            }, LabelsBehavior.DefaultLabelOpacity = 1, LabelsBehavior.DimmedLabelOpacity = .6, 
            LabelsBehavior;
        }();
    },
    3087: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            t: function() {
                return zoomProps;
            }
        });
        var zoomProps = {
            show: {
                objectName: "zoom",
                propertyName: "show"
            },
            showOnValueAxis: {
                objectName: "zoom",
                propertyName: "showOnValueAxis"
            },
            valueMin: {
                objectName: "zoom",
                propertyName: "valueMin"
            },
            valueMax: {
                objectName: "zoom",
                propertyName: "valueMax"
            },
            valueSize: {
                objectName: "zoom",
                propertyName: "valueSize"
            },
            showOnCategoryAxis: {
                objectName: "zoom",
                propertyName: "showOnCategoryAxis"
            },
            categoryMin: {
                objectName: "zoom",
                propertyName: "categoryMin"
            },
            categoryMax: {
                objectName: "zoom",
                propertyName: "categoryMax"
            },
            categorySize: {
                objectName: "zoom",
                propertyName: "categorySize"
            },
            showOnValueSecAxis: {
                objectName: "zoom",
                propertyName: "showOnValueSecAxis"
            },
            valueSecMin: {
                objectName: "zoom",
                propertyName: "valueSecMin"
            },
            valueSecMax: {
                objectName: "zoom",
                propertyName: "valueSecMax"
            },
            valueSecSize: {
                objectName: "zoom",
                propertyName: "valueSecSize"
            },
            showLabels: {
                objectName: "zoom",
                propertyName: "showLabels"
            },
            showTooltip: {
                objectName: "zoom",
                propertyName: "showTooltip"
            }
        };
    },
    67918: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            HL: function() {
                return enumerateAnomalyObjectInstances;
            }
        });
        var tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), selector = __webpack_require__(32379), dataRoleHelper = __webpack_require__(38958), lineChartRoles = __webpack_require__(6714), common_marker = __webpack_require__(66123), colorHelper = __webpack_require__(6058), strokeStyle = __webpack_require__(2241), anomalyDetectionVisualPlugin = __webpack_require__(80822), anomalyDetection_converter = __webpack_require__(51490);
        function enumerateAnomalyObjectInstances(host, data, dataView, enumeration, anomalyDetections, visualStyle, isScalar, selectors) {
            var disabledReason;
            if (_.isEmpty(data.forecastLines)) if (data.hasDynamicSeries) {
                var roleName = host.getLocalizedString("Role_DisplayName_Legend");
                disabledReason = host.getLocalizedString("Visual_AnomalyDetection_WarningMessage_RoleNotAllowed", roleName);
            } else if ((0, dataRoleHelper.aJ)(data.valuesMetadata, lineChartRoles.R.Y2)) roleName = host.getLocalizedString("Role_DisplayName_Y2"), 
            disabledReason = host.getLocalizedString("Visual_AnomalyDetection_WarningMessage_RoleNotAllowed", roleName); else if (1 !== data.series.length) roleName = host.getLocalizedString("Role_DisplayName_Values"), 
            disabledReason = host.getLocalizedString("Visual_AnomalyDetection_WarningMessage_WrongDataSeries", roleName); else if (function(dataView) {
                var _a, _b, _c;
                debug.fF.assertValue(dataView, "anomalyDetectionVisualPlugin hasDatetime dataView");
                var categories = null === (_a = dataView.categorical) || void 0 === _a ? void 0 : _a.categories;
                if (debug.fF.assert(function() {
                    return _.size(categories) > 0;
                }, "should exist at least one category"), !categories || 0 === _.size(categories)) return !1;
                var firstCategoryType = null === (_b = _.first(categories).source) || void 0 === _b ? void 0 : _b.type;
                return !!firstCategoryType && (!!firstCategoryType.dateTime || !!(null === (_c = firstCategoryType.temporal) || void 0 === _c ? void 0 : _c.year) || !!firstCategoryType.temporal && _.some(dataView.metadata.columns, function(column) {
                    var _a;
                    return null === (_a = column.type.temporal) || void 0 === _a ? void 0 : _a.year;
                }));
            }(dataView)) if (isScalar) {
                if (function(dataView) {
                    var _a;
                    debug.fF.assertValue(dataView, "anomalyDetectionVisualPlugin hasReferenceLine dataView");
                    var categoricalValues = null === (_a = dataView.categorical) || void 0 === _a ? void 0 : _a.values;
                    return debug.fF.assert(function() {
                        return _.size(categoricalValues) > 0;
                    }, "should exist at least one categorical value"), !(!categoricalValues || 0 === _.size(categoricalValues)) && _.some(categoricalValues, function(value) {
                        return !!value.source.objects && !!value.source.objects[anomalyDetectionVisualPlugin.Si];
                    });
                }(dataView)) {
                    var trendLineName = host.getLocalizedString("Visual_Trend_Line"), constantLineName = host.getLocalizedString("Visual_Reference_Line");
                    disabledReason = host.getLocalizedString("Visual_AnomalyDetection_WarningMessage_NoWithReferenceLine", trendLineName, constantLineName);
                }
            } else {
                var type = host.getLocalizedString("Type"), xAxis = host.getLocalizedString("Visual_XAxis"), visualAxisScalar = host.getLocalizedString("Visual_Axis_Scalar");
                disabledReason = host.getLocalizedString("Visual_AnomalyDetection_WarningMessage_NoContinousCategory", type, xAxis, visualAxisScalar);
            } else roleName = host.getLocalizedString("Role_DisplayName_Axis"), disabledReason = host.getLocalizedString("Visual_AnomalyDetection_WarningMessage_CategoryNotDateTime", roleName); else disabledReason = host.getLocalizedString("Visual_AnomalyDetection_WarningMessage_NoWithForecast");
            !function(enumeration, anomalyDetections, visualStyle, disabledReason, selectors) {
                var _a;
                debug.fF.assertValue(enumeration, "enumeration"), debug.fF.assertValue(visualStyle, "visualStyle"), 
                debug.fF.assertAnyValue(disabledReason, "disabledReason"), debug.fF.assertAnyValue(selectors, "selectors");
                var getAnomalyObjectProperties = function(anomaly) {
                    var _a, _b, marker, props, properties;
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)(((_a = {})[anomalyDetectionVisualPlugin.MA.show] = anomaly.show, 
                    _a[anomalyDetectionVisualPlugin.MA.displayName] = anomaly.displayName, _a), (marker = anomaly.marker, 
                    props = common_marker.m6, properties = {}, common_marker.Wz.forEach(function(name) {
                        props[name] && (properties[props[name]] = "color" === name ? (0, colorHelper.Q)(null == marker ? void 0 : marker.color) : null == marker ? void 0 : marker[name]);
                    }), Object.assign(properties, (0, strokeStyle.HM)(marker.stroke, props)), properties)), ((_b = {})[anomalyDetectionVisualPlugin.MA.confidenceBandShow] = anomaly.band.show, 
                    _b[anomalyDetectionVisualPlugin.MA.confidenceBandStyle] = anomaly.band.style, _b[anomalyDetectionVisualPlugin.MA.transparency] = anomaly.band.transparency, 
                    _b[anomalyDetectionVisualPlugin.MA.confidenceBandColor] = {
                        solid: {
                            color: anomaly.band.color
                        }
                    }, _b));
                }, anomalyDetection = _.first(anomalyDetections);
                if (anomalyDetection) {
                    if (enumeration.pushInstance({
                        selector: anomalyDetection.selector,
                        properties: getAnomalyObjectProperties(anomalyDetection),
                        objectName: anomalyDetectionVisualPlugin.xn
                    }), selectors) for (var selectorContainsWildcard = (0, selector.GT)((0, selector.tV)(selectors)), _i = 0, _b = anomalyDetection.anomalies; _i < _b.length; _i++) {
                        var anomalyPoint = _b[_i];
                        anomalyPoint.isAnomaly && (selectorContainsWildcard || (0, selector.Ic)(anomalyPoint.identity.getSelectorsByColumn(), selectors)) && enumeration.pushInstance({
                            objectName: anomalyDetectionVisualPlugin.r3,
                            selector: (0, selector.tV)(anomalyPoint.identity.getSelectorsByColumn()),
                            properties: (_a = {}, _a[anomalyDetectionVisualPlugin.K1.CategoryValue] = anomalyPoint.categoryValue, 
                            _a[anomalyDetectionVisualPlugin.K1.Value] = anomalyPoint.value, _a[anomalyDetectionVisualPlugin.K1.ExpectedValue] = anomalyPoint.expectedValue, 
                            _a[anomalyDetectionVisualPlugin.K1.ExpectedLow] = anomalyPoint.lowerBound, _a[anomalyDetectionVisualPlugin.K1.ExpectedHigh] = anomalyPoint.upperBound, 
                            _a[anomalyDetectionVisualPlugin.K1.BatchStart] = anomalyPoint.batchStart, _a[anomalyDetectionVisualPlugin.K1.BatchEnd] = anomalyPoint.batchEnd, 
                            _a[anomalyDetectionVisualPlugin.K1.FormattedCategoryValue] = anomalyPoint.formattedCategoryValue, 
                            _a[anomalyDetectionVisualPlugin.K1.ValueFormatString] = anomalyPoint.valueFormatString, 
                            _a)
                        });
                    }
                } else enumeration.pushInstance({
                    selector: {
                        id: "0"
                    },
                    properties: getAnomalyObjectProperties((0, anomalyDetection_converter.EL)(visualStyle)),
                    objectName: anomalyDetectionVisualPlugin.xn,
                    disabledReason
                });
            }(enumeration, anomalyDetections, visualStyle, disabledReason, selectors);
        }
    },
    42589: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            WI: function() {
                return renderAnomalies;
            },
            bj: function() {
                return getAnomalySize;
            },
            ec: function() {
                return anomalyPointClassSelector;
            },
            rr: function() {
                return handleSelectedAnomaly;
            },
            v8: function() {
                return getAnomalyYPosition;
            }
        });
        var selectedAnomaly, _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(64067), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(65195), _marker_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(51995), _types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(47998), _anomalyDetectionVisualPlugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(80822), anomalyConfidenceIntervalClassSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("anomaly-confidence-interval"), anomalyDetectionLowerLayerClassSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("anomaly-lower-layer"), anomalyDetectionHigherLayerClassSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("anomaly-higher-layer"), anomalyPointClassSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("anomaly-point"), fillOpacity = .5, fillOpacitySelected = 1, anomalyPointHoverOffEventName = "".concat(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_1__.oe).concat(anomalyPointClassSelector.selector), anomalyPointHoverOnEventName = "".concat(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_1__.$u).concat(anomalyPointClassSelector.selector), anomalyPointSelectionEventName = "".concat(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_1__.NN).concat(anomalyPointClassSelector.selector), markerSizeCoef = 1.4, markerOffsetCoef = 2;
        function renderAnomalies(anomalyDetections, graphicsContext, xScale, yScale, animationDuration, host, isInteractiveVisual) {
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertValue(graphicsContext && xScale && yScale && (null == host ? void 0 : host.onSelecting), "renderAnomalies parameters");
            var lowerLayer = graphicsContext.select(anomalyDetectionLowerLayerClassSelector.selector);
            lowerLayer.empty() && (lowerLayer = graphicsContext.insert("g", ":first-child").classed(anomalyDetectionLowerLayerClassSelector.class, !0));
            var higherLayer = graphicsContext.select(anomalyDetectionHigherLayerClassSelector.selector);
            higherLayer.empty() && (higherLayer = graphicsContext.append("g").classed(anomalyDetectionHigherLayerClassSelector.class, !0)), 
            function(anomalyDetections, layer, xScale, yScale, animationDuration) {
                var pathGen = d3.line().x(function(point) {
                    return xScale(point.x);
                }).y(function(point) {
                    return yScale(point.y);
                });
                layer.selectAll(anomalyConfidenceIntervalClassSelector.selector).data(anomalyDetections || [], function(d) {
                    return d.selector.id;
                }).join(function(enter) {
                    return enter.insert("path", ":first-child").classed(anomalyConfidenceIntervalClassSelector.class, !0);
                }).call(function(errorRangeUpdate) {
                    return (animationDuration ? errorRangeUpdate.transition().ease(d3.easeLinear).duration(animationDuration) : errorRangeUpdate).attr("d", function(d) {
                        for (var points = [], _i = 0, _a = d.anomalies.slice().reverse(); _i < _a.length; _i++) points.push({
                            x: (point = _a[_i]).categoryValue,
                            y: point.lowerBound
                        });
                        for (var _b = 0, _c = d.anomalies; _b < _c.length; _b++) {
                            var point;
                            points.push({
                                x: (point = _c[_b]).categoryValue,
                                y: point.upperBound
                            });
                        }
                        return pathGen(points);
                    }).styles(function(d) {
                        var opacity = (0, _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_5__.TD)(d.band.transparency);
                        return {
                            "fill-opacity": opacity,
                            "stroke-opacity": opacity,
                            stroke: d.band.show && d.band.style === _types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_6__.X$.line ? d.band.color : "transparent",
                            fill: d.band.show && d.band.style === _types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_6__.X$.fill ? d.band.color : "transparent"
                        };
                    });
                });
            }(anomalyDetections, lowerLayer, xScale, yScale, animationDuration), function(anomalyDetections, layer, xScale, yScale, animationDuration, onSelecting, isInteractiveVisual) {
                var anomalyDetection = _.first(anomalyDetections), anomalies = [];
                anomalyDetection && (anomalies = _.filter(anomalyDetection.anomalies, function(anomaly) {
                    return anomaly.isAnomaly;
                }));
                var points = layer.selectAll(anomalyPointClassSelector.selector).data(anomalies, function(d) {
                    return d.categoryValue.toString();
                }), pointsUpdate = points.enter().append("path").classed(anomalyPointClassSelector.class, !0).merge(points);
                (animationDuration ? pointsUpdate.transition().ease(d3.easeLinear).duration(animationDuration) : pointsUpdate).attr("d", function() {
                    return (0, _marker_renderer__WEBPACK_IMPORTED_MODULE_3__.jM)(anomalyDetection.marker.shape, 1);
                }), pointsUpdate.attr("transform", function(d) {
                    var x = xScale(d.categoryValue), y = yScale(d.value), scaleInverted = yScale.range()[0] > yScale.range()[1], markerOffset = d.value > d.expectedValue && scaleInverted ? -markerOffsetCoef * anomalyDetection.marker.size : markerOffsetCoef * anomalyDetection.marker.size, degree = d.value > d.expectedValue && scaleInverted ? 0 : 180;
                    return "translate(".concat(x, ",").concat(y + markerOffset, ") rotate(").concat(degree, ") scale(").concat(anomalyDetection.marker.size, ")");
                }), pointsUpdate.each(function() {
                    d3.select(this).style("fill", anomalyDetection.marker.color).style("stroke", anomalyDetection.marker.color).attr("vector-effect", "non-scaling-stroke").style("stroke-width", 1.5).style("stroke-opacity", 1).style("fill-opacity", function(data) {
                        return this === selectedAnomaly || data.isHighlighted ? fillOpacitySelected : fillOpacity;
                    }).on(anomalyPointSelectionEventName, function(data) {
                        isInteractiveVisual && handleSelectedAnomaly(this, data, onSelecting);
                    }).on(anomalyPointHoverOnEventName, function() {
                        isInteractiveVisual && d3.select(this).style("fill-opacity", fillOpacitySelected);
                    }).on(anomalyPointHoverOffEventName, function() {
                        isInteractiveVisual && this !== selectedAnomaly && d3.select(this).style("fill-opacity", fillOpacity);
                    });
                }), points.exit().remove();
            }(anomalyDetections, higherLayer, xScale, yScale, animationDuration, host.onSelecting, isInteractiveVisual);
        }
        function handleSelectedAnomaly(element, data, onSelecting) {
            selectedAnomaly ? selectedAnomaly === element ? (d3.select(element).style("fill-opacity", fillOpacity), 
            selectedAnomaly = void 0) : (d3.select(selectedAnomaly).style("fill-opacity", fillOpacity), 
            selectedAnomaly = element, d3.select(selectedAnomaly).style("fill-opacity", fillOpacitySelected)) : (selectedAnomaly = element, 
            d3.select(selectedAnomaly).style("fill-opacity", fillOpacitySelected)), selectedAnomaly && onSelecting({
                type: 0,
                visualObjects: [ {
                    objectName: _anomalyDetectionVisualPlugin__WEBPACK_IMPORTED_MODULE_4__.r3,
                    selectorsByColumn: data.identity.getSelectorsByColumn()
                } ]
            }), d3.event.stopPropagation();
        }
        function getAnomalyYPosition(anomalyDataPoint, yScale, markerShapeSize) {
            var markerOffset = anomalyDataPoint.value > anomalyDataPoint.expectedValue ? -markerOffsetCoef * markerShapeSize : markerOffsetCoef * markerShapeSize;
            return yScale(anomalyDataPoint.value) + markerOffset;
        }
        function getAnomalySize(markerShapeSize) {
            return markerShapeSize * markerSizeCoef;
        }
    },
    40006: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            B: function() {
                return AnomalyDetectionKeyboardNavigationHelper;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72902), AnomalyDetectionKeyboardNavigationHelper = function() {
            function AnomalyDetectionKeyboardNavigationHelper() {}
            return AnomalyDetectionKeyboardNavigationHelper.prototype.update = function(anomalies, scrolledData, focusedDatum, updateFocusElement, _mainGraphicsContext) {
                this.anomalies = anomalies, this.scrolledData = scrolledData, this.focusedDatum = focusedDatum, 
                this.updateFocusElement = updateFocusElement;
            }, AnomalyDetectionKeyboardNavigationHelper.prototype.getFirstElement = function(categoryIndex, reverse) {
                if (void 0 === reverse && (reverse = !1), null != categoryIndex) {
                    var foundDataPoint;
                    if ((foundDataPoint = (reverse ? _.findLast : _.find)(this.anomalies, function(anomaly) {
                        return anomaly.categoryIndex >= categoryIndex && anomaly.isAnomaly;
                    })) && this.scrolledData && -1 === this.scrolledData.categories.indexOf(foundDataPoint.categoryValue)) return {
                        element: null
                    };
                    if (foundDataPoint) return this.focusedDatum = foundDataPoint, {
                        element: this.updateFocusElement(foundDataPoint).node()
                    };
                }
            }, AnomalyDetectionKeyboardNavigationHelper.prototype.getNextDataPoint = function(categoryIndex, _seriesIndex, direction) {
                var nextDataPoint = this.focusedDatum;
                switch (direction) {
                  case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.NextCategory:
                  case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.PreviousCategory:
                    var nextCategoryIndex = _.findIndex(this.anomalies, function(dataPoint) {
                        return dataPoint && dataPoint.categoryIndex === categoryIndex;
                    });
                    nextDataPoint = this.pickNextAvailableIndex(this.anomalies, nextCategoryIndex, direction);
                    break;

                  case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.NextSeries:
                  case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.PreviousSeries:
                    break;

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertNever(direction);
                }
                if (nextDataPoint) return this.scrolledData && -1 === this.scrolledData.categories.indexOf(nextDataPoint.categoryValue) ? {
                    element: null,
                    targetCategoryIndex: nextDataPoint.categoryIndex
                } : (this.focusedDatum = nextDataPoint, {
                    element: this.updateFocusElement(nextDataPoint).node(),
                    targetCategoryIndex: nextDataPoint.categoryIndex
                });
            }, AnomalyDetectionKeyboardNavigationHelper.prototype.pickNextAvailableIndex = function(thisDataGroup, startingIndex, direction) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return direction === _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.NextCategory || direction === _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.PreviousCategory;
                }, "pickNextAvailableIndex direction");
                var incrementor = direction === _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.NextCategory ? 1 : -1, nextIndex = startingIndex;
                do {
                    if ((nextIndex += incrementor) >= thisDataGroup.length ? nextIndex = 0 : nextIndex < 0 && (nextIndex = thisDataGroup.length - 1), 
                    nextIndex === startingIndex) break;
                } while (!thisDataGroup[nextIndex] || !thisDataGroup[nextIndex].isAnomaly);
                return thisDataGroup[nextIndex];
            }, AnomalyDetectionKeyboardNavigationHelper;
        }();
    },
    37274: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            DR: function() {
                return NoCollisionDetector;
            },
            LO: function() {
                return CollisionDetector;
            },
            _F: function() {
                return HierarchicalCollisionDetector;
            }
        });
        var NoCollisionDetector = function() {
            function NoCollisionDetector() {}
            return NoCollisionDetector.prototype.willCollide = function(_center) {
                return !1;
            }, NoCollisionDetector.prototype.addItem = function(_center) {}, NoCollisionDetector.prototype.skipItem = function(_center) {}, 
            NoCollisionDetector;
        }(), CollisionDetector = function() {
            function CollisionDetector(startLeftEdge, fontOffsetLeft, fontOffsetRight) {
                this.fontOffsetLeft = fontOffsetLeft, this.fontOffsetRight = fontOffsetRight, this.previousLabelRightEdge = startLeftEdge;
            }
            return CollisionDetector.prototype.willCollide = function(center) {
                return center - this.fontOffsetLeft <= this.previousLabelRightEdge;
            }, CollisionDetector.prototype.addItem = function(center) {
                this.previousLabelRightEdge = center + this.fontOffsetRight;
            }, CollisionDetector.prototype.skipItem = function(_center) {}, CollisionDetector;
        }(), HierarchicalCollisionDetector = function() {
            function HierarchicalCollisionDetector(startLeftEdge, fontOffsetLeft, fontOffsetRight, currentNode, scale, halfCategoryThickness, rotationPadding) {
                this.fontOffsetLeft = fontOffsetLeft, this.fontOffsetRight = fontOffsetRight, this.currentNode = currentNode, 
                this.scale = scale, this.halfCategoryThickness = halfCategoryThickness, this.rotationPadding = rotationPadding, 
                this.previousLabelRightEdge = startLeftEdge, this.index = 0;
                var lastChildIndex = HierarchicalCollisionDetector.getLastChildIndex(currentNode, 0);
                this.groupEndPosition = scale(lastChildIndex) + halfCategoryThickness - rotationPadding;
            }
            return HierarchicalCollisionDetector.prototype.willCollide = function(center) {
                return HierarchicalCollisionDetector.isLastChild(this.currentNode) ? center - this.fontOffsetLeft <= this.previousLabelRightEdge : center + this.fontOffsetRight > this.groupEndPosition;
            }, HierarchicalCollisionDetector.prototype.addItem = function(center) {
                this.moveToNextNode(center);
            }, HierarchicalCollisionDetector.prototype.skipItem = function(center) {
                this.moveToNextNode(center);
            }, HierarchicalCollisionDetector.prototype.moveToNextNode = function(center) {
                var previousNode = this.currentNode, currentNode = this.currentNode = this.currentNode.next;
                if (this.index++, HierarchicalCollisionDetector.isLastChild(previousNode)) {
                    this.previousLabelRightEdge = this.groupEndPosition + 2 * this.rotationPadding;
                    var newLastChildIndex = HierarchicalCollisionDetector.getLastChildIndex(currentNode, this.index);
                    this.groupEndPosition = this.scale(newLastChildIndex) + this.halfCategoryThickness - this.rotationPadding;
                } else this.previousLabelRightEdge = center + this.fontOffsetRight;
            }, HierarchicalCollisionDetector.isLastChild = function(node) {
                return null == node.next || node.parent !== node.next.parent;
            }, HierarchicalCollisionDetector.getLastChildIndex = function(startNode, startIndex) {
                for (var currentNode = startNode, currentIndex = startIndex; !HierarchicalCollisionDetector.isLastChild(currentNode); ) currentIndex++, 
                currentNode = currentNode.next;
                return currentIndex;
            }, HierarchicalCollisionDetector;
        }();
    },
    11856: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            D: function() {
                return DefaultStyle;
            }
        });
        var _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38265), DefaultStyle = {
            card: {
                maxFontSize: 200
            },
            label: {
                textSize: 12,
                fontFamily: __webpack_require__(56707).Pq,
                colorName: "foregroundNeutralTertiary",
                paddingTop: 8
            },
            value: {
                textSize: 27,
                colorName: "foreground",
                fontFamily: _VisualsCommon_fontUtils__WEBPACK_IMPORTED_MODULE_1__.Wn.regularSecondary.css
            }
        };
    },
    32554: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            jN: function() {
                return appendCategoryColorSlicesToGroup;
            },
            k2: function() {
                return getCategoryDataColorsFormattingModel;
            },
            xr: function() {
                return getSeriesDataColorsFormattingModel;
            },
            y0: function() {
                return appendSeriesColorSlicesToGroup;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62458), _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56578), _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(32379), _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82755), _VisualsData_dataView_dataViewRoleWildcard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(91059), _VisualsData_dataView_dataViewWildcard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(96915), showAllDataPointsProp = {
            objectName: "dataPoint",
            propertyName: "showAllDataPoints"
        };
        function getCategoryDataColorsFormattingModel(options, featureSwitches, hostService) {
            if (options.dataView) {
                var dataColorProps = {
                    fill: {
                        objectName: "dataPoint",
                        propertyName: "fill"
                    },
                    showAllDataPoints: {
                        objectName: "dataPoint",
                        propertyName: "showAllDataPoints"
                    }
                }, cardBuilder = new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.CQ(new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.lg("colors"), "Visual_Colors", dataColorProps, function(key) {
                    return hostService.getLocalizedString(key);
                });
                return cardBuilder.addGroup("colors", function(groupBuilder) {
                    appendCategoryColorSlicesToGroup({
                        colorProps: dataColorProps,
                        featureSwitches,
                        groupBuilder,
                        hostService,
                        options
                    });
                }), cardBuilder.build();
            }
        }
        function appendCategoryColorSlicesToGroup(formatGroupSettings) {
            var objects, style, altConstantValueSelector, groupBuilder = formatGroupSettings.groupBuilder, colorProps = formatGroupSettings.colorProps, featureSwitches = formatGroupSettings.featureSwitches, options = formatGroupSettings.options, categories = options.categories, staticObjects = options.dataView.metadata && options.dataView.metadata.objects, showAllDataPoints = (0, 
            _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__.NA)(staticObjects, showAllDataPointsProp, !!options.showAllDataPoints), fillColor = (style = options.style, 
            (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__.W7)(objects = staticObjects, {
                objectName: "dataPoint",
                propertyName: "fill"
            }) || (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__.W7)(objects, {
                objectName: "dataPoint",
                propertyName: "defaultColor"
            }) || style.colorPalette.dataColors.getColorByIndex(0).value), fillInstanceKind = options.fillInstanceKind;
            if (null == fillInstanceKind && (fillInstanceKind = 3), 1 & fillInstanceKind && (altConstantValueSelector = null), 
            colorProps.fill) {
                var descriptor = (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, colorProps.fill), {
                    selector: {
                        data: [ (0, _VisualsData_dataView_dataViewWildcard__WEBPACK_IMPORTED_MODULE_3__.Ue)(1) ]
                    },
                    altConstantValueSelector,
                    instanceKind: fillInstanceKind
                });
                options.noDefaultFillColor ? options.hideShowAllToggle && groupBuilder.addSimpleSlice("defaultColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.tL({
                    descriptor,
                    value: void 0
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("PropertyPane_ConditionalFormatting_DialogLauncherSliceTitle");
                }) : groupBuilder.addSimpleSlice("defaultColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.BT({
                    descriptor,
                    value: {
                        value: fillColor
                    }
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("Default");
                });
            }
            colorProps.showAllDataPoints && !options.hideShowAllToggle && groupBuilder.addSimpleSlice(options.disableShowAllToggle ? "showAllDisabled" : "showAll", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.bd({
                descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, showAllDataPointsProp), {
                    selector: {
                        data: [ (0, _VisualsData_dataView_dataViewWildcard__WEBPACK_IMPORTED_MODULE_3__.Ue)(1) ]
                    },
                    altConstantValueSelector
                }),
                value: (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__.NA)(staticObjects, showAllDataPointsProp, !!options.showAllDataPoints)
            }).build(), function(sliceBuilder) {
                return sliceBuilder.withDisabled(options.disableShowAllToggle);
            });
            var getSimpleSlices = function(onObject) {
                for (var _loop_1 = function(i, ilen) {
                    var dataPoint = categories[i], selector = (0, _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_4__.fd)(dataPoint.identity.getSelector());
                    options.multipleRole && (selector = (0, _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_4__.d9)(selector), 
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assert(function() {
                        return !!selector.data;
                    }, "expect categories to have some data identity"), selector.data.unshift((0, _VisualsData_dataView_dataViewRoleWildcard__WEBPACK_IMPORTED_MODULE_6__.Yp)([ options.multipleRole ])));
                    var sliceUid = featureSwitches.onObjectFormatPaneUid ? "datapoint" : dataPoint.displayName;
                    sliceUid = options.disableShowAllToggle ? "".concat(sliceUid, "Disabled") : sliceUid, 
                    groupBuilder.addSimpleSlice(sliceUid, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.BT({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, colorProps.fill), {
                            selector,
                            instanceKind: 1
                        }),
                        value: {
                            value: dataPoint.color || fillColor
                        }
                    }).build(), function(sliceBuilder) {
                        return onObject ? sliceBuilder.withCustomDisplayName(dataPoint.displayName, !1).withDisabled(options.disableShowAllToggle).withHidden(!showAllDataPoints) : sliceBuilder.withCustomDisplayName(dataPoint.displayName, !1).withDisabled(options.disableShowAllToggle);
                    });
                }, i = 0, ilen = categories.length; i < ilen; i++) _loop_1(i);
            };
            featureSwitches.onObject ? getSimpleSlices(featureSwitches.onObject) : showAllDataPoints && getSimpleSlices();
        }
        function getSeriesDataColorsFormattingModel(dataPoints, hostService, featureSwitches) {
            var dataColorProps = {
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            }, localize = function(key) {
                return hostService.getLocalizedString(key);
            }, cardBuilder = new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.CQ(new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.lg("colors"), "Visual_Colors", dataColorProps, localize);
            return cardBuilder.addGroup(void 0, function(groupBuilder) {
                appendSeriesColorSlicesToGroup({
                    groupBuilder,
                    dataPoints,
                    seriesColorProps: dataColorProps,
                    localize,
                    featureSwitches
                });
            }), cardBuilder.build();
        }
        function appendSeriesColorSlicesToGroup(formatGroupSettings, seriesSelector) {
            for (var groupBuilder = formatGroupSettings.groupBuilder, dataPoints = formatGroupSettings.dataPoints, seriesColorProps = formatGroupSettings.seriesColorProps, localize = formatGroupSettings.localize, featureSwitches = formatGroupSettings.featureSwitches, _loop_2 = function(i, ilen) {
                var dataPoint = dataPoints[i], dataPointName = dataPoint.displayName || localize("DataPointColorTitle"), currentSelector = (0, 
                _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_4__.fd)(dataPoint.identity.getSelector()), sliceName = void 0;
                featureSwitches.onObjectFormatPaneUid ? (sliceName = "datapoint", seriesSelector && (sliceName = "".concat(sliceName, "-").concat(i))) : sliceName = dataPointName, 
                groupBuilder.addSimpleSlice(sliceName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.BT({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, seriesColorProps.fill), {
                        selector: currentSelector,
                        instanceKind: 1
                    }),
                    value: {
                        value: dataPoint.color
                    }
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName(dataPointName, !1).withDisabled(seriesSelector && !(0, 
                    _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_4__.fS)(seriesSelector, currentSelector));
                });
            }, i = 0, ilen = null == dataPoints ? void 0 : dataPoints.length; i < ilen; i++) _loop_2(i);
        }
    },
    29324: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Z: function() {
                return getFormattingCard;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(81337), _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56578), _visualObjectRepetition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40812);
        function getFormattingCard(objectsRepetition, localize, objectDescriptors, cardName, cardDescription) {
            var repetitionsMetadata = (0, _visualObjectRepetition__WEBPACK_IMPORTED_MODULE_0__.sd)(objectsRepetition, objectDescriptors);
            if (!_.isEmpty(repetitionsMetadata)) {
                var revertToDefaultDescriptors = [], containerObjects = _.groupBy(repetitionsMetadata, function(item) {
                    return item.containerName;
                }), cardBuilder = new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.CQ(new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.lg("conditionalFormatting"), cardName, revertToDefaultDescriptors, localize);
                return cardBuilder.withDescription(cardDescription).withAliasName("FieldWell_ConditionalFormatting"), 
                cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("series", function(containerBuilder) {
                        containerBuilder.withDisplayName("Series"), Object.keys(containerObjects).forEach(function(key) {
                            var metadata = containerObjects[key];
                            containerBuilder.addContainerItem(key.replace(" ", ""), key, function(containerItemBuilder) {
                                return function(repetitionsMetadata, containerItemBuilder, containerDisplayName, revertToDefaultDescriptors) {
                                    containerItemBuilder.addGroup("cellElements", function(groupBuilder) {
                                        for (var _i = 0, repetitionsMetadata_1 = repetitionsMetadata; _i < repetitionsMetadata_1.length; _i++) {
                                            var repetition = repetitionsMetadata_1[_i];
                                            groupBuilder.addSimpleSlice(repetition.propertyId.propertyName, new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.M$({
                                                descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, repetition.propertyId), {
                                                    selector: repetition.selector
                                                }),
                                                displayName: containerDisplayName,
                                                value: repetition
                                            }).build()), _.some(revertToDefaultDescriptors, repetition.propertyId) || revertToDefaultDescriptors.push(repetition.propertyId);
                                        }
                                    });
                                }(metadata, containerItemBuilder, key, revertToDefaultDescriptors);
                            });
                        });
                    });
                }), cardBuilder.build();
            }
        }
    },
    45028: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            _I: function() {
                return computeTextSize;
            },
            _u: function() {
                return truncateLabelContentText;
            },
            qQ: function() {
                return truncateContainerContents;
            },
            w9: function() {
                return DefaultLabelContainerMaxWidth;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(81337), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32041), _types_labelContentLayout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63892), _types_labelOrientation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(20624), _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(382), _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56707), _fontProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18664), DefaultLabelContainerMaxWidth = 200;
        function truncateContainerContents(labelDataPointContents, valueDataLabelSettings, labelDataPoint) {
            var estimatedLabelBoundingRect = function(labelDataPointContents, valueDataLabelSettings, labelDataPoint) {
                var combinedLabelWidth = computeContainerLabelDimension(labelDataPointContents, valueDataLabelSettings, "width"), combinedLabelHeight = computeContainerLabelDimension(labelDataPointContents, valueDataLabelSettings, "height"), parentShape = labelDataPoint.parentShape;
                return {
                    width: combinedLabelWidth,
                    height: combinedLabelHeight,
                    top: (null == parentShape ? void 0 : parentShape.rect) ? parentShape.rect.top : 0,
                    left: (null == parentShape ? void 0 : parentShape.rect) ? parentShape.rect.left : 0
                };
            }(labelDataPointContents, valueDataLabelSettings, labelDataPoint), maxWidth = Math.floor(function(labelSettings, labelDataPoint, estimatedLabelRect) {
                var parentShape = labelDataPoint.parentShape, maxWidth = labelSettings.optimizeLabelDisplay ? labelSettings.labelContainerMaxWidth : DefaultLabelContainerMaxWidth;
                if (labelSettings.position === _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.auto && !function(labelSettings) {
                    return [ _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.insideBase, _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.insideCenter, _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.insideEnd ].includes(labelSettings.position);
                }(labelSettings)) return maxWidth;
                var parentRect = function(parentShape) {
                    if (!(null == parentShape ? void 0 : parentShape.rect)) return parentShape;
                    var _a = {
                        horizontalBuffer: 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_5__.Bo,
                        verticalBuffer: 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_5__.d1
                    }, horizontalBuffer = _a.horizontalBuffer, verticalBuffer = _a.verticalBuffer, parentRect = (0, 
                    tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, parentShape.rect), {
                        width: parentShape.rect.width - horizontalBuffer,
                        height: parentShape.rect.height - verticalBuffer
                    });
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, parentShape), {
                        rect: parentRect
                    });
                }(parentShape);
                return function(labelSettings, parentShape, estimatedLabelRect) {
                    if (!(null == parentShape ? void 0 : parentShape.rect)) return !1;
                    var estimatedWidth = estimatedLabelRect.width, estimatedHeight = estimatedLabelRect.height, _a = parentShape.rect, parentWidth = _a.width, parentHeight = _a.height;
                    switch (labelSettings.labelOrientation) {
                      case _types_labelOrientation__WEBPACK_IMPORTED_MODULE_4__.B.Horizontal:
                        return estimatedWidth <= parentWidth && estimatedHeight <= parentHeight;

                      case _types_labelOrientation__WEBPACK_IMPORTED_MODULE_4__.B.Vertical:
                        return estimatedWidth <= parentHeight && estimatedHeight <= parentWidth;

                      default:
                        return !0;
                    }
                }(labelSettings, parentRect, estimatedLabelRect) || !(null == parentShape ? void 0 : parentShape.orientation) ? maxWidth : labelSettings.labelOverflow ? labelSettings.labelOverflow && !labelSettings.optimizeLabelDisplay ? DefaultLabelContainerMaxWidth : maxWidth : Math.min(maxWidth, labelSettings.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_4__.B.Horizontal ? parentRect.rect.width : parentRect.rect.height);
            }(valueDataLabelSettings, labelDataPoint, estimatedLabelBoundingRect));
            (function(labelSettings, estimatedLabelRect, maxWidth) {
                switch (labelSettings.position) {
                  case _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.insideEnd:
                  case _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.insideBase:
                  case _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.insideCenter:
                    return labelSettings.labelOverflow && labelSettings.optimizeLabelDisplay || estimatedLabelRect.width >= maxWidth;

                  case _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.above:
                  case _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.outsideEnd:
                  case _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.under:
                    return labelSettings.optimizeLabelDisplay && estimatedLabelRect.width >= maxWidth;

                  case _types_labelPosition1__WEBPACK_IMPORTED_MODULE_3__.h.auto:
                    return labelSettings.optimizeLabelDisplay;

                  default:
                    return !1;
                }
            })(valueDataLabelSettings, estimatedLabelBoundingRect, maxWidth) && truncateLabelContentText(labelDataPointContents, maxWidth, valueDataLabelSettings.labelContentLayout);
        }
        function computeTextSize(fontProperties, text) {
            var properties = (0, _fontProperties__WEBPACK_IMPORTED_MODULE_0__.qk)(fontProperties, text);
            return {
                width: _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.measureSvgTextWidth(properties),
                height: _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.estimateSvgTextHeight(properties, !0)
            };
        }
        function truncateLabelContentText(labelDataPointContents, maxWidth, layout, recursionDepth) {
            void 0 === recursionDepth && (recursionDepth = 0);
            for (var numLabelsToAssignWidth = labelDataPointContents.length, availableWidth = maxWidth, totalWidthReduction = 0, _i = 0, labelDataPointContents_1 = labelDataPointContents; _i < labelDataPointContents_1.length; _i++) {
                var labelDataPointContent = labelDataPointContents_1[_i], labelSlotWidth = Math.floor(availableWidth / numLabelsToAssignWidth);
                if (labelDataPointContent.textSize.width >= labelSlotWidth) {
                    var properties = (0, _fontProperties__WEBPACK_IMPORTED_MODULE_0__.qk)(labelDataPointContent.fontProperties, labelDataPointContent.text);
                    labelDataPointContent.text = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.getTailoredTextOrDefault(properties, labelSlotWidth), 
                    properties.text = labelDataPointContent.text;
                    var oldWidth = labelDataPointContent.textSize.width;
                    labelDataPointContent.textSize = {
                        width: _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.measureSvgTextWidth(properties),
                        height: _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.estimateSvgTextHeight(properties, !0)
                    }, totalWidthReduction += oldWidth - labelDataPointContent.textSize.width;
                }
                numLabelsToAssignWidth--;
            }
            if ((availableWidth -= totalWidthReduction) < 0) !function(availableWidth, labelDataPointContents) {
                if (!(availableWidth >= 0)) {
                    var allLabelsTruncated = labelDataPointContents.every(function(labelDataPointContent) {
                        return _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.isFullyTruncated(labelDataPointContent.text);
                    });
                    if (allLabelsTruncated) for (;availableWidth < 0 && labelDataPointContents.length > 1; ) availableWidth += labelDataPointContents.pop().textSize.width;
                }
            }(availableWidth, labelDataPointContents); else {
                var currentLabelWidth = function(labelDataPointContents, layout) {
                    return layout === _types_labelContentLayout__WEBPACK_IMPORTED_MODULE_2__.v.SingleLine ? labelDataPointContents.reduce(function(sum, content) {
                        return sum + content.textSize.width;
                    }, 0) : Math.max.apply(Math, labelDataPointContents.map(function(content) {
                        return content.textSize.width;
                    }));
                }(labelDataPointContents, layout);
                currentLabelWidth > maxWidth && recursionDepth < 5 && truncateLabelContentText(labelDataPointContents, maxWidth, layout, recursionDepth + 1);
            }
        }
        function computeContainerLabelDimension(labelDataPointContents, valueDataLabelSettings, dimension) {
            for (var combinedDimension = 0, _i = 0, labelDataPointContents_2 = labelDataPointContents; _i < labelDataPointContents_2.length; _i++) {
                var contentDimension = labelDataPointContents_2[_i].textSize[dimension];
                (null == valueDataLabelSettings ? void 0 : valueDataLabelSettings.labelContentLayout) === _types_labelContentLayout__WEBPACK_IMPORTED_MODULE_2__.v.SingleLine ? combinedDimension += contentDimension + _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_5__.uM : combinedDimension = Math.max(combinedDimension, contentDimension);
            }
            return combinedDimension;
        }
    },
    34519: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            U: function() {
                return createDataPointLabelContainer;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81337), _types_detailContentType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(93907), _types_labelContentLayout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63892), _types_titleContentType__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(71793), _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(56707), _dataLabelContainerTruncation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45028), _dataLabelUtil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(46769), _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20624), _types_horizontalPosition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92374), _dataLabelRendererEnhanced__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5381);
        function createDataPointLabelContainer(options) {
            var _a, _b, cartesianDataPoint = options.cartesianDataPoint, labelDataPoint = options.labelDataPoint, enableValueDataLabel = options.enableValueDataLabel, valueDataLabelSettings = options.valueDataLabelSettings, showBlankAs = options.valueShowBlankAs, labelDataPointContents = [];
            if (!_.isEmpty(cartesianDataPoint.appendedLabelContents)) for (var _i = 0, _c = cartesianDataPoint.appendedLabelContents; _i < _c.length; _i++) {
                var labelDataPointContent = convertAppendedLabelToLabelDataPointContent(_c[_i], options);
                labelDataPointContent && labelDataPointContents.push(labelDataPointContent);
            }
            if (enableValueDataLabel && (labelDataPoint.text || showBlankAs)) {
                var textSize = (0, _dataLabelContainerTruncation__WEBPACK_IMPORTED_MODULE_0__._I)(labelDataPoint.fontProperties, labelDataPoint.text);
                labelDataPointContents.push({
                    text: null !== (_a = labelDataPoint.text) && void 0 !== _a ? _a : showBlankAs,
                    outsideFill: labelDataPoint.outsideFill,
                    insideFill: labelDataPoint.insideFill,
                    fontProperties: labelDataPoint.fontProperties,
                    textSize,
                    transparency: labelDataPoint.transparency,
                    role: "Value"
                });
            }
            var contentLayout = 1 === labelDataPointContents.length ? _types_labelContentLayout__WEBPACK_IMPORTED_MODULE_1__.v.SingleLine : null == valueDataLabelSettings ? void 0 : valueDataLabelSettings.labelContentLayout, alignment = null !== (_b = null == valueDataLabelSettings ? void 0 : valueDataLabelSettings.horizontalAlignment) && void 0 !== _b ? _b : (null == valueDataLabelSettings ? void 0 : valueDataLabelSettings.labelOrientation) === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? _types_horizontalPosition__WEBPACK_IMPORTED_MODULE_3__.D.left : _types_horizontalPosition__WEBPACK_IMPORTED_MODULE_3__.D.center, labelDataPointContainer = (0, 
            tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, labelDataPoint), {
                labelDataPointContents,
                contentLayout,
                alignment
            });
            return (0, _dataLabelContainerTruncation__WEBPACK_IMPORTED_MODULE_0__.qQ)(labelDataPointContents, valueDataLabelSettings, labelDataPoint), 
            labelDataPointContainer;
        }
        function convertAppendedLabelToLabelDataPointContent(appendedLabelContent, options) {
            var _a = function(labelSettings, appendedLabelContent, options) {
                var _a, _b, _c, _d, text = "", fontProperties = null == labelSettings ? void 0 : labelSettings.fontProperties, transparency = 0;
                switch (appendedLabelContent.role) {
                  case "Detail":
                    text = function(appendedLabelContent, options) {
                        var percentOfTotal = options.percentOfTotal, formattersCache = options.formattersCache, currentSeries = options.currentSeries, currentAxisProperties = options.currentAxisProperties, labelSettings = appendedLabelContent.labelSettings, _a = null != labelSettings ? labelSettings : {}, detailLabelPrecision = _a.detailLabelPrecision, detailLabelDisplayUnits = _a.detailLabelDisplayUnits, detailShowBlankAs = _a.detailShowBlankAs, dynamicLabelDetail = "";
                        if (options.isStacked100 && _a.detailContentType === _types_detailContentType__WEBPACK_IMPORTED_MODULE_5__.W.Percent) dynamicLabelDetail = formattersCache.getOrCreate(_consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.L0, labelSettings, void 0, detailLabelPrecision).format(percentOfTotal); else {
                            var detailLabelSettings = (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, labelSettings), {
                                precision: detailLabelDisplayUnits === _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.In ? void 0 : detailLabelPrecision,
                                displayUnits: detailLabelDisplayUnits
                            }), labelUnitsAndPrecision = (0, _dataLabelRendererEnhanced__WEBPACK_IMPORTED_MODULE_7__.d6)(currentAxisProperties, detailLabelSettings);
                            dynamicLabelDetail = (0, _dataLabelUtil__WEBPACK_IMPORTED_MODULE_8__.nU)(appendedLabelContent.dynamicLabel, formattersCache, detailLabelSettings, labelUnitsAndPrecision, currentSeries, appendedLabelContent.role);
                        }
                        return null != dynamicLabelDetail ? dynamicLabelDetail : null != detailShowBlankAs ? detailShowBlankAs : "";
                    }(appendedLabelContent, options), fontProperties = null === (_a = null == appendedLabelContent ? void 0 : appendedLabelContent.labelSettings) || void 0 === _a ? void 0 : _a.detailFontProperties, 
                    transparency = null !== (_b = null == labelSettings ? void 0 : labelSettings.detailTransparency) && void 0 !== _b ? _b : 0;
                    break;

                  case "Title":
                    text = function(appendedLabelContent, options) {
                        var formattersCache = options.formattersCache, currentSeries = options.currentSeries, currentAxisProperties = options.currentAxisProperties, seriesName = options.seriesName, labelSettings = appendedLabelContent.labelSettings, _a = null != labelSettings ? labelSettings : {}, titleLabelPrecision = _a.titleLabelPrecision, titleLabelDisplayUnits = _a.titleLabelDisplayUnits, titleShowBlankAs = _a.titleShowBlankAs;
                        if (_a.titleContentType === _types_titleContentType__WEBPACK_IMPORTED_MODULE_9__.A.Custom) {
                            var titleLabelSettings = (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, labelSettings), {
                                precision: titleLabelDisplayUnits === _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.In ? void 0 : titleLabelPrecision,
                                displayUnits: titleLabelDisplayUnits
                            }), labelUnitsAndPrecision = (0, _dataLabelRendererEnhanced__WEBPACK_IMPORTED_MODULE_7__.d6)(currentAxisProperties, titleLabelSettings), dynamicLabelTitle = (0, 
                            _dataLabelUtil__WEBPACK_IMPORTED_MODULE_8__.nU)(appendedLabelContent.dynamicLabel, formattersCache, titleLabelSettings, labelUnitsAndPrecision, currentSeries, appendedLabelContent.role);
                            return null != dynamicLabelTitle ? dynamicLabelTitle : null != titleShowBlankAs ? titleShowBlankAs : "";
                        }
                        return seriesName;
                    }(appendedLabelContent, options), transparency = null !== (_c = null == labelSettings ? void 0 : labelSettings.titleTransparency) && void 0 !== _c ? _c : 0, 
                    fontProperties = null === (_d = appendedLabelContent.labelSettings) || void 0 === _d ? void 0 : _d.titleFontProperties;
                }
                return {
                    text,
                    fontProperties,
                    transparency
                };
            }(appendedLabelContent.labelSettings, appendedLabelContent, options), text = _a.text, fontProperties = _a.fontProperties, transparency = _a.transparency;
            if (text) {
                var textSize = (0, _dataLabelContainerTruncation__WEBPACK_IMPORTED_MODULE_0__._I)(fontProperties, text);
                return {
                    text,
                    outsideFill: options.getOutsideLabelFill(appendedLabelContent),
                    insideFill: options.getInsideLabelFill(appendedLabelContent),
                    fontProperties,
                    transparency,
                    textSize,
                    role: appendedLabelContent.role
                };
            }
        }
    },
    19744: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        function isLabelDataPointContainerArray(obj) {
            return obj.some(function(label) {
                return isLabelDataPointContainer(label);
            });
        }
        function isLabelDataPointContainer(obj) {
            return obj && void 0 !== obj.labelDataPointContents;
        }
        __webpack_require__.d(__webpack_exports__, {
            r: function() {
                return isLabelDataPointContainer;
            },
            t: function() {
                return isLabelDataPointContainerArray;
            }
        });
    },
    5381: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $J: function() {
                return removeContainerContent;
            },
            AE: function() {
                return drawLabelContainer;
            },
            Bf: function() {
                return animateLabelsAndBackgrounds;
            },
            Bw: function() {
                return getLabelFormattedText;
            },
            R1: function() {
                return removeDuplicates;
            },
            SS: function() {
                return getNumberOfLabelsToRender;
            },
            Sw: function() {
                return drawSeriesLabelsAndBackgrounds;
            },
            W1: function() {
                return checkWordBreak;
            },
            Xc: function() {
                return animateDefaultLabels;
            },
            d6: function() {
                return getLabelUnitAndPrecisionForAxis;
            },
            fI: function() {
                return createColumnFormatterCacheManager;
            },
            gm: function() {
                return drawLabelsAndBackgrounds;
            },
            in: function() {
                return removeContainerBackground;
            },
            n8: function() {
                return getDataLabelLayoutOptions;
            },
            ng: function() {
                return drawLabelBackground;
            },
            x5: function() {
                return drawDefaultLabels;
            },
            z8: function() {
                return drawLabelLeaderLines;
            }
        });
        var _a, _b, _c, _e, _f, _g, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(62458), _VisualsCommon_geometry_shapes2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(79476), _VisualsCommon_geometry_shapes6__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(80758), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(32041), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(64329), _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(66001), _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(28326), _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20624), _types_labelPosition2__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(38168), _axisHelper__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(53197), _columnFormatterCacheManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41368), _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(56707), _dataLabelPointContainerChecker__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(19744), _fontProperties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(18664), _renderUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(60066), _strokeStyle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(2241), _subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52287), _seriesLabelViewModel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(95519), LabelClass = (_a = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("label")).class, LabelSelector = _a.selector, LabelContainerClass = (_b = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("label-container")).class, LabelContainerSelector = _b.selector, LabelSpanClass = (_c = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("label-tspan")).class, LabelSpanSelector = _c.selector, LabelBackgroundClass = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("label-background").class, LabelSeriesClass = (_e = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("seriesLabel")).class, LabelSeriesSelector = _e.selector, SecondLineLabelClass = (_f = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("label-second-line")).class, SecondLineLabelSelector = _f.selector, LabelContainerBackgroundClass = (_g = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("label-container-background")).class, LabelContainerBackgroundSelector = _g.selector, nonNumericVerticalOffset = "-0.25em", horizontalSeriesLabelPadding = 5, linesGraphicsContextClass = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("leader-lines"), lineClass = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("line-label"), labelBackgroundRounding = 4;
        function createColumnFormatterCacheManager() {
            return new _columnFormatterCacheManager__WEBPACK_IMPORTED_MODULE_1__.R;
        }
        function drawLabelContainer(options) {
            var labelContainersSelection, labelContainers = options.labelContainers, onObject = options.onObject, labelAttr = {
                transform: function(d) {
                    var label, translate = "translate(".concat((label = d, label.boundingBox.left + label.boundingBox.width / 2), ",").concat(function(label) {
                        var orientationOffset = label.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? label.boundingBox.height : label.boundingBox.height / 2;
                        return label.wordBreak && (orientationOffset = label.boundingBox.height / 2), label.boundingBox.top + orientationOffset;
                    }(d), ")");
                    return d.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? "".concat(translate, "rotate(-90)") : translate;
                },
                dy: nonNumericVerticalOffset
            }, labelDataSelection = options.labelGroupContext.selectAll(LabelContainerSelector).data(labelContainers, labelKeyFunction), hasLabelContent = labelContainers.some(function(d) {
                return !_.isEmpty(d.labelContents);
            }), containersHaveBackground = labelContainers.some(function(d) {
                return d.hasBackground;
            });
            return hasLabelContent && (labelContainersSelection = labelDataSelection.enter().append("g").merge(labelDataSelection).classed(LabelContainerClass, !0).attrs(labelAttr), 
            containersHaveBackground && function(labelContainersSelection, onObject) {
                var labelBackgroundSelection = labelContainersSelection.selectAll(LabelContainerBackgroundSelector).data(function(d) {
                    return [ d ];
                }), labelBackgroundUpdate = labelBackgroundSelection.enter().insert("rect", "text").classed(LabelContainerBackgroundClass, !0).merge(labelBackgroundSelection), dimensionsMap = new Map;
                labelBackgroundUpdate.interrupt().filter(function(d) {
                    return d.hasBackground;
                }).each(function(d) {
                    var calculatedWidth = 0, calculatedHeight = 0, isVertical = d.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical, gap = computeMultiLineGap(d.labelContents, isVertical, !0), verticalPadding = 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1 + gap, horizontalPadding = 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo;
                    "MultiLine" === d.contentLayout ? (calculatedWidth = isVertical ? d.boundingBox.width + verticalPadding : d.boundingBox.width + horizontalPadding, 
                    calculatedHeight = isVertical ? d.boundingBox.height + horizontalPadding : d.boundingBox.height + verticalPadding) : (calculatedWidth = isVertical ? d.boundingBox.height + horizontalPadding : d.boundingBox.width + horizontalPadding, 
                    calculatedHeight = isVertical ? d.boundingBox.width + verticalPadding : d.boundingBox.height + verticalPadding), 
                    dimensionsMap.set(d.identity.getKey(), {
                        calculatedWidth,
                        calculatedHeight
                    });
                }).attr("rx", labelBackgroundRounding).attr("ry", labelBackgroundRounding).attr("width", function(d) {
                    return dimensionsMap.get(d.identity.getKey()).calculatedWidth;
                }).attr("height", function(d) {
                    return dimensionsMap.get(d.identity.getKey()).calculatedHeight;
                }).attr("x", function(d) {
                    return d.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? 0 : dimensionsMap.get(d.identity.getKey()).calculatedWidth / -2;
                }).attr("y", function(d) {
                    return dimensionsMap.get(d.identity.getKey()).calculatedHeight / -2;
                }).style("fill", function(d) {
                    return d.backgroundColor;
                }).style("fill-opacity", function(d) {
                    return 1 - d.backgroundTransparency;
                }), onObject && updateDataLabelSubSelectionAttributes(labelBackgroundUpdate, function(d) {
                    return d.hasBackground;
                }), labelBackgroundSelection.exit().remove(), labelBackgroundUpdate.exit().remove();
            }(labelContainersSelection, options.onObject), function(labelContainersSelection) {
                var labelSelection = labelContainersSelection.selectAll(LabelSelector).data(function(d) {
                    return [ d ];
                }), labelUpdate = labelSelection.enter().append("text").merge(labelSelection).attr("x", function(d) {
                    return (labelContainer = d).labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo : labelContainer.boundingBox.width / -2;
                    var labelContainer;
                }).attr("y", function(d) {
                    return isMultiLine = "MultiLine" === (labelContainer = d).contentLayout, gap = computeMultiLineGap(labelContainer.labelContents, labelContainer.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical, labelContainer.hasBackground), 
                    isMultiLine ? (labelContainer.boundingBox.height + gap) / -2 : -((labelContainer.hasBackground ? labelContainer.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1 : _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo : 0) + gap);
                    var labelContainer, isMultiLine, gap;
                }).style("text-anchor", function(d) {
                    return d.textAnchor;
                }).classed(LabelClass, !0);
                labelUpdate.selectAll("tspan").remove();
                var tspanSelection = labelUpdate.interrupt().selectAll(LabelSpanSelector).data(function(d) {
                    return labelContents = (labelContainer = d).labelContents.sort(function(a, b) {
                        return roleSortOrder[a.role] - roleSortOrder[b.role];
                    }), isSingleLabel = 1 === labelContents.length, isMultiLine = "MultiLine" === labelContainer.contentLayout, 
                    backgroundPadding = labelContainer.hasBackground ? labelContainer.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1 : _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo : 0, 
                    alignment = labelContainer.alignment, boundingBoxWidth = labelContainer.boundingBox.width, 
                    computeMultiLineYOffset = function(labelContent) {
                        return labelContent.textSize.height + _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.i1;
                    }, computeMultiLineXOffset = function(labelContent) {
                        if (labelContainer.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical) switch (alignment) {
                          case "center":
                            return (boundingBoxWidth - labelContent.textSize.width) / 2;

                          case "left":
                          default:
                            return backgroundPadding;

                          case "right":
                            return boundingBoxWidth - backgroundPadding - labelContent.textSize.width;
                        } else switch (alignment) {
                          case "center":
                          default:
                            return -labelContent.textSize.width / 2;

                          case "left":
                            return -(boundingBoxWidth - 2 * backgroundPadding) / 2;

                          case "right":
                            return (boundingBoxWidth - 2 * backgroundPadding) / 2 - labelContent.textSize.width;
                        }
                    }, labelContents.map(function(labelContent, index) {
                        return isMultiLine && !isSingleLabel ? {
                            x: computeMultiLineXOffset(labelContent),
                            y: null,
                            label: labelContent,
                            dx: null,
                            dy: computeMultiLineYOffset(labelContent),
                            id: index
                        } : {
                            x: null,
                            y: 0,
                            label: labelContent,
                            dx: index > 0 ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.uM : backgroundPadding,
                            dy: ".35em",
                            id: index
                        };
                    });
                    var labelContainer, labelContents, isSingleLabel, isMultiLine, backgroundPadding, alignment, boundingBoxWidth, computeMultiLineYOffset, computeMultiLineXOffset;
                }, function(d) {
                    return d.label.role;
                }), tspanEnterUpdate = tspanSelection.enter().append("tspan").merge(tspanSelection);
                tspanEnterUpdate.interrupt().attr("x", function(d) {
                    return d.x;
                }).attr("y", function(d) {
                    return d.y;
                }).attr("dx", function(d) {
                    return d.dx;
                }).attr("dy", function(d) {
                    return d.dy;
                }).text(function(d) {
                    return d.label.text;
                }).styles(function(d) {
                    return (0, _fontProperties__WEBPACK_IMPORTED_MODULE_4__.E_)(d.label.fontProperties);
                }).style("fill-opacity", function(d) {
                    var _a;
                    return null !== (_a = 1 - d.label.transparency) && void 0 !== _a ? _a : 0;
                }).classed(LabelSpanClass, !0), labelSelection.exit().remove(), tspanSelection.exit().remove(), 
                tspanEnterUpdate.exit().remove();
            }(labelContainersSelection), labelContainersSelection.style("pointer-events", function(d) {
                return function(d) {
                    return options.onObject ? options.formatMode && d.hasBackground || !options.formatMode && (!options.hasTooltip || null == d.tooltip) ? "none" : "all" : options.hasTooltip && null != d.tooltip ? "all" : "none";
                }(d);
            })), labelContainersSelection && (containersHaveBackground && hasLabelContent || labelContainersSelection.selectAll(LabelContainerBackgroundSelector).remove(), 
            labelContainersSelection.filter(function(d) {
                return !d.hasBackground;
            }).selectAll(LabelContainerBackgroundSelector).remove()), onObject && updateDataLabelSubSelectionAttributes(labelContainersSelection, function(d) {
                return !d.hasBackground;
            }), labelDataSelection.exit().remove(), labelContainersSelection;
        }
        function removeContainerContent(context) {
            var _a;
            null === (_a = context.selectAll(LabelContainerSelector)) || void 0 === _a || _a.remove();
        }
        function removeContainerBackground(context) {
            var _a;
            null === (_a = context.selectAll(LabelContainerBackgroundSelector)) || void 0 === _a || _a.remove();
        }
        function drawLabelsAndBackgrounds(options) {
            var labels = drawDefaultLabels(options);
            return drawLabelBackground({
                context: options.backgroundContext,
                dataLabels: options.dataLabels,
                onObject: options.onObject
            }), labels;
        }
        function animateLabelsAndBackgrounds(options) {
            var context, duration, easeType, dataLabelsWithBackgrounds, labelRects, labels = animateDefaultLabels(options.labelContext, options.dataLabels, options.duration, options.numeric, options.easeType, options.onObject);
            return context = options.backgroundContext, duration = options.duration, easeType = options.easeType, 
            dataLabelsWithBackgrounds = _.filter(options.dataLabels, function(label) {
                return label.hasBackground;
            }), (labelRects = context.selectAll("rect").data(dataLabelsWithBackgrounds, labelKeyFunction)).enter().append("rect").style("fill-opacity", 0).merge(labelRects).transition().ease(easeType).duration(duration).attrs({
                x: function(d) {
                    return d.boundingBox.left - _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo;
                },
                y: function(d) {
                    return d.boundingBox.top - _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1;
                },
                rx: labelBackgroundRounding,
                ry: labelBackgroundRounding,
                width: function(d) {
                    return d.boundingBox.width + 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo;
                },
                height: function(d) {
                    return void 0 === d.text && void 0 === d.secondRowText ? 0 : d.boundingBox.height + 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1;
                }
            }).style("fill", function(d) {
                return d.backgroundColor;
            }).style("fill-opacity", function(d) {
                return 1 - d.backgroundTransparency;
            }), labelRects.exit().transition().duration(duration).style("fill-opacity", 0).remove(), 
            labels;
        }
        function animateDefaultLabels(context, dataLabels, duration, numeric, easeType, onObject) {
            void 0 === numeric && (numeric = !1), void 0 === easeType && (easeType = d3.easeCubicInOut);
            var labelAttr = {
                transform: function(d) {
                    var translate = "translate(".concat(getLabelX(d), ",").concat(getLabelY(d), ")");
                    return d.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? "".concat(translate, "rotate(-90)") : translate;
                },
                dy: nonNumericVerticalOffset
            };
            numeric && (labelAttr.dy = void 0);
            var labels = context.selectAll(LabelSelector).data(dataLabels, labelKeyFunction), labelsEnterUpdate = labels.enter().append("text").classed(LabelClass, !0).style("opacity", 0).attrs(labelAttr).merge(labels);
            return onObject && labelsEnterUpdate.classed(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.cy, !0).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.Ez, function(d) {
                return d.isCategory ? "category-labels" : "data-labels";
            }).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.CK, "Visual_DataPointsLabels").attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.QZ, 1), 
            labelsEnterUpdate.text(function(d) {
                return d.text;
            }).style("text-anchor", function(d) {
                return d.textAnchor;
            }).styles(function(d) {
                return (0, _fontProperties__WEBPACK_IMPORTED_MODULE_4__.E_)(d.fontProperties);
            }).transition().ease(easeType).duration(duration).attrs(labelAttr).style("opacity", 1), 
            labels.exit().transition().duration(duration).style("opacity", 0).remove(), labelsEnterUpdate;
        }
        function getDataLabelLayoutOptions(type) {
            return 11 === type ? {
                maximumOffset: _renderUtil__WEBPACK_IMPORTED_MODULE_5__.rA,
                startingOffset: _renderUtil__WEBPACK_IMPORTED_MODULE_5__.vD,
                offsetIterationDelta: _renderUtil__WEBPACK_IMPORTED_MODULE_5__.YD,
                allowLeaderLines: !0,
                attemptToMoveLabelsIntoViewport: !0
            } : {
                maximumOffset: _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.wh,
                startingOffset: _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.ki,
                attemptToMoveLabelsIntoViewport: !0
            };
        }
        function drawLabelLeaderLines(context, filteredDataLabels, key) {
            !function(context) {
                context.select(linesGraphicsContextClass.selector).empty() && context.append("g").classed(linesGraphicsContextClass.class, !0);
            }(context), context.select(linesGraphicsContextClass.selector).selectAll("polyline").data(filteredDataLabels, key).join(function(enter) {
                return enter.append("polyline").classed(lineClass.class, !0);
            }).attr("points", function(d) {
                return d.leaderLinePoints;
            }).styles(function(d) {
                return (0, _strokeStyle__WEBPACK_IMPORTED_MODULE_7__.bc)(d.leaderLine);
            });
        }
        function getLabelUnitAndPrecisionForAxis(axisProperties, labelSettings) {
            return new UnitsAndPrecision(axisProperties, labelSettings);
        }
        function getLabelFormattedText(label, format, formatter) {
            return formatter ? formatter.format(label) : _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_8__.dx.formatValue(label, format);
        }
        function drawDefaultLabels(options) {
            var dataLabels = options.dataLabels, formatMode = options.formatMode, hasTooltip = options.hasTooltip, labelContext = options.labelContext, numeric = options.numeric, onObject = options.onObject, twoRows = options.twoRows, labelAttr = {
                transform: function(d) {
                    var translate = "translate(".concat(getLabelX(d), ",").concat(getLabelY(d), ")");
                    return d.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? "".concat(translate, "rotate(-90)") : translate;
                },
                dy: nonNumericVerticalOffset
            };
            numeric && (labelAttr.dy = void 0);
            var labels = labelContext.selectAll(LabelSelector).data(dataLabels, labelKeyFunction), labelsEnterUpdate = labels.enter().append("text").classed(LabelClass, !0).merge(labels);
            onObject && updateDataLabelSubSelectionAttributes(labelsEnterUpdate, function(d) {
                return !d.hasBackground;
            }), labelsEnterUpdate.interrupt().text(function(d) {
                return d.text;
            }).attrs(labelAttr).style("text-anchor", function(d) {
                return d.textAnchor;
            }).styles(function(d) {
                return (0, _fontProperties__WEBPACK_IMPORTED_MODULE_4__.E_)(d.fontProperties);
            }), labels.exit().remove(), labelAttr = {
                transform: function(d) {
                    return "translate(".concat((label = d, label.boundingBox.left + label.boundingBox.width / 2), ",").concat(function(label) {
                        return label.boundingBox.top + (void 0 !== label.text ? label.boundingBox.height / 2 : label.boundingBox.height);
                    }(d), ")");
                    var label;
                },
                dy: nonNumericVerticalOffset
            }, numeric && (labelAttr.dy = void 0);
            var filteredCategoryLabels = _.filter(twoRows ? dataLabels : [], function(d) {
                return !_.isEmpty(d.secondRowText);
            }), secondLineLabels = labelContext.selectAll(SecondLineLabelSelector).data(filteredCategoryLabels, function(d, index) {
                return d.identity ? d.identity.getKeyWithoutHighlight() : index.toString();
            }), secondLineLabelsEnterUpdate = secondLineLabels.enter().append("text").classed(SecondLineLabelClass, !0).merge(secondLineLabels);
            onObject && updateDataLabelSubSelectionAttributes(secondLineLabelsEnterUpdate, function(d) {
                return !d.hasBackground;
            }), secondLineLabelsEnterUpdate.interrupt().text(function(d) {
                return d.secondRowText;
            }).attrs(labelAttr).style("text-anchor", function(d) {
                return d.textAnchor;
            }).styles(function(d) {
                return (0, _fontProperties__WEBPACK_IMPORTED_MODULE_4__.E_)(d.fontProperties);
            }), hasTooltip && (labelsEnterUpdate.append("title").text(function(d) {
                return d.tooltip;
            }), secondLineLabelsEnterUpdate.append("title").text(function(d) {
                return d.tooltip;
            }));
            var getPointerEvents = function(d) {
                return onObject ? formatMode && d.hasBackground ? "none" : formatMode || hasTooltip && null != d.tooltip ? "all" : "none" : hasTooltip && null != d.tooltip ? "all" : "none";
            };
            return labelsEnterUpdate.style("pointer-events", function(d) {
                return getPointerEvents(d);
            }), secondLineLabelsEnterUpdate.style("pointer-events", function(d) {
                return getPointerEvents(d);
            }), secondLineLabels.exit().remove(), labelsEnterUpdate;
        }
        function drawLabelBackground(options) {
            var context = options.context, onObject = options.onObject, dataLabelsWithBackgrounds = _.filter(options.dataLabels, function(label) {
                return label.hasBackground;
            }), labelRects = context.selectAll("rect"), labelUpdate = (labelRects = labelRects.data(dataLabelsWithBackgrounds, labelKeyFunction)).enter().append("rect").merge(labelRects);
            return labelUpdate.classed(LabelBackgroundClass, !0).attr("x", function(d) {
                return d.boundingBox.left - _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo;
            }).attr("y", function(d) {
                return d.boundingBox.top - _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1;
            }).attr("rx", labelBackgroundRounding).attr("ry", labelBackgroundRounding).attr("width", function(d) {
                return d.boundingBox.width + 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo;
            }).attr("height", function(d) {
                return void 0 === d.text && void 0 === d.secondRowText ? 0 : d.boundingBox.height + 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1;
            }).style("fill", function(d) {
                return d.backgroundColor;
            }).style("fill-opacity", function(d) {
                return 1 - d.backgroundTransparency;
            }), onObject && updateDataLabelSubSelectionAttributes(labelUpdate, function(d) {
                return d.hasBackground;
            }), labelRects.exit().remove(), labelUpdate;
        }
        function getNumberOfLabelsToRender(viewportWidth, labelDensity, minimumLabelsToRender, estimatedLabelWidth) {
            if (null == labelDensity || 0 === labelDensity) return minimumLabelsToRender;
            var parsedAndNormalizedDensity = labelDensity / 100, maxNumberForViewport = Math.ceil(viewportWidth / estimatedLabelWidth);
            return 1 === parsedAndNormalizedDensity ? maxNumberForViewport : minimumLabelsToRender + Math.floor(parsedAndNormalizedDensity * (maxNumberForViewport - minimumLabelsToRender));
        }
        function removeDuplicates(labelDataPoints) {
            return (0, _dataLabelPointContainerChecker__WEBPACK_IMPORTED_MODULE_9__.t)(labelDataPoints) ? (containers = labelDataPoints, 
            seenText = new Set, seenParent = new Set, containers.filter(function(container) {
                var texts = container.labelDataPointContents.map(function(content) {
                    return content.text;
                }).join("|"), parentIsRect = 1 === container.parentType;
                return !(seenText.has(texts) && sameParentIsInArray(container, Array.from(seenParent), parentIsRect) || (seenText.add(texts), 
                seenParent.add(container.parentShape), 0));
            })) : function(labelDataPoints) {
                for (var uniqueLabelDataPoints = [], labelDataPointMap = {}, _i = 0, labelDataPoints_1 = labelDataPoints; _i < labelDataPoints_1.length; _i++) {
                    var dataPoint = labelDataPoints_1[_i];
                    if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__.fF.assertValue(dataPoint, "dataPoint"), 
                    null != dataPoint) {
                        var labelDataPoint = dataPoint, resultsFromMap = labelDataPointMap[labelDataPoint.text];
                        resultsFromMap ? sameParentIsInArray(labelDataPoint, resultsFromMap, 1 === labelDataPoint.parentType) || (uniqueLabelDataPoints.push(labelDataPoint), 
                        resultsFromMap.push(labelDataPoint.parentShape)) : (uniqueLabelDataPoints.push(labelDataPoint), 
                        labelDataPointMap[labelDataPoint.text] = [ labelDataPoint.parentShape ]);
                    }
                }
                return uniqueLabelDataPoints;
            }(labelDataPoints);
            var containers, seenText, seenParent;
        }
        function checkWordBreak(text, properties, maxWidth, maxHeight, linePadding, preserveNewLines, preserveWhitespace) {
            void 0 === linePadding && (linePadding = 0), void 0 === preserveNewLines && (preserveNewLines = !1), 
            void 0 === preserveWhitespace && (preserveWhitespace = !1);
            var height = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.estimateSvgTextHeight(properties) + linePadding, maxNumLines = Math.max(1, Math.floor(maxHeight / height));
            return (0, _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_11__.ql)(text, properties, _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.measureSvgTextWidth, maxWidth, maxNumLines, null, !1, preserveNewLines, preserveWhitespace);
        }
        function computeMultiLineGap(labelContents, isVertical, hasBackground) {
            return labelContents.length > 1 && !isVertical ? (labelContents.length - 1) * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.i1 - (hasBackground ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1 : 0) : 0;
        }
        var sameParentIsInArray = function(newValue, array, parentIsRect) {
            return array.some(function(arrayValue) {
                return parentIsRect ? (0, _VisualsCommon_geometry_shapes6__WEBPACK_IMPORTED_MODULE_13__.fS)(newValue.parentShape.rect, arrayValue.rect) : (0, 
                _VisualsCommon_geometry_shapes2__WEBPACK_IMPORTED_MODULE_14__.fS)(newValue.parentShape.point, arrayValue.point);
            });
        }, roleSortOrder = {
            Title: 1,
            Value: 2,
            Detail: 3
        };
        function getTextWidth(textElement) {
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__.fF.assertValue(textElement, "textElement");
            var properties = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.getSvgMeasurementProperties(textElement);
            return _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.measureSvgTextWidth(properties, textElement.textContent);
        }
        function seriesWordBreak(textElement, words, properties, maxWidth) {
            for (var node = d3.select(textElement), height = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.estimateSvgTextHeight(properties), wordLength = Math.min(words.length, 2), maxElementWidth = 0, iterator = 0; iterator < wordLength; iterator++) {
                properties.text = words[iterator], words.length > 2 && iterator && (properties.text = words[iterator].concat("..."));
                var textLabel = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.getTailoredTextOrDefault(properties, maxWidth);
                node.append("tspan").attr("id", "wordWrap".concat(words[iterator])).attrs({
                    x: 0,
                    dy: iterator ? height : nonNumericVerticalOffset
                }).text(textLabel);
                var wordWidth = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.measureSvgTextWidth(properties, textLabel);
                maxElementWidth = wordWidth > maxElementWidth ? wordWidth : maxElementWidth;
            }
            return maxElementWidth;
        }
        function drawSeriesLabelsAndBackgrounds(options) {
            var _a, dataLabels = options.dataLabels, seriesLabelsSettings = options.seriesLabelsSettings, plotArea = options.plotArea, onObject = options.onObject, positionOnRight = seriesLabelsSettings.position === _types_labelPosition2__WEBPACK_IMPORTED_MODULE_16__.M.right, seriesLabelWidth = (0, 
            _seriesLabelViewModel__WEBPACK_IMPORTED_MODULE_17__.lr)(seriesLabelsSettings, options.availableChartWidth), labelAttr = {
                transform: function(d) {
                    var label, xTranslate = (label = d).boundingBox.left + (label.hasBackground ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo : 0) + (positionOnRight ? horizontalSeriesLabelPadding : -horizontalSeriesLabelPadding), translate = "translate(".concat(xTranslate, ",").concat(getLabelY(d), ")");
                    return d.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical ? "".concat(translate, "rotate(-90)") : translate;
                },
                dy: nonNumericVerticalOffset
            }, labels = options.labelContext.selectAll(LabelSeriesSelector).data(dataLabels, labelKeyFunction), labelsEnterUpdate = labels.enter().append("text").classed(LabelSeriesClass, !0).merge(labels);
            onObject && labelsEnterUpdate.classed(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.cy, !0).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.Ez, "series-labels").attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.CK, "Visual_SeriesLabels").attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.QZ, 1);
            var maxWidthArray = [], iterator = 0;
            labelsEnterUpdate.interrupt().text(function(d) {
                var _a, _b;
                return (null == seriesLabelsSettings ? void 0 : seriesLabelsSettings.wordWrap) ? d.text : function(text, fontSize, fontFamily, width) {
                    var labelTextProperties = _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.bN, properties = {
                        text,
                        fontFamily: fontFamily || labelTextProperties.fontFamily,
                        fontSize: _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_15__.FP.fromPoint(fontSize),
                        fontWeight: labelTextProperties.fontWeight
                    };
                    return _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.getTailoredTextOrDefault(properties, width);
                }(d.text, (null === (_a = d.fontProperties) || void 0 === _a ? void 0 : _a.size) ? d.fontProperties.size.pt : void 0, null === (_b = d.fontProperties) || void 0 === _b ? void 0 : _b.family, seriesLabelWidth);
            }).attrs(labelAttr).styles(function(d) {
                return (0, _fontProperties__WEBPACK_IMPORTED_MODULE_4__.E_)(d.fontProperties);
            }).styles({
                "text-anchor": positionOnRight ? "start" : "end",
                "white-space": "pre"
            });
            var seriesLabelSelectionGroup = labelsEnterUpdate.nodes();
            if (null == seriesLabelsSettings ? void 0 : seriesLabelsSettings.wordWrap) for (var lineHeight = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.estimateSvgTextHeight(_consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.bN), seriesFontSize = null !== (_a = null == seriesLabelsSettings ? void 0 : seriesLabelsSettings.fontProperties.size.px) && void 0 !== _a ? _a : 0, translatedY = seriesFontSize + lineHeight + (plotArea.height - lineHeight - seriesFontSize) / 2, _i = 0, seriesLabelSelectionGroup_1 = seriesLabelSelectionGroup; _i < seriesLabelSelectionGroup_1.length; _i++) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_12__.fF.assertValue(seriesLabelIndex = seriesLabelSelectionGroup_1[_i], "textElement");
                var labelText = seriesLabelIndex.textContent, properties = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_10__.b.getSvgMeasurementProperties(seriesLabelIndex);
                seriesLabelIndex.textContent = null;
                var maximumWidth = seriesWordBreak(seriesLabelIndex, checkWordBreak(labelText, properties, seriesLabelWidth, plotArea.height - translatedY, void 0, !0, !0), properties, seriesLabelWidth);
                dataLabels[iterator].hasBackground && maxWidthArray.push(maximumWidth), iterator++;
            } else for (var _b = 0, seriesLabelSelectionGroup_2 = seriesLabelSelectionGroup; _b < seriesLabelSelectionGroup_2.length; _b++) {
                var seriesLabelIndex = seriesLabelSelectionGroup_2[_b];
                dataLabels[iterator].hasBackground && maxWidthArray.push(getTextWidth(seriesLabelIndex)), 
                iterator++;
            }
            labels.exit().remove();
            var dataLabelsWithBackgrounds = _.filter(dataLabels, function(label) {
                return label.hasBackground;
            }), labelRects = options.backgroundContext.selectAll("rect");
            return (labelRects = labelRects.data(dataLabelsWithBackgrounds, labelKeyFunction)).enter().append("rect").merge(labelRects).attr("transform", function(d, i) {
                var label, boxHeightOffset, leftPosition = d.boundingBox.left;
                return positionOnRight || (leftPosition -= maxWidthArray[i]), "translate(".concat(leftPosition += horizontalSeriesLabelPadding * (positionOnRight ? 1 : -1), ",").concat((boxHeightOffset = 0, 
                (label = d).wordBreak || (boxHeightOffset = (label.boundingBox.height + 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1) / 4), 
                label.boundingBox.top - boxHeightOffset), ")");
            }).attr("rx", labelBackgroundRounding).attr("ry", labelBackgroundRounding).attr("width", function(d, i) {
                return maxWidthArray[i] + 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo;
            }).attr("height", function(d) {
                return void 0 === d.text && void 0 === d.secondRowText ? 0 : d.boundingBox.height + 2 * _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1;
            }).style("fill", function(d) {
                return d.backgroundColor;
            }).style("fill-opacity", function(d) {
                return 1 - d.backgroundTransparency;
            }), labelRects.exit().remove(), labelsEnterUpdate;
        }
        function getLabelX(label) {
            var isVertical = label.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical;
            return label.boundingBox.left + (isVertical ? label.boundingBox.width : label.boundingBox.width / 2) - (label.hasBackground && isVertical ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.Bo : 0);
        }
        function getLabelY(label) {
            var isVertical = label.labelOrientation === _types_labelOrientation__WEBPACK_IMPORTED_MODULE_2__.B.Vertical, orientationOffset = isVertical ? label.boundingBox.height / 2 : label.boundingBox.height, backgroundOffset = label.hasBackground && !isVertical ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1 : 0;
            return label.wordBreak && (orientationOffset = label.boundingBox.height / 2, backgroundOffset = -_consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_6__.d1), 
            label.boundingBox.top + orientationOffset - backgroundOffset;
        }
        function labelKeyFunction(label, index) {
            return label.key ? label.key : label.identity ? label.identity.getKeyWithoutHighlight() : String(index);
        }
        function updateDataLabelSubSelectionAttributes(selection, shouldApplySelection) {
            selection.classed(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.cy, function(d) {
                return shouldApplySelection(d);
            }).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.Ez, function(d) {
                return shouldApplySelection(d) ? d.isCategory ? "category-labels" : d.isTotal ? "total-labels" : "data-labels" : null;
            }).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.CK, function(d) {
                return shouldApplySelection(d) ? d.isTotal ? "Visual_DataTotalLabels" : "Visual_DataPointsLabels" : null;
            }).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_3__.QZ, function(d) {
                return shouldApplySelection(d) ? 1 : null;
            });
        }
        var UnitsAndPrecision = function() {
            function UnitsAndPrecision(axisProperties, labelSettings) {
                if (this.noPrecision = !0, 0 === labelSettings.displayUnits) {
                    var axisFormatter = axisProperties.formatter;
                    if (this.units = axisFormatter && axisFormatter.displayUnit && axisFormatter.displayUnit.value, 
                    null == labelSettings.precision) {
                        this.noPrecision = !1;
                        var axisFormatterOptions = axisFormatter && axisFormatter.options;
                        if (axisFormatterOptions && axisFormatterOptions.precision) this.precisionForAxis = axisProperties.formatter.options.precision + 1; else {
                            var ticks = axisProperties.d3Axis.tickValues();
                            ticks && ticks.length && (this.precisionForAxis = (0, _axisHelper__WEBPACK_IMPORTED_MODULE_18__.Gv)(ticks[0], ticks.length > 1 ? ticks[1] : void 0, 10 * (this.units || 1), axisFormatterOptions && axisFormatterOptions.format));
                        }
                    }
                }
            }
            return UnitsAndPrecision.prototype.getPrecision = function(hasFormatString, valueType) {
                if (!this.noPrecision) {
                    if (this.units) return this.precisionForAxis;
                    if (!hasFormatString) return valueType && valueType.integer ? 0 : this.precisionForAxis;
                }
            }, UnitsAndPrecision;
        }();
    },
    3665: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            v: function() {
                return SeriesLevelToggleBehavior;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32379), SeriesLevelToggleBehavior = function(_super) {
            function SeriesLevelToggleBehavior(matchObjectName, matchPropertyName, relatedTopLevelToggleValue, relatedSeriesLevelToggleValues) {
                void 0 === relatedSeriesLevelToggleValues && (relatedSeriesLevelToggleValues = []);
                var _this = _super.call(this, matchObjectName, matchPropertyName, relatedTopLevelToggleValue, !0) || this;
                return _this.relatedSeriesLevelToggleValues = relatedSeriesLevelToggleValues, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SeriesLevelToggleBehavior, _super), 
            SeriesLevelToggleBehavior.create = function(matchIdentifier, relatedTopLevelToggleValue, relatedSeriesLevelToggleValues) {
                return void 0 === relatedSeriesLevelToggleValues && (relatedSeriesLevelToggleValues = []), 
                new SeriesLevelToggleBehavior(matchIdentifier.objectName, matchIdentifier.propertyName, relatedTopLevelToggleValue, relatedSeriesLevelToggleValues);
            }, SeriesLevelToggleBehavior.prototype.getSeriesValueCount = function(expectedSeriesValue) {
                return this.relatedSeriesLevelToggleValues.filter(function(series) {
                    return series.value === expectedSeriesValue;
                }).length;
            }, SeriesLevelToggleBehavior.prototype.isSelectorForSeries = function(selector) {
                return !!this.relatedSeriesLevelToggleValues.find(function(toggle) {
                    return (0, _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_1__.fS)(selector, toggle.selector);
                });
            }, SeriesLevelToggleBehavior.prototype.shouldApplyChanges = function(visualObjectChange, behaviorType) {
                var activeToggles = this.getSeriesValueCount(!0);
                return 0 === activeToggles || 1 === activeToggles && 2 === behaviorType && this.isSelectorForSeries(visualObjectChange.selector);
            }, SeriesLevelToggleBehavior.prototype.getChanges = function(visualObjectChange) {
                if (this.isMatchingVisualObjectChange(visualObjectChange)) {
                    var behaviorType = this.getToggleBehaviorType(visualObjectChange);
                    if (0 !== behaviorType && this.shouldApplyChanges(visualObjectChange, behaviorType)) return this.updateBehaviorChanges(behaviorType, visualObjectChange), 
                    this.getBehaviorChanges(behaviorType);
                }
                return [];
            }, SeriesLevelToggleBehavior;
        }(__webpack_require__(70903).F);
    },
    17591: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        function isEqual(date1, date2) {
            return null == date1 && null == date2 || null != date1 && null != date2 && date1.getTime() === date2.getTime();
        }
        function getDifferenceInDays(dateOne, dateTwo) {
            var differenceInMilliseconds = Math.abs(dateOne.valueOf() - dateTwo.valueOf());
            return Math.floor(differenceInMilliseconds / 864e5);
        }
        __webpack_require__.d(__webpack_exports__, {
            I: function() {
                return getDifferenceInDays;
            },
            X: function() {
                return isEqual;
            }
        });
    },
    70574: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        function getTopoJsonShapeKeys(topojson) {
            try {
                for (var shapes = topojson.objects[Object.keys(topojson.objects)[0]].geometries, idPresent = !1, propertyNamesSet = {}, _i = 0, shapes_1 = shapes; _i < shapes_1.length; _i++) {
                    var shape = shapes_1[_i];
                    if (idPresent = idPresent || null != shape.id, shape.properties) for (var shapeProperties = Object.keys(shape.properties), _a = 0, shapeProperties_1 = shapeProperties; _a < shapeProperties_1.length; _a++) propertyNamesSet[shapeProperties_1[_a]] = !0;
                }
                var propertyNamesArray = Object.keys(propertyNamesSet).sort();
                _.pull(propertyNamesArray, "id");
                for (var allShapesPropertyValues = [], _b = 0, shapes_2 = shapes; _b < shapes_2.length; _b++) {
                    shape = shapes_2[_b];
                    var thisShapePropertyValues = [];
                    if (idPresent && thisShapePropertyValues.push(shape.id), shape.properties) for (var _c = 0, propertyNamesArray_1 = propertyNamesArray; _c < propertyNamesArray_1.length; _c++) thisShapePropertyValues.push(shape.properties[propertyNamesArray_1[_c]]);
                    allShapesPropertyValues.push(thisShapePropertyValues);
                }
                if (propertyNamesArray = (idPresent ? [ "id" ] : []).concat(propertyNamesArray), 
                !_.isEmpty(propertyNamesArray) && !_.isEmpty(allShapesPropertyValues)) return {
                    names: propertyNamesArray,
                    values: allShapesPropertyValues
                };
            } catch (e) {}
        }
        __webpack_require__.d(__webpack_exports__, {
            J: function() {
                return getTopoJsonShapeKeys;
            }
        });
    },
    33948: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            j: function() {
                return getLabelFill;
            }
        });
        var _colorHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90120), _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56707);
        function getLabelFill(labelColor, isInside, isCombo, style) {
            return labelColor || _colorHelper__WEBPACK_IMPORTED_MODULE_0__.v.getThemeColor(style, isInside && !isCombo ? _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_1__.pl : _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_1__.uQ);
        }
    },
    32476: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Me: function() {
                return GridLayout;
            },
            ji: function() {
                return GridLayoutSubheaderMaxLines;
            }
        });
        var tslib_es6 = __webpack_require__(81337), colorUtility = __webpack_require__(1521), imageScalingType = __webpack_require__(48966), VisualsCommon_color = __webpack_require__(64067), CssConstants = __webpack_require__(79154), debug = __webpack_require__(62458), textMeasurementService = __webpack_require__(32041), urlUtils = __webpack_require__(48066), Utility = __webpack_require__(38078), wordBreaker = __webpack_require__(66001), gridLineType = __webpack_require__(49511), fontProperties = __webpack_require__(18664), gridLayoutBehaviors = __webpack_require__(63194), gridLayoutSelectors = __webpack_require__(39071), listView = __webpack_require__(97121), PaginatedView = function() {
            function PaginatedView(options) {
                var _this = this;
                this.options = options, this.pageIndex = 0, this.pageIndexLast = 0, this.rowIndexStart = 0, 
                this.rowIndexEnd = 0, this.navButtonPrev = options.viewContainer.append("button").classed("powervisuals-glyph", !0).style("background", "transparent").style("flex", "0 0 ".concat(20, "px")).on("click", function() {
                    return _this.renderPrevPage();
                }).lower(), this.navButtonNext = options.viewContainer.append("button").classed("powervisuals-glyph", !0).style("background", "transparent").style("flex", "0 0 ".concat(20, "px")).on("click", function() {
                    return _this.renderNextPage();
                });
            }
            return PaginatedView.prototype.render = function() {
                var _this = this;
                if (this.dataSettings) {
                    var visibleData = this.dataSettings.rowDataStore.slice(this.rowIndexStart, this.rowIndexEnd + 1), rows = this.options.contentContainer.selectAll(".row").data(visibleData, this.dataSettings.getRowDataKey);
                    rows.enter().append("div").classed("row", !0).attr("role", "none").call(function(selection) {
                        return _this.options.enter(selection);
                    }).merge(rows).call(function(selection) {
                        return _this.options.update(selection);
                    }).order(), rows.exit().remove(), this.navButtonPrev.style("visibility", this.hasPrevPage() ? null : "hidden"), 
                    this.navButtonNext.style("visibility", this.hasNextPage() ? null : "hidden");
                }
            }, PaginatedView.prototype.data = function(dataSettings) {
                return this.dataSettings && this.dataSettings.isHorizontal === dataSettings.isHorizontal || this.setOrientation(dataSettings.isHorizontal), 
                this.dataSettings = dataSettings, this.updateIndexes(dataSettings.resetPosition ? 0 : this.pageIndex), 
                this;
            }, PaginatedView.prototype.getScrollPosition = function() {
                return {
                    startIndex: this.rowIndexStart,
                    endIndex: this.rowIndexEnd
                };
            }, PaginatedView.prototype.setOrientation = function(isHorizontal) {
                isHorizontal ? (this.options.viewContainer.style("flex-direction", "row"), this.navButtonPrev.classed("chevron-up", !1).classed("left-nav-arrow", !0), 
                this.navButtonNext.classed("chevron-down", !1).classed("right-nav-arrow", !0)) : (this.options.viewContainer.style("flex-direction", "column"), 
                this.navButtonPrev.classed("chevron-up", !0).classed("left-nav-arrow", !1), this.navButtonNext.classed("chevron-down", !0).classed("right-nav-arrow", !1));
            }, PaginatedView.prototype.updateIndexes = function(newPageIndex) {
                this.pageIndexLast = Math.ceil(this.dataSettings.totalCellCount / (this.dataSettings.rowCount * this.dataSettings.columnCount)) - 1, 
                this.pageIndex = Math.min(Math.max(newPageIndex, 0), this.pageIndexLast), this.rowIndexStart = this.pageIndex * this.dataSettings.rowCount, 
                this.rowIndexEnd = Math.min(this.rowIndexStart + this.dataSettings.rowCount - 1, this.dataSettings.rowDataStore.length - 1), 
                this.pageIndex >= this.pageIndexLast - 2 && this.options.loadMoreData();
            }, PaginatedView.prototype.renderNextPage = function() {
                this.hasNextPage() && (this.updateIndexes(this.pageIndex + 1), this.render());
            }, PaginatedView.prototype.renderPrevPage = function() {
                this.hasPrevPage() && (this.updateIndexes(this.pageIndex - 1), this.render());
            }, PaginatedView.prototype.hasNextPage = function() {
                return this.options.scrollEnabled && this.pageIndex < this.pageIndexLast;
            }, PaginatedView.prototype.hasPrevPage = function() {
                return this.options.scrollEnabled && this.pageIndex > 0;
            }, PaginatedView;
        }(), htmlSubSelectionHelper = __webpack_require__(52287), strokeStyle = __webpack_require__(2241), seriesLabelViewModel = __webpack_require__(95519), GridLayoutSubheaderMaxLines = 3;
        function findRowHeaderCell(row, position) {
            var leftRightSelector = 0 === position ? gridLayoutSelectors.yD.selector : gridLayoutSelectors.yT.selector;
            return row.find("".concat(gridLayoutSelectors.qN.selector).concat(leftRightSelector));
        }
        var RowOrderableElements = [ gridLayoutSelectors.yD, gridLayoutSelectors.bL, gridLayoutSelectors.yT ], GridLayout = function() {
            function GridLayout($container, loadMoreHandler, scrollEnabled, interactivityService, eventManager, boundDataKey, featureSwitches) {
                this.$container = $container, this.loadMoreHandler = loadMoreHandler, this.scrollEnabled = scrollEnabled, 
                this.interactivityService = interactivityService, this.eventManager = eventManager, 
                this.boundDataKey = boundDataKey, this.featureSwitches = featureSwitches;
            }
            return GridLayout.prototype.update = function(settings) {
                this.ensureRenderer(settings);
                var leftPadding, topPadding, gridLineSettings = settings.gridLineSettings, cellPadding = settings.cellPadding, gridLineWidth = gridLineSettings && gridLineSettings.strokeWidth;
                debug.fF.assert(function() {
                    return !cellPadding.right;
                }, "Expected only left padding to be set"), debug.fF.assert(function() {
                    return !cellPadding.bottom;
                }, "Expected only top padding to be set"), leftPadding = gridLineWidth && GridLayout.hasVerticalGridLines(gridLineSettings) ? 2 * cellPadding.left + gridLineSettings.strokeWidth : 2 * cellPadding.left, 
                topPadding = gridLineWidth && GridLayout.hasHorizontalGridLines(gridLineSettings) ? 2 * cellPadding.top + gridLineSettings.strokeWidth : 2 * cellPadding.top, 
                cellPadding = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, cellPadding), {
                    left: leftPadding,
                    top: topPadding
                });
                var headerMargins = this.getUpdatedHeaderMargins(settings.headerMargins), viewport = (0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, settings.viewport), {
                    width: Math.floor(settings.viewport.width),
                    height: Math.floor(settings.viewport.height)
                }), subheaderHeight = Math.ceil(settings.subheaderHeight);
                this.settings = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, settings), {
                    cellPadding,
                    headerMargins,
                    subheaderHeight,
                    viewport
                });
            }, GridLayout.prototype.ensureRenderer = function(settings) {
                settings.isPaginated && this.renderer instanceof GridRendererPaginated || !settings.isPaginated && this.renderer instanceof GridRendererScrollable || (this.renderer && this.destroy(), 
                this.renderer = settings.isPaginated ? new GridRendererPaginated(this.$container, this.loadMoreHandler, this.scrollEnabled, this.interactivityService, this.eventManager, this.featureSwitches, this.boundDataKey) : new GridRendererScrollable(this.$container, this.loadMoreHandler, this.scrollEnabled, this.interactivityService, this.eventManager, this.featureSwitches, this.boundDataKey));
            }, GridLayout.prototype.updateHeaderMargins = function(margins) {
                var settings = this.settings;
                debug.fF.assertValue(settings, "Settings should be initialized when updating header margins.");
                var headerMargins = this.getUpdatedHeaderMargins(margins);
                this.settings = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, settings), {
                    headerMargins
                });
            }, GridLayout.prototype.getScrollPosition = function() {
                return this.renderer.getScrollPosition();
            }, GridLayout.prototype.render = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var renderSettings;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return renderSettings = this.calculateGridRenderSettings(options.calculatedCellDimensions), 
                        [ 2, this.renderer.render(renderSettings, this.settings.shouldResetScrollPosition, options) ];
                    });
                });
            }, GridLayout.prototype.scrollTo = function(position) {
                var _this = this;
                debug.fF.assert(function() {
                    return _this.renderer instanceof GridRendererScrollable;
                }, "scrollTo is only valid for scrollable grid renderer"), this.renderer instanceof GridRendererScrollable && this.renderer.scrollTo(position);
            }, GridLayout.prototype.getRowHeight = function(rowIndex) {
                return this.renderer.getRowHeight(rowIndex);
            }, GridLayout.prototype.getUpdatedHeaderMargins = function(margins) {
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, margins), {
                    left: Math.ceil(margins.left),
                    right: Math.ceil(margins.right),
                    bottom: Math.ceil(margins.bottom),
                    top: Math.ceil(margins.top)
                });
            }, GridLayout.prototype.calculateGridRenderSettings = function(calculatedCellDimensions) {
                var axesOverflow = calculatedCellDimensions.axesOverflow, plotAreaViewport = calculatedCellDimensions.plotAreaViewport, seriesLabelsWidth = calculatedCellDimensions.seriesLabelsWidth, scrollableViewport = calculatedCellDimensions.scrollableViewport, totalViewport = {
                    height: plotAreaViewport.height + axesOverflow.bottom + axesOverflow.top,
                    width: plotAreaViewport.width + axesOverflow.left + axesOverflow.right + (isNaN(seriesLabelsWidth) ? 0 : null != seriesLabelsWidth ? seriesLabelsWidth : 0)
                }, _a = this.settings, cellCount = _a.cellCount, cellPadding = _a.cellPadding, columnCount = _a.columnCount, getAllCells = _a.getAllCells, gridLineSettings = _a.gridLineSettings, outerPadding = _a.outerPadding, renderHeader = _a.renderHeader, rowCount = _a.rowCount, viewport = _a.viewport, manageTabIndexOnRowHeaderFooter = _a.manageTabIndexOnRowHeaderFooter, boldedSubheaders = _a.boldedSubheaders, isHorizontal = _a.isHorizontal, borderSettings = _a.borderSettings, background = _a.background, margins = _a.headerMargins, gridRow = {
                    subheaderHeight: _a.subheaderHeight,
                    subheaderLineHeight: _a.subheaderLineHeight,
                    subheaderPosition: _a.subheaderPosition,
                    subheaderShow: _a.subheaderShow,
                    headerWidth: margins.left,
                    footerWidth: margins.right,
                    cell: {
                        width: totalViewport.width,
                        getCellBackgroundColor: _a.getCellBackgroundColor,
                        backgroundTransparency: _a.backgroundTransparency,
                        renderCell: _a.renderCell,
                        renderCellSubheader: _a.renderCellSubheader
                    },
                    height: totalViewport.height,
                    scale: this.settings.viewport.scale,
                    rowCount,
                    columnCount,
                    cellPadding,
                    outerPadding,
                    scrollPadding: _a.scrollPadding,
                    gridLineSettings,
                    isPaginated: this.settings.isPaginated,
                    isHorizontal: this.settings.isHorizontal
                }, verticalGridLines = this.calculateVerticalGridLines(gridLineSettings, margins, cellPadding, outerPadding, totalViewport, columnCount, rowCount);
                return {
                    viewport,
                    scrollableViewPort: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, scrollableViewport), {
                        scale: viewport.scale
                    }),
                    footerHeight: margins.bottom,
                    rowCount,
                    columnCount,
                    row: gridRow,
                    totalCellCount: cellCount,
                    renderHeader,
                    verticalGridLines,
                    gridLineSettings,
                    getAllCells,
                    manageTabIndexOnRowHeaderFooter,
                    boldedSubheaders,
                    isHorizontal,
                    borderSettings,
                    background
                };
            }, GridLayout.prototype.destroy = function() {
                var _a;
                null === (_a = this.renderer) || void 0 === _a || _a.destroy();
            }, GridLayout.prototype.clearRenderingTimeout = function() {
                this.renderer instanceof GridRendererScrollable && this.renderer.clearRenderingTimeout();
            }, GridLayout.typeHasVerticalGridLines = function(type) {
                return type === gridLineType.o.all || type === gridLineType.o.inner || type === gridLineType.o.innerVertical;
            }, GridLayout.hasVerticalGridLines = function(gridLineSettings) {
                return null != gridLineSettings && GridLayout.typeHasVerticalGridLines(gridLineSettings.region);
            }, GridLayout.typeHasHorizontalGridLines = function(type) {
                return type === gridLineType.o.all || type === gridLineType.o.inner || type === gridLineType.o.innerHorizontal;
            }, GridLayout.hasHorizontalGridLines = function(gridLineSettings) {
                return null != gridLineSettings && GridLayout.typeHasHorizontalGridLines(gridLineSettings.region);
            }, GridLayout.typeHasOuterGridLines = function(type) {
                return type === gridLineType.o.all;
            }, GridLayout.hasOuterGridLines = function(gridLineSettings) {
                return null != gridLineSettings && GridLayout.typeHasOuterGridLines(gridLineSettings.region);
            }, GridLayout.getOuterBorderWidth = function(gridLineSettings, border) {
                var gridLineWidth = 0, borderWidth = 0;
                return this.hasOuterGridLines(gridLineSettings) && (gridLineWidth = gridLineSettings.strokeWidth), 
                border && (borderWidth = border.strokeWidth), Math.max(gridLineWidth, borderWidth, 0);
            }, GridLayout.prototype.calculateCellDimensions = function(axesOverflow, subheaderRenderOptions, parameters) {
                var outerBorderWidth, gridLineSettings, outerPaddingHorizontal, hasScroll = this.hasScroll(), _a = this.settings, viewport = _a.viewport, headerMargins = _a.headerMargins, cellPadding = _a.cellPadding, columnCount = _a.columnCount, rowCount = _a.rowCount, outerPadding = _a.outerPadding, scrollPadding = _a.scrollPadding, subheaderHeight = _a.subheaderHeight, subheaderShow = _a.subheaderShow, isHorizontalListView = this.settings.isHorizontal && !this.settings.isPaginated;
                debug.fF.assert(function() {
                    return _.isInteger(headerMargins.left) && _.isInteger(headerMargins.right) && _.isInteger(headerMargins.top) && _.isInteger(headerMargins.bottom);
                }), debug.fF.assert(function() {
                    return _.isInteger(viewport.width) && _.isInteger(viewport.height);
                }), outerBorderWidth = 2 * GridLayout.getOuterBorderWidth(gridLineSettings = this.settings.gridLineSettings, this.settings.borderSettings), 
                outerPaddingHorizontal = this.settings.noExtraPadding ? 0 : outerPadding.left + outerPadding.right;
                var outerPaddingAndGridlines, scrollableWidth = viewport.width - headerMargins.left - headerMargins.right;
                if (this.settings.noExtraPadding) outerPaddingAndGridlines = 0; else if (!isHorizontalListView && hasScroll) {
                    var bottomInnerPadding = GridRenderer.getBottomInnerPadding(!0, cellPadding.top, gridLineSettings);
                    outerPaddingAndGridlines = outerPadding.top + bottomInnerPadding + outerBorderWidth / 2;
                } else outerPaddingAndGridlines = outerPadding.top + outerPadding.bottom + outerBorderWidth;
                var scrollableHeight = viewport.height - headerMargins.top - headerMargins.bottom;
                scrollableHeight = this.renderer.adjustHeight(scrollableHeight, hasScroll, scrollPadding, this.settings.isHorizontal);
                var width = (scrollableWidth = this.renderer.adjustWidth(scrollableWidth, hasScroll, scrollPadding, this.settings.isHorizontal)) - outerBorderWidth - cellPadding.left * (columnCount - 1) - outerPaddingHorizontal, height = scrollableHeight - cellPadding.top * (rowCount - 1) - outerPaddingAndGridlines, cellWidth = Math.floor(width / columnCount), cellHeight = Math.floor(height / rowCount);
                scrollableWidth -= width % columnCount, scrollableHeight -= height % rowCount;
                var maxSubheaderHeight, titleWrap = null == subheaderRenderOptions ? void 0 : subheaderRenderOptions.titleWrap;
                if (subheaderShow) {
                    maxSubheaderHeight = subheaderHeight;
                    var subheaders = null == subheaderRenderOptions ? void 0 : subheaderRenderOptions.subheaders;
                    if (titleWrap && subheaders) {
                        for (var textProperties = (0, fontProperties.qk)(subheaderRenderOptions.subheaderFontProperties), maxLines = 1, _b = 0, subheaders_1 = subheaders; _b < subheaders_1.length; _b++) {
                            var linesBroken = (0, wordBreaker.ql)(subheaders_1[_b], textProperties, textMeasurementService.b.measureSvgTextWidth, cellWidth, GridLayoutSubheaderMaxLines, null, !0);
                            if ((maxLines = Math.max(maxLines, linesBroken.length)) === GridLayoutSubheaderMaxLines) break;
                        }
                        maxSubheaderHeight = Math.ceil(maxLines * subheaderRenderOptions.subheaderLineHeight + subheaderRenderOptions.subheaderMargin.top + subheaderRenderOptions.subheaderMargin.bottom);
                    }
                    cellHeight -= maxSubheaderHeight;
                }
                cellHeight -= axesOverflow.top + axesOverflow.bottom, cellWidth -= axesOverflow.left + axesOverflow.right, 
                debug.fF.assert(function() {
                    return _.isInteger(cellWidth);
                }), debug.fF.assert(function() {
                    return _.isInteger(cellHeight);
                });
                var seriesLabelsWidth = (null == parameters ? void 0 : parameters.showSeriesLabels) ? Math.ceil((0, 
                seriesLabelViewModel.lr)(parameters.seriesLabelSettings, cellWidth)) : 0;
                return cellWidth -= seriesLabelsWidth, {
                    plotAreaViewport: {
                        width: Math.max(cellWidth, 0),
                        height: Math.max(cellHeight, 0)
                    },
                    scrollableViewport: {
                        width: scrollableWidth,
                        height: scrollableHeight
                    },
                    headerMargins,
                    axesOverflow,
                    seriesLabelsWidth,
                    maxSubheaderHeight: titleWrap ? maxSubheaderHeight : void 0
                };
            }, GridLayout.prototype.calculateVerticalGridLines = function(gridLineSettings, rowMargins, cellPadding, outerPadding, cellViewPort, columnCount, rowCount) {
                if (!GridLayout.hasVerticalGridLines(gridLineSettings)) return [];
                var color = gridLineSettings.strokeColor;
                null != gridLineSettings.strokeTransparency && (color = (0, colorUtility.Et)(color, (0, 
                VisualsCommon_color.TD)(gridLineSettings.strokeTransparency)));
                var isHorizontal = this.settings.isHorizontal && !this.settings.isPaginated, renderInnerGridLines = GridLayout.hasVerticalGridLines(gridLineSettings), renderOuterGridLines = GridLayout.hasOuterGridLines(gridLineSettings), style = "".concat(gridLineSettings.strokeWidth, "px ").concat(gridLineSettings.strokePattern, " ").concat(color), halfWidth = gridLineSettings.strokeWidth / 2, outerGridLineIndex = renderOuterGridLines ? 0 : void 0, gridLines = [];
                if (renderOuterGridLines && gridLines.push(isHorizontal ? {
                    key: "outer-vertical-".concat(outerGridLineIndex++),
                    position: {
                        top: "".concat(rowMargins.top, "px")
                    },
                    size: {},
                    style: {
                        horizontal: style
                    }
                } : {
                    key: "outer-vertical-".concat(outerGridLineIndex++),
                    position: {
                        left: "".concat(rowMargins.left, "px")
                    },
                    size: {},
                    style: {
                        vertical: style
                    }
                }), renderInnerGridLines) {
                    var innerGridlinesCount = style ? (isHorizontal ? rowCount : columnCount) - 1 : void 0;
                    if (innerGridlinesCount) {
                        var padding = isHorizontal ? cellPadding.top : cellPadding.left, size = isHorizontal ? cellViewPort.height : cellViewPort.width, outerPaddingValue = isHorizontal ? outerPadding.top : outerPadding.left, totalPadding = isHorizontal ? cellPadding.top + cellPadding.bottom : cellPadding.left + cellPadding.right, rowMargin = isHorizontal ? rowMargins.top : rowMargins.left;
                        debug.fF.assert(function() {
                            return !cellPadding.right;
                        }, "Unexpected right cell padding");
                        for (var offset = rowMargin + outerPaddingValue + (size + padding / 2 - halfWidth) + GridLayout.getOuterBorderWidth(gridLineSettings, this.settings.borderSettings), cellSize = totalPadding + size, innerGridLineIndex = 0; innerGridLineIndex < innerGridlinesCount; innerGridLineIndex++) gridLines.push(isHorizontal ? {
                            key: "inner-vertical-".concat(innerGridLineIndex),
                            position: {
                                top: "".concat(offset, "px")
                            },
                            size: {},
                            style: {
                                horizontal: style
                            }
                        } : {
                            key: "inner-vertical-".concat(innerGridLineIndex),
                            position: {
                                left: "".concat(offset, "px")
                            },
                            size: {},
                            style: {
                                vertical: style
                            }
                        }), offset += cellSize;
                    }
                }
                if (renderOuterGridLines) if (isHorizontal) startPosition = rowMargins.top + cellViewPort.height * rowCount + cellPadding.top * (rowCount - 1) + gridLineSettings.strokeWidth + outerPadding.top + outerPadding.bottom, 
                gridLines.push({
                    key: "outer-vertical-".concat(outerGridLineIndex++),
                    position: {
                        top: "".concat(startPosition, "px")
                    },
                    size: {},
                    style: {
                        horizontal: style
                    }
                }); else {
                    var startPosition = rowMargins.left + cellViewPort.width * columnCount + cellPadding.left * (columnCount - 1) + gridLineSettings.strokeWidth + outerPadding.left + outerPadding.right;
                    gridLines.push({
                        key: "outer-vertical-".concat(outerGridLineIndex++),
                        position: {
                            left: "".concat(startPosition, "px")
                        },
                        size: {},
                        style: {
                            vertical: style
                        }
                    });
                }
                return gridLines;
            }, GridLayout.prototype.hasScroll = function() {
                return !this.settings.isPaginated && this.settings.cellCount / (this.settings.isHorizontal ? this.settings.rowCount : this.settings.columnCount) > (this.settings.isHorizontal ? this.settings.columnCount : this.settings.rowCount);
            }, GridLayout;
        }(), GridRenderer = function() {
            function GridRenderer($container, loadMoreHandler, scrollEnabled, interactivityService, eventManager, featureSwitches, boundDataKey) {
                var _this = this;
                if (this.$container = $container, this.loadMoreHandler = loadMoreHandler, this.scrollEnabled = scrollEnabled, 
                this.interactivityService = interactivityService, this.eventManager = eventManager, 
                this.featureSwitches = featureSwitches, this.isInitialized = !1, interactivityService) {
                    var gridLayoutBehaviorFactory = new gridLayoutBehaviors.wA(boundDataKey, function() {
                        return _this.settings.getAllCells();
                    });
                    this.behavior = gridLayoutBehaviorFactory.create();
                }
            }
            return GridRenderer.prototype.render = function(settings, shouldResetRowScrollPosition, gridLayoutRenderOptions) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var viewport, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.settings = settings, this.dataToBind = gridLayoutRenderOptions.dataToBind, 
                            this.pointSourceKey = gridLayoutRenderOptions.pointSourceKey, this.formatMode = gridLayoutRenderOptions.formatMode, 
                            this.subSelectionHelper = gridLayoutRenderOptions.subSelectionHelper, this.isInitialized || this.initialize(gridLayoutRenderOptions.visualInstanceId), 
                            this.renderingContext = {}, this.$gridWrapper.css(((_a = {})[CssConstants.kP] = (viewport = settings.viewport).width, 
                            _a[CssConstants.ei] = viewport.height, _a)), this.updateFooter(), [ 4, this.updateRows(shouldResetRowScrollPosition) ];

                          case 1:
                            return _b.sent(), this.updateGridlines(), this.updateBorder(), this.updateBackground(), 
                            [ 2 ];
                        }
                    });
                });
            }, GridRenderer.prototype.showFooter = function(show) {
                this.$gridFooter.css("display", show ? "" : "none");
            }, GridRenderer.prototype.updateBorder = function() {
                var _a, border = this.settings.borderSettings, scrollableWidth = this.settings.scrollableViewPort.width, scrollableHeight = this.settings.scrollableViewPort.height, viewPortStyles = {};
                if (!border) return (_a = {}).width = "", _a.height = "", _a["border-radius"] = "", 
                viewPortStyles = _a, this.$gridBorder.css("display", "none"), void this.updateViewportElement(viewPortStyles);
                this.isPaginated || (this.settings.isHorizontal ? (viewPortStyles.height = "".concat(scrollableHeight, "px"), 
                this.$gridWrapper.css("width", "".concat(scrollableWidth, "px"))) : (viewPortStyles.width = "".concat(scrollableWidth, "px"), 
                this.$gridWrapper.css("height", "".concat(scrollableHeight, "px")))), viewPortStyles["border-radius"] = getBorderRadiusStyle(border.radius), 
                this.updateViewportElement(viewPortStyles), this.$gridBorder.css("display", ""), 
                this.$gridBorder.css(CssConstants.ei, "".concat(scrollableHeight, "px")), this.$gridBorder.css(CssConstants.kP, "".concat(scrollableWidth, "px")), 
                this.$gridBorder.css(CssConstants.mA, (0, strokeStyle.YE)(border)), this.$gridBorder.css(CssConstants.wu, viewPortStyles[CssConstants.wu]);
            }, GridRenderer.prototype.updateBackground = function() {
                var background = this.settings.background;
                if (!background) return this.$gridBackground.css("display", "none"), void this.$gridBackgroundColor.css("display", "none");
                var image, backgroundStyles = this.getBackgroundStyles();
                if (_.isEmpty(background.color)) this.$gridBackgroundColor.css("display", "none"); else {
                    var color = background.color;
                    background.colorTransparency && (color = (0, colorUtility.Et)(color, (0, VisualsCommon_color.TD)(background.colorTransparency))), 
                    this.$gridBackgroundColor.css("background-color", color || ""), this.$gridBackgroundColor.css(backgroundStyles);
                }
                (image = background.image) && ((0, urlUtils.gU)(image.url) || (0, urlUtils.pU)(image.url)) ? (this.$gridBackground.css("background-image", "url(".concat(Utility.b$.encodeUriForImageDataSvg(background.image.url), ")")), 
                this.$gridBackground.css("background-size", function(background) {
                    switch (background.image.scaling) {
                      case imageScalingType.C.fit:
                        return "100% 100%";

                      case imageScalingType.C.fill:
                        return "cover";

                      default:
                        return "contain";
                    }
                }(background)), this.$gridBackground.css("opacity", (0, VisualsCommon_color.TD)(background.imageTransparency)), 
                this.$gridBackground.css(backgroundStyles)) : this.$gridBackground.css("display", "none");
            }, GridRenderer.prototype.getBackgroundStyles = function() {
                var border = this.settings.borderSettings, backgroundStyles = {}, height = this.settings.scrollableViewPort.height, width = this.settings.scrollableViewPort.width, top = 0, left = 0, radius = {
                    topLeft: 0,
                    topRight: 0,
                    bottomLeft: 0,
                    bottomRight: 0
                };
                return border && (border.strokeWidth > 0 && (top = border.strokeWidth, left = border.strokeWidth, 
                height -= 2 * border.strokeWidth, width -= 2 * border.strokeWidth), border.radius && (radius = {
                    topLeft: border.radius.topLeft - border.strokeWidth,
                    topRight: border.radius.topRight - border.strokeWidth,
                    bottomLeft: border.radius.bottomLeft - border.strokeWidth,
                    bottomRight: border.radius.bottomRight - border.strokeWidth
                })), backgroundStyles.height = "".concat(height, "px"), backgroundStyles.width = "".concat(width, "px"), 
                backgroundStyles.left = "".concat(left, "px"), backgroundStyles.top = "".concat(top, "px"), 
                backgroundStyles.display = "", backgroundStyles["border-radius"] = getBorderRadiusStyle(radius), 
                backgroundStyles;
            }, GridRenderer.prototype.updateFooter = function() {
                var _this = this, footerHeight = this.settings.footerHeight;
                if (!footerHeight) return this.showFooter(!1), this.$gridFooter.css("display", "none"), 
                void this.$gridFooter.empty();
                this.showFooter(!0);
                var rowSettings = this.settings.row;
                this.$gridFooter.css(CssConstants.ei, footerHeight), this.$gridFooter.css(CssConstants.kP, this.adjustWidth(this.settings.viewport.width, this.hasScroll(), rowSettings.scrollPadding, this.settings.isHorizontal));
                var footerRow = {
                    rowCount: rowSettings.rowCount,
                    columnCount: rowSettings.columnCount,
                    footerWidth: rowSettings.footerWidth,
                    headerWidth: rowSettings.headerWidth,
                    subheaderHeight: 0,
                    subheaderLineHeight: 0,
                    subheaderPosition: rowSettings.subheaderPosition,
                    subheaderShow: !1,
                    height: footerHeight,
                    scale: this.settings.viewport.scale,
                    cellPadding: {
                        top: 0,
                        bottom: 0,
                        left: rowSettings.cellPadding.left,
                        right: rowSettings.cellPadding.right
                    },
                    outerPadding: {
                        top: 0,
                        bottom: 0,
                        left: rowSettings.outerPadding.left,
                        right: rowSettings.outerPadding.right
                    },
                    scrollPadding: rowSettings.scrollPadding,
                    cell: {
                        width: rowSettings.cell.width,
                        getCellBackgroundColor: function(_index) {},
                        renderCell: function(data) {
                            var headerData = data;
                            headerData.position = 2, _this.settings.renderHeader(headerData);
                        },
                        renderCellSubheader: _.noop
                    },
                    gridLineSettings: void 0,
                    isPaginated: !1,
                    isHorizontal: !1
                }, $row = this.$gridFooter.find(gridLayoutSelectors.YR.selector);
                0 === $row.length && ($row = this.buildElement(this.$gridFooter, gridLayoutSelectors.YR.class)), 
                this.renderRow($row, footerRow, 0, function() {}, rowSettings.columnCount, {
                    startIndex: 0,
                    endIndex: rowSettings.columnCount
                });
            }, GridRenderer.prototype.updateGridlines = function() {
                this.updateGridLines(d3.select(this.$gridBody[0]), this.settings.verticalGridLines, gridLayoutSelectors.MB);
            }, GridRenderer.prototype.getTotalOccupiedRowCount = function() {
                return Math.ceil(this.settings.totalCellCount / this.virtualColumnCount);
            }, GridRenderer.prototype.hasScroll = function() {
                return this.scrollEnabled && (!this.settings || this.getTotalOccupiedRowCount() > this.virtualRowCount);
            }, GridRenderer.getTotalScrollWidth = function(hasScroll, scrollPadding) {
                return hasScroll ? 8 + scrollPadding : 0;
            }, GridRenderer.getBottomInnerPadding = function(hasScroll, cellPaddingTop, gridLineSettings) {
                if (hasScroll) {
                    var bottomInnerPadding = cellPaddingTop, gridLineWidth = 0;
                    return GridLayout.hasHorizontalGridLines(gridLineSettings) && (gridLineWidth = gridLineSettings.strokeWidth), 
                    Math.round((bottomInnerPadding -= gridLineWidth) / 2);
                }
                return 0;
            }, GridRenderer.getRightInnerPadding = function(hasScroll, cellPaddingLeft) {
                return hasScroll ? Math.round(cellPaddingLeft / 2) : 0;
            }, GridRenderer.prototype.getTotalOuterPixels = function() {
                var settings = this.settings.row;
                return settings.outerPadding.top + GridLayout.getOuterBorderWidth(settings.gridLineSettings, this.settings.borderSettings);
            }, GridRenderer.prototype.getRowHeightWithoutPadding = function(totalOuterPixels) {
                var adjustedOuterPixels = totalOuterPixels;
                return 1 === this.getTotalRowCount() && (adjustedOuterPixels += totalOuterPixels), 
                this.getRowHeight(0) - adjustedOuterPixels;
            }, GridRenderer.prototype.getRowWidthWithoutPadding = function(totalOuterPixels) {
                var adjustedOuterPixels = totalOuterPixels;
                return 1 === this.getTotalColumnCount() && (adjustedOuterPixels += totalOuterPixels), 
                getRowWidth(this.settings.row, this.settings.gridLineSettings, this.settings.borderSettings, 0) - adjustedOuterPixels;
            }, GridRenderer.prototype.updateGridLines = function(parentSelection, gridLines, directionSelector) {
                var gridLinesSelection = parentSelection.selectAll("".concat(gridLayoutSelectors.F6.selector, ".").concat(directionSelector.class)).data(gridLines, function(gridLine) {
                    return gridLine.key;
                }), gridlinesEnterSelection = gridLinesSelection.enter().append("div").classed(gridLayoutSelectors.F6.class, !0).classed(directionSelector.class, !0);
                gridlinesEnterSelection.merge(gridLinesSelection).style("top", function(d) {
                    return d.position.top;
                }).style("right", function(d) {
                    return d.position.right;
                }).style("bottom", function(d) {
                    return d.position.bottom;
                }).style("left", function(d) {
                    return d.position.left;
                }).style("width", function(d) {
                    return d.size.width;
                }).style("border-left", function(d) {
                    return d.style.vertical;
                }).style("border-top", function(d) {
                    return d.style.horizontal;
                }).classed(gridLayoutSelectors.IA.class, !this.isPaginated && this.settings.isHorizontal), 
                this.featureSwitches && this.featureSwitches.onObject && gridlinesEnterSelection.classed(htmlSubSelectionHelper.cy, !0).attr(htmlSubSelectionHelper.Ez, "small-multiples-gridlines").attr(htmlSubSelectionHelper.CK, "Small_Multiples_Border").attr(htmlSubSelectionHelper.QZ, 3), 
                gridLinesSelection.exit().remove();
            }, GridRenderer.prototype.buildRow = function(rowWrapper, settings, cellIndex, totalCellCount, rowIndex) {
                var _a = function(settings, gridLineSettings, gridBorderSettings, rowIndex, totalRowCount) {
                    var subheaderAtTop = settings.subheaderShow && 1 !== settings.subheaderPosition, rowHeightValues = getRowHeight(rowIndex, totalRowCount, settings, gridBorderSettings), rowWrapperHeight = rowHeightValues.height, topPadding = rowHeightValues.topPadding, bottomPadding = rowHeightValues.bottomPadding, cellHeight = rowWrapperHeight - topPadding - bottomPadding, rowWrapperStyling = {}, isHorizontalScrollable = settings.isHorizontal && !settings.isPaginated, rowStyling = {}, gridLineWrapperStyling = {}, gridLineWrapperBottomStyling = {}, cellStyling = {}, cellContentStyling = {}, subheaderStyling = {}, rowHeaderCellStyling = {}, rowWrapperWidth = getRowWidth(settings, gridLineSettings, gridBorderSettings, rowIndex), rowWidth = rowWrapperWidth, gridLineWrapperHeight = topPadding, gridLineWrapperWidth = rowWrapperWidth;
                    if (isHorizontalScrollable) {
                        gridLineWrapperWidth = 0;
                        var outerBorderWidth = GridLayout.getOuterBorderWidth(gridLineSettings, gridBorderSettings);
                        gridLineSettings && (gridLineWrapperWidth = gridLineSettings.strokeWidth, gridLineWrapperHeight += rowHeightValues.height - outerBorderWidth), 
                        rowWrapperStyling["flex-direction"] = "row";
                    } else rowWrapperStyling["flex-direction"] = "column";
                    return rowWrapperStyling.width = "".concat(rowWrapperWidth, "px"), rowStyling.width = "".concat(rowWidth, "px"), 
                    gridLineWrapperStyling.width = "".concat(gridLineWrapperWidth, "px"), gridLineWrapperStyling.height = "".concat(gridLineWrapperHeight, "px"), 
                    rowWrapperStyling.height = "".concat(rowWrapperHeight, "px"), rowStyling.height = "".concat(cellHeight, "px"), 
                    gridLineWrapperBottomStyling.height = "".concat(bottomPadding, "px"), cellStyling["flex-direction"] = subheaderAtTop ? "column-reverse" : "column", 
                    cellContentStyling.width = "".concat(settings.cell.width, "px"), settings.subheaderShow ? (subheaderStyling["line-height"] = "".concat(settings.subheaderLineHeight, "px"), 
                    subheaderStyling.height = "".concat(settings.subheaderHeight, "px"), subheaderStyling.width = "".concat(settings.cell.width, "px"), 
                    rowHeaderCellStyling["padding-top"] = "".concat(subheaderAtTop ? settings.subheaderHeight : 0, "px")) : rowHeaderCellStyling["padding-top"] = "0px", 
                    rowHeaderCellStyling.height = "".concat(cellHeight, "px"), rowStyling["flex-direction"] = settings.isHorizontal && !settings.isPaginated ? "column" : "", 
                    {
                        rowWrapperStyling,
                        rowStyling,
                        gridLineWrapperStyling,
                        gridLineWrapperBottomStyling,
                        cellStyling,
                        cellContentStyling,
                        subheaderStyling,
                        rowHeaderCellStyling
                    };
                }(settings, this.settings.gridLineSettings, this.settings.borderSettings, rowIndex, this.getTotalRowCount()), rowStyling = _a.rowStyling, gridLineWrapperStyling = _a.gridLineWrapperStyling, gridLineWrapperBottomStyling = _a.gridLineWrapperBottomStyling, cellStyling = _a.cellStyling, cellContentStyling = _a.cellContentStyling, subheaderStyling = _a.subheaderStyling, rowHeaderCellStyling = _a.rowHeaderCellStyling;
                rowWrapper.css(_a.rowWrapperStyling);
                var $gridlineWrapper = rowWrapper.find(gridLayoutSelectors.oE.selector);
                0 === $gridlineWrapper.length && ($gridlineWrapper = this.buildElement(rowWrapper, gridLayoutSelectors.oE.class)), 
                $gridlineWrapper.css(gridLineWrapperStyling);
                var $row = rowWrapper.find(gridLayoutSelectors.X2.selector);
                0 === $row.length && ($row = this.buildElement(rowWrapper, gridLayoutSelectors.X2.class)), 
                $row.css(rowStyling), $row.attr("role", "row"), $row.attr("aria-rowindex", rowIndex + 1);
                var $gridlineWrapperBottom = rowWrapper.find(gridLayoutSelectors.MR.selector);
                0 === $gridlineWrapperBottom.length && ($gridlineWrapperBottom = this.buildElement(rowWrapper, gridLayoutSelectors.MR.class)), 
                $gridlineWrapperBottom.css(gridLineWrapperBottomStyling), this.renderTopGridline(rowIndex, settings, d3.select($gridlineWrapper[0])), 
                this.renderRowInnerGridline(rowIndex, settings, d3.select($gridlineWrapper[0])), 
                this.buildHeaderCell($row, 0, rowHeaderCellStyling, settings), this.buildCells($row, settings, cellIndex, totalCellCount, cellStyling, cellContentStyling, subheaderStyling, rowIndex), 
                this.buildHeaderCell($row, 1, rowHeaderCellStyling, settings), this.renderBottomGridline(rowIndex, settings, d3.select($gridlineWrapperBottom[0])), 
                this.orderRowContent(d3.select($row[0]));
            }, GridRenderer.prototype.buildCells = function(row, settings, cellIndex, totalCellCount, cellStyling, cellContentStyling, subheaderStyling, rowIndex) {
                for (var cells = row.find(gridLayoutSelectors.bL.selector), columnIndex = 0; columnIndex < this.virtualColumnCount; columnIndex++) {
                    var index = cellIndex + columnIndex, cell = cells.eq(columnIndex);
                    0 === cell.length && (cell = this.buildElement(row, gridLayoutSelectors.bL.class)), 
                    cellStyling = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, cellStyling), {
                        "padding-top": "",
                        "padding-left": "",
                        "padding-right": "",
                        "margin-left": "",
                        "margin-right": "",
                        "background-color": "",
                        "margin-top": "",
                        "margin-bottom": ""
                    }), cell.attr("role", "gridcell"), cell.attr("aria-colindex", columnIndex + 1);
                    var isFirstColumn = 0 === columnIndex, isLastColumn = columnIndex === this.virtualColumnCount - 1, outerBorderWidth = GridLayout.getOuterBorderWidth(this.settings.gridLineSettings, this.settings.borderSettings), innerGridLineWidth = GridLayout.hasHorizontalGridLines(this.settings.gridLineSettings) ? this.settings.gridLineSettings.strokeWidth : 0;
                    settings.isHorizontal && !settings.isPaginated ? (cellStyling["padding-left"] = isFirstRow(rowIndex, settings) ? "".concat(outerBorderWidth, "px") : "".concat(settings.cellPadding.left - innerGridLineWidth, "px"), 
                    isFirstColumn || (cellStyling["padding-top"] = "".concat(settings.cellPadding.top, "px")), 
                    isFirstColumn && (cellStyling["margin-top"] = "".concat(outerBorderWidth, "px")), 
                    isLastColumn && (cellStyling["margin-bottom"] = "".concat(outerBorderWidth, "px"))) : (cellStyling["padding-left"] = "".concat(isFirstColumn ? settings.outerPadding.left : settings.cellPadding.left, "px"), 
                    isLastColumn && (cellStyling["padding-right"] = "".concat(settings.outerPadding.right, "px")), 
                    isFirstColumn && (cellStyling["margin-left"] = "".concat(outerBorderWidth, "px")), 
                    isLastColumn && (cellStyling["margin-right"] = "".concat(outerBorderWidth, "px")));
                    var content = cell.find(gridLayoutSelectors.J5.selector), subheader = cell.find(gridLayoutSelectors.bU.selector);
                    if (index >= totalCellCount) content.remove(), subheader.remove(), cellStyling["background-color"] = ""; else {
                        0 === content.length && (content = this.buildElement(cell, gridLayoutSelectors.J5.class)), 
                        content.css(cellContentStyling);
                        var backgroundColor = settings.cell.getCellBackgroundColor(index);
                        if (backgroundColor) {
                            var rgbColor = (0, VisualsCommon_color.WV)(backgroundColor), colorWithOpacity = (0, 
                            VisualsCommon_color.b9)(rgbColor, (100 - settings.cell.backgroundTransparency) / 100);
                            cellStyling["background-color"] = (0, VisualsCommon_color.U8)(colorWithOpacity);
                        } else cellStyling["background-color"] = "";
                        settings.subheaderShow ? (0 === subheader.length && (subheader = this.buildElement(cell, gridLayoutSelectors.bU.class), 
                        this.featureSwitches && this.featureSwitches.onObject && d3.select(subheader.get(0)).classed(htmlSubSelectionHelper.cy, !0).attr(htmlSubSelectionHelper.Ez, "grid-cell-subheader").attr(htmlSubSelectionHelper.CK, "Small_Multiples_Title").attr(htmlSubSelectionHelper.QZ, 1)), 
                        subheader.css(subheaderStyling)) : subheader.remove();
                    }
                    cell.css(cellStyling);
                }
                cells.slice(this.virtualColumnCount).remove();
            }, GridRenderer.prototype.buildHeaderCell = function(row, headerPosition, rowHeaderCellStyling, settings) {
                var cellWidth, cellClass;
                debug.fF.assert(function() {
                    return 0 === headerPosition || 1 === headerPosition;
                }, "buildHeaderCell expects header position to be left or right."), 0 === headerPosition ? (cellWidth = settings.headerWidth, 
                cellClass = gridLayoutSelectors.yD.class) : (cellWidth = settings.footerWidth, cellClass = gridLayoutSelectors.yT.class);
                var headerCell = findRowHeaderCell(row, headerPosition);
                cellWidth <= 0 ? headerCell.remove() : (0 === headerCell.length && (headerCell = this.buildElement(row, gridLayoutSelectors.qN.class)).addClass(cellClass), 
                headerCell.css(rowHeaderCellStyling), headerCell.css("width", "".concat(cellWidth, "px")));
            }, GridRenderer.prototype.orderRowContent = function(rowSelection) {
                var renderOrderableElements = rowSelection.selectAll(_.map(RowOrderableElements, function(r) {
                    return r.selector;
                }).join(", ")).nodes();
                renderOrderableElements.sort(function(a, b) {
                    for (var result = 0, index = 0; index < RowOrderableElements.length; index++) result += Number(d3.select(a).classed(RowOrderableElements[index].class)) * index, 
                    result -= Number(d3.select(b).classed(RowOrderableElements[index].class)) * index;
                    return result;
                }), d3.selectAll(renderOrderableElements).order();
            }, GridRenderer.prototype.renderRowGridline = function(shouldRender, gridLineStart, key, selector, settings, divSelection) {
                var gridLine = [];
                if (shouldRender) {
                    var isHorizontalScrollable = this.settings.isHorizontal && !this.isPaginated, style = (0, 
                    strokeStyle.YE)(settings.gridLineSettings), outerGridlineAdjustment = GridLayout.getOuterBorderWidth(settings.gridLineSettings, this.settings.borderSettings), gridLinePosition = {
                        top: "".concat(isHorizontalScrollable ? outerGridlineAdjustment : gridLineStart, "px"),
                        left: "".concat(settings.headerWidth + (isHorizontalScrollable ? gridLineStart : outerGridlineAdjustment), "px")
                    };
                    if (isHorizontalScrollable) gridLine.push({
                        key,
                        position: gridLinePosition,
                        size: gridLineSize = {
                            width: "0px"
                        },
                        style: {
                            vertical: style
                        }
                    }); else {
                        var gridLineSize = {
                            width: "".concat(settings.cell.width * settings.columnCount + settings.cellPadding.left * (settings.columnCount - 1) + settings.outerPadding.left + settings.outerPadding.right, "px")
                        };
                        gridLine.push({
                            key,
                            position: gridLinePosition,
                            size: gridLineSize,
                            style: {
                                horizontal: style
                            }
                        });
                    }
                }
                this.updateGridLines(divSelection, gridLine, selector);
            }, GridRenderer.prototype.renderRowInnerGridline = function(rowIndex, settings, divSelection) {
                var gridLineSettings = settings.gridLineSettings, shouldRender = rowIndex > 0 && GridLayout.hasHorizontalGridLines(gridLineSettings), gridLineStart = shouldRender ? Math.floor((settings.cellPadding.top - gridLineSettings.strokeWidth) / 2) : 0, key = "inner-horizontal-".concat(rowIndex - 1);
                this.renderRowGridline(shouldRender, gridLineStart, key, gridLayoutSelectors.SM, settings, divSelection);
            }, GridRenderer.prototype.renderTopGridline = function(rowIndex, settings, divSelection) {
                var shouldRender = 0 === rowIndex && GridLayout.hasOuterGridLines(settings.gridLineSettings);
                this.renderRowGridline(shouldRender, 0, "outer-horizontal-0", gridLayoutSelectors.J3, settings, divSelection);
            }, GridRenderer.prototype.renderBottomGridline = function(rowIndex, settings, divSelection) {
                var gridLineSettings = settings.gridLineSettings, shouldRender = rowIndex === this.getTotalRowCount() - 1 && GridLayout.hasOuterGridLines(gridLineSettings);
                this.renderRowGridline(shouldRender, settings.outerPadding.bottom, "outer-horizontal-1", gridLayoutSelectors.J3, settings, divSelection);
            }, GridRenderer.prototype.renderRow = function(row, settings, cellIndex, renderHeader, totalCellCount, scrollPosition) {
                var rowIndex = Math.floor(cellIndex / this.virtualColumnCount);
                this.buildRow(row, settings, cellIndex, totalCellCount, rowIndex);
                var viewport = {
                    width: settings.cell.width,
                    height: settings.height,
                    scale: settings.scale
                };
                settings.headerWidth > 0 && this.renderHeaderCell(findRowHeaderCell(row, 0), rowIndex, 0, viewport.height, settings.headerWidth, settings.scale, renderHeader);
                for (var cells = row.find(gridLayoutSelectors.bL.selector), i = 0; i < this.virtualColumnCount; i++) {
                    var index = cellIndex + i;
                    if (!(index >= totalCellCount)) {
                        var cell = cells.eq(i), renderCellData = {
                            element: cell.find(gridLayoutSelectors.J5.selector),
                            index,
                            viewport,
                            scrollPosition
                        };
                        if (this.behavior && (renderCellData.bindDataToGridCell = gridLayoutBehaviors.p$.bindDataToGridCell), 
                        settings.cell.renderCell(renderCellData), settings.subheaderShow) {
                            var subheaderRenderCellData = {
                                element: cell.find(gridLayoutSelectors.bU.selector),
                                index,
                                viewport: {
                                    width: settings.cell.width,
                                    height: settings.subheaderHeight,
                                    scale: settings.scale
                                },
                                scrollPosition
                            };
                            this.behavior && (subheaderRenderCellData.styleSubheader = gridLayoutBehaviors.p$.styleSubheader), 
                            settings.cell.renderCellSubheader(subheaderRenderCellData);
                        }
                    }
                }
                settings.footerWidth > 0 && this.renderHeaderCell(findRowHeaderCell(row, 1), rowIndex, 1, viewport.height, settings.footerWidth, settings.scale, renderHeader);
            }, GridRenderer.prototype.renderHeaderCell = function(headerCell, index, position, height, width, scale, renderHeader) {
                renderHeader({
                    index,
                    viewport: {
                        width,
                        height,
                        scale
                    },
                    position,
                    element: headerCell,
                    scrollPosition: this.getScrollPosition()
                });
            }, GridRenderer.prototype.renderListViewRow = function(row) {
                row.each(function(_d, _i) {
                    $(this).addClass(gridLayoutSelectors.YR.class);
                });
            }, GridRenderer.prototype.updateListViewRow = function(row) {
                var self = this, thisRenderingContext = this.renderingContext;
                row.each(function(d, _i) {
                    var $row = $(this);
                    $row.data("GridRenderingContext") !== thisRenderingContext && ($row.data("GridRenderingContext", thisRenderingContext), 
                    self.renderRow($(this), self.settings.row, d.cellIndex, self.settings.renderHeader, self.settings.totalCellCount, self.getScrollPosition()));
                });
            }, GridRenderer.prototype.getRowHeight = function(rowIndex, settings) {
                return void 0 === settings && (settings = this.settings.row), getRowHeight(rowIndex, this.getTotalRowCount(), settings, this.settings.borderSettings).height;
            }, GridRenderer.prototype.buildListViewData = function() {
                for (var cellIndex = 0, data = [], totalRowCount = this.getTotalRowCount(), i = 0; i < totalRowCount; i++) data.push({
                    index: i,
                    cellIndex,
                    columnCount: this.virtualColumnCount
                }), cellIndex += this.virtualColumnCount;
                return data;
            }, GridRenderer.prototype.buildElement = function(parent, className) {
                return $(document.createElement("div")).addClass(className).appendTo(parent);
            }, GridRenderer.prototype.buildGridBody = function() {
                var gridBodyElement = this.buildElement(this.$grid, gridLayoutSelectors.uT.class);
                return gridBodyElement.attr("role", "grid"), this.featureSwitches && this.featureSwitches.onObject && gridBodyElement.attr(htmlSubSelectionHelper.oy, 1), 
                gridBodyElement;
            }, GridRenderer.prototype.getRowsFromBodyOrFooter = function(managedTabIndexOnRowHeader) {
                return this.$container.find("".concat(managedTabIndexOnRowHeader ? gridLayoutSelectors.uT.selector : gridLayoutSelectors.$_.selector, " ").concat(gridLayoutSelectors.X2.selector));
            }, GridRenderer;
        }();
        function getRowHeight(rowIndex, totalRowCount, settings, gridBorder) {
            var bottomPadding = 0, topPadding = 0, totalHeight = 0;
            return settings.isHorizontal && !settings.isPaginated ? (totalHeight = settings.height * settings.rowCount + settings.cellPadding.top * (settings.rowCount - 1), 
            totalHeight += GridLayout.getOuterBorderWidth(settings.gridLineSettings, gridBorder)) : (isFirstRow(rowIndex, settings) && (topPadding += settings.outerPadding.top, 
            topPadding += GridLayout.getOuterBorderWidth(settings.gridLineSettings, gridBorder)), 
            function(rowIndex, settings, totalRowCount) {
                return settings.isPaginated ? rowIndex % settings.rowCount == settings.rowCount - 1 : rowIndex === totalRowCount - 1;
            }(rowIndex, settings, totalRowCount) && (bottomPadding += settings.outerPadding.bottom, 
            bottomPadding += GridLayout.getOuterBorderWidth(settings.gridLineSettings, gridBorder)), 
            (settings.isPaginated && rowIndex % settings.rowCount != 0 || !settings.isPaginated && rowIndex > 0) && (topPadding += settings.cellPadding.top), 
            totalHeight = settings.height + (settings.subheaderShow ? settings.subheaderHeight : 0) + bottomPadding + topPadding), 
            {
                height: totalHeight,
                topPadding,
                bottomPadding
            };
        }
        function isFirstRow(rowIndex, settings) {
            return settings.isPaginated ? rowIndex % settings.rowCount == 0 : 0 === rowIndex;
        }
        function getRowWidth(settings, gridLineSettings, gridBorder, rowIndex) {
            var totalWidth, cell = settings.cell, columnCount = settings.columnCount, cellPadding = settings.cellPadding, outerPadding = settings.outerPadding, _a = settings.headerWidth, headerWidth = void 0 === _a ? 0 : _a, _b = settings.footerWidth, footerWidth = void 0 === _b ? 0 : _b;
            return settings.isHorizontal && !settings.isPaginated ? (totalWidth = cell.width, 
            rowIndex > 0 && (totalWidth += settings.cellPadding.left), 0 === rowIndex && (totalWidth += GridLayout.getOuterBorderWidth(gridLineSettings, gridBorder))) : (totalWidth = cell.width * columnCount + cellPadding.left * (columnCount - 1) + outerPadding.left + outerPadding.right + headerWidth + footerWidth, 
            totalWidth += 2 * GridLayout.getOuterBorderWidth(gridLineSettings, gridBorder)), 
            totalWidth;
        }
        var GridRendererScrollable = function(_super) {
            function GridRendererScrollable() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(GridRendererScrollable, _super), GridRendererScrollable.prototype.getScrollPosition = function() {
                var _a;
                return null === (_a = this.listView) || void 0 === _a ? void 0 : _a.getCurrentPosition();
            }, GridRendererScrollable.prototype.scrollTo = function(position) {
                var _a;
                null === (_a = this.listView) || void 0 === _a || _a.scrollTo(position);
            }, GridRendererScrollable.prototype.clearRenderingTimeout = function() {
                var _a;
                null === (_a = this.listView) || void 0 === _a || _a.clearRenderingTimeout();
            }, GridRendererScrollable.prototype.destroy = function() {
                this.isInitialized && (this.listView.destroy(), this.$gridWrapper.empty(), this.$gridWrapper.remove(), 
                this.isInitialized = !1);
            }, Object.defineProperty(GridRendererScrollable.prototype, "virtualRowCount", {
                get: function() {
                    return this.settings.isHorizontal ? this.settings.columnCount : this.settings.rowCount;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GridRendererScrollable.prototype, "virtualColumnCount", {
                get: function() {
                    return this.settings.isHorizontal ? this.settings.rowCount : this.settings.columnCount;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GridRendererScrollable.prototype, "isPaginated", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), GridRendererScrollable.prototype.initialize = function(visualInstanceId) {
                this.isInitialized = !0, this.$gridWrapper = this.buildElement(this.$container, gridLayoutSelectors.zc.class), 
                this.$grid = this.buildElement(this.$gridWrapper, gridLayoutSelectors.rj.class), 
                this.$gridBody = this.buildGridBody(), this.$gridBorder = this.buildElement(this.$grid, gridLayoutSelectors.OC.class), 
                this.$gridBackground = this.buildElement(this.$grid, gridLayoutSelectors.Aq.class), 
                this.$gridBackgroundColor = this.buildElement(this.$grid, gridLayoutSelectors.lP.class), 
                this.$gridFooter = this.buildElement(this.$grid, gridLayoutSelectors.$_.class), 
                this.$gridFooter.attr("role", "grid");
                var options = this.buildListViewOptions(visualInstanceId);
                this.listView = (0, listView.P)(options);
            }, GridRendererScrollable.prototype.updateViewportElement = function(styles) {
                var _a;
                null === (_a = this.listView) || void 0 === _a || _a.updateScrollingViewport(styles);
            }, GridRendererScrollable.prototype.updateRows = function(resetPosition) {
                var _this = this;
                debug.fF.assert(function() {
                    return _this.isInitialized;
                }, "grid renderer not initialized");
                var data = this.buildListViewData(), totalOuterPixels = this.getTotalOuterPixels(), rowHeight = this.settings.isHorizontal ? this.getRowWidthWithoutPadding(totalOuterPixels) : this.getRowHeightWithoutPadding(totalOuterPixels);
                if (this.listView.viewport(null).rowHeight(rowHeight).paddingBetween(this.settings.row.cellPadding.top).paddingOuter(totalOuterPixels).orientation(this.settings.isHorizontal).data(data, function(d) {
                    return JSON.stringify(d);
                }, resetPosition), this.settings.isHorizontal) this.$gridBody.css("flex-grow", "1"), 
                this.$gridBody.css("flex-basis", null); else {
                    var containerVirtualHeight = this.getVerticalContainerHeight();
                    this.$gridBody.css("flex-grow", null), this.$gridBody.css("flex-basis", containerVirtualHeight);
                }
                return this.$gridBody.attr("aria-rowcount", this.getTotalRowCount()), this.$gridBody.attr("aria-colcount", this.settings.row.columnCount), 
                this.listView.render();
            }, GridRendererScrollable.prototype.buildListViewOptions = function(visualInstanceId) {
                var _this = this;
                return {
                    loadMoreData: function() {
                        return _this.loadMoreHandler();
                    },
                    customLoadMoreCheck: function() {
                        return _this.checkLoadMore();
                    },
                    viewport: this.settings.viewport,
                    baseContainer: d3.select(this.$gridBody.get(0)),
                    scrollEnabled: this.scrollEnabled,
                    isReadMode: function() {
                        return !0;
                    },
                    enter: function(rows) {
                        _this.renderListViewRow(rows);
                    },
                    update: function(rows) {
                        _this.updateListViewRow(rows);
                    },
                    rowHeight: this.settings.isHorizontal ? getRowWidth(this.settings.row, this.settings.gridLineSettings, this.settings.borderSettings, 0) : this.getRowHeightWithoutPadding(this.getTotalOuterPixels()),
                    paddingBetween: this.settings.row.cellPadding.top,
                    paddingOuter: this.getTotalOuterPixels(),
                    doNotRenderToCalculateRowHeight: !0,
                    getContainerHeight: function() {
                        return _this.settings.isHorizontal ? _this.getHorizontalContainerWidth() : _this.getVerticalContainerHeight();
                    },
                    onScroll: function() {
                        return _this.onScroll();
                    },
                    afterScroll: this.behavior ? function() {
                        return _this.bindInteractivity(visualInstanceId);
                    } : void 0
                };
            }, GridRendererScrollable.prototype.onScroll = function() {
                var _a;
                this.formatMode && (null === (_a = this.subSelectionHelper) || void 0 === _a || _a.onVisualScroll());
            }, GridRendererScrollable.prototype.getVerticalContainerHeight = function() {
                var settings = this.settings;
                if (0 === settings.rowCount) return 0;
                for (var containerHeight = 0, index = 0; index < settings.rowCount; index++) containerHeight += getRowHeight(index, this.getTotalRowCount(), settings.row, settings.borderSettings).height;
                var hasScroll = this.hasScroll();
                return containerHeight + GridRenderer.getBottomInnerPadding(hasScroll, this.settings.row.cellPadding.top, this.settings.gridLineSettings);
            }, GridRendererScrollable.prototype.getHorizontalContainerWidth = function() {
                var settings = this.settings;
                if (0 === settings.columnCount) return 0;
                for (var containerWidth = 0, index = 0; index < settings.columnCount; index++) containerWidth += getRowWidth(settings.row, settings.gridLineSettings, settings.borderSettings, index);
                var hasScroll = this.hasScroll();
                return containerWidth + GridRenderer.getRightInnerPadding(hasScroll, this.settings.row.cellPadding.left);
            }, GridRendererScrollable.prototype.getTotalRowCount = function() {
                var totalRowCount = Math.ceil(this.settings.totalCellCount / this.virtualColumnCount);
                return Math.max(totalRowCount, this.virtualRowCount);
            }, GridRendererScrollable.prototype.getTotalColumnCount = function() {
                var totalColumnCount = Math.ceil(this.settings.totalCellCount / this.virtualRowCount);
                return Math.max(totalColumnCount, this.virtualColumnCount);
            }, GridRendererScrollable.prototype.checkLoadMore = function() {
                var _a;
                return null === (_a = this.listView) || void 0 === _a ? void 0 : _a.reachedLastRowContent();
            }, GridRendererScrollable.prototype.bindInteractivity = function(visualInstanceId) {
                var gridLayoutBehaviorOptions = {
                    gridContainer: d3.select(this.$container.get(0)),
                    cells: this.$container.find("".concat(gridLayoutSelectors.uT.selector, " ").concat(gridLayoutSelectors.bL.selector)),
                    columnCount: this.settings.row.columnCount,
                    viewportRowCount: this.settings.rowCount,
                    cellCount: this.settings.totalCellCount,
                    listView: this.listView,
                    visualInstanceId,
                    $rows: this.getRowsFromBodyOrFooter(this.settings.manageTabIndexOnRowHeaderFooter),
                    manageTabIndexOnRowHeaderFooter: this.settings.manageTabIndexOnRowHeaderFooter,
                    eventManager: this.eventManager,
                    boldedSubheaders: this.settings.boldedSubheaders
                };
                this.interactivityService.bind(this.dataToBind, this.behavior, gridLayoutBehaviorOptions, {
                    pointSourceKey: this.pointSourceKey,
                    useSelectableDataPointForHasSelection: !0
                });
            }, GridRendererScrollable.prototype.adjustHeight = function(height, hasScroll, scrollPadding, isHorizontal) {
                return isHorizontal ? height - GridRenderer.getTotalScrollWidth(hasScroll, scrollPadding) : height;
            }, GridRendererScrollable.prototype.adjustWidth = function(width, hasScroll, scrollPadding, isHorizontal) {
                return isHorizontal ? width : width - GridRenderer.getTotalScrollWidth(hasScroll, scrollPadding);
            }, GridRendererScrollable;
        }(GridRenderer), GridRendererPaginated = function(_super) {
            function GridRendererPaginated() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(GridRendererPaginated, _super), GridRendererPaginated.prototype.initialize = function() {
                var _this = this;
                this.isInitialized = !0, this.$gridWrapper = this.buildElement(this.$container, gridLayoutSelectors.zc.class), 
                this.$gridWrapper.css("display", "flex"), this.$grid = this.buildElement(this.$gridWrapper, gridLayoutSelectors.rj.class), 
                this.$gridBody = this.buildGridBody(), this.$gridBorder = this.buildElement(this.$grid, gridLayoutSelectors.OC.class), 
                this.$gridBackground = this.buildElement(this.$grid, gridLayoutSelectors.Aq.class), 
                this.$gridBackgroundColor = this.buildElement(this.$grid, gridLayoutSelectors.lP.class), 
                this.$gridFooter = this.buildElement(this.$grid, gridLayoutSelectors.$_.class), 
                this.$gridFooter.attr("role", "grid"), this.paginatedView = new PaginatedView({
                    viewContainer: d3.select(this.$gridWrapper.get(0)),
                    contentContainer: d3.select(this.$gridBody.get(0)),
                    enter: function(rows) {
                        return _this.renderListViewRow(rows);
                    },
                    update: function(rows) {
                        return _this.updateListViewRow(rows);
                    },
                    loadMoreData: this.loadMoreHandler,
                    scrollEnabled: this.scrollEnabled
                });
            }, GridRendererPaginated.prototype.destroy = function() {
                this.isInitialized && (this.$gridWrapper.empty(), this.$gridWrapper.remove(), this.isInitialized = !1);
            }, Object.defineProperty(GridRendererPaginated.prototype, "virtualRowCount", {
                get: function() {
                    return this.settings.rowCount;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GridRendererPaginated.prototype, "virtualColumnCount", {
                get: function() {
                    return this.settings.columnCount;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GridRendererPaginated.prototype, "isPaginated", {
                get: function() {
                    return !0;
                },
                enumerable: !1,
                configurable: !0
            }), GridRendererPaginated.prototype.updateViewportElement = function(styles) {
                this.$gridBody.css(styles), this.$gridBody.css("min-height", "".concat(this.settings.scrollableViewPort.height, "px")), 
                this.$gridBody.css("width", "".concat(this.settings.scrollableViewPort.width, "px")), 
                this.$gridBody.css("overflow", "hidden");
            }, GridRendererPaginated.prototype.updateRows = function(resetPosition) {
                var _this = this;
                debug.fF.assert(function() {
                    return _this.isInitialized;
                }, "grid renderer not initialized");
                var rowDataStore = this.buildListViewData();
                this.$gridBody.attr("aria-rowcount", this.settings.rowCount), this.$gridBody.attr("aria-colcount", this.settings.columnCount), 
                this.paginatedView.data({
                    rowDataStore,
                    getRowDataKey: function(rowData) {
                        return JSON.stringify(rowData);
                    },
                    rowCount: this.settings.rowCount,
                    columnCount: this.settings.columnCount,
                    totalCellCount: this.settings.totalCellCount,
                    isHorizontal: this.settings.isHorizontal,
                    resetPosition
                }).render();
            }, GridRendererPaginated.prototype.getTotalRowCount = function() {
                var pageCount = Math.ceil(this.settings.totalCellCount / (this.settings.rowCount * this.settings.columnCount));
                return 0 === pageCount ? this.settings.rowCount : pageCount * this.settings.rowCount;
            }, GridRendererPaginated.prototype.getTotalColumnCount = function() {
                var pageCount = Math.ceil(this.settings.totalCellCount / (this.settings.rowCount * this.settings.columnCount));
                return 0 === pageCount ? this.settings.columnCount : pageCount * this.settings.columnCount;
            }, GridRendererPaginated.prototype.getScrollPosition = function() {
                var _a;
                return null === (_a = this.paginatedView) || void 0 === _a ? void 0 : _a.getScrollPosition();
            }, GridRendererPaginated.prototype.adjustHeight = function(height, _hasScroll, _scrollPadding, isHorizontal) {
                return isHorizontal ? height : height - 40;
            }, GridRendererPaginated.prototype.adjustWidth = function(width, _hasScroll, _scrollPadding, isHorizontal) {
                return isHorizontal ? width - 40 : width;
            }, GridRendererPaginated;
        }(GridRenderer);
        function getBorderRadiusStyle(radius) {
            return radius ? "".concat(radius.topLeft, "px  ").concat(null == radius ? void 0 : radius.topRight, "px ").concat(null == radius ? void 0 : radius.bottomRight, "px ").concat(radius.bottomLeft, "px") : "";
        }
    },
    63194: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            p$: function() {
                return GridLayoutBehavior;
            },
            rG: function() {
                return managedTabIndexElement;
            },
            wA: function() {
                return GridLayoutBehaviorFactory;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81337), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(65195), _VisualsCommon_services_jqueryPromiseFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(88987), _VisualsCommon_Utility_browserUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59107), _VisualsData_selection_selectionId__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(26543), _renderUtil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(60066), _gridLayoutSelectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39071), _interactivityUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30237), managedTabIndexElement = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("managed-tab-index-element"), scrollTriggerKeyCodes = [ 34, 33, 36, 35, 32 ], GridLayoutBehaviorFactory = function() {
            function GridLayoutBehaviorFactory(boundDataKey, getAllCells) {
                this.boundDataKey = boundDataKey, this.getAllCells = getAllCells;
            }
            return GridLayoutBehaviorFactory.prototype.create = function() {
                return new GridLayoutBehavior(this.boundDataKey, this.getAllCells);
            }, GridLayoutBehaviorFactory;
        }(), GridLayoutBehavior = function() {
            function GridLayoutBehavior(boundDataKey, getAllCells) {
                this.boundDataKey = boundDataKey, this.getAllCells = getAllCells, this.pendingFocusCall = !1, 
                this.factory = (0, _VisualsCommon_services_jqueryPromiseFactory__WEBPACK_IMPORTED_MODULE_1__.p)();
            }
            return GridLayoutBehavior.prototype.bindEvents = function(options, selectionHandler, _dataPointNavigationManagerWithKey) {
                this.$cells = options.cells, this.columnCount = options.columnCount, this.viewportRowCount = options.viewportRowCount, 
                this.cellCount = options.cellCount, this.listView = options.listView, this.cellCount = options.cellCount, 
                this.visualInstanceId = options.visualInstanceId, this.$rows = options.$rows, this.manageTabIndexOnRowHeaderFooter = options.manageTabIndexOnRowHeaderFooter, 
                this.eventManager = options.eventManager, this.boldedSubheaders = options.boldedSubheaders;
                var behavior = this, dataKey = this.boundDataKey, hasUpdatedEntry = !1, minBoundDataIndex = -1;
                this.$cells.each(function() {
                    var $cell = $(this), boundData = $cell.data(dataKey);
                    if (boundData) {
                        hasUpdatedEntry || (hasUpdatedEntry = behavior.checkUpdateEntryMappingImmediate($cell, boundData, behavior));
                        var boundDataIndex = boundData.getIndex();
                        hasUpdatedEntry || minBoundDataIndex < 0 && (minBoundDataIndex = boundDataIndex);
                        var dataPoint = boundData.getDataPoint();
                        behavior.bindKeyNavigation(this, boundDataIndex, dataPoint, selectionHandler), behavior.bindSubheaderSelection(this, dataPoint, selectionHandler), 
                        behavior.bindClickEvents(this, boundDataIndex);
                    }
                }), hasUpdatedEntry || this.checkUpdateEntryMappingDelayed(minBoundDataIndex >= 0, minBoundDataIndex), 
                options.gridContainer.on("click.selection", function() {
                    (0, _interactivityUtils__WEBPACK_IMPORTED_MODULE_2__.XM)(selectionHandler, GridLayoutBehavior.isValidClickTarget);
                });
            }, GridLayoutBehavior.prototype.renderSelection = function(_hasSelection) {
                var dataKey = this.boundDataKey, boldedSubheaders = this.boldedSubheaders;
                this.$cells.each(function() {
                    var $cell = $(this), boundData = $cell.data(dataKey);
                    boundData && GridLayoutBehavior.styleSubheader($cell, boundData, boldedSubheaders);
                });
            }, GridLayoutBehavior.bindDataToGridCell = function($cell, boundData, boundDataKey) {
                boundData && $cell.data(boundDataKey, boundData);
            }, GridLayoutBehavior.styleSubheader = function($cell, boundData, boldedSubheaders) {
                boldedSubheaders || d3.select($cell.get(0)).select(_gridLayoutSelectors__WEBPACK_IMPORTED_MODULE_3__.bU.selector).style("font-weight", boundData.isSelected() ? "".concat(700) : "normal");
            }, GridLayoutBehavior.isValidClickTarget = function(e) {
                var element = e.target;
                return !_.some([ "scroll-bar", "scroll-element_outer", "scroll-element_track", _gridLayoutSelectors__WEBPACK_IMPORTED_MODULE_3__.bU.class ], function(c) {
                    return element.classList.contains(c);
                });
            }, GridLayoutBehavior.prototype.bindSubheaderSelection = function(cell, dataPoint, selectionHandler) {
                var subheaderElement = d3.select(cell).select(_gridLayoutSelectors__WEBPACK_IMPORTED_MODULE_3__.bU.selector).node();
                subheaderElement && this.eventManager.on(subheaderElement, "click", function() {
                    return (0, _interactivityUtils__WEBPACK_IMPORTED_MODULE_2__.c8)(dataPoint, selectionHandler);
                });
            }, GridLayoutBehavior.prototype.bindKeyNavigation = function(cell, index, dataPoint, selectionHandler) {
                var _this = this, managedElement = d3.select(cell).select(managedTabIndexElement.selector).node();
                managedElement && this.eventManager.on(managedElement, "keydown", function() {
                    var d3Event = d3.event, target = d3.select(d3Event.target), keyCode = d3Event.keyCode;
                    if (target.classed(managedTabIndexElement.class)) {
                        var handleEvent = function(action) {
                            d3Event.preventDefault(), d3Event.stopPropagation(), action();
                        };
                        switch (keyCode) {
                          case 39:
                            index !== _this.getLastCellIndexInRow(index) ? handleEvent(d3Event.shiftKey ? function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.triggerFocusAndSelection(index + 1, dataPoint, selectionHandler) ];
                                    });
                                });
                            } : function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(index + 1, !1) ];
                                    });
                                });
                            }) : handleEvent(function() {});
                            break;

                          case 37:
                            index !== _this.getFirstCellIndexInRow(index) ? handleEvent(d3Event.shiftKey ? function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.triggerFocusAndSelection(index - 1, dataPoint, selectionHandler) ];
                                    });
                                });
                            } : function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(index - 1, !1) ];
                                    });
                                });
                            }) : handleEvent(function() {});
                            break;

                          case 40:
                            var targetIndexDown_1 = index + _this.columnCount;
                            handleEvent(targetIndexDown_1 < _this.cellCount ? d3Event.shiftKey ? function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.triggerFocusAndSelection(targetIndexDown_1, dataPoint, selectionHandler) ];
                                    });
                                });
                            } : function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(targetIndexDown_1, !1) ];
                                    });
                                });
                            } : function() {});
                            break;

                          case 38:
                            var targetIndexUp_1 = index - _this.columnCount;
                            handleEvent(targetIndexUp_1 >= 0 ? d3Event.shiftKey ? function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.triggerFocusAndSelection(targetIndexUp_1, dataPoint, selectionHandler) ];
                                    });
                                });
                            } : function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(targetIndexUp_1, !1) ];
                                    });
                                });
                            } : function() {});
                            break;

                          case 36:
                            _VisualsCommon_Utility_browserUtils__WEBPACK_IMPORTED_MODULE_5__.M.isCtrlOrMeta(d3Event) ? handleEvent(function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(0, !1) ];
                                    });
                                });
                            }) : handleEvent(function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(this.getFirstCellIndexInRow(index), !1) ];
                                    });
                                });
                            });
                            break;

                          case 35:
                            _VisualsCommon_Utility_browserUtils__WEBPACK_IMPORTED_MODULE_5__.M.isCtrlOrMeta(d3Event) ? handleEvent(function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(this.cellCount - 1, !1) ];
                                    });
                                });
                            }) : handleEvent(function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(this.getLastCellIndexInRow(index), !1) ];
                                    });
                                });
                            });
                            break;

                          case 32:
                            handleEvent(function() {
                                return _this.handleCellSelection(dataPoint, selectionHandler);
                            });
                            break;

                          case 65:
                            _VisualsCommon_Utility_browserUtils__WEBPACK_IMPORTED_MODULE_5__.M.isCtrlOrMeta(d3Event) && (selectionHandler.handleClearSelection(), 
                            handleEvent(function() {
                                return _this.handleSelectAll(selectionHandler);
                            }));
                            break;

                          case 33:
                            handleEvent(function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(Math.max(index - this.getCellsPerPage(), 0), !1) ];
                                    });
                                });
                            });
                            break;

                          case 34:
                            handleEvent(function() {
                                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                                        return [ 2, this.focusCellAtIndex(index + this.getCellsPerPage(), !0) ];
                                    });
                                });
                            });
                        }
                    } else _.indexOf(scrollTriggerKeyCodes, keyCode) >= 0 && (d3Event.preventDefault(), 
                    d3Event.stopPropagation());
                });
            }, GridLayoutBehavior.prototype.checkUpdateEntryMappingImmediate = function($cell, boundData, behavior) {
                var boundDataIdentity = boundData.getDataPoint().identity, entryCellKeyMapping = behavior.entryCellKeyMapping, shouldInitEntry = void 0 === entryCellKeyMapping, shouldUpdateEntry = entryCellKeyMapping && _VisualsData_selection_selectionId__WEBPACK_IMPORTED_MODULE_6__.l0.isEqual(boundDataIdentity, behavior.entryCellKeyMapping.key);
                if (shouldInitEntry || shouldUpdateEntry) {
                    var newEntryMapping = {
                        cell: $cell,
                        index: boundData.getIndex(),
                        key: boundDataIdentity,
                        selectableDataPoint: boundData.getDataPoint()
                    };
                    return behavior.setEntryCellKeyMapping(newEntryMapping), !0;
                }
                return !1;
            }, GridLayoutBehavior.prototype.checkUpdateEntryMappingDelayed = function(hasBoundData, minBoundDataIndex) {
                this.setEntryCellKeyMapping(hasBoundData ? this.getCellKeyMapping(minBoundDataIndex) : void 0);
            }, GridLayoutBehavior.prototype.focusCellAtIndex = function(newIndex, manualLoadMore) {
                var _this = this, deferred = this.factory.defer(), rowIndex = this.getRowIndexFromCellIndex(newIndex), capAtMaxIndex = manualLoadMore;
                return this.pendingFocusCall ? deferred.resolve(1) : (this.pendingFocusCall = !0, 
                this.focusCallback = function() {
                    var finalIndex = capAtMaxIndex ? Math.min(newIndex, _this.cellCount - 1) : newIndex, nextCellKeyMapping = _this.getCellKeyMapping(finalIndex);
                    nextCellKeyMapping && (_this.setEntryCellKeyMapping(nextCellKeyMapping), _this.pendingFocusCall = !1, 
                    _VisualsCommon_Utility_browserUtils__WEBPACK_IMPORTED_MODULE_5__.M.focus(_this.getManagedElementFromCell(nextCellKeyMapping.cell).get(0), {
                        preventScroll: !0
                    })), _this.pendingFocusCall = !1, deferred.resolve(0);
                }, this.listView.scrollRowIntoView(rowIndex, this.focusCallback)), deferred.promise;
            }, GridLayoutBehavior.prototype.setEntryCellKeyMapping = function(newMapping) {
                var currentEntryCellKeyMapping = this.entryCellKeyMapping;
                if (currentEntryCellKeyMapping && currentEntryCellKeyMapping.cell) {
                    var oldManagedElement = this.getManagedElementFromCell(currentEntryCellKeyMapping.cell);
                    oldManagedElement.removeAttr("tabindex"), oldManagedElement.removeAttr("focusable"), 
                    oldManagedElement.attr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_7__.Rh, "true");
                }
                if (newMapping) {
                    var newManagedElement = this.getManagedElementFromCell(newMapping.cell);
                    newManagedElement.attr("tabindex", 0), newManagedElement.attr("focusable", "true"), 
                    newManagedElement.attr("aria-labelledby", "".concat(this.visualInstanceId, "-").concat(newMapping.index)), 
                    newManagedElement.removeAttr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_7__.Rh), 
                    this.updateFocusAttributesForRowHeaders(newMapping.index);
                }
                this.entryCellKeyMapping = newMapping;
            }, GridLayoutBehavior.prototype.getCellKeyMapping = function(index) {
                var cellKeyMapping, dataKey = this.boundDataKey;
                return this.$cells.each(function() {
                    var $cell = $(this), boundData = $cell.data(dataKey);
                    if (boundData) {
                        var boundDataIndex = boundData.getIndex();
                        if (boundDataIndex === index) return cellKeyMapping = {
                            cell: $cell,
                            key: boundData.getDataPoint().identity,
                            index: boundDataIndex,
                            selectableDataPoint: boundData.getDataPoint()
                        }, !1;
                    }
                }), cellKeyMapping;
            }, GridLayoutBehavior.prototype.getRowIndexFromCellIndex = function(cellIndex) {
                return Math.floor(cellIndex / this.columnCount);
            }, GridLayoutBehavior.prototype.getColumnIndexFromCellIndex = function(cellIndex) {
                return cellIndex % this.columnCount;
            }, GridLayoutBehavior.prototype.getCellsPerPage = function() {
                return this.columnCount * this.viewportRowCount;
            }, GridLayoutBehavior.prototype.getFirstCellIndexInRow = function(cellIndex) {
                return this.getRowIndexFromCellIndex(cellIndex) * this.columnCount;
            }, GridLayoutBehavior.prototype.getLastCellIndexInRow = function(cellIndex) {
                return Math.min(this.cellCount - 1, this.getFirstCellIndexInRow(cellIndex) + this.columnCount - 1);
            }, GridLayoutBehavior.prototype.getManagedElementFromCell = function(cell) {
                return cell.find(managedTabIndexElement.selector).first();
            }, GridLayoutBehavior.prototype.getManagedElementFromRows = function($rows, parentElementSelector) {
                return $rows.find("".concat(parentElementSelector, " ").concat(managedTabIndexElement.selector));
            }, GridLayoutBehavior.prototype.handleCellSelection = function(dataPoint, selectionHandler) {
                (0, _interactivityUtils__WEBPACK_IMPORTED_MODULE_2__.c8)(dataPoint, selectionHandler);
            }, GridLayoutBehavior.prototype.handleSelectAll = function(selectionHandler) {
                var allCells = this.getAllCells();
                _.isEmpty(allCells) || selectionHandler.handleMultipleSelection(allCells.map(function(cell) {
                    return cell.getDataPoint();
                }), 1);
            }, GridLayoutBehavior.prototype.appendCellToSelection = function(dataPoint, selectionHandler) {
                selectionHandler.handleMultipleSelection([ dataPoint ], 1);
            }, GridLayoutBehavior.prototype.triggerFocusAndSelection = function(targetIndex, dataPoint, selectionHandler) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function() {
                    var nextCellKeyMapping, newDataPoint;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_4__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.focusCellAtIndex(targetIndex, !1) ];

                          case 1:
                            return 1 !== _a.sent() && (nextCellKeyMapping = this.getCellKeyMapping(targetIndex), 
                            newDataPoint = nextCellKeyMapping ? nextCellKeyMapping.selectableDataPoint : void 0, 
                            dataPoint.selected && newDataPoint && this.appendCellToSelection(newDataPoint, selectionHandler)), 
                            [ 2 ];
                        }
                    });
                });
            }, GridLayoutBehavior.prototype.updateFocusAttributesForRowHeaders = function(cellIndex) {
                var targetIndex, self = this;
                this.manageTabIndexOnRowHeaderFooter ? (targetIndex = this.getRowIndexFromCellIndex(cellIndex), 
                this.$rows.each(function() {
                    var $row = $(this), managedTabIndexElementFromHeader = self.getManagedElementFromRows($row, _gridLayoutSelectors__WEBPACK_IMPORTED_MODULE_3__.qN.selector);
                    $row.attr("aria-rowindex") === (targetIndex + 1).toString() ? managedTabIndexElementFromHeader.attr("tabindex", 0).attr("focusable", "true").addClass(_renderUtil__WEBPACK_IMPORTED_MODULE_8__.Pg).removeAttr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_7__.Rh) : managedTabIndexElementFromHeader.removeAttr("tabindex").removeAttr("focusable").removeClass(_renderUtil__WEBPACK_IMPORTED_MODULE_8__.Pg).attr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_7__.Rh, "true");
                })) : (targetIndex = this.getColumnIndexFromCellIndex(cellIndex), self.getManagedElementFromRows(this.$rows, "").each(function(index) {
                    var $element = $(this);
                    index === targetIndex ? $element.attr("tabindex", 0).attr("focusable", "true").addClass(_renderUtil__WEBPACK_IMPORTED_MODULE_8__.Pg).removeAttr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_7__.Rh) : $element.removeAttr("tabindex").removeAttr("focusable").removeClass(_renderUtil__WEBPACK_IMPORTED_MODULE_8__.Pg).attr(_VisualsCommon_DOMConstants__WEBPACK_IMPORTED_MODULE_7__.Rh, "true");
                }));
            }, GridLayoutBehavior.prototype.bindClickEvents = function(cell, boundDataIndex) {
                var _this = this, cellContentElement = d3.select(cell).select(_gridLayoutSelectors__WEBPACK_IMPORTED_MODULE_3__.J5.selector).node();
                this.eventManager.on(cellContentElement, "click", function() {
                    var nextCellKeyMapping = _this.getCellKeyMapping(boundDataIndex);
                    nextCellKeyMapping && _this.setEntryCellKeyMapping(nextCellKeyMapping);
                });
            }, GridLayoutBehavior;
        }();
    },
    39071: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $_: function() {
                return Footer;
            },
            Aq: function() {
                return Background;
            },
            F6: function() {
                return GridLineSelector;
            },
            IA: function() {
                return GridLineRotatedSelector;
            },
            J3: function() {
                return HorizontalOuterGridLineSelector;
            },
            J5: function() {
                return CellContent;
            },
            MB: function() {
                return VerticalGridLineSelector;
            },
            MR: function() {
                return HorizontalGridLineWrapperBottomSelector;
            },
            OC: function() {
                return Border;
            },
            SM: function() {
                return HorizontalGridLineSelector;
            },
            X2: function() {
                return Row;
            },
            YR: function() {
                return GridRowWrapperSelector;
            },
            bL: function() {
                return Cell;
            },
            bU: function() {
                return SubHeader;
            },
            lP: function() {
                return BackgroundColor;
            },
            oE: function() {
                return HorizontalGridLineWrapperSelector;
            },
            qN: function() {
                return HeaderCell;
            },
            rj: function() {
                return Grid;
            },
            uT: function() {
                return Body;
            },
            yD: function() {
                return RowHeader;
            },
            yT: function() {
                return RowFooter;
            },
            zc: function() {
                return GridWrapper;
            }
        });
        var _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), GridWrapper = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-wrapper"), Grid = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid"), Border = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-border"), Background = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-background"), BackgroundColor = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-background-color"), Cell = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-cell"), CellContent = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-cell-content"), SubHeader = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-cell-subheader"), HeaderCell = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-header-cell"), Row = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-row"), Footer = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-footer"), Body = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-body"), GridLineSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-line"), VerticalGridLineSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("vertical"), HorizontalGridLineSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("horizontal"), HorizontalGridLineWrapperSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("horizontal-wrapper"), HorizontalGridLineWrapperBottomSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("horizontal-wrapper-bottom"), HorizontalOuterGridLineSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("horizontal-outer"), GridRowWrapperSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("small-multiples-grid-row-wrapper"), GridLineRotatedSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("grid-line-rotated"), RowHeader = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("row-header"), RowFooter = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("row-footer");
    },
    39407: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            J_: function() {
                return build;
            },
            y$: function() {
                return getNodeAtCategoryIndexForDepth;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _VisualsData_dataView_dataViewScopeIdentity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78843), _VisualsData_semanticQuery_exprPatterns_scopeIdentityExtractor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(26743), HierarchyNodeType = function(HierarchyNodeType) {
            return HierarchyNodeType[HierarchyNodeType.Leaf = 0] = "Leaf", HierarchyNodeType[HierarchyNodeType.NonLeaf = 1] = "NonLeaf", 
            HierarchyNodeType;
        }({});
        function isNonLeaf(node) {
            return isKind(node, HierarchyNodeType.NonLeaf);
        }
        function isKind(node, kind) {
            return node && node.kind === kind;
        }
        function getNodeAtCategoryIndexForDepth(rootNode, categoryIndex, depth) {
            if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                return depth >= 0;
            }, "depth must be greater than or equal to 0"), 0 === depth) return rootNode;
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                return isNonLeaf(rootNode);
            }, "rootNode must be non-leaf if depth > 0");
            for (var currentNode = rootNode, _loop_1 = function(currentDepth) {
                var children = currentNode.children;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return !_.isEmpty(children);
                }, "currentNode has no children");
                var levelNode = _.head(children);
                currentNode = getNodeAtCategoryIndex(levelNode, categoryIndex);
            }, currentDepth = 1; currentDepth <= depth; currentDepth++) _loop_1();
            return currentNode;
        }
        function getNodeAtCategoryIndex(node, categoryIndex) {
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(node, "node must not be null or undefined"), 
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                return !node.visited;
            }, "Detected loop in previous/next references. node has already been visited.");
            var currentMaxIndex = getMaxIndex(node);
            if (currentMaxIndex === categoryIndex) return node;
            if (currentMaxIndex < categoryIndex) {
                var nextNode = node.next;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(nextNode, "categoryIndex is greater than the greatest maxCategoryIndex"), 
                setVisited(node);
                var returnNode = getNodeAtCategoryIndex(nextNode, categoryIndex);
                return clearVisited(node), returnNode;
            }
            var previousNode = node.previous;
            return previousNode && getMaxIndex(previousNode) >= categoryIndex ? (setVisited(node), 
            returnNode = getNodeAtCategoryIndex(previousNode, categoryIndex), clearVisited(node), 
            returnNode) : node;
        }
        function setVisited(item) {
            item.visited = !0;
        }
        function clearVisited(item) {
            delete item.visited;
        }
        function getMaxIndex(node) {
            return function(node) {
                return isKind(node, HierarchyNodeType.Leaf);
            }(node) ? node.categoryIndex : isNonLeaf(node) ? node.maxCategoryIndex : void _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("Unhandled hierarchical node type");
        }
        function getLastLevelNode(node) {
            if (node.parent) {
                var parent_1 = node.parent;
                if (!_.isEmpty(parent_1.children)) return _.last(parent_1.children);
                var previousParent = getLastLevelNode(parent_1);
                return previousParent && _.last(previousParent.children);
            }
        }
        function build(categories) {
            for (var categorySpan = _.head(categories).values.length, rootNode = {
                categorySpan,
                children: [],
                kind: HierarchyNodeType.NonLeaf,
                maxCategoryIndex: categorySpan,
                parent: null
            }, usedCategorySpan = 0; usedCategorySpan < categorySpan; ) usedCategorySpan += buildSubtree(rootNode, categories, 0, usedCategorySpan);
            return rootNode;
        }
        function buildSubtree(parent, categoryColumns, columnIndex, categoryIndex, identitySubsetExprs) {
            identitySubsetExprs || (identitySubsetExprs = []);
            var previousNode, categoryColumn = categoryColumns[columnIndex], columnSubsetExprs = identitySubsetExprs[columnIndex];
            if (!columnSubsetExprs) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(categoryColumn.source.identityExprs, "levelCategory.source.identityExprs");
                var newIdentityExprs = categoryColumn.source.identityExprs;
                (columnSubsetExprs = identitySubsetExprs[columnIndex] = columnIndex > 0 ? identitySubsetExprs[columnIndex - 1].slice() : []).push.apply(columnSubsetExprs, newIdentityExprs || []);
            }
            var categorySpan = function(categoryColumn, startCategoryIndex, identitySubsetExprs) {
                for (var levelIdentity, categorySpan = 0, categoryValuesLength = categoryColumn.values.length, categoryIndex = startCategoryIndex; categoryIndex < categoryValuesLength; categoryIndex++) {
                    var currentIdentity = getSpecificIdentityFromCompositeIdentity(categoryColumn, categoryIndex, identitySubsetExprs);
                    if (levelIdentity && !(0, _VisualsData_dataView_dataViewScopeIdentity__WEBPACK_IMPORTED_MODULE_1__.fS)(levelIdentity, currentIdentity)) break;
                    levelIdentity || (levelIdentity = currentIdentity), categorySpan++;
                }
                return categorySpan;
            }(categoryColumn, categoryIndex, columnSubsetExprs), node = {
                categorySpan,
                children: [],
                kind: HierarchyNodeType.NonLeaf,
                maxCategoryIndex: null,
                parent
            };
            void 0 === previousNode && (previousNode = getLastLevelNode(node)), previousNode && (node.previous = previousNode, 
            previousNode.next = node);
            var nextColumnIndex = columnIndex + 1;
            if (nextColumnIndex >= categoryColumns.length - 1) !function(parent, categoryColumn, startCategoryIndex, categorySpan) {
                for (var previousLeaf, categoryIndex = startCategoryIndex, endCategoryIndex = startCategoryIndex + categorySpan; categoryIndex < endCategoryIndex; categoryIndex++) {
                    var leaf = {
                        categoryIndex,
                        kind: HierarchyNodeType.Leaf,
                        parent,
                        previous: previousLeaf
                    };
                    void 0 === previousLeaf && (previousLeaf = getLastLevelNode(leaf)), previousLeaf && (previousLeaf.next = leaf, 
                    leaf.previous = previousLeaf), previousLeaf = leaf, parent.children.push(leaf);
                }
            }(node, 0, categoryIndex, categorySpan); else for (var usedCategorySpan = 0; usedCategorySpan < categorySpan; ) usedCategorySpan += buildSubtree(node, categoryColumns, nextColumnIndex, usedCategorySpan + categoryIndex, identitySubsetExprs);
            var lastChild = _.last(node.children);
            switch (lastChild.kind) {
              case HierarchyNodeType.Leaf:
                node.maxCategoryIndex = lastChild.categoryIndex;
                break;

              case HierarchyNodeType.NonLeaf:
                node.maxCategoryIndex = lastChild.maxCategoryIndex;
                break;

              default:
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("Unhandled HierarchyNodeType");
            }
            return parent.children.push(node), categorySpan;
        }
        function getSpecificIdentityFromCompositeIdentity(column, valueIndex, groupIdentityFields) {
            var columnIdentities = column.identity;
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertNonEmpty(columnIdentities, "columnIdentities");
            var identity = columnIdentities[valueIndex];
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(identity, "identity");
            var identitySubsetExpr = (0, _VisualsData_semanticQuery_exprPatterns_scopeIdentityExtractor__WEBPACK_IMPORTED_MODULE_2__.J2)(identity.expr, groupIdentityFields);
            return (0, _VisualsData_dataView_dataViewScopeIdentity__WEBPACK_IMPORTED_MODULE_1__.TZ)(identitySubsetExpr);
        }
    },
    57952: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            r: function() {
                return Inertia;
            }
        });
        var Inertia = function() {
            function Inertia(callback, enabled, distanceFactor, timeFactor, sampleTime) {
                void 0 === enabled && (enabled = !0), void 0 === distanceFactor && (distanceFactor = 250), 
                void 0 === timeFactor && (timeFactor = 1700), void 0 === sampleTime && (sampleTime = 100), 
                this.callback = callback, this.enabled = enabled, this.distanceFactor = distanceFactor, 
                this.timeFactor = timeFactor, this.sampleTime = sampleTime, this.points = [];
            }
            return Inertia.prototype.addPoint = function(x, y) {
                for (var points = this.points, now = Date.now(); !(_.isEmpty(points) || now - points[0].timestamp < this.sampleTime); ) points.shift();
                points.push({
                    x,
                    y,
                    timestamp: now
                });
            }, Inertia.prototype.hasStarted = function() {
                return this.started;
            }, Inertia.prototype.start = function() {
                var _this = this;
                if (this.enabled && !(this.points.length <= 1)) {
                    this.started && this.stop();
                    var easingFunction = d3.easeCubicOut, lastPoint = _.last(this.points), firstPoint = _.head(this.points), deltaT = lastPoint.timestamp - firstPoint.timestamp, velocityX = (lastPoint.x - firstPoint.x) / deltaT, velocityY = (lastPoint.y - firstPoint.y) / deltaT, distanceFactor = window.distanceFactor || this.distanceFactor, distanceX = velocityX * distanceFactor, distanceY = velocityY * distanceFactor, decayTime = Math.sqrt(Math.pow(velocityX, 2) + Math.pow(velocityY, 2)) * window.timeFactor || this.timeFactor, totalDistanceX = 0, totalDistanceY = 0;
                    this.started = !0;
                    var runningTimer = d3.timer(function(elapsed) {
                        if (_this.stopRequested) _this.clearState(), runningTimer.stop(); else {
                            var percentageTimeElapsed = Math.min(1, 1 * elapsed / decayTime), portion = easingFunction(percentageTimeElapsed), newDeltaX = portion * distanceX - totalDistanceX, newDeltaY = portion * distanceY - totalDistanceY;
                            totalDistanceX += newDeltaX, totalDistanceY += newDeltaY, _this.callback && (Math.abs(newDeltaX) > 0 || Math.abs(newDeltaY) > 0) && _this.callback(newDeltaX, newDeltaY), 
                            elapsed > decayTime && (_this.clearState(), runningTimer.stop());
                        }
                    });
                }
            }, Inertia.prototype.stop = function() {
                this.started && (this.stopRequested = !0);
            }, Inertia.prototype.clearState = function() {
                this.started = !1, this.stopRequested = !1;
            }, Inertia;
        }();
    },
    33777: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            b: function() {
                return getInvalidValueWarnings;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _VisualsData_dataView_utils_dataViewMatrixUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82386), _warnings_visualWarnings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45296);
        function getInvalidValueWarnings(dataViews, supportsNaN, supportsNegativeInfinity, supportsPositiveInfinity, ignoreRoles, readMatrixDV) {
            return new InvalidDataValuesChecker(supportsNaN, supportsNegativeInfinity, supportsPositiveInfinity, readMatrixDV, ignoreRoles).getWarningMessages(dataViews);
        }
        var InvalidDataValuesChecker = function() {
            function InvalidDataValuesChecker(supportsNaN, supportsNegativeInfinity, supportsPositiveInfinity, preferMatrixDV, ignoreRoles) {
                this.supportsNaN = supportsNaN, this.supportsNegativeInfinity = supportsNegativeInfinity, 
                this.supportsPositiveInfinity = supportsPositiveInfinity, this.preferMatrixDV = preferMatrixDV, 
                this.ignoreRoles = ignoreRoles;
            }
            return InvalidDataValuesChecker.prototype.getWarningMessages = function(dataViews) {
                this.loadWarningStatus(dataViews);
                var warnings = [];
                return this.hasNaN && !this.supportsNaN && warnings.push(new _warnings_visualWarnings__WEBPACK_IMPORTED_MODULE_0__.EN), 
                (this.hasNegativeInfinity && !this.supportsNegativeInfinity || this.hasPositiveInfinity && !this.supportsPositiveInfinity) && warnings.push(new _warnings_visualWarnings__WEBPACK_IMPORTED_MODULE_0__.s2), 
                this.hasOutOfRange && warnings.push(new _warnings_visualWarnings__WEBPACK_IMPORTED_MODULE_0__.TH), 
                warnings;
            }, InvalidDataValuesChecker.prototype.loadWarningStatus = function(dataViews) {
                this.hasNaN = !1, this.hasNegativeInfinity = !1, this.hasOutOfRange = !1, this.hasPositiveInfinity = !1;
                for (var _i = 0, dataViews_1 = dataViews; _i < dataViews_1.length; _i++) {
                    var dataView = dataViews_1[_i];
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(dataView, "dataView"), 
                    this.preferMatrixDV && dataView.matrix ? this.readMatrix(dataView) : this.readCategorical(dataView);
                }
            }, InvalidDataValuesChecker.prototype.readCategorical = function(dataView) {
                var values = dataView && dataView.categorical && dataView.categorical.values ? dataView.categorical.values : null;
                if (values) for (var valuesIndicesToIgnore = this.valueIndicesToIgnore(_.map(values, function(value) {
                    return value.source;
                })), index = 0, len = values.length; index < len; index++) if (!_.includes(valuesIndicesToIgnore, index)) {
                    var valueColumn = values[index];
                    if (valueColumn.values) for (var _i = 0, _a = valueColumn.values; _i < _a.length; _i++) this.checkValue(_a[_i]);
                }
            }, InvalidDataValuesChecker.prototype.valueIndicesToIgnore = function(valueMetadataColumns) {
                var _this = this, valueColumnIndicesToIgnore = [];
                if (!_.isEmpty(this.ignoreRoles)) for (var i = 0; i < valueMetadataColumns.length; i++) {
                    var col = valueMetadataColumns[i], columnRoles = col && col.roles && Object.keys(col.roles);
                    !_.isEmpty(columnRoles) && _.every(columnRoles, function(role) {
                        return _.includes(_this.ignoreRoles, role);
                    }) && valueColumnIndicesToIgnore.push(i);
                }
                return valueColumnIndicesToIgnore;
            }, InvalidDataValuesChecker.prototype.readMatrix = function(dataView) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(dataView.matrix, "dataView.matrix");
                var valueSourceIndicesToIgnore = this.valueIndicesToIgnore(dataView.matrix.valueSources);
                (0, _VisualsData_dataView_utils_dataViewMatrixUtils__WEBPACK_IMPORTED_MODULE_2__.w1)(dataView.matrix.rows.root, function(node, _path) {
                    if ((0, _VisualsData_dataView_utils_dataViewMatrixUtils__WEBPACK_IMPORTED_MODULE_2__.N9)(node)) {
                        if (!node.values) return 1;
                        for (var _i = 0, ids_1 = Object.keys(node.values); _i < ids_1.length; _i++) {
                            var value = node.values[ids_1[_i]];
                            _.includes(valueSourceIndicesToIgnore, value.valueSourceIndex) || _this.checkValue(value && value.value);
                        }
                        return 1;
                    }
                    return _this.hasNaN && _this.hasPositiveInfinity && _this.hasNegativeInfinity && _this.hasOutOfRange ? 0 : 1;
                });
            }, InvalidDataValuesChecker.prototype.checkValue = function(v) {
                isNaN(v) ? this.hasNaN = !0 : v === Number.POSITIVE_INFINITY ? this.hasPositiveInfinity = !0 : v === Number.NEGATIVE_INFINITY ? this.hasNegativeInfinity = !0 : (v < -1e300 || v > 1e300) && (this.hasOutOfRange = !0);
            }, InvalidDataValuesChecker;
        }();
    },
    12198: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            v: function() {
                return MinMaxLabelDataPointSorter;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), MinMaxType = function(MinMaxType) {
            return MinMaxType[MinMaxType.Minimum = 0] = "Minimum", MinMaxType[MinMaxType.Maximum = 1] = "Maximum", 
            MinMaxType[MinMaxType.Neither = 2] = "Neither", MinMaxType;
        }({}), MinMaxLabelDataPointSorter = function() {
            function MinMaxLabelDataPointSorter(unsortedLabelDataPointGroups, series, viewport, yScale, y2Scale) {
                var _this = this;
                this.unsortedLabelDataPointGroups = unsortedLabelDataPointGroups, this.series = series, 
                this.viewport = viewport, this.yScale = yScale, this.y2Scale = y2Scale, this.sortDataPointGroup = function(unsortedLabelDataPointGroup, seriesIndex) {
                    if (!_.isEmpty(unsortedLabelDataPointGroup.labelDataPoints)) {
                        var unsortedLabelDataPoints = unsortedLabelDataPointGroup.labelDataPoints, currentSeries = _this.series[seriesIndex], numberOfLabelsToSort = MinMaxLabelDataPointSorter.maxNumberToSortFactor * unsortedLabelDataPointGroup.maxNumberOfLabels, filterFunc = _.some(currentSeries.data, function(dataPoint) {
                            return null == dataPoint ? void 0 : dataPoint.highlight;
                        }) ? function(dataPoint) {
                            return null != (null == dataPoint ? void 0 : dataPoint.value) && dataPoint.highlight;
                        } : function(dataPoint) {
                            return null != (null == dataPoint ? void 0 : dataPoint.value);
                        }, data = _.filter(currentSeries.data, filterFunc);
                        _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                            return data.length === unsortedLabelDataPoints.length;
                        }, "expecting lengths dataPoints and labelDataPoints to match");
                        var globalMinMaxInRange = MinMaxLabelDataPointSorter.getMinMaxInRange(0, data.length - 1, data), sortedLabelDataPoints = [], getResult = function() {
                            return (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, unsortedLabelDataPointGroup), {
                                labelDataPoints: sortedLabelDataPoints
                            });
                        };
                        if ((numberOfLabelsToSort -= _this.addFirstLastMaxMin(unsortedLabelDataPoints, sortedLabelDataPoints, globalMinMaxInRange.maxIndex, globalMinMaxInRange.minIndex)) <= 0) return getResult();
                        var unsortedWeightedLabelDataPoints = _this.calculateWeights(unsortedLabelDataPoints, data, globalMinMaxInRange, currentSeries.isY2 ? _this.y2Scale : _this.yScale);
                        return (numberOfLabelsToSort -= _this.addLocalMinMaxes(unsortedWeightedLabelDataPoints, sortedLabelDataPoints, globalMinMaxInRange.maxIndex, globalMinMaxInRange.minIndex, numberOfLabelsToSort)) <= 0 || _this.addNonMinMaxes(unsortedWeightedLabelDataPoints, sortedLabelDataPoints, numberOfLabelsToSort), 
                        getResult();
                    }
                };
            }
            return MinMaxLabelDataPointSorter.prototype.getSortedDataLabels = function() {
                return this.unsortedLabelDataPointGroups.map(this.sortDataPointGroup).filter(function(dp) {
                    return dp;
                });
            }, MinMaxLabelDataPointSorter.prototype.calculateWeights = function(labelDataPoints, data, globalMinMax, valueScale) {
                for (var previousMinMaxPoint, currentMinMaxPoint, categoryCount = data.length, minMaxPoints = this.findMinMaxesBasedOnSmoothedValues(labelDataPoints, data), totalValueDifference = Math.abs(valueScale(globalMinMax.maxValue) - valueScale(globalMinMax.minValue)), minMaxIndex = 0, minMaxCount = minMaxPoints.length; minMaxIndex < minMaxCount; minMaxIndex++) {
                    currentMinMaxPoint = minMaxPoints[minMaxIndex];
                    var weight = void 0;
                    if (previousMinMaxPoint && (weight = (Math.abs((valueScale(previousMinMaxPoint.value) - valueScale(currentMinMaxPoint.value)) / totalValueDifference) + Math.abs(previousMinMaxPoint.index - currentMinMaxPoint.index) / (categoryCount - 1)) / 2), 
                    null != weight && previousMinMaxPoint) {
                        var previousLabelDataPoint = labelDataPoints[previousMinMaxPoint.index];
                        previousLabelDataPoint.weight = null != previousLabelDataPoint.weight ? (previousLabelDataPoint.weight + weight) / 2 : weight, 
                        labelDataPoints[currentMinMaxPoint.index].weight = weight;
                    }
                    previousMinMaxPoint = currentMinMaxPoint;
                }
                for (var _i = 0, labelDataPoints_1 = labelDataPoints; _i < labelDataPoints_1.length; _i++) {
                    var labelDataPoint = labelDataPoints_1[_i];
                    labelDataPoint.weight < MinMaxLabelDataPointSorter.minimumWeightToConsiderMinMax && (labelDataPoint.weight = void 0);
                }
                return labelDataPoints;
            }, MinMaxLabelDataPointSorter.prototype.findMinMaxesBasedOnSmoothedValues = function(labelDataPoints, data) {
                for (var previousMinMax, currentMinMax, nextMinMax, minMaxPoints = [], windowSize = this.getWindowSize(data), halfWindowSize = windowSize >> 1, scaledSmoothedValues = this.calculateSmoothedValues(data, windowSize), categoryIndex = 0, categoryCount = labelDataPoints.length; categoryIndex < categoryCount; categoryIndex++) {
                    var minMaxType = this.getMinMaxType(categoryIndex, scaledSmoothedValues);
                    minMaxType !== MinMaxType.Neither && minMaxPoints.push({
                        index: categoryIndex,
                        type: minMaxType,
                        value: data[categoryIndex].value
                    });
                }
                for (var minMaxIndex = 0, minMaxCount = minMaxPoints.length; minMaxIndex < minMaxCount; minMaxIndex++) if (currentMinMax = minMaxPoints[minMaxIndex], 
                nextMinMax = minMaxPoints[minMaxIndex + 1], (previousMinMax = minMaxPoints[minMaxIndex - 1]) && nextMinMax) {
                    var actualIndex, actualMinMaxInRange = MinMaxLabelDataPointSorter.getMinMaxInRange(Math.max(previousMinMax.index, currentMinMax.index - halfWindowSize), Math.min(nextMinMax.index, currentMinMax.index + halfWindowSize), data);
                    currentMinMax.type === MinMaxType.Maximum ? (currentMinMax.index = actualIndex = actualMinMaxInRange.maxIndex, 
                    currentMinMax.value = data[actualIndex].value) : (currentMinMax.index = actualIndex = actualMinMaxInRange.minIndex, 
                    currentMinMax.value = data[actualIndex].value);
                }
                return minMaxPoints;
            }, MinMaxLabelDataPointSorter.getMinMaxInRange = function(startIndex, endIndex, data) {
                for (var minValue, maxValue, minIndex, maxIndex, categoryIndex = startIndex, dataLength = data.length; categoryIndex <= endIndex && categoryIndex < dataLength; categoryIndex++) {
                    var value = data[categoryIndex].value;
                    null != value && ((void 0 === minValue || value < minValue) && (minValue = value, 
                    minIndex = categoryIndex), (void 0 === maxValue || value > maxValue) && (maxValue = value, 
                    maxIndex = categoryIndex));
                }
                return {
                    minIndex,
                    minValue,
                    maxIndex,
                    maxValue
                };
            }, MinMaxLabelDataPointSorter.prototype.getWindowSize = function(data) {
                return 1 | data.length / this.viewport.width * MinMaxLabelDataPointSorter.estimatedLabelWidth;
            }, MinMaxLabelDataPointSorter.prototype.calculateSmoothedValues = function(data, windowSize) {
                for (var gaussianValues = MinMaxLabelDataPointSorter.getGaussianDistribution(windowSize), scaledAndSmoothedValues = [], categoryIndex = 0, categoryCount = data.length; categoryIndex < categoryCount; categoryIndex++) if (1 === windowSize) scaledAndSmoothedValues.push(data[categoryIndex].value); else {
                    var scaledValue = this.getSmoothedValue(data, categoryIndex, windowSize, gaussianValues);
                    scaledAndSmoothedValues.push(scaledValue);
                }
                return scaledAndSmoothedValues;
            }, MinMaxLabelDataPointSorter.getGaussianDistribution = function(windowSize) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return windowSize / 2 != windowSize >> 1;
                }, "window size should be a whole odd number");
                for (var gaussianDistribution = [], halfWayIndex = windowSize >> 1, maxPosition = halfWayIndex, standardDeviation = halfWayIndex / 2, i = 0; i < halfWayIndex; i++) {
                    var gaussianValue = 1 * Math.pow(Math.E, (i - maxPosition) * (i - maxPosition) * -1 / (2 * standardDeviation * standardDeviation));
                    gaussianDistribution.push(gaussianValue);
                }
                for (gaussianDistribution.push(1), i = halfWayIndex - 1; i >= 0; i--) gaussianDistribution.push(gaussianDistribution[i]);
                return gaussianDistribution;
            }, MinMaxLabelDataPointSorter.prototype.getSmoothedValue = function(data, categoryIndex, windowSize, gaussianValues) {
                if (null == data[categoryIndex].value) return data[categoryIndex].value;
                for (var halfWindowSize = windowSize >> 1, endingIndex = categoryIndex + halfWindowSize, totalValue = 0, totalValueCount = 0, lastDataIndex = data.length - 1, currentIndex = categoryIndex - halfWindowSize, gaussianIndex = 0; currentIndex <= endingIndex; currentIndex++, 
                gaussianIndex++) {
                    var value = data[Math.max(0, Math.min(currentIndex, lastDataIndex))].value;
                    null != value && (totalValue += value * gaussianValues[gaussianIndex], totalValueCount++);
                }
                return totalValue / totalValueCount;
            }, MinMaxLabelDataPointSorter.prototype.addFirstLastMaxMin = function(unsorted, sorted, maxIndex, minIndex) {
                var labelsAdded = 0;
                if (_.isEmpty(unsorted)) return labelsAdded;
                sorted.push(unsorted[0]), labelsAdded++;
                var lastIndex = unsorted.length - 1;
                return 0 !== lastIndex && (sorted.push(unsorted[lastIndex]), labelsAdded++), 0 !== maxIndex && maxIndex !== lastIndex && (sorted.push(unsorted[maxIndex]), 
                labelsAdded++), 0 !== minIndex && minIndex !== lastIndex && (sorted.push(unsorted[minIndex]), 
                labelsAdded++), labelsAdded;
            }, MinMaxLabelDataPointSorter.prototype.addLocalMinMaxes = function(unsorted, sorted, maxIndex, minIndex, maxNumberOfLabels) {
                for (var lastIndex = unsorted.length - 1, localMinMaxes = _.filter(unsorted, function(labelDataPoint, index) {
                    return 0 !== index && index !== lastIndex && index !== maxIndex && index !== minIndex && null != labelDataPoint.weight;
                }), sortedMinMaxes = _.sortBy(localMinMaxes, function(weighedLabelDataPoint) {
                    return -weighedLabelDataPoint.weight;
                }), labelsAdded = 0, i = 0, ilen = Math.min(sortedMinMaxes.length, maxNumberOfLabels); i < ilen; i++) sorted.push(sortedMinMaxes[i]), 
                labelsAdded++;
                return labelsAdded;
            }, MinMaxLabelDataPointSorter.prototype.addNonMinMaxes = function(unsorted, sorted, maxNumberOfLabels) {
                for (var currentNonMinMaxSet, nonMinMaxSets = [], categoryIndex = 0, categoryCount = unsorted.length; categoryIndex < categoryCount; categoryIndex++) null == unsorted[categoryIndex].weight ? currentNonMinMaxSet ? currentNonMinMaxSet.count++ : currentNonMinMaxSet = {
                    startingIndex: categoryIndex,
                    count: 1
                } : currentNonMinMaxSet && currentNonMinMaxSet.count > 0 && (nonMinMaxSets.push(currentNonMinMaxSet), 
                currentNonMinMaxSet = null);
                for (var numberOfLabelsAdded = 0; nonMinMaxSets.length > 0 && numberOfLabelsAdded < maxNumberOfLabels; ) {
                    for (var currentMaxCount = 0, maxIndex = 0, i = 0, ilen = nonMinMaxSets.length; i < ilen; i++) {
                        var currentCount = nonMinMaxSets[i].count;
                        currentCount > currentMaxCount && (currentMaxCount = currentCount, maxIndex = i);
                    }
                    var setToSplit = nonMinMaxSets.splice(maxIndex, 1)[0];
                    if (1 === setToSplit.count) sorted.push(unsorted[setToSplit.startingIndex]); else {
                        var splitIndex = (setToSplit.count >> 1) + setToSplit.startingIndex;
                        sorted.push(unsorted[splitIndex]);
                        var leftCount = splitIndex - setToSplit.startingIndex;
                        leftCount > 0 && nonMinMaxSets.push({
                            startingIndex: setToSplit.startingIndex,
                            count: leftCount
                        });
                        var rightCount = setToSplit.startingIndex + setToSplit.count - splitIndex - 1;
                        rightCount > 0 && nonMinMaxSets.push({
                            startingIndex: splitIndex + 1,
                            count: rightCount
                        });
                    }
                    numberOfLabelsAdded++;
                }
            }, MinMaxLabelDataPointSorter.prototype.getMinMaxType = function(index, scaledDataPoints) {
                var currentValue = scaledDataPoints[index];
                if (null == scaledDataPoints[index]) return MinMaxType.Neither;
                if (scaledDataPoints.length < 2) return MinMaxType.Neither;
                if (null == scaledDataPoints[index - 1]) return scaledDataPoints[index + 1] > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum;
                if (null == scaledDataPoints[index + 1]) return scaledDataPoints[index - 1] > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum;
                var prevValue = scaledDataPoints[index - 1], nextValue = scaledDataPoints[index + 1];
                return null == prevValue && null == nextValue ? MinMaxType.Neither : null == prevValue ? nextValue > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum : null == nextValue ? prevValue > currentValue ? MinMaxType.Minimum : MinMaxType.Maximum : prevValue > currentValue && currentValue < nextValue ? MinMaxType.Minimum : prevValue < currentValue && currentValue > nextValue ? MinMaxType.Maximum : MinMaxType.Neither;
            }, MinMaxLabelDataPointSorter.estimatedLabelWidth = 40, MinMaxLabelDataPointSorter.minimumWeightToConsiderMinMax = .015, 
            MinMaxLabelDataPointSorter.maxNumberToSortFactor = 2, MinMaxLabelDataPointSorter;
        }();
    },
    86727: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Gh: function() {
                return getLegendItemsSubSelectionStyles;
            },
            ZF: function() {
                return getLegendFormattingModel;
            },
            aJ: function() {
                return getLegendTitleSubSelectionStyles;
            },
            l3: function() {
                return toIEnumerableDataPoints;
            },
            tV: function() {
                return getLegendTitleShortcuts;
            },
            tY: function() {
                return getLegendItemsShortcuts;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(81337), _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56578), _capabilities_lineChart_capabilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69871), _onObjectUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(80065), legendPropIdentifiers = {
            show: {
                objectName: "legend",
                propertyName: "show"
            },
            position: {
                objectName: "legend",
                propertyName: "position"
            },
            showTitle: {
                objectName: "legend",
                propertyName: "showTitle"
            },
            titleText: {
                objectName: "legend",
                propertyName: "titleText"
            },
            labelColor: {
                objectName: "legend",
                propertyName: "labelColor"
            },
            fontSize: {
                objectName: "legend",
                propertyName: "fontSize"
            },
            fontFamily: {
                objectName: "legend",
                propertyName: "fontFamily"
            },
            showGradientLegend: {
                objectName: "legend",
                propertyName: "showGradientLegend"
            },
            bold: {
                objectName: "legend",
                propertyName: "bold"
            },
            italic: {
                objectName: "legend",
                propertyName: "italic"
            },
            underline: {
                objectName: "legend",
                propertyName: "underline"
            }
        };
        function getLegendFormattingModel(options, hostService, featureSwitches, disabled, disabledReason) {
            void 0 === disabled && (disabled = !1), null == disabledReason && (disabledReason = featureSwitches.onObject ? "Visual_LegendCard_DisabledReasonNew" : "Visual_LegendCard_DisabledReason");
            var legendData = options.legendData, resetToDefaultDescriptors = [ legendPropIdentifiers.show, legendPropIdentifiers.showGradientLegend, legendPropIdentifiers.position, legendPropIdentifiers.showTitle, legendPropIdentifiers.titleText, legendPropIdentifiers.labelColor, legendPropIdentifiers.fontFamily, legendPropIdentifiers.fontSize, _capabilities_lineChart_capabilities__WEBPACK_IMPORTED_MODULE_0__.zK.legend.legendMarkerRendering, _capabilities_lineChart_capabilities__WEBPACK_IMPORTED_MODULE_0__.zK.legend.matchLineColor, legendPropIdentifiers.bold, legendPropIdentifiers.italic, legendPropIdentifiers.underline ], cardBuilder = new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.CQ(new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.lg("legend"), "Role_DisplayName_Legend", resetToDefaultDescriptors, function(key) {
                return hostService.getLocalizedString(key);
            });
            if (cardBuilder.addTopLevelToggle("show", function() {
                return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.bd({
                    descriptor: legendPropIdentifiers.show,
                    value: !disabled && legendData.show
                }).build();
            }), disabled) return cardBuilder.withDisabled(!0, disabledReason), cardBuilder.build();
            var fontControl = (new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.UN).withFontFamily({
                descriptor: legendPropIdentifiers.fontFamily,
                value: legendData.fontProperties.family
            }).withFontSizeProperties({
                descriptor: legendPropIdentifiers.fontSize,
                value: legendData.fontProperties.size.pt
            }).withBold({
                descriptor: legendPropIdentifiers.bold,
                value: legendData.bold
            }).withItalic({
                descriptor: legendPropIdentifiers.italic,
                value: legendData.italic
            }).withUnderline({
                descriptor: legendPropIdentifiers.underline,
                value: legendData.underline
            }).build();
            return cardBuilder.withDescription("Visual_LegendDescription").addGroup("options", function(groupBuilder) {
                groupBuilder.withDisplayName("Desktop_FileMenu_Options"), groupBuilder.addSimpleSlice("position", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.uY({
                    descriptor: legendPropIdentifiers.position,
                    value: legendData.position
                }).build()), null != options.legendMarkerRendering && groupBuilder.addSimpleSlice("markerRendering", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.uY({
                    descriptor: _capabilities_lineChart_capabilities__WEBPACK_IMPORTED_MODULE_0__.zK.legend.legendMarkerRendering,
                    value: options.legendMarkerRendering
                }).build()), null != options.matchLineColor && groupBuilder.addSimpleSlice("matchLineColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.bd({
                    descriptor: _capabilities_lineChart_capabilities__WEBPACK_IMPORTED_MODULE_0__.zK.legend.matchLineColor,
                    value: options.matchLineColor
                }).build());
            }), cardBuilder.addGroup("text", function(groupBuilder) {
                groupBuilder.withDisplayName("Text").addCompositeSlice("fontselector", "Font", fontControl).addSimpleSlice("color", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.BT({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, legendPropIdentifiers.labelColor), {
                        instanceKind: 3
                    }),
                    value: {
                        value: legendData.fontProperties.color
                    }
                }).build());
            }).addGroup("title", function(groupBuilder) {
                groupBuilder.withDisplayName("Title").addTopLevelToggle("showTitle", function() {
                    return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.bd({
                        descriptor: legendPropIdentifiers.showTitle,
                        value: legendData.showTitle
                    }).build();
                }).addSimpleSlice("titleText", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_1__.fq({
                    descriptor: legendPropIdentifiers.titleText,
                    value: legendData.title,
                    placeholder: ""
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("Visual_Title_Text");
                });
            }), cardBuilder.build();
        }
        function getLegendTitleSubSelectionStyles() {}
        function getLegendItemsSubSelectionStyles(hostServices) {
            return (0, _onObjectUtil__WEBPACK_IMPORTED_MODULE_3__.un)(hostServices, {
                fontFamilyReference: legendPropIdentifiers.fontFamily,
                fontSizeReference: legendPropIdentifiers.fontSize,
                boldReference: legendPropIdentifiers.bold,
                italicReference: legendPropIdentifiers.italic,
                underlineReference: legendPropIdentifiers.underline,
                fontColorReference: legendPropIdentifiers.labelColor
            });
        }
        function getLegendTitleShortcuts(hostServices) {
            return [ (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({
                type: 2
            }, legendPropIdentifiers.showTitle), {
                disabledLabel: hostServices.getLocalizedString("Delete"),
                keyboardShortcuts: [ {
                    key: "Delete",
                    nextValue: !1
                } ]
            }), {
                type: 0,
                excludedResetFormattingIds: [ legendPropIdentifiers.showTitle ]
            }, {
                type: 1,
                destinationInfo: {
                    cardUid: "".concat("Visual", "-").concat("legend"),
                    groupUid: "".concat("legend", "-").concat("title")
                },
                label: hostServices.getLocalizedString("Format_Legend_Title")
            } ];
        }
        function getLegendItemsShortcuts(options) {
            var hostServices = options.hostServices, showSort = options.showSort, shortcuts = [ (0, 
            tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({
                type: 2
            }, legendPropIdentifiers.show), {
                disabledLabel: hostServices.getLocalizedString("Delete"),
                keyboardShortcuts: [ {
                    key: "Delete",
                    nextValue: !1
                } ]
            }), {
                type: 0,
                excludedResetFormattingIds: [ legendPropIdentifiers.show, legendPropIdentifiers.showTitle ]
            }, (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({
                type: 2
            }, legendPropIdentifiers.showTitle), {
                enabledLabel: hostServices.getLocalizedString("Format_AddLegendTitle")
            }) ];
            return showSort && shortcuts.push({
                type: 4,
                sortableField: {
                    queryName: "",
                    sortDirection: 1
                },
                label: hostServices.getLocalizedString("Format_SortLegend"),
                key: "Legend"
            }), (0, tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0, tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], shortcuts, !0), [ {
                type: 1,
                destinationInfo: {
                    cardUid: "".concat("Visual", "-").concat("legend"),
                    groupUid: "".concat("legend", "-").concat("options")
                },
                label: hostServices.getLocalizedString("Format_Legend")
            } ], !1);
        }
        function toIEnumerableDataPoints(legendData) {
            return _.map(legendData.dataPoints, function(dataPoint) {
                return {
                    color: dataPoint.marker.color,
                    displayName: dataPoint.label,
                    identity: dataPoint.identity
                };
            });
        }
    },
    65741: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            vs: function() {
                return LegendMediumFontSmallViewportInPt;
            },
            hD: function() {
                return LegendSmallFontSmallViewportInPt;
            },
            OG: function() {
                return createLegend;
            }
        });
        var tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), Prototype = __webpack_require__(39681), visualStyles = __webpack_require__(48708), Utility = __webpack_require__(38078), svgUtil = __webpack_require__(10389), textUtil = __webpack_require__(44977), units = __webpack_require__(32105), legendPosition = __webpack_require__(70700), legend_converter = __webpack_require__(79811), textMeasurementService = __webpack_require__(32041), browserUtils = __webpack_require__(59107), StandaloneUtility1 = __webpack_require__(64329), wordBreaker = __webpack_require__(66001), valueFormatter = __webpack_require__(72489), common_fontProperties = __webpack_require__(18664), marker_renderer = __webpack_require__(51995), marker = __webpack_require__(66123), htmlSubSelectionHelper = __webpack_require__(52287), legend_util = __webpack_require__(77686), dataViewObjectProperties = __webpack_require__(14599), services_interactivityService = __webpack_require__(72902), interactivityUtils = __webpack_require__(30237), LegendBehavior = function() {
            function LegendBehavior() {}
            return LegendBehavior.prototype.bindEvents = function(options, selectionHandler, _dataPointNavigationManagerWithKey, formatMode) {
                var _a;
                this.legendIcons = options.legendIcons, this.legendLines = options.legendLines, 
                this.visualStyle = options.visualStyle;
                var legendRoot = options.legendRoot;
                this.legendItems = options.legendItems, formatMode ? this.unbindEventsFormatMode() : ((0, 
                interactivityUtils.lt)(legendRoot, selectionHandler), legendRoot.on("keydown", function() {
                    var event = d3.event;
                    if (browserUtils.M.noModifierPressed(event) && 27 === event.keyCode && event.target.classList.contains(legend_util.rL.class)) {
                        var rootElement = legendRoot.node();
                        browserUtils.M.focus(rootElement), event.preventDefault(), event.stopPropagation();
                    }
                    return !1;
                }), this.legendItems.on("click", function(d) {
                    return (0, interactivityUtils.c8)(d.dataPoint, selectionHandler);
                }).on("keydown", function(d) {
                    var keyCode = d3.event.keyCode;
                    32 !== keyCode && 13 !== keyCode || (0, interactivityUtils.c8)(d.dataPoint, selectionHandler);
                }), null === (_a = options.clearCatcher) || void 0 === _a || _a.on("click", function() {
                    browserUtils.M.isCtrlOrMeta(d3.event) || selectionHandler.handleClearSelection();
                }));
            }, LegendBehavior.prototype.unbindEventsFormatMode = function() {
                this.legendItems.on("click", null).on("keydown", null);
            }, LegendBehavior.prototype.renderSelection = function(hasSelection) {
                this.legendItems.attr("aria-selected", function(d) {
                    return hasSelection && d.dataPoint.selected;
                }), (0, legend_util.t9)(this.legendLines, this.legendIcons, hasSelection, this.visualStyle.isHighContrast);
            }, LegendBehavior;
        }(), dataItemTooltip = __webpack_require__(23174), strokeStyle = __webpack_require__(2241);
        function renderLegend(options) {
            var _a, _b, _c, data = options.data, parentViewport = options.parentViewport, interactivityService = options.interactivityService, orientation = options.orientation, legendDataStartIndex = options.legendDataStartIndex, hostServices = options.hostServices, showTitlePlaceholder = options.showTitlePlaceholder, fontProperties = data.fontProperties, legendTitleFontProperties = (0, 
            legend_util.XZ)(fontProperties), show = (0, legend_util.fy)(data), legendViewport = function(options) {
                var _a, _b, data = options.data;
                if (!(0, legend_util.fy)(data)) return {
                    height: 0,
                    width: 0
                };
                switch (options.orientation) {
                  case legendPosition.tV.Top:
                  case legendPosition.tV.Bottom:
                  case legendPosition.tV.TopCenter:
                  case legendPosition.tV.BottomCenter:
                  case legendPosition.tV.TopRight:
                  case legendPosition.tV.BottomRight:
                    return {
                        height: TopLegendHeight + (null !== (_b = null === (_a = null == data ? void 0 : data.fontProperties) || void 0 === _a ? void 0 : _a.size.px) && void 0 !== _b ? _b : StandaloneUtility1.FP.fromPointToPixel(legend_util.OS.pt)) - legend_util.OS.pt,
                        width: 0
                    };

                  case legendPosition.tV.Right:
                  case legendPosition.tV.Left:
                  case legendPosition.tV.RightCenter:
                  case legendPosition.tV.LeftCenter:
                    return {
                        height: 0,
                        width: options.lastCalculatedWidth || options.parentViewport.width * LegendMaxWidthFactor
                    };

                  default:
                    debug.fF.assertFail("Unexpected legend position - calculateViewport");
                }
            }(options), legendFontSizeMarginValue = null !== (_b = null === (_a = null == data ? void 0 : data.fontProperties) || void 0 === _a ? void 0 : _a.size.px) && void 0 !== _b ? _b : StandaloneUtility1.FP.fromPointToPixel(legend_util.OS.pt), legendFontSizeMarginDifference = legendFontSizeMarginValue - DefaultTextMargin, titleLayout = data.showTitle && !data.isGradientLegend ? calculateTitleLayout((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, options), {
                legendFontSizeMarginDifference,
                legendFontSizeMarginValue,
                legendViewport
            })) : null, iconRadius = textMeasurementService.b.estimateSvgTextHeight((0, common_fontProperties.qk)(fontProperties)) / LegendIconRadiusFactor;
            (legendFontSizeMarginValue <= DefaultTextMargin || iconRadius < LegendIconRadius) && (iconRadius = LegendIconRadius);
            var legendItems, verticalLegendWidth, horizontalLegendWidth, iconPaddingBasedOnFontSize = legendFontSizeMarginDifference / LegendIconRadiusFactor, iconWidth = 2 * (iconRadius + iconPaddingBasedOnFontSize), iconAndLineWidth = dataItemTooltip.yI + 2 * iconPaddingBasedOnFontSize, totalTextPadding = BaseTextAndIconPadding + iconPaddingBasedOnFontSize, hasSelection = interactivityService && (0, 
            services_interactivityService.G6)(data.dataPoints), svgHeight = (0, legend_util.s0)(orientation) ? legendViewport.height : 20 + legendFontSizeMarginDifference, navigationArrows = (0, 
            legend_util.s0)(orientation) ? function(title, parentViewport, viewport, data) {
                var hitAreaWidth, translateY = viewport.height / 2 - LegendArrowHeight / 2, arrowLeft = (0, 
                svgUtil.AD)(LegendArrowWidth, LegendArrowHeight, 180), arrowRight = (0, svgUtil.AD)(LegendArrowWidth, LegendArrowHeight, 0), arrowOffset = 0;
                if (data.useLargeArrowHitArea) {
                    var hitAreaDetails = LegendArrowLargeHitAreaSizes.Horizontal;
                    arrowOffset = hitAreaDetails.arrowsOffset, hitAreaWidth = hitAreaDetails.hitAreaWidthPx;
                }
                return {
                    previous: {
                        show: !1,
                        x: title ? title.x + title.width : 0,
                        y: translateY,
                        path: arrowLeft.path,
                        rotateTransform: arrowLeft.transform,
                        type: 1,
                        arrowOffset: arrowOffset || 0,
                        hitAreaWidth: hitAreaWidth || LegendArrowSize
                    },
                    next: {
                        show: !1,
                        x: parentViewport.width - LegendArrowWidth,
                        y: translateY,
                        path: arrowRight.path,
                        rotateTransform: arrowRight.transform,
                        type: 0,
                        arrowOffset: arrowOffset || 0,
                        hitAreaWidth: hitAreaWidth || LegendArrowSize
                    }
                };
            }(titleLayout, parentViewport, legendViewport, data) : function(title, parentViewport, viewport, data) {
                var hitAreaWidth, rightShift = viewport.height / 2 + LegendArrowHeight / 2, arrowTop = (0, 
                svgUtil.AD)(LegendArrowWidth, LegendArrowHeight, 270), arrowBottom = (0, svgUtil.AD)(LegendArrowWidth, LegendArrowHeight, 90), arrowOffset = 0;
                if (data.useLargeArrowHitArea) {
                    var hitAreaDetails = LegendArrowLargeHitAreaSizes.Vertical;
                    arrowOffset = hitAreaDetails.arrowsOffset, hitAreaWidth = hitAreaDetails.hitAreaWidthPx;
                }
                return {
                    previous: {
                        show: !1,
                        x: rightShift,
                        y: LegendArrowWidth + (title ? title.height : 0),
                        path: arrowTop.path,
                        rotateTransform: arrowTop.transform,
                        type: 1,
                        arrowOffset,
                        hitAreaWidth
                    },
                    next: {
                        show: !1,
                        x: rightShift,
                        y: parentViewport.height - LegendArrowHeight,
                        path: arrowBottom.path,
                        rotateTransform: arrowBottom.transform,
                        type: 0,
                        arrowOffset,
                        hitAreaWidth
                    }
                };
            }(titleLayout, parentViewport, legendViewport, data);
            options.isScrollable && options.legendDataStartIndex > 0 && (navigationArrows.previous.show = !0);
            var arrowPosWindow = options.arrowPosWindow, updateLegendItems = function() {
                var result = function(itemOptions) {
                    var fontProperties = itemOptions.fontProperties, titleLayout = itemOptions.titleLayout, navigationArrows = itemOptions.navigationArrows, iconWidth = itemOptions.iconWidth, iconAndLineWidth = itemOptions.iconAndLineWidth, _a = itemOptions.options, parentViewport = _a.parentViewport, dataPoints = _a.data.dataPoints, legendDataStartIndex = _a.legendDataStartIndex, autoWidth = _a.autoWidth;
                    if ((0, legend_util.s0)(itemOptions.options.orientation)) {
                        var containerWidth = parentViewport.width - (titleLayout ? titleLayout.width : 0) - (navigationArrows.previous.show && navigationArrows.previous.hitAreaWidth || 0) - (navigationArrows.next.show && navigationArrows.next.hitAreaWidth || 0);
                        return {
                            legendItems: layoutHorizontalLegendItems(dataPoints, containerWidth, legendDataStartIndex, fontProperties, iconWidth, iconAndLineWidth, itemOptions.totalTextPadding),
                            horizontalLegendWidth: containerWidth
                        };
                    }
                    var hasLineStyle = _.some(dataPoints, function(dataPoint) {
                        return dataPoint.line;
                    }), result = function(options) {
                        for (var dataPoints = options.dataPoints, maxHorizontalSpaceAvailable = options.maxHorizontalSpaceAvailable, fontProperties = options.fontProperties, legendDataStartIndex = options.legendDataStartIndex, legendItems = [], numberOfItems = Math.min(Math.floor(options.legendItemContainerHeight / options.legendItemHeight), dataPoints.length), maxHorizontalSpaceUsed = options.titleWidth || 0, i = 0, ilen = dataPoints.length; i < ilen; i++) {
                            var dataPoint = dataPoints[i], textProperties = (0, common_fontProperties.qk)(fontProperties, dataPoint.label), width = textMeasurementService.b.measureSvgTextWidth(textProperties);
                            if (width > maxHorizontalSpaceUsed && (maxHorizontalSpaceUsed = Math.min(width, maxHorizontalSpaceAvailable)), 
                            i >= legendDataStartIndex && i < legendDataStartIndex + numberOfItems) {
                                var desiredWidth = width;
                                desiredWidth > maxHorizontalSpaceAvailable && (textProperties.text = textMeasurementService.b.getTailoredTextOrDefault(textProperties, maxHorizontalSpaceAvailable), 
                                width = textMeasurementService.b.measureSvgTextWidth(textProperties)), legendItems.push({
                                    dataPoint,
                                    desiredOverMaxWidth: width > maxHorizontalSpaceAvailable,
                                    textProperties,
                                    desiredWidth,
                                    width
                                });
                            }
                        }
                        return {
                            legendItems,
                            horizontalWidthUsed: maxHorizontalSpaceUsed
                        };
                    }({
                        dataPoints,
                        legendItemContainerHeight: parentViewport.height - (titleLayout ? titleLayout.height : 0) - (navigationArrows.previous.show ? LegendArrowHeight : 0) - (navigationArrows.next.show ? LegendArrowHeight : 0),
                        maxHorizontalSpaceAvailable: (autoWidth ? itemOptions.options.parentViewport.width * LegendMaxWidthFactor : itemOptions.options.lastCalculatedWidth) - (hasLineStyle ? iconAndLineWidth : iconWidth) - LegendEdgeMarginWidth,
                        legendDataStartIndex,
                        fontProperties,
                        titleWidth: titleLayout ? titleLayout.width : void 0,
                        legendItemHeight: itemOptions.svgHeight
                    });
                    return {
                        legendItems: result.legendItems,
                        verticalLegendWidth: autoWidth ? Math.ceil(result.horizontalWidthUsed + (hasLineStyle ? iconAndLineWidth : iconWidth) + LegendEdgeMarginWidth) : itemOptions.options.lastCalculatedWidth
                    };
                }({
                    fontProperties,
                    options,
                    navigationArrows,
                    titleLayout,
                    iconWidth,
                    iconAndLineWidth,
                    svgHeight,
                    totalTextPadding
                });
                if (legendItems = result.legendItems, verticalLegendWidth = result.verticalLegendWidth, 
                horizontalLegendWidth = result.horizontalLegendWidth, options.isScrollable) {
                    var visibleDataLength = legendItems.length;
                    navigationArrows.next.show = visibleDataLength !== data.dataPoints.length - legendDataStartIndex, 
                    arrowPosWindow = navigationArrows.next.show ? visibleDataLength : arrowPosWindow;
                }
            };
            updateLegendItems(), navigationArrows.next.show && (updateLegendItems(), debug.fF.assert(function() {
                return navigationArrows.next.show;
            }, "We must still have next-show set to true")), null != verticalLegendWidth && (legendViewport.width = verticalLegendWidth), 
            titleLayout && verticalLegendWidth && verticalLegendWidth > titleLayout.width && (titleLayout = data.showTitle ? calculateTitleLayout((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, options), {
                legendFontSizeMarginDifference,
                legendFontSizeMarginValue,
                legendViewport
            })) : null);
            var isHorizontal = (0, legend_util.s0)(orientation), isVertical = !isHorizontal, legend = options.element.select(legend_util.wT.selector), visualLegendDefaultTitle = hostServices ? hostServices.getLocalizedString("Visual_Legend") : null;
            show ? (legend.empty() && (legend = options.element.append("div").classed(legend_util.wT.class, !0).styles({
                position: "absolute"
            }), interactivityService && legend.attrs({
                tabindex: 0,
                role: "region",
                "focus-nav-mode": "HierarchicalTabOrder",
                "aria-label": null == visualLegendDefaultTitle ? void 0 : visualLegendDefaultTitle.concat(data.showTitle && data.title ? " ".concat(data.title) : "")
            }).attr("data-testid", "legend")), legend.classed("flex-row", isHorizontal).classed("flex-column", isVertical).classed("flex-justify-content-center", (0, 
            legend_util.EH)(orientation)).classed("flex-justify-content-start", (0, legend_util.F3)(orientation)).classed("flex-justify-content-end", (0, 
            legend_util.Ok)(orientation)).classed("flex-align-items-center", isHorizontal && !data.isGradientLegend).classed("flex-align-items-start", isVertical || data.isGradientLegend).styles({
                "padding-top": data.isGradientLegend ? "3px" : "null"
            }), interactivityService && legend.attrs({
                "aria-label": null == visualLegendDefaultTitle ? void 0 : visualLegendDefaultTitle.concat(data.showTitle && data.title ? " ".concat(data.title) : "")
            })) : legend.remove();
            var isGradientLegendClassEmpty = legend.select(legend_util.NT.selector).empty();
            (data.isGradientLegend ? isGradientLegendClassEmpty : !isGradientLegendClassEmpty) && legend.selectAll("*").remove();
            var clearCatcher = legend.select(".clearCatcher");
            if (clearCatcher.empty() && (clearCatcher = (0, services_interactivityService.EX)(legend, "div")), 
            clearCatcher.style("position", "absolute").style("width", "100%").style("height", "100%"), 
            options.formatMode ? (0, services_interactivityService.kA)(legend, "div") : (0, 
            services_interactivityService.ku)(legend, "div"), updateLegendStyles(legendViewport, options.orientation, legend, show, parentViewport), 
            !show) return {
                width: 0,
                height: 0
            };
            var itemContainer = legend.select(legend_util.OF.selector);
            if (itemContainer.empty() && (itemContainer = legend.append("div").classed(legend_util.OF.class, !0).classed("flex-align-items-center", !0).classed("flex-order-third", !0).classed("flex-justify-context-start", !0).style("position", "relative")), 
            itemContainer.classed("flex-grow", navigationArrows.next.show || navigationArrows.previous.show).classed("flex-row", isHorizontal).classed("flex-column", isVertical).classed("flex-align-items-center", isHorizontal).classed("flex-align-items-start", isVertical).classed(legend_util.NT.class, data.isGradientLegend).attr("width", horizontalLegendWidth).attr("role", "listbox").attr("aria-label", function() {
                return options.hostServices && titleLayout && titleLayout.text ? titleLayout.text : options.hostServices ? visualLegendDefaultTitle : null;
            }), options.onObject && itemContainer.classed(htmlSubSelectionHelper.cy, !0).attr(htmlSubSelectionHelper.Ez, "legend-items").attr(htmlSubSelectionHelper.CK, "Visual_Legend").attr(htmlSubSelectionHelper.QZ, 1), 
            options.data.isGradientLegend) !function(options, isHorizontal, legendViewport, itemContainer, legend, show) {
                var _a, _b, ariaLabel, midValueString, midValueStringDimension, gradientOptions = options.data.gradientRule.options.linearGradient2 ? options.data.gradientRule.options.linearGradient2 : options.data.gradientRule.options.linearGradient3, fontProperties = options.data.fontProperties, fontSize = fontProperties.size.px, yValueOfTitle = 0, formatter = (0, 
                valueFormatter.Ue)({
                    value: gradientOptions.min.value,
                    value2: gradientOptions.max.value,
                    format: (0, valueFormatter.EO)(options.data.gradientRule.source, dataViewObjectProperties.e0.formatString)
                }), textProperties = (0, common_fontProperties.qk)(fontProperties), minValueString = formatter.format(gradientOptions.min.value), minValueStringDimension = {
                    width: textMeasurementService.b.measureSvgTextWidth(textProperties, minValueString),
                    height: textMeasurementService.b.measureSvgTextHeight(textProperties, minValueString)
                };
                ariaLabel = "".concat(options.hostServices.getLocalizedString("ConditionalFormattingDialog_LowestValue"), " ").concat(minValueString, ", "), 
                isLineargradient3(gradientOptions) && (midValueString = formatter.format(gradientOptions.mid.value), 
                midValueStringDimension = {
                    width: textMeasurementService.b.measureSvgTextWidth(textProperties, midValueString),
                    height: textMeasurementService.b.measureSvgTextHeight(textProperties, midValueString)
                }, ariaLabel += "".concat(options.hostServices.getLocalizedString("ConditionalFormattingDialog_MiddleValue"), " ").concat(midValueString, ", "));
                var maxValueString = formatter.format(gradientOptions.max.value), maxValueStringDimension = {
                    width: textMeasurementService.b.measureSvgTextWidth(textProperties, maxValueString),
                    height: textMeasurementService.b.measureSvgTextHeight(textProperties, maxValueString)
                };
                ariaLabel += "".concat(options.hostServices.getLocalizedString("ConditionalFormattingDialog_HighestValue"), " ").concat(maxValueString);
                var gradientWidth, svgWidth, svgHeight, rectData, legendTextValues, maxVerticalWidth = .5 * options.parentViewport.width, padding = .25 * fontSize, gradientHeight = 1.5 * fontSize, textHeight = gradientHeight, lineData = [];
                if (isHorizontal) {
                    svgWidth = minValueStringDimension.width + padding + (gradientWidth = 6 * fontSize) + padding + maxValueStringDimension.width, 
                    svgHeight = gradientHeight + padding, yValueOfTitle = yValueOfText = gradientHeight / 2, 
                    legendTextValues = [ {
                        text: minValueString,
                        text_anchor: "start",
                        x: 0,
                        y: yValueOfText,
                        width: minValueStringDimension.width,
                        height: textHeight
                    }, {
                        text: maxValueString,
                        text_anchor: "start",
                        x: xvalueForMaxString = minValueStringDimension.width + padding + gradientWidth + padding,
                        y: yValueOfText,
                        width: maxValueStringDimension.width,
                        height: textHeight
                    } ];
                    var rectXValue = minValueStringDimension.width + padding;
                    if (rectData = [ {
                        fill: "url(#legendGradient-".concat(options.hostServices.instanceId, ")"),
                        fill_opacity: "1",
                        x: rectXValue,
                        y: 0,
                        width: gradientWidth,
                        height: gradientHeight
                    } ], isLineargradient3(gradientOptions)) {
                        svgHeight += 1.25 * fontSize;
                        var midValueOffset = calculateMidValueOffset(gradientOptions);
                        legendTextValues.splice(1, 0, {
                            text: midValueString,
                            text_anchor: "middle",
                            x: rectXValue + midValueOffset * gradientWidth,
                            y: gradientHeight + padding + fontSize / 2,
                            width: midValueStringDimension.width,
                            height: textHeight
                        }), lineData = [ {
                            x1: rectXValue + midValueOffset * gradientWidth,
                            x2: rectXValue + midValueOffset * gradientWidth,
                            y1: 0,
                            y2: gradientHeight + padding,
                            stroke: null !== (_a = fontProperties.color) && void 0 !== _a ? _a : options.visualStyle.colorPalette.foregroundNeutralDark.value,
                            stroke_width: "1"
                        } ];
                    }
                } else {
                    if (gradientWidth = isLineargradient3(gradientOptions) ? 6 * fontSize : 10 * fontSize, 
                    (svgWidth = isLineargradient3(gradientOptions) ? minValueStringDimension.width + padding + gradientWidth + padding + maxValueStringDimension.width : gradientWidth + padding) > maxVerticalWidth) {
                        svgHeight = maxVerticalWidth;
                        var newLayout = function(maxVerticalWidth, minValueStringDimension, minValueString, maxValueStringDimension, maxValueString, textProperties, linearGradient3, padding) {
                            var gradientWidth, newAllowedWidth;
                            return linearGradient3 ? (gradientWidth = .6 * (newAllowedWidth = maxVerticalWidth - 2 * padding), 
                            textProperties.text = minValueString, minValueString = textMeasurementService.b.getTailoredTextOrDefault(textProperties, .2 * newAllowedWidth), 
                            minValueStringDimension.width = textMeasurementService.b.measureSvgTextWidth(textProperties, minValueString), 
                            textProperties.text = maxValueString, maxValueString = textMeasurementService.b.getTailoredTextOrDefault(textProperties, .2 * newAllowedWidth), 
                            maxValueStringDimension.width = textMeasurementService.b.measureSvgTextWidth(textProperties, maxValueString)) : (gradientWidth = newAllowedWidth = maxVerticalWidth - padding, 
                            textProperties.text = minValueString, minValueString = textMeasurementService.b.getTailoredTextOrDefault(textProperties, gradientWidth / 2), 
                            minValueStringDimension.width = textMeasurementService.b.measureSvgTextWidth(textProperties, minValueString), 
                            textProperties.text = maxValueString, maxValueString = textMeasurementService.b.getTailoredTextOrDefault(textProperties, gradientWidth / 2), 
                            maxValueStringDimension.width = textMeasurementService.b.measureSvgTextWidth(textProperties, maxValueString)), 
                            {
                                gradientWidth,
                                minValueString,
                                minValueWidth: minValueStringDimension.width,
                                maxValueString,
                                maxValueWidth: maxValueStringDimension.width
                            };
                        }(maxVerticalWidth, minValueStringDimension, minValueString, maxValueStringDimension, maxValueString, textProperties, isLineargradient3(gradientOptions), padding);
                        gradientWidth = newLayout.gradientWidth, minValueString = newLayout.minValueString, 
                        minValueStringDimension.width = newLayout.minValueWidth, maxValueString = newLayout.maxValueString, 
                        maxValueStringDimension.width = newLayout.maxValueWidth;
                    }
                    if (isLineargradient3(gradientOptions)) {
                        svgWidth = minValueStringDimension.width + padding + gradientWidth + padding + maxValueStringDimension.width, 
                        svgHeight = 8 + 3 * fontSize;
                        var yValueOfText = 8 + gradientHeight / 2, xvalueForMaxString = minValueStringDimension.width + padding + gradientWidth + padding;
                        midValueOffset = calculateMidValueOffset(gradientOptions), legendTextValues = [ {
                            text: minValueString,
                            text_anchor: "start",
                            x: 0,
                            y: yValueOfText,
                            width: minValueStringDimension.width,
                            height: textHeight
                        }, {
                            text: midValueString,
                            text_anchor: "middle",
                            x: (rectXValue = minValueStringDimension.width + padding) + midValueOffset * gradientWidth,
                            y: 8 + gradientHeight + padding + fontSize / 2,
                            width: midValueStringDimension.width,
                            height: textHeight
                        }, {
                            text: maxValueString,
                            text_anchor: "start",
                            x: xvalueForMaxString,
                            y: yValueOfText,
                            width: maxValueStringDimension.width,
                            height: textHeight
                        } ], lineData = [ {
                            x1: rectXValue + midValueOffset * gradientWidth,
                            x2: rectXValue + midValueOffset * gradientWidth,
                            y1: 8,
                            y2: 8 + gradientHeight + padding,
                            stroke: null !== (_b = fontProperties.color) && void 0 !== _b ? _b : options.visualStyle.colorPalette.foregroundNeutralDark.value,
                            stroke_width: "1"
                        } ], rectData = [ {
                            fill: "url(#legendGradient-".concat(options.hostServices.instanceId, ")"),
                            fill_opacity: "1",
                            x: rectXValue,
                            y: 8,
                            width: gradientWidth,
                            height: gradientHeight
                        } ];
                    } else svgHeight = 16 + 3 * fontSize, legendTextValues = [ {
                        text: minValueString,
                        text_anchor: "start",
                        x: 0,
                        y: yValueOfText = 16 + 2 * fontSize,
                        width: (svgWidth = gradientWidth + padding) / 2,
                        height: textHeight
                    }, {
                        text: maxValueString,
                        text_anchor: "start",
                        x: svgWidth - padding - maxValueStringDimension.width,
                        y: yValueOfText,
                        width: svgWidth / 2,
                        height: textHeight
                    } ], rectData = [ {
                        fill: "url(#legendGradient-".concat(options.hostServices.instanceId, ")"),
                        fill_opacity: "1",
                        x: 0,
                        y: 8,
                        width: gradientWidth,
                        height: gradientHeight
                    } ];
                }
                legendViewport.height = isHorizontal ? Math.max(legendViewport.height, svgHeight) : legendViewport.height, 
                legendViewport.width = isHorizontal ? legendViewport.width : Math.max(legendViewport.width, svgWidth) + LegendEdgeMarginWidth, 
                updateLegendStyles(legendViewport, options.orientation, legend, show, options.parentViewport, !0), 
                function(options, isHorizontal, svg, legend, xValueOfTitle, yValueOfTitle, verticalGapTitleAndBar) {
                    var words, titleSvgDimension, textProperties = (0, common_fontProperties.qk)((0, 
                    legend_util.XZ)(options.data.fontProperties), options.data.title), tspans = [];
                    if (isHorizontal) tspans = [ {
                        dy: "0.35em",
                        word: (words = [ textMeasurementService.b.getTailoredTextOrDefault(textProperties, options.parentViewport.width - svg.width - TitlePadding / 2 - 2 * LegendEdgeMarginWidth) ])[0]
                    } ], titleSvgDimension = {
                        height: svg.height,
                        width: textMeasurementService.b.measureSvgTextWidth(textProperties, words[0])
                    }; else {
                        var dy = textMeasurementService.b.measureSvgTextHeight(textProperties, options.data.title), maxNumberOfLines = Math.min(3, Math.floor((options.parentViewport.height - svg.height - 8 - 2 * LegendEdgeMarginWidth) / dy));
                        words = (0, wordBreaker.ql)(options.data.title, textProperties, textMeasurementService.b.measureSvgTextWidth, svg.width, maxNumberOfLines, textMeasurementService.b.getTailoredTextOrDefault, !0);
                        for (var i = 0; i < words.length; i++) tspans.push({
                            dy: String(dy),
                            word: words[i]
                        });
                        titleSvgDimension = {
                            height: (words.length + .5) * dy,
                            width: svg.width
                        };
                    }
                    var titleDummy = options.data.showTitle && !_.isEmpty(options.data.title) ? [ 0 ] : [], titleSvg = legend.selectAll(legend_util.fD.selector).data(titleDummy), titleSvgUpdate = titleSvg.enter().append("svg").classed(legend_util.fD.class, !0).merge(titleSvg);
                    titleSvgUpdate.attr("height", titleSvgDimension.height).attr("width", titleSvgDimension.width).styles({
                        "padding-right": "".concat(TitlePadding / 2, "px")
                    });
                    var title = titleSvgUpdate.selectAll("text").data([ 0 ]), titleUpdate = title.enter().append("text").merge(title);
                    titleUpdate.classed("flex-order-first", !0).styles((0, common_fontProperties.wB)((0, 
                    legend_util.XZ)(options.data.fontProperties))).styles({
                        "text-overflow": "ellipsis",
                        "white-space": "pre"
                    }).attr("fill", options.data.fontProperties.color).attr("title", options.data.title).attr("x", 0).attr("y", yValueOfTitle).text(null);
                    var tspan = titleUpdate.selectAll("tspan").data(tspans);
                    tspan.enter().append("tspan").merge(tspan).attr("dy", function(d) {
                        return d.dy;
                    }).attr("x", 0).text(function(d) {
                        return d.word;
                    }), tspan.exit().remove(), title.exit().remove(), titleSvg.exit().remove();
                }(options, isHorizontal, {
                    height: svgHeight,
                    width: svgWidth
                }, legend, 0, yValueOfTitle);
                var svg = function(viewport, itemContainer, gradientOptions, id, ariaLabel) {
                    var svg = itemContainer.selectAll("svg").data([ viewport ]).join("svg").attr("width", function(d) {
                        return d.width;
                    }).attr("height", function(d) {
                        return d.height;
                    }).attrs({
                        tabindex: 0,
                        "aria-label": ariaLabel
                    }), defs = svg.selectAll("defs").data([ 0 ]).join("defs");
                    return defs.append("linearGradient").attr("id", id), defs.select("linearGradient").selectAll("stop").data((0, 
                    tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([ {
                        stop: 0,
                        color: gradientOptions.min.color
                    } ], isLineargradient3(gradientOptions) ? [ {
                        stop: calculateMidValueOffset(gradientOptions),
                        color: gradientOptions.mid.color
                    } ] : [], !0), [ {
                        stop: 1,
                        color: gradientOptions.max.color
                    } ], !1), function(d) {
                        return d.stop.toString();
                    }).join("stop").attr("stop-color", function(d) {
                        return d.color;
                    }).attr("offset", function(d) {
                        return d.stop;
                    }), svg;
                }({
                    width: svgWidth,
                    height: svgHeight
                }, itemContainer, gradientOptions, "legendGradient-".concat(options.hostServices.instanceId), ariaLabel);
                (function(rectData, svg, lineData) {
                    svg.selectAll("g.rect").data([ 0 ]).join(function(enter) {
                        return enter.append("g").classed("rect", !0);
                    }).call(function(g) {
                        g.selectAll("rect").data(rectData).join("rect").attr("fill", function(d) {
                            return d.fill;
                        }).attr("fill-opacity", function(d) {
                            return d.fill_opacity;
                        }).attr("x", function(d) {
                            return d.x;
                        }).attr("y", function(d) {
                            return d.y;
                        }).attr("width", function(d) {
                            return d.width;
                        }).attr("height", function(d) {
                            return d.height;
                        }), g.selectAll("line").data(lineData).join("line").attr("x1", function(d) {
                            return d.x1;
                        }).attr("x2", function(d) {
                            return d.x2;
                        }).attr("y1", function(d) {
                            return d.y1;
                        }).attr("y2", function(d) {
                            return d.y2;
                        }).styles({
                            stroke: function(d) {
                                return d.stroke;
                            }
                        }).styles({
                            "stroke-width": function(d) {
                                return d.stroke_width;
                            }
                        });
                    });
                })(rectData, svg, lineData), function(legendTextValues, svg, fontProperties) {
                    var g = svg.selectAll("g.text").data([ 0 ]);
                    g.enter().append("g").classed("text", !0).merge(g).selectAll("text").data(legendTextValues).join("text").text(function(d) {
                        return d.text;
                    }).attr("text-anchor", function(d) {
                        return d.text_anchor;
                    }).attr("x", function(d) {
                        return d.x;
                    }).attr("y", function(d) {
                        return d.y;
                    }).attr("width", function(d) {
                        return d.width;
                    }).attr("dy", "0.35em").attr("height", function(d) {
                        return d.height;
                    }).styles((0, common_fontProperties.E_)(fontProperties)).selectAll("title").data(function(d) {
                        return [ d.text ];
                    }).join("title").text(function(d) {
                        return d;
                    });
                }(legendTextValues, svg, fontProperties);
            }(options, isHorizontal, legendViewport, itemContainer, legend, show); else {
                legend.selectAll(legend_util.fD.selector).data(titleLayout ? [ titleLayout ] : []).join(function(enter) {
                    return enter.insert("text", ".clearCatcher");
                }).classed(legend_util.fD.class, !0).classed("flex-order-first", !0).attr("title", data.title).styles((0, 
                common_fontProperties.wB)(legendTitleFontProperties)).styles({
                    "text-overflow": "ellipsis",
                    "white-space": "pre",
                    "padding-right": "".concat(TitlePadding / 2, "px"),
                    position: "relative"
                }).text(function(d) {
                    return d.text;
                }).filter(function() {
                    return options.onObject;
                }).classed(htmlSubSelectionHelper.cy, !0).classed(htmlSubSelectionHelper.Qh.class, null == titleLayout ? void 0 : titleLayout.isPlaceholder).attr(htmlSubSelectionHelper.Ez, "legend-title").attr(htmlSubSelectionHelper.CK, "MiniToolbar_LegendTitle").attr(htmlSubSelectionHelper.QZ, 0).filter(function() {
                    return options.formatMode || showTitlePlaceholder;
                }).attr(htmlSubSelectionHelper.kv, JSON.stringify({
                    reference: dataViewObjectProperties.N_.legend.titleText,
                    style: 3
                }));
                var legendItemKeyFn = function(d) {
                    return d.dataPoint.identity.getKey() + (null != d.dataPoint.layerNumber ? d.dataPoint.layerNumber : "");
                }, items = itemContainer.selectAll(legend_util.rL.selector).data(_.uniqBy(legendItems, legendItemKeyFn), legendItemKeyFn), newItems = items.enter().append("div").classed(legend_util.rL.class, !0).classed("flex-justify-content-center", !0).classed("flex-align-items-center", !0).attr("role", "option");
                interactivityService && newItems.attr("tabindex", 0).attr("data-testid", "legend-item");
                var visualLegendNullValue_1 = null !== (_c = null == hostServices ? void 0 : hostServices.getLocalizedString("NullValue")) && void 0 !== _c ? _c : null, itemsUpdate = newItems.merge(items);
                itemsUpdate.attr("aria-label", function(d) {
                    return options.hostServices ? d.dataPoint.label ? d.dataPoint.label : visualLegendNullValue_1 : null;
                }).attr("aria-selected", function(d) {
                    return hasSelection && d.dataPoint.selected;
                }).attr("aria-posinset", function(d) {
                    return d.dataPoint.index + 1;
                }).attr("aria-setsize", data.dataPoints.length), itemsUpdate.sort(function(a, b) {
                    var aDataPoint = a.dataPoint, bDataPoint = b.dataPoint;
                    if (null != aDataPoint.layerNumber) {
                        debug.fF.assertValue(bDataPoint.layerNumber, "Both datapoints should have a layerNumber");
                        var diff = aDataPoint.layerNumber - bDataPoint.layerNumber;
                        if (0 !== diff) return diff;
                    }
                    return aDataPoint.index - bDataPoint.index;
                }), items.exit().remove();
                var svg = newItems.append("svg").classed(legend_util.PR.class, !0).style("overflow", "visible");
                svg.append("path").classed(legend_util.az.class, !0).append("title"), svg.append("path").classed(legend_util.x4.class, !0).append("title"), 
                newItems.append("text").classed(legend_util.dy.class, !0).styles({
                    "text-overflow": "ellipsis",
                    "white-space": "pre"
                }), itemsUpdate.select(legend_util.PR.selector).attrs({
                    height: svgHeight,
                    width: function(d) {
                        return d.dataPoint.line ? iconAndLineWidth : iconWidth;
                    }
                });
                var iconLines = itemsUpdate.select(legend_util.az.selector);
                iconLines.attrs({
                    transform: (0, svgUtil.Iu)(dataItemTooltip.yI / 2, svgHeight * LegendIconYRatio),
                    d: function(_d) {
                        return _d.dataPoint.line ? "M -".concat(dataItemTooltip.yI / 2, " 0 L ").concat(dataItemTooltip.yI / 2, " 0") : null;
                    },
                    fill: "none"
                }).styles(function(d) {
                    return (0, strokeStyle.bc)(d.dataPoint.line);
                });
                var icons = itemsUpdate.select(legend_util.x4.selector);
                icons.attrs({
                    transform: function(d) {
                        return (0, svgUtil.aI)((d.dataPoint.line ? iconAndLineWidth : iconWidth) / 2, svgHeight * LegendIconYRatio, iconRadius / marker.$V);
                    },
                    d: function(_d2) {
                        return (0, marker_renderer.Ar)(_d2.dataPoint.marker.shape);
                    }
                }).styles(function(d) {
                    return (0, strokeStyle.bc)(d.dataPoint.marker.stroke);
                }).styles({
                    display: function(d) {
                        return d.dataPoint.marker.show ? "block" : "none";
                    },
                    fill: function(d) {
                        return d.dataPoint.marker.color;
                    },
                    stroke: function(d) {
                        var _a, _b;
                        return null !== (_b = null === (_a = d.dataPoint.marker.stroke) || void 0 === _a ? void 0 : _a.strokeColor) && void 0 !== _b ? _b : d.dataPoint.marker.color;
                    },
                    "stroke-width": function(d) {
                        var _a;
                        return (0, marker_renderer.F)(d.dataPoint.marker.shape) || ((null === (_a = d.dataPoint.marker.stroke) || void 0 === _a ? void 0 : _a.strokeShow) ? 2 : 0);
                    }
                }), (0, legend_util.t9)(iconLines, icons, hasSelection), newItems.selectAll("path > title").text(function(d) {
                    return d.dataPoint.label;
                }), itemsUpdate.select(legend_util.dy.selector).text(function(d) {
                    return d.textProperties.text;
                }).styles((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, fontProperties && (0, 
                common_fontProperties.wB)(fontProperties)), {
                    "padding-left": "".concat(LeftTextPadding, "px"),
                    "padding-right": "".concat(totalTextPadding - LeftTextPadding, "px")
                })).attr("title", function(d) {
                    return d.dataPoint.label;
                });
                var renderArrowOptions = {
                    arrowPosWindow,
                    legend,
                    legendDataStartIndex,
                    rerenderCallback: options.rerenderCallback,
                    useLargeArrowHitArea: data.useLargeArrowHitArea,
                    verticalLegendWidth: (0, legend_util.s0)(orientation) ? void 0 : legendViewport.width,
                    isTabbable: !!interactivityService,
                    hostServices: options.hostServices
                };
                renderNavigationArrow((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, renderArrowOptions), {
                    arrow: navigationArrows.previous,
                    arrowClassAndSelector: legend_util.Rw
                })), renderNavigationArrow((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, renderArrowOptions), {
                    arrow: navigationArrows.next,
                    arrowClassAndSelector: legend_util.EF
                })), null == interactivityService || interactivityService.bind(data.dataPoints, new LegendBehavior, {
                    legendRoot: legend,
                    legendItems: itemsUpdate,
                    legendIcons: icons,
                    legendLines: iconLines,
                    clearCatcher,
                    visualStyle: options.visualStyle
                }, {
                    isLegend: !0,
                    pointSourceKey: "legend",
                    isHierarchicalAxis: options.isHierarchicalAxis,
                    formatMode: options.formatMode
                });
            }
            return legendViewport;
        }
        function isLineargradient3(gradientOptions) {
            return void 0 !== gradientOptions.mid;
        }
        function calculateMidValueOffset(gradientOptions) {
            return gradientOptions.min.value === gradientOptions.max.value ? .5 : (gradientOptions.mid.value - gradientOptions.min.value) / (gradientOptions.max.value - gradientOptions.min.value);
        }
        function layoutHorizontalLegendItems(dataPoints, containerWidth, legendDataStartIndex, fontProperties, iconWidth, iconAndLineWidth, totalTextPadding) {
            for (var remainingWidth = containerWidth, legendItems = [], i = legendDataStartIndex, ilen = dataPoints.length; i < ilen; i++) {
                var dataPoint = dataPoints[i], result = tryFitDataPoint(legendItems, dataPoint, fontProperties, dataPoint.line ? iconAndLineWidth : iconWidth, remainingWidth, totalTextPadding);
                if (remainingWidth = result.newRemainingWidth, !result.fit) break;
            }
            for (var legendItemsDesiringMoreSpace = _.filter(legendItems, function(item) {
                return item.desiredOverMaxWidth;
            }), previousRemainingWidth = remainingWidth; remainingWidth > 0 && legendItemsDesiringMoreSpace.length > 0; ) {
                for (i = 0; i < legendItemsDesiringMoreSpace.length; ) {
                    var item = legendItemsDesiringMoreSpace[i], originalWidth = item.width, newAllowedWidth = originalWidth + remainingWidth / legendItemsDesiringMoreSpace.length;
                    if (newAllowedWidth > item.desiredWidth) item.textProperties.text = item.dataPoint.label, 
                    item.width = item.desiredWidth, item.desiredOverMaxWidth = !1, legendItemsDesiringMoreSpace.splice(i, 1), 
                    remainingWidth -= item.width - originalWidth; else {
                        var textProperties = legendItemsDesiringMoreSpace[i].textProperties, originalText = textProperties.text;
                        textProperties.text = item.dataPoint.label;
                        var newText = textMeasurementService.b.getTailoredTextOrDefault(textProperties, newAllowedWidth);
                        if (originalText === newText) textProperties.text = originalText; else {
                            textProperties.text = newText;
                            var newWidth = textMeasurementService.b.measureSvgTextWidth(textProperties, newText);
                            item.width = newWidth, remainingWidth -= item.width - originalWidth;
                        }
                        i++;
                    }
                }
                if (previousRemainingWidth === remainingWidth) break;
                previousRemainingWidth = remainingWidth;
            }
            return legendItems;
        }
        function tryFitDataPoint(legendItems, dataPoint, labelFontProperties, iconWidth, remainingWidth, totalTextPadding) {
            var textProperties = (0, common_fontProperties.qk)(labelFontProperties, dataPoint.label), desiredWidth = textMeasurementService.b.measureSvgTextWidth(textProperties), actualWidth = desiredWidth, truncated = !1;
            if (actualWidth > MaxTextLength) {
                truncated = !0;
                var tailoredText = textMeasurementService.b.getTailoredTextOrDefault(textProperties, MaxTextLength);
                textProperties = (0, common_fontProperties.qk)(labelFontProperties, tailoredText), 
                actualWidth = textMeasurementService.b.measureSvgTextWidth(textProperties);
            }
            var newRemainingWidth = remainingWidth - (actualWidth + iconWidth + totalTextPadding);
            return newRemainingWidth < 0 ? {
                newRemainingWidth: remainingWidth,
                fit: !1
            } : (legendItems.push({
                dataPoint,
                textProperties,
                width: actualWidth,
                desiredWidth,
                desiredOverMaxWidth: truncated
            }), {
                newRemainingWidth,
                fit: !0
            });
        }
        function renderNavigationArrow(options) {
            var legendDataStartIndex = options.legendDataStartIndex, arrowPosWindow = options.arrowPosWindow, useLargeArrowHitArea = options.useLargeArrowHitArea, verticalLegendWidth = options.verticalLegendWidth, isTabbable = options.isTabbable, arrow = options.arrow, arrowClassAndSelector = options.arrowClassAndSelector;
            debug.fF.assert(function() {
                return !!arrow;
            }, "arrow must be set");
            var svgWidth = verticalLegendWidth ? verticalLegendWidth + NavArrowPadding : useLargeArrowHitArea ? arrow.show ? arrow.hitAreaWidth : LegendArrowWidth : LegendArrowWidth + NavArrowPadding;
            options.legend.selectAll(arrowClassAndSelector.selector).data(arrow.show ? [ arrow ] : []).join(function(enter) {
                return enter.append("svg").classed(arrowClassAndSelector.class, !0).style("position", "relative");
            }).classed("flex-order-second", 1 === arrow.type).classed("flex-order-fourth", 0 === arrow.type).attrs({
                width: svgWidth,
                height: LegendArrowHeight,
                role: "button",
                "aria-label": function() {
                    return options.hostServices ? options.arrowClassAndSelector.class === legend_util.EF.class ? options.hostServices.getLocalizedString("Next_ButtonText") : options.arrowClassAndSelector.class === legend_util.Rw.class ? options.hostServices.getLocalizedString("Previous_ButtonText") : "" : null;
                }
            }).on("click", function() {
                options.rerenderCallback(arrow.type, legendDataStartIndex, arrowPosWindow);
            }).call(function(svg) {
                isTabbable && svg.attrs({
                    tabindex: 0,
                    focusable: !0
                }).on("keydown", function() {
                    var d3Event = d3.event, keyCode = d3Event.keyCode;
                    if (32 === keyCode || 13 === keyCode) {
                        d3Event.stopPropagation(), options.rerenderCallback(arrow.type, legendDataStartIndex, arrowPosWindow);
                        var element = options.legend.selectAll(legend_util.rL.selector + (1 === arrow.type ? ":last-child" : ":first-child")).node();
                        element && browserUtils.M.focus(element);
                    }
                });
            }).selectAll(".navArrow").data(function(arrowData) {
                var arrowPath = arrowData;
                if (arrowPath.isHitArea = !1, arrowPath.index = Math.abs(arrowPath.arrowOffset), 
                !useLargeArrowHitArea) return [ arrowPath ];
                var hitArea = Object.create(arrowPath);
                return hitArea.isHitArea = !0, hitArea.index++, [ hitArea, arrowPath ];
            }, function(d) {
                return d.index.toString();
            }).join(function(enter) {
                return enter.append("path").classed("navArrow", !0);
            }).attrs({
                d: function(_d3) {
                    return _d3.path;
                },
                transform: function(d) {
                    return "".concat((0, svgUtil.Iu)(svgWidth / 2 - LegendArrowWidth / 2, 0), " ").concat(d.rotateTransform);
                },
                "stroke-width": function(d) {
                    return d.isHitArea ? "".concat(d.hitAreaWidth, "px") : void 0;
                },
                "fill-opacity": function(d) {
                    return d.isHitArea ? "0" : void 0;
                },
                "stroke-opacity": function(d) {
                    return d.isHitArea ? "0" : void 0;
                }
            });
        }
        var LegendIconRadius = 5, LegendIconRadiusFactor = 5, MaxTextLength = 60, TextAndIconPadding = 5, TitlePadding = 15, LegendEdgeMarginWidth = 10, LegendMaxWidthFactor = .3, TopLegendHeight = 24, DefaultTextMargin = legend_util.OS.pt, LegendIconYRatio = .52, BaseTextAndIconPadding = 5, LeftTextPadding = 1, NavArrowPadding = 2, LegendArrowLargeHitAreaSizes = {
            Horizontal: {
                arrowSize: 30,
                hitAreaWidthPx: 28,
                arrowsOffset: -10
            },
            Vertical: {
                arrowSize: 12,
                hitAreaWidthPx: 18,
                arrowsOffset: -3
            }
        }, LegendArrowSize = 10, LegendArrowHeight = 15, LegendArrowWidth = 7.5;
        function calculateTitleLayout(options) {
            var maxMeasureLength, title = options.data.title, width = 0, hasTitle = !_.isEmpty(title), isPlaceholder = !hasTitle && options.showTitlePlaceholder;
            if (isPlaceholder && (title = options.hostServices.getLocalizedString("Format_AddLegendTitle")), 
            !hasTitle && !isPlaceholder) return null;
            maxMeasureLength = (0, legend_util.s0)(options.orientation) ? options.parentViewport.width * LegendMaxWidthFactor - (LegendIconRadius + (options.legendFontSizeMarginValue > DefaultTextMargin ? TextAndIconPadding + options.legendFontSizeMarginDifference : TextAndIconPadding) + (TextAndIconPadding + LegendIconRadius)) - LegendEdgeMarginWidth + TitlePadding / 2 : options.legendViewport.width - LegendEdgeMarginWidth;
            var textProperties = (0, common_fontProperties.qk)(options.data.fontProperties, title), text = title;
            return (width = textMeasurementService.b.measureSvgTextWidth(textProperties)) > maxMeasureLength && (text = textMeasurementService.b.getTailoredTextOrDefault(textProperties, maxMeasureLength), 
            textProperties.text = text, width = textMeasurementService.b.measureSvgTextWidth(textProperties)), 
            (0, legend_util.s0)(options.orientation) ? width += TitlePadding / 2 : text = textMeasurementService.b.getTailoredTextOrDefault(textProperties, options.legendViewport.width), 
            {
                x: 0,
                y: 0,
                text,
                width,
                height: textMeasurementService.b.estimateSvgTextHeight(textProperties),
                isPlaceholder
            };
        }
        function updateLegendStyles(legendViewport, orientation, legendElement, show, parentViewport, isGradientLegend) {
            var extraMargin = isGradientLegend ? LegendEdgeMarginWidth : 0;
            legendElement.styles({
                height: "".concat(legendViewport.height || (show ? parentViewport.height : 0), "px"),
                width: "".concat(legendViewport.width || (show ? parentViewport.width : 0), "px"),
                "margin-left": (0, legend_util.tO)(orientation) ? "".concat(parentViewport.width - legendViewport.width + extraMargin, "px") : null,
                "margin-top": (0, legend_util.Kx)(orientation) ? "".concat(parentViewport.height - legendViewport.height, "px") : null,
                "margin-right": (0, legend_util.nM)(orientation) && isGradientLegend ? "".concat(extraMargin, "px") : null
            });
        }
        function createLegend(legendParentElement, interactive, interactivityService, isScrollable, legendPosition, style, hostService) {
            return void 0 === isScrollable && (isScrollable = !1), void 0 === legendPosition && (legendPosition = legend_converter.Xv), 
            void 0 === style && (style = (0, visualStyles.Ue)()), interactive ? new CartesianChartInteractiveLegend(legendParentElement) : new LegendRenderingContainer(legendParentElement, legendPosition, style, interactivityService, hostService, isScrollable);
        }
        var LegendSmallFontSmallViewportInPt = 7, LegendMediumFontSmallViewportInPt = 8, LegendRenderingContainer = function() {
            function LegendRenderingContainer(element, legendPosition, style, interactivityService, hostServices, isScrollable) {
                this.style = style, this.interactivityService = interactivityService, this.hostServices = hostServices, 
                this.isScrollable = isScrollable, this.legendDataStartIndex = 0, this.arrowPosWindow = 1, 
                this.lastCalculatedWidth = 0, this.element = d3.select(element.get(0)), this.setPosition(legendPosition), 
                this.viewport = {
                    height: 0,
                    width: 0
                };
            }
            return LegendRenderingContainer.prototype.getMargins = function() {
                return this.viewport;
            }, LegendRenderingContainer.prototype.isVisible = function() {
                return (0, legend_util.fy)(this.data);
            }, LegendRenderingContainer.prototype.setPosition = function(orientation) {
                this.orientation = null != orientation ? orientation : legend_converter.Xv;
            }, LegendRenderingContainer.prototype.getPosition = function() {
                return this.orientation;
            }, LegendRenderingContainer.prototype.drawLegend = function(options) {
                var _a, data = options.data, clonedData = (0, Prototype.ED)(data);
                _.defaults(clonedData, {
                    fontProperties: (0, legend_converter.en)(this.style)
                });
                for (var newDataPoints = [], _i = 0, _b = data.dataPoints; _i < _b.length; _i++) newDataPoints.push((0, 
                Prototype.ED)(_b[_i]));
                clonedData.dataPoints = newDataPoints, LegendRenderingContainer.setTooltipToLegendItems(clonedData), 
                (clonedData.fontSize || clonedData.labelColor) && (clonedData.fontProperties = {
                    color: clonedData.labelColor || "#666666",
                    size: clonedData.fontSize ? units.B.createFromPt(clonedData.fontSize) : legend_util.OS,
                    family: legend_util.cp
                }), null !== (_a = clonedData.fontProperties) && void 0 !== _a || (clonedData.fontProperties = (0, 
                legend_converter.en)(this.style)), clonedData.isGradientLegend || (0 === clonedData.dataPoints.length && (clonedData.show = !1), 
                clonedData.show || (clonedData.dataPoints = [])), this.interactivityService && (this.interactivityService.applySelectionStateToData(data.dataPoints), 
                this.interactivityService.applySelectionStateToData(clonedData.dataPoints)), this.render((0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, options), {
                    data: clonedData
                }));
            }, LegendRenderingContainer.prototype.updateLegendDataStartIndex = function(v, options) {
                this.legendDataStartIndex = Utility.b$.clampValue(v, 0, Math.max(options.data.dataPoints.length - 1, 0));
            }, LegendRenderingContainer.prototype.render = function(options) {
                var _this = this;
                this.updateLegendDataStartIndex(this.legendDataStartIndex, options), this.viewport = renderLegend(function getRenderOptions() {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, options), {
                        autoWidth: !0,
                        element: _this.element,
                        lastCalculatedWidth: _this.lastCalculatedWidth,
                        orientation: _this.orientation,
                        isScrollable: _this.isScrollable,
                        arrowPosWindow: _this.arrowPosWindow,
                        legendDataStartIndex: _this.legendDataStartIndex,
                        interactivityService: _this.interactivityService,
                        rerenderCallback: function(type, legendDataStartIndex, arrowPosWindow) {
                            _this.updateLegendDataStartIndex(legendDataStartIndex + arrowPosWindow * (0 === type ? 1 : -1), options), 
                            _this.viewport = renderLegend((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, getRenderOptions()), {
                                arrowPosWindow
                            }));
                        },
                        visualStyle: _this.style,
                        hostServices: _this.hostServices
                    });
                }());
            }, LegendRenderingContainer.prototype.reset = function() {}, LegendRenderingContainer.setTooltipToLegendItems = function(data) {
                for (var _i = 0, _a = data.dataPoints; _i < _a.length; _i++) {
                    var dataPoint = _a[_i];
                    dataPoint.tooltip = dataPoint.label;
                }
            }, LegendRenderingContainer;
        }(), CartesianChartInteractiveLegend = function() {
            function CartesianChartInteractiveLegend(element) {
                this.legendContainerParent = d3.select(element.get(0));
            }
            return CartesianChartInteractiveLegend.prototype.getMargins = function() {
                return {
                    height: CartesianChartInteractiveLegend.LegendHeight,
                    width: 0
                };
            }, CartesianChartInteractiveLegend.prototype.drawLegend = function(options) {
                var legendData = options.data;
                debug.fF.assertValue(legendData, "legendData");
                var data = legendData.dataPoints;
                if (debug.fF.assertValue(data, "dataPoints"), !(data.length < 1)) {
                    var legendContainerDiv = this.legendContainerParent.select(CartesianChartInteractiveLegend.LegendContainerSelector);
                    if (legendContainerDiv.empty()) {
                        if (!data.length) return;
                        var divToPrepend = $("<div></div>").height(this.getMargins().height).addClass(CartesianChartInteractiveLegend.LegendContainerClass);
                        $(this.legendContainerParent.node()).prepend(divToPrepend), legendContainerDiv = d3.select(divToPrepend.get(0));
                    }
                    this.legendContainerDiv = legendContainerDiv, this.drawTitle(data), this.drawLegendItems(data);
                }
            }, CartesianChartInteractiveLegend.prototype.reset = function() {
                this.legendContainerDiv && (this.legendContainerDiv.remove(), this.legendContainerDiv = null);
            }, CartesianChartInteractiveLegend.prototype.isVisible = function() {
                return !0;
            }, CartesianChartInteractiveLegend.prototype.setPosition = function(_orientation) {}, 
            CartesianChartInteractiveLegend.prototype.getPosition = function() {
                return legendPosition.tV.Top;
            }, CartesianChartInteractiveLegend.prototype.drawTitle = function(data) {
                debug.fF.assert(function() {
                    return data && data.length > 0;
                }, "data is null or empty");
                var item = this.legendContainerDiv.selectAll("div.".concat(CartesianChartInteractiveLegend.LegendTitleClass)).data([ data[0] ]), itemEnter = item.enter().append("div").attr("class", CartesianChartInteractiveLegend.LegendTitleClass);
                itemEnter.filter(function(d) {
                    return d.iconOnlyOnLabel;
                }).append("span").attr("class", CartesianChartInteractiveLegend.legendIconClass).html(CartesianChartInteractiveLegend.legendPlaceSelector), 
                itemEnter.append("span");
                var itemUpdate = itemEnter.merge(item);
                itemUpdate.filter(function(d) {
                    return d.iconOnlyOnLabel;
                }).select("span.".concat(CartesianChartInteractiveLegend.legendIconClass)).style(CartesianChartInteractiveLegend.legendColorCss, function(d) {
                    return d.marker.color;
                }), itemUpdate.select("span:last-child").text(function(d) {
                    return d.category;
                });
            }, CartesianChartInteractiveLegend.prototype.drawLegendItems = function(data) {
                this.ensureLegendTableCreated();
                var dataPointsMatrix = [ data ], legendItemsContainer = this.legendContainerDiv.select("tbody").selectAll("tr").data(dataPointsMatrix), rowEnter = legendItemsContainer.enter().append("tr"), cellSpanEnter = rowEnter.selectAll("td").data(function(d) {
                    return d;
                }, function(d) {
                    return d.label;
                }).enter().append("td").attr("class", CartesianChartInteractiveLegend.LegendItem).append("span");
                cellSpanEnter.filter(function(d) {
                    return !d.iconOnlyOnLabel;
                }).append("span").html(CartesianChartInteractiveLegend.legendPlaceSelector).attr("class", CartesianChartInteractiveLegend.legendIconClass).attr("white-space", "nowrap").styles({
                    "font-size": "20px",
                    "margin-bottom": "7px"
                }), cellSpanEnter.append("span").attr("class", CartesianChartInteractiveLegend.legendItemNameClass), 
                cellSpanEnter.append("span").attr("class", CartesianChartInteractiveLegend.legendItemMeasureClass);
                var legendCells = rowEnter.merge(legendItemsContainer).selectAll("td").data(function(d) {
                    return d;
                }, function(d) {
                    return d.label;
                });
                legendCells.select("span.".concat(CartesianChartInteractiveLegend.legendItemNameClass)).html(function(d) {
                    return (0, textUtil.nU)(d.label);
                }), legendCells.select("span.".concat(CartesianChartInteractiveLegend.legendItemMeasureClass)).html(function(d) {
                    return "&nbsp;".concat(d.measure);
                }), legendCells.select("span.".concat(CartesianChartInteractiveLegend.legendIconClass)).style("color", function(d) {
                    return d.marker.color;
                }), legendCells.exit().remove();
            }, CartesianChartInteractiveLegend.prototype.ensureLegendTableCreated = function() {
                if (this.legendContainerDiv.select("div table").empty()) {
                    var legendTable = this.legendContainerDiv.append("div").append("table");
                    legendTable.style("table-layout", "fixed").append("tbody"), this.setPanGestureOnLegend(legendTable);
                }
            }, CartesianChartInteractiveLegend.prototype.setPanGestureOnLegend = function(legendTable) {
                var viewportWidth = $(this.legendContainerParent.node()).width(), zoom = d3.zoom().on("zoom", function() {
                    if ($(legendTable.node()).width() > viewportWidth) {
                        var tx = d3.event.transform.x;
                        tx = Math.min(tx, 0), tx = Math.max(tx, viewportWidth - $(legendTable.node()).width()), 
                        legendTable.style("-ms-transform", (0, svgUtil.y4)(tx)), legendTable.style("-webkit-transform", (0, 
                        svgUtil.y4)(tx)), legendTable.style("transform", (0, svgUtil.y4)(tx));
                    }
                });
                this.legendContainerDiv ? this.legendContainerDiv.call(zoom) : legendTable.call(zoom);
            }, CartesianChartInteractiveLegend.LegendHeight = 70, CartesianChartInteractiveLegend.LegendContainerClass = "interactive-legend", 
            CartesianChartInteractiveLegend.LegendContainerSelector = ".interactive-legend", 
            CartesianChartInteractiveLegend.LegendTitleClass = "title", CartesianChartInteractiveLegend.LegendItem = "item", 
            CartesianChartInteractiveLegend.legendPlaceSelector = "\u25cf", CartesianChartInteractiveLegend.legendIconClass = "icon", 
            CartesianChartInteractiveLegend.legendColorCss = "color", CartesianChartInteractiveLegend.legendItemNameClass = "itemName", 
            CartesianChartInteractiveLegend.legendItemMeasureClass = "itemMeasure", CartesianChartInteractiveLegend;
        }();
    },
    97121: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            P: function() {
                return createListView;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _VisualsCommon_services_jqueryPromiseFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88987), _VisualsCommon_tracing_trace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12913), _VisualsCommon_Utility_loadMoreDataHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(60810), _VisualsCommon_Utility_promise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(98094), _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10389);
        function createListView(options) {
            return new ListView(options);
        }
        var ListView = function() {
            function ListView(options) {
                var _a, _this = this;
                this._data = [], this.scrollTop = 0, this.scrollLeft = 0, this.prevWheelTime = 0, 
                this.factory = (0, _VisualsCommon_services_jqueryPromiseFactory__WEBPACK_IMPORTED_MODULE_0__.p)(), 
                options = this.options = $.extend(!0, {}, options), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assert(function() {
                    return !_this.options.paddingBetween && !_this.options.paddingOuter || _this.options.doNotRenderToCalculateRowHeight;
                }), this.scrollbarInner = options.baseContainer.append("div").classed("scrollbar-inner", !0).attr("role", "none").on("scroll", function() {
                    return _this.onScroll();
                }), this.scrollContainer = this.scrollbarInner.append("div").classed("scrollRegion", !0).attr("role", "none").on("touchstart", function() {
                    return _this.stopTouchPropagation();
                }).on("touchmove", function() {
                    return _this.stopTouchPropagation();
                }).style("overflow", "hidden"), this.visibleGroupContainer = this.scrollContainer.append("div").classed("visibleGroup", !0).attr("role", "none"), 
                this.scrollInner = $(this.scrollbarInner.node()), (null === (_a = this.scrollInner) || void 0 === _a ? void 0 : _a.scrollbar) && this.scrollInner.scrollbar({
                    ignoreOverlay: !1,
                    ignoreMobile: !1,
                    onDestroy: function() {
                        return _this.scrollbarInner.on("scroll", null);
                    }
                });
                var baseContainerNode = $(options.baseContainer.node()), scrollElement = baseContainerNode.find(".scroll-element");
                scrollElement.attr("drag-resize-disabled", "true"), options.scrollEnabled && scrollElement.css("pointer-events", "auto"), 
                baseContainerNode.find(".scroll-wrapper").attr("role", "none"), this.scrollToFrame = this.options.scrollToFrame || this.defaultScrollToFrame, 
                ListView.setDefaultOptions(options);
            }
            return ListView.prototype.orientation = function(isHorizontal) {
                var _this = this;
                return this.isHorizontal = isHorizontal, isHorizontal ? (this.visibleGroupContainer.style("display", "flex"), 
                this.visibleGroupContainer.style("flex-direction", "row"), this.scrollbarInner.on("wheel", function() {
                    var _a;
                    performance.now() - _this.prevWheelTime > 100 && (_this.propagateWheel = void 0);
                    var wheelEvent = d3.event, isHorizontalScroll = Math.abs(wheelEvent.deltaX) >= Math.abs(wheelEvent.deltaY);
                    if (_this.propagateWheel || isHorizontalScroll) _this.prevWheelTime = performance.now(); else {
                        var originalPosition = _this.scrollbarInner.node().scrollLeft;
                        _this.scrollbarInner.node().scrollBy({
                            left: wheelEvent.deltaY
                        });
                        var newPosition = _this.scrollbarInner.node().scrollLeft;
                        null !== (_a = _this.propagateWheel) && void 0 !== _a || (_this.propagateWheel = newPosition === originalPosition), 
                        _this.propagateWheel || (wheelEvent.stopPropagation(), wheelEvent.preventDefault()), 
                        _this.prevWheelTime = performance.now();
                    }
                })) : (this.visibleGroupContainer.style("display", null), this.visibleGroupContainer.style("flex-direction", null), 
                this.scrollbarInner.on("wheel", null)), this;
            }, ListView.prototype.scrollTo = function(scrollTop) {
                this.scrollInner.scrollTop(scrollTop);
            }, ListView.prototype.scrollRowIntoView = function(index, callback) {
                var _this = this, options = this.options, rowHeight = options.rowHeight, paddingBetween = options.paddingBetween, paddingOuter = options.paddingOuter, newRowIndex = Math.min(Math.max(index, 0), this._totalRows - 1), scrollTop = this.scrollTop, containerHeight = this.getContainerHeight(), rowStart = this.getRowStartPosition(newRowIndex, rowHeight, paddingBetween, paddingOuter), totalRowHeight = this.getTotalRowHeight(newRowIndex, rowHeight, paddingBetween, paddingOuter), neededScrollChange = this.getNeededScrollChange(rowStart, totalRowHeight, scrollTop, containerHeight);
                this.setFocusCallback = callback, 0 !== neededScrollChange ? (this.scrollTo(scrollTop + neededScrollChange), 
                this.pendingFocusCallback = function(loadedMore) {
                    loadedMore ? _this.pendingScrollCallback = function() {
                        return _this.scrollRowIntoView(index, callback);
                    } : _this.setFocusCallback && _this.setFocusCallback();
                }) : this.setFocusCallback && this.setFocusCallback();
            }, ListView.prototype.getTotalRowHeight = function(index, rowHeight, paddingBetween, paddingOuter) {
                var totalHeight = rowHeight;
                return 0 === index && (totalHeight += paddingOuter), index === this._totalRows && (totalHeight += paddingOuter), 
                index > 0 && (totalHeight += paddingBetween), totalHeight;
            }, ListView.prototype.getNeededScrollChange = function(rowStart, totalRowHeight, scrollTop, containerHeight) {
                if (rowStart < scrollTop) return Math.floor(rowStart - scrollTop);
                var rowEnd = rowStart + totalRowHeight, containerEnd = scrollTop + containerHeight;
                return rowEnd > containerEnd ? Math.floor(rowEnd - containerEnd) : 0;
            }, ListView.prototype.onScroll = function() {
                var _a, _b, _this = this;
                null === (_b = (_a = this.options).onScroll) || void 0 === _b || _b.call(_a), this.scrollTop = this.scrollbarInner.node().scrollTop, 
                this.scrollLeft = this.scrollbarInner.node().scrollLeft, void 0 === this.scrollTimeoutId && (this.scrollTimeoutId = window.requestAnimationFrame(function() {
                    var renderImplResults = _this.renderImpl(_this.options.rowHeight, _this.options.paddingBetween, _this.options.paddingOuter);
                    _this.scrollTimeoutId = void 0, _this.pendingFocusCallback && (_this.pendingFocusCallback(renderImplResults.loadedMore), 
                    _this.pendingFocusCallback = void 0);
                }));
            }, ListView.prototype.resetCallBacks = function() {
                this.pendingFocusCallback = void 0, this.pendingScrollCallback = void 0, this.setFocusCallback = void 0;
            }, ListView.prototype.destroy = function() {
                this.scrollInner && this.scrollInner.scrollbar("destroy"), this.resetCallBacks(), 
                this.clearRenderingTimeout();
            }, ListView.prototype.getContainerHeight = function() {
                if (this.options.getContainerHeight) {
                    var height = this.options.getContainerHeight();
                    if (null != height) return height;
                }
                var $baseContainer = $(this.options.baseContainer.node());
                return this.isHorizontal ? $baseContainer.outerWidth() : $baseContainer.outerHeight();
            }, ListView.setDefaultOptions = function(options) {
                options.rowHeight = ListView.valueOrDefault(options.rowHeight, ListView.defaultRowHeight), 
                options.paddingBetween = ListView.valueOrDefault(options.paddingBetween, ListView.defaultPaddingBetween), 
                options.paddingOuter = ListView.valueOrDefault(options.paddingOuter, ListView.defaultPaddingOuter);
            }, ListView.valueOrDefault = function(value, defaultValue) {
                return value || 0 === value ? value : defaultValue;
            }, ListView.prototype.getRowHeight = function() {
                return this.options.rowHeight;
            }, ListView.prototype.rowHeight = function(rowHeight) {
                return this.options.rowHeight = rowHeight, this;
            }, ListView.prototype.paddingBetween = function(paddingBetween) {
                return this.options.paddingBetween = paddingBetween, this;
            }, ListView.prototype.paddingOuter = function(paddingOuter) {
                return this.options.paddingOuter = paddingOuter, this;
            }, ListView.prototype.data = function(data, getDatumIndex, dataReset, callback) {
                return void 0 === dataReset && (dataReset = !1), this._data = data, this.getDatumIndex = getDatumIndex, 
                this.setTotalRows(), dataReset && ($(this.scrollbarInner.node()).scrollTop(0), this.resetCallBacks()), 
                this.render(callback).catch(function(reason) {
                    return _VisualsCommon_tracing_trace__WEBPACK_IMPORTED_MODULE_2__.f.error(reason);
                }), this;
            }, ListView.prototype.viewport = function(_viewport) {
                return this.render().catch(function(reason) {
                    return _VisualsCommon_tracing_trace__WEBPACK_IMPORTED_MODULE_2__.f.error(reason);
                }), this;
            }, ListView.prototype.empty = function() {
                this._data = [], this.resetCallBacks(), this.render().catch(function(reason) {
                    return _VisualsCommon_tracing_trace__WEBPACK_IMPORTED_MODULE_2__.f.error(reason);
                });
            }, ListView.prototype.clearRenderingTimeout = function() {
                void 0 !== this.renderDelay && (this.renderDelay.cancel(), this.renderDelay = void 0), 
                void 0 !== this.scrollTimeoutId && (window.cancelAnimationFrame(this.scrollTimeoutId), 
                this.scrollTimeoutId = void 0);
            }, ListView.prototype.render = function(callback) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function() {
                    var rowHeightInfo;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.clearRenderingTimeout(), [ 4, this.delay() ];

                          case 1:
                            return _a.sent() ? [ 2 ] : (this.renderDelay = void 0, [ 4, this.getRowHeightInternal() ]);

                          case 2:
                            return rowHeightInfo = _a.sent(), this.renderImpl(rowHeightInfo.rowHeight, rowHeightInfo.paddingBetween, rowHeightInfo.paddingOuter), 
                            callback && callback(), this.pendingScrollCallback && (this.pendingScrollCallback(), 
                            this.pendingScrollCallback = void 0), [ 2 ];
                        }
                    });
                });
            }, ListView.prototype.delay = function() {
                return this.renderDelay = new Delay, this.renderDelay.promise;
            }, ListView.prototype.canScrollTop = function() {
                return 0 !== this.scrollTop;
            }, ListView.prototype.getScroll = function() {
                return new (function() {
                    function ListViewScroll(self) {
                        this.self = self;
                    }
                    return Object.defineProperty(ListViewScroll.prototype, "scrollHeight", {
                        get: function() {
                            return this.self.getTotalHeight(this.self.options.rowHeight, this.self.options.paddingBetween, this.self.options.paddingOuter);
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(ListViewScroll.prototype, "visibleHeight", {
                        get: function() {
                            return this.self.getContainerHeight();
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(ListViewScroll.prototype, "scrollTop", {
                        get: function() {
                            return this.self.scrollTop;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), ListViewScroll;
                }())(this);
            }, ListView.prototype.updateScrollingViewport = function(styling) {
                styling.width ? this.scrollInner.get(0).style.setProperty("width", styling.width, "important") : this.scrollInner.get(0).style.removeProperty("width"), 
                styling.height ? this.scrollInner.get(0).style.setProperty("flex-basis", styling.height, "important") : this.scrollInner.get(0).style.removeProperty("flex-basis"), 
                styling["border-radius"] ? this.scrollInner.get(0).style.borderRadius = styling["border-radius"] : this.scrollInner.get(0).style.removeProperty("border-radius");
            }, ListView.prototype.getTotalHeight = function(rowHeight, paddingBetween, paddingOuter) {
                var innerPadding = ListView.valueOrDefault(paddingBetween, ListView.defaultPaddingBetween), outerPadding = ListView.valueOrDefault(paddingOuter, ListView.defaultPaddingOuter);
                return this.options.scrollEnabled ? Math.max(0, this._totalRows * rowHeight + (this._totalRows - 1) * innerPadding + 2 * outerPadding) : this.getContainerHeight();
            }, ListView.prototype.renderImpl = function(rowHeight, paddingBetween, paddingOuter) {
                var totalHeight = this.getTotalHeight(rowHeight, paddingBetween, paddingOuter);
                return this.scrollContainer.style("width", this.isHorizontal ? "".concat(totalHeight, "px") : null).style("height", this.isHorizontal ? null : "".concat(totalHeight, "px")), 
                this.scrollToFrame({
                    listView: this,
                    loadMoreData: !0,
                    rowHeight: this.options.rowHeight || ListView.defaultRowHeight,
                    paddingBetween: this.options.paddingBetween || ListView.defaultPaddingBetween,
                    paddingOuter: this.options.paddingOuter || ListView.defaultPaddingOuter,
                    scrollTop: this.scrollTop,
                    scrollLeft: this.scrollLeft,
                    totalRows: this._totalRows,
                    visibleGroupContainer: this.visibleGroupContainer,
                    baseContainer: this.options.baseContainer
                });
            }, ListView.prototype.stopTouchPropagation = function() {
                var d3Event = d3.event;
                this.options.isReadMode() && ("touchstart" === d3Event.type && d3Event.touches && 1 === d3Event.touches.length && d3Event.stopPropagation(), 
                "touchmove" === d3Event.type && d3Event.stopPropagation());
            }, ListView.prototype.defaultScrollToFrame = function(options) {
                var visibleRows, startIndex, transformAttr, loadMoreData = options.loadMoreData, rowHeight = options.rowHeight, paddingBetween = options.paddingBetween, paddingOuter = options.paddingOuter, scrollPosition = this.isHorizontal ? options.scrollLeft : options.scrollTop, totalRows = options.totalRows, visibleGroupContainer = options.visibleGroupContainer;
                if (paddingBetween || paddingOuter) !this._totalRows || !this.options.rowHeight || rowHeight < 1 ? (startIndex = 0, 
                transformAttr = (0, _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__.O7)(0, 0), 
                visibleRows = 1) : (startIndex = this.getRowIndex(scrollPosition, rowHeight, paddingBetween, paddingOuter, !1), 
                translateValue = scrollPosition > 0 ? this.getRowStartPosition(startIndex, rowHeight, paddingBetween, paddingOuter) : 0, 
                transformAttr = (0, _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__.O7)(this.isHorizontal ? translateValue : 0, this.isHorizontal ? 0 : translateValue), 
                visibleRows = this.getRowIndex(scrollPosition + this.getContainerHeight(), rowHeight, paddingBetween, paddingOuter, !0) - startIndex + 1); else {
                    visibleRows = this.getVisibleRowsWithoutPadding();
                    var translateValue = (startIndex = Math.max(0, Math.min(Math.floor(scrollPosition / rowHeight), totalRows - visibleRows + 1))) * rowHeight;
                    transformAttr = (0, _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__.O7)(this.isHorizontal ? translateValue : 0, this.isHorizontal ? 0 : translateValue);
                }
                visibleGroupContainer.styles({
                    transform: function(_d) {
                        return transformAttr;
                    },
                    "-webkit-transform": transformAttr
                });
                var endIndex = startIndex + visibleRows;
                return this.currentScrollPosition = {
                    startIndex,
                    endIndex
                }, this.performScrollToFrame(startIndex, endIndex, totalRows, visibleRows, loadMoreData);
            }, ListView.prototype.getFirstVisibleRow = function() {
                if (!_.isEmpty(this.visibleData)) return this.visibleData[0];
            }, ListView.prototype.reachedLastRowContent = function() {
                if (this._totalRows > 0) {
                    var options = this.options, paddingBetween = options.paddingBetween, paddingOuter = options.paddingOuter, scrollPosition = this.isHorizontal ? this.scrollLeft : this.scrollTop, lastRowIndex = this._totalRows - 1;
                    return this.getRowStartPosition(lastRowIndex, options.rowHeight, paddingBetween, paddingOuter) + (0 === lastRowIndex ? paddingOuter : paddingBetween) < scrollPosition + this.getContainerHeight();
                }
                return !1;
            }, ListView.prototype.performScrollToFrame = function(position0, position1, totalRows, visibleRows, loadMoreData) {
                var options = this.options, visibleGroupContainer = this.visibleGroupContainer;
                this.visibleData = this._data.slice(position0, Math.min(position1, totalRows));
                var loadedMore = !1, rowSelection = visibleGroupContainer.selectAll(".row").data(this.visibleData, this.getDatumIndex);
                if (rowSelection.exit().remove(), rowSelection.enter().append("div").classed("row", !0).attr("role", "none").call(function(d) {
                    return options.enter(d);
                }).merge(rowSelection).order(), visibleGroupContainer.selectAll(".row:not(.transitioning)").call(function(d) {
                    return options.update(d);
                }), loadMoreData) {
                    var loadmore = options.customLoadMoreCheck ? options.customLoadMoreCheck() : function(position1, totalRows, visibleRows) {
                        return visibleRows !== totalRows && position1 >= .8 * totalRows;
                    }(position1, totalRows, visibleRows);
                    loadmore && (loadedMore = options.loadMoreData() === _VisualsCommon_Utility_loadMoreDataHandler__WEBPACK_IMPORTED_MODULE_5__.G.TriggeredLoadMore);
                }
                return options.afterScroll && options.afterScroll(), this.setFocusCallback && this.setFocusCallback(), 
                {
                    loadedMore
                };
            }, ListView.prototype.getCurrentPosition = function() {
                return this.currentScrollPosition;
            }, ListView.prototype.setTotalRows = function() {
                var data = this._data;
                this._totalRows = data ? data.length : 0;
            }, ListView.prototype.getVisibleRowsWithoutPadding = function() {
                var options = this.options, rowHeight = options.rowHeight, scrollEnabled = options.scrollEnabled, containerHeight = this.getContainerHeight();
                if (!rowHeight || rowHeight < 1) return 1;
                var viewportRowCount = containerHeight / rowHeight;
                return scrollEnabled ? Math.min(Math.ceil(viewportRowCount) + 1, this._totalRows) || 1 : Math.min(Math.floor(viewportRowCount), this._totalRows) || 1;
            }, ListView.prototype.getRowIndex = function(scrollPosition, rowHeight, paddingBetween, paddingOuter, includeBoundaries) {
                var index = Math.min(scrollPosition < rowHeight + paddingOuter ? 0 : Math.floor((scrollPosition - rowHeight - paddingOuter) / (rowHeight + paddingBetween)) + 1, this._totalRows - 1);
                return this.getRowStartPosition(index, rowHeight, paddingBetween, paddingOuter) === scrollPosition && (index = includeBoundaries ? Math.max(index - 1, 0) : index), 
                index;
            }, ListView.prototype.getRowStartPosition = function(index, rowHeight, paddingBetween, paddingOuter) {
                return index * rowHeight + Math.max(0, index - 1) * paddingBetween + (index > 0 ? paddingOuter : 0);
            }, ListView.prototype.getRowHeightInternal = function() {
                var _this = this, deferred = this.factory.defer(), listView = this, options = listView.options;
                if (this.cancelMeasurePass && this.cancelMeasurePass(), !(this._data && this._data.length && options)) return listView.rowHeight(ListView.defaultRowHeight), 
                listView.paddingBetween(ListView.defaultPaddingBetween), listView.paddingOuter(ListView.defaultPaddingOuter), 
                deferred.resolve({
                    rowHeight: options.rowHeight,
                    paddingBetween: options.paddingBetween,
                    paddingOuter: options.paddingOuter
                }), deferred.promise;
                if (options && options.doNotRenderToCalculateRowHeight) return deferred.resolve({
                    rowHeight: options.rowHeight,
                    paddingBetween: options.paddingBetween,
                    paddingOuter: options.paddingOuter
                }), deferred.promise;
                var scrollToFrameOptions = {
                    listView: this,
                    loadMoreData: !1,
                    rowHeight: this.options.rowHeight || ListView.defaultRowHeight,
                    paddingBetween: ListView.defaultPaddingBetween,
                    paddingOuter: ListView.defaultPaddingOuter,
                    scrollTop: this.scrollbarInner.node().scrollTop,
                    scrollLeft: this.scrollbarInner.node().scrollLeft,
                    totalRows: this._totalRows,
                    visibleGroupContainer: this.visibleGroupContainer,
                    baseContainer: this.options.baseContainer
                };
                this.scrollToFrame(scrollToFrameOptions);
                var requestAnimationFrameId = window.requestAnimationFrame(function() {
                    var rows = listView.visibleGroupContainer.selectAll(".row").filter(function() {
                        return "" !== this.textContent || null !== this.querySelector("img");
                    });
                    if (rows.empty() && (rows = listView.visibleGroupContainer.select(".row")), !rows.empty()) {
                        var elements = rows.nodes(), rowHeight = _this.calculateRowHeight(elements);
                        listView.rowHeight(rowHeight), deferred.resolve({
                            rowHeight,
                            paddingBetween: ListView.defaultPaddingBetween,
                            paddingOuter: ListView.defaultPaddingOuter
                        });
                    }
                    listView.cancelMeasurePass = void 0;
                });
                return this.cancelMeasurePass = function() {
                    window.cancelAnimationFrame(requestAnimationFrameId), deferred.reject({
                        code: "cancelMeasurePass",
                        ignorable: !0
                    });
                }, deferred.promise;
            }, ListView.prototype.calculateRowHeight = function(elements) {
                for (var length = 2 > elements.length ? elements.length : 2, height = 0, i = 0; i < length; i++) height = Math.max(height, this.measureElementHeight(elements[i]));
                return height;
            }, ListView.prototype.measureElementHeight = function(element) {
                var $element = $(element);
                return Math.ceil(Math.max($element.outerHeight(!0), $element.children().first().outerHeight(!0)));
            }, ListView.defaultRowHeight = 1, ListView.defaultPaddingBetween = 0, ListView.defaultPaddingOuter = 0, 
            ListView;
        }(), Delay = function() {
            function Delay() {
                var _this = this;
                this.promise = new _VisualsCommon_Utility_promise__WEBPACK_IMPORTED_MODULE_6__.J(function(resolve) {
                    _this.resolve = resolve;
                }), this.timeoutId = setTimeout(this.complete.bind(this));
            }
            return Delay.prototype.complete = function() {
                this.resolve(!1);
            }, Delay.prototype.cancel = function() {
                window.clearTimeout(this.timeoutId), this.resolve(!0);
            }, Delay;
        }();
    },
    49203: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            R: function() {
                return getNextFromFlattenedViewModel;
            }
        });
        var _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72902);
        function getNextFromFlattenedViewModel(pointData, categoryIndex, seriesIndex, strategy, direction) {
            var _a, currentGroupPointData, indexModifier, targetIndex, nextCategoryIndex = categoryIndex, nextSeriesIndex = seriesIndex;
            switch (direction) {
              case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.PreviousCategory:
              case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.NextCategory:
                if (strategy === _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.jN.SeriesOnly) break;
                indexModifier = direction === _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.PreviousCategory ? -1 : 1, 
                currentGroupPointData = _.filter(pointData, function(point) {
                    return point.seriesIndex === seriesIndex;
                }), (targetIndex = indexModifier + _.findIndex(currentGroupPointData, function(point) {
                    return point.categoryIndex === categoryIndex;
                })) >= currentGroupPointData.length && (targetIndex = 0), targetIndex < 0 && (targetIndex = currentGroupPointData.length - 1), 
                nextCategoryIndex = currentGroupPointData[targetIndex].categoryIndex;
                break;

              case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.NextSeries:
              case _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.PreviousSeries:
                if (strategy === _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.jN.CategoryOnly) break;
                (targetIndex = (indexModifier = direction === _services_interactivityService__WEBPACK_IMPORTED_MODULE_0__.x0.PreviousSeries ? -1 : 1) + _.findIndex(pointData, function(point) {
                    return point.categoryIndex === categoryIndex && point.seriesIndex === seriesIndex;
                })) >= pointData.length && (targetIndex = 0), targetIndex < 0 && (targetIndex = pointData.length - 1), 
                nextCategoryIndex = (_a = [ pointData[targetIndex].categoryIndex, pointData[targetIndex].seriesIndex ])[0], 
                nextSeriesIndex = _a[1];
            }
            return {
                categoryIndex: nextCategoryIndex,
                seriesIndex: nextSeriesIndex
            };
        }
    },
    28579: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            G: function() {
                return ObjectEnumerationBuilder;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32379), ObjectEnumerationBuilder = function() {
            function ObjectEnumerationBuilder() {}
            return ObjectEnumerationBuilder.prototype.pushInstance = function(instance, mergeInstances) {
                void 0 === mergeInstances && (mergeInstances = !0), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(instance, "instance");
                var instances = this.instances;
                instances || (instances = this.instances = []);
                var containerIdx = this.containerIdx;
                if (null != containerIdx && (instance.containerIdx = containerIdx), mergeInstances) for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
                    var existingInstance = instances_1[_i];
                    if (this.canMerge(existingInstance, instance)) return this.extend(existingInstance, instance, "properties"), 
                    this.extend(existingInstance, instance, "validValues"), this;
                }
                return instances.push(instance), this;
            }, ObjectEnumerationBuilder.prototype.pushContainer = function(container) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(container, "container");
                var containers = this.containers;
                containers || (containers = this.containers = []);
                var updatedLen = containers.push(container);
                return this.containerIdx = updatedLen - 1, this;
            }, ObjectEnumerationBuilder.prototype.popContainer = function() {
                return this.containerIdx = void 0, this;
            }, ObjectEnumerationBuilder.prototype.complete = function() {
                if (this.instances) {
                    var result = {
                        instances: this.instances
                    }, containers = this.containers;
                    return containers && (result.containers = containers), result;
                }
            }, ObjectEnumerationBuilder.prototype.canMerge = function(x, y) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(x, "x"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(y, "y"), x.objectName === y.objectName && x.containerIdx === y.containerIdx && (0, 
                _VisualsData_contracts_selector__WEBPACK_IMPORTED_MODULE_1__.fS)(x.selector, y.selector);
            }, ObjectEnumerationBuilder.prototype.extend = function(target, source, propertyName) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(target, "target"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(source, "source"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(propertyName, "propertyName");
                var sourceValues = source[propertyName];
                if (sourceValues) {
                    var targetValues = target[propertyName];
                    for (var valuePropertyName in targetValues || (targetValues = target[propertyName] = {}), 
                    sourceValues) targetValues[valuePropertyName] || (targetValues[valuePropertyName] = sourceValues[valuePropertyName]);
                }
            }, ObjectEnumerationBuilder.merge = function(x, y) {
                var xNormalized = ObjectEnumerationBuilder.normalize(x), yNormalized = ObjectEnumerationBuilder.normalize(y);
                if (!xNormalized || !yNormalized) return xNormalized || yNormalized;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(xNormalized, "xNormalized"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(yNormalized, "yNormalized");
                for (var xCategoryCount = xNormalized.containers ? xNormalized.containers.length : 0, _i = 0, _a = yNormalized.instances; _i < _a.length; _i++) {
                    var yInstance = _a[_i];
                    xNormalized.instances.push(yInstance), null != yInstance.containerIdx && (yInstance.containerIdx += xCategoryCount);
                }
                var yContainers = yNormalized.containers;
                return _.isEmpty(yContainers) || (xNormalized.containers ? Array.prototype.push.apply(xNormalized.containers, yContainers) : xNormalized.containers = yContainers), 
                xNormalized;
            }, ObjectEnumerationBuilder.normalize = function(x) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertAnyValue(x, "x"), 
                _.isArray(x) ? {
                    instances: x
                } : x;
            }, ObjectEnumerationBuilder.getContainerForInstance = function(enumeration, instance) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(enumeration, "enumeration"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(instance, "instance"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(enumeration.containers, "containers"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return enumeration.containers.length > instance.containerIdx;
                }, "no container found in containers collection"), enumeration.containers[instance.containerIdx];
            }, ObjectEnumerationBuilder;
        }();
    },
    80065: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Jf: function() {
                return getDataLabelsFormattingIdSubSelectionStyles;
            },
            Mw: function() {
                return getVerticalTitleDirectEdit;
            },
            RM: function() {
                return getFontFormattingIdSubSelectionStyles;
            },
            dF: function() {
                return getVisualObject;
            },
            s4: function() {
                return getHorizontalCenteredTitleDirectEdit;
            },
            un: function() {
                return getFontOnlyTextFormattingIdsSubSelectionStyles;
            },
            w3: function() {
                return getShapeFormattingIdSubSelectionStyles;
            },
            xs: function() {
                return getNumericTextFormattingIdSubSelectionStyles;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _dataLabelUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(46769), getFontOnlyTextFormattingIdsSubSelectionStyles = function(hostServices, textStylesFormattingIds, options) {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({
                type: 1
            }, getFontFormattingIdSubSelectionStyles(hostServices, textStylesFormattingIds, options));
        }, getNumericTextFormattingIdSubSelectionStyles = function(hostServices, numericTextStylesModelReferences, options) {
            var precisionReference = numericTextStylesModelReferences.precisionReference, displayUnitsReference = numericTextStylesModelReferences.displayUnitsReference, textStylesModelReferences = (0, 
            tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(numericTextStylesModelReferences, [ "precisionReference", "displayUnitsReference" ]);
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({
                type: 2
            }, getFontFormattingIdSubSelectionStyles(hostServices, textStylesModelReferences, options)), {
                precision: (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, null == options ? void 0 : options.precision), {
                    reference: precisionReference,
                    label: hostServices.getLocalizedString("Visual_Precision")
                }),
                displayUnits: {
                    reference: displayUnitsReference,
                    label: hostServices.getLocalizedString("Visual_DisplayUnits")
                }
            });
        }, getShapeFormattingIdSubSelectionStyles = function(hostServices, strokeReference, fillReference, strokeLabel) {
            void 0 === strokeReference && (strokeReference = null), void 0 === fillReference && (fillReference = null), 
            void 0 === strokeLabel && (strokeLabel = null);
            var shapeSubSelectionStyles = {
                type: 3
            };
            return strokeReference && (shapeSubSelectionStyles.stroke = {
                reference: strokeReference,
                label: strokeLabel || hostServices.getLocalizedString("Visual_Shape_Line")
            }), fillReference && (shapeSubSelectionStyles.fill = {
                reference: fillReference,
                label: hostServices.getLocalizedString("Visual_Fill")
            }), shapeSubSelectionStyles;
        }, getDataLabelsFormattingIdSubSelectionStyles = function(options, textStylesModelReferences) {
            var hostServices = options.hostServices, omitSelectorForSingleSeries = options.omitSelectorForSingleSeries, individualSelector = options.individualSelector, repetitionSelector = options.repetitionSelector, subSelectionStylesOptions = options.subSelectionStylesOptions, fontColorReference = textStylesModelReferences.fontColorReference;
            return fontColorReference && (textStylesModelReferences = (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, 
            tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, textStylesModelReferences), {
                fontColorReference: (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, fontColorReference), {
                    selector: (0, _dataLabelUtil__WEBPACK_IMPORTED_MODULE_1__.hm)(individualSelector, omitSelectorForSingleSeries ? void 0 : fontColorReference.selector, repetitionSelector)
                })
            })), void 0 !== textStylesModelReferences.precisionReference ? getNumericTextFormattingIdSubSelectionStyles(hostServices, textStylesModelReferences, subSelectionStylesOptions) : getFontOnlyTextFormattingIdsSubSelectionStyles(hostServices, textStylesModelReferences, subSelectionStylesOptions);
        }, getFontFormattingIdSubSelectionStyles = function(hostServices, textStylesFormattingIds, options) {
            var fontFamilyReference = textStylesFormattingIds.fontFamilyReference, fontSizeReference = textStylesFormattingIds.fontSizeReference, boldReference = textStylesFormattingIds.boldReference, italicReference = textStylesFormattingIds.italicReference, underlineReference = textStylesFormattingIds.underlineReference, backgroundReference = textStylesFormattingIds.backgroundReference, wordWrapReference = textStylesFormattingIds.wordWrapReference, horizontalAlignmentReference = textStylesFormattingIds.horizontalAlignmentReference, fontSubSelectionStyles = {
                fontColor: {
                    reference: textStylesFormattingIds.fontColorReference,
                    label: hostServices.getLocalizedString("Visual_FontColor")
                },
                fontFamily: {
                    reference: fontFamilyReference,
                    label: hostServices.getLocalizedString("Visual_FontFamily")
                },
                bold: {
                    reference: boldReference,
                    label: hostServices.getLocalizedString("Bold")
                },
                italic: {
                    reference: italicReference,
                    label: hostServices.getLocalizedString("Italic")
                },
                underline: {
                    reference: underlineReference,
                    label: hostServices.getLocalizedString("Underline")
                }
            };
            return fontSizeReference && (fontSubSelectionStyles.fontSize = {
                reference: fontSizeReference,
                label: hostServices.getLocalizedString("FontSize")
            }), backgroundReference && (fontSubSelectionStyles.background = {
                reference: backgroundReference,
                label: hostServices.getLocalizedString("Background_Color")
            }), wordWrapReference && (fontSubSelectionStyles.wordWrap = {
                reference: wordWrapReference,
                label: hostServices.getLocalizedString("Visual_WordWrap")
            }), horizontalAlignmentReference && (fontSubSelectionStyles.horizontalAlignment = {
                reference: horizontalAlignmentReference,
                label: hostServices.getLocalizedString("Visual_Alignment_Horizontal")
            }), options && (options.grid && (fontSubSelectionStyles.grid = options.grid), options.border && (fontSubSelectionStyles.border = options.border)), 
            fontSubSelectionStyles;
        }, getVisualObject = function(subSelections) {
            var visualObjects = _.first(subSelections).visualObjects;
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assert(function() {
                return 1 === visualObjects.length;
            }, "Expected 1 visual");
            var visualObject = visualObjects[0];
            return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assert(function() {
                return 1 === subSelections.length || subSelections.every(function(newSubSelection) {
                    return _.isEqual(newSubSelection.visualObjects, [ visualObject ]);
                }, "Expected 1 sub-selection or matching objects");
            }), visualObject;
        }, getHorizontalCenteredTitleDirectEdit = function(formattingId, titleText) {
            if (formattingId) return {
                reference: formattingId,
                style: 2,
                displayValue: titleText
            };
        }, getVerticalTitleDirectEdit = function(formattingId, titleText) {
            if (formattingId) return {
                reference: formattingId,
                style: 1,
                displayValue: titleText || ""
            };
        };
    },
    47006: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Dk: function() {
                return y1AxisRefLineObjectName;
            },
            Dr: function() {
                return enumerateReferenceLineObjectInstances;
            },
            Lp: function() {
                return gatherDomainExtents;
            },
            TY: function() {
                return createLabelDataPoint;
            },
            UL: function() {
                return readReferenceLineDataView;
            },
            XC: function() {
                return xAxisRefLineObjectName;
            },
            xs: function() {
                return DefaultReferenceLineStyle;
            },
            xw: function() {
                return renderReferenceLines;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(81337), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(62458), _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(39681), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(32041), _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(6444), _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(59694), _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(76045), _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(72489), _VisualsData_formatting_valueFormatterConstants__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(39680), _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(28326), _types_labelText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54743), _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47316), _types_referenceLinePosition1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36578), _types_referenceLinePosition2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(21408), _types_referenceLinePosition3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(68277), _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12875), _colorHelper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(90120), _dataLabelUtil__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(46769), _dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(21181), _fontProperties__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(18664), _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(2529), _strokeStyle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(2241), _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14599), _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(64067), xAxisRefLineObjectName = "xAxisReferenceLine", y1AxisRefLineObjectName = "y1AxisReferenceLine", DefaultReferenceLineStyle = {
            strokeShow: !1,
            strokeColor: void 0,
            strokeTransparency: 50,
            strokeWidth: 3,
            strokePattern: _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__.Dv.dashed,
            strokeDashArray: _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__.YU,
            strokeDashCap: _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__.xm,
            strokeAutoScale: !1,
            shadeRegionProperties: {
                shadeRegion: _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.YP,
                shadeColor: void 0,
                shadeTransparency: 40
            },
            dataLabelProperties: {
                show: !1,
                color: void 0,
                text: _types_labelText__WEBPACK_IMPORTED_MODULE_2__.S3,
                horizontalPosition: _types_referenceLinePosition2__WEBPACK_IMPORTED_MODULE_3__.t$,
                verticalPosition: _types_referenceLinePosition3__WEBPACK_IMPORTED_MODULE_4__.aE,
                decimalPoints: void 0,
                displayUnits: 0
            },
            position: _types_referenceLinePosition1__WEBPACK_IMPORTED_MODULE_5__.W$
        }, ReferenceLineFrontCS = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_6__.CH)("reference-line-front"), ReferenceLineBackCS = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_6__.CH)("reference-line-back"), ReferenceLineShadeCS = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_6__.CH)("shade-region-ref-line");
        function enumerateReferenceLineObjectInstances(enumeration, referenceLines, defaultColor, objectName, isIrregularAxis, categoryAxisType) {
            if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_7__.fF.assertValue(enumeration, "enumeration"), 
            !isIrregularAxis) {
                var validReferenceLines = getValidReferenceLines(referenceLines, categoryAxisType);
                if (_.isEmpty(validReferenceLines)) return addPropertyTypeForValue(objectName, instance = {
                    selector: {
                        id: "0"
                    },
                    properties: (0, tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)({}, (0, 
                    _strokeStyle__WEBPACK_IMPORTED_MODULE_9__.HM)(DefaultReferenceLineStyle, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_10__.vi, defaultColor)), {
                        position: DefaultReferenceLineStyle.position,
                        dataLabelShow: DefaultReferenceLineStyle.dataLabelProperties.show
                    }),
                    objectName,
                    propertyTypes: {}
                }, categoryAxisType), void enumeration.pushInstance(instance);
                for (var _i = 0, validReferenceLines_1 = validReferenceLines; _i < validReferenceLines_1.length; _i++) {
                    var instance, referenceLine = validReferenceLines_1[_i], dataLabelShow = referenceLine.dataLabelProperties && referenceLine.dataLabelProperties.show;
                    (instance = {
                        selector: referenceLine.selector,
                        properties: (0, tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)({}, (0, 
                        _strokeStyle__WEBPACK_IMPORTED_MODULE_9__.HM)(referenceLine, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_10__.vi)), {
                            displayName: referenceLine.displayName,
                            value: referenceLine.value,
                            position: referenceLine.position
                        }),
                        objectName: referenceLine.type,
                        propertyTypes: {},
                        propertyInstanceKind: {}
                    }).propertyInstanceKind[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.S3] = 3;
                    var shadeRegionProperties = referenceLine.shadeRegionProperties;
                    if (instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.rS] = shadeRegionProperties.shadeRegion, 
                    referenceLine.shadeRegionProperties.shadeRegion !== _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.YP && (instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.HO] = shadeRegionProperties.shadeColor, 
                    instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.af] = shadeRegionProperties.shadeTransparency), 
                    instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.yl] = dataLabelShow, 
                    dataLabelShow) {
                        var dataLabelProperties = referenceLine.dataLabelProperties;
                        instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.UD] = dataLabelProperties.color, 
                        instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.Zs] = dataLabelProperties.text, 
                        instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.nR] = dataLabelProperties.horizontalPosition, 
                        instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.G5] = dataLabelProperties.verticalPosition, 
                        instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.XI] = dataLabelProperties.displayUnits, 
                        instance.properties[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.pw] = dataLabelProperties.decimalPoints;
                    }
                    objectName === xAxisRefLineObjectName && addPropertyTypeForValue(objectName, instance, categoryAxisType), 
                    enumeration.pushInstance(instance);
                }
            }
        }
        function getValidReferenceLines(referenceLines, categoryAxisType) {
            return _.filter(referenceLines, function(referenceLine) {
                var value = referenceLine.value;
                return 0 !== referenceLine.axis || _.isUndefined(value) || !categoryAxisType || categoryAxisType.dateTime === value instanceof Date || categoryAxisType.numeric === _.isNumber(value);
            });
        }
        function getReferenceLinesToRender(referenceLines, axes, viewport, isForShadeArea) {
            var validReferenceLines = getValidReferenceLines(referenceLines, function(axes) {
                return axes.x.isCategoryAxis ? axes.x : axes.y1;
            }(axes).valueType), filteredReferenceLines = function(referenceLines, axes, viewport) {
                return _.filter(referenceLines, function(referenceLine) {
                    var _a;
                    if (isHorizontal(referenceLine, axes)) {
                        var scaleValue_1 = (referenceLine.isY2 && (null === (_a = axes.y2) || void 0 === _a ? void 0 : _a.scale) || axes.y1.scale)(referenceLine.value);
                        return scaleValue_1 >= 0 && scaleValue_1 <= viewport.height;
                    }
                    var scaleValue = axes.x.scale(referenceLine.value);
                    return scaleValue >= 0 && scaleValue <= viewport.width;
                });
            }(validReferenceLines, axes, viewport);
            return filteredReferenceLines = _.filter(filteredReferenceLines, function(referenceLine) {
                var valueAxis = axes.x.isCategoryAxis ? referenceLine.isY2 ? axes.y2 : axes.y1 : axes.x;
                return !(null == valueAxis ? void 0 : valueAxis.isIrregular);
            }), isForShadeArea ? function(referenceLines) {
                return _.filter(referenceLines, function(line) {
                    return line.shadeRegionProperties.shadeRegion !== _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.YP;
                });
            }(validReferenceLines) : function(referenceLines) {
                return _.filter(referenceLines, function(line) {
                    return line.strokeShow && (_.isNumber(line.value) || line.value instanceof Date);
                });
            }(filteredReferenceLines);
        }
        function addPropertyTypeForValue(objectName, instance, categoryAxisType) {
            objectName === xAxisRefLineObjectName && categoryAxisType && (categoryAxisType.dateTime ? instance.propertyTypes[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.S3] = {
                dateTime: !0
            } : categoryAxisType.numeric && (instance.propertyTypes[_referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.S3] = {
                numeric: !0
            }));
        }
        function isHorizontal(refLine, axes) {
            return 0 !== refLine.axis && !axes.y1.isCategoryAxis;
        }
        function renderReferenceLines(options) {
            var xScale = options.axes.x.scale, yScale = options.axes.y1.scale, y2Scale = options.axes.y2 && options.axes.y2.scale;
            function setRefLineProperties(refLine) {
                if (refLine.strokeShow && !_.isUndefined(refLine.value)) {
                    var yScaleToUse = refLine.isY2 ? y2Scale : yScale, isHorizontal_ = isHorizontal(refLine, options.axes), viewport = options.viewport, value = refLine.value;
                    d3.select(this).attrs({
                        x1: isHorizontal_ ? 0 : xScale(value),
                        y1: isHorizontal_ ? yScaleToUse(value) : 0,
                        x2: isHorizontal_ ? viewport.width : xScale(value),
                        y2: isHorizontal_ ? yScaleToUse(value) : viewport.height
                    }).styles((0, _strokeStyle__WEBPACK_IMPORTED_MODULE_9__.bc)(refLine));
                }
            }
            var referenceLines = getReferenceLinesToRender(options.referenceLines, options.axes, options.viewport, !1), graphicsContext = options.graphicContext, frontReferenceLines = _.filter(referenceLines, function(line) {
                return line.position === _types_referenceLinePosition1__WEBPACK_IMPORTED_MODULE_5__.W$;
            }), frontLines = graphicsContext.selectAll(ReferenceLineFrontCS.selector).data(frontReferenceLines);
            frontLines.enter().append("line").classed(ReferenceLineFrontCS.class, !0).merge(frontLines).each(setRefLineProperties), 
            frontLines.exit().remove();
            var backReferenceLines = _.filter(referenceLines, function(line) {
                return line.position !== _types_referenceLinePosition1__WEBPACK_IMPORTED_MODULE_5__.W$;
            }), backLines = graphicsContext.selectAll(ReferenceLineBackCS.selector).data(backReferenceLines);
            backLines.enter().insert("line", ":first-child").classed(ReferenceLineBackCS.class, !0).merge(backLines).each(setRefLineProperties), 
            backLines.exit().remove();
            var shownShadeRegions = getReferenceLinesToRender(options.referenceLines, options.axes, options.viewport, !0), shadeRegions = graphicsContext.selectAll(ReferenceLineShadeCS.selector).data(shownShadeRegions);
            shadeRegions.enter().append("rect").classed(ReferenceLineShadeCS.class, !0).merge(shadeRegions).each(function(refLine) {
                var shadeRegionProperty = refLine.shadeRegionProperties;
                if (shadeRegionProperty.shadeRegion !== _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.YP && refLine.strokeShow && !_.isUndefined(refLine.value)) {
                    var viewport = options.viewport, value = refLine.value, rect = d3.select(this), yScaleToUse = refLine.isY2 ? y2Scale : yScale, isHorizontal_ = isHorizontal(refLine, options.axes), xScaleValue = Math.max(xScale(value), 0), yScaleValue = Math.min(yScaleToUse(value), viewport.height), xPos = shadeRegionProperty.shadeRegion === _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.bb ? 0 : xScaleValue, yPos = shadeRegionProperty.shadeRegion === _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.bb ? yScaleValue : 0, opacity = (0, 
                    _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_12__.TD)(shadeRegionProperty.shadeTransparency), calculatedWidth = shadeRegionProperty.shadeRegion === _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.bb ? xScaleValue : viewport.width - xScaleValue;
                    rect.attr("height", isHorizontal_ ? shadeRegionProperty.shadeRegion === _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.bb ? viewport.height - yScaleValue : yScaleValue : viewport.height), 
                    rect.attr("width", isHorizontal_ ? viewport.width : calculatedWidth), rect.attr("fill", shadeRegionProperty.shadeColor.solid.color), 
                    rect.attr("fill-opacity", opacity), rect.attr(isHorizontal_ ? "y" : "x", isHorizontal_ ? yPos : xPos), 
                    rect.style("pointer-events", "none");
                }
            }), shadeRegions.exit().remove();
        }
        function readReferenceLineDataView(objects, defaultColor, objectName, axis, visualStyle, chartType, metaDataColumn) {
            if (!objects) return [];
            var referenceLines = [], colorHelper = _colorHelper__WEBPACK_IMPORTED_MODULE_13__.v.create(visualStyle);
            for (var id in objects) {
                var referenceLineObject = objects[id], value = void 0;
                if (objectName === xAxisRefLineObjectName && 11 !== chartType) value = (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.S3); else if (value = (0, 
                _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.S3, 0), 
                _.isNull(value)) continue;
                (0, _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_15__.M4)(value) && (value = _VisualsData_services_formattingService__WEBPACK_IMPORTED_MODULE_16__.y3.fromTimeValue(value.epochTimeStamp));
                var decimalPoints = (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.pw, void 0);
                referenceLines.push((0, tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)({
                    type: objectName,
                    selector: {
                        id,
                        metadata: metaDataColumn && metaDataColumn.queryName
                    },
                    displayName: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.ss, void 0),
                    value
                }, (0, _strokeStyle__WEBPACK_IMPORTED_MODULE_9__.AF)(referenceLineObject, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_10__.vi, DefaultReferenceLineStyle, colorHelper.getColorForPropertyNameWithDefaultColor(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.tZ, defaultColor))), {
                    position: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.FK, _types_referenceLinePosition1__WEBPACK_IMPORTED_MODULE_5__.W$),
                    shadeRegionProperties: {
                        shadeRegion: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.rS, _types_referenceLineShadeRegion__WEBPACK_IMPORTED_MODULE_1__.YP),
                        shadeColor: {
                            solid: {
                                color: colorHelper.getColorForPropertyNameWithDefaultColor(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.HO, defaultColor)
                            }
                        },
                        shadeTransparency: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.af, 40)
                    },
                    dataLabelProperties: {
                        show: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.yl, !1),
                        color: {
                            solid: {
                                color: colorHelper.getColorForPropertyNameWithDefaultColor(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.UD, defaultColor)
                            }
                        },
                        text: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.Zs, _types_labelText__WEBPACK_IMPORTED_MODULE_2__.S3),
                        horizontalPosition: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.nR, _types_referenceLinePosition2__WEBPACK_IMPORTED_MODULE_3__.t$),
                        verticalPosition: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.G5, _types_referenceLinePosition3__WEBPACK_IMPORTED_MODULE_4__.aE),
                        decimalPoints: decimalPoints < 0 ? void 0 : decimalPoints,
                        displayUnits: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_14__.N)(referenceLineObject, _referenceLineHelper2__WEBPACK_IMPORTED_MODULE_11__.XI, 0)
                    },
                    axis,
                    isY2: metaDataColumn && metaDataColumn.roles && metaDataColumn.roles.Y2
                }));
            }
            return referenceLines;
        }
        function createLabelDataPoint(options) {
            if (_.isEmpty(options.referenceLines)) return [];
            for (var dataLabels = [], axes = options.axes, viewport = options.viewport, xScale = axes.x.scale, yScale = axes.y1.scale, y2Scale = axes.y2 && axes.y2.scale, _i = 0, referenceLines_1 = getReferenceLinesToRender(options.referenceLines, options.axes, options.viewport, !1); _i < referenceLines_1.length; _i++) {
                var referenceLine = referenceLines_1[_i];
                if (referenceLine.strokeShow && referenceLine.dataLabelProperties.show && !_.isUndefined(referenceLine.value)) {
                    var dataLabelProperties = referenceLine.dataLabelProperties, isHorizontal_ = isHorizontal(referenceLine, axes), formatterForReferenceLineDataLabel = void 0, refValue = referenceLine.value;
                    if (refValue instanceof Date) formatterForReferenceLineDataLabel = (0, _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_17__.E3)(_VisualsData_formatting_valueFormatterConstants__WEBPACK_IMPORTED_MODULE_18__.eF, !0); else {
                        var axisFormatter = isHorizontal_ ? axes.y1.formatter : axes.x.formatter;
                        formatterForReferenceLineDataLabel = axisFormatter;
                        var formatterOptions = null != axisFormatter.options ? (0, _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_19__.ED)(axisFormatter.options) : {};
                        formatterOptions.precision = dataLabelProperties.decimalPoints, formatterOptions.value = dataLabelProperties.displayUnits, 
                        formatterForReferenceLineDataLabel = (0, _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_17__.Ue)(formatterOptions);
                    }
                    var text = "";
                    switch (dataLabelProperties.text) {
                      case _types_labelText__WEBPACK_IMPORTED_MODULE_2__.u2:
                        text = referenceLine.displayName;
                        break;

                      case _types_labelText__WEBPACK_IMPORTED_MODULE_2__.u6:
                        text = (0, _VisualsCommon_Utility_Utility__WEBPACK_IMPORTED_MODULE_20__.W)(options.hostServices.getLocalizedString("NamePattern_Colon"), referenceLine.displayName, (0, 
                        _dataLabelUtil__WEBPACK_IMPORTED_MODULE_21__.Bw)(formatterForReferenceLineDataLabel.format(refValue)));
                        break;

                      default:
                        text = (0, _dataLabelUtil__WEBPACK_IMPORTED_MODULE_21__.Bw)(formatterForReferenceLineDataLabel.format(refValue));
                    }
                    var fontProperties = (0, _dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_22__.bT)({
                        style: options.style,
                        textClassName: "smallDataLabel"
                    }).fontProperties, properties = (0, _fontProperties__WEBPACK_IMPORTED_MODULE_23__.qk)(fontProperties, text), rectWidth = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_24__.b.measureSvgTextWidth(properties), rectHeight = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_24__.b.estimateSvgTextHeight(properties), dataLabelX = void 0, dataLabelY = void 0, yScaleToUse = referenceLine.isY2 ? y2Scale : yScale, x1 = isHorizontal_ ? 0 : xScale(refValue), y1 = isHorizontal_ ? yScaleToUse(refValue) : 0, x2 = isHorizontal_ ? viewport.width : xScale(refValue), y2 = isHorizontal_ ? yScaleToUse(refValue) : viewport.height, validPositions = [ 1 ];
                    isHorizontal_ ? (dataLabelX = dataLabelProperties.horizontalPosition === _types_referenceLinePosition2__WEBPACK_IMPORTED_MODULE_3__.t$ ? x1 + 5 : x2 - rectWidth / 2 - 5, 
                    dataLabelY = y1, validPositions = dataLabelProperties.verticalPosition === _types_referenceLinePosition3__WEBPACK_IMPORTED_MODULE_4__.aE ? [ 1 ] : [ 2 ]) : (dataLabelX = x1, 
                    dataLabelY = dataLabelProperties.verticalPosition === _types_referenceLinePosition3__WEBPACK_IMPORTED_MODULE_4__.aE ? y1 + rectHeight / 2 + 5 : y2 - rectHeight / 2 - 5, 
                    validPositions = dataLabelProperties.horizontalPosition === _types_referenceLinePosition2__WEBPACK_IMPORTED_MODULE_3__.t$ ? [ 4 ] : [ 8 ]);
                    var textWidth = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_24__.b.measureSvgTextWidth(properties), textHeight = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_24__.b.estimateSvgTextHeight(properties, !0);
                    dataLabels.push({
                        isPreferred: !0,
                        text,
                        textSize: {
                            width: textWidth,
                            height: textHeight
                        },
                        outsideFill: dataLabelProperties.color.solid.color,
                        insideFill: null,
                        parentShape: {
                            point: {
                                x: dataLabelX,
                                y: dataLabelY
                            },
                            radius: 0,
                            validPositions
                        },
                        parentType: 0,
                        fontProperties,
                        identity: null,
                        secondRowText: null,
                        key: JSON.stringify({
                            type: referenceLine.type,
                            id: referenceLine.selector.id
                        })
                    });
                }
            }
            return dataLabels;
        }
        function gatherDomainExtents(referenceLines, xs, ys, y2s, categoryAxisType) {
            var validReferenceLines = getValidReferenceLines(referenceLines, categoryAxisType);
            if (!_.isEmpty(validReferenceLines)) for (var _i = 0, validReferenceLines_2 = validReferenceLines; _i < validReferenceLines_2.length; _i++) {
                var referenceLine = validReferenceLines_2[_i];
                if (referenceLine.strokeShow) {
                    var value = referenceLine.value;
                    _.isUndefined(value) || 0 === referenceLine.axis && categoryAxisType && categoryAxisType.dateTime !== value instanceof Date && categoryAxisType.numeric !== _.isNumber(value) || (0 === referenceLine.axis ? xs.push(value) : referenceLine.isY2 ? y2s.push(value) : ys.push(value));
                }
            }
        }
    },
    2529: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $Z: function() {
                return show;
            },
            FK: function() {
                return position;
            },
            G5: function() {
                return dataLabelVerticalPosition;
            },
            HO: function() {
                return shadeColor;
            },
            KZ: function() {
                return transparency;
            },
            S3: function() {
                return value;
            },
            UD: function() {
                return dataLabelColor;
            },
            XI: function() {
                return dataLabelDisplayUnits;
            },
            Zs: function() {
                return dataLabelText;
            },
            af: function() {
                return shadeTransparency;
            },
            nR: function() {
                return dataLabelHorizontalPosition;
            },
            oB: function() {
                return style;
            },
            pw: function() {
                return dataLabelDecimalPoints;
            },
            rS: function() {
                return shadeRegion;
            },
            ss: function() {
                return displayName;
            },
            tZ: function() {
                return lineColor;
            },
            yl: function() {
                return dataLabelShow;
            }
        });
        var show = "show", lineColor = "lineColor", transparency = "transparency", displayName = "displayName", value = "value", style = "style", position = "position", shadeRegion = "shadeRegion", shadeColor = "shadeColor", shadeTransparency = "shadeTransparency", dataLabelShow = "dataLabelShow", dataLabelColor = "dataLabelColor", dataLabelText = "dataLabelText", dataLabelDecimalPoints = "dataLabelDecimalPoints", dataLabelHorizontalPosition = "dataLabelHorizontalPosition", dataLabelVerticalPosition = "dataLabelVerticalPosition", dataLabelDisplayUnits = "dataLabelDisplayUnits";
    },
    10034: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            q: function() {
                return responsiveVisualUtilModuleFactory;
            }
        });
        var _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38308), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458);
        function responsiveVisualUtilModuleFactory() {
            var ResponsiveVisibilityHelper = function() {
                function ResponsiveVisibilityHelper(visualElement, iconClassName) {
                    this.visualElement = visualElement, this.iconClassName = iconClassName, this.isVisualVisible = !0;
                }
                return ResponsiveVisibilityHelper.prototype.updateVisibility = function(options) {
                    options.showIcon ? (this.hideVisual(), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(options.viewport, "viewport"), 
                    this.renderResponsiveIcon(options.viewport)) : (this.removeResponsiveIcon(), this.showVisual());
                }, ResponsiveVisibilityHelper.prototype.renderResponsiveIcon = function(viewport) {
                    this.responsiveIcon || (this.responsiveIcon = (0, _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_1__.hi)().addClass(this.iconClassName).appendTo(this.visualElement)), 
                    this.responsiveIcon.css({
                        width: viewport.width,
                        height: viewport.height
                    });
                }, ResponsiveVisibilityHelper.prototype.removeResponsiveIcon = function() {
                    this.responsiveIcon && (this.responsiveIcon.remove(), this.responsiveIcon = void 0);
                }, ResponsiveVisibilityHelper.prototype.hideVisual = function() {
                    this.isVisualVisible && (this.visualElement.children().hide(), this.isVisualVisible = !1);
                }, ResponsiveVisibilityHelper.prototype.showVisual = function() {
                    this.isVisualVisible || (this.visualElement.children().show(), this.isVisualVisible = !0);
                }, ResponsiveVisibilityHelper;
            }();
            return {
                visibilityHelper: function(visualElement, iconClassName) {
                    return new ResponsiveVisibilityHelper(visualElement, iconClassName);
                }
            };
        }
    },
    5342: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            BN: function() {
                return NonScaledNumericRange;
            },
            C0: function() {
                return DateRange;
            },
            mD: function() {
                return NumericRange;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6444), _dateUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17591), DateRange = function() {
            function DateRange(min, max, start, end) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return max >= min;
                }, "Requires max date to be bigger than min date."), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return (!start || start >= min) && (!end || end <= max);
                }, "Specified date is out of boundaries"), this.rangeMaxValue = (0, _dateUtil__WEBPACK_IMPORTED_MODULE_1__.I)(max, min), 
                this.scale = d3.scaleTime().domain([ min, max ]).range([ 0, this.rangeMaxValue ]), 
                this.value = {
                    min: start || min,
                    max: end || max
                }, this.setValue(this.value);
            }
            return DateRange.prototype.getScaledValue = function() {
                return this.scaledValue;
            }, DateRange.prototype.setValue = function(original) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return null != original;
                }, "Value can't be null"), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return null != original.min;
                }, "Min can't be null"), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return null != original.max;
                }, "Max can't be null"), this.value = original, this.scaledValue = {
                    min: this.scale(original.min),
                    max: this.scale(original.max)
                };
            }, DateRange.prototype.getValue = function() {
                return this.value;
            }, DateRange.prototype.setScaledValue = function(value) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return value.min <= _this.rangeMaxValue && value.min >= 0 && value.max >= 0 && value.max <= _this.rangeMaxValue && value.max >= value.min;
                }, "Value is out of range"), this.scaledValue = value, this.value = {
                    min: (0, _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_2__.Fg)(this.scale.invert(value.min)),
                    max: (0, _VisualsCommon_Utility_dateWithEpochValue__WEBPACK_IMPORTED_MODULE_2__.Fg)(this.scale.invert(value.max))
                };
            }, DateRange;
        }(), NumericRange = function() {
            function NumericRange(min, max, start, end) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return max >= min;
                }, "Requires max to be bigger than or equal to min."), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return (!start || start >= min) && (!end || end <= max);
                }, "Specified value is out of boundaries"), this.rangeMaxValue = max, this.scale = d3.scaleLinear().domain([ min, max ]).range([ min, this.rangeMaxValue ]), 
                this.value = {
                    min: void 0 === start ? min : start,
                    max: void 0 === end ? max : end
                }, this.setValue(this.value);
            }
            return NumericRange.prototype.getScaledValue = function() {
                return this.scaledValue;
            }, NumericRange.prototype.setValue = function(original) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(original, "Value can't be null"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(original.min, "Min can't be null"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(original.max, "Max can't be null"), 
                this.value = original, this.scaledValue = {
                    min: this.scale(original.min),
                    max: this.scale(original.max)
                };
            }, NumericRange.prototype.getValue = function() {
                return this.value;
            }, NumericRange.prototype.setScaledValue = function(value) {
                var _this = this;
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return value.min <= _this.rangeMaxValue && value.min >= 0 && value.max >= 0 && value.max <= _this.rangeMaxValue && value.max >= value.min;
                }, "Value is out of range"), this.scaledValue = value, this.value = {
                    min: this.scale.invert(value.min),
                    max: this.scale.invert(value.max)
                };
            }, NumericRange;
        }(), NonScaledNumericRange = function() {
            function NonScaledNumericRange(min, max, start, end) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return max >= min;
                }, "Requires max to be bigger than or equal to min."), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return (!start || start >= min) && (!end || end <= max);
                }, "Specified value is out of boundaries"), this.value = {
                    min: void 0 === start ? min : start,
                    max: void 0 === end ? max : end
                };
            }
            return NonScaledNumericRange.prototype.getScaledValue = function() {
                return this.value;
            }, NonScaledNumericRange.prototype.setValue = function(original) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(original, "Value can't be null"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(original.min, "Min can't be null"), 
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(original.max, "Max can't be null"), 
                this.value = original;
            }, NonScaledNumericRange.prototype.getValue = function() {
                return this.value;
            }, NonScaledNumericRange.prototype.setScaledValue = function(value) {
                this.setValue(value);
            }, NonScaledNumericRange;
        }();
    },
    95519: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            eR: function() {
                return createSeriesLabelsFormattingContainers;
            },
            lr: function() {
                return getSeriesLabelWidth;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(62458), _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56578), _colorHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(90120), _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56707), _renderUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(60066), _VisualsCommon_styles_visualStyles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48708);
        function getSeriesLabelWidth(labelSettings, totalWidth) {
            if (!(null == labelSettings ? void 0 : labelSettings.show)) return 0;
            var maxWidthPercentage = labelSettings.maxWidthPercentage;
            return null != labelSettings.defaultSeriesWidth && (maxWidthPercentage = Math.min(Math.max(1, 100 * labelSettings.defaultSeriesWidth / totalWidth), 50)), 
            totalWidth * ((maxWidthPercentage || 0) / 100);
        }
        function createSeriesLabelsFormattingContainers(formattingCardOptions, containerBuilder) {
            var seriesOptions = formattingCardOptions.seriesOptions, seriesLabelsProps = formattingCardOptions.seriesLabelsProps;
            _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_6__.fF.assertValue(seriesOptions, "seriesOptions");
            var seriesLabelsSettings = seriesOptions.seriesLabelsSettings;
            seriesLabelsSettings && (seriesLabelsProps.seriesPosition && function(formattingGroupOptions, containerBuilder, groupName) {
                void 0 === groupName && (groupName = "Desktop_FileMenu_Options");
                var seriesLabelsProps = formattingGroupOptions.seriesLabelsProps, omitGroupDisplayNames = formattingGroupOptions.omitGroupDisplayNames, selector = formattingGroupOptions.selector, seriesLabelsSettings = formattingGroupOptions.seriesOptions.seriesLabelsSettings, builder = formattingGroupOptions.cardBuilder;
                containerBuilder && (builder = containerBuilder, containerBuilder.addSimpleSlice("showSeries", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.show), {
                        selector
                    }),
                    value: seriesLabelsSettings.show
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withDisabled(containerBuilder && !selector);
                })), builder.addGroup("options", function(groupBuilder) {
                    omitGroupDisplayNames || groupBuilder.withDisplayName(groupName), containerBuilder || groupBuilder.addSimpleSlice("showSeries", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.show), {
                            selector
                        }),
                        value: seriesLabelsSettings.show
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withDisabled(containerBuilder && !selector);
                    }), groupBuilder.addSimpleSlice("seriesMaximumWidth", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.mu({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.seriesMaximumWidth), {
                            selector
                        }),
                        value: seriesLabelsSettings.defaultSeriesWidth ? null : seriesLabelsSettings.maxWidthPercentage,
                        options: {
                            minValue: {
                                type: 0,
                                value: _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_2__._i
                            },
                            maxValue: {
                                type: 1,
                                value: _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_2__.NL
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withDisabled(!!selector);
                    }), groupBuilder.addSimpleSlice("position", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.uY({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.seriesPosition), {
                            selector
                        }),
                        value: seriesLabelsSettings.position
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withDisabled(!!selector);
                    });
                });
            }(formattingCardOptions, containerBuilder), function(formattingGroupOptions, containerBuilder, groupName) {
                void 0 === groupName && (groupName = "Role_DisplayName_Values");
                var seriesOptions = formattingGroupOptions.seriesOptions, seriesLabelsProps = formattingGroupOptions.seriesLabelsProps, cardBuilder = formattingGroupOptions.cardBuilder, omitGroupDisplayNames = formattingGroupOptions.omitGroupDisplayNames, selector = formattingGroupOptions.selector, seriesLabelsSettings = seriesOptions.seriesLabelsSettings, style = seriesOptions.style ? seriesOptions.style : (0, 
                _VisualsCommon_styles_visualStyles__WEBPACK_IMPORTED_MODULE_3__.Ue)(), builder = cardBuilder;
                containerBuilder && (builder = containerBuilder), builder.addGroup("values", function(groupBuilder) {
                    omitGroupDisplayNames || groupBuilder.withDisplayName(groupName), (seriesLabelsProps.seriesFontFamily || seriesLabelsProps.seriesFontSize) && groupBuilder.addCompositeSlice("font", "Font", function() {
                        return (new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.UN).withFontFamily({
                            descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.seriesFontFamily), {
                                selector
                            }),
                            value: seriesLabelsSettings.fontProperties.family || _renderUtil__WEBPACK_IMPORTED_MODULE_4__.rk
                        }).withFontSizeProperties({
                            descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.textSize), {
                                selector
                            }),
                            value: seriesLabelsSettings.fontProperties.size.pt,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: seriesLabelsSettings.minFontSize
                                },
                                maxValue: {
                                    type: 1,
                                    value: seriesLabelsSettings.maxFontSize
                                }
                            }
                        }).withBold({
                            descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.bold), {
                                selector
                            }),
                            value: seriesLabelsSettings.bold
                        }).withItalic({
                            descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.italic), {
                                selector
                            }),
                            value: seriesLabelsSettings.italic
                        }).withUnderline({
                            descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.underline), {
                                selector
                            }),
                            value: seriesLabelsSettings.underline
                        }).build();
                    }), seriesLabelsProps.seriesColor && groupBuilder.addSimpleSlice("seriesColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.BT({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.seriesColor), {
                            selector
                        }),
                        value: {
                            value: seriesLabelsSettings.seriesColor || _colorHelper__WEBPACK_IMPORTED_MODULE_5__.v.getThemeColor(style, _consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_2__.uQ)
                        }
                    }).build()), groupBuilder.addSimpleSlice("seriesWordWrap", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.seriesWordWrap), {
                            selector
                        }),
                        value: seriesLabelsSettings.wordWrap
                    }).build());
                });
            }(formattingCardOptions, containerBuilder), null != seriesLabelsSettings.enableBackground && seriesLabelsProps.enableBackground && function(formattingGroupOptions, containerBuilder) {
                var hostServices = formattingGroupOptions.hostServices, seriesLabelsProps = formattingGroupOptions.seriesLabelsProps, selector = formattingGroupOptions.selector, seriesLabelsSettings = formattingGroupOptions.seriesOptions.seriesLabelsSettings;
                (containerBuilder || formattingGroupOptions.cardBuilder).addGroup("background", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Background").addTopLevelToggle("enableBackground", function() {
                        return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                            descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.enableBackground), {
                                selector
                            }),
                            value: seriesLabelsSettings.enableBackground
                        }).build();
                    }).addSimpleSlice("backgroundColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.BT({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.backgroundColor), {
                            selector
                        }),
                        value: {
                            value: seriesLabelsSettings.backgroundColor
                        }
                    }).build()).addSimpleSlice("backgroundTransparency", _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.JN.getTransparencySliderBuilder({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, seriesLabelsProps.backgroundTransparency), {
                            selector
                        }),
                        value: Math.round(100 * seriesLabelsSettings.backgroundTransparency),
                        localize: function(key) {
                            return hostServices.getLocalizedString(key);
                        }
                    }).build());
                });
            }(formattingCardOptions, containerBuilder));
        }
    },
    86108: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ad: function() {
                return BubbleSizeRange;
            },
            HN: function() {
                return getBubbleSizeMultiplier;
            },
            Kf: function() {
                return BubbleMultiplierRange;
            },
            yn: function() {
                return invertBubbleSizeMultiplier;
            }
        });
        var BubbleMultiplierRange = {
            min: 1,
            max: 3
        }, BubbleSizeRange = {
            min: -30,
            max: 100
        };
        function getBubbleSizeMultiplier(value) {
            return BubbleMultiplierRange.min + (null != value ? value : 0) / 100 * BubbleMultiplierRange.max;
        }
        function invertBubbleSizeMultiplier(multiplier) {
            return Math.round((multiplier - BubbleMultiplierRange.min) / BubbleMultiplierRange.max * 100);
        }
    },
    45875: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $O: function() {
                return SlicerResponsiveBreakpoints;
            },
            Cd: function() {
                return resolveMaxFontSizePtForViewport;
            },
            Ck: function() {
                return SlicerHelper;
            }
        });
        var _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64329), SlicerResponsiveBreakpoints = {
            rangeSlicer: {
                iconBreakpoints: [ {
                    height: 1 / 0,
                    width: 75
                }, {
                    height: 28,
                    width: 1 / 0
                }, {
                    height: 63,
                    width: 162
                } ],
                hideHeaderHeightNoSlider: 48,
                hideHeaderHeightSlider: 88
            },
            horizontalSlicer: {
                iconBreakpoints: [ {
                    height: 1 / 0,
                    width: 75
                }, {
                    height: 15,
                    width: 1 / 0
                } ],
                hideHeaderHeight: 48,
                fontSize: [ {
                    breakpoint: 360,
                    applyWidth: !0,
                    applyHeight: !1,
                    maxFontSizePt: 9
                }, {
                    breakpoint: 540,
                    applyWidth: !0,
                    applyHeight: !1,
                    maxFontSizePt: 16
                } ]
            },
            slicerHeader: {
                fontSize: [ {
                    breakpoint: 140,
                    applyWidth: !0,
                    applyHeight: !0,
                    maxFontSizePt: 9
                }, {
                    breakpoint: 220,
                    applyWidth: !0,
                    applyHeight: !0,
                    maxFontSizePt: 16
                }, {
                    breakpoint: 320,
                    applyWidth: !0,
                    applyHeight: !1,
                    maxFontSizePt: 24
                }, {
                    breakpoint: 460,
                    applyWidth: !0,
                    applyHeight: !1,
                    maxFontSizePt: 32
                } ]
            }
        }, SlicerHelper = function() {
            function SlicerHelper() {}
            return SlicerHelper.fixWidgetPosition = function(widget, boundElement, padding, scaleWidget, position) {
                if (void 0 === padding && (padding = null), void 0 === scaleWidget && (scaleWidget = !1), 
                void 0 === position && (position = null), widget && boundElement) {
                    var top = "", right = "", bottom = "", left = "", transform = "", elementScale = SlicerHelper.getScale(boundElement), widgetElement = boundElement.get(0), parent = widget.offsetParent(), scale = SlicerHelper.getScale(parent);
                    scaleWidget && widget.css({
                        transform: "scale(".concat(elementScale, ")")
                    });
                    var rect = widgetElement.getBoundingClientRect();
                    if (null == position && (position = SlicerHelper.getWidgetPosition(rect)), 1 & ~position ? (bottom = (window.innerHeight - rect.top) / scale, 
                    top = "auto", transform = "bottom") : (top = (rect.top + rect.height) / scale, transform = "top"), 
                    2 & ~position) {
                        var elementRight = window.innerWidth - rect.left - rect.width;
                        left = "auto", SlicerHelper.isWidgetPositionExceedsBoundaries(widget, elementScale, right = elementRight / scale) && (right = window.innerWidth - widget.innerWidth() * elementScale), 
                        transform = "right ".concat(transform);
                    } else SlicerHelper.isWidgetPositionExceedsBoundaries(widget, elementScale, left = rect.left / scale) && (left = window.innerWidth - widget.innerWidth() * elementScale), 
                    transform = "left ".concat(transform);
                    var css = {
                        left,
                        top,
                        right,
                        bottom,
                        "transform-origin": transform
                    };
                    padding && ("auto" !== css.top ? css.top += padding.top * elementScale : css.bottom += padding.top * elementScale, 
                    "auto" !== css.left ? css.left += padding.left * elementScale : css.right += padding.left * elementScale), 
                    widget.css(css);
                }
            }, SlicerHelper.getScale = function(element) {
                if (!element) return 1;
                var width = element.outerWidth();
                return 0 === width ? 1 : element.get(0).getBoundingClientRect().width / width;
            }, SlicerHelper.isWidgetPositionExceedsBoundaries = function(widget, elementScale, position) {
                return widget.innerWidth() * elementScale + position > window.innerWidth;
            }, SlicerHelper.getWidgetPosition = function(elementRect) {
                var position = 3, availableHeight = window.innerHeight, availableWidth = window.innerWidth;
                return availableHeight - elementRect.top < availableHeight / 2 && (position &= -2, 
                position |= 0), availableWidth - elementRect.left < availableWidth / 2 && (position &= -3, 
                position |= 4), position;
            }, SlicerHelper;
        }();
        function resolveMaxFontSizePtForViewport(viewport, fontSizeBreakpoints) {
            for (var maxFontSizePt = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_0__.PR, _i = 0, fontSizeBreakpoints_1 = fontSizeBreakpoints; _i < fontSizeBreakpoints_1.length; _i++) {
                var fontSizeBreakpoint = fontSizeBreakpoints_1[_i];
                if (viewport.width < fontSizeBreakpoint.breakpoint && fontSizeBreakpoint.applyWidth || viewport.height < fontSizeBreakpoint.breakpoint && fontSizeBreakpoint.applyHeight) {
                    maxFontSizePt = fontSizeBreakpoint.maxFontSizePt;
                    break;
                }
            }
            return maxFontSizePt;
        }
    },
    48645: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            y: function() {
                return SubSelectionCellOutlineRenderer;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), SubSelectionCellOutlineRenderer = function() {
            function SubSelectionCellOutlineRenderer(renderer, tolerance) {
                void 0 === tolerance && (tolerance = 2), this.renderer = renderer, this.tolerance = tolerance;
            }
            return SubSelectionCellOutlineRenderer.prototype.updateRegionOutlines = function(regions) {
                for (var updatedRegions = [], _i = 0, regions_1 = regions; _i < regions_1.length; _i++) {
                    var region = regions_1[_i], result = this.traverse(region.outline);
                    updatedRegions.push((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, region), {
                        outline: result
                    }));
                }
                this.renderer.updateRegionOutlines(updatedRegions);
            }, SubSelectionCellOutlineRenderer.prototype.traverse = function(outline) {
                var _this = this;
                if (0 === outline.type) {
                    var outlines = outline.outlines.map(function(outline) {
                        return _this.traverse(outline);
                    }), combinedOutlines = this.mergeOverlappingOutlines(outlines);
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, outline), {
                        type: 0,
                        outlines: combinedOutlines
                    });
                }
                return outline;
            }, SubSelectionCellOutlineRenderer.prototype.isOverlapping = function(outline1, outline2) {
                var x1, x2, width1, y1, y2, height1;
                return outline1.x <= outline2.x ? (x1 = outline1.x, x2 = outline2.x, width1 = outline1.width) : (x1 = outline2.x, 
                x2 = outline1.x, width1 = outline2.width), outline1.y <= outline2.y ? (y1 = outline1.y, 
                y2 = outline2.y, height1 = outline1.height) : (y1 = outline2.y, y2 = outline1.y, 
                height1 = outline2.height), y1 + height1 + this.tolerance >= y2 - this.tolerance && x1 + width1 + this.tolerance >= x2 - this.tolerance;
            }, SubSelectionCellOutlineRenderer.prototype.mergeOverlappingOutlines = function(outlines) {
                for (var i = 0; i < outlines.length; i++) for (var j = i + 1; j < outlines.length; j++) {
                    var primary = outlines[i], secondary = outlines[j];
                    1 === primary.type && 1 === secondary.type && this.isOverlapping(primary, secondary) && (outlines[i] = this.merge(primary, secondary), 
                    outlines.splice(j, 1), j--);
                }
                return outlines;
            }, SubSelectionCellOutlineRenderer.prototype.merge = function(outline1, outline2) {
                var x1 = Math.min(outline1.x, outline2.x), y1 = Math.min(outline1.y, outline2.y);
                return {
                    type: 1,
                    x: x1,
                    y: y1,
                    width: Math.max(outline1.x + outline1.width, outline2.x + outline2.width) - x1,
                    height: Math.max(outline1.y + outline1.height, outline2.y + outline2.height) - y1
                };
            }, SubSelectionCellOutlineRenderer;
        }();
    },
    86900: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            D: function() {
                return SubSelectionRegionOutlineRenderer;
            }
        });
        var CssConstants = __webpack_require__(79154), debug = __webpack_require__(62458), RendererGroupClipPath = function() {
            function RendererGroupClipPath(clipPaths) {
                this.clipPaths = clipPaths;
            }
            return RendererGroupClipPath.createRendererGroupClipPath = function(clipPaths) {
                return new RendererGroupClipPath(clipPaths);
            }, RendererGroupClipPath.prototype.createPathString = function(bounds, offset) {
                return void 0 === offset && (offset = 0), this.clipPaths.map(function(clipPath) {
                    return clipPath.createPathString(bounds, offset);
                }).join(" ");
            }, RendererGroupClipPath;
        }(), shapes7 = __webpack_require__(92379), RendererPolygonClipPath = function() {
            function RendererPolygonClipPath(points) {
                this.points = points;
            }
            return RendererPolygonClipPath.createRendererPolygonClipPath = function(clipPath, offsetX, offsetY) {
                return void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0), 
                new RendererPolygonClipPath(clipPath.points.map(function(point) {
                    return {
                        x: point.x - offsetX,
                        y: point.y - offsetY
                    };
                }));
            }, RendererPolygonClipPath.prototype.createPathString = function(bounds, resize) {
                void 0 === resize && (resize = 0);
                var points = this.points.map(function(point) {
                    return {
                        x: point.x - bounds.x,
                        y: point.y - bounds.y
                    };
                });
                if (0 !== resize) {
                    var polygon = shapes7.m.fromPolygonPoints(points);
                    points = shapes7.m.resize(polygon, resize).polygonPoints;
                }
                for (var path = d3.path(), index = 0; index < points.length; index++) {
                    var point = points[index];
                    0 === index ? path.moveTo(point.x, point.y) : path.lineTo(point.x, point.y);
                }
                return path.closePath(), path.toString();
            }, RendererPolygonClipPath;
        }(), RendererRectangleClipPath = function() {
            function RendererRectangleClipPath(bounds) {
                this.bounds = bounds;
            }
            return RendererRectangleClipPath.createRendererRectangleClipPath = function(clipPath, offsetX, offsetY) {
                return void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0), 
                new RendererRectangleClipPath({
                    x: clipPath.x - offsetX,
                    y: clipPath.y - offsetY,
                    width: clipPath.width,
                    height: clipPath.height
                });
            }, RendererRectangleClipPath.prototype.createPathString = function(bounds, offset) {
                void 0 === offset && (offset = 0);
                var path = d3.path();
                return path.rect(this.bounds.x - bounds.x, this.bounds.y - bounds.y, this.bounds.width + 2 * offset, this.bounds.height + 2 * offset), 
                path.toString();
            }, RendererRectangleClipPath;
        }(), tslib_es6 = __webpack_require__(81337), RendererOutline = function() {
            function RendererOutline(id, qualifiedName, bounds, points, clipPath, extendedProperties) {
                void 0 === extendedProperties && (extendedProperties = void 0), this.id = id, this.qualifiedName = qualifiedName, 
                this.bounds = bounds, this.points = points, this.clipPath = clipPath, this.extendedProperties = extendedProperties;
            }
            return RendererOutline.prototype.cleanup = function(shape) {
                return shape;
            }, RendererOutline.prototype.renderHandles = function(shape, radius) {
                this.applyClipPath(shape, radius);
                var handles = shape.selectAll(RendererOutline.OutlineHandleSelector.selector).data(this.points);
                return handles.enter().append("circle").classed(RendererOutline.OutlineHandleSelector.class, !0).merge(handles).attr("cx", function(d) {
                    return d.x;
                }).attr("cy", function(d) {
                    return d.y;
                }).attr("r", radius), handles.exit().remove(), shape;
            }, RendererOutline.prototype.tag = function() {
                return document.createElementNS("http://www.w3.org/2000/svg", this.qualifiedName);
            }, RendererOutline.prototype.shouldRenderHandles = function() {
                var _a;
                return null != (null === (_a = this.extendedProperties) || void 0 === _a ? void 0 : _a.showHandles) ? this.extendedProperties.showHandles : 2 === this.visibility;
            }, RendererOutline.prototype.applyClipPath = function(shape, offset) {
                if (void 0 === offset && (offset = 0), this.clipPath) {
                    var path = this.clipPath.createPathString(this.bounds, offset);
                    shape.attr("clip-path", "path('".concat(path, "')"));
                }
                return shape;
            }, RendererOutline.OutlineHandleSelector = (0, CssConstants.CH)("outline-handle"), 
            RendererOutline;
        }();
        function getPoint(center, angleRad, radius) {
            return {
                x: center.x + radius * Math.sin(angleRad),
                y: center.y - radius * Math.cos(angleRad)
            };
        }
        var RendererArcOutline = function(_super) {
            function RendererArcOutline(id, visibility, outline, clipPath, extendedProperties) {
                var _this = this, originalOutline = outline, newOutline = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, originalOutline), {
                    innerRadius: Math.max(0, originalOutline.innerRadius - 4),
                    outerRadius: originalOutline.outerRadius + 4
                }), center = newOutline.center, innerRadius = newOutline.innerRadius, outerRadius = newOutline.outerRadius, x = center.x - outerRadius, y = center.y - outerRadius, diameter = 2 * outerRadius, width = diameter, height = diameter, adjustedStartAngle = newOutline.startAngle + 0, adjustedEndAngle = newOutline.endAngle + 0, handles = [ getPoint(center, adjustedStartAngle, innerRadius), getPoint(center, adjustedStartAngle, outerRadius), getPoint(center, adjustedEndAngle, outerRadius) ];
                return innerRadius && handles.push(getPoint(center, adjustedEndAngle, innerRadius)), 
                (_this = _super.call(this, id, "path", {
                    x,
                    y,
                    width,
                    height
                }, handles, clipPath, extendedProperties) || this).visibility = visibility, _this.outline = newOutline, 
                _this;
            }
            return (0, tslib_es6.__extends)(RendererArcOutline, _super), RendererArcOutline.create = function(id, visibility, outline, clipPath, offsetX, offsetY, extendedProperties) {
                var _a;
                void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0), void 0 === extendedProperties && (extendedProperties = void 0);
                var oldX = (_a = outline.center).x, oldY = _a.y;
                return new RendererArcOutline(id, visibility, outline = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, outline), {
                    center: {
                        x: oldX - offsetX,
                        y: oldY - offsetY
                    }
                }), clipPath, extendedProperties);
            }, RendererArcOutline.prototype.initialize = function(shape) {
                return shape.classed(RendererArcOutline.OutlineSelector.class, !0), shape;
            }, RendererArcOutline.prototype.update = function(shape) {
                var _a, innerRadius = (_a = this.outline).innerRadius, outerRadius = _a.outerRadius, center = _a.center, arcGenerator = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);
                return this.applyClipPath(shape).style("transform", "translate(".concat(center.x, "px, ").concat(center.y, "px)")).attr("d", arcGenerator(this.outline)).style("pointer-events", "none").style("stroke", function(d) {
                    var _a;
                    return null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.color;
                }).style("stroke-width", function(d) {
                    var _a;
                    return (null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.thickness) >= 1 ? d.extendedProperties.thickness : null;
                });
            }, RendererArcOutline.OutlineSelector = (0, CssConstants.CH)("outline-arc"), RendererArcOutline;
        }(RendererOutline), RendererGroupOutline = function(_super) {
            function RendererGroupOutline(id, visibility, outlines, bounds, clipPath, extendedProperties) {
                var _this = _super.call(this, id, "g", bounds, [], clipPath, extendedProperties) || this;
                return _this.visibility = visibility, _this.outlines = outlines, _this;
            }
            return (0, tslib_es6.__extends)(RendererGroupOutline, _super), RendererGroupOutline.createRendererGroupOutline = function(id, visibility, outlines, clipPath, extendedProperties) {
                void 0 === extendedProperties && (extendedProperties = void 0);
                var minX = Math.min.apply(Math, outlines.map(function(outline) {
                    return outline.bounds.x;
                })), minY = Math.min.apply(Math, outlines.map(function(outline) {
                    return outline.bounds.y;
                })), maxX = Math.max.apply(Math, outlines.map(function(outline) {
                    return outline.bounds.x + outline.bounds.width;
                })), maxY = Math.max.apply(Math, outlines.map(function(outline) {
                    return outline.bounds.y + outline.bounds.height;
                }));
                return new RendererGroupOutline(id, visibility, outlines, {
                    x: minX,
                    y: minY,
                    width: maxX - minX,
                    height: maxY - minY
                }, clipPath, extendedProperties);
            }, RendererGroupOutline.prototype.shouldRenderHandles = function() {
                var _this = this;
                return this.outlines.some(function(renderer) {
                    var _a, _b, rendererWithInherited = _.cloneDeep(renderer);
                    return rendererWithInherited.extendedProperties = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, null !== (_a = _this.extendedProperties) && void 0 !== _a ? _a : {}), null !== (_b = renderer.extendedProperties) && void 0 !== _b ? _b : {}), 
                    rendererWithInherited.shouldRenderHandles();
                });
            }, RendererGroupOutline.prototype.renderHandles = function(shape, radius) {
                this.applyClipPath(shape, radius);
                for (var visibleHandleOutlines = [], _i = 0, _a = this.outlines; _i < _a.length; _i++) {
                    var renderer = _a[_i];
                    renderer.shouldRenderHandles() && visibleHandleOutlines.push(renderer);
                }
                var shapeHandles = shape.selectAll(RendererGroupOutline.OutlineHandlesGroupItem.selector).filter(function() {
                    return this.parentNode === shape.node();
                }).data(visibleHandleOutlines, function(d) {
                    return "".concat(d.id);
                }), shapeHandlesUpdate = shapeHandles.enter().append("g").classed(RendererGroupOutline.OutlineHandlesGroupItem.class, !0).merge(shapeHandles);
                return shapeHandlesUpdate.each(function(renderer) {
                    renderer.renderHandles(d3.select(this), radius);
                }), shapeHandles.exit().remove(), shapeHandlesUpdate;
            }, RendererGroupOutline.prototype.initialize = function(shape) {
                return this.renderGroupOutline(shape);
            }, RendererGroupOutline.prototype.update = function(shape) {
                return this.renderGroupOutline(shape);
            }, RendererGroupOutline.prototype.renderGroupOutline = function(shape) {
                this.applyClipPath(shape);
                var shapes = shape.selectAll(RendererGroupOutline.OutlineGroupItem.selector).filter(function() {
                    return this.parentNode === shape.node();
                }).data(this.outlines, function(d) {
                    return "".concat(d.id);
                }), shapesUpdate = shapes.enter().append(function(d) {
                    return d.tag();
                }).each(function(renderer) {
                    renderer.initialize(d3.select(this));
                }).classed(RendererGroupOutline.OutlineGroupItem.class, !0).style("stroke", function(d) {
                    var _a;
                    return null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.color;
                }).style("stroke-width", function(d) {
                    var _a;
                    return (null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.thickness) >= 1 ? d.extendedProperties.thickness : null;
                }).merge(shapes);
                return shapesUpdate.each(function(renderer) {
                    renderer.update(d3.select(this));
                }), shapes.exit().each(function(renderer) {
                    renderer.cleanup(d3.select(this)), shape.remove();
                }), shapesUpdate;
            }, RendererGroupOutline.OutlineGroupItem = (0, CssConstants.CH)("outline-group-item"), 
            RendererGroupOutline.OutlineHandlesGroupItem = (0, CssConstants.CH)("outline-handles-group-item"), 
            RendererGroupOutline;
        }(RendererOutline), RendererLineOutline = function(_super) {
            function RendererLineOutline(id, visibility, points, bounds, clipPath, extendedProperties) {
                var _this = _super.call(this, id, "line", bounds, points, clipPath, extendedProperties) || this;
                return _this.visibility = visibility, _this;
            }
            return (0, tslib_es6.__extends)(RendererLineOutline, _super), RendererLineOutline.createRendererLineOutline = function(id, visibility, points, clipPath, offsetX, offsetY, extendedProperties) {
                void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0), void 0 === extendedProperties && (extendedProperties = void 0);
                var offsetPoints = points.map(function(point) {
                    return {
                        x: point.x - offsetX,
                        y: point.y - offsetY
                    };
                }), boundingRect = shapes7.m.fromPolygonPoints(offsetPoints).absoluteBoundingRect();
                return new RendererLineOutline(id, visibility, offsetPoints, {
                    x: boundingRect.left,
                    y: boundingRect.top,
                    width: boundingRect.width,
                    height: boundingRect.height
                }, clipPath, extendedProperties);
            }, RendererLineOutline.prototype.shouldRenderHandles = function() {
                return !0;
            }, RendererLineOutline.prototype.initialize = function(shape) {
                return shape.classed(RendererLineOutline.OutlineSelector.class, !0);
            }, RendererLineOutline.prototype.update = function(shape) {
                return this.applyClipPath(shape).style("stroke", function(d) {
                    var _a;
                    return null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.color;
                }).style("stroke-width", function(d) {
                    var _a;
                    return (null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.thickness) >= 1 ? d.extendedProperties.thickness : null;
                });
            }, RendererLineOutline.OutlineSelector = (0, CssConstants.CH)("outline-line"), RendererLineOutline;
        }(RendererOutline), RendererPolygonOutline = function(_super) {
            function RendererPolygonOutline(id, visibility, points, bounds, clipPath, extendedProperties) {
                var _this = _super.call(this, id, "polygon", bounds, points, clipPath, extendedProperties) || this;
                return _this.visibility = visibility, _this;
            }
            return (0, tslib_es6.__extends)(RendererPolygonOutline, _super), RendererPolygonOutline.createRendererPolygonOutline = function(id, visibility, points, clipPath, offsetX, offsetY, extendedProperties) {
                void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0), void 0 === extendedProperties && (extendedProperties = void 0);
                var offsetPoints = points.map(function(point) {
                    return {
                        x: point.x - offsetX,
                        y: point.y - offsetY
                    };
                }), boundingRect = shapes7.m.fromPolygonPoints(offsetPoints).absoluteBoundingRect();
                return new RendererPolygonOutline(id, visibility, offsetPoints, {
                    x: boundingRect.left,
                    y: boundingRect.top,
                    width: boundingRect.width,
                    height: boundingRect.height
                }, clipPath, extendedProperties);
            }, RendererPolygonOutline.prototype.initialize = function(shape) {
                return shape.classed(RendererPolygonOutline.OutlineSelector.class, !0);
            }, RendererPolygonOutline.prototype.update = function(shape) {
                return this.applyClipPath(shape).attr("points", this.points.map(function(point) {
                    return [ point.x, point.y ].join(",");
                }).join(" ")).style("stroke", function(d) {
                    var _a;
                    return null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.color;
                }).style("stroke-width", function(d) {
                    var _a;
                    return (null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.thickness) >= 1 ? d.extendedProperties.thickness : null;
                });
            }, RendererPolygonOutline.OutlineSelector = (0, CssConstants.CH)("outline-polygon"), 
            RendererPolygonOutline;
        }(RendererOutline), RendererRectangleOutline = function(_super) {
            function RendererRectangleOutline(id, visibility, subSelection, clipPath, directEditCallbacks, extendedProperties) {
                var _this = _super.call(this, id, "rect", subSelection, [ {
                    x: subSelection.x,
                    y: subSelection.y
                }, {
                    x: subSelection.x + subSelection.width,
                    y: subSelection.y
                }, {
                    x: subSelection.x + subSelection.width,
                    y: subSelection.y + subSelection.height
                }, {
                    x: subSelection.x,
                    y: subSelection.y + subSelection.height
                } ], clipPath, extendedProperties) || this;
                return _this.visibility = visibility, _this.subSelection = subSelection, _this.directEditCallbacks = directEditCallbacks, 
                _this.eventListeners = {}, _this.directEditCallbacks && subSelection.directEdit && (_this.eventListeners = _this.populateEventListeners()), 
                _this;
            }
            return (0, tslib_es6.__extends)(RendererRectangleOutline, _super), RendererRectangleOutline.createRendererRectangleOutline = function(id, visibility, subSelection, clipPath, directEditCallbacks, offsetX, offsetY, extendedProperties) {
                return void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0), 
                void 0 === extendedProperties && (extendedProperties = void 0), subSelection.x = subSelection.x - offsetX, 
                subSelection.y = subSelection.y - offsetY, new RendererRectangleOutline(id, visibility, subSelection, clipPath, directEditCallbacks, extendedProperties);
            }, RendererRectangleOutline.prototype.initialize = function(shape) {
                return this.attachEventHandlers(shape), shape.classed(RendererRectangleOutline.OutlineSelector.class, !0), 
                shape;
            }, RendererRectangleOutline.prototype.update = function(shape) {
                return this.applyClipPath(shape).attr("x", this.subSelection.x).attr("y", this.subSelection.y).attr("width", this.subSelection.width).attr("height", this.subSelection.height).style("pointer-events", this.isInteractive() ? "fill" : "none").style("cursor", this.isInteractive() ? "text" : void 0).style("stroke", function(d) {
                    var _a;
                    return null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.color;
                }).style("stroke-width", function(d) {
                    var _a;
                    return (null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.thickness) >= 1 ? d.extendedProperties.thickness : null;
                });
            }, RendererRectangleOutline.prototype.isInteractive = function() {
                return this.directEditCallbacks && this.subSelection.directEdit && 2 === this.visibility;
            }, RendererRectangleOutline.prototype.populateEventListeners = function() {
                var outline = this;
                return {
                    "pointerdown.directEditEvent": function(event) {
                        0 === event.button && (event.stopImmediatePropagation(), event.preventDefault(), 
                        outline.directEditCallbacks.startEdit(outline.subSelection));
                    },
                    "contextmenu.directEditEvent": function(event) {
                        var pointerEvent = event;
                        2 === pointerEvent.button && (event.stopImmediatePropagation(), event.preventDefault(), 
                        outline.directEditCallbacks.showUI(outline.subSelection, pointerEvent));
                    }
                };
            }, RendererRectangleOutline.prototype.attachEventHandlers = function(shape) {
                for (var eventListeners = this.eventListeners, _loop_1 = function(eventName) {
                    var eventListener = eventListeners[eventName];
                    shape.on(eventName, function() {
                        eventListener(d3.event, this);
                    });
                }, _i = 0, eventListenerNames_1 = Object.keys(eventListeners); _i < eventListenerNames_1.length; _i++) _loop_1(eventListenerNames_1[_i]);
            }, RendererRectangleOutline.OutlineSelector = (0, CssConstants.CH)("outline-rect"), 
            RendererRectangleOutline;
        }(RendererOutline), SubSelectionRegionOutlineRenderer = function() {
            function SubSelectionRegionOutlineRenderer(outlineHostElement, directEditCallbacks) {
                this.directEditCallbacks = directEditCallbacks, this.outlineHost = d3.select(outlineHostElement), 
                this.visibleOutlines = [];
            }
            return SubSelectionRegionOutlineRenderer.create = function(outlineHostElement, directEditCallbacks) {
                return new SubSelectionRegionOutlineRenderer(outlineHostElement, directEditCallbacks);
            }, SubSelectionRegionOutlineRenderer.createWithDefaultHost = function() {
                var host = d3.select("body").append("div").style("position", "absolute").style("top", 0).style("left", 0).style("width", "100%").style("height", "100%").style("z-index", 1).style("pointer-events", "none").node();
                return SubSelectionRegionOutlineRenderer.create(host);
            }, SubSelectionRegionOutlineRenderer.prototype.updateRegionOutlines = function(regionOutlines, offset) {
                this.clearRenderOutlineDelay();
                var renderOutlines = this.convertRegionOutlinesToOutlines(regionOutlines, offset);
                this.renderOutlines(renderOutlines);
            }, SubSelectionRegionOutlineRenderer.prototype.convertRegionOutlinesToOutlines = function(regionOutlines, offset) {
                var _this = this, clonedRegionOutlines = _.cloneDeep(regionOutlines);
                return _.flatMap(clonedRegionOutlines, function(regionOutline) {
                    return _this.convertSubSelectionToOutline(regionOutline.id, regionOutline.visibility, regionOutline.outline, null == offset ? void 0 : offset.x, null == offset ? void 0 : offset.y);
                });
            }, SubSelectionRegionOutlineRenderer.prototype.convertSubSelectionToOutline = function(id, visibility, subselection, offsetX, offsetY, index) {
                var _this = this;
                void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0);
                var indexedId = _.isUndefined(index) ? id : "".concat(id, "-").concat(index), clipPath = subselection.clipPath ? this.convertClipPathToRendererClipPath(subselection.clipPath, offsetX, offsetY) : void 0;
                switch (subselection.type) {
                  case 0:
                    var outlines = subselection.outlines.map(function(outline, i) {
                        return _this.convertSubSelectionToOutline(indexedId, visibility, outline, offsetX, offsetY, i);
                    });
                    return RendererGroupOutline.createRendererGroupOutline(indexedId, visibility, outlines, clipPath, subselection.extendedProperties);

                  case 2:
                    return RendererLineOutline.createRendererLineOutline(indexedId, visibility, subselection.points, clipPath, offsetX, offsetY, subselection.extendedProperties);

                  case 3:
                    return RendererPolygonOutline.createRendererPolygonOutline(indexedId, visibility, subselection.points, clipPath, offsetX, offsetY, subselection.extendedProperties);

                  case 1:
                    return RendererRectangleOutline.createRendererRectangleOutline(indexedId, visibility, subselection, clipPath, this.directEditCallbacks, offsetX, offsetY, subselection.extendedProperties);

                  case 4:
                    return RendererArcOutline.create(indexedId, visibility, subselection, clipPath, offsetX, offsetY, subselection.extendedProperties);

                  default:
                    debug.fF.assertNever(subselection);
                }
            }, SubSelectionRegionOutlineRenderer.prototype.convertClipPathToRendererClipPath = function(clipPath, offsetX, offsetY) {
                var _this = this;
                switch (void 0 === offsetX && (offsetX = 0), void 0 === offsetY && (offsetY = 0), 
                clipPath.type) {
                  case 0:
                    var clipPaths = clipPath.clipPaths.map(function(path) {
                        return _this.convertClipPathToRendererClipPath(path, offsetX, offsetY);
                    });
                    return RendererGroupClipPath.createRendererGroupClipPath(clipPaths);

                  case 3:
                    return RendererPolygonClipPath.createRendererPolygonClipPath(clipPath, offsetX, offsetY);

                  case 1:
                    return RendererRectangleClipPath.createRendererRectangleClipPath(clipPath, offsetX, offsetY);

                  default:
                    debug.fF.assertNever(clipPath);
                }
            }, SubSelectionRegionOutlineRenderer.prototype.renderOutlines = function(outlines) {
                var _this = this, activeOutlines = [], hoverOutlines = [], visibleOutlines = [];
                if (outlines) for (var _i = 0, outlines_1 = outlines; _i < outlines_1.length; _i++) {
                    var outline = outlines_1[_i];
                    2 === outline.visibility ? (activeOutlines.push(outline), visibleOutlines.push(outline)) : 1 === outline.visibility && (hoverOutlines.push(outline), 
                    visibleOutlines.push(outline));
                }
                this.visibleOutlines = _.intersectionBy(visibleOutlines, this.visibleOutlines, "id"), 
                this.visibleOutlines = _.unionBy(activeOutlines, this.visibleOutlines, "id"), this.renderVisibleOutlines(this.visibleOutlines), 
                this.visibleOutlines = _.unionBy(hoverOutlines, this.visibleOutlines, "id"), this.setRenderOutlineDelay(function() {
                    _this.renderVisibleOutlines(_this.visibleOutlines);
                });
            }, SubSelectionRegionOutlineRenderer.prototype.renderVisibleOutlines = function(outlines) {
                var shapesContainer = this.renderSVGContainer(SubSelectionRegionOutlineRenderer.OutlineShapesSVGSelector);
                SubSelectionRegionOutlineRenderer.renderOutlineShapes(shapesContainer, outlines);
                var handlesContainer = this.renderSVGContainer(SubSelectionRegionOutlineRenderer.OutlineHandlesSVGSelector);
                SubSelectionRegionOutlineRenderer.renderOutlineHandles(handlesContainer, outlines);
            }, SubSelectionRegionOutlineRenderer.prototype.renderSVGContainer = function(classAndSelector) {
                return this.outlineHost.selectAll(classAndSelector.selector).data([ null ]).join("svg").classed(classAndSelector.class, !0);
            }, SubSelectionRegionOutlineRenderer.renderOutlineShapes = function(container, outlines) {
                var shapes = container.selectAll(SubSelectionRegionOutlineRenderer.OutlineShapeSelector.selector).data(outlines, function(d) {
                    return "".concat(d.id);
                });
                shapes.enter().append(function(d) {
                    return d.tag();
                }).each(function(renderer) {
                    renderer.initialize(d3.select(this));
                }).classed(SubSelectionRegionOutlineRenderer.OutlineShapeSelector.class, !0).merge(shapes).attr("data-sub-selection-outline-id", function(d) {
                    return "".concat(d.id);
                }).classed(SubSelectionRegionOutlineRenderer.OutlineActiveSelector.class, function(d) {
                    return 2 === d.visibility;
                }).classed(SubSelectionRegionOutlineRenderer.OutlineHoverSelector.class, function(d) {
                    return 1 === d.visibility;
                }).style("stroke", function(d) {
                    var _a;
                    return null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.color;
                }).style("stroke-width", function(d) {
                    var _a;
                    return (null === (_a = d.extendedProperties) || void 0 === _a ? void 0 : _a.thickness) >= 1 ? d.extendedProperties.thickness : null;
                }).each(function(renderer) {
                    renderer.update(d3.select(this));
                }), shapes.exit().each(function(renderer) {
                    var shape = d3.select(this);
                    renderer.cleanup(shape), shape.remove();
                });
            }, SubSelectionRegionOutlineRenderer.renderOutlineHandles = function(container, outlines) {
                for (var visibleHandleOutlines = [], _i = 0, outlines_2 = outlines; _i < outlines_2.length; _i++) {
                    var renderer = outlines_2[_i];
                    renderer.shouldRenderHandles() && visibleHandleOutlines.push(renderer);
                }
                var shapeHandles = container.selectAll(SubSelectionRegionOutlineRenderer.OutlineShapeHandlesSelector.selector).data(visibleHandleOutlines, function(d) {
                    return "".concat(d.id);
                });
                shapeHandles.enter().append("g").classed(SubSelectionRegionOutlineRenderer.OutlineShapeHandlesSelector.class, !0).merge(shapeHandles).each(function(renderer) {
                    renderer.renderHandles(d3.select(this), 4);
                }), shapeHandles.exit().remove();
            }, SubSelectionRegionOutlineRenderer.prototype.setRenderOutlineDelay = function(renderFunction) {
                this.clearRenderOutlineDelay(), this.outlineDelayTimer = setTimeout(renderFunction, 100);
            }, SubSelectionRegionOutlineRenderer.prototype.clearRenderOutlineDelay = function() {
                this.outlineDelayTimer && (clearTimeout(this.outlineDelayTimer), this.outlineDelayTimer = void 0);
            }, SubSelectionRegionOutlineRenderer.OutlineShapesSVGSelector = (0, CssConstants.CH)("outline-svg-shapes"), 
            SubSelectionRegionOutlineRenderer.OutlineHandlesSVGSelector = (0, CssConstants.CH)("outline-svg-handles"), 
            SubSelectionRegionOutlineRenderer.OutlineShapeSelector = (0, CssConstants.CH)("outline-shape"), 
            SubSelectionRegionOutlineRenderer.OutlineShapeHandlesSelector = (0, CssConstants.CH)("outline-shape-handles"), 
            SubSelectionRegionOutlineRenderer.OutlineHoverSelector = (0, CssConstants.CH)("outline-hover"), 
            SubSelectionRegionOutlineRenderer.OutlineActiveSelector = (0, CssConstants.CH)("outline-active"), 
            SubSelectionRegionOutlineRenderer;
        }();
    },
    44977: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            PC: function() {
                return replaceSpaceWithNBSP;
            },
            lM: function() {
                return wordBreak;
            },
            mC: function() {
                return removeEllipses;
            },
            nU: function() {
                return removeBreakingSpaces;
            },
            zI: function() {
                return replaceNewlineAndSpaceWithNBSP;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32041), _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66001);
        function removeBreakingSpaces(str) {
            return str.toString().replace(new RegExp(" ", "g"), "&nbsp");
        }
        function removeEllipses(str) {
            return str.replace(/\u2026/g, "");
        }
        function replaceSpaceWithNBSP(txt) {
            if (null != txt) return txt.replace(/ /g, "\xa0");
        }
        function replaceNewlineAndSpaceWithNBSP(txt) {
            if (null != txt) return txt.replace(/\n| /g, "\xa0");
        }
        function wordBreak(textElement, maxWidth, maxHeight, linePadding, preserveNewLines, preserveWhitespace) {
            void 0 === linePadding && (linePadding = 0), void 0 === preserveNewLines && (preserveNewLines = !1), 
            void 0 === preserveWhitespace && (preserveWhitespace = !1), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(textElement, "textElement");
            var properties = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.getSvgMeasurementProperties(textElement), height = _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.estimateSvgTextHeight(properties) + linePadding, maxNumLines = Math.max(1, Math.floor(maxHeight / height)), node = d3.select(textElement), labelText = textElement.textContent;
            textElement.textContent = "";
            for (var words = (0, _VisualsCommon_Utility_wordBreaker__WEBPACK_IMPORTED_MODULE_2__.ql)(labelText, properties, _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.measureSvgTextWidth, maxWidth, maxNumLines, null, !1, preserveNewLines, preserveWhitespace), i = 0, ilen = words.length; i < ilen; i++) properties.text = words[i], 
            node.append("tspan").attr("x", 0).attr("dy", 0 === i ? 0 : height).text(_VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_1__.b.getTailoredTextOrDefault(properties, maxWidth));
        }
    },
    67064: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            mR: function() {
                return getLoadQuillResources;
            }
        });
        var loadQuillResources = !0;
        function getLoadQuillResources() {
            return loadQuillResources;
        }
    },
    70249: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $s: function() {
                return bindOnObjectLabelProperties;
            },
            Sh: function() {
                return classes;
            },
            Vi: function() {
                return unbindOnObjectProperties;
            },
            _M: function() {
                return getFill;
            },
            eR: function() {
                return getFillOpacity;
            },
            oN: function() {
                return DefaultStrokeColorName;
            },
            rI: function() {
                return bindOnObjectShapeProperties;
            }
        });
        var _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52287), classes = {
            node: "treemapNode",
            highlight: "treemapNodeHighlight",
            major: "majorLabel",
            minor: "minorLabel"
        }, DefaultStrokeColorName = "foregroundLight";
        function getFill(d, isHighlightRect) {
            return d.depth > 1 && !d.data.identity.hasIdentity() && !isHighlightRect || hasChildrenWithIdentity(d) ? _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.zu : d.data.color;
        }
        function hasChildrenWithIdentity(node) {
            var children = node.children;
            if (!children) return !1;
            var count = children.length;
            if (0 === count) return !1;
            for (var i = count - 1; i >= 0; i--) if (children[i].data.identity.hasIdentity()) return !0;
            return !1;
        }
        function getFillOpacity(d, hasSelection, hasHighlights, isHighlightRect) {
            return hasHighlights ? hasSelection && isHighlightRect ? d.data.selected ? null : (0).toString() : isHighlightRect ? null : .4.toString() : !hasSelection || d.data.selected || d.depth > 1 && d.parent.data.selected || hasChildrenWithIdentity(d) ? null : .4.toString();
        }
        function bindOnObjectShapeProperties(shapes, hostServices, layout) {
            return shapes.filter(function(d) {
                return 1 === d.depth;
            }).classed(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.cy, !0).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.Ez, "category").attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.QZ, 3).style("pointer-events", "bounding-box").each(function(d) {
                var element = d3.select(this).node();
                _subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.O5.setDataForElement(element, {
                    getDisplayName: function() {
                        return hostServices.getLocalizedString("MiniToolbar_Categories", layout.majorLabelFullText(d));
                    }
                });
            });
        }
        function bindOnObjectLabelProperties(labels, labelType) {
            return labels.classed(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.cy, !0).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.Ez, labelType).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.QZ, 1).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.CK, "category-labels" === labelType ? "Visual_CategoryLabels" : "Visual_DataPointsLabels").style("pointer-events", "bounding-box");
        }
        function unbindOnObjectProperties(selection) {
            return selection.classed(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.cy, !1).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.Ez, null).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.QZ, null).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.CK, null).style("pointer-events", null).each(function() {
                var element = d3.select(this).node();
                _subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_1__.O5.setDataForElement(element, void 0);
            });
        }
    },
    92783: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $B: function() {
                return useHighlightValues;
            },
            Kx: function() {
                return combineSeries;
            },
            Qp: function() {
                return isDataViewForRegression;
            },
            VP: function() {
                return readTrendlineDataView;
            },
            Zb: function() {
                return renderTrendlines;
            },
            md: function() {
                return enumerateTrendlineObjectInstances;
            },
            s4: function() {
                return trendObjectName;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81337), _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(64067), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _VisualsData_dataView_dataRoleHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38958), _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(82755), _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(76045), _capabilities_lineChart_capabilities__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(69871), _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47316), _axisHelper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(53197), _colorHelper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(90120), _subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(52287), _strokeStyle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2241), _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14599), displayName = "displayName", lineColor = "lineColor", combineSeries = "combineSeries", useHighlightValues = "useHighlightValues", trendObjectName = "trend", defaultLineColorName = "foregroundDark";
        function getDefaultTrendLineStyle(visualStyle) {
            return {
                strokeShow: !1,
                strokeColor: getDefaultLineColor(visualStyle),
                strokeTransparency: 0,
                strokeWidth: 2,
                strokePattern: _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__.Dv.dashed,
                strokeDashArray: _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__.YU,
                strokeDashCap: _types_strokePattern__WEBPACK_IMPORTED_MODULE_0__.xm,
                strokeAutoScale: !1,
                combineSeries: !0,
                useHighlightValues: !0
            };
        }
        var TrendLineClassSelector = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_1__.CH)("trend-line"), InteractivityTrendLineClassSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_1__.CH)("interactivity-trend-line"), TrendLineLayerClassSelector = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_1__.CH)("trend-line-layer");
        function enumerateTrendlineObjectInstances(enumeration, trendLines, visualStyle) {
            if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertValue(enumeration, "enumeration"), 
            _.isEmpty(trendLines)) {
                var defaultStyle = getDefaultTrendLineStyle(visualStyle);
                enumeration.pushInstance({
                    selector: null,
                    properties: (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0, 
                    _strokeStyle__WEBPACK_IMPORTED_MODULE_4__.HM)(defaultStyle, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_5__.vi)), {
                        combineSeries: defaultStyle.combineSeries
                    }),
                    objectName: trendObjectName
                });
            } else {
                var trendLine = trendLines[0];
                enumeration.pushInstance({
                    selector: null,
                    properties: (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({
                        displayName: trendLine.displayName
                    }, (0, _strokeStyle__WEBPACK_IMPORTED_MODULE_4__.HM)(trendLine, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_5__.vi, trendLine.combineSeries ? trendLine.strokeColor : void 0)), {
                        combineSeries: trendLine.combineSeries,
                        useHighlightValues: trendLine.useHighlightValues
                    }),
                    objectName: trendObjectName
                });
            }
        }
        function isDataViewForRegression(dataView) {
            return (0, _VisualsData_dataView_dataRoleHelper__WEBPACK_IMPORTED_MODULE_6__.c5)(dataView, "regression.X");
        }
        function readTrendlineDataView(dataView, sourceDataView, y2, style) {
            return dataView && dataView.matrix ? function(dataView, sourceDataView, y2, style) {
                return function(dataView, sourceDataView, y2, style) {
                    if (dataView && dataView.matrix) {
                        var matrix = dataView.matrix, seriesNodes = matrix.rows && matrix.rows.root && matrix.rows.root.children;
                        if (!_.isEmpty(seriesNodes)) {
                            for (var objects = sourceDataView.metadata.objects, _a = getTrendLineProperties(dataView.metadata.objects, objects, seriesNodes[0].children[0].objects, y2, style), trendLineProperties = _a.trendLineProperties, colorHelper = _a.colorHelper, defaultColor = _a.defaultColor, sourceSeriesNodes = sourceDataView.matrix && sourceDataView.matrix.rows && sourceDataView.matrix.rows.root.children, trendLines = [], seriesIndex = 0; seriesIndex < seriesNodes.length; seriesIndex++) {
                                for (var points = [], _i = 0, _b = seriesNodes[seriesIndex].children; _i < _b.length; _i++) {
                                    var category = _b[_i], x = (0, _axisHelper__WEBPACK_IMPORTED_MODULE_13__.eT)(category.value), y = (0, 
                                    _axisHelper__WEBPACK_IMPORTED_MODULE_13__.eT)(category.values[0].value);
                                    null != x && null != y && points.push({
                                        x,
                                        y
                                    });
                                }
                                var seriesLineColor = void 0;
                                if (trendLineProperties.combineSeries) seriesLineColor = trendLineProperties.strokeColor || getDefaultLineColor(style); else if (2 === sourceDataView.matrix.rows.levels.length) {
                                    var sourceSeriesNode = sourceSeriesNodes[seriesIndex], color = colorHelper.getColorForSeriesValue(sourceSeriesNode.objects, sourceSeriesNode.childIdentityFields, sourceSeriesNode.value, defaultLineColorName);
                                    seriesLineColor = color = darkenTrendLineColor(color);
                                } else {
                                    var defaultCategoryColor = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_7__.W7)(objects, {
                                        objectName: "dataPoint",
                                        propertyName: "defaultCategoryColor"
                                    });
                                    seriesLineColor = darkenTrendLineColor(_colorHelper__WEBPACK_IMPORTED_MODULE_8__.v.create(style, {
                                        objectName: "dataPoint",
                                        propertyName: "fill"
                                    }, defaultColor || defaultCategoryColor).getColorForMeasure(null, "", defaultLineColorName));
                                }
                                trendLines.push((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, trendLineProperties), {
                                    points,
                                    strokeColor: seriesLineColor,
                                    y2Axis: y2
                                }));
                            }
                            return trendLines;
                        }
                    }
                }(dataView, sourceDataView, y2, style);
            }(dataView, sourceDataView, y2, style) : function(dataView, sourceDataView, y2, style) {
                return function(dataView, sourceDataView, y2, style) {
                    if (dataView && dataView.categorical) {
                        var categorical = dataView.categorical;
                        if (!_.isEmpty(categorical.categories) && !_.isEmpty(categorical.values)) {
                            var categories = categorical.categories[0].values, groups = categorical.values.grouped();
                            if (categories && groups) {
                                for (var _a = getTrendLineProperties(dataView.metadata.objects, sourceDataView.metadata.objects, categorical.values[0].source.objects, y2, style), trendlineProperties = _a.trendLineProperties, colorHelper = _a.colorHelper, trendLines = [], groupIndex = 0; groupIndex < groups.length; groupIndex++) {
                                    for (var group = groups[groupIndex], points = [], i = 0; i < categories.length; i++) {
                                        var x = (0, _axisHelper__WEBPACK_IMPORTED_MODULE_13__.eT)(categories[i]), valueColumn = group.values[0], y = (0, 
                                        _axisHelper__WEBPACK_IMPORTED_MODULE_13__.eT)((trendlineProperties.useHighlightValues && valueColumn.highlights ? valueColumn.highlights : valueColumn.values)[i]);
                                        null != x && null != y && points.push({
                                            x,
                                            y
                                        });
                                    }
                                    var seriesLineColor = void 0;
                                    if (trendlineProperties.combineSeries) seriesLineColor = trendlineProperties.strokeColor || getDefaultLineColor(style); else {
                                        var color = void 0;
                                        if (sourceDataView.categorical.values.source) {
                                            var sourceGroups = sourceDataView.categorical.values.grouped();
                                            color = colorHelper.getColorForSeriesValue(sourceGroups[groupIndex].objects, sourceDataView.categorical.values.identityFields, group.name, defaultLineColorName);
                                        } else color = colorHelper.getColorForMeasure(sourceDataView.categorical.values[groupIndex].source.objects, group.name, defaultLineColorName);
                                        seriesLineColor = color = darkenTrendLineColor(color);
                                    }
                                    trendLines.push((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, trendlineProperties), {
                                        points,
                                        strokeColor: seriesLineColor,
                                        y2Axis: y2
                                    }));
                                }
                                return trendLines;
                            }
                        }
                    }
                }(dataView, sourceDataView, y2, style);
            }(dataView, sourceDataView, y2, style);
        }
        function getTrendLineProperties(trendlineObjects, sourceObjects, legacyObjects, y2, visualStyle) {
            var trendProperties = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_7__.RK)(trendlineObjects, trendObjectName, {}), colorHelper = _colorHelper__WEBPACK_IMPORTED_MODULE_8__.v.create(visualStyle), defaultStyle = getDefaultTrendLineStyle(visualStyle), trendLineProperties = (0, 
            tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0, 
            _strokeStyle__WEBPACK_IMPORTED_MODULE_4__.AF)(trendProperties, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_5__.vi, defaultStyle, colorHelper.getColorForPropertyName(trendProperties, lineColor, defaultLineColorName))), {
                displayName: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_9__.N)(trendProperties, displayName),
                combineSeries: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_9__.N)(trendProperties, combineSeries, defaultStyle.combineSeries),
                useHighlightValues: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_9__.N)(trendProperties, useHighlightValues, defaultStyle.useHighlightValues)
            }), legacyColor = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_7__.NA)(legacyObjects, _capabilities_lineChart_capabilities__WEBPACK_IMPORTED_MODULE_10__.zK.lineStyles.strokeColor);
            legacyColor && (trendLineProperties.strokeColor = legacyColor.solid.color);
            var defaultColor = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_7__.W7)(sourceObjects, {
                objectName: "dataPoint",
                propertyName: "defaultColor"
            });
            return y2 || (defaultColor = defaultColor || (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_7__.W7)(sourceObjects, {
                objectName: "dataPoint",
                propertyName: "fill"
            })), {
                trendLineProperties,
                colorHelper: colorHelper = _colorHelper__WEBPACK_IMPORTED_MODULE_8__.v.create(visualStyle, {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }, defaultColor),
                defaultColor
            };
        }
        function getDefaultLineColor(style) {
            return _colorHelper__WEBPACK_IMPORTED_MODULE_8__.v.getThemeColor(style, defaultLineColorName);
        }
        function darkenTrendLineColor(color) {
            var rgb = (0, _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_11__.WV)(color);
            return rgb = (0, _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_11__._j)(rgb, 20), 
            (0, _VisualsCommon_color__WEBPACK_IMPORTED_MODULE_11__.U8)(rgb);
        }
        function renderTrendlines(trendLines, graphicsContext, axes, viewport, onObject) {
            var layer = graphicsContext.select(TrendLineLayerClassSelector.selector);
            layer.empty() && (layer = graphicsContext.append("svg").classed(TrendLineLayerClassSelector.class, !0)), 
            layer.attrs({
                height: viewport.height,
                width: viewport.width
            }), layer.selectAll(TrendLineClassSelector.selector).data(trendLines || []).join(function(enter) {
                return enter.append("path").classed(TrendLineClassSelector.class, !0);
            }).attr("d", function(d) {
                var xScale = axes.x.scale, yScale = d.y2Axis && axes.y2 ? axes.y2.scale : axes.y1.scale;
                return d3.line().x(function(point) {
                    return xScale(point.x);
                }).y(function(point) {
                    return yScale(point.y);
                })(_.filter(d.points, function(point) {
                    return null != point.x && null != point.y;
                }));
            }).styles(function(d) {
                return (0, _strokeStyle__WEBPACK_IMPORTED_MODULE_4__.bc)(d);
            }), onObject && layer.selectAll(InteractivityTrendLineClassSelector.selector).data(trendLines || []).join(function(enter) {
                return enter.append("path").classed(InteractivityTrendLineClassSelector.class, !0).classed(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_12__.cy, !0).attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_12__.Ez, "lines").attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_12__.CK, "Visual_Trend_Line").attr(_subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_12__.QZ, 3).style("stroke-dasharray", "none");
            }).attr("d", function(d) {
                var xScale = axes.x.scale, yScale = d.y2Axis && axes.y2 ? axes.y2.scale : axes.y1.scale;
                return d3.line().x(function(point) {
                    return xScale(point.x);
                }).y(function(point) {
                    return yScale(point.y);
                })(_.filter(d.points, function(point) {
                    return null != point.x && null != point.y;
                }));
            }).each(function() {
                var line = this;
                _subSelectionHelper_htmlSubSelectionHelper__WEBPACK_IMPORTED_MODULE_12__.O5.setDataForElement(line, {
                    getRegionOutlines: function() {
                        var mainSvgElement = graphicsContext.node(), _a = mainSvgElement.getBoundingClientRect(), left = _a.left, top = _a.top, _b = mainSvgElement.getBBox(), x0 = _b.x, y0 = _b.y, datum = d3.select(line).datum(), xScale = axes.x.scale, yScale = datum.y2Axis && axes.y2 ? axes.y2.scale : axes.y1.scale, rectangleSize = 10 * viewport.scale;
                        return [ {
                            id: "Visual_Trend_Line",
                            outline: {
                                type: 0,
                                outlines: datum.points.map(function(point) {
                                    return {
                                        x: (xScale(point.x) - x0) * viewport.scale + left - rectangleSize / 2,
                                        y: (yScale(point.y) - y0) * viewport.scale + top - rectangleSize / 2,
                                        width: rectangleSize,
                                        height: rectangleSize,
                                        type: 1
                                    };
                                })
                            }
                        } ];
                    }
                });
            });
        }
    },
    7176: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            PT: function() {
                return convertCategoricalUncertaintyDataPoint;
            },
            nC: function() {
                return convertUncertaintyMetadata;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(62458), _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82755), _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(76045), _types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47998), _types_errorFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(77558), _types_strokePattern__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(47316), _types_markerShape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(61193), _axisHelper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(53197), _colorHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(90120), _dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(21181), UncertaintyDefaults = {
            DefaultWidth: 1,
            DefaultBarMatchSeriesColor: !1,
            DefaultTransparency: 80,
            DefaultBandStyle: _types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_0__.X$.fill,
            DefaultMarkerShape: _types_markerShape__WEBPACK_IMPORTED_MODULE_1__.ZO.longDash,
            DefaultMarkerSize: 5,
            DefaultLabelBackgroundTransparency: 90,
            DefaultLabelFormat: _types_errorFormat__WEBPACK_IMPORTED_MODULE_2__.K.absolute,
            DefaultTooltipFormat: _types_errorFormat__WEBPACK_IMPORTED_MODULE_2__.K.absolute,
            MarkerKeyBase: "uncertainty"
        };
        function convertUncertaintyMetadata(measureObjects, style, seriesColor, seriesIndex, labelSettings, options) {
            var bandSettings, errorObject = (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, 
            tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_4__.RK)(options.staticObjects, "error")), (0, 
            _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_4__.RK)(measureObjects, "error")), colorHelper = _colorHelper__WEBPACK_IMPORTED_MODULE_5__.v.create(style), barShow = (0, 
            _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "barShow", !0), barMatchSeriesColor = (0, 
            _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "barMatchSeriesColor", UncertaintyDefaults.DefaultBarMatchSeriesColor), barWidth = (0, 
            _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "barWidth", UncertaintyDefaults.DefaultWidth), barBorderColor = colorHelper.getColorForPropertyNameWithDefaultColor(errorObject, "barBorderColor", style.colorPalette.background.value), barBorderSize = (0, 
            _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "barBorderSize", UncertaintyDefaults.DefaultWidth), barColor = seriesColor;
            barMatchSeriesColor || (barColor = colorHelper.getColorForPropertyNameWithDefaultColor(errorObject, "barColor", style.colorPalette.foregroundNeutralSecondary.value)), 
            options.hideBand || (bandSettings = {
                show: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "shadeShow", !1),
                bandStyle: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "shadeBandStyle", UncertaintyDefaults.DefaultBandStyle),
                matchSeriesColor: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "shadeMatchSeriesColor", !0),
                transparency: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "shadeTransparency", UncertaintyDefaults.DefaultTransparency),
                color: seriesColor
            }).matchSeriesColor || (bandSettings.color = colorHelper.getColorForPropertyNameWithDefaultColor(errorObject, "shadeColor", style.colorPalette.foregroundNeutralSecondary.value));
            var markerShape = (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "markerShape", barShow ? UncertaintyDefaults.DefaultMarkerShape : void 0), markerShow = (0, 
            _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "markerShow", void 0);
            "none" === markerShape && (markerShape = markerShow ? UncertaintyDefaults.DefaultMarkerShape : void 0);
            var markers = {
                color: barShow ? barColor : null == bandSettings ? void 0 : bandSettings.color,
                key: UncertaintyDefaults.MarkerKeyBase + seriesIndex,
                rotation: options.valueAxisHorizontal ? 90 : 0,
                show: !!markerShape && !1 !== markerShow && (barShow || (null == bandSettings ? void 0 : bandSettings.show) || markerShow),
                shape: null != markerShape ? markerShape : UncertaintyDefaults.DefaultMarkerShape,
                showMarkerByDefault: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "showMarkerByDefault", !0),
                size: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "markerSize", UncertaintyDefaults.DefaultMarkerSize),
                stroke: {
                    strokeShow: !0,
                    strokeColor: barShow ? barBorderColor : void 0,
                    strokePattern: _types_strokePattern__WEBPACK_IMPORTED_MODULE_7__.Dv.solid,
                    strokeWidth: barBorderSize,
                    strokeTransparency: void 0
                },
                lineRadius: barShow ? barWidth / 2 : void 0
            }, labelsObj = {
                show: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelShow"),
                fontFamily: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelFontFamily"),
                fontSize: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelFontSize"),
                bold: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelBold"),
                italic: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelItalic"),
                underline: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelUnderline"),
                color: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelColor"),
                enableBackground: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelBackground"),
                backgroundColor: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelBackgroundColor"),
                backgroundTransparency: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelBackgroundTransparency", UncertaintyDefaults.DefaultLabelBackgroundTransparency),
                labelDisplayUnits: void 0,
                labelPosition: void 0
            }, labelMatchSeriesColor = (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelMatchSeriesColor", !1);
            labelMatchSeriesColor && (labelsObj.color = {
                solid: {
                    color: seriesColor
                }
            }), (0, _dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_8__.ww)(labelsObj, labelSettings, !1, style, options.isCombo);
            var hasUncertainty = (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "enabled", !1);
            return {
                hasUncertainty,
                bar: {
                    show: barShow,
                    borderColor: barBorderColor,
                    borderWidth: barBorderSize,
                    matchSeriesColor: barMatchSeriesColor,
                    color: barColor,
                    width: barWidth,
                    isHorizontal: options.valueAxisHorizontal
                },
                markers,
                tooltips: {
                    format: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "tooltipFormat", UncertaintyDefaults.DefaultTooltipFormat),
                    show: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "tooltipShow", !0)
                },
                labels: (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, labelSettings), {
                    matchSeriesColor: labelMatchSeriesColor,
                    errorFormat: (0, _VisualsData_dataView_dataViewObject3__WEBPACK_IMPORTED_MODULE_6__.N)(errorObject, "labelFormat", UncertaintyDefaults.DefaultLabelFormat)
                }),
                renderUncertainty: hasUncertainty && (barShow || markers.show || (null == bandSettings ? void 0 : bandSettings.show)),
                band: bandSettings,
                markersFlipped: (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, markers), {
                    key: "".concat(markers.key, "-flip"),
                    rotation: options.valueAxisHorizontal ? 270 : 180
                })
            };
        }
        function convertCategoricalUncertaintyDataPoint(dataReader, categoryIndex, seriesIndex, baseValue, isHighlight) {
            return function(errorRange, baseValue) {
                if (null != errorRange) {
                    if (errorRange.explicit) {
                        var explicit = errorRange.explicit;
                        return convertErrorRange(explicit.lowerBound, explicit.upperBound, explicit.isRelative ? baseValue : 0);
                    }
                    if (errorRange.symmetricalExplicit) {
                        var delta = errorRange.symmetricalExplicit.delta;
                        return convertErrorRange(Math.min(-delta, delta), Math.max(-delta, delta), baseValue);
                    }
                    if (errorRange.standardDeviation) {
                        var _a = errorRange.standardDeviation, value_1 = _a.value, multiplier = _a.multiplier;
                        return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_9__.fF.assert(function() {
                            return null != value_1 && !isNaN(value_1) && value_1 >= 0;
                        }, "convertUncertaintyDataPoint - stddev is undefined or negative"), convertErrorRange(-value_1 * multiplier, value_1 * multiplier, baseValue);
                    }
                    if (errorRange.percentage) {
                        var _b = errorRange.percentage, lowerBoundDelta = _b.lowerBoundDelta, upperBoundDelta = _b.upperBoundDelta, absoluteBase = Math.abs(baseValue);
                        return convertErrorRange(baseValue - lowerBoundDelta * absoluteBase, baseValue + upperBoundDelta * absoluteBase);
                    }
                    if (errorRange.percentile) {
                        var _c = errorRange.percentile;
                        return convertErrorRange(_c.lowerBound, _c.upperBound);
                    }
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_9__.fF.assertFail("convertUncertaintyDataPoint - unknown ErrorRange definition supplied; expected at least one property to be populated");
                }
            }(dataReader.getErrorValues(categoryIndex, seriesIndex, isHighlight), baseValue);
        }
        function convertErrorRange(rawLowerBound, rawUpperBound, baseValue) {
            var errorOffset = null != baseValue ? baseValue : 0, dataPointError = {}, lowerBound = (0, 
            _axisHelper__WEBPACK_IMPORTED_MODULE_10__.eT)(rawLowerBound);
            null != lowerBound && (dataPointError.lower = lowerBound + errorOffset);
            var upperBound = (0, _axisHelper__WEBPACK_IMPORTED_MODULE_10__.eT)(rawUpperBound);
            return null != upperBound && (dataPointError.upper = upperBound + errorOffset), 
            dataPointError;
        }
    },
    16122: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            f: function() {
                return getUncertaintyFormattingContainer;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81337), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62458), _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56578), _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14599), _dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(21181), _legacyDataLabelViewModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(57416), _visualLocKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(33024), _types_markerShape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(61193);
        function getUncertaintyFormattingContainer(errorOptions, containerItemBuilder) {
            var viewModel = errorOptions.uncertainty, measureSelector = errorOptions.measureSelector, uncertaintyOptions = errorOptions.uncertaintyOptions, localize = errorOptions.localize;
            containerItemBuilder.addGroup("options", function(groupBuilder) {
                return groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("errorRangeEnabled", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.enabled), {
                        selector: measureSelector
                    }),
                    value: viewModel.hasUncertainty
                }).build()).addSimpleSlice("errorRange", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.LB({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.errorRange), {
                        selector: errorOptions.dataPointSelector,
                        instanceKind: 2
                    }),
                    validators: {
                        field: {
                            kind: 1,
                            type: {
                                numeric: !0
                            }
                        }
                    },
                    targetMeasure: errorOptions.targetMeasure,
                    value: void 0
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withSuppressDisplayName(!0);
                });
            }).addGroup("bar", function(groupBuilder) {
                return groupBuilder.withDisplayName("Visual_Bar").withDisabled(!viewModel.hasUncertainty).addTopLevelToggle("barShow", function() {
                    return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.barShow), {
                            selector: measureSelector
                        }),
                        value: viewModel.bar.show
                    }).build();
                }).addSimpleSlice("barMatchSeriesColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.barMatchSeriesColor), {
                        selector: measureSelector
                    }),
                    value: viewModel.bar.matchSeriesColor
                }).build()).addSimpleSlice("barColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.BT({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.barColor), {
                        selector: measureSelector
                    }),
                    value: {
                        value: viewModel.bar.color
                    }
                }).build(), function(builder) {
                    return builder.withDisabled(viewModel.bar.matchSeriesColor);
                }).addSimpleSlice("barWidth", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.mu({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.barWidth), {
                        selector: measureSelector
                    }),
                    value: viewModel.bar.width,
                    options: {
                        minValue: {
                            type: 0,
                            value: 1
                        },
                        maxValue: {
                            type: 1,
                            value: 10
                        }
                    }
                }).build()).addSimpleSlice("barBorderColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.BT({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.barBorderColor), {
                        selector: measureSelector
                    }),
                    value: {
                        value: viewModel.bar.borderColor
                    }
                }).build()).addSimpleSlice("barBorderSize", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.mu({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.barBorderSize), {
                        selector: measureSelector
                    }),
                    value: viewModel.bar.borderWidth,
                    options: {
                        minValue: {
                            type: 0,
                            value: 0
                        },
                        maxValue: {
                            type: 1,
                            value: 2
                        },
                        unitSymbol: _visualLocKeys__WEBPACK_IMPORTED_MODULE_3__.e_
                    }
                }).build());
            }).addGroup("markers", function(groupBuilder) {
                return groupBuilder.withDisplayName("Visual_Markers").withDisabled(!viewModel.hasUncertainty).addTopLevelToggle("markerShow", function() {
                    return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.markerShow), {
                            selector: measureSelector
                        }),
                        value: viewModel.markers.show
                    }).build();
                }).addSimpleSlice("markerShape", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.uY({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.markerShape), {
                        selector: measureSelector
                    }),
                    value: viewModel.markers.shape,
                    filterValues: _types_markerShape__WEBPACK_IMPORTED_MODULE_4__.Dt.map(function(member) {
                        return member.value;
                    })
                }).build()).addSimpleSlice("markerSize", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.mu({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.markerSize), {
                        selector: measureSelector
                    }),
                    value: viewModel.markers.size,
                    options: {
                        minValue: {
                            type: 0,
                            value: 1
                        },
                        maxValue: {
                            type: 1,
                            value: 10
                        },
                        unitSymbol: _visualLocKeys__WEBPACK_IMPORTED_MODULE_3__.e_
                    }
                }).build());
            }), (null == uncertaintyOptions ? void 0 : uncertaintyOptions.hideBand) || (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertValue(viewModel.band, "getUncertaintyFormattingContainer() - viewModel.band is not defined but is enumerated anyway"), 
            containerItemBuilder.addGroup("band", function(groupBuilder) {
                return groupBuilder.withDisplayName("Visual_Error_Band").withDisabled(!viewModel.hasUncertainty).addTopLevelToggle("shadeShow", function() {
                    return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.shadeShow), {
                            selector: measureSelector
                        }),
                        value: viewModel.band.show
                    }).build();
                }).addSimpleSlice("shadeBandStyle", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.uY({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.shadeBandStyle), {
                        selector: measureSelector
                    }),
                    value: viewModel.band.bandStyle
                }).build()).addSimpleSlice("shadeMatchSeriesColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.shadeMatchSeriesColor), {
                        selector: measureSelector
                    }),
                    value: viewModel.band.matchSeriesColor
                }).build()).addSimpleSlice("shadeColor", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.BT({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.shadeColor), {
                        selector: measureSelector
                    }),
                    value: {
                        value: viewModel.band.color
                    }
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withDisabled(viewModel.band.matchSeriesColor);
                }).addSimpleSlice("shadeTransparency", _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.JN.getTransparencySliderBuilder({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.shadeTransparency), {
                        selector: measureSelector
                    }),
                    value: viewModel.band.transparency,
                    localize
                }).build());
            }));
            var labelViewModel = viewModel.labels, labelOptions = {
                featureSwitches: {},
                hostServices: {
                    getLocalizedString: localize
                },
                options: {
                    dataLabelsSettings: labelViewModel,
                    show: labelViewModel.show,
                    fontFamily: !0,
                    fontSize: !0,
                    bold: !0,
                    italic: !0,
                    underline: !0,
                    matchSeriesColor: labelViewModel.matchSeriesColor,
                    enableBackground: labelViewModel.enableBackground,
                    backgroundColor: labelViewModel.backgroundColor,
                    backgroundTransparency: labelViewModel.backgroundTransparency
                },
                omitGroupDisplayNames: !0,
                cardBuilder: void 0,
                selector: measureSelector,
                dataLabelsProps: {
                    fontFamily: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelFontFamily,
                    fontSize: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelFontSize,
                    bold: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelBold,
                    italic: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelItalic,
                    underline: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelUnderline,
                    matchSeriesColor: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelMatchSeriesColor,
                    color: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelColor,
                    enableBackground: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelBackground,
                    backgroundColor: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelBackgroundColor,
                    backgroundTransparency: _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelBackgroundTransparency
                }
            };
            containerItemBuilder.addGroup("labels", function(groupBuilder) {
                groupBuilder.withDisplayName("Visual_Error_Labels").withDisabled(!viewModel.hasUncertainty).addTopLevelToggle("labelShow", function() {
                    return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelShow), {
                            selector: measureSelector
                        }),
                        value: labelViewModel.show
                    }).build();
                }), (0, _legacyDataLabelViewModel__WEBPACK_IMPORTED_MODULE_6__.lJ)(groupBuilder, labelOptions), 
                groupBuilder.addSimpleSlice("labelFormat", function() {
                    return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.uY({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.labelFormat), {
                            selector: measureSelector
                        }),
                        value: labelViewModel.errorFormat
                    }).build();
                }), (0, _dataLabelViewModel1__WEBPACK_IMPORTED_MODULE_7__.td)(groupBuilder, labelOptions, !0);
            }), containerItemBuilder.addGroup("tooltip", function(groupBuilder) {
                return groupBuilder.withDisplayName("Tooltip").withDisabled(!viewModel.hasUncertainty).addTopLevelToggle("tooltipShow", function() {
                    return new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.bd({
                        descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.tooltipShow), {
                            selector: measureSelector
                        }),
                        value: viewModel.tooltips.show
                    }).build();
                }).addSimpleSlice("tooltipFormat", new _VisualsCommon_Utility_build_control_util__WEBPACK_IMPORTED_MODULE_0__.uY({
                    descriptor: (0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_2__.Qx.tooltipFormat), {
                        selector: measureSelector
                    }),
                    value: viewModel.tooltips.format
                }).build());
            });
        }
    },
    58691: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            B9: function() {
                return createUncertaintyGroup;
            },
            DI: function() {
                return updateUncertaintyGroupOrder;
            },
            E6: function() {
                return UncertaintyMarker;
            },
            EC: function() {
                return renderUncertaintyBands;
            },
            FZ: function() {
                return renderUncertaintyBars;
            },
            OY: function() {
                return removeUncertaintyGroup;
            },
            Ok: function() {
                return UncertaintyDefs;
            },
            YU: function() {
                return UncertaintyMarkers;
            },
            di: function() {
                return renderUncertaintyMarkers;
            },
            f: function() {
                return updateUncertaintyOpacities_Column;
            },
            fM: function() {
                return updateUncertaintyOpacities;
            },
            iD: function() {
                return addMarkerProperties;
            },
            jx: function() {
                return UncertaintyGroup;
            },
            xl: function() {
                return updateActiveHighlightMarkers;
            }
        });
        var _Visuals_types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(47998), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _VisualsCommon_helpers_d3Helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(34644), _renderUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60066), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62458), UncertaintyGroup = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty"), UncertaintyAreas = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-areas"), UncertaintyArea = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-area"), UncertaintyLines = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-lines"), UncertaintyLine = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-line"), UncertaintyBars = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-bars"), UncertaintyBar = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-bar"), UncertaintyMarkers = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-markers"), UncertaintyMarker = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-marker"), UncertaintyDefs = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-defs"), UncertaintyMarkerActive = (0, 
        _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("uncertainty-marker-active");
        function createUncertaintyGroup(graphicsContext) {
            return graphicsContext.selectAll(UncertaintyGroup.selector).data([ 1 ]).join("g").attr("class", UncertaintyGroup.class);
        }
        function removeUncertaintyGroup(graphicsContext) {
            graphicsContext.selectAll(UncertaintyGroup.selector).remove();
        }
        function renderUncertaintyBars(uncertaintyGroup, seriesWithUncertainty, valueScale, dataPointPosition, barWidth, hasHighlights, hasSelection) {
            void 0 === hasHighlights && (hasHighlights = !1), void 0 === hasSelection && (hasSelection = !1);
            var seriesWithBars = _.filter(seriesWithUncertainty, function(series) {
                return series.uncertainty.bar.show;
            }), uncertaintyItemOpacity = function(d) {
                return (0, _renderUtil__WEBPACK_IMPORTED_MODULE_1__.eR)(d.selected, d.highlight, hasSelection, hasHighlights);
            }, barsSelection = uncertaintyGroup.selectAll(UncertaintyBars.selector).data(seriesWithBars, function(d) {
                return d.identity.getKey();
            }).join("g").attr("class", UncertaintyBars.class).style("fill", function(d) {
                return d.uncertainty.bar.color;
            }).style("stroke", function(d) {
                return d.uncertainty.bar.borderColor;
            }).style("stroke-width", function(d) {
                return d.uncertainty.bar.borderWidth;
            }).order();
            return barsSelection.each(function(series) {
                if (null != series && !_.isEmpty(series.data)) {
                    var uncertaintySeriesData = _.filter(series.data, function(d) {
                        var _a, _b;
                        return !!d && (!hasHighlights || d.highlight) && ((null === (_a = d.uncertainty) || void 0 === _a ? void 0 : _a.lower) || (null === (_b = d.uncertainty) || void 0 === _b ? void 0 : _b.upper));
                    });
                    d3.select(this).selectAll(UncertaintyBar.selector).data(uncertaintySeriesData, function(d) {
                        return d.identity.getKey();
                    }).join("path").attr("class", UncertaintyBar.class).attr("transform", dataPointPosition).style("fill-opacity", function(d) {
                        return hasSelection ? uncertaintyItemOpacity(d) : null;
                    }).style("stroke-opacity", function(d) {
                        return hasSelection ? uncertaintyItemOpacity(d) : null;
                    }).attr("d", function(d) {
                        return d3.symbol().type(function(d, barSettings, valueScale) {
                            return {
                                draw: function(context, _size) {
                                    var _a, _b;
                                    if (null != d.uncertainty) {
                                        var hasUpper = null != d.uncertainty.upper, hasLower = null != d.uncertainty.lower;
                                        if (hasUpper || hasLower) {
                                            var upperRelative = valueScale(d.uncertainty.upper) - valueScale(d.value), lowerRelative = valueScale(d.uncertainty.lower) - valueScale(d.value), barRadius = .5 * (barSettings.width + barSettings.borderWidth), isHorizontal = !!barSettings.isHorizontal, increasingScaleRange = valueScale.range()[0] < valueScale.range()[1];
                                            (isHorizontal && !increasingScaleRange || !isHorizontal && increasingScaleRange) && (lowerRelative = (_a = [ upperRelative, lowerRelative ])[0], 
                                            upperRelative = _a[1], hasLower = (_b = [ hasUpper, hasLower ])[0], hasUpper = _b[1]), 
                                            isHorizontal ? (hasUpper ? (context.moveTo(upperRelative, barRadius), context.lineTo(upperRelative, -barRadius)) : (context.moveTo(0, barRadius), 
                                            context.lineTo(0, -barRadius)), hasLower ? (context.lineTo(lowerRelative, -barRadius), 
                                            context.lineTo(lowerRelative, barRadius)) : (context.lineTo(0, -barRadius), context.lineTo(0, barRadius))) : (hasUpper ? (context.moveTo(barRadius, upperRelative), 
                                            context.lineTo(-barRadius, upperRelative)) : (context.moveTo(barRadius, 0), context.lineTo(-barRadius, 0)), 
                                            hasLower ? (context.lineTo(-barRadius, lowerRelative), context.lineTo(barRadius, lowerRelative)) : (context.lineTo(-barRadius, 0), 
                                            context.lineTo(barRadius, 0))), context.closePath();
                                        }
                                    }
                                }
                            };
                        }(d, series.uncertainty.bar, valueScale(d))).size(barWidth)();
                    });
                }
            }), barsSelection;
        }
        function renderUncertaintyMarkers(uncertaintyGroup, seriesWithUncertainty, uncertaintyLineUpper, uncertaintyLineLower, valueAxisInverted, markerRenderer, hasSelection, hasHighlights) {
            void 0 === hasSelection && (hasSelection = !1), void 0 === hasHighlights && (hasHighlights = !1);
            var seriesWithMarkers = _.filter(seriesWithUncertainty, function(series) {
                return series.uncertainty.markers.show;
            }), uncertaintyMarkers = uncertaintyGroup.selectAll(UncertaintyMarkers.selector).data(seriesWithMarkers, function(d) {
                return d.identity.getKey();
            }).join("g").attr("class", UncertaintyMarkers.class).style("stroke-opacity", 0).style("stroke-width", 2).order();
            return setMarkerAttribs(uncertaintyMarkers.selectAll(UncertaintyMarker.selector).data(function(d) {
                return _.map([ "upper", "lower" ], function(type) {
                    return {
                        seriesData: d,
                        type
                    };
                });
            }).join("path").attr("class", UncertaintyMarker.class).style("stroke-width", "inherit").style("opacity", hasSelection ? (0, 
            _renderUtil__WEBPACK_IMPORTED_MODULE_1__.eR)(!1, !0, hasSelection, hasHighlights) : null).attr("d", function(d) {
                return "upper" === d.type && !valueAxisInverted || "lower" === d.type && valueAxisInverted ? uncertaintyLineUpper(d.seriesData.data) : uncertaintyLineLower(d.seriesData.data);
            }), markerRenderer), uncertaintyMarkers;
        }
        function renderUncertaintyBands(uncertaintyGroup, seriesWithUncertainty, uncertaintyLineUpper, uncertaintyLineLower, uncertaintyArea, uncertaintyItemOpacity) {
            var seriesWithArea = _.filter(seriesWithUncertainty, function(series) {
                return series.uncertainty.band.show;
            });
            uncertaintyGroup.selectAll(UncertaintyAreas.selector).data(seriesWithArea, function(d) {
                return d.identity.getKey();
            }).join("g").attr("class", UncertaintyAreas.class).order().each(function(series) {
                if (null != series && !_.isEmpty(series.data)) {
                    var bandSettings = series.uncertainty.band, thisBand = d3.select(this), seriesData = _.filter(series.data, function(d) {
                        return !!d;
                    }), areaShow = bandSettings.bandStyle !== _Visuals_types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_2__.X$.line ? [ "0" ] : [];
                    thisBand.selectAll(UncertaintyArea.selector).data(areaShow, function(d) {
                        return d;
                    }).join("path").attr("class", UncertaintyArea.class).style("fill", bandSettings.color).style("fill-opacity", uncertaintyItemOpacity(series, bandSettings.transparency)).attr("d", uncertaintyArea(seriesData));
                    var lineShow = bandSettings.bandStyle !== _Visuals_types_confidenceBandStyle__WEBPACK_IMPORTED_MODULE_2__.X$.fill ? [ "0" ] : [];
                    thisBand.selectAll(UncertaintyLines.selector).data(lineShow, function(d) {
                        return d;
                    }).join("g").attr("class", UncertaintyLines.class).style("stroke", bandSettings.color).style("stroke-opacity", uncertaintyItemOpacity(series, bandSettings.transparency)).style("stroke-width", 2).selectAll(UncertaintyLine.selector).data([ "upper", "lower" ], function(d) {
                        return d;
                    }).join("path").attr("class", UncertaintyLine.class).attr("d", function(d) {
                        return "upper" === d ? uncertaintyLineUpper(seriesData) : uncertaintyLineLower(seriesData);
                    });
                }
            });
        }
        function updateUncertaintyOpacities(uncertaintyGroup, uncertaintyItemOpacity) {
            uncertaintyGroup.selectAll(UncertaintyAreas.selector).each(function(series) {
                var bandTransparency = series.uncertainty.band.transparency, thisBand = d3.select(this);
                thisBand.selectAll(UncertaintyArea.selector).style("fill-opacity", uncertaintyItemOpacity(series, bandTransparency)), 
                thisBand.selectAll(UncertaintyLines.selector).style("stroke-opacity", uncertaintyItemOpacity(series, bandTransparency));
            }), uncertaintyGroup.selectAll(UncertaintyBars.selector).style("fill-opacity", function(d) {
                return uncertaintyItemOpacity(d);
            }).style("stroke-opacity", function(d) {
                return uncertaintyItemOpacity(d);
            }), uncertaintyGroup.selectAll(UncertaintyMarker.selector).style("opacity", function(d) {
                return uncertaintyItemOpacity(d.seriesData);
            });
        }
        function updateUncertaintyOpacities_Column(uncertaintyShapes, hasSelection, hasHighlights) {
            var _a, _b, _c;
            uncertaintyShapes && (null === (_a = uncertaintyShapes.bars) || void 0 === _a || _a.each(function() {
                d3.select(this).selectAll(UncertaintyBar.selector).style("fill-opacity", function(d) {
                    return hasSelection ? (0, _renderUtil__WEBPACK_IMPORTED_MODULE_1__.eR)(d.selected, d.highlight, hasSelection, hasHighlights) : null;
                }).style("stroke-opacity", function(d) {
                    return hasSelection ? (0, _renderUtil__WEBPACK_IMPORTED_MODULE_1__.eR)(d.selected, d.highlight, hasSelection, hasHighlights) : null;
                });
            }), null === (_b = uncertaintyShapes.markerPaths) || void 0 === _b || _b.style("opacity", hasSelection ? (0, 
            _renderUtil__WEBPACK_IMPORTED_MODULE_1__.eR)(!1, !0, hasSelection, hasHighlights) : null), 
            null === (_c = uncertaintyShapes.updateActiveHighlightMarkers) || void 0 === _c || _c.call(uncertaintyShapes, hasSelection, hasHighlights));
        }
        function updateActiveHighlightMarkers(uncertaintyMarkers, uncertaintyLineUpper, uncertaintyLineLower, valueAxisInverted, markerRenderer, hasSelection_, hasHighlights_) {
            hasSelection_ ? setMarkerAttribs(uncertaintyMarkers.selectAll(UncertaintyMarkerActive.selector).data(function(d) {
                return _.map([ "upper", "lower" ], function(type) {
                    return {
                        seriesData: {
                            uncertainty: d.uncertainty,
                            identity: d.identity,
                            data: _.filter(d.data, function(dataPoint) {
                                return dataPoint.selected && dataPoint.uncertainty && (dataPoint.highlight || !hasHighlights_);
                            })
                        },
                        type
                    };
                });
            }).join("path").attr("class", UncertaintyMarkerActive.class).style("stroke-width", "inherit").attr("d", function(d) {
                return "upper" === d.type && !valueAxisInverted || "lower" === d.type && valueAxisInverted ? uncertaintyLineUpper(d.seriesData.data) : uncertaintyLineLower(d.seriesData.data);
            }), markerRenderer) : uncertaintyMarkers.selectAll(UncertaintyMarkerActive.selector).remove();
        }
        function addMarkerProperties(series, markerProps) {
            for (var _i = 0, series_1 = series; _i < series_1.length; _i++) {
                var series_ = series_1[_i];
                markerProps.push(series_.uncertainty.markers), series_.uncertainty.markersFlipped && markerProps.push(series_.uncertainty.markersFlipped);
            }
        }
        function setMarkerAttribs(uncertaintyMarkerPath, markerRenderer) {
            function markerKeyForUncertainty(d) {
                var baseMarkerConfig = d.seriesData.uncertainty.markers;
                switch (d.type) {
                  case "upper":
                    return markerRenderer.getMarkerKey(baseMarkerConfig);

                  case "lower":
                    return markerRenderer.getMarkerKey(d.seriesData.uncertainty.markersFlipped || baseMarkerConfig);

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertNever(d.type);
                }
            }
            uncertaintyMarkerPath.attr("marker-start", markerKeyForUncertainty).attr("marker-mid", markerKeyForUncertainty).attr("marker-end", markerKeyForUncertainty);
        }
        function updateUncertaintyGroupOrder(uncertaintyGroup) {
            (0, _VisualsCommon_helpers_d3Helper__WEBPACK_IMPORTED_MODULE_4__.LL)(uncertaintyGroup, [ UncertaintyAreas, UncertaintyBars, UncertaintyMarkers ]);
        }
    },
    44196: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $w: function() {
                return setUncertaintyTooltipItems;
            },
            O2: function() {
                return formatUncertaintyRelativePercentage;
            },
            Ww: function() {
                return formatUncertaintyByErrorFormat;
            },
            kS: function() {
                return getUncertaintyTooltipItems;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72489), _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77558), _types_markerShape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61193);
        function setUncertaintyTooltipItems(dataPointError, value, viewModel, defaultValueFormat, host, options) {
            if (null != value && null != dataPointError && null != host && viewModel.tooltips.show) {
                var hasLower = null != dataPointError.lower, hasUpper = null != dataPointError.upper, tooltipItems = getUncertaintyTooltipItems(dataPointError, value, viewModel, defaultValueFormat, host, options);
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return viewModel.tooltips.format === _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.range ? 1 === tooltipItems.length : hasLower && hasUpper ? 2 === tooltipItems.length : hasLower || hasUpper ? 1 === tooltipItems.length : 0 === tooltipItems.length;
                }, "setUncertaintyTooltipItems - wrong number of tooltip items added"), viewModel.tooltips.format === _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.range ? dataPointError.rangeTooltip = tooltipItems.shift() : (hasLower && (dataPointError.lowerTooltip = tooltipItems.shift()), 
                hasUpper && (dataPointError.upperTooltip = tooltipItems.shift()));
            }
        }
        function getUncertaintyTooltipItems(dataPointError, value, viewModel, defaultValueFormat, host, options) {
            if (void 0 === options && (options = {}), null != value && null != dataPointError && null != host && viewModel.tooltips.show) {
                var tooltipFormat = viewModel.tooltips.format, _a = formatUncertaintyByErrorFormat(value, dataPointError, tooltipFormat), lower = _a.lower, upper = _a.upper, hideMarker = options.hideMarker, overrideDisplayName = options.overrideDisplayName, formatValue = function(v) {
                    return tooltipFormat === _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.relativePercentage ? formatUncertaintyRelativePercentage(v, host) : defaultValueFormat(v);
                }, tooltipItems = [];
                switch (tooltipFormat) {
                  case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.range:
                    var formattedValue = formatValue(value), formattedLower = null != lower ? formatValue(lower) : "", formattedUpper = null != upper ? formatValue(upper) : "";
                    tooltipItems.push({
                        displayName: overrideDisplayName || host.getLocalizedString("Value"),
                        value: host.getLocalizedString("Visual_Error_Tooltip_Range", formattedValue, formattedLower, formattedUpper)
                    });
                    break;

                  case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.absolute:
                  case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.relativeNumeric:
                  case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.relativePercentage:
                    null != lower && tooltipItems.push({
                        displayName: overrideDisplayName || host.getLocalizedString("Visual_Error_Tooltip_Lower"),
                        value: formatValue(lower),
                        marker: hideMarker ? void 0 : {
                            show: !0,
                            shape: _types_markerShape__WEBPACK_IMPORTED_MODULE_2__.ZO.lowerErrorBar,
                            color: viewModel.bar.color
                        }
                    }), null != upper && tooltipItems.push({
                        displayName: overrideDisplayName || host.getLocalizedString("Visual_Error_Tooltip_Upper"),
                        value: formatValue(upper),
                        marker: hideMarker ? void 0 : {
                            show: !0,
                            shape: _types_markerShape__WEBPACK_IMPORTED_MODULE_2__.ZO.upperErrorBar,
                            color: viewModel.bar.color
                        }
                    });
                    break;

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertNever(tooltipFormat);
                }
                return tooltipItems;
            }
        }
        function formatUncertaintyByErrorFormat(value, dataPointError, tooltipFormat) {
            var lower = dataPointError.lower, upper = dataPointError.upper;
            switch (tooltipFormat) {
              case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.relativeNumeric:
                null != lower && (lower -= value), null != upper && (upper -= value);
                break;

              case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.relativePercentage:
                null != lower && (lower = (lower - value) / value), null != upper && (upper = (upper - value) / value);
                break;

              case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.absolute:
              case _types_errorFormat__WEBPACK_IMPORTED_MODULE_1__.K.range:
                break;

              default:
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertNever(tooltipFormat);
            }
            return {
                lower,
                upper
            };
        }
        function formatUncertaintyRelativePercentage(value, host) {
            return value === -1 / 0 || value === 1 / 0 ? host.getLocalizedString("ManageDatasets_NextRefresh_NA") : (0, 
            _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__.WU)(value, host.getLocalizedString("Percentage"));
        }
    },
    30053: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            a: function() {
                return ViewModelAdapterUtils;
            }
        });
        var _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39681), _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82755), ViewModelAdapterUtils = function() {
            function ViewModelAdapterUtils() {}
            return ViewModelAdapterUtils.getResponsiveVisualProperties = function(dataView, capabilitiesProps) {
                var settings = {
                    responsive: !1,
                    responsiveLegacy: !1
                };
                if (!dataView || !dataView.metadata) return settings;
                var objects = dataView.metadata.objects;
                return objects && (settings.responsive = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__.NA)(objects, capabilitiesProps.general.responsive, settings.responsive), 
                capabilitiesProps.general.responsiveLegacy && (settings.responsiveLegacy = (0, _VisualsData_dataView_dataViewObject2__WEBPACK_IMPORTED_MODULE_0__.NA)(objects, capabilitiesProps.general.responsiveLegacy, settings.responsiveLegacy))), 
                settings;
            }, ViewModelAdapterUtils.cloneData = function(data) {
                var copy = _.cloneDeep(data);
                return (0, _VisualsCommon_Prototype__WEBPACK_IMPORTED_MODULE_1__.Zx)(data, copy), 
                copy;
            }, ViewModelAdapterUtils.shouldApplyResponsiveChanges = function(dataView, capabilitiesProps) {
                return ViewModelAdapterUtils.getResponsiveVisualProperties(dataView, capabilitiesProps).responsive;
            }, ViewModelAdapterUtils;
        }();
    },
    70450: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            x: function() {
                return SvgScrollbar;
            }
        });
        var _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10389), ScrollingMode = function(ScrollingMode) {
            return ScrollingMode[ScrollingMode.None = 0] = "None", ScrollingMode[ScrollingMode.DraggingThumb = 1] = "DraggingThumb", 
            ScrollingMode[ScrollingMode.BackgroundClicked = 2] = "BackgroundClicked", ScrollingMode[ScrollingMode.InitialPagingDelay = 3] = "InitialPagingDelay", 
            ScrollingMode[ScrollingMode.Paging = 4] = "Paging", ScrollingMode;
        }({}), BrushType = function(BrushType) {
            return BrushType[BrushType.none = 0] = "none", BrushType[BrushType.active = 1] = "active", 
            BrushType;
        }({}), SvgScrollbar = function() {
            function SvgScrollbar(options) {
                this.brushType = BrushType.none, this.scrollingMode = ScrollingMode.None, this.brushWidth = options.scrollbarWidth, 
                this.brushContextAdditionalClass = options.scrollbarClass, this.onExtentUpdate = options.onExtentUpdate, 
                this.updateBrushRadius(options.scrollbarRadius);
            }
            return SvgScrollbar.prototype.updateBrushRadius = function(radius) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertAnyValue(radius, "radius can be null"), 
                this.brushRadius = null != radius ? radius : SvgScrollbar.defaultBrushRadius;
            }, SvgScrollbar.prototype.updateScrollbarOptions = function(options) {
                this.brushWidth = options.scrollbarWidth, this.updateBrushRadius(options.scrollbarRadius);
                var brushClass = options.scrollbarClass, oldClassName = this.brushContextAdditionalClass;
                this.brushContextAdditionalClass = brushClass, this.brushGraphicsContext && oldClassName !== brushClass && this.brushGraphicsContext.classed(oldClassName, !1).classed(brushClass, !!brushClass);
            }, SvgScrollbar.prototype.init = function(element) {
                this.element = element;
            }, SvgScrollbar.prototype.remove = function() {
                this.isInitialized = !1, this.element.selectAll(SvgScrollbar.Brush.selector).remove(), 
                this.brush && (this.brush.on(SvgScrollbar.events.start, null).on(SvgScrollbar.events.brush, null).on(SvgScrollbar.events.end, null), 
                this.brush = void 0, this.brushType = BrushType.none), this.brushGraphicsContext = void 0, 
                this.clearRenderingTimeout();
            }, SvgScrollbar.prototype.getExtent = function() {
                return this.extent ? {
                    start: this.extent[0],
                    end: this.extent[1]
                } : {
                    start: 0,
                    end: 0
                };
            }, SvgScrollbar.prototype.setExtent = function(extent) {
                var _a, _b, extentLength, _this = this;
                if (_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return null != extent.start || null != extent.end;
                }, "At least the start or end value for the extent must be given."), null == extent.start || null == extent.end ? (extentLength = this.getExtentLength(), 
                null == extent.start ? extent.start = extent.end - extentLength : extent.end = extent.start + extentLength) : extentLength = extent.end - extent.start, 
                extentLength > this.scrollBarLength) _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return _this.scrollBarLength >= extentLength;
                }, "extentLength should not be greater than scrollBarLength."); else {
                    var oldStart = this.getExtent().start;
                    extent = SvgScrollbar.clampExtent(extent, this.scrollBarLength, extentLength), this.scrollingMode !== ScrollingMode.None && (this.offset = extent.start - oldStart, 
                    this.previousBrushExtent = extent), this.extent = [ extent.start, extent.end ], 
                    this.brushType === BrushType.active && (null === (_b = null === (_a = this.brushGraphicsContext) || void 0 === _a ? void 0 : _a.node().__brush) || void 0 === _b ? void 0 : _b.selection) && (this.brushGraphicsContext.node().__brush.selection = this.isHorizontal ? [ [ extent.start, 0 ], [ extent.end, this.brushWidth ] ] : [ [ 0, extent.start ], [ this.brushWidth, extent.end ] ]);
                }
            }, SvgScrollbar.prototype.getExtentLength = function() {
                var extent = this.getExtent();
                return extent.end - extent.start;
            }, SvgScrollbar.prototype.setExtentLength = function(extentLength) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return extentLength >= 0;
                }, "extentLength must be 0 or greater");
                var extent = this.getExtent();
                extent.end = extent.start + extentLength, this.setExtent(extent);
            }, SvgScrollbar.prototype.setScale = function(scale, noBrush) {
                if (this.brushType = noBrush ? BrushType.none : BrushType.active, this.brushType === BrushType.active) {
                    var rangeExtent = scale.range();
                    this.isHorizontal ? (this.brush = d3.brushX(), this.brush.extent([ [ rangeExtent[0], 0 ], [ rangeExtent[1], this.brushWidth ] ])) : (this.brush = d3.brushY(), 
                    this.brush.extent([ [ 0, rangeExtent[0] ], [ this.brushWidth, rangeExtent[1] ] ]));
                }
            }, SvgScrollbar.prototype.setOrientation = function(isHorizontal) {
                this.isHorizontal = isHorizontal;
            }, SvgScrollbar.prototype.render = function(scrollbarX, scrollbarY, onRefreshVisualCallback, formatMode, subSelectionHelper) {
                var _this = this;
                this.brushGraphicsContext || (this.brushGraphicsContext = this.element.append("g").classed(SvgScrollbar.Brush.class, !0).classed(this.brushContextAdditionalClass, !!this.brushContextAdditionalClass)), 
                this.onRefreshVisualCallback = onRefreshVisualCallback;
                var brushContext = this.brushGraphicsContext.attrs({
                    transform: (0, _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_1__.Iu)(scrollbarX, scrollbarY),
                    "drag-resize-disabled": "true"
                });
                this.brushType !== BrushType.none && (brushContext = brushContext.call(this.brush)), 
                this.brushType !== BrushType.active || this.isInitialized || (this.isInitialized = !0, 
                this.brushGraphicsContext.call(this.brush.move, this.extent)), this.brushType !== BrushType.none && this.brush.on("start", function() {
                    _this.previousBrushExtent = _this.getExtent(), _this.extent = d3.event.selection, 
                    _this.handleDrag();
                }).on("brush", function() {
                    _this.extent = d3.event.selection, formatMode && (null == subSelectionHelper || subSelectionHelper.onVisualScroll()), 
                    _this.handleDrag();
                }).on("end", function() {
                    _this.setExtent(_this.previousBrushExtent), _this.refreshExtent(), _this.previousBrushExtent = null, 
                    _this.startBrushExtent = null, _this.pointerPosition = null, _this.scrollingMode = ScrollingMode.None, 
                    _this.offset = null, null != _this.timeoutId && (window.clearTimeout(_this.timeoutId), 
                    _this.timeoutId = null);
                }), brushContext.selectAll(".handle").remove();
                var rectAttributes = {
                    rx: this.brushRadius,
                    ry: this.brushRadius
                };
                this.isHorizontal ? rectAttributes.height = this.brushWidth : rectAttributes.width = this.brushWidth, 
                brushContext.selectAll("rect").attrs(rectAttributes);
            }, SvgScrollbar.prototype.handleDrag = function() {
                var previousExtentLength = this.previousBrushExtent ? this.previousBrushExtent.end - this.previousBrushExtent.start : 0, newExtent = this.getExtent(), shouldRefreshVisual = !1;
                this.scrollingMode === ScrollingMode.None && (newExtent.start < 0 && 0 === newExtent.end ? newExtent.start = 0 : newExtent.start === this.scrollBarLength && newExtent.end > this.scrollBarLength && (newExtent.end = this.scrollBarLength), 
                this.scrollingMode = SvgScrollbar.isBackgroundClickExtent(newExtent) ? ScrollingMode.BackgroundClicked : ScrollingMode.DraggingThumb, 
                this.startBrushExtent = newExtent), null != this.offset && (newExtent.start += this.offset, 
                newExtent.end += this.offset);
                var extentLength = this.getExtentLength();
                switch (newExtent = SvgScrollbar.clampExtent(newExtent, this.scrollBarLength, extentLength), 
                this.pointerPosition = this.getPointerPosition(), this.scrollingMode) {
                  case ScrollingMode.DraggingThumb:
                    previousExtentLength > 0 && previousExtentLength !== newExtent.end - newExtent.start && (newExtent.end = newExtent.start + previousExtentLength), 
                    shouldRefreshVisual = !0;
                    break;

                  case ScrollingMode.BackgroundClicked:
                    if (SvgScrollbar.CenterOnBackgroundClick) {
                        var halfWidth = extentLength / 2;
                        newExtent.start = this.pointerPosition - halfWidth, newExtent.end = this.pointerPosition + halfWidth;
                    } else {
                        var increasing = newExtent.start > this.previousBrushExtent.start;
                        newExtent = SvgScrollbar.stepExtent(this.previousBrushExtent, increasing), this.scrollingMode = ScrollingMode.InitialPagingDelay, 
                        this.setStepTimeout(increasing, newExtent);
                    }
                    shouldRefreshVisual = !0;
                    break;

                  case ScrollingMode.InitialPagingDelay:
                  case ScrollingMode.Paging:
                    newExtent = this.previousBrushExtent;
                }
                this.onExtentUpdate ? this.onExtentUpdate(newExtent) : (shouldRefreshVisual && this.refreshVisual(), 
                this.setExtent(newExtent), this.refreshExtent(), this.previousBrushExtent = newExtent);
            }, SvgScrollbar.prototype.shouldContinueStepping = function(scrollBarLength, extent) {
                return 0 !== extent.start && extent.end !== scrollBarLength && !(this.pointerPosition >= extent.start && this.pointerPosition <= extent.end);
            }, SvgScrollbar.prototype.getPointerPosition = function() {
                var extent = this.getExtent();
                return SvgScrollbar.isBackgroundClickExtent(this.startBrushExtent) ? extent.start < this.startBrushExtent.start ? extent.start : extent.end : (extent.end - extent.start) / 2;
            }, SvgScrollbar.prototype.refreshExtent = function() {
                var extent = this.getExtent(), extentLength = this.getExtentLength();
                this.brushGraphicsContext.select(".selection").attrs(this.isHorizontal ? {
                    width: extentLength,
                    x: extent.start
                } : {
                    height: extentLength,
                    y: extent.start
                });
            }, SvgScrollbar.prototype.refreshVisual = function() {
                var _this = this;
                this.onRefreshVisualCallback && (this.clearRenderingTimeout(), this.renderTimeoutHandle = window.requestAnimationFrame(function() {
                    _this.renderTimeoutHandle = void 0, _this.onRefreshVisualCallback();
                }));
            }, SvgScrollbar.prototype.clearRenderingTimeout = function() {
                this.renderTimeoutHandle && (window.cancelAnimationFrame(this.renderTimeoutHandle), 
                this.renderTimeoutHandle = void 0), null != this.timeoutId && (clearTimeout(this.timeoutId), 
                this.timeoutId = null);
            }, SvgScrollbar.prototype.refreshExtentAndVisual = function() {
                this.refreshExtent(), this.refreshVisual();
            }, SvgScrollbar.prototype.setStepTimeout = function(increasing, extent) {
                var _this = this;
                this.shouldContinueStepping(this.scrollBarLength, extent) && (this.timeoutId = _.delay(function() {
                    _this.onPagingTimeoutExpired(increasing);
                }, this.scrollingMode === ScrollingMode.InitialPagingDelay ? SvgScrollbar.InitialPagingDelayMS : SvgScrollbar.PagingDelayMS));
            }, SvgScrollbar.isBackgroundClickExtent = function(extent) {
                return extent.start === extent.end;
            }, SvgScrollbar.stepExtent = function(extent, increasing) {
                var length = extent.end - extent.start;
                return extent.start = increasing ? extent.start + length : extent.start - length, 
                extent.end = increasing ? extent.end + length : extent.end - length, extent;
            }, SvgScrollbar.prototype.onPagingTimeoutExpired = function(increasing) {
                this.scrollingMode !== ScrollingMode.Paging && (this.scrollingMode = ScrollingMode.Paging);
                var extent = this.getExtent(), newExtent = SvgScrollbar.stepExtent(extent, increasing);
                this.setExtent(newExtent), this.refreshExtentAndVisual(), this.previousBrushExtent = extent, 
                this.setStepTimeout(increasing, newExtent);
            }, SvgScrollbar.clampExtent = function(extent, scrollBarLength, extentLength) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return scrollBarLength >= extentLength;
                }, "extentLength should not be greater than scrollBarLength"), extent.end > scrollBarLength ? {
                    start: scrollBarLength - extentLength,
                    end: scrollBarLength
                } : extent.start < 0 ? {
                    start: 0,
                    end: extentLength
                } : extent;
            }, SvgScrollbar.InitialPagingDelayMS = 500, SvgScrollbar.PagingDelayMS = 50, SvgScrollbar.defaultBrushRadius = 0, 
            SvgScrollbar.CenterOnBackgroundClick = !1, SvgScrollbar.events = {
                start: "start",
                brush: "brush",
                end: "end"
            }, SvgScrollbar.Brush = (0, _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_2__.CH)("brush"), 
            SvgScrollbar;
        }();
    },
    68983: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            S: function() {
                return SelectMenu;
            }
        });
        var _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38308), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458), _common_slicerHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(45875), SelectMenuAdapter = function() {
            function SelectMenuAdapter($select) {
                this.$select = $select;
            }
            return SelectMenuAdapter.prototype.execute = function(methodName) {
                if (this.$select.selectmenu("instance")) return this.$select.selectmenu(methodName);
            }, SelectMenuAdapter;
        }(), SelectMenu = function() {
            function SelectMenu(settings) {
                this.isOpened = !1, _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertValue(settings.container, "container"), 
                this.settings = settings, this.init(), this.applyStyles(), this.setValue(this.settings.selectedValue);
            }
            return SelectMenu.prototype.destroy = function() {
                this.selectMenu.execute("destroy");
            }, SelectMenu.prototype.update = function(settings) {
                _.extend(this.settings, settings), SelectMenu.populateOptions(this.$select, this.settings.options), 
                null != this.settings.selectedValue && this.setValue(this.settings.selectedValue), 
                this.refresh(), this.applyStyles(), this.applyState();
            }, SelectMenu.prototype.disableOption = function(value) {
                for (var options = this.$select.find("option"), i = 0; i < options.length; i++) {
                    var option = options[i];
                    option.getAttribute("value") === value && option.setAttribute("disabled", "true");
                }
                this.refresh();
            }, SelectMenu.prototype.enableOption = function(value) {
                for (var options = this.$select.find("option"), i = 0; i < options.length; i++) {
                    var option = options[i];
                    option.getAttribute("value") === value && option.setAttribute("disabled", "false");
                }
                this.refresh();
            }, SelectMenu.prototype.close = function() {
                this.selectMenu.execute("close");
            }, SelectMenu.prototype.setValue = function(value) {
                this.$select.val(value);
            }, SelectMenu.prototype.init = function() {
                var _a, _b, _this = this;
                this.$select = (0, _VisualsCommon_Controls_DomFactory__WEBPACK_IMPORTED_MODULE_1__.Ys)(), 
                this.$select.attr("drag-resize-disabled", "true").appendTo(this.settings.container), 
                SelectMenu.populateOptions(this.$select, this.settings.options), this.$select.selectmenu({
                    open: function() {
                        _this.isOpened = !0, _common_slicerHelper__WEBPACK_IMPORTED_MODULE_2__.Ck.fixWidgetPosition(_this.menuWidget, _this.widget, {
                            left: -0,
                            top: 0
                        }, !0);
                    },
                    select: function(event) {
                        event.stopPropagation();
                    },
                    width: "auto",
                    close: function(event) {
                        _this.isOpened = !1, 27 === event.keyCode && (event.stopPropagation(), event.preventDefault());
                    }
                }), this.selectMenu = new SelectMenuAdapter(this.$select), this.settings.onChange && this.$select.on("selectmenuchange", function(event, element) {
                    _this.settings.onChange(element.item.value);
                }), this.applyState(), this.widget = this.selectMenu.execute("widget"), this.settings.title && this.widget.attr("aria-label", this.settings.title), 
                this.widget.attr("role", "combobox").removeAttr("aria-autocomplete"), this.widget.on("keydown", function(event) {
                    40 !== event.keyCode && 38 !== event.keyCode && 37 !== event.keyCode && 39 !== event.keyCode || (_this.isOpened || _this.selectMenu.execute("open"), 
                    event.stopPropagation()), event.preventDefault();
                }), this.menuWidget = null === (_a = this.selectMenu.execute("menuWidget")) || void 0 === _a ? void 0 : _a.parent(), 
                null === (_b = this.menuWidget) || void 0 === _b || _b.addClass(this.settings.className + " themeableElement highContrastBorder");
            }, SelectMenu.prototype.applyState = function() {
                this.selectMenu.execute(this.settings.disabled ? "disable" : "enable");
            }, SelectMenu.prototype.applyStyles = function() {
                this.settings.css && this.widget.css(this.settings.css);
            }, SelectMenu.prototype.refresh = function() {
                this.selectMenu.execute("refresh"), this.updateAria();
            }, SelectMenu.prototype.updateAria = function() {
                var _this = this;
                setTimeout(function() {
                    if (_this.settings.title) _this.widget.removeAttr("aria-labelledby"); else {
                        var selectId = _this.widget.attr("id"), currentLabelledBy = _this.widget.attr("aria-labelledby").replace(selectId, "").trim();
                        _this.widget.attr("aria-labelledby", currentLabelledBy + " " + selectId);
                    }
                    var controlId = _this.widget.attr("aria-owns");
                    null != controlId && (_this.widget.attr("aria-controls", controlId), _this.widget.removeAttr("aria-owns")), 
                    _this.widget.attr("aria-haspopup") && _this.widget.attr("aria-haspopup", "listbox"), 
                    _this.widget.removeAttr("title"), _this.widget.find(".ui-selectmenu-icon").attr("aria-hidden", "true"), 
                    _this.updateMenuItemAria();
                });
            }, SelectMenu.prototype.updateMenuItemAria = function() {
                var _this = this;
                this.menuWidget.find(".ui-menu-item").each(function(_, listItemElement) {
                    var listItem = $(listItemElement);
                    listItem.attr("role", "none");
                    var wrapper = listItem.find(".ui-menu-item-wrapper");
                    listItem.hasClass("ui-state-disabled") && (wrapper.attr("aria-disabled", "true"), 
                    listItem.removeAttr("aria-disabled"));
                    var selectedID = _this.menuWidget.find(".ui-menu").attr("aria-activedescendant");
                    wrapper.attr("aria-selected", function() {
                        return wrapper.attr("id") === selectedID ? "true" : "false";
                    });
                });
            }, SelectMenu.populateOptions = function(select, options) {
                select.find("option").remove();
                for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
                    var option = options_1[_i];
                    $("<option ></option>").attr("value", option.value).text(option.text).appendTo(select);
                }
            }, SelectMenu;
        }();
    },
    72494: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Q: function() {
                return FilledMapLabelLayout;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62458), _common_consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56707), _labelLayout1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63972), _labelPositions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86745), FilledMapLabelLayout = function() {
            function FilledMapLabelLayout() {}
            return FilledMapLabelLayout.prototype.layout = function(labelDataPoints, viewport, polygonInfoTransform, redrawDataLabels) {
                var labelDataPointsLayoutInfo = _.map(labelDataPoints, function(labelDataPoint) {
                    return {
                        labelDataPoint
                    };
                });
                if (redrawDataLabels || void 0 === this.labels) {
                    for (var labelDataPointsGroup = {
                        labelDataPoints: labelDataPointsLayoutInfo,
                        maxNumberOfLabels: labelDataPointsLayoutInfo.length
                    }, _i = 0, labelDataPointsLayoutInfo_1 = labelDataPointsLayoutInfo; _i < labelDataPointsLayoutInfo_1.length; _i++) {
                        var labelDataPointLayoutInfo = labelDataPointsLayoutInfo_1[_i];
                        labelDataPointLayoutInfo.labelSize = {
                            width: (labelPoint = labelDataPointLayoutInfo.labelDataPoint).textSize.width + 2 * _common_consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_0__.Bo,
                            height: labelPoint.textSize.height + 2 * _common_consts_dataLabelViewModel1Consts__WEBPACK_IMPORTED_MODULE_0__.d1
                        };
                    }
                    for (var grid = new _labelLayout1__WEBPACK_IMPORTED_MODULE_1__.qC([ labelDataPointsGroup ], viewport), resultingDataLabels = [], allPolygons = [], _a = 0, labelDataPoints_1 = labelDataPoints; _a < labelDataPoints_1.length; _a++) {
                        var polygon = (labelPoint = labelDataPoints_1[_a]).parentShape.polygon;
                        allPolygons.push(polygon), polygon.pixelBoundingRect = polygonInfoTransform.applyToRect(polygon.absoluteBoundingRect());
                    }
                    for (var shapesgrid = new LabelPolygonArrangeGrid(allPolygons, viewport), _b = 0, labelDataPoints_2 = labelDataPoints; _b < labelDataPoints_2.length; _b++) {
                        var labelPoint, dataLabel = this.getLabelByPolygonPositions(labelPoint = labelDataPoints_2[_b], polygonInfoTransform, grid, shapesgrid);
                        null != dataLabel && resultingDataLabels.push(dataLabel);
                    }
                    this.labels = resultingDataLabels;
                } else this.updateLabelOffsets(polygonInfoTransform);
                return _.filter(this.labels, function(d) {
                    return d.isVisible;
                });
            }, FilledMapLabelLayout.prototype.getLabelPolygon = function(mapDataPoint, position, pointPosition, offset) {
                return this.getLabelBoundingBox({
                    width: mapDataPoint.textSize.width,
                    height: mapDataPoint.textSize.height
                }, position, pointPosition, offset);
            }, FilledMapLabelLayout.prototype.getLabelBoundingBox = function(dataPointSize, position, pointPosition, offset) {
                switch (position) {
                  case 1:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.aE)(dataPointSize, pointPosition, offset);

                  case 2:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.B2)(dataPointSize, pointPosition, offset);

                  case 4:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.t$)(dataPointSize, pointPosition, offset);

                  case 8:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.F2)(dataPointSize, pointPosition, offset);

                  case 128:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.Q$)(dataPointSize, pointPosition, offset);

                  case 64:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.kx)(dataPointSize, pointPosition, offset);

                  case 32:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.I6)(dataPointSize, pointPosition, offset);

                  case 16:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.W7)(dataPointSize, pointPosition, offset);

                  case 256:
                    return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_2__.be)(dataPointSize, pointPosition);

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertFail("Unsupported label position");
                }
                return null;
            }, FilledMapLabelLayout.prototype.getLabelByPolygonPositions = function(labelPoint, polygonInfoTransform, grid, shapesGrid) {
                for (var offset = 0, inverseTransorm = polygonInfoTransform.getInverse(), i = 0; i < 2; i++) {
                    1 === i && (offset = 5);
                    for (var _i = 0, _a = labelPoint.parentShape.validPositions; _i < _a.length; _i++) {
                        var resultingAbsoluteBoundingBox = this.tryPositionForPolygonPosition(position = _a[_i], labelPoint, polygonInfoTransform, offset, inverseTransorm);
                        if ((256 !== position || 0 === i) && resultingAbsoluteBoundingBox) {
                            var resultingBoundingBox = polygonInfoTransform.applyToRect(resultingAbsoluteBoundingBox);
                            return {
                                text: labelPoint.text,
                                secondRowText: labelPoint.secondRowText,
                                boundingBox: resultingBoundingBox,
                                isVisible: !0,
                                fontProperties: {
                                    color: labelPoint.insideFill
                                },
                                identity: null,
                                selected: !1,
                                hasBackground: !0,
                                textAnchor: "middle",
                                originalPixelOffset: offset,
                                isPlacedInsidePolygon: !0,
                                absoluteBoundingBoxCenter: {
                                    x: resultingAbsoluteBoundingBox.left + resultingAbsoluteBoundingBox.width / 2,
                                    y: resultingAbsoluteBoundingBox.top + resultingAbsoluteBoundingBox.height / 2
                                }
                            };
                        }
                    }
                }
                for (var currentOffset = 6; currentOffset <= 60; ) {
                    for (var _b = 0, _c = labelPoint.parentShape.validPositions; _b < _c.length; _b++) {
                        var position;
                        if (256 !== (position = _c[_b])) {
                            var polygon = labelPoint.parentShape.polygon, pixelCentroid = polygonInfoTransform.applyToPoint(polygon.absoluteCentroid()), resultingAbsolutBoundingBox = this.tryPlaceLabelOutsidePolygon(grid, position, labelPoint, currentOffset, pixelCentroid, shapesGrid, inverseTransorm);
                            if (resultingAbsolutBoundingBox) {
                                resultingBoundingBox = polygonInfoTransform.applyToRect(resultingAbsolutBoundingBox);
                                var dataLabel = {
                                    text: labelPoint.text,
                                    secondRowText: labelPoint.secondRowText,
                                    boundingBox: resultingBoundingBox,
                                    isVisible: !0,
                                    fontProperties: {
                                        color: labelPoint.insideFill
                                    },
                                    identity: null,
                                    selected: !1,
                                    hasBackground: !0,
                                    isPlacedInsidePolygon: !1,
                                    textAnchor: "middle",
                                    originalPixelOffset: currentOffset,
                                    originalPosition: position,
                                    originalAbsoluteCentroid: polygon.absoluteCentroid(),
                                    absoluteBoundingBoxCenter: {
                                        x: resultingAbsolutBoundingBox.left + resultingAbsolutBoundingBox.width / 2,
                                        y: resultingAbsolutBoundingBox.top + resultingAbsolutBoundingBox.height / 2
                                    }
                                }, pixelStemSource = this.calculateStemSource(polygonInfoTransform, inverseTransorm, polygon, resultingBoundingBox, position, pixelCentroid);
                                return dataLabel.leaderLinePoints = this.setLeaderLinePoints(pixelStemSource, this.calculateStemDestination(resultingBoundingBox, position)), 
                                dataLabel.absoluteStemSource = inverseTransorm.applyToPoint(pixelStemSource), grid.add(resultingBoundingBox), 
                                dataLabel;
                            }
                        }
                    }
                    currentOffset += 10;
                }
                return null;
            }, FilledMapLabelLayout.prototype.setLeaderLinePoints = function(stemSource, stemDestination) {
                return [ [ stemSource.x, stemSource.y ], [ stemDestination.x, stemDestination.y ] ];
            }, FilledMapLabelLayout.prototype.calculateStemSource = function(polygonInfoTransform, inverseTransorm, polygon, labelBoundingBox, position, pixelCentroid) {
                var absoluteStemSource = polygon.lineIntersectionPoint(polygon.absoluteCentroid(), inverseTransorm.applyToPoint({
                    x: labelBoundingBox.left + labelBoundingBox.width / 2,
                    y: labelBoundingBox.top + labelBoundingBox.height / 2
                }));
                if (null == absoluteStemSource) return pixelCentroid;
                var stemSource = polygonInfoTransform.applyToPoint(absoluteStemSource);
                switch (position) {
                  case 1:
                    stemSource.y += 5;
                    break;

                  case 2:
                    stemSource.y -= 5;
                    break;

                  case 4:
                    stemSource.x += 5;
                    break;

                  case 8:
                    stemSource.x -= 5;
                    break;

                  case 128:
                    stemSource.x += 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.nK, stemSource.y += 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.fB;
                    break;

                  case 64:
                    stemSource.x -= 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.nK, stemSource.y += 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.fB;
                    break;

                  case 32:
                    stemSource.x += 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.nK, stemSource.y -= 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.fB;
                    break;

                  case 16:
                    stemSource.x -= 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.nK, stemSource.y -= 5 / _labelPositions__WEBPACK_IMPORTED_MODULE_2__.fB;
                    break;

                  case 256:
                    break;

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertFail("Unsupported label position");
                }
                return stemSource;
            }, FilledMapLabelLayout.prototype.calculateStemDestination = function(labelBoundingBox, position) {
                var x, y;
                switch (position) {
                  case 1:
                    x = labelBoundingBox.left + labelBoundingBox.width / 2, y = labelBoundingBox.top + labelBoundingBox.height;
                    break;

                  case 2:
                    x = labelBoundingBox.left + labelBoundingBox.width / 2, y = labelBoundingBox.top;
                    break;

                  case 4:
                    x = labelBoundingBox.left + labelBoundingBox.width, y = labelBoundingBox.top + labelBoundingBox.height / 2;
                    break;

                  case 8:
                    x = labelBoundingBox.left, y = labelBoundingBox.top + labelBoundingBox.height / 2;
                    break;

                  case 128:
                    x = labelBoundingBox.left + labelBoundingBox.width, y = labelBoundingBox.top + labelBoundingBox.height;
                    break;

                  case 64:
                    x = labelBoundingBox.left, y = labelBoundingBox.top + labelBoundingBox.height;
                    break;

                  case 32:
                    x = labelBoundingBox.left + labelBoundingBox.width, y = labelBoundingBox.top;
                    break;

                  case 16:
                    x = labelBoundingBox.left, y = labelBoundingBox.top;
                    break;

                  case 256:
                    break;

                  default:
                    _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_3__.fF.assertFail("Unsupported label position");
                }
                return {
                    x,
                    y
                };
            }, FilledMapLabelLayout.prototype.tryPositionForPolygonPosition = function(position, labelDataPoint, polygonInfoTransform, offset, inverseTransorm) {
                var polygon = labelDataPoint.parentShape.polygon, pixelCentroid = polygonInfoTransform.applyToPoint(polygon.absoluteCentroid()), labelRect = this.getLabelPolygon(labelDataPoint, position, pixelCentroid, offset), absoluteLabelRect = this.getAbsoluteRectangle(inverseTransorm, labelRect);
                return polygon.contains(absoluteLabelRect) ? absoluteLabelRect : null;
            }, FilledMapLabelLayout.prototype.tryPlaceLabelOutsidePolygon = function(grid, position, labelDataPoint, offset, pixelCentroid, shapesGrid, inverseTransform) {
                var labelRect = this.getLabelPolygon(labelDataPoint, position, pixelCentroid, offset);
                if (!grid.hasConflict(labelRect)) {
                    var absoluteLabelRect = this.getAbsoluteRectangle(inverseTransform, labelRect);
                    if (!shapesGrid.hasConflict(absoluteLabelRect, labelRect)) return absoluteLabelRect;
                }
                return null;
            }, FilledMapLabelLayout.prototype.updateLabelOffsets = function(polygonInfoTransform) {
                for (var _i = 0, _a = this.labels; _i < _a.length; _i++) {
                    var label = _a[_i];
                    if (label.isVisible) if (label.isPlacedInsidePolygon) {
                        var newOffset = polygonInfoTransform.applyToPoint(label.absoluteBoundingBoxCenter), xDelta = label.boundingBox.left + label.boundingBox.width / 2 - newOffset.x;
                        label.boundingBox.top -= label.boundingBox.top + label.boundingBox.height / 2 - newOffset.y, 
                        label.boundingBox.left -= xDelta;
                    } else {
                        var stemSourcePoint = polygonInfoTransform.applyToPoint(label.absoluteStemSource), pixelCentroid = polygonInfoTransform.applyToPoint(label.originalAbsoluteCentroid);
                        label.boundingBox = this.getLabelBoundingBox({
                            width: label.boundingBox.width,
                            height: label.boundingBox.height
                        }, label.originalPosition, pixelCentroid, label.originalPixelOffset), void 0 !== label.leaderLinePoints && (label.leaderLinePoints = this.setLeaderLinePoints(stemSourcePoint, this.calculateStemDestination(label.boundingBox, label.originalPosition)));
                    }
                }
            }, FilledMapLabelLayout.prototype.getAbsoluteRectangle = function(inverseTransorm, rect) {
                return inverseTransorm.applyToRect(rect);
            }, FilledMapLabelLayout;
        }(), LabelPolygonArrangeGrid = function() {
            function LabelPolygonArrangeGrid(polygons, viewport) {
                for (var maxPolygonWidth = 0, maxPolygonHeight = 0, _i = 0, polygons_1 = polygons; _i < polygons_1.length; _i++) {
                    var polygonSize = polygons_1[_i].pixelBoundingRect;
                    polygonSize.width > maxPolygonWidth && (maxPolygonWidth = polygonSize.width), polygonSize.height > maxPolygonHeight && (maxPolygonHeight = polygonSize.height);
                }
                0 === maxPolygonWidth && (maxPolygonWidth = viewport.width), 0 === maxPolygonHeight && (maxPolygonHeight = viewport.height);
                var cellSize = this.cellSize = {
                    width: maxPolygonWidth * LabelPolygonArrangeGrid.cellSizeMultiplier,
                    height: maxPolygonHeight * LabelPolygonArrangeGrid.cellSizeMultiplier
                };
                this.columnCount = LabelPolygonArrangeGrid.getCellCount(cellSize.width, viewport.width, 1, 100), 
                this.rowCount = LabelPolygonArrangeGrid.getCellCount(cellSize.height, viewport.height, 1, 100);
                for (var grid = [], i = 0, ilen = this.columnCount; i < ilen; i++) {
                    grid[i] = [];
                    for (var j = 0, jlen = this.rowCount; j < jlen; j++) grid[i][j] = [];
                }
                this.grid = grid;
                for (var _a = 0, polygons_2 = polygons; _a < polygons_2.length; _a++) this.add(polygons_2[_a]);
            }
            return LabelPolygonArrangeGrid.prototype.hasConflict = function(absolutLabelRect, pixelLabelRect) {
                for (var containingIndexRect = this.getContainingGridSubsection(pixelLabelRect), grid = this.grid, x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) for (var _i = 0, _a = grid[x][y]; _i < _a.length; _i++) if (_a[_i].conflicts(absolutLabelRect)) return !0;
                return !1;
            }, LabelPolygonArrangeGrid.prototype.add = function(polygon) {
                for (var containingIndexRect = this.getContainingGridSubsection(polygon.pixelBoundingRect), x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) this.grid[x][y].push(polygon);
            }, LabelPolygonArrangeGrid.prototype.getContainingGridSubsection = function(rect) {
                return {
                    xMin: LabelPolygonArrangeGrid.bound(Math.floor(rect.left / this.cellSize.width), 0, this.columnCount),
                    xMax: LabelPolygonArrangeGrid.bound(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.columnCount),
                    yMin: LabelPolygonArrangeGrid.bound(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
                    yMax: LabelPolygonArrangeGrid.bound(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
                };
            }, LabelPolygonArrangeGrid.getCellCount = function(step, length, minCount, maxCount) {
                return LabelPolygonArrangeGrid.bound(Math.ceil(length / step), minCount, maxCount);
            }, LabelPolygonArrangeGrid.bound = function(value, min, max) {
                return Math.max(Math.min(value, max), min);
            }, LabelPolygonArrangeGrid.cellSizeMultiplier = 2, LabelPolygonArrangeGrid;
        }();
    },
    43906: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            F: function() {
                return defaultFormatter;
            },
            S: function() {
                return fallbackBasedOnType;
            }
        });
        var _common_converterHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(54522);
        function defaultFormatter(formatStringProp) {
            return function(value, source, formatString) {
                return (0, _common_converterHelper__WEBPACK_IMPORTED_MODULE_0__.xq)(value, source, formatStringProp, !0, formatString);
            };
        }
        function fallbackBasedOnType(formatStringProp) {
            return function(value, source, formatString) {
                return (0, _common_converterHelper__WEBPACK_IMPORTED_MODULE_0__.xq)(value, source, formatStringProp, !1, formatString);
            };
        }
    },
    63972: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            qC: function() {
                return LabelArrangeGrid;
            },
            nu: function() {
                return LabelLayout;
            }
        });
        var tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), Double = __webpack_require__(41640), shapes6 = __webpack_require__(80758), dataLabelViewModel1Consts = __webpack_require__(56707), fontProperties = __webpack_require__(18664), types_labelOrientation = __webpack_require__(20624), labelPositions = __webpack_require__(86745);
        function getLabelRect(labelDataPointLayoutInfo, position, offset) {
            var parentRect = labelDataPointLayoutInfo.labelDataPoint.parentShape;
            if (null != parentRect) switch (position) {
              case 1:
              case 32:
                switch (parentRect.orientation) {
                  case 1:
                  case 2:
                    return (0, labelPositions.Vq)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                  case 4:
                    return (0, labelPositions.um)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);
                }

              case 2:
              case 64:
                switch (parentRect.orientation) {
                  case 1:
                    return (0, labelPositions.jb)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return (0, labelPositions.ug)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return (0, labelPositions.e6)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return (0, labelPositions.QS)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);
                }

              case 4:
              case 128:
                switch (parentRect.orientation) {
                  case 1:
                    return (0, labelPositions.ug)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return (0, labelPositions.jb)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return (0, labelPositions.QS)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return (0, labelPositions.e6)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);
                }

              case 8:
                switch (parentRect.orientation) {
                  case 1:
                    return (0, labelPositions.O5)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return (0, labelPositions.ZN)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return (0, labelPositions._f)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return (0, labelPositions.cx)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);
                }

              case 16:
                switch (parentRect.orientation) {
                  case 1:
                    return (0, labelPositions.ZN)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 2:
                    return (0, labelPositions.O5)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 3:
                    return (0, labelPositions.cx)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);

                  case 4:
                    return (0, labelPositions._f)(labelDataPointLayoutInfo.labelSize, parentRect.rect, offset);
                }

              default:
                debug.fF.assertFail("Unsupported label position");
            }
            return null;
        }
        var labelLayout3 = __webpack_require__(54086), dataLabelUtil = __webpack_require__(46769), dataLabelPointContainerChecker = __webpack_require__(19744), dataLabelContainerTruncation = __webpack_require__(45028), labelContentLayout = __webpack_require__(63892), LabelArrangeGrid = function() {
            function LabelArrangeGrid(labelDataPointGroups, viewport) {
                this.viewport = viewport;
                for (var maxLabelWidth = 0, maxLabelHeight = 0, _i = 0, labelDataPointGroups_1 = labelDataPointGroups; _i < labelDataPointGroups_1.length; _i++) for (var _a = 0, _b = labelDataPointGroups_1[_i].labelDataPoints; _a < _b.length; _a++) {
                    var dataLabelSize = _b[_a].labelSize;
                    dataLabelSize.width > maxLabelWidth && (maxLabelWidth = dataLabelSize.width), dataLabelSize.height > maxLabelHeight && (maxLabelHeight = dataLabelSize.height);
                }
                0 === maxLabelWidth && (maxLabelWidth = viewport.width), 0 === maxLabelHeight && (maxLabelHeight = viewport.height);
                var cellSize = this.cellSize = {
                    width: maxLabelWidth * LabelArrangeGrid.cellSizeMultiplier,
                    height: maxLabelHeight * LabelArrangeGrid.cellSizeMultiplier
                };
                this.columnCount = LabelArrangeGrid.getCellCount(cellSize.width, viewport.width, 1, 100), 
                this.rowCount = LabelArrangeGrid.getCellCount(cellSize.height, viewport.height, 1, 100);
                for (var grid = [], i = 0, ilen = this.columnCount; i < ilen; i++) {
                    grid[i] = [];
                    for (var j = 0, jlen = this.rowCount; j < jlen; j++) grid[i][j] = [];
                }
                this.grid = grid;
            }
            return LabelArrangeGrid.prototype.add = function(rect) {
                var _this = this;
                debug.fF.assert(function() {
                    return (0, Double.bA)(rect.left, 0) && (0, Double.bl)(rect.left + rect.width, _this.viewport.width) && (0, 
                    Double.bA)(rect.top, 0) && (0, Double.bl)(rect.top + rect.height, _this.viewport.height);
                }, "LabelArrangeGrid.add received a rectangle outside the grid");
                for (var containingIndexRect = this.getContainingGridSubsection(rect), x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) this.grid[x][y].push(rect);
            }, LabelArrangeGrid.prototype.addCheckSeries = function(rect) {
                for (var containingIndexRect = this.getContainingGridSubsection(rect), x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) this.grid[x][y].push(rect);
            }, LabelArrangeGrid.prototype.hasConflict = function(rect) {
                return !this.isWithinGridViewport(rect) || this.hasCollision(rect);
            }, LabelArrangeGrid.prototype.tryPositionInViewport = function(rect) {
                if (this.isCloseToGridViewport(rect)) return this.isWithinGridViewport(rect) || (rect = this.tryMoveInsideViewport(rect)), 
                rect && !this.hasCollision(rect) ? rect : void 0;
            }, LabelArrangeGrid.prototype.trySeriesLabelPositionInViewport = function(rect) {
                if (this.isCloseToGridViewport(rect)) return this.isWithinGridViewport(rect) || (rect = this.trySeriesLabelMoveInsideViewport(rect)), 
                rect && !this.hasCollision(rect) ? rect : void 0;
            }, LabelArrangeGrid.prototype.hasCollision = function(rect) {
                for (var containingIndexRect = this.getContainingGridSubsection(rect), grid = this.grid, isIntersecting = shapes6.HL, x = containingIndexRect.xMin; x < containingIndexRect.xMax; x++) for (var y = containingIndexRect.yMin; y < containingIndexRect.yMax; y++) for (var _i = 0, _a = grid[x][y]; _i < _a.length; _i++) if (isIntersecting(_a[_i], rect)) return !0;
                return !1;
            }, LabelArrangeGrid.prototype.isWithinGridViewport = function(rect) {
                return rect.left >= 0 && rect.top >= 0 && rect.left + rect.width <= this.viewport.width && rect.top + rect.height <= this.viewport.height;
            }, LabelArrangeGrid.prototype.isCloseToGridViewport = function(rect) {
                return rect.left + rect.width >= 0 - rect.width && rect.top + rect.height >= -rect.height && rect.left <= this.viewport.width + rect.width && rect.top <= this.viewport.height + rect.height;
            }, LabelArrangeGrid.prototype.tryMoveInsideViewport = function(rect) {
                var result = (0, shapes6.d9)(rect), viewport = this.viewport;
                if (!(rect.width > viewport.width || rect.height > viewport.height)) return rect.left < 0 ? result.left = 0 : rect.left + rect.width > viewport.width && (result.left -= rect.left + rect.width - viewport.width), 
                rect.top < 0 ? result.top = 0 : rect.top + rect.height > viewport.height && (result.top -= rect.top + rect.height - viewport.height), 
                result;
            }, LabelArrangeGrid.prototype.trySeriesLabelMoveInsideViewport = function(rect) {
                var result = (0, shapes6.d9)(rect), viewport = this.viewport;
                if (!(rect.height > viewport.height)) return rect.left < 0 && (result.left = 0), 
                rect.top < 0 ? result.top = 0 : rect.top + rect.height > viewport.height && (result.top -= rect.top + rect.height - viewport.height), 
                result;
            }, LabelArrangeGrid.prototype.getContainingGridSubsection = function(rect) {
                return {
                    xMin: LabelArrangeGrid.bound(Math.floor(rect.left / this.cellSize.width), 0, this.columnCount),
                    xMax: LabelArrangeGrid.bound(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.columnCount),
                    yMin: LabelArrangeGrid.bound(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
                    yMax: LabelArrangeGrid.bound(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
                };
            }, LabelArrangeGrid.getCellCount = function(step, length, minCount, maxCount) {
                return LabelArrangeGrid.bound(Math.ceil(length / step), minCount, maxCount);
            }, LabelArrangeGrid.bound = function(value, min, max) {
                return Math.max(Math.min(value, max), min);
            }, LabelArrangeGrid.cellSizeMultiplier = 2, LabelArrangeGrid;
        }(), LabelLayout = function() {
            function LabelLayout(options) {
                this.startingOffset = options.startingOffset, this.maximumOffset = options.maximumOffset, 
                null != options.offsetIterationDelta ? (debug.fF.assert(function() {
                    return options.offsetIterationDelta > 0;
                }, "label offset delta must be greater than 0"), this.offsetIterationDelta = options.offsetIterationDelta) : this.offsetIterationDelta = LabelLayout.defaultOffsetIterationDelta, 
                this.horizontalPadding = null != options.horizontalPadding ? options.horizontalPadding : LabelLayout.defaultHorizontalPadding, 
                this.verticalPadding = null != options.verticalPadding ? options.verticalPadding : LabelLayout.defaultVerticalPadding, 
                this.shrinkLeaderLinesForBestFit = !!options.shrinkLeaderLinesForBestFit, this.drawLeaderLinesIgnoreOffset = !!options.drawLeaderLinesIgnoreOffset, 
                this.allowLeaderLines = !!options.allowLeaderLines, this.attemptToMoveLabelsIntoViewport = !!options.attemptToMoveLabelsIntoViewport;
            }
            return LabelLayout.prototype.computeLabelSize = function(labelInstance, labelInstanceOrientation) {
                var _a, computeTextWidthAndHeight = function(label) {
                    var size = {
                        width: 0,
                        height: 0
                    }, _a = label.textSize, width = _a.width, height = _a.height;
                    return labelInstanceOrientation === types_labelOrientation.B.Vertical ? (size.width = height, 
                    size.height = width) : (size.width = width, size.height = height), labelInstance.wordBreak && (size.height += label.fontProperties.size.px), 
                    size;
                }, size = {
                    width: 0,
                    height: 0
                };
                if ((0, dataLabelPointContainerChecker.r)(labelInstance)) for (var labelCount = labelInstance.labelDataPointContents.length, i = 0; i < labelCount; i++) {
                    var contentLayout = labelInstance.contentLayout, width = (_a = computeTextWidthAndHeight(labelInstance.labelDataPointContents[i])).width, height = _a.height, isVertical = labelInstanceOrientation === types_labelOrientation.B.Vertical;
                    if ("MultiLine" === contentLayout) if (isVertical) {
                        var spacing = 0 !== i ? dataLabelViewModel1Consts.i1 : 0;
                        size.width = Math.max(size.width, height), size.height += width + spacing;
                    } else spacing = 0 !== i ? dataLabelViewModel1Consts.i1 : 0, size.width = Math.max(size.width, width), 
                    size.height += height + spacing; else "SingleLine" === contentLayout && (isVertical ? (spacing = 0 !== i ? dataLabelViewModel1Consts.uM : 0, 
                    size.width = Math.max(size.width, width), size.height += height + spacing) : (size.width += width + (spacing = 0 !== i ? dataLabelViewModel1Consts.uM : 0), 
                    size.height = Math.max(size.height, height)));
                } else size = computeTextWidthAndHeight(labelInstance);
                return labelInstance.hasBackground ? labelInstanceOrientation === types_labelOrientation.B.Vertical ? {
                    width: size.width + 2 * dataLabelViewModel1Consts.d1,
                    height: size.height + 2 * dataLabelViewModel1Consts.Bo
                } : {
                    width: size.width + 2 * dataLabelViewModel1Consts.Bo,
                    height: size.height + 2 * dataLabelViewModel1Consts.d1
                } : size;
            }, LabelLayout.prototype.layout = function(arg0, viewport) {
                for (var labelDataPointsGroupsLayoutInfo = [], _i = 0, labelDataPointsGroups_1 = arg0; _i < labelDataPointsGroups_1.length; _i++) {
                    for (var labelDataPointsGroup = labelDataPointsGroups_1[_i], labelDataPointsLayoutInfo = _.map(labelDataPointsGroup.labelDataPoints, function(labelDataPoint) {
                        return {
                            labelDataPoint
                        };
                    }), labelGroupOrientation = labelDataPointsGroup.labelOrientation, _a = 0, labelDataPointsLayoutInfo_1 = labelDataPointsLayoutInfo; _a < labelDataPointsLayoutInfo_1.length; _a++) {
                        var labelDataPointLayoutInfo = labelDataPointsLayoutInfo_1[_a];
                        labelDataPointLayoutInfo.hasBeenRendered = !1, labelDataPointLayoutInfo.labelSize = this.computeLabelSize(labelDataPointLayoutInfo.labelDataPoint, labelGroupOrientation);
                    }
                    labelDataPointsGroupsLayoutInfo.push({
                        labelDataPoints: labelDataPointsLayoutInfo,
                        maxNumberOfLabels: labelDataPointsGroup.maxNumberOfLabels,
                        labelOrientation: labelDataPointsGroup.labelOrientation,
                        offset: labelDataPointsGroup.offset
                    });
                }
                for (var resultingDataLabels = [], grid = new LabelArrangeGrid(labelDataPointsGroupsLayoutInfo, viewport), hasMultipleDataSeries = labelDataPointsGroupsLayoutInfo.length > 1, _b = 0, labelDataPointsGroupsLayoutInfo_1 = labelDataPointsGroupsLayoutInfo; _b < labelDataPointsGroupsLayoutInfo_1.length; _b++) {
                    for (var labelDataPointsGroupLayoutInfo = labelDataPointsGroupsLayoutInfo_1[_b], maxLabelsToRender = labelDataPointsGroupLayoutInfo.maxNumberOfLabels, preferredLabels = (labelDataPointsLayoutInfo = _.clone(labelDataPointsGroupLayoutInfo.labelDataPoints), 
                    []), j = (labelGroupOrientation = labelDataPointsGroupLayoutInfo.labelOrientation, 
                    labelDataPointsLayoutInfo.length - 1), localMax = maxLabelsToRender; j >= 0 && localMax > 0; j--) labelDataPointsLayoutInfo[j].labelDataPoint.isPreferred && (preferredLabels.unshift(labelDataPointsLayoutInfo.splice(j, 1)[0]), 
                    localMax--);
                    if (preferredLabels.length > 0 && (maxLabelsToRender -= (positionedLabels = this.positionDataLabels(preferredLabels, viewport, grid, maxLabelsToRender, labelGroupOrientation, hasMultipleDataSeries, labelDataPointsGroupLayoutInfo.offset)).length, 
                    resultingDataLabels = resultingDataLabels.concat(positionedLabels)), labelDataPointsLayoutInfo.length > 0) {
                        var positionedLabels = this.positionDataLabels(labelDataPointsLayoutInfo, viewport, grid, maxLabelsToRender, labelGroupOrientation, hasMultipleDataSeries, labelDataPointsGroupLayoutInfo.offset);
                        resultingDataLabels = resultingDataLabels.concat(positionedLabels);
                    }
                }
                return this.filterLabelInstancesByVisibility(resultingDataLabels);
            }, LabelLayout.prototype.filterLabelInstancesByVisibility = function(unfilteredDataLabels) {
                return _.filter(unfilteredDataLabels, function(d) {
                    return (0, dataLabelUtil.CC)(label = d) ? label.labelContents.some(function(labelContent) {
                        return labelContent.isVisible;
                    }) : label.isVisible;
                    var label;
                });
            }, LabelLayout.prototype.drawLeaderLinesOnIteration = function(currentOffset, labelDataPointLayoutInfo) {
                var _a;
                if (!this.allowLeaderLines) return !1;
                var labelDataPoint = labelDataPointLayoutInfo.labelDataPoint;
                return !((0, dataLabelPointContainerChecker.r)(labelDataPoint) ? labelDataPoint.labelDataPointContents.every(function(labelContent) {
                    return _.isEmpty(labelContent.text);
                }) : _.isEmpty(labelDataPoint.text)) && (!(!this.drawLeaderLinesIgnoreOffset || !(null === (_a = labelDataPoint.leaderLine) || void 0 === _a ? void 0 : _a.strokeShow)) || currentOffset > this.startingOffset);
            }, LabelLayout.prototype.determineMaximumOffset = function(minimumOffset, offset) {
                var _a, maxOffset = null !== (_a = null == offset ? void 0 : offset.max) && void 0 !== _a ? _a : this.maximumOffset;
                return minimumOffset >= maxOffset ? minimumOffset : maxOffset;
            }, LabelLayout.prototype.positionDataLabels = function(labelDataPointsLayoutInfo, viewport, grid, maxLabelsToRender, labelOrientation, hasMultipleDataSeries, offset) {
                for (var _a, resultingDataLabels = [], offsetDelta = this.offsetIterationDelta, currentCenteredOffset = 0, labelsRendered = 0, minimumOffset = null !== (_a = null == offset ? void 0 : offset.min) && void 0 !== _a ? _a : this.startingOffset, maximumOffset = this.determineMaximumOffset(minimumOffset, offset), currentOffset = minimumOffset; currentOffset <= maximumOffset && labelsRendered < maxLabelsToRender; ) {
                    for (var _i = 0, labelDataPointsLayoutInfo_2 = labelDataPointsLayoutInfo; _i < labelDataPointsLayoutInfo_2.length; _i++) {
                        var labelDataPointLayoutInfo = labelDataPointsLayoutInfo_2[_i];
                        if (!labelDataPointLayoutInfo.hasBeenRendered) {
                            var dataLabel = void 0;
                            if (1 === labelDataPointLayoutInfo.labelDataPoint.parentType) dataLabel = this.tryPositionForRectPositions(labelDataPointLayoutInfo, grid, currentOffset, currentCenteredOffset, labelOrientation, hasMultipleDataSeries); else {
                                var leaderLineEnabled = this.drawLeaderLinesOnIteration(currentOffset, labelDataPointLayoutInfo);
                                dataLabel = this.tryPositionForPointPositions(labelDataPointLayoutInfo, grid, currentOffset, leaderLineEnabled, labelOrientation);
                            }
                            if (dataLabel && (resultingDataLabels.push(dataLabel), labelsRendered++), !(labelsRendered < maxLabelsToRender)) break;
                        }
                    }
                    currentOffset += offsetDelta, currentCenteredOffset += offsetDelta;
                }
                return resultingDataLabels;
            }, LabelLayout.prototype.tryPositionForRectPositions = function(labelDataPointLayoutInfo, grid, currentLabelOffset, currentCenteredLabelOffset, labelOrientation, hasMultipleDataSeries) {
                var _this = this, labelDataPoint = labelDataPointLayoutInfo.labelDataPoint, tryPosition = function(position, adjustForViewport, truncatePercent) {
                    void 0 === truncatePercent && (truncatePercent = 0), function(truncatePercent) {
                        var _a, _b, _c, _d;
                        if (truncatePercent > 0 && (0, dataLabelPointContainerChecker.r)(labelDataPoint)) {
                            var labelWidth = labelOrientation === types_labelOrientation.B.Vertical ? null !== (_b = null === (_a = labelDataPointLayoutInfo.labelSize) || void 0 === _a ? void 0 : _a.height) && void 0 !== _b ? _b : 0 : null !== (_d = null === (_c = labelDataPointLayoutInfo.labelSize) || void 0 === _c ? void 0 : _c.width) && void 0 !== _d ? _d : 0;
                            (0, dataLabelContainerTruncation._u)(labelDataPoint.labelDataPointContents, labelWidth * (1 - truncatePercent), "SingleLine" === labelDataPoint.contentLayout ? labelContentLayout.v.SingleLine : labelContentLayout.v.MultiLine), 
                            labelDataPointLayoutInfo.labelSize = _this.computeLabelSize(labelDataPoint, labelOrientation);
                        }
                    }(truncatePercent);
                    var resultingBoundingBox = LabelLayout.tryPositionRect(grid, position, labelDataPointLayoutInfo, currentLabelOffset, currentCenteredLabelOffset, adjustForViewport);
                    return resultingBoundingBox && function(position, resultingBoundingBox) {
                        var labelRect, labelPoint, horizontalPadding, verticalPadding, parentRect, labelRectWithPadding, isOverflowPosition = !!(224 & position);
                        return !(7 & position && (labelRect = resultingBoundingBox, labelPoint = labelDataPoint, 
                        horizontalPadding = _this.horizontalPadding, verticalPadding = _this.verticalPadding, 
                        parentRect = labelPoint.parentShape.rect, labelRectWithPadding = (0, shapes6.rr)(labelRect, {
                            left: horizontalPadding,
                            right: horizontalPadding,
                            top: verticalPadding,
                            bottom: verticalPadding
                        }), !(0, shapes6.BD)(parentRect, {
                            x: labelRectWithPadding.left,
                            y: labelRectWithPadding.top
                        }) || !(0, shapes6.BD)(parentRect, {
                            x: labelRectWithPadding.left + labelRectWithPadding.width,
                            y: labelRectWithPadding.top + labelRectWithPadding.height
                        })) || isOverflowPosition && !function(labelRect, labelPoint, hasMultipleDataSeries) {
                            var parentRect = labelPoint.parentShape.rect;
                            if (!(0, shapes6.HL)(labelRect, parentRect)) return !1;
                            var intersection = (0, shapes6.wf)(labelRect, parentRect), precision = equalityPrecision, isLabelContainedVertically = (0, 
                            Double.GG)(intersection.top, labelRect.top, precision) && (0, Double.GG)(intersection.height, labelRect.height, precision), isLabelContainedHorizontally = (0, 
                            Double.GG)(intersection.left, labelRect.left, precision) && (0, Double.GG)(intersection.width, labelRect.width, precision), isParentOrientVertically = _.includes([ 1, 2 ], labelPoint.parentShape.orientation);
                            if (!isLabelContainedHorizontally && !isLabelContainedVertically || hasMultipleDataSeries && (isParentOrientVertically && !isLabelContainedVertically || !isParentOrientVertically && !isLabelContainedHorizontally)) return !1;
                            if (isLabelContainedHorizontally && isLabelContainedVertically) return !0;
                            var labelAndParentIntersectEnough = function(labelRect, parentRect) {
                                var parentRectArea = parentRect.width * parentRect.height, labelPointArea = labelRect.width * labelRect.height, maxArea = Math.max(parentRectArea, labelPointArea);
                                if (0 === maxArea) return 0;
                                var minArea = Math.min(parentRectArea, labelPointArea), minimalAreaNotZero = 0 !== minArea ? minArea : maxArea, intersectionRect = (0, 
                                shapes6.wf)(parentRect, labelRect);
                                return intersectionRect.width * intersectionRect.height / minimalAreaNotZero;
                            }(labelRect, parentRect) >= minIntersectionRatio, labelOverflowIsValid = !1;
                            return isLabelContainedVertically ? labelOverflowIsValid = 0 === parentRect.width || parentRect.width / labelRect.width > labelLayout3.w : isLabelContainedHorizontally && (labelOverflowIsValid = 0 === parentRect.height || parentRect.height / labelRect.height > labelLayout3.w), 
                            labelAndParentIntersectEnough && labelOverflowIsValid;
                        }(resultingBoundingBox, labelDataPoint, hasMultipleDataSeries));
                    }(position, resultingBoundingBox) ? (grid.add(resultingBoundingBox), labelDataPointLayoutInfo.hasBeenRendered = !0, 
                    _this.createLabelInstanceForRectPosition(labelDataPoint, labelOrientation, resultingBoundingBox, position)) : null;
                }, validPositions = labelDataPoint.parentShape.validPositions, attemptLabelPositioning = function attemptLabelPositioning(adjustForViewport, truncate, iteration) {
                    void 0 === truncate && (truncate = !1), void 0 === iteration && (iteration = 0);
                    for (var truncatePercent = truncate ? .03 * (iteration + 1) : 0, _i = 0, validPositions_1 = validPositions; _i < validPositions_1.length; _i++) {
                        var label = tryPosition(validPositions_1[_i], adjustForViewport, truncatePercent);
                        if (label) return label;
                    }
                    return !truncate || iteration >= 33.333333333333336 ? null : attemptLabelPositioning(adjustForViewport, truncate, iteration + 1);
                }, tryPositionWithoutMoving = attemptLabelPositioning(!1);
                if (tryPositionWithoutMoving) return tryPositionWithoutMoving;
                if (this.attemptToMoveLabelsIntoViewport) {
                    var tryPositionWithMoving = attemptLabelPositioning(!0);
                    if (tryPositionWithMoving) return tryPositionWithMoving;
                }
            }, LabelLayout.prototype.createLabelInstanceForRectPosition = function(labelDataPoint, labelOrientation, resultingBoundingBox, position) {
                var isInsideOrOverflowPosition = !!(231 & position), commonProperties = {
                    boundingBox: resultingBoundingBox,
                    tooltip: labelDataPoint.tooltip,
                    isVisible: !0,
                    identity: labelDataPoint.identity,
                    key: labelDataPoint.key,
                    hasBackground: labelDataPoint.hasBackground,
                    labelOrientation,
                    backgroundColor: labelDataPoint.backgroundColor,
                    backgroundTransparency: labelDataPoint.backgroundTransparency
                };
                if ((0, dataLabelPointContainerChecker.r)(labelDataPoint)) {
                    var labelContents = labelDataPoint.labelDataPointContents.map(function(labelDataPointContent) {
                        return {
                            text: labelDataPointContent.text,
                            role: labelDataPointContent.role,
                            transparency: labelDataPointContent.transparency,
                            fontProperties: (0, fontProperties.ED)(labelDataPointContent.fontProperties, {
                                color: (dataPointContent = labelDataPointContent, isInsideOrOverflowPosition ? dataPointContent.insideFill : dataPointContent.outsideFill)
                            }),
                            isVisible: !0,
                            textSize: labelDataPointContent.textSize
                        };
                        var dataPointContent;
                    });
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonProperties), {
                        labelContents,
                        wordBreak: labelDataPoint.wordBreak,
                        contentLayout: labelDataPoint.contentLayout,
                        textAnchor: "unset",
                        alignment: labelDataPoint.alignment
                    });
                }
                var fillColor = isInsideOrOverflowPosition ? labelDataPoint.insideFill : labelDataPoint.outsideFill;
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonProperties), {
                    text: labelDataPoint.text,
                    fontProperties: (0, fontProperties.ED)(labelDataPoint.fontProperties, {
                        color: fillColor
                    }),
                    selected: !1,
                    isTotal: labelDataPoint.isTotal,
                    isCategory: labelDataPoint.isCategory
                });
            }, LabelLayout.tryPositionRect = function(grid, position, labelDataPointLayoutInfo, offset, centerOffset, adjustForViewport) {
                var isCenterPosition = [ 1, 32 ].includes(position), effectiveOffset = isCenterPosition ? centerOffset : offset, labelRect = getLabelRect(labelDataPointLayoutInfo, position, effectiveOffset);
                return isCenterPosition && 0 === labelDataPointLayoutInfo.labelDataPoint.parentShape.orientation ? this.checkLabelPosition(grid, labelRect, adjustForViewport) || this.checkLabelPosition(grid, getLabelRect(labelDataPointLayoutInfo, position, -effectiveOffset), adjustForViewport) : this.checkLabelPosition(grid, labelRect, adjustForViewport);
            }, LabelLayout.checkLabelPosition = function(grid, labelRect, adjustForViewport) {
                return grid.hasConflict(labelRect) ? adjustForViewport ? grid.tryPositionInViewport(labelRect) : null : labelRect;
            }, LabelLayout.prototype.getShrinkAmountPixels = function(labelDataPointLayoutInfo, resultingBoundingBox) {
                var hasBackground = labelDataPointLayoutInfo.labelDataPoint.hasBackground, isMultiLine = !!(0, 
                dataLabelPointContainerChecker.r)(labelDataPointLayoutInfo.labelDataPoint) && "MultiLine" === labelDataPointLayoutInfo.labelDataPoint.contentLayout, labelBoxHeight = resultingBoundingBox.height + (hasBackground ? 2 * dataLabelViewModel1Consts.Bo : dataLabelViewModel1Consts.Cr);
                return isMultiLine ? labelBoxHeight / 4 : labelBoxHeight / 2;
            }, LabelLayout.prototype.calculateNewEndPoint = function(parentPoint, endPoint, shrinkAmountPixels) {
                var _a, _b, parentPointX = (_a = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], parentPoint, !0), endPoint, !0))[0], parentPointY = _a[1], xDiff = (_b = [ _a[2] - parentPointX, _a[3] - parentPointY ])[0], yDiff = _b[1], lineLength = Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2)), shrinkFactor = (lineLength - shrinkAmountPixels / 2) / lineLength;
                return [ parentPointX + xDiff * shrinkFactor, parentPointY + yDiff * shrinkFactor ];
            }, LabelLayout.prototype.getLeaderLinePoints = function(resultingBoundingBox, position, parentShape, labelDataPointLayoutInfo) {
                var leaderLinePoints = function(boundingBox, position, parentShape) {
                    var x = boundingBox.left, y = boundingBox.top;
                    switch (position) {
                      case 1:
                        x += boundingBox.width / 2, y += boundingBox.height;
                        break;

                      case 2:
                        x += boundingBox.width / 2;
                        break;

                      case 4:
                        x += boundingBox.width, y += 2 * boundingBox.height / 3;
                        break;

                      case 8:
                        y += 2 * boundingBox.height / 3;
                        break;

                      case 32:
                        x += boundingBox.width, y += boundingBox.height / 2;
                        break;

                      case 16:
                        y += boundingBox.height / 2;
                        break;

                      case 128:
                        x += boundingBox.width, y += boundingBox.height;
                        break;

                      case 64:
                        y += boundingBox.height;
                    }
                    return [ [ parentShape.point.x, parentShape.point.y ], [ x, y ] ];
                }(resultingBoundingBox, position, parentShape);
                if (!this.shrinkLeaderLinesForBestFit) return leaderLinePoints;
                var shrinkAmountPixels = this.getShrinkAmountPixels(labelDataPointLayoutInfo, resultingBoundingBox), parentPoint = leaderLinePoints[0];
                return [ parentPoint, this.calculateNewEndPoint(parentPoint, leaderLinePoints[1], shrinkAmountPixels) ];
            }, LabelLayout.prototype.tryPositionForPointPositions = function(labelDataPointLayoutInfo, grid, currentLabelOffset, drawLeaderLines, labelOrientation) {
                for (var _this = this, labelDataPoint = labelDataPointLayoutInfo.labelDataPoint, tryPosition = function(position, parentShape, adjustForViewport) {
                    var resultingBoundingBox = LabelLayout.tryPositionPoint(grid, position, labelDataPointLayoutInfo, currentLabelOffset, adjustForViewport);
                    if (resultingBoundingBox) {
                        512 === position ? grid.addCheckSeries(resultingBoundingBox) : grid.add(resultingBoundingBox), 
                        labelDataPointLayoutInfo.hasBeenRendered = !0;
                        var leaderLinePoints = drawLeaderLines ? _this.getLeaderLinePoints(resultingBoundingBox, position, parentShape, labelDataPointLayoutInfo) : null;
                        return (0, dataLabelPointContainerChecker.r)(labelDataPoint) ? {
                            boundingBox: resultingBoundingBox,
                            labelContents: labelDataPoint.labelDataPointContents.map(function(labelDataPointContent, _index) {
                                return {
                                    text: labelDataPointContent.text,
                                    role: labelDataPointContent.role,
                                    transparency: labelDataPointContent.transparency,
                                    fontProperties: (0, fontProperties.ED)(labelDataPointContent.fontProperties, {
                                        color: 256 === position ? labelDataPointContent.insideFill : labelDataPointContent.outsideFill
                                    }),
                                    isVisible: !0,
                                    textSize: labelDataPointContent.textSize
                                };
                            }),
                            tooltip: labelDataPoint.tooltip,
                            hasBackground: !!labelDataPoint.hasBackground,
                            labelOrientation,
                            key: labelDataPoint.key,
                            identity: labelDataPoint.identity,
                            leaderLinePoints,
                            backgroundColor: labelDataPoint.backgroundColor,
                            backgroundTransparency: labelDataPoint.backgroundTransparency,
                            wordBreak: labelDataPoint.wordBreak,
                            contentLayout: labelDataPoint.contentLayout,
                            alignment: labelDataPoint.alignment,
                            selected: !1,
                            textAnchor: "unset",
                            leaderLine: labelDataPoint.leaderLine
                        } : {
                            boundingBox: resultingBoundingBox,
                            text: labelDataPoint.text,
                            tooltip: labelDataPoint.tooltip,
                            isVisible: !0,
                            isInsideParent: 256 === position,
                            identity: labelDataPoint.identity,
                            key: labelDataPoint.key,
                            fontProperties: (0, fontProperties.ED)(labelDataPoint.fontProperties, {
                                color: 256 === position ? labelDataPoint.insideFill : labelDataPoint.outsideFill
                            }),
                            selected: !1,
                            leaderLinePoints,
                            leaderLine: labelDataPoint.leaderLine,
                            hasBackground: !!labelDataPoint.hasBackground,
                            labelOrientation,
                            backgroundColor: labelDataPoint.backgroundColor,
                            backgroundTransparency: labelDataPoint.backgroundTransparency,
                            wordBreak: labelDataPoint.wordBreak,
                            isTotal: labelDataPoint.isTotal,
                            isCategory: labelDataPoint.isCategory
                        };
                    }
                }, parentShape = labelDataPoint.parentShape, validPositions = parentShape.validPositions, _i = 0, validPositions_2 = validPositions; _i < validPositions_2.length; _i++) {
                    var label;
                    if (label = tryPosition(validPositions_2[_i], parentShape, !1)) return label;
                }
                return this.attemptToMoveLabelsIntoViewport && !_.isEmpty(validPositions) && (label = tryPosition(validPositions[0], parentShape, !0)) ? label : null;
            }, LabelLayout.tryPositionPoint = function(grid, position, labelDataPointLayoutInfo, offset, adjustForViewport) {
                var labelRect = (0, labelLayout3.c)(labelDataPointLayoutInfo.labelSize, labelDataPointLayoutInfo.labelDataPoint.parentShape, position, offset);
                return grid.hasConflict(labelRect) ? adjustForViewport ? 512 === position ? grid.trySeriesLabelPositionInViewport(labelRect) : grid.tryPositionInViewport(labelRect) : null : labelRect;
            }, LabelLayout.defaultOffsetIterationDelta = 2, LabelLayout.defaultHorizontalPadding = 2, 
            LabelLayout.defaultVerticalPadding = 2, LabelLayout;
        }(), equalityPrecision = .09, minIntersectionRatio = .2;
    },
    54086: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            c: function() {
                return getLabelRectPoint;
            },
            w: function() {
                return parentToLabelOverflowRatioThreshold;
            }
        });
        var _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), _labelPositions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(86745), parentToLabelOverflowRatioThreshold = .02;
        function getLabelRectPoint(labelSize, parentPoint, position, offset) {
            switch (position) {
              case 1:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.aE)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 2:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.B2)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 4:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.t$)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 8:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.F2)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 32:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.I6)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 16:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.W7)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 128:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.Q$)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 64:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.kx)(labelSize, parentPoint.point, parentPoint.radius + offset);

              case 256:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.be)(labelSize, parentPoint.point);

              case 512:
                return (0, _labelPositions__WEBPACK_IMPORTED_MODULE_0__.BV)(labelSize, parentPoint.point);

              default:
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertFail("Unsupported label position");
            }
            return null;
        }
    },
    86745: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            B2: function() {
                return below;
            },
            BV: function() {
                return seriesLeft;
            },
            F2: function() {
                return right;
            },
            I6: function() {
                return belowLeft;
            },
            O5: function() {
                return bottomOutside;
            },
            Q$: function() {
                return aboveLeft;
            },
            QS: function() {
                return rightInside;
            },
            Vq: function() {
                return middleVertical;
            },
            W7: function() {
                return belowRight;
            },
            ZN: function() {
                return topOutside;
            },
            _f: function() {
                return leftOutside;
            },
            aE: function() {
                return above;
            },
            be: function() {
                return center;
            },
            cx: function() {
                return rightOutside;
            },
            e6: function() {
                return leftInside;
            },
            fB: function() {
                return sin45;
            },
            jb: function() {
                return bottomInside;
            },
            kx: function() {
                return aboveRight;
            },
            nK: function() {
                return cos45;
            },
            t$: function() {
                return left;
            },
            ug: function() {
                return topInside;
            },
            um: function() {
                return middleHorizontal;
            }
        });
        var cos45 = Math.cos(45), sin45 = Math.sin(45);
        function above(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - labelSize.width / 2,
                top: parentPoint.y - offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function below(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - labelSize.width / 2,
                top: parentPoint.y + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function left(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - offset - labelSize.width,
                top: parentPoint.y - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function right(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x + offset,
                top: parentPoint.y - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function belowLeft(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - sin45 * offset - labelSize.width,
                top: parentPoint.y + cos45 * offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function belowRight(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x + sin45 * offset,
                top: parentPoint.y + cos45 * offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function aboveLeft(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x - sin45 * offset - labelSize.width,
                top: parentPoint.y - cos45 * offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function aboveRight(labelSize, parentPoint, offset) {
            return {
                left: parentPoint.x + sin45 * offset,
                top: parentPoint.y - cos45 * offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function center(labelSize, parentPoint) {
            return {
                left: parentPoint.x - labelSize.width / 2,
                top: parentPoint.y - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function seriesLeft(labelSize, parentPoint) {
            return {
                left: parentPoint.x,
                top: parentPoint.y - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function topInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function bottomInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + parentRect.height - offset - labelSize.height,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function rightInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width - labelSize.width - offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function leftInside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function topOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top - labelSize.height - offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function bottomOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + parentRect.height + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function rightOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width + offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function leftOutside(labelSize, parentRect, offset) {
            return {
                left: parentRect.left - labelSize.width - offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function middleHorizontal(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2 + offset,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2,
                width: labelSize.width,
                height: labelSize.height
            };
        }
        function middleVertical(labelSize, parentRect, offset) {
            return {
                left: parentRect.left + parentRect.width / 2 - labelSize.width / 2,
                top: parentRect.top + parentRect.height / 2 - labelSize.height / 2 + offset,
                width: labelSize.width,
                height: labelSize.height
            };
        }
    },
    40739: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            r: function() {
                return createTooltipService;
            }
        });
        var debug = __webpack_require__(62458), tslib_es6 = __webpack_require__(81337), browserUtils = __webpack_require__(59107);
        function createTooltipService(hostServices) {
            var visualHostTooltipService = hostServices.tooltips();
            return debug.fF.assertValue(visualHostTooltipService, "visualHostTooltipService"), 
            new TooltipService(visualHostTooltipService);
        }
        var TooltipService = function() {
            function TooltipService(visualHostTooltipService, handleTouchDelay) {
                var TooltipServiceDelegate, DefaultTooltipEventsRegistrator;
                void 0 === handleTouchDelay && (handleTouchDelay = 1e3), this.visualHostTooltipService = visualHostTooltipService, 
                this.tooltipEventsRegistrator = (TooltipServiceDelegate = function() {
                    function TooltipServiceDelegate(visualHostTooltipService, handleTouchDelay) {
                        var _this = this;
                        this.handleTouchDelay = handleTouchDelay, this.handleTouchTooltipHideDelay = 2e3, 
                        this.preventContextMenuHandler = function(event) {
                            event.preventDefault(), event.stopPropagation(), _this.visualElement && _this.visualElement.removeEventListener("contextmenu", _this.preventContextMenuHandler, !0);
                        }, this.ignoreMouseoutEvent = !1, this.forceRefreshData = !1, this.visualHostTooltipService = visualHostTooltipService, 
                        this.rootNode = this.visualHostTooltipService.container();
                    }
                    return TooltipServiceDelegate.prototype.showTooltip = function(isTouchEvent, getTooltipInfo, getDataPointIdentities, loadTooltipData, hideTooltipOnNoData, originGesture, suppressAnnouncements, showByDefaultOverride, isKeyboardEvent, focusTooltip) {
                        if (this.canDisplayTooltip(isTouchEvent, originGesture)) {
                            this.visualElement && this.visualElement.removeEventListener("contextmenu", this.preventContextMenuHandler, !0);
                            var d3Event = d3.event;
                            this.visualElement = $(d3Event.target).parent().get(0), isTouchEvent && this.visualElement && this.visualHostTooltipService.isTouchScreenOptimizedEnabled() && (this.ignoreMouseEventsTimeoutId && clearTimeout(this.ignoreMouseEventsTimeoutId), 
                            this.visualElement.addEventListener("contextmenu", this.preventContextMenuHandler, !0)), 
                            this.touchOriginTooltipShowing = isTouchEvent;
                            var tooltipInfo, tooltipEventArgs = this.makeTooltipEventArgs(isTouchEvent);
                            if (tooltipEventArgs) if ((loadTooltipData || isTouchEvent || this.forceRefreshData) && (this.forceRefreshData = !1, 
                            null == (tooltipInfo = getTooltipInfo(tooltipEventArgs)))) hideTooltipOnNoData && this.visualHostTooltipService.hide({
                                isTouchEvent,
                                immediately: !1,
                                isKeyboardEvent
                            }); else {
                                var selectionIds = getDataPointIdentities(tooltipEventArgs), identities = selectionIds && selectionIds.map(function(selectionId) {
                                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, selectionId.getSelectorsByColumn()), {
                                        exclude: selectionId.exclude
                                    });
                                }), roles = selectionIds && selectionIds.map(function(selectionId) {
                                    return null == selectionId ? void 0 : selectionId.role;
                                }), event = d3.event;
                                "touch" === event.pointerType && (event.tooltip = !0), this.visualHostTooltipService.show({
                                    coordinates: tooltipEventArgs.coordinates,
                                    isTouchEvent,
                                    dataItems: tooltipInfo,
                                    identities,
                                    roles,
                                    suppressAnnouncements,
                                    showByDefaultOverride,
                                    isKeyboardEvent,
                                    focusTooltip
                                }), isTouchEvent && !this.visualHostTooltipService.isTouchScreenOptimizedEnabled() && this.startTouchHideTooltipTimeout();
                            }
                        }
                    }, TooltipServiceDelegate.prototype.hideTooltip = function(isTouchEvent, originGesture) {
                        "pointerleave" === originGesture && isTouchEvent || "mouseout" === originGesture && this.ignoreMouseoutEvent || (this.touchOriginTooltipShowing = !1, 
                        clearTimeout(this.handleTouchTooltipHideId), this.visualHostTooltipService.hide({
                            isTouchEvent,
                            immediately: "pointerdown" === originGesture,
                            isKeyboardEvent: !1
                        }));
                    }, TooltipServiceDelegate.prototype.getCoordinates = function(node) {
                        for (var s, e = d3.event; s = e.sourceEvent; ) e = s;
                        var rect = node.getBoundingClientRect(), clientX = e.clientX, clientY = e.clientY;
                        if (null == clientX || null == clientY) {
                            var d3Event_1 = d3.event;
                            debug.fF.assert(function() {
                                return "keydown" === d3Event_1.type || "moveToolTipWithKeyboardAction" === d3Event_1.type;
                            }, "only non-mouse/touch events (e.g., 'keydown') should get here");
                            var targetRect = d3Event_1.target.getBoundingClientRect();
                            clientX = targetRect.left + targetRect.width / 2, clientY = targetRect.top + targetRect.height / 2;
                        }
                        return [ clientX - rect.left - node.clientLeft, clientY - rect.top - node.clientTop ];
                    }, TooltipServiceDelegate.prototype.makeTooltipEventArgs = function(isTouchEvent) {
                        var eventCoordinates = this.getCoordinates(this.rootNode), target = isTouchEvent ? document.elementFromPoint(eventCoordinates[0], eventCoordinates[1]) : d3.event.target;
                        return {
                            data: d3.select(target).datum(),
                            coordinates: eventCoordinates,
                            elementCoordinates: this.getCoordinates(target),
                            context: target,
                            isTouchEvent
                        };
                    }, TooltipServiceDelegate.prototype.startTouchHideTooltipTimeout = function() {
                        var _this = this;
                        this.handleTouchTooltipHideId && clearTimeout(this.handleTouchTooltipHideId), this.handleTouchTooltipHideId = setTimeout(function() {
                            _this.hideTooltip(!0, "timeout");
                        }, this.handleTouchTooltipHideDelay);
                    }, TooltipServiceDelegate.prototype.startIgnoreMouseEventsTimeout = function() {
                        var _this = this;
                        this.ignoreMouseEventsTimeoutId && clearTimeout(this.ignoreMouseEventsTimeoutId), 
                        this.ignoreMouseEventsTimeoutId = setTimeout(function() {
                            _this.visualElement && _this.visualElement.removeEventListener("contextmenu", _this.preventContextMenuHandler, !0), 
                            _this.ignoreMouseEventsTimeoutId = void 0, _this.forceRefreshData = !0;
                        }, this.handleTouchDelay);
                    }, TooltipServiceDelegate.prototype.canDisplayTooltip = function(isTouchEvent, originGesture) {
                        return !(!isTouchEvent && ("pointerdown" === originGesture || this.touchOriginTooltipShowing || void 0 !== this.ignoreMouseEventsTimeoutId));
                    }, TooltipServiceDelegate;
                }(), DefaultTooltipEventsRegistrator = function() {
                    function DefaultTooltipEventsRegistrator(tooltipServiceDelegate, visualHostTooltipService) {
                        this.tooltipServiceDelegate = tooltipServiceDelegate, this.visualHostTooltipService = visualHostTooltipService, 
                        this.moveThreshold = 10, this.focusTooltip = !0;
                    }
                    return DefaultTooltipEventsRegistrator.prototype.unregisterEvents = function(selection) {
                        selection.on(".tooltip", null), selection.on("moveToolTipWithKeyboardAction", null);
                    }, DefaultTooltipEventsRegistrator.prototype.registerEvents = function(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove, suppressAnnouncements, showByDefaultOverride) {
                        this.registerTooltipEvents(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove, suppressAnnouncements, showByDefaultOverride);
                    }, DefaultTooltipEventsRegistrator.prototype.hasPointerTypeTouch = function(event) {
                        return "touch" === event.pointerType;
                    }, DefaultTooltipEventsRegistrator.prototype.onPointerEnd = function() {
                        if (this.tooltipServiceDelegate.startIgnoreMouseEventsTimeout(), this.visualHostTooltipService.visible() && this.visualHostTooltipService.isTouchScreenOptimizedEnabled()) this.tooltipServiceDelegate.ignoreMouseoutEvent = !0; else {
                            var d3Event = d3.event;
                            this.tooltipServiceDelegate.hideTooltip(this.hasPointerTypeTouch(d3Event), d3Event.type);
                        }
                    }, DefaultTooltipEventsRegistrator.prototype.moveThresholdReached = function(currentX, currentY) {
                        var distX = currentX - this.initialX, distY = currentY - this.initialY;
                        return Math.sqrt(distX * distX + distY * distY) > this.moveThreshold;
                    }, DefaultTooltipEventsRegistrator.prototype.registerTooltipEvents = function(selection, getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove, suppressAnnouncements, showByDefaultOverride) {
                        var targetKeyboardReference, _this = this;
                        selection.on("pointerover.tooltip", function() {
                            _this.focusTooltip = !0;
                            var d3Event = d3.event;
                            _this.hasPointerTypeTouch(d3Event) || _this.tooltipServiceDelegate.showTooltip(_this.hasPointerTypeTouch(d3Event), getTooltipInfo, getDataPointIdentity, !0, !1, d3Event.type, suppressAnnouncements, showByDefaultOverride, !1, _this.focusTooltip);
                        }), selection.on("moveToolTipWithKeyboardAction", function() {
                            var d3Event = d3.event;
                            !1 === _this.focusTooltip && (_this.visualHostTooltipService.visible() ? _this.tooltipServiceDelegate.showTooltip(_this.hasPointerTypeTouch(d3Event), getTooltipInfo, getDataPointIdentity, !0, !1, d3Event.type, suppressAnnouncements, showByDefaultOverride, !0, _this.focusTooltip) : (_this.tooltipServiceDelegate.hideTooltip(!1, d3Event.type), 
                            _this.focusTooltip = !0), targetKeyboardReference = d3Event.target);
                        }), selection.on("keydown.tooltip", function() {
                            var d3Event = d3.event;
                            browserUtils.M.isCtrlOrMeta(d3Event) && 72 === d3Event.keyCode && d3Event.shiftKey ? (_this.focusTooltip = !1, 
                            d3Event.target === targetKeyboardReference && _this.visualHostTooltipService.visible() ? (_this.tooltipServiceDelegate.hideTooltip(!1, d3Event.type), 
                            _this.focusTooltip = !0) : _this.tooltipServiceDelegate.showTooltip(_this.hasPointerTypeTouch(d3Event), getTooltipInfo, getDataPointIdentity, !0, !1, d3Event.type, suppressAnnouncements, showByDefaultOverride, !0, _this.focusTooltip), 
                            targetKeyboardReference = d3Event.target, d3Event.preventDefault()) : browserUtils.M.isCtrlOrMeta(d3Event) && 72 === d3Event.keyCode ? (_this.focusTooltip = !0, 
                            d3Event.target === targetKeyboardReference && _this.visualHostTooltipService.visible() ? _this.tooltipServiceDelegate.hideTooltip(!1, d3Event.type) : _this.tooltipServiceDelegate.showTooltip(_this.hasPointerTypeTouch(d3Event), getTooltipInfo, getDataPointIdentity, !0, !1, d3Event.type, suppressAnnouncements, showByDefaultOverride, !0, _this.focusTooltip), 
                            targetKeyboardReference = d3Event.target, d3Event.preventDefault()) : 27 === d3Event.keyCode && (_this.focusTooltip = !0, 
                            (d3Event.target === targetKeyboardReference || _this.visualHostTooltipService.visible()) && (_this.tooltipServiceDelegate.hideTooltip(!1, d3Event.type), 
                            d3Event.preventDefault()));
                        }), selection.on("pointerleave.tooltip", function() {
                            _this.focusTooltip = !0;
                            var d3Event = d3.event;
                            _this.tooltipServiceDelegate.hideTooltip(_this.visualHostTooltipService.isTouchScreenOptimizedEnabled() && _this.hasPointerTypeTouch(d3Event), d3Event.type);
                        }), selection.on("mouseout.tooltip", function() {
                            _this.focusTooltip = !0;
                            var d3Event = d3.event;
                            _this.tooltipServiceDelegate.hideTooltip(_this.visualHostTooltipService.isTouchScreenOptimizedEnabled() && _this.hasPointerTypeTouch(d3Event), d3Event.type);
                        }), selection.on("pointermove.tooltip", function() {
                            _this.focusTooltip = !0;
                            var d3Event = d3.event;
                            _this.tooltipServiceDelegate.ignoreMouseoutEvent = !1, _this.visualHostTooltipService.visible() || !_this.hasPointerTypeTouch(d3Event) ? _this.tooltipServiceDelegate.showTooltip(_this.hasPointerTypeTouch(d3Event), getTooltipInfo, getDataPointIdentity, reloadTooltipDataOnMouseMove, !0, d3Event.type, suppressAnnouncements, showByDefaultOverride, !1, !0) : _this.moveThresholdReached(d3Event.screenX, d3Event.screenY) && _this.tooltipServiceDelegate.hideTooltip(_this.hasPointerTypeTouch(d3Event), d3Event.type);
                        }), selection.on("pointerdown.tooltip", function() {
                            _this.focusTooltip = !1;
                            var d3Event = d3.event;
                            _this.initialX = d3Event.screenX, _this.initialY = d3Event.screenY, _this.tooltipServiceDelegate.showTooltip(_this.hasPointerTypeTouch(d3Event), getTooltipInfo, getDataPointIdentity, !0, !_this.visualHostTooltipService.isTouchScreenOptimizedEnabled(), d3Event.type, suppressAnnouncements, showByDefaultOverride, !1, !0);
                        }), selection.on("pointerup.tooltip", function() {
                            return _this.onPointerEnd();
                        }), selection.on("pointercancel.tooltip", function() {
                            return _this.onPointerEnd();
                        });
                    }, DefaultTooltipEventsRegistrator;
                }(), {
                    create: function(options) {
                        var tooltipServiceDelegate = new TooltipServiceDelegate(options.visualHostTooltipService, options.handleTouchDelay);
                        return new DefaultTooltipEventsRegistrator(tooltipServiceDelegate, options.visualHostTooltipService);
                    }
                }).create({
                    visualHostTooltipService: this.visualHostTooltipService,
                    handleTouchDelay
                });
            }
            return TooltipService.prototype.addTooltip = function(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove, suppressAnnouncements, showByDefaultOverride) {
                selection && (showByDefaultOverride || this.visualHostTooltipService.enabled()) && this.tooltipEventsRegistrator.registerEvents(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove, suppressAnnouncements, showByDefaultOverride);
            }, TooltipService.prototype.removeTooltips = function(selection) {
                selection && this.tooltipEventsRegistrator.unregisterEvents(selection);
            }, TooltipService.prototype.hide = function() {
                this.visualHostTooltipService.hide({
                    immediately: !0,
                    isTouchEvent: !1,
                    isKeyboardEvent: !1
                });
            }, TooltipService.prototype.visible = function() {
                return this.visualHostTooltipService && this.visualHostTooltipService.visible();
            }, TooltipService.prototype.isTouchScreenOptimizedEnabled = function() {
                return this.visualHostTooltipService.isTouchScreenOptimizedEnabled();
            }, TooltipService;
        }();
    },
    20114: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            dt: function() {
                return type;
            },
            s$: function() {
                return ninetyFive;
            }
        });
        var _VisualsData_types_enumType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28488), ninetyFive = "95%", type = (0, 
        _VisualsData_types_enumType__WEBPACK_IMPORTED_MODULE_0__.i)([ {
            value: "99%",
            displayName: function() {
                return "99%";
            }
        }, {
            value: ninetyFive,
            displayName: function() {
                return "95%";
            }
        }, {
            value: "90%",
            displayName: function() {
                return "90%";
            }
        }, {
            value: "85%",
            displayName: function() {
                return "85%";
            }
        }, {
            value: "80%",
            displayName: function() {
                return "80%";
            }
        }, {
            value: "75%",
            displayName: function() {
                return "75%";
            }
        } ]);
    },
    40253: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            dt: function() {
                return type;
            },
            xm: function() {
                return point;
            }
        });
        var _VisualsData_types_enumType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28488), point = "point", type = (0, 
        _VisualsData_types_enumType__WEBPACK_IMPORTED_MODULE_0__.i)([ {
            value: "year",
            displayName: function(resources) {
                return resources.get("TimeUnit_Years");
            }
        }, {
            value: "quarter",
            displayName: function(resources) {
                return resources.get("TimeUnit_Quarters");
            }
        }, {
            value: "month",
            displayName: function(resources) {
                return resources.get("TimeUnit_Months");
            }
        }, {
            value: "day",
            displayName: function(resources) {
                return resources.get("TimeUnit_Days");
            }
        }, {
            value: "hour",
            displayName: function(resources) {
                return resources.get("TimeUnit_Hours");
            }
        }, {
            value: "minute",
            displayName: function(resources) {
                return resources.get("TimeUnit_Minutes");
            }
        }, {
            value: "second",
            displayName: function(resources) {
                return resources.get("TimeUnit_Seconds");
            }
        }, {
            value: point,
            displayName: function(resources) {
                return resources.get("Visual_Forecast_Units_Point");
            }
        } ]);
    }
} ]);