"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "explore-formatting" ], {
    45221: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            h: function() {
                return FormattingObjectDefinitionsServiceInjectionToken;
            }
        });
        var FormattingObjectDefinitionsServiceInjectionToken = new (__webpack_require__(50423).InjectionToken)("FormattingObjectDefinitionsService");
    },
    21302: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ol: function() {
                return PropertyChangeIndicatorServiceInjectionToken;
            },
            mF: function() {
                return showPageFormatPane;
            },
            sn: function() {
                return showFormatPane;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), showFormatPane = {
            type: 3,
            name: "showFormatPane"
        }, showPageFormatPane = {
            type: 3,
            name: "showPageFormatPane"
        }, PropertyChangeIndicatorServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("PropertyChangeIndicatorService");
    },
    2863: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            v: function() {
                return isCustomVisual;
            }
        });
        var _powerbi_legacy_Explore_util_visualContainerUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3579);
        function isCustomVisual(selectedVisual, visualPluginService, trustedVisual) {
            var visualType = (0, _powerbi_legacy_Explore_util_visualContainerUtils__WEBPACK_IMPORTED_MODULE_0__.s)(selectedVisual);
            return visualPluginService.isCustomVisual(visualType) || trustedVisual.isTrustedVisual(visualType);
        }
    },
    32298: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExploreFormattingModule: function() {
                return ExploreFormattingModule;
            }
        });
        var _a, _b, common = __webpack_require__(77476), tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), build_control_util = __webpack_require__(56578), visualStyles = __webpack_require__(48708), confidenceBandStyle = __webpack_require__(47998), markerShape = __webpack_require__(61193), common_marker = __webpack_require__(66123), visualLocKeys = __webpack_require__(33024), strokeStyle = __webpack_require__(2241), anomalyDetection_converter = __webpack_require__(51490), anomalyDetectionVisualPlugin = __webpack_require__(80822), common_colorHelper = __webpack_require__(90120), cardObjectProperties = ((_a = {}).anomalyDetection = {
            objectName: "anomalyDetection",
            maxInstances: 1,
            supportsUserDefinedInstances: !0,
            displayNameBaseKey: "Visual_AnomalyDetection"
        }, _a.forecast = {
            objectName: "forecast",
            maxInstances: 1,
            supportsUserDefinedInstances: !0,
            displayNameBaseKey: "Visual_Forecast"
        }, _a.plotAreaShading = {
            objectName: "plotAreaShading",
            maxInstances: 1,
            supportsUserDefinedInstances: !1,
            displayNameBaseKey: "Visual_Scatter_SymmetryShading"
        }, _a.ratioLine = {
            objectName: "ratioLine",
            maxInstances: 1,
            supportsUserDefinedInstances: !1,
            displayNameBaseKey: "Visual_Scatter_RatioLine"
        }, _a.referenceLine = {
            objectName: "referenceLine",
            maxInstances: null,
            supportsUserDefinedInstances: !0,
            displayNameBaseKey: "Visual_Reference_Line"
        }, _a.trend = {
            objectName: "trend",
            maxInstances: 1,
            supportsUserDefinedInstances: !1,
            displayNameBaseKey: "Visual_Trend_Line"
        }, _a.xAxisReferenceLine = {
            objectName: "xAxisReferenceLine",
            maxInstances: null,
            supportsUserDefinedInstances: !0,
            displayNameBaseKey: "Visual_Reference_Line_X"
        }, _a.y1AxisReferenceLine = {
            objectName: "y1AxisReferenceLine",
            maxInstances: null,
            supportsUserDefinedInstances: !0,
            displayNameBaseKey: "Visual_Reference_Line_Y"
        }, _a), standardShowPropertyName = "show", unknownLineTypeName = "unknown", referenceLineTypeToCardNameMappings = ((_b = {}).Min = "referenceLine-minLine", 
        _b.Max = "referenceLine-maxLine", _b.Average = "referenceLine-averageLine", _b.Median = "referenceLine-medianLine", 
        _b.Percentile = "referenceLine-percentileLine", _b), forecastParameterNames = {
            units: "Unit",
            forecastLength: "ForecastLength",
            ignoreLast: "IgnoreLast",
            confidenceInterval: "ConfidenceLevel",
            seasonality: "MaxSeasonality"
        }, anomalyParameterNames = {
            sensitivity: anomalyDetectionVisualPlugin.DM,
            explainBy: anomalyDetectionVisualPlugin.Bx
        }, visualContainerUtils = __webpack_require__(60661), objectEnumerationBuilder = __webpack_require__(28579), referenceLineHelper1 = __webpack_require__(47006), dataViewObjectDefinition1 = __webpack_require__(5265), sqExprStaticMembers = __webpack_require__(74082), sqExprEqualityVisitor = __webpack_require__(45413), sqExprUtils = __webpack_require__(45334), isMeasure = __webpack_require__(58295);
        function enumerateObjectInstances(visual, objectName) {
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                var unnormalizedResult, objectInstanceOptions;
                return (0, tslib_es6.__generator)(this, function(_a) {
                    switch (_a.label) {
                      case 0:
                        return visual ? (objectInstanceOptions = {
                            objectName
                        }, visual.enumerateObjectInstancesAsync ? [ 4, visual.enumerateObjectInstancesAsync(objectInstanceOptions) ] : [ 3, 2 ]) : [ 2 ];

                      case 1:
                        return unnormalizedResult = _a.sent(), [ 3, 3 ];

                      case 2:
                        visual.enumerateObjectInstances && (unnormalizedResult = visual.enumerateObjectInstances(objectInstanceOptions)), 
                        _a.label = 3;

                      case 3:
                        return [ 2, objectEnumerationBuilder.G.normalize(unnormalizedResult) ];
                    }
                });
            });
        }
        function getAnalyticsCards(visualAdapter) {
            var _a;
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                var formattingModel, _b, cards;
                return (0, tslib_es6.__generator)(this, function(_c) {
                    switch (_c.label) {
                      case 0:
                        return visualAdapter.getFormattingModelAsync ? [ 4, visualAdapter.getFormattingModelAsync() ] : [ 3, 2 ];

                      case 1:
                        return _b = _c.sent(), [ 3, 3 ];

                      case 2:
                        _b = null === (_a = visualAdapter.getFormattingModel) || void 0 === _a ? void 0 : _a.call(visualAdapter), 
                        _c.label = 3;

                      case 3:
                        return (formattingModel = _b) ? (cards = _.filter(formattingModel.cards, function(card) {
                            return card.analyticsPane;
                        }), debug.fF.assert(function() {
                            return _.every(cards, function(card) {
                                return !(0, build_control_util.Qu)(card);
                            });
                        }, "Analytics pane does not support Placeholder cards."), [ 2, cards ]) : [ 2 ];
                    }
                });
            });
        }
        function getValidMeasures(visualContainer, schema, displayNameService, visualPluginService) {
            var _a, singleVisualConfig = null === (_a = null == visualContainer ? void 0 : visualContainer.config) || void 0 === _a ? void 0 : _a.singleVisual;
            if (!(null == singleVisualConfig ? void 0 : singleVisualConfig.query)) return [];
            var capabilities = visualPluginService.capabilities(singleVisualConfig.visualType);
            if (!capabilities || !capabilities.objects) return [];
            var supportedRoleKinds = [];
            capabilities.objects[referenceLineHelper1.Dk] && supportedRoleKinds.push(1), capabilities.objects[referenceLineHelper1.XC] && supportedRoleKinds.push(0);
            for (var validMeasures = [], dataRoles = (0, visualContainerUtils.d$)(visualContainer, visualPluginService) || [], selects = singleVisualConfig.query.defn.select(), _loop_1 = function(dataRole) {
                if (_.some(supportedRoleKinds, function(cartesianKind) {
                    return cartesianKind === dataRole.cartesianKind;
                })) for (var _loop_2 = function(expr) {
                    if (!(0, isMeasure.k)(expr)) return "continue";
                    var selectExpr = _.find(selects, function(select) {
                        return (0, sqExprEqualityVisitor.fS)(expr, select.expr);
                    }), name_1 = displayNameService.getDisplayName(expr, schema, capabilities, selectExpr.name, singleVisualConfig.columnProperties);
                    validMeasures.push({
                        displayName: name_1,
                        value: selectExpr.name,
                        selectExpr
                    });
                }, _b = 0, exprs_1 = singleVisualConfig.query.tryGetExprs(dataRole.name) || []; _b < exprs_1.length; _b++) _loop_2(exprs_1[_b]);
            }, _i = 0, dataRoles_1 = dataRoles; _i < dataRoles_1.length; _i++) _loop_1(dataRoles_1[_i]);
            return validMeasures;
        }
        function createMaxOneInstanceCardBaseWithShowToggle(cardObjectName, cardName, cardDisplayNameKey, visual, capabilities, localize, revertToDefaultDescriptors, nameForShowProperty) {
            var _a;
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                var objectEnumeration, showPropertyName, objectInstance, isRealInstance, cardBuilder, disableCard;
                return (0, tslib_es6.__generator)(this, function(_b) {
                    switch (_b.label) {
                      case 0:
                        return (null === (_a = capabilities.objects) || void 0 === _a ? void 0 : _a[cardObjectName]) ? (debug.fF.assert(function() {
                            var _a;
                            return 1 === (null === (_a = _.find(cardObjectProperties, function(props) {
                                return props.objectName === cardObjectName;
                            })) || void 0 === _a ? void 0 : _a.maxInstances);
                        }, "Expect this be called only for cards that support maximum 1 instance"), [ 4, enumerateObjectInstances(visual, cardObjectName) ]) : [ 2 ];

                      case 1:
                        return objectEnumeration = _b.sent(), _.isEmpty(null == objectEnumeration ? void 0 : objectEnumeration.instances) ? [ 2 ] : (showPropertyName = null != nameForShowProperty ? nameForShowProperty : standardShowPropertyName, 
                        debug.fF.assert(function() {
                            return 1 === objectEnumeration.instances.length;
                        }, cardObjectName + " supports maximum 1 instance but there are " + objectEnumeration.instances.length), 
                        isRealInstance = (objectInstance = objectEnumeration.instances[0]).properties[showPropertyName], 
                        (cardBuilder = new build_control_util.CQ(new build_control_util.lg(cardName), cardDisplayNameKey, revertToDefaultDescriptors, localize)).addTopLevelToggle("show", function() {
                            return new build_control_util.bd({
                                descriptor: {
                                    objectName: cardObjectName,
                                    propertyName: showPropertyName,
                                    selector: objectInstance.selector
                                },
                                value: isRealInstance
                            }).build();
                        }), disableCard = !1, _.isEmpty(objectInstance.disabledReason) || (cardBuilder.withDisabledLocalized(!0, objectInstance.disabledReason), 
                        disableCard = !0), [ 2, {
                            cardBuilder,
                            objectInstance,
                            disableCard
                        } ]);
                    }
                });
            });
        }
        function addSimpleSlices(groupBuilder, objectName, objectInstance, capabilities, localize, orderedSlices) {
            if (capabilities.objects[objectName]) for (var commonDescriptor = {
                objectName,
                selector: objectInstance.selector,
                altConstantValueSelector: objectInstance.altConstantValueSelector,
                propertyName: void 0,
                propertyTypes: void 0
            }, _loop_3 = function(sliceSetting) {
                var propertyName = sliceSetting.propertyName;
                if (!_.has(capabilities.objects[objectName].properties, propertyName) || !_.has(objectInstance.properties, propertyName)) return "continue";
                var sliceTypeDescriptor = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                    propertyName,
                    propertyTypes: objectInstance.propertyTypes ? objectInstance.propertyTypes[propertyName] : void 0
                }), customSliceBuilder = sliceSetting.customDisplayNameKey ? function(sliceBuilder) {
                    sliceBuilder.withCustomDisplayName(sliceSetting.customDisplayNameKey);
                } : void 0, propertyValue = objectInstance.properties[propertyName];
                if ("color" === sliceSetting.type) groupBuilder.addSimpleSlice(sliceSetting.sliceName, function() {
                    var _a, colordata = {
                        value: null === (_a = propertyValue.solid) || void 0 === _a ? void 0 : _a.color
                    };
                    return new build_control_util.BT({
                        descriptor: sliceTypeDescriptor,
                        value: colordata
                    }).build();
                }, customSliceBuilder); else if ("enumeration" === sliceSetting.type) groupBuilder.addSimpleSlice(sliceSetting.sliceName, function() {
                    return new build_control_util.uY({
                        descriptor: sliceTypeDescriptor,
                        value: propertyValue
                    }).build();
                }, customSliceBuilder); else if ("toggle" === sliceSetting.type) groupBuilder.addSimpleSlice(sliceSetting.sliceName, function() {
                    return new build_control_util.bd({
                        descriptor: sliceTypeDescriptor,
                        value: propertyValue
                    }).build();
                }); else if ("slider" === sliceSetting.type || "transparency" === sliceSetting.type) {
                    var unitSymbol_1, minValue_1, maxValue_1;
                    if ("transparency" === sliceSetting.type) unitSymbol_1 = visualLocKeys.t2, minValue_1 = {
                        type: 0,
                        value: 0
                    }, maxValue_1 = {
                        type: 1,
                        value: 100
                    }; else if ("slider" === sliceSetting.type) {
                        var sliderOptions = sliceSetting.options;
                        unitSymbol_1 = null == sliderOptions ? void 0 : sliderOptions.unitSymbol, minValue_1 = null != (null == sliderOptions ? void 0 : sliderOptions.min) ? {
                            type: 0,
                            value: sliderOptions.min
                        } : void 0, maxValue_1 = null != (null == sliderOptions ? void 0 : sliderOptions.max) ? {
                            type: 1,
                            value: sliderOptions.max
                        } : void 0;
                    }
                    groupBuilder.addSimpleSlice(sliceSetting.sliceName, function() {
                        return new build_control_util.JN({
                            descriptor: sliceTypeDescriptor,
                            value: propertyValue,
                            options: {
                                unitSymbol: unitSymbol_1,
                                minValue: minValue_1,
                                maxValue: maxValue_1
                            },
                            localize
                        }).build();
                    }, customSliceBuilder);
                } else if ("numUpDown" === sliceSetting.type) {
                    var options_1 = null == sliceSetting ? void 0 : sliceSetting.options;
                    groupBuilder.addSimpleSlice(sliceSetting.sliceName, function() {
                        return new build_control_util.mu({
                            descriptor: sliceTypeDescriptor,
                            value: propertyValue,
                            options: {
                                unitSymbol: options_1.unitSymbol,
                                unitSymbolAfterInput: options_1.unitSymbolAfterInput,
                                minValue: null != (null == options_1 ? void 0 : options_1.min) ? {
                                    type: 0,
                                    value: options_1.min
                                } : void 0,
                                maxValue: null != (null == options_1 ? void 0 : options_1.max) ? {
                                    type: 1,
                                    value: options_1.max
                                } : void 0
                            },
                            placeholderText: localize(options_1.placeholderTextKey)
                        }).build();
                    });
                }
            }, _i = 0, orderedSlices_1 = orderedSlices; _i < orderedSlices_1.length; _i++) _loop_3(orderedSlices_1[_i]);
        }
        function getAddInstanceChangesBase(cardObjectName, displayNameBase, visualContainer, localizationService) {
            var newInstanceSelector = function(cardObjectName, visualContainer) {
                var _a, _b, _c, _d, _e, instances = (null !== (_c = null === (_b = null === (_a = visualContainer.config) || void 0 === _a ? void 0 : _a.singleVisual) || void 0 === _b ? void 0 : _b.objects) && void 0 !== _c ? _c : {})[cardObjectName];
                if (!(null === (_d = cardObjectProperties[cardObjectName]) || void 0 === _d ? void 0 : _d.supportsUserDefinedInstances)) return null;
                for (var maxSelectorId = 0, _i = 0, _f = null != instances ? instances : []; _i < _f.length; _i++) {
                    var instanceSelectorIdString = null === (_e = _f[_i].selector) || void 0 === _e ? void 0 : _e.id, instanceSelectorId = null != instanceSelectorIdString ? parseInt(instanceSelectorIdString, 10) : 0;
                    maxSelectorId = Math.max(maxSelectorId, instanceSelectorId);
                }
                return {
                    id: (maxSelectorId + 1).toString()
                };
            }(cardObjectName, visualContainer), changes = {
                merge: [ {
                    objectName: cardObjectName,
                    selector: newInstanceSelector,
                    properties: {
                        show: !0
                    }
                } ]
            };
            if (null != displayNameBase) {
                var newInstanceDisplayName = getNewInstanceDisplayName(cardObjectName, visualContainer, displayNameBase, localizationService);
                changes.merge[0].properties.displayName = newInstanceDisplayName;
            }
            return changes;
        }
        function getAddInstanceChangesBaseWithNameKey(cardObjectName, displayNameBaseKey, visualContainer, localizationService) {
            return getAddInstanceChangesBase(cardObjectName, localizationService.get(displayNameBaseKey), visualContainer, localizationService);
        }
        function getRemoveInstanceChanges(cardObjectName, selector) {
            return {
                objectName: cardObjectName,
                selector,
                properties: {}
            };
        }
        function removeInstance(cardObjectName, selector, visualContainer, visualAuthoringService) {
            var changes = {
                removeObject: []
            };
            changes.removeObject.push(getRemoveInstanceChanges(cardObjectName, selector)), visualAuthoringService.persistProperties(changes, visualContainer, !0);
        }
        function getAnalyticsTransform(objectInstance, visualContainer) {
            var _a;
            if (objectInstance) {
                var singleVisualConfig = null === (_a = visualContainer.config) || void 0 === _a ? void 0 : _a.singleVisual;
                if (singleVisualConfig) {
                    var transform = (0, dataViewObjectDefinition1.NA)(singleVisualConfig.objects, {
                        objectName: objectInstance.objectName,
                        propertyName: "transform"
                    }, objectInstance.selector);
                    return (null == transform ? void 0 : transform.parameters) && (transform.parameters = _.filter(transform.parameters, function(p) {
                        return !!p;
                    })), transform;
                }
            }
        }
        function getTransformParameterNumericQueryValue(parameterName, transform) {
            if (transform) {
                var paramNamedExpr = _.find(transform.parameters, function(param) {
                    return param.name === parameterName;
                });
                if (!paramNamedExpr) return;
                if ((0, sqExprStaticMembers.S9)(paramNamedExpr.expr)) return paramNamedExpr.expr.value;
                debug.fF.assertFail("Expect this only be called for parameters of analytics transforms that has SQConstant expressions with numeric value type");
            }
        }
        function getNewInstanceDisplayName(cardObjectName, visualContainer, displayNameBase, localizationService) {
            var _a, newInstanceDisplayName, objects = null !== (_a = visualContainer.config.singleVisual.objects) && void 0 !== _a ? _a : {}, existingNames = _.map(objects[cardObjectName], function(instance) {
                var displayNameExpr = instance.properties.displayName;
                if (displayNameExpr) return sqExprUtils.m.getPrimitiveValuesFromSQConstantExpr(displayNameExpr);
            }).filter(function(name) {
                return !!name;
            }), nameIndex = 1;
            do {
                newInstanceDisplayName = localizationService.format("AnalyticsPane_New_Instance_Default_Format", [ displayNameBase, nameIndex ]), 
                nameIndex++;
            } while (_.includes(existingNames, newInstanceDisplayName));
            return newInstanceDisplayName;
        }
        var events = __webpack_require__(40702), transformPlugins = __webpack_require__(92194), cartesian_capabilities = __webpack_require__(22733), plugins = __webpack_require__(47508), scalarKeyUtils = __webpack_require__(64869), sqExpr = __webpack_require__(94419), Telemetry = __webpack_require__(21617), core = __webpack_require__(50423), conceptual_schema_proxy_service = __webpack_require__(26898), data_sources_service = __webpack_require__(83008), visual_authoring_service = __webpack_require__(66890), feature_switch_service = __webpack_require__(9380), localization_service = __webpack_require__(65181), running_visual_service = __webpack_require__(8082), visual_plugin_service = __webpack_require__(29866), anomalyDetectionObjectName = anomalyDetectionVisualPlugin.xn, sensitivityValueDescriptor = {
            numeric: !0
        }, AnalyticsFormattingAnomalyDetectionHelper = function() {
            function AnalyticsFormattingAnomalyDetectionHelper(conceptualSchemaProxy, dataSources, featureSwitchService, localizationService, runningVisualService, telemetryService, visualAuthoringService, visualPluginService) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.featureSwitchService = featureSwitchService, this.localizationService = localizationService, 
                this.runningVisualService = runningVisualService, this.telemetryService = telemetryService, 
                this.visualAuthoringService = visualAuthoringService, this.visualPluginService = visualPluginService;
            }
            return AnalyticsFormattingAnomalyDetectionHelper.prototype.enumerateAnomalyCard = function(visualContainer, visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, shouldInclude, allPropertyAndParameterNames, localize, cardBuilderWithInstance, cardBuilder, card_1, card_2, anomalyInstance, visualStyle, marker, band, getDescriptor, newMarkerProperties, card, _a, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.featureSwitchService.featureSwitches.daxTransformEnabled && capabilities.objects[anomalyDetectionObjectName] ? [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ] : [ 2 ];

                          case 1:
                            return schema = _b.sent(), (shouldInclude = function(visualContainer, schema, localizationService) {
                                var visualQuery = (0, visualContainerUtils.Xf)(visualContainer);
                                if (!visualQuery) return {
                                    shouldInclude: !1
                                };
                                if ((0, visualContainerUtils.iv)(visualContainer)) return {
                                    shouldInclude: !0,
                                    warningText: localizationService.get("Visual_AnomalyDetection_Disabled_For_VC")
                                };
                                if ((0, visualContainerUtils.tL)(visualContainer)) return {
                                    shouldInclude: !0,
                                    warningText: localizationService.get("Visual_AnomalyDetection_Disabled_For_Hidden")
                                };
                                var selects = (0, visualContainerUtils.oJ)(visualContainer);
                                if (!_.every(selects, function(select) {
                                    return sqExprUtils.m.isExprValidForAnalysisTransform(select.expr);
                                })) return {
                                    shouldInclude: !1
                                };
                                if (!function(schema) {
                                    return _.every(schema.schemas, function(schema) {
                                        return _.some(schema.capabilities.transformCapabilities.supportedTransforms, function(transform) {
                                            return transform === transformPlugins.Xp;
                                        }) && !schema.isMultiDimensionalModel;
                                    });
                                }(schema)) return {
                                    shouldInclude: !0,
                                    warningText: localizationService.get("Visual_AnomalyDetection_ErrorMessage_NotSupport")
                                };
                                var scalarRoleName = function(visualType) {
                                    if (visualType === plugins.L.lineChart.name) return cartesian_capabilities.x.category;
                                    debug.fF.assertFail("Unsupported visual type for anomalies: " + visualType);
                                }(visualContainer.config.singleVisual.visualType), exprs = visualQuery.tryGetExprs(scalarRoleName);
                                if (!(0, anomalyDetectionVisualPlugin.h_)(exprs, schema) && !(0, scalarKeyUtils._T)(schema, visualQuery.defn, visualQuery.projections, scalarRoleName)) {
                                    var roleName = localizationService.get("Role_DisplayName_Axis");
                                    return {
                                        shouldInclude: !0,
                                        warningText: localizationService.format("Visual_AnomalyDetection_WarningMessage_CategoryNotDateTime", roleName)
                                    };
                                }
                                return {
                                    shouldInclude: !0
                                };
                            }(visualContainer, schema, this.localizationService)).shouldInclude ? (allPropertyAndParameterNames = (0, 
                            tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([ standardShowPropertyName, anomalyDetectionVisualPlugin.DM, anomalyDetectionVisualPlugin.Bx ], Object.values(common_marker.m6), !0), [ anomalyDetectionVisualPlugin.MA.confidenceBandShow, anomalyDetectionVisualPlugin.MA.confidenceBandColor, anomalyDetectionVisualPlugin.MA.confidenceBandStyle, anomalyDetectionVisualPlugin.MA.transparency ], !1), 
                            [ 4, createMaxOneInstanceCardBaseWithShowToggle(anomalyDetectionObjectName, "anomaly", "Insights_TitleKey", visual, capabilities, localize = function(key) {
                                return _this.localizationService.get(key);
                            }, _.map(allPropertyAndParameterNames, function(propertyName) {
                                return {
                                    objectName: anomalyDetectionObjectName,
                                    propertyName
                                };
                            })) ]) : [ 2 ];

                          case 2:
                            return (cardBuilderWithInstance = _b.sent()) ? (cardBuilder = cardBuilderWithInstance.cardBuilder, 
                            cardBuilderWithInstance.disableCard ? ((card_1 = cardBuilder.build()).analyticsPane = !0, 
                            [ 2, card_1 ]) : _.isEmpty(shouldInclude.warningText) ? (anomalyInstance = cardBuilderWithInstance.objectInstance, 
                            visualStyle = (0, visualStyles.Ue)(), _a = (0, anomalyDetection_converter.yF)(anomalyInstance.properties, (0, 
                            anomalyDetection_converter.EL)(visualStyle), common_colorHelper.v.create(visualStyle)), 
                            marker = _a.marker, band = _a.band, getDescriptor = function(propertyName) {
                                return {
                                    objectName: anomalyDetectionObjectName,
                                    selector: anomalyInstance.selector,
                                    altConstantValueSelector: anomalyInstance.altConstantValueSelector,
                                    propertyName,
                                    propertyTypes: anomalyInstance.propertyTypes ? anomalyInstance.propertyTypes[propertyName] : void 0
                                };
                            }, newMarkerProperties = this.featureSwitchService.featureSwitches.newMarkerProperties, 
                            cardBuilder.addGroup("options", function(groupBuilder) {
                                var _a;
                                return groupBuilder.withDisplayName("Desktop_FileMenu_Options").withDelaySaveSlices().addSimpleSlice("sensitivity", function() {
                                    return build_control_util.JN.getTransparencySliderBuilder({
                                        descriptor: {
                                            objectName: anomalyDetectionObjectName,
                                            propertyName: anomalyDetectionVisualPlugin.DM
                                        },
                                        value: (anomalyDetectionTransform = getAnalyticsTransform(anomalyInstance, visualContainer), 
                                        queryValue = getTransformParameterNumericQueryValue(anomalyDetectionVisualPlugin.DM, anomalyDetectionTransform), 
                                        null == queryValue && (queryValue = anomalyDetectionVisualPlugin.z$), function(queryValue) {
                                            if (null != queryValue) return Math.round(100 * queryValue);
                                        }(queryValue)),
                                        localize
                                    }).build();
                                    var anomalyDetectionTransform, queryValue;
                                }, function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Visual_AnomalyDetection_Sensitivity");
                                }).addSimpleSlice("explainBy", new build_control_util.k0({
                                    descriptor: {
                                        objectName: anomalyDetectionObjectName,
                                        propertyName: anomalyDetectionVisualPlugin.Bx
                                    },
                                    value: {
                                        newExpr: _.map(null === (_a = getExplainByList(anomalyInstance, visualContainer)) || void 0 === _a ? void 0 : _a.exprs, function(expr) {
                                            return {
                                                expr
                                            };
                                        })
                                    },
                                    validators: {
                                        field: {
                                            kind: 0
                                        }
                                    },
                                    allowMultipleValues: !0
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Role_DisplayName_ExplainBy");
                                });
                            }).addGroup("markers", function(groupBuilder) {
                                newMarkerProperties && groupBuilder.addTopLevelToggle("markerShow", function() {
                                    return new build_control_util.bd({
                                        descriptor: getDescriptor(common_marker.m6.show),
                                        value: marker.show
                                    }).build();
                                }), groupBuilder.withDisplayName("Visual_Shape").addSimpleSlice("markerShape", new build_control_util.uY({
                                    descriptor: getDescriptor(common_marker.m6.shape),
                                    value: marker.shape
                                }).build()).addSimpleSlice("markerSize", new build_control_util.mu({
                                    descriptor: getDescriptor(common_marker.m6.size),
                                    value: marker.size,
                                    options: {
                                        minValue: {
                                            type: 0,
                                            value: 0
                                        },
                                        maxValue: {
                                            type: 1,
                                            value: 10
                                        },
                                        unitSymbol: visualLocKeys.e_
                                    }
                                }).build()).addSimpleSlice("markerRotation", build_control_util.JN.getRotationSliderBuilder({
                                    descriptor: getDescriptor(common_marker.m6.rotation),
                                    value: marker.rotation,
                                    localize
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withHidden(!newMarkerProperties || !(0, markerShape.Cd)(marker.shape));
                                });
                            }).addGroup("colors", function(groupBuilder) {
                                return groupBuilder.withDisabled(!marker.show).withDisplayName("Generic_Color").addSimpleSlice("markerColor", new build_control_util.BT({
                                    descriptor: getDescriptor(common_marker.m6.color),
                                    value: {
                                        value: marker.color
                                    }
                                }).build()).addSimpleSlice("markerTransparency", build_control_util.JN.getTransparencySliderBuilder({
                                    descriptor: getDescriptor(common_marker.m6.transparency),
                                    value: marker.transparency,
                                    localize
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withHidden(!newMarkerProperties);
                                });
                            }), newMarkerProperties && cardBuilder.addGroup("border", function(groupBuilder) {
                                return groupBuilder.withDisplayName("Visual_Border").withDisabled(!(0, markerShape.nK)(marker.shape) || !marker.show).addSlices((0, 
                                strokeStyle.Iq)({
                                    containerItemBuilder: groupBuilder,
                                    descriptors: {
                                        strokeShow: getDescriptor(common_marker.m6.strokeShow),
                                        strokeColorMatch: getDescriptor(common_marker.m6.strokeColorMatch),
                                        strokeColor: getDescriptor(common_marker.m6.strokeColor),
                                        strokeTransparency: getDescriptor(common_marker.m6.strokeTransparency),
                                        strokeWidth: getDescriptor(common_marker.m6.strokeWidth)
                                    },
                                    strokeData: marker.stroke,
                                    selector: anomalyInstance.selector,
                                    featureSwitches: _this.featureSwitchService.featureSwitches,
                                    localize
                                }).map(function(slice) {
                                    return slice.build();
                                }));
                            }), cardBuilder.addGroup("expectedrange", function(groupBuilder) {
                                groupBuilder.withDisplayName("Visual_AnomalyDetection_ExpectedRange"), newMarkerProperties && groupBuilder.addTopLevelToggle("markerBorderShow", function() {
                                    return new build_control_util.bd({
                                        descriptor: getDescriptor(anomalyDetectionVisualPlugin.MA.confidenceBandShow),
                                        value: band.show
                                    }).build();
                                }), groupBuilder.addSimpleSlice("confidenceBandStyle", new build_control_util.uY({
                                    descriptor: getDescriptor(anomalyDetectionVisualPlugin.MA.confidenceBandStyle),
                                    value: band.style,
                                    filterValues: newMarkerProperties ? [ confidenceBandStyle.X$.fill, confidenceBandStyle.X$.line ] : [ confidenceBandStyle.X$.fill, confidenceBandStyle.X$.line, "none" ]
                                }).build()).addSimpleSlice("confidenceBandColor", new build_control_util.BT({
                                    descriptor: getDescriptor(anomalyDetectionVisualPlugin.MA.confidenceBandColor),
                                    value: {
                                        value: band.color
                                    }
                                }).build()).addSimpleSlice("confidenceBandTransparency", build_control_util.JN.getTransparencySliderBuilder({
                                    descriptor: getDescriptor(anomalyDetectionVisualPlugin.MA.transparency),
                                    value: band.transparency,
                                    localize
                                }).build());
                            }), (card = cardBuilder.build()).analyticsPane = !0, [ 2, card ]) : (cardBuilder.withDisabledLocalized(!0, shouldInclude.warningText), 
                            (card_2 = cardBuilder.build()).analyticsPane = !0, [ 2, card_2 ])) : [ 2 ];
                        }
                    });
                });
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.checkAddRemoveInstance = function(cardObjectName, slice, visualContainer) {
                return cardObjectName === anomalyDetectionObjectName && slice.name === standardShowPropertyName && (slice.value ? this.addInstance(visualContainer) : removeInstance(cardObjectName, slice.selector, visualContainer, this.visualAuthoringService), 
                !0);
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.saveGroupSlices = function(groupDisplayName, sliceChanges, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var changes;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return groupDisplayName !== this.localizationService.get("Desktop_FileMenu_Options") ? [ 2, !1 ] : [ 4, this.getSaveParameterValuesChange(anomalyDetectionObjectName, sliceChanges, visualContainer) ];

                          case 1:
                            return (changes = _a.sent()) && this.visualAuthoringService.persistProperties(changes, visualContainer, !0), 
                            [ 2, !!changes ];
                        }
                    });
                });
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.hasParameterWithNonDefaultValue = function(objects) {
                var anomalyDef = _.first(objects[anomalyDetectionObjectName]);
                if (!anomalyDef) return !1;
                var transformProperty = anomalyDef.properties.transform;
                if (!transformProperty) return !1;
                if (!_.isEmpty(transformProperty.parameters)) {
                    var parameterExprs = transformProperty.parameters, defaultSensitivityExpr_1 = getDefaultSensitivityParameterExpr().expr;
                    if (_.some(parameterExprs, function(paramNamedExpr) {
                        return paramNamedExpr.name === anomalyDetectionVisualPlugin.DM && !(0, sqExprEqualityVisitor.fS)(paramNamedExpr.expr, defaultSensitivityExpr_1);
                    })) return !0;
                }
                return !1;
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.revertAnomalyDetectionSpecialDefinitions = function(visualContainer, definitions, descriptors) {
                if (definitions) {
                    var anomalyDef = _.first(definitions[anomalyDetectionObjectName]);
                    if (anomalyDef) if (_.some(descriptors, function(descriptor) {
                        return descriptor.objectName === anomalyDetectionObjectName && descriptor.propertyName === standardShowPropertyName;
                    })) removeInstance(anomalyDetectionObjectName, anomalyDef.selector, visualContainer, this.visualAuthoringService); else for (var transform = anomalyDef.properties.transform, sensitivityParamName = anomalyDetectionVisualPlugin.DM, _i = 0, descriptors_1 = descriptors; _i < descriptors_1.length; _i++) if (descriptors_1[_i].propertyName === sensitivityParamName) {
                        var paramIndex = _.findIndex(null == transform ? void 0 : transform.parameters, function(param) {
                            return param.name === sensitivityParamName;
                        });
                        paramIndex >= 0 && (transform.parameters[paramIndex] = getDefaultSensitivityParameterExpr());
                    }
                }
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.getObjectDefinitions = function(visualAnomalyObjectDefinitions) {
                for (var returnDefinitions = [], _i = 0, visualAnomalyObjectDefinitions_1 = visualAnomalyObjectDefinitions; _i < visualAnomalyObjectDefinitions_1.length; _i++) {
                    var definition = visualAnomalyObjectDefinitions_1[_i], explainByPropertyDef = definition.properties[anomalyDetectionVisualPlugin.Bx];
                    if (explainByPropertyDef && _.isEmpty(explainByPropertyDef.exprs)) {
                        var returnProperties = (0, tslib_es6.__assign)({}, definition.properties);
                        delete returnProperties[anomalyDetectionVisualPlugin.Bx], returnDefinitions.push((0, 
                        tslib_es6.__assign)((0, tslib_es6.__assign)({}, definition), {
                            properties: returnProperties
                        }));
                    } else returnDefinitions.push(definition);
                }
                return returnDefinitions;
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.addInstance = function(visualContainer) {
                var changesBase = getAddInstanceChangesBaseWithNameKey(anomalyDetectionObjectName, cardObjectProperties.anomalyDetection.displayNameBaseKey, visualContainer, this.localizationService);
                debug.fF.assert(function() {
                    var _a;
                    return 1 === (null === (_a = null == changesBase ? void 0 : changesBase.merge) || void 0 === _a ? void 0 : _a.length);
                }, "getAddInstanceChangeBase should return a changes that contains one and only one merge item");
                var mergeChange = changesBase.merge[0], newInstanceSelector = mergeChange.selector;
                debug.fF.assertValue(newInstanceSelector, "forecast addInstance merge change should have a defined selector"), 
                newInstanceSelector.metadata = this.getBoundMeasure(visualContainer), debug.fF.assertValue(newInstanceSelector.metadata, "new anomaly detecton instance selector should have metadata");
                var defaultSensitivityExpr = getDefaultSensitivityParameterExpr();
                mergeChange.properties.transform = {
                    algorithm: anomalyDetectionVisualPlugin.vb,
                    parameters: [ defaultSensitivityExpr ]
                }, mergeChange.properties[anomalyDetectionVisualPlugin.Bx] = {
                    exprs: []
                }, this.telemetryService.logEvent(events.Yu, {
                    objectName: anomalyDetectionObjectName
                }), this.visualAuthoringService.persistProperties(changesBase, visualContainer, !0);
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.getSaveParameterValuesChange = function(cardObjectName, sliceChanges, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var objectEnumeration, anomalyInstance, changes;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _.isEmpty(sliceChanges) ? [ 2 ] : _.every(sliceChanges, function(obj) {
                                return _.includes(anomalyParameterNames, obj.propertySlice.name);
                            }) ? [ 4, enumerateObjectInstances(this.runningVisualService.getVisual(visualContainer).getAdapter(), cardObjectName) ] : [ 2 ];

                          case 1:
                            return objectEnumeration = _a.sent(), _.isEmpty(null == objectEnumeration ? void 0 : objectEnumeration.instances) ? [ 2 ] : (debug.fF.assert(function() {
                                return 1 === objectEnumeration.instances.length;
                            }, cardObjectName + " supports maximum 1 instance but there are " + objectEnumeration.instances.length), 
                            anomalyInstance = objectEnumeration.instances[0], debug.fF.assert(function() {
                                return _.size(sliceChanges) <= 2;
                            }, "At most 2 slice changes since there are only 2 slices in the Apply group"), 
                            changes = {
                                merge: []
                            }, _.forEach(sliceChanges, function(change) {
                                var parameterSlice = change.propertySlice;
                                if (parameterSlice.name === anomalyDetectionVisualPlugin.DM) {
                                    var anomalyTransform = getAnalyticsTransform(anomalyInstance, visualContainer);
                                    if (anomalyTransform) {
                                        var sensitivityExpr = getSensitivityNamedExpr(parameterSlice.value / 100);
                                        changes.merge.push({
                                            objectName: anomalyDetectionObjectName,
                                            selector: anomalyInstance.selector,
                                            properties: {
                                                transform: {
                                                    algorithm: anomalyTransform.algorithm,
                                                    parameters: [ sensitivityExpr ]
                                                }
                                            }
                                        });
                                    }
                                } else if (parameterSlice.name === anomalyDetectionVisualPlugin.Bx) {
                                    var updateInfo = parameterSlice.value;
                                    changes.merge.push({
                                        objectName: anomalyDetectionVisualPlugin.xn,
                                        properties: {
                                            explainBy: {
                                                exprs: _.map(null == updateInfo ? void 0 : updateInfo.newExpr, function(exprAndMetadata) {
                                                    return exprAndMetadata.expr;
                                                }),
                                                kind: "ExprList"
                                            }
                                        },
                                        selector: anomalyInstance.selector
                                    });
                                }
                            }), [ 2, changes ]);
                        }
                    });
                });
            }, AnalyticsFormattingAnomalyDetectionHelper.prototype.getBoundMeasure = function(visualContainer) {
                var query = (0, visualContainerUtils.Xf)(visualContainer);
                debug.fF.assertValue(query, "visualContainer should have a query");
                for (var dataRoles = (0, visualContainerUtils.d$)(visualContainer, this.visualPluginService), _i = 0, _a = null != dataRoles ? dataRoles : []; _i < _a.length; _i++) {
                    var dataRole = _a[_i];
                    if (1 === dataRole.cartesianKind) {
                        var queryRef = query.getQueryRefByProjectionIndex(dataRole.name, 0);
                        if (queryRef) return queryRef;
                    }
                }
            }, AnalyticsFormattingAnomalyDetectionHelper.\u0275fac = function(t) {
                return new (t || AnalyticsFormattingAnomalyDetectionHelper)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, AnalyticsFormattingAnomalyDetectionHelper.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: AnalyticsFormattingAnomalyDetectionHelper,
                factory: AnalyticsFormattingAnomalyDetectionHelper.\u0275fac
            }), AnalyticsFormattingAnomalyDetectionHelper;
        }();
        function getExplainByList(anomalyDetectionInstance, visualContainer) {
            var _a;
            if (anomalyDetectionInstance) {
                var singleVisualConfig = null === (_a = visualContainer.config) || void 0 === _a ? void 0 : _a.singleVisual;
                if (singleVisualConfig) return (0, dataViewObjectDefinition1.NA)(singleVisualConfig.objects, anomalyDetectionVisualPlugin.XZ, anomalyDetectionInstance.selector);
            }
        }
        function getDefaultSensitivityParameterExpr() {
            return getSensitivityNamedExpr(anomalyDetectionVisualPlugin.z$);
        }
        function getSensitivityNamedExpr(sensitivityQueryValue) {
            var expr = (0, dataViewObjectDefinition1.Lo)(sensitivityQueryValue, sensitivityValueDescriptor);
            return debug.fF.assert(function() {
                return expr instanceof sqExpr.Il && (0, sqExprStaticMembers.VC)(expr);
            }, "encoded value for transform sensitivity parameter should be a constant"), {
                name: anomalyDetectionVisualPlugin.DM,
                expr
            };
        }
        var analytics_formatting_forecast_helper_a, analytics_formatting_forecast_helper_b, _c, _d, unitsMap, forecastConfidenceIntervals = __webpack_require__(20114), forecastUnits = __webpack_require__(40253), VisualsData_displayNameGetter = __webpack_require__(21571), dataViewObjectProperties = __webpack_require__(14599), lineInterpolation = __webpack_require__(17772), lineChart_capabilities = __webpack_require__(69871), forecastHelper1 = __webpack_require__(82173), parameters = forecastParameterNames, parameterDefaultSliceValues = ((analytics_formatting_forecast_helper_a = {})[parameters.units] = forecastUnits.xm, 
        analytics_formatting_forecast_helper_a[parameters.forecastLength] = 10, analytics_formatting_forecast_helper_a[parameters.ignoreLast] = 0, 
        analytics_formatting_forecast_helper_a[parameters.confidenceInterval] = forecastConfidenceIntervals.s$, 
        analytics_formatting_forecast_helper_a[parameters.seasonality] = void 0, analytics_formatting_forecast_helper_a), parameterTypes = ((analytics_formatting_forecast_helper_b = {})[parameters.units] = {
            enumeration: forecastUnits.dt
        }, analytics_formatting_forecast_helper_b[parameters.forecastLength] = {
            numeric: !0
        }, analytics_formatting_forecast_helper_b[parameters.ignoreLast] = {
            numeric: !0
        }, analytics_formatting_forecast_helper_b[parameters.confidenceInterval] = {
            enumeration: forecastConfidenceIntervals.dt
        }, analytics_formatting_forecast_helper_b[parameters.seasonality] = {
            numeric: !0
        }, analytics_formatting_forecast_helper_b), parameterMinValues = ((_c = {})[parameters.forecastLength] = 1, 
        _c[parameters.ignoreLast] = 0, _c[parameters.seasonality] = 1, _c), parameterMaxValues = ((_d = {})[parameters.forecastLength] = 2e9, 
        _d[parameters.ignoreLast] = 500, _d[parameters.seasonality] = 2e9, _d), parameterDescriptors = {
            units: {
                objectName: forecastHelper1.Po,
                propertyName: parameters.units
            },
            forecastLength: {
                objectName: forecastHelper1.Po,
                propertyName: parameters.forecastLength
            },
            ignoreLast: {
                objectName: forecastHelper1.Po,
                propertyName: parameters.ignoreLast
            },
            seasonality: {
                objectName: forecastHelper1.Po,
                propertyName: parameters.seasonality
            },
            confidenceInterval: {
                objectName: forecastHelper1.Po,
                propertyName: parameters.confidenceInterval
            }
        }, allParameterNames = _.map(parameterDescriptors, function(parameterDescriptor) {
            return parameterDescriptor.propertyName;
        }), unitsTypeEnumStringToQueryValueMap = (unitsMap = {}, _.forEach(forecastUnits.dt.members(), function(member, index) {
            unitsMap[member.value] = index;
        }), unitsMap), AnalyticsFormattingForecastHelper = function() {
            function AnalyticsFormattingForecastHelper(conceptualSchemaProxy, dataSources, featureSwitchService, localizationService, runningVisualService, telemetryService, visualAuthoringService, visualPluginService) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.featureSwitchService = featureSwitchService, this.localizationService = localizationService, 
                this.runningVisualService = runningVisualService, this.telemetryService = telemetryService, 
                this.visualAuthoringService = visualAuthoringService, this.visualPluginService = visualPluginService;
            }
            return AnalyticsFormattingForecastHelper.prototype.enumerateForecastCard = function(visualContainer, visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var localize, cardBuilderWithInstance, cardBuilder, card_1, forecastInstance, schema, forecastTransform, selectedUnitEnumStringValue, card, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return capabilities.objects[forecastHelper1.Po] ? [ 4, this.querySupportsForecasting(visualContainer) ] : [ 2 ];

                          case 1:
                            return _a.sent() ? [ 4, createMaxOneInstanceCardBaseWithShowToggle(forecastHelper1.Po, "forecast", "Visual_Forecast", visual, capabilities, localize = function(key) {
                                return _this.localizationService.get(key);
                            }, (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], Object.values((0, 
                            dataViewObjectProperties.pN)(forecastHelper1.Po, dataViewObjectProperties.ZB)), !0), Object.values((0, 
                            dataViewObjectProperties.pN)(forecastHelper1.Po, dataViewObjectProperties.PK)), !0), _.map((0, 
                            tslib_es6.__spreadArray)([ parameters.units, parameters.forecastLength, parameters.ignoreLast, parameters.seasonality, parameters.confidenceInterval, "displayName", "matchSeriesInterpolation", "interpolation", "interpolationStep", "interpolationSmooth", "interpolationSmoothParam" ], Object.keys(dataViewObjectProperties.iQ), !0), function(propertyName) {
                                return {
                                    objectName: forecastHelper1.Po,
                                    propertyName
                                };
                            }), !0), "show") ] : [ 2 ];

                          case 2:
                            return (cardBuilderWithInstance = _a.sent()) ? ((0, visualContainerUtils.iv)(visualContainer) ? cardBuilderWithInstance.cardBuilder.withDisabled(!0, "Visual_Forecast_Disabled_For_VC") : (0, 
                            visualContainerUtils.tL)(visualContainer) && cardBuilderWithInstance.cardBuilder.withDisabled(!0, "Visual_Forecast_Disabled_For_Hidden"), 
                            cardBuilder = cardBuilderWithInstance.cardBuilder, cardBuilderWithInstance.disableCard ? ((card_1 = cardBuilder.build()).analyticsPane = !0, 
                            [ 2, card_1 ]) : (forecastInstance = cardBuilderWithInstance.objectInstance, [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ])) : [ 2 ];

                          case 3:
                            return schema = _a.sent(), forecastTransform = getAnalyticsTransform(forecastInstance, visualContainer), 
                            selectedUnitEnumStringValue = getForecastParameterSliceDisplayValue(parameters.units, forecastTransform), 
                            cardBuilder.addGroup("options", function(groupBuilder) {
                                groupBuilder.withDisplayName("Desktop_FileMenu_Options").withDelaySaveSlices().addSimpleSlice("units", function() {
                                    var units = _this.getPossibleUnits(visualContainer, schema);
                                    return new build_control_util.uY({
                                        items: units,
                                        descriptor: parameterDescriptors.units,
                                        value: _.find(units, function(unit) {
                                            return unit.value === selectedUnitEnumStringValue;
                                        })
                                    }).build();
                                }, function(sliceBuilder) {
                                    sliceBuilder.withCustomDisplayName("Visual_Forecast_Parameter_Units").withInfoIconText(_this.localizationService.format("AnalyticsPane_Forecast_Units_Apply_To_Properties_InfoText", [ _this.localizationService.get("Visual_Forecast_Parameter_ForecastLength"), _this.localizationService.get("Visual_Forecast_Parameter_IgnoreLength") ]));
                                }).addSimpleSlice("forecastLength", function() {
                                    var forecastLengthValue = getForecastParameterSliceDisplayValue(parameters.forecastLength, forecastTransform);
                                    return new build_control_util.mu({
                                        descriptor: parameterDescriptors.forecastLength,
                                        value: forecastLengthValue,
                                        options: {
                                            minValue: {
                                                type: 0,
                                                value: parameterMinValues[parameters.forecastLength]
                                            },
                                            maxValue: {
                                                type: 1,
                                                value: parameterMaxValues[parameters.forecastLength]
                                            }
                                        }
                                    }).build();
                                }, function(sliceBuilder) {
                                    sliceBuilder.withCustomDisplayName("Visual_Forecast_Parameter_ForecastLength");
                                }).addSimpleSlice("ignoreLast", function() {
                                    var forecastIgnoreLastValue = getForecastParameterSliceDisplayValue(parameters.ignoreLast, forecastTransform);
                                    return new build_control_util.mu({
                                        descriptor: parameterDescriptors.ignoreLast,
                                        value: forecastIgnoreLastValue,
                                        options: {
                                            minValue: {
                                                type: 0,
                                                value: parameterMinValues[parameters.ignoreLast]
                                            },
                                            maxValue: {
                                                type: 1,
                                                value: parameterMaxValues[parameters.ignoreLast]
                                            }
                                        }
                                    }).build();
                                }, function(sliceBuilder) {
                                    sliceBuilder.withCustomDisplayName("Visual_Forecast_Parameter_IgnoreLength");
                                }).addSimpleSlice("seasonality", function() {
                                    var seasonalityValue = getForecastParameterSliceDisplayValue(parameters.seasonality, forecastTransform);
                                    return new build_control_util.mu({
                                        descriptor: parameterDescriptors.seasonality,
                                        value: seasonalityValue,
                                        options: {
                                            unitSymbol: "Visual_Forecast_Units_Point",
                                            unitSymbolAfterInput: !0,
                                            minValue: {
                                                type: 0,
                                                value: parameterMinValues[parameters.seasonality]
                                            },
                                            maxValue: {
                                                type: 1,
                                                value: parameterMaxValues[parameters.seasonality]
                                            }
                                        },
                                        placeholderText: _this.localizationService.get("Visual_Auto")
                                    }).build();
                                }, function(sliceBuilder) {
                                    sliceBuilder.withCustomDisplayName("Visual_Forecast_Parameter_Seasonality");
                                }).addSimpleSlice("confidenceInterval", function() {
                                    var confidenceIntervalEnumStringValue = getForecastParameterSliceDisplayValue(parameters.confidenceInterval, forecastTransform), intervalItems = getDisplayOptions(forecastConfidenceIntervals.dt.members(), _this.localizationService);
                                    return new build_control_util.uY({
                                        items: intervalItems,
                                        descriptor: parameterDescriptors.confidenceInterval,
                                        value: _.find(intervalItems, function(intervalItem) {
                                            return intervalItem.value === confidenceIntervalEnumStringValue;
                                        })
                                    }).build();
                                }, function(sliceBuilder) {
                                    sliceBuilder.withCustomDisplayName("Visual_Forecast_Parameter_ConfidenceInterval");
                                });
                            }).addGroup("forecastline", function(groupBuilder) {
                                return groupBuilder.withDisplayName("Visual_Forecast_Line").addSlices((0, strokeStyle.Iq)({
                                    containerItemBuilder: groupBuilder,
                                    descriptors: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, (0, dataViewObjectProperties.pN)(forecastHelper1.Po, dataViewObjectProperties.ZB)), {
                                        strokeShow: null
                                    }),
                                    strokeData: (0, strokeStyle.AF)(forecastInstance.properties, dataViewObjectProperties.ZB, {}),
                                    selector: forecastInstance.selector,
                                    featureSwitches: _this.featureSwitchService.featureSwitches,
                                    localize,
                                    isSVGStroke: !0
                                }).map(function(slice) {
                                    return slice.build();
                                })).addSimpleSlice("matchSeriesInterpolation", new build_control_util.bd({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, lineChart_capabilities.qn.forecast.matchSeriesInterpolation), {
                                        selector: forecastInstance.selector
                                    }),
                                    value: forecastInstance.properties.matchSeriesInterpolation
                                }).build()).addSlices((0, lineInterpolation.Ie)({
                                    containerItemBuilder: groupBuilder,
                                    descriptors: lineChart_capabilities.qn.forecast,
                                    interpData: (0, lineInterpolation.Bs)(forecastInstance.properties, {}),
                                    selector: forecastInstance.selector,
                                    featureSwitches: _this.featureSwitchService.featureSwitches,
                                    localize
                                }).map(function(slice) {
                                    return slice.withDisabled(!0 === forecastInstance.properties.matchSeriesInterpolation).build();
                                }));
                            }), cardBuilder.addGroup("confidenceLine", function(groupBuilder) {
                                return groupBuilder.withDisplayName("Visual_Forecast_Confidence_Lines").addSlices((0, 
                                strokeStyle.Iq)({
                                    containerItemBuilder: groupBuilder,
                                    descriptors: (0, dataViewObjectProperties.pN)(forecastHelper1.Po, dataViewObjectProperties.PK),
                                    strokeData: (0, strokeStyle.AF)(forecastInstance.properties, dataViewObjectProperties.PK, {}, void 0, forecastInstance.properties.lineColor.solid.color),
                                    selector: forecastInstance.selector,
                                    featureSwitches: _this.featureSwitchService.featureSwitches,
                                    localize,
                                    isSVGStroke: !0
                                }).map(function(slice) {
                                    return slice.build();
                                }));
                            }).addGroup("confidenceArea", function(groupBuilder) {
                                groupBuilder.withDisplayName("Visual_Forecast_Confidence_Shade").addTopLevelToggle("bandAreaShow", function() {
                                    return new build_control_util.bd({
                                        descriptor: {
                                            objectName: forecastHelper1.Po,
                                            propertyName: "bandAreaShow",
                                            selector: forecastInstance.selector
                                        },
                                        value: forecastInstance.properties.bandAreaShow
                                    }).build();
                                }), addSimpleSlices(groupBuilder, forecastHelper1.Po, forecastInstance, capabilities, localize, [ {
                                    type: "toggle",
                                    sliceName: "bandAreaMatchColor",
                                    propertyName: "bandAreaMatchColor"
                                }, {
                                    type: "color",
                                    sliceName: "bandAreaColor",
                                    propertyName: "bandAreaColor"
                                }, {
                                    type: "transparency",
                                    sliceName: "bandAreaTransparency",
                                    propertyName: "bandAreaTransparency"
                                } ]);
                            }), cardBuilder.addGroup("tooltipTitle", function(groupBuilder) {
                                groupBuilder.withDisplayName("Visual_Forecast_Tooltip_Title").addSimpleSlice("titleText", new build_control_util.fq({
                                    descriptor: {
                                        objectName: forecastHelper1.Po,
                                        propertyName: "displayName",
                                        selector: forecastInstance.selector
                                    },
                                    value: forecastInstance.properties.displayName,
                                    placeholder: ""
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Visual_Title_Text");
                                });
                            }), (card = cardBuilder.build()).analyticsPane = !0, [ 2, card ];
                        }
                    });
                });
            }, AnalyticsFormattingForecastHelper.prototype.checkAddRemoveInstance = function(cardObjectName, slice, visualContainer) {
                return cardObjectName === forecastHelper1.Po && "show" === slice.name && (slice.value ? this.addInstance(visualContainer) : removeInstance(cardObjectName, slice.selector, visualContainer, this.visualAuthoringService), 
                !0);
            }, AnalyticsFormattingForecastHelper.prototype.saveGroupSlices = function(groupDisplayName, sliceChanges, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var changes;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _.some(sliceChanges, function(change) {
                                return change.objectName !== forecastHelper1.Po;
                            }) || groupDisplayName !== this.localizationService.get("Desktop_FileMenu_Options") ? [ 2, !1 ] : [ 4, this.getSaveParameterValuesChange(forecastHelper1.Po, sliceChanges, visualContainer) ];

                          case 1:
                            return changes = _a.sent(), sliceChanges && this.visualAuthoringService.persistProperties(changes, visualContainer, !0), 
                            [ 2, !!sliceChanges ];
                        }
                    });
                });
            }, AnalyticsFormattingForecastHelper.prototype.hasParameterWithNonDefaultValue = function(objects) {
                var forecastDef = _.first(objects[forecastHelper1.Po]);
                if (!forecastDef) return !1;
                var transformProperty = forecastDef.properties.transform;
                if (!transformProperty) return !1;
                if (!_.isEmpty(transformProperty.parameters)) for (var parameterExprs = transformProperty.parameters, defaultValueExprs = getDefaultParameterExprs(), _loop_1 = function(paramNamedExpr) {
                    var matchingDefaultValueNamedExpr = _.find(defaultValueExprs, function(defaultValue) {
                        return defaultValue.name === paramNamedExpr.name;
                    });
                    return debug.fF.assertValue(matchingDefaultValueNamedExpr || paramNamedExpr.name === parameters.seasonality, "every forecast parameter should have a matching default value"), 
                    matchingDefaultValueNamedExpr ? (0, sqExprEqualityVisitor.fS)(paramNamedExpr.expr, matchingDefaultValueNamedExpr.expr) ? void 0 : {
                        value: !0
                    } : {
                        value: paramNamedExpr.name === parameters.seasonality && !!paramNamedExpr.expr
                    };
                }, _i = 0, _a = parameterExprs || []; _i < _a.length; _i++) {
                    var state_1 = _loop_1(_a[_i]);
                    if ("object" == typeof state_1) return state_1.value;
                }
                return !1;
            }, AnalyticsFormattingForecastHelper.prototype.revertForecastSpecialDefinitions = function(visualContainer, definitions, descriptors) {
                if (definitions) {
                    var forecastDef = _.first(definitions[forecastHelper1.Po]);
                    if (forecastDef) if (_.some(descriptors, function(descriptor) {
                        return descriptor.objectName === forecastHelper1.Po && "show" === descriptor.propertyName;
                    })) removeInstance(forecastHelper1.Po, forecastDef.selector, visualContainer, this.visualAuthoringService); else for (var transform = forecastDef.properties.transform, _loop_2 = function(descriptor) {
                        var parameterName = descriptor.propertyName;
                        if (_.includes(allParameterNames, parameterName)) {
                            var paramIndex = _.findIndex(null == transform ? void 0 : transform.parameters, function(param) {
                                return param.name === parameterName;
                            });
                            if (paramIndex >= 0) {
                                var param = transform.parameters[paramIndex];
                                transform.parameters[paramIndex] = getDefaultParameterExpr(param.name), transform.parameters[paramIndex] && param.expr || transform.parameters.splice(paramIndex);
                            }
                        }
                    }, _i = 0, descriptors_1 = descriptors; _i < descriptors_1.length; _i++) _loop_2(descriptors_1[_i]);
                }
            }, AnalyticsFormattingForecastHelper.prototype.querySupportsForecasting = function(visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var boundMeasure, schema, selects;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, visualContainerUtils.Xf)(visualContainer) ? (boundMeasure = this.getForecastBoundMeasure(visualContainer), 
                            _.isEmpty(boundMeasure) ? [ 2, !1 ] : [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ]) : [ 2, !1 ];

                          case 1:
                            return schema = _a.sent(), selects = (0, visualContainerUtils.oJ)(visualContainer), 
                            [ 2, _.every(selects, function(select) {
                                return sqExprUtils.m.isExprValidForAnalysisTransform(select.expr) && !select.expr.hasGroupOnKeys(schema);
                            }) ];
                        }
                    });
                });
            }, AnalyticsFormattingForecastHelper.prototype.addInstance = function(visualContainer) {
                var changesBase = getAddInstanceChangesBaseWithNameKey(forecastHelper1.Po, cardObjectProperties.forecast.displayNameBaseKey, visualContainer, this.localizationService);
                debug.fF.assert(function() {
                    var _a;
                    return 1 === (null === (_a = null == changesBase ? void 0 : changesBase.merge) || void 0 === _a ? void 0 : _a.length);
                }, "getAddInstanceChangeBase should return a changes that contains one and only one merge item");
                var mergeChange = changesBase.merge[0], newInstanceSelector = mergeChange.selector;
                debug.fF.assertValue(newInstanceSelector, "forecast addInstance merge change should have a defined selector"), 
                newInstanceSelector.metadata = this.getForecastBoundMeasure(visualContainer);
                var parameterExprs = getDefaultParameterExprs();
                mergeChange.properties.transform = {
                    algorithm: "Forecast",
                    parameters: parameterExprs
                }, this.telemetryService.logEvent(events.Yu, {
                    objectName: forecastHelper1.Po
                }), this.visualAuthoringService.persistProperties(changesBase, visualContainer, !0);
            }, AnalyticsFormattingForecastHelper.prototype.getSaveParameterValuesChange = function(cardObjectName, sliceChanges, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var objectEnumeration, forecastInstance, forecastTransform, currentParameters;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _.isEmpty(sliceChanges) ? [ 2 ] : _.every(sliceChanges, function(obj) {
                                return _.includes(forecastParameterNames, obj.propertySlice.name);
                            }) ? [ 4, enumerateObjectInstances(this.runningVisualService.getVisual(visualContainer).getAdapter(), cardObjectName) ] : [ 2 ];

                          case 1:
                            return objectEnumeration = _a.sent(), _.isEmpty(null == objectEnumeration ? void 0 : objectEnumeration.instances) ? [ 2 ] : (debug.fF.assert(function() {
                                return 1 === objectEnumeration.instances.length;
                            }, cardObjectName + " supports maximum 1 instance. If there is object enumeration, it should contain exactly 1 instance"), 
                            (forecastTransform = getAnalyticsTransform(forecastInstance = objectEnumeration.instances[0], visualContainer)) ? (currentParameters = [], 
                            _.forEach(_.values(forecastParameterNames), function(paramName) {
                                var parameterName, sliceValue, valueInSaveObj = _.find(sliceChanges, function(saveObj) {
                                    return saveObj.propertySlice.name === paramName;
                                }), currentQueryValue = valueInSaveObj ? (parameterName = paramName, debug.fF.assertValue(sliceValue = valueInSaveObj.propertySlice.value, "sliceValue must be defined"), 
                                parameterName === parameters.units ? unitTypeSliceValueToQueryValue(sliceValue) : parameterName === parameters.confidenceInterval ? confidenceIntervalSliceValueToQueryValue(sliceValue) : sliceValue) : getTransformParameterNumericQueryValue(paramName, forecastTransform);
                                if (null != currentQueryValue) {
                                    var expr = (0, dataViewObjectDefinition1.Lo)(currentQueryValue, parameterTypes[paramName]);
                                    debug.fF.assert(function() {
                                        return expr instanceof sqExpr.Il && (0, sqExprStaticMembers.VC)(expr);
                                    }, "encoded value for transform parameter should be a constant"), currentParameters.push({
                                        name: paramName,
                                        expr
                                    });
                                }
                            }), [ 2, {
                                merge: [ {
                                    objectName: forecastHelper1.Po,
                                    selector: forecastInstance.selector,
                                    properties: {
                                        transform: {
                                            algorithm: forecastTransform.algorithm,
                                            parameters: currentParameters
                                        }
                                    }
                                } ]
                            } ]) : [ 2 ]);
                        }
                    });
                });
            }, AnalyticsFormattingForecastHelper.prototype.getPossibleUnits = function(visualContainer, schema) {
                var visualConfig = visualContainer.config.singleVisual, visualCapabilities = this.visualPluginService.capabilities(visualConfig.visualType), xRole = _.find(visualCapabilities.dataRoles, function(dataRole) {
                    return 0 === dataRole.cartesianKind;
                }), isDateTime = !1, isScalarKey = !1;
                if (xRole) {
                    var queryDefn = visualConfig.query.defn, projections = visualConfig.query.projections, visualRole = xRole.name;
                    if (!projections[visualRole]) return;
                    for (var _loop_3 = function(selectRef) {
                        var matchingSelect = _.find(queryDefn.select(), function(select) {
                            return selectRef.queryRef === select.name;
                        });
                        debug.fF.assertValue(matchingSelect, "select in projections should be present in query");
                        var metadata = matchingSelect.expr.getMetadata(schema);
                        isDateTime = isDateTime || metadata.type.dateTime;
                    }, _i = 0, selectRefs_1 = projections[visualRole].all(); _i < selectRefs_1.length; _i++) _loop_3(selectRefs_1[_i]);
                    isScalarKey = (0, scalarKeyUtils._T)(schema, queryDefn, projections, visualRole);
                }
                var allUnits = forecastUnits.dt.members();
                if (isDateTime || isScalarKey) return getDisplayOptions(allUnits, this.localizationService);
                var pointUnit = _.find(allUnits, function(unit) {
                    return unit.value === forecastUnits.xm;
                });
                return debug.fF.assertValue(pointUnit, '"point" should be an available unit'), getDisplayOptions([ pointUnit ], this.localizationService);
            }, AnalyticsFormattingForecastHelper.prototype.getForecastBoundMeasure = function(visualContainer) {
                var _a, _b, query = null === (_b = null === (_a = visualContainer.config) || void 0 === _a ? void 0 : _a.singleVisual) || void 0 === _b ? void 0 : _b.query;
                if (!query) return "";
                for (var _loop_4 = function(dataRole) {
                    if (1 === dataRole.cartesianKind) {
                        var selects = query.defn.select(), exprs_1 = query.tryGetExprs(dataRole.name) || [];
                        if (1 !== _.size(exprs_1)) return {
                            value: ""
                        };
                        var selectExpr = _.find(selects, function(select) {
                            return (0, sqExprEqualityVisitor.fS)(exprs_1[0], select.expr);
                        });
                        if (selectExpr) return {
                            value: selectExpr.name
                        };
                    }
                }, _i = 0, dataRoles_1 = (0, visualContainerUtils.d$)(visualContainer, this.visualPluginService) || []; _i < dataRoles_1.length; _i++) {
                    var state_2 = _loop_4(dataRoles_1[_i]);
                    if ("object" == typeof state_2) return state_2.value;
                }
                return "";
            }, AnalyticsFormattingForecastHelper.\u0275fac = function(t) {
                return new (t || AnalyticsFormattingForecastHelper)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, AnalyticsFormattingForecastHelper.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: AnalyticsFormattingForecastHelper,
                factory: AnalyticsFormattingForecastHelper.\u0275fac
            }), AnalyticsFormattingForecastHelper;
        }();
        function getDefaultParameterExprs() {
            var exprs = _.map(parameterDefaultSliceValues, function(_value, parameterName) {
                return getDefaultParameterExpr(parameterName);
            });
            return _.filter(exprs, function(expr) {
                return !!expr;
            });
        }
        function getDefaultParameterExpr(parameterName) {
            var defaultSliceValue = parameterDefaultSliceValues[parameterName], queryValue = defaultSliceValue;
            if (null != queryValue) {
                parameterName === parameters.units ? queryValue = unitTypeSliceValueToQueryValue(defaultSliceValue) : parameterName === parameters.confidenceInterval && (queryValue = confidenceIntervalSliceValueToQueryValue(defaultSliceValue));
                var expr = (0, dataViewObjectDefinition1.Lo)(queryValue, parameterTypes[parameterName]);
                return debug.fF.assert(function() {
                    return expr instanceof sqExpr.Il && (0, sqExprStaticMembers.VC)(expr);
                }, "encoded value for transform parameter should be a constant"), {
                    name: parameterName,
                    expr
                };
            }
        }
        function getForecastParameterSliceDisplayValue(parameterName, forecastTransform) {
            var queryValue = getTransformParameterNumericQueryValue(parameterName, forecastTransform);
            return null == queryValue ? parameterDefaultSliceValues[parameterName] : parameterName === parameters.units ? function(queryValue) {
                return _.findKey(unitsTypeEnumStringToQueryValueMap, function(indexValue) {
                    return indexValue === queryValue;
                });
            }(queryValue) : parameterName === parameters.confidenceInterval ? function(queryValue) {
                return 100 * queryValue + "%";
            }(queryValue) : queryValue;
        }
        function unitTypeSliceValueToQueryValue(typeEnumStringValue) {
            return unitsTypeEnumStringToQueryValueMap[typeEnumStringValue];
        }
        function confidenceIntervalSliceValueToQueryValue(enumValue) {
            return parseFloat(enumValue) / 100;
        }
        function getDisplayOptions(members, localizationService) {
            return _.map(members, function(member) {
                return {
                    value: member.value,
                    displayName: (0, VisualsData_displayNameGetter.G)(member.displayName, localizationService)
                };
            });
        }
        var PropertyPaneConsts, PagePropertyPaneConsts, constants = __webpack_require__(57871);
        !function(PropertyPaneConsts) {
            PropertyPaneConsts.MinContainerWidth = constants.A6, PropertyPaneConsts.MinContainerHeight = constants.Q$, 
            PropertyPaneConsts.MaxPrecision = 15, PropertyPaneConsts.SliceNameAxisStart = "axisStart", 
            PropertyPaneConsts.SliceNameAxisEnd = "axisEnd", PropertyPaneConsts.SliceNameStart = "start", 
            PropertyPaneConsts.SliceNameEnd = "end", PropertyPaneConsts.SliceNameInvertAxis = "invertAxis", 
            PropertyPaneConsts.SliceNameSecStart = "secStart", PropertyPaneConsts.SliceNameSecEnd = "secEnd", 
            PropertyPaneConsts.SliceNameSecInvertAxis = "secInvertAxis", PropertyPaneConsts.PlotAreaCardName = "plotArea", 
            PropertyPaneConsts.ImageSliceName = "image", PropertyPaneConsts.MapSliceName = "map", 
            PropertyPaneConsts.ImageFitSliceName = "scaling", PropertyPaneConsts.TransparencySliceName = "transparency";
        }(PropertyPaneConsts || (PropertyPaneConsts = {})), function(PagePropertyPaneConsts) {
            PagePropertyPaneConsts.DisplayAreaName = "displayArea", PagePropertyPaneConsts.PageRefreshCardName = "pageRefresh", 
            PagePropertyPaneConsts.PageSizeCardName = "pageSize", PagePropertyPaneConsts.PageSizeTypeName = "pageSizeTypes", 
            PagePropertyPaneConsts.PageSizeWidthName = "pageSizeWidth", PagePropertyPaneConsts.PageSizeHeightName = "pageSizeHeight", 
            PagePropertyPaneConsts.PageBackgroundColor = "color", PagePropertyPaneConsts.PageInformationCardName = "pageInformation", 
            PagePropertyPaneConsts.PageInformationName = "pageInformationName", PagePropertyPaneConsts.PageInformationQnaPodEnabled = "pageInformationQnaPodEnabled", 
            PagePropertyPaneConsts.PageInformationAltName = "pageInformationAltName", PagePropertyPaneConsts.PageInformationType = "pageInformationType", 
            PagePropertyPaneConsts.PageBackgroundImage = "image", PagePropertyPaneConsts.PageBackgroundTransparency = "transparency", 
            PagePropertyPaneConsts.PageBackgroundRevertToDefault = "revertToDefault", PagePropertyPaneConsts.PageBackgroundCardName = "background", 
            PagePropertyPaneConsts.OutspaceBackgroundCardName = "outspace", PagePropertyPaneConsts.OutspacePaneCardName = "outspacePane", 
            PagePropertyPaneConsts.FilterCardName = "filterCard", PagePropertyPaneConsts.PageSizeUnits = {
                Pixels: "px"
            }, PagePropertyPaneConsts.PersonalizeVisual = "personalizeVisual";
        }(PagePropertyPaneConsts || (PagePropertyPaneConsts = {}));
        var analytics_formatting_referenceLine_helper_a, analytics_formatting_referenceLine_helper_b, visualContainerUtilsHelper = __webpack_require__(3579), referenceLineHelper2 = __webpack_require__(2529), referenceLineShadeRegion = __webpack_require__(12875), selector = __webpack_require__(32379), exploration_display_name_service = __webpack_require__(13702), referenceLineTypes = [ "Min", "Max", "Average", "Median", "Percentile" ], constantReferenceLineTypes = [ "ConstantX", "ConstantY1" ], referenceLineTypeValueDecorators = ((analytics_formatting_referenceLine_helper_a = {}).Min = function(expr) {
            return (0, sqExpr.m_)(expr, 3);
        }, analytics_formatting_referenceLine_helper_a.Max = function(expr) {
            return (0, sqExpr.m_)(expr, 4);
        }, analytics_formatting_referenceLine_helper_a.Average = function(expr) {
            return (0, sqExpr.m_)(expr, 1);
        }, analytics_formatting_referenceLine_helper_a.Median = function(expr) {
            return (0, sqExpr.m_)(expr, 6);
        }, analytics_formatting_referenceLine_helper_a.Percentile = function(expr, percentileString) {
            var percentile = parseFloat(percentileString);
            return percentile = _.isNaN(percentile) ? 0 : Math.min(Math.max(0, percentile), 100), 
            (0, sqExpr.Pe)(expr, percentile / 100, !1);
        }, analytics_formatting_referenceLine_helper_a), commonReferenceAndConstantLineProperties = [ referenceLineHelper2.tZ, referenceLineHelper2.KZ, referenceLineHelper2.oB, referenceLineHelper2.FK, referenceLineHelper2.yl, referenceLineHelper2.Zs, referenceLineHelper2.nR, referenceLineHelper2.G5, referenceLineHelper2.UD, referenceLineHelper2.XI, referenceLineHelper2.pw ], referenceLineTypeToCardDisplayNameKeyMappings = ((analytics_formatting_referenceLine_helper_b = {}).Min = "Visual_Min_Reference_Line", 
        analytics_formatting_referenceLine_helper_b.Max = "Visual_Max_Reference_Line", analytics_formatting_referenceLine_helper_b.Average = "Visual_Average_Reference_Line", 
        analytics_formatting_referenceLine_helper_b.Median = "Visual_Median_Reference_Line", 
        analytics_formatting_referenceLine_helper_b.Percentile = "Visual_Percentile_Reference_Line", 
        analytics_formatting_referenceLine_helper_b), analytics_formatting_referenceLine_helper_referenceLineObjectName = "referenceLine", AnalyticsFormattingReferenceLineHelper = function() {
            function AnalyticsFormattingReferenceLineHelper(conceptualSchemaProxy, dataSourcesService, displayNameService, featureSwitchService, localizationService, telemetryService, visualAuthoringService, visualPluginService) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSourcesService = dataSourcesService, 
                this.displayNameService = displayNameService, this.featureSwitchService = featureSwitchService, 
                this.localizationService = localizationService, this.telemetryService = telemetryService, 
                this.visualAuthoringService = visualAuthoringService, this.visualPluginService = visualPluginService, 
                this.visualToUserUnknownLineInstancesMap = {};
            }
            return AnalyticsFormattingReferenceLineHelper.prototype.getReferenceLineInstancesInfo = function(visualContainer, visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getReferenceAndConstantLinesInfo(visualContainer, visual, capabilities, !1) ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.getReferenceAndConstantLinesInfo = function(visualContainer, visual, capabilities, includeConstantLines) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var objects, selects, buildReferenceLineCards, typedReferenceLineInstances, referenceLineVisualObjInstances, validMeasures, supportsMedian, supportsPercentile, schema, supportInfo, buildXAxisCard, buildY1AxisCard, _loop_1, _i, targetConstantLineTypes_1, returnTypedInstancesInfo, sharedDefaultInstance, _b, _c, lineType, linesOfType, typedDefaultInstance;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return capabilities.objects ? (objects = (0, visualContainerUtils.GQ)(visualContainer), 
                            selects = (0, visualContainerUtils.oJ)(visualContainer), buildReferenceLineCards = !1, 
                            typedReferenceLineInstances = {}, supportsMedian = !1, supportsPercentile = !1, 
                            capabilities.objects[analytics_formatting_referenceLine_helper_referenceLineObjectName] ? [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ] : [ 3, 3 ]) : [ 2 ];

                          case 1:
                            return schema = _d.sent(), validMeasures = getValidMeasures(visualContainer, schema, this.displayNameService, this.visualPluginService), 
                            _.isEmpty(validMeasures) ? [ 3, 3 ] : [ 4, getVisualObjectInstances(visual, analytics_formatting_referenceLine_helper_referenceLineObjectName) ];

                          case 2:
                            referenceLineVisualObjInstances = _d.sent(), (buildReferenceLineCards = !_.isEmpty(referenceLineVisualObjInstances)) && (supportInfo = function(schema, measures) {
                                for (var supportsMedian = !1, supportsPercentile = !1, _i = 0, _a = measures || []; _i < _a.length; _i++) {
                                    var schemaName = _a[_i].selectExpr.expr.getTargetSchemaName(), measureSchema = schema.schema(schemaName), measureCapabilities = null == measureSchema ? void 0 : measureSchema.capabilities;
                                    if ((null == measureCapabilities ? void 0 : measureCapabilities.supportsMedian) && (supportsMedian = !0), 
                                    (null == measureCapabilities ? void 0 : measureCapabilities.supportsPercentile) && (supportsPercentile = !0), 
                                    supportsMedian && supportsPercentile) break;
                                }
                                return {
                                    supportsMedian,
                                    supportsPercentile
                                };
                            }(schema, validMeasures), supportsMedian = supportInfo.supportsMedian, supportsPercentile = supportInfo.supportsPercentile, 
                            typedReferenceLineInstances = null !== (_a = _.chain(referenceLineVisualObjInstances).map(function(instance) {
                                return getLineInstanceInfo(instance, !instance.properties[referenceLineHelper2.$Z], objects, selects);
                            }).groupBy(function(instanceInfo) {
                                return instanceInfo.type;
                            }).value()) && void 0 !== _a ? _a : {}), _d.label = 3;

                          case 3:
                            buildXAxisCard = !1, buildY1AxisCard = !1, _loop_1 = function(constantLineType) {
                                var objectName, constantLineVisualObjInstances, hasInstance;
                                return (0, tslib_es6.__generator)(this, function(_e) {
                                    switch (_e.label) {
                                      case 0:
                                        return objectName = getObjectName(constantLineType), capabilities.objects[objectName] ? [ 4, getVisualObjectInstances(visual, objectName) ] : [ 3, 2 ];

                                      case 1:
                                        constantLineVisualObjInstances = _e.sent(), hasInstance = !_.isEmpty(constantLineVisualObjInstances), 
                                        "ConstantX" === constantLineType ? buildXAxisCard = hasInstance : buildY1AxisCard = hasInstance, 
                                        hasInstance && (typedReferenceLineInstances[constantLineType] = _.map(constantLineVisualObjInstances, function(instance) {
                                            return {
                                                visualObjectInstance: instance,
                                                isDefaultInstance: !instance.properties[referenceLineHelper2.$Z],
                                                type: constantLineType
                                            };
                                        })), _e.label = 2;

                                      case 2:
                                        return [ 2 ];
                                    }
                                });
                            }, _i = 0, targetConstantLineTypes_1 = includeConstantLines ? constantReferenceLineTypes : [], 
                            _d.label = 4;

                          case 4:
                            return _i < targetConstantLineTypes_1.length ? [ 5, _loop_1(targetConstantLineTypes_1[_i]) ] : [ 3, 7 ];

                          case 5:
                            _d.sent(), _d.label = 6;

                          case 6:
                            return _i++, [ 3, 4 ];

                          case 7:
                            if (!buildReferenceLineCards && !buildXAxisCard && !buildY1AxisCard) return [ 2 ];
                            for (returnTypedInstancesInfo = [], _b = 0, _c = (0, tslib_es6.__spreadArray)((0, 
                            tslib_es6.__spreadArray)([], constantReferenceLineTypes, !0), referenceLineTypes, !0); _b < _c.length; _b++) ("ConstantX" !== (lineType = _c[_b]) || buildXAxisCard) && ("ConstantY1" !== lineType || buildY1AxisCard) && (_.includes(referenceLineTypes, lineType) && !buildReferenceLineCards || ("Median" !== lineType || supportsMedian) && ("Percentile" !== lineType || supportsPercentile) && (linesOfType = typedReferenceLineInstances[lineType], 
                            _.isEmpty(linesOfType) && _.includes(referenceLineTypes, lineType) && (sharedDefaultInstance || (sharedDefaultInstance = _.find(typedReferenceLineInstances[unknownLineTypeName], function(instance) {
                                return instance.isDefaultInstance;
                            })), sharedDefaultInstance || (sharedDefaultInstance = getLineInstanceInfo(referenceLineVisualObjInstances[0], !0, objects, selects)), 
                            (typedDefaultInstance = _.cloneDeep(sharedDefaultInstance)).type = lineType, linesOfType = [ typedDefaultInstance ]), 
                            returnTypedInstancesInfo.push([ lineType, linesOfType ])));
                            return debug.fF.assert(function() {
                                return _.every(returnTypedInstancesInfo, function(_a) {
                                    return _.size(_a[1]) >= 1;
                                });
                            }, "We should return at least 1 instance for each of the supported reference or constant reference line types, if no real instance, then return a default one."), 
                            [ 2, {
                                groupedInstances: returnTypedInstancesInfo,
                                validMeasures
                            } ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.createReferenceLineCard = function(cardName, cardDisplayName, allInstancesWithTypeInfo, capabilities, validMeasures, typeOptions) {
                var _this = this, cardUidBuilder = new build_control_util.lg(cardName), localize = function(key) {
                    return _this.localizationService.get(key);
                }, allPropertyDescriptors = [], card = new build_control_util.CQ(cardUidBuilder, cardDisplayName, void 0, localize, !1).addGroup(void 0, function(groupBuilder) {
                    for (var instancesContainer = {
                        uid: cardName + "-container",
                        containerItems: [],
                        displayName: _this.localizationService.get("Apply_Settings_To"),
                        isEditable: !0
                    }, _i = 0, _a = null != allInstancesWithTypeInfo ? allInstancesWithTypeInfo : []; _i < _a.length; _i++) {
                        var lineInstance = _a[_i], lineTypeInternal = lineInstance.type, cardObjectNameWithTypeInfo = getCardObjectNameWithTypeInfo(lineTypeInternal), displayName_1 = getInstanceDisplayName(lineInstance), selector = lineInstance.visualObjectInstance.selector, containerItem = {
                            displayName: displayName_1,
                            groups: [],
                            uid: "".concat(lineTypeInternal, "-").concat((null == selector ? void 0 : selector.id) || unknownLineTypeName)
                        };
                        instancesContainer.containerItems.push(containerItem);
                        var commonDescriptor = {
                            objectName: getObjectName(lineTypeInternal),
                            propertyName: void 0,
                            propertyTypes: void 0,
                            selector,
                            altConstantValueSelector: lineInstance.visualObjectInstance.altConstantValueSelector
                        }, userUnknownLine = null == selector ? void 0 : selector.id.includes(unknownLineTypeName), isUnknownLine = userUnknownLine || lineInstance.isDefaultInstance;
                        if (typeOptions) {
                            var defaultOption = {
                                value: unknownLineTypeName,
                                displayName: _this.localizationService.get("Choose_A_Type")
                            }, typeGroup = getTypeGroup(cardUidBuilder, cardObjectNameWithTypeInfo, lineTypeInternal, defaultOption, typeOptions, commonDescriptor, localize);
                            isUnknownLine && !userUnknownLine && (typeGroup.group.disabled = !0), containerItem.groups.push(typeGroup.group), 
                            allPropertyDescriptors.push.apply(allPropertyDescriptors, typeGroup.descriptors);
                        }
                        var measureGroup = getMeasureGroup(cardUidBuilder, lineTypeInternal, lineInstance, validMeasures, commonDescriptor, cardObjectNameWithTypeInfo, localize);
                        measureGroup && (isUnknownLine && (measureGroup.group.disabled = !0), containerItem.groups.push(measureGroup.group), 
                        allPropertyDescriptors.push.apply(allPropertyDescriptors, measureGroup.descriptors));
                        var lineGroup = getLineGroup.call(_this, cardUidBuilder, lineTypeInternal, lineInstance, capabilities, commonDescriptor, cardObjectNameWithTypeInfo, localize);
                        isUnknownLine && (lineGroup.group.disabled = !0), containerItem.groups.push(lineGroup.group), 
                        allPropertyDescriptors.push.apply(allPropertyDescriptors, lineGroup.descriptors);
                        var shadeAreaGroup = getShadeGroup(cardUidBuilder, lineTypeInternal, lineInstance, capabilities, commonDescriptor, _this.localizationService, localize);
                        shadeAreaGroup && (isUnknownLine && (shadeAreaGroup.group.disabled = !0), containerItem.groups.push(shadeAreaGroup.group), 
                        allPropertyDescriptors.push.apply(allPropertyDescriptors, shadeAreaGroup.descriptors));
                        var dataLabelGroupBuilder = getDataLabelGroup(cardUidBuilder, lineInstance, capabilities, commonDescriptor, localize);
                        isUnknownLine && (dataLabelGroupBuilder.group.disabled = !0), containerItem.groups.push(dataLabelGroupBuilder.group), 
                        allPropertyDescriptors.push.apply(allPropertyDescriptors, dataLabelGroupBuilder.descriptors);
                    }
                    groupBuilder.withContainer(instancesContainer);
                }).build();
                return card.analyticsPane = !0, card.revertToDefaultDescriptors = allPropertyDescriptors, 
                card;
            }, AnalyticsFormattingReferenceLineHelper.prototype.enumerateReferenceAndConstantLineCards = function(visualContainer, visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var buildInfo;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getReferenceAndConstantLinesInfo(visualContainer, visual, capabilities, !0) ];

                          case 1:
                            return buildInfo = _a.sent(), _.isEmpty(null == buildInfo ? void 0 : buildInfo.groupedInstances) ? [ 2 ] : this.featureSwitchService.featureSwitches.onObject ? [ 4, this.enumerateReferenceAndConstantLineCardsV2(visualContainer, buildInfo, capabilities) ] : [ 3, 3 ];

                          case 2:
                          case 4:
                            return [ 2, _a.sent() ];

                          case 3:
                            return [ 4, this.enumerateReferenceAndConstantLineCardsV1(visualContainer, buildInfo, capabilities) ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.checkAddRemoveRenameInstance = function(cardObjectName, slice, visualContainer) {
                var _a, _b, _c;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var lineType, listValue, addLineType, matchReferenceLineTypeString, visualName, existingUserUnknownLinesDisplayNames, unknownLineIndex, newUserUnknownDisplayName, selector, itemToBeDeleted, renameItem, existingUserUnknownLines, matchingUserUnknownLine, newDisplayName, instanceObjectName;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            if ("editable-container-object-name" !== cardObjectName) return [ 2, !1 ];
                            if (listValue = slice.value, debug.fF.assert(function() {
                                var _a, _b, _c;
                                return (_.isEmpty(null === (_a = listValue.itemUpdates) || void 0 === _a ? void 0 : _a.adds) ? 0 : _.size(listValue.itemUpdates.adds)) + (_.isEmpty(null === (_b = listValue.itemUpdates) || void 0 === _b ? void 0 : _b.deletes) ? 0 : _.size(listValue.itemUpdates.deletes)) + (_.isEmpty(null === (_c = listValue.itemUpdates) || void 0 === _c ? void 0 : _c.renames) ? 0 : _.size(listValue.itemUpdates.renames)) <= 1;
                            }, "Expect only one add/delete/rename at a time"), _.isEmpty(null === (_a = listValue.itemUpdates) || void 0 === _a ? void 0 : _a.adds)) return [ 3, 2 ];
                            if (addLineType = void 0, (matchReferenceLineTypeString = _.findKey(referenceLineTypeToCardNameMappings, function(cardName) {
                                return _.includes(slice.name, cardName);
                            })) ? addLineType = matchReferenceLineTypeString : _.includes(slice.name, cardObjectProperties.xAxisReferenceLine.objectName) ? addLineType = "ConstantX" : _.includes(slice.name, cardObjectProperties.y1AxisReferenceLine.objectName) && (addLineType = "ConstantY1"), 
                            null == addLineType) {
                                existingUserUnknownLines = this.visualToUserUnknownLineInstancesMap[visualName = visualContainer.name] || [], 
                                existingUserUnknownLinesDisplayNames = _.map(existingUserUnknownLines, function(existingUserUnknownLine) {
                                    return existingUserUnknownLine.displayName;
                                }), unknownLineIndex = 0, newUserUnknownDisplayName = void 0;
                                do {
                                    unknownLineIndex++, newUserUnknownDisplayName = this.localizationService.format("UserUnknown_Line_Format", [ unknownLineIndex ]);
                                } while (_.includes(existingUserUnknownLinesDisplayNames, newUserUnknownDisplayName));
                                return selector = {
                                    id: "".concat(unknownLineTypeName, "-").concat(unknownLineIndex)
                                }, existingUserUnknownLines.push({
                                    displayName: newUserUnknownDisplayName,
                                    selector
                                }), this.visualToUserUnknownLineInstancesMap[visualName] = existingUserUnknownLines, 
                                [ 2, !0 ];
                            }
                            return [ 4, this.addLineInstance(addLineType, visualContainer) ];

                          case 1:
                            return _d.sent(), [ 2, !0 ];

                          case 2:
                            return (itemToBeDeleted = _.first(null === (_b = listValue.itemUpdates) || void 0 === _b ? void 0 : _b.deletes)) ? (lineType = getLineTypeFromListItemEditorValue(itemToBeDeleted)) === unknownLineTypeName ? (this.removeUserUnknownLine(visualContainer.name, itemToBeDeleted.displayName), 
                            [ 2, !0 ]) : (instanceObjectName = getObjectName(lineType), [ 2, this.deleteInstance(instanceObjectName, visualContainer, itemToBeDeleted.displayName) ]) : (renameItem = _.first(null === (_c = listValue.itemUpdates) || void 0 === _c ? void 0 : _c.renames)) ? (lineType = getLineTypeFromListItemEditorValue(renameItem.item)) === unknownLineTypeName ? (existingUserUnknownLines = this.visualToUserUnknownLineInstancesMap[visualContainer.name], 
                            matchingUserUnknownLine = _.find(existingUserUnknownLines, function(existingUserUnknownLine) {
                                return existingUserUnknownLine.displayName === renameItem.item.displayName;
                            }), newDisplayName = (0, VisualsData_displayNameGetter.G)(renameItem.newDisplayName, this.localizationService), 
                            matchingUserUnknownLine.displayName = newDisplayName, [ 2, !0 ]) : (instanceObjectName = getObjectName(lineType), 
                            [ 2, this.renameInstance(instanceObjectName, visualContainer, renameItem) ]) : [ 2, !1 ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.tryHandleReferenceLineSpecialSave = function(cardObjectName, slice, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var shadeRegionValueToSelect, matchReferenceLineTypeString, change, lineTypeChanges;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return cardObjectName === cardObjectProperties.xAxisReferenceLine.objectName && slice.name === referenceLineHelper2.rS && _.isBoolean(slice.value) ? (shadeRegionValueToSelect = slice.value ? _.find(referenceLineShadeRegion.dt.members(), function(member) {
                                return member.value !== referenceLineShadeRegion.YP;
                            }).value : referenceLineShadeRegion.YP, (change = {
                                objectName: cardObjectName,
                                selector: slice.selector,
                                properties: {}
                            }).properties[slice.name] = shadeRegionValueToSelect, [ 2, {
                                isHandled: !0,
                                persistChanges: {
                                    merge: [ change ]
                                }
                            } ]) : (matchReferenceLineTypeString = _.findKey(referenceLineTypeToCardNameMappings, function(cardName) {
                                return cardName === cardObjectName;
                            })) && ("measure" === slice.name || "percentile" === slice.name) && slice.selector ? (change = function(referenceLineType, slice, visualContainer) {
                                var isChangingMeasureSelection = "measure" === slice.name, isChangingPercentileValue = "percentile" === slice.name;
                                if (debug.fF.assert(function() {
                                    return isChangingMeasureSelection || isChangingPercentileValue;
                                }, "Expect the given slice to be for changing measure selection or changing percentile value"), 
                                isChangingMeasureSelection || isChangingPercentileValue) {
                                    var percentileValue, measureName = isChangingMeasureSelection ? slice.value : slice.selector.metadata;
                                    if (debug.fF.assertValue(measureName, "The slice is for measure or percentile, in either case it should have an associated measure"), 
                                    isChangingPercentileValue) percentileValue = slice.value; else if ("Percentile" === referenceLineType && isChangingMeasureSelection) {
                                        var objects = (0, visualContainerUtils.GQ)(visualContainer), percentileObject = _.find(objects.referenceLine, function(defn) {
                                            return (0, selector.fS)(defn.selector, slice.selector);
                                        });
                                        debug.fF.assertValue(percentileObject, "It is changing measure selection of a percentile line, expect the given visual has a matching percentile object"), 
                                        percentileValue = percentileObject ? (100 * percentileObject.properties.value.k).toString() : "90";
                                    }
                                    return getReferenceLineMeasureOrPercentileExpressionChangeInternal(referenceLineType, slice.selector, isChangingMeasureSelection, measureName, percentileValue, visualContainer);
                                }
                            }(matchReferenceLineTypeString, slice, visualContainer), [ 2, {
                                isHandled: !0,
                                persistChanges: {
                                    merge: [ change ]
                                }
                            } ]) : "type" !== slice.name ? [ 3, 2 ] : [ 4, this.tryGetLineTypeChange(cardObjectName, slice, visualContainer) ];

                          case 1:
                            return [ 2, {
                                isHandled: !0,
                                persistChanges: null == (lineTypeChanges = _a.sent()) ? void 0 : lineTypeChanges.persistChanges,
                                newPropertyChanges: null == lineTypeChanges ? void 0 : lineTypeChanges.newPropertyChanges
                            } ];

                          case 2:
                            return [ 2, {
                                isHandled: !1
                            } ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.tryGetLineTypeChange = function(cardObjectName, slice, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var matchingUnknownLine, matchingUserUnknownLineDisplayName, localizedBaseDisplayName, isDefaultDisplayName_1, oldLineType, matchReferenceLineTypeString, newLineType, visualContainerObjects, instanceObjectName, matchingInstance, isDefaultDisplayName, isOldLineConstantReferenceLineType, isNewLineConstantReferenceLineType, crossObjectChanges;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return slice.selector.id.startsWith(unknownLineTypeName) ? (matchingUnknownLine = _.find(this.visualToUserUnknownLineInstancesMap[visualContainer.name], function(instance) {
                                return instance.selector.id === slice.selector.id;
                            }), this.removeUserUnknownLine(visualContainer.name, matchingUserUnknownLineDisplayName = matchingUnknownLine.displayName), 
                            localizedBaseDisplayName = this.localizationService.get("UserUnknown_Line_Format"), 
                            isDefaultDisplayName_1 = new RegExp("^".concat(localizedBaseDisplayName, " \\d+$")).test(matchingUserUnknownLineDisplayName), 
                            [ 4, this.getAddLineInstanceChanges(slice.value, visualContainer, isDefaultDisplayName_1 ? void 0 : matchingUserUnknownLineDisplayName) ]) : [ 3, 2 ];

                          case 1:
                            return [ 2, {
                                persistChanges: {
                                    merge: _a.sent()
                                }
                            } ];

                          case 2:
                            return "xAxisReferenceLine" === cardObjectName ? oldLineType = "ConstantX" : "y1AxisReferenceLine" === cardObjectName ? oldLineType = "ConstantY1" : (matchReferenceLineTypeString = _.findKey(referenceLineTypeToCardNameMappings, function(cardName) {
                                return _.includes(cardObjectName, cardName);
                            }), oldLineType = matchReferenceLineTypeString), (newLineType = slice.value) === oldLineType ? [ 2, {} ] : (visualContainerObjects = (0, 
                            visualContainerUtils.GQ)(visualContainer), instanceObjectName = getObjectName(oldLineType), 
                            matchingInstance = _.find(visualContainerObjects[instanceObjectName], function(instance) {
                                return instance.selector.id === slice.selector.id;
                            }), isDefaultDisplayName = this.checkDefaultDisplayName(oldLineType, matchingInstance, visualContainer), 
                            isOldLineConstantReferenceLineType = _.includes(constantReferenceLineTypes, oldLineType), 
                            isNewLineConstantReferenceLineType = _.includes(constantReferenceLineTypes, newLineType), 
                            isOldLineConstantReferenceLineType || isNewLineConstantReferenceLineType ? [ 4, this.getModifyCrossObjectLineTypeChange(matchingInstance, visualContainer, oldLineType, newLineType, isDefaultDisplayName) ] : [ 3, 4 ]);

                          case 3:
                            return [ 2, {
                                persistChanges: (crossObjectChanges = _a.sent()).persistChanges,
                                newPropertyChanges: crossObjectChanges.newPropertyChanges
                            } ];

                          case 4:
                            return [ 2, {
                                persistChanges: {
                                    merge: [ this.getModifyReferenceLineTypeChange(slice.selector, newLineType, isDefaultDisplayName, visualContainer) ]
                                }
                            } ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.getModifyReferenceLineTypeChange = function(selector, newLineType, useDefaultDisplayName, visualContainer) {
                debug.fF.assertValue(selector, "Expect selector to be defined");
                var measureName = selector.metadata;
                debug.fF.assertValue(measureName, "Expect measureName to be defined");
                var change = {
                    objectName: analytics_formatting_referenceLine_helper_referenceLineObjectName,
                    selector,
                    properties: {}
                }, percentileValue = "Percentile" === newLineType ? "90" : void 0, decoratedMeasure = (0, 
                referenceLineTypeValueDecorators[newLineType])((0, sqExpr.xA)(measureName), percentileValue);
                if (change.properties.value = decoratedMeasure, useDefaultDisplayName) {
                    var newDisplayNameBase = this.getLineDisplayName(newLineType, visualContainer);
                    change.properties.displayName = getNewInstanceDisplayName(getObjectName(newLineType), visualContainer, newDisplayNameBase, this.localizationService);
                }
                return change;
            }, AnalyticsFormattingReferenceLineHelper.prototype.getModifyCrossObjectLineTypeChange = function(matchingInstance, visualContainer, oldLineType, newLineType, isDefaultDisplayName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var instanceObjectName, matchingInstanceDisplayName, removeInstanceChanges, addInstanceChanges, currentProperties, additionalChanges, persistChanges, newPropertyChanges;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return instanceObjectName = getObjectName(oldLineType), matchingInstanceDisplayName = getDataViewObjectDisplayName(matchingInstance), 
                            removeInstanceChanges = getRemoveInstanceChanges(instanceObjectName, matchingInstance.selector), 
                            [ 4, this.getAddLineInstanceChanges(newLineType, visualContainer, isDefaultDisplayName ? void 0 : matchingInstanceDisplayName) ];

                          case 1:
                            return addInstanceChanges = _a.sent(), currentProperties = matchingInstance.properties, 
                            additionalChanges = [], _.forEach(Object.keys(currentProperties), function(property) {
                                commonReferenceAndConstantLineProperties.includes(property) && additionalChanges.push({
                                    propertyName: property,
                                    value: currentProperties[property]
                                });
                            }), persistChanges = {
                                merge: addInstanceChanges,
                                removeObject: [ removeInstanceChanges ]
                            }, _.isEmpty(additionalChanges) ? [ 2, {
                                persistChanges
                            } ] : (newPropertyChanges = {
                                objectName: getObjectName(newLineType),
                                selector: addInstanceChanges[0].selector,
                                properties: {}
                            }, _.forEach(additionalChanges, function(additionalChange) {
                                newPropertyChanges.properties[additionalChange.propertyName] = additionalChange.value;
                            }), [ 2, {
                                persistChanges,
                                newPropertyChanges
                            } ]);
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.getAddLineInstanceChanges = function(lineType, visualContainer, customDisplayName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var objectName, displayNameBase, addInstanceChanges, newInstanceSelector, schema, validMeasures, change;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return objectName = getObjectName(lineType), displayNameBase = this.getLineDisplayName(lineType, visualContainer), 
                            addInstanceChanges = getAddInstanceChangesBase(objectName, displayNameBase, visualContainer, this.localizationService), 
                            debug.fF.assert(function() {
                                var _a;
                                return 1 === (null === (_a = null == addInstanceChanges ? void 0 : addInstanceChanges.merge) || void 0 === _a ? void 0 : _a.length);
                            }, "getAddInstanceChangeBase should return a changes that contains one and only one merge item"), 
                            customDisplayName && (addInstanceChanges.merge[0].properties.displayName = customDisplayName), 
                            _.includes(referenceLineTypes, lineType) ? (debug.fF.assertValue(newInstanceSelector = addInstanceChanges.merge[0].selector, "referenceLine addInstance merge change should have a defined selector"), 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ]) : [ 3, 2 ];

                          case 1:
                            schema = _a.sent(), validMeasures = getValidMeasures(visualContainer, schema, this.displayNameService, this.visualPluginService), 
                            _.isEmpty(validMeasures) || (change = getReferenceLineMeasureOrPercentileExpressionChangeInternal(lineType, newInstanceSelector, !0, validMeasures[0].value, "Percentile" === lineType ? "90" : void 0, visualContainer)) && addInstanceChanges.merge.push(change), 
                            _a.label = 2;

                          case 2:
                            return this.telemetryService.logEvent(events.Yu, {
                                objectName: lineType
                            }), [ 2, addInstanceChanges.merge ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.removeUserUnknownLine = function(visualName, dislayName) {
                var existingUnknownLines = this.visualToUserUnknownLineInstancesMap[visualName];
                existingUnknownLines = _.filter(existingUnknownLines, function(unknownLine) {
                    return unknownLine.displayName !== dislayName;
                }), this.visualToUserUnknownLineInstancesMap[visualName] = existingUnknownLines;
            }, AnalyticsFormattingReferenceLineHelper.prototype.addLineInstance = function(lineType, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var addInstanceChanges;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getAddLineInstanceChanges(lineType, visualContainer) ];

                          case 1:
                            return addInstanceChanges = _a.sent(), this.visualAuthoringService.persistProperties({
                                merge: addInstanceChanges
                            }, visualContainer, !0), [ 2 ];
                        }
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.deleteInstance = function(instanceObjectName, visualContainer, deleteItemDisplayName) {
                var visualContainerObjects = (0, visualContainerUtils.GQ)(visualContainer), matchingInstance = _.find(visualContainerObjects[instanceObjectName], function(instance) {
                    return getDataViewObjectDisplayName(instance) === deleteItemDisplayName;
                });
                return !!matchingInstance && (removeInstance(instanceObjectName, matchingInstance.selector, visualContainer, this.visualAuthoringService), 
                !0);
            }, AnalyticsFormattingReferenceLineHelper.prototype.renameInstance = function(instanceObjectName, visualContainer, renameItem) {
                var visualContainerObjects = (0, visualContainerUtils.GQ)(visualContainer), matchingInstance = _.find(visualContainerObjects[instanceObjectName], function(instance) {
                    return getDataViewObjectDisplayName(instance) === renameItem.item.displayName;
                });
                return !!matchingInstance && (this.visualAuthoringService.persistProperties({
                    merge: [ {
                        objectName: instanceObjectName,
                        selector: matchingInstance.selector,
                        properties: {
                            displayName: renameItem.newDisplayName
                        }
                    } ]
                }, visualContainer, !0), !0);
            }, AnalyticsFormattingReferenceLineHelper.prototype.enumerateReferenceAndConstantLineCardsV2 = function(visualContainer, buildInfo, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var allLineTypes, typeOptions, cardDisplayNameBase, allInstancesWithLineInfo, realInstancesWithLineInfo, userUnknownLineInfo, realInstancesCount, unknownInstanceCount, totalInstances, sortedInstancesWithLineInfo, userUnknownLineInstances, defaultUnknownLineInstance, cardDisplayName, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return _.isEmpty(null == buildInfo ? void 0 : buildInfo.groupedInstances) ? [ 2 ] : (allLineTypes = _.map(buildInfo.groupedInstances, function(group) {
                            return group[0];
                        }), typeOptions = _.map(allLineTypes, function(lineType) {
                            return {
                                value: lineType,
                                displayName: _this.getLineDisplayName(lineType, visualContainer)
                            };
                        }), cardDisplayNameBase = this.localizationService.get("ReferenceLine"), allInstancesWithLineInfo = [], 
                        _.forEach(buildInfo.groupedInstances, function(group) {
                            return allInstancesWithLineInfo.push.apply(allInstancesWithLineInfo, group[1]);
                        }), realInstancesWithLineInfo = _.filter(allInstancesWithLineInfo, function(instance) {
                            return !instance.isDefaultInstance;
                        }), userUnknownLineInfo = this.visualToUserUnknownLineInstancesMap[visualContainer.name], 
                        realInstancesCount = _.size(realInstancesWithLineInfo), unknownInstanceCount = _.size(userUnknownLineInfo), 
                        totalInstances = realInstancesCount + unknownInstanceCount, sortedInstancesWithLineInfo = _.sortBy(realInstancesWithLineInfo, function(instanceWithLineInfo) {
                            return getInstanceDisplayName(instanceWithLineInfo);
                        }), userUnknownLineInstances = [], _.forEach(userUnknownLineInfo, function(info) {
                            var _a, userUnknownLineInstance = {
                                visualObjectInstance: {
                                    objectName: "referenceLine",
                                    properties: (_a = {}, _a[referenceLineHelper2.ss] = info.displayName, _a),
                                    selector: info.selector
                                },
                                isDefaultInstance: !1,
                                type: unknownLineTypeName
                            };
                            userUnknownLineInstances.push(userUnknownLineInstance);
                        }), sortedInstancesWithLineInfo.push.apply(sortedInstancesWithLineInfo, _.sortBy(userUnknownLineInstances, function(unknownInstance) {
                            return unknownInstance.visualObjectInstance.properties.displayName;
                        })), 0 === totalInstances && ((defaultUnknownLineInstance = (0, tslib_es6.__assign)({}, allInstancesWithLineInfo[0])).type = unknownLineTypeName, 
                        sortedInstancesWithLineInfo.push(defaultUnknownLineInstance)), cardDisplayName = totalInstances > 0 ? this.localizationService.format("NamePattern_Bracket", [ cardDisplayNameBase, totalInstances ]) : cardDisplayNameBase, 
                        [ 2, [ this.createReferenceLineCard("referenceLine", cardDisplayName, sortedInstancesWithLineInfo, capabilities, buildInfo.validMeasures, typeOptions) ] ]);
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.enumerateReferenceAndConstantLineCardsV1 = function(visualContainer, buildInfo, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var cards, _i, _a, _b, lineType, lineInstancesOfType, cardDisplayNameBase, realInstancesCount, cardDisplayName, cardName, card;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        for (cards = [], _i = 0, _a = buildInfo.groupedInstances; _i < _a.length; _i++) lineType = (_b = _a[_i])[0], 
                        lineInstancesOfType = _b[1], _.isEmpty(lineInstancesOfType) || (cardDisplayNameBase = this.getLineDisplayName(lineType, visualContainer), 
                        realInstancesCount = _.size(_.filter(lineInstancesOfType, function(instance) {
                            return !instance.isDefaultInstance;
                        })), cardDisplayName = realInstancesCount > 0 ? this.localizationService.format("NamePattern_Bracket", [ cardDisplayNameBase, realInstancesCount ]) : cardDisplayNameBase, 
                        cardName = getCardName(lineType), card = this.createReferenceLineCard(cardName, cardDisplayName, lineInstancesOfType, capabilities, buildInfo.validMeasures), 
                        cards.push(card));
                        return [ 2, cards ];
                    });
                });
            }, AnalyticsFormattingReferenceLineHelper.prototype.getLineDisplayName = function(lineType, visualContainer) {
                var _a;
                if ("ConstantX" === lineType || "ConstantY1" === lineType) {
                    var objectName = getObjectName(lineType), visualType = (0, visualContainerUtilsHelper.s)(visualContainer), capabilities = this.visualPluginService.capabilities(visualType);
                    return (null === (_a = capabilities.objects[objectName]) || void 0 === _a ? void 0 : _a.displayName) ? (0, 
                    VisualsData_displayNameGetter.G)(capabilities.objects[objectName].displayName, this.localizationService) : this.localizationService.get("ConstantX" === lineType ? "Visual_Reference_Line_X" : "Visual_Reference_Line_Y");
                }
                if (_.includes(referenceLineTypes, lineType)) return this.localizationService.get(referenceLineTypeToCardDisplayNameKeyMappings[lineType]);
                debug.fF.assertFail("should always return a displayName key");
            }, AnalyticsFormattingReferenceLineHelper.prototype.checkDefaultDisplayName = function(lineType, lineInstance, visualContainer) {
                var displayName = getDataViewObjectDisplayName(lineInstance).toLocaleLowerCase(), expectedBaseDisplayName = this.getLineDisplayName(lineType, visualContainer).toLocaleLowerCase();
                return new RegExp("^".concat(expectedBaseDisplayName, " \\d+$")).test(displayName);
            }, AnalyticsFormattingReferenceLineHelper.\u0275fac = function(t) {
                return new (t || AnalyticsFormattingReferenceLineHelper)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, AnalyticsFormattingReferenceLineHelper.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: AnalyticsFormattingReferenceLineHelper,
                factory: AnalyticsFormattingReferenceLineHelper.\u0275fac
            }), AnalyticsFormattingReferenceLineHelper;
        }();
        function getDataViewObjectDisplayName(dataViewObject) {
            return sqExpr.jz.getTextValue(dataViewObject.properties[referenceLineHelper2.ss]);
        }
        function getInstanceDisplayName(instanceObject) {
            return instanceObject.visualObjectInstance.properties.displayName;
        }
        function getReferenceLineCardObjectNameWithTypeInfo(lineType) {
            return getCardObjectNameWithTypeInfo(lineType);
        }
        function getTypeGroup(cardUidBuilder, cardObjectNameWithTypeInfo, lineType, defaultOption, typeOptions, commonDescriptor, localize) {
            return {
                group: new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "type"), localize).addSimpleSlice("type", function() {
                    var selectedOption = lineType !== unknownLineTypeName ? _.find(typeOptions, function(option) {
                        return option.value === lineType;
                    }) : defaultOption;
                    return new build_control_util.uY({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                            objectName: cardObjectNameWithTypeInfo,
                            propertyName: "type"
                        }),
                        items: typeOptions,
                        value: selectedOption
                    }).build();
                }, function(sliceBuilder) {
                    sliceBuilder.withCustomDisplayName("Type");
                }).build(),
                descriptors: [ {
                    objectName: cardObjectNameWithTypeInfo,
                    propertyName: "type"
                } ]
            };
        }
        function getMeasureGroup(cardUidBuilder, lineType, instanceInfo, validMeasures, commonDescriptor, cardObjectNameWithTypeInfo, localize) {
            if (_.includes(referenceLineTypes, lineType)) {
                var propertyTypes = instanceInfo.visualObjectInstance.propertyTypes;
                return {
                    group: new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "measure"), localize).withDisplayName("Series").addSimpleSlice("measure", function() {
                        var selectedMeasure = instanceInfo.isDefaultInstance ? validMeasures[0] : _.find(validMeasures, function(measure) {
                            return measure.value === instanceInfo.measureName;
                        });
                        return new build_control_util.uY({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                                objectName: cardObjectNameWithTypeInfo,
                                propertyTypes: propertyTypes ? propertyTypes.measure : void 0,
                                propertyName: "measure"
                            }),
                            items: validMeasures,
                            value: selectedMeasure
                        }).build();
                    }, function(sliceBuilder) {
                        sliceBuilder.withCustomDisplayName("Series");
                    }).build(),
                    descriptors: [ {
                        objectName: cardObjectNameWithTypeInfo,
                        propertyName: "measure"
                    } ]
                };
            }
        }
        function getLineGroup(cardUidBuilder, lineType, instanceInfo, capabilities, commonDescriptor, cardObjectNameWithTypeInfo, localize) {
            var _a, _b, descriptors = [], instance = instanceInfo.visualObjectInstance, propertyTypes = instance.propertyTypes, lineGroupBuilder = new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "line"), localize).withDisplayName("Visual_Shape_Line");
            instanceInfo.isDefaultInstance || "Percentile" !== lineType || lineGroupBuilder.addSimpleSlice("percentile", function() {
                return debug.fF.assert(function() {
                    return null != instanceInfo.percentileValue;
                }, "percentileValue should be calculated already"), build_control_util.JN.getTransparencySliderBuilder({
                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                        objectName: cardObjectNameWithTypeInfo,
                        propertyTypes: propertyTypes ? propertyTypes.measure : void 0,
                        propertyName: "percentile"
                    }),
                    value: instanceInfo.percentileValue,
                    localize
                }).build();
            }, function(sliceBuilder) {
                sliceBuilder.withCustomDisplayName("Visual_Reference_Line_Percentile");
            }), descriptors.push({
                objectName: cardObjectNameWithTypeInfo,
                propertyName: "percentile"
            });
            var valuePropertyName = referenceLineHelper2.S3, constantLineValueSliceDescriptor = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                propertyTypes: propertyTypes ? propertyTypes[valuePropertyName] : void 0,
                propertyName: referenceLineHelper2.S3,
                instanceKind: instance.propertyInstanceKind && instance.propertyInstanceKind[referenceLineHelper2.S3]
            });
            "ConstantX" === lineType && (lineGroupBuilder.addSimpleSlice(referenceLineHelper2.S3, function() {
                return propertyTypes && propertyTypes[valuePropertyName] && propertyTypes[valuePropertyName].dateTime ? new build_control_util.hz({
                    descriptor: constantLineValueSliceDescriptor,
                    value: instance.properties[valuePropertyName],
                    placeholder: ""
                }).build() : new build_control_util.fq({
                    descriptor: constantLineValueSliceDescriptor,
                    value: instance.properties[valuePropertyName],
                    placeholder: ""
                }).build();
            }), descriptors.push({
                objectName: constantLineValueSliceDescriptor.objectName,
                propertyName: constantLineValueSliceDescriptor.propertyName
            })), "ConstantY1" === lineType && (lineGroupBuilder.addSimpleSlice(referenceLineHelper2.S3, function() {
                return new build_control_util.fq({
                    descriptor: constantLineValueSliceDescriptor,
                    value: instance.properties[referenceLineHelper2.S3],
                    placeholder: ""
                }).build();
            }), descriptors.push({
                objectName: constantLineValueSliceDescriptor.objectName,
                propertyName: constantLineValueSliceDescriptor.propertyName
            }));
            var objectName = instance.objectName;
            if (capabilities.objects[objectName]) {
                var strokeDescriptors = (0, dataViewObjectProperties.pN)(instance.objectName, dataViewObjectProperties.vi), strokeSlices = (0, 
                strokeStyle.Iq)({
                    containerItemBuilder: lineGroupBuilder,
                    descriptors: strokeDescriptors,
                    strokeData: (0, strokeStyle.AF)(instance.properties, dataViewObjectProperties.vi, referenceLineHelper1.xs, null === (_b = null === (_a = instance.properties.lineColor) || void 0 === _a ? void 0 : _a.solid) || void 0 === _b ? void 0 : _b.color),
                    selector: instance.selector,
                    featureSwitches: this.featureSwitchService.featureSwitches,
                    localize,
                    isSVGStroke: !0
                });
                lineGroupBuilder.addSlices(strokeSlices.map(function(slice) {
                    return slice.build();
                })), descriptors.push.apply(descriptors, Object.values(strokeDescriptors));
                var orderedSlices = [ {
                    type: "enumeration",
                    sliceName: "position",
                    propertyName: referenceLineHelper2.FK
                } ];
                addSimpleSlices(lineGroupBuilder, objectName, instance, capabilities, localize, orderedSlices), 
                descriptors.push.apply(descriptors, _.map(orderedSlices, function(slice) {
                    return {
                        objectName,
                        propertyName: slice.propertyName
                    };
                }));
            }
            return {
                group: lineGroupBuilder.build(),
                descriptors
            };
        }
        function getShadeGroup(cardUidBuilder, lineType, instanceInfo, capabilities, commonDescriptor, localizationService, localize) {
            var _a, instance = instanceInfo.visualObjectInstance;
            if ("ConstantX" === lineType && instance.properties.hasOwnProperty(referenceLineHelper2.rS) && _.has(capabilities.objects[commonDescriptor.objectName].properties, referenceLineHelper2.rS)) {
                var shadeGroupBuilder = new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "shadeArea"), localize), shadeRegionMemberNone = _.find(referenceLineShadeRegion.dt.members(), function(member) {
                    return member.value === referenceLineShadeRegion.YP;
                }), shadeAreaToggledOn = instance.properties[referenceLineHelper2.rS] !== shadeRegionMemberNone.value;
                shadeGroupBuilder.withDisplayName("Visual_Shapes_ShadeArea").addTopLevelToggle("shadeAreaShow", function() {
                    return new build_control_util.bd({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                            propertyName: referenceLineHelper2.rS
                        }),
                        value: shadeAreaToggledOn
                    }).build();
                });
                var validPositionValues = _.chain(referenceLineShadeRegion.dt.members()).filter(function(member) {
                    return member.value !== shadeRegionMemberNone.value;
                }).map(function(member) {
                    return {
                        value: member.value,
                        displayName: (0, VisualsData_displayNameGetter.G)(member.displayName, localizationService)
                    };
                }).value(), instanceForDisplay = instance;
                shadeAreaToggledOn || ((instanceForDisplay = (0, tslib_es6.__assign)({}, instance)).properties = (0, 
                tslib_es6.__assign)({}, instance.properties), instanceForDisplay.properties[referenceLineHelper2.rS] = null === (_a = _.first(validPositionValues)) || void 0 === _a ? void 0 : _a.value, 
                _.has(instanceForDisplay.properties, referenceLineHelper2.HO) || (instanceForDisplay.properties[referenceLineHelper2.HO] = {
                    solid: {
                        color: "#000"
                    }
                }), _.has(instanceForDisplay.properties, referenceLineHelper2.af) || (instanceForDisplay.properties[referenceLineHelper2.af] = 0));
                var shadeRegionValueToDisplay = instanceForDisplay.properties[referenceLineHelper2.rS];
                shadeGroupBuilder.addSimpleSlice("shadePosition", function() {
                    return new build_control_util.uY({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                            propertyName: referenceLineHelper2.rS
                        }),
                        items: validPositionValues,
                        value: _.find(validPositionValues, function(position) {
                            return position.value === shadeRegionValueToDisplay;
                        })
                    }).build();
                }, function(sliceBuilder) {
                    sliceBuilder.withCustomDisplayName("Visual_Position");
                }), addSimpleSlices(shadeGroupBuilder, instanceForDisplay.objectName, instanceForDisplay, capabilities, localize, [ {
                    type: "color",
                    sliceName: "shadeColor",
                    propertyName: referenceLineHelper2.HO,
                    customDisplayNameKey: "Generic_Color"
                }, {
                    type: "transparency",
                    sliceName: "shadeTransparency",
                    propertyName: referenceLineHelper2.af,
                    customDisplayNameKey: "Transparency"
                } ]);
                var descriptors = [];
                return descriptors.push({
                    objectName: commonDescriptor.objectName,
                    propertyName: referenceLineHelper2.rS
                }), descriptors.push({
                    objectName: instance.objectName,
                    propertyName: referenceLineHelper2.HO
                }), descriptors.push({
                    objectName: instance.objectName,
                    propertyName: referenceLineHelper2.af
                }), {
                    group: shadeGroupBuilder.build(),
                    descriptors
                };
            }
        }
        function getDataLabelGroup(cardUidBuilder, instanceInfo, capabilities, commonDescriptor, localize) {
            var descriptors = [], dataLabelGroupBuilder = new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "dataLabel"), localize), instance = instanceInfo.visualObjectInstance, showDataLabel = instance.properties.dataLabelShow;
            dataLabelGroupBuilder.withDisplayName("Visual_Reference_Line_Data_Label").addTopLevelToggle("dataLabelShow", function() {
                return new build_control_util.bd({
                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, commonDescriptor), {
                        propertyName: referenceLineHelper2.yl
                    }),
                    value: showDataLabel
                }).build();
            }), descriptors.push({
                objectName: commonDescriptor.objectName,
                propertyName: referenceLineHelper2.yl
            });
            var orderedSlices = [ {
                type: "enumeration",
                sliceName: "dataLabelHorizontalPosition",
                propertyName: referenceLineHelper2.nR
            }, {
                type: "enumeration",
                sliceName: "dataLabelVerticalPosition",
                propertyName: referenceLineHelper2.G5
            }, {
                type: "enumeration",
                sliceName: "dataLabelText",
                propertyName: referenceLineHelper2.Zs,
                customDisplayNameKey: "Style"
            }, {
                type: "color",
                sliceName: "dataLabelColor",
                propertyName: referenceLineHelper2.UD
            }, {
                type: "enumeration",
                sliceName: "dataLabelDisplayUnits",
                propertyName: referenceLineHelper2.XI
            }, {
                type: "numUpDown",
                sliceName: "dataLabelDecimalPoints",
                propertyName: referenceLineHelper2.pw,
                options: {
                    min: 0,
                    max: PropertyPaneConsts.MaxPrecision,
                    placeholderTextKey: "Visual_Auto"
                }
            } ], objectName = instance.objectName;
            showDataLabel ? addSimpleSlices(dataLabelGroupBuilder, objectName, instance, capabilities, localize, orderedSlices) : dataLabelGroupBuilder.addSimpleSlice("dataLabelNotAvailableMessage", function() {
                return new build_control_util.G_({
                    descriptor: {
                        objectName,
                        selector: instance.selector,
                        propertyName: void 0
                    },
                    value: localize("AnalyticsPane_DataLabelGroup_NotAvailable_Message")
                }).build();
            }), descriptors.push.apply(descriptors, _.map(orderedSlices, function(slice) {
                return {
                    objectName,
                    propertyName: slice.propertyName
                };
            }));
            var group = dataLabelGroupBuilder.build();
            return showDataLabel || (group.slices[0].disabled = !0), {
                group,
                descriptors
            };
        }
        function getLineInstanceInfo(instance, isDefaultInstance, visualObjects, selects) {
            debug.fF.assertValue(instance, "instance must be defined");
            var calculatedValue = (0, dataViewObjectDefinition1.NA)(visualObjects, {
                objectName: analytics_formatting_referenceLine_helper_referenceLineObjectName,
                propertyName: referenceLineHelper2.S3
            }, instance.selector), returnInstance = instance;
            isDefaultInstance && ((returnInstance = _.cloneDeep(instance)).properties || (returnInstance.properties = {}), 
            returnInstance.properties[referenceLineHelper2.$Z] = !1, returnInstance.properties[referenceLineHelper2.ss] = "", 
            returnInstance.properties[referenceLineHelper2.yl] = !1, returnInstance.selector = null);
            var valueExpr = calculatedValue;
            if (!valueExpr || !(0, sqExprStaticMembers.iV)(valueExpr) && !(0, sqExprStaticMembers.T5)(valueExpr)) return {
                visualObjectInstance: returnInstance,
                isDefaultInstance,
                type: void 0
            };
            var selectRef = valueExpr.arg;
            if (!selectRef) return {
                visualObjectInstance: returnInstance,
                isDefaultInstance,
                type: void 0
            };
            var percentileValue, type, selectExpr = selects.withName(selectRef.expressionName), measureName = selectExpr ? selectExpr.name : void 0;
            return !isDefaultInstance && (0, sqExprStaticMembers.T5)(valueExpr) ? (percentileValue = 100 * valueExpr.k, 
            type = "Percentile") : (0, sqExprStaticMembers.X5)(valueExpr) ? type = "Min" : (0, 
            sqExprStaticMembers.lg)(valueExpr) ? type = "Max" : (0, sqExprStaticMembers.Xx)(valueExpr) ? type = "Median" : (0, 
            sqExprStaticMembers.Ny)(valueExpr) && (type = "Average"), {
                visualObjectInstance: returnInstance,
                isDefaultInstance,
                type,
                measureName,
                percentileValue
            };
        }
        function getReferenceLineMeasureOrPercentileExpressionChangeInternal(referenceLineType, selector, isForMeasure, measureName, percentileValue, visualContainer) {
            debug.fF.assert(function() {
                return null != referenceLineType;
            }, "Expect referenceLineType to be defined"), debug.fF.assertValue(selector, "Expect selector to be defined"), 
            debug.fF.assertValue(measureName, "Expect measureName to be defined"), debug.fF.assertAnyValue(percentileValue, "");
            var change = {
                objectName: analytics_formatting_referenceLine_helper_referenceLineObjectName,
                selector,
                properties: {}
            };
            if (!isForMeasure || change.selector.metadata !== measureName) {
                if (change.selector.metadata !== measureName) {
                    var objects = (0, visualContainerUtils.GQ)(visualContainer);
                    objects && (0, dataViewObjectDefinition1.xl)(objects, analytics_formatting_referenceLine_helper_referenceLineObjectName, change.selector, {
                        id: change.selector.id,
                        metadata: measureName
                    }), change.selector.metadata = measureName;
                }
                var decoratedMeasure = (0, referenceLineTypeValueDecorators[referenceLineType])((0, 
                sqExpr.xA)(measureName), percentileValue);
                return change.properties.value = decoratedMeasure, change;
            }
        }
        function getObjectName(lineType) {
            return "ConstantX" === lineType ? cardObjectProperties.xAxisReferenceLine.objectName : "ConstantY1" === lineType ? cardObjectProperties.y1AxisReferenceLine.objectName : _.includes(referenceLineTypes, lineType) ? analytics_formatting_referenceLine_helper_referenceLineObjectName : lineType === unknownLineTypeName ? analytics_formatting_referenceLine_helper_referenceLineObjectName + "-default" : void debug.fF.assertFail("should always return an objectName");
        }
        function getCardObjectNameWithTypeInfo(lineType) {
            return "ConstantX" === lineType ? cardObjectProperties.xAxisReferenceLine.objectName : "ConstantY1" === lineType ? cardObjectProperties.y1AxisReferenceLine.objectName : _.includes(referenceLineTypes, lineType) ? referenceLineTypeToCardNameMappings[lineType] : lineType === unknownLineTypeName ? analytics_formatting_referenceLine_helper_referenceLineObjectName + "-default" : void debug.fF.assertFail("should always return an objectName");
        }
        function getCardName(lineType) {
            if ("ConstantX" === lineType) return "xAxisReferenceLine";
            if ("ConstantY1" === lineType) return "y1AxisReferenceLine";
            if (_.includes(referenceLineTypes, lineType)) {
                if ("Min" === lineType) return "referenceLine-minLine";
                if ("Max" === lineType) return "referenceLine-maxLine";
                if ("Average" === lineType) return "referenceLine-averageLine";
                if ("Median" === lineType) return "referenceLine-medianLine";
                if ("Percentile" === lineType) return "referenceLine-percentileLine";
            }
            debug.fF.assertFail("should always return card name");
        }
        function getVisualObjectInstances(visual, objectName) {
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                var enumerationUnormalized, enumeration;
                return (0, tslib_es6.__generator)(this, function(_a) {
                    switch (_a.label) {
                      case 0:
                        return [ 4, enumerateObjectInstances(visual, objectName) ];

                      case 1:
                        return (enumerationUnormalized = _a.sent()) ? [ 2, null == (enumeration = objectEnumerationBuilder.G.normalize(enumerationUnormalized)) ? void 0 : enumeration.instances ] : [ 2 ];
                    }
                });
            });
        }
        function getLineTypeFromListItemEditorValue(listItemEditorValue) {
            return listItemEditorValue.uid.split("-")[0];
        }
        var visualContainerGroup2 = __webpack_require__(9215), trendLineHelper = __webpack_require__(92783), formattingObjectDefinitionsService = __webpack_require__(45221), build = __webpack_require__(6426), utils_visualContainerUtils = __webpack_require__(93599), formatting_utils = __webpack_require__(78432), property_pane_util = __webpack_require__(24408), arrayExtensions = __webpack_require__(50550), types_enumType = __webpack_require__(28488), types_valueType = __webpack_require__(80777), conditional_formatting_utils_service = __webpack_require__(98407), lazy_scoped_provider = __webpack_require__(28894), fill = __webpack_require__(59897);
        function isNoFillItemSupported(slice) {
            if ((0, fill.Gl)(slice.type)) return (0, fill.AG)(slice.type.fill.solid.color);
        }
        function getDescriptor(slice, objectName) {
            return {
                objectName,
                propertyName: slice.name,
                selector: slice.selector,
                propertyTypes: slice.type,
                instanceKind: slice.dynamicExpressionSupport ? 3 : void 0,
                altConstantValueSelector: slice.altConstantValueSelector
            };
        }
        function convertPropertySliceToFormattingSlice(slice, objectName) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
            if (slice) {
                var controlType = function(slice) {
                    var sliceComponentType = property_pane_util.TW(slice);
                    switch (sliceComponentType) {
                      case "alignment":
                        return "AlignmentGroup";

                      case "fill":
                        return "ColorPicker";

                      case "fontPicker":
                        return "FontPicker";

                      case "image":
                        return "ImageUpload";

                      case "numeric":
                      case "numericSelection":
                      case "numericUnitSelection":
                        return "NumUpDown";

                      case "selection":
                      case "propertyPaneSelection":
                        return "Dropdown";

                      case "slider":
                        return "Slider";

                      case "bool":
                        return "ToggleSwitch";

                      case "geoJson":
                        return "ShapeMapSelector";

                      case "gradientBar":
                        return "GradientBar";

                      case "duration":
                        return "DurationPicker";

                      case "dateTime":
                        return "DatePicker";

                      case "text":
                        return "TextInput";

                      case "textarea":
                        return "TextArea";

                      case "readOnlyText":
                        return "ReadOnlyText";

                      case "linkButton":
                        return "Link";

                      case "flagsSelection":
                        return "FlagsSelection";

                      default:
                        debug.fF.assertNever(sliceComponentType);
                    }
                }(slice), componentDisplayName = {
                    displayName: slice.displayName,
                    description: slice.description,
                    uid: objectName + "-" + slice.name
                };
                switch (slice.showLinkButtonOnly && (controlType = "Link", componentDisplayName = (0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                    displayName: slice.linkButtonDisplayName
                })), controlType) {
                  case "ColorPicker":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "ColorPicker",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value,
                                isNoFillItemSupported: isNoFillItemSupported(slice)
                            }
                        }
                    });

                  case "Dropdown":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "Dropdown",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                items: slice.selectionOptions,
                                value: null !== (_a = _.find(slice.selectionOptions, function(option) {
                                    return option.value === slice.value;
                                })) && void 0 !== _a ? _a : slice.selectionOptions[0]
                            }
                        }
                    });

                  case "DurationPicker":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "DurationPicker",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value,
                                validators: slice.validators
                            }
                        }
                    });

                  case "GradientBar":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        suppressDisplayName: !0,
                        control: {
                            type: "GradientBar",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value
                            }
                        }
                    });

                  case "Slider":
                  case "NumUpDown":
                    var minValue_1 = null !== (_c = null === (_b = slice.numericValueOptions) || void 0 === _b ? void 0 : _b.minValue) && void 0 !== _c ? _c : null === (_d = slice.validators) || void 0 === _d ? void 0 : _d.min, maxValue_1 = null !== (_f = null === (_e = slice.numericValueOptions) || void 0 === _e ? void 0 : _e.maxValue) && void 0 !== _f ? _f : null === (_g = slice.validators) || void 0 === _g ? void 0 : _g.max;
                    return debug.fF.assert(function() {
                        return _.isUndefined(minValue_1) || _.isNumber(minValue_1);
                    }, "minValue must be a number"), debug.fF.assert(function() {
                        return _.isUndefined(maxValue_1) || _.isNumber(maxValue_1);
                    }, "maxValue must be a number"), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: controlType,
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value,
                                options: {
                                    unitSymbol: null === (_h = slice.numericValueOptions) || void 0 === _h ? void 0 : _h.unitSymbol,
                                    minValue: {
                                        type: 0,
                                        value: minValue_1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: maxValue_1
                                    }
                                },
                                placeholderText: slice.placeholder
                            }
                        }
                    });

                  case "TextArea":
                  case "TextInput":
                    var validators = {};
                    return (null === (_j = slice.validators) || void 0 === _j ? void 0 : _j.required) && (validators.required = {
                        type: 2
                    }), (null === (_k = slice.validators) || void 0 === _k ? void 0 : _k.pattern) && (validators.pattern = {
                        type: 3,
                        regex: slice.validators.pattern
                    }), (null === (_l = slice.validators) || void 0 === _l ? void 0 : _l.dashArray) && (validators.dashArray = {
                        type: 4
                    }), (null === (_m = slice.validators) || void 0 === _m ? void 0 : _m.maxLength) && (validators.maxLength = {
                        type: 5,
                        value: slice.validators.maxLength
                    }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: controlType,
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value,
                                placeholder: null !== (_o = slice.placeholder) && void 0 !== _o ? _o : "",
                                validators
                            }
                        }
                    });

                  case "ToggleSwitch":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "ToggleSwitch",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value
                            }
                        }
                    });

                  case "AlignmentGroup":
                    var mode = void 0;
                    switch (slice.name) {
                      default:
                        debug.fF.assertFail('Unexpected alignment group name "'.concat(slice.name, '"'));

                      case "horizontalAlignment":
                        mode = "horizontalAlignment";
                        break;

                      case "verticalAlignment":
                        mode = "verticalAlignment";
                    }
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "AlignmentGroup",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                mode,
                                value: slice.value
                            }
                        }
                    });

                  case "ImageUpload":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "ImageUpload",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value
                            }
                        }
                    });

                  case "ShapeMapSelector":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "ShapeMapSelector",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: {
                                    type: slice.value.type,
                                    name: slice.value.name,
                                    content: slice.value.content
                                }
                            }
                        }
                    });

                  case "DatePicker":
                    var minValue_2 = null === (_p = slice.validators) || void 0 === _p ? void 0 : _p.min, maxValue_2 = null === (_q = slice.validators) || void 0 === _q ? void 0 : _q.max;
                    return debug.fF.assert(function() {
                        return _.isUndefined(minValue_2) || _.isDate(minValue_2);
                    }, "minValue must be a Date"), debug.fF.assert(function() {
                        return _.isUndefined(maxValue_2) || _.isDate(maxValue_2);
                    }, "maxValue must be a Date"), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "DatePicker",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value,
                                validators: {
                                    min: {
                                        type: 0,
                                        value: minValue_2
                                    },
                                    max: {
                                        type: 1,
                                        value: maxValue_2
                                    }
                                },
                                placeholder: slice.placeholder
                            }
                        }
                    });

                  case "FontPicker":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "FontPicker",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value
                            }
                        }
                    });

                  case "ReadOnlyText":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "ReadOnlyText",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.value
                            }
                        }
                    });

                  case "Link":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "Link",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                value: slice.linkButtonAction
                            }
                        },
                        suppressDisplayName: slice.showLinkButtonOnly
                    });

                  case "FlagsSelection":
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, componentDisplayName), {
                        control: {
                            type: "FlagsSelection",
                            properties: {
                                descriptor: getDescriptor(slice, objectName),
                                items: slice.selectionOptions,
                                value: slice.value
                            }
                        }
                    });

                  default:
                    debug.fF.assertNever(controlType);
                }
            }
        }
        var visual_capabilities_slice_factory_helper = __webpack_require__(93188), dataBoundObjectQueryExtender = __webpack_require__(35598), selectionUtils = __webpack_require__(21728), propertyPaneViewModel = __webpack_require__(67746), ExploreUI_constants = __webpack_require__(55133), viewModelFactoryEx = __webpack_require__(20590), colorUtility = __webpack_require__(1521), conditional_formatting_util = __webpack_require__(29324), gradientUtils = __webpack_require__(52083), dataViewWildcard = __webpack_require__(96915), bookmark_service = __webpack_require__(17966), exploration_navigation_service = __webpack_require__(39503), form_factor_provider_service = __webpack_require__(17328), undo_redo_service = __webpack_require__(84281), item_picker_service = __webpack_require__(4877), theme_service = __webpack_require__(67660), selection_service = __webpack_require__(72262), visual_style_preset_service = __webpack_require__(69866), SliceRangeNames = [ PropertyPaneConsts.SliceNameAxisStart, PropertyPaneConsts.SliceNameAxisEnd, PropertyPaneConsts.SliceNameStart, PropertyPaneConsts.SliceNameEnd, PropertyPaneConsts.SliceNameSecStart, PropertyPaneConsts.SliceNameSecEnd ], LegacyVisualFormattingService = function() {
            function LegacyVisualFormattingService(bookmarkService, conceptualSchemaProxy, conditionalFormattingUtilsService, dataSources, explorationNavigation, featureSwitchService, formFactor, itemPicker, lazyScoped, localizationService, runningVisuals, selectionService, telemetryService, themeService, undoRedo, visualAuthoring, visualPlugin, visualStylePresetService) {
                this.bookmarkService = bookmarkService, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.conditionalFormattingUtilsService = conditionalFormattingUtilsService, this.dataSources = dataSources, 
                this.explorationNavigation = explorationNavigation, this.featureSwitchService = featureSwitchService, 
                this.formFactor = formFactor, this.itemPicker = itemPicker, this.lazyScoped = lazyScoped, 
                this.localizationService = localizationService, this.runningVisuals = runningVisuals, 
                this.selectionService = selectionService, this.telemetryService = telemetryService, 
                this.themeService = themeService, this.undoRedo = undoRedo, this.visualAuthoring = visualAuthoring, 
                this.visualPlugin = visualPlugin, this.visualStylePresetService = visualStylePresetService, 
                this.hasServicesLoaded = this.loadServices();
            }
            return LegacyVisualFormattingService.prototype.loadServices = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, _b;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return this.conditionalFormattingDialogLauncher ? [ 3, 2 ] : (_a = this, [ 4, this.lazyScoped.get("conditionalFormattingDialogLauncherService") ]);

                          case 1:
                            _a.conditionalFormattingDialogLauncher = _c.sent(), _c.label = 2;

                          case 2:
                            return this.dataBarsDialogLauncher ? [ 3, 4 ] : (_b = this, [ 4, this.lazyScoped.get("dataBarsDialogLauncherService") ]);

                          case 3:
                            _b.dataBarsDialogLauncher = _c.sent(), _c.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, LegacyVisualFormattingService.prototype.getFormattingModel = function(container) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.hasServicesLoaded.then(function() {
                            return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                var model, formattingModel;
                                return (0, tslib_es6.__generator)(this, function(_a) {
                                    switch (_a.label) {
                                      case 0:
                                        return [ 4, this.getPropertyPaneViewModel(container) ];

                                      case 1:
                                        return model = _a.sent(), formattingModel = {
                                            cards: []
                                        }, container && model && (formattingModel.cards = this.createCards(model, container.config.singleVisual.visualType)), 
                                        [ 2, formattingModel ];
                                    }
                                });
                            });
                        }) ];
                    });
                });
            }, LegacyVisualFormattingService.prototype.convertLegacyToModernCards = function(legacyCards, objectDescriptors) {
                var _this = this;
                return legacyCards.reduce(function(result, card) {
                    var _a, formattingCard;
                    if (card.name === propertyPaneViewModel.T9) formattingCard = _this.getConditionalFormattingCard(); else {
                        var group = _this.createNormalGroup(card);
                        formattingCard = {
                            displayName: card.displayName,
                            uid: card.id,
                            description: card.description,
                            disabled: !1,
                            groups: 0 !== group.slices.length || group.container ? [ group ] : [],
                            topLevelToggle: _this.getTopLevelToggle(card),
                            revertToDefaultDescriptors: null !== (_a = card.customRevertToDefaultDescriptors) && void 0 !== _a ? _a : _this.getRevertToDefaultDescriptor(card.name, objectDescriptors),
                            analyticsPane: card.analyticsPane
                        };
                    }
                    return formattingCard && result.push(formattingCard), result;
                }, []);
            }, LegacyVisualFormattingService.prototype.createCards = function(model, visualType) {
                var objectDescriptors = this.visualPlugin.capabilities(visualType).objects;
                return this.convertLegacyToModernCards(model.cards, objectDescriptors);
            }, LegacyVisualFormattingService.prototype.getConditionalFormattingCard = function() {
                var _this = this, container = selectionUtils.UP.getDefaultSelectedVisualInSingleOrMultiCase(this.selectionService);
                if ((0, visualContainerGroup2.Vz)(container)) {
                    var runningVisual = this.runningVisuals.getVisual(container);
                    if (runningVisual && runningVisual.getAdapter()) {
                        var visual = runningVisual.getAdapter(), objectsRepetitions = visual.enumerateObjectRepetition && visual.enumerateObjectRepetition();
                        if (!objectsRepetitions) return;
                        var objectDescriptors = this.visualPlugin.capabilities(container.config.singleVisual.visualType).objects;
                        return (0, conditional_formatting_util.Z)(objectsRepetitions, function(key) {
                            return _this.localizationService.get(key);
                        }, objectDescriptors, "FieldWell_ConditionalFormatting", "");
                    }
                }
            }, LegacyVisualFormattingService.prototype.getRevertToDefaultDescriptor = function(objectName, objectDescriptors) {
                var _a, properties = null === (_a = objectDescriptors[objectName]) || void 0 === _a ? void 0 : _a.properties;
                if (properties) return Object.keys(properties).map(function(key) {
                    return {
                        objectName,
                        propertyName: key
                    };
                });
            }, LegacyVisualFormattingService.prototype.getTopLevelToggle = function(card) {
                var slice = card ? convertPropertySliceToFormattingSlice(card.mainShow, card.name) : void 0;
                return slice && (slice.displayName = void 0, slice.description = void 0, slice.suppressDisplayName = !0), 
                slice;
            }, LegacyVisualFormattingService.prototype.createNormalGroup = function(card) {
                for (var _a, formattingGroup = {
                    displayName: void 0,
                    uid: card.id + "-group",
                    slices: [],
                    disabled: !1
                }, sliceNames = {}, _i = 0, _b = card.slices; _i < _b.length; _i++) {
                    var slice = _b[_i], convertedSlice = convertPropertySliceToFormattingSlice(slice, null !== (_a = slice.customObjectName) && void 0 !== _a ? _a : card.name);
                    void 0 === sliceNames[slice.name] ? sliceNames[slice.name] = 0 : (sliceNames[slice.name]++, 
                    convertedSlice.uid = "".concat(convertedSlice.uid, "-").concat(sliceNames[slice.name])), 
                    convertedSlice && formattingGroup.slices.push(convertedSlice);
                }
                return formattingGroup.container = card.containers ? this.createContainers(card, formattingGroup.uid) : void 0, 
                formattingGroup;
            }, LegacyVisualFormattingService.prototype.createContainers = function(card, groupUid) {
                var containerUid = groupUid + "-container", formattingContainer = {
                    displayName: card.containersLabel,
                    description: card.containersTooltip,
                    containerItems: card.containers.map(function(item) {
                        return {
                            displayName: item.displayName,
                            slices: item.slices.reduce(function(result, slice) {
                                var _a, convertedSlice = convertPropertySliceToFormattingSlice(slice, null !== (_a = slice.customObjectName) && void 0 !== _a ? _a : card.name);
                                return convertedSlice && result.push(convertedSlice), result;
                            }, []),
                            disabled: item.isDisabled,
                            uid: containerUid + item.displayName
                        };
                    }),
                    isEditable: card.containersEditable,
                    uid: containerUid
                };
                return formattingContainer;
            }, LegacyVisualFormattingService.prototype.getPropertyPaneViewModel = function(container, selectedContainers, excludeObjectRepetition, excludeConditionalFormattingCard, disabledSliceTypes) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var model, currentCanvasLayout, mobileAuthoringSectionSize, currentPosition, absolutePosition, containerPosition, visualStyle, sectionSize, runningVisual, visualConfig, visualType, visual, objectsDefinitions, capabilities, visualTitle, showGradientCard, createViewModelOptions;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return container ? (currentCanvasLayout = this.formFactor.getCurrentLayout(), mobileAuthoringSectionSize = {
                                height: ExploreUI_constants.aW,
                                width: ExploreUI_constants.Co
                            }, currentPosition = container.layouts.withId(currentCanvasLayout).position, absolutePosition = (0, 
                            visualContainerUtils.hP)(currentPosition, currentCanvasLayout, container.parentGroup), 
                            containerPosition = {
                                x: Math.round(absolutePosition.x),
                                y: Math.round(absolutePosition.y),
                                width: Math.round(absolutePosition.width),
                                height: Math.round(absolutePosition.height)
                            }, visualStyle = this.themeService.getVisualStyle(this.explorationNavigation.getCurrentExploration().themeCollection), 
                            sectionSize = 1 === currentCanvasLayout ? mobileAuthoringSectionSize : this.explorationNavigation.getCurrentSection().size, 
                            (runningVisual = this.runningVisuals.getVisual(container)) && runningVisual.getAdapter() ? (visualType = (visualConfig = container.config.singleVisual).visualType, 
                            visual = runningVisual.getAdapter(), objectsDefinitions = visualConfig.objects, 
                            (capabilities = this.visualPlugin.capabilities(visualType)) && capabilities.objects ? (visualTitle = visualConfig.evaluatedObjects && visualConfig.evaluatedObjects.title, 
                            showGradientCard = function(visualPlugin, visualContainer) {
                                if (visualContainer && visualContainer.config && visualContainer.config.singleVisual) {
                                    var visualConfig = visualContainer.config.singleVisual, capabilities = visualPlugin.capabilities(visualContainer.config.singleVisual.visualType), fillRuleDecriptor = (0, 
                                    gradientUtils.Zn)(capabilities.objects);
                                    if (fillRuleDecriptor && fillRuleDecriptor.inputRole) {
                                        var query = void 0;
                                        return null != visualConfig && null != (query = visualConfig.query) && null != query.projections && null != query.projections[fillRuleDecriptor.inputRole] && (0, 
                                        dataBoundObjectQueryExtender.mx)(fillRuleDecriptor.conditions, query.projections, (0, 
                                        visualContainerUtils.i1)(query));
                                    }
                                    return !1;
                                }
                            }(this.visualPlugin, container), createViewModelOptions = {
                                visual,
                                dataBarsDialogLauncher: this.dataBarsDialogLauncher,
                                conditionalFormattingDialogLauncher: this.conditionalFormattingDialogLauncher,
                                capabilities,
                                visualConfig,
                                visualContainer: container,
                                visualTitle,
                                visualObjectDefns: objectsDefinitions,
                                visualContainerPosition: containerPosition,
                                showGradientCard,
                                selectedContainers,
                                selectedVisualType: visualType,
                                shouldIncludeObject: function(objectCategory) {
                                    return !objectCategory || 1 === objectCategory;
                                },
                                localizationService: this.localizationService,
                                dataSourcesService: this.dataSources,
                                visualAuthoring: this.visualAuthoring,
                                visualStyle,
                                runningVisual: this.runningVisuals.getVisual(container),
                                sectionSize,
                                canvasLayout: currentCanvasLayout,
                                excludeObjectRepetition,
                                disabledSliceTypes,
                                excludeConditionalFormattingCard
                            }, runningVisual && visual === runningVisual.getAdapter() ? [ 4, this.createViewModelForVisual(createViewModelOptions) ] : [ 3, 2 ]) : [ 3, 2 ]) : [ 3, 2 ]) : [ 3, 3 ];

                          case 1:
                            model = _a.sent(), _a.label = 2;

                          case 2:
                            return [ 3, 4 ];

                          case 3:
                            model = this.createEmptyViewModel(), _a.label = 4;

                          case 4:
                            return [ 2, model ];
                        }
                    });
                });
            }, LegacyVisualFormattingService.prototype.createViewModelForVisual = function(options) {
                var model = this.createEmptyViewModel();
                return this.populatePaneForVisual(model, options);
            }, LegacyVisualFormattingService.prototype.createEmptyViewModel = function() {
                return {
                    selectedVisualType: null,
                    cards: (0, arrayExtensions.bv)()
                };
            }, LegacyVisualFormattingService.prototype.populatePaneForVisual = function(model, options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualOptions;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return visualOptions = visual_capabilities_slice_factory_helper.XK(options), [ 4, this.populatePane(model, visualOptions) ];

                          case 1:
                            return _a.sent(), model.cards = (0, arrayExtensions.z8)(_.sortBy(model.cards, function(card) {
                                return card.index;
                            })), model.selectedVisualType = options.selectedVisualType, this.addValidation(model, options.sectionSize), 
                            [ 2, model ];
                        }
                    });
                });
            }, LegacyVisualFormattingService.prototype.populatePane = function(model, options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var promises, objectName, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        for (objectName in debug.fF.assertValue(model, "model"), debug.fF.assertValue(options, "options"), 
                        debug.fF.assertValue(options.objectDescriptors, "options.objectDescriptors"), model.selectedContainers = options.selectedContainers, 
                        promises = [], options.objectDescriptors) promises.push(this.populateCard(model, options, objectName, options.cardIndexCounter++));
                        return [ 2, Promise.allSettled(promises).then(function() {
                            options.showGradientCard && !model.cards.withName(propertyPaneViewModel.ph) && _this.populateGradientCard(model, options.objectDefinitions, !1, options, options.cardIndexCounter++), 
                            options.enumerateObjectRepetition && !options.excludeConditionalFormattingCard && (_this.conditionalFormattingUtilsService.populateConditionalFormattingCard(model, options), 
                            options.cardIndexCounter++);
                            var general = model.cards.withName(propertyPaneViewModel.LQ);
                            general && (general.index = -2);
                            var cardStylePreset = model.cards.withName(propertyPaneViewModel.H);
                            return cardStylePreset && (cardStylePreset.index = -1), model;
                        }) ];
                    });
                });
            }, LegacyVisualFormattingService.prototype.populateCard = function(model, options, objectName, index) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var objectDescriptor, result, enumeration, propertyPaneCard, isCardDirty;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (objectDescriptor = options.objectDescriptors[objectName]) ? options.shouldIncludeObject && !options.shouldIncludeObject(objectDescriptor.objectCategory) ? [ 2 ] : [ 4, options.enumerateObjectInstances(objectName) ] : [ 2 ];

                          case 1:
                            return result = _a.sent(), !(enumeration = objectEnumerationBuilder.G.normalize(result)) || _.isEmpty(enumeration.instances) ? (options.showGradientCard && "dataPoint" === objectName && this.populateGradientCard(model, options.objectDefinitions, !1, options, index), 
                            [ 2 ]) : ((propertyPaneCard = model.cards.withName(objectName)) || (isCardDirty = !!(options.objectDefinitions && options.objectDefinitions[objectName] && options.objectDefinitions[objectName].length > 0), 
                            propertyPaneCard = {
                                name: objectName,
                                id: property_pane_util.Yb(options.visualType, objectName),
                                index,
                                displayName: (0, viewModelFactoryEx.Gf)(objectDescriptor.displayName, this.localizationService) || objectName,
                                description: (0, viewModelFactoryEx.Gf)(objectDescriptor.description, this.localizationService),
                                slices: (0, arrayExtensions.bv)(),
                                footer: [],
                                mainShow: null,
                                isDirty: isCardDirty
                            }, model.cards.push(propertyPaneCard)), [ 4, this.addSlices(propertyPaneCard, enumeration, objectDescriptor, options) ]);

                          case 2:
                            return _a.sent(), property_pane_util.ht(options, propertyPaneCard), propertyPaneCard.name !== propertyPaneViewModel.LQ && this.addFooterSlicesToCard(propertyPaneCard, options), 
                            [ 2 ];
                        }
                    });
                });
            }, LegacyVisualFormattingService.prototype.addFooterSlicesToCard = function(propertyPaneCard, options) {
                var sliceName = propertyPaneViewModel.tV;
                if (!_.some(propertyPaneCard.footer, function(slice) {
                    return slice.name === sliceName;
                })) {
                    if (propertyPaneCard.name === propertyPaneViewModel.Z0) {
                        var type_1 = {
                            applyToAllPages: !0
                        };
                        propertyPaneCard.footer.push({
                            value: propertyPaneCard.isDirty,
                            name: propertyPaneViewModel.Kp,
                            displayName: "",
                            type: type_1,
                            show: !0,
                            placeholder: "",
                            isValid: !0,
                            isDisabled: this.isSliceDisabled(propertyPaneCard, propertyPaneViewModel.Kp, type_1, options.disabledSliceTypes),
                            save: options.save
                        });
                    }
                    var type = {
                        revertToDefault: !0
                    };
                    propertyPaneCard.footer.push({
                        value: propertyPaneCard.isDirty,
                        name: sliceName,
                        displayName: "",
                        type,
                        show: !0,
                        placeholder: "",
                        isValid: !0,
                        isDisabled: this.isSliceDisabled(propertyPaneCard, sliceName, type, options.disabledSliceTypes),
                        save: options.save
                    });
                }
            }, LegacyVisualFormattingService.prototype.getShowSliceValue = function(propertyPaneCard, propertyName, instance) {
                if (propertyPaneCard.name === PropertyPaneConsts.PlotAreaCardName && instance) {
                    var image = instance.properties[PropertyPaneConsts.ImageSliceName];
                    if (image && (propertyName === PropertyPaneConsts.ImageFitSliceName || propertyName === PropertyPaneConsts.TransparencySliceName)) return null != image.url;
                }
                return !0;
            }, LegacyVisualFormattingService.prototype.populateGradientCard = function(model, objectDefinitions, isGradientDirty, options, index) {
                var fillRule = (0, gradientUtils.Vn)(objectDefinitions);
                if (fillRule) {
                    var gradientCard = this.createGradientCard(model, fillRule, isGradientDirty, options, index);
                    model.cards.push(gradientCard), this.addFooterSlicesToCard(gradientCard, options);
                }
            }, LegacyVisualFormattingService.prototype.addSlices = function(propertyPaneCard, enumeration, objectDescriptor, options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var isPropertyPaneCardDisabled, _i, _a, instance, objectProperties, instanceProperties, container, containerKey, sliceContainer;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            debug.fF.assertValue(propertyPaneCard, "propertyPaneCard"), debug.fF.assertValue(enumeration, "enumeration"), 
                            debug.fF.assertValue(objectDescriptor, "objectDescriptor"), isPropertyPaneCardDisabled = options.isDisabled, 
                            enumeration.containerInfo && !_.isEmpty(enumeration.containers) && (propertyPaneCard.containersLabel = (0, 
                            viewModelFactoryEx.Gf)(enumeration.containerInfo.containersLabel, this.localizationService), 
                            propertyPaneCard.containersTooltip = (0, viewModelFactoryEx.Gf)(enumeration.containerInfo.containersTooltip, this.localizationService)), 
                            _i = 0, _a = enumeration.instances, _b.label = 1;

                          case 1:
                            return _i < _a.length ? (objectProperties = objectDescriptor.properties, instanceProperties = (instance = _a[_i]).properties, 
                            null == instance.containerIdx ? [ 3, 3 ] : (container = objectEnumerationBuilder.G.getContainerForInstance(enumeration, instance), 
                            containerKey = property_pane_util.Yl(propertyPaneCard.name, instance.containerIdx), 
                            sliceContainer = {
                                name: containerKey,
                                displayName: (0, viewModelFactoryEx.Gf)(container.displayName, this.localizationService),
                                value: containerKey,
                                selector: instance.selector,
                                containerIndex: instance.containerIdx,
                                isDisabled: !1,
                                slices: (0, arrayExtensions.bv)()
                            }, propertyPaneCard.containers || (propertyPaneCard.containers = (0, arrayExtensions.bv)()), 
                            [ 4, this.createSlices(instance, objectProperties, options, instanceProperties, propertyPaneCard, isPropertyPaneCardDisabled, sliceContainer.slices, sliceContainer.displayName) ])) : [ 3, 6 ];

                          case 2:
                            return _b.sent(), propertyPaneCard.containers.push(sliceContainer), [ 3, 5 ];

                          case 3:
                            return [ 4, this.createSlices(instance, objectProperties, options, instanceProperties, propertyPaneCard, isPropertyPaneCardDisabled, propertyPaneCard.slices) ];

                          case 4:
                            _b.sent(), _b.label = 5;

                          case 5:
                            return _i++, [ 3, 1 ];

                          case 6:
                            return [ 2 ];
                        }
                    });
                });
            }, LegacyVisualFormattingService.prototype.createSlices = function(instance, objectProperties, options, instanceProperties, propertyPaneCard, isPropertyPaneCardDisabled, slices, sliceContainerDisplayName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualObjectWarningsBag, visualObjectWarnings, visualWarning, _loop_1, this_1, _a, _b, _c, _i;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            for (_c in visualWarning = this.getPropertyWarning(visualObjectWarnings = (visualObjectWarningsBag = options.visualWarningCollection && options.visualWarningCollection.visualObjectWarnings) && visualObjectWarningsBag[propertyPaneCard.name] || []), 
                            _loop_1 = function(propertyName) {
                                var objectPropDesc, propertyDisplayName, objectPropDisplayName, objectPropDescription, objectPropPlaceHolder, displayName, valueType, selectionOptions, propertyDescriptorType, value, slice, numericValueOptions, fillDefinition, propertyKind_1, saveServices, visualStyle;
                                return (0, tslib_es6.__generator)(this, function(_e) {
                                    switch (_e.label) {
                                      case 0:
                                        return property_pane_util.Ke(objectPropDesc = objectProperties[propertyName]) ? (propertyDisplayName = instance.selector ? instance.displayName : void 0, 
                                        objectPropDisplayName = (0, viewModelFactoryEx.Gf)(objectPropDesc.displayName, this_1.localizationService), 
                                        objectPropDescription = (0, viewModelFactoryEx.Gf)(objectPropDesc.description, this_1.localizationService), 
                                        objectPropPlaceHolder = (0, viewModelFactoryEx.Gf)(objectPropDesc.placeHolderText, this_1.localizationService), 
                                        displayName = propertyName === PropertyPaneConsts.ImageSliceName || propertyName === PropertyPaneConsts.MapSliceName ? "" : propertyDisplayName || objectPropDisplayName || propertyName, 
                                        valueType = types_valueType.Ge.fromDescriptor(objectPropDesc.type), [ 4, property_pane_util.cn({
                                            propertyType: valueType,
                                            instance,
                                            propertyName,
                                            paneServices: {
                                                bookmarkService: this_1.bookmarkService,
                                                dataSourcesService: this_1.dataSources,
                                                explorationNavigation: this_1.explorationNavigation,
                                                localizationService: this_1.localizationService,
                                                visualStylePresetService: this_1.visualStylePresetService
                                            },
                                            visualType: options.visualType
                                        }) ]) : [ 2, "continue" ];

                                      case 1:
                                        return selectionOptions = _e.sent(), propertyDescriptorType = this_1.getPropertyDescriptorType(objectPropDesc.type, instance.propertyTypes && instance.propertyTypes[propertyName]), 
                                        value = this_1.getPropertyValue(instanceProperties[propertyName], selectionOptions, propertyDescriptorType, propertyName, options), 
                                        "strictSingleSelect" === (slice = {
                                            name: propertyName,
                                            displayName,
                                            description: objectPropDescription,
                                            type: propertyDescriptorType,
                                            selector: instance.selector,
                                            altConstantValueSelector: instance.altConstantValueSelector,
                                            value,
                                            show: this_1.getShowSliceValue(propertyPaneCard, propertyName, instance),
                                            placeholder: objectPropPlaceHolder,
                                            isValid: !0,
                                            isDisabled: isPropertyPaneCardDisabled || this_1.isSliceDisabled(propertyPaneCard, propertyName, propertyDescriptorType, options.disabledSliceTypes),
                                            containerIndex: instance.containerIdx,
                                            save: options.save,
                                            selectionOptions
                                        }).name && this_1.shouldDisableStrictSelectionDueToMappedColumn(options.visualContainer, slice), 
                                        instance.propertyInstanceKind && 3 === instance.propertyInstanceKind[propertyName] && this_1.conditionalFormattingUtilsService.updateDynamicExpressionSupportForSlice(instance, propertyName, propertyDescriptorType, objectPropDesc, options.objectDefinitions, slice, options.localizationService, visualObjectWarnings, {
                                            featureSwitchService: this_1.featureSwitchService,
                                            visualStylePresetService: this_1.visualStylePresetService,
                                            telemetryService: this_1.telemetryService,
                                            visualAuthoring: this_1.visualAuthoring,
                                            undoRedo: this_1.undoRedo,
                                            explorationNavigation: this_1.explorationNavigation,
                                            visualContainer: options.visualContainer,
                                            conditionalFormattingDialogLauncher: this_1.conditionalFormattingDialogLauncher
                                        }, propertyPaneCard.displayName, slice.selector ? sliceContainerDisplayName : void 0), 
                                        (numericValueOptions = this_1.getNumericValueOptionsFromValidValues(instance, slice) || property_pane_util.X_(slice)) && (slice.numericValueOptions = numericValueOptions), 
                                        this_1.configureValidators(instance, slice), propertyName === propertyPaneViewModel.di ? (visualWarning && (slice.warningMessage = property_pane_util.qb(visualWarning, options.localizationService, !0)), 
                                        propertyPaneCard.mainShow = slice) : slices.push(slice), (!!(fillDefinition = (0, 
                                        dataViewObjectDefinition1.NA)(options.objectDefinitions, {
                                            objectName: "dataPoint",
                                            propertyName: "fill"
                                        }, {
                                            data: [ (0, dataViewWildcard.Ue)(1) ]
                                        })) || this_1.featureSwitchService && this_1.featureSwitchService.featureSwitches.cartesianConditionalFormatting) && instance.propertyInstanceKind && instance.propertyInstanceKind[propertyName] && (1 & (propertyKind_1 = instance.propertyInstanceKind[propertyName]) || (slice.showLinkButtonOnly = !0), 
                                        2 === propertyKind_1 && options.conditionalFormattingDialogLauncherFactory && (debug.fF.assert(function() {
                                            return !(2 === propertyKind_1 && void 0 !== instance.altConstantValueSelector);
                                        }, "Rule-only property kind with alt selector is not supported."), saveServices = {
                                            featureSwitchService: this_1.featureSwitchService,
                                            visualStylePresetService: this_1.visualStylePresetService,
                                            telemetryService: this_1.telemetryService,
                                            visualAuthoring: this_1.visualAuthoring,
                                            undoRedo: this_1.undoRedo,
                                            explorationNavigation: this_1.explorationNavigation
                                        }, visualStyle = this_1.themeService.getVisualStyle(this_1.explorationNavigation.getCurrentExploration().themeCollection), 
                                        this_1.conditionalFormattingUtilsService.addDialogLauncherToSlice(saveServices, options.conditionalFormattingDialogLauncherFactory, options.visualContainer, instance, fillDefinition, objectPropDesc, propertyPaneCard, slice, visualStyle))), 
                                        [ 2 ];
                                    }
                                });
                            }, this_1 = this, _b = [], _a = instanceProperties) _b.push(_c);
                            _i = 0, _d.label = 1;

                          case 1:
                            return _i < _b.length ? (_c = _b[_i]) in _a ? [ 5, _loop_1(_c) ] : [ 3, 3 ] : [ 3, 4 ];

                          case 2:
                            _d.sent(), _d.label = 3;

                          case 3:
                            return _i++, [ 3, 1 ];

                          case 4:
                            return visualWarning && !propertyPaneCard.mainShow && (propertyPaneCard.mainShow = this.createWarningPlaceHolderSlice(property_pane_util.qb(visualWarning, options.localizationService, !0), instance, options, isPropertyPaneCardDisabled)), 
                            [ 2 ];
                        }
                    });
                });
            }, LegacyVisualFormattingService.prototype.configureValidators = function(instance, slice) {
                var validationOptions, valueType = types_valueType.Ge.fromDescriptor(slice.type);
                valueType.numeric ? (validationOptions = this.getVisualObjectValidationOptionsFromValidValues(instance, slice.name)) && (slice.validators = validationOptions.numberRange) : valueType.duration && (validationOptions = this.getDurationPickerValidationOptionsFromValidValues(instance, slice.name)) && (slice.validators = validationOptions.durationRange);
            }, LegacyVisualFormattingService.prototype.shouldDisableStrictSelectionDueToMappedColumn = function(visualContainer, slice) {
                var _a, _b, _c, _d;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, conceptualSchema, selectedItems, parameterMetadata;
                    return (0, tslib_es6.__generator)(this, function(_e) {
                        switch (_e.label) {
                          case 0:
                            return dataSources = this.dataSources.get(), [ 4, this.conceptualSchemaProxy.get(dataSources) ];

                          case 1:
                            return (conceptualSchema = _e.sent()) ? (!(selectedItems = null === (_d = null === (_c = null === (_b = null === (_a = null == visualContainer ? void 0 : visualContainer.config) || void 0 === _a ? void 0 : _a.singleVisual) || void 0 === _b ? void 0 : _b.query) || void 0 === _c ? void 0 : _c.defn) || void 0 === _d ? void 0 : _d.select()) && (null == selectedItems ? void 0 : selectedItems.length) > 1 || 1 !== (null == (parameterMetadata = sqExprUtils.m.getConceptualParameterMetadata(selectedItems[0].expr, conceptualSchema)) ? void 0 : parameterMetadata.kind) || (null == parameterMetadata ? void 0 : parameterMetadata.supportsMultipleValues) || (slice.isDisabled = !0), 
                            [ 2 ]) : [ 2 ];
                        }
                    });
                });
            }, LegacyVisualFormattingService.prototype.getVisualObjectValidationOptionsFromValidValues = function(instance, propertyName) {
                var validValues = instance.validValues;
                if (validValues && validValues[propertyName] && !_.isArray(validValues[propertyName])) {
                    var validationOptions = validValues[propertyName];
                    if (validationOptions.numberRange && _.isNumber(validationOptions.numberRange.max) && _.isNumber(validationOptions.numberRange.min)) return validationOptions;
                }
            }, LegacyVisualFormattingService.prototype.getDurationPickerValidationOptionsFromValidValues = function(instance, propertyName) {
                var validValues = instance.validValues;
                if (validValues && validValues[propertyName] && !_.isArray(validValues[propertyName])) {
                    var validationOptions = validValues[propertyName];
                    if (validationOptions.durationRange) return validationOptions;
                }
            }, LegacyVisualFormattingService.prototype.getNumericValueOptionsFromValidValues = function(instance, slice) {
                var valueType = types_valueType.Ge.fromDescriptor(slice.type);
                if (valueType.integer || valueType.formatting && valueType.formatting.fontSize) {
                    var validationOptions = this.getVisualObjectValidationOptionsFromValidValues(instance, slice.name);
                    if (validationOptions && validationOptions.numberRange) return {
                        minValue: validationOptions.numberRange.min,
                        maxValue: validationOptions.numberRange.max,
                        unitSymbol: validationOptions.unitSymbol || ""
                    };
                }
            }, LegacyVisualFormattingService.prototype.getPropertyDescriptorType = function(objectPropertyDescriptor, propertyTypes) {
                var type = types_valueType.Ge.fromDescriptor(objectPropertyDescriptor);
                if (!type.variant) return objectPropertyDescriptor;
                debug.fF.assertValue(propertyTypes, "propertyTypes");
                for (var requiredType = types_valueType.Ge.fromDescriptor(propertyTypes), _i = 0, _a = type.variant; _i < _a.length; _i++) if (requiredType.isCompatibleFrom(_a[_i])) return propertyTypes;
            }, LegacyVisualFormattingService.prototype.getPropertyValue = function(value, selectionOptions, propertyDescriptor, propertyName, options) {
                if (null == value) return value;
                if (selectionOptions) return property_pane_util.vw(selectionOptions, value);
                if (!propertyDescriptor.numeric || _.isFinite(parseFloat(value))) {
                    if (this.isFillProperty(propertyDescriptor)) {
                        var extractedValue = value && value.solid ? value.solid.color : value;
                        value = {
                            value: (0, colorUtility.SW)(extractedValue && extractedValue.toString())
                        };
                    }
                    return propertyDescriptor.formatting && propertyDescriptor.formatting.stylePreset && (debug.fF.assertValue(options.visualType, "propertyPaneViewModelFactory.getPropertyValue - visualType should exist to set a stylePreset"), 
                    value = {
                        visualType: options.visualType,
                        stylePresetName: value
                    }), value;
                }
            }, LegacyVisualFormattingService.prototype.getPropertyWarning = function(visualObjectWarnings) {
                for (var _i = 0, visualObjectWarnings_1 = visualObjectWarnings; _i < visualObjectWarnings_1.length; _i++) {
                    var visualObjectWarning = visualObjectWarnings_1[_i];
                    if (visualObjectWarning && visualObjectWarning.warnings) for (var _a = 0, _b = visualObjectWarning.warnings; _a < _b.length; _a++) return _b[_a];
                }
            }, LegacyVisualFormattingService.prototype.createWarningPlaceHolderSlice = function(visualWarningMessage, instance, options, isPropertyPaneCardDisabled) {
                var name = "warningPlaceHolder";
                return {
                    name,
                    displayName: "",
                    type: null,
                    selector: instance.selector,
                    value: "",
                    show: !0,
                    placeholder: name,
                    isValid: !0,
                    isDisabled: isPropertyPaneCardDisabled,
                    containerIndex: instance.containerIdx,
                    save: options.save,
                    warningMessage: visualWarningMessage
                };
            }, LegacyVisualFormattingService.prototype.createGradientCard = function(model, fillRule, isGradientDirty, options, index) {
                var propertyPaneCard = model.cards.withName(propertyPaneViewModel.ph);
                propertyPaneCard || (propertyPaneCard = {
                    name: propertyPaneViewModel.ph,
                    id: property_pane_util.Yb(options.visualType, propertyPaneViewModel.ph),
                    index,
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_DataPoint"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_DataPointDescription"), this.localizationService),
                    slices: (0, arrayExtensions.bv)(),
                    footer: [],
                    mainShow: null,
                    isDirty: isGradientDirty
                });
                var defaultGradientColors = this.itemPicker.getDataColors().getGradientColors(), gradientSettings = (0, 
                gradientUtils.Ym)(fillRule), sliceName = "diverging", type = {
                    bool: !0
                };
                return propertyPaneCard.slices.push({
                    value: gradientSettings.diverging,
                    name: sliceName,
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_Diverging"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_DivergingDescription"), this.localizationService),
                    type,
                    show: !0,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: this.isSliceDisabled(propertyPaneCard, sliceName, type, options.disabledSliceTypes)
                }), sliceName = "gradientBar", type = {
                    none: !0
                }, propertyPaneCard.slices.push({
                    value: (0, gradientUtils.Kj)(gradientSettings, defaultGradientColors),
                    name: sliceName,
                    displayName: "gradientBar",
                    type,
                    show: !0,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: this.isSliceDisabled(propertyPaneCard, sliceName, type, options.disabledSliceTypes)
                }), type = {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }, propertyPaneCard.slices.push({
                    value: {
                        value: gradientSettings.minColor || defaultGradientColors.minColor.value
                    },
                    name: sliceName = "minColor",
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MinColor"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MinColorDescription"), this.localizationService),
                    type,
                    show: !0,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: this.isSliceDisabled(propertyPaneCard, sliceName, type, options.disabledSliceTypes)
                }), propertyPaneCard.slices.push({
                    value: {
                        value: gradientSettings.midColor || defaultGradientColors.midColor.value
                    },
                    name: sliceName = "midColor",
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MidColor"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MidColorDescription"), this.localizationService),
                    type: {
                        fill: {
                            solid: {
                                color: !0
                            }
                        }
                    },
                    show: gradientSettings.diverging,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: !gradientSettings.diverging
                }), type = {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                }, propertyPaneCard.slices.push({
                    value: {
                        value: gradientSettings.maxColor || defaultGradientColors.maxColor.value
                    },
                    name: sliceName = "maxColor",
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MaxColor"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MaxColorDescription"), this.localizationService),
                    type,
                    show: !0,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: this.isSliceDisabled(propertyPaneCard, sliceName, type, options.disabledSliceTypes)
                }), type = {
                    numeric: !0
                }, propertyPaneCard.slices.push({
                    value: gradientSettings.minValue,
                    name: sliceName = "minValue",
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MinValue"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MinValueDescription"), this.localizationService),
                    type,
                    show: !0,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: this.isSliceDisabled(propertyPaneCard, sliceName, type, options.disabledSliceTypes)
                }), propertyPaneCard.slices.push({
                    value: gradientSettings.midValue,
                    name: sliceName = "midValue",
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MidValue"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MidValueDescription"), this.localizationService),
                    type: {
                        numeric: !0
                    },
                    show: gradientSettings.diverging,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: !gradientSettings.diverging
                }), type = {
                    numeric: !0
                }, propertyPaneCard.slices.push({
                    value: gradientSettings.maxValue,
                    name: sliceName = "maxValue",
                    displayName: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MaxValue"), this.localizationService),
                    description: (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)("Visual_Gradient_MaxValueDescription"), this.localizationService),
                    type,
                    show: !0,
                    placeholder: "",
                    isValid: !0,
                    save: options.save,
                    isDisabled: this.isSliceDisabled(propertyPaneCard, sliceName, type, options.disabledSliceTypes)
                }), propertyPaneCard;
            }, LegacyVisualFormattingService.prototype.isFillProperty = function(propertyType) {
                return null != propertyType.fill;
            }, LegacyVisualFormattingService.prototype.isSliceDisabled = function(propertyPaneCard, sliceName, sliceType, disabledSliceTypes) {
                return null != propertyPaneCard.mainShow && !1 === propertyPaneCard.mainShow.value && !this.isSliceAlwaysEnabled(sliceName) || !!(null == disabledSliceTypes ? void 0 : disabledSliceTypes.some(function(type) {
                    return !!sliceType[type];
                }));
            }, LegacyVisualFormattingService.prototype.isSliceAlwaysEnabled = function(sliceName) {
                switch (sliceName) {
                  case propertyPaneViewModel.di:
                  case propertyPaneViewModel.b4:
                  case propertyPaneViewModel.tV:
                  case PropertyPaneConsts.SliceNameStart:
                  case PropertyPaneConsts.SliceNameEnd:
                  case PropertyPaneConsts.SliceNameInvertAxis:
                  case PropertyPaneConsts.SliceNameSecStart:
                  case PropertyPaneConsts.SliceNameSecEnd:
                  case PropertyPaneConsts.SliceNameSecInvertAxis:
                  case propertyPaneViewModel.V1:
                  case propertyPaneViewModel.jv:
                  case propertyPaneViewModel.Kp:
                    return !0;

                  default:
                    return !1;
                }
            }, LegacyVisualFormattingService.prototype.addValidation = function(model, sectionSize) {
                for (var _i = 0, _a = model.cards; _i < _a.length; _i++) {
                    var card = _a[_i];
                    switch (card.name) {
                      case propertyPaneViewModel.rR:
                      case propertyPaneViewModel.$l:
                      case propertyPaneViewModel.mn:
                        this.setAxisValidationLimitations(card);
                        break;

                      case propertyPaneViewModel.LQ:
                        this.setGeneralValidationLimitations(card, sectionSize);
                        break;

                      default:
                        for (var _b = 0, _c = card.slices; _b < _c.length; _b++) this.setSliceValidation(_c[_b]);
                    }
                    if (!_.isEmpty(card.containers)) for (var _d = 0, _e = card.containers; _d < _e.length; _d++) for (var _f = 0, _g = _e[_d].slices; _f < _g.length; _f++) this.setSliceValidation(_g[_f]);
                }
                return model;
            }, LegacyVisualFormattingService.prototype.setSliceValidation = function(propertyPaneSlice) {
                var valueType = types_valueType.Ge.fromDescriptor(propertyPaneSlice.type);
                valueType.misc && valueType.misc.webUrl && (propertyPaneSlice.validators || (propertyPaneSlice.validators = {}), 
                propertyPaneSlice.validators.url = !0), (valueType.numeric || valueType.integer || valueType.dateTime) && "indicatorPrecision" === propertyPaneSlice.name && (propertyPaneSlice.validators = {
                    max: PropertyPaneConsts.MaxPrecision
                });
            }, LegacyVisualFormattingService.prototype.setGeneralValidationLimitations = function(propertyPaneCard, sectionSize) {
                for (var _i = 0, _a = propertyPaneCard.slices; _i < _a.length; _i++) {
                    var propertyPaneSlice = _a[_i], sliceName = propertyPaneSlice.name;
                    switch (propertyPaneSlice.validators = {}, sliceName) {
                      case propertyPaneViewModel.Lu:
                        var xSlice = propertyPaneCard.slices.withName(propertyPaneViewModel.X), x = parseFloat(xSlice.value);
                        propertyPaneSlice.validators.max = sectionSize.width - x, propertyPaneSlice.validators.min = PropertyPaneConsts.MinContainerWidth, 
                        propertyPaneSlice.validators.integer = !0, propertyPaneSlice.validators.required = !0;
                        break;

                      case propertyPaneViewModel.oU:
                        var ySlice = propertyPaneCard.slices.withName(propertyPaneViewModel.Y), y = parseFloat(ySlice.value);
                        propertyPaneSlice.validators.max = sectionSize.height - y, propertyPaneSlice.validators.min = PropertyPaneConsts.MinContainerHeight, 
                        propertyPaneSlice.validators.integer = !0, propertyPaneSlice.validators.required = !0;
                        break;

                      case propertyPaneViewModel.X:
                        var widthSlice = propertyPaneCard.slices.withName(propertyPaneViewModel.Lu), width = parseFloat(widthSlice.value);
                        propertyPaneSlice.validators.max = sectionSize.width - width, propertyPaneSlice.validators.min = 0, 
                        propertyPaneSlice.validators.integer = !0, propertyPaneSlice.validators.required = !0;
                        break;

                      case propertyPaneViewModel.Y:
                        var heightSlice = propertyPaneCard.slices.withName(propertyPaneViewModel.oU), height = parseFloat(heightSlice.value);
                        propertyPaneSlice.validators.max = sectionSize.height - height, propertyPaneSlice.validators.min = 0, 
                        propertyPaneSlice.validators.integer = !0, propertyPaneSlice.validators.required = !0;
                    }
                }
            }, LegacyVisualFormattingService.prototype.setAxisValidationLimitations = function(propertyPaneCard) {
                for (var _i = 0, _a = propertyPaneCard.slices; _i < _a.length; _i++) {
                    var propertyPaneSlice = _a[_i], sliceName = propertyPaneSlice.name;
                    if (_.includes(SliceRangeNames, sliceName)) {
                        var valueType = types_valueType.Ge.fromDescriptor(propertyPaneSlice.type);
                        propertyPaneSlice.validators = {};
                        for (var _b = 0, _c = propertyPaneCard.slices; _b < _c.length; _b++) {
                            var currentSlice = _c[_b];
                            if (sliceName === PropertyPaneConsts.SliceNameStart && currentSlice.name === PropertyPaneConsts.SliceNameEnd || sliceName === PropertyPaneConsts.SliceNameSecStart && currentSlice.name === PropertyPaneConsts.SliceNameSecEnd || sliceName === PropertyPaneConsts.SliceNameAxisStart && currentSlice.name === PropertyPaneConsts.SliceNameAxisEnd) if (valueType.dateTime) propertyPaneSlice.validators.max = currentSlice.value; else {
                                var numericValue = parseFloat(currentSlice.value);
                                propertyPaneSlice.validators.max = _.isFinite(numericValue) ? numericValue : void 0, 
                                propertyPaneSlice.validators.decimal = !0;
                            } else (sliceName === PropertyPaneConsts.SliceNameEnd && currentSlice.name === PropertyPaneConsts.SliceNameStart || sliceName === PropertyPaneConsts.SliceNameSecEnd && currentSlice.name === PropertyPaneConsts.SliceNameSecStart || sliceName === PropertyPaneConsts.SliceNameAxisEnd && currentSlice.name === PropertyPaneConsts.SliceNameAxisStart) && (valueType.dateTime ? propertyPaneSlice.validators.min = currentSlice.value : (numericValue = parseFloat(currentSlice.value), 
                            propertyPaneSlice.validators.min = _.isFinite(numericValue) ? numericValue : void 0, 
                            propertyPaneSlice.validators.decimal = !0));
                        }
                    } else this.setSliceValidation(propertyPaneSlice);
                }
            }, LegacyVisualFormattingService.\u0275fac = function(t) {
                return new (t || LegacyVisualFormattingService)(core["\u0275\u0275inject"](bookmark_service.F), core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](conditional_formatting_utils_service.z), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](form_factor_provider_service.F), core["\u0275\u0275inject"](item_picker_service.a), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](theme_service.f), core["\u0275\u0275inject"](undo_redo_service.z), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visual_style_preset_service.A));
            }, LegacyVisualFormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: LegacyVisualFormattingService,
                factory: LegacyVisualFormattingService.\u0275fac
            }), LegacyVisualFormattingService;
        }(), LegacyAnalyticsFormattingService = function() {
            function LegacyAnalyticsFormattingService(conditionalFormattingUtilsService, featureSwitchService, lazyScoped, legacyVisualFormattingService, localizationService, referenceLineHelper, undoRedoService, visualAuthoring, visualPluginService) {
                this.conditionalFormattingUtilsService = conditionalFormattingUtilsService, this.featureSwitchService = featureSwitchService, 
                this.lazyScoped = lazyScoped, this.legacyVisualFormattingService = legacyVisualFormattingService, 
                this.localizationService = localizationService, this.referenceLineHelper = referenceLineHelper, 
                this.undoRedoService = undoRedoService, this.visualAuthoring = visualAuthoring, 
                this.visualPluginService = visualPluginService;
            }
            return LegacyAnalyticsFormattingService.prototype.getFormattingCards = function(visualContainer, runningVisual, visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var legacyAnalyticsCards, legacyPropertyPaneCards, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.buildAnalyticsCards(visualContainer, capabilities, runningVisual, visual) ];

                          case 1:
                            return legacyAnalyticsCards = _a.sent(), _.isEmpty(legacyAnalyticsCards) ? [ 2 ] : (legacyPropertyPaneCards = _.map(legacyAnalyticsCards, function(legacyAnalyticsCard, index) {
                                return _this.convertToPropertyPaneCard(legacyAnalyticsCard, index);
                            }), [ 2, this.legacyVisualFormattingService.convertLegacyToModernCards(legacyPropertyPaneCards, capabilities.objects) ]);
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.getPropertyDisplayName = function(propertyName, propertyDescriptor) {
                if (debug.fF.assertValue(propertyName, "propertyName must be defined"), debug.fF.assertAnyValue(propertyDescriptor, "propertyDescriptor is allowed to have any value"), 
                propertyDescriptor) {
                    var propertyDisplayName = (0, VisualsData_displayNameGetter.G)(propertyDescriptor.displayName, this.localizationService);
                    return _.isEmpty(propertyDisplayName) ? propertyName : propertyDisplayName;
                }
            }, LegacyAnalyticsFormattingService.prototype.getNonReferenceCardDisplayName = function(objectName, objectDescriptor, realInstancesCount) {
                var displayNameWithCount = 1 !== getMaxInstancesCount(objectName) && realInstancesCount > 0, specialCardProperties = _.find(cardObjectProperties, function(objProps) {
                    return objProps.objectName === objectName;
                }), displayNameBase = specialCardProperties ? this.localizationService.get(specialCardProperties.displayNameBaseKey) : this.getObjectDisplayName(objectName, objectDescriptor);
                return displayNameWithCount ? this.localizationService.format("NamePattern_Bracket", [ displayNameBase, realInstancesCount ]) : displayNameBase;
            }, LegacyAnalyticsFormattingService.prototype.getObjectDisplayName = function(objectName, objectDescriptor) {
                var objectDisplayName = (0, VisualsData_displayNameGetter.G)(objectDescriptor.displayName, this.localizationService);
                return _.isEmpty(objectDisplayName) ? objectName : objectDisplayName;
            }, LegacyAnalyticsFormattingService.prototype.getTargetAnalyticsObjects = function(capabilities) {
                var targetObjects = {};
                for (var objectName in capabilities.objects || {}) 2 !== capabilities.objects[objectName].objectCategory || _.includes([ "forecast", "anomalyDetection" ], objectName) || (targetObjects[objectName] = capabilities.objects[objectName]);
                return targetObjects;
            }, LegacyAnalyticsFormattingService.prototype.buildAnalyticsCards = function(visualContainer, capabilities, runningVisual, visual) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var targetAnalyticsObjects, cards, _a, _b, _c, _i, objectName, referenceLineCards, card;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            if (targetAnalyticsObjects = this.getTargetAnalyticsObjects(capabilities), _.isEmpty(targetAnalyticsObjects)) return [ 2 ];
                            for (_c in cards = [], _b = [], _a = targetAnalyticsObjects) _b.push(_c);
                            _i = 0, _d.label = 1;

                          case 1:
                            return _i < _b.length ? (_c = _b[_i]) in _a ? "referenceLine" !== (objectName = _c) ? [ 3, 3 ] : [ 4, this.buildReferenceLineCards(visualContainer, capabilities, visual, runningVisual) ] : [ 3, 5 ] : [ 3, 6 ];

                          case 2:
                            return referenceLineCards = _d.sent(), cards.push.apply(cards, null != referenceLineCards ? referenceLineCards : []), 
                            [ 3, 5 ];

                          case 3:
                            return [ 4, this.buildNonReferenceLineCard(objectName, capabilities.objects[objectName], visualContainer, visual, runningVisual) ];

                          case 4:
                            (card = _d.sent()) && cards.push(card), _d.label = 5;

                          case 5:
                            return _i++, [ 3, 1 ];

                          case 6:
                            return [ 2, cards ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.buildReferenceLineCards = function(visualContainer, capabilities, visual, runningVisual) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var referenceLineobjectDescriptor, referenceLinesInfo, validMeasures, cards, _i, _b, _c, card;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return (referenceLineobjectDescriptor = null === (_a = capabilities.objects) || void 0 === _a ? void 0 : _a.referenceLine) ? [ 4, this.referenceLineHelper.getReferenceLineInstancesInfo(visualContainer, visual, capabilities) ] : [ 2 ];

                          case 1:
                            if (referenceLinesInfo = _d.sent(), _.isEmpty(null == referenceLinesInfo ? void 0 : referenceLinesInfo.groupedInstances)) return [ 2 ];
                            validMeasures = referenceLinesInfo.validMeasures, cards = [], _i = 0, _b = referenceLinesInfo.groupedInstances, 
                            _d.label = 2;

                          case 2:
                            return _i < _b.length ? [ 4, this.buildReferenceLineCard((_c = _b[_i])[0], _c[1], validMeasures, referenceLineobjectDescriptor, visualContainer, runningVisual) ] : [ 3, 5 ];

                          case 3:
                            card = _d.sent(), cards.push(card), _d.label = 4;

                          case 4:
                            return _i++, [ 3, 2 ];

                          case 5:
                            return [ 2, cards ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.buildReferenceLineCard = function(type, instances, validMeasures, objectDescriptor, visualContainer, runningVisual) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var card;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assert(function() {
                                return !_.isEmpty(instances);
                            }, "Expect the given typedLineInstances NOT to be empty"), debug.fF.assert(function() {
                                return !_.isEmpty(validMeasures);
                            }, "Expect the given validMeasures NOT to be empty"), debug.fF.assertValue(objectDescriptor, "Expect the given objectDescriptor to be defined"), 
                            [ 4, this.buildAnalyticsCard("referenceLine", objectDescriptor, {
                                type,
                                instances,
                                validMeasures
                            }, visualContainer, runningVisual) ];

                          case 1:
                            return card = _a.sent(), debug.fF.assertValue(card, "No undefined legacy reference line card should be created"), 
                            [ 2, card ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.buildNonReferenceLineCard = function(objectName, objectDescriptor, visualContainer, visual, runningVisual) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var unnormalizedEnumeration, enumeration;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, enumerateObjectInstances(visual, objectName) ];

                          case 1:
                            return unnormalizedEnumeration = _a.sent(), enumeration = objectEnumerationBuilder.G.normalize(unnormalizedEnumeration), 
                            _.isEmpty(null == enumeration ? void 0 : enumeration.instances) ? [ 2 ] : [ 4, this.buildAnalyticsCard(objectName, objectDescriptor, {
                                instances: enumeration.instances
                            }, visualContainer, runningVisual) ];

                          case 2:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.buildAnalyticsCard = function(objectName, objectDescriptor, cardBuildParams, visualContainer, runningVisual) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var cardId, cardDisplayName, referenceLineType, validMeasures, displayNameBase, realInstancesCount, propertyDescriptors, card, singleVisualConfig, conditionalFormattingDialogLauncher, options, _loop_1, this_1, _i, _a, state_1, firstInstance, instanceBuildParams;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _.isEmpty(cardBuildParams.instances) ? [ 2 ] : (cardBuildParams.hasOwnProperty("validMeasures") ? (validMeasures = cardBuildParams.validMeasures, 
                            cardId = getReferenceLineCardObjectNameWithTypeInfo(referenceLineType = cardBuildParams.type), 
                            displayNameBase = this.localizationService.get(referenceLineTypeToCardDisplayNameKeyMappings[referenceLineType]), 
                            realInstancesCount = _.size(_.filter(cardBuildParams.instances, function(instance) {
                                return !instance.isDefaultInstance;
                            })), cardDisplayName = realInstancesCount > 0 ? this.localizationService.format("NamePattern_Bracket", [ displayNameBase, realInstancesCount ]) : displayNameBase) : (cardId = objectName, 
                            realInstancesCount = _.size(_.filter(cardBuildParams.instances, function(instance) {
                                return !!instance.properties[standardShowPropertyName];
                            })), cardDisplayName = this.getNonReferenceCardDisplayName(objectName, objectDescriptor, realInstancesCount)), 
                            propertyDescriptors = objectDescriptor.properties, card = {
                                objectName,
                                id: cardId,
                                displayName: cardDisplayName,
                                description: (0, VisualsData_displayNameGetter.G)(objectDescriptor.description, this.localizationService),
                                instances: [],
                                defaultInstance: null,
                                maxInstances: getMaxInstancesCount(objectName),
                                supportsUserDefinedInstances: getSupportsUserDefinedInstances(objectName)
                            }, singleVisualConfig = visualContainer.config.singleVisual, [ 4, this.lazyScoped.get("conditionalFormattingDialogLauncherService") ]);

                          case 1:
                            conditionalFormattingDialogLauncher = _b.sent(), options = {
                                conditionalFormattingDialogLauncher,
                                conditionalFormattingUtilsService: this.conditionalFormattingUtilsService,
                                featureSwitchService: this.featureSwitchService,
                                localizationService: this.localizationService,
                                objectDefinitions: singleVisualConfig.objects,
                                visualAuthoring: this.visualAuthoring,
                                visualContainer,
                                visualPlugin: this.visualPluginService,
                                visualWarningCollection: runningVisual.getWarnings(),
                                undoRedo: this.undoRedoService
                            }, _loop_1 = function(instance) {
                                var instanceBuildParams, visualObjectInstance, isDefaultInstance, disabledReason;
                                return (0, tslib_es6.__generator)(this, function(_c) {
                                    switch (_c.label) {
                                      case 0:
                                        return instanceBuildParams = void 0, visualObjectInstance = void 0, isReferenceLineInstanceInfo(instance) ? (visualObjectInstance = instance.visualObjectInstance, 
                                        isDefaultInstance = instance.isDefaultInstance, instanceBuildParams = {
                                            instance,
                                            validMeasures
                                        }) : (isDefaultInstance = !(visualObjectInstance = instance).properties[standardShowPropertyName], 
                                        instanceBuildParams = instance), debug.fF.assert(function() {
                                            return !isDefaultInstance || !card.defaultInstance;
                                        }, 'Each object should NOT have multiple instances with "show" property being false'), 
                                        disabledReason = visualObjectInstance.disabledReason, _.isEmpty(disabledReason) ? [ 4, this_1.addInstanceToCard(card, instanceBuildParams, referenceLineType, isDefaultInstance, objectName, propertyDescriptors, options) ] : (card.readOnly = !0, 
                                        card.warningText = disabledReason, [ 2, {
                                            value: card
                                        } ]);

                                      case 1:
                                        return _c.sent(), [ 2 ];
                                    }
                                });
                            }, this_1 = this, _i = 0, _a = cardBuildParams.instances, _b.label = 2;

                          case 2:
                            return _i < _a.length ? [ 5, _loop_1(_a[_i]) ] : [ 3, 5 ];

                          case 3:
                            if ("object" == typeof (state_1 = _b.sent())) return [ 2, state_1.value ];
                            _b.label = 4;

                          case 4:
                            return _i++, [ 3, 2 ];

                          case 5:
                            return card.defaultInstance ? [ 3, 7 ] : (instanceBuildParams = isReferenceLineInstanceInfo(firstInstance = cardBuildParams.instances[0]) ? {
                                instance: firstInstance,
                                validMeasures
                            } : firstInstance, [ 4, this.addInstanceToCard(card, instanceBuildParams, referenceLineType, !0, objectName, propertyDescriptors, options) ]);

                          case 6:
                            _b.sent(), _b.label = 7;

                          case 7:
                            return [ 2, card ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.addInstanceToCard = function(card, instance, type, isDefaultInstance, objectName, objectPropertyDescriptors, options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualObjectInstance, instanceProperties, selector, displayName, cardInstance, _a, _b, _c, _i, propertyName, propertyValue, propertyDescriptor, slice;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            for (_c in visualObjectInstance = isReferenceLineInstanceBuildParams(instance) ? instance.instance.visualObjectInstance : instance, 
                            selector = isDefaultInstance ? null : visualObjectInstance.selector, displayName = (instanceProperties = visualObjectInstance.properties).displayName, 
                            cardInstance = {
                                slices: [],
                                displayName: _.isString(displayName) && !_.isEmpty(displayName) ? displayName : card.displayName,
                                selector,
                                type
                            }, isReferenceLineInstanceBuildParams(instance) && this.buildReferenceLineSpecialSlices(card, cardInstance, instance, isDefaultInstance), 
                            _b = [], _a = instanceProperties) _b.push(_c);
                            _i = 0, _d.label = 1;

                          case 1:
                            return _i < _b.length ? (_c = _b[_i]) in _a ? (propertyValue = instanceProperties[propertyName = _c], 
                            function(objectName, propertyName, propertyDesciptor) {
                                var nonVisualizableProps = [ "displayName", "type", standardShowPropertyName ];
                                return "referenceLine" === objectName && nonVisualizableProps.push("value"), !_.includes(nonVisualizableProps, propertyName) && property_pane_util.Ke(propertyDesciptor);
                            }(objectName, propertyName, propertyDescriptor = objectPropertyDescriptors[propertyName]) ? [ 4, this.buildSlice(objectName, propertyName, propertyDescriptor, propertyValue, cardInstance.displayName, visualObjectInstance, isDefaultInstance, options) ] : [ 3, 3 ]) : [ 3, 3 ] : [ 3, 4 ];

                          case 2:
                            slice = _d.sent(), cardInstance.slices.push(slice), _d.label = 3;

                          case 3:
                            return _i++, [ 3, 1 ];

                          case 4:
                            return isDefaultInstance ? card.defaultInstance = cardInstance : card.instances.push(cardInstance), 
                            [ 2 ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.buildSlice = function(objectName, propertyName, propertyDescriptor, propertyValue, cardDisplayName, instance, isDisabled, options) {
                var _a, _b, _c;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var displayName, propertyValueTypeDescriptor, value, selectionOptions, slice, visualObjectWarnings, numericValueOptions, _d;
                    return (0, tslib_es6.__generator)(this, function(_e) {
                        switch (_e.label) {
                          case 0:
                            return displayName = this.getSliceDisplayName(propertyName, propertyDescriptor, instance), 
                            propertyValueTypeDescriptor = this.getPropertyTypeDescriptor(propertyName, propertyDescriptor, instance), 
                            [ 4, this.getSliceValue(propertyName, propertyDescriptor, propertyValue, instance) ];

                          case 1:
                            return _d = _e.sent(), value = _d.value, selectionOptions = _d.selectionOptions, 
                            slice = {
                                name: propertyName,
                                displayName,
                                description: (0, VisualsData_displayNameGetter.G)(propertyDescriptor.description, this.localizationService),
                                type: propertyValueTypeDescriptor,
                                selector: instance.selector,
                                value,
                                show: !0,
                                placeholder: (0, VisualsData_displayNameGetter.G)(propertyDescriptor.placeHolderText, this.localizationService),
                                isValid: !0,
                                isDisabled,
                                containerIndex: instance.containerIdx,
                                selectionOptions
                            }, propertyValueTypeDescriptor.fill && (slice.value = {
                                value: slice.value
                            }), 3 === (null === (_a = instance.propertyInstanceKind) || void 0 === _a ? void 0 : _a[propertyName]) && (visualObjectWarnings = (null === (_c = null === (_b = options.visualWarningCollection) || void 0 === _b ? void 0 : _b.visualObjectWarnings) || void 0 === _c ? void 0 : _c[objectName]) || [], 
                            options.conditionalFormattingUtilsService.updateDynamicExpressionSupportForSlice(instance, propertyName, propertyValueTypeDescriptor, propertyDescriptor, options.objectDefinitions, slice, options.localizationService, visualObjectWarnings, options, cardDisplayName)), 
                            (numericValueOptions = property_pane_util.X_(slice)) && (slice.numericValueOptions = numericValueOptions), 
                            slice.isPropertyTitleWidthStretch = property_pane_util.OR(slice), function(slice) {
                                slice.name === referenceLineHelper2.pw && (slice.validators = {
                                    max: PropertyPaneConsts.MaxPrecision
                                });
                            }(slice), [ 2, slice ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.buildReferenceLineSpecialSlices = function(card, cardInstance, instanceBuildParams, isDefaultInstance) {
                if (!isDefaultInstance) {
                    var referenceLineInstance = instanceBuildParams.instance, measureSlice = {
                        displayName: this.localizationService.get("Series"),
                        name: "measure",
                        customObjectName: getReferenceLineCardObjectNameWithTypeInfo(cardInstance.type),
                        show: !0,
                        isDisabled: isDefaultInstance,
                        isValid: !0,
                        placeholder: this.localizationService.get("Visual_Reference_Line_Measure_Default"),
                        selectionOptions: instanceBuildParams.validMeasures,
                        value: referenceLineInstance.measureName,
                        selector: referenceLineInstance.visualObjectInstance.selector,
                        type: {
                            enumeration: (0, types_enumType.i)([])
                        }
                    };
                    cardInstance.slices.push(measureSlice);
                    var percentileValue = referenceLineInstance.percentileValue;
                    if (null != percentileValue) {
                        var percentileSlice = {
                            displayName: this.localizationService.get("Visual_Reference_Line_Percentile"),
                            name: "percentile",
                            customObjectName: getReferenceLineCardObjectNameWithTypeInfo(cardInstance.type),
                            show: !0,
                            isDisabled: !1,
                            isValid: !0,
                            placeholder: void 0,
                            value: percentileValue,
                            selector: referenceLineInstance.visualObjectInstance.selector,
                            type: {
                                numeric: !0
                            }
                        };
                        percentileSlice.numericValueOptions = property_pane_util.X_(percentileSlice), percentileSlice.isPropertyTitleWidthStretch = property_pane_util.OR(percentileSlice), 
                        cardInstance.slices.push(percentileSlice);
                    }
                }
            }, LegacyAnalyticsFormattingService.prototype.getSliceDisplayName = function(propertyName, propertyDescriptor, instance) {
                var displayName = instance.selector ? instance.displayName : void 0;
                return _.isEmpty(displayName) ? this.getPropertyDisplayName(propertyName, propertyDescriptor) : displayName;
            }, LegacyAnalyticsFormattingService.prototype.getSliceValue = function(propertyName, propertyDescriptor, propertyValue, instance) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var processedPropertyValue, selectionOptions, sliceValue;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return processedPropertyValue = propertyValue, [ 4, property_pane_util.cn({
                                propertyType: types_valueType.Ge.fromDescriptor(propertyDescriptor.type),
                                instance,
                                propertyName
                            }) ];

                          case 1:
                            return (selectionOptions = _a.sent()) && (processedPropertyValue = property_pane_util.vw(selectionOptions, propertyValue)), 
                            sliceValue = processedPropertyValue, "color" !== propertyName && (null == processedPropertyValue ? void 0 : processedPropertyValue.solid) && propertyDescriptor.type.fill && (sliceValue = propertyValue.solid.color), 
                            [ 2, {
                                value: sliceValue,
                                selectionOptions
                            } ];
                        }
                    });
                });
            }, LegacyAnalyticsFormattingService.prototype.getPropertyTypeDescriptor = function(propertyName, propertyDescriptor, instance) {
                var _a, propertyTypes = null === (_a = instance.propertyTypes) || void 0 === _a ? void 0 : _a[propertyName], propertyTypeDescriptor = property_pane_util.sH(propertyDescriptor.type, propertyTypes), variantDefinition = propertyDescriptor.type.variant;
                return variantDefinition && (propertyTypeDescriptor = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, propertyTypeDescriptor), {
                    variant: variantDefinition
                })), propertyTypeDescriptor;
            }, LegacyAnalyticsFormattingService.prototype.convertToPropertyPaneCard = function(analyticsCard, index) {
                var convertedCard = {
                    name: analyticsCard.objectName,
                    displayName: analyticsCard.displayName,
                    description: analyticsCard.description,
                    id: analyticsCard.id,
                    slices: (0, arrayExtensions.z8)([]),
                    footer: [],
                    mainShow: void 0,
                    isDirty: !1,
                    index,
                    analyticsPane: !0,
                    customRevertToDefaultDescriptors: []
                }, realInstancesCount = _.size(analyticsCard.instances);
                if (1 === analyticsCard.maxInstances) {
                    var singleInstance = 1 === realInstancesCount ? analyticsCard.instances[0] : analyticsCard.defaultInstance;
                    debug.fF.assertValue(singleInstance, "If maxInstances===1, one instance must be found to show the UI, be it a default instance or a real instance");
                    var namedSlices = (0, arrayExtensions.z8)((null == singleInstance ? void 0 : singleInstance.slices) || []);
                    convertedCard.slices = namedSlices, convertedCard.mainShow = {
                        displayName: void 0,
                        isDisabled: !!analyticsCard.readOnly,
                        isValid: !0,
                        name: standardShowPropertyName,
                        save: _.noop,
                        show: !0,
                        type: {
                            bool: !0
                        },
                        value: singleInstance !== analyticsCard.defaultInstance,
                        placeholder: null
                    }, _.forEach(namedSlices, function(slice) {
                        var _a;
                        convertedCard.customRevertToDefaultDescriptors.push({
                            objectName: null !== (_a = slice.customObjectName) && void 0 !== _a ? _a : analyticsCard.objectName,
                            propertyName: slice.name
                        });
                    }), convertedCard.customRevertToDefaultDescriptors.push({
                        objectName: analyticsCard.objectName,
                        propertyName: standardShowPropertyName
                    });
                } else {
                    var containers_1 = [];
                    _.forEach(realInstancesCount > 0 ? analyticsCard.instances : [ analyticsCard.defaultInstance ], function(instance, index) {
                        var container = {
                            name: void 0,
                            displayName: instance === analyticsCard.defaultInstance ? void 0 : instance.displayName,
                            value: void 0,
                            isDisabled: instance === analyticsCard.defaultInstance,
                            slices: (0, arrayExtensions.z8)(instance.slices || []),
                            selector: instance.selector,
                            containerIndex: index
                        };
                        containers_1.push(container), _.forEach(container.slices, function(slice) {
                            var _a;
                            convertedCard.customRevertToDefaultDescriptors.push({
                                objectName: null !== (_a = slice.customObjectName) && void 0 !== _a ? _a : analyticsCard.objectName,
                                propertyName: slice.name
                            });
                        });
                    }), convertedCard.containersLabel = this.localizationService.get("Apply_Settings_To"), 
                    convertedCard.containersTooltip = null, convertedCard.containersEditable = !0, convertedCard.containers = (0, 
                    arrayExtensions.z8)(containers_1), convertedCard.selectedContainer = _.first(convertedCard.containers);
                }
                return convertedCard;
            }, LegacyAnalyticsFormattingService.\u0275fac = function(t) {
                return new (t || LegacyAnalyticsFormattingService)(core["\u0275\u0275inject"](conditional_formatting_utils_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](LegacyVisualFormattingService), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](AnalyticsFormattingReferenceLineHelper), core["\u0275\u0275inject"](undo_redo_service.z), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, LegacyAnalyticsFormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: LegacyAnalyticsFormattingService,
                factory: LegacyAnalyticsFormattingService.\u0275fac
            }), LegacyAnalyticsFormattingService;
        }();
        function getMaxInstancesCount(objectName) {
            var definedProperties = _.find(cardObjectProperties, function(objProps) {
                return objProps.objectName === objectName;
            });
            return definedProperties ? definedProperties.maxInstances : 1;
        }
        function getSupportsUserDefinedInstances(objectName) {
            var definedProperties = _.find(cardObjectProperties, function(objProps) {
                return objProps.objectName === objectName;
            });
            return !!definedProperties && definedProperties.supportsUserDefinedInstances;
        }
        function isReferenceLineInstanceInfo(instance) {
            return instance.hasOwnProperty("visualObjectInstance");
        }
        function isReferenceLineInstanceBuildParams(instance) {
            return instance.hasOwnProperty("validMeasures");
        }
        var structuralType = __webpack_require__(58702), AnalyticsPaneSaveSliceToDefinitionService = function() {
            function AnalyticsPaneSaveSliceToDefinitionService(anomalyDetectionHelper, forecastHelper, legacyAnalyticsFormattingService, localizationService, referenceLineHelper, telemetryService, visualAuthoringService, visualPluginService) {
                this.anomalyDetectionHelper = anomalyDetectionHelper, this.forecastHelper = forecastHelper, 
                this.legacyAnalyticsFormattingService = legacyAnalyticsFormattingService, this.localizationService = localizationService, 
                this.referenceLineHelper = referenceLineHelper, this.telemetryService = telemetryService, 
                this.visualAuthoringService = visualAuthoringService, this.visualPluginService = visualPluginService;
            }
            return AnalyticsPaneSaveSliceToDefinitionService.prototype.saveChangedSlicesToDefinition = function(changes, visual, forLegacy) {
                return void 0 === forLegacy && (forLegacy = !1), (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var groupDisplayName, objectName_1, change;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, visualContainerGroup2.Vz)(visual) ? (groupDisplayName = changes[0].groupDisplayName, 
                            _.isEmpty(groupDisplayName) ? [ 3, 2 ] : (objectName_1 = changes[0].objectName, 
                            debug.fF.assert(function() {
                                return changes.every(function(change) {
                                    return change.objectName === objectName_1;
                                });
                            }, "all the changes should have same object"), debug.fF.assert(function() {
                                return changes.every(function(change) {
                                    return change.groupDisplayName === groupDisplayName;
                                });
                            }, "all the changes should have same groupDisplayName"), [ 4, this.handleGroupSlicesSave(objectName_1, groupDisplayName, changes, visual) ])) : [ 2, !1 ];

                          case 1:
                            return [ 2, _a.sent() ];

                          case 2:
                            return debug.fF.assert(function() {
                                return 1 === _.size(changes);
                            }, "Expect saveObject to have 1 single change when it is not from a grouped save"), 
                            (change = changes[0]).propertySlice.type.errorRange ? [ 2, this.saveSliceExpression(change.objectName, change.propertySlice, visual) ] : [ 2, this.saveSliceValue(change.objectName, change.propertySlice, visual, !!forLegacy) ];

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, AnalyticsPaneSaveSliceToDefinitionService.prototype.saveSliceExpression = function(objectName, slice, visual) {
                var value = slice.value;
                debug.fF.assert(function() {
                    return void 0 === value || value instanceof sqExpr.Il || (0, structuralType.hl)(value);
                }, "Slice value is not a valid expression");
                var propertyId = {
                    objectName,
                    propertyName: slice.name
                }, selector = slice.selector;
                return void 0 === value ? this.visualAuthoringService.removePropertyDefinition(visual, propertyId, selector, !0) : this.visualAuthoringService.setPropertyDefinition(visual, propertyId, selector, value, void 0, !0), 
                !0;
            }, AnalyticsPaneSaveSliceToDefinitionService.prototype.saveSliceValue = function(cardObjectName, slice, visual, forLegacy) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var changes, newPropertiesChanges, tryHandleReferenceLineSaveResult, change, sliceTypeDescriptor, sliceValueType, sliceValue, hasChange, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.checkAddRemoveRenameInstance(cardObjectName, slice, visual, forLegacy) ];

                          case 1:
                            return _a.sent() ? [ 2, !0 ] : "editable-container-object-name" === cardObjectName ? [ 2, !1 ] : [ 4, this.referenceLineHelper.tryHandleReferenceLineSpecialSave(cardObjectName, slice, visual) ];

                          case 2:
                            return (tryHandleReferenceLineSaveResult = _a.sent()).isHandled ? (changes = tryHandleReferenceLineSaveResult.persistChanges, 
                            newPropertiesChanges = tryHandleReferenceLineSaveResult.newPropertyChanges) : (changes = {
                                merge: [],
                                remove: []
                            }, change = {
                                objectName: cardObjectName,
                                selector: slice.selector,
                                properties: {}
                            }, sliceValueType = types_valueType.Ge.fromDescriptor(sliceTypeDescriptor = slice.type), 
                            sliceValue = slice.value, sliceValueType.text || "" !== sliceValue || (sliceValue = null), 
                            null == sliceValue || sliceValue instanceof sqExpr.jz && null == sliceValue.value ? (change.properties[slice.name] = sliceValue, 
                            changes.remove.push(change)) : (!sliceTypeDescriptor.variant || sliceValue instanceof sqExpr.Il || (sliceValue = (0, 
                            dataViewObjectDefinition1.Lo)(sliceValue, sliceTypeDescriptor)), change.properties[slice.name] = sliceValue, 
                            changes.merge.push(change))), (hasChange = !(_.isEmpty(null == changes ? void 0 : changes.merge) && _.isEmpty(null == changes ? void 0 : changes.replace) && _.isEmpty(null == changes ? void 0 : changes.remove) && _.isEmpty(null == changes ? void 0 : changes.removeObject))) && this.visualAuthoringService.persistProperties(changes, visual, !0), 
                            newPropertiesChanges && _.forEach(newPropertiesChanges.properties, function(propertyValue, propertyName) {
                                _this.visualAuthoringService.setPropertyDefinition(visual, {
                                    objectName: newPropertiesChanges.objectName,
                                    propertyName
                                }, newPropertiesChanges.selector, propertyValue, void 0, !0);
                            }), [ 2, hasChange ];
                        }
                    });
                });
            }, AnalyticsPaneSaveSliceToDefinitionService.prototype.handleGroupSlicesSave = function(objectName, groupDisplayName, changes, visual) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return objectName !== forecastHelper1.Po ? [ 3, 2 ] : [ 4, this.forecastHelper.saveGroupSlices(groupDisplayName, changes, visual) ];

                          case 1:
                          case 3:
                            return [ 2, _a.sent() ];

                          case 2:
                            return objectName !== anomalyDetectionObjectName ? [ 3, 4 ] : [ 4, this.anomalyDetectionHelper.saveGroupSlices(groupDisplayName, changes, visual) ];

                          case 4:
                            return [ 2, !1 ];
                        }
                    });
                });
            }, AnalyticsPaneSaveSliceToDefinitionService.prototype.checkAddRemoveRenameInstance = function(cardObjectName, slice, visualContainer, forLegacy) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.referenceLineHelper.checkAddRemoveRenameInstance(cardObjectName, slice, visualContainer) ];

                          case 1:
                            return _a.sent() || this.forecastHelper.checkAddRemoveInstance(cardObjectName, slice, visualContainer) || this.anomalyDetectionHelper.checkAddRemoveInstance(cardObjectName, slice, visualContainer) || this.checkAddRemoveNormalInstance(cardObjectName, slice, visualContainer, forLegacy) ? [ 2, !0 ] : [ 2, !1 ];
                        }
                    });
                });
            }, AnalyticsPaneSaveSliceToDefinitionService.prototype.checkAddRemoveNormalInstance = function(cardObjectName, slice, visualContainer, forLegacy) {
                if (forLegacy || cardObjectProperties[cardObjectName]) return 1 === (forLegacy ? getMaxInstancesCount(cardObjectName) : cardObjectProperties[cardObjectName].maxInstances) && slice.name === standardShowPropertyName && (slice.value ? this.addNormalInstance(cardObjectName, visualContainer, forLegacy) : removeInstance(cardObjectName, slice.selector, visualContainer, this.visualAuthoringService), 
                !0);
            }, AnalyticsPaneSaveSliceToDefinitionService.prototype.addNormalInstance = function(cardObjectName, visualContainer, forLegacy) {
                var addInstanceChanges;
                if (debug.fF.assert(function() {
                    return "referenceLine" !== cardObjectName && cardObjectName !== forecastHelper1.Po && cardObjectName !== anomalyDetectionObjectName;
                }, "Expect this NOT be called for reference line or forecast"), forLegacy) {
                    var capabilities = this.visualPluginService.capabilities(visualContainer.config.singleVisual.visualType), displayNameBase = this.legacyAnalyticsFormattingService.getPropertyDisplayName(cardObjectName, capabilities.objects[cardObjectName].properties.displayName);
                    addInstanceChanges = getAddInstanceChangesBase(cardObjectName, displayNameBase, visualContainer, this.localizationService);
                } else {
                    var displayNameBaseKey = _.find(cardObjectProperties, function(props) {
                        return props.objectName === cardObjectName;
                    }).displayNameBaseKey;
                    addInstanceChanges = getAddInstanceChangesBaseWithNameKey(cardObjectName, displayNameBaseKey, visualContainer, this.localizationService);
                }
                this.telemetryService.logEvent(events.Yu, {
                    objectName: cardObjectName
                }), this.visualAuthoringService.persistProperties(addInstanceChanges, visualContainer, !0);
            }, AnalyticsPaneSaveSliceToDefinitionService.\u0275fac = function(t) {
                return new (t || AnalyticsPaneSaveSliceToDefinitionService)(core["\u0275\u0275inject"](AnalyticsFormattingAnomalyDetectionHelper), core["\u0275\u0275inject"](AnalyticsFormattingForecastHelper), core["\u0275\u0275inject"](LegacyAnalyticsFormattingService), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](AnalyticsFormattingReferenceLineHelper), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, AnalyticsPaneSaveSliceToDefinitionService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: AnalyticsPaneSaveSliceToDefinitionService,
                factory: AnalyticsPaneSaveSliceToDefinitionService.\u0275fac
            }), AnalyticsPaneSaveSliceToDefinitionService;
        }(), propertyPaneUtils = __webpack_require__(66609), dataViewObjectSerializer = __webpack_require__(54766), dataBoundExprWarning = __webpack_require__(36998), DataBoundExprExtractorSQExprVisitor = __webpack_require__(10746), ConditionalFormattingService = function() {
            function ConditionalFormattingService(conceptualSchemaProxy, dataSourcesService, featureSwitchService, lazyScoped, conditionalFormattingUtilService, explorationNavigation, themeService, visualAuthoring) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSourcesService = dataSourcesService, 
                this.featureSwitchService = featureSwitchService, this.lazyScoped = lazyScoped, 
                this.conditionalFormattingUtilService = conditionalFormattingUtilService, this.explorationNavigation = explorationNavigation, 
                this.themeService = themeService, this.visualAuthoring = visualAuthoring;
            }
            return ConditionalFormattingService.prototype.getDynamicExpressionSupportObjectForSlice = function(options) {
                var _this = this, containerSliceDisplayName = options.containerSliceDisplayName, descriptor = options.descriptor, objectDefinitions = options.objectDefinitions, objectDisplayName = options.objectDisplayName, propertyDescriptor = options.propertyDescriptor, propertyTypeDescriptor = options.propertyTypeDescriptor, warning = options.warning, visualContainer = options.canvasItem;
                if (!visualContainer || !(0, visualContainerGroup2.Vz)(visualContainer)) return debug.fF.assertFail("visualContainer should exist"), 
                {
                    dynamicExpressionSupport: void 0,
                    warningMessage: void 0
                };
                var warningMessage, objectName = descriptor.objectName, propertyName = descriptor.propertyName, selector = descriptor.selector, dynamicPropertyDescriptor = _.clone(propertyDescriptor);
                dynamicPropertyDescriptor.type = propertyTypeDescriptor;
                var visualQuery = visualContainer.config.singleVisual.query, hasDynamicExpression = !1, propertyDefinition = (0, 
                dataViewObjectDefinition1.NA)(objectDefinitions, {
                    objectName,
                    propertyName
                }, selector);
                return propertyDefinition && (0, DataBoundExprExtractorSQExprVisitor.oA)(propertyDefinition, selector, visualQuery ? visualQuery.defn.select() : (0, 
                arrayExtensions.bv)()).length && (hasDynamicExpression = !0, warning && (warningMessage = this.getDataBoundExprWarning(warning, descriptor))), 
                {
                    warningMessage,
                    dynamicExpressionSupport: {
                        isSet: hasDynamicExpression,
                        showDialog: function() {
                            return _this.showConditionalFormattingDialogForSlice(visualContainer, propertyDefinition, dynamicPropertyDescriptor, null != containerSliceDisplayName ? containerSliceDisplayName : objectDisplayName, propertyName, descriptor);
                        }
                    }
                };
            }, ConditionalFormattingService.prototype.getDataBoundExprWarning = function(warning, descriptor) {
                if (warning instanceof dataBoundExprWarning.L && warning.propertyId.propertyName === descriptor.propertyName && (!warning.selector && !descriptor.selector || (0, 
                selector.fS)(warning.selector, descriptor.selector))) return warning;
            }, ConditionalFormattingService.prototype.getConditionalFormattingSliceProperties = function(containerDisplayName, repetition, canvasItem) {
                var _this = this;
                if (canvasItem && (0, visualContainerGroup2.Vz)(canvasItem)) {
                    var objectsDefinitions = canvasItem.config.singleVisual.objects, visualStyle = this.themeService.getVisualStyle(this.explorationNavigation.getCurrentExploration().themeCollection), result = this.conditionalFormattingUtilService.getConditionalFormattingSliceProperties({
                        conceptualSchemaProxy: this.conceptualSchemaProxy,
                        conditionalFormattingDialogLauncherFactory: function() {
                            return _this.lazyScoped.get("conditionalFormattingDialogLauncherService");
                        },
                        dataBarsDialogLauncherFactory: function() {
                            return _this.lazyScoped.get("dataBarsDialogLauncherService");
                        },
                        dataSourcesService: this.dataSourcesService,
                        featureSwitchService: this.featureSwitchService,
                        visualAuthoring: this.visualAuthoring
                    }, canvasItem, objectsDefinitions, containerDisplayName, visualStyle, repetition);
                    if (result) return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, result), {
                        toggleButton: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, result.toggleButton), {
                            saveCallback: function(saveObjects) {
                                return _this.saveConditionalFormattingControlProperties(saveObjects, result.toggleButton.saveCallback, [ canvasItem ]);
                            }
                        })
                    });
                } else debug.fF.assertFail("visualContainer should exist");
            }, ConditionalFormattingService.prototype.saveConditionalFormattingControlProperties = function(saveObjects, saveCallback, canvasItemContainers) {
                debug.fF.assert(function() {
                    return 1 === _.size(saveObjects.changes);
                }, "Expect this NOT be called when there are multiple changes in the save object");
                for (var objectName = saveObjects.changes[0].objectName, propertySlice = saveObjects.changes[0].propertySlice, _i = 0, canvasItemContainers_1 = canvasItemContainers; _i < canvasItemContainers_1.length; _i++) saveCallback(objectName, propertySlice, canvasItemContainers_1[_i]);
            }, ConditionalFormattingService.prototype.showConditionalFormattingDialogForSlice = function(visualContainer, propertyDefinition, propertyDescriptor, objectDisplayName, propertyName, descriptorOrRepetition) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var exploration, visualStyle, conditionalFormattingDialogLauncher, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return exploration = this.explorationNavigation.getCurrentExploration(), visualStyle = this.themeService.getVisualStyle(exploration.themeCollection), 
                            [ 4, this.lazyScoped.get("conditionalFormattingDialogLauncherService") ];

                          case 1:
                            return conditionalFormattingDialogLauncher = _a.sent(), [ 4, this.conditionalFormattingUtilService.getConditionalFormattingDialogResult(conditionalFormattingDialogLauncher, visualContainer, propertyDefinition, propertyDescriptor, objectDisplayName, propertyName, descriptorOrRepetition, visualStyle) ];

                          case 2:
                            return !(result = _a.sent()) || _.isUndefined(result.propertyDefinition) ? [ 2, {
                                value: void 0,
                                shouldSave: !1
                            } ] : [ 2, {
                                value: (0, dataViewObjectSerializer.PU)(result.propertyDefinition, result.repetition.propertyDescriptor, !1),
                                shouldSave: !0
                            } ];
                        }
                    });
                });
            }, ConditionalFormattingService.\u0275fac = function(t) {
                return new (t || ConditionalFormattingService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](conditional_formatting_utils_service.z), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](theme_service.f), core["\u0275\u0275inject"](visual_authoring_service.$8));
            }, ConditionalFormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ConditionalFormattingService,
                factory: ConditionalFormattingService.\u0275fac
            }), ConditionalFormattingService;
        }(), dialog_service = __webpack_require__(58938), FieldPickerTransformationService = function() {
            function FieldPickerTransformationService() {
                this._fieldPickerAllStaticSeriesValue = new Map;
            }
            return FieldPickerTransformationService.prototype.cleanFieldPickerStaticSeries = function(slice, canvasItem) {
                if ("FieldPicker" === slice.control.type) {
                    var props = slice.control.properties;
                    if (!props.dataLabelPickerType) return;
                    var pickerLabelRole = props.dataLabelPickerType.dataLabelRole;
                    props.value || 2 !== props.dataLabelPickerType.seriesType || canvasItem && (0, visualContainerGroup2.Vz)(canvasItem) && this.clearAllStaticSeriesValue(pickerLabelRole, canvasItem.name);
                }
            }, FieldPickerTransformationService.prototype.updateFieldPickerControlValue = function(props, sliceDescriptor, objectDefinitions, canvasItem) {
                var propertyValue = (0, dataViewObjectDefinition1.NA)(objectDefinitions, {
                    objectName: sliceDescriptor.objectName,
                    propertyName: sliceDescriptor.propertyName
                }, sliceDescriptor.selector);
                props.splitValuesIntoInstances ? this.splitFieldPickerPropsIntoInstances(sliceDescriptor, objectDefinitions, props) : props.unwrapExprOnGet && this.wrapPropertyValueForFieldPicker(props, propertyValue), 
                canvasItem && (0, visualContainerGroup2.Vz)(canvasItem) && this.updateFieldPickerControlFallbackExpression(props, propertyValue, canvasItem), 
                this.setFallbackExpressionAsDisplayedValue(props);
            }, FieldPickerTransformationService.prototype.wrapPropertyValueForFieldPicker = function(props, propertyValue) {
                props.value = propertyValue ? {
                    newExpr: {
                        expr: propertyValue
                    }
                } : void 0;
            }, FieldPickerTransformationService.prototype.splitFieldPickerPropsIntoInstances = function(sliceDescriptor, objectDefinitions, props) {
                var instances = (0, dataViewObjectDefinition1.hz)(objectDefinitions, {
                    objectName: sliceDescriptor.objectName,
                    propertyName: sliceDescriptor.propertyName
                }, sliceDescriptor.selector);
                if (instances) {
                    for (var instanceOrder = _.sortBy(Object.keys(instances), function(instance) {
                        var _a;
                        return null === (_a = instances[instance].selector) || void 0 === _a ? void 0 : _a.order;
                    }), exprs_1 = [], _i = 0, instanceOrder_1 = instanceOrder; _i < instanceOrder_1.length; _i++) {
                        var instance = instanceOrder_1[_i];
                        exprs_1.push({
                            expr: instances[instance].value,
                            metadata: instance
                        });
                    }
                    debug.fF.assert(function() {
                        return !!exprs_1.length;
                    }, "expect at least one expr to add"), props.value = {
                        newExpr: exprs_1
                    };
                } else props.value = void 0;
            }, FieldPickerTransformationService.prototype.updateFieldPickerControlFallbackExpression = function(props, propertyValue, canvasItem) {
                if (props.dataLabelPickerType && [ 2, 3 ].includes(props.dataLabelPickerType.seriesType)) {
                    var visualIdentifier = canvasItem.name, pickerSeriesType = props.dataLabelPickerType.seriesType, pickerLabelRole = props.dataLabelPickerType.dataLabelRole;
                    2 !== pickerSeriesType ? 3 === pickerSeriesType && (props.fallbackExpr = this.allStaticSeriesHasValueForRole(pickerLabelRole, visualIdentifier) ? this.getAllStaticSeriesValue(pickerLabelRole, visualIdentifier) : props.fallbackExpr) : props.value ? this.setAllStaticSeriesValue(pickerLabelRole, propertyValue, visualIdentifier) : this.clearAllStaticSeriesValue(pickerLabelRole, visualIdentifier);
                }
            }, FieldPickerTransformationService.prototype.setFallbackExpressionAsDisplayedValue = function(props) {
                var _a;
                !props.value && props.fallbackExpr ? (props.value = {
                    newExpr: {
                        expr: props.fallbackExpr
                    }
                }, props.allowClear = null !== (_a = props.allowClear) && void 0 !== _a && _a) : props.fallbackExpr && (props.allowClear = !0);
            }, FieldPickerTransformationService.prototype.allStaticSeriesHasValueForRole = function(role, visualIdentifier) {
                var key = this.createFieldPickerSeriesValueKey(role, visualIdentifier);
                return this._fieldPickerAllStaticSeriesValue.has(key);
            }, FieldPickerTransformationService.prototype.getAllStaticSeriesValue = function(role, visualIdentifier) {
                var key = this.createFieldPickerSeriesValueKey(role, visualIdentifier);
                return this._fieldPickerAllStaticSeriesValue.get(key);
            }, FieldPickerTransformationService.prototype.setAllStaticSeriesValue = function(role, value, visualIdentifier) {
                var key = this.createFieldPickerSeriesValueKey(role, visualIdentifier);
                this._fieldPickerAllStaticSeriesValue.set(key, value);
            }, FieldPickerTransformationService.prototype.clearAllStaticSeriesValue = function(role, visualIdentifier) {
                var key = this.createFieldPickerSeriesValueKey(role, visualIdentifier);
                this._fieldPickerAllStaticSeriesValue.delete(key);
            }, FieldPickerTransformationService.prototype.createFieldPickerSeriesValueKey = function(role, visualIdentifier) {
                return "".concat(role, "-").concat(visualIdentifier);
            }, FieldPickerTransformationService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldPickerTransformationService,
                factory: FieldPickerTransformationService.\u0275fac = function(t) {
                    return new (t || FieldPickerTransformationService);
                }
            }), FieldPickerTransformationService;
        }();
        function getFormattingWarningMessageState(warning, localizationService, isMainShow) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, property_pane_util.qb(warning, localizationService, !!isMainShow)), {
                source: warning
            });
        }
        var FormattingSliceTransformerService = function() {
            function FormattingSliceTransformerService(bookmarkService, conditionalFormattingService, dialogService, explorationNavigationService, fieldPickerTransformationService, localizationService, visualAuthoringService, visualStylePresetService) {
                this.bookmarkService = bookmarkService, this.conditionalFormattingService = conditionalFormattingService, 
                this.dialogService = dialogService, this.explorationNavigationService = explorationNavigationService, 
                this.fieldPickerTransformationService = fieldPickerTransformationService, this.localizationService = localizationService, 
                this.visualAuthoringService = visualAuthoringService, this.visualStylePresetService = visualStylePresetService;
            }
            return FormattingSliceTransformerService.prototype.transformFormattingSlice = function(options) {
                var objectDescriptors = options.objectDescriptors, visualType = options.visualType, dynamicExpressionSupportOptions = options.dynamicExpressionSupportOptions, TransformedFormattingSlice = this.applyBasicTransformation(options.formattingSlice, options.visualObjects, objectDescriptors, dynamicExpressionSupportOptions);
                return this.applyControlSpecificTransformation(TransformedFormattingSlice, objectDescriptors, visualType, null == dynamicExpressionSupportOptions ? void 0 : dynamicExpressionSupportOptions.canvasItem);
            }, FormattingSliceTransformerService.prototype.applyBasicTransformation = function(formattingSlice, visualObjects, objectDescriptors, dynamicExpressionSupportOptions) {
                if (!(0, build_control_util.IW)(formattingSlice)) {
                    var propertyDescriptor = formatting_utils.w7(formattingSlice.control.properties.descriptor, objectDescriptors), displayName = formattingSlice.displayName, description = formattingSlice.description;
                    displayName || formattingSlice.suppressDisplayName || !propertyDescriptor || (displayName = (0, 
                    VisualsData_displayNameGetter.G)(propertyDescriptor.displayName, this.localizationService)), 
                    !description && propertyDescriptor && propertyDescriptor.description && (description = (0, 
                    VisualsData_displayNameGetter.G)(propertyDescriptor.description, this.localizationService));
                    var placeHolderText = void 0;
                    propertyDescriptor && propertyDescriptor.placeHolderText && (placeHolderText = (0, 
                    VisualsData_displayNameGetter.G)(propertyDescriptor.placeHolderText, this.localizationService));
                    var dynamicExpressionSupportObjects = this.getDynamicExpressionSupportObjectsForSlice(formattingSlice, dynamicExpressionSupportOptions), dynamicExpressionWarning = null == dynamicExpressionSupportObjects ? void 0 : dynamicExpressionSupportObjects.warningMessage, conditionalFormattingWarning = void 0;
                    dynamicExpressionWarning && (conditionalFormattingWarning = getFormattingWarningMessageState(dynamicExpressionWarning, this.localizationService));
                    var updatedAliasNames = (formattingSlice = this.fillRuleOnlySliceValue(formattingSlice, visualObjects, null == dynamicExpressionSupportOptions ? void 0 : dynamicExpressionSupportOptions.canvasItem)).aliasNames;
                    return dynamicExpressionSupportObjects && (updatedAliasNames = (0, tslib_es6.__spreadArray)((0, 
                    tslib_es6.__spreadArray)([], updatedAliasNames = null != updatedAliasNames ? updatedAliasNames : [], !0), [ this.localizationService.get("FieldWell_ConditionalFormatting") ], !1)), 
                    (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                        displayName,
                        placeHolderText,
                        description,
                        conditionalFormattingWarning,
                        conditionalFormattingObjects: dynamicExpressionSupportObjects ? dynamicExpressionSupportObjects.dynamicExpressionSupport : void 0,
                        aliasNames: updatedAliasNames
                    });
                }
                return formattingSlice;
            }, FormattingSliceTransformerService.prototype.fillRuleOnlySliceValue = function(slice, objects, canvasItem) {
                if ("ConditionalFormattingControl" === slice.control.type) return slice;
                if ((0, build_control_util.IW)(slice)) return slice;
                var sliceDescriptor = slice.control.properties.descriptor;
                if (2 !== sliceDescriptor.instanceKind) return slice;
                debug.fF.assert(function() {
                    return void 0 === slice.control.properties.value;
                }, "A RuleOnly Slice shouldn't have a value in Formatting Model");
                var propertyValue = (0, dataViewObjectDefinition1.NA)(objects, {
                    objectName: sliceDescriptor.objectName,
                    propertyName: sliceDescriptor.propertyName
                }, sliceDescriptor.selector);
                if ("" === (null == propertyValue ? void 0 : propertyValue.value)) {
                    if ("FieldPicker" === slice.control.type) {
                        var controlProps = slice.control.properties, fallbackExpr = null == controlProps ? void 0 : controlProps.fallbackExpr;
                        controlProps.value = fallbackExpr ? {
                            newExpr: {
                                expr: fallbackExpr
                            }
                        } : controlProps.value, this.fieldPickerTransformationService.cleanFieldPickerStaticSeries(slice, canvasItem);
                    }
                    return slice;
                }
                var modifiedSlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, slice), {
                    control: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, slice.control), {
                        properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, slice.control.properties), {
                            value: propertyValue
                        })
                    })
                }), control = modifiedSlice.control;
                return "FieldPicker" === control.type && this.fieldPickerTransformationService.updateFieldPickerControlValue(control.properties, sliceDescriptor, objects, canvasItem), 
                modifiedSlice;
            }, FormattingSliceTransformerService.prototype.transformConditionalFormattingControl = function(formattingSlice, canvasItem) {
                var _this = this, control = formattingSlice.control;
                if ("ConditionalFormattingControl" !== control.type) return debug.fF.assertFail("Unexpected slice type"), 
                formattingSlice;
                var conditionalFormattingProperties = this.conditionalFormattingService.getConditionalFormattingSliceProperties(formattingSlice.displayName, control.properties.value, canvasItem);
                if (conditionalFormattingProperties) {
                    var toggleButtonProperties = conditionalFormattingProperties.toggleButton, isAppliedProperties = conditionalFormattingProperties.isApplied, conditionalFormattingButtonProperties = {
                        isSet: !1,
                        isDisabled: !isAppliedProperties,
                        showDialog: function() {
                            return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                return (0, tslib_es6.__generator)(this, function(_a) {
                                    return [ 2, isAppliedProperties && isAppliedProperties.value() ];
                                });
                            });
                        }
                    };
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                        displayName: toggleButtonProperties.displayName,
                        description: toggleButtonProperties.description,
                        control: {
                            type: "ToggleSwitch",
                            properties: {
                                descriptor: formattingSlice.control.properties.descriptor,
                                value: toggleButtonProperties.value
                            }
                        },
                        conditionalFormattingObjects: conditionalFormattingButtonProperties,
                        saveCallback: toggleButtonProperties.saveCallback
                    });
                }
            }, FormattingSliceTransformerService.prototype.getDynamicExpressionSupportObjectsForSlice = function(slice, options) {
                if (options) {
                    var formattingDescriptor = options.formattingDescriptor;
                    if ("ErrorRangeControl" !== slice.control.type && "FieldPicker" !== slice.control.type && (3 === formattingDescriptor.instanceKind || 2 === formattingDescriptor.instanceKind)) {
                        var formattingModelWarnings = options.formattingModelWarnings;
                        return this.conditionalFormattingService.getDynamicExpressionSupportObjectForSlice({
                            containerSliceDisplayName: options.containerSliceDisplayName,
                            descriptor: formattingDescriptor,
                            objectDefinitions: options.formattingObjectOptions.objectDefinitions,
                            objectDisplayName: options.conditionalFormattingDisplayName,
                            propertyDescriptor: options.propertyDescriptor,
                            propertyTypeDescriptor: options.type,
                            warning: formattingModelWarnings && formattingModelWarnings[formattingDescriptor.objectName],
                            canvasItem: options.canvasItem
                        });
                    }
                }
            }, FormattingSliceTransformerService.prototype.applyControlSpecificTransformation = function(formattingSlice, objectDescriptors, visualType, canvasItem) {
                switch (formattingSlice.control.type) {
                  case "Dropdown":
                    return this.transformDropdowns(formattingSlice, objectDescriptors, visualType);

                  case "FlagsSelection":
                    return this.transformFlagsSelection(formattingSlice, objectDescriptors, visualType);

                  case "MarginPadding":
                  case "NumUpDown":
                  case "Slider":
                    return this.transformControlsWithUnit(formattingSlice);

                  case "ConditionalFormattingControl":
                    return this.transformConditionalFormattingControl(formattingSlice, canvasItem);

                  case "SeriesDialogLink":
                    return this.transformSeriesDialogLink(formattingSlice, canvasItem);

                  case "ColorPicker":
                  case "FontControl":
                    return this.transformControlWithAliasNames(formattingSlice);

                  default:
                    return formattingSlice;
                }
            }, FormattingSliceTransformerService.prototype.transformSeriesDialogLink = function(formattingSlice, canvasItem) {
                var _this = this, control = formattingSlice.control;
                if ("SeriesDialogLink" !== control.type) return formattingSlice;
                var properties = control.properties, localizationService = this.localizationService;
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                    control: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control), {
                        type: "Link",
                        properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control.properties), {
                            value: function() {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    var result;
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        switch (_a.label) {
                                          case 0:
                                            return [ 4, this.dialogService.showConfirmationDialog({
                                                title: localizationService.get("Enable_This_Setting"),
                                                message: localizationService.get("Format_Series_Toggle_Upgrade"),
                                                okButtonText: localizationService.get("Restore_And_Enable"),
                                                cancelButtonText: localizationService.get("Discard_And_Enable")
                                            }, {
                                                maxWidth: 450,
                                                maxHeight: 225
                                            }).afterClosed().toPromise() ];

                                          case 1:
                                            return 1 === (result = _a.sent()) ? [ 2, !0 ] : 2 === result ? (properties.resetToDefaultDescriptors && canvasItem && (0, 
                                            visualContainerGroup2.Vz)(canvasItem) && (formatting_utils.Aw(canvasItem.config.singleVisual.objects, properties.resetToDefaultDescriptors, !0), 
                                            this.visualAuthoringService.raiseCanvasItemChanged(canvasItem)), [ 2, !0 ]) : [ 2, !1 ];
                                        }
                                    });
                                });
                            }
                        })
                    })
                });
            }, FormattingSliceTransformerService.prototype.transformControlsWithUnit = function(formattingSlice) {
                if (this.localizationService.currentLanguageLocale.startsWith("en-")) return formattingSlice;
                switch (formattingSlice.control.type) {
                  case "NumUpDown":
                  case "Slider":
                    return this.transformNumUpDownControl(formattingSlice);

                  case "MarginPadding":
                    return this.transformMarginPaddingControl(formattingSlice);

                  default:
                    return formattingSlice;
                }
            }, FormattingSliceTransformerService.prototype.transformControlWithAliasNames = function(formattingSlice) {
                var _a, newAliasNames = null !== (_a = formattingSlice.aliasNames) && void 0 !== _a ? _a : [];
                switch (formattingSlice.control.type) {
                  case "ColorPicker":
                    var aliasNameColor = this.localizationService.get("Generic_Color");
                    return newAliasNames.push(aliasNameColor), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                        aliasNames: newAliasNames
                    });

                  case "FontControl":
                    var aliasNameSize = this.localizationService.get("Role_DisplayName_Size");
                    return newAliasNames.push(aliasNameSize), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                        aliasNames: newAliasNames
                    });

                  default:
                    return formattingSlice;
                }
            }, FormattingSliceTransformerService.prototype.transformNumUpDownControl = function(formattingSlice) {
                var _a, control = formattingSlice.control;
                if ("Slider" !== control.type && "NumUpDown" !== control.type) return formattingSlice;
                var unitSymbol = null === (_a = control.properties.options) || void 0 === _a ? void 0 : _a.unitSymbol;
                if (!unitSymbol) return formattingSlice;
                var displayName = this.localizationService.format("DisplayName_With_Unit", [ formattingSlice.displayName, this.localizationService.get(unitSymbol) ]);
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                    displayName,
                    control: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control), {
                        properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control.properties), {
                            options: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control.properties.options), {
                                unitSymbol: void 0
                            })
                        })
                    })
                });
            }, FormattingSliceTransformerService.prototype.transformMarginPaddingControl = function(formattingSlice) {
                var _a, _b, control = formattingSlice.control;
                if ("MarginPadding" !== control.type) return formattingSlice;
                var properties = control.properties, unitSymbol = null === (_b = null === (_a = properties.top) || void 0 === _a ? void 0 : _a.options) || void 0 === _b ? void 0 : _b.unitSymbol;
                if (!unitSymbol) return formattingSlice;
                var displayName = this.localizationService.format("DisplayName_With_Unit", [ formattingSlice.displayName, this.localizationService.get(unitSymbol) ]), newProperties = {}, _loop_1 = function(key) {
                    var typedKey = key, property = properties[typedKey];
                    if (!property) return "continue";
                    debug.fF.assert(function() {
                        return unitSymbol === property.options.unitSymbol;
                    }, "MarginPadding, all dimensions should have same unit"), newProperties[typedKey] = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, property), {
                        options: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, property.options), {
                            unitSymbol: void 0
                        })
                    });
                };
                for (var key in properties) _loop_1(key);
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                    displayName,
                    control: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control), {
                        properties: newProperties
                    })
                });
            }, FormattingSliceTransformerService.prototype.transformDropdowns = function(formattingSlice, objectDescriptors, visualType) {
                var _a, _b, control = formattingSlice.control;
                if ("Dropdown" !== control.type) return formattingSlice;
                var dropdown = control.properties;
                if (property_pane_util.WN(dropdown)) return formattingSlice;
                var formattingDescriptor = dropdown.descriptor, filterValues = dropdown.filterValues, mergeValues = dropdown.mergeValues, value = dropdown.value, propertyDescriptor = formatting_utils.w7(formattingDescriptor, objectDescriptors);
                debug.fF.assertValue(propertyDescriptor, "Need property descriptor to resolve EnumDropdown");
                var valueType = types_valueType.Ge.fromDescriptor(propertyDescriptor.type), objectInstance = {
                    objectName: formattingDescriptor.objectName,
                    properties: (_a = {}, _a[formattingDescriptor.propertyName] = value, _a),
                    selector: formattingDescriptor.selector
                };
                (filterValues || mergeValues) && (objectInstance.validValues = ((_b = {})[formattingDescriptor.propertyName] = {
                    filterValues,
                    mergeValues
                }, _b));
                var enumMembers = this.getSelectionOptions({
                    propertyType: valueType,
                    instance: objectInstance,
                    propertyName: formattingDescriptor.propertyName,
                    visualType
                }), strValue = "".concat(value), selectedEnum = null == enumMembers ? void 0 : enumMembers.find(function(member) {
                    return member.value === value || member.value === strValue;
                });
                debug.fF.assertValue(selectedEnum, "selectedEnum");
                var newProperties = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, dropdown), {
                    items: enumMembers,
                    value: selectedEnum
                }), autoDropdownProperties = newProperties;
                autoDropdownProperties.filterValues = void 0, autoDropdownProperties.mergeValues = void 0;
                var newControl = {
                    type: "Dropdown",
                    properties: newProperties
                };
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                    control: newControl
                });
            }, FormattingSliceTransformerService.prototype.transformFlagsSelection = function(formattingSlice, objectDescriptors, visualType) {
                var _a, control = formattingSlice.control;
                if ("FlagsSelection" !== control.type) return formattingSlice;
                var flagsSelection = control.properties;
                if (function(flagsSelection) {
                    return !!flagsSelection.items;
                }(flagsSelection)) return formattingSlice;
                var formattingDescriptor = flagsSelection.descriptor, value = flagsSelection.value, propertyDescriptor = formatting_utils.w7(formattingDescriptor, objectDescriptors);
                debug.fF.assertValue(propertyDescriptor, "Need property descriptor to resolve EnumFlagsSelection");
                var valueType = types_valueType.Ge.fromDescriptor(propertyDescriptor.type), objectInstance = {
                    objectName: formattingDescriptor.objectName,
                    properties: (_a = {}, _a[formattingDescriptor.propertyName] = value, _a),
                    selector: formattingDescriptor.selector
                }, enumMembers = this.getSelectionOptions({
                    propertyType: valueType,
                    instance: objectInstance,
                    propertyName: formattingDescriptor.propertyName,
                    visualType
                }), strValue = "".concat(value), newControl = {
                    type: "FlagsSelection",
                    properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, flagsSelection), {
                        items: enumMembers,
                        value: strValue
                    })
                };
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                    control: newControl
                });
            }, FormattingSliceTransformerService.prototype.getSelectionOptions = function(options) {
                var propertyType = options.propertyType, instance = options.instance, propertyName = options.propertyName, visualType = options.visualType, bookmarkService = this.bookmarkService, explorationNavigation = this.explorationNavigationService, localizationService = this.localizationService, visualStylePresetService = this.visualStylePresetService;
                debug.fF.assertValue(propertyType, "propertyType"), debug.fF.assertValue(instance, "instance");
                var enumType = propertyType.enum || propertyType.flagsEnum;
                if (!enumType) {
                    var formattingType = propertyType.formatting;
                    formattingType && (formattingType.labelDisplayUnits ? enumType = (0, types_enumType.i)((0, 
                    propertyPaneUtils.p$)()) : formattingType.displayUnitsWithoutAuto ? enumType = (0, 
                    types_enumType.i)((0, propertyPaneUtils.p$)(!0)) : formattingType.stylePreset && (enumType = visualStylePresetService.getEnumFromName(visualType, instance.properties.name)));
                    var refType = propertyType.reference;
                    refType && (refType.bookmark ? (debug.fF.assertValue(bookmarkService, "bookmarks not implemented here"), 
                    debug.fF.assertValue(localizationService, "localizationService is missing"), bookmarkService && (enumType = (0, 
                    types_enumType.i)(property_pane_util.oE(bookmarkService.getAllBookmarks())))) : refType.bookmarkGroup ? (debug.fF.assertValue(bookmarkService, "bookmarks not implemented here"), 
                    debug.fF.assertValue(localizationService, "localizationService is missing"), bookmarkService && (enumType = (0, 
                    types_enumType.i)(property_pane_util.yp(bookmarkService.getBookmarkGroups())))) : refType.section ? (debug.fF.assertValue(explorationNavigation, "explorationNavigation not implemented here"), 
                    debug.fF.assertValue(localizationService, "localizationService is missing"), explorationNavigation && (enumType = (0, 
                    types_enumType.i)(property_pane_util.OY(explorationNavigation.getAllSections())))) : debug.fF.assertFail(refType.perspective ? "Perspectives must be set directly in `values`" : "Unknown refType"));
                }
                if (enumType) {
                    var validValues = property_pane_util.Cc(instance, propertyName);
                    if (validValues) {
                        var filterValues = void 0;
                        if (property_pane_util.QI(validValues)) {
                            if (filterValues = validValues.filterValues, validValues.mergeValues) {
                                var mergedValues = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], validValues.mergeValues || [], !0), enumType.members() || [], !0);
                                enumType = (0, types_enumType.i)(mergedValues);
                            }
                        } else filterValues = validValues;
                        filterValues && (enumType = (0, types_enumType.i)(enumType.members(filterValues)));
                    }
                    return (0, propertyPaneUtils.Iq)(enumType.members(), localizationService);
                }
            }, FormattingSliceTransformerService.\u0275fac = function(t) {
                return new (t || FormattingSliceTransformerService)(core["\u0275\u0275inject"](bookmark_service.F), core["\u0275\u0275inject"](ConditionalFormattingService), core["\u0275\u0275inject"](dialog_service.x), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](FieldPickerTransformationService), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_style_preset_service.A));
            }, FormattingSliceTransformerService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingSliceTransformerService,
                factory: FormattingSliceTransformerService.\u0275fac
            }), FormattingSliceTransformerService;
        }(), visual_plugin_operations_service = __webpack_require__(66977), AnalyticsFormattingService = function() {
            function AnalyticsFormattingService(analyticsPaneSaveService, anomalyDetectionHelper, featureSwitchService, forecastHelper, formattingSliceTransformerService, legacyAnalyticsFormattingService, localizationService, referenceLineHelper, runningVisualService, selectionService, visualAuthoring, visualPluginService, visualPluginOperationsService, formattingObjectDefinitionsService) {
                this.analyticsPaneSaveService = analyticsPaneSaveService, this.anomalyDetectionHelper = anomalyDetectionHelper, 
                this.featureSwitchService = featureSwitchService, this.forecastHelper = forecastHelper, 
                this.formattingSliceTransformerService = formattingSliceTransformerService, this.legacyAnalyticsFormattingService = legacyAnalyticsFormattingService, 
                this.localizationService = localizationService, this.referenceLineHelper = referenceLineHelper, 
                this.runningVisualService = runningVisualService, this.selectionService = selectionService, 
                this.visualAuthoring = visualAuthoring, this.visualPluginService = visualPluginService, 
                this.visualPluginOperationsService = visualPluginOperationsService, this.formattingObjectDefinitionsService = formattingObjectDefinitionsService;
            }
            return AnalyticsFormattingService.prototype.getFormattingModel = function(container) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var cards, unavailableModelInfo, config, capabilities, runningVisual, visualAdapter, analyticsCards, trendLineCard, referenceLineCards, symmetricShadingCard, ratioLineCard, _b, _c, _d, forecastCard, anomalyDetectionCard;
                    return (0, tslib_es6.__generator)(this, function(_e) {
                        switch (_e.label) {
                          case 0:
                            return cards = [], unavailableModelInfo = {
                                cards: []
                            }, container ? (0, visualContainerGroup2.q4)(container) || (0, utils_visualContainerUtils.LR)(this.visualPluginService, this.visualPluginOperationsService, container) || formatting_utils.D1(container) ? [ 2, unavailableModelInfo ] : (capabilities = this.visualPluginService.capabilities((config = container.config.singleVisual).visualType)) ? (runningVisual = this.runningVisualService.getVisual(container)) && (runningVisual.getHasPendingChanges() || runningVisual.getErrorInfo()) ? [ 2, unavailableModelInfo ] : (visualAdapter = null == runningVisual ? void 0 : runningVisual.getAdapter()) ? this.visualPluginService.isCustomVisual(config.visualType) ? [ 4, getAnalyticsCards(visualAdapter) ] : [ 3, 4 ] : [ 2, unavailableModelInfo ] : [ 2, unavailableModelInfo ] : [ 2, {
                                cards
                            } ];

                          case 1:
                            return (analyticsCards = _e.sent()) ? [ 3, 3 ] : [ 4, this.legacyAnalyticsFormattingService.getFormattingCards(container, runningVisual, visualAdapter, capabilities) ];

                          case 2:
                            analyticsCards = _e.sent(), _e.label = 3;

                          case 3:
                            return cards.push.apply(cards, null != analyticsCards ? analyticsCards : []), [ 3, 10 ];

                          case 4:
                            return [ 4, this.enumerateTrendLineCard(visualAdapter, capabilities) ];

                          case 5:
                            return (trendLineCard = _e.sent()) && cards.push(trendLineCard), [ 4, this.referenceLineHelper.enumerateReferenceAndConstantLineCards(container, visualAdapter, capabilities) ];

                          case 6:
                            return (referenceLineCards = _e.sent()) && cards.push.apply(cards, referenceLineCards || []), 
                            [ 4, this.enumerateSymmetricShadingCard(visualAdapter, capabilities) ];

                          case 7:
                            return (symmetricShadingCard = _e.sent()) && cards.push(symmetricShadingCard), [ 4, this.enumerateRatioLineCard(visualAdapter, capabilities) ];

                          case 8:
                            return (ratioLineCard = _e.sent()) && cards.push(ratioLineCard), _c = (_b = cards.push).apply, 
                            _d = [ cards ], [ 4, getAnalyticsCards(visualAdapter) ];

                          case 9:
                            _c.apply(_b, _d.concat([ null !== (_a = _e.sent()) && void 0 !== _a ? _a : [] ])), 
                            _e.label = 10;

                          case 10:
                            return [ 4, this.forecastHelper.enumerateForecastCard(container, visualAdapter, capabilities) ];

                          case 11:
                            return (forecastCard = _e.sent()) && cards.push(forecastCard), [ 4, this.anomalyDetectionHelper.enumerateAnomalyCard(container, visualAdapter, capabilities) ];

                          case 12:
                            return (anomalyDetectionCard = _e.sent()) && cards.push(anomalyDetectionCard), [ 2, _.isEmpty(cards) ? unavailableModelInfo : {
                                cards: cards.map(function(card) {
                                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card), {
                                        analyticsPane: !0
                                    });
                                })
                            } ];
                        }
                    });
                });
            }, AnalyticsFormattingService.prototype.getObjectDescriptors = function(container) {
                if ((0, visualContainerGroup2.q4)(container)) return {};
                var capabilities = this.visualPluginService.capabilities(container.config.singleVisual.visualType);
                return capabilities ? _.pickBy(capabilities.objects, function(descriptor, _objectName) {
                    return 2 === descriptor.objectCategory;
                }) : {};
            }, AnalyticsFormattingService.prototype.getObjectDefinitions = function(container, useObjectsOverride) {
                var _a, _this = this;
                if ((0, visualContainerGroup2.q4)(container)) return {};
                var visualObjects, config = container.config.singleVisual, capabilitiesObjects = null === (_a = this.visualPluginService.capabilities(config.visualType)) || void 0 === _a ? void 0 : _a.objects;
                if (!capabilitiesObjects) return {};
                visualObjects = useObjectsOverride && this.formattingObjectDefinitionsService ? this.formattingObjectDefinitionsService.getObjectDefinitions(container) : config.objects;
                var returnObjects = {};
                return _.forEach(visualObjects, function(definitions, objectName) {
                    var _a;
                    2 === (null === (_a = capabilitiesObjects[objectName]) || void 0 === _a ? void 0 : _a.objectCategory) && (returnObjects[objectName] = objectName !== anomalyDetectionObjectName ? definitions : _this.anomalyDetectionHelper.getObjectDefinitions(definitions));
                }), returnObjects;
            }, AnalyticsFormattingService.prototype.getRevertToDefaultMetadata = function(container) {
                return {
                    formattingSettingsString: "VisualizationPane_Section_Analytics",
                    itemTypeDisplayName: (0, formatting_utils.um)(container, this.featureSwitchService)
                };
            }, AnalyticsFormattingService.prototype.getFormatPaneSliceTransform = function(container) {
                var _this = this, visualType = (0, visualContainerUtilsHelper.s)(container), visualObjects = (0, 
                visualContainerGroup2.Vz)(container) ? (0, visualContainerUtils.GQ)(container) : void 0;
                return function(formattingSlice, objectDescriptors, dynamicExpressionSupportOptions) {
                    return _this.formattingSliceTransformerService.transformFormattingSlice({
                        formattingSlice,
                        objectDescriptors,
                        visualType,
                        visualObjects,
                        dynamicExpressionSupportOptions
                    });
                };
            }, AnalyticsFormattingService.prototype.saveProperties = function(changes, container, parentActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var fromLegacy, objectName_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, visualContainerGroup2.q4)(container) ? (debug.fF.assertFail("Analytics pane does not support VisualContainerGroup"), 
                            [ 3, 3 ]) : [ 3, 1 ];

                          case 1:
                            return fromLegacy = !1, objectName_1 = changes[0].objectName, debug.fF.assert(function() {
                                return changes.every(function(change) {
                                    return change.objectName === objectName_1;
                                });
                            }, "all the changes should have same object"), this.visualPluginService.isCustomVisual(container.config.singleVisual.visualType) && objectName_1 !== forecastHelper1.Po && objectName_1 !== anomalyDetectionObjectName && (fromLegacy = !0), 
                            [ 4, this.analyticsPaneSaveService.saveChangedSlicesToDefinition(changes, container, fromLegacy) ];

                          case 2:
                            _a.sent() && this.visualAuthoring.raiseVisualContainerChanged(container, {
                                parentContextActivity: parentActivity
                            }), _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, AnalyticsFormattingService.prototype.getRevertToDefaultEnabled = function(container, revertToDefaultDescriptors, suppressedSaveObjects) {
                var objectDefinitions = this.getObjectDefinitions(container);
                return !(!objectDefinitions || !(0, formatting_utils.wW)(revertToDefaultDescriptors, objectDefinitions, suppressedSaveObjects) && !this.forecastHelper.hasParameterWithNonDefaultValue(objectDefinitions) && !this.anomalyDetectionHelper.hasParameterWithNonDefaultValue(objectDefinitions));
            }, AnalyticsFormattingService.prototype.getModelUnavailableInformation = function(container) {
                if (container && (0, visualContainerGroup2.Vz)(container)) {
                    var runningVisual = this.runningVisualService.getVisual(container);
                    if (null == runningVisual ? void 0 : runningVisual.getHasPendingChanges()) return {
                        messageKey: "AnalyticsPane_Disabled_Paused"
                    };
                }
                return {
                    messageKey: "AnalyticsPane_Unavailable",
                    learnMoreLink: "https://go.microsoft.com/fwlink/?LinkID=825117",
                    imageName: "".concat((0, build.Xr)(), "/images/RecommendedCharts.svg")
                };
            }, AnalyticsFormattingService.prototype.revertVisualSlicesToDefinitions = function(revertToDefaultDescriptorsWithCanvasItems, parentContextActivity) {
                for (var changedVisuals = [], _i = 0, descriptorsPerCanvasItem_1 = (0, formatting_utils.Wx)(revertToDefaultDescriptorsWithCanvasItems); _i < descriptorsPerCanvasItem_1.length; _i++) {
                    var descriptorPerCanvasItem = descriptorsPerCanvasItem_1[_i], canvasItem = descriptorPerCanvasItem.canvasItem;
                    changedVisuals.push(canvasItem);
                    var descriptors = descriptorPerCanvasItem.descriptors;
                    if ((0, visualContainerGroup2.Vz)(canvasItem)) {
                        var singleVisual = canvasItem.config.singleVisual, definitions = singleVisual.objects;
                        definitions ? (this.forecastHelper.revertForecastSpecialDefinitions(canvasItem, definitions, descriptors), 
                        this.anomalyDetectionHelper.revertAnomalyDetectionSpecialDefinitions(canvasItem, definitions, descriptors), 
                        (0, formatting_utils.Aw)(definitions, descriptors)) : singleVisual.objects = {};
                    }
                }
                this.visualAuthoring.raiseCanvasItemsChanged(changedVisuals, {
                    parentContextActivity
                });
            }, AnalyticsFormattingService.prototype.shouldShowGroupChangeIndicator = function() {
                return !1;
            }, AnalyticsFormattingService.prototype.shouldShowSliceChangeIndicator = function() {
                return !1;
            }, AnalyticsFormattingService.prototype.enumerateTrendLineCard = function(visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var cardObjectName, localize, revertToDefaultDescriptors, orderedSlices, strokeDescriptors, cardBuilderWithInstance, objectInstance, cardBuilder, card, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return localize = function(key) {
                                return _this.localizationService.get(key);
                            }, revertToDefaultDescriptors = [], orderedSlices = [ {
                                type: "toggle",
                                sliceName: "combineSeries",
                                propertyName: trendLineHelper.Kx
                            }, {
                                type: "toggle",
                                sliceName: "useHighlightValues",
                                propertyName: trendLineHelper.$B
                            } ], strokeDescriptors = (0, dataViewObjectProperties.pN)(cardObjectName = trendLineHelper.s4, dataViewObjectProperties.vi), 
                            revertToDefaultDescriptors.push.apply(revertToDefaultDescriptors, Object.values(strokeDescriptors)), 
                            revertToDefaultDescriptors.push.apply(revertToDefaultDescriptors, _.map(orderedSlices, function(slice) {
                                return {
                                    objectName: cardObjectName,
                                    propertyName: slice.propertyName
                                };
                            })), [ 4, createMaxOneInstanceCardBaseWithShowToggle(cardObjectName, "trendLine", "Visual_Trend_Line", visual, capabilities, localize, revertToDefaultDescriptors, "show") ];

                          case 1:
                            return (cardBuilderWithInstance = _a.sent()) ? (objectInstance = cardBuilderWithInstance.objectInstance, 
                            (cardBuilder = cardBuilderWithInstance.cardBuilder).addGroup(void 0, function(groupBuilder) {
                                var _a, _b;
                                groupBuilder.addSlices((0, strokeStyle.Iq)({
                                    containerItemBuilder: groupBuilder,
                                    descriptors: strokeDescriptors,
                                    strokeData: (0, strokeStyle.AF)(objectInstance.properties, dataViewObjectProperties.vi, {}, null === (_b = null === (_a = objectInstance.properties.lineColor) || void 0 === _a ? void 0 : _a.solid) || void 0 === _b ? void 0 : _b.color),
                                    selector: objectInstance.selector,
                                    featureSwitches: _this.featureSwitchService.featureSwitches,
                                    localize,
                                    isSVGStroke: !0
                                }).map(function(slice) {
                                    return slice.build();
                                })), addSimpleSlices(groupBuilder, cardObjectName, objectInstance, capabilities, localize, orderedSlices);
                            }), (card = cardBuilder.build()).analyticsPane = !0, [ 2, card ]) : [ 2 ];
                        }
                    });
                });
            }, AnalyticsFormattingService.prototype.enumerateSymmetricShadingCard = function(visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, enumerateSimpleMaxOneInstanceCard(visual, capabilities, "plotAreaShading", "plotAreaShading", "Visual_Scatter_SymmetryShading", [ {
                                type: "color",
                                sliceName: "upperShadingColor",
                                propertyName: "upperShadingColor"
                            }, {
                                type: "color",
                                sliceName: "lowerShadingColor",
                                propertyName: "lowerShadingColor"
                            }, {
                                type: "transparency",
                                sliceName: "transparency",
                                propertyName: "transparency"
                            } ], this.localizationService) ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, AnalyticsFormattingService.prototype.enumerateRatioLineCard = function(visual, capabilities) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var localize, revertToDefaultDescriptors, strokeDescriptors, cardBuilderWithInstance, objectInstance, cardBuilder, card, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return localize = function(key) {
                                return _this.localizationService.get(key);
                            }, revertToDefaultDescriptors = [], strokeDescriptors = (0, dataViewObjectProperties.pN)("ratioLine", dataViewObjectProperties.vi), 
                            revertToDefaultDescriptors.push.apply(revertToDefaultDescriptors, Object.values(strokeDescriptors)), 
                            [ 4, createMaxOneInstanceCardBaseWithShowToggle("ratioLine", "ratioLine", "Visual_Scatter_RatioLine", visual, capabilities, localize, revertToDefaultDescriptors, "show") ];

                          case 1:
                            return (cardBuilderWithInstance = _a.sent()) ? (objectInstance = cardBuilderWithInstance.objectInstance, 
                            (cardBuilder = cardBuilderWithInstance.cardBuilder).addGroup(void 0, function(groupBuilder) {
                                var _a, _b;
                                return groupBuilder.addSlices((0, strokeStyle.Iq)({
                                    containerItemBuilder: groupBuilder,
                                    descriptors: strokeDescriptors,
                                    strokeData: (0, strokeStyle.AF)(objectInstance.properties, dataViewObjectProperties.vi, {}, null === (_b = null === (_a = objectInstance.properties.lineColor) || void 0 === _a ? void 0 : _a.solid) || void 0 === _b ? void 0 : _b.color),
                                    selector: objectInstance.selector,
                                    featureSwitches: _this.featureSwitchService.featureSwitches,
                                    localize,
                                    isSVGStroke: !0
                                }).map(function(slice) {
                                    return slice.build();
                                }));
                            }), (card = cardBuilder.build()).analyticsPane = !0, [ 2, card ]) : [ 2 ];
                        }
                    });
                });
            }, AnalyticsFormattingService.\u0275fac = function(t) {
                return new (t || AnalyticsFormattingService)(core["\u0275\u0275inject"](AnalyticsPaneSaveSliceToDefinitionService), core["\u0275\u0275inject"](AnalyticsFormattingAnomalyDetectionHelper), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](AnalyticsFormattingForecastHelper), core["\u0275\u0275inject"](FormattingSliceTransformerService), core["\u0275\u0275inject"](LegacyAnalyticsFormattingService), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](AnalyticsFormattingReferenceLineHelper), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visual_plugin_operations_service.f), core["\u0275\u0275inject"](formattingObjectDefinitionsService.h, 8));
            }, AnalyticsFormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: AnalyticsFormattingService,
                factory: AnalyticsFormattingService.\u0275fac
            }), AnalyticsFormattingService;
        }();
        function enumerateSimpleMaxOneInstanceCard(visual, capabilities, cardObjectName, cardName, cardDisplayNameKey, orderedSlices, localizationService, showPropertyName) {
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                var localize, revertToDefaultDescriptors, cardBuilderWithInstance, objectInstance, cardBuilder, card;
                return (0, tslib_es6.__generator)(this, function(_a) {
                    switch (_a.label) {
                      case 0:
                        return localize = function(key) {
                            return localizationService.get(key);
                        }, (revertToDefaultDescriptors = _.map(orderedSlices, function(slice) {
                            return {
                                objectName: cardObjectName,
                                propertyName: slice.propertyName
                            };
                        })).push({
                            objectName: cardObjectName,
                            propertyName: showPropertyName || standardShowPropertyName
                        }), [ 4, createMaxOneInstanceCardBaseWithShowToggle(cardObjectName, cardName, cardDisplayNameKey, visual, capabilities, localize, revertToDefaultDescriptors, showPropertyName) ];

                      case 1:
                        return (cardBuilderWithInstance = _a.sent()) ? (objectInstance = cardBuilderWithInstance.objectInstance, 
                        (cardBuilder = cardBuilderWithInstance.cardBuilder).addGroup(void 0, function(groupBuilder) {
                            addSimpleSlices(groupBuilder, cardObjectName, objectInstance, capabilities, localize, orderedSlices);
                        }), (card = cardBuilder.build()).analyticsPane = !0, [ 2, card ]) : [ 2 ];
                    }
                });
            });
        }
        var visualContainer1 = __webpack_require__(15580), visualContainer2 = __webpack_require__(80981), visualDropShadowUtil = __webpack_require__(21002), dataViewAnalysis = __webpack_require__(92129), dataViewMappingVisitor = __webpack_require__(84668), token = __webpack_require__(68082), contracts_dataType = __webpack_require__(90006), culture_formatting_service_token = __webpack_require__(7119), culture_settings_service_token = __webpack_require__(77896), formattingService = __webpack_require__(28326), formatUtils = __webpack_require__(98776), culture_format_info_service = __webpack_require__(52364), format_string_converter_service = __webpack_require__(40645), FormatInformationService = function() {
            function FormatInformationService(cultureService, formatStringConverterService, cultureSettingsService, cultureFormattingService) {
                this.cultureService = cultureService, this.formatStringConverterService = formatStringConverterService, 
                this.cultureSettingsService = cultureSettingsService, this.cultureFormattingService = cultureFormattingService, 
                this.allCurrencyFormats = null, this.cultureSettingsService && this.cultureFormattingService ? this.useTypescriptService = !1 : (this.useTypescriptService = !0, 
                this.cultureService.initialize());
            }
            return FormatInformationService.prototype.updateCultureFormatUtils = function() {
                var cultureFormatInfo;
                this.useTypescriptService ? cultureFormatInfo = this.cultureService.getFormatInfo() : this.useTypescriptService || (cultureFormatInfo = this.cultureSettingsService.getFormatInfo()), 
                this.formatUtil = new formatUtils.c(cultureFormatInfo);
            }, FormatInformationService.prototype.cloneFormatInfo = function(formatInformation) {
                if (!formatInformation) return null;
                var newFormatInformation = {
                    formatString: formatInformation.formatString,
                    format: formatInformation.format,
                    accuracy: formatInformation.accuracy,
                    thousandSeparator: formatInformation.thousandSeparator
                };
                if (formatInformation.currencyFormat) {
                    var currencyFormat = formatInformation.currencyFormat;
                    newFormatInformation.currencyFormat = {
                        culture: currencyFormat.culture,
                        currencySymbol: currencyFormat.currencySymbol,
                        positivePattern: currencyFormat.positivePattern,
                        negativePattern: currencyFormat.negativePattern
                    };
                }
                if (formatInformation.dateTimeCustomFormat) {
                    var dateTime = formatInformation.dateTimeCustomFormat;
                    newFormatInformation.dateTimeCustomFormat = {
                        culture: dateTime.culture,
                        formatGroup: dateTime.formatGroup,
                        formatString: dateTime.formatString
                    };
                }
                return newFormatInformation;
            }, FormatInformationService.prototype.updateFormatUponDataTypeChange = function(dataType, formatInformation) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.updateFormatUponDataTypeChange(dataType, newInfo);
            }, FormatInformationService.prototype.changeFormat = function(dataType, formatInformation, format) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.changeFormat(dataType, newInfo, format);
            }, FormatInformationService.prototype.setThousandsSeparator = function(dataType, formatInformation, thousandsSeparatorOn) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.setThousandsSeparator(dataType, newInfo, thousandsSeparatorOn);
            }, FormatInformationService.prototype.toggleThousandsSeparator = function(dataType, formatInformation) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.toggleThousandsSeparator(dataType, newInfo);
            }, FormatInformationService.prototype.setAccuracy = function(dataType, formatInformation, accuracy) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.setAccuracy(dataType, newInfo, accuracy);
            }, FormatInformationService.prototype.setDateTimeFormat = function(dataType, formatInformation, format, formatGroup, formatString) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.setDateTimeFormat(dataType, newInfo, format, formatGroup, formatString);
            }, FormatInformationService.prototype.setCurrencyFormat = function(dataType, formatInformation, format, culture, currencySymbol, positivePattern, negativePattern) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.setCurrencyFormat(dataType, newInfo, format, culture, currencySymbol, positivePattern, negativePattern);
            }, FormatInformationService.prototype.setCurrencyFormatWithCulture = function(dataType, formatInformation, format, culture) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, newCurrencyFormat;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.allCurrencyFormats ? [ 3, 2 ] : (_a = this, [ 4, this.cultureService.getAllCurrencySymbolCustomFormatItemsInfoAsync() ]);

                          case 1:
                            _a.allCurrencyFormats = _b.sent(), _b.label = 2;

                          case 2:
                            if (!(newCurrencyFormat = this.allCurrencyFormats.find(function(currencyFormat) {
                                return currencyFormat.culture === culture;
                            }))) throw "Cannot find selected currency format option based on selected value";
                            return [ 2, this.setCurrencyFormat(dataType, formatInformation, format, newCurrencyFormat.culture, newCurrencyFormat.symbol, newCurrencyFormat.positivePattern, newCurrencyFormat.negativePattern) ];
                        }
                    });
                });
            }, FormatInformationService.prototype.setCustomFormatString = function(dataType, customFormatString, formatInformation) {
                this.updateCultureFormatUtils();
                var newInfo = this.cloneFormatInfo(formatInformation);
                return this.formatUtil.setCustomFormatString(dataType, customFormatString, newInfo);
            }, FormatInformationService.prototype.getAllCurrencySymbolCustomFormatItemsInfo = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.updateCultureFormatUtils(), this.useTypescriptService ? [ 4, this.cultureService.getAllCurrencySymbolCustomFormatItemsInfoAsync() ] : [ 3, 2 ];

                          case 1:
                            return [ 2, _a.sent() ];

                          case 2:
                            return [ 2, this.cultureSettingsService.getAllCurrencySymbolCustomFormatItemsInfo() ];
                        }
                    });
                });
            }, FormatInformationService.prototype.getAllCustomFormats = function() {
                return this.updateCultureFormatUtils(), this.useTypescriptService ? this.cultureService.getAllCustomFormats() : this.cultureSettingsService.getAllCustomFormats();
            }, FormatInformationService.prototype.getAllDateTimeFormatItemsInfo = function() {
                return this.updateCultureFormatUtils(), this.useTypescriptService ? this.cultureService.getAllDateTimeFormatItemsInfo() : this.cultureSettingsService.getAllDateTimeFormatItemsInfo();
            }, FormatInformationService.prototype.formatWithVBAString = function(vbaFormatString, unformattedValue) {
                if (this.updateCultureFormatUtils(), this.useTypescriptService) {
                    var dotNetFormatString = this.formatStringConverterService.VBAToDotNet(vbaFormatString);
                    return Promise.resolve(formattingService.dx.formatValue(unformattedValue, dotNetFormatString));
                }
                return this.cultureFormattingService.formatWithVBAString(vbaFormatString, unformattedValue);
            }, FormatInformationService.prototype.convertVBAToDAX = function(vbaFormatString) {
                return this.updateCultureFormatUtils(), this.useTypescriptService ? Promise.resolve(this.formatStringConverterService.VBAToDotNet(vbaFormatString)) : this.cultureFormattingService.convertVBAToDAX(vbaFormatString);
            }, FormatInformationService.prototype.convertDotNetToVBA = function(dotNetFormatString) {
                return this.updateCultureFormatUtils(), this.useTypescriptService ? Promise.resolve(this.formatStringConverterService.DotNetToVBA(dotNetFormatString)) : this.cultureFormattingService.convertDotNetToVBA(dotNetFormatString);
            }, FormatInformationService.\u0275fac = function(t) {
                return new (t || FormatInformationService)(core["\u0275\u0275inject"](culture_format_info_service.t), core["\u0275\u0275inject"](format_string_converter_service.z), core["\u0275\u0275inject"](culture_settings_service_token.e, 8), core["\u0275\u0275inject"](culture_formatting_service_token.e, 8));
            }, FormatInformationService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormatInformationService,
                factory: FormatInformationService.\u0275fac,
                providedIn: "root"
            }), FormatInformationService;
        }(), DateTimeFormatService = function() {
            function DateTimeFormatService(formatInfoService) {
                this.formatInfoService = formatInfoService;
            }
            return DateTimeFormatService.prototype.getApplicableDateTimeFormats = function(dataType) {
                switch (dataType) {
                  case "Date":
                    return this.getAllDateFormats();

                  case "DateTime":
                    return (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], this.getAllDateFormats(), !0), this.getAllDateTimeFormats(), !0), this.getAllTimeFormats(), !0);

                  case "Time":
                    return this.getAllTimeFormats();

                  default:
                    return [];
                }
            }, DateTimeFormatService.prototype.getApplicableCommonDateTimeFormats = function(dataType) {
                return "DateTime" === dataType ? this.getCommonDateTimeFormats() : [];
            }, DateTimeFormatService.prototype.getApplicableCustomDateTimeFormats = function() {
                return this.getAllCustomFormats();
            }, DateTimeFormatService.prototype.getAllCustomFormats = function() {
                var allDateTimeFormats = this.getAllFormats();
                return _.filter(allDateTimeFormats, function(format) {
                    return isCustom(format);
                });
            }, DateTimeFormatService.prototype.getAllDateFormats = function() {
                var allDateTimeFormats = this.getAllFormats();
                return _.filter(allDateTimeFormats, function(format) {
                    return isDate(format);
                });
            }, DateTimeFormatService.prototype.getAllTimeFormats = function() {
                var allDateTimeFormats = this.getAllFormats();
                return _.filter(allDateTimeFormats, function(format) {
                    return isTime(format);
                });
            }, DateTimeFormatService.prototype.getAllDateTimeFormats = function() {
                var allDateTimeFormats = this.getAllFormats();
                return _.filter(allDateTimeFormats, function(format) {
                    return function(format) {
                        return !isDate(format) && !isTime(format) && !isCustom(format);
                    }(format);
                });
            }, DateTimeFormatService.prototype.getAllFormats = function() {
                return this.cachedAllFormats || (this.cachedAllFormats = this.formatInfoService.getAllDateTimeFormatItemsInfo()), 
                this.cachedAllFormats;
            }, DateTimeFormatService.prototype.getCommonDateTimeFormats = function() {
                var _a, _b, _c, _d, _e, _f, _g, _this = this;
                if (this.cachedCommonDateTimeFormats) return this.cachedCommonDateTimeFormats;
                this.cachedCommonDateTimeFormats = [];
                var longDatePatternCount = 0, shortDatePatternCount = 0, yearMonthPatternCount = 0, monthDayPatternCount = 0, longTimePatternCount = 0, shortTimePatternCount = 0, longDateVms = [], shortDateVms = [], yearMonthVms = [], monthDayVms = [], longTimeVms = [], shortTimeVms = [], yearVms = [];
                return this.getAllFormats().forEach(function(format, index) {
                    0 === index || 1 === index ? _this.cachedCommonDateTimeFormats.push(format) : "LongDate" === format.pattern && longDatePatternCount < 2 ? (longDateVms.push(format), 
                    longDatePatternCount++) : "ShortDate" === format.pattern && shortDatePatternCount < 2 ? (shortDateVms.push(format), 
                    shortDatePatternCount++) : "YearMonth" === format.pattern && yearMonthPatternCount < 1 ? (yearMonthVms.push(format), 
                    yearMonthPatternCount++) : "MonthDay" === format.pattern && monthDayPatternCount < 1 ? (monthDayVms.push(format), 
                    monthDayPatternCount++) : "LongTime" === format.pattern && longTimePatternCount < 4 ? (longTimeVms.push(format), 
                    longTimePatternCount++) : "ShortTime" === format.pattern && shortTimePatternCount < 4 ? (shortTimeVms.push(format), 
                    shortTimePatternCount++) : "YearYYYY" === format.pattern && yearVms.push(format);
                }), (_a = this.cachedCommonDateTimeFormats).push.apply(_a, longDateVms || []), (_b = this.cachedCommonDateTimeFormats).push.apply(_b, shortDateVms || []), 
                (_c = this.cachedCommonDateTimeFormats).push.apply(_c, yearMonthVms || []), (_d = this.cachedCommonDateTimeFormats).push.apply(_d, monthDayVms || []), 
                (_e = this.cachedCommonDateTimeFormats).push.apply(_e, longTimeVms || []), (_f = this.cachedCommonDateTimeFormats).push.apply(_f, shortTimeVms || []), 
                (_g = this.cachedCommonDateTimeFormats).push.apply(_g, yearVms || []), this.cachedCommonDateTimeFormats;
            }, DateTimeFormatService.\u0275fac = function(t) {
                return new (t || DateTimeFormatService)(core["\u0275\u0275inject"](FormatInformationService));
            }, DateTimeFormatService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DateTimeFormatService,
                factory: DateTimeFormatService.\u0275fac,
                providedIn: "root"
            }), DateTimeFormatService;
        }();
        function isDate(format) {
            return "LongDate" === format.pattern || "ShortDate" === format.pattern || "DMYDate" === format.pattern || "MonthDay" === format.pattern || "YearMonth" === format.pattern || "YearMM" === format.pattern || "YearYY" === format.pattern || "YearYYYY" === format.pattern;
        }
        function isTime(format) {
            return "LongTime" === format.pattern || "ShortTime" === format.pattern;
        }
        function isCustom(format) {
            return "Custom" === format.pattern;
        }
        var lazy_load_routes = __webpack_require__(61561), CurrencyFormatService = function() {
            function CurrencyFormatService(localizationService, formatInfoService) {
                this.localizationService = localizationService, this.formatInfoService = formatInfoService;
            }
            return CurrencyFormatService.prototype.getAllSupportedCurrencyFormats = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var allFormats, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.cachedAllCurrencyFormatInfo ? [ 2, this.cachedAllCurrencyFormatInfo ] : [ 4, this.formatInfoService.getAllCurrencySymbolCustomFormatItemsInfo() ];

                          case 1:
                            return allFormats = _b.sent(), this.cachedAllCurrencyFormatInfo = [], this.cachedAllCurrencyFormatInfo.push(this.createGeneralCurrencyFormat()), 
                            (_a = this.cachedAllCurrencyFormatInfo).push.apply(_a, allFormats), [ 2, this.cachedAllCurrencyFormatInfo ];
                        }
                    });
                });
            }, CurrencyFormatService.prototype.getCommonSupportedCurrencyFormats = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var allFormats, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.cachedCommonCurrencyFormatInfo ? [ 2, this.cachedCommonCurrencyFormatInfo ] : [ 4, this.formatInfoService.getAllCurrencySymbolCustomFormatItemsInfo() ];

                          case 1:
                            return allFormats = _b.sent(), this.cachedCommonCurrencyFormatInfo = [], this.cachedCommonCurrencyFormatInfo.push(this.createGeneralCurrencyFormat()), 
                            this.cachedCommonCurrencyFormatInfo.push(_.find(allFormats, function(f) {
                                return null === f.culture && "\xa5" === f.symbol;
                            })), this.cachedCommonCurrencyFormatInfo.push(_.find(allFormats, function(f) {
                                return "en-GB" === f.culture;
                            })), this.cachedCommonCurrencyFormatInfo.push(_.find(allFormats, function(f) {
                                return "en-US" === f.culture;
                            })), this.cachedCommonCurrencyFormatInfo.push(_.find(allFormats, function(f) {
                                return "fr-CH" === f.culture;
                            })), (_a = this.cachedCommonCurrencyFormatInfo).push.apply(_a, _.filter(allFormats, function(f) {
                                return null === f.culture && "\u20ac" === f.symbol;
                            })), this.cachedCommonCurrencyFormatInfo = _.compact(this.cachedCommonCurrencyFormatInfo), 
                            [ 2, this.cachedCommonCurrencyFormatInfo ];
                        }
                    });
                });
            }, CurrencyFormatService.prototype.createGeneralCurrencyFormat = function() {
                return {
                    formatType: "CurrencyGeneral",
                    culture: null,
                    displayLabel: this.localizationService.get("Format_Label_Currency_General"),
                    symbol: "$",
                    positivePattern: 0,
                    negativePattern: 0
                };
            }, CurrencyFormatService.\u0275fac = function(t) {
                return new (t || CurrencyFormatService)(core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](FormatInformationService));
            }, CurrencyFormatService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: CurrencyFormatService,
                factory: CurrencyFormatService.\u0275fac,
                providedIn: "root"
            }), CurrencyFormatService;
        }(), format_information_parser_service = __webpack_require__(91836), VisualLevelFormatInformationCacheService = function() {
            function VisualLevelFormatInformationCacheService(formatInformationParserService, formatInformationService) {
                this.formatInformationParserService = formatInformationParserService, this.formatInformationService = formatInformationService, 
                this.cache = new Map;
            }
            return VisualLevelFormatInformationCacheService.prototype.getFormatInformation = function(visualContainer, queryName) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var vcEntries, cachedInfo, columnProps, sourceFormatStringDotNet, hasCache;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return vcEntries = this.cache.get(visualContainer.name), cachedInfo = null == vcEntries ? void 0 : vcEntries.get(queryName), 
                            columnProps = null === (_a = (0, visualContainerUtils.PQ)(visualContainer)) || void 0 === _a ? void 0 : _a.columnProperties, 
                            sourceFormatStringDotNet = null === (_b = null == columnProps ? void 0 : columnProps[queryName]) || void 0 === _b ? void 0 : _b.formatString, 
                            (hasCache = null != cachedInfo) && !areEqualAfterNormalize(cachedInfo.formatStringDotNet, sourceFormatStringDotNet) && (hasCache = !1), 
                            hasCache ? [ 2, cachedInfo ] : [ 3, 1 ];

                          case 1:
                            return [ 4, this.updateCacheInternal(visualContainer, queryName, sourceFormatStringDotNet) ];

                          case 2:
                            return [ 2, _c.sent() ];
                        }
                    });
                });
            }, VisualLevelFormatInformationCacheService.prototype.updateCache = function(visualContainer, queryName, formatStringDotNet, knownFormatInformation) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.updateCacheInternal(visualContainer, queryName, formatStringDotNet, knownFormatInformation) ];
                    });
                });
            }, VisualLevelFormatInformationCacheService.prototype.updateCacheFromFormatInformation = function(visualContainer, queryName, formatInformation) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.updateCacheInternal(visualContainer, queryName, null == formatInformation ? void 0 : formatInformation.formatString, formatInformation) ];

                          case 1:
                            return [ 2, _a.sent().formatStringVBA ];
                        }
                    });
                });
            }, VisualLevelFormatInformationCacheService.prototype.updateCacheInternal = function(visualContainer, queryName, formatStringDotNet, knownFormatInformation) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var vcEntries, resultFormatStringVBA, resultFormatInformation, _a, newValue;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return vcEntries = this.cache.get(visualContainer.name), _.isEmpty(formatStringDotNet) && null == knownFormatInformation ? (vcEntries && vcEntries.delete(queryName), 
                            [ 2 ]) : (null == vcEntries && (vcEntries = new Map, this.cache.set(visualContainer.name, vcEntries)), 
                            [ 4, this.formatInformationService.convertDotNetToVBA(formatStringDotNet) ]);

                          case 1:
                            return resultFormatStringVBA = _b.sent(), null == knownFormatInformation ? [ 3, 2 ] : (_a = knownFormatInformation, 
                            [ 3, 4 ]);

                          case 2:
                            return [ 4, this.formatInformationParserService.tryParseVBAFormatString(resultFormatStringVBA) ];

                          case 3:
                            _a = _b.sent(), _b.label = 4;

                          case 4:
                            return resultFormatInformation = _a, debug.fF.assert(function() {
                                return areEqualAfterNormalize(formatStringDotNet, resultFormatInformation.formatString);
                            }, "after .NET->VBA->FormatInformation conversion, original .NET string is changed"), 
                            vcEntries.set(queryName, newValue = {
                                formatStringVBA: resultFormatStringVBA,
                                formatStringDotNet,
                                formatInformation: resultFormatInformation
                            }), [ 2, newValue ];
                        }
                    });
                });
            }, VisualLevelFormatInformationCacheService.\u0275fac = function(t) {
                return new (t || VisualLevelFormatInformationCacheService)(core["\u0275\u0275inject"](format_information_parser_service.Z), core["\u0275\u0275inject"](FormatInformationService));
            }, VisualLevelFormatInformationCacheService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualLevelFormatInformationCacheService,
                factory: VisualLevelFormatInformationCacheService.\u0275fac
            }), VisualLevelFormatInformationCacheService;
        }();
        function areEqualAfterNormalize(value1, value2) {
            return (value1 ?? "") === (value2 ?? "");
        }
        var visual_authoring_operations_service = __webpack_require__(27980), allFormatTypesInfo = [ {
            type: "General",
            displayLabelKey: "Format_Label_General"
        }, {
            type: "CurrencyGeneral",
            displayLabelKey: "Format_Label_Currency"
        }, {
            type: "DateTimeGeneralPattern",
            displayLabelKey: "Format_Label_DateTime"
        }, {
            type: "NumberDecimal",
            displayLabelKey: "DataType_Label_Number"
        }, {
            type: "NumberWhole",
            displayLabelKey: "DataType_Label_WholeNumber"
        }, {
            type: "Percentage",
            displayLabelKey: "Format_Label_Percentage"
        }, {
            type: "Scientific",
            displayLabelKey: "Format_Label_Scientific"
        }, {
            type: "Text",
            displayLabelKey: "Text"
        }, {
            type: "Boolean",
            displayLabelKey: "DataType_Label_Boolean"
        }, {
            type: "Binary",
            displayLabelKey: "DataType_Binary"
        } ], allDataTypesInfo = [ {
            type: "WholeNumber",
            displayLabelKey: "DataType_Label_WholeNumber"
        }, {
            type: "Number",
            displayLabelKey: "DataType_Label_Number"
        }, {
            type: "Currency",
            displayLabelKey: "DataType_Label_Currency"
        }, {
            type: "DateTime",
            displayLabelKey: "DataType_Label_Date_Time"
        }, {
            type: "Date",
            displayLabelKey: "DaxTemplates_DateField"
        }, {
            type: "Time",
            displayLabelKey: "DataType_Label_Time"
        }, {
            type: "Text",
            displayLabelKey: "Text"
        }, {
            type: "Boolean",
            displayLabelKey: "DataType_Label_Boolean"
        }, {
            type: "Binary",
            displayLabelKey: "DataType_Binary"
        } ], revertToDefaultDescriptors = [ {
            objectName: "visualLevelFormat",
            propertyName: "customFormatString"
        }, {
            objectName: "visualLevelFormat",
            propertyName: "formatOptions"
        }, {
            objectName: "visualLevelFormat",
            propertyName: "currencyFormats"
        }, {
            objectName: "visualLevelFormat",
            propertyName: "percentageOn"
        }, {
            objectName: "visualLevelFormat",
            propertyName: "thousandSeparatorOn"
        }, {
            objectName: "visualLevelFormat",
            propertyName: "decimalPoints"
        }, {
            objectName: "visualLevelFormat",
            propertyName: "visualFieldDataType"
        } ], VisualLevelFormatStringHelperService = function() {
            function VisualLevelFormatStringHelperService(conceptualSchemaProxy, currencyFormatService, dateTimeFormatService, dataSourcesService, displayNameService, featureSwitchService, formatInformationCacheService, formatInformationService, lazyScoped, localizationService, visualAuthoringService, visualAuthoringOperationsService, dataModelService) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.currencyFormatService = currencyFormatService, 
                this.dateTimeFormatService = dateTimeFormatService, this.dataSourcesService = dataSourcesService, 
                this.displayNameService = displayNameService, this.featureSwitchService = featureSwitchService, 
                this.formatInformationCacheService = formatInformationCacheService, this.formatInformationService = formatInformationService, 
                this.lazyScoped = lazyScoped, this.localizationService = localizationService, this.visualAuthoringService = visualAuthoringService, 
                this.visualAuthoringOperationsService = visualAuthoringOperationsService, this.dataModelService = dataModelService;
            }
            return VisualLevelFormatStringHelperService.prototype.getVisualLevelFormatStringCard = function(visualContainer, visualCapabilities) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var cardUidBuilder, cardBuilder, visualFieldsSelects, allFieldsFormatInfo, _i, visualFieldsSelects_1, fieldFormatInfo, currencyFormats, commonCurrencyFormats, allCurrencyFormats, uniqAllFormats, columnProps, schema, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            cardUidBuilder = new build_control_util.lg("visualLevelFieldsFormat"), cardBuilder = new build_control_util.CQ(cardUidBuilder, "Visual_Level_Fields_Formatting", revertToDefaultDescriptors, function(key) {
                                return _this.localizationService.get(key);
                            }, !0), visualFieldsSelects = function(visualContainer) {
                                var allSelects = (0, visualContainerUtils.oJ)(visualContainer), visualFieldsProjections = (0, 
                                visualContainerUtils.Ml)(visualContainer), visualFieldsSelects = [];
                                _.isEmpty(allSelects) || _.forEach(visualFieldsProjections, function(projectionsForRole, _roleName) {
                                    _.forEach(projectionsForRole.all(), function(projection) {
                                        var visualFieldSelect = (0, arrayExtensions.rC)(allSelects, projection.queryRef);
                                        visualFieldSelect && visualFieldsSelects.push({
                                            select: visualFieldSelect,
                                            isHidden: projection.hidden
                                        });
                                    });
                                });
                                var projectionsGroupedByQueryName = _.groupBy(visualFieldsSelects, function(fieldSelect) {
                                    return fieldSelect.select.name;
                                });
                                return debug.fF.assert(function() {
                                    return _.every(projectionsGroupedByQueryName, function(group) {
                                        if (_.size(group) <= 1) return !0;
                                        var isHiddenValue = group[0].isHidden;
                                        return _.every(group, function(item) {
                                            return item.isHidden === isHiddenValue;
                                        });
                                    });
                                }, "We expect all projections corresponding to the same select has the same isHidden value. Now some projections of the same select has different isHidden values. Either the assumption is changed, or there is a bug."), 
                                _.uniqBy(visualFieldsSelects, function(fieldSelect) {
                                    return fieldSelect.select.name;
                                });
                            }(visualContainer), allFieldsFormatInfo = [], _i = 0, visualFieldsSelects_1 = visualFieldsSelects, 
                            _b.label = 1;

                          case 1:
                            return _i < visualFieldsSelects_1.length ? [ 4, this.formatInformationCacheService.getFormatInformation(visualContainer, visualFieldsSelects_1[_i].select.name) ] : [ 3, 4 ];

                          case 2:
                            fieldFormatInfo = _b.sent(), allFieldsFormatInfo.push(fieldFormatInfo), _b.label = 3;

                          case 3:
                            return _i++, [ 3, 1 ];

                          case 4:
                            return currencyFormats = [], _.find(allFieldsFormatInfo, function(info) {
                                var _a;
                                return isCurrencyFormat(null === (_a = null == info ? void 0 : info.formatInformation) || void 0 === _a ? void 0 : _a.format);
                            }) ? [ 4, this.currencyFormatService.getCommonSupportedCurrencyFormats() ] : [ 3, 7 ];

                          case 5:
                            return commonCurrencyFormats = _b.sent(), [ 4, this.currencyFormatService.getAllSupportedCurrencyFormats() ];

                          case 6:
                            allCurrencyFormats = _b.sent(), uniqAllFormats = _.uniqBy((0, tslib_es6.__spreadArray)((0, 
                            tslib_es6.__spreadArray)([], null != commonCurrencyFormats ? commonCurrencyFormats : [], !0), null != allCurrencyFormats ? allCurrencyFormats : [], !0), getCurrencyFormatInfoIdentifier), 
                            currencyFormats.push.apply(currencyFormats, uniqAllFormats), _b.label = 7;

                          case 7:
                            return columnProps = null === (_a = (0, visualContainerUtils.PQ)(visualContainer)) || void 0 === _a ? void 0 : _a.columnProperties, 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ];

                          case 8:
                            return schema = _b.sent(), cardBuilder.addGroup("visualSelects", function(groupBuilder) {
                                groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1), groupBuilder.addContainer("visual-fields-container", function(containerBuilder) {
                                    _.forEach(visualFieldsSelects, function(visualFieldSelect, index) {
                                        var queryName = visualFieldSelect.select.name, expr = visualFieldSelect.select.expr, displayName = _this.displayNameService.getDisplayName(expr, schema, visualCapabilities, queryName, columnProps, {
                                            includeHierarchyName: !0,
                                            includeVariationSource: !0
                                        });
                                        containerBuilder.addContainerItem(queryName, displayName, function(containerItemBuilder) {
                                            visualFieldSelect.isHidden && containerItemBuilder.withIcon("hide3"), containerItemBuilder.withGroups([ _this.getSingleFieldFormatGroup(cardUidBuilder, visualContainer, queryName, expr, allFieldsFormatInfo[index], schema, currencyFormats) ]);
                                        });
                                    });
                                });
                            }), [ 2, cardBuilder.build() ];
                        }
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveSlice = function(saveObjectName, propertyPaneSlice, selectedItem) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return "visualLevelFormat" !== saveObjectName ? [ 2 ] : (0, visualContainerGroup2.Vz)(selectedItem) ? "customFormatString" === propertyPaneSlice.name ? [ 2, this.saveVisualLevelFormatStringSlice(propertyPaneSlice, selectedItem) ] : "formatOptions" === propertyPaneSlice.name ? [ 2, this.saveVisualLevelFormatOptionsSlice(propertyPaneSlice, selectedItem) ] : "currencyFormats" === propertyPaneSlice.name ? [ 2, this.saveVisualLevelCurrencyFormatOptionsSlice(propertyPaneSlice, selectedItem) ] : "thousandSeparatorOn" === propertyPaneSlice.name ? [ 2, this.saveVisualLevelThousandSeparatorSlice(propertyPaneSlice, selectedItem) ] : "percentageOn" === propertyPaneSlice.name ? [ 2, this.saveVisualLevelPercentageSlice(propertyPaneSlice, selectedItem) ] : "decimalPoints" === propertyPaneSlice.name ? [ 2, this.saveVisualLevelDecimalPointsSlice(propertyPaneSlice, selectedItem) ] : "visualFieldDataType" === propertyPaneSlice.name ? [ 2, this.saveVisualLevelFieldDataTypeSlice(propertyPaneSlice, selectedItem) ] : [ 2 ] : (debug.fF.assertFail("Expect visualLevelFormatStringFormattingHelper.saveSlice to be called only for a visual container"), 
                        [ 2 ]);
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.resetProperty = function(visualContainer, propertyName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var context;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return "customFormatString" !== propertyName ? [ 3, 1 ] : (this.visualAuthoringOperationsService.removeAllVisualLevelFormatStrings(visualContainer), 
                            [ 3, 3 ]);

                          case 1:
                            return "visualFieldDataType" !== propertyName ? [ 3, 3 ] : [ 4, this.visualAuthoringService.getVisualCalcDaxParserServiceContext(visualContainer) ];

                          case 2:
                            context = _a.sent(), this.visualAuthoringOperationsService.removeAllVisualLevelUserSetDataTypes(visualContainer, context), 
                            _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveVisualLevelFieldDataTypeSlice = function(propertyPaneSlice, visualContainer) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var queryName, newDataType, newPrimitiveType, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return queryName = null === (_a = propertyPaneSlice.selector) || void 0 === _a ? void 0 : _a.metadata, 
                            _.isEmpty(queryName) ? (debug.fF.assertFail("Expect the slice.selector.metadata to be defined, it should correspond to a queryName"), 
                            [ 2 ]) : (newPrimitiveType = (0, contracts_dataType.F)(newDataType = propertyPaneSlice.value), 
                            [ 4, this.visualAuthoringService.updateVisualCalculationDataType(visualContainer, queryName, newPrimitiveType) ]);

                          case 1:
                            return _b.sent() ? [ 2, this.saveSliceWithFormatInformationUpdate(propertyPaneSlice, visualContainer, function(currentFieldInfo) {
                                return _this.formatInformationService.updateFormatUponDataTypeChange((0, contracts_dataType.F)(newDataType), currentFieldInfo.formatInformation);
                            }) ] : [ 2 ];
                        }
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveVisualLevelFormatStringSlice = function(propertyPaneSlice, visualContainer) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var queryName, customFormatStringDotNet, fieldInfo, fieldFormatInformation, isCustomDateTime, newFormatInformation;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return queryName = null === (_a = propertyPaneSlice.selector) || void 0 === _a ? void 0 : _a.metadata, 
                            _.isEmpty(queryName) ? (debug.fF.assertFail("Expect the slice.selector.metadata to be defined, it should correspond to a queryName"), 
                            [ 2 ]) : (customFormatStringDotNet = propertyPaneSlice.value, [ 4, this.getFieldTypeAndFormatInfo(visualContainer, queryName) ]);

                          case 1:
                            return fieldInfo = _c.sent(), isCustomDateTime = "Custom" === (null == (fieldFormatInformation = null == fieldInfo ? void 0 : fieldInfo.formatInformation) ? void 0 : fieldFormatInformation.format) && "Custom" === (null === (_b = null == fieldFormatInformation ? void 0 : fieldFormatInformation.dateTimeCustomFormat) || void 0 === _b ? void 0 : _b.formatGroup), 
                            newFormatInformation = isCustomDateTime ? (standardCustom = getCustomFormatInformationStandard(customFormatStringDotNet), 
                            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, standardCustom), {
                                dateTimeCustomFormat: {
                                    culture: null,
                                    formatGroup: "Custom",
                                    formatString: standardCustom.formatString
                                }
                            })) : getCustomFormatInformationStandard(customFormatStringDotNet), this.formatInformationCacheService.updateCache(visualContainer, queryName, customFormatStringDotNet, newFormatInformation), 
                            this.visualAuthoringService.setVisualLevelFormatString(visualContainer, queryName, customFormatStringDotNet, !0), 
                            [ 2 ];
                        }
                        var standardCustom;
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveVisualLevelFormatOptionsSlice = function(propertyPaneSlice, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.saveSliceWithFormatInformationUpdate(propertyPaneSlice, visualContainer, function(currentFieldInfo) {
                            var _a, _b, option, formatType, newFormatOption = JSON.parse(propertyPaneSlice.value), newFormat = newFormatOption.formatType;
                            return "DateTimeGeneralPattern" === (formatType = (option = newFormatOption).formatType) || "DateTimeCustom" === formatType || "Custom" === formatType && "Custom" === option.dateTimePattern ? _this.formatInformationService.setDateTimeFormat(currentFieldInfo.valueType.primitiveType, currentFieldInfo.formatInformation, newFormat, newFormatOption.dateTimePattern, null !== (_a = newFormatOption.formatString) && void 0 !== _a ? _a : null === (_b = currentFieldInfo.formatInformation) || void 0 === _b ? void 0 : _b.formatString) : _this.formatInformationService.changeFormat(currentFieldInfo.valueType.primitiveType, currentFieldInfo.formatInformation, newFormat);
                        }) ];
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveVisualLevelCurrencyFormatOptionsSlice = function(propertyPaneSlice, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.saveSliceWithFormatInformationUpdate(propertyPaneSlice, visualContainer, function(currentFieldInfo) {
                            var newCurrencyFormatOption = JSON.parse(propertyPaneSlice.value);
                            return _this.formatInformationService.setCurrencyFormat(currentFieldInfo.valueType.primitiveType, currentFieldInfo.formatInformation, newCurrencyFormatOption.formatType, newCurrencyFormatOption.culture, newCurrencyFormatOption.symbol, newCurrencyFormatOption.positivePattern, newCurrencyFormatOption.negativePattern);
                        }) ];
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveVisualLevelThousandSeparatorSlice = function(propertyPaneSlice, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.saveSliceWithFormatInformationUpdate(propertyPaneSlice, visualContainer, function(currentFieldInfo) {
                            return _this.formatInformationService.setThousandsSeparator(currentFieldInfo.valueType.primitiveType, currentFieldInfo.formatInformation, propertyPaneSlice.value);
                        }) ];
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveVisualLevelPercentageSlice = function(propertyPaneSlice, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.saveSliceWithFormatInformationUpdate(propertyPaneSlice, visualContainer, function(currentFieldInfo) {
                            var percentageOn = JSON.parse(propertyPaneSlice.value);
                            return _this.formatInformationService.changeFormat(currentFieldInfo.valueType.primitiveType, currentFieldInfo.formatInformation, percentageOn ? "Percentage" : "General");
                        }) ];
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveVisualLevelDecimalPointsSlice = function(propertyPaneSlice, visualContainer) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.saveSliceWithFormatInformationUpdate(propertyPaneSlice, visualContainer, function(currentFieldInfo) {
                            return _this.formatInformationService.setAccuracy(currentFieldInfo.valueType.primitiveType, currentFieldInfo.formatInformation, propertyPaneSlice.value);
                        }) ];
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.saveSliceWithFormatInformationUpdate = function(propertyPaneSlice, visualContainer, getNewFormatInformationFunc) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var queryName, currentFieldInfo, newFormatInformation;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return queryName = null === (_a = propertyPaneSlice.selector) || void 0 === _a ? void 0 : _a.metadata, 
                            _.isEmpty(queryName) ? (debug.fF.assertFail("Expect the slice.selector.metadata to be defined, it should correspond to a queryName"), 
                            [ 2 ]) : [ 4, this.getFieldTypeAndFormatInfo(visualContainer, queryName) ];

                          case 1:
                            return currentFieldInfo = _b.sent(), debug.fF.assert(function() {
                                return null != currentFieldInfo && null != (null == currentFieldInfo ? void 0 : currentFieldInfo.valueType);
                            }, "Expect the matching field has data type and format info"), currentFieldInfo && null != (null == currentFieldInfo ? void 0 : currentFieldInfo.valueType) ? (newFormatInformation = getNewFormatInformationFunc(currentFieldInfo), 
                            [ 4, this.formatInformationCacheService.updateCacheFromFormatInformation(visualContainer, queryName, newFormatInformation) ]) : [ 2 ];

                          case 2:
                            return _b.sent(), this.visualAuthoringService.setVisualLevelFormatString(visualContainer, queryName, null == newFormatInformation ? void 0 : newFormatInformation.formatString, !0), 
                            [ 2 ];
                        }
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.getSingleFieldFormatGroup = function(cardUidBuilder, visualContainer, fieldQueryName, fieldExpr, fieldFormatInfo, schema, currencyFormats) {
                var _a, _this = this, groupBuilder = new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "singleFieldVisualLevelFormatGroup"), function(key) {
                    return _this.localizationService.get(key);
                });
                groupBuilder.withDisplayName("Format_Options");
                var valueType = null === (_a = fieldExpr.getMetadata(schema)) || void 0 === _a ? void 0 : _a.type;
                if (debug.fF.assert(function() {
                    return null != valueType;
                }, "Expect the field ".concat(fieldQueryName, " to have a data type")), this.featureSwitchService.featureSwitches.visualLevelFormatStringFullSupport) {
                    var dataType = (0, contracts_dataType.m)(null == valueType ? void 0 : valueType.primitiveType) || "Number";
                    this.checkToAddDataTypesDropdown(groupBuilder, fieldExpr, fieldQueryName, dataType);
                    var fieldFormatInformation = null == fieldFormatInfo ? void 0 : fieldFormatInfo.formatInformation;
                    this.addFormatsDropdown(groupBuilder, fieldQueryName, dataType, fieldFormatInformation), 
                    this.checkToAddCurrencyFormats(groupBuilder, fieldQueryName, fieldFormatInformation, currencyFormats), 
                    this.checkToAddNumericFormatControls(groupBuilder, fieldQueryName, dataType, fieldFormatInformation), 
                    "Custom" === (null == fieldFormatInformation ? void 0 : fieldFormatInformation.format) && this.addCustomFormatStringSlices(groupBuilder, visualContainer, fieldQueryName, valueType, "Visual_FormatCode");
                } else this.addCustomFormatStringSlices(groupBuilder, visualContainer, fieldQueryName, valueType, "Format");
                return groupBuilder.build();
            }, VisualLevelFormatStringHelperService.prototype.addCustomFormatStringSlices = function(groupBuilder, visualContainer, queryName, valueType, formatStringSliceDisplayNameKey) {
                var _a, _b, _this = this, noCustomFormatSupport = function(valueType) {
                    var _a;
                    return (null == valueType ? void 0 : valueType.bool) || (null == valueType ? void 0 : valueType.text) || !!(null === (_a = null == valueType ? void 0 : valueType.misc) || void 0 === _a ? void 0 : _a.sparkline);
                }(valueType);
                debug.fF.assert(function() {
                    return !noCustomFormatSupport || !_this.featureSwitchService.featureSwitches.visualLevelFormatStringFullSupport;
                }, "If the field does not support custom format string, we do not expect this function to be called when visualLevelFormatStringFullSupport is on"), 
                noCustomFormatSupport && groupBuilder.addSimpleSlice("noCustomFormatSupportMessage", function() {
                    return new build_control_util.G_({
                        descriptor: {
                            objectName: "visualLevelFormat",
                            selector: {
                                metadata: queryName
                            },
                            propertyName: void 0
                        },
                        value: _this.localizationService.get("CustomFormatString_Disabled_For_CertainTypedFields")
                    }).build();
                });
                var columnProps = null === (_a = (0, visualContainerUtils.PQ)(visualContainer)) || void 0 === _a ? void 0 : _a.columnProperties;
                groupBuilder.addSimpleSlice("singleFieldVisualLevelFormatString", new build_control_util.fq({
                    descriptor: {
                        objectName: "visualLevelFormat",
                        propertyName: "customFormatString",
                        selector: {
                            metadata: queryName
                        }
                    },
                    value: null === (_b = null == columnProps ? void 0 : columnProps[queryName]) || void 0 === _b ? void 0 : _b.formatString,
                    placeholder: "Auto",
                    validators: {
                        maxLength: {
                            type: 5,
                            value: 255
                        }
                    }
                }).build(), function(sliceBuilder) {
                    sliceBuilder.withCustomDisplayName(formatStringSliceDisplayNameKey), noCustomFormatSupport && sliceBuilder.withDisabled(!0);
                }), function(groupBuilder, queryName) {
                    groupBuilder.addSimpleSlice("singleFieldVisualLevelFormatStringLearnMoreLink", new build_control_util.Vc({
                        descriptor: {
                            objectName: "visualLevelFormat",
                            selector: {
                                metadata: queryName
                            },
                            propertyName: void 0
                        },
                        value: function() {
                            window.open("https://go.microsoft.com/fwlink/p/?LinkId=2099021", "_blank");
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("LearnMore").withSuppressDisplayName(!0);
                    });
                }(groupBuilder, queryName);
            }, VisualLevelFormatStringHelperService.prototype.checkToAddDataTypesDropdown = function(groupBuilder, fieldExpr, queryName, dataType) {
                if ((0, sqExprStaticMembers.jX)(fieldExpr)) {
                    var dataTypeDropdownItems = this.getDataTypeDropdownItems(), selectedDataType = _.find(dataTypeDropdownItems, function(item) {
                        return item.value === dataType;
                    });
                    groupBuilder.addSimpleSlice("dataTypeOptions", function() {
                        return new build_control_util.uY({
                            items: dataTypeDropdownItems,
                            descriptor: {
                                objectName: "visualLevelFormat",
                                propertyName: "visualFieldDataType",
                                selector: {
                                    metadata: queryName
                                }
                            },
                            value: selectedDataType
                        }).build();
                    }, function(sliceBuilder) {
                        sliceBuilder.withCustomDisplayName("DataType_Title");
                    });
                }
            }, VisualLevelFormatStringHelperService.prototype.addFormatsDropdown = function(groupBuilder, queryName, dataType, selectedFormatInformation) {
                var options = this.getFieldFormatOptions(dataType), formatDropdownItems = _.map(options, function(option) {
                    return {
                        value: JSON.stringify(option),
                        displayName: option.displayLabel,
                        label: option.displayLabel
                    };
                }), selectedDropdownIdx = _.findIndex(options, function(option) {
                    return formatInformation = selectedFormatInformation, formatOption = option, debug.fF.assert(function() {
                        return null != formatOption;
                    }, "the given formatOption comes from the main format options dropdown and should never be null"), 
                    null != formatInformation && (debug.fF.assert(function() {
                        return "CurrencyCustom" !== formatOption.formatString;
                    }, "We do not expect the main format options dropdown to have CurrencyCustom"), 
                    (isCurrencyFormat(formatInformation.format) ? "CurrencyGeneral" : formatInformation.format) === formatOption.formatType && (!formatInformation.dateTimeCustomFormat || ("Custom" === formatInformation.format ? "Custom" === formatOption.formatType : formatInformation.dateTimeCustomFormat.formatGroup === formatOption.dateTimePattern && formatInformation.dateTimeCustomFormat.formatString === formatOption.formatString)));
                    var formatInformation, formatOption;
                }), selectedDropdown = -1 !== selectedDropdownIdx ? formatDropdownItems[selectedDropdownIdx] : null;
                groupBuilder.addSimpleSlice("formatOptions", function() {
                    return new build_control_util.uY({
                        items: formatDropdownItems,
                        descriptor: {
                            objectName: "visualLevelFormat",
                            propertyName: "formatOptions",
                            selector: {
                                metadata: queryName
                            }
                        },
                        value: selectedDropdown
                    }).build();
                }, function(sliceBuilder) {
                    sliceBuilder.withCustomDisplayName("Format");
                });
            }, VisualLevelFormatStringHelperService.prototype.checkToAddCurrencyFormats = function(groupBuilder, queryName, selectedFormatInformation, currencyFormats) {
                if (isCurrencyFormat(null == selectedFormatInformation ? void 0 : selectedFormatInformation.format)) {
                    var format, formatDropdownItems = _.map(currencyFormats, function(format) {
                        return {
                            value: JSON.stringify(format),
                            displayName: format.displayLabel,
                            label: format.displayLabel
                        };
                    }), selectedItemIdentifier = "".concat(normalizeValue((format = null == selectedFormatInformation ? void 0 : selectedFormatInformation.currencyFormat).culture), "-").concat(normalizeValue(format.currencySymbol), "-").concat(normalizeValue(format.negativePattern), "-").concat(normalizeValue(format.positivePattern)), selectedItemIdx = _.findIndex(currencyFormats, function(format) {
                        return getCurrencyFormatInfoIdentifier(format) === selectedItemIdentifier;
                    });
                    groupBuilder.addSimpleSlice("currencyFormats", function() {
                        return new build_control_util.uY({
                            items: formatDropdownItems,
                            descriptor: {
                                objectName: "visualLevelFormat",
                                propertyName: "currencyFormats",
                                selector: {
                                    metadata: queryName
                                }
                            },
                            value: formatDropdownItems[selectedItemIdx]
                        }).build();
                    }, function(sliceBuilder) {
                        sliceBuilder.withCustomDisplayName("Properties_Currency_Format");
                    });
                }
            }, VisualLevelFormatStringHelperService.prototype.checkToAddNumericFormatControls = function(groupBuilder, queryName, dataType, formatInformation) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return (0, formatUtils.R)(dataType, formatInformation, this.dateTimeFormatService) ? (groupBuilder.addSimpleSlice("percentageFormat", function() {
                            return new build_control_util.bd({
                                descriptor: getFormatSliceDescriptor(queryName, "percentageOn"),
                                value: "Percentage" === (null == formatInformation ? void 0 : formatInformation.format)
                            }).build();
                        }, function(sliceBuilder) {
                            sliceBuilder.withCustomDisplayName("Properties_Percentage_Format");
                        }), groupBuilder.addSimpleSlice("thousandSeparatorFormat", function() {
                            return new build_control_util.bd({
                                descriptor: getFormatSliceDescriptor(queryName, "thousandSeparatorOn"),
                                value: null == formatInformation ? void 0 : formatInformation.thousandSeparator
                            }).build();
                        }, function(sliceBuilder) {
                            sliceBuilder.withCustomDisplayName("Properties_Thousands_Separator");
                        }), groupBuilder.addSimpleSlice("decimalPoints", function() {
                            return new build_control_util.mu({
                                descriptor: getFormatSliceDescriptor(queryName, "decimalPoints"),
                                value: null == formatInformation ? void 0 : formatInformation.accuracy,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 0
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 15
                                    }
                                },
                                placeholderText: _this.localizationService.get("Visual_Auto")
                            }).build();
                        }, function(sliceBuilder) {
                            sliceBuilder.withCustomDisplayName("Properties_Decimal_Places");
                        }), [ 2 ]) : [ 2 ];
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.getFieldFormatOptions = function(dataType) {
                var formatOptions, _this = this, customFormatOption = {
                    formatType: "Custom",
                    displayLabel: this.localizationService.get("Custom")
                }, customDateTimeFormatOption = {
                    formatType: "Custom",
                    displayLabel: this.localizationService.get("Custom"),
                    dateTimePattern: "Custom"
                }, showCustomFormatOption = !function(dataType) {
                    return "Text" === dataType || "Boolean" === dataType;
                }(dataType);
                if (function(dataType) {
                    return "Date" === dataType || "DateTime" === dataType || "Time" === dataType;
                }(dataType)) {
                    var commonDateTimeItems = this.dateTimeFormatService.getApplicableCommonDateTimeFormats(dataType), dateTimeItems = this.dateTimeFormatService.getApplicableDateTimeFormats(dataType), allDisplayDateTimeItems_1 = (0, 
                    tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], commonDateTimeItems, !0), dateTimeItems, !0);
                    debug.fF.assert(function() {
                        return null == _.find(allDisplayDateTimeItems_1, function(item) {
                            return "Dynamic" === item.formatType;
                        });
                    }, "We do not expect a dateTime format item is in type Dynamic"), formatOptions = _.map(allDisplayDateTimeItems_1, function(item) {
                        return {
                            formatType: item.formatType,
                            displayLabel: item.displayLabel,
                            formatString: item.formatString,
                            dateTimePattern: item.pattern
                        };
                    }), showCustomFormatOption && (_.remove(formatOptions, function(option) {
                        return "Custom" === option.formatType;
                    }), formatOptions.unshift(customDateTimeFormatOption));
                } else {
                    var compatibleFormatTypes = this.dataModelService.getCompatibleFormats([ dataType ]);
                    compatibleFormatTypes = _.filter(compatibleFormatTypes, function(type) {
                        return "Dynamic" !== type;
                    }), formatOptions = _.compact(_.map(compatibleFormatTypes, function(formatType) {
                        var matchingFormatInfo = _.find(allFormatTypesInfo, function(item) {
                            return item.type === formatType;
                        });
                        if (debug.fF.assert(function() {
                            return null != matchingFormatInfo || "Custom" === formatType;
                        }, "We expect to haven an entry for format type ".concat(formatType)), matchingFormatInfo) return {
                            formatType,
                            displayLabel: _this.localizationService.get(matchingFormatInfo.displayLabelKey)
                        };
                    })), showCustomFormatOption && formatOptions.push(customFormatOption);
                }
                return showCustomFormatOption || _.remove(formatOptions, function(option) {
                    return "Custom" === option.formatType;
                }), _.uniqBy(formatOptions, function(option) {
                    return function(option) {
                        return "".concat(option.formatType, "-").concat(normalizeValue(option.formatString));
                    }(option);
                });
            }, VisualLevelFormatStringHelperService.prototype.getFieldTypeAndFormatInfo = function(visualContainer, queryName) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var allSelects, targetSelect, schema, valueType, fieldFormatInfo;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return allSelects = (0, visualContainerUtils.oJ)(visualContainer), (targetSelect = _.find(allSelects, function(select) {
                                return select.name === queryName;
                            })) ? [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ] : [ 2 ];

                          case 1:
                            return schema = _b.sent(), valueType = null === (_a = targetSelect.expr.getMetadata(schema)) || void 0 === _a ? void 0 : _a.type, 
                            debug.fF.assert(function() {
                                return null != valueType;
                            }, "We expect the valueType of the field matching the given givenName to be defined"), 
                            [ 4, this.formatInformationCacheService.getFormatInformation(visualContainer, queryName) ];

                          case 2:
                            return fieldFormatInfo = _b.sent(), [ 2, {
                                valueType,
                                formatInformation: null == fieldFormatInfo ? void 0 : fieldFormatInfo.formatInformation
                            } ];
                        }
                    });
                });
            }, VisualLevelFormatStringHelperService.prototype.getDataTypeDropdownItems = function() {
                var _this = this;
                return this.dataTypeDropdownItems || (this.dataTypeDropdownItems = _.map(allDataTypesInfo, function(info) {
                    return {
                        value: info.type,
                        displayName: _this.localizationService.get(info.displayLabelKey),
                        label: info.displayLabelKey
                    };
                })), this.dataTypeDropdownItems;
            }, VisualLevelFormatStringHelperService.prototype.getVisualCalcService = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return null != this.visualCalcServiceInternal ? [ 3, 2 ] : (_a = this, [ 4, this.lazyScoped.get(lazy_load_routes.w) ]);

                          case 1:
                            _a.visualCalcServiceInternal = _b.sent(), _b.label = 2;

                          case 2:
                            return [ 2, this.visualCalcServiceInternal ];
                        }
                    });
                });
            }, VisualLevelFormatStringHelperService.\u0275fac = function(t) {
                return new (t || VisualLevelFormatStringHelperService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](CurrencyFormatService), core["\u0275\u0275inject"](DateTimeFormatService), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](VisualLevelFormatInformationCacheService), core["\u0275\u0275inject"](FormatInformationService), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_authoring_operations_service.Q), core["\u0275\u0275inject"](token.n));
            }, VisualLevelFormatStringHelperService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualLevelFormatStringHelperService,
                factory: VisualLevelFormatStringHelperService.\u0275fac
            }), VisualLevelFormatStringHelperService;
        }();
        function getCurrencyFormatInfoIdentifier(format) {
            return "".concat(normalizeValue(format.culture), "-").concat(normalizeValue(format.symbol), "-").concat(normalizeValue(format.negativePattern), "-").concat(normalizeValue(format.positivePattern));
        }
        function getFormatSliceDescriptor(queryName, propertyName) {
            return {
                objectName: "visualLevelFormat",
                propertyName,
                selector: {
                    metadata: queryName
                }
            };
        }
        function isCurrencyFormat(format) {
            return "CurrencyGeneral" === format || "CurrencyCustom" === format;
        }
        function getCustomFormatInformationStandard(dotNetFormatString) {
            return {
                formatString: _.isEmpty(dotNetFormatString) ? void 0 : dotNetFormatString,
                format: "Custom",
                thousandSeparator: !1,
                currencyFormat: null,
                dateTimeCustomFormat: null
            };
        }
        function normalizeValue(val) {
            return val ?? "";
        }
        var SpecialGeneralPropertyNamesArray = [ propertyPaneViewModel.X, propertyPaneViewModel.Y, propertyPaneViewModel.Lu, propertyPaneViewModel.oU, propertyPaneViewModel.f4, propertyPaneViewModel.Zp ];
        function saveGeneralPositionProperty(propertyPaneSlice, selectedItem, propertySliceSaveServices, currentCanvasLayout) {
            var layout = selectedItem.layouts.withId(currentCanvasLayout), position = _.cloneDeep(layout.position);
            debug.fF.assertValue(position, "VisualContainer.position");
            var intValue = parseInt(propertyPaneSlice.value, 10);
            if (!isNaN(intValue) && null != intValue) {
                if (propertyPaneSlice.name === propertyPaneViewModel.X) if (1 !== currentCanvasLayout) {
                    var adjustedPosition = (0, visualContainerUtils.P4)((0, tslib_es6.__assign)((0, 
                    tslib_es6.__assign)({}, position), {
                        x: intValue
                    }), selectedItem);
                    position.x = adjustedPosition.x;
                } else position.x = intValue; else propertyPaneSlice.name === propertyPaneViewModel.Y ? 1 !== currentCanvasLayout ? (adjustedPosition = (0, 
                visualContainerUtils.P4)((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, position), {
                    y: intValue
                }), selectedItem), position.y = adjustedPosition.y) : position.y = intValue : propertyPaneSlice.name === propertyPaneViewModel.Lu ? position.width = intValue : propertyPaneSlice.name === propertyPaneViewModel.oU && (position.height = intValue);
                propertySliceSaveServices.layoutAuthoring ? propertySliceSaveServices.layoutAuthoring.moveCanvasItemFromContract(selectedItem, position) : debug.fF.assertFail("layoutAuthoring should be provided for saving General slice");
            }
        }
        function ensureQueryOptions(singleVisual) {
            return singleVisual.queryOptions || (singleVisual.queryOptions = {}), singleVisual.queryOptions;
        }
        function getTooltipSections(explorationNavigation, excludeCurrentSection) {
            void 0 === excludeCurrentSection && (excludeCurrentSection = !0);
            var currentSection = explorationNavigation.getCurrentSection();
            return _.chain(explorationNavigation.getAllSections()).filter(function(section) {
                return !(!(1 & section.type) || excludeCurrentSection && section.name === currentSection.name);
            }).map(function(section) {
                return section.name;
            }).value();
        }
        var GroupSpecialGeneralPropertyNamesArray = [ propertyPaneViewModel.X, propertyPaneViewModel.Y, propertyPaneViewModel.Lu, propertyPaneViewModel.oU ];
        function getVisualWarnings(runningVisual) {
            if (runningVisual) return getCardWarnings(runningVisual && runningVisual.getWarnings());
        }
        function getCardWarnings(warnings) {
            var visualWarnings = warnings && warnings.visualObjectWarnings;
            if (visualWarnings) {
                var cardWarnings = _.reduce(visualWarnings, function(warnings, currentWarnings, objectName) {
                    var firstObjectWarning = _.first(currentWarnings), firstWarning = firstObjectWarning && _.first(firstObjectWarning.warnings);
                    return firstWarning && (warnings[objectName] = firstWarning), warnings;
                }, {});
                return _.isEmpty(cardWarnings) ? void 0 : cardWarnings;
            }
        }
        var visualContainerGroup1 = __webpack_require__(18659), contracts_visualHeaderTooltip = __webpack_require__(28340), visualTooltipStyleUtils = __webpack_require__(42145), fontProperties = __webpack_require__(18664), visualBackgroundHelper = __webpack_require__(45545), visualBorderUtil = __webpack_require__(34021), horizontalPosition = __webpack_require__(92374), strokePattern = __webpack_require__(47316), CssConstants = __webpack_require__(79154), exploration_capabilities_service = __webpack_require__(48145), view_mode_state_service = __webpack_require__(77200), CanvasItemFormattingService = function() {
            function CanvasItemFormattingService(bookmarkService, conceptualSchemaProxy, dataSourcesService, displayNameService, explorationCapabilitiesService, explorationNavigationService, featureSwitchService, formattingSliceTransformerService, formFactorService, lazyScopedProvider, localizationService, runningVisualService, themeService, viewModeStateService, visualAuthoring, visualPluginOperationsService, visualPluginService, visualStylePresetService, visualLevelFormatStringHelperService, formattingObjectDefinitionsService) {
                this.bookmarkService = bookmarkService, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.dataSourcesService = dataSourcesService, this.displayNameService = displayNameService, 
                this.explorationCapabilitiesService = explorationCapabilitiesService, this.explorationNavigationService = explorationNavigationService, 
                this.featureSwitchService = featureSwitchService, this.formattingSliceTransformerService = formattingSliceTransformerService, 
                this.formFactorService = formFactorService, this.lazyScopedProvider = lazyScopedProvider, 
                this.localizationService = localizationService, this.runningVisualService = runningVisualService, 
                this.themeService = themeService, this.viewModeStateService = viewModeStateService, 
                this.visualAuthoring = visualAuthoring, this.visualPluginOperationsService = visualPluginOperationsService, 
                this.visualPluginService = visualPluginService, this.visualStylePresetService = visualStylePresetService, 
                this.visualLevelFormatStringHelperService = visualLevelFormatStringHelperService, 
                this.formattingObjectDefinitionsService = formattingObjectDefinitionsService;
            }
            return CanvasItemFormattingService.prototype.getCardBuildingOptions = function(container, featureSwitches) {
                var exploration = this.explorationNavigationService.getCurrentExploration(), explorationCapabilities = this.explorationCapabilitiesService.getCapabilities();
                if ((0, visualContainerGroup2.Vz)(container)) {
                    var descriptors = visualContainer2.XW, evaluatedObjects = container.config.singleVisual.evaluatedObjects, props = visualContainer2.fU, singleVisualConfig = container.config.singleVisual, visualType = singleVisualConfig.visualType, capabilities = this.visualPluginService.capabilities(singleVisualConfig.visualType), visualPluginOperationsService = this.visualPluginOperationsService, visualKind = {
                        isScriptVisual: this.visualPluginService.isScriptVisual(visualType),
                        isAnalysisVisual: visualPluginOperationsService.isAnalysisVisual(visualType),
                        isQueryVisual: visualPluginOperationsService.isQueryVisual(visualType),
                        isQnaVisual: visualPluginOperationsService.isQnaVisual(visualType)
                    }, visualStyle = this.themeService.getVisualStyle(exploration.themeCollection);
                    return {
                        allowConditionalFormatting: !(visualKind.isScriptVisual || visualKind.isAnalysisVisual || visualKind.isQnaVisual),
                        capabilities,
                        container,
                        descriptors,
                        exploration,
                        evaluatedObjects,
                        explorationCapabilities,
                        featureSwitches,
                        props,
                        visualKind,
                        visualStyle,
                        isQueryVisualWithoutData: (0, utils_visualContainerUtils.LR)(this.visualPluginService, this.visualPluginOperationsService, container)
                    };
                }
                return {
                    allowConditionalFormatting: !1,
                    container,
                    descriptors: descriptors = visualContainer2.XW,
                    exploration,
                    evaluatedObjects: evaluatedObjects = container.evaluatedObjects,
                    explorationCapabilities,
                    featureSwitches,
                    props: props = visualContainerGroup1.fU
                };
            }, CanvasItemFormattingService.prototype.getModelUnavailableInformation = function(container) {
                if (!container) return {
                    messageKey: "PropertyPane_Unavailable"
                };
                if ((0, visualContainerGroup2.q4)(container)) return {
                    messageKey: void 0
                };
                if ((0, utils_visualContainerUtils.LR)(this.visualPluginService, this.visualPluginOperationsService, container)) return {
                    messageKey: "Add_Data_To_Visual"
                };
                if ((0, formatting_utils.D1)(container)) return {
                    messageKey: "UnhideVisual"
                };
                var runningVisual = this.runningVisualService.getVisual(container);
                return null == (runningVisual && runningVisual.getAdapter()) ? {
                    messageKey: "PropertyPane_VisualErrorMessage"
                } : runningVisual.getHasPendingChanges() ? {
                    messageKey: "Formatting_Pane_Disabled_Paused"
                } : {
                    messageKey: "PropertyPane_Unavailable"
                };
            }, CanvasItemFormattingService.prototype.getFormattingModel = function(container) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var featureSwitches, cardBuildingOptions, isVisualContainer, isQueryVisualWithoutData, modelBuilder, _a, _b, _c, _d, _e, _f, runningVisual;
                    return (0, tslib_es6.__generator)(this, function(_g) {
                        switch (_g.label) {
                          case 0:
                            return container ? [ 4, this.featureSwitchService.getFeatureSwitches() ] : [ 2, {
                                cards: []
                            } ];

                          case 1:
                            if (featureSwitches = _g.sent(), cardBuildingOptions = this.getCardBuildingOptions(container, featureSwitches), 
                            isVisualContainer = (0, visualContainerGroup2.Vz)(container), (0, visualContainerGroup2.Vz)(container)) {
                                if ((isQueryVisualWithoutData = cardBuildingOptions.isQueryVisualWithoutData) && !featureSwitches.onObject || (0, 
                                formatting_utils.D1)(container)) return [ 2, {
                                    cards: []
                                } ];
                                if (null == ((runningVisual = this.runningVisualService.getVisual(container)) && runningVisual.getAdapter()) && !isQueryVisualWithoutData || runningVisual && runningVisual.getHasPendingChanges() || runningVisual && runningVisual.getErrorInfo()) return [ 2, {
                                    cards: []
                                } ];
                            }
                            return _a = build_control_util.Nq.bind, (_b = !featureSwitches.onObject) ? [ 4, this.getPropertiesCard(cardBuildingOptions) ] : [ 3, 3 ];

                          case 2:
                            _b = _g.sent(), _g.label = 3;

                          case 3:
                            return _c = [ void 0, _b ], (_d = !featureSwitches.onObject && isVisualContainer) ? [ 4, this.getTitleCard(cardBuildingOptions, featureSwitches) ] : [ 3, 5 ];

                          case 4:
                            _d = _g.sent(), _g.label = 5;

                          case 5:
                            return _c = _c.concat([ _d, !featureSwitches.onObject && this.getEffectsCard(cardBuildingOptions) ]), 
                            (_e = featureSwitches.visualLevelFormatStringConsumption && featureSwitches.visualLevelFormatStringAuthoring && featureSwitches.visualCalculationsAuthoring) ? [ 4, this.getVisualLevelFormattingCard(cardBuildingOptions) ] : [ 3, 7 ];

                          case 6:
                            _e = _g.sent(), _g.label = 7;

                          case 7:
                            return _c = _c.concat([ _e, this.getHeaderIconsCard(cardBuildingOptions), this.getTooltipsCard(cardBuildingOptions), this.getAltTextCard(cardBuildingOptions) ]), 
                            (_f = featureSwitches.onObject) ? [ 4, this.getAdvancedOptionsCard(cardBuildingOptions) ] : [ 3, 9 ];

                          case 8:
                            _f = _g.sent(), _g.label = 9;

                          case 9:
                            return modelBuilder = new (_a.apply(build_control_util.Nq, _c.concat([ _f ]))), 
                            isVisualContainer && (runningVisual = this.runningVisualService.getVisual(container), 
                            modelBuilder.withWarnings(getVisualWarnings(runningVisual))), [ 2, modelBuilder.build() ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.getObjectDefinitions = function(container, useObjectsOverride) {
                if (container) return (0, visualContainerGroup2.Vz)(container) ? function(objectDefinitions, selectedItem) {
                    var _a, _b;
                    return (0, visualContainerUtils.jt)([ selectedItem ]) || (0, visualContainerUtils.Wu)([ selectedItem ]) ? (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, null != objectDefinitions ? objectDefinitions : {}), ((_a = {}).visualLevelFormat = [ {
                        properties: (_b = {}, _b.customFormatString = {}, _b.visualFieldDataType = {}, _b)
                    } ], _a)) : objectDefinitions;
                }(useObjectsOverride && this.formattingObjectDefinitionsService ? this.formattingObjectDefinitionsService.getVcObjectDefinitions(container) : container.config.singleVisual.vcObjects, container) : container.objects;
            }, CanvasItemFormattingService.prototype.getObjectDescriptors = function(container) {
                return (0, visualContainerGroup2.Vz)(container) ? visualContainer2.XW : visualContainerGroup1.C7;
            }, CanvasItemFormattingService.prototype.getRevertToDefaultMetadata = function(container) {
                return {
                    formattingSettingsString: "Formatting",
                    itemTypeDisplayName: (0, formatting_utils.um)(container, this.featureSwitchService)
                };
            }, CanvasItemFormattingService.prototype.saveProperties = function(changes, saveServices, container, parentActivity) {
                var _this = this, currentCanvasLayout = this.formFactorService.getCurrentLayout();
                if ((0, visualContainerGroup2.Vz)(container)) {
                    if (this.featureSwitchService.featureSwitches.onObject) {
                        var runningVisual = this.runningVisualService.getVisual(container);
                        debug.fF.assert(function() {
                            return _.every(changes, function(change) {
                                return null != change.visualUpdateSource;
                            });
                        }, "All changes should have a visual update source");
                        var visualObjectChanges = [], changesByVisualUpdateSource = _.groupBy(changes, function(change) {
                            return change.visualUpdateSource;
                        });
                        for (var visualUpdateSource in changesByVisualUpdateSource) {
                            var propertySaveObjects = changesByVisualUpdateSource[visualUpdateSource].map(function(change) {
                                return (0, formatting_utils.H8)(change);
                            });
                            visualObjectChanges.push.apply(visualObjectChanges, runningVisual.onDataViewObjectChanged(propertySaveObjects, +visualUpdateSource, !1));
                        }
                        debug.fF.assertNonEmpty(visualObjectChanges, "There should be at least one visual object change"), 
                        visualObjectChanges.map(function(visualObjectChange) {
                            return (0, formatting_utils.nH)(container, visualObjectChange);
                        }).forEach(function(formattingSliceSaveObject) {
                            return _this.saveVisualContainerProperties(formattingSliceSaveObject.objectName, saveServices, container, formattingSliceSaveObject.propertySlice, currentCanvasLayout);
                        });
                    } else changes.forEach(function(change) {
                        _this.saveVisualContainerProperties(change.objectName, saveServices, container, change.propertySlice, currentCanvasLayout);
                    });
                    saveServices.visualAuthoring.raiseVisualContainerChanged(container, {
                        parentContextActivity: parentActivity
                    });
                } else changes.forEach(function(change) {
                    _this.saveVisualContainerGroupProperties(change.objectName, saveServices, container, change.propertySlice, currentCanvasLayout);
                }), saveServices.visualAuthoring.raiseVisualContainerGroupChanged(container);
            }, CanvasItemFormattingService.prototype.saveVisualContainerProperties = function(objectName, saveServices, visualContainer, propertySlice, currentCanvasLayout) {
                !function(propertyPaneCardName, propertyPaneSlice, selectedItem, propertySliceSaveServices, currentCanvasLayout, visualLevelFormatStringHelperService) {
                    if ((0, visualContainerGroup2.Vz)(selectedItem)) {
                        var selectedVisualConfig = selectedItem.config.singleVisual;
                        propertySliceSaveServices.telemetryService && function(cardName, slice, visualType, telemetryService) {
                            var sliceName = slice.name;
                            if (cardName !== propertyPaneViewModel.LQ || sliceName !== propertyPaneViewModel.f4 && sliceName !== propertyPaneViewModel.Zp) if (cardName === propertyPaneViewModel.yD) {
                                var valueToLog = void 0;
                                "type" === sliceName ? valueToLog = "" + slice.value : "section" === sliceName && (valueToLog = slice.value === visualContainer1.pJ ? visualContainer1.pJ : "custom"), 
                                telemetryService.logEvent(events.Lo, {
                                    objectName: cardName,
                                    propertyName: sliceName,
                                    newValue: valueToLog,
                                    visualType
                                });
                            } else "visualLevelFormat" === cardName && "customFormatString" === sliceName && telemetryService.logEvent(events.Lo, {
                                objectName: cardName,
                                propertyName: sliceName,
                                newValue: "Custom",
                                visualType
                            }); else telemetryService.logEvent(events.Lo, {
                                objectName: cardName,
                                propertyName: sliceName,
                                newValue: slice.value,
                                visualType
                            });
                        }(propertyPaneCardName, propertyPaneSlice, selectedVisualConfig.visualType, propertySliceSaveServices.telemetryService), 
                        propertyPaneCardName === propertyPaneViewModel.H && function(selectedVisualConfig, propertySliceSaveServices) {
                            var _a, visualStylePresetService = propertySliceSaveServices.visualStylePresetService, themeService = propertySliceSaveServices.themeService;
                            if (visualStylePresetService && themeService) {
                                var stylePresetObject = null === (_a = selectedVisualConfig.evaluatedObjects) || void 0 === _a ? void 0 : _a.stylePreset, stylePreset = visualStylePresetService.getStylePreset(selectedVisualConfig.visualType, stylePresetObject && stylePresetObject.name);
                                if (stylePreset) {
                                    var theme = themeService.getVisualStyle({}), styleObjects = stylePreset.evaluate(theme);
                                    (0, dataViewObjectDefinition1.Gc)(selectedVisualConfig.objects, styleObjects), (0, 
                                    dataViewObjectDefinition1.Gc)(selectedVisualConfig.vcObjects, styleObjects);
                                }
                            }
                        }(selectedVisualConfig, propertySliceSaveServices), propertyPaneCardName === propertyPaneViewModel.TY && function(selectedVisualConfig) {
                            if (selectedVisualConfig.evaluatedObjects) {
                                var dropShadowObject = selectedVisualConfig.evaluatedObjects.dropShadow;
                                if (dropShadowObject && dropShadowObject.preset && dropShadowObject.preset !== visualContainer2.$g) {
                                    var presetSettings = (0, visualDropShadowUtil.X2)(dropShadowObject.preset, dropShadowObject.position);
                                    if (presetSettings) {
                                        var angle = (0, sqExpr.cA)(presetSettings.angle), shadowDistance = (0, sqExpr.cA)(presetSettings.shadowDistance), shadowBlur = (0, 
                                        sqExpr.cA)(presetSettings.shadowBlur), shadowSpread = (0, sqExpr.cA)(presetSettings.shadowSpread), transparency = (0, 
                                        sqExpr.cA)(presetSettings.transparency);
                                        (0, dataViewObjectDefinition1.sO)(selectedVisualConfig.vcObjects, {
                                            objectName: propertyPaneViewModel.TY,
                                            propertyName: "angle"
                                        }, null, angle), (0, dataViewObjectDefinition1.sO)(selectedVisualConfig.vcObjects, {
                                            objectName: propertyPaneViewModel.TY,
                                            propertyName: "shadowDistance"
                                        }, null, shadowDistance), (0, dataViewObjectDefinition1.sO)(selectedVisualConfig.vcObjects, {
                                            objectName: propertyPaneViewModel.TY,
                                            propertyName: "shadowBlur"
                                        }, null, shadowBlur), (0, dataViewObjectDefinition1.sO)(selectedVisualConfig.vcObjects, {
                                            objectName: propertyPaneViewModel.TY,
                                            propertyName: "shadowSpread"
                                        }, null, shadowSpread), (0, dataViewObjectDefinition1.sO)(selectedVisualConfig.vcObjects, {
                                            objectName: propertyPaneViewModel.TY,
                                            propertyName: "transparency"
                                        }, null, transparency);
                                    }
                                }
                            }
                        }(selectedVisualConfig), "visualLevelFormat" === propertyPaneCardName ? visualLevelFormatStringHelperService.saveSlice(propertyPaneCardName, propertyPaneSlice, selectedItem) : propertyPaneCardName === propertyPaneViewModel.LQ && function(propertyPaneSlice) {
                            return _.includes(SpecialGeneralPropertyNamesArray, propertyPaneSlice.name);
                        }(propertyPaneSlice) ? function(propertyPaneSlice, selectedVisual, propertySliceSaveServices, currentCanvasLayout) {
                            var singleVisual = selectedVisual.config.singleVisual;
                            propertyPaneSlice.name === propertyPaneViewModel.f4 ? ensureQueryOptions(singleVisual).allowBinnedLineSample = !!propertyPaneSlice.value : propertyPaneSlice.name === propertyPaneViewModel.Zp ? ensureQueryOptions(singleVisual).allowOverlappingPointsSample = !!propertyPaneSlice.value : saveGeneralPositionProperty(propertyPaneSlice, selectedVisual, propertySliceSaveServices, currentCanvasLayout);
                        }(propertyPaneSlice, selectedItem, propertySliceSaveServices, currentCanvasLayout) : (selectedVisualConfig.vcObjects = selectedVisualConfig.vcObjects || {}, 
                        (0, visual_capabilities_slice_factory_helper.yr)(propertyPaneCardName, propertyPaneSlice, selectedVisualConfig.vcObjects, propertySliceSaveServices), 
                        selectedVisualConfig.autoSelectVisualType = void 0);
                    }
                }(objectName, propertySlice, visualContainer, saveServices, currentCanvasLayout, this.visualLevelFormatStringHelperService);
            }, CanvasItemFormattingService.prototype.saveVisualContainerGroupProperties = function(objectName, saveServices, visualContainerGroup, propertySlice, currentCanvasLayout) {
                !function(propertyPaneCardName, propertyPaneSlice, selectedItem, propertySliceSaveServices, currentCanvasLayout) {
                    (0, visualContainerGroup2.q4)(selectedItem) && (propertyPaneCardName === propertyPaneViewModel.LQ && function(propertyPaneSlice) {
                        return _.includes(GroupSpecialGeneralPropertyNamesArray, propertyPaneSlice.name);
                    }(propertyPaneSlice) ? saveGeneralPositionProperty(propertyPaneSlice, selectedItem, propertySliceSaveServices, currentCanvasLayout) : (selectedItem.objects = selectedItem.objects || {}, 
                    (0, visual_capabilities_slice_factory_helper.yr)(propertyPaneCardName, propertyPaneSlice, selectedItem.objects, propertySliceSaveServices)));
                }(objectName, propertySlice, visualContainerGroup, saveServices, currentCanvasLayout);
            }, CanvasItemFormattingService.prototype.revertVisualSlicesToDefinitions = function(revertToDefaultDescriptorsWithCanvasItems, parentContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var changedVisuals, descriptorsPerCanvasItem, _i, descriptorsPerCanvasItem_1, descriptorPerCanvasItem, canvasItem, descriptors, definitions, singleVisual;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            changedVisuals = [], descriptorsPerCanvasItem = (0, formatting_utils.Wx)(revertToDefaultDescriptorsWithCanvasItems), 
                            _i = 0, descriptorsPerCanvasItem_1 = descriptorsPerCanvasItem, _a.label = 1;

                          case 1:
                            return _i < descriptorsPerCanvasItem_1.length ? (changedVisuals.push(canvasItem = (descriptorPerCanvasItem = descriptorsPerCanvasItem_1[_i]).canvasItem), 
                            descriptors = descriptorPerCanvasItem.descriptors, definitions = void 0, (0, visualContainerGroup2.Vz)(canvasItem) ? ((definitions = (singleVisual = canvasItem.config.singleVisual).vcObjects) || (singleVisual.vcObjects = definitions = {}), 
                            [ 4, this.resetVisualProperty(canvasItem, descriptors) ]) : [ 3, 3 ]) : [ 3, 6 ];

                          case 2:
                            return _a.sent(), [ 3, 4 ];

                          case 3:
                            (definitions = canvasItem.objects) || (canvasItem.objects = definitions = {}), _a.label = 4;

                          case 4:
                            (0, formatting_utils.Aw)(definitions, descriptors), _a.label = 5;

                          case 5:
                            return _i++, [ 3, 1 ];

                          case 6:
                            return this.visualAuthoring.raiseCanvasItemsChanged(changedVisuals, {
                                parentContextActivity
                            }), [ 2 ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.resetVisualProperty = function(visualContainer, revertToDefaultDescriptor) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _i, revertToDefaultDescriptor_1, descriptor;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            _i = 0, revertToDefaultDescriptor_1 = revertToDefaultDescriptor, _a.label = 1;

                          case 1:
                            return _i < revertToDefaultDescriptor_1.length ? "visualLevelFormat" !== (descriptor = revertToDefaultDescriptor_1[_i]).objectName ? [ 3, 3 ] : [ 4, this.visualLevelFormatStringHelperService.resetProperty(visualContainer, descriptor.propertyName) ] : [ 3, 4 ];

                          case 2:
                            _a.sent(), _a.label = 3;

                          case 3:
                            return _i++, [ 3, 1 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.resolvePlaceholder = function(placeholder, container) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var resolvedPlaceholder_1, resolvedPlaceholder;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            if (!(0, build_control_util.Xo)(placeholder)) return [ 3, 9 ];
                            switch (placeholder.name) {
                              case "actions":
                                return [ 3, 1 ];

                              case "title":
                                return [ 3, 3 ];

                              case "sizeAndStyle":
                                return [ 3, 5 ];
                            }
                            return [ 3, 7 ];

                          case 1:
                            return [ 4, this.resolveActionCardPlaceholder(container, placeholder.suppressDefaultValue) ];

                          case 2:
                            return resolvedPlaceholder_1 = _c.sent(), [ 3, 8 ];

                          case 3:
                            return [ 4, this.resolveTitleCardPlaceholder(container) ];

                          case 4:
                            return resolvedPlaceholder_1 = _c.sent(), [ 3, 8 ];

                          case 5:
                            return [ 4, this.resolveVisualSizeAndStyleCardPlaceholder(container) ];

                          case 6:
                            return resolvedPlaceholder_1 = _c.sent(), [ 3, 8 ];

                          case 7:
                            debug.fF.assertNever(placeholder.name), _c.label = 8;

                          case 8:
                            return debug.fF.assert(function() {
                                return !!resolvedPlaceholder_1 || placeholder.suppressDefaultValue;
                            }, "Expected either a placeholder or default value being suppressed"), [ 2, resolvedPlaceholder_1 ];

                          case 9:
                            return (0, build_control_util.G8)(placeholder) ? (debug.fF.assertNever(placeholder.name), 
                            [ 3, 15 ]) : [ 3, 10 ];

                          case 10:
                            return (0, build_control_util.Kw)(placeholder) ? (resolvedPlaceholder = void 0, 
                            "stylePreset" === placeholder.name ? [ 3, 11 ] : [ 3, 13 ]) : [ 3, 15 ];

                          case 11:
                            return [ 4, this.resolveStylePresetSlicePlaceholder(container) ];

                          case 12:
                            return resolvedPlaceholder = _c.sent(), [ 3, 14 ];

                          case 13:
                            debug.fF.assertNever(placeholder.name), _c.label = 14;

                          case 14:
                            return [ 2, resolvedPlaceholder ];

                          case 15:
                            return debug.fF.assertFail("Unexpected host placeholder"), [ 2 ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.resolveActionCardPlaceholder = function(container, suppressDefaultValue) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var featureSwitches, evaluatedObjects, visualLinkProps, singleVisualConfig, visualType, defaultType, visualLink, selectedType, validTypes, drillthroughService, _c, actionCard, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return (0, visualContainerGroup2.q4)(container) ? [ 2, this.resolveActionCardPlaceholderDefault(suppressDefaultValue) ] : [ 4, this.featureSwitchService.getFeatureSwitches() ];

                          case 1:
                            return featureSwitches = _d.sent(), evaluatedObjects = container.config.singleVisual.evaluatedObjects, 
                            visualLinkProps = visualContainer2.fU.visualLink, visualType = (singleVisualConfig = container.config.singleVisual).visualType, 
                            this.visualPluginService.capabilities(singleVisualConfig.visualType).supportsVisualLink ? (defaultType = visualContainer2.eJ, 
                            visualLink = null !== (_a = null == evaluatedObjects ? void 0 : evaluatedObjects.visualLink) && void 0 !== _a ? _a : {
                                show: !1,
                                type: defaultType
                            }, selectedType = null !== (_b = visualLink.type) && void 0 !== _b ? _b : defaultType, 
                            validTypes = visualContainer2.Dy.members().map(function(member) {
                                return member.value;
                            }), featureSwitches.applyAllSlicersButton || (selectedType !== visualContainer2.cy && _.remove(validTypes, function(type) {
                                return type === visualContainer2.cy;
                            }), selectedType !== visualContainer2.WM && _.remove(validTypes, function(type) {
                                return type === visualContainer2.WM;
                            })), selectedType !== visualContainer2.d8 && selectedType !== visualContainer2.Ol && (featureSwitches.drillthroughButtonGA || visualType !== plugins.L.basicShape.name && visualType !== plugins.L.image.name || _.remove(validTypes, function(type) {
                                return type === visualContainer2.d8;
                            }), featureSwitches.navAndDrillthroughActionTypes || visualType !== plugins.L.actionButton.name || _.remove(validTypes, function(type) {
                                return type === visualContainer2.d8 || type === visualContainer2.Ol;
                            })), visualType !== plugins.L.basicShape.name && visualType !== plugins.L.image.name || _.remove(validTypes, function(type) {
                                return type === visualContainer2.Ol;
                            }), (_c = visualLink.type === visualContainer2.Ol) ? [ 4, this.lazyScopedProvider.get("drillthrough") ] : [ 3, 3 ]) : [ 2, this.resolveActionCardPlaceholderDefault(suppressDefaultValue) ];

                          case 2:
                            _c = _d.sent(), _d.label = 3;

                          case 3:
                            return drillthroughService = _c, actionCard = new build_control_util.CQ(new build_control_util.lg("action"), "Visual_VisualLink", [ visualLinkProps.show, visualLinkProps.type, visualLinkProps.bookmark, visualLinkProps.navigationSection, visualLinkProps.drillthroughSection, visualLinkProps.webUrl, visualLinkProps.suppressDefaultTooltip, visualLinkProps.showDefaultTooltip, visualLinkProps.tooltip, visualLinkProps.enabledTooltip, visualLinkProps.disabledTooltip ], function(key) {
                                return _this.localizationService.get(key);
                            }).addTopLevelToggle("show", function() {
                                return new build_control_util.bd({
                                    descriptor: visualLinkProps.show,
                                    value: !!visualLink.show
                                }).build();
                            }).addGroup("action", function(groupBuilder) {
                                var _a, _b;
                                groupBuilder.withDisplayName("Visual_VisualLink").addSimpleSlice("type", new build_control_util.uY({
                                    descriptor: visualLinkProps.type,
                                    value: selectedType,
                                    filterValues: validTypes
                                }).build());
                                var bookmarkFilterValues, bookmarkMergeValues = [ {
                                    displayName: function(localization) {
                                        return localization.get("None");
                                    },
                                    value: visualContainer2.Qi
                                } ], enableBookmarkSettings = visualLink.type === visualContainer2.rp, selectedBookmark = visualContainer2.Qi;
                                if (enableBookmarkSettings) {
                                    var bookmarks = _this.bookmarkService.getAllBookmarks(), bookmarkValues = _.map(bookmarks, function(bookmark) {
                                        return bookmark.name;
                                    });
                                    bookmarkFilterValues = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], _.map(bookmarkMergeValues, function(mergeValue) {
                                        return mergeValue.value;
                                    }), !0), bookmarkValues || [], !0);
                                    var bookmarkProperty = visualLink.bookmark;
                                    bookmarkProperty && -1 !== bookmarkFilterValues.indexOf(bookmarkProperty) && (selectedBookmark = bookmarkProperty);
                                }
                                groupBuilder.addSimpleSlice("bookmark", new build_control_util.uY({
                                    descriptor: visualLinkProps.bookmark,
                                    value: selectedBookmark,
                                    mergeValues: bookmarkMergeValues,
                                    filterValues: bookmarkFilterValues
                                }).build(), function(customizer) {
                                    return customizer.withDisabled(!enableBookmarkSettings);
                                });
                                var destinationNone = {
                                    displayName: function(localization) {
                                        return localization.get("None");
                                    },
                                    value: visualContainer2.z1
                                };
                                if (visualLink.type === visualContainer2.d8 || visualLink.type === visualContainer2.Ol) {
                                    var mergeValues = [ destinationNone ], explorationNavigationService = _this.explorationNavigationService, sections = explorationNavigationService.getAllSections(), currentSection_1 = explorationNavigationService.getCurrentSection();
                                    if (visualLink.type === visualContainer2.d8) {
                                        var sectionValues = _.map(sections, function(section) {
                                            return section.name;
                                        }), filterValues = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], _.map(mergeValues, function(mergeValue) {
                                            return mergeValue.value;
                                        }), !0), _.filter(sectionValues, function(section) {
                                            return section !== currentSection_1.name;
                                        }), !0), selectedNavigationSection = null !== (_a = visualLink.navigationSection) && void 0 !== _a ? _a : destinationNone.value;
                                        groupBuilder.addSimpleSlice("pageNavigationDestination", new build_control_util.uY({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualLinkProps.navigationSection), {
                                                instanceKind: featureSwitches.drillthroughButtonGA ? 3 : 1
                                            }),
                                            value: selectedNavigationSection,
                                            filterValues,
                                            mergeValues
                                        }).build());
                                    } else if (visualLink.type === visualContainer2.Ol) {
                                        var drillthroughSections = _.filter(sections, function(section) {
                                            return drillthroughService && !_.isEmpty(drillthroughService.getDrillthroughParameters(section.name));
                                        }), drillthroughValues = _.map(drillthroughSections, function(drillthroughSection) {
                                            return drillthroughSection.name;
                                        }), selectedDrillthroughSection = (filterValues = (0, tslib_es6.__spreadArray)((0, 
                                        tslib_es6.__spreadArray)([], _.map(mergeValues, function(mergeValue) {
                                            return mergeValue.value;
                                        }), !0), _.filter(drillthroughValues, function(drillthroughValue) {
                                            return drillthroughValue !== currentSection_1.name;
                                        }), !0), null !== (_b = visualLink.drillthroughSection) && void 0 !== _b ? _b : destinationNone.value);
                                        groupBuilder.addSimpleSlice("drillthroughDestination", new build_control_util.uY({
                                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualLinkProps.drillthroughSection), {
                                                instanceKind: featureSwitches.drillthroughButtonGA ? 3 : 1
                                            }),
                                            value: selectedDrillthroughSection,
                                            filterValues,
                                            mergeValues
                                        }).build());
                                    }
                                } else groupBuilder.addSimpleSlice("defaultDestination", new build_control_util.uY({
                                    descriptor: visualLinkProps.drillthroughSection,
                                    value: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, destinationNone), {
                                        displayName: _this.localizationService.get("None")
                                    }),
                                    items: [ destinationNone ]
                                }).build(), function(customizer) {
                                    return customizer.withDisabled(!0);
                                });
                                groupBuilder.addSimpleSlice("webUrl", new build_control_util.fq({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualLinkProps.webUrl), {
                                        instanceKind: 3
                                    }),
                                    value: visualLink.webUrl,
                                    placeholder: ""
                                }).build(), function(customizer) {
                                    return customizer.withDisabled(visualLink.type !== visualContainer2.ZS);
                                });
                            }).addGroup("tooltip", function(groupBuilder) {
                                var _a;
                                groupBuilder.withDisplayName("Tooltip");
                                var showDefaultTooltip = null === (_a = visualLink.showDefaultTooltip) || void 0 === _a || _a, disableDefaultTooltip = featureSwitches.showDefaultTooltip ? !showDefaultTooltip : !!visualLink.suppressDefaultTooltip;
                                featureSwitches.suppressDefaultTooltip && (featureSwitches.showDefaultTooltip ? groupBuilder.addTopLevelToggle("showDefaultTooltip", function() {
                                    return new build_control_util.bd({
                                        descriptor: visualLinkProps.showDefaultTooltip,
                                        value: showDefaultTooltip
                                    }).build();
                                }) : groupBuilder.addSimpleSlice("suppressDefaultTooltip", new build_control_util.bd({
                                    descriptor: visualLinkProps.suppressDefaultTooltip,
                                    value: !!visualLink.suppressDefaultTooltip
                                }).build())), visualLink.type !== visualContainer2.Ol ? groupBuilder.addSimpleSlice("text", new build_control_util.fq({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualLinkProps.tooltip), {
                                        instanceKind: 3
                                    }),
                                    value: visualLink.tooltip,
                                    placeholder: visualLink.tooltipPlaceholderText
                                }).build(), function(customizer) {
                                    return customizer.withCustomDisplayName("Text").withDisabled(disableDefaultTooltip);
                                }) : groupBuilder.addSimpleSlice("enabledText", new build_control_util.fq({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualLinkProps.enabledTooltip), {
                                        instanceKind: featureSwitches.drillthroughButtonGA ? 3 : 1
                                    }),
                                    value: visualLink.enabledTooltip,
                                    placeholder: ""
                                }).build(), function(customizer) {
                                    return customizer.withCustomDisplayName("Enabled_Text").withDisabled(disableDefaultTooltip);
                                }).addSimpleSlice("disabledText", new build_control_util.fq({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualLinkProps.disabledTooltip), {
                                        instanceKind: featureSwitches.drillthroughButtonGA ? 3 : 1
                                    }),
                                    value: visualLink.disabledTooltip,
                                    placeholder: ""
                                }).build(), function(customizer) {
                                    return customizer.withCustomDisplayName("Disabled_Text").withDisabled(disableDefaultTooltip);
                                });
                            }).build(), [ 2, {
                                item: actionCard,
                                objectDescriptors: this.getObjectDescriptors(container),
                                revertToDefaultDescriptors: actionCard.revertToDefaultDescriptors
                            } ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.resolveTitleCardPlaceholder = function(container) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var featureSwitches, cardBuildingOptions, titleCard;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, visualContainerGroup2.q4)(container) ? [ 2 ] : [ 4, this.featureSwitchService.getFeatureSwitches() ];

                          case 1:
                            return featureSwitches = _a.sent(), cardBuildingOptions = this.getCardBuildingOptions(container, featureSwitches), 
                            debug.fF.assert(function() {
                                return !1 === cardBuildingOptions.isQueryVisualWithoutData;
                            }, "Expected query visual to have data"), [ 4, this.getTitleCard(cardBuildingOptions, featureSwitches) ];

                          case 2:
                            return [ 2, {
                                item: titleCard = _a.sent(),
                                objectDescriptors: this.getObjectDescriptors(container),
                                revertToDefaultDescriptors: titleCard.revertToDefaultDescriptors
                            } ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.resolveVisualSizeAndStyleCardPlaceholder = function(container) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var featureSwitches, cardBuildingOptions, visualSizeAndStyleCard;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.featureSwitchService.getFeatureSwitches() ];

                          case 1:
                            return featureSwitches = _a.sent(), cardBuildingOptions = this.getCardBuildingOptions(container, featureSwitches), 
                            [ 4, this.getVisualSizeAndStyleCard(cardBuildingOptions) ];

                          case 2:
                            return [ 2, {
                                item: visualSizeAndStyleCard = _a.sent(),
                                objectDescriptors: this.getObjectDescriptors(container),
                                revertToDefaultDescriptors: visualSizeAndStyleCard.revertToDefaultDescriptors
                            } ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.resolveStylePresetSlicePlaceholder = function(container) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var singleVisual, evaluatedObjects, stylePreset, currentStylePreset, stylePresetProps, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return (0, visualContainerGroup2.Vz)(container) && (currentStylePreset = this.visualStylePresetService.getStylePreset((singleVisual = container.config.singleVisual).visualType, (stylePreset = (evaluatedObjects = singleVisual.evaluatedObjects) && evaluatedObjects.stylePreset) && stylePreset.name)) ? (stylePresetProps = visualContainer2.fU.stylePreset, 
                        [ 2, {
                            item: new build_control_util.vi({
                                uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("stylePreset"), "style"), "layout"),
                                control: new build_control_util.uY({
                                    descriptor: stylePresetProps.name,
                                    value: currentStylePreset.name
                                }).build(),
                                localize: function(key) {
                                    return _this.localizationService.get(key);
                                }
                            }).build(),
                            objectDescriptors: this.getObjectDescriptors(container),
                            revertToDefaultDescriptors: [ stylePresetProps.name ]
                        } ]) : [ 2 ];
                    });
                });
            }, CanvasItemFormattingService.prototype.resolveActionCardPlaceholderDefault = function(suppressDefaultValue) {
                var _a, _b, _this = this;
                if (!suppressDefaultValue) {
                    var defaultIdentifier = {
                        objectName: "defaultVisualLinkObject",
                        propertyName: "defaultVisualLinkProperty"
                    }, defaultObjectDescriptors = ((_a = {})[defaultIdentifier.objectName] = {
                        properties: (_b = {}, _b[defaultIdentifier.propertyName] = {
                            type: {
                                bool: !0
                            }
                        }, _b)
                    }, _a);
                    return {
                        item: new build_control_util.CQ(new build_control_util.lg("action"), "Visual_VisualLink", [ defaultIdentifier ], function(key) {
                            return _this.localizationService.get(key);
                        }).addTopLevelToggle("show", function() {
                            return new build_control_util.bd({
                                descriptor: defaultIdentifier,
                                value: !1
                            }).build();
                        }).withDisabled(!0, "Visual_VisualLink_DisabledReason").build(),
                        objectDescriptors: defaultObjectDescriptors,
                        revertToDefaultDescriptors: [ defaultIdentifier ]
                    };
                }
            }, CanvasItemFormattingService.prototype.addAdvancedOptionsGroup = function(options, cardBuilder, groupName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var container, evaluatedObjects, vcGeneralProps, visualContainerCardBuildingOptions_1, capabilities, visualContainerEvaluatedObjects_1, schema, schemaCapabilities, singleVisualConfig_1, highDensitySamplingEnabled_1, overlappingPointsSamplingEnabled_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return evaluatedObjects = options.evaluatedObjects, vcGeneralProps = visualContainer2.fU.general, 
                            (0, visualContainerGroup2.Vz)(container = options.container) ? (capabilities = (visualContainerCardBuildingOptions_1 = options).capabilities, 
                            visualContainerEvaluatedObjects_1 = evaluatedObjects, [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ]) : [ 3, 2 ];

                          case 1:
                            schema = _a.sent(), schemaCapabilities = schema.schema(void 0).capabilities, singleVisualConfig_1 = container.config.singleVisual, 
                            (highDensitySamplingEnabled_1 = schemaCapabilities.supportsBinnedLineSample) && (highDensitySamplingEnabled_1 = function(visualConfig, capabilities, schema, featureSwitches) {
                                if (!(null == visualConfig ? void 0 : visualConfig.query) || !capabilities || !capabilities.dataViewMappings) return !1;
                                var query = visualConfig.query, roleKindByQueryRef = (0, visualContainerUtils.i1)(query), mappingResult = (0, 
                                dataViewAnalysis.Lo)(query.projections, capabilities.dataViewMappings, roleKindByQueryRef, featureSwitches, capabilities.objects, visualConfig.objects, query.defn.select(), schema);
                                return _.some(mappingResult.supportedMappings, function(mapping) {
                                    var usingBinnedLineSampling = !1;
                                    return (0, dataViewMappingVisitor.oF)(mapping, {
                                        visitRole: function(role) {},
                                        visitReduction: function(reduction) {
                                            usingBinnedLineSampling = usingBinnedLineSampling || !!reduction.binnedLineSample;
                                        }
                                    }), usingBinnedLineSampling;
                                });
                            }(singleVisualConfig_1, capabilities, schema, options.featureSwitches)), (overlappingPointsSamplingEnabled_1 = schemaCapabilities.supportsOverlappingPointsSample) && (overlappingPointsSamplingEnabled_1 = function(capabilities) {
                                return !(!capabilities || !capabilities.dataViewMappings) && _.some(capabilities.dataViewMappings, function(mapping) {
                                    var usingOverlappingPointsSample = !1;
                                    return (0, dataViewMappingVisitor.oF)(mapping, {
                                        visitRole: function(role) {},
                                        visitReduction: function(reduction) {
                                            usingOverlappingPointsSample = usingOverlappingPointsSample || !!reduction.overlappingPointsSample;
                                        }
                                    }), usingOverlappingPointsSample;
                                });
                            }(capabilities)), cardBuilder.addGroup("advancedOptions", function(groupBuilder) {
                                var generalObjects = visualContainerEvaluatedObjects_1 && visualContainerEvaluatedObjects_1.general;
                                groupBuilder.withDisplayName(groupName).addSlicePlaceholder((0, build_control_util.Q)("responsive")).addSimpleSlice("keepLayerOrder", new build_control_util.bd({
                                    descriptor: vcGeneralProps.keepLayerOrder,
                                    value: !(!generalObjects || !generalObjects.keepLayerOrder)
                                }).build()), highDensitySamplingEnabled_1 ? groupBuilder.addSimpleSlice("highDensitySampling", new build_control_util.bd({
                                    descriptor: vcGeneralProps.allowBinnedLineSample,
                                    value: !(singleVisualConfig_1.queryOptions && !1 === singleVisualConfig_1.queryOptions.allowBinnedLineSample)
                                }).build(), function(builder) {
                                    visualContainerCardBuildingOptions_1.isQueryVisualWithoutData && builder.withDisabled(!0, "Add_Data_To_Format");
                                }) : overlappingPointsSamplingEnabled_1 && groupBuilder.addSimpleSlice("overlappingPointSampling", new build_control_util.bd({
                                    descriptor: vcGeneralProps.allowOverlappingPointsSample,
                                    value: !(!overlappingPointsSamplingEnabled_1 || singleVisualConfig_1.queryOptions && !1 === singleVisualConfig_1.queryOptions.allowOverlappingPointsSample)
                                }).build(), function(builder) {
                                    visualContainerCardBuildingOptions_1.isQueryVisualWithoutData && builder.withDisabled(!0, "Add_Data_To_Format");
                                }), visualContainerCardBuildingOptions_1.isQueryVisualWithoutData || groupBuilder.addSlicePlaceholder((0, 
                                build_control_util.Q)("dataVolume"));
                            }), _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.addSizeSlices = function(groupBuilder, options, sectionSize, containerPosition) {
                var evaluatedObjects = options.evaluatedObjects, props = options.props, generalProps = props.general, properties = {
                    x: containerPosition && containerPosition.x,
                    y: containerPosition && containerPosition.y,
                    width: containerPosition && containerPosition.width,
                    height: containerPosition && containerPosition.height
                };
                groupBuilder.addSimpleSlice("height", function() {
                    return new build_control_util.mu({
                        descriptor: generalProps.height,
                        value: properties.height,
                        options: {
                            minValue: {
                                type: 0,
                                value: PropertyPaneConsts.MinContainerHeight
                            },
                            maxValue: {
                                type: 1,
                                value: sectionSize.height - properties.y
                            },
                            required: {
                                type: 2
                            }
                        }
                    }).build();
                }).addSimpleSlice("width", function() {
                    return new build_control_util.mu({
                        descriptor: generalProps.width,
                        value: properties.width,
                        options: {
                            minValue: {
                                type: 0,
                                value: PropertyPaneConsts.MinContainerWidth
                            },
                            maxValue: {
                                type: 1,
                                value: sectionSize.width - properties.x
                            },
                            required: {
                                type: 2
                            }
                        }
                    }).build();
                }).addSimpleSlice("lockAspect", function() {
                    var lockAspectObject = evaluatedObjects && evaluatedObjects[props.lockAspect.show.objectName];
                    return new build_control_util.bd({
                        descriptor: props.lockAspect.show,
                        value: !(!lockAspectObject || !lockAspectObject.show)
                    }).build();
                }, function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("VisualContainer_Properties_LockAspect");
                });
            }, CanvasItemFormattingService.prototype.addPositionSlices = function(groupBuilder, options, sectionSize, containerPosition) {
                var generalProps = options.props.general, properties = {
                    x: containerPosition && containerPosition.x,
                    y: containerPosition && containerPosition.y,
                    width: containerPosition && containerPosition.width,
                    height: containerPosition && containerPosition.height
                };
                groupBuilder.addSimpleSlice("horizontal", function() {
                    return new build_control_util.mu({
                        descriptor: generalProps.x,
                        value: properties.x,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: sectionSize.width - properties.width
                            },
                            required: {
                                type: 2
                            }
                        }
                    }).build();
                }, function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("Slicer_Orientation_Horizontal");
                }).addSimpleSlice("vertical", function() {
                    return new build_control_util.mu({
                        descriptor: generalProps.y,
                        value: properties.y,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: sectionSize.height - properties.height
                            },
                            required: {
                                type: 2
                            }
                        }
                    }).build();
                }, function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("Slicer_Orientation_Vertical");
                });
            }, CanvasItemFormattingService.prototype.addPaddingSlice = function(groupBuilder, options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var evaluatedObjects, capabilities, container, paddingProps, visualTitle, suppressDefaultTitle, singleVisualConfig, schema, titleShown, paddingSettings, paddingOptions, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return container = (_a = options).container, paddingProps = _a.props.padding, suppressDefaultTitle = (capabilities = _a.capabilities).suppressDefaultTitle, 
                            !1 === (visualTitle = (null == (evaluatedObjects = _a.evaluatedObjects) ? void 0 : evaluatedObjects.title) || {}).show && null != visualTitle.text ? [ 3, 2 ] : (singleVisualConfig = container.config.singleVisual, 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ]);

                          case 1:
                            schema = _b.sent(), visualTitle = this.displayNameService.getVisualTitle(singleVisualConfig, schema, capabilities, visualTitle), 
                            _b.label = 2;

                          case 2:
                            return titleShown = !!visualTitle.text && (visualTitle.show || !(0, visualContainer1.xj)(visualTitle, suppressDefaultTitle)), 
                            paddingSettings = (0, visualContainerUtils.hp)(null == evaluatedObjects ? void 0 : evaluatedObjects.padding, capabilities, titleShown), 
                            paddingOptions = {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 20
                                },
                                unitSymbol: visualLocKeys.e_
                            }, groupBuilder.addCompositeSlice("padding", "Visual_Padding", (new build_control_util.uM).withTop({
                                descriptor: paddingProps.top,
                                value: paddingSettings.top,
                                options: paddingOptions
                            }).withBottom({
                                descriptor: paddingProps.bottom,
                                value: paddingSettings.bottom,
                                options: paddingOptions
                            }).withLeft({
                                descriptor: paddingProps.left,
                                value: paddingSettings.left,
                                options: paddingOptions
                            }).withRight({
                                descriptor: paddingProps.right,
                                value: paddingSettings.right,
                                options: paddingOptions
                            }).build(), function(builder) {
                                return builder.withSuppressDisplayName(!0);
                            }), [ 2 ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.addGeneralSizeGroups = function(options, cardBuilder) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var container, featureSwitches, currentLayout, currentPosition, absolutePosition, containerPosition, sectionSize, currentSection, isQueryVisualWithoutData_1, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return container = options.container, featureSwitches = options.featureSwitches, 
                        currentLayout = this.formFactorService.getCurrentLayout(), currentPosition = container.layouts.withId(currentLayout).position, 
                        absolutePosition = (0, visualContainerUtils.hP)(currentPosition, currentLayout, container.parentGroup), 
                        containerPosition = {
                            x: Math.floor(absolutePosition.x),
                            y: Math.floor(absolutePosition.y),
                            width: Math.floor(absolutePosition.width),
                            height: Math.floor(absolutePosition.height)
                        }, 1 === this.formFactorService.getCurrentLayout() ? sectionSize = {
                            height: ExploreUI_constants.aW,
                            width: ExploreUI_constants.Co
                        } : (currentSection = this.explorationNavigationService.getCurrentSection(), sectionSize = currentSection.size), 
                        options.featureSwitches.onObject ? cardBuilder.addGroup("sizeAndPosition", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Size_And_Position"), _this.addSizeSlices(groupBuilder, options, sectionSize, containerPosition), 
                            _this.addPositionSlices(groupBuilder, options, sectionSize, containerPosition);
                        }) : cardBuilder.addGroup("size", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_BubbleSize"), _this.addSizeSlices(groupBuilder, options, sectionSize, containerPosition);
                        }).addGroup("position", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Position"), _this.addPositionSlices(groupBuilder, options, sectionSize, containerPosition);
                        }), featureSwitches.vcPadding && (0, visualContainerGroup2.Vz)(container) && (isQueryVisualWithoutData_1 = options.isQueryVisualWithoutData, 
                        cardBuilder.addGroup("padding", function(groupBuilder) {
                            return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                return (0, tslib_es6.__generator)(this, function(_a) {
                                    switch (_a.label) {
                                      case 0:
                                        return groupBuilder.withDisplayName("Visual_Padding"), isQueryVisualWithoutData_1 ? [ 3, 2 ] : [ 4, this.addPaddingSlice(groupBuilder, options) ];

                                      case 1:
                                        return _a.sent(), [ 3, 3 ];

                                      case 2:
                                        groupBuilder.withDisabled(!0, "Add_Data_To_Format"), _a.label = 3;

                                      case 3:
                                        return [ 2 ];
                                    }
                                });
                            });
                        })), [ 2 ];
                    });
                });
            }, CanvasItemFormattingService.prototype.addGeneralStyleGroups = function(options, cardBuilder) {
                var _a, _this = this, allowConditionalFormatting = options.allowConditionalFormatting, container = options.container, evaluatedObjects = options.evaluatedObjects, backgroundProps = options.props.background, borderProps = visualContainer2.fU.border, shadowProps = visualContainer2.fU.dropShadow, localize = function(key) {
                    return _this.localizationService.get(key);
                };
                if (cardBuilder.addGroup("background", function(groupBuilder) {
                    var backgroundObject = evaluatedObjects && evaluatedObjects[backgroundProps.show.objectName];
                    groupBuilder.withDisplayName("Visual_Background"), (0, visualContainerGroup2.Vz)(container) && options.isQueryVisualWithoutData ? groupBuilder.withDisabled(!0, "Add_Data_To_Format") : groupBuilder.addTopLevelToggle("show", function() {
                        return new build_control_util.bd({
                            descriptor: backgroundProps.show,
                            value: backgroundObject && null != backgroundObject.show ? backgroundObject.show : (0, 
                            visualBackgroundHelper.kB)()
                        }).build();
                    }).addSimpleSlice("color", function() {
                        var _a, colordata = {
                            value: null === (_a = (backgroundObject && null != backgroundObject.color ? backgroundObject.color : (0, 
                            visualBackgroundHelper.WO)()).solid) || void 0 === _a ? void 0 : _a.color
                        };
                        return new build_control_util.BT({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, backgroundProps.color), {
                                instanceKind: allowConditionalFormatting && 3
                            }),
                            value: colordata
                        }).build();
                    }).addSimpleSlice("transparency", function() {
                        var transparency = backgroundObject && null != backgroundObject.transparency ? backgroundObject.transparency : (0, 
                        visualBackgroundHelper.x6)();
                        return build_control_util.JN.getTransparencySliderBuilder({
                            descriptor: backgroundProps.transparency,
                            value: transparency,
                            localize
                        }).build();
                    });
                }), (0, visualContainerGroup2.Vz)(container)) {
                    var visualContainerEvaluatedObjects_2 = (_a = options).evaluatedObjects, visualStyle_1 = _a.visualStyle, isQueryVisualWithoutData_2 = _a.isQueryVisualWithoutData;
                    cardBuilder.addGroup("visualBorder", function(groupBuilder) {
                        var _a, _b, visualBorder = visualContainerEvaluatedObjects_2 && visualContainerEvaluatedObjects_2.border || {}, defaultValues = (0, 
                        visualBorderUtil.O4)();
                        groupBuilder.withDisplayName("VisualBorder"), isQueryVisualWithoutData_2 ? groupBuilder.withDisabled(!0, "Add_Data_To_Format") : (groupBuilder.addTopLevelToggle("show", function() {
                            var _a;
                            return new build_control_util.bd({
                                descriptor: borderProps.show,
                                value: null !== (_a = visualBorder.show) && void 0 !== _a ? _a : defaultValues.show
                            }).build();
                        }).addSimpleSlice("color", function() {
                            var _a, fillValue = null !== (_a = visualBorder.color) && void 0 !== _a ? _a : defaultValues.color, value = fillValue && fillValue.solid && fillValue.solid.color;
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, borderProps.color), {
                                    instanceKind: allowConditionalFormatting && 3
                                }),
                                value: void 0 !== value ? {
                                    value
                                } : void 0
                            }).build();
                        }).addSimpleSlice("roundedCorners", new build_control_util.JN({
                            descriptor: borderProps.radius,
                            value: null !== (_a = visualBorder.radius) && void 0 !== _a ? _a : defaultValues.radius,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 30
                                },
                                unitSymbol: visualLocKeys.e_
                            },
                            localize
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("VisualContainer_Border_RoundedCorners");
                        }), _this.featureSwitchService.featureSwitches.visualBorderWidth && groupBuilder.addSimpleSlice("width", new build_control_util.mu({
                            descriptor: borderProps.width,
                            value: null !== (_b = visualBorder.width) && void 0 !== _b ? _b : visualBorderUtil.GC,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 1
                                },
                                maxValue: {
                                    type: 1,
                                    value: 99
                                },
                                unitSymbol: visualLocKeys.e_
                            }
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                        }));
                    }).addGroup("shadow", function(groupBuilder) {
                        var _a, _b, _c, _d, _e, _f, _g, _h, visualDropShadow = visualContainerEvaluatedObjects_2 && visualContainerEvaluatedObjects_2.dropShadow || {}, defaultValues = (0, 
                        visualDropShadowUtil.O4)(visualDropShadow, visualStyle_1);
                        groupBuilder.withDisplayName("Visual_DropShadow"), isQueryVisualWithoutData_2 ? groupBuilder.withDisabled(!0, "Add_Data_To_Format") : (groupBuilder.addTopLevelToggle("show", function() {
                            var _a;
                            return new build_control_util.bd({
                                descriptor: shadowProps.show,
                                value: null !== (_a = visualDropShadow.show) && void 0 !== _a ? _a : defaultValues.show
                            }).build();
                        }).addSimpleSlice("color", function() {
                            var _a, fillValue = null !== (_a = visualDropShadow.color) && void 0 !== _a ? _a : defaultValues.color, value = fillValue && fillValue.solid && fillValue.solid.color;
                            return new build_control_util.BT({
                                descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, shadowProps.color), {
                                    instanceKind: allowConditionalFormatting && 3
                                }),
                                value: void 0 !== value ? {
                                    value
                                } : void 0
                            }).build();
                        }).addSimpleSlice("offset", new build_control_util.uY({
                            descriptor: shadowProps.position,
                            value: null !== (_a = visualDropShadow.position) && void 0 !== _a ? _a : defaultValues.position
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Offset");
                        }).addSimpleSlice("position", new build_control_util.uY({
                            descriptor: shadowProps.preset,
                            value: null !== (_b = visualDropShadow.preset) && void 0 !== _b ? _b : defaultValues.preset
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_Position");
                        }), (null !== (_c = visualDropShadow.preset) && void 0 !== _c ? _c : defaultValues.preset) === visualContainer2.$g && groupBuilder.addSimpleSlice("size", new build_control_util.JN({
                            descriptor: shadowProps.shadowSpread,
                            value: null !== (_d = visualDropShadow.shadowSpread) && void 0 !== _d ? _d : defaultValues.shadowSpread,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 100
                                },
                                unitSymbol: visualLocKeys.e_
                            },
                            localize
                        }).build()).addSimpleSlice("blur", new build_control_util.JN({
                            descriptor: shadowProps.shadowBlur,
                            value: null !== (_e = visualDropShadow.shadowBlur) && void 0 !== _e ? _e : defaultValues.shadowBlur,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 100
                                },
                                unitSymbol: visualLocKeys.e_
                            },
                            localize
                        }).build()).addSimpleSlice("angle", build_control_util.JN.getRotationSliderBuilder({
                            descriptor: shadowProps.angle,
                            value: null !== (_f = visualDropShadow.angle) && void 0 !== _f ? _f : defaultValues.angle,
                            localize
                        }).build()).addSimpleSlice("distance", new build_control_util.JN({
                            descriptor: shadowProps.shadowDistance,
                            value: null !== (_g = visualDropShadow.shadowDistance) && void 0 !== _g ? _g : defaultValues.shadowDistance,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 0
                                },
                                maxValue: {
                                    type: 1,
                                    value: 100
                                },
                                unitSymbol: visualLocKeys.e_
                            },
                            localize
                        }).build()).addSimpleSlice("transparency", build_control_util.JN.getTransparencySliderBuilder({
                            descriptor: shadowProps.transparency,
                            value: null !== (_h = visualDropShadow.transparency) && void 0 !== _h ? _h : defaultValues.transparency,
                            localize
                        }).build()));
                    });
                }
            }, CanvasItemFormattingService.prototype.getPropertiesCard = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var props, generalProps, visualContainerProps, vcGeneralProps, paddingProps, revertToDefaultDescriptors, cardBuilder, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return revertToDefaultDescriptors = [ (generalProps = (props = options.props).general).height, generalProps.width, props.lockAspect.show, generalProps.x, generalProps.y, (paddingProps = (visualContainerProps = visualContainer2.fU).padding).top, paddingProps.bottom, paddingProps.left, paddingProps.right, (vcGeneralProps = visualContainerProps.general).keepLayerOrder, vcGeneralProps.allowBinnedLineSample, vcGeneralProps.allowOverlappingPointsSample ], 
                            cardBuilder = new build_control_util.CQ(new build_control_util.lg("properties"), "Properties", revertToDefaultDescriptors, function(key) {
                                return _this.localizationService.get(key);
                            }), [ 4, this.addGeneralSizeGroups(options, cardBuilder) ];

                          case 1:
                            return _a.sent(), [ 4, this.addAdvancedOptionsGroup(options, cardBuilder, "AdvancedOptions") ];

                          case 2:
                            return _a.sent(), [ 2, cardBuilder.build() ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.getAdvancedOptionsCard = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var vcGeneralProps, revertToDefaultDescriptors, cardBuilder, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return revertToDefaultDescriptors = [ (vcGeneralProps = visualContainer2.fU.general).keepLayerOrder, vcGeneralProps.allowBinnedLineSample, vcGeneralProps.allowOverlappingPointsSample ], 
                            cardBuilder = new build_control_util.CQ(new build_control_util.lg("advancedOptions"), "AdvancedOptions", revertToDefaultDescriptors, function(key) {
                                return _this.localizationService.get(key);
                            }), [ 4, this.addAdvancedOptionsGroup(options, cardBuilder) ];

                          case 1:
                            return _a.sent(), [ 2, cardBuilder.build() ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.getTitleCard = function(options, featureSwitches) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var allowConditionalFormatting, container, visualContainerCardBuildingOptions, visualContainerProps, capabilities, visualContainerEvaluatedObjects, visualStyle, titleProps, dividerProps, subTitleProps, spacingProps, visualTitle, visualSubTitle, singleVisualConfig, suppressDefaultTitle, schema, colorHelper, titleFontProperties, fontControlBuilder, fontControl, cardBuilder, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return allowConditionalFormatting = options.allowConditionalFormatting, (0, visualContainerGroup2.q4)(container = options.container) || (visualContainerCardBuildingOptions = options).isQueryVisualWithoutData ? [ 2 ] : (visualStyle = visualContainerCardBuildingOptions.visualStyle, 
                            titleProps = (visualContainerProps = visualContainerCardBuildingOptions.props).title, 
                            dividerProps = visualContainerProps.divider, subTitleProps = visualContainerProps.subTitle, 
                            spacingProps = visualContainerProps.spacing, visualTitle = (visualContainerEvaluatedObjects = visualContainerCardBuildingOptions.evaluatedObjects) && visualContainerEvaluatedObjects.title || {}, 
                            visualSubTitle = visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.subTitle || {}, 
                            singleVisualConfig = container.config.singleVisual, suppressDefaultTitle = (capabilities = visualContainerCardBuildingOptions.capabilities).suppressDefaultTitle, 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ]);

                          case 1:
                            return schema = _a.sent(), null == visualTitle.text && (visualTitle = this.displayNameService.getVisualTitle(singleVisualConfig, schema, capabilities, visualTitle)), 
                            featureSwitches.vcPadding && null == visualSubTitle.text && (visualSubTitle = this.displayNameService.getVisualSubTitle(singleVisualConfig, schema, capabilities, visualSubTitle)) && (null == visualTitle ? void 0 : visualTitle.isGeneratedText) && (null == visualSubTitle ? void 0 : visualSubTitle.isGeneratedText) && (visualTitle.text = visualTitle.titleComponents.title, 
                            visualSubTitle.text = visualSubTitle.titleComponents.subtitle), colorHelper = common_colorHelper.v.create(visualStyle), 
                            titleFontProperties = (0, fontProperties.Zi)(visualTitle, {
                                size: "fontSize",
                                family: "fontFamily",
                                color: "fontColor"
                            }, colorHelper, visualStyle, void 0, visualContainerUtils.Hf, visualContainerUtils.o8), 
                            fontControlBuilder = (new build_control_util.UN).withFontFamily({
                                descriptor: titleProps.fontFamily,
                                value: titleFontProperties.family
                            }).withFontSizeProperties({
                                descriptor: titleProps.fontSize,
                                value: titleFontProperties.size.pt
                            }).withBold({
                                descriptor: titleProps.bold,
                                value: visualTitle.bold || !1
                            }).withItalic({
                                descriptor: titleProps.italic,
                                value: visualTitle.italic || !1
                            }).withUnderline({
                                descriptor: titleProps.underline,
                                value: visualTitle.underline || !1
                            }), fontControl = fontControlBuilder.build(), (cardBuilder = new build_control_util.CQ(new build_control_util.lg("title"), "Title", [ titleProps.show, titleProps.text, titleProps.heading, titleProps.fontFamily, titleProps.fontSize, titleProps.bold, titleProps.italic, titleProps.underline, titleProps.fontColor, titleProps.background, titleProps.alignment, titleProps.titleWrap, subTitleProps.show, subTitleProps.text, subTitleProps.heading, subTitleProps.fontFamily, subTitleProps.fontSize, subTitleProps.bold, subTitleProps.italic, subTitleProps.underline, subTitleProps.fontColor, subTitleProps.alignment, subTitleProps.titleWrap, dividerProps.show, dividerProps.ignorePadding, dividerProps.color, dividerProps.width, dividerProps.style, spacingProps.customizeSpacing, spacingProps.spaceBelowSubTitle, spacingProps.spaceBelowTitle, spacingProps.spaceBelowTitleArea, spacingProps.verticalSpacing ], function(key) {
                                return _this.localizationService.get(key);
                            })).withDescription("Visual_TitleDescription").addTopLevelToggle("show", function() {
                                return new build_control_util.bd({
                                    descriptor: titleProps.show,
                                    value: visualTitle.show || !(0, visualContainer1.xj)(visualTitle, suppressDefaultTitle)
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withNoDefaultImpact(suppressDefaultTitle);
                            }), cardBuilder.addGroup("text", function(groupBuilder) {
                                featureSwitches.vcPadding && groupBuilder.withDisplayName("Title"), groupBuilder.addSimpleSlice("text", new build_control_util.fq({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, titleProps.text), {
                                        instanceKind: allowConditionalFormatting && 3
                                    }),
                                    placeholder: "",
                                    value: visualTitle.text || ""
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Text");
                                }).addSimpleSlice("heading", new build_control_util.uY({
                                    descriptor: titleProps.heading,
                                    value: visualTitle.heading || visualContainerUtils.PY
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Visual_AzureMapsHeading");
                                }).addCompositeSlice("font", "Font", fontControl).addSimpleSlice("textColor", new build_control_util.BT({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, titleProps.fontColor), {
                                        instanceKind: allowConditionalFormatting && 3
                                    }),
                                    value: {
                                        value: titleFontProperties.color
                                    }
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Text_Color");
                                }).addSimpleSlice("backgroundColor", function() {
                                    var _a, _b, backgroundColor = null === (_b = null === (_a = visualTitle.background) || void 0 === _a ? void 0 : _a.solid) || void 0 === _b ? void 0 : _b.color;
                                    return new build_control_util.BT({
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, titleProps.background), {
                                            instanceKind: allowConditionalFormatting && 3
                                        }),
                                        value: {
                                            value: backgroundColor
                                        },
                                        isNoFillItemSupported: !0
                                    }).build();
                                }, function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Background_Color");
                                }).addSimpleSlice("alignment", new build_control_util.Gp({
                                    descriptor: titleProps.alignment,
                                    value: visualTitle.alignment || horizontalPosition.D.left,
                                    mode: "horizontalAlignment"
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Visual_Alignment_Horizontal");
                                }).addSimpleSlice("wrapText", new build_control_util.bd({
                                    descriptor: titleProps.titleWrap,
                                    value: !!visualTitle.titleWrap
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("TextWrap");
                                });
                            }), featureSwitches.vcPadding ? [ 4, this.getSubTitleGroup(options, featureSwitches, cardBuilder, visualSubTitle) ] : [ 3, 3 ];

                          case 2:
                            _a.sent(), this.getDividerGroup(options, cardBuilder), this.getSpacingGroup(options, cardBuilder), 
                            _a.label = 3;

                          case 3:
                            return [ 2, cardBuilder.build() ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.getSubTitleGroup = function(options, featureSwitches, cardBuilder, visualSubTitle) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var allowConditionalFormatting, container, visualContainerCardBuildingOptions, capabilities, visualContainerEvaluatedObjects, visualStyle, subTitleProps, singleVisualConfig, schema, colorHelper, subTitleFontProperties, fontControlBuilder, fontControl;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return allowConditionalFormatting = options.allowConditionalFormatting, (0, visualContainerGroup2.q4)(container = options.container) ? [ 2 ] : (capabilities = (visualContainerCardBuildingOptions = options).capabilities, 
                            visualContainerEvaluatedObjects = visualContainerCardBuildingOptions.evaluatedObjects, 
                            visualStyle = visualContainerCardBuildingOptions.visualStyle, subTitleProps = visualContainerCardBuildingOptions.props.subTitle, 
                            visualSubTitle ? [ 3, 2 ] : (singleVisualConfig = container.config.singleVisual, 
                            null != (visualSubTitle = visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.subTitle || {}).text ? [ 3, 2 ] : [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ]));

                          case 1:
                            schema = _b.sent(), (visualSubTitle = this.displayNameService.getVisualTitle(singleVisualConfig, schema, capabilities, visualSubTitle)) && (visualSubTitle.text = null === (_a = null == visualSubTitle ? void 0 : visualSubTitle.titleComponents) || void 0 === _a ? void 0 : _a.subtitle), 
                            _b.label = 2;

                          case 2:
                            return colorHelper = common_colorHelper.v.create(visualStyle), subTitleFontProperties = (0, 
                            fontProperties.Zi)(visualSubTitle, {
                                size: "fontSize",
                                family: "fontFamily",
                                color: "fontColor"
                            }, colorHelper, visualStyle, visualContainerUtils.uz, visualContainerUtils.Zq, visualContainerUtils.o8), 
                            fontControlBuilder = (new build_control_util.UN).withFontFamily({
                                descriptor: subTitleProps.fontFamily,
                                value: subTitleFontProperties.family
                            }).withFontSizeProperties({
                                descriptor: subTitleProps.fontSize,
                                value: subTitleFontProperties.size.pt
                            }).withBold({
                                descriptor: subTitleProps.bold,
                                value: visualSubTitle.bold || !1
                            }).withItalic({
                                descriptor: subTitleProps.italic,
                                value: visualSubTitle.italic || !1
                            }).withUnderline({
                                descriptor: subTitleProps.underline,
                                value: visualSubTitle.underline || !1
                            }), fontControl = fontControlBuilder.build(), cardBuilder.addGroup("subtitle", function(groupBuilder) {
                                groupBuilder.withDisplayName("Visual_SubTitle").addTopLevelToggle("show", function() {
                                    return new build_control_util.bd({
                                        descriptor: subTitleProps.show,
                                        value: visualSubTitle.show || !1
                                    }).build();
                                }).addSimpleSlice("text", new build_control_util.fq({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, subTitleProps.text), {
                                        instanceKind: allowConditionalFormatting && 3
                                    }),
                                    placeholder: "",
                                    value: visualSubTitle.text || ""
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Text");
                                }).addSimpleSlice("heading", new build_control_util.uY({
                                    descriptor: subTitleProps.heading,
                                    value: visualSubTitle.heading || visualContainerUtils.AS
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Visual_AzureMapsHeading");
                                }).addCompositeSlice("font", "Font", fontControl).addSimpleSlice("textColor", new build_control_util.BT({
                                    descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, subTitleProps.fontColor), {
                                        instanceKind: allowConditionalFormatting && 3
                                    }),
                                    value: {
                                        value: subTitleFontProperties.color
                                    }
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Text_Color");
                                }).addSimpleSlice("alignment", new build_control_util.Gp({
                                    descriptor: subTitleProps.alignment,
                                    value: visualSubTitle.alignment || horizontalPosition.D.left,
                                    mode: "horizontalAlignment"
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("Visual_Alignment_Horizontal");
                                }).addSimpleSlice("wrapText", new build_control_util.bd({
                                    descriptor: subTitleProps.titleWrap,
                                    value: !!visualSubTitle.titleWrap
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("TextWrap");
                                });
                            }), [ 2 ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.getDividerGroup = function(options, cardBuilder) {
                var _a, allowConditionalFormatting = (_a = options).allowConditionalFormatting, visualStyle = _a.visualStyle, visualContainerEvaluatedObjects = options.evaluatedObjects, dividerProps = options.props.divider, visualDivider = visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.divider || {};
                cardBuilder.addGroup("divider", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Divider").addTopLevelToggle("show", function() {
                        return new build_control_util.bd({
                            descriptor: dividerProps.show,
                            value: visualDivider.show || !1
                        }).build();
                    }).addSimpleSlice("color", function() {
                        var _a, colordata = void 0 !== visualDivider.color ? {
                            value: null === (_a = visualDivider.color.solid) || void 0 === _a ? void 0 : _a.color
                        } : {
                            value: visualStyle.colorPalette.foregroundNeutralSecondary.value
                        };
                        return new build_control_util.BT({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, dividerProps.color), {
                                instanceKind: allowConditionalFormatting && 3
                            }),
                            value: colordata
                        }).build();
                    }).addSimpleSlice("style", new build_control_util.uY({
                        descriptor: dividerProps.style,
                        value: visualDivider.style || strokePattern.Dv.solid
                    }).build()).addSimpleSlice("width", function() {
                        return new build_control_util.mu({
                            descriptor: dividerProps.width,
                            value: visualDivider.width || 1,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 1
                                },
                                maxValue: {
                                    type: 1,
                                    value: 10
                                },
                                required: {
                                    type: 2
                                },
                                unitSymbol: visualLocKeys.e_
                            }
                        }).build();
                    }).addSimpleSlice("ignorePadding", new build_control_util.bd({
                        descriptor: dividerProps.ignorePadding,
                        value: !(!1 === visualDivider.ignorePadding)
                    }).build());
                });
            }, CanvasItemFormattingService.prototype.getSpacingGroup = function(options, cardBuilder) {
                var visualContainerEvaluatedObjects = options.evaluatedObjects, spacingProps = options.props.spacing, visualSubTitle = visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.subTitle || {}, visualDivider = visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.divider || {}, visualSpacing = visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.spacing || {}, spacingOptions = {
                    minValue: {
                        type: 0,
                        value: 0
                    },
                    maxValue: {
                        type: 1,
                        value: 10
                    },
                    required: {
                        type: 2
                    },
                    unitSymbol: visualLocKeys.e_
                };
                cardBuilder.addGroup("spacing", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Spacing").addSimpleSlice("customizeSpacing", function() {
                        var _a;
                        return new build_control_util.bd({
                            descriptor: spacingProps.customizeSpacing,
                            value: null !== (_a = visualSpacing.customizeSpacing) && void 0 !== _a && _a
                        }).build();
                    }), visualSpacing.customizeSpacing ? (groupBuilder.addSimpleSlice("spaceBelowTitle", function() {
                        return new build_control_util.mu({
                            descriptor: spacingProps.spaceBelowTitle,
                            value: (0, visualContainerUtils.h4)(visualContainerUtils.hs.Title, visualSpacing),
                            options: spacingOptions
                        }).build();
                    }), visualSubTitle.show && groupBuilder.addSimpleSlice("spaceBelowSubTitle", function() {
                        return new build_control_util.mu({
                            descriptor: spacingProps.spaceBelowSubTitle,
                            value: (0, visualContainerUtils.h4)(visualContainerUtils.hs.SubTitle, visualSpacing),
                            options: spacingOptions
                        }).build();
                    }), visualDivider.show && groupBuilder.addSimpleSlice("spaceBelowTitleArea", function() {
                        return new build_control_util.mu({
                            descriptor: spacingProps.spaceBelowTitleArea,
                            value: (0, visualContainerUtils.h4)(visualContainerUtils.hs.Divider, visualSpacing),
                            options: spacingOptions
                        }).build();
                    })) : groupBuilder.addSimpleSlice("verticalSpacing", function() {
                        var _a;
                        return new build_control_util.mu({
                            descriptor: spacingProps.verticalSpacing,
                            value: null !== (_a = visualSpacing.verticalSpacing) && void 0 !== _a ? _a : 5,
                            options: spacingOptions
                        }).build();
                    });
                });
            }, CanvasItemFormattingService.prototype.getVisualSizeAndStyleCard = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var props, generalProps, backgroundProps, paddingProps, borderProps, shadowProps, localize, cardBuilder, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return generalProps = (props = options.props).general, backgroundProps = props.background, 
                            paddingProps = visualContainer2.fU.padding, borderProps = visualContainer2.fU.border, 
                            shadowProps = visualContainer2.fU.dropShadow, localize = function(key) {
                                return _this.localizationService.get(key);
                            }, cardBuilder = new build_control_util.CQ(new build_control_util.lg("sizeAndStyle"), "Visual_Size_And_Style", [ generalProps.height, generalProps.width, props.lockAspect.show, generalProps.x, generalProps.y, paddingProps.top, paddingProps.bottom, paddingProps.left, paddingProps.right, backgroundProps.show, backgroundProps.color, backgroundProps.transparency, borderProps.show, borderProps.color, borderProps.radius, borderProps.width, shadowProps.show, shadowProps.color, shadowProps.transparency, shadowProps.position, shadowProps.preset, shadowProps.shadowSpread, shadowProps.shadowBlur, shadowProps.angle, shadowProps.shadowDistance ], localize), 
                            [ 4, this.addGeneralSizeGroups(options, cardBuilder) ];

                          case 1:
                            return _a.sent(), this.addGeneralStyleGroups(options, cardBuilder), [ 2, cardBuilder.build() ];
                        }
                    });
                });
            }, CanvasItemFormattingService.prototype.getEffectsCard = function(options) {
                var _this = this, backgroundProps = options.props.background, borderProps = visualContainer2.fU.border, shadowProps = visualContainer2.fU.dropShadow, cardBuilder = new build_control_util.CQ(new build_control_util.lg("effects"), "VisualFormatting_Effects", [ backgroundProps.show, backgroundProps.color, backgroundProps.transparency, borderProps.show, borderProps.color, borderProps.radius, borderProps.width, shadowProps.show, shadowProps.color, shadowProps.transparency, shadowProps.position, shadowProps.preset, shadowProps.shadowSpread, shadowProps.shadowBlur, shadowProps.angle, shadowProps.shadowDistance ], function(key) {
                    return _this.localizationService.get(key);
                });
                return this.addGeneralStyleGroups(options, cardBuilder), cardBuilder.build();
            }, CanvasItemFormattingService.prototype.getHeaderIconsCard = function(options) {
                var _a, _b, _this = this, evaluatedObjects = options.evaluatedObjects, exploration = options.exploration, explorationCapabilities = options.explorationCapabilities, featureSwitches = options.featureSwitches;
                if (!(0, visualContainerGroup2.q4)(options.container)) {
                    var visualContainerCardBuildingOptions = options, visualContainerProps = visualContainerCardBuildingOptions.props, headerProps = visualContainerProps.visualHeader, visualHeaderTooltipProps = visualContainerProps.visualHeaderTooltip, visualContainerEvaluatedObjects = evaluatedObjects, visualHeader = visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.visualHeader || {}, useStylableHeader = explorationCapabilities.visualContainerOptions.useStylableHeader, explorationSettings = exploration.settings, useEnhancedTooltips = null !== (_a = null == explorationSettings ? void 0 : explorationSettings.useEnhancedTooltips) && void 0 !== _a ? _a : null == featureSwitches ? void 0 : featureSwitches.forceEnhancedTooltips, localize = function(key) {
                        return _this.localizationService.get(key);
                    }, cardBuilder = new build_control_util.CQ(new build_control_util.lg("headerIcons"), "VisualContainer_HeaderIcons", [ headerProps.show, headerProps.background, headerProps.border, headerProps.foreground, headerProps.transparency, headerProps.showVisualInformationButton, headerProps.showVisualWarningButton, headerProps.showVisualErrorButton, headerProps.showDrillRoleSelector, headerProps.showDrillUpButton, headerProps.showDrillToggleButton, headerProps.showDrillDownLevelButton, headerProps.showDrillDownExpandButton, headerProps.showPinButton, headerProps.showFocusModeButton, headerProps.showSeeDataLayoutToggleButton, headerProps.showOptionsMenu, headerProps.showFilterRestatementButton, headerProps.showTooltipButton, headerProps.showCommentButton, headerProps.showPersonalizeVisualButton, headerProps.showCopyVisualImageButton, headerProps.showSmartNarrativeButton, headerProps.showSetAlertButton, headerProps.showFollowVisualButton, visualHeaderTooltipProps.type, visualHeaderTooltipProps.section, visualHeaderTooltipProps.text, visualHeaderTooltipProps.fontFamily, visualHeaderTooltipProps.fontSize, visualHeaderTooltipProps.bold, visualHeaderTooltipProps.italic, visualHeaderTooltipProps.underline, useEnhancedTooltips ? visualHeaderTooltipProps.themedTitleFontColor : visualHeaderTooltipProps.titleFontColor, useEnhancedTooltips ? visualHeaderTooltipProps.themedBackground : visualHeaderTooltipProps.background, visualHeaderTooltipProps.transparency ], localize), defaultValues = {
                        show: !0,
                        background: {
                            solid: {
                                color: "#FFF"
                            }
                        },
                        border: {
                            solid: {
                                color: "#FFF"
                            }
                        },
                        transparency: 0,
                        foreground: {
                            solid: {
                                color: "#333"
                            }
                        },
                        showVisualInformationButton: !0,
                        showVisualWarningButton: !0,
                        showVisualErrorButton: !0,
                        showDrillRoleSelector: !0,
                        showDrillUpButton: !0,
                        showDrillToggleButton: !0,
                        showDrillDownLevelButton: !0,
                        showDrillDownExpandButton: !0,
                        showPinButton: !0,
                        showFocusModeButton: !0,
                        showSeeDataLayoutToggleButton: !0,
                        showOptionsMenu: !0,
                        showTooltipButton: !1,
                        showFilterRestatementButton: !0,
                        showCommentButton: !0,
                        showPersonalizeVisualButton: !0,
                        showCopyVisualImageButton: !0,
                        showSmartNarrativeButton: !1,
                        showSetAlertButton: !0,
                        showFollowVisualButton: !1
                    };
                    if (cardBuilder.withDescription("VisualHeader_Toggle_Description").addTopLevelToggle("show", function() {
                        var _a;
                        return new build_control_util.bd({
                            descriptor: headerProps.show,
                            value: null !== (_a = visualHeader.show) && void 0 !== _a ? _a : defaultValues.show
                        }).build();
                    }), useStylableHeader) {
                        var showTooltipButton_1 = null !== (_b = visualHeader.showTooltipButton) && void 0 !== _b ? _b : defaultValues.showTooltipButton;
                        cardBuilder.addGroup("colors", function(groupBuilder) {
                            var _a, _b, background = null !== (_a = visualHeader.background) && void 0 !== _a ? _a : defaultValues.background;
                            groupBuilder.withDisplayName("Visual_Colors").addSimpleSlice("background", function() {
                                var _a, colordata = {
                                    value: null === (_a = background.solid) || void 0 === _a ? void 0 : _a.color
                                };
                                return new build_control_util.BT({
                                    descriptor: headerProps.background,
                                    value: colordata
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Background");
                            }).addSimpleSlice("border", function() {
                                var _a, _b, borderColor = visualHeader.border;
                                void 0 === borderColor && (borderColor = visualHeader.background), void 0 === borderColor && (borderColor = defaultValues.border);
                                var colordata = {
                                    value: null === (_b = (null !== (_a = visualHeader.border) && void 0 !== _a ? _a : defaultValues.border).solid) || void 0 === _b ? void 0 : _b.color
                                };
                                return new build_control_util.BT({
                                    descriptor: headerProps.border,
                                    value: colordata
                                }).build();
                            }).addSimpleSlice("icon", function() {
                                var _a, _b, colordata = {
                                    value: null === (_b = (null !== (_a = visualHeader.foreground) && void 0 !== _a ? _a : defaultValues.foreground).solid) || void 0 === _b ? void 0 : _b.color
                                };
                                return new build_control_util.BT({
                                    descriptor: headerProps.foreground,
                                    value: colordata
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Icon");
                            }).addSimpleSlice("transparency", build_control_util.JN.getTransparencySliderBuilder({
                                descriptor: headerProps.transparency,
                                value: null !== (_b = visualHeader.transparency) && void 0 !== _b ? _b : defaultValues.transparency,
                                localize
                            }).build()).build();
                        }).addGroup("icons", function(groupBuilder) {
                            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
                            groupBuilder.withDisplayName("Visual_Tablix_Icons").addSimpleSlice("showVisualInformationButton", new build_control_util.bd({
                                descriptor: headerProps.showVisualInformationButton,
                                value: null !== (_b = visualHeader.showVisualInformationButton) && void 0 !== _b ? _b : defaultValues.showVisualInformationButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("VisualHeader_ShowVisualInformationButtonLabel");
                            }).addSimpleSlice("showVisualWarningButton", new build_control_util.bd({
                                descriptor: headerProps.showVisualWarningButton,
                                value: null !== (_c = visualHeader.showVisualWarningButton) && void 0 !== _c ? _c : defaultValues.showVisualWarningButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("VisualHeader_ShowVisualWarningButtonLabel");
                            }).addSimpleSlice("showVisualErrorButton", new build_control_util.bd({
                                descriptor: headerProps.showVisualErrorButton,
                                value: null !== (_d = visualHeader.showVisualErrorButton) && void 0 !== _d ? _d : defaultValues.showVisualErrorButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("VisualHeader_ShowVisualErrorButtonLabel");
                            }).addSimpleSlice("showDrillRoleSelector", new build_control_util.bd({
                                descriptor: headerProps.showDrillRoleSelector,
                                value: null !== (_e = visualHeader.showDrillRoleSelector) && void 0 !== _e ? _e : defaultValues.showDrillRoleSelector
                            }).build()).addSimpleSlice("showDrillUpButton", new build_control_util.bd({
                                descriptor: headerProps.showDrillUpButton,
                                value: null !== (_f = visualHeader.showDrillUpButton) && void 0 !== _f ? _f : defaultValues.showDrillUpButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("DrillUp");
                            }).addSimpleSlice("showDrillToggleButton", new build_control_util.bd({
                                descriptor: headerProps.showDrillToggleButton,
                                value: null !== (_g = visualHeader.showDrillToggleButton) && void 0 !== _g ? _g : defaultValues.showDrillToggleButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("DrillDown");
                            }).addSimpleSlice("showDrillDownLevelButton", new build_control_util.bd({
                                descriptor: headerProps.showDrillDownLevelButton,
                                value: null !== (_h = visualHeader.showDrillDownLevelButton) && void 0 !== _h ? _h : defaultValues.showDrillDownLevelButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("DrillDownLevel");
                            }).addSimpleSlice("showDrillDownExpandButton", new build_control_util.bd({
                                descriptor: headerProps.showDrillDownExpandButton,
                                value: null !== (_j = visualHeader.showDrillDownExpandButton) && void 0 !== _j ? _j : defaultValues.showDrillDownExpandButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("DrillDownLevelGrouped");
                            }).addSimpleSlice("showPinButton", new build_control_util.bd({
                                descriptor: headerProps.showPinButton,
                                value: null !== (_k = visualHeader.showPinButton) && void 0 !== _k ? _k : defaultValues.showPinButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("ReportContainer_Pin");
                            }).addSimpleSlice("showFocusModeButton", new build_control_util.bd({
                                descriptor: headerProps.showFocusModeButton,
                                value: null !== (_l = visualHeader.showFocusModeButton) && void 0 !== _l ? _l : defaultValues.showFocusModeButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("FocusModeVisual_ToolTip");
                            }).addSimpleSlice("showSeeDataLayoutToggleButton", new build_control_util.bd({
                                descriptor: headerProps.showSeeDataLayoutToggleButton,
                                value: null !== (_m = visualHeader.showSeeDataLayoutToggleButton) && void 0 !== _m ? _m : defaultValues.showSeeDataLayoutToggleButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("VisualHeader_ShowSeeDataLayoutToggleButtonLabel");
                            }).addSimpleSlice("showOptionsMenu", new build_control_util.bd({
                                descriptor: headerProps.showOptionsMenu,
                                value: null !== (_o = visualHeader.showOptionsMenu) && void 0 !== _o ? _o : defaultValues.showOptionsMenu
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Options_Menu");
                            }).addSimpleSlice("showFilterRestatementButton", new build_control_util.bd({
                                descriptor: headerProps.showFilterRestatementButton,
                                value: null !== (_p = visualHeader.showFilterRestatementButton) && void 0 !== _p ? _p : defaultValues.showFilterRestatementButton
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Filter");
                            }).addSimpleSlice("showTooltipButton", new build_control_util.bd({
                                descriptor: headerProps.showTooltipButton,
                                value: showTooltipButton_1
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("VisualContainer_HelpTooltip");
                            }), explorationCapabilities.annotationsEnabled && groupBuilder.addSimpleSlice("showCommentButton", new build_control_util.bd({
                                descriptor: headerProps.showCommentButton,
                                value: null !== (_q = visualHeader.showCommentButton) && void 0 !== _q ? _q : defaultValues.showCommentButton
                            }).build());
                            var isQueryVisual = (_a = visualContainerCardBuildingOptions.visualKind).isQueryVisual, personalizeVisualButtonAllowed = function(featureSwitches, capabilities, exploration, isSupportedVisualType) {
                                return !!(featureSwitches && capabilities && exploration && exploration.settings) && !capabilities.disableInlineExplore && exploration.settings.allowInlineExploration && isSupportedVisualType;
                            }(featureSwitches, explorationCapabilities, exploration, isQueryVisual || _a.isQnaVisual);
                            personalizeVisualButtonAllowed && groupBuilder.addSimpleSlice("showPersonalizeVisualButton", new build_control_util.bd({
                                descriptor: headerProps.showPersonalizeVisualButton,
                                value: null !== (_r = visualHeader.showPersonalizeVisualButton) && void 0 !== _r ? _r : defaultValues.showPersonalizeVisualButton
                            }).build()), featureSwitches.copyVisualImage && featureSwitches.exportVisualImageTenantEnabled && groupBuilder.addSimpleSlice("showCopyVisualImageButton", new build_control_util.bd({
                                descriptor: headerProps.showCopyVisualImageButton,
                                value: null !== (_s = visualHeader.showCopyVisualImageButton) && void 0 !== _s ? _s : defaultValues.showCopyVisualImageButton
                            }).build()), featureSwitches.smartNarrativeVisualContainterButton && groupBuilder.addSimpleSlice("showSmartNarrativeButton", new build_control_util.bd({
                                descriptor: headerProps.showSmartNarrativeButton,
                                value: null !== (_t = visualHeader.showSmartNarrativeButton) && void 0 !== _t ? _t : defaultValues.showSmartNarrativeButton
                            }).build()), featureSwitches.reflexPBIVisualToolbarEntry && groupBuilder.addSimpleSlice("showSetAlertButton", new build_control_util.bd({
                                descriptor: headerProps.showSetAlertButton,
                                value: null !== (_u = visualHeader.showSetAlertButton) && void 0 !== _u ? _u : defaultValues.showSetAlertButton
                            }).build()), featureSwitches.reflexPBIFollowVisual && groupBuilder.addSimpleSlice("showFollowVisualButton", new build_control_util.bd({
                                descriptor: headerProps.showFollowVisualButton,
                                value: null !== (_v = visualHeader.showFollowVisualButton) && void 0 !== _v ? _v : defaultValues.showFollowVisualButton
                            }).build());
                        }), showTooltipButton_1 && cardBuilder.addGroup("helpTooltip", function(groupBuilder) {
                            var visualHeaderTooltip = (0, tslib_es6.__assign)({
                                type: contracts_visualHeaderTooltip.xv,
                                show: !0,
                                text: void 0,
                                section: visualContainer2.F
                            }, visualContainerEvaluatedObjects && visualContainerEvaluatedObjects.visualHeaderTooltip || {}), visualStyle = visualContainerCardBuildingOptions.visualStyle, enableMobileTooltipActions = _this.viewModeStateService.getConfig().displayOptions.enableMobileTooltipActions, visualTooltipStyle = (0, 
                            visualTooltipStyleUtils.UM)(visualStyle, useEnhancedTooltips, enableMobileTooltipActions, visualHeaderTooltip);
                            groupBuilder.withDisplayName("VisualContainer_HelpTooltip");
                            var fontProperties = visualTooltipStyle.titleFontProperties, mergeValues = [ {
                                displayName: function(localization) {
                                    return localization.get("None");
                                },
                                value: visualContainer2.F
                            } ], tooltipSections = getTooltipSections(_this.explorationNavigationService) || [], filterValues = (0, 
                            tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], tooltipSections, !0), _.map(mergeValues, function(mergeValue) {
                                return mergeValue.value;
                            }), !0), noTooltipPages = 0 === tooltipSections.length;
                            groupBuilder.addSimpleSlice("type", new build_control_util.uY({
                                descriptor: visualHeaderTooltipProps.type,
                                value: visualHeaderTooltip.type
                            }).build()).addSimpleSlice("section", new build_control_util.uY({
                                descriptor: visualHeaderTooltipProps.section,
                                value: visualHeaderTooltip.section,
                                mergeValues,
                                filterValues
                            }).build(), function(builder) {
                                return builder.withDisabled(noTooltipPages || visualHeaderTooltip.type !== contracts_visualHeaderTooltip.Xz);
                            });
                            var toolTipTextFontControlBuilder = (new build_control_util.UN).withFontFamily({
                                descriptor: visualHeaderTooltipProps.fontFamily,
                                value: fontProperties.family
                            }).withFontSizeProperties({
                                descriptor: visualHeaderTooltipProps.fontSize,
                                value: fontProperties.size.pt
                            }).withBold({
                                descriptor: visualHeaderTooltipProps.bold,
                                value: fontProperties.weight === CssConstants.en
                            }).withItalic({
                                descriptor: visualHeaderTooltipProps.italic,
                                value: fontProperties.style === CssConstants.BF
                            }).withUnderline({
                                descriptor: visualHeaderTooltipProps.underline,
                                value: fontProperties.textDecoration === CssConstants.f0
                            });
                            groupBuilder.addSimpleSlice("tooltipText", new build_control_util.Jr({
                                descriptor: visualHeaderTooltipProps.text,
                                placeholder: "VisualContainer_HelpTooltip_TextPlaceholder",
                                value: visualHeaderTooltip.text,
                                localize: function(key) {
                                    return _this.localizationService.get(key);
                                }
                            }).build()).addCompositeSlice("font", "Font", toolTipTextFontControlBuilder.build()).addSimpleSlice("textColor", function() {
                                return new build_control_util.BT({
                                    descriptor: useEnhancedTooltips ? visualHeaderTooltipProps.themedTitleFontColor : visualHeaderTooltipProps.titleFontColor,
                                    value: {
                                        value: fontProperties.color
                                    }
                                }).build();
                            }).addSimpleSlice("background", function() {
                                var fillValue = visualTooltipStyle.background;
                                return new build_control_util.BT({
                                    descriptor: useEnhancedTooltips ? visualHeaderTooltipProps.themedBackground : visualHeaderTooltipProps.background,
                                    value: {
                                        value: fillValue && fillValue.solid && fillValue.solid.color
                                    },
                                    isNoFillItemSupported: !0
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Background_Color");
                            }).addSimpleSlice("transparency", build_control_util.JN.getTransparencySliderBuilder({
                                descriptor: visualHeaderTooltipProps.transparency,
                                value: visualTooltipStyle.transparency,
                                localize
                            }).build());
                        });
                    }
                    return cardBuilder.build();
                }
            }, CanvasItemFormattingService.prototype.getTooltipsCard = function(options) {
                var _a, _this = this, evaluatedObjects = options.evaluatedObjects, exploration = options.exploration, featureSwitches = options.featureSwitches;
                if (!(0, visualContainerGroup2.q4)(options.container)) {
                    var visualContainerCardBuildingOptions = options;
                    if (!visualContainerCardBuildingOptions.isQueryVisualWithoutData) {
                        var tooltipCapabilities = visualContainerCardBuildingOptions.capabilities.tooltips;
                        if (tooltipCapabilities) {
                            var show, visualTooltipProps = visualContainerCardBuildingOptions.props.visualTooltip, visualTooltip = evaluatedObjects && evaluatedObjects.visualTooltip, explorationSettings = exploration.settings, useEnhancedTooltips = null !== (_a = null == explorationSettings ? void 0 : explorationSettings.useEnhancedTooltips) && void 0 !== _a ? _a : null == featureSwitches ? void 0 : featureSwitches.forceEnhancedTooltips, localize = function(key) {
                                return _this.localizationService.get(key);
                            }, cardBuilder = new build_control_util.CQ(new build_control_util.lg("tooltips"), "Role_DisplayName_Tooltips", [ visualTooltipProps.show, visualTooltipProps.type, visualTooltipProps.section, visualTooltipProps.fontFamily, visualTooltipProps.fontSize, visualTooltipProps.bold, visualTooltipProps.italic, visualTooltipProps.underline, useEnhancedTooltips ? visualTooltipProps.themedTitleFontColor : visualTooltipProps.titleFontColor, useEnhancedTooltips ? visualTooltipProps.themedValueFontColor : visualTooltipProps.valueFontColor, visualTooltipProps.actionFontColor, useEnhancedTooltips ? visualTooltipProps.themedBackground : visualTooltipProps.background, visualTooltipProps.transparency ], localize);
                            show = visualTooltip && void 0 !== visualTooltip.show ? !!visualTooltip.show : void 0 === tooltipCapabilities.showByDefault || !!tooltipCapabilities.showByDefault, 
                            cardBuilder.addTopLevelToggle("show", function() {
                                return new build_control_util.bd({
                                    descriptor: visualTooltipProps.show,
                                    value: show
                                }).build();
                            });
                            var supportedTooltips = tooltipCapabilities.supportedTypes;
                            if (null != supportedTooltips) {
                                var visualStyle = visualContainerCardBuildingOptions.visualStyle, enableMobileTooltipActions = this.viewModeStateService.getConfig().displayOptions.enableMobileTooltipActions, visualTooltipStyle = (0, 
                                visualTooltipStyleUtils.UM)(visualStyle, useEnhancedTooltips, enableMobileTooltipActions, visualTooltip), titleFontProperties = visualTooltipStyle.titleFontProperties, valueFontProperties = visualTooltipStyle.valueFontProperties, actionFontProperties = visualTooltipStyle.actionFontProperties;
                                cardBuilder.addGroup("options", function(groupBuilder) {
                                    var _a, selectedTooltipType = (_a = function(capabilityValues, valueMap, requestedValue, defaultValue) {
                                        var selectedValue, validValues = [];
                                        for (var valueCapabilityName in capabilityValues) if (capabilityValues[valueCapabilityName]) {
                                            var validValue = valueMap[valueCapabilityName];
                                            validValues.push(validValue), validValue === requestedValue && (selectedValue = validValue);
                                        }
                                        return debug.fF.assert(function() {
                                            return !_.isEmpty(validValues);
                                        }, "No valid values were found"), void 0 === selectedValue && (selectedValue = defaultValue, 
                                        debug.fF.assert(function() {
                                            return _.some(validValues, function(validValue) {
                                                return validValue === defaultValue;
                                            });
                                        }, "Default value is not supported")), {
                                            selectedValue,
                                            validValues
                                        };
                                    }(supportedTooltips, {
                                        default: visualContainer1.gA,
                                        canvas: visualContainer1.Xz
                                    }, visualTooltip && visualTooltip.type, supportedTooltips.canvas ? visualContainer1.Xz : visualContainer1.gA)).selectedValue, validTooltipValues = _a.validValues, mergeSectionValues = [ {
                                        displayName: function(localization) {
                                            return localization.get("Visual_Auto");
                                        },
                                        value: visualContainer1.pJ
                                    } ], filterSectionValues = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], getTooltipSections(_this.explorationNavigationService) || [], !0), _.map(mergeSectionValues, function(mergeValue) {
                                        return mergeValue.value;
                                    }), !0), section = visualTooltip && visualTooltip.section || visualContainer1.pJ;
                                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("type", new build_control_util.uY({
                                        descriptor: visualTooltipProps.type,
                                        value: selectedTooltipType,
                                        filterValues: validTooltipValues
                                    }).build()).addSimpleSlice("section", new build_control_util.uY({
                                        descriptor: visualTooltipProps.section,
                                        value: section,
                                        mergeValues: mergeSectionValues,
                                        filterValues: filterSectionValues
                                    }).build(), function(builder) {
                                        return builder.withDisabled(selectedTooltipType !== visualContainer1.Xz);
                                    });
                                });
                                var fontControl = (new build_control_util.UN).withFontFamily({
                                    descriptor: visualTooltipProps.fontFamily,
                                    value: titleFontProperties.family
                                }).withFontSizeProperties({
                                    descriptor: visualTooltipProps.fontSize,
                                    value: titleFontProperties.size.pt
                                }).withBold({
                                    descriptor: visualTooltipProps.bold,
                                    value: titleFontProperties.weight === CssConstants.en
                                }).withItalic({
                                    descriptor: visualTooltipProps.italic,
                                    value: titleFontProperties.style === CssConstants.BF
                                }).withUnderline({
                                    descriptor: visualTooltipProps.underline,
                                    value: titleFontProperties.textDecoration === CssConstants.f0
                                }).build();
                                return featureSwitches.defaultTooltipFormatting && cardBuilder.addGroup("text", function(groupBuilder) {
                                    groupBuilder.withDisplayName("Text").addCompositeSlice("font", "Font", fontControl).addSimpleSlice("labelColor", function() {
                                        return new build_control_util.BT({
                                            descriptor: useEnhancedTooltips ? visualTooltipProps.themedTitleFontColor : visualTooltipProps.titleFontColor,
                                            value: {
                                                value: titleFontProperties.color
                                            }
                                        }).build();
                                    }, function(sliceBuilder) {
                                        return sliceBuilder.withCustomDisplayName("Role_DisplayName_LabelColor");
                                    }).addSimpleSlice("valueColor", function() {
                                        return new build_control_util.BT({
                                            descriptor: useEnhancedTooltips ? visualTooltipProps.themedValueFontColor : visualTooltipProps.valueFontColor,
                                            value: {
                                                value: valueFontProperties.color
                                            }
                                        }).build();
                                    }, function(sliceBuilder) {
                                        return sliceBuilder.withCustomDisplayName("Value_Color");
                                    }), useEnhancedTooltips && groupBuilder.addSimpleSlice("drillTextAndIconColor", new build_control_util.BT({
                                        descriptor: visualTooltipProps.actionFontColor,
                                        value: {
                                            value: actionFontProperties.color
                                        }
                                    }).build(), function(sliceBuilder) {
                                        return sliceBuilder.withCustomDisplayName("Visual_Action_FontColor");
                                    });
                                }).addGroup("background", function(groupBuilder) {
                                    groupBuilder.withDisplayName("Visual_Background").addSimpleSlice("color", function() {
                                        var fillValue = visualTooltipStyle.background;
                                        return new build_control_util.BT({
                                            descriptor: useEnhancedTooltips ? visualTooltipProps.themedBackground : visualTooltipProps.background,
                                            value: {
                                                value: fillValue && fillValue.solid && fillValue.solid.color
                                            },
                                            isNoFillItemSupported: !0
                                        }).build();
                                    }, function(sliceBuilder) {
                                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                                    }).addSimpleSlice("transparency", build_control_util.JN.getTransparencySliderBuilder({
                                        descriptor: visualTooltipProps.transparency,
                                        value: visualTooltipStyle.transparency,
                                        localize
                                    }).build());
                                }), cardBuilder.build();
                            }
                        }
                    }
                }
            }, CanvasItemFormattingService.prototype.getAltTextCard = function(_a) {
                var _this = this, allowConditionalFormatting = _a.allowConditionalFormatting, evaluatedObjects = _a.evaluatedObjects, altTextProps = _a.props.general, cardBuilder = new build_control_util.CQ(new build_control_util.lg("altText"), "Visual_General_Properties_Description", [ altTextProps.altText ], function(key) {
                    return _this.localizationService.get(key);
                });
                return cardBuilder.addGroup(void 0, function(groupBuilder) {
                    groupBuilder.addSimpleSlice("altText", function() {
                        var altTextObject = evaluatedObjects && evaluatedObjects[altTextProps.altText.objectName], altText = altTextObject && altTextObject.altText || "";
                        return new build_control_util.Jr({
                            descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, altTextProps.altText), {
                                instanceKind: allowConditionalFormatting && 3
                            }),
                            value: altText,
                            placeholder: "Visual_General_Properties_Description_Placeholder",
                            localize: function(key) {
                                return _this.localizationService.get(key);
                            }
                        }).build();
                    });
                }), cardBuilder.build();
            }, CanvasItemFormattingService.prototype.getVisualLevelFormattingCard = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualContainer, vcCardBuildOptions;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return (0, visualContainerGroup2.q4)(visualContainer = options.container) || !(vcCardBuildOptions = options).visualKind.isQueryVisual || vcCardBuildOptions.isQueryVisualWithoutData ? [ 2 ] : [ 2, this.visualLevelFormatStringHelperService.getVisualLevelFormatStringCard(visualContainer, vcCardBuildOptions.capabilities) ];
                    });
                });
            }, CanvasItemFormattingService.prototype.getFormatPaneSliceTransform = function(container) {
                var visualType, visualObjects, _this = this;
                if ((0, visualContainerGroup2.Vz)(container)) {
                    var config = container.config.singleVisual;
                    visualType = config.visualType, visualObjects = config.objects;
                }
                return function(formattingSlice, objectDescriptors, dynamicExpressionSupportOptions) {
                    return _this.formattingSliceTransformerService.transformFormattingSlice({
                        formattingSlice,
                        objectDescriptors,
                        visualType,
                        visualObjects,
                        dynamicExpressionSupportOptions
                    });
                };
            }, CanvasItemFormattingService.\u0275fac = function(t) {
                return new (t || CanvasItemFormattingService)(core["\u0275\u0275inject"](bookmark_service.F), core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](exploration_capabilities_service.U), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](FormattingSliceTransformerService), core["\u0275\u0275inject"](form_factor_provider_service.F), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](theme_service.f), core["\u0275\u0275inject"](view_mode_state_service.kc), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_operations_service.f), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visual_style_preset_service.A), core["\u0275\u0275inject"](VisualLevelFormatStringHelperService), core["\u0275\u0275inject"](formattingObjectDefinitionsService.h, 8));
            }, CanvasItemFormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: CanvasItemFormattingService,
                factory: CanvasItemFormattingService.\u0275fac
            }), CanvasItemFormattingService;
        }(), Subject = __webpack_require__(30794), map = __webpack_require__(14172), formattingModelUtil = __webpack_require__(61617), formatting_contracts = __webpack_require__(89535), visual_session_telemetry_utils = __webpack_require__(2863), explore_ui_authoring_constants = __webpack_require__(21302), explore_ui_dialogs_identifiers = __webpack_require__(78778), performance = __webpack_require__(29804), shapeMap_capabilities = __webpack_require__(22921), VisualContainerPropertyPlaceholders = [ {
            objectName: visualContainer2.fU.stylePreset.name.objectName,
            descriptor: visualContainer2.XW.stylePreset
        } ], VisualFormattingService = function() {
            function VisualFormattingService(analyticsFormattingService, dataSources, explorationNavigation, featureSwitchService, formattingSliceTransformerService, formFactor, legacyVisualFormattingService, localizationService, modernDialogService, runningVisualService, selectionService, visualAuthoring, visualPluginOperationsService, visualPluginService, formattingObjectDefinitionsService) {
                this.analyticsFormattingService = analyticsFormattingService, this.dataSources = dataSources, 
                this.explorationNavigation = explorationNavigation, this.featureSwitchService = featureSwitchService, 
                this.formattingSliceTransformerService = formattingSliceTransformerService, this.formFactor = formFactor, 
                this.legacyVisualFormattingService = legacyVisualFormattingService, this.localizationService = localizationService, 
                this.modernDialogService = modernDialogService, this.runningVisualService = runningVisualService, 
                this.selectionService = selectionService, this.visualAuthoring = visualAuthoring, 
                this.visualPluginOperationsService = visualPluginOperationsService, this.visualPluginService = visualPluginService, 
                this.formattingObjectDefinitionsService = formattingObjectDefinitionsService;
            }
            return VisualFormattingService.prototype.getFormattingModel = function(container) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var VisualSizeAndStyleCardPlaceholder, formatModel, analyticsModel;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return (0, visualContainerGroup2.q4)(container) ? (formatModel = {
                                cards: []
                            }, this.featureSwitchService.featureSwitches.onObject && (VisualSizeAndStyleCardPlaceholder = this.getVisualSizeAndStylePlaceholder(), 
                            formatModel.cards.push(VisualSizeAndStyleCardPlaceholder)), [ 2, formatModel ]) : [ 3, 1 ];

                          case 1:
                            return [ 4, this.getVisualFormatPaneViewModel(container) ];

                          case 2:
                            return formatModel = _b.sent(), this.featureSwitchService.featureSwitches.onObject && !this.isInMobileFormatting() ? [ 3, 3 ] : [ 2, formatModel ];

                          case 3:
                            return [ 4, this.analyticsFormattingService.getFormattingModel(container) ];

                          case 4:
                            return analyticsModel = _b.sent(), [ 2, (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formatModel), {
                                cards: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], formatModel.cards, !0), null !== (_a = null == analyticsModel ? void 0 : analyticsModel.cards) && void 0 !== _a ? _a : [], !0)
                            }) ];
                        }
                    });
                });
            }, VisualFormattingService.prototype.getPivotDisplayName = function(container) {
                return formatting_utils.um(container, this.featureSwitchService);
            }, VisualFormattingService.prototype.getRevertToDefaultMetadata = function(container) {
                return {
                    formattingSettingsString: "Formatting",
                    itemTypeDisplayName: this.getPivotDisplayName(container)
                };
            }, VisualFormattingService.prototype.saveProperties = function(changes, saveServices, container, parentActivity) {
                if ((0, visualContainerGroup2.q4)(container)) debug.fF.assertFail("Visual pivot does not support VisualContainerGroup"); else {
                    var currentCanvasLayout_1 = this.formFactor.getCurrentLayout();
                    if (this.featureSwitchService && this.featureSwitchService.featureSwitches.updateFormattingPaneObjects) {
                        var saveStartTime_1 = (0, performance.z)(), runningVisual = this.runningVisualService.getVisual(container), visualType_1 = container.config.singleVisual.visualType, visualObjectChanges = [];
                        debug.fF.assert(function() {
                            return _.every(changes, function(change) {
                                return null != change.visualUpdateSource;
                            });
                        }, "All changes should have a visual update source");
                        var changesByVisualUpdateSource = _.groupBy(changes, function(change) {
                            return change.visualUpdateSource;
                        });
                        for (var visualUpdateSource in changesByVisualUpdateSource) {
                            var propertySaveObjects = changesByVisualUpdateSource[visualUpdateSource].map(function(change) {
                                return formatting_utils.H8(change);
                            });
                            visualObjectChanges.push.apply(visualObjectChanges, runningVisual.onDataViewObjectChanged(propertySaveObjects, +visualUpdateSource, !0));
                        }
                        debug.fF.assertNonEmpty(visualObjectChanges, "There should be at least one visual object change");
                        var shouldSyncVisualFilterState_1, formattingSliceSaveObjects = visualObjectChanges.map(function(visualObjectChange) {
                            return formatting_utils.nH(container, visualObjectChange);
                        });
                        _.forEach(formattingSliceSaveObjects, function(change) {
                            shouldSyncVisualFilterState_1 || (shouldSyncVisualFilterState_1 = formatting_utils.m7(change.objectName, change.propertySlice.name, visualType_1, saveServices)), 
                            (0, visual_capabilities_slice_factory_helper.Sn)(change.objectName, change.propertySlice, container, saveServices, currentCanvasLayout_1, change.hasDynamicExpressionSupport);
                        }), shouldSyncVisualFilterState_1 && formatting_utils.zS(saveServices.visualSync, container);
                        var saveEndTime_1 = (0, performance.z)();
                        debug.fF.assert(function() {
                            return saveEndTime_1 - saveStartTime_1 < 50;
                        }, "Updating multiple object definitions should not take more than 50 milliseconds");
                    } else _.forEach(changes, function(change) {
                        (0, visual_capabilities_slice_factory_helper.Sn)(change.objectName, change.propertySlice, container, saveServices, currentCanvasLayout_1, change.hasDynamicExpressionSupport, !0);
                    });
                    saveServices.visualAuthoring.raiseVisualContainerChanged(container, {
                        parentContextActivity: parentActivity
                    });
                }
            }, VisualFormattingService.prototype.revertVisualSlicesToDefinitions = function(revertToDefaultDescriptorsWithCanvasItems, parentContextActivity) {
                this.revertVisualBasedSlicesToDefinitions(revertToDefaultDescriptorsWithCanvasItems, parentContextActivity), 
                this.featureSwitchService.featureSwitches.onObject && !this.isInMobileFormatting() && this.analyticsFormattingService.revertVisualSlicesToDefinitions(revertToDefaultDescriptorsWithCanvasItems, parentContextActivity);
            }, VisualFormattingService.prototype.revertVisualBasedSlicesToDefinitions = function(revertToDefaultDescriptorsWithCanvasItems, parentContextActivity) {
                for (var changedVisuals = [], _i = 0, descriptorsPerCanvasItem_1 = (0, formatting_utils.Wx)(revertToDefaultDescriptorsWithCanvasItems); _i < descriptorsPerCanvasItem_1.length; _i++) {
                    var descriptorPerCanvasItem = descriptorsPerCanvasItem_1[_i], canvasItem = descriptorPerCanvasItem.canvasItem;
                    changedVisuals.push(canvasItem);
                    var descriptors = descriptorPerCanvasItem.descriptors, definitions = void 0;
                    if ((0, visualContainerGroup2.Vz)(canvasItem)) {
                        var singleVisual = canvasItem.config.singleVisual;
                        (definitions = singleVisual.objects) || (singleVisual.objects = definitions = {});
                        var vcDefinitions = singleVisual.vcObjects;
                        if (vcDefinitions) {
                            for (var placeholdersToDelete = [], _loop_1 = function(placeholder) {
                                var placeholderDescriptorIndex = descriptors.findIndex(function(d) {
                                    return d.objectName === placeholder.objectName;
                                });
                                if (-1 === placeholderDescriptorIndex) return "continue";
                                var removedDescriptor = descriptors.splice(placeholderDescriptorIndex, 1)[0];
                                placeholdersToDelete.push(removedDescriptor);
                            }, _a = 0, VisualContainerPropertyPlaceholders_1 = VisualContainerPropertyPlaceholders; _a < VisualContainerPropertyPlaceholders_1.length; _a++) _loop_1(VisualContainerPropertyPlaceholders_1[_a]);
                            _.isEmpty(placeholdersToDelete) || formatting_utils.Aw(vcDefinitions, placeholdersToDelete);
                        }
                    } else (definitions = canvasItem.objects) || (canvasItem.objects = definitions = {});
                    if ((0, visualContainerGroup2.Vz)(canvasItem)) {
                        if (canvasItem.config.singleVisual.visualType === plugins.L.shapeMap.name) {
                            var fillRuleIndex = descriptors.findIndex(function(descriptor) {
                                return descriptor.objectName === shapeMap_capabilities.L.dataPoint.fillRule.objectName && descriptor.propertyName === shapeMap_capabilities.L.dataPoint.fillRule.propertyName;
                            });
                            fillRuleIndex > -1 && (descriptors.splice(fillRuleIndex, 1), (0, gradientUtils._8)("revertToDefault", !1, definitions));
                        }
                        formatting_utils.Aw(definitions, descriptors);
                    } else formatting_utils.Aw(definitions, descriptors);
                }
                this.visualAuthoring.raiseCanvasItemsChanged(changedVisuals, {
                    parentContextActivity
                });
            }, VisualFormattingService.prototype.getObjectDescriptors = function(container) {
                var visualDescriptors = this.getVisualObjectDescriptors(container);
                if (!this.featureSwitchService.featureSwitches.onObject || this.isInMobileFormatting()) return visualDescriptors;
                var analyticsDescriptors = this.analyticsFormattingService.getObjectDescriptors(container);
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualDescriptors), analyticsDescriptors);
            }, VisualFormattingService.prototype.getVisualObjectDescriptors = function(container) {
                if ((0, visualContainerGroup2.q4)(container)) return {};
                for (var objectDescriptors_1 = (0, tslib_es6.__assign)({}, this.visualPluginService.capabilities(container.config.singleVisual.visualType).objects), _loop_2 = function(placeholder) {
                    debug.fF.assert(function() {
                        return !objectDescriptors_1[placeholder.objectName];
                    }, "Existing descriptor"), objectDescriptors_1[placeholder.objectName] = placeholder.descriptor;
                }, _i = 0, VisualContainerPropertyPlaceholders_2 = VisualContainerPropertyPlaceholders; _i < VisualContainerPropertyPlaceholders_2.length; _i++) _loop_2(VisualContainerPropertyPlaceholders_2[_i]);
                return objectDescriptors_1;
            }, VisualFormattingService.prototype.getObjectDefinitions = function(container, useObjectsOverride) {
                var analyticsDefinitions, visualDefinitions = this.getVisualObjectDefinitions(container, useObjectsOverride);
                return this.featureSwitchService.featureSwitches.onObject && !this.isInMobileFormatting() && (analyticsDefinitions = this.analyticsFormattingService.getObjectDefinitions(container, useObjectsOverride)), 
                visualDefinitions && analyticsDefinitions ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, visualDefinitions), analyticsDefinitions) : visualDefinitions || analyticsDefinitions || void 0;
            }, VisualFormattingService.prototype.getVisualObjectDefinitions = function(container, useObjectsOverride) {
                if (!(0, visualContainerGroup2.q4)(container)) {
                    var visualObjects = void 0, vcObjects = void 0;
                    if (useObjectsOverride && this.formattingObjectDefinitionsService) visualObjects = this.formattingObjectDefinitionsService.getObjectDefinitions(container), 
                    vcObjects = this.formattingObjectDefinitionsService.getVcObjectDefinitions(container); else {
                        var singleVisual = container.config.singleVisual;
                        visualObjects = singleVisual.objects, vcObjects = singleVisual.vcObjects;
                    }
                    if (vcObjects) {
                        for (var appliedPlaceholder = !1, newDefinitions = (0, tslib_es6.__assign)({}, visualObjects || {}), _i = 0, VisualContainerPropertyPlaceholders_3 = VisualContainerPropertyPlaceholders; _i < VisualContainerPropertyPlaceholders_3.length; _i++) {
                            var placeholderObjectName = VisualContainerPropertyPlaceholders_3[_i].objectName, placeholderVCObject = vcObjects[placeholderObjectName];
                            placeholderVCObject && (appliedPlaceholder = !0, newDefinitions[placeholderObjectName] = placeholderVCObject);
                        }
                        if (appliedPlaceholder) return newDefinitions;
                    }
                    return visualObjects;
                }
            }, VisualFormattingService.prototype.getFormatPaneSliceTransform = function(container) {
                var visualType, visualObjects, _this = this;
                if ((0, visualContainerGroup2.Vz)(container)) {
                    var config = container.config.singleVisual;
                    visualType = config.visualType, visualObjects = config.objects;
                }
                return function(formattingSlice, objectDescriptors, dynamicExpressionSupportOptions) {
                    return _this.formattingSliceTransformerService.transformFormattingSlice({
                        formattingSlice,
                        objectDescriptors,
                        visualType,
                        visualObjects,
                        dynamicExpressionSupportOptions
                    });
                };
            }, VisualFormattingService.prototype.resolvePlaceholder = function(placeholder, container) {
                if (!(0, visualContainerGroup2.q4)(container)) {
                    var runningVisual = this.runningVisualService.getVisual(container), visual = this.getVisualAdapter(runningVisual), item = visual && visual.resolveFormattingPlaceholder && visual.resolveFormattingPlaceholder(placeholder);
                    return item ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, item), {
                        objectDescriptors: this.getObjectDescriptors(container)
                    }) : placeholder.suppressDefaultValue ? void debug.fF.assertFail("Expected either a placeholder or default value being suppressed") : this.resolvePlaceholderDefault(placeholder);
                }
                debug.fF.assertFail("Unexpected placeholder");
            }, VisualFormattingService.prototype.resolvePlaceholderDefault = function(placeholder) {
                if ((0, build_control_util.ie)(placeholder)) debug.fF.assertNever(placeholder.name); else if ((0, 
                build_control_util.LY)(placeholder)) debug.fF.assertNever(placeholder.name); else if ((0, 
                build_control_util.n$)(placeholder)) switch (placeholder.name) {
                  case "responsive":
                    return this.resolveResponsivePlaceholder();

                  case "dataVolume":
                    return;

                  default:
                    debug.fF.assertNever(placeholder.name);
                } else debug.fF.assertFail("Unexpected placeholder type");
            }, VisualFormattingService.prototype.resolveResponsivePlaceholder = function() {
                var _this = this, defaultResponsiveIdentifier = cartesian_capabilities.p.general.responsive, defaultResponsiveObjectDescriptors = {
                    general: {
                        properties: {
                            responsive: dataViewObjectProperties.iD.responsive
                        }
                    }
                };
                return {
                    item: new build_control_util.vi({
                        uidBuilder: new build_control_util.IN(new build_control_util.SS(new build_control_util.lg("visualPlaceholderCard"), "visualPlaceholderGroup"), "responsive"),
                        control: new build_control_util.bd({
                            descriptor: defaultResponsiveIdentifier,
                            value: !1
                        }).build(),
                        localize: function(key) {
                            return _this.localizationService.get(key);
                        }
                    }).withDisabled(!0).build(),
                    objectDescriptors: defaultResponsiveObjectDescriptors,
                    revertToDefaultDescriptors: [ defaultResponsiveIdentifier ]
                };
            }, VisualFormattingService.prototype.getVisualAdapter = function(runningVisual) {
                return runningVisual && runningVisual.getAdapter();
            }, VisualFormattingService.prototype.getModelUnavailableInformation = function(container) {
                if (!container) return {
                    messageKey: "PropertyPane_Unavailable"
                };
                if ((0, visualContainerGroup2.q4)(container)) return {
                    messageKey: void 0
                };
                if ((0, utils_visualContainerUtils.LR)(this.visualPluginService, this.visualPluginOperationsService, container)) return {
                    messageKey: "Add_Data_To_Visual"
                };
                if (formatting_utils.D1(container)) return {
                    messageKey: "UnhideVisual"
                };
                var runningVisual = this.runningVisualService.getVisual(container);
                return null == (runningVisual && runningVisual.getAdapter()) ? {
                    messageKey: "PropertyPane_VisualErrorMessage"
                } : runningVisual.getHasPendingChanges() ? {
                    messageKey: "Formatting_Pane_Disabled_Paused"
                } : {
                    messageKey: "PropertyPane_Unavailable"
                };
            }, VisualFormattingService.prototype.getVisualFormatPaneViewModel = function(visualContainer) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var formattingModel, runningVisual, isQueryVisualWithoutData, visual, _c, titleCardPlaceholder, VisualSizeAndStyleCardPlaceholder, formattingModelMessage, warnings, warnings$;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return formatting_utils.D1(visualContainer) ? [ 2, {
                                cards: []
                            } ] : (isQueryVisualWithoutData = (0, utils_visualContainerUtils.LR)(this.visualPluginService, this.visualPluginOperationsService, visualContainer)) ? [ 3, 6 ] : (runningVisual = this.runningVisualService.getVisual(visualContainer), 
                            null == (visual = this.getVisualAdapter(runningVisual)) || runningVisual.getHasPendingChanges() || runningVisual.getErrorInfo() ? [ 2, {
                                cards: []
                            } ] : runningVisual && runningVisual.getType() === visualContainer.config.singleVisual.visualType ? visual.getFormattingModelAsync ? [ 4, visual.getFormattingModelAsync() ] : [ 3, 2 ] : [ 3, 5 ]);

                          case 1:
                            return _c = _d.sent(), [ 3, 3 ];

                          case 2:
                            _c = null === (_a = visual.getFormattingModel) || void 0 === _a ? void 0 : _a.call(visual), 
                            _d.label = 3;

                          case 3:
                            return (formattingModel = _c) ? [ 3, 5 ] : [ 4, this.legacyVisualFormattingService.getFormattingModel(visualContainer) ];

                          case 4:
                            formattingModel = _d.sent(), _d.label = 5;

                          case 5:
                            formattingModel = this.filterOutAnalyticsCards(formattingModel), _d.label = 6;

                          case 6:
                            if (this.featureSwitchService.featureSwitches.onObject) titleCardPlaceholder = this.getTitlePlaceholder(), 
                            VisualSizeAndStyleCardPlaceholder = this.getVisualSizeAndStylePlaceholder(), formattingModel = (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingModel || {}), {
                                cards: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([ VisualSizeAndStyleCardPlaceholder ], isQueryVisualWithoutData ? [] : [ titleCardPlaceholder ], !0), null !== (_b = null == formattingModel ? void 0 : formattingModel.cards) && void 0 !== _b ? _b : [], !0)
                            }); else if (!formattingModel || 0 === formattingModel.cards.length) return [ 2, {
                                cards: []
                            } ];
                            return isQueryVisualWithoutData || (formattingModelMessage = this.getFormattingModelMessage(visualContainer), 
                            warnings = getVisualWarnings(runningVisual), warnings$ = runningVisual && runningVisual.getWarnings$().pipe((0, 
                            map.U)(function(warnings) {
                                return getCardWarnings(warnings);
                            })), (formattingModelMessage || warnings) && (formattingModel = (0, tslib_es6.__assign)((0, 
                            tslib_es6.__assign)({}, formattingModel), {
                                warnings,
                                warnings$
                            }))), [ 2, formattingModel ];
                        }
                    });
                });
            }, VisualFormattingService.prototype.getTitlePlaceholder = function() {
                return (0, build_control_util.UH)("title");
            }, VisualFormattingService.prototype.isInMobileFormatting = function() {
                return 1 === this.formFactor.getCurrentLayout();
            }, VisualFormattingService.prototype.getVisualSizeAndStylePlaceholder = function() {
                return (0, build_control_util.UH)("sizeAndStyle");
            }, VisualFormattingService.prototype.filterOutAnalyticsCards = function(formattingModel) {
                if (formattingModel) {
                    var formattingCards = formattingModel.cards.filter(function(card) {
                        return !card.analyticsPane;
                    });
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingModel), {
                        cards: formattingCards
                    });
                }
            }, VisualFormattingService.prototype.getFormattingModelMessage = function(container) {
                if (!(0, visualContainerGroup2.q4)(container)) {
                    var visualType = container.config.singleVisual.visualType, isShapeVisual = this.featureSwitchService.featureSwitches.shapeVisual, currentCanvasLayout = this.formFactor.getCurrentLayout();
                    if ("basicShape" === visualType && isShapeVisual && 1 !== currentCanvasLayout) {
                        var services_1 = this.createShowDialogServices();
                        return {
                            messageKey: "ConvertShape_PropPaneMessage",
                            action: {
                                key: "Convert",
                                fn: function() {
                                    return VisualFormattingService.showDialog(visualType, services_1, explore_ui_dialogs_identifiers.al);
                                }
                            }
                        };
                    }
                }
            }, VisualFormattingService.prototype.createShowDialogServices = function() {
                return {
                    dataSources: this.dataSources,
                    explorationNavigation: this.explorationNavigation,
                    localizationService: this.localizationService,
                    modernDialogService: this.modernDialogService,
                    selection: this.selectionService,
                    visualAuthoring: this.visualAuthoring
                };
            }, VisualFormattingService.showDialog = function(visualType, services, checkboxDialogToken) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var convertAllLabel, dialogTitleText, dialogMessage, allVisualContainers, visualTypes, convertTarget, dialogWidth, checkboxesConfig, localizedUndo, bindings, result, visualContainers, itemContainers, _i, itemContainers_1, container;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return allVisualContainers = [], visualTypes = [], "basicShape" === visualType && (convertAllLabel = "ConvertShape_DialogConvertAll", 
                            dialogTitleText = "ConvertShape_DialogTitle", dialogMessage = "ConvertShape_DialogMessage", 
                            allVisualContainers = services.explorationNavigation.getAllVisualContainers(visualType), 
                            visualTypes.push("basicShape"), convertTarget = "shape", dialogWidth = "340px"), 
                            checkboxesConfig = {
                                convertAll: {
                                    label: convertAllLabel
                                }
                            }, localizedUndo = services.localizationService.get("Undo"), bindings = {
                                titleText: dialogTitleText,
                                messageTemplate: services.localizationService.format(dialogMessage, "<b>" + localizedUndo + "</b>"),
                                okButtonText: "Convert",
                                cancelButtonText: "Cancel_ButtonText",
                                checkboxes: checkboxesConfig
                            }, [ 4, services.modernDialogService.openHostDialog({
                                dialogName: "CheckboxDialog",
                                componentName: checkboxDialogToken,
                                bindings,
                                config: {
                                    panelClass: [ "checkbox-dialog" ],
                                    width: dialogWidth,
                                    autoFocus: !0
                                }
                            }) ];

                          case 1:
                            return [ 4, _a.sent().afterClosed().toPromise() ];

                          case 2:
                            if (!(result = _a.sent()) || 0 !== result.result) return [ 2 ];
                            if (visualContainers = [], result.checkboxes.convertAll) visualContainers = allVisualContainers; else for (itemContainers = selectionUtils.UP.getSelectedCanvasItems(services.selection), 
                            _i = 0, itemContainers_1 = itemContainers; _i < itemContainers_1.length; _i++) (0, 
                            visualContainerGroup2.Vz)(container = itemContainers_1[_i]) && visualTypes.includes(container.config.singleVisual.visualType) && visualContainers.push(container);
                            return services.visualAuthoring.convertMultiple(visualContainers, services.dataSources.get(), convertTarget), 
                            [ 2 ];
                        }
                    });
                });
            }, VisualFormattingService.\u0275fac = function(t) {
                return new (t || VisualFormattingService)(core["\u0275\u0275inject"](AnalyticsFormattingService), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](FormattingSliceTransformerService), core["\u0275\u0275inject"](form_factor_provider_service.F), core["\u0275\u0275inject"](LegacyVisualFormattingService), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](dialog_service.x), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_operations_service.f), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](formattingObjectDefinitionsService.h, 8));
            }, VisualFormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualFormattingService,
                factory: VisualFormattingService.\u0275fac
            }), VisualFormattingService;
        }(), layout_authoring_service = __webpack_require__(63387), visual_sync_service = __webpack_require__(64370), context_activity_service = __webpack_require__(22292), drill_through_util = __webpack_require__(42587), contracts_section = __webpack_require__(40474), durationDisplayHelper = __webpack_require__(75570), parseEncodedDateTimeString = __webpack_require__(2911);
        function getChangeDetectionSlices(options, disableEditAddCDM, getSlices) {
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                var slices, dataSourcesService, conceptualSchemaProxy, localizationService, changeDetectionMeasure, telemetryService, dataSources, conceptualSchema, hasChangeDetectionMetaData, _i, _a, _b, _c, _loop_1, _d, _e, dialogLauncherCallback, displayName, linkButtonAriaValue, _this = this;
                return (0, tslib_es6.__generator)(this, function(_f) {
                    switch (_f.label) {
                      case 0:
                        return slices = [], dataSourcesService = options.dataSourcesService, conceptualSchemaProxy = options.conceptualSchemaProxy, 
                        localizationService = options.localizationService, changeDetectionMeasure = options.changeDetectionMeasure, 
                        telemetryService = options.telemetryService, debug.fF.assert(function() {
                            return !!dataSourcesService;
                        }, "options.dataSourcesService should not be null or undefined for CDM propertypane card"), 
                        debug.fF.assert(function() {
                            return !!conceptualSchemaProxy;
                        }, "options.conceptualSchemaProxy should not be null or undefined for CDM propertypane card"), 
                        debug.fF.assert(function() {
                            return !!changeDetectionMeasure;
                        }, "options.changeDetectionMeasure should not be null or undefined for CDM propertypane card"), 
                        dataSources = dataSourcesService.get(), [ 4, conceptualSchemaProxy.get(dataSources) ];

                      case 1:
                        if (!(conceptualSchema = _f.sent())) return [ 2, [] ];
                        for (hasChangeDetectionMetaData = !1, _i = 0, _a = conceptualSchema.schemas; _i < _a.length; _i++) for (_b = 0, 
                        _c = _a[_i].entities; _b < _c.length; _b++) for (_loop_1 = function(property) {
                            if (property.measure && property.measure.changeDetectionMetadata) {
                                var durationParsedResult = (0, parseEncodedDateTimeString.bW)(property.measure.changeDetectionMetadata.refreshInterval), parsedDuration_1 = (0, 
                                parseEncodedDateTimeString.ei)(durationParsedResult);
                                debug.fF.assert(function() {
                                    return 1 === parsedDuration_1.length;
                                }, " Expecting only 1 ISODurationString");
                                var duration = (0, durationDisplayHelper.u6)(parsedDuration_1[0], localizationService);
                                return slices = slices.concat(getSlices.getMeasureAndCheckEverySlices(property.name, duration, localizationService, disableEditAddCDM)), 
                                hasChangeDetectionMetaData = !0, "break";
                            }
                        }, _d = 0, _e = _c[_b].properties; _d < _e.length && "break" !== _loop_1(_e[_d]); _d++) ;
                        return options.explorationCapabilities.getCapabilities().disableChangeDetectionDialog || (dialogLauncherCallback = function() {
                            return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                return (0, tslib_es6.__generator)(this, function(_a) {
                                    return telemetryService.logEvent(events._m, {
                                        launchPoint: "PropertyPane"
                                    }), changeDetectionMeasure.showDialog(), [ 2 ];
                                });
                            });
                        }, displayName = (0, viewModelFactoryEx.Gf)((0, VisualsData_displayNameGetter.V)(hasChangeDetectionMetaData ? "ChangeDetectionEditLink" : "ChangeDetectionAddLink"), options.localizationService), 
                        linkButtonAriaValue = localizationService.get(hasChangeDetectionMetaData ? "Link_Button_Edit_Aria_Value" : "Link_Button_Add_Aria_Value"), 
                        slices.push(getSlices.getAddCDMDialogSlice(displayName, disableEditAddCDM, dialogLauncherCallback, linkButtonAriaValue))), 
                        [ 2, slices ];
                    }
                });
            });
        }
        function getFormattingSlices(options, disableEditAddCDM) {
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                return (0, tslib_es6.__generator)(this, function(_a) {
                    switch (_a.label) {
                      case 0:
                        return [ 4, getChangeDetectionSlices(options, disableEditAddCDM, {
                            getAddCDMDialogSlice: getModernAddCDMDialogSlice,
                            getMeasureAndCheckEverySlices: getModernMeasureAndCheckEverySlices
                        }) ];

                      case 1:
                        return [ 2, _a.sent() ];
                    }
                });
            });
        }
        function getModernAddCDMDialogSlice(displayName, disableEditAddCDM, dialogLauncherCallback, ariaValue) {
            var dialogLauncherDescriptor = contracts_section.js.pageRefresh.dialogLauncher;
            return (new build_control_util.q6).withDisplayName(displayName, void 0, !0).withUid(dialogLauncherDescriptor).withDisabled(disableEditAddCDM).withControlProperties(new build_control_util.Vc({
                descriptor: dialogLauncherDescriptor,
                value: dialogLauncherCallback,
                ariaLabel: ariaValue
            }).build()).build();
        }
        function getModernMeasureAndCheckEverySlices(measureName, duration, localizationService, disable) {
            var measureDescriptor = contracts_section.js.pageRefresh.measure, mesaureSlice = (new build_control_util.q6).withDisplayName(localizationService.get("NewMeasureName")).withUid(measureDescriptor).withDisabled(disable).withControlProperties(new build_control_util.G_({
                descriptor: measureDescriptor,
                value: measureName
            }).build()).build(), checkEveryDescriptor = contracts_section.js.pageRefresh.checkEvery;
            return [ mesaureSlice, (new build_control_util.q6).withDisplayName(localizationService.get("CheckEvery")).withUid(checkEveryDescriptor).withDisabled(disable).withControlProperties(new build_control_util.G_({
                descriptor: checkEveryDescriptor,
                value: duration
            }).build()).build() ];
        }
        var promiseFactory = __webpack_require__(14463), autoRefreshOption = __webpack_require__(6236), sectionAlignmentPosition = __webpack_require__(68507), sectionPageSize = __webpack_require__(9480), services_events = __webpack_require__(8590), podUtils = __webpack_require__(78417), filterPaneUtils = __webpack_require__(73795), StandaloneUtility1 = __webpack_require__(64329), typings = __webpack_require__(49977), sq_aggregation_operations_service = __webpack_require__(28199), telemetryHelpers = __webpack_require__(41114), DataGetPerspectives = telemetryHelpers.cx["PBI.Data.GetPerspectives"] = (0, 
        telemetryHelpers.b1)("PBI.Data.GetPerspectives"), contracts = __webpack_require__(80688), throwError = __webpack_require__(60225), take = __webpack_require__(48787), tap = __webpack_require__(17653), shareReplay = __webpack_require__(57243), error_service = __webpack_require__(81213), PerspectivesService = function() {
            function PerspectivesService(errorService, localizationService, perspectivesReader, telemetryService) {
                this.errorService = errorService, this.localizationService = localizationService, 
                this.perspectivesReader = perspectivesReader, this.telemetryService = telemetryService, 
                this.perspectivesCache = {};
            }
            return PerspectivesService.prototype.get = function(dataSources) {
                var _this = this, dsrDataSources = dataSources.filter(function(dataSource) {
                    return "dsr" === dataSource.type;
                }), dataSource = dsrDataSources[0];
                if (!dataSource) {
                    this.telemetryService.startEvent(DataGetPerspectives, {
                        dataSourceObjectId: ""
                    }).reject({
                        errorMessage: this.localizationService.get("Perspectives_NoValidDataSourceProvided"),
                        errorCode: "NoValidDataSourceProvided",
                        errorSource: "PowerBI"
                    });
                    var error = {
                        message: this.localizationService.get("Perspectives_NoValidDataSourceProvided"),
                        code: "NoValidDataSourceProvided",
                        details: {
                            source: "PowerBI"
                        }
                    };
                    return (0, throwError._)(error);
                }
                var telemetryEvent = this.telemetryService.startEvent(DataGetPerspectives, {
                    dataSourceObjectId: dataSource.objectId
                }), cacheEntry = this.perspectivesCache[dataSource.objectId];
                if (cacheEntry) return cacheEntry;
                var perspectives = this.perspectivesReader.get(dataSource).pipe((0, take.q)(1), (0, 
                tap.b)(function() {
                    return telemetryEvent.resolve();
                }, function(error) {
                    _this.perspectivesCache[dataSource.objectId] = void 0, telemetryEvent.reject({
                        errorMessage: error.message,
                        errorCode: error.code,
                        errorSource: "PowerBI"
                    }), _this.errorService.error(error.message, error.code, error.details);
                }), (0, shareReplay.d)(1));
                return this.perspectivesCache[dataSource.objectId] = perspectives, perspectives;
            }, PerspectivesService.\u0275fac = function(t) {
                return new (t || PerspectivesService)(core["\u0275\u0275inject"](error_service.T), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](contracts.c), core["\u0275\u0275inject"](Telemetry.y0));
            }, PerspectivesService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: PerspectivesService,
                factory: PerspectivesService.\u0275fac,
                providedIn: "root"
            }), PerspectivesService;
        }(), canvas_scale_service = __webpack_require__(84669), change_detection_measure_service = __webpack_require__(28016), event_bridge_service = __webpack_require__(11494), linguistic_schema_proxy_service = __webpack_require__(52298), resource_registration_service = __webpack_require__(16524), resource_loader_service = __webpack_require__(52121), trusted_visual_service = __webpack_require__(69071), PageFormattingService = function() {
            function PageFormattingService(promiseFactory, aggrOps, canvasScale, changeDetectionMeasure, conceptualSchemaProxy, contextActivityService, dataSources, displayNameService, eventBridge, explorationCapabilities, explorationNavigation, featureSwitchService, formattingSliceTransformerService, layoutAuthoring, lazyScoped, linguisticSchemaProxy, localizationService, perspectivesService, resourceLoader, resourceRegistration, telemetryService, themeService, undoRedo, visualAuthoring, visualPlugin, visualStylePresetService, visualSync, trustedVisualService) {
                var _this = this;
                this.promiseFactory = promiseFactory, this.aggrOps = aggrOps, this.canvasScale = canvasScale, 
                this.changeDetectionMeasure = changeDetectionMeasure, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.contextActivityService = contextActivityService, this.dataSources = dataSources, 
                this.displayNameService = displayNameService, this.eventBridge = eventBridge, this.explorationCapabilities = explorationCapabilities, 
                this.explorationNavigation = explorationNavigation, this.featureSwitchService = featureSwitchService, 
                this.formattingSliceTransformerService = formattingSliceTransformerService, this.layoutAuthoring = layoutAuthoring, 
                this.lazyScoped = lazyScoped, this.linguisticSchemaProxy = linguisticSchemaProxy, 
                this.localizationService = localizationService, this.perspectivesService = perspectivesService, 
                this.resourceLoader = resourceLoader, this.resourceRegistration = resourceRegistration, 
                this.telemetryService = telemetryService, this.themeService = themeService, this.undoRedo = undoRedo, 
                this.visualAuthoring = visualAuthoring, this.visualPlugin = visualPlugin, this.visualStylePresetService = visualStylePresetService, 
                this.visualSync = visualSync, this.trustedVisualService = trustedVisualService, 
                this.eventsSubscriptionManager = this.eventBridge.createChannelSubscriptionManager().subscribe(services_events.yVh, function() {
                    _this.previousSizeType = void 0, _this.sectionCustomWidth = void 0, _this.sectionCustomHeight = void 0;
                    var section = _this.explorationNavigation.getCurrentSection();
                    _this.isCustomPageSize = (0, propertyPaneUtils.Y9)(section.size, _this.explorationNavigation) === sectionPageSize.t.Custom;
                }), this.linkFieldTypeAsCategorized = {
                    value: "categorized",
                    displayName: this.localizationService.get("LinkField_AsAggregationDisabledText")
                }, this.linkFieldTypeAsSummarized = {
                    value: "summarized",
                    displayName: this.localizationService.get("LinkField_AsAggregationEnabledText")
                }, this.pageTypeOptions = [ {
                    displayName: this.localizationService.get("Standard"),
                    value: 0
                }, {
                    displayName: this.localizationService.get("Tooltip"),
                    value: 1
                }, {
                    displayName: this.localizationService.get("Drillthrough_OneWord"),
                    value: 2
                } ];
            }
            return PageFormattingService.prototype.ngOnDestroy = function() {
                this.eventsSubscriptionManager.unsubscribeAll();
            }, PageFormattingService.prototype.getFormattingModel = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var formattingCards, formattingModel, section, dataSources, conceptualSchema, conceptualCapabilities, _a, _b, exploration, _c, _d, supportChangeDetectionMeasureRefresh, _e, _f;
                    return (0, tslib_es6.__generator)(this, function(_g) {
                        switch (_g.label) {
                          case 0:
                            return formattingModel = {
                                cards: formattingCards = []
                            }, section = this.explorationNavigation.getCurrentSection(), dataSources = this.dataSources.get(), 
                            section && dataSources ? [ 4, this.conceptualSchemaProxy.get(dataSources) ] : [ 3, 6 ];

                          case 1:
                            return conceptualSchema = _g.sent(), conceptualCapabilities = _.map(conceptualSchema.schemas, function(s) {
                                return s.capabilities;
                            }).filter(function(s_capabilities) {
                                return !!s_capabilities;
                            }), _b = (_a = formattingCards).push, [ 4, this.populatePageInformation(section) ];

                          case 2:
                            return _b.apply(_a, [ _g.sent() ]), formattingCards.push(this.populateCanvasSettings(section)), 
                            formattingCards.push(this.populateCanvasBackground(section)), formattingCards.push(this.populateWallpaper(section)), 
                            formattingCards.push(this.populateFilterPane(section)), formattingCards.push(this.populateFilterCard(section)), 
                            this.explorationCapabilities.getCapabilities().disableInlineExplore ? [ 3, 4 ] : (exploration = this.explorationNavigation.getCurrentExploration()) && exploration.settings && exploration.settings.allowInlineExploration ? (_d = (_c = formattingCards).push, 
                            [ 4, this.populatePersonalizeVisual(section) ]) : [ 3, 4 ];

                          case 3:
                            _d.apply(_c, [ _g.sent() ]), _g.label = 4;

                          case 4:
                            return !this.featureSwitchService.featureSwitches.realTimeRefresh || this.featureSwitchService.featureSwitches.realTimeRefreshDisabled ? [ 3, 6 ] : _.some(conceptualCapabilities, function(c) {
                                return c.supportsFastRefresh;
                            }) ? (supportChangeDetectionMeasureRefresh = _.some(conceptualCapabilities, function(c) {
                                return c.supportChangeDetectionMeasureRefresh;
                            }), _f = (_e = formattingCards).push, [ 4, this.populatePageRefresh(section, supportChangeDetectionMeasureRefresh) ]) : [ 3, 6 ];

                          case 5:
                            _f.apply(_e, [ _g.sent() ]), _g.label = 6;

                          case 6:
                            return [ 2, formattingModel ];
                        }
                    });
                });
            }, PageFormattingService.prototype.getObjectDescriptors = function() {
                return contracts_section.C7;
            }, PageFormattingService.prototype.saveProperties = function(changes, saveServices) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var objectName, propertySlice, pagePropertyPaneSaveServices, exploration, section, newSizeType, shouldSetTooltipSectionType, savePageInformationTypePromise, newSliceValue, pageInformationTypePropertySlice, newTypeIsTooltip, newSectionType_1, savePageInformationTypeSlice, currentSizeType, savePageSizeTypeSlice, saveCustomPageWidthPromise, saveCustomPageHeightPromise, targetPageSize, pageSizeTypePropertySlice, pageSizeCardObjectName, customPageWidthPropertySlice, customPageHeightPropertySlice, values, newCustomWidth, newCustomHeight;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return debug.fF.assert(function() {
                                return 1 === _.size(changes);
                            }, "We do not support saving multiple property changes to the page right now. Add your support if need."), 
                            1 !== _.size(changes) ? [ 2 ] : (objectName = changes[0].objectName, propertySlice = changes[0].propertySlice, 
                            pagePropertyPaneSaveServices = this.getPagePropertyPaneSaveServices(), exploration = this.explorationNavigation.getCurrentExploration(), 
                            section = this.explorationNavigation.getCurrentSection(), propertySlice.name !== PagePropertyPaneConsts.PageSizeTypeName ? [ 3, 2 ] : (newSizeType = propertySlice.value, 
                            savePageSizeTypeSlice = this.savePageProperties(propertySlice, objectName, saveServices, pagePropertyPaneSaveServices), 
                            this.isCustomPageSize = newSizeType === sectionPageSize.t.Custom, newSizeType !== sectionPageSize.t.Tooltip && (this.previousSizeType = newSizeType), 
                            this.isCustomPageSize && (this.sectionCustomWidth = section.size.width, this.sectionCustomHeight = section.size.height), 
                            shouldSetTooltipSectionType = this.checkIfPageInformationTypeNeedsUpdate(newSizeType, section), 
                            savePageInformationTypePromise = void 0, shouldSetTooltipSectionType && (newSliceValue = !this.featureSwitchService.featureSwitches.onObject || (null === (_a = _.find(this.pageTypeOptions, function(option) {
                                return 1 === option.value;
                            })) || void 0 === _a ? void 0 : _a.value), pageInformationTypePropertySlice = (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, propertySlice), {
                                name: PagePropertyPaneConsts.PageInformationType,
                                value: newSliceValue
                            }), savePageInformationTypePromise = this.savePageProperties(pageInformationTypePropertySlice, PagePropertyPaneConsts.PageInformationCardName, saveServices, pagePropertyPaneSaveServices)), 
                            [ 4, Promise.all([ savePageInformationTypePromise, savePageSizeTypeSlice ]) ]));

                          case 1:
                            return [ 2, (values = _b.sent()).every(function(value) {
                                return value;
                            }) ];

                          case 2:
                            return propertySlice.name === PagePropertyPaneConsts.PageInformationType && _.isEmpty(section.visualContainers) ? (newTypeIsTooltip = void 0, 
                            this.featureSwitchService.featureSwitches.onObject ? (newSectionType_1 = propertySlice.value, 
                            debug.fF.assert(function() {
                                return null != newSectionType_1;
                            }, "propertyPaneSlice.value for page type cannot be null"), newTypeIsTooltip = 1 === newSectionType_1) : newTypeIsTooltip = propertySlice.value, 
                            savePageInformationTypeSlice = this.savePageProperties(propertySlice, objectName, saveServices, pagePropertyPaneSaveServices), 
                            currentSizeType = (0, propertyPaneUtils.Y9)(section.size, this.explorationNavigation), 
                            newTypeIsTooltip ? (this.isCustomPageSize = !1, null == this.previousSizeType && (this.previousSizeType = currentSizeType), 
                            currentSizeType === sectionPageSize.t.Custom && (this.sectionCustomWidth = section.size.width, 
                            this.sectionCustomHeight = section.size.height)) : this.isCustomPageSize = this.previousSizeType ? this.previousSizeType === sectionPageSize.t.Custom : currentSizeType === sectionPageSize.t.Custom, 
                            savePageSizeTypeSlice = void 0, saveCustomPageWidthPromise = void 0, saveCustomPageHeightPromise = void 0, 
                            this.checkIfSizeTypeNeedsUpdate(this.previousSizeType, newTypeIsTooltip, section, pagePropertyPaneSaveServices) ? (targetPageSize = newTypeIsTooltip ? sectionPageSize.t.Tooltip : this.previousSizeType, 
                            pageSizeTypePropertySlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, propertySlice), {
                                name: PagePropertyPaneConsts.PageSizeTypeName,
                                value: targetPageSize
                            }), [ 4, this.savePageProperties(pageSizeTypePropertySlice, pageSizeCardObjectName = PagePropertyPaneConsts.PageSizeCardName, saveServices, pagePropertyPaneSaveServices) ]) : [ 3, 4 ]) : [ 3, 6 ];

                          case 3:
                            savePageSizeTypeSlice = _b.sent(), newTypeIsTooltip || this.previousSizeType !== sectionPageSize.t.Custom || (null != this.sectionCustomWidth && section.size.width !== this.sectionCustomWidth && (customPageWidthPropertySlice = (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, propertySlice), {
                                name: PagePropertyPaneConsts.PageSizeWidthName,
                                value: this.sectionCustomWidth
                            }), saveCustomPageWidthPromise = this.savePageProperties(customPageWidthPropertySlice, pageSizeCardObjectName, saveServices, pagePropertyPaneSaveServices)), 
                            null != this.sectionCustomHeight && section.size.height !== this.sectionCustomHeight && (customPageHeightPropertySlice = (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, propertySlice), {
                                name: PagePropertyPaneConsts.PageSizeHeightName,
                                value: this.sectionCustomHeight
                            }), saveCustomPageHeightPromise = this.savePageProperties(customPageHeightPropertySlice, pageSizeCardObjectName, saveServices, pagePropertyPaneSaveServices))), 
                            _b.label = 4;

                          case 4:
                            return [ 4, Promise.all([ savePageInformationTypeSlice, saveCustomPageWidthPromise, saveCustomPageHeightPromise ]) ];

                          case 5:
                            return values = _b.sent(), [ 2, savePageSizeTypeSlice && values.every(function(value) {
                                return value;
                            }) ];

                          case 6:
                            return propertySlice.name === PagePropertyPaneConsts.PageSizeWidthName && (newCustomWidth = propertySlice.value, 
                            null != this.sectionCustomWidth && newCustomWidth === this.sectionCustomWidth || (this.sectionCustomWidth = newCustomWidth)), 
                            propertySlice.name === PagePropertyPaneConsts.PageSizeHeightName && (newCustomHeight = propertySlice.value, 
                            null != this.sectionCustomHeight && newCustomHeight === this.sectionCustomHeight || (this.sectionCustomHeight = newCustomHeight)), 
                            propertySlice.name !== contracts_section.js.pageInformation.pageInformationDrillthroughKeepAllFilters.propertyName ? [ 3, 8 ] : [ 4, this.saveDrillthroughFilterPassingModeUpdate(propertySlice.value, exploration, section) ];

                          case 7:
                            return _b.sent(), [ 2, !0 ];

                          case 8:
                            return propertySlice.name !== contracts_section.js.pageInformation.pageInformationDrillthroughCrossReportEnabled.propertyName ? [ 3, 10 ] : [ 4, this.saveDrillthroughCrossReportModeUpdate(propertySlice.value, exploration, section) ];

                          case 9:
                            return _b.sent(), [ 2, !0 ];

                          case 10:
                            return propertySlice.name !== contracts_section.js.pageInformation.pageInformationDrillthroughFields.propertyName ? [ 3, 12 ] : [ 4, this.saveDrillthroughFieldsUpdate(propertySlice.value, section) ];

                          case 11:
                            return [ 2, _b.sent() ];

                          case 12:
                            return changes[0].uid.includes("linkType-") ? (this.saveLinkFieldLinkTypeUpdate(section, changes[0]), 
                            [ 2, !0 ]) : [ 4, this.savePageProperties(propertySlice, objectName, saveServices, pagePropertyPaneSaveServices) ];

                          case 13:
                            return [ 2, _b.sent() ];
                        }
                    });
                });
            }, PageFormattingService.prototype.saveDrillthroughFilterPassingModeUpdate = function(keepAllFilters, exploration, section) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.lazyScoped.get(typings.Sz) ];

                          case 1:
                            return _a.sent().setDrillthroughFilterPassingMode(exploration, section, keepAllFilters), 
                            [ 2 ];
                        }
                    });
                });
            }, PageFormattingService.prototype.saveDrillthroughCrossReportModeUpdate = function(allowCrossReportDrillthrough, exploration, section) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.lazyScoped.get(typings.Sz) ];

                          case 1:
                            return _a.sent().setCrossReportDrillthrough(exploration, section, allowCrossReportDrillthrough), 
                            [ 2 ];
                        }
                    });
                });
            }, PageFormattingService.prototype.saveDrillthroughFieldsUpdate = function(updateInfo, section) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var update, removed, deletedFilterName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return (update = updateInfo.fromUpdate) ? "add" === update.type ? [ 2, !0 ] : (removed = !1, 
                        "delete" === update.type ? (deletedFilterName = update.deleted.metadata.boundFilter, 
                        _.isEmpty(deletedFilterName) || (removed = (0, filterPaneUtils.ku)(deletedFilterName, 1, section, this.visualAuthoring)), 
                        [ 2, removed ]) : [ 2, !1 ]) : [ 2 ];
                    });
                });
            }, PageFormattingService.prototype.saveLinkFieldLinkTypeUpdate = function(section, change) {
                var sliceUid = change.uid, searchIndex = sliceUid.lastIndexOf("linkType-"), filterName = sliceUid.substring(searchIndex + 9), matchingFilter = _.find(section.filters, function(filter) {
                    return filter.name === filterName;
                });
                matchingFilter && this.visualAuthoring.setLinkFieldAsAggregation(matchingFilter, {
                    scopeType: 1,
                    container: section
                }, change.propertySlice.value === this.linkFieldTypeAsSummarized.value);
            }, PageFormattingService.prototype.checkIfSizeTypeNeedsUpdate = function(previousSizeType, toggleEnabled, section, services) {
                if (!_.isEmpty(section.visualContainers)) return !1;
                var hasPreviousSizeType = void 0 !== previousSizeType, currentSizeType = (0, propertyPaneUtils.Y9)(section.size, services.explorationNavigation);
                return !(!toggleEnabled || currentSizeType === sectionPageSize.t.Tooltip) || !(toggleEnabled || !hasPreviousSizeType || currentSizeType === previousSizeType);
            }, PageFormattingService.prototype.checkIfPageInformationTypeNeedsUpdate = function(newSizeType, section) {
                return !(newSizeType !== sectionPageSize.t.Tooltip || 1 === section.type);
            }, PageFormattingService.prototype.revertPageSliceDefinitions = function(descriptors) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var exploration, section, definitions, explorationAuthoring, pageInformationProp, pageSizeProp;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return exploration = this.explorationNavigation.getCurrentExploration(), section = this.explorationNavigation.getCurrentSection(), 
                            (0, formatting_utils.Aw)(definitions = section.objects || {}, descriptors), section.objects = definitions, 
                            [ 4, this.lazyScoped.get(typings.Sz) ];

                          case 1:
                            return explorationAuthoring = _a.sent(), pageInformationProp = contracts_section.js.pageInformation.pageInformationType, 
                            pageSizeProp = contracts_section.js.pageSize.pageSizeTypes, descriptors && descriptors.some(function(descriptor) {
                                return descriptor.objectName === pageInformationProp.objectName;
                            }) ? [ 4, this.setPageInformationDefaultValues(exploration, section, explorationAuthoring) ] : [ 3, 3 ];

                          case 2:
                            _a.sent(), _a.label = 3;

                          case 3:
                            return descriptors && descriptors.some(function(descriptor) {
                                return descriptor.objectName === pageSizeProp.objectName;
                            }) ? [ 4, this.setPageSizeDefaultValues(exploration, section, explorationAuthoring) ] : [ 3, 5 ];

                          case 4:
                            _a.sent(), _a.label = 5;

                          case 5:
                            return this.eventBridge.publishToChannel(services_events.H8N, section), [ 2 ];
                        }
                    });
                });
            }, PageFormattingService.prototype.setPageInformationDefaultValues = function(exploration, section, explorationAuthoring) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return 0 === section.type ? [ 3, 2 ] : (savePageInformationType(0, explorationAuthoring, exploration, section, this.featureSwitchService.featureSwitches.onObject), 
                            this.checkIfSizeTypeNeedsUpdate(this.previousSizeType, !1, section, this.getPagePropertyPaneSaveServices()) ? [ 4, this.setPageSizeDefaultValues(exploration, section, explorationAuthoring) ] : [ 3, 2 ]);

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return exploration && exploration.pods ? [ 4, (0, podUtils.QU)(exploration, section.name, this.linguisticSchemaProxy) ] : [ 3, 4 ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, PageFormattingService.prototype.setPageSizeDefaultValues = function(exploration, section, explorationAuthoring) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var defaultSizeType;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return savePageSizeType(sectionPageSize.t.Widescreen, section.size, this.eventBridge, explorationAuthoring, this.canvasScale.getDisplayOption()), 
                            this.isCustomPageSize = !1, this.previousSizeType = defaultSizeType = sectionPageSize.t.Widescreen, 
                            this.checkIfPageInformationTypeNeedsUpdate(defaultSizeType, section) ? [ 4, this.setPageInformationDefaultValues(exploration, section, explorationAuthoring) ] : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, PageFormattingService.prototype.getObjectDefinitions = function() {
                var section = this.explorationNavigation.getCurrentSection();
                return null == section ? void 0 : section.objects;
            }, PageFormattingService.prototype.getRevertToDefaultMetadata = function() {
                return {
                    formattingSettingsString: "Formatting",
                    itemTypeDisplayName: (0, formatting_utils.An)("Page", this.featureSwitchService)
                };
            }, PageFormattingService.prototype.isPageInformationDefaultValuesChanged = function() {
                var activeSection = this.explorationNavigation.getCurrentSection();
                if (1 & activeSection.type) return !0;
                if (2 & activeSection.type) return !0;
                var exploration = this.explorationNavigation.getCurrentExploration();
                return !(!exploration || !exploration.pods);
            }, PageFormattingService.prototype.isPageSizeDefaultValuesChanged = function() {
                var activeSection = this.explorationNavigation.getCurrentSection(), sizeType = (0, 
                propertyPaneUtils.Y9)(activeSection.size, this.explorationNavigation), defaultSectionSize = (0, 
                propertyPaneUtils.MO)(sectionPageSize.t.Widescreen);
                return !(!this.isCustomPageSize && sizeType === sectionPageSize.t.Widescreen) || activeSection.size.width !== defaultSectionSize.width || activeSection.size.height !== defaultSectionSize.height;
            }, PageFormattingService.prototype.getRevertToDefaultEnabled = function(revertToDefaultDescriptors, suppressedSaveObjects) {
                var objectDefinitions = this.getObjectDefinitions();
                if ((0, formatting_utils.wW)(revertToDefaultDescriptors, objectDefinitions, suppressedSaveObjects)) return !0;
                var pageInformationProp = contracts_section.js.pageInformation.pageInformationType;
                if (revertToDefaultDescriptors && revertToDefaultDescriptors.some(function(descriptor) {
                    return descriptor.objectName === pageInformationProp.objectName;
                }) && this.isPageInformationDefaultValuesChanged()) return !0;
                var pageSizeProp = contracts_section.js.pageSize.pageSizeTypes;
                return !(!revertToDefaultDescriptors || !revertToDefaultDescriptors.some(function(descriptor) {
                    return descriptor.objectName === pageSizeProp.objectName;
                }) || !this.isPageSizeDefaultValuesChanged());
            }, PageFormattingService.prototype.populatePageInformation = function(section) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var localize, pageInformationProps, pageInformationNameDescriptor, pageInformationTypeDescriptor, qnaPodEnabledDescriptor, altNameDescriptor, revertToDefaultDescriptors, cardUidBuilder, card, exploration, linguisticMetadata, defaultGroupBuilder, linkParameters_1, parameterFilterDisplayNameMappings, controlStates, sectionType, isRegularSection_1, linkFieldsLinkTypeGroup, getQnaGroup, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return localize = function(key) {
                                return _this.localizationService.get(key);
                            }, revertToDefaultDescriptors = [ pageInformationNameDescriptor = (pageInformationProps = contracts_section.js.pageInformation).pageInformationName, pageInformationTypeDescriptor = pageInformationProps.pageInformationType, qnaPodEnabledDescriptor = pageInformationProps.pageInformationQnaPodEnabled, altNameDescriptor = pageInformationProps.pageInformationAltName ], 
                            this.featureSwitchService.featureSwitches.onObject && revertToDefaultDescriptors.push.apply(revertToDefaultDescriptors, [ pageInformationProps.pageInformationDrillthroughKeepAllFilters, pageInformationProps.pageInformationDrillthroughCrossReportEnabled, pageInformationProps.pageInformationDrillthroughFields, pageInformationProps.pageInformationDrillthroughLinkFieldsLinkTypes ]), 
                            cardUidBuilder = new build_control_util.lg("pageInformation"), card = new build_control_util.CQ(cardUidBuilder, "PagePropertyPane_PageInformation", revertToDefaultDescriptors, localize).build(), 
                            exploration = this.explorationNavigation.getCurrentExploration(), [ 4, (0, podUtils._3)(exploration, section.name, this.linguisticSchemaProxy, this.promiseFactory) ];

                          case 1:
                            return linguisticMetadata = _a.sent(), defaultGroupBuilder = new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "pageInformation"), localize).addSimpleSlice(pageInformationNameDescriptor.propertyName, new build_control_util.fq({
                                descriptor: pageInformationNameDescriptor,
                                value: section.displayName,
                                placeholder: "",
                                validators: {
                                    required: {
                                        type: 2
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Name");
                            }), this.featureSwitchService.featureSwitches.onObject || (defaultGroupBuilder.addSimpleSlice(pageInformationTypeDescriptor.propertyName, new build_control_util.bd({
                                descriptor: pageInformationTypeDescriptor,
                                value: !!(1 & section.type)
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Allow_As_Tooltip").withCustomDescription("PagePropertyPane_PageInformation_Tooltip_Description");
                            }), defaultGroupBuilder.addSimpleSlice(qnaPodEnabledDescriptor.propertyName, new build_control_util.bd({
                                descriptor: qnaPodEnabledDescriptor,
                                value: !!linguisticMetadata
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Allow_Qna").withCustomDescription("PagePropertyPane_PageInformation_PodEnabled_Description");
                            }), linguisticMetadata && defaultGroupBuilder.addSimpleSlice(altNameDescriptor.propertyName, new build_control_util.Jr({
                                descriptor: altNameDescriptor,
                                value: linguisticMetadata.altNames ? linguisticMetadata.altNames.join(", ") : "",
                                placeholder: "Page_Synonyms_Placeholder",
                                localize
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Page_Synonyms");
                            }), card.groups.push(defaultGroupBuilder.build())), this.featureSwitchService.featureSwitches.onObject ? (linkParameters_1 = function(exploration, section) {
                                for (var _a, targetPodType = 1 === section.type ? 2 : 1, linkParameters = [], _i = 0, _b = null !== (_a = exploration.pods) && void 0 !== _a ? _a : []; _i < _b.length; _i++) {
                                    var pod = _b[_i];
                                    if (pod.type === targetPodType && pod.boundSection === section.name) for (var _c = 0, _d = pod.parameters; _c < _d.length; _c++) {
                                        var parameter = _d[_c];
                                        parameter.fieldExpr && linkParameters.push(parameter);
                                    }
                                }
                                return linkParameters;
                            }(exploration, section), [ 4, this.getLinkParameterFilterDisplayNameMappings(linkParameters_1, section) ]) : [ 3, 5 ];

                          case 2:
                            return parameterFilterDisplayNameMappings = _a.sent(), controlStates = this.getDrillthroughTooltipControlSettings(exploration, section), 
                            this.addDefaultGroupDrillthroughRelatedSlices(section, linkParameters_1, controlStates, defaultGroupBuilder), 
                            card.groups.push(defaultGroupBuilder.build()), isRegularSection_1 = null == (sectionType = section.type) || 0 === sectionType, 
                            debug.fF.assert(function() {
                                return !(isRegularSection_1 && !_.isEmpty(linkParameters_1));
                            }, "A section in null/Regular type and has drillthrough content should've been upgraded to Drillthrough type already!"), 
                            1 !== sectionType && 2 !== sectionType ? [ 3, 4 ] : [ 4, this.getLinkFieldsLinkTypeGroup(linkParameters_1, parameterFilterDisplayNameMappings, controlStates, cardUidBuilder, localize) ];

                          case 3:
                            linkFieldsLinkTypeGroup = _a.sent(), card.groups.push(linkFieldsLinkTypeGroup), 
                            _a.label = 4;

                          case 4:
                            getQnaGroup = this.getQnaGroup(linguisticMetadata, cardUidBuilder, localize), card.groups.push(getQnaGroup), 
                            _a.label = 5;

                          case 5:
                            return [ 2, card ];
                        }
                    });
                });
            }, PageFormattingService.prototype.addDefaultGroupDrillthroughRelatedSlices = function(section, linkParameters, drillthroughControlStates, groupBuilder) {
                var _this = this;
                if (this.featureSwitchService.featureSwitches.onObject) {
                    var selectedPageType = null != section.type ? section.type : 0, pageInformationProps = contracts_section.js.pageInformation, pageInformationTypeDescriptor = pageInformationProps.pageInformationType, pageInformationDrillthroughKeepAllFiltersDescriptor = pageInformationProps.pageInformationDrillthroughKeepAllFilters, pageInformationDrillthroughCrossReportDescriptor = pageInformationProps.pageInformationDrillthroughCrossReportEnabled, pageInformationDrillthroughFieldsDescriptor = pageInformationProps.pageInformationDrillthroughFields;
                    if (groupBuilder.addSimpleSlice(pageInformationTypeDescriptor.propertyName, new build_control_util.uY({
                        descriptor: pageInformationTypeDescriptor,
                        items: this.pageTypeOptions,
                        value: _.find(this.pageTypeOptions, function(option) {
                            return option.value === selectedPageType;
                        })
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("PagePropertyPane_PageType").withCustomDescription("PagePropertyPane_PageType_Tooltip");
                    }), 1 === selectedPageType || 2 === selectedPageType) {
                        groupBuilder.addSimpleSlice(pageInformationDrillthroughKeepAllFiltersDescriptor.propertyName, new build_control_util.bd({
                            descriptor: pageInformationDrillthroughKeepAllFiltersDescriptor,
                            value: drillthroughControlStates.keepAllFilters.value
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Drillthrough_KeepAllFilters").withCustomDescription(drillthroughControlStates.keepAllFilters.tooltip, !1).withDisabled(drillthroughControlStates.keepAllFilters.disabled);
                        }), 2 === selectedPageType && groupBuilder.addSimpleSlice(pageInformationDrillthroughCrossReportDescriptor.propertyName, new build_control_util.bd({
                            descriptor: pageInformationDrillthroughCrossReportDescriptor,
                            value: drillthroughControlStates.crossReportDrillthrough.value
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Drillthrough_CrossReportDrillthrough").withCustomDescription(drillthroughControlStates.crossReportDrillthrough.tooltip, !1);
                        });
                        var advancedFieldPickerProperties = {
                            descriptor: pageInformationDrillthroughFieldsDescriptor,
                            value: {
                                newExpr: _.map(linkParameters, function(parameter) {
                                    return {
                                        expr: parameter.fieldExpr,
                                        metadata: {
                                            boundFilter: parameter.boundFilter
                                        }
                                    };
                                }),
                                fromUpdate: {
                                    type: "initialize"
                                }
                            },
                            validators: void 0,
                            allowMultipleValues: !0,
                            disallowReplaceItems: !0,
                            getDropExprStrategy: {
                                getDropExpr: function(originalPickerExpr, _schema) {
                                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                        return (0, tslib_es6.__generator)(this, function(_a) {
                                            switch (_a.label) {
                                              case 0:
                                                return [ 4, this.tryCreateDrillthroughFilter(section, originalPickerExpr) ];

                                              case 1:
                                                return [ 2, _a.sent() ];
                                            }
                                        });
                                    });
                                },
                                getDroppedExprChildren: function(_droppedExpr, _position, _schema, _fromUpdate) {}
                            }
                        }, linkFieldsSlice = {
                            control: {
                                type: "FieldPicker",
                                properties: advancedFieldPickerProperties
                            },
                            displayName: drillthroughControlStates.linkFieldsDropZoneTitle,
                            uid: groupBuilder.uidBuilder.withSlice(pageInformationDrillthroughFieldsDescriptor.propertyName).build()
                        };
                        groupBuilder.addSlice(linkFieldsSlice);
                    }
                }
            }, PageFormattingService.prototype.getLinkParameterFilterDisplayNameMappings = function(linkParameters, section) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, mappings, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _.isEmpty(linkParameters) ? [ 2, {} ] : [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            return schema = _a.sent(), mappings = {}, _.forEach(linkParameters, function(parameter) {
                                var matchingFilter = _.find(section.filters, function(filter) {
                                    return filter.name === parameter.boundFilter;
                                }), filterDisplayName = (0, filterPaneUtils.eW)(matchingFilter, {
                                    scopeType: 1,
                                    container: section
                                }, schema, _this.aggrOps, _this.displayNameService, _this.localizationService, _this.visualPlugin);
                                mappings[parameter.name] = filterDisplayName;
                            }), [ 2, mappings ];
                        }
                    });
                });
            }, PageFormattingService.prototype.getLinkFieldsLinkTypeGroup = function(linkParameters, parameterFilterDisplayNameMappings, drillthroughControlStates, cardUidBuilder, localize) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var linkTypesGroupBuilder, schema, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return linkTypesGroupBuilder = new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "pageInformationDrillthroughLinkFieldsLinkTypes"), localize).withDisplayName(drillthroughControlStates.linkFieldsLinkTypeGroupTitle, !1), 
                            [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            return schema = _a.sent(), _.forEach(linkParameters, function(parameter) {
                                var asSummarized, supportsCategorized = !0, supportsSummarized = !0, linkFieldExpr = parameter.fieldExpr;
                                (0, sqExprStaticMembers.kb)(linkFieldExpr) ? (asSummarized = !0, supportsCategorized = !1) : sqExprUtils.m.discourageAggregation(linkFieldExpr, schema) ? (asSummarized = !1, 
                                supportsSummarized = !1) : asSummarized = parameter.asAggregation;
                                var linkTypeOptions = [];
                                supportsCategorized && linkTypeOptions.push(_this.linkFieldTypeAsCategorized), supportsSummarized && linkTypeOptions.push(_this.linkFieldTypeAsSummarized), 
                                linkTypesGroupBuilder.addSimpleSlice("linkType-" + parameter.boundFilter, new build_control_util.uY({
                                    descriptor: contracts_section.js.pageInformation.pageInformationDrillthroughLinkFieldsLinkTypes,
                                    items: linkTypeOptions,
                                    value: asSummarized ? _this.linkFieldTypeAsSummarized : _this.linkFieldTypeAsCategorized
                                }).build(), function(sliceBuilder) {
                                    debug.fF.assert(function() {
                                        return !_.isEmpty(parameterFilterDisplayNameMappings[parameter.name]);
                                    }, "there should be a corresponding filter display name for parameter " + parameter.name);
                                    var sliceDisplayName = _this.localizationService.format("PagePropertyPane_LinkField_LinkType_FieldName", parameterFilterDisplayNameMappings[parameter.name]);
                                    sliceBuilder.withCustomDisplayName(sliceDisplayName, !1);
                                });
                            }), _.isEmpty(linkParameters) && linkTypesGroupBuilder.withDisabled(!0, void 0), 
                            [ 2, linkTypesGroupBuilder.build() ];
                        }
                    });
                });
            }, PageFormattingService.prototype.getQnaGroup = function(linguisticMetadata, cardUidBuilder, localize) {
                var pageInformationProps = contracts_section.js.pageInformation, qnaPodEnabledDescriptor = pageInformationProps.pageInformationQnaPodEnabled, altNameDescriptor = pageInformationProps.pageInformationAltName;
                return new build_control_util.mQ(new build_control_util.SS(cardUidBuilder, "pageInformationQnaPodEnabled"), localize).withDisplayName("Allow_Qna").addTopLevelToggle(qnaPodEnabledDescriptor.propertyName, function() {
                    return new build_control_util.bd({
                        descriptor: qnaPodEnabledDescriptor,
                        value: !!linguisticMetadata
                    }).build();
                }).addSimpleSlice(altNameDescriptor.propertyName, new build_control_util.Jr({
                    descriptor: altNameDescriptor,
                    value: (null == linguisticMetadata ? void 0 : linguisticMetadata.altNames) ? linguisticMetadata.altNames.join(", ") : "",
                    placeholder: "Page_Synonyms_Placeholder",
                    localize
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withDisabled(!linguisticMetadata).withCustomDisplayName("Page_Synonyms");
                }).build();
            }, PageFormattingService.prototype.populateCanvasSettings = function(activeSection) {
                var _a, _this = this, localize = function(key) {
                    return _this.localizationService.get(key);
                }, pageSizeTypes = (_a = contracts_section.js.pageSize).pageSizeTypes, pageSizeHeight = _a.pageSizeHeight, pageSizeWidth = _a.pageSizeWidth, verticalAlignmentDescriptor = contracts_section.js.displayArea.verticalAlignment, cardBuilder = new build_control_util.CQ(new build_control_util.lg("pageSize"), "Canvas_Settings", [ pageSizeTypes, pageSizeHeight, pageSizeWidth, verticalAlignmentDescriptor ], localize), selectedPageType = this.isCustomPageSize ? sectionPageSize.t.Custom : (0, 
                propertyPaneUtils.Y9)(activeSection.size, this.explorationNavigation), selectionOptions = (0, 
                propertyPaneUtils.Iq)(sectionPageSize.D.members(), this.localizationService);
                selectedPageType === sectionPageSize.t.Dynamic && selectionOptions.unshift({
                    value: sectionPageSize.t.Dynamic,
                    displayName: localize("PagePropertyPane_PageSizeType_Dynamic")
                });
                var exploration = this.explorationNavigation.getCurrentExploration(), displayArea = activeSection.evaluatedObjects && activeSection.evaluatedObjects.displayArea, verticalAlignment = displayArea && displayArea.verticalAlignment;
                return void 0 === verticalAlignment && (verticalAlignment = exploration && exploration.evaluatedObjects && exploration.evaluatedObjects.section && exploration.evaluatedObjects.section.verticalAlignment), 
                void 0 === verticalAlignment && (verticalAlignment = sectionAlignmentPosition.XN), 
                cardBuilder.addGroup("pageSize", function(groupBuilder) {
                    groupBuilder.addSimpleSlice(pageSizeTypes.propertyName, new build_control_util.uY({
                        descriptor: pageSizeTypes,
                        items: selectionOptions,
                        value: selectionOptions.find(function(item) {
                            return item.value === selectedPageType;
                        })
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Type");
                    }).addSimpleSlice(pageSizeHeight.propertyName, new build_control_util.mu({
                        descriptor: pageSizeHeight,
                        value: activeSection.size.height,
                        options: {
                            maxValue: {
                                type: 1,
                                value: 9999
                            },
                            minValue: {
                                type: 0,
                                value: 1
                            },
                            unitSymbol: "Numeric_Pixel"
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("PagePropertyPane_PageSizeHeight").withDisabled(selectedPageType !== sectionPageSize.t.Custom);
                    }).addSimpleSlice(pageSizeWidth.propertyName, new build_control_util.mu({
                        descriptor: pageSizeWidth,
                        value: activeSection.size.width,
                        options: {
                            maxValue: {
                                type: 1,
                                value: 9999
                            },
                            minValue: {
                                type: 0,
                                value: 1
                            },
                            unitSymbol: "Numeric_Pixel"
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("PagePropertyPane_PageSizeWidth").withDisabled(selectedPageType !== sectionPageSize.t.Custom);
                    }).addSimpleSlice(verticalAlignmentDescriptor.propertyName, new build_control_util.uY({
                        descriptor: verticalAlignmentDescriptor,
                        value: verticalAlignment
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Alignment_Vertical");
                    });
                }).build();
            }, PageFormattingService.prototype.populateCanvasBackground = function(activeSection) {
                var _this = this, localize = function(key) {
                    return _this.localizationService.get(key);
                }, background = activeSection.evaluatedObjects && activeSection.evaluatedObjects[PagePropertyPaneConsts.PageBackgroundCardName], defaultBackgroundColor = constants.tb, defaultTransparency = constants.nW, color = (0, 
                fill.Gl)(null == background ? void 0 : background.color) ? background.color.solid.color : defaultBackgroundColor, revertToDefaultPropertyIdentifiers = contracts_section.js.background, colorDescriptor = revertToDefaultPropertyIdentifiers.color, imageDescriptor = revertToDefaultPropertyIdentifiers.image, transparencyDescriptor = revertToDefaultPropertyIdentifiers.transparency;
                return new build_control_util.CQ(new build_control_util.lg("background"), "Canvas_Background", [ colorDescriptor, imageDescriptor, transparencyDescriptor ], localize).withDescription("Area_Beneath_Visual").addGroup("background", function(groupBuilder) {
                    var _a;
                    groupBuilder.addSimpleSlice(colorDescriptor.propertyName, new build_control_util.BT({
                        descriptor: colorDescriptor,
                        value: {
                            value: color
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice(imageDescriptor.propertyName, new build_control_util.bD({
                        descriptor: imageDescriptor,
                        value: background && background.image
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Image");
                    }).addSimpleSlice(transparencyDescriptor.propertyName, build_control_util.JN.getTransparencySliderBuilder({
                        descriptor: transparencyDescriptor,
                        value: null !== (_a = null == background ? void 0 : background.transparency) && void 0 !== _a ? _a : defaultTransparency,
                        localize
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Transparency");
                    });
                }).build();
            }, PageFormattingService.prototype.populateWallpaper = function(activeSection) {
                var _this = this, localize = function(key) {
                    return _this.localizationService.get(key);
                }, background = activeSection.evaluatedObjects && activeSection.evaluatedObjects[PagePropertyPaneConsts.OutspaceBackgroundCardName], defaultBackgroundColor = constants.hH, defaultTransparency = constants.Dd, color = (0, 
                fill.Gl)(null == background ? void 0 : background.color) ? background.color.solid.color : defaultBackgroundColor, revertToDefaultPropertyIdentifiers = contracts_section.js.outspace, colorDescriptor = revertToDefaultPropertyIdentifiers.color, imageDescriptor = revertToDefaultPropertyIdentifiers.image, transparencyDescriptor = revertToDefaultPropertyIdentifiers.transparency;
                return new build_control_util.CQ(new build_control_util.lg("outspace"), "PagePropertyPane_Outspace", [ colorDescriptor, imageDescriptor, transparencyDescriptor ], localize).withDescription("Area_Behind_Canvas").addGroup("outspace", function(groupBuilder) {
                    var _a;
                    groupBuilder.addSimpleSlice(colorDescriptor.propertyName, new build_control_util.BT({
                        descriptor: colorDescriptor,
                        value: {
                            value: color
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice(imageDescriptor.propertyName, new build_control_util.bD({
                        descriptor: imageDescriptor,
                        value: background && background.image
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Image");
                    }).addSimpleSlice(transparencyDescriptor.propertyName, build_control_util.JN.getTransparencySliderBuilder({
                        descriptor: transparencyDescriptor,
                        value: null !== (_a = null == background ? void 0 : background.transparency) && void 0 !== _a ? _a : defaultTransparency,
                        localize
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Transparency");
                    });
                }).build();
            }, PageFormattingService.prototype.populatePageRefresh = function(activeSection, supportChangeDetectionMeasureRefresh) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var localize, pageRefresh, show, revertToDefaultPropertyIdentifiers, showDescriptor, refreshTypeDescriptor, durationDescriptor, dialogLauncherDescriptor, measureDescriptor, checkEveryDescriptor, cardBuilder, duration, refreshType, isRefreshTypeSliceAdded, refreshTypesOptions, slices, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return localize = function(key) {
                                return _this.localizationService.get(key);
                            }, show = (pageRefresh = activeSection.evaluatedObjects && activeSection.evaluatedObjects.pageRefresh || {
                                show: !1,
                                duration: constants.oK,
                                refreshType: autoRefreshOption.wO
                            }).show || !1, showDescriptor = (revertToDefaultPropertyIdentifiers = contracts_section.js.pageRefresh).show, 
                            refreshTypeDescriptor = revertToDefaultPropertyIdentifiers.refreshType, durationDescriptor = revertToDefaultPropertyIdentifiers.duration, 
                            dialogLauncherDescriptor = revertToDefaultPropertyIdentifiers.dialogLauncher, measureDescriptor = revertToDefaultPropertyIdentifiers.measure, 
                            checkEveryDescriptor = revertToDefaultPropertyIdentifiers.checkEvery, cardBuilder = new build_control_util.CQ(new build_control_util.lg("pageRefresh"), "PageRefresh", [ showDescriptor, refreshTypeDescriptor, durationDescriptor, dialogLauncherDescriptor, measureDescriptor, checkEveryDescriptor ], localize), 
                            duration = pageRefresh.duration || constants.oK, refreshType = pageRefresh.refreshType || autoRefreshOption.wO, 
                            supportChangeDetectionMeasureRefresh || (refreshType = autoRefreshOption.wO), refreshTypesOptions = supportChangeDetectionMeasureRefresh ? [ autoRefreshOption.wO, autoRefreshOption.kj ] : [ autoRefreshOption.wO ], 
                            (isRefreshTypeSliceAdded = this.featureSwitchService.featureSwitches.changeDetection) && refreshType === autoRefreshOption.kj ? [ 4, getFormattingSlices({
                                localizationService: this.localizationService,
                                dataSourcesService: this.dataSources,
                                changeDetectionMeasure: this.changeDetectionMeasure,
                                conceptualSchemaProxy: this.conceptualSchemaProxy,
                                explorationCapabilities: this.explorationCapabilities,
                                telemetryService: this.telemetryService
                            }, !show) ] : [ 3, 2 ];

                          case 1:
                            slices = _a.sent(), _a.label = 2;

                          case 2:
                            return [ 2, cardBuilder.addTopLevelToggle(showDescriptor.propertyName, function() {
                                return new build_control_util.bd({
                                    descriptor: showDescriptor,
                                    value: show
                                }).build();
                            }).addGroup("pageRefresh", function(groupBuilder) {
                                isRefreshTypeSliceAdded ? refreshType === autoRefreshOption.wO ? (_this.createRefreshTypeSlice(groupBuilder, refreshTypeDescriptor, "".concat(refreshType), refreshTypesOptions), 
                                _this.createDurationSlice(groupBuilder, durationDescriptor, duration)) : _this.createRefreshTypeSlice(groupBuilder, refreshTypeDescriptor, "".concat(refreshType), refreshTypesOptions) : _this.createDurationSlice(groupBuilder, durationDescriptor, duration), 
                                isRefreshTypeSliceAdded && refreshType === autoRefreshOption.kj && groupBuilder.addSlices(slices);
                            }).build() ];
                        }
                    });
                });
            }, PageFormattingService.prototype.createDurationSlice = function(groupBuilder, durationDescriptor, duration) {
                groupBuilder.addSimpleSlice(durationDescriptor.propertyName, new build_control_util.Cv({
                    descriptor: durationDescriptor,
                    value: duration,
                    validators: {
                        min: "PT1S",
                        max: "P24D",
                        integer: !0
                    }
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("AutoPageRefreshInterval");
                });
            }, PageFormattingService.prototype.createRefreshTypeSlice = function(groupBuilder, refreshTypeDescriptor, refreshType, refreshTypesOptions) {
                groupBuilder.addSimpleSlice(refreshTypeDescriptor.propertyName, new build_control_util.uY({
                    descriptor: refreshTypeDescriptor,
                    value: refreshType,
                    filterValues: refreshTypesOptions
                }).build(), function(sliceBuilder) {
                    return sliceBuilder.withCustomDisplayName("AutoPageRefreshType");
                });
            }, PageFormattingService.prototype.populatePersonalizeVisual = function(activeSection) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var localize, revertToDefaultPropertyIdentifiers, showDescriptor, perspectiveRefDescriptor, applyToAllPagesDescriptor, cardBuilder, evaluatedPerspectiveRef, perspectives, validPerspectiveRef, perspectiveRef, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return localize = function(key) {
                                return _this.localizationService.get(key);
                            }, showDescriptor = (revertToDefaultPropertyIdentifiers = contracts_section.js.personalizeVisual).show, 
                            perspectiveRefDescriptor = revertToDefaultPropertyIdentifiers.perspectiveRef, applyToAllPagesDescriptor = revertToDefaultPropertyIdentifiers.applyToAllPages, 
                            cardBuilder = new build_control_util.CQ(new build_control_util.lg("personalizeVisual"), "VisualHeader_ShowPersonalizeVisualButton", [ showDescriptor, perspectiveRefDescriptor, applyToAllPagesDescriptor ], localize), 
                            evaluatedPerspectiveRef = null === (_b = null === (_a = activeSection.evaluatedObjects) || void 0 === _a ? void 0 : _a.personalizeVisual) || void 0 === _b ? void 0 : _b.perspectiveRef, 
                            [ 4, (0, property_pane_util.mI)(this.dataSources, this.perspectivesService, this.localizationService) ];

                          case 1:
                            return perspectives = _c.sent(), validPerspectiveRef = null != evaluatedPerspectiveRef && _.find(perspectives, function(perspective) {
                                return perspective.value === evaluatedPerspectiveRef;
                            }), perspectiveRef = (null == validPerspectiveRef ? void 0 : validPerspectiveRef.value) || "", 
                            [ 2, cardBuilder.addTopLevelToggle(showDescriptor.propertyName, function() {
                                var _a, _b, _c;
                                return new build_control_util.bd({
                                    descriptor: showDescriptor,
                                    value: null === (_c = null === (_b = null === (_a = null == activeSection ? void 0 : activeSection.evaluatedObjects) || void 0 === _a ? void 0 : _a.personalizeVisual) || void 0 === _b ? void 0 : _b.show) || void 0 === _c || _c
                                }).build();
                            }).addGroup("personalizeVisual", function(groupBuilder) {
                                groupBuilder.addSimpleSlice(perspectiveRefDescriptor.propertyName, new build_control_util.uY({
                                    descriptor: perspectiveRefDescriptor,
                                    items: perspectives,
                                    value: _.find(perspectives, function(perspective) {
                                        return perspective.value === perspectiveRef;
                                    })
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("PersonalizeVisual_PerspectivePropertyName");
                                }).addSimpleSlice(applyToAllPagesDescriptor.propertyName, new build_control_util.Vc({
                                    descriptor: applyToAllPagesDescriptor,
                                    value: function() {
                                        return _this.onApplyToAllPages(applyToAllPagesDescriptor);
                                    }
                                }).build(), function(sliceBuilder) {
                                    return sliceBuilder.withCustomDisplayName("PagePropertyPane_ApplyToAllPages").withSuppressDisplayName(!0);
                                });
                            }).build() ];
                        }
                    });
                });
            }, PageFormattingService.prototype.onApplyToAllPages = function(descriptor) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return this.saveProperties([ {
                            objectName: descriptor.objectName,
                            uid: "applyToAllPagesUid",
                            propertySlice: {
                                name: descriptor.propertyName,
                                type: {
                                    applyToAllPages: !0
                                },
                                value: !1
                            },
                            hasDynamicExpressionSupport: !1,
                            formattingSource: "Page",
                            visualUpdateSource: 0
                        } ], {
                            contextActivityService: this.contextActivityService,
                            explorationNavigation: this.explorationNavigation,
                            featureSwitchService: this.featureSwitchService,
                            layoutAuthoring: this.layoutAuthoring,
                            localizationService: this.localizationService,
                            resourceLoader: this.resourceLoader,
                            resourceRegistration: this.resourceRegistration,
                            telemetryService: this.telemetryService,
                            themeService: this.themeService,
                            undoRedo: this.undoRedo,
                            visualAuthoring: this.visualAuthoring,
                            visualPlugin: this.visualPlugin,
                            visualStylePresetService: this.visualStylePresetService,
                            visualSync: this.visualSync,
                            trustedVisualService: this.trustedVisualService
                        }), [ 2 ];
                    });
                });
            }, PageFormattingService.prototype.populateFilterPane = function(activeSection) {
                var _this = this, style = this.themeService.getVisualStyle(this.explorationNavigation.getCurrentExploration().themeCollection), outspacePane = activeSection.evaluatedObjects && activeSection.evaluatedObjects.outspacePane, localize = function(key) {
                    return _this.localizationService.get(key);
                }, revertToDefaultPropertyIdentifiers = contracts_section.js.outspacePane, textDescriptor = revertToDefaultPropertyIdentifiers.fontFamily, titleSizeDescriptor = revertToDefaultPropertyIdentifiers.titleSize, textIconDescriptor = revertToDefaultPropertyIdentifiers.foregroundColor, inputBoxDescriptor = revertToDefaultPropertyIdentifiers.inputBoxColor, headerDescriptor = revertToDefaultPropertyIdentifiers.headerSize, seacrhBoxdescriptor = revertToDefaultPropertyIdentifiers.searchTextSize, borderDescriptor = revertToDefaultPropertyIdentifiers.border, borderColorDescriptor = revertToDefaultPropertyIdentifiers.borderColor, backgroundColorDescriptor = revertToDefaultPropertyIdentifiers.backgroundColor, backgroundTransparencyDescriptor = revertToDefaultPropertyIdentifiers.transparency, widthDescriptor = revertToDefaultPropertyIdentifiers.width, checkboxColorDescriptor = revertToDefaultPropertyIdentifiers.checkboxAndApplyColor;
                return new build_control_util.CQ(new build_control_util.lg("outspacePane"), "Exploration_FilterPane", [ textDescriptor, titleSizeDescriptor, textIconDescriptor, inputBoxDescriptor, headerDescriptor, seacrhBoxdescriptor, borderDescriptor, borderColorDescriptor, backgroundColorDescriptor, backgroundTransparencyDescriptor, widthDescriptor, checkboxColorDescriptor ], localize).addGroup("text", function(groupBuilder) {
                    var value = outspacePane && null != outspacePane.foregroundColor ? outspacePane.foregroundColor.solid.color : style.colorPalette.foreground.value;
                    groupBuilder.withDisplayName("Text").addCompositeSlice(textDescriptor.propertyName, "Font", (new build_control_util.UN).withFontFamily({
                        descriptor: textDescriptor,
                        value: outspacePane && null != outspacePane.fontFamily ? "".concat(outspacePane.fontFamily) : constants.h9
                    }).withFontSizeProperties({
                        descriptor: titleSizeDescriptor,
                        value: outspacePane && null != outspacePane.titleSize ? outspacePane.titleSize : constants.Db,
                        options: {
                            maxValue: {
                                type: 1,
                                value: StandaloneUtility1.PR
                            },
                            minValue: {
                                type: 0,
                                value: StandaloneUtility1.Gj
                            }
                        }
                    }).build()).addSimpleSlice(textIconDescriptor.propertyName, new build_control_util.BT({
                        descriptor: textIconDescriptor,
                        value: {
                            value
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_And_IconsColor");
                    });
                }).addGroup("input", function(groupBuilder) {
                    var inputBoxColor = outspacePane && null != outspacePane.inputBoxColor ? outspacePane.inputBoxColor.solid.color : outspacePane && null != outspacePane.backgroundColor ? outspacePane.backgroundColor.solid.color : constants.$U;
                    groupBuilder.withDisplayName("Input").addSimpleSlice(inputBoxDescriptor.propertyName, new build_control_util.BT({
                        descriptor: inputBoxDescriptor,
                        value: {
                            value: inputBoxColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("PagePropertyPane_FilterCards_InputBoxColor");
                    });
                }).addGroup("header", function(groupBuilder) {
                    groupBuilder.withDisplayName("ThemeDialog_SubSection_Header").addSimpleSlice(headerDescriptor.propertyName, new build_control_util.mu({
                        descriptor: headerDescriptor,
                        value: outspacePane && null != outspacePane.headerSize ? outspacePane.headerSize : constants.SC,
                        options: {
                            maxValue: {
                                type: 1,
                                value: StandaloneUtility1.PR
                            },
                            minValue: {
                                type: 0,
                                value: StandaloneUtility1.Gj
                            },
                            unitSymbol: "Slider_Weight"
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("PagePropertyPane_OutspacePane_HeaderSize");
                    });
                }).addGroup("searchbox", function(groupBuilder) {
                    groupBuilder.withDisplayName("SearchBox").addSimpleSlice(seacrhBoxdescriptor.propertyName, new build_control_util.mu({
                        descriptor: seacrhBoxdescriptor,
                        value: outspacePane && null != outspacePane.searchTextSize ? outspacePane.searchTextSize : constants.D6,
                        options: {
                            maxValue: {
                                type: 1,
                                value: StandaloneUtility1.PR
                            },
                            minValue: {
                                type: 0,
                                value: StandaloneUtility1.Gj
                            },
                            unitSymbol: "Slider_Weight"
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("PagePropertyPane_OutspacePane_SearchTextSize");
                    });
                }).addGroup("border", function(groupBuilder) {
                    var borderColor = outspacePane && null != outspacePane.borderColor ? outspacePane.borderColor.solid.color : constants.JW;
                    groupBuilder.withDisplayName("Visual_Border").addTopLevelToggle(borderDescriptor.propertyName, function() {
                        return new build_control_util.bd({
                            descriptor: borderDescriptor,
                            value: outspacePane && null != outspacePane.border ? outspacePane.border : constants.zH
                        }).build();
                    }).addSimpleSlice(borderColorDescriptor.propertyName, new build_control_util.BT({
                        descriptor: borderColorDescriptor,
                        value: {
                            value: borderColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    });
                }).addGroup("background", function(groupBuilder) {
                    var _a, backgroundColor = outspacePane && null != outspacePane.backgroundColor ? outspacePane.backgroundColor.solid.color : style.colorPalette.background.value;
                    groupBuilder.withDisplayName("Visual_Background").addSimpleSlice(backgroundColorDescriptor.propertyName, new build_control_util.BT({
                        descriptor: backgroundColorDescriptor,
                        value: {
                            value: backgroundColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice(backgroundTransparencyDescriptor.propertyName, build_control_util.JN.getTransparencySliderBuilder({
                        descriptor: backgroundTransparencyDescriptor,
                        value: null !== (_a = null == outspacePane ? void 0 : outspacePane.transparency) && void 0 !== _a ? _a : constants.yX,
                        localize
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Transparency");
                    });
                }).addGroup("options", function(groupBuilder) {
                    var checkboxColor = outspacePane && null != outspacePane.checkboxAndApplyColor ? outspacePane.checkboxAndApplyColor.solid.color : constants.mC;
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice(widthDescriptor.propertyName, new build_control_util.mu({
                        descriptor: widthDescriptor,
                        value: outspacePane && null != outspacePane.width ? outspacePane.width : constants.vg,
                        options: {
                            maxValue: {
                                type: 1,
                                value: constants.Xj
                            },
                            minValue: {
                                type: 0,
                                value: constants.AA
                            },
                            unitSymbol: "Numeric_Pixel"
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Pane_Width");
                    }).addSimpleSlice(checkboxColorDescriptor.propertyName, new build_control_util.BT({
                        descriptor: checkboxColorDescriptor,
                        value: {
                            value: checkboxColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Apply_And_Checkboxes").withCustomDescription("Apply_And_Checkboxes_Tooltip");
                    });
                }).build();
            }, PageFormattingService.prototype.populateFilterCard = function(activeSection) {
                var _this = this, localize = function(key) {
                    return _this.localizationService.get(key);
                }, revertToDefaultPropertyIdentifiers = contracts_section.js.filterCard;
                return new build_control_util.CQ(new build_control_util.lg("filterCard"), "PagePropertyPane_FilterCards", [ revertToDefaultPropertyIdentifiers.fontFamily, revertToDefaultPropertyIdentifiers.textSize, revertToDefaultPropertyIdentifiers.foregroundColor, revertToDefaultPropertyIdentifiers.inputBoxColor, revertToDefaultPropertyIdentifiers.border, revertToDefaultPropertyIdentifiers.borderColor, revertToDefaultPropertyIdentifiers.backgroundColor, revertToDefaultPropertyIdentifiers.transparency ], localize).addGroup("applySettingsTo", function(groupBuilder) {
                    groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("state", function(containerBuilder) {
                        containerBuilder.withDisplayName("State").addContainerItem("default", localize("Default"), function(containerItemBuilder) {
                            return _this.generateFilterCardContainerItemBuilder(containerItemBuilder, activeSection, !1);
                        }).addContainerItem("applied", localize("PagePropertyPane_FilterCards_Applied"), function(containerItemBuilder) {
                            return _this.generateFilterCardContainerItemBuilder(containerItemBuilder, activeSection, !0);
                        });
                    });
                }).build();
            }, PageFormattingService.prototype.generateFilterCardContainerItemBuilder = function(containerItemBuilder, activeSection, isApplied) {
                var _this = this, style = this.themeService.getVisualStyle(this.explorationNavigation.getCurrentExploration().themeCollection), localize = function(key) {
                    return _this.localizationService.get(key);
                }, filterCard = activeSection.evaluatedObjects && activeSection.evaluatedObjects.filterCard, containerName = isApplied ? constants.ZF : constants.Kc, selector = {
                    id: containerName
                }, instance = filterCard && filterCard.$instances && filterCard.$instances[containerName];
                containerItemBuilder.addGroup("text", function(groupBuilder) {
                    var textDescriptor = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.fontFamily), {
                        selector
                    }), textAndIconColor = instance && null != instance.foregroundColor ? instance.foregroundColor.solid.color : style.colorPalette.foreground.value, textIconDescriptor = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.foregroundColor), {
                        selector
                    });
                    groupBuilder.withDisplayName("Text").addCompositeSlice(textDescriptor.propertyName, "Font", (new build_control_util.UN).withFontFamily({
                        descriptor: textDescriptor,
                        value: instance && null != instance.fontFamily ? "".concat(instance.fontFamily) : constants.h9
                    }).withFontSizeProperties({
                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.textSize), {
                            selector
                        }),
                        value: instance && null != instance.textSize ? instance.textSize : constants.JM,
                        options: {
                            maxValue: {
                                type: 1,
                                value: StandaloneUtility1.PR
                            },
                            minValue: {
                                type: 0,
                                value: StandaloneUtility1.Gj
                            }
                        }
                    }).build()).addSimpleSlice(textIconDescriptor.propertyName, new build_control_util.BT({
                        descriptor: textIconDescriptor,
                        value: {
                            value: textAndIconColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_And_IconsColor");
                    });
                }).addGroup("input", function(groupBuilder) {
                    var inputBoxDescriptor = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.inputBoxColor), {
                        selector
                    }), inputBoxColor = instance && null != instance.inputBoxColor ? instance.inputBoxColor.solid.color : constants.NC;
                    groupBuilder.withDisplayName("Input").addSimpleSlice(inputBoxDescriptor.propertyName, new build_control_util.BT({
                        descriptor: inputBoxDescriptor,
                        value: {
                            value: inputBoxColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("PagePropertyPane_FilterCards_InputBoxColor");
                    });
                }).addGroup("border", function(groupBuilder) {
                    var borderDescriptor = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.border), {
                        selector
                    }), borderColorDescriptor = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.borderColor), {
                        selector
                    }), borderColor = instance && null != instance.borderColor ? instance.borderColor.solid.color : constants.bm;
                    groupBuilder.withDisplayName("Visual_Border").addTopLevelToggle(borderDescriptor.propertyName, function() {
                        return new build_control_util.bd({
                            descriptor: borderDescriptor,
                            value: instance && null != instance.border ? instance.border : constants.HX
                        }).build();
                    }).addSimpleSlice(borderColorDescriptor.propertyName, new build_control_util.BT({
                        descriptor: borderColorDescriptor,
                        value: {
                            value: borderColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    });
                }).addGroup("background", function(groupBuilder) {
                    var _a, backgroundColorDescriptor = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.backgroundColor), {
                        selector
                    }), backgroundColor = instance && null != instance.backgroundColor ? instance.backgroundColor.solid.color : style.colorPalette.background.value, backgroundTransparencyDescriptor = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, contracts_section.js.filterCard.transparency), {
                        selector
                    });
                    groupBuilder.withDisplayName("Visual_Background").addSimpleSlice(backgroundColorDescriptor.propertyName, new build_control_util.BT({
                        descriptor: backgroundColorDescriptor,
                        value: {
                            value: backgroundColor
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice(backgroundTransparencyDescriptor.propertyName, build_control_util.JN.getTransparencySliderBuilder({
                        descriptor: backgroundTransparencyDescriptor,
                        value: null !== (_a = null == instance ? void 0 : instance.transparency) && void 0 !== _a ? _a : constants.$V,
                        localize
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Transparency");
                    });
                });
            }, PageFormattingService.prototype.getFormatPaneSliceTransform = function() {
                var _this = this;
                return function(formattingSlice, objectDescriptors, dynamicExpressionSupportOptions) {
                    return _this.formattingSliceTransformerService.transformFormattingSlice({
                        formattingSlice,
                        objectDescriptors,
                        visualType: void 0,
                        visualObjects: void 0,
                        dynamicExpressionSupportOptions
                    });
                };
            }, PageFormattingService.prototype.getPagePropertyPaneSaveServices = function() {
                return {
                    canvasScale: this.canvasScale,
                    eventBridge: this.eventBridge,
                    explorationNavigation: this.explorationNavigation,
                    lazyScoped: this.lazyScoped,
                    linguisticSchemaProxy: this.linguisticSchemaProxy,
                    promiseFactory: this.promiseFactory,
                    telemetryService: this.telemetryService,
                    undoRedo: this.undoRedo
                };
            }, PageFormattingService.prototype.getDrillthroughTooltipControlSettings = function(exploration, section) {
                return drill_through_util.F(exploration, section, drill_through_util.j(section.type, this.localizationService, !0), !1);
            }, PageFormattingService.prototype.tryCreateDrillthroughFilter = function(section, originalPickerExpr) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var newFilterName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, (0, filterPaneUtils.uE)(1, section, !0, this.dataSources, originalPickerExpr, this.visualAuthoring, !1) ];

                          case 1:
                            return newFilterName = _a.sent(), _.isEmpty(newFilterName) ? [ 2 ] : [ 2, {
                                expr: originalPickerExpr,
                                metadata: {
                                    boundFilter: newFilterName
                                }
                            } ];
                        }
                    });
                });
            }, PageFormattingService.prototype.savePageProperties = function(propertyPaneSlice, objectName, propertySliceSaveServices, services) {
                var _a, _b;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var exploration, section, currentSize, displayOption, defer, renameSectionArgs, altSectionNames_1, isOnObjectFSOn_1, sectionType_1, value, isApplyToAllPages, isDefault;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        return exploration = services.explorationNavigation.getCurrentExploration(), section = services.explorationNavigation.getCurrentSection(), 
                        currentSize = section.size, displayOption = services.canvasScale.getDisplayOption(), 
                        defer = services.promiseFactory.defer(), propertyPaneSlice.name === PagePropertyPaneConsts.PageInformationName ? (propertyPaneSlice.value ? (renameSectionArgs = {
                            sectionNewName: propertyPaneSlice.value,
                            sectionIndex: _.indexOf(exploration.sections, section)
                        }, services.eventBridge.publishToChannel(services_events.HOc, renameSectionArgs)) : propertyPaneSlice.value = section.displayName, 
                        defer.resolve(!1)) : propertyPaneSlice.name === PagePropertyPaneConsts.PageInformationQnaPodEnabled ? propertyPaneSlice.value ? services.undoRedo.register("ReportPagePodEnabled", function() {
                            (0, podUtils.k9)(exploration, section, services.linguisticSchemaProxy).then(function() {
                                return defer.resolve(!0);
                            });
                        }) : services.undoRedo.register("ReportPagePodDisabled", function() {
                            (0, podUtils.QU)(exploration, section.name, services.linguisticSchemaProxy).then(function() {
                                return defer.resolve(!0);
                            });
                        }) : propertyPaneSlice.name === PagePropertyPaneConsts.PageInformationAltName ? (altSectionNames_1 = propertyPaneSlice.value.split(/[,\n]/).map(function(s) {
                            return s.trim();
                        }).filter(function(e) {
                            return !_.isEmpty(e);
                        }), services.undoRedo.register("UpdateLinguisticAltNames", function() {
                            (0, podUtils.XY)(exploration, section, altSectionNames_1, services.linguisticSchemaProxy).then(function() {
                                return defer.resolve(!0);
                            });
                        })) : propertyPaneSlice.name === PagePropertyPaneConsts.PageInformationType ? ((isOnObjectFSOn_1 = propertySliceSaveServices.featureSwitchService.featureSwitches.onObject) ? (sectionType_1 = propertyPaneSlice.value, 
                        debug.fF.assert(function() {
                            return null != sectionType_1;
                        }, "propertyPaneSlice.value for page type cannot be null")) : sectionType_1 = propertyPaneSlice.value ? 1 : 0, 
                        services.lazyScoped.get(typings.Sz).then(function(explorationAuthoring) {
                            var newType;
                            savePageInformationType(sectionType_1, explorationAuthoring, exploration, section, isOnObjectFSOn_1), 
                            0 === sectionType_1 ? newType = "regular" : 2 === sectionType_1 ? newType = "drillthrough" : 1 === sectionType_1 ? newType = "tooltip" : debug.fF.assertFail("unhandled type " + sectionType_1), 
                            services.telemetryService.logEvent(events.Lo, {
                                objectName: PagePropertyPaneConsts.PageInformationCardName,
                                propertyName: propertyPaneSlice.name,
                                newValue: newType,
                                visualType: "page"
                            }), defer.resolve(!1);
                        })) : propertyPaneSlice.name === PagePropertyPaneConsts.PageSizeTypeName ? services.lazyScoped.get(typings.Sz).then(function(explorationAuthoring) {
                            savePageSizeType(propertyPaneSlice.value, currentSize, services.eventBridge, explorationAuthoring, displayOption), 
                            defer.resolve(!1);
                        }) : propertyPaneSlice.name === PagePropertyPaneConsts.PageSizeWidthName ? (value = propertySliceSaveServices.featureSwitchService.featureSwitches.useModernFormatPane ? propertyPaneSlice.value : propertyPaneSlice.value.value, 
                        services.eventBridge.publishToChannel(services_events.qHu, {
                            width: parseInt(value, 10),
                            height: currentSize.height,
                            displayOption
                        }), defer.resolve(!1)) : propertyPaneSlice.name === PagePropertyPaneConsts.PageSizeHeightName ? (value = propertySliceSaveServices.featureSwitchService.featureSwitches.useModernFormatPane ? propertyPaneSlice.value : propertyPaneSlice.value.value, 
                        services.eventBridge.publishToChannel(services_events.qHu, {
                            width: currentSize.width,
                            height: parseInt(value, 10),
                            displayOption
                        }), defer.resolve(!1)) : objectName === PagePropertyPaneConsts.PageBackgroundCardName ? (registerWithUndoRedoService("UpdateCanvasBackground", objectName, propertyPaneSlice, propertySliceSaveServices, services), 
                        defer.resolve(!0)) : objectName === PagePropertyPaneConsts.OutspaceBackgroundCardName ? (registerWithUndoRedoService("UpdateOutspaceBackground", objectName, propertyPaneSlice, propertySliceSaveServices, services), 
                        defer.resolve(!0)) : objectName === PagePropertyPaneConsts.OutspacePaneCardName ? (registerWithUndoRedoService("UpdateOutspacePaneBackground", objectName, propertyPaneSlice, propertySliceSaveServices, services), 
                        defer.resolve(!0)) : objectName === PagePropertyPaneConsts.FilterCardName ? (registerWithUndoRedoService("UpdateFilterCard", objectName, propertyPaneSlice, propertySliceSaveServices, services), 
                        defer.resolve(!0)) : objectName === PagePropertyPaneConsts.DisplayAreaName ? (registerWithUndoRedoService("UpdateDisplayAreaAlignment", objectName, propertyPaneSlice, propertySliceSaveServices, services), 
                        defer.resolve(!0)) : objectName === PagePropertyPaneConsts.PageRefreshCardName ? (registerWithUndoRedoService("UpdatePageRefresh", objectName, propertyPaneSlice, propertySliceSaveServices, services), 
                        (value = propertyPaneSlice.value) && services.telemetryService.logEvent(events.Lo, {
                            objectName: PagePropertyPaneConsts.PageRefreshCardName,
                            propertyName: propertyPaneSlice.name,
                            newValue: value.toString(),
                            visualType: "page"
                        }), defer.resolve(!0)) : objectName === PagePropertyPaneConsts.PersonalizeVisual && (registerWithUndoRedoService("UpdatePersonalizeVisual", objectName, propertyPaneSlice, propertySliceSaveServices, services), 
                        isApplyToAllPages = "applyToAllPages" in propertyPaneSlice.type && !!(null === (_a = propertyPaneSlice.type) || void 0 === _a ? void 0 : _a.applyToAllPages), 
                        isDefault = !isApplyToAllPages && ("reference" in propertyPaneSlice.type && (null === (_b = propertyPaneSlice.type.reference) || void 0 === _b ? void 0 : _b.perspective) ? "" === propertyPaneSlice.value : !(!("revertToDefault" in propertyPaneSlice.type) || !propertyPaneSlice.type.revertToDefault) || void 0), 
                        services.telemetryService.logEvent(events.gW, {
                            isDefault,
                            isApplyToAllPages
                        }), defer.resolve(!0)), [ 2, defer.promise ];
                    });
                });
            }, PageFormattingService.\u0275fac = function(t) {
                return new (t || PageFormattingService)(core["\u0275\u0275inject"](promiseFactory.t), core["\u0275\u0275inject"](sq_aggregation_operations_service.C), core["\u0275\u0275inject"](canvas_scale_service.Z), core["\u0275\u0275inject"](change_detection_measure_service.C), core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](context_activity_service.r), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](exploration_capabilities_service.U), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](FormattingSliceTransformerService), core["\u0275\u0275inject"](layout_authoring_service.U), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](linguistic_schema_proxy_service.e), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](PerspectivesService), core["\u0275\u0275inject"](resource_loader_service.l6), core["\u0275\u0275inject"](resource_registration_service.j), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](theme_service.f), core["\u0275\u0275inject"](undo_redo_service.z), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visual_style_preset_service.A), core["\u0275\u0275inject"](visual_sync_service.M), core["\u0275\u0275inject"](trusted_visual_service.t));
            }, PageFormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: PageFormattingService,
                factory: PageFormattingService.\u0275fac
            }), PageFormattingService;
        }();
        function registerWithUndoRedoService(description, objectName, propertyPaneSlice, propertySliceSaveServices, services) {
            var section = services.explorationNavigation.getCurrentSection();
            services.undoRedo.register(description, function() {
                var objects = section.objects || {};
                visual_capabilities_slice_factory_helper.yr(objectName, propertyPaneSlice, objects, propertySliceSaveServices), 
                section.objects = objects;
            }), services.eventBridge.publishToChannel(services_events.H8N, section);
        }
        function savePageSizeType(value, currentSize, eventBridge, explorationAuthoring, displayOption) {
            var size = (0, propertyPaneUtils.MO)(value);
            value === sectionPageSize.t.Custom && 0 !== displayOption && (size = currentSize), 
            eventBridge.publishToChannel(services_events.qHu, size);
            var isPageTypeTooltip = value === sectionPageSize.t.Tooltip;
            !isPageTypeTooltip && (1 === displayOption || value === sectionPageSize.t.Custom) || explorationAuthoring.setCanvasDisplay(isPageTypeTooltip ? 3 : 1);
        }
        function savePageInformationType(sectionType, explorationAuthoring, exploration, section, isOnObjectFSOn) {
            explorationAuthoring.setSectionType(exploration, section, sectionType), (isOnObjectFSOn ? 2 === sectionType : null == sectionType || 0 === sectionType) || explorationAuthoring.setCrossReportDrillthrough(exploration, section, !1, !1);
        }
        var RevertToDefaultManager = function() {
            function RevertToDefaultManager() {
                this.referencedDescriptors = [], this.revertToDefaultDescriptors = [], this.revertToDefaultProperties = new Set;
            }
            return RevertToDefaultManager.prototype.addDescriptors = function() {
                for (var _a, revertToDefaultDescriptors = [], _i = 0; _i < arguments.length; _i++) revertToDefaultDescriptors[_i] = arguments[_i];
                if (_.isEmpty(revertToDefaultDescriptors)) return this;
                (_a = this.revertToDefaultDescriptors).push.apply(_a, revertToDefaultDescriptors || []);
                for (var _b = 0, revertToDefaultDescriptors_1 = revertToDefaultDescriptors; _b < revertToDefaultDescriptors_1.length; _b++) {
                    var descriptorString = this.getDescriptorString(revertToDefaultDescriptors_1[_b]);
                    this.revertToDefaultProperties.add(descriptorString);
                }
                return this;
            }, RevertToDefaultManager.prototype.getDescriptors = function() {
                return this.revertToDefaultDescriptors;
            }, RevertToDefaultManager.prototype.getDescriptorString = function(descriptor) {
                return "".concat(descriptor.objectName, "-").concat(descriptor.propertyName);
            }, RevertToDefaultManager.prototype.hasDescriptor = function(descriptor) {
                var descriptorString = this.getDescriptorString(descriptor);
                return this.revertToDefaultProperties.has(descriptorString);
            }, RevertToDefaultManager.prototype.hasDescriptors = function() {
                return !_.isEmpty(this.revertToDefaultDescriptors);
            }, RevertToDefaultManager.prototype.addReferencedDescriptor = function(descriptor) {
                this.referencedDescriptors.push(descriptor);
            }, RevertToDefaultManager.prototype.validateRevertToDefaultDescriptors = function() {
                if (this.hasDescriptors()) for (var _i = 0, referencedDescriptors_1 = this.referencedDescriptors; _i < referencedDescriptors_1.length; _i++) {
                    var referencedDescriptor = referencedDescriptors_1[_i];
                    this.hasDescriptor(referencedDescriptor) || debug.fF.assertFail("Descriptor '".concat(this.getDescriptorString(referencedDescriptor), "' is missing from RevertToDefault"));
                }
            }, RevertToDefaultManager;
        }(), FormattingModelService = function() {
            function FormattingModelService(propertyChangeIndicatorService, explorationNavigation, layoutAuthoring, analyticsFormattingService, canvasItemFormattingService, conditionalFormattingService, contextActivityService, featureSwitchService, localizationService, pageFormattingService, visualFormattingService, resourceLoader, resourceRegistration, telemetryService, themeService, trustedVisualService, undoRedo, visualAuthoring, visualPlugin, visualStylePresetService, visualSync) {
                this.propertyChangeIndicatorService = propertyChangeIndicatorService, this.analyticsFormattingService = analyticsFormattingService, 
                this.canvasItemFormattingService = canvasItemFormattingService, this.conditionalFormattingService = conditionalFormattingService, 
                this.contextActivityService = contextActivityService, this.featureSwitchService = featureSwitchService, 
                this.localizationService = localizationService, this.pageFormattingService = pageFormattingService, 
                this.visualFormattingService = visualFormattingService, this.containerSelectionChangedSubject = new Subject.xQ, 
                this.selectedContainerItems = new Map, this.selectedListEditorItems = new Map, this.saveServices = {
                    contextActivityService,
                    explorationNavigation,
                    featureSwitchService,
                    layoutAuthoring,
                    localizationService,
                    resourceLoader,
                    resourceRegistration,
                    telemetryService,
                    themeService,
                    undoRedo,
                    visualAuthoring,
                    visualPlugin,
                    visualStylePresetService,
                    visualSync,
                    trustedVisualService
                };
            }
            return FormattingModelService.prototype.getFormattingOptions = function(container, formattingSource) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var formattingModel, objectDescriptors, sliceTransform, formattingContract, objectDefinitions;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            switch (formattingSource) {
                              case "Visual":
                                return [ 3, 1 ];

                              case "Format_Label_General":
                                return [ 3, 3 ];

                              case "Page":
                                return [ 3, 5 ];

                              case "Analytics":
                                return [ 3, 7 ];
                            }
                            return [ 3, 9 ];

                          case 1:
                            return [ 4, this.visualFormattingService.getFormattingModel(container) ];

                          case 2:
                            return formattingModel = _b.sent(), objectDescriptors = this.visualFormattingService.getObjectDescriptors(container), 
                            sliceTransform = this.visualFormattingService.getFormatPaneSliceTransform(container), 
                            [ 3, 10 ];

                          case 3:
                            return [ 4, this.canvasItemFormattingService.getFormattingModel(container) ];

                          case 4:
                            return formattingModel = _b.sent(), objectDescriptors = this.canvasItemFormattingService.getObjectDescriptors(container), 
                            sliceTransform = this.canvasItemFormattingService.getFormatPaneSliceTransform(container), 
                            [ 3, 10 ];

                          case 5:
                            return [ 4, this.pageFormattingService.getFormattingModel() ];

                          case 6:
                            return formattingModel = _b.sent(), objectDescriptors = this.pageFormattingService.getObjectDescriptors(), 
                            sliceTransform = this.pageFormattingService.getFormatPaneSliceTransform(), [ 3, 10 ];

                          case 7:
                            return [ 4, this.analyticsFormattingService.getFormattingModel(container) ];

                          case 8:
                            return formattingModel = _b.sent(), objectDescriptors = this.analyticsFormattingService.getObjectDescriptors(container), 
                            sliceTransform = this.analyticsFormattingService.getFormatPaneSliceTransform(container), 
                            [ 3, 10 ];

                          case 9:
                            debug.fF.assertNever(formattingSource), _b.label = 10;

                          case 10:
                            return formattingContract = {
                                cards: {},
                                groups: {},
                                slices: {},
                                revertToDefaultDescriptors: [],
                                canvasItem: container ? new formatting_contracts.lD(container, function(other) {
                                    return other === container || other && container && container.name === other.name;
                                }) : void 0
                            }, formattingModel ? (objectDefinitions = this.getObjectDefinitions(formattingSource, container), 
                            [ 4, this.updateFormattingContract(container, {
                                objectDefinitions,
                                objectDescriptors,
                                originSource: formattingSource
                            }, formattingModel, sliceTransform, formattingContract, formattingSource) ]) : [ 2, formattingContract ];

                          case 11:
                            return _b.sent(), [ 2, formattingContract ];
                        }
                    });
                });
            }, FormattingModelService.prototype.getRevertToDefaultMetadata = function(container, formattingSource) {
                if (!formattingSource) return {
                    formattingSettingsString: void 0,
                    itemTypeDisplayName: void 0
                };
                switch (formattingSource) {
                  case "Visual":
                    return this.visualFormattingService.getRevertToDefaultMetadata(container);

                  case "Format_Label_General":
                    return this.canvasItemFormattingService.getRevertToDefaultMetadata(container);

                  case "Page":
                    return this.pageFormattingService.getRevertToDefaultMetadata();

                  case "Analytics":
                    return this.analyticsFormattingService.getRevertToDefaultMetadata(container);

                  default:
                    debug.fF.assertNever(formattingSource);
                }
            }, FormattingModelService.prototype.getContainerChanged$ = function() {
                return this.containerSelectionChangedSubject.asObservable();
            }, FormattingModelService.prototype.updateFormattingContract = function(container, formattingObjectOptions, formattingModel, sliceTransform, formattingContract, formattingSource) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var cards, simpleSliceTransform, activePivotType, allRevertToDefaultDescriptors, index, _loop_1, this_1, _i, _b, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            cards = [], simpleSliceTransform = sliceTransform, activePivotType = formattingSource, 
                            allRevertToDefaultDescriptors = [], index = 0, _loop_1 = function(item) {
                                var card, cardFormattingObjectOptions, revertToDefaultManager, resolvedData, resolvedSourcePivot, resolvedRevertToDefaultDescriptors, descriptorsToAdd, _d, resolvedRevertToDefaultDescriptors_1, updatedUid, formattingModelWarnings, formattingModelWarnings$, groups, topLevelToggle, revertToDefaultDescriptors, updatedCard;
                                return (0, tslib_es6.__generator)(this, function(_e) {
                                    switch (_e.label) {
                                      case 0:
                                        return cardFormattingObjectOptions = formattingObjectOptions, revertToDefaultManager = new RevertToDefaultManager, 
                                        (0, build_control_util.Qu)(item) ? [ 4, this_1.resolvePlaceholder(item, container) ] : [ 3, 2 ];

                                      case 1:
                                        if (!(resolvedData = _e.sent())) return [ 2, "continue" ];
                                        if (card = resolvedData.item, cardFormattingObjectOptions = {
                                            objectDescriptors: resolvedData.objectDescriptors,
                                            objectDefinitions: this_1.getObjectDefinitions(resolvedSourcePivot = resolvedData.originSource, container),
                                            originSource: resolvedSourcePivot
                                        }, resolvedRevertToDefaultDescriptors = resolvedData.revertToDefaultDescriptors) {
                                            for (descriptorsToAdd = [], _d = 0, resolvedRevertToDefaultDescriptors_1 = resolvedRevertToDefaultDescriptors; _d < resolvedRevertToDefaultDescriptors_1.length; _d++) descriptorsToAdd.push((0, 
                                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, resolvedRevertToDefaultDescriptors_1[_d]), {
                                                originSource: resolvedSourcePivot
                                            }));
                                            revertToDefaultManager.addDescriptors.apply(revertToDefaultManager, descriptorsToAdd);
                                        }
                                        return [ 3, 3 ];

                                      case 2:
                                        (card = item).analyticsPane && (cardFormattingObjectOptions = (0, tslib_es6.__assign)((0, 
                                        tslib_es6.__assign)({}, cardFormattingObjectOptions), {
                                            originSource: "Analytics"
                                        })), revertToDefaultManager.addDescriptors.apply(revertToDefaultManager, (null !== (_a = card.revertToDefaultDescriptors) && void 0 !== _a ? _a : []).map(function(descriptor) {
                                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                                originSource: cardFormattingObjectOptions.originSource
                                            });
                                        })), _e.label = 3;

                                      case 3:
                                        return updatedUid = formatting_utils.LF(card.uid, activePivotType), formattingModelWarnings = formattingModel.warnings, 
                                        formattingModelWarnings$ = formattingModel.warnings$, [ 4, this_1.getFormattingGroupsContract(container, cardFormattingObjectOptions, card.groups, this_1.getDisabledState(card.topLevelToggle), updatedUid, card.displayName, sliceTransform, void 0, void 0, revertToDefaultManager, formattingModelWarnings, formattingSource, []) ];

                                      case 4:
                                        return groups = _e.sent(), topLevelToggle = card.topLevelToggle ? this_1.getSimpleFormattingSlice(container, cardFormattingObjectOptions, card.topLevelToggle, !!card.disabled, card.displayName, simpleSliceTransform, void 0, revertToDefaultManager, formattingModelWarnings) : void 0, 
                                        revertToDefaultDescriptors = revertToDefaultManager.getDescriptors(), allRevertToDefaultDescriptors.push.apply(allRevertToDefaultDescriptors, revertToDefaultDescriptors), 
                                        updatedCard = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, card), {
                                            pivotSource: activePivotType,
                                            uid: updatedUid,
                                            warningMessage: this_1.getCardWarning(formattingModelWarnings, card, groups, topLevelToggle),
                                            warningMessage$: formattingModelWarnings$ && formattingModelWarnings$.pipe((0, map.U)(function(formattingModelWarnings) {
                                                return _this.getCardWarning(formattingModelWarnings, card, groups, topLevelToggle);
                                            })),
                                            topLevelToggle: topLevelToggle ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, topLevelToggle), {
                                                isTopLevelToggle: !0,
                                                originSource: cardFormattingObjectOptions.originSource
                                            }) : void 0,
                                            revertToDefaultDescriptors,
                                            originSource: cardFormattingObjectOptions.originSource,
                                            index: index++,
                                            groupUids: groups.map(function(group) {
                                                return group.uid;
                                            }),
                                            groups
                                        }), cards.push(updatedCard), revertToDefaultManager.validateRevertToDefaultDescriptors(), 
                                        [ 2 ];
                                    }
                                });
                            }, this_1 = this, _i = 0, _b = formattingModel.cards, _c.label = 1;

                          case 1:
                            return _i < _b.length ? [ 5, _loop_1(_b[_i]) ] : [ 3, 4 ];

                          case 2:
                            _c.sent(), _c.label = 3;

                          case 3:
                            return _i++, [ 3, 1 ];

                          case 4:
                            return this.normalize(cards, formattingContract), formattingContract.revertToDefaultDescriptors = allRevertToDefaultDescriptors, 
                            [ 2 ];
                        }
                    });
                });
            }, FormattingModelService.prototype.normalize = function(formattingCards, formattingContract) {
                for (var _a, _b, duplicateSliceUidIndex = 0, _i = 0, formattingCards_1 = formattingCards; _i < formattingCards_1.length; _i++) {
                    var formattingCard = formattingCards_1[_i];
                    formattingContract.cards[formattingCard.uid] = formattingCard;
                    for (var defaultSource = formattingCard.originSource, _loop_2 = function(formattingGroup) {
                        for (var sliceIds = [], _e = 0, formattingSlices_1 = formattingGroup.slices ? (0, 
                        tslib_es6.__spreadArray)([], formattingGroup.slices, !0) : []; _e < formattingSlices_1.length; _e++) {
                            var formattingSlice = formattingSlices_1[_e], selector = (0, formattingModelUtil.O7)(formattingSlice), uid = (0, 
                            formattingModelUtil.$Q)(formattingSlice.uid, selector);
                            formattingContract.slices[uid] && (formattingSlice.uid = "".concat(formattingSlice.uid, "___").concat(duplicateSliceUidIndex++, "___"), 
                            uid = (0, formattingModelUtil.$Q)(formattingSlice.uid, selector));
                            var updatedSlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingSlice), {
                                groupUid: formattingGroup.uid,
                                originSource: null !== (_a = formattingSlice.originSource) && void 0 !== _a ? _a : defaultSource
                            });
                            formattingContract.slices[uid] = updatedSlice;
                            for (var _f = 0, slicesToAdd_1 = (0, build_control_util.IW)(updatedSlice) ? formatting_utils.ce(updatedSlice) : [ updatedSlice ]; _f < slicesToAdd_1.length; _f++) {
                                var sliceToAdd = slicesToAdd_1[_f], formattingIdKey = formatting_utils.zh(sliceToAdd.control.properties.descriptor);
                                formattingContract.slices[formattingIdKey] = sliceToAdd;
                            }
                            sliceIds.push({
                                uid: updatedSlice.uid,
                                selector
                            });
                        }
                        delete formattingGroup.slices, debug.fF.assert(function() {
                            return !formattingContract.groups[formattingGroup.uid];
                        }, "duplicate group uid ".concat(formattingGroup.uid)), formattingContract.groups[formattingGroup.uid] = (0, 
                        tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingGroup), {
                            originSource: null !== (_b = formattingGroup.originSource) && void 0 !== _b ? _b : defaultSource,
                            sliceIds
                        });
                    }, _c = 0, _d = formattingCard.groups; _c < _d.length; _c++) _loop_2(_d[_c]);
                    delete formattingCard.groups;
                }
            }, FormattingModelService.prototype.getModelUnavailableInformation = function(formattingSource, container) {
                switch (formattingSource) {
                  case "Visual":
                    return this.visualFormattingService.getModelUnavailableInformation(container);

                  case "Format_Label_General":
                    return this.canvasItemFormattingService.getModelUnavailableInformation(container);

                  case "Page":
                    return {
                        messageKey: void 0
                    };

                  case "Analytics":
                    return this.analyticsFormattingService.getModelUnavailableInformation(container);

                  default:
                    debug.fF.assertNever(formattingSource);
                }
            }, FormattingModelService.prototype.getFormattingModelMessage = function(formattingSource, container) {
                switch (formattingSource) {
                  case "Visual":
                    return this.visualFormattingService.getFormattingModelMessage(container);

                  case "Format_Label_General":
                  case "Page":
                  case "Analytics":
                    return;

                  default:
                    debug.fF.assertNever(formattingSource);
                }
            }, FormattingModelService.prototype.getObjectDefinitions = function(formattingSource, container, useObjectsOverride) {
                switch (formattingSource) {
                  case "Visual":
                    return this.visualFormattingService.getObjectDefinitions(container, useObjectsOverride);

                  case "Format_Label_General":
                    return this.canvasItemFormattingService.getObjectDefinitions(container, useObjectsOverride);

                  case "Page":
                    return this.pageFormattingService.getObjectDefinitions();

                  case "Analytics":
                    return this.analyticsFormattingService.getObjectDefinitions(container, useObjectsOverride);

                  default:
                    debug.fF.assertNever(formattingSource);
                }
            }, FormattingModelService.prototype.getRevertToDefaultEnabled = function(container, cardRevertToDefaultDescriptors, suppressedSaveObjects) {
                if (_.isEmpty(cardRevertToDefaultDescriptors)) return !1;
                var descriptorsByPivot = _.groupBy(cardRevertToDefaultDescriptors, function(d) {
                    return d.originSource;
                }), revertToDefaultEnabled = !1;
                for (var pivotType in descriptorsByPivot) {
                    var currentPivotType = pivotType;
                    switch (currentPivotType) {
                      case "Visual":
                      case "Format_Label_General":
                        var currentDefinitions = this.getObjectDefinitions(currentPivotType, container, !0);
                        revertToDefaultEnabled = formatting_utils.wW(cardRevertToDefaultDescriptors, currentDefinitions, suppressedSaveObjects, this.featureSwitchService.featureSwitches.onObject);
                        break;

                      case "Page":
                        revertToDefaultEnabled = this.pageFormattingService.getRevertToDefaultEnabled(cardRevertToDefaultDescriptors, suppressedSaveObjects);
                        break;

                      case "Analytics":
                        revertToDefaultEnabled = this.analyticsFormattingService.getRevertToDefaultEnabled(container, null != cardRevertToDefaultDescriptors ? cardRevertToDefaultDescriptors : [], suppressedSaveObjects);
                        break;

                      default:
                        debug.fF.assertNever(currentPivotType);
                    }
                    if (revertToDefaultEnabled) break;
                }
                return revertToDefaultEnabled;
            }, FormattingModelService.prototype.getSliceShowChangeIndicator = function(container, formattingObjectOptions, formattingDescriptor) {
                var sourcePivotType = formattingObjectOptions.originSource;
                switch (sourcePivotType) {
                  case "Visual":
                  case "Format_Label_General":
                  case "Page":
                    return this.shouldShowSliceChangeIndicator(container, formattingObjectOptions, formattingDescriptor);

                  case "Analytics":
                    return this.analyticsFormattingService.shouldShowSliceChangeIndicator();

                  default:
                    debug.fF.assertNever(sourcePivotType);
                }
            }, FormattingModelService.prototype.shouldShowSliceChangeIndicator = function(container, formattingObjectOptions, formattingDescriptor) {
                var currentObjectDefinitions = this.getObjectDefinitions(formattingObjectOptions.originSource, container, !0);
                return this.propertyChangeIndicatorService && this.propertyChangeIndicatorService.shouldShowSliceChangeIndicator(formattingDescriptor, currentObjectDefinitions);
            }, FormattingModelService.prototype.getCardWarning = function(warnings, card, groups, topLevelToggle) {
                var cardWarning;
                if (warnings) {
                    var cardVisualWarning = warnings[card.uid];
                    !cardVisualWarning || cardVisualWarning instanceof dataBoundExprWarning.L || (cardWarning = cardVisualWarning);
                }
                if (topLevelToggle && topLevelToggle.warningMessage && (cardWarning = topLevelToggle.warningMessage.source), 
                !cardWarning) {
                    var groupWithWarning = groups.find(function(g) {
                        return !!g.warningMessage;
                    });
                    groupWithWarning && groupWithWarning.warningMessage && (cardWarning = groupWithWarning.warningMessage.source);
                }
                return cardWarning ? getFormattingWarningMessageState(cardWarning, this.localizationService, !0) : void 0;
            }, FormattingModelService.prototype.getGroupWarning = function(slices, topLevelToggle) {
                var groupWarning;
                if (topLevelToggle && topLevelToggle.warningMessage && (groupWarning = topLevelToggle.warningMessage.source), 
                !groupWarning) {
                    var sliceWithWarning = slices.find(function(s) {
                        return !!s.warningMessage;
                    });
                    sliceWithWarning && (groupWarning = sliceWithWarning.warningMessage.source);
                }
                return groupWarning ? getFormattingWarningMessageState(groupWarning, this.localizationService, !0) : void 0;
            }, FormattingModelService.prototype.getSliceWarning = function(formattingSlice, descriptor, formattingModelWarnings) {
                if (formattingSlice.conditionalFormattingWarning) return formattingSlice.conditionalFormattingWarning;
                var warning = this.getWarningForDescriptor(formattingModelWarnings, descriptor);
                return warning ? getFormattingWarningMessageState(warning, this.localizationService) : void 0;
            }, FormattingModelService.prototype.resolvePlaceholder = function(formattingPlaceholder, container) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var resolvedPlaceholder;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (0, build_control_util.Dw)(formattingPlaceholder) ? [ 4, this.canvasItemFormattingService.resolvePlaceholder(formattingPlaceholder, container) ] : [ 3, 2 ];

                          case 1:
                            return [ 2, (resolvedPlaceholder = _a.sent()) ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, resolvedPlaceholder), {
                                originSource: "Format_Label_General"
                            }) : void 0 ];

                          case 2:
                            if ((0, build_control_util.d5)(formattingPlaceholder)) return [ 2, (resolvedPlaceholder = this.visualFormattingService.resolvePlaceholder(formattingPlaceholder, container)) ? (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, resolvedPlaceholder), {
                                originSource: "Visual"
                            }) : void 0 ];
                            debug.fF.assertFail("Unexpected placeholder type"), _a.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, FormattingModelService.prototype.getFormattingGroupsContract = function(container, cardFormattingObjectOptions, formattingGroups, disabled, cardUid, cardDisplayName, sliceTransform, disableInteractivityOptions, containerSliceDisplayName, revertToDefaultManager, formattingModelWarnings, formattingSource, parentContainers) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var groups, simpleSliceTransform, currentParentContainers, conditionalFormattingDisplayName, _loop_3, this_2, _i, formattingGroups_1;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            groups = [], simpleSliceTransform = sliceTransform, currentParentContainers = _.cloneDeep(parentContainers), 
                            _loop_3 = function(item) {
                                var group, groupFormattingObjectOptions, resolvedData, resolvedSourcePivot, groupObjectDescriptors, resolvedRevertToDefaultDescriptors, descriptorsToAdd, _c, resolvedRevertToDefaultDescriptors_2, containerSlices, containerGroups, inheritDisabled, isGroupDisabled, sourcePivot, topLevelToggle, containerItems, groupSlices, collapsible, combinedSlices, warningMessage, updatedGroup;
                                return (0, tslib_es6.__generator)(this, function(_d) {
                                    switch (_d.label) {
                                      case 0:
                                        return groupFormattingObjectOptions = cardFormattingObjectOptions, (0, build_control_util.Qu)(item) ? [ 4, this_2.resolvePlaceholder(item, container) ] : [ 3, 2 ];

                                      case 1:
                                        if (!(resolvedData = _d.sent())) return [ 2, "continue" ];
                                        if (group = resolvedData.item, resolvedSourcePivot = resolvedData.originSource, 
                                        groupObjectDescriptors = resolvedData.objectDescriptors, resolvedRevertToDefaultDescriptors = resolvedData.revertToDefaultDescriptors) {
                                            for (descriptorsToAdd = [], _c = 0, resolvedRevertToDefaultDescriptors_2 = resolvedRevertToDefaultDescriptors; _c < resolvedRevertToDefaultDescriptors_2.length; _c++) descriptorsToAdd.push((0, 
                                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, resolvedRevertToDefaultDescriptors_2[_c]), {
                                                originSource: resolvedSourcePivot
                                            }));
                                            revertToDefaultManager.addDescriptors.apply(revertToDefaultManager, descriptorsToAdd);
                                        }
                                        return groupFormattingObjectOptions = {
                                            objectDescriptors: groupObjectDescriptors,
                                            objectDefinitions: this_2.getObjectDefinitions(resolvedSourcePivot, container),
                                            originSource: resolvedSourcePivot
                                        }, [ 3, 3 ];

                                      case 2:
                                        group = item, _d.label = 3;

                                      case 3:
                                        return conditionalFormattingDisplayName = group.displayName ? "".concat(cardDisplayName, " - ").concat(group.displayName) : "".concat(cardDisplayName), 
                                        containerSlices = [], containerGroups = [], inheritDisabled = null === (_a = group.inheritDisabled) || void 0 === _a || _a, 
                                        isGroupDisabled = inheritDisabled && disabled || group.disabled, sourcePivot = groupFormattingObjectOptions.originSource, 
                                        topLevelToggle = group.topLevelToggle ? this_2.getSimpleFormattingSlice(container, groupFormattingObjectOptions, group.topLevelToggle, isGroupDisabled, conditionalFormattingDisplayName, simpleSliceTransform, void 0, revertToDefaultManager, formattingModelWarnings) : void 0, 
                                        group.topLevelToggle = topLevelToggle, group.container && group.container.containerItems.length > 0 ? [ 4, this_2.convertFormattingContainers(container, groupFormattingObjectOptions, group.container, cardUid, group.uid, isGroupDisabled || this_2.getDisabledState(group.topLevelToggle), sliceTransform, conditionalFormattingDisplayName, group.containerDisabled, revertToDefaultManager, formattingModelWarnings, formattingSource, parentContainers) ] : [ 3, 5 ];

                                      case 4:
                                        containerItems = _d.sent(), containerSlices = containerItems.slices, containerGroups = containerItems.groups, 
                                        _d.label = 5;

                                      case 5:
                                        return group.container = void 0, [ 4, this_2.getFormattingSliceContracts(container, groupFormattingObjectOptions, group.slices, isGroupDisabled || this_2.getDisabledState(group.topLevelToggle), conditionalFormattingDisplayName, sliceTransform, containerSliceDisplayName, revertToDefaultManager, formattingModelWarnings, group.uid, formattingSource) ];

                                      case 6:
                                        return groupSlices = _d.sent(), collapsible = !!group.displayName && (!!_.isUndefined(group.collapsible) || group.collapsible), 
                                        combinedSlices = _.concat(groupSlices, containerSlices), warningMessage = this_2.getGroupWarning(combinedSlices, topLevelToggle), 
                                        updatedGroup = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, group), {
                                            collapsible,
                                            disableInteractivity: null == disableInteractivityOptions ? void 0 : disableInteractivityOptions.disableInteractivity,
                                            warningMessage,
                                            disabled: isGroupDisabled,
                                            originSource: sourcePivot,
                                            cardUid,
                                            pivotSource: formattingSource,
                                            sliceIds: combinedSlices.map(function(slice) {
                                                return {
                                                    uid: slice.uid,
                                                    selector: (0, formattingModelUtil.O7)(slice)
                                                };
                                            }),
                                            slices: combinedSlices,
                                            parentContainers: currentParentContainers,
                                            topLevelToggle: topLevelToggle ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, topLevelToggle), {
                                                isTopLevelToggle: !0,
                                                originSource: sourcePivot
                                            }) : void 0
                                        }), groups.push(updatedGroup), groups = _.concat(groups, containerGroups), debug.fF.assert(function() {
                                            return group.sliceWithContainer || !(groupSlices.length > 0 && containerSlices.length > 0);
                                        }, "we don't have proper UI for supporting containers and slices in same group"), 
                                        [ 2 ];
                                    }
                                });
                            }, this_2 = this, _i = 0, formattingGroups_1 = formattingGroups, _b.label = 1;

                          case 1:
                            return _i < formattingGroups_1.length ? [ 5, _loop_3(formattingGroups_1[_i]) ] : [ 3, 4 ];

                          case 2:
                            _b.sent(), _b.label = 3;

                          case 3:
                            return _i++, [ 3, 1 ];

                          case 4:
                            return [ 2, groups ];
                        }
                    });
                });
            }, FormattingModelService.prototype.convertFormattingContainers = function(canvasItem, groupFormattingObjectOptions, formattingContainer, cardUid, groupUid, disabled, sliceTransform, conditionalFormattingDisplayName, containerDropdownDisabled, revertToDefaultManager, formattingModelWarnings, formattingSource, parentContainers) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var formattingSliceContracts, descriptor, containerName, selectedIndex, listEditorSlice, selectedDisplayName_1, selectedItem_1, defaultItem_1, defaultIndex_1, items, dropdownSlice, FormattingGroupContract, onObjectFS, _loop_4, this_3, index;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            if (formattingContainer.containerItems.length <= 0) return [ 2 ];
                            formattingSliceContracts = [], descriptor = this.getContainerDropdownDescriptor(cardUid, formattingContainer.uid, formattingContainer.isEditable), 
                            containerName = descriptor.propertyName, formattingContainer.isEditable ? (items = formattingContainer.containerItems.map(function(item, index) {
                                return {
                                    displayName: item.displayName,
                                    value: index,
                                    uid: item.uid
                                };
                            }), selectedIndex = this.getSelectedListEditorItemIndex(containerName), items = _.filter(items, function(item) {
                                return !_.isEmpty(item.displayName);
                            }), _.isEmpty(items) && (selectedIndex = 0), listEditorSlice = {
                                displayName: formattingContainer.displayName,
                                disabled,
                                control: {
                                    type: "ListEditor",
                                    properties: {
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                            type: {}
                                        }),
                                        value: {
                                            items,
                                            selectedItem: items[selectedIndex]
                                        }
                                    }
                                },
                                uid: (0, build_control_util.bP)(descriptor.objectName, descriptor.propertyName),
                                originSource: void 0,
                                pivotSource: formattingSource,
                                groupUid
                            }, formattingSliceContracts.push(listEditorSlice)) : (selectedDisplayName_1 = this.getSelectedContainerItemName(containerName), 
                            items = formattingContainer.containerItems.map(function(item, index) {
                                var currentItem = {
                                    displayName: item.displayName,
                                    value: item.displayName,
                                    icon: item.icon ? {
                                        glyph: item.icon
                                    } : void 0
                                };
                                return 0 === index && (defaultItem_1 = currentItem, defaultIndex_1 = 0), item.defaultSelected && (defaultItem_1 = currentItem, 
                                defaultIndex_1 = index), (0 === index && null === selectedDisplayName_1 || selectedDisplayName_1 === item.displayName) && (selectedItem_1 = currentItem), 
                                currentItem;
                            }), (selectedIndex = _.findIndex(formattingContainer.containerItems, function(item) {
                                return item.displayName === selectedDisplayName_1;
                            })) < 0 && (selectedIndex = defaultIndex_1, selectedItem_1 = defaultItem_1), dropdownSlice = {
                                displayName: formattingContainer.displayName,
                                disabled: disabled || !!containerDropdownDisabled,
                                control: {
                                    type: "Dropdown",
                                    properties: {
                                        descriptor: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                            type: {}
                                        }),
                                        items,
                                        value: selectedItem_1
                                    }
                                },
                                uid: (0, build_control_util.bP)(descriptor.objectName, descriptor.propertyName),
                                originSource: void 0,
                                groupUid,
                                pivotSource: formattingSource
                            }, formattingSliceContracts.push(dropdownSlice)), FormattingGroupContract = [], 
                            onObjectFS = this.featureSwitchService.featureSwitches.onObject, _loop_4 = function(index) {
                                var containerItem, hidden, containerItemDisabled, isItemDisabled, updatedParentContainers, subContainerItems, containerSlices, updatedSlices, _b, containerGroups, updatedGroups, _c;
                                return (0, tslib_es6.__generator)(this, function(_d) {
                                    switch (_d.label) {
                                      case 0:
                                        return onObjectFS || index === selectedIndex ? (hidden = index !== selectedIndex, 
                                        containerItemDisabled = (containerItem = formattingContainer.containerItems[index]).disabled, 
                                        isItemDisabled = disabled || containerItemDisabled, updatedParentContainers = (0, 
                                        tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], parentContainers, !0), [ {
                                            containerName,
                                            value: containerItem.displayName
                                        } ], !1), subContainerItems = {
                                            groups: [],
                                            slices: []
                                        }, containerItem.container ? [ 4, this_3.convertFormattingContainers(canvasItem, groupFormattingObjectOptions, containerItem.container, cardUid, containerItem.container.uid, disabled, sliceTransform, conditionalFormattingDisplayName, containerDropdownDisabled, revertToDefaultManager, formattingModelWarnings, formattingSource, updatedParentContainers) ] : [ 3, 2 ]) : [ 2, "continue" ];

                                      case 1:
                                        subContainerItems = _d.sent(), _d.label = 2;

                                      case 2:
                                        return (containerSlices = containerItem.slices) ? [ 4, this_3.getFormattingSliceContracts(canvasItem, groupFormattingObjectOptions, containerSlices, isItemDisabled, conditionalFormattingDisplayName, sliceTransform, formattingContainer.displayName, revertToDefaultManager, formattingModelWarnings, groupUid, formattingSource) ] : [ 3, 4 ];

                                      case 3:
                                        return _b = _d.sent(), [ 3, 5 ];

                                      case 4:
                                        _b = [], _d.label = 5;

                                      case 5:
                                        return updatedSlices = (updatedSlices = _b).concat(subContainerItems.slices), formattingSliceContracts = _.concat(formattingSliceContracts, _.map(updatedSlices, function(slice) {
                                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, slice), {
                                                hidden: slice.hidden || hidden
                                            });
                                        })), (containerGroups = containerItem.groups) ? [ 4, this_3.getFormattingGroupsContract(canvasItem, groupFormattingObjectOptions, containerGroups, isItemDisabled, cardUid, conditionalFormattingDisplayName, sliceTransform, containerItemDisabled ? {
                                            disableInteractivity: !0,
                                            collapsed: !0
                                        } : void 0, formattingContainer.displayName, revertToDefaultManager, formattingModelWarnings, formattingSource, updatedParentContainers) ] : [ 3, 7 ];

                                      case 6:
                                        return _c = _d.sent(), [ 3, 8 ];

                                      case 7:
                                        _c = [], _d.label = 8;

                                      case 8:
                                        return updatedGroups = (updatedGroups = _c).concat(subContainerItems.groups), FormattingGroupContract = _.concat(FormattingGroupContract, _.map(updatedGroups, function(group) {
                                            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, group), {
                                                uid: onObjectFS ? (0, formattingModelUtil.aO)(group.uid, index) : group.uid,
                                                hidden: hidden || group.hidden
                                            });
                                        })), [ 2 ];
                                    }
                                });
                            }, this_3 = this, index = 0, _a.label = 1;

                          case 1:
                            return index < formattingContainer.containerItems.length ? [ 5, _loop_4(index) ] : [ 3, 4 ];

                          case 2:
                            _a.sent(), _a.label = 3;

                          case 3:
                            return index++, [ 3, 1 ];

                          case 4:
                            return [ 2, {
                                slices: formattingSliceContracts,
                                groups: FormattingGroupContract
                            } ];
                        }
                    });
                });
            }, FormattingModelService.prototype.getSelectedContainerItemName = function(property) {
                return this.selectedContainerItems.has(property) || this.selectedContainerItems.set(property, null), 
                this.selectedContainerItems.get(property);
            }, FormattingModelService.prototype.getSelectedListEditorItemIndex = function(property) {
                return this.selectedListEditorItems.has(property) || this.selectedListEditorItems.set(property, 0), 
                this.selectedListEditorItems.get(property);
            }, FormattingModelService.prototype.getContainerDropdownDescriptor = function(cardUid, groupUid, isEditable) {
                return {
                    objectName: isEditable ? "editable-container-object-name" : formatting_utils.nB,
                    propertyName: cardUid + "-" + groupUid + "-container"
                };
            }, FormattingModelService.prototype.getFormattingSliceContracts = function(container, formattingObjectOptions, formattingSlices, disabled, conditionalFormattingDisplayName, sliceTransform, containerSliceDisplayName, revertToDefaultManager, formattingModelWarnings, groupUid, formattingSource) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var sliceStates, _i, formattingSlices_2, item, slice, sliceFormattingObjectOptions, resolvedData, resolvedSourcePivot, resolvedRevertToDefaultDescriptors, descriptorsToAdd, _a, resolvedRevertToDefaultDescriptors_3, formattingSlice;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            if (!formattingSlices) return [ 2, [] ];
                            sliceStates = [], _i = 0, formattingSlices_2 = formattingSlices, _b.label = 1;

                          case 1:
                            return _i < formattingSlices_2.length ? (slice = void 0, sliceFormattingObjectOptions = formattingObjectOptions, 
                            (0, build_control_util.Qu)(item = formattingSlices_2[_i]) ? [ 4, this.resolvePlaceholder(item, container) ] : [ 3, 3 ]) : [ 3, 6 ];

                          case 2:
                            if (!(resolvedData = _b.sent())) return [ 3, 5 ];
                            if (slice = resolvedData.item, sliceFormattingObjectOptions = {
                                objectDescriptors: resolvedData.objectDescriptors,
                                objectDefinitions: this.getObjectDefinitions(resolvedSourcePivot = resolvedData.originSource, container),
                                originSource: resolvedData.originSource
                            }, resolvedRevertToDefaultDescriptors = resolvedData.revertToDefaultDescriptors) {
                                for (descriptorsToAdd = [], _a = 0, resolvedRevertToDefaultDescriptors_3 = resolvedRevertToDefaultDescriptors; _a < resolvedRevertToDefaultDescriptors_3.length; _a++) descriptorsToAdd.push((0, 
                                tslib_es6.__assign)((0, tslib_es6.__assign)({}, resolvedRevertToDefaultDescriptors_3[_a]), {
                                    originSource: resolvedSourcePivot
                                }));
                                revertToDefaultManager.addDescriptors.apply(revertToDefaultManager, descriptorsToAdd);
                            }
                            return [ 3, 4 ];

                          case 3:
                            slice = item, _b.label = 4;

                          case 4:
                            (formattingSlice = this.getFormattingSliceContract(container, sliceFormattingObjectOptions, slice, disabled, conditionalFormattingDisplayName, sliceTransform, containerSliceDisplayName, revertToDefaultManager, formattingModelWarnings, groupUid, formattingSource)) && sliceStates.push(formattingSlice), 
                            _b.label = 5;

                          case 5:
                            return _i++, [ 3, 1 ];

                          case 6:
                            return [ 2, sliceStates ];
                        }
                    });
                });
            }, FormattingModelService.prototype.getDisabledState = function(enabledSlice) {
                return !!enabledSlice && !enabledSlice.control.properties.value;
            }, FormattingModelService.prototype.getFormattingSliceContract = function(container, formattingObjectOptions, slice, disabled, conditionalFormattingDisplayName, sliceTransform, containerSliceDisplayName, revertToDefaultManager, formattingModelWarnings, groupUid, formattingSource) {
                var updatedSlice;
                if ((0, build_control_util.IW)(slice)) {
                    var compositeSlice = this.getCompositeFormattingSlice(container, formattingObjectOptions, slice, disabled, sliceTransform, revertToDefaultManager, formattingModelWarnings);
                    compositeSlice && (updatedSlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, compositeSlice), {
                        pivotSource: formattingSource,
                        groupUid
                    }));
                } else {
                    var simpleSlice = this.getSimpleFormattingSlice(container, formattingObjectOptions, slice, disabled, conditionalFormattingDisplayName, sliceTransform, containerSliceDisplayName, revertToDefaultManager, formattingModelWarnings);
                    simpleSlice && (updatedSlice = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, simpleSlice), {
                        pivotSource: formattingSource,
                        groupUid
                    }));
                }
                return updatedSlice;
            }, FormattingModelService.prototype.getSimpleFormattingSlice = function(container, formattingObjectOptions, slice, disabled, conditionalFormattingDisplayName, sliceTransform, containerSliceDisplayName, revertToDefaultManager, formattingModelWarnings) {
                var objectDescriptors = formattingObjectOptions.objectDescriptors, source = formattingObjectOptions.originSource, formattingDescriptor = slice.control.properties.descriptor;
                _.isEmpty(formattingDescriptor.propertyName) || revertToDefaultManager.addReferencedDescriptor((0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingDescriptor), {
                    originSource: source
                }));
                var propertyDescriptor = formatting_utils.w7(formattingDescriptor, objectDescriptors), type = this.getTypeFromObjectDescriptor(formattingDescriptor, propertyDescriptor), sliceWithDisplayName = sliceTransform(slice, objectDescriptors, {
                    conditionalFormattingDisplayName,
                    containerSliceDisplayName,
                    formattingDescriptor,
                    formattingModelWarnings,
                    formattingObjectOptions,
                    propertyDescriptor,
                    type,
                    canvasItem: container
                });
                if (sliceWithDisplayName) {
                    var showChangeIndicator = this.getSliceShowChangeIndicator(container, formattingObjectOptions, formattingDescriptor), formattingDescriptorContract = this.getFormattingDescriptorContract({
                        formattingDescriptor,
                        type
                    }), warningMessage = this.getSliceWarning(sliceWithDisplayName, formattingDescriptor, formattingModelWarnings), control = sliceWithDisplayName.control, updatedControl = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, control), {
                        properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control.properties), {
                            descriptor: formattingDescriptorContract
                        })
                    });
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, sliceWithDisplayName), {
                        disabled: disabled || sliceWithDisplayName.disabled,
                        control: updatedControl,
                        warningMessage,
                        showChangeIndicator,
                        originSource: source
                    });
                }
            }, FormattingModelService.prototype.getCompositeFormattingSlice = function(container, formattingObjectOptions, slice, disabled, sliceTransform, revertToDefaultManager, formattingModelWarnings) {
                var objectDescriptors = formattingObjectOptions.objectDescriptors, source = formattingObjectOptions.originSource;
                if (slice = sliceTransform(slice, objectDescriptors, void 0)) {
                    var warningMessage, control = slice.control;
                    debug.fF.assertValue(slice.displayName, "Composite controls must specify a display name");
                    var showChangeIndicator = !1, properties = control.properties, newProperties = {};
                    for (var key in properties) {
                        var typedKey = key, property = properties[typedKey];
                        if (property) {
                            var descriptor = property.descriptor;
                            _.isEmpty(descriptor.propertyName) || revertToDefaultManager.addReferencedDescriptor((0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, descriptor), {
                                originSource: source
                            }));
                            var propertyDescriptor = formatting_utils.w7(property.descriptor, objectDescriptors), formattingDescriptor = property.descriptor;
                            !showChangeIndicator && this.getSliceShowChangeIndicator(container, formattingObjectOptions, formattingDescriptor) && (showChangeIndicator = !0);
                            var type = this.getTypeFromObjectDescriptor(formattingDescriptor, propertyDescriptor), formattingDescriptorContract = this.getFormattingDescriptorContract({
                                formattingDescriptor,
                                type
                            });
                            warningMessage = warningMessage || this.getSliceWarning(slice, formattingDescriptor, formattingModelWarnings), 
                            newProperties[typedKey] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, property), {
                                descriptor: formattingDescriptorContract
                            });
                        }
                    }
                    var updatedControl = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, control), {
                        properties: newProperties
                    });
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, slice), {
                        disabled: disabled || slice.disabled,
                        control: updatedControl,
                        warningMessage,
                        showChangeIndicator,
                        originSource: source
                    });
                }
            }, FormattingModelService.prototype.getWarningForDescriptor = function(warnings, descriptor) {
                if (warnings) {
                    var objectWarning = warnings[descriptor.objectName];
                    if (objectWarning) {
                        var dataBoundExprWarning = this.conditionalFormattingService.getDataBoundExprWarning(objectWarning, descriptor);
                        if (dataBoundExprWarning) return dataBoundExprWarning;
                        if (this.featureSwitchService.featureSwitches.onObject) {
                            var warningPropertyName = objectWarning.propertyName;
                            if (warningPropertyName && warningPropertyName === descriptor.propertyName) return objectWarning;
                        }
                    }
                }
            }, FormattingModelService.prototype.getFormattingDescriptorContract = function(options) {
                var type = options.type;
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, options.formattingDescriptor), {
                    type
                });
            }, FormattingModelService.prototype.getTypeFromObjectDescriptor = function(formattingDescriptor, propertyDescriptor) {
                var _a, propertyDescriptorType = (0, property_pane_util.sH)((null == propertyDescriptor ? void 0 : propertyDescriptor.type) || {}, formattingDescriptor.propertyTypes), variantDefinition = null === (_a = null == propertyDescriptor ? void 0 : propertyDescriptor.type) || void 0 === _a ? void 0 : _a.variant;
                return variantDefinition && (propertyDescriptorType = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)({}, propertyDescriptorType), {
                    variant: variantDefinition
                })), propertyDescriptorType;
            }, FormattingModelService.prototype.createSaveFormattingSlicesActivity = function(source) {
                return this.contextActivityService.createActivity((0, tslib_es6.__assign)({
                    name: "Save Formatting Slices"
                }, source));
            }, FormattingModelService.prototype.createChangeFormatActivity = function(visualName, visualType, uid, objectName, propertyName, source, parentActivity) {
                return parentActivity.createChildActivity({
                    name: "Change Format",
                    data: (0, tslib_es6.__assign)({
                        propertyName,
                        objectName
                    }, source),
                    visualName,
                    visualType,
                    uid
                });
            }, FormattingModelService.prototype.revertToDefault = function(descriptors, cardUid, parentContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _i, _a, key, descriptorsBySource, _b, _c, _d, _e, source, sourcePivot, descriptorsToRevert;
                    return (0, tslib_es6.__generator)(this, function(_g) {
                        switch (_g.label) {
                          case 0:
                            if (cardUid) for (_i = 0, _a = Array.from(this.selectedContainerItems.keys()); _i < _a.length; _i++) (key = _a[_i]).startsWith(cardUid) && this.selectedContainerItems.delete(key); else this.selectedContainerItems.clear();
                            for (_d in descriptorsBySource = _.groupBy(descriptors, function(descriptor) {
                                return descriptor.originSource;
                            }), _c = [], _b = descriptorsBySource) _c.push(_d);
                            _e = 0, _g.label = 1;

                          case 1:
                            if (!(_e < _c.length)) return [ 3, 10 ];
                            if (!((_d = _c[_e]) in _b)) return [ 3, 9 ];
                            switch (descriptorsToRevert = descriptorsBySource[source = _d], sourcePivot = source) {
                              case "Page":
                                return [ 3, 2 ];

                              case "Analytics":
                                return [ 3, 4 ];

                              case "Visual":
                                return [ 3, 5 ];

                              case "Format_Label_General":
                                return [ 3, 6 ];
                            }
                            return [ 3, 8 ];

                          case 2:
                            return [ 4, this.pageFormattingService.revertPageSliceDefinitions(descriptorsToRevert) ];

                          case 3:
                            return _g.sent(), [ 3, 9 ];

                          case 4:
                            return this.analyticsFormattingService.revertVisualSlicesToDefinitions(descriptorsToRevert, parentContextActivity), 
                            [ 3, 9 ];

                          case 5:
                            return this.visualFormattingService.revertVisualSlicesToDefinitions(descriptorsToRevert, parentContextActivity), 
                            [ 3, 9 ];

                          case 6:
                            return [ 4, this.canvasItemFormattingService.revertVisualSlicesToDefinitions(descriptorsToRevert, parentContextActivity) ];

                          case 7:
                            return _g.sent(), [ 3, 9 ];

                          case 8:
                            debug.fF.assertNever(sourcePivot), _g.label = 9;

                          case 9:
                            return _e++, [ 3, 1 ];

                          case 10:
                            return [ 2 ];
                        }
                    });
                });
            }, FormattingModelService.prototype.changeContainerDropdownValue = function(containersInfo, canvasItems) {
                for (var _i = 0, containersInfo_1 = containersInfo; _i < containersInfo_1.length; _i++) {
                    var containerInfo = containersInfo_1[_i];
                    this.selectedContainerItems.set(containerInfo.containerName, containerInfo.value);
                }
                this.containerSelectionChangedSubject.next({
                    canvasItems
                });
            }, FormattingModelService.prototype.saveFormattingSlicesValue = function(changes, telemetrySource) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var saveFormattingSlicesActivity, visualFormattingContextActivities, selectedItem, change, propertySlice, canvasItems, saveObjectValue_1, remainingItems, selectedIndex_1, exception_1, exception_2;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            saveFormattingSlicesActivity = this.createSaveFormattingSlicesActivity(telemetrySource), 
                            _b.label = 1;

                          case 1:
                            return _b.trys.push([ 1, 7, , 8 ]), visualFormattingContextActivities = [], "No Telemetry" !== telemetrySource.source && ((selectedItem = null === (_a = changes[0].canvasItems) || void 0 === _a ? void 0 : _a[0]) ? (0, 
                            visual_session_telemetry_utils.v)(selectedItem, this.saveServices.visualPlugin, this.saveServices.trustedVisualService) || (visualFormattingContextActivities = this.createChangeFormatContextActivitiesFromChanges(changes, telemetrySource, saveFormattingSlicesActivity, selectedItem)) : "Pane" === telemetrySource.source && (visualFormattingContextActivities = this.createChangeFormatContextActivitiesFromChanges(changes, telemetrySource, saveFormattingSlicesActivity, selectedItem))), 
                            1 === _.size(changes) && changes[0].objectName === formatting_utils.nB ? (this.changeContainerDropdownValue([ {
                                containerName: (propertySlice = (change = changes[0]).propertySlice).name,
                                value: propertySlice.value
                            } ], canvasItems = change.canvasItems), [ 2 ]) : 1 !== _.size(changes) || "editable-container-object-name" !== changes[0].objectName ? [ 3, 3 ] : (propertySlice = (change = changes[0]).propertySlice, 
                            canvasItems = change.canvasItems, this.isEditableContainerWithSelectionChangeOnly(changes) && this.containerSelectionChangedSubject.next({
                                canvasItems
                            }), saveObjectValue_1 = propertySlice.value, remainingItems = _.filter(saveObjectValue_1.items, function(item) {
                                var _a;
                                return !_.find(null === (_a = saveObjectValue_1.itemUpdates) || void 0 === _a ? void 0 : _a.deletes, function(deleteItem) {
                                    return deleteItem.displayName === item.displayName;
                                });
                            }), selectedIndex_1 = _.isEmpty(remainingItems) ? 0 : _.findIndex(remainingItems, function(item) {
                                return _.isEqual(item.value, saveObjectValue_1.selectedItem.value);
                            }), debug.fF.assert(function() {
                                return selectedIndex_1 >= 0;
                            }, "Expect the selected index of EditableContainer always >=0"), [ 4, this.saveProperties(changes, saveFormattingSlicesActivity) ]);

                          case 2:
                            return _b.sent(), selectedIndex_1 >= 0 && this.selectedListEditorItems.get(propertySlice.name) !== selectedIndex_1 && this.selectedListEditorItems.set(propertySlice.name, selectedIndex_1), 
                            [ 2 ];

                          case 3:
                            return _b.trys.push([ 3, 5, , 6 ]), [ 4, this.saveProperties(changes, saveFormattingSlicesActivity) ];

                          case 4:
                            return _b.sent(), visualFormattingContextActivities.forEach(function(visualFormattingContextActivity) {
                                return visualFormattingContextActivity.resolve();
                            }), [ 3, 6 ];

                          case 5:
                            throw exception_1 = _b.sent(), visualFormattingContextActivities.forEach(function(visualFormattingContextActivity) {
                                return visualFormattingContextActivity.reject(exception_1);
                            }), exception_1;

                          case 6:
                            return saveFormattingSlicesActivity.resolve(), [ 3, 8 ];

                          case 7:
                            throw exception_2 = _b.sent(), saveFormattingSlicesActivity.reject(exception_2), 
                            exception_2;

                          case 8:
                            return [ 2 ];
                        }
                    });
                });
            }, FormattingModelService.prototype.createChangeFormatContextActivitiesFromChanges = function(changes, telemetrySource, parentActivity, selectedItem) {
                var _this = this;
                return changes.map(function(change) {
                    var _a, _b, objectName = change.objectName, propertyName = null === (_a = change.propertySlice) || void 0 === _a ? void 0 : _a.name, visualName = null !== (_b = null == selectedItem ? void 0 : selectedItem.name) && void 0 !== _b ? _b : void 0, visualType = selectedItem && (0, 
                    visualContainerUtilsHelper.s)(selectedItem);
                    return _this.createChangeFormatActivity(visualName, visualType, change.uid, objectName, propertyName, telemetrySource, parentActivity);
                });
            }, FormattingModelService.prototype.isEditableContainerWithSelectionChangeOnly = function(changes) {
                var _a, _b, _c;
                if (_.size(changes) > 1 || "editable-container-object-name" !== changes[0].objectName) return !1;
                var propertySlice = changes[0].propertySlice, saveObjectValue = propertySlice.value;
                return !!(_.isEmpty(null === (_a = saveObjectValue.itemUpdates) || void 0 === _a ? void 0 : _a.adds) && _.isEmpty(null === (_b = saveObjectValue.itemUpdates) || void 0 === _b ? void 0 : _b.deletes) && _.isEmpty(null === (_c = saveObjectValue.itemUpdates) || void 0 === _c ? void 0 : _c.renames)) && this.selectedListEditorItems.get(propertySlice.name) !== _.findIndex(saveObjectValue.items, function(item) {
                    return _.isEqual(item.value, saveObjectValue.selectedItem.value);
                });
            }, FormattingModelService.prototype.saveProperties = function(changes, parentActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var pageChanges, canvasPropertiesChanges, updatedCanvasFormattingChanges, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _a = _.partition(changes, function(change) {
                                return "Page" === change.formattingSource;
                            }), pageChanges = _a[0], canvasPropertiesChanges = _a[1], _.isEmpty(pageChanges) ? [ 3, 2 ] : [ 4, this.pageFormattingService.saveProperties(pageChanges, this.saveServices) ];

                          case 1:
                            _b.sent(), _b.label = 2;

                          case 2:
                            return _.isEmpty(canvasPropertiesChanges) ? [ 3, 4 ] : (updatedCanvasFormattingChanges = canvasPropertiesChanges.map(function(change) {
                                var isVisualContainerPropertyChange = _.some(VisualContainerPropertyPlaceholders, function(placeholder) {
                                    return change.objectName === placeholder.objectName;
                                });
                                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, change), {
                                    formattingSource: isVisualContainerPropertyChange ? "Format_Label_General" : change.formattingSource
                                });
                            }), [ 4, this.saveCanvasProperties(updatedCanvasFormattingChanges, parentActivity) ]);

                          case 3:
                            _b.sent(), _b.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, FormattingModelService.prototype.saveCanvasProperties = function(canvasPropertiesChanges, parentActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var changes, promises, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return changes = _.groupBy(canvasPropertiesChanges, function(change) {
                                return change.formattingSource;
                            }), promises = [], this.saveServices.undoRedo.register("SaveFormattingValues", function() {
                                for (var formattingSource in changes) for (var _i = 0, canvasItemWithChanges_1 = _this.getChangesPerCanvasItem(changes[formattingSource]); _i < canvasItemWithChanges_1.length; _i++) {
                                    var canvasItemWithChange = canvasItemWithChanges_1[_i];
                                    switch (formattingSource) {
                                      case "Format_Label_General":
                                        _this.canvasItemFormattingService.saveProperties(canvasItemWithChange.changes, _this.saveServices, canvasItemWithChange.canvasItem, parentActivity);
                                        break;

                                      case "Visual":
                                        _this.visualFormattingService.saveProperties(canvasItemWithChange.changes, _this.saveServices, canvasItemWithChange.canvasItem, parentActivity);
                                        break;

                                      case "Analytics":
                                        promises.push(_this.analyticsFormattingService.saveProperties(canvasItemWithChange.changes, canvasItemWithChange.canvasItem, parentActivity));
                                    }
                                }
                            }), [ 4, Promise.all(promises) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FormattingModelService.prototype.getChangesPerCanvasItem = function(changesPerFormattingSource) {
                var canvasItemKeyWithChanges = {}, canvasItems = {};
                changesPerFormattingSource.forEach(function(change) {
                    change.canvasItems.forEach(function(canvasItem) {
                        var name = canvasItem.name;
                        canvasItems[name] = canvasItem, canvasItemKeyWithChanges[name] || (canvasItemKeyWithChanges[name] = []);
                        var updatedChange = (0, tslib_es6.__assign)({}, change);
                        canvasItemKeyWithChanges[name] = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], canvasItemKeyWithChanges[name], !0), [ updatedChange ], !1);
                    });
                });
                var returnValue = [];
                for (var name_2 in canvasItemKeyWithChanges) returnValue.push({
                    canvasItem: canvasItems[name_2],
                    changes: canvasItemKeyWithChanges[name_2].map(function(change) {
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, change), {
                            canvasItems: void 0
                        });
                    })
                });
                return returnValue;
            }, FormattingModelService.\u0275fac = function(t) {
                return new (t || FormattingModelService)(core["\u0275\u0275inject"](explore_ui_authoring_constants.Ol, 8), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](layout_authoring_service.U), core["\u0275\u0275inject"](AnalyticsFormattingService), core["\u0275\u0275inject"](CanvasItemFormattingService), core["\u0275\u0275inject"](ConditionalFormattingService), core["\u0275\u0275inject"](context_activity_service.r), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](PageFormattingService), core["\u0275\u0275inject"](VisualFormattingService), core["\u0275\u0275inject"](resource_loader_service.l6), core["\u0275\u0275inject"](resource_registration_service.j), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](theme_service.f), core["\u0275\u0275inject"](trusted_visual_service.t), core["\u0275\u0275inject"](undo_redo_service.z), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visual_style_preset_service.A), core["\u0275\u0275inject"](visual_sync_service.M));
            }, FormattingModelService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingModelService,
                factory: FormattingModelService.\u0275fac
            }), FormattingModelService;
        }(), merge = __webpack_require__(63057), empty = __webpack_require__(37272), from = __webpack_require__(82762), isObservable = __webpack_require__(38860), of = __webpack_require__(11547), filter = __webpack_require__(59973), takeUntil = __webpack_require__(83317), withLatestFrom = __webpack_require__(23558), startWith = __webpack_require__(22318), pairwise = __webpack_require__(6663), switchMap = __webpack_require__(81905), mapTo = __webpack_require__(73805), JsCommon_events = __webpack_require__(91615), ngrx_component_store = __webpack_require__(95281), ngrx_store = __webpack_require__(85732), distinctUntilChanged = __webpack_require__(77526), selectState = function(state) {
            return state;
        }, FormattingStoreFactory = function() {
            function FormattingStoreFactory() {}
            return FormattingStoreFactory.prototype.create = function() {
                return new FormattingStore;
            }, FormattingStoreFactory.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingStoreFactory,
                factory: FormattingStoreFactory.\u0275fac = function(t) {
                    return new (t || FormattingStoreFactory);
                }
            }), FormattingStoreFactory;
        }(), FormattingStore = function(_super) {
            function FormattingStore() {
                var _this = _super.call(this) || this;
                return _this.setState({
                    cards: void 0,
                    groups: void 0,
                    slices: void 0,
                    revertToDefaultDescriptors: [],
                    canvasItem: void 0
                }), _this.state$.pipe((0, take.q)(1)).subscribe(function(state) {
                    debug.fF.assert(function() {
                        return void 0 === state.cards && void 0 === state.groups && void 0 === state.slices;
                    }, "FormattingStore: state should be empty");
                }), _this;
            }
            return (0, tslib_es6.__extends)(FormattingStore, _super), FormattingStore.prototype.getViewModel$ = function() {
                return this.select(selectState).pipe((0, filter.h)(function(state) {
                    return !(void 0 === state.cards && void 0 === state.groups && void 0 === state.slices);
                }));
            }, FormattingStore.prototype.selectAllCards = function() {
                return this.select((0, ngrx_store.P1)(selectState, function(state) {
                    return state.cards;
                }));
            }, FormattingStore.prototype.selectTopLevelToggle = function(uid, selector) {
                return this.select(function(uid, selector) {
                    return (0, ngrx_store.P1)(selectState, function(state) {
                        var toggle, isToggleMatching = function(topLevelToggle) {
                            return (formatting_utils.hy(topLevelToggle.uid, uid, (0, formattingModelUtil.O7)(topLevelToggle), selector) || formatting_utils.zh(topLevelToggle.control.properties.descriptor) === uid) && (toggle = topLevelToggle, 
                            !0);
                        };
                        return state.cards && Object.keys(state.cards).forEach(function(key) {
                            var topLevelToggle = state.cards[key].topLevelToggle;
                            topLevelToggle && isToggleMatching(topLevelToggle) && (toggle = topLevelToggle);
                        }), toggle || state.groups && Object.keys(state.groups).forEach(function(key) {
                            var topLevelToggle = state.groups[key].topLevelToggle;
                            topLevelToggle && isToggleMatching(topLevelToggle) && (toggle = topLevelToggle);
                        }), toggle;
                    });
                }(uid, selector)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingStore.prototype.selectGroup = function(uid) {
                return this.select(function(uid) {
                    return (0, ngrx_store.P1)(selectState, function(state) {
                        return state.groups && state.groups[uid];
                    });
                }(uid)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingStore.prototype.selectSlice = function(uid, selector) {
                return this.select(function(uid, selector) {
                    return (0, ngrx_store.P1)(selectState, function(state) {
                        var key = (0, formattingModelUtil.$Q)(uid, selector);
                        return state.slices && state.slices[key];
                    });
                }(uid, selector)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingStore.prototype.selectCard = function(uid) {
                return this.select(function(uid) {
                    return (0, ngrx_store.P1)(selectState, function(state) {
                        return state.cards && state.cards[uid];
                    });
                }(uid)).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingStore.prototype.getChartElementsContract$ = function() {
                var _this = this, selector = (0, ngrx_store.P1)(selectState, function(state) {
                    return _this.getChartElementsFormatContract(state);
                });
                return this.select(selector).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingStore.prototype.getCanvasItem$ = function() {
                var selector = (0, ngrx_store.P1)(selectState, function(state) {
                    return state.canvasItem;
                });
                return this.select(selector).pipe((0, distinctUntilChanged.x)());
            }, FormattingStore.prototype.getChartElementsFormatContract = function(state) {
                var options = [];
                return function(cards) {
                    for (var key in cards) {
                        var card = cards[key];
                        card.topLevelToggle && "Visual" === card.pivotSource && options.push({
                            formattingSource: card.originSource,
                            displayName: card.displayName,
                            description: card.description,
                            checked: card.topLevelToggle.control.properties.value,
                            uid: card.topLevelToggle.uid,
                            descriptor: card.topLevelToggle.control.properties.descriptor,
                            disabled: card.disabled,
                            disabledReason: card.disabledReason,
                            isAnalyticsPane: card.analyticsPane,
                            warningMessage$: card.warningMessage$
                        });
                    }
                }(state.cards), _.isEmpty(options) ? void 0 : {
                    items: options
                };
            }, FormattingStore.prototype.getCardTopLevelToggleUids$ = function() {
                var _this = this, selector = (0, ngrx_store.P1)(selectState, function(state) {
                    return _this.getCardTopLevelToggleUids(state);
                });
                return this.select(selector).pipe((0, distinctUntilChanged.x)(_.isEqual));
            }, FormattingStore.prototype.getCardTopLevelToggleUids = function(state) {
                var cardTopLevelToggleUids = new Set;
                return function(cards) {
                    for (var key in cards) {
                        var card = cards[key];
                        card.topLevelToggle && cardTopLevelToggleUids.add(card.topLevelToggle.uid);
                    }
                }(state.cards), cardTopLevelToggleUids;
            }, FormattingStore;
        }(ngrx_component_store.m1), skip = __webpack_require__(3307), panes_visibility_service = __webpack_require__(21024), tutorial_pop_up_service = __webpack_require__(56083), FormattingTutorialService = function() {
            function FormattingTutorialService(localizationService, paneVisibilityService, tutorialPopupService) {
                var _this = this;
                this.localizationService = localizationService, this.paneVisibilityService = paneVisibilityService, 
                this.tutorialPopupService = tutorialPopupService, this.localCache = {}, this.destroy$ = new Subject.xQ, 
                this.paneVisibilityService.getPanes$().pipe((0, skip.T)(1), (0, filter.h)(function(panes) {
                    return _.every(Object.values(panes), function(pane) {
                        return !pane.isPaneVisible;
                    });
                }), (0, takeUntil.R)(this.destroy$)).subscribe(function() {
                    _this.startFormattingTutorial("PaneMoveTutorial");
                });
            }
            return FormattingTutorialService.prototype.startFormattingTutorial = function(tutorialType, options) {
                switch (tutorialType) {
                  case "AnalyticsPaneMoveTutorial":
                    this.localCache.AnalyticsPaneMoveTutorial || this.tutorialPopupService.startTutorial(this.getAnalyticsPaneMoveTutorial(options));
                    break;

                  case "FieldPickerTutorial":
                    this.localCache.FieldPickerTutorial || this.tutorialPopupService.startTutorial(this.getFieldPickerTutorial());
                    break;

                  case "DrillthroughTutorial":
                    this.localCache.DrillthroughTutorial || this.tutorialPopupService.startTutorial(this.getDrillthroughPaneMoveTutorial());
                    break;

                  case "PaneMoveTutorial":
                    this.localCache.PaneMoveTutorial || this.tutorialPopupService.startTutorial(this.getPaneMoveTutorial());
                    break;

                  default:
                    debug.fF.assertFail("Unknown formatting tutorial type");
                }
                this.localCache[tutorialType] = !0;
            }, FormattingTutorialService.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete();
            }, FormattingTutorialService.prototype.getPaneMoveTutorial = function() {
                var _a;
                return {
                    itemKeys: [ "onObjectPaneMoveTutorial" ],
                    items: (_a = {}, _a.onObjectPaneMoveTutorial = {
                        title: this.localizationService.get("TutorialPopup_DataPaneMoveTutorial_Title"),
                        text: this.localizationService.get("TutorialPopup_DataPaneMoveTutorial_Content"),
                        buttonLabel: this.localizationService.get("OK_ButtonText"),
                        dataStoreKey: "onObjectPaneMoveTutorial",
                        canShow: function() {
                            return !!$('ribbon [data-unique-id="view"]');
                        },
                        attachTo: function() {
                            return $('ribbon [data-unique-id="view"]');
                        },
                        customClass: "trident no-icon big-popup",
                        modalButtonClassOverride: "ok-btn white-btn",
                        preferredOrientation: "right",
                        hasCloseBtn: !0,
                        overrideCancelWithClose: !0,
                        closeOnBackdropClick: !0
                    }, _a),
                    isSequentialTutorial: !1
                };
            }, FormattingTutorialService.prototype.getAnalyticsPaneMoveTutorial = function(options) {
                var _a;
                debug.fF.assertAnyValue(!!options, "options should be provided in the case of AnalyticsPaneMoveTutorial");
                var analyticsSelector = options.selector;
                return {
                    itemKeys: [ "onObjectAnalyticsFormattingTutorial" ],
                    items: (_a = {}, _a.onObjectAnalyticsFormattingTutorial = {
                        title: this.localizationService.get("TutorialPopup_AnalyticsFormatting_Title"),
                        text: this.localizationService.get("TutorialPopup_AnalyticsFormatting_Content"),
                        buttonLabel: this.localizationService.get("OK_ButtonText"),
                        dataStoreKey: "onObjectAnalyticsFormattingTutorial",
                        canShow: function() {
                            return !!$(analyticsSelector);
                        },
                        attachTo: function() {
                            return $(analyticsSelector);
                        },
                        customClass: "trident no-icon big-popup",
                        modalButtonClassOverride: "ok-btn white-btn",
                        preferredOrientation: "right",
                        hasCloseBtn: !0,
                        overrideCancelWithClose: !0,
                        offset: options.offset,
                        arrowOffset: options.arrowOffset,
                        closeOnBackdropClick: !0
                    }, _a),
                    isSequentialTutorial: !1
                };
            }, FormattingTutorialService.prototype.getFieldPickerTutorial = function() {
                var _a, fieldPickerSelector = "build-field-well field-picker-modern pbi-drag-drop-picker span div.selfAndChildrenContent";
                return {
                    itemKeys: [ "onObjectFieldPickerTutorial" ],
                    items: (_a = {}, _a.onObjectFieldPickerTutorial = {
                        title: this.localizationService.get("TutorialPopup_FieldWell_Title"),
                        text: this.localizationService.get("TutorialPopup_FieldWell_Content"),
                        buttonLabel: this.localizationService.get("OK_ButtonText"),
                        dataStoreKey: "onObjectFieldPickerTutorial",
                        canShow: function() {
                            return !!$(fieldPickerSelector).first();
                        },
                        attachTo: function() {
                            return $(fieldPickerSelector).first();
                        },
                        customClass: "trident no-icon big-popup",
                        modalButtonClassOverride: "hidden",
                        preferredOrientation: "right",
                        hasCloseBtn: !0,
                        overrideCancelWithClose: !0,
                        closeOnBackdropClick: !0
                    }, _a),
                    isSequentialTutorial: !1
                };
            }, FormattingTutorialService.prototype.getDrillthroughPaneMoveTutorial = function() {
                var _a, drillthroughSelector = '[data-unique-id="Page-pageInformation"] [data-testid="formatting-card-button"]';
                return {
                    itemKeys: [ "onObjectDrillthroughTutorial" ],
                    items: (_a = {}, _a.onObjectDrillthroughTutorial = {
                        title: this.localizationService.get("TutorialPopup_DrillthroughFormatting_Title"),
                        text: this.localizationService.get("TutorialPopup_DrillthroughFormatting_Content"),
                        buttonLabel: this.localizationService.get("OK_ButtonText"),
                        dataStoreKey: "onObjectDrillthroughTutorial",
                        canShow: function() {
                            return !!$(drillthroughSelector);
                        },
                        attachTo: function() {
                            return $(drillthroughSelector);
                        },
                        customClass: "trident no-icon big-popup",
                        modalButtonClassOverride: "ok-btn white-btn",
                        preferredOrientation: "right",
                        hasCloseBtn: !0,
                        overrideCancelWithClose: !0,
                        closeOnBackdropClick: !0
                    }, _a),
                    isSequentialTutorial: !1
                };
            }, FormattingTutorialService.\u0275fac = function(t) {
                return new (t || FormattingTutorialService)(core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](panes_visibility_service.r), core["\u0275\u0275inject"](tutorial_pop_up_service.yU));
            }, FormattingTutorialService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingTutorialService,
                factory: FormattingTutorialService.\u0275fac
            }), FormattingTutorialService;
        }();
        function removeDeferredData(item) {
            return void 0 !== item ? _.omit(item, "deferredStatus") : void 0;
        }
        var FormattingService = function() {
            function FormattingService(sliceCustomizationService, eventBridge, explorationNavigationService, explorationCapabilities, featureSwitchService, formattingModelService, formattingStoreFactory, formattingTutorialService, runningVisual, selectionService, visualPluginOperationsService, visualPluginService) {
                this.sliceCustomizationService = sliceCustomizationService, this.eventBridge = eventBridge, 
                this.explorationNavigationService = explorationNavigationService, this.explorationCapabilities = explorationCapabilities, 
                this.featureSwitchService = featureSwitchService, this.formattingModelService = formattingModelService, 
                this.formattingStoreFactory = formattingStoreFactory, this.formattingTutorialService = formattingTutorialService, 
                this.runningVisual = runningVisual, this.selectionService = selectionService, this.visualPluginOperationsService = visualPluginOperationsService, 
                this.visualPluginService = visualPluginService, this.updateCounter = 0, this.currentUpdateIds = new Map, 
                this.formattingStores = new Map, this.destroy$ = new Subject.xQ;
                var selectedCanvasItems$ = this.selectionService.selectedElements$.pipe((0, map.U)(function(selectedElements) {
                    var _a;
                    return null !== (_a = null == selectedElements ? void 0 : selectedElements.reduce(function(acc, value) {
                        var canvasItem = value.canvasItem;
                        return canvasItem && acc.push(canvasItem), acc;
                    }, [])) && void 0 !== _a ? _a : [];
                }), (0, shareReplay.d)(1));
                this.initUpdateHandlers(selectedCanvasItems$), this.initPauseHandlers(selectedCanvasItems$);
            }
            return FormattingService.prototype.initUpdateHandlers = function(selectedCanvasItems$) {
                var currentPageUpdateTimeout, _this = this, updatePageState = function() {
                    _this.updateStateInt(_this.getNonVisualUpdateSources(), void 0);
                }, updateCanvasItemsState = function(canvasItems) {
                    canvasItems.forEach(function(canvasItem) {
                        return function(canvasItem) {
                            _this.updateStateInt(_this.getVisualUpdateSources(), canvasItem);
                        }(canvasItem);
                    });
                }, containerChanged$ = this.formattingModelService.getContainerChanged$().pipe((0, 
                map.U)(function(args) {
                    return args.canvasItems;
                })), canvasChanged$ = this.eventBridge.on(services_events.wAN), explorationSettingsLoaded$ = this.eventBridge.on(services_events.WJC).pipe((0, 
                filter.h)(function(args) {
                    return !!args.allowInlineExplorationChanged;
                })), sectionNameChanged$ = this.eventBridge.on(services_events.TTT), sectionObjectsEvaluated$ = this.eventBridge.on(services_events.jsX), sectionsArrayChanged$ = this.explorationNavigationService.sections$, visualThemeChanged$ = this.eventBridge.on(JsCommon_events.kx);
                (0, merge.T)(canvasChanged$, explorationSettingsLoaded$, sectionNameChanged$, sectionObjectsEvaluated$, sectionsArrayChanged$, visualThemeChanged$, containerChanged$.pipe((0, 
                filter.h)(function(canvasItems) {
                    return _.isEmpty(canvasItems);
                }))).pipe((0, takeUntil.R)(this.destroy$)).subscribe(function() {
                    void 0 === currentPageUpdateTimeout && (currentPageUpdateTimeout = setTimeout(function() {
                        updatePageState(), clearTimeout(currentPageUpdateTimeout), currentPageUpdateTimeout = void 0;
                    }, 100));
                });
                var currentCanvasItemsTimeout, canvasItemContainerPositionChanged$ = this.eventBridge.on(services_events.Of1).pipe((0, 
                withLatestFrom.M)(selectedCanvasItems$), (0, map.U)(function(_a) {
                    var args = _a[0];
                    return _a[1].filter(function(canvasItem) {
                        return (0, visualContainerGroup2.Vz)(canvasItem) && args.affectContainer(canvasItem);
                    });
                })), visualContainerChanged$ = this.eventBridge.on(services_events.jCS).pipe((0, 
                withLatestFrom.M)(selectedCanvasItems$), (0, map.U)(function(_a) {
                    var args = _a[0];
                    return _a[1].filter(function(canvasItem) {
                        return (0, visualContainerGroup2.Vz)(canvasItem) && args.affectContainer(canvasItem) && (0, 
                        utils_visualContainerUtils.LR)(_this.visualPluginService, _this.visualPluginOperationsService, canvasItem);
                    });
                })), affectedContainersToUpdate$ = (0, merge.T)(visualContainerChanged$, canvasItemContainerPositionChanged$), visualContainerDataRendered$ = this.eventBridge.on(services_events.D1A), visualContainerGroupRendered$ = this.eventBridge.on(services_events.DSN), renderedContainersToUpdate$ = (0, 
                merge.T)(visualContainerDataRendered$, visualContainerGroupRendered$).pipe((0, takeUntil.R)(this.destroy$), (0, 
                map.U)(function(canvasItem) {
                    return [ canvasItem ];
                })), visualTypeChanged$ = this.eventBridge.on(services_events.KD7).pipe((0, map.U)(function(args) {
                    return args.changedItems;
                })), canvasItemsToUpdate$ = selectedCanvasItems$.pipe((0, takeUntil.R)(this.destroy$), (0, 
                startWith.O)([]), (0, pairwise.G)(), (0, map.U)(function(_a) {
                    var canvasItemsToUpdate = _.difference(_a[1], _a[0]);
                    return _.isEmpty(canvasItemsToUpdate) ? [] : canvasItemsToUpdate;
                })), canvasItemMap = new Map;
                (0, merge.T)(affectedContainersToUpdate$, visualTypeChanged$, containerChanged$, canvasItemsToUpdate$, renderedContainersToUpdate$).pipe((0, 
                takeUntil.R)(this.destroy$), (0, filter.h)(function(canvasItems) {
                    return !_.isEmpty(canvasItems);
                })).subscribe(function(canvasItems) {
                    canvasItems.forEach(function(canvasItem) {
                        canvasItemMap.set(canvasItem.name, canvasItem);
                    }), void 0 === currentCanvasItemsTimeout && (currentCanvasItemsTimeout = setTimeout(function() {
                        updateCanvasItemsState(Array.from(canvasItemMap.values())), canvasItemMap.clear(), 
                        clearTimeout(currentCanvasItemsTimeout), currentCanvasItemsTimeout = void 0;
                    }, 100));
                }), this.destroy$.subscribe(function() {
                    void 0 !== currentCanvasItemsTimeout && (clearTimeout(currentCanvasItemsTimeout), 
                    currentCanvasItemsTimeout = void 0), void 0 !== currentPageUpdateTimeout && (clearTimeout(currentPageUpdateTimeout), 
                    currentPageUpdateTimeout = void 0);
                });
                var modelChanged$ = this.eventBridge.on(services_events.CCe), reportVisualError$ = this.eventBridge.on(services_events.$$f);
                (0, merge.T)(modelChanged$, reportVisualError$).pipe((0, takeUntil.R)(this.destroy$)).pipe((0, 
                withLatestFrom.M)(selectedCanvasItems$)).subscribe(function(_a) {
                    var selectedCanvasItems = _a[1];
                    updatePageState(), updateCanvasItemsState(selectedCanvasItems);
                });
            }, FormattingService.prototype.initPauseHandlers = function(selectedCanvasItems$) {
                var _this = this, selectedVisualNames$ = selectedCanvasItems$.pipe((0, map.U)(function(selectedCanvasItems) {
                    return selectedCanvasItems.reduce(function(acc, value) {
                        return acc.push(value.name), acc;
                    }, []);
                })), visualTypeChanged$ = this.eventBridge.on(services_events.KD7).pipe((0, takeUntil.R)(this.destroy$)), visualDataRendered$ = this.eventBridge.on(services_events.D1A).pipe((0, 
                takeUntil.R)(this.destroy$));
                visualTypeChanged$.pipe((0, withLatestFrom.M)(selectedVisualNames$)).subscribe(function(_a) {
                    var selectedVisuals = _a[1], changedItemNames = _a[0].changedItems.filter(function(visual) {
                        return !(0, utils_visualContainerUtils.LR)(_this.visualPluginService, _this.visualPluginOperationsService, visual);
                    }).map(function(item) {
                        return item.name;
                    }), newConvertedVisualNames = _.intersection(selectedVisuals, changedItemNames);
                    _.isEmpty(newConvertedVisualNames) || _this.pauseUpdatesForVisualContainers(newConvertedVisualNames);
                }), visualDataRendered$.subscribe(function(visualContainer) {
                    _this.pauseUpdatesPromise && _this.resumeUpdateForVisualContainers([ visualContainer.name ]);
                }), selectedVisualNames$.subscribe(function(selectedVisualNames) {
                    var selectedVisualNamesSet = new Set(selectedVisualNames);
                    if (Array.from(_this.formattingStores.keys()).forEach(function(name) {
                        if (!selectedVisualNamesSet.has(name) && "page" !== name) {
                            var store = _this.formattingStores.get(name);
                            _this.formattingStores.delete(name), store.ngOnDestroy();
                        }
                    }), _this.pauseUpdatesPromise) {
                        for (var visualNamesToResume = [], _i = 0, pausedContainerNames_1 = Array.from(_this.pausedContainerNames.values()); _i < pausedContainerNames_1.length; _i++) {
                            var pausedContainerName = pausedContainerNames_1[_i];
                            selectedVisualNamesSet.has(pausedContainerName) || visualNamesToResume.push(pausedContainerName);
                        }
                        _this.resumeUpdateForVisualContainers(visualNamesToResume);
                    }
                });
            }, FormattingService.prototype.pauseUpdatesForVisualContainers = function(newVisualContainerNames) {
                var _this = this, pausedContainers = this.pausedContainerNames = this.pausedContainerNames || new Set;
                newVisualContainerNames.forEach(function(visualContainerName) {
                    return pausedContainers.add(visualContainerName);
                }), this.pauseUpdatesPromise || (this.pauseUpdatesPromise = new Promise(function(resolve) {
                    return _this.pauseUpdatesResolver = resolve;
                }));
            }, FormattingService.prototype.resumeUpdateForVisualContainers = function(newVisualContainerNames) {
                var pausedContainers = this.pausedContainerNames;
                debug.fF.assertValue(pausedContainers, "pausedContainers"), newVisualContainerNames.forEach(function(visualContainerName) {
                    return pausedContainers.delete(visualContainerName);
                }), 0 === pausedContainers.size && (this.pauseUpdatesResolver(), this.pauseUpdatesResolver = void 0, 
                this.pauseUpdatesPromise = void 0, this.pausedContainerNames = void 0);
            }, FormattingService.prototype.getViewModelIntl = function(options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.getViewModel$();
                }));
            }, FormattingService.prototype.selectAllCardsIntl = function(options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.selectAllCards();
                }));
            }, FormattingService.prototype.selectTopLevelToggleIntl = function(uid, selector, options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.selectTopLevelToggle(uid, selector);
                }));
            }, FormattingService.prototype.selectGroupIntl = function(uid, options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.selectGroup(uid).pipe((0, map.U)(function(group) {
                        return removeDeferredData(group);
                    }));
                }));
            }, FormattingService.prototype.selectSliceIntl = function(uid, selector, options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.selectSlice(uid, selector).pipe((0, map.U)(function(slice) {
                        return removeDeferredData(slice);
                    }));
                }));
            }, FormattingService.prototype.selectCardIntl = function(uid, options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.selectCard(uid).pipe((0, map.U)(function(card) {
                        return removeDeferredData(card);
                    }));
                }));
            }, FormattingService.prototype.getChartElementsContractIntl = function(options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.getChartElementsContract$();
                }));
            }, FormattingService.prototype.getCardTopLevelToggleUidsIntl = function(options$) {
                return this.getStore$(options$).pipe((0, switchMap.w)(function(store) {
                    return store.getCardTopLevelToggleUids$();
                }));
            }, FormattingService.prototype.getSubSelectablesIntl = function(options$) {
                var _this = this;
                return options$.pipe((0, switchMap.w)(function(options) {
                    if (1 === options.type) return empty.E;
                    var canvasItem = options.canvasItem, visualRenderedEvent$ = (0, merge.T)(_this.eventBridge.on(services_events.D1A), _this.eventBridge.on(services_events.DSN)).pipe((0, 
                    filter.h)(function(item) {
                        return item.name === canvasItem.name;
                    })), visualTypeChangedEvent$ = _this.eventBridge.on(services_events.KD7).pipe((0, 
                    filter.h)(function(args) {
                        return _.some(args.changedItems, function(item) {
                            return item.name === canvasItem.name;
                        });
                    })), visualContainerChangedEvent$ = _this.eventBridge.on(services_events.jCS).pipe((0, 
                    filter.h)(function(args) {
                        return (0, visualContainerGroup2.Vz)(canvasItem) && args.affectContainer(canvasItem);
                    }));
                    return (0, merge.T)(visualTypeChangedEvent$, visualRenderedEvent$, visualContainerChangedEvent$).pipe((0, 
                    startWith.O)({}), (0, mapTo.h)({})).pipe((0, switchMap.w)(function(_) {
                        return (0, visualContainerGroup2.Vz)(canvasItem) ? _this.runningVisual.getVisual$(canvasItem).pipe((0, 
                        switchMap.w)(function(visual) {
                            return visual ? (0, from.D)(visual.getSubSelectables()) : [];
                        })) : [];
                    }));
                }), (0, shareReplay.d)({
                    bufferSize: 1,
                    refCount: !0
                }));
            }, FormattingService.prototype.getFor = function(options) {
                var _this = this, options$ = (0, isObservable.b)(options) ? options : (0, of.of)(options);
                return {
                    getCardTopLevelToggleUids$: function() {
                        return _this.getCardTopLevelToggleUidsIntl(options$);
                    },
                    getChartElementsContract$: function() {
                        return _this.getChartElementsContractIntl(options$);
                    },
                    getViewModel$: function() {
                        return _this.getViewModelIntl(options$);
                    },
                    selectAllCards: function() {
                        return _this.selectAllCardsIntl(options$);
                    },
                    selectCard: function(uid) {
                        return _this.selectCardIntl(uid, options$);
                    },
                    selectGroup: function(uid) {
                        return _this.selectGroupIntl(uid, options$);
                    },
                    selectSlice: function(formattingId) {
                        var key = formatting_utils.zh(formattingId);
                        return _this.selectSliceIntl(key, void 0, options$);
                    },
                    selectTopLevelToggle: function(formattingId) {
                        var key = formatting_utils.zh(formattingId);
                        return _this.selectTopLevelToggleIntl(key, void 0, options$);
                    },
                    getSubSelectables$: function() {
                        return _this.getSubSelectablesIntl(options$);
                    }
                };
            }, FormattingService.prototype.getRevertToDefaultMetadata = function(canvasItem, formattingSource) {
                return this.formattingModelService.getRevertToDefaultMetadata(canvasItem, formattingSource);
            }, FormattingService.prototype.changeContainerDropdownValue = function(containersInfo, canvasItems) {
                this.formattingModelService.changeContainerDropdownValue(containersInfo, canvasItems);
            }, FormattingService.prototype.getFormattingStoreForCanvasItem = function(options) {
                var storeName;
                return this.formattingStores.has(storeName = 1 === options.type ? "page" : options.canvasItem.name) || this.formattingStores.set(storeName, this.formattingStoreFactory.create()), 
                this.formattingStores.get(storeName);
            }, FormattingService.prototype.getStore$ = function(options$) {
                var _this = this;
                return options$.pipe((0, map.U)(function(options) {
                    return _this.getFormattingStoreForCanvasItem(options);
                }));
            }, FormattingService.prototype.updateStateInt = function(formattingSources, canvasItem) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var name, updateInProgressId, formattingContract, onObjectEnabled, _loop_1, this_1, _i, formattingSources_1;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return _.isEmpty(formattingSources) ? [ 2 ] : (name = 1 === formattingSources.length && "Page" === formattingSources[0] ? "page" : canvasItem.name, 
                            updateInProgressId = this.updateCounter++, this.currentUpdateIds.set(name, updateInProgressId), 
                            this.pauseUpdatesPromise ? [ 4, this.pauseUpdatesPromise ] : [ 3, 2 ]);

                          case 1:
                            if (_b.sent(), this.currentUpdateIds.get(name) !== updateInProgressId) return [ 2 ];
                            _b.label = 2;

                          case 2:
                            formattingContract = {
                                cards: {},
                                groups: {},
                                slices: {},
                                revertToDefaultDescriptors: [],
                                canvasItem: canvasItem ? new formatting_contracts.lD(canvasItem, function(other) {
                                    return other === canvasItem || other && canvasItem && canvasItem.name === other.name;
                                }) : void 0
                            }, onObjectEnabled = this.featureSwitchService.featureSwitches.onObject, _loop_1 = function(formattingSource) {
                                var setDeferredStatus, cards, groups, slices, revertToDefaultDescriptors, storeCards, storeGroups, storeSlices, _c, _d, cardName, _e;
                                return (0, tslib_es6.__generator)(this, function(_f) {
                                    switch (_f.label) {
                                      case 0:
                                        return debug.fF.assert(function() {
                                            return !onObjectEnabled || "Analytics" !== formattingSource;
                                        }, "Should not be asking for Analytics with OnObject (it is part of Visuals)"), 
                                        setDeferredStatus = function(dictionary, status) {
                                            for (var item, deferredStatus, newEntries = {}, _i = 0, _a = Object.keys(dictionary); _i < _a.length; _i++) {
                                                var entryName = _a[_i];
                                                newEntries[entryName] = (deferredStatus = status, void 0 !== (item = dictionary[entryName]) ? (0, 
                                                tslib_es6.__assign)((0, tslib_es6.__assign)({}, item), {
                                                    deferredStatus
                                                }) : void 0);
                                            }
                                            return newEntries;
                                        }, [ 4, this_1.formattingModelService.getFormattingOptions(canvasItem, formattingSource) ];

                                      case 1:
                                        for (_e = _f.sent(), cards = _e.cards, groups = _e.groups, slices = _e.slices, revertToDefaultDescriptors = _e.revertToDefaultDescriptors, 
                                        this_1.featureSwitchService.featureSwitches.interactiveMobileCanvas && (null === (_a = this_1.sliceCustomizationService) || void 0 === _a || _a.customizeSliceOptions(slices)), 
                                        storeCards = setDeferredStatus(cards, 1), storeGroups = setDeferredStatus(groups, 1), 
                                        storeSlices = setDeferredStatus(slices, 1), _c = 0, _d = Object.keys(storeCards); _c < _d.length; _c++) storeCards[cardName = _d[_c]] = (0, 
                                        tslib_es6.__assign)((0, tslib_es6.__assign)({}, cards[cardName]), {
                                            deferredStatus: 1
                                        });
                                        return debug.fF.assert(function() {
                                            return _.isEmpty(_.intersection(_.keys(formattingContract.cards), _.keys(storeCards)));
                                        }, "Expected no cards to have duplicate uids"), debug.fF.assert(function() {
                                            return _.isEmpty(_.intersection(_.keys(formattingContract.groups), _.keys(storeGroups)));
                                        }, "Expected no groups to have duplicate uids"), formattingContract.cards = (0, 
                                        tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingContract.cards), storeCards), 
                                        formattingContract.groups = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingContract.groups), storeGroups), 
                                        formattingContract.slices = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, formattingContract.slices), storeSlices), 
                                        formattingContract.revertToDefaultDescriptors = (0, tslib_es6.__spreadArray)((0, 
                                        tslib_es6.__spreadArray)([], formattingContract.revertToDefaultDescriptors, !0), revertToDefaultDescriptors, !0), 
                                        [ 2 ];
                                    }
                                });
                            }, this_1 = this, _i = 0, formattingSources_1 = formattingSources, _b.label = 3;

                          case 3:
                            return _i < formattingSources_1.length ? [ 5, _loop_1(formattingSources_1[_i]) ] : [ 3, 6 ];

                          case 4:
                            _b.sent(), _b.label = 5;

                          case 5:
                            return _i++, [ 3, 3 ];

                          case 6:
                            return this.currentUpdateIds.get(name) !== updateInProgressId || (this.updateFormattingContract(formattingContract, canvasItem), 
                            this.currentUpdateIds.delete(name)), [ 2 ];
                        }
                    });
                });
            }, FormattingService.prototype.getVisualUpdateSources = function() {
                var sources = [ "Format_Label_General", "Visual" ];
                return this.featureSwitchService.featureSwitches.onObject || sources.push("Analytics"), 
                sources;
            }, FormattingService.prototype.getNonVisualUpdateSources = function() {
                return [ "Page" ];
            }, FormattingService.prototype.updateFormattingContract = function(currentState, canvasItem) {
                var options = this.getFormattingOptions(canvasItem);
                this.getFormattingStoreForCanvasItem(options).setState(currentState);
            }, FormattingService.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete();
            }, FormattingService.prototype.saveValues = function(saveObject, telemetrySource) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var isPageFormattingChanged, unhandledChanges, _loop_2, this_2, _i, _b;
                    return (0, tslib_es6.__generator)(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            isPageFormattingChanged = saveObject.changes.some(function(change) {
                                return "Page" === change.formattingSource;
                            }), unhandledChanges = [], _loop_2 = function(change) {
                                var formattingOptions, formattingSlice;
                                return (0, tslib_es6.__generator)(this, function(_d) {
                                    switch (_d.label) {
                                      case 0:
                                        return change.conditionalFormatting ? (debug.fF.assert(function() {
                                            return !change.canvasItems || 1 === change.canvasItems.length;
                                        }, "Conditional formatting is only supported for single canvas item or page formatting"), 
                                        formattingOptions = this_2.getFormattingOptions(null === (_a = change.canvasItems) || void 0 === _a ? void 0 : _a[0]), 
                                        [ 4, this_2.getFor(formattingOptions).selectSlice({
                                            objectName: change.objectName,
                                            propertyName: change.propertySlice.name,
                                            selector: change.propertySlice.selector
                                        }).pipe((0, take.q)(1)).toPromise() ]) : [ 3, 2 ];

                                      case 1:
                                        if ((formattingSlice = _d.sent()) && formattingSlice.saveCallback) return formattingSlice.saveCallback(saveObject), 
                                        [ 2, "continue" ];
                                        _d.label = 2;

                                      case 2:
                                        return unhandledChanges.push(change), [ 2 ];
                                    }
                                });
                            }, this_2 = this, _i = 0, _b = saveObject.changes, _c.label = 1;

                          case 1:
                            return _i < _b.length ? [ 5, _loop_2(_b[_i]) ] : [ 3, 4 ];

                          case 2:
                            _c.sent(), _c.label = 3;

                          case 3:
                            return _i++, [ 3, 1 ];

                          case 4:
                            return _.isEmpty(unhandledChanges) ? [ 2 ] : (saveObject.changes = unhandledChanges, 
                            [ 4, this.formattingModelService.saveFormattingSlicesValue(saveObject.changes, telemetrySource) ]);

                          case 5:
                            return _c.sent(), isPageFormattingChanged && this.updateStateInt([ "Page" ], void 0), 
                            [ 2 ];
                        }
                    });
                });
            }, FormattingService.prototype.isEditableContainerWithSelectionChangeOnly = function(saveObject) {
                return this.formattingModelService.isEditableContainerWithSelectionChangeOnly(saveObject.changes);
            }, FormattingService.prototype.revertToDefault = function(revertToDefaultDescriptors, cardUid, parentContextActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.formattingModelService.revertToDefault(revertToDefaultDescriptors, cardUid, parentContextActivity) ];
                    });
                });
            }, FormattingService.prototype.getRevertToDefaultEnabled = function(canvasItem, cardRevertToDefaultDescriptors, suppressedSaveObjects) {
                return this.formattingModelService.getRevertToDefaultEnabled(canvasItem, cardRevertToDefaultDescriptors, suppressedSaveObjects);
            }, FormattingService.prototype.getModelUnavailableInformation = function(formattingSource, canvasItem) {
                return this.formattingModelService.getModelUnavailableInformation(formattingSource, canvasItem);
            }, FormattingService.prototype.getFormattingModelMessage = function(formattingSource, canvasItem) {
                return this.formattingModelService.getFormattingModelMessage(formattingSource, canvasItem);
            }, FormattingService.prototype.startFormattingTutorial = function(tutorialType, options) {
                this.explorationCapabilities.getCapabilities().disableFormattingTutorial || this.formattingTutorialService.startFormattingTutorial(tutorialType, options);
            }, FormattingService.prototype.getFormattingOptions = function(canvasItem) {
                return canvasItem ? {
                    type: 0,
                    canvasItem
                } : {
                    type: 1
                };
            }, FormattingService.\u0275fac = function(t) {
                return new (t || FormattingService)(core["\u0275\u0275inject"](formatting_contracts.Kj, 8), core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](exploration_capabilities_service.U), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](FormattingModelService), core["\u0275\u0275inject"](FormattingStoreFactory), core["\u0275\u0275inject"](FormattingTutorialService), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](visual_plugin_operations_service.f), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, FormattingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingService,
                factory: FormattingService.\u0275fac
            }), FormattingService;
        }(), FormattingServiceLazyProvider = {
            provide: "formattingService",
            useFactory: function(formattingService) {
                return Promise.resolve(formattingService);
            },
            deps: [ FormattingService ]
        }, combineLatest = __webpack_require__(59017), pbi_menu_contracts = __webpack_require__(64560), on_object_sprite_icons = __webpack_require__(5838), theme_color_picker_component = __webpack_require__(44104), textAlignment = __webpack_require__(19650), formatting_store_helpers = __webpack_require__(92755);
        function getAllShortcutFormattingReferences(shortcuts) {
            return shortcuts.flatMap(function(shortcut) {
                return function(shortcut) {
                    var references = [];
                    switch (shortcut.type) {
                      case 8:
                        references.push.apply(references, getAllShortcutFormattingReferences(shortcut.shortcuts));
                        break;

                      case 0:
                        shortcut.relatedResetFormattingIds && references.push.apply(references, shortcut.relatedResetFormattingIds);
                        break;

                      case 2:
                        shortcut.relatedToggledFormattingIds && references.push.apply(references, shortcut.relatedToggledFormattingIds);

                      case 3:
                      case 6:
                        references.push(shortcut);
                        break;

                      case 9:
                        references.push.apply(references, shortcut.referencesAndValues);
                        break;

                      case 4:
                      case 1:
                      case 5:
                      case 7:
                      case 10:
                        break;

                      default:
                        debug.fF.assertNever(shortcut);
                    }
                    return references;
                }(shortcut);
            });
        }
        var pbi_overlay_service = __webpack_require__(86940), FormattingUIService = function() {
            function FormattingUIService(formattingService, injector, itemPickerService, localizationService, overlay, runningVisual, selectionService) {
                this.formattingService = formattingService, this.injector = injector, this.itemPickerService = itemPickerService, 
                this.localizationService = localizationService, this.overlay = overlay, this.runningVisual = runningVisual, 
                this.selectionService = selectionService, this.destroy$ = new Subject.xQ;
            }
            return FormattingUIService.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete();
            }, FormattingUIService.prototype.openColorPicker = function(colorStyle, element, closed, telemetrySource) {
                var _this = this;
                if (colorStyle) {
                    var colorProperties = colorStyle && colorStyle.properties, colorConditionalFormatting = colorProperties && colorProperties.conditionalFormattingObjects, color = colorStyle.resolvedValue;
                    return (0, theme_color_picker_component.Z)({
                        itemPickerService: this.itemPickerService,
                        localizationService: this.localizationService,
                        overlay: this.overlay,
                        injector: this.injector,
                        connectedTo: element,
                        isNoFillItemSupported: !1,
                        backDropClass: "invisible-backdrop",
                        conditionalFormattingOptions: !!colorConditionalFormatting && {
                            showDialog: function() {
                                (0, from.D)(colorConditionalFormatting.showDialog()).subscribe(function(conditionalFormattingSaveValue) {
                                    conditionalFormattingSaveValue && conditionalFormattingSaveValue.shouldSave && _this.saveChanges([ conditionalFormattingSaveValue.value ], colorStyle.instances, telemetrySource);
                                });
                            },
                            isSet: colorConditionalFormatting.isSet
                        },
                        setColor: function(newColor) {
                            if (newColor && (newColor.value !== (null == color ? void 0 : color.value) || (null == colorConditionalFormatting ? void 0 : colorConditionalFormatting.isSet))) {
                                var changes = [];
                                (null == colorConditionalFormatting ? void 0 : colorConditionalFormatting.isSet) && changes.push(null), 
                                changes.push(newColor), _this.saveChanges(changes, colorStyle.instances, telemetrySource);
                            }
                        },
                        closed,
                        color,
                        defaultColor: void 0,
                        overlayHeight: colorConditionalFormatting ? 400 : 362,
                        overlayWidth: 310
                    });
                }
            }, FormattingUIService.prototype.onControlClicked = function(subSelectionStylesSlices, formattingUIControlValue, telemetrySource) {
                var key = formattingUIControlValue.key;
                switch (key) {
                  case "horizontalAlignment":
                    var alignmentStyle = subSelectionStylesSlices.horizontalAlignment;
                    if (!alignmentStyle) return;
                    var alignmentValue = this.getAlignmentSaveValue(formattingUIControlValue.value, alignmentStyle.instances);
                    return this.saveChanges([ alignmentValue ], alignmentStyle.instances, telemetrySource);

                  case "increaseFontSize":
                    return this.adjustFontSize(1, subSelectionStylesSlices, telemetrySource);

                  case "decreaseFontSize":
                    return this.adjustFontSize(-1, subSelectionStylesSlices, telemetrySource);

                  case "decreaseDecimal":
                    return this.adjustDecimal(-1, subSelectionStylesSlices, telemetrySource);

                  case "increaseDecimal":
                    return this.adjustDecimal(1, subSelectionStylesSlices, telemetrySource);

                  case "background":
                  case "fill":
                  case "fontColor":
                  case "stroke":
                  case "border":
                  case "grid":
                    debug.fF.assertFail("".concat(key, " should not be handled here"));
                    break;

                  case "height":
                  case "width":
                  case "displayUnits":
                  case "wordWrap":
                  case "bold":
                  case "italic":
                  case "fontSize":
                  case "underline":
                  case "fontFamily":
                    if (!(style = subSelectionStylesSlices[key])) return;
                    return this.saveChanges([ formattingUIControlValue.value ], style.instances, telemetrySource);

                  case "shadow":
                    var style;
                    if (!(style = subSelectionStylesSlices[key])) return;
                    return this.saveShadowChanges(formattingUIControlValue.value, subSelectionStylesSlices, telemetrySource);

                  default:
                    debug.fF.assertNever(key);
                }
            }, FormattingUIService.prototype.adjustDecimal = function(delta, subSelectionStylesSlices, telemetrySource) {
                var precisionStyle = subSelectionStylesSlices.precision, precisionProperties = precisionStyle && precisionStyle.properties;
                if (precisionProperties) {
                    var changes = _.compact(_.map(precisionStyle.instances, function(instance) {
                        var _a;
                        if (!instance.disabled || instance.overrideDisabled) {
                            var currentValue = _.isNumber(precisionStyle.resolvedValue) ? precisionStyle.resolvedValue : null !== (_a = precisionProperties.defaultPrecision) && void 0 !== _a ? _a : 0, newValue = Math.max(0, currentValue += delta);
                            return (0, formatting_store_helpers.ks)(newValue, instance.descriptor, instance.uid, instance.formattingSource, [ instance.canvasItem ], 1);
                        }
                    }));
                    return _.isEmpty(changes) ? void 0 : this.formattingService.saveValues({
                        changes
                    }, telemetrySource);
                }
            }, FormattingUIService.prototype.adjustFontSize = function(delta, subSelectionStylesSlices, telemetrySource) {
                var _a, _b, _c, _d, fontSizeStyle = subSelectionStylesSlices.fontSize, fontSizeProperties = fontSizeStyle && fontSizeStyle.properties;
                if (fontSizeProperties) {
                    var minValue = null == (null === (_b = null === (_a = fontSizeProperties.options) || void 0 === _a ? void 0 : _a.minValue) || void 0 === _b ? void 0 : _b.value) ? formatting_contracts.r4 : fontSizeProperties.options.minValue.value, maxValue = null == (null === (_d = null === (_c = fontSizeProperties.options) || void 0 === _c ? void 0 : _c.maxValue) || void 0 === _d ? void 0 : _d.value) ? formatting_contracts.YR : fontSizeProperties.options.maxValue.value, changes = _.map(fontSizeStyle.instances, function(instance) {
                        if (!instance.disabled || instance.overrideDisabled) {
                            var oldSize = instance.currentValue, newSize = Math.min(Math.max(oldSize + delta, minValue), maxValue);
                            return newSize !== oldSize ? (0, formatting_store_helpers.ks)(newSize, instance.descriptor, instance.uid, instance.formattingSource, [ instance.canvasItem ], 1) : void 0;
                        }
                    });
                    return changes = _.compact(changes), _.isEmpty(changes) ? void 0 : this.formattingService.saveValues({
                        changes
                    }, telemetrySource);
                }
            }, FormattingUIService.prototype.saveChanges = function(values, instances, telemetrySource) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var changes;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return changes = _.flatten(_.map(values, function(value) {
                            return _.compact(_.map(instances, function(instance) {
                                return instance.disabled && !instance.overrideDisabled ? void 0 : (0, formatting_store_helpers.ks)(value, instance.descriptor, instance.uid, instance.formattingSource, [ instance.canvasItem ], 1);
                            }));
                        })), _.isEmpty(changes) ? [ 2 ] : [ 2, this.formattingService.saveValues({
                            changes
                        }, telemetrySource) ];
                    });
                });
            }, FormattingUIService.prototype.getAlignmentSaveValue = function(alignment, identifiers) {
                var alignmentDescriptorType = identifiers[0].descriptor.type;
                if (debug.fF.assert(function() {
                    return _.every(identifiers, function(identifier) {
                        return identifier.descriptor.type === alignmentDescriptorType;
                    });
                }, "MiniToolbar alignment - expected all the descriptors to have same property type"), 
                types_valueType.Ge.isValueTypeDescriptor(alignmentDescriptorType)) {
                    var propertyType = types_valueType.Ge.fromDescriptor(alignmentDescriptorType);
                    if (propertyType.enum === textAlignment.K) return formatting_contracts.y5[alignment];
                    if (propertyType.formatting.alignment) return alignment;
                    debug.fF.assertFail("MiniToolbar alignment - unexpected descriptor property type");
                } else debug.fF.assertFail("MiniToolbar alignment - not a value type descriptor");
            }, FormattingUIService.prototype.saveShadowChanges = function(value, subSelectionStylesSlices, telemetrySource) {
                var shadowPresetInstances = subSelectionStylesSlices.shadowPreset.instances, shadowPositionInstances = subSelectionStylesSlices.shadowPosition.instances, shadowInstances = subSelectionStylesSlices.shadow.instances;
                debug.fF.assert(function() {
                    return shadowPresetInstances.length === shadowPositionInstances.length && shadowPresetInstances.length === shadowInstances.length;
                }, "shadow - expected all the instances to have same length");
                for (var changes = [], _loop_1 = function(i) {
                    if (shadowInstances[i].disabled) return "continue";
                    var shadowInstance = shadowInstances[i], shadowPresetInstance = shadowPresetInstances[i], shadowPositionInstance = shadowPositionInstances[i], shadowPresetValue = value.shadowPreset, shadowPositionValue = value.shadowPosition, shadowValue = value.shadow, shadowPresetDescriptor = shadowPresetInstance.descriptor, shadowPositionDescriptor = shadowPositionInstance.descriptor, shadowDescriptor = shadowInstance.descriptor, shadowPresetUid = shadowPresetInstance.uid, shadowPositionUid = shadowPositionInstance.uid, shadowUid = shadowInstance.uid, shadowPresetFormattingSource = shadowPresetInstance.formattingSource, shadowPositionFormattingSource = shadowPositionInstance.formattingSource, shadowFormattingSource = shadowInstance.formattingSource, canvasItem = shadowInstance.canvasItem;
                    debug.fF.assert(function() {
                        return canvasItem === shadowPresetInstance.canvasItem && canvasItem === shadowPositionInstance.canvasItem;
                    }, "shadow - expected all the instances to have same canvasItem");
                    var shadowPresetChange = (0, formatting_store_helpers.ks)(shadowPresetValue, shadowPresetDescriptor, shadowPresetUid, shadowPresetFormattingSource, [ canvasItem ], 1), shadowPositionChange = (0, 
                    formatting_store_helpers.ks)(shadowPositionValue, shadowPositionDescriptor, shadowPositionUid, shadowPositionFormattingSource, [ canvasItem ], 1), shadowChange = (0, 
                    formatting_store_helpers.ks)(shadowValue, shadowDescriptor, shadowUid, shadowFormattingSource, [ canvasItem ], 1);
                    changes.push(shadowChange, shadowPositionChange, shadowPresetChange);
                }, i = 0; i < shadowInstances.length; i++) _loop_1(i);
                if (!_.isEmpty(changes)) return this.formattingService.saveValues({
                    changes
                }, telemetrySource);
            }, FormattingUIService.prototype.getSubSelectionStyleShortcutsForNonCanvasItems$ = function(shortcuts) {
                return this.getMenuItems$(shortcuts, void 0, void 0, void 0).pipe((0, map.U)(function(menuItems) {
                    return {
                        items: _.flatten(menuItems)
                    };
                }));
            }, FormattingUIService.prototype.getSubSelectionStyleShortcutsForCanvasItems$ = function(canvasItems) {
                var _this = this;
                return ((0, isObservable.b)(canvasItems) ? canvasItems : (0, of.of)(canvasItems)).pipe((0, 
                switchMap.w)(function(canvasItems) {
                    var _a, visualContainers = (_a = (0, visualContainerGroup2.rQ)(canvasItems))[0], visualContainerGroups = _a[1];
                    if (_.isEmpty(visualContainers) || !_.isEmpty(visualContainerGroups)) return (0, 
                    of.of)({
                        items: []
                    });
                    var visualInformations$ = _.map(visualContainers, function(visualContainer) {
                        var visual$ = _this.runningVisual.getVisual$(visualContainer), subSelectables$ = _this.getActiveSubSelectables$(_this.formattingService.getFor({
                            type: 0,
                            canvasItem: visualContainer
                        }), visualContainer);
                        return (0, combineLatest.aj)([ visual$, subSelectables$ ]).pipe((0, switchMap.w)(function(_a) {
                            var visual = _a[0], subSelectables = _a[1], subSelectionStyles$ = (0, combineLatest.aj)(_.compact(_.map(subSelectables, function(subSelectable) {
                                return visual && (0, from.D)(visual.getSubSelectionStyles([ subSelectable ]));
                            }))), subSelectionShortcuts$ = (0, combineLatest.aj)(_.compact(_.map(subSelectables, function(subSelectable) {
                                return visual && (0, from.D)(visual.getSubSelectionShortcuts([ subSelectable ], void 0));
                            })));
                            return (0, combineLatest.aj)([ subSelectionStyles$, subSelectionShortcuts$ ]).pipe((0, 
                            map.U)(function(_a) {
                                var subSelectionShortcuts = _a[1];
                                return {
                                    canvasItem: visualContainer,
                                    visual,
                                    subSelectionStyles: _.compact(_a[0]),
                                    subSelectionShortcuts: _.compact(_.flatten(subSelectionShortcuts))
                                };
                            }));
                        }));
                    });
                    return (0, combineLatest.aj)(visualInformations$).pipe((0, switchMap.w)(function(visualInformations) {
                        var menuItemsPerVisual$ = _.map(visualInformations, function(visualInformation) {
                            return _this.getMenuItems$(visualInformation.subSelectionShortcuts, visualInformation.canvasItem, visualInformation.subSelectionStyles, visualInformation.visual);
                        });
                        return (0, combineLatest.aj)(menuItemsPerVisual$).pipe((0, map.U)(function(menuItems) {
                            return {
                                items: _.flatten(menuItems)
                            };
                        }));
                    }));
                }), (0, shareReplay.d)({
                    bufferSize: 1,
                    refCount: !0
                }));
            }, FormattingUIService.prototype.getSubSelectionStylesSlices$ = function(canvasItems) {
                var canvasItems$ = (0, isObservable.b)(canvasItems) ? canvasItems : (0, of.of)(canvasItems);
                return this.getSubSelectionStylesForMultipleVisuals$(canvasItems$);
            }, FormattingUIService.prototype.getSubSelectionStylesForMultipleVisuals$ = function(canvasItems$) {
                var _this = this;
                return canvasItems$.pipe((0, switchMap.w)(function(canvasItems) {
                    var _a, visualContainers = (_a = (0, visualContainerGroup2.rQ)(canvasItems))[0], visualContainerGroups = _a[1];
                    if (_.isEmpty(visualContainers) || !_.isEmpty(visualContainerGroups)) return (0, 
                    of.of)({});
                    if (1 === visualContainers.length) return _this.getVisualSubSelectionStylesSlicesForSingleVisual$(visualContainers[0]);
                    var subSelectionStylesWithCanvasItem = _.map(visualContainers, function(visualContainer) {
                        return {
                            canvasItem: visualContainer,
                            subSelectionStyles$: _this.getVisualAreaSubSelectionStyles$(visualContainer)
                        };
                    });
                    return _this.getSubSelectionSlicesFromStyles$(subSelectionStylesWithCanvasItem);
                }), (0, shareReplay.d)({
                    bufferSize: 1,
                    refCount: !0
                }), (0, distinctUntilChanged.x)(function(oldValue, newValue) {
                    return _.isEqual(oldValue, newValue);
                }));
            }, FormattingUIService.prototype.getActiveSubSelectables$ = function(formattingInformation, visualContainer) {
                var visualAreaSubSelectable$ = formattingInformation.getSubSelectables$().pipe((0, 
                map.U)(function(subSelectables) {
                    return subSelectables.find(function(subSelectable) {
                        return (0, formatting_utils.so)(subSelectable);
                    });
                })), currentSubSelectables$ = this.selectionService.getSubSelections$(visualContainer).pipe((0, 
                map.U)(function(subSelections) {
                    return _.map(subSelections, function(subSelection) {
                        return subSelection.visualSubSelection;
                    });
                })), subSelectables$ = (0, combineLatest.aj)([ visualAreaSubSelectable$, currentSubSelectables$ ]).pipe((0, 
                map.U)(function(_a) {
                    var visualAreaSubSelectable = _a[0], currentSubSelectables = _a[1];
                    return _.isEmpty(currentSubSelectables) ? visualAreaSubSelectable ? [ visualAreaSubSelectable ] : [] : currentSubSelectables;
                }));
                return subSelectables$;
            }, FormattingUIService.prototype.getVisualSubSelectionStylesSlicesForSingleVisual$ = function(visualContainer) {
                var _this = this, subSelectables$ = this.getActiveSubSelectables$(this.formattingService.getFor({
                    type: 0,
                    canvasItem: visualContainer
                }), visualContainer), visual$ = this.runningVisual.getVisual$(visualContainer), visualSubSelectionStyles$ = (0, 
                combineLatest.aj)([ subSelectables$, visual$ ]).pipe((0, switchMap.w)(function(_a) {
                    var subSelectables = _a[0], visual = _a[1];
                    if (!visual) return (0, of.of)([]);
                    var subSelectionStyles$ = _.map(subSelectables, function(subSelectable) {
                        return (0, formatting_utils.so)(subSelectable) ? _this.getVisualAreaSubSelectionStyles$(visualContainer) : (0, 
                        from.D)(visual.getSubSelectionStyles([ subSelectable ]));
                    });
                    return (0, combineLatest.aj)(subSelectionStyles$).pipe((0, map.U)(function(subSelectionStyles) {
                        return _.compact(_.flatten(subSelectionStyles));
                    }));
                }));
                return this.getSubSelectionSlicesFromStyles$([ {
                    subSelectionStyles$: visualSubSelectionStyles$,
                    canvasItem: visualContainer
                } ]);
            }, FormattingUIService.prototype.getVisualAreaSubSelectionStyles$ = function(canvasItem) {
                var visual$ = this.runningVisual.getVisual$(canvasItem), subSelectables$ = this.formattingService.getFor({
                    type: 0,
                    canvasItem
                }).getSubSelectables$();
                return (0, combineLatest.aj)([ subSelectables$, visual$ ]).pipe((0, switchMap.w)(function(_a) {
                    var subSelectables = _a[0], visual = _a[1];
                    if (!visual) return (0, of.of)([]);
                    var visualAreaSubSelectionStyles$ = _.map(subSelectables, function(subSelectable) {
                        return (0, from.D)(visual.getSubSelectionStyles([ subSelectable ])).pipe((0, map.U)(function(subSelectionStyles) {
                            if (subSelectionStyles) return (0, formatting_utils.so)(subSelectable) ? subSelectionStyles : 1 === subSelectionStyles.type || 2 === subSelectionStyles.type ? {
                                fontColor: "fontColor" in subSelectionStyles ? subSelectionStyles.fontColor : void 0,
                                fontFamily: "fontFamily" in subSelectionStyles ? subSelectionStyles.fontFamily : void 0,
                                fontSize: "fontSize" in subSelectionStyles ? subSelectionStyles.fontSize : void 0,
                                bold: "bold" in subSelectionStyles ? subSelectionStyles.bold : void 0,
                                italic: "italic" in subSelectionStyles ? subSelectionStyles.italic : void 0,
                                underline: "underline" in subSelectionStyles ? subSelectionStyles.underline : void 0,
                                type: subSelectionStyles.type
                            } : void 0;
                        }));
                    });
                    return (0, combineLatest.aj)(visualAreaSubSelectionStyles$).pipe((0, map.U)(function(visualAreaSubSelectionStyles) {
                        return _.compact(visualAreaSubSelectionStyles);
                    }));
                }));
            }, FormattingUIService.prototype.getSubSelectionSlicesFromStyles$ = function(subSelectionStylesWithCanvasItem) {
                var _this = this, subSelectionStylesWithCanvasItem$ = _.map(subSelectionStylesWithCanvasItem, function(visualWithSubSelectionStyle) {
                    var canvasItem = visualWithSubSelectionStyle.canvasItem;
                    return visualWithSubSelectionStyle.subSelectionStyles$.pipe((0, map.U)(function(subSelectionStyles) {
                        return _.map(subSelectionStyles, function(subSelectionStyle) {
                            return {
                                subSelectionStyle,
                                canvasItem
                            };
                        });
                    }));
                });
                return (0, combineLatest.aj)(subSelectionStylesWithCanvasItem$).pipe((0, switchMap.w)(function(subSelectionStylesWithCanvasItem) {
                    for (var currentSubSelectionStylesSlices$ = (0, of.of)({}), _loop_2 = function(subSelectionStyle, canvasItem) {
                        currentSubSelectionStylesSlices$ = currentSubSelectionStylesSlices$.pipe((0, switchMap.w)(function(currentSubSelectionStylesSlices) {
                            return _this.getBoundSubSelectionStylesSlices$(subSelectionStyle, currentSubSelectionStylesSlices, canvasItem);
                        }));
                    }, _i = 0, flattenedSubSelectionStylesWithCanvasItem_1 = _.flatten(subSelectionStylesWithCanvasItem); _i < flattenedSubSelectionStylesWithCanvasItem_1.length; _i++) {
                        var _a = flattenedSubSelectionStylesWithCanvasItem_1[_i];
                        _loop_2(_a.subSelectionStyle, _a.canvasItem);
                    }
                    return currentSubSelectionStylesSlices$;
                }));
            }, FormattingUIService.prototype.getBoundSubSelectionStylesSlices$ = function(subSelectionStyles, currentSubSelectionStylesSlices, canvasItem) {
                var _this = this, formattingInformation = {
                    type: 0,
                    canvasItem
                }, subSelectionStylesToConvert = null != subSelectionStyles ? subSelectionStyles : {}, subSelectionStylesSlices$ = _.map(Object.keys(subSelectionStylesToConvert), function(key) {
                    var style = subSelectionStylesToConvert[key];
                    if ("type" !== key && style && (0, formatting_utils.N6)(style)) {
                        var reference = style.reference;
                        return reference ? _this.mergeSliceAndTopLevelToggle(_this.formattingService.getFor(formattingInformation), reference).pipe((0, 
                        map.U)(function(referenceSlice) {
                            if (referenceSlice) return _this.getSubSelectionStylesSlices(referenceSlice, style, key, currentSubSelectionStylesSlices, canvasItem);
                        })) : (0, of.of)(void 0);
                    }
                    return (0, of.of)(void 0);
                });
                return (0, combineLatest.aj)(subSelectionStylesSlices$).pipe((0, map.U)(function(subSelectionStylesSlices) {
                    return subSelectionStylesSlices.reduce(function(result, subSelectionStylesSlice) {
                        return subSelectionStylesSlice && (result = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, result), subSelectionStylesSlice)), 
                        result;
                    }, currentSubSelectionStylesSlices);
                }), (0, shareReplay.d)({
                    bufferSize: 1,
                    refCount: !0
                }));
            }, FormattingUIService.prototype.getSubSelectionStylesSlices = function(formattingSlice, style, key, currentSubSelectionStylesSlices, canvasItem) {
                var _a, _b, _c, _d, _e, _f, _g, subSelectionStylesSlices = {};
                switch (key) {
                  case "background":
                  case "color":
                  case "fill":
                  case "fontColor":
                  case "stroke":
                    var baseProperties = this.resolveBaseProperties(formattingSlice, style, null === (_a = currentSubSelectionStylesSlices[key]) || void 0 === _a ? void 0 : _a.properties, !0);
                    subSelectionStylesSlices[key] = this.getStylesForColorPicker(formattingSlice, baseProperties, currentSubSelectionStylesSlices[key], canvasItem, !0);
                    break;

                  case "horizontalAlignment":
                    baseProperties = this.resolveBaseProperties(formattingSlice, style, null === (_b = currentSubSelectionStylesSlices[key]) || void 0 === _b ? void 0 : _b.properties), 
                    subSelectionStylesSlices[key] = this.getStylesForAlignmentGroup(formattingSlice, baseProperties, currentSubSelectionStylesSlices[key], canvasItem);
                    break;

                  case "fontSize":
                  case "height":
                  case "width":
                  case "precision":
                    baseProperties = this.resolveBaseProperties(formattingSlice, style, null === (_c = currentSubSelectionStylesSlices[key]) || void 0 === _c ? void 0 : _c.properties), 
                    subSelectionStylesSlices[key] = this.getStylesForNumUpDown(formattingSlice, baseProperties, style, currentSubSelectionStylesSlices[key], canvasItem);
                    break;

                  case "fontFamily":
                    baseProperties = this.resolveBaseProperties(formattingSlice, style, null === (_d = currentSubSelectionStylesSlices[key]) || void 0 === _d ? void 0 : _d.properties), 
                    subSelectionStylesSlices[key] = this.getStylesForFontFamily(formattingSlice, baseProperties, currentSubSelectionStylesSlices, canvasItem);
                    break;

                  case "shadowPreset":
                  case "shadowPosition":
                  case "style":
                  case "displayUnits":
                    baseProperties = this.resolveBaseProperties(formattingSlice, style, null === (_e = currentSubSelectionStylesSlices[key]) || void 0 === _e ? void 0 : _e.properties), 
                    subSelectionStylesSlices[key] = this.getStylesForDropdown(formattingSlice, baseProperties, currentSubSelectionStylesSlices[key], canvasItem);
                    break;

                  case "bold":
                  case "italic":
                  case "underline":
                  case "shadow":
                  case "grid":
                  case "wordWrap":
                    baseProperties = this.resolveBaseProperties(formattingSlice, style, null === (_f = currentSubSelectionStylesSlices[key]) || void 0 === _f ? void 0 : _f.properties), 
                    subSelectionStylesSlices[key] = this.getStylesForToggleSwitch(formattingSlice, baseProperties, currentSubSelectionStylesSlices[key], canvasItem);
                    break;

                  case "border":
                    baseProperties = this.resolveBaseProperties(formattingSlice, style, null === (_g = currentSubSelectionStylesSlices[key]) || void 0 === _g ? void 0 : _g.properties), 
                    subSelectionStylesSlices[key] = this.getStylesForFlagsSelection(formattingSlice, baseProperties, currentSubSelectionStylesSlices[key], canvasItem);
                    break;

                  default:
                    debug.fF.assertNever(key);
                }
                return subSelectionStylesSlices;
            }, FormattingUIService.prototype.getIdentifierForSlice = function(formattingSlice, value, descriptor, canvasItem, overrideDisabled) {
                return {
                    currentValue: value,
                    descriptor,
                    formattingSource: formattingSlice.originSource,
                    uid: formattingSlice.uid,
                    canvasItem,
                    disabled: formattingSlice.disabled,
                    overrideDisabled
                };
            }, FormattingUIService.prototype.resolveBaseProperties = function(formattingSlice, style, currentBaseProperties, overrideDisabled) {
                return void 0 === overrideDisabled && (overrideDisabled = !1), {
                    disabled: formattingSlice.disabled && (!currentBaseProperties || currentBaseProperties.disabled) && !overrideDisabled,
                    label: style.label
                };
            }, FormattingUIService.prototype.getStylesForColorPicker = function(formattingSlice, baseProperties, currentStyleSlice, canvasItem, overrideDisabled) {
                var control = formattingSlice.control;
                if ("ColorPicker" !== control.type || (0, build_control_util.IW)(formattingSlice) || formatting_utils.Ky(formattingSlice)) return debug.fF.assertFail("Expected a ColorPicker type to get color properties."), 
                currentStyleSlice;
                var instances = this.resolveInstances(this.getIdentifierForSlice(formattingSlice, control.properties.value, formattingSlice.control.properties.descriptor, canvasItem, overrideDisabled), null == currentStyleSlice ? void 0 : currentStyleSlice.instances), resolvedValue = this.resolveValue(control.properties.value, null == currentStyleSlice ? void 0 : currentStyleSlice.resolvedValue);
                return {
                    instances,
                    properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseProperties), {
                        conditionalFormattingObjects: currentStyleSlice ? void 0 : formattingSlice.conditionalFormattingObjects
                    }),
                    resolvedValue
                };
            }, FormattingUIService.prototype.getStylesForNumUpDown = function(formattingSlice, baseProperties, style, currentStyleSlice, canvasItem) {
                var control = formattingSlice.control;
                if ("NumUpDown" === control.type && !(0, build_control_util.IW)(formattingSlice)) {
                    var instances = this.resolveInstances(this.getIdentifierForSlice(formattingSlice, control.properties.value, formattingSlice.control.properties.descriptor, canvasItem), null == currentStyleSlice ? void 0 : currentStyleSlice.instances), resolvedValue = this.resolveValue(control.properties.value, null == currentStyleSlice ? void 0 : currentStyleSlice.resolvedValue);
                    return {
                        instances,
                        properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseProperties), {
                            options: control.properties.options,
                            defaultPrecision: style.defaultPrecision
                        }),
                        resolvedValue
                    };
                }
                debug.fF.assertFail("Expected a NumUpDown type to get spin button properties");
            }, FormattingUIService.prototype.getStylesForAlignmentGroup = function(formattingSlice, baseProperties, currentStyleSlice, canvasItem) {
                var control = formattingSlice.control;
                if ("AlignmentGroup" !== control.type || (0, build_control_util.IW)(formattingSlice)) return debug.fF.assertFail("Expected a AlignmentGroup type to get alignment properties"), 
                currentStyleSlice;
                var instances = this.resolveInstances(this.getIdentifierForSlice(formattingSlice, control.properties.value, formattingSlice.control.properties.descriptor, canvasItem), null == currentStyleSlice ? void 0 : currentStyleSlice.instances), resolvedValue = currentStyleSlice ? currentStyleSlice.resolvedValue === control.properties.value ? control.properties.value : void 0 : control.properties.value;
                return {
                    instances,
                    properties: (0, tslib_es6.__assign)({}, baseProperties),
                    resolvedValue
                };
            }, FormattingUIService.prototype.getStylesForDropdown = function(formattingSlice, baseProperties, currentStyleSlice, canvasItem) {
                var control = formattingSlice.control;
                if ("Dropdown" !== control.type || (0, build_control_util.IW)(formattingSlice) || !(0, 
                property_pane_util.WN)(control.properties)) return debug.fF.assertFail("Expected a Dropdown type to get Dropdown properties"), 
                currentStyleSlice;
                var instances = this.resolveInstances(this.getIdentifierForSlice(formattingSlice, control.properties.value, formattingSlice.control.properties.descriptor, canvasItem), null == currentStyleSlice ? void 0 : currentStyleSlice.instances), resolvedValue = this.resolveValue(control.properties.value, null == currentStyleSlice ? void 0 : currentStyleSlice.resolvedValue);
                return {
                    instances,
                    properties: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseProperties), {
                        items: control.properties.items
                    }),
                    resolvedValue
                };
            }, FormattingUIService.prototype.getStylesForFlagsSelection = function(formattingSlice, baseProperties, currentStyleSlice, canvasItem) {
                var control = formattingSlice.control;
                if ("FlagsSelection" !== control.type || (0, build_control_util.IW)(formattingSlice)) return debug.fF.assertFail("Expected a FlagsSelection type to get FlagsSelection properties"), 
                currentStyleSlice;
                var instances = this.resolveInstances(this.getIdentifierForSlice(formattingSlice, control.properties.value, formattingSlice.control.properties.descriptor, canvasItem), null == currentStyleSlice ? void 0 : currentStyleSlice.instances), resolvedValue = this.resolveValue(control.properties.value, null == currentStyleSlice ? void 0 : currentStyleSlice.resolvedValue);
                return {
                    instances,
                    properties: (0, tslib_es6.__assign)({}, baseProperties),
                    resolvedValue
                };
            }, FormattingUIService.prototype.getStylesForToggleSwitch = function(formattingSlice, baseProperties, currentStyleSlice, canvasItem) {
                var control = formattingSlice.control;
                if ("ToggleSwitch" !== control.type || (0, build_control_util.IW)(formattingSlice)) return debug.fF.assertFail("Expected a ToggleSwitch type to get toggle button properties"), 
                currentStyleSlice;
                var instances = this.resolveInstances(this.getIdentifierForSlice(formattingSlice, control.properties.value, formattingSlice.control.properties.descriptor, canvasItem), null == currentStyleSlice ? void 0 : currentStyleSlice.instances), resolvedValue = this.resolveValue(control.properties.value, null == currentStyleSlice ? void 0 : currentStyleSlice.resolvedValue);
                return {
                    instances,
                    properties: (0, tslib_es6.__assign)({}, baseProperties),
                    resolvedValue
                };
            }, FormattingUIService.prototype.getStylesForFontFamily = function(formattingSlice, baseProperties, currentSubSelectionStylesSlices, canvasItem) {
                var control = formattingSlice.control;
                if ("FontPicker" !== control.type || (0, build_control_util.IW)(formattingSlice)) return debug.fF.assertFail("Expected a FontPicker type to get Font Family properties"), 
                currentSubSelectionStylesSlices.fontFamily;
                var currentFontFamilyStyleSlice = currentSubSelectionStylesSlices.fontFamily, instances = this.resolveInstances(this.getIdentifierForSlice(formattingSlice, control.properties.value, formattingSlice.control.properties.descriptor, canvasItem), null == currentFontFamilyStyleSlice ? void 0 : currentFontFamilyStyleSlice.instances), resolvedValue = this.resolveValue(control.properties.value, null == currentFontFamilyStyleSlice ? void 0 : currentFontFamilyStyleSlice.resolvedValue);
                return {
                    instances,
                    properties: (0, tslib_es6.__assign)({}, baseProperties),
                    resolvedValue
                };
            }, FormattingUIService.prototype.resolveValue = function(currentValue, existingValue) {
                return void 0 !== existingValue ? _.isEqual(existingValue, currentValue) ? currentValue : null : currentValue;
            }, FormattingUIService.prototype.resolveInstances = function(currentInstance, existingInstances) {
                return existingInstances ? (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], existingInstances, !0), [ currentInstance ], !1) : [ currentInstance ];
            }, FormattingUIService.prototype.mergeSliceAndTopLevelToggle = function(formattingInformation, formattingId) {
                var slice$ = formattingInformation.selectSlice(formattingId), topLevelToggle$ = formattingInformation.selectTopLevelToggle(formattingId).pipe((0, 
                filter.h)(function(topLevelToggle) {
                    return !!topLevelToggle;
                }));
                return (0, merge.T)(slice$, topLevelToggle$);
            }, FormattingUIService.prototype.getMenuItems$ = function(shortcuts, canvasItem, subSelectionStyles, visual) {
                for (var formattingInformation = this.formattingService.getFor(canvasItem ? {
                    type: 0,
                    canvasItem
                } : {
                    type: 1
                }), items = [], hasSort = !1, _i = 0, _a = null != shortcuts ? shortcuts : []; _i < _a.length; _i++) {
                    var shortcut = _a[_i];
                    if (!shortcut.suppressOnUI) {
                        var item$ = void 0;
                        switch (shortcut.type) {
                          case 0:
                          case 10:
                            item$ = this.getResetShortcut$(shortcut, shortcuts.some(function(shortcut) {
                                return 4 === shortcut.type;
                            }), canvasItem, shortcuts, subSelectionStyles, formattingInformation);
                            break;

                          case 1:
                            item$ = this.getNavigateShortcut$(shortcut, canvasItem, formattingInformation);
                            break;

                          case 2:
                            item$ = this.getToggleShortcut$(shortcut, canvasItem, formattingInformation);
                            break;

                          case 3:
                            item$ = this.getPickerShortcut$(shortcut, canvasItem, formattingInformation);
                            break;

                          case 5:
                            item$ = this.getCustomActionShortcut$(shortcut, canvasItem);
                            break;

                          case 4:
                            hasSort || (hasSort = !0, item$ = this.getSortShortcut$(shortcut, canvasItem, shortcuts, visual));
                            break;

                          case 6:
                            item$ = this.getConditionalFormattingShortcut$(shortcut, canvasItem, formattingInformation);
                            break;

                          case 7:
                            item$ = this.getDivider$();
                            break;

                          case 8:
                            item$ = this.getSubMenuShortcut$(shortcut, canvasItem, formattingInformation);
                            break;

                          case 9:
                            item$ = this.getSetValueShortcut$(shortcut, canvasItem);
                        }
                        item$ && items.push(item$);
                    }
                }
                return (0, combineLatest.aj)(items).pipe((0, map.U)(function(items) {
                    return _.flatten(items).filter(function(item) {
                        return !!item;
                    });
                }), (0, distinctUntilChanged.x)(function(prev, curr) {
                    return _.isEqual(prev, curr);
                }));
            }, FormattingUIService.prototype.getResetShortcut$ = function(shortcut, hasSortShortcut, canvasItem, subSelectionShortcuts, subSelectionStyles, formattingInformation) {
                var enabled$, revertToDefaultDescriptors$, _this = this, isResetSortDisabled = this.isResetSortDisabled(hasSortShortcut, canvasItem), resetSourceUids = getAllShortcutFormattingReferences(subSelectionShortcuts);
                return subSelectionStyles && _.forEach(subSelectionStyles, function(subSelectionStyle) {
                    resetSourceUids.push.apply(resetSourceUids, function(styles) {
                        var references = [];
                        switch (styles.type) {
                          case 2:
                            styles.displayUnits && references.push(styles.displayUnits.reference), styles.precision && references.push(styles.precision.reference);

                          case 1:
                            styles.background && references.push(styles.background.reference), styles.horizontalAlignment && references.push(styles.horizontalAlignment.reference), 
                            styles.wordWrap && references.push(styles.wordWrap.reference), "fontSize" in styles && styles.fontSize && references.push(styles.fontSize.reference), 
                            "fontFamily" in styles && styles.fontFamily && references.push(styles.fontFamily.reference), 
                            "bold" in styles && styles.bold && references.push(styles.bold.reference), "italic" in styles && styles.italic && references.push(styles.italic.reference), 
                            "underline" in styles && styles.underline && references.push(styles.underline.reference), 
                            references.push(styles.fontColor.reference);
                            break;

                          case 3:
                            styles.color && references.push(styles.color.reference), styles.fill && references.push(styles.fill.reference), 
                            styles.stroke && references.push(styles.stroke.reference), styles.style && references.push(styles.style.reference), 
                            styles.width && references.push(styles.width.reference);
                            break;

                          default:
                            debug.fF.assertNever(styles);
                        }
                        return references;
                    }(subSelectionStyle));
                }), enabled$ = (revertToDefaultDescriptors$ = 0 === shortcut.type ? formatting_store_helpers.cY(formattingInformation, resetSourceUids, shortcut.excludedResetFormattingIds) : formattingInformation.getViewModel$().pipe((0, 
                map.U)(function(viewModel) {
                    return viewModel.revertToDefaultDescriptors;
                }))).pipe((0, map.U)(function(revertToDefaultDescriptors) {
                    return _this.formattingService.getRevertToDefaultEnabled(canvasItem, revertToDefaultDescriptors);
                })), enabled$.pipe((0, withLatestFrom.M)(revertToDefaultDescriptors$), (0, map.U)(function(_a) {
                    var enabled = _a[0];
                    return {
                        type: pbi_menu_contracts.iB.Button,
                        data: {
                            type: 0,
                            revertToDefaultDescriptors: _a[1],
                            canvasItem
                        },
                        text: _this.localizationService.get("Reset_To_Default"),
                        disabled: !enabled && isResetSortDisabled,
                        icon: {
                            type: 0,
                            glyph: "glyphicon pbi-glyph-reset"
                        }
                    };
                }));
            }, FormattingUIService.prototype.isResetSortDisabled = function(hasSortShortcut, canvasItem) {
                var resetSortDisabled = !0;
                if (hasSortShortcut) {
                    var singleVisual = canvasItem.config.singleVisual, query = singleVisual.query;
                    if (query) {
                        var orderBy = query.defn.orderBy(), isAutoVisual = (0, visualContainerUtils.II)(canvasItem), hasDefaultSort = singleVisual.hasDefaultSort;
                        resetSortDisabled = isAutoVisual && void 0 === hasDefaultSort || hasDefaultSort || _.isEmpty(orderBy);
                    }
                }
                return resetSortDisabled;
            }, FormattingUIService.prototype.getNavigateShortcut$ = function(shortcut, canvasItem, formattingInformation) {
                return formattingInformation.selectAllCards().pipe((0, map.U)(function(cards) {
                    return _.isEmpty(cards);
                })).pipe((0, map.U)(function(isFormattingStoreEmpty) {
                    return {
                        type: pbi_menu_contracts.iB.Button,
                        data: {
                            type: 1,
                            shortcut,
                            canvasItem
                        },
                        text: shortcut.label,
                        disabled: isFormattingStoreEmpty,
                        icon: {
                            type: 2,
                            name: on_object_sprite_icons.z.ChartStylesGallery_20
                        }
                    };
                }));
            }, FormattingUIService.prototype.getToggleSwitch$ = function(formattingId, formattingInformation) {
                return this.mergeSliceAndTopLevelToggle(formattingInformation, formattingId).pipe((0, 
                map.U)(function(topLevelToggle) {
                    return null == topLevelToggle ? void 0 : topLevelToggle.control.properties;
                }));
            }, FormattingUIService.prototype.getToggleShortcut$ = function(shortcut, canvasItem, formattingInformation) {
                var _this = this, relatedToggledFormattingIds = shortcut.relatedToggledFormattingIds, selector = shortcut.selector, sourceControl$ = this.getToggleSwitch$(shortcut, formattingInformation), enabled$ = (0, 
                combineLatest.aj)((0, tslib_es6.__spreadArray)([ sourceControl$ ], (null != relatedToggledFormattingIds ? relatedToggledFormattingIds : []).map(function(relatedToggledFormattingId) {
                    return _this.getToggleSwitch$(relatedToggledFormattingId, formattingInformation);
                }), !0)).pipe((0, map.U)(function(items) {
                    return items.every(function(item) {
                        return null == item ? void 0 : item.value;
                    });
                }));
                return (0, combineLatest.aj)([ sourceControl$, enabled$ ]).pipe((0, map.U)(function(_a) {
                    var enabled = _a[1];
                    if (_a[0]) {
                        var label = enabled ? shortcut.disabledLabel : shortcut.enabledLabel;
                        if (label) {
                            var relatedToggles = relatedToggledFormattingIds ? relatedToggledFormattingIds.map(function(relatedFormattingId) {
                                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, relatedFormattingId), {
                                    nextValue: !enabled,
                                    selector: relatedFormattingId.selector
                                });
                            }) : [], toggleShortcut = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({
                                type: 2,
                                nextValue: !enabled
                            }, {
                                objectName: shortcut.objectName,
                                propertyName: shortcut.propertyName
                            }), {
                                selector,
                                telemetrySource: {
                                    source: "ContextMenu",
                                    contextMenuType: "Visual"
                                },
                                relatedToggledFormattingIds: relatedToggles
                            });
                            return {
                                type: pbi_menu_contracts.iB.Button,
                                data: {
                                    type: 2,
                                    shortcut: toggleShortcut,
                                    canvasItem
                                },
                                text: label
                            };
                        }
                    }
                }));
            }, FormattingUIService.prototype.getConditionalFormattingShortcut$ = function(shortcut, canvasItem, formattingInformation) {
                var objectName = shortcut.objectName, propertyName = shortcut.propertyName, selector = shortcut.selector, label = shortcut.label;
                return formattingInformation.selectSlice(shortcut).pipe((0, map.U)(function(slice) {
                    if (slice) return {
                        type: pbi_menu_contracts.iB.Button,
                        data: {
                            type: 6,
                            shortcut: {
                                type: 6,
                                nextValue: !slice.control.properties.value,
                                objectName,
                                propertyName,
                                selector,
                                telemetrySource: {
                                    source: "ContextMenu",
                                    contextMenuType: "Visual"
                                }
                            },
                            canvasItem
                        },
                        text: label
                    };
                }));
            }, FormattingUIService.prototype.getPickerShortcut$ = function(shortcut, canvasItem, formattingInformation) {
                var _this = this;
                return formattingInformation.selectSlice(shortcut).pipe((0, map.U)(function(slice) {
                    return slice && slice.control.properties;
                })).pipe((0, map.U)(function(dropdown) {
                    if (dropdown && !_.isEmpty(dropdown.items)) return {
                        type: pbi_menu_contracts.iB.SubMenu,
                        text: shortcut.label,
                        menu: {
                            items: _.map(dropdown.items, function(item, index) {
                                return function(item, index) {
                                    return {
                                        type: pbi_menu_contracts.iB.Button,
                                        data: {
                                            type: 3,
                                            shortcut,
                                            index,
                                            canvasItem
                                        },
                                        text: (0, VisualsData_displayNameGetter.G)(item.displayName, _this.localizationService),
                                        checkable: !0,
                                        checked: _.isEqual(item, dropdown.value)
                                    };
                                }(item, index);
                            })
                        }
                    };
                }));
            }, FormattingUIService.prototype.getSubMenuShortcut$ = function(shortcut, canvasItem, formattingInformation) {
                var _this = this, menuItems = _.map(shortcut.shortcuts, function(item) {
                    return function(item) {
                        switch (item.type) {
                          case 1:
                            return _this.getNavigateShortcut$(item, canvasItem, formattingInformation);

                          case 2:
                            return _this.getToggleShortcut$(item, canvasItem, formattingInformation).pipe((0, 
                            map.U)(function(toggleShortcut) {
                                var _a;
                                if (toggleShortcut) return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, toggleShortcut), {
                                    checkable: !0,
                                    checked: toggleShortcut.data && !(null === (_a = toggleShortcut.data) || void 0 === _a ? void 0 : _a.shortcut.nextValue)
                                });
                            }));

                          case 6:
                            return _this.getConditionalFormattingShortcut$(item, canvasItem, formattingInformation).pipe((0, 
                            map.U)(function(conditionalFormattingShortcut) {
                                var _a;
                                if (conditionalFormattingShortcut) return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, conditionalFormattingShortcut), {
                                    checkable: !0,
                                    checked: conditionalFormattingShortcut.data && !(null === (_a = conditionalFormattingShortcut.data) || void 0 === _a ? void 0 : _a.shortcut.nextValue)
                                });
                            }));

                          case 7:
                            return _this.getDivider$();
                        }
                    }(item);
                });
                return (0, combineLatest.aj)(menuItems).pipe((0, map.U)(function(items) {
                    return {
                        type: pbi_menu_contracts.iB.SubMenu,
                        text: shortcut.label,
                        menu: {
                            items: items.filter(function(item) {
                                return !!item;
                            })
                        }
                    };
                }));
            }, FormattingUIService.prototype.getSortShortcut$ = function(shortcut, canvasItem, subSelectionShortcuts, visual) {
                var activeSortGroup, activeSortField, _this = this;
                return (!_.isEmpty(subSelectionShortcuts) && (null == visual ? void 0 : visual.sortServices) ? (0, 
                from.D)(visual.sortServices.getSortableGroups()) : (0, of.of)([])).pipe((0, map.U)(function(sortGroups) {
                    var sortGroup = sortGroups.find(function(sortGroup) {
                        return sortGroup.key === shortcut.key;
                    }), sortFieldItems = [];
                    if (sortGroup) {
                        activeSortField = sortGroup.fields.find(function(sortField) {
                            return sortField.active;
                        }), activeSortField && (activeSortGroup = sortGroup);
                        for (var _i = 0, _a = sortGroup.fields; _i < _a.length; _i++) {
                            var sortField = _a[_i];
                            sortFieldItems.push({
                                type: pbi_menu_contracts.iB.Button,
                                data: {
                                    type: 4,
                                    sortGroup,
                                    sortField,
                                    sortDirection: activeSortField && activeSortField.sortDirection ? activeSortField.sortDirection : sortField.sortDirection ? sortField.sortDirection : 2,
                                    isSortField: !0,
                                    canvasItem
                                },
                                text: _this.localizationService.format("Sort_SortBy", sortField.displayName),
                                checkable: !0,
                                checked: sortField.active
                            });
                        }
                    }
                    if (!_.isEmpty(sortFieldItems)) {
                        var isSortDirectionDisabled = sortFieldItems.length > 1 && !activeSortField, sortDirectionSortGroup = void 0, sortDirectionSortField = void 0;
                        if (1 !== sortFieldItems.length || activeSortField) sortDirectionSortGroup = activeSortGroup, 
                        sortDirectionSortField = activeSortField; else {
                            var sortAction = sortFieldItems[0].data;
                            sortDirectionSortGroup = sortAction.sortGroup, sortDirectionSortField = sortAction.sortField;
                        }
                        var sortDescendingAscendingItems = [ {
                            type: pbi_menu_contracts.iB.Button,
                            data: {
                                type: 4,
                                sortGroup: sortDirectionSortGroup,
                                sortField: sortDirectionSortField,
                                sortDirection: 2,
                                isSortField: !1,
                                canvasItem
                            },
                            text: _this.localizationService.get("Sort_Desc"),
                            checkable: !0,
                            checked: 2 === (null == activeSortField ? void 0 : activeSortField.sortDirection),
                            disabled: isSortDirectionDisabled
                        }, {
                            type: pbi_menu_contracts.iB.Button,
                            data: {
                                type: 4,
                                sortGroup: sortDirectionSortGroup,
                                sortField: sortDirectionSortField,
                                sortDirection: 1,
                                isSortField: !1,
                                canvasItem
                            },
                            text: _this.localizationService.get("Sort_Asc"),
                            checkable: !0,
                            checked: 1 === (null == activeSortField ? void 0 : activeSortField.sortDirection),
                            disabled: isSortDirectionDisabled
                        } ];
                        return {
                            type: pbi_menu_contracts.iB.SubMenu,
                            text: shortcut.label,
                            menu: {
                                items: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], sortFieldItems, !0), [ {
                                    type: pbi_menu_contracts.iB.Divider
                                } ], !1), sortDescendingAscendingItems, !0)
                            }
                        };
                    }
                }));
            }, FormattingUIService.prototype.getCustomActionShortcut$ = function(shortcut, canvasItem) {
                return (0, of.of)({
                    type: pbi_menu_contracts.iB.Button,
                    data: {
                        type: 5,
                        shortcut,
                        canvasItem
                    },
                    text: shortcut.label,
                    icon: {
                        type: 2,
                        name: shortcut.icon
                    },
                    disabled: shortcut.disabled
                });
            }, FormattingUIService.prototype.getSetValueShortcut$ = function(shortcut, canvasItem) {
                return (0, of.of)({
                    type: pbi_menu_contracts.iB.Button,
                    data: {
                        type: 9,
                        shortcut,
                        canvasItem
                    },
                    text: shortcut.label,
                    icon: {
                        type: 2,
                        name: shortcut.icon
                    }
                });
            }, FormattingUIService.prototype.getDivider$ = function() {
                return (0, of.of)({
                    type: pbi_menu_contracts.iB.Divider
                });
            }, FormattingUIService.\u0275fac = function(t) {
                return new (t || FormattingUIService)(core["\u0275\u0275inject"](FormattingService), core["\u0275\u0275inject"](core.Injector), core["\u0275\u0275inject"](item_picker_service.a), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](pbi_overlay_service._), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](selection_service.z));
            }, FormattingUIService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingUIService,
                factory: FormattingUIService.\u0275fac
            }), FormattingUIService;
        }(), FormattingUIServiceLazyProvider = {
            provide: __webpack_require__(87644).VO,
            useFactory: function(formattingUIService) {
                return Promise.resolve(formattingUIService);
            },
            deps: [ FormattingUIService ]
        }, ExploreFormattingModule = function() {
            function ExploreFormattingModule() {}
            return ExploreFormattingModule.\u0275fac = function(t) {
                return new (t || ExploreFormattingModule);
            }, ExploreFormattingModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExploreFormattingModule
            }), ExploreFormattingModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ AnalyticsFormattingAnomalyDetectionHelper, AnalyticsFormattingForecastHelper, AnalyticsFormattingReferenceLineHelper, AnalyticsFormattingService, AnalyticsPaneSaveSliceToDefinitionService, CanvasItemFormattingService, ConditionalFormattingService, FieldPickerTransformationService, FormattingModelService, FormattingService, FormattingServiceLazyProvider, FormattingSliceTransformerService, FormattingStoreFactory, FormattingTutorialService, FormattingUIService, FormattingUIServiceLazyProvider, LegacyAnalyticsFormattingService, LegacyVisualFormattingService, PageFormattingService, VisualFormattingService, VisualLevelFormatInformationCacheService, VisualLevelFormatStringHelperService ],
                imports: [ common.CommonModule ]
            }), ExploreFormattingModule;
        }();
    },
    93188: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Sn: function() {
                return saveChangedSliceToDefinition;
            },
            XK: function() {
                return createPopulatePaneOptions;
            },
            yr: function() {
                return saveSliceToDefinition;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _telemetry_events__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(40702), _powerbi_legacy_Explore_contracts_section__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40474), _powerbi_legacy_Explore_contracts_visualContainerGroup2__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9215), _powerbi_legacy_Explore_services_formatPainter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(61308), _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(67746), _powerbi_legacy_PowerBIVisuals_Visuals_common_gradientUtils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(52083), _powerbi_legacy_PowerBIVisuals_VisualsCommon_arrayExtensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(50550), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(62458), _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(48066), _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5265), _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_DataBoundExprExtractorSQExprVisitor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(10746), _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(82834), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(94419), _powerbi_legacy_PowerBIVisuals_VisualsData_types_geoJson__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(52967), _powerbi_legacy_PowerBIVisuals_VisualsData_types_valueType__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(80777), _powerbi_legacy_VisualHostCore_contracts_resourcePackage__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(18231), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(45413);
        function createPopulatePaneOptions(options) {
            var _this = this;
            return {
                dataBarsDialogLauncherFactory: function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                            return [ 2, options.dataBarsDialogLauncher ];
                        });
                    });
                },
                conditionalFormattingDialogLauncherFactory: function() {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                            return [ 2, options.conditionalFormattingDialogLauncher ];
                        });
                    });
                },
                objectDescriptors: options.capabilities.objects,
                objectDefinitions: options.visualObjectDefns,
                shouldIncludeObject: options.shouldIncludeObject,
                dataSourcesService: options.dataSourcesService,
                enumerateObjectInstances: function(objectName) {
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function() {
                        var visual, objectInstanceOptions;
                        return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {
                            return options.visual ? (objectInstanceOptions = {
                                objectName
                            }, (visual = options.visual).enumerateObjectInstancesAsync ? [ 2, visual.enumerateObjectInstancesAsync(objectInstanceOptions) ] : visual.enumerateObjectInstances ? [ 2, visual.enumerateObjectInstances(objectInstanceOptions) ] : [ 2 ]) : [ 2 ];
                        });
                    });
                },
                enumerateObjectRepetition: function() {
                    if (options.visual && options.visual.enumerateObjectRepetition) return options.visual.enumerateObjectRepetition();
                },
                showGradientCard: options.showGradientCard,
                selectedContainers: options.selectedContainers,
                save: saveChangedSliceToDefinition,
                visualType: options.visualConfig.visualType,
                visualContainer: options.visualContainer,
                visualWarningCollection: options.runningVisual && options.runningVisual.getWarnings(),
                localizationService: options.localizationService,
                visualStyle: options.visualStyle,
                cardIndexCounter: 0,
                disabledSliceTypes: options.disabledSliceTypes,
                excludeConditionalFormattingCard: options.excludeConditionalFormattingCard
            };
        }
        function saveSliceToDefinition(propertyPaneCardName, propertyPaneSlice, definitions, propertySliceSaveServices, hasDynamicExpressionSupport) {
            var _a, _b, _c, _d, _e, _f;
            if (propertyPaneSlice.name !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.tV) if (propertyPaneSlice.name !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Kp) if ((0, 
            _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition2__WEBPACK_IMPORTED_MODULE_4__.e4)(propertyPaneSlice.name)) {
                var sliceValue, valueTypeDescriptor = propertyPaneSlice.type;
                sliceValue = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.e4)(propertyPaneSlice.value) ? propertyPaneSlice.value : valueTypeDescriptor.image ? function(imageValue, objectName, propertyName, selector, definitions, resourceRegistration) {
                    if (!imageValue || _.isEmpty(imageValue.name)) return {
                        name: (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)(""),
                        url: (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)("")
                    };
                    var imageDefinitionUrl, saveImageUrl = !0;
                    if (imageValue.scaling) {
                        var currentImageDef = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.NA)(definitions, {
                            objectName,
                            propertyName
                        }, selector);
                        saveImageUrl = !currentImageDef || (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_13__.fS)(currentImageDef.name, (0, 
                        _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)("")) || (0, 
                        _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_13__.fS)(currentImageDef.scaling, (0, 
                        _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)(imageValue.scaling));
                    }
                    if (saveImageUrl && resourceRegistration) imageDefinitionUrl = resourceRegistration.add(imageValue.name, 1, _powerbi_legacy_VisualHostCore_contracts_resourcePackage__WEBPACK_IMPORTED_MODULE_14__.Ut.Image, {
                        content: imageValue.url
                    }); else {
                        var image = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.NA)(definitions, {
                            objectName,
                            propertyName
                        }, selector);
                        image && (imageDefinitionUrl = image.url);
                    }
                    var imageDefinition = {
                        name: (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)(imageValue.name),
                        url: imageDefinitionUrl
                    };
                    return imageValue.scaling && (imageDefinition.scaling = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)(imageValue.scaling)), 
                    imageDefinition;
                }(propertyPaneSlice.value, propertyPaneCardName, propertyPaneSlice.name, propertyPaneSlice.selector, definitions, propertySliceSaveServices.resourceRegistration) : valueTypeDescriptor.geoJson ? function(geoJson, resourceRegistration) {
                    if (geoJson) {
                        var geoJsonDefinitionContent;
                        if (geoJson.type === _powerbi_legacy_PowerBIVisuals_VisualsData_types_geoJson__WEBPACK_IMPORTED_MODULE_15__.c1) resourceRegistration.add(geoJson.name, 2, _powerbi_legacy_VisualHostCore_contracts_resourcePackage__WEBPACK_IMPORTED_MODULE_14__.Ut.ShapeMap), 
                        geoJsonDefinitionContent = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.nF)(_powerbi_legacy_VisualHostCore_contracts_resourcePackage__WEBPACK_IMPORTED_MODULE_14__.IG, 2, geoJson.name); else if (geoJson.type === _powerbi_legacy_PowerBIVisuals_VisualsData_types_geoJson__WEBPACK_IMPORTED_MODULE_15__.BD && geoJson.content) {
                            var uri = (0, _powerbi_legacy_PowerBIVisuals_VisualsCommon_Utility_urlUtils__WEBPACK_IMPORTED_MODULE_16__.wo)(geoJson.content);
                            geoJsonDefinitionContent = resourceRegistration.add(geoJson.name, 1, _powerbi_legacy_VisualHostCore_contracts_resourcePackage__WEBPACK_IMPORTED_MODULE_14__.Ut.ShapeMap, {
                                content: uri
                            });
                        } else geoJsonDefinitionContent = geoJson.content ? (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)(geoJson.content) : (0, 
                        _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.IF)();
                        return {
                            name: (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)(geoJson.name),
                            type: (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_12__.fL)(geoJson.type),
                            content: geoJsonDefinitionContent
                        };
                    }
                }(propertyPaneSlice.value, propertySliceSaveServices.resourceRegistration) : valueTypeDescriptor.filter && null === propertyPaneSlice.value ? null : (0, 
                _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.Lo)(propertyPaneSlice.value, valueTypeDescriptor), 
                _powerbi_legacy_PowerBIVisuals_VisualsData_types_valueType__WEBPACK_IMPORTED_MODULE_7__.Ge.fromDescriptor(propertyPaneSlice.type).text || "" !== sliceValue || (sliceValue = null);
                var selector = propertyPaneSlice.selector;
                void 0 !== propertyPaneSlice.altConstantValueSelector && (null == propertyPaneSlice.value ? hasDynamicExpressionSupport || (selector = propertyPaneSlice.altConstantValueSelector) : (0, 
                _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_DataBoundExprExtractorSQExprVisitor__WEBPACK_IMPORTED_MODULE_8__.oA)(sliceValue, selector, (0, 
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_arrayExtensions__WEBPACK_IMPORTED_MODULE_9__.bv)()).length ? (0, 
                _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.E2)(definitions, propertyPaneCardName, propertyPaneSlice.altConstantValueSelector, propertyPaneSlice.name) : selector = propertyPaneSlice.altConstantValueSelector), 
                function(sliceValue, objectName, propertyName, selector, definitions) {
                    if (null != sliceValue) {
                        if (null != (null == selector ? void 0 : selector.order)) {
                            var defns_1 = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.GQ)(definitions, objectName, selector, {
                                skipOrder: !0
                            });
                            if (defns_1.length) {
                                _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assert(function() {
                                    return 1 === defns_1.length;
                                }, "expected one match when updating order");
                                var oldSelector = _.first(defns_1).selector;
                                oldSelector.order !== selector.order && ((0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.xl)(definitions, objectName, oldSelector, selector), 
                                (0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.dM)(definitions, {
                                    objectName,
                                    propertyName
                                }, selector));
                            }
                        }
                        (function(propertyPaneCardName, propertyPaneSliceName, definitions, sliceValue) {
                            propertyPaneCardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.De && propertyPaneSliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.di && ((0, 
                            _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.zx)(definitions, propertyPaneCardName, null).properties[_powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Ll] = sliceValue);
                        })(objectName, propertyName, definitions, sliceValue), (0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.zx)(definitions, objectName, selector).properties[propertyName] = sliceValue;
                    } else (0, _powerbi_legacy_PowerBIVisuals_VisualsData_dataView_dataViewObjectDefinition1__WEBPACK_IMPORTED_MODULE_6__.E2)(definitions, objectName, selector, propertyName);
                }(sliceValue, propertyPaneCardName, propertyPaneSlice.name, selector, definitions);
            } else _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_5__.fF.assertFail("Invalid property name"); else for (var definition = definitions[propertyPaneCardName], sections = null !== (_d = null === (_c = propertySliceSaveServices.explorationNavigation) || void 0 === _c ? void 0 : _c.getAllSections()) && void 0 !== _d ? _d : [], activeSection = null === (_e = propertySliceSaveServices.explorationNavigation) || void 0 === _e ? void 0 : _e.getCurrentSection(), sectionObjectDescriptors = _powerbi_legacy_Explore_contracts_section__WEBPACK_IMPORTED_MODULE_2__.C7, _i = 0, sections_1 = sections; _i < sections_1.length; _i++) {
                var section = sections_1[_i];
                if (section !== activeSection) {
                    var sectionObjects = section.objects = null !== (_f = section.objects) && void 0 !== _f ? _f : {};
                    definition ? (0, _powerbi_legacy_Explore_services_formatPainter__WEBPACK_IMPORTED_MODULE_3__.C)(((_a = {})[propertyPaneCardName] = sectionObjectDescriptors[propertyPaneCardName], 
                    _a), sectionObjectDescriptors, ((_b = {})[propertyPaneCardName] = definition, _b), sectionObjects) : delete sectionObjects[propertyPaneCardName];
                }
            } else delete definitions[propertyPaneCardName];
        }
        var saveChangedSliceToDefinition = function(propertyPaneCardName, propertyPaneSlice, selectedVisual, propertySliceSaveServices, canvasLayout, hasDynamicExpressionSupport, shouldSyncVisualFilterState) {
            if ((0, _powerbi_legacy_Explore_contracts_visualContainerGroup2__WEBPACK_IMPORTED_MODULE_10__.Vz)(selectedVisual)) {
                var visualType = selectedVisual.config.singleVisual.visualType;
                if (propertySliceSaveServices.telemetryService && function(cardName, slice, visualType, telemetryService) {
                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, sliceName = slice.name;
                    if (cardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.jA && sliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.di && telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        newValue: slice.value,
                        visualType
                    }), cardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.LG && sliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.di && telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        newValue: slice.value,
                        visualType
                    }), cardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.hz && sliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.i$ && telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        newValue: slice.value,
                        visualType
                    }), cardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.$l && sliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.ns && telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        newValue: slice.value,
                        visualType
                    }), cardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Rz && sliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Il) {
                        var ruleBasedColor = null === (_c = null === (_b = null === (_a = slice.value) || void 0 === _a ? void 0 : _a.solid) || void 0 === _b ? void 0 : _b.color) || void 0 === _c ? void 0 : _c.rule;
                        _.isEmpty(ruleBasedColor) || telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                            objectName: cardName,
                            propertyName: sliceName,
                            newValue: slice.value,
                            visualType
                        });
                    }
                    cardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.jA && sliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Il && (ruleBasedColor = null === (_f = null === (_e = null === (_d = slice.value) || void 0 === _d ? void 0 : _d.solid) || void 0 === _e ? void 0 : _e.color) || void 0 === _f ? void 0 : _f.rule, 
                    _.isEmpty(ruleBasedColor) || telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        newValue: slice.value,
                        visualType
                    })), cardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.e4 && sliceName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Il && (ruleBasedColor = null === (_j = null === (_h = null === (_g = slice.value) || void 0 === _g ? void 0 : _g.solid) || void 0 === _h ? void 0 : _h.color) || void 0 === _j ? void 0 : _j.rule, 
                    _.isEmpty(ruleBasedColor) || telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        newValue: slice.value,
                        visualType
                    })), cardName !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Rz && cardName !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.ve || sliceName !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.xh || telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        newValue: slice.value,
                        visualType
                    }), cardName !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.Rz && cardName !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.ve || sliceName !== _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.es || telemetryService.logEvent(_telemetry_events__WEBPACK_IMPORTED_MODULE_17__.Lo, {
                        objectName: cardName,
                        propertyName: sliceName,
                        visualType
                    });
                }(propertyPaneCardName, propertyPaneSlice, visualType, propertySliceSaveServices.telemetryService), 
                propertyPaneCardName === _powerbi_legacy_ExploreUI_components_propertyPane_propertyPaneViewModel__WEBPACK_IMPORTED_MODULE_1__.ph) !function(propertyPaneSlice, selectedVisual) {
                    var definitions = selectedVisual.config.singleVisual.objects;
                    definitions || (selectedVisual.config.singleVisual.objects = definitions = {}), 
                    (0, _powerbi_legacy_PowerBIVisuals_Visuals_common_gradientUtils__WEBPACK_IMPORTED_MODULE_11__._8)(propertyPaneSlice.name, propertyPaneSlice.value, definitions);
                }(propertyPaneSlice, selectedVisual); else {
                    var definitions = selectedVisual.config.singleVisual.objects;
                    if (definitions || (selectedVisual.config.singleVisual.objects = definitions = {}), 
                    shouldSyncVisualFilterState) {
                        var capabilities = propertySliceSaveServices.visualPlugin && propertySliceSaveServices.visualPlugin.capabilities(visualType);
                        if (capabilities && capabilities.supportsSynchronizingFilterState) {
                            var objectDesc = capabilities.objects[propertyPaneCardName];
                            if (objectDesc) {
                                var propertyDesc = objectDesc.properties[propertyPaneSlice.name];
                                if (propertyDesc && propertyDesc.filterState) {
                                    var visualSync = propertySliceSaveServices.visualSync;
                                    visualSync && visualSync.syncFilterState(selectedVisual);
                                }
                            }
                        }
                    }
                    saveSliceToDefinition(propertyPaneCardName, propertyPaneSlice, definitions, propertySliceSaveServices, hasDynamicExpressionSupport), 
                    selectedVisual.config.singleVisual.autoSelectVisualType = void 0;
                }
            }
        };
    },
    42587: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            F: function() {
                return getDrillthroughControlStates;
            },
            j: function() {
                return getResources;
            }
        });
        var _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(78417);
        function getResources(sectionType, localizationService, showLinkFieldsInPageFormatting) {
            return void 0 === showLinkFieldsInPageFormatting && (showLinkFieldsInPageFormatting = !1), 
            1 === sectionType ? {
                paneTitle: localizationService.get("Tooltip"),
                paneTitleTooltip: localizationService.get("Drillthrough_TooltipTitleTooltip"),
                linkFieldsDropZoneTitle: localizationService.get(showLinkFieldsInPageFormatting ? "PagePropertyPane_LinkFieldsDropZoneTitle_Tooltip" : "DrillthroughLinks_Tooltip_Fields"),
                dropZoneText: localizationService.get("FieldDropZone_TooltipLink_Watermark"),
                keepAllFiltersLabel: localizationService.get("Drillthrough_KeepAllFilters"),
                keepAllFiltersTooltip: localizationService.get("Drillthrough_KeepAllFiltersForTooltip_Tooltip"),
                keepAllFiltersToggleForcedOnTooltip: localizationService.format("Drillthrough_KeepAllFiltersForcedOnForTooltip_Tooltip", [ localizationService.get("Drillthrough_KeepAllFiltersForTooltip_Tooltip") ]),
                crossReportDrillthroughLabel: localizationService.get("Drillthrough_CrossReportDrillthrough"),
                crossReportDrillthroughTooltip: localizationService.get("Drillthrough_CrossReportDrillthrough_Tooltip"),
                linkFieldsLinkTypeGroupTitle: localizationService.get("DrillthroughLinks_LinkTypeGroup_Tooltip")
            } : {
                paneTitle: localizationService.get("Drillthrough"),
                paneTitleTooltip: localizationService.get("Drillthrough_DrillthroughTitleTooltip"),
                linkFieldsDropZoneTitle: localizationService.get(showLinkFieldsInPageFormatting ? "PagePropertyPane_LinkFieldsDropZoneTitle_Drillthrough" : "DrillthroughLinks_Drillthrough_Fields"),
                dropZoneText: localizationService.get("FieldDropZone_DrillthroughLink_Watermark"),
                keepAllFiltersLabel: localizationService.get("Drillthrough_KeepAllFilters"),
                keepAllFiltersTooltip: localizationService.get("Drillthrough_KeepAllFiltersForDrillthrough_Tooltip"),
                keepAllFiltersToggleForcedOnTooltip: localizationService.format("Drillthrough_KeepAllFiltersForcedOnForDrillthrough_Tooltip", [ localizationService.get("Drillthrough_KeepAllFiltersForDrillthrough_Tooltip") ]),
                crossReportDrillthroughLabel: localizationService.get("Drillthrough_CrossReportDrillthrough"),
                crossReportDrillthroughTooltip: localizationService.get("Drillthrough_CrossReportDrillthrough_Tooltip"),
                linkFieldsLinkTypeGroupTitle: localizationService.get("DrillthroughLinks_LinkTypeGroup_Drillthrough")
            };
        }
        function getDrillthroughControlStates(exploration, section, resources, allowRegularSectionAsDrillthroughTarget) {
            var hasMeasureOrAsAggregationLinkField = (0, _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__.Dt)(exploration, section), keepAllFiltersSettingValue = (0, 
            _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__.LM)(exploration, section) || hasMeasureOrAsAggregationLinkField, keepAllFiltersSettingDisabled = !section || hasMeasureOrAsAggregationLinkField, crossReportDrillthroughSettingApplicable = !!section && 2 === section.type || allowRegularSectionAsDrillthroughTarget && !!section && (void 0 === section.type || 0 === section.type);
            return {
                keepAllFilters: {
                    disabled: keepAllFiltersSettingDisabled,
                    value: keepAllFiltersSettingValue,
                    tooltip: keepAllFiltersSettingDisabled && keepAllFiltersSettingValue ? resources.keepAllFiltersToggleForcedOnTooltip : resources.keepAllFiltersTooltip
                },
                crossReportDrillthrough: {
                    show: crossReportDrillthroughSettingApplicable,
                    disabled: !section,
                    value: !!crossReportDrillthroughSettingApplicable && (0, _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__.aQ)(exploration, section),
                    tooltip: resources.crossReportDrillthroughTooltip
                },
                linkFieldsDropZoneTitle: resources.linkFieldsDropZoneTitle,
                linkFieldsLinkTypeGroupTitle: resources.linkFieldsLinkTypeGroupTitle
            };
        }
    }
} ]);