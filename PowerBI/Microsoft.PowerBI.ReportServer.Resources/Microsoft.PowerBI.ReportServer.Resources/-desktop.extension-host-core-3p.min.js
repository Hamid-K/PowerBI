"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-core-3p" ], {
    81542: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostCore3pModule: function() {
                return ExtensionHostCore3pModule;
            },
            createExtensionHostCore3pModule: function() {
                return createExtensionHostCore3pModule;
            }
        });
        var common = __webpack_require__(77476), core = __webpack_require__(50423), ngrx_effects = __webpack_require__(60756), concat = __webpack_require__(55433), of = __webpack_require__(11547), switchMap = __webpack_require__(81905), catchError = __webpack_require__(59822), index_core = __webpack_require__(12834), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), manifest_src = __webpack_require__(67758), GetExtensionNameInjectionToken = new core.InjectionToken("GetExtensionName"), ExtensionHostCore3pEffects = function() {
            function ExtensionHostCore3pEffects(actions$, messageBroker, extensionManifestService, getExtensionName) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.extensionManifestService = extensionManifestService, 
                this.getExtensionName = getExtensionName, this.onResolveEndpointReceived$ = (0, 
                host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.resolveEndpoint, function(action) {
                    return (0, concat.z)(_this.getExtensionName(action.iframeId)).pipe((0, switchMap.w)(function(extensionName) {
                        return _this.extensionManifestService.resolveEndpoint(extensionName, action.capacityObjectId).pipe((0, 
                        switchMap.w)(function(baseUrl) {
                            return (0, of.of)(index_core.Vm.resolveEndpoint.resolve({
                                backendUrl: baseUrl
                            }));
                        }), (0, catchError.K)(function(error) {
                            return (0, of.of)(index_core.Vm.resolveEndpoint.reject({
                                error
                            }));
                        }));
                    }));
                });
            }
            return ExtensionHostCore3pEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostCore3pEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](manifest_src.vC), core["\u0275\u0275inject"](GetExtensionNameInjectionToken));
            }, ExtensionHostCore3pEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostCore3pEffects,
                factory: ExtensionHostCore3pEffects.\u0275fac
            }), ExtensionHostCore3pEffects;
        }();
        function createExtensionHostCore3pModule(config, parent) {
            return (0, core.createNgModule)(ExtensionHostCore3pModule, core.Injector.create({
                providers: [ {
                    provide: GetExtensionNameInjectionToken,
                    useValue: config.getExtensionName
                } ],
                parent
            }));
        }
        var ExtensionHostCore3pModule = function() {
            function ExtensionHostCore3pModule() {}
            return ExtensionHostCore3pModule.\u0275fac = function(t) {
                return new (t || ExtensionHostCore3pModule);
            }, ExtensionHostCore3pModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostCore3pModule
            }), ExtensionHostCore3pModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostCore3pEffects ]) ]
            }), ExtensionHostCore3pModule;
        }();
    }
} ]);