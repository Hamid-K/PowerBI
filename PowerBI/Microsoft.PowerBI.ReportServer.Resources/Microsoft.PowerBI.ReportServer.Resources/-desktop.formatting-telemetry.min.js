"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "formatting-telemetry" ], {
    83606: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            FormattingTelemetryModule: function() {
                return FormattingTelemetryModule;
            }
        });
        var events = __webpack_require__(40702), visualContainerGroup2 = __webpack_require__(9215), visualContainerUtilsHelper = __webpack_require__(3579), visualContainerUtils = __webpack_require__(60661), exploreUITelemetryUtil = __webpack_require__(9500), debug = __webpack_require__(62458), SKIPPED_EVENTS = [ "Visual Container Deselection", "Visual Container Selection" ], CARTESIAN_VISUALS = [ "areaChart", "barChart", "clusteredColumnChart", "clusteredBarChart", "columnChart", "hundredPercentStackedColumnChart", "hundredPercentStackedBarChart", "lineChart", "lineClusteredColumnComboChart", "lineStackedColumnComboChart", "ribbonChart", "scatterChart", "stackedAreaChart", "waterfallChart" ], VisualSession = function() {
            function VisualSession(isActive, sessionId, visualUid, telemetryService, certifiedTelemetryService, featureSwitchService, canvasItem) {
                this.isActive = isActive, this.sessionId = sessionId, this.visualUid = visualUid, 
                this.telemetryService = telemetryService, this.certifiedTelemetryService = certifiedTelemetryService, 
                this.featureSwitchService = featureSwitchService, this.canvasItem = canvasItem, 
                this.events = [];
            }
            return VisualSession.createSession = function(isActive, sessionId, visualUid, telemetryService, certifiedTelemetryService, featureSwitchService, canvasItem) {
                return new VisualSession(isActive, sessionId, visualUid, telemetryService, certifiedTelemetryService, featureSwitchService, canvasItem);
            }, VisualSession.prototype.addEvent = function(properties) {
                var visualProperties = this.getVisualProperties(), event = {
                    name: properties.name,
                    end: properties.end,
                    start: properties.start,
                    data: properties.data,
                    visualProperties
                };
                if (this.events.push(event), this.featureSwitchService.featureSwitches.certifiedVisualTelemetry && !SKIPPED_EVENTS.includes(properties.name)) {
                    var eventData = event.data, payload = {
                        eventName: properties.name,
                        onObjectEnabled: !!this.featureSwitchService.featureSwitches.onObject
                    };
                    switch (payload.source = null == eventData ? void 0 : eventData.source, null == eventData ? void 0 : eventData.source) {
                      case "ContextMenu":
                        payload.contextMenuType = eventData.contextMenuType;
                        break;

                      case "KeyboardShortcut":
                        payload.shortcutType = eventData.shortcutType;
                        break;

                      case "InFocus":
                      case "Skittle":
                        payload.skittleType = eventData.skittleType;
                        break;

                      case "Pane":
                        payload.paneType = eventData.paneType;
                        break;

                      case "MouseAction":
                        payload.mouseActionType = eventData.mouseActionType;
                        break;

                      case "Selection":
                      case "DirectEdit":
                      case "Popout":
                      case "MiniToolbar":
                      case "No Telemetry":
                      case "Ribbon":
                      case "Tooltip":
                      case "VisualErrorOut":
                      case "VisualHeader":
                        break;

                      default:
                        debug.fF.assertNever(eventData);
                    }
                    switch (properties.name) {
                      case "Automatically expand field well section":
                        payload.closed = eventData.closed;
                        break;

                      case "ChangeAutoVisual":
                        payload.initialAutoVisualValue = eventData.initialAutoVisualValue;
                        break;

                      case "Change Format":
                        payload.isCartesian = CARTESIAN_VISUALS.includes(eventData.visualType);
                        break;

                      case "ChangeShowFieldAs":
                        payload.operationType = eventData.operationType;
                        break;

                      case "ChangeVisualType":
                        payload.sourceVisualType = eventData.sourceVisualType, payload.targetVisualType = eventData.targetVisualType;
                        break;

                      case "VisualAction":
                      case "PaneAction":
                        payload.action = eventData.action;
                        break;

                      case "Revert To Default":
                        payload.objectName = eventData.objectName;
                        break;

                      case "UpdateField":
                        payload.fieldType = eventData.fieldType, payload.operationType = eventData.operationType;
                        break;

                      case "ChangeAggregation":
                      case "EndDirectEdit":
                      case "ExecuteNavigateShortcut":
                      case "OpenSkittle":
                      case "SelectVisualRecommendation":
                      case "StartDirectEdit":
                      case "Switch From Format Mode":
                      case "Switch From Matrix View":
                      case "Switch To Format Mode":
                      case "Switch To Matrix View":
                      case "Visual Container Deselection":
                      case "Visual Container Selection":
                        break;

                      default:
                        debug.fF.assertNever(properties.name);
                    }
                    this.certifiedTelemetryService.logTimedStandardizedFeatureEvent({
                        resultCode: null,
                        correlationId: this.sessionId,
                        activityName: properties.name,
                        activityAttributes: payload,
                        featureName: "OnObject",
                        activityStatus: "Succeeded",
                        operationEndTime: properties.end,
                        operationStartTime: properties.start
                    });
                }
                this.isAtCapacity() && (this.logTelemetry(), this.events = []);
            }, VisualSession.prototype.closeSession = function() {
                this.isActive = !1, this.logTelemetry();
            }, VisualSession.prototype.getEvents = function() {
                return this.events;
            }, VisualSession.prototype.logTelemetry = function() {
                this.telemetryService.logEvent(events._Z, {
                    sessionId: this.sessionId,
                    visualName: this.visualUid,
                    data: JSON.stringify(this.events),
                    isOnObject: !!this.featureSwitchService.featureSwitches.onObject
                });
            }, VisualSession.prototype.isAtCapacity = function() {
                return !1;
            }, VisualSession.prototype.getVisualProperties = function() {
                var _a, _b, _c;
                if (null != this.canvasItem && !(0, visualContainerGroup2.q4)(this.canvasItem)) return {
                    visualType: (0, visualContainerUtilsHelper.s)(this.canvasItem),
                    isAutoVisual: (0, visualContainerUtils.II)(this.canvasItem),
                    fieldKinds: _.map(null === (_c = null === (_b = null === (_a = (0, visualContainerUtils.Xf)(this.canvasItem)) || void 0 === _a ? void 0 : _a.defn) || void 0 === _b ? void 0 : _b.select) || void 0 === _c ? void 0 : _c.call(_b), function(s) {
                        return (0, exploreUITelemetryUtil.QR)(s.expr);
                    })
                };
            }, VisualSession;
        }(), ngrx_effects = __webpack_require__(60756), context_activity_actions = __webpack_require__(91401), context_activity_service = __webpack_require__(22292), selection_service = __webpack_require__(72262), exploration_navigation_ex_service = __webpack_require__(59142), view_mode_state_service = __webpack_require__(77200), lazy_load_routes = __webpack_require__(97128), feature_switch_service = __webpack_require__(9380), promiseFactory = __webpack_require__(14463), performance = __webpack_require__(29804), Telemetry = __webpack_require__(21617), merge = __webpack_require__(63057), filter = __webpack_require__(59973), map = __webpack_require__(14172), withLatestFrom = __webpack_require__(23558), v4 = __webpack_require__(11105), core = __webpack_require__(50423), OnObjectTelemetryEvents = [ "ChangeAggregation", "ChangeAutoVisual", "Change Format", "ChangeShowFieldAs", "ChangeVisualType", "EndDirectEdit", "Revert To Default", "Visual Container Deselection", "Visual Container Selection", "UpdateField", "OpenSkittle", "SelectVisualRecommendation", "StartDirectEdit", "Switch From Format Mode", "Switch To Format Mode", "VisualAction", "ExecuteNavigateShortcut", "PaneAction" ], FormattingTelemetryService = function() {
            function FormattingTelemetryService(contextActivity, exploreNavigationService, viewModeState, selectionService, telemetryService, certifiedTelemetryService, featureSwitchService) {
                this.contextActivity = contextActivity, this.exploreNavigationService = exploreNavigationService, 
                this.viewModeState = viewModeState, this.selectionService = selectionService, this.telemetryService = telemetryService, 
                this.certifiedTelemetryService = certifiedTelemetryService, this.featureSwitchService = featureSwitchService, 
                this.sessions = {};
            }
            return FormattingTelemetryService.prototype.start = function() {
                var _this = this, contextActivityStream$ = this.contextActivity.getActivityStream().pipe((0, 
                ngrx_effects.l4)(context_activity_actions.Gb, context_activity_actions.xq, context_activity_actions.TH), (0, 
                filter.h)(function(_a) {
                    return OnObjectTelemetryEvents.includes(_a.properties.name);
                })), selectedElements$ = this.selectionService.selectedElements$, viewMode$ = this.viewModeState.getMode$();
                this.serviceSub = (0, merge.T)(selectedElements$.pipe((0, map.U)(function(data) {
                    return {
                        source: "selection",
                        data
                    };
                })), viewMode$.pipe((0, map.U)(function(data) {
                    return {
                        source: "viewMode",
                        data
                    };
                })), contextActivityStream$.pipe((0, map.U)(function(data) {
                    return {
                        source: "contextActivity",
                        data
                    };
                }))).pipe((0, withLatestFrom.M)(viewMode$)).subscribe(function(_a) {
                    var _b = _a[0], data = _b.data, viewMode = _a[1];
                    switch (_b.source) {
                      case "selection":
                        1 === viewMode && _this.handleSessions(data);
                        break;

                      case "viewMode":
                        _this.handleViewMode(data);
                        break;

                      case "contextActivity":
                        _this.routeEvent(data.properties);
                    }
                });
            }, FormattingTelemetryService.prototype.routeEvent = function(properties) {
                var sessionProperties = properties;
                if (!sessionProperties.visualName) return [ "Switch To Format Mode", "Switch From Format Mode" ].includes(sessionProperties.name) ? void _.forEach(this.sessions, function(session) {
                    return session.addEvent(sessionProperties);
                }) : void (this.canvasSession && this.canvasSession.addEvent(sessionProperties));
                this.logEvent(properties);
            }, FormattingTelemetryService.prototype.logEvent = function(properties) {
                var sessionProperties = properties, visualUid = this.getVisualUid(this.exploreNavigationService.getCurrentSection().name, sessionProperties.visualName), session = this.sessions[visualUid];
                session && session.addEvent(sessionProperties);
            }, FormattingTelemetryService.prototype.handleViewMode = function(viewModeState) {
                0 === viewModeState && this.clean();
            }, FormattingTelemetryService.prototype.clean = function() {
                this.closeAllSessions(), this.serviceSub.unsubscribe();
            }, FormattingTelemetryService.prototype.handleSessions = function(selectedElements) {
                var _a, _this = this;
                if (this.timeoutId && clearTimeout(this.timeoutId), 0 === selectedElements.length) {
                    var pageName = null === (_a = this.exploreNavigationService.getCurrentSection()) || void 0 === _a ? void 0 : _a.name;
                    return this.canvasSession = VisualSession.createSession(!0, (0, v4.Z)(), pageName, this.telemetryService, this.certifiedTelemetryService, this.featureSwitchService, void 0), 
                    void (this.timeoutId = setTimeout(function() {
                        _this.closeAllSessions(), _this.timeoutId = null;
                    }, 1e3));
                }
                this.canvasSession && (this.canvasSession.closeSession(), this.canvasSession = void 0), 
                Object.keys(this.sessions).forEach(function(session) {
                    return _this.sessions[session].isActive = !1;
                });
                for (var _i = 0, selectedElements_1 = selectedElements; _i < selectedElements_1.length; _i++) {
                    var selectedElement = selectedElements_1[_i], canvasItemName = selectedElement.canvasItem.name, visualUid = this.getVisualUid(this.exploreNavigationService.getCurrentSection().name, canvasItemName), time = (0, 
                    performance.z)();
                    if (this.sessions[visualUid]) this.sessions[visualUid].isActive = !0; else {
                        var sessionId = (0, v4.Z)();
                        this.sessions[visualUid] = VisualSession.createSession(!0, sessionId, visualUid, this.telemetryService, this.certifiedTelemetryService, this.featureSwitchService, selectedElement.canvasItem), 
                        this.sessions[visualUid].addEvent({
                            name: "Visual Container Selection",
                            end: time,
                            start: time,
                            data: {
                                source: "Selection"
                            },
                            visualName: visualUid
                        });
                    }
                }
                Object.keys(this.sessions).forEach(function(selection) {
                    if (!1 === _this.sessions[selection].isActive) {
                        var time = (0, performance.z)();
                        _this.sessions[selection].addEvent({
                            name: "Visual Container Deselection",
                            end: time,
                            start: time,
                            data: {
                                source: "Selection"
                            },
                            visualName: _this.sessions[selection].visualUid
                        }), _this.sessions[selection].closeSession(), delete _this.sessions[selection];
                    }
                });
            }, FormattingTelemetryService.prototype.getVisualUid = function(sectionName, visualName) {
                return "".concat(sectionName, "_").concat(visualName);
            }, FormattingTelemetryService.prototype.closeAllSessions = function() {
                _.forEach(this.sessions, function(session) {
                    var time = (0, performance.z)();
                    session.addEvent({
                        name: "Visual Container Deselection",
                        end: time,
                        start: time,
                        data: {
                            source: "Selection"
                        },
                        visualName: session.visualUid
                    }), session.closeSession();
                }), this.sessions = {};
            }, FormattingTelemetryService.\u0275fac = function(t) {
                return new (t || FormattingTelemetryService)(core["\u0275\u0275inject"](context_activity_service.r), core["\u0275\u0275inject"](exploration_navigation_ex_service.I), core["\u0275\u0275inject"](view_mode_state_service.kc), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](Telemetry.ly), core["\u0275\u0275inject"](feature_switch_service.vZ));
            }, FormattingTelemetryService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FormattingTelemetryService,
                factory: FormattingTelemetryService.\u0275fac
            }), FormattingTelemetryService;
        }(), FormattingTelemetryServiceLazyProvider = {
            provide: lazy_load_routes.F,
            useFactory: function(promiseFactory, contextActivityService, explorationNavigationService, selectionService, viewModeState, telemetryService, certifiedTelemetryService, featureSwitchService) {
                var service = new FormattingTelemetryService(contextActivityService, explorationNavigationService, viewModeState, selectionService, telemetryService, certifiedTelemetryService, featureSwitchService);
                return promiseFactory.resolve(service);
            },
            deps: [ promiseFactory.t, context_activity_service.r, exploration_navigation_ex_service.I, selection_service.z, view_mode_state_service.kc, Telemetry.y0, Telemetry.ly, feature_switch_service.vZ ]
        }, common = __webpack_require__(77476), lazy_load_module = __webpack_require__(82156), FormattingTelemetryModule = function() {
            function FormattingTelemetryModule() {}
            return FormattingTelemetryModule.\u0275fac = function(t) {
                return new (t || FormattingTelemetryModule);
            }, FormattingTelemetryModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: FormattingTelemetryModule
            }), FormattingTelemetryModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ FormattingTelemetryServiceLazyProvider ],
                imports: [ common.CommonModule, lazy_load_module.N ]
            }), FormattingTelemetryModule;
        }();
    }
} ]);