"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "save-diagnostics-dialog" ], {
    70530: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            SaveDiagnosticsDialogModule: function() {
                return SaveDiagnosticsDialogModule;
            }
        });
        var save_diagnostics_dialog_identifier = __webpack_require__(44150), tslib_es6 = __webpack_require__(81337), debug = __webpack_require__(62458), formatUtil = __webpack_require__(59694), template_dialog_payload_service = __webpack_require__(67489), BehaviorSubject = __webpack_require__(35510), core = __webpack_require__(50423), host_interop_registry_service = __webpack_require__(39119), FileIOService = function() {
            function FileIOService(hostInteropRegistry) {
                this.hostService = hostInteropRegistry.getHostService("fileIOHostService");
            }
            return FileIOService.prototype.selectLocalDirectoryAsync = function(initialPath, showNewFolderButton) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.hostService.selectLocalDirectory(initialPath, showNewFolderButton) ];
                    });
                });
            }, FileIOService.\u0275fac = function(t) {
                return new (t || FileIOService)(core["\u0275\u0275inject"](host_interop_registry_service.j));
            }, FileIOService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FileIOService,
                factory: FileIOService.\u0275fac,
                providedIn: "root"
            }), FileIOService;
        }(), localization_service = __webpack_require__(65181), common = __webpack_require__(77476), localize_directive = __webpack_require__(59968), localize_attr_directive = __webpack_require__(22844), template_dialog_component = __webpack_require__(96777);
        function SaveDiagnosticsDialogComponent_li_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "li")(1, "span", 8), core["\u0275\u0275element"](2, "label", 9)(3, "a", 10), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var disclosure_r1 = ctx.$implicit;
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("localize", disclosure_r1.text), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("href", disclosure_r1.link, core["\u0275\u0275sanitizeUrl"]), 
                core["\u0275\u0275attribute"]("aria-label", disclosure_r1.linkAriaLabel);
            }
        }
        var _c0 = function() {
            return {
                "aria-label": "SaveDiagnosticsDialog_Save_Path"
            };
        }, SaveDiagnosticsDialogComponent = function() {
            function SaveDiagnosticsDialogComponent(fileIOService, localizationService, templateDialogPayload) {
                this.fileIOService = fileIOService, this.localizationService = localizationService, 
                this.templateDialogPayload = templateDialogPayload, this.partialDiagnosticDisclosureList = [ {
                    text: "SaveDiagnosticsDialog_Performance_Datamodel",
                    link: "https://go.microsoft.com/fwlink/?linkid=2153335"
                }, {
                    text: "SaveDiagnosticsDialog_Session_Info",
                    link: "https://go.microsoft.com/fwlink/?linkid=2153650"
                }, {
                    text: "SaveDiagnosticsDialog_Error_Details",
                    link: "https://go.microsoft.com/fwlink/?linkid=2153336"
                }, {
                    text: "SaveDiagnosticsDialog_Structure_DataModel",
                    link: "https://go.microsoft.com/fwlink/?linkid=2153546"
                }, {
                    text: "SaveDiagnosticsDialog_Data_Refresh",
                    link: "https://go.microsoft.com/fwlink/?linkid=2153337"
                } ];
            }
            return SaveDiagnosticsDialogComponent.prototype.ngOnInit = function() {
                var _a, _b, _this = this, initialSavePath = null !== (_b = null === (_a = this.templateDialogPayload.input) || void 0 === _a ? void 0 : _a.initialSavePath) && void 0 !== _b ? _b : "";
                this.savePath$ = new BehaviorSubject.X(initialSavePath), this.templateDialogPayload.onOkButtonClick = function() {
                    return _this.onSave();
                }, this.templateDialogPayload.onCancelButtonClick = function() {
                    return _this.onCancel();
                }, this.diagnosticDisclosureList = _.map(this.partialDiagnosticDisclosureList, function(diagnostic) {
                    return {
                        text: diagnostic.text,
                        link: diagnostic.link,
                        linkAriaLabel: _this.getLinkAriaLabel(diagnostic.text)
                    };
                });
            }, SaveDiagnosticsDialogComponent.prototype.onCancel = function() {
                return Promise.resolve({
                    shouldSave: !1,
                    savePath: void 0
                });
            }, SaveDiagnosticsDialogComponent.prototype.onSave = function() {
                var _a, savePath = (0, formatUtil.g)(this.savePath$.value) ? null === (_a = this.templateDialogPayload.input) || void 0 === _a ? void 0 : _a.initialSavePath : this.savePath$.value;
                return Promise.resolve({
                    shouldSave: !0,
                    savePath
                });
            }, SaveDiagnosticsDialogComponent.prototype.onBrowse = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var selectedDirResult;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.fileIOService.selectLocalDirectoryAsync(this.savePath$.value) ];

                          case 1:
                            return "OK" === (selectedDirResult = _a.sent()).userAction && this.savePath$.next(selectedDirResult.selectedPath), 
                            [ 2 ];
                        }
                    });
                });
            }, SaveDiagnosticsDialogComponent.prototype.getLinkAriaLabel = function(diagnosticItemText) {
                return debug.fF.assertValue(diagnosticItemText, "diagnostic item text"), this.localizationService.format("LearnMore_About", [ this.localizationService.get(diagnosticItemText) ]);
            }, SaveDiagnosticsDialogComponent.\u0275fac = function(t) {
                return new (t || SaveDiagnosticsDialogComponent)(core["\u0275\u0275directiveInject"](FileIOService), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x));
            }, SaveDiagnosticsDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: SaveDiagnosticsDialogComponent,
                selectors: [ [ "save-diagnostics-dialog" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 11,
                vars: 6,
                consts: [ [ 1, "dialogContent" ], [ "localize", "SaveDiagnosticsDialog_Body_Intro" ], [ "localize", "SaveDiagnosticsDialog_Collect_Information" ], [ 4, "ngFor", "ngForOf" ], [ "id", "browseDetails", "localize", "SaveDiagnosticsDialog_Browse_Details" ], [ 1, "browseContainer" ], [ "readonly", "", 1, "pbi-text-input", "trimmedTextWithEllipsis", 3, "value", "localizeAttr" ], [ "localize", "Browse", "aria-describedby", "browseDetails", 1, "pbi-fluent-button", "primary", 3, "click" ], [ 1, "diagnosticListItem" ], [ 3, "localize" ], [ "localize", "Generic_LearnMore", "target", "_blank", 1, "pbi-link", 3, "href" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "div", 0), 
                    core["\u0275\u0275element"](2, "p", 1)(3, "p", 2), core["\u0275\u0275elementStart"](4, "ul"), 
                    core["\u0275\u0275template"](5, SaveDiagnosticsDialogComponent_li_5_Template, 4, 3, "li", 3), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](6, "p", 4), core["\u0275\u0275elementStart"](7, "span", 5), 
                    core["\u0275\u0275element"](8, "input", 6), core["\u0275\u0275pipe"](9, "async"), 
                    core["\u0275\u0275elementStart"](10, "button", 7), core["\u0275\u0275listener"]("click", function() {
                        return ctx.onBrowse();
                    }), core["\u0275\u0275elementEnd"]()()()()), 2 & rf && (core["\u0275\u0275advance"](5), 
                    core["\u0275\u0275property"]("ngForOf", ctx.diagnosticDisclosureList), core["\u0275\u0275advance"](3), 
                    core["\u0275\u0275property"]("value", core["\u0275\u0275pipeBind1"](9, 3, ctx.savePath$))("localizeAttr", core["\u0275\u0275pureFunction0"](5, _c0)));
                },
                dependencies: [ common.NgForOf, localize_directive.X, localize_attr_directive.b, template_dialog_component.J, common.AsyncPipe ],
                styles: [ ".dialogContent[_ngcontent-%COMP%]{font-size:var(--md-font-size, 14px);width:720px;padding:0}.dialogContent[_ngcontent-%COMP%]   .diagnosticListItem[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:flex-start;column-gap:1rem}.dialogContent[_ngcontent-%COMP%]   .browseContainer[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:flex-start;column-gap:.5rem}.dialogContent[_ngcontent-%COMP%]   .browseContainer[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{min-width:250px}" ],
                changeDetection: 0
            }), SaveDiagnosticsDialogComponent;
        }(), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), SaveDiagnosticsDialogModule = function() {
            function SaveDiagnosticsDialogModule() {}
            return SaveDiagnosticsDialogModule.\u0275fac = function(t) {
                return new (t || SaveDiagnosticsDialogModule);
            }, SaveDiagnosticsDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: SaveDiagnosticsDialogModule
            }), SaveDiagnosticsDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, localization_module.v, dialogs_module.c.withManifest([ {
                    componentIdentifier: save_diagnostics_dialog_identifier.B,
                    componentType: SaveDiagnosticsDialogComponent
                } ]) ]
            }), SaveDiagnosticsDialogModule;
        }();
    }
} ]);