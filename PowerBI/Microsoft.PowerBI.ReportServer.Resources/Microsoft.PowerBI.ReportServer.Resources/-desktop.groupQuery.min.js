"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "groupQuery" ], {
    3942: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            GroupQueryModule: function() {
                return GroupQueryModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), single_executable_data_proxy_factory_service = __webpack_require__(38823), conceptual_schema_proxy_service = __webpack_require__(26898), filter_generator_service = __webpack_require__(94717), visual_query_generator_service = __webpack_require__(88565), visualQuery = __webpack_require__(45114), visualDataProxyService = __webpack_require__(98306), visualHostServicesUtil = __webpack_require__(98330), plugins = __webpack_require__(47508), debug = __webpack_require__(62458), semanticQuery = __webpack_require__(95462), promiseFactory = __webpack_require__(14463), visual_plugin_service = __webpack_require__(29866), GroupQueryServiceLazyProvider = {
            provide: "groupQueryService",
            useFactory: function(singleExecutableDataProxyFactory, filterGenerator, conceptualSchemaProxy, visualQueryGenerator, promiseFactory, visualPluginService) {
                return new GroupQueryService(singleExecutableDataProxyFactory, filterGenerator, conceptualSchemaProxy, visualQueryGenerator, promiseFactory, visualPluginService);
            },
            deps: [ single_executable_data_proxy_factory_service.U, filter_generator_service.r, conceptual_schema_proxy_service.i, visual_query_generator_service.S, promiseFactory.t, visual_plugin_service.D ]
        }, GroupQueryService = function() {
            function GroupQueryService(singleExecutableDataProxyFactory, filterGenerator, conceptualSchemaProxy, visualQueryGenerator, promiseFactory, visualPluginService) {
                this.singleExecutableDataProxyFactory = singleExecutableDataProxyFactory, this.filterGenerator = filterGenerator, 
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.visualQueryGenerator = visualQueryGenerator, 
                this.promiseFactory = promiseFactory, this.visualPluginService = visualPluginService, 
                this.reset();
            }
            return GroupQueryService.prototype.getValuesForColumn = function(expr, dataSources, loadMore) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, query, queryResult, error_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            debug.fF.assertValue(expr, "expr"), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 4, , 5 ]), [ 4, this.conceptualSchemaProxy.get(dataSources) ];

                          case 2:
                            return schema = _a.sent(), (query = new visualQuery.g(semanticQuery.vQ.create(), {}, [])).add(expr, "Values"), 
                            [ 4, this.runQueryImpl({
                                dataSources,
                                schema,
                                config: {
                                    visualType: plugins.L.table.name,
                                    query
                                },
                                hostServices: (0, visualHostServicesUtil.E)(),
                                visualQueryGenerator: this.visualQueryGenerator,
                                executionType: loadMore ? 1 : 0,
                                preferCurrentData: !loadMore,
                                allowResultFromClientCache: !1,
                                isInitialLoad: !loadMore
                            }) ];

                          case 3:
                            return queryResult = _a.sent(), this.lastResult = queryResult ? {
                                table: queryResult.dataReaderResult.dataView.table,
                                canLoadMore: this.dataProxy.canLoadMore()
                            } : this.lastResult, [ 3, 5 ];

                          case 4:
                            throw error_1 = _a.sent(), new Error(error_1.errorCode);

                          case 5:
                            return [ 2, this.lastResult ];
                        }
                    });
                });
            }, GroupQueryService.prototype.getAggregatesForColumn = function(expr, dataSources) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var aggregates, schema, query, roleName, queryResult, dataViewTable, resultRows, resultRow, error_2;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            debug.fF.assertValue(expr, "expr"), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 4, , 5 ]), [ 4, this.conceptualSchemaProxy.get(dataSources) ];

                          case 2:
                            return schema = _a.sent(), query = new visualQuery.g(semanticQuery.vQ.create(), {}, []), 
                            debug.fF.assert(function() {
                                return 1 === plugins.L.multiRowCard.capabilities.dataRoles.length;
                            }, "Expecting MultiRowCard.capabilities has only 1 data role."), query.add(expr, roleName = plugins.L.multiRowCard.capabilities.dataRoles[0].name), 
                            query.setAggregate(roleName, 0, 3), query.add(expr, roleName), query.setAggregate(roleName, 1, 4), 
                            query.add(expr, roleName), query.setAggregate(roleName, 2, 5), [ 4, this.runQueryImpl({
                                dataSources,
                                schema,
                                config: {
                                    visualType: plugins.L.multiRowCard.name,
                                    query
                                },
                                hostServices: (0, visualHostServicesUtil.E)(),
                                visualQueryGenerator: this.visualQueryGenerator,
                                executionType: 0,
                                preferCurrentData: !1,
                                allowResultFromClientCache: !1
                            }) ];

                          case 3:
                            return queryResult = _a.sent(), (resultRows = (dataViewTable = queryResult.dataReaderResult.dataView.table) && dataViewTable.rows) && resultRows.length > 0 && (aggregates = (resultRow = resultRows[0]) ? {
                                min: {
                                    formatString: dataViewTable.columns[0].format,
                                    value: resultRow[0]
                                },
                                max: {
                                    formatString: dataViewTable.columns[1].format,
                                    value: resultRow[1]
                                },
                                count: resultRow[2]
                            } : void 0), [ 3, 5 ];

                          case 4:
                            throw error_2 = _a.sent(), new Error(error_2.clientError);

                          case 5:
                            return [ 2, aggregates ];
                        }
                    });
                });
            }, GroupQueryService.prototype.reset = function() {
                this.conceptualSchemaProxy.clearCache(), this.dataProxy = (0, visualDataProxyService.nW)(this.singleExecutableDataProxyFactory.create(), this.filterGenerator, this.promiseFactory, this.visualPluginService);
            }, GroupQueryService.prototype.runQueryImpl = function(options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.dataProxy.runQuery(options) ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, GroupQueryService;
        }(), core = __webpack_require__(50423), GroupQueryModule = function() {
            function GroupQueryModule() {}
            return GroupQueryModule.\u0275fac = function(t) {
                return new (t || GroupQueryModule);
            }, GroupQueryModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: GroupQueryModule
            }), GroupQueryModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ GroupQueryServiceLazyProvider ]
            }), GroupQueryModule;
        }();
    }
} ]);