"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "theme-dialog" ], {
    14897: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ThemeDialogModule: function() {
                return ThemeDialogModule;
            }
        });
        var core = __webpack_require__(50423), focusManager = __webpack_require__(65302), high_contrast_css_generation_service = __webpack_require__(64647), common = __webpack_require__(77476), localize_directive = __webpack_require__(59968), legacy_list = __webpack_require__(47347), accessible_click_directive = __webpack_require__(44581);
        function DialogSideNavigationComponent_h1_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "h1", 4), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("localize", ctx_r0.title);
            }
        }
        var _c0 = function(a0) {
            return {
                active: a0
            };
        };
        function DialogSideNavigationComponent_a_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r5 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "a", 5), core["\u0275\u0275listener"]("keydown", function($event) {
                    core["\u0275\u0275restoreView"](_r5);
                    var ctx_r4 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r4.navigateMenuItem($event));
                })("accessible-click", function() {
                    var i_r3 = core["\u0275\u0275restoreView"](_r5).index, ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.changeActiveSection(i_r3));
                }), core["\u0275\u0275element"](1, "span", 6), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var section_r2 = ctx.$implicit, i_r3 = ctx.index, ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](2, _c0, ctx_r1.activeSectionIndex === i_r3)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", section_r2.name);
            }
        }
        var _c1 = function(a0) {
            return {
                subSection: a0
            };
        }, DialogSideNavigationComponent = function() {
            function DialogSideNavigationComponent(highContrastCssGenerationService) {
                this.highContrastCssGenerationService = highContrastCssGenerationService, this.activeSectionIndex = 0, 
                this.activeSectionIndexChange = new core.EventEmitter, this.tabKeyPress = new core.EventEmitter, 
                this.initializeHighContrastRules();
            }
            return DialogSideNavigationComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".themeableElement .navigation-pane-container .mat-nav-list.navList .mat-list-item.listItem.active", "{ background: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".themeableElement .navigation-pane-container .mat-nav-list.navList .mat-list-item.listItem.active span", "{ color: @selectedForegroundColor !important; }");
            }, DialogSideNavigationComponent.prototype.changeActiveSection = function(activeSection) {
                this.activeSectionIndex = activeSection, this.activeSectionIndexChange.emit(this.activeSectionIndex);
            }, DialogSideNavigationComponent.prototype.navigateMenuItem = function(event) {
                var target;
                38 !== event.keyCode && 37 !== event.keyCode || (event.preventDefault(), focusManager.IK.focus((target = event.target).previousElementSibling ? target.previousElementSibling : target.parentElement && target.parentElement.lastElementChild)), 
                40 !== event.keyCode && 39 !== event.keyCode || (event.preventDefault(), focusManager.IK.focus((target = event.target).nextElementSibling ? target.nextElementSibling : target.parentElement && target.parentElement.firstElementChild)), 
                9 === event.keyCode && (event.preventDefault(), this.tabKeyPress.emit(event.shiftKey));
            }, DialogSideNavigationComponent.\u0275fac = function(t) {
                return new (t || DialogSideNavigationComponent)(core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g));
            }, DialogSideNavigationComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: DialogSideNavigationComponent,
                selectors: [ [ "dialog-side-navigation" ] ],
                inputs: {
                    isSubSection: "isSubSection",
                    sections: "sections",
                    title: "title",
                    activeSectionIndex: "activeSectionIndex"
                },
                outputs: {
                    activeSectionIndexChange: "activeSectionIndexChange",
                    tabKeyPress: "tabKeyPress"
                },
                decls: 4,
                vars: 5,
                consts: [ [ 1, "navigation-pane-container", 3, "ngClass" ], [ "class", "dialog-title", 3, "localize", 4, "ngIf" ], [ "role", "navigation", 1, "navList" ], [ "mat-list-item", "", "role", "menuitem", "class", "listItem trimmedTextWithEllipsis", 3, "ngClass", "keydown", "accessible-click", 4, "ngFor", "ngForOf" ], [ 1, "dialog-title", 3, "localize" ], [ "mat-list-item", "", "role", "menuitem", 1, "listItem", "trimmedTextWithEllipsis", 3, "ngClass", "keydown", "accessible-click" ], [ 3, "localize" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275template"](1, DialogSideNavigationComponent_h1_1_Template, 1, 1, "h1", 1), 
                    core["\u0275\u0275elementStart"](2, "mat-nav-list", 2), core["\u0275\u0275template"](3, DialogSideNavigationComponent_a_3_Template, 2, 4, "a", 3), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](3, _c1, ctx.isSubSection)), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.title), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", ctx.sections));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, localize_directive.X, legacy_list.U, legacy_list.oh, accessible_click_directive.t ],
                styles: [ '[_nghost-%COMP%]{--navigation-side-foreground: var(--fluent-theme-neutral-primary-color, #323130);--navigation-side-background: var(--fluent-theme-neutral-lighter-color, #F3F2F1);--navigation-side-background-hover: var(--fluent-theme-neutral-lighter-alt-color, #FAF9F8);--navigation-side-subsection-background: var(--fluent-theme-white-color, #FFF);--navigation-side-subsection-background-hover: var(--fluent-theme-light-gray-color, #c8c8c8);--navigation-side-subsection-background-active: var(--fluent-theme-neutral-light-color, #EDEBE9)}[data-legacy-theming=false]   [_nghost-%COMP%]{--navigation-side-foreground: var(--colorNeutralForeground1);--navigation-side-background: var(--colorNeutralBackground2);--navigation-side-background-hover: var(--colorNeutralBackground2Hover);--navigation-side-subsection-background: var(--colorNeutralBackground1);--navigation-side-subsection-background-hover: var(--colorNeutralBackground1Hover);--navigation-side-subsection-background-active: var(--colorNeutralBackground1Selected)}.navigation-pane-container[_ngcontent-%COMP%]{height:100%;display:inline-block;min-width:200px;background-color:var(--navigation-side-background)}.navigation-pane-container[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]{height:100%;border-right:1px solid var(--navigation-side-subsection-background-active)}.navigation-pane-container[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);color:var(--navigation-side-foreground)}.navigation-pane-container[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem[_ngcontent-%COMP%]:hover, html[data-focus-source=key][_ngcontent-%COMP%]   .navigation-pane-container[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem[_ngcontent-%COMP%]:focus{background-color:var(--navigation-side-background-hover)}.navigation-pane-container[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem.active[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);background-color:var(--navigation-side-subsection-background)}.navigation-pane-container.subSection[_ngcontent-%COMP%]{min-width:160px;background:var(--navigation-side-subsection-background)}.navigation-pane-container.subSection[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem[_ngcontent-%COMP%]{display:flex;align-items:center}.navigation-pane-container.subSection[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem[_ngcontent-%COMP%]:hover, html[data-focus-source=key][_ngcontent-%COMP%]   .navigation-pane-container.subSection[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem[_ngcontent-%COMP%]:focus{background-color:var(--navigation-side-subsection-background-hover)}.navigation-pane-container.subSection[_ngcontent-%COMP%]   .navList[_ngcontent-%COMP%]   .listItem.active[_ngcontent-%COMP%]{background-color:var(--navigation-side-subsection-background-active)}.navigation-pane-container[_ngcontent-%COMP%]   .dialog-title[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--xlg-font-size, 20px);font-weight:var(--font-weight-semi-bold, 600);color:var(--navigation-side-foreground);border-right:1px solid var(--navigation-side-subsection-background-active);line-height:28px;margin:16px auto 0 16px}.navigation-pane-container[_ngcontent-%COMP%]   .mat-list-base[_ngcontent-%COMP%]{padding-top:12px}' ]
            }), DialogSideNavigationComponent;
        }(), FocusNavigationUtility = __webpack_require__(57470), debug = __webpack_require__(62458), dialog = __webpack_require__(32293), navigatable_dialog_component_c0 = [ "mainSectionPane" ], navigatable_dialog_component_c1 = [ "subSectionPane" ], _c2 = [ "contentPane" ];
        function NavigatableDialogComponent_dialog_side_navigation_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "dialog-side-navigation", 7, 8), core["\u0275\u0275listener"]("tabKeyPress", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.focusSection(ctx_r6.ContentPane.SubSection, $event));
                })("activeSectionIndexChange", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r8 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r8.updateActiveSubSectionIndex($event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("isSubSection", !0)("sections", ctx_r1.activeSubSections)("activeSectionIndex", ctx_r1.subSectionIndexesDict[ctx_r1.activeSectionIndex]);
            }
        }
        function NavigatableDialogComponent_button_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r10 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 9), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r10);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.onSaveClicked());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("localize", ctx_r3.saveButtonLocStr);
            }
        }
        function NavigatableDialogComponent_button_8_Template(rf, ctx) {
            if (1 & rf) {
                var _r12 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 10), core["\u0275\u0275listener"]("keydown", function($event) {
                    core["\u0275\u0275restoreView"](_r12);
                    var ctx_r11 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r11.onCancelKeyDown($event));
                })("click", function() {
                    core["\u0275\u0275restoreView"](_r12);
                    var ctx_r13 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r13.onCancelClicked());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("localize", ctx_r4.cancelButtonLocStr);
            }
        }
        var _c3 = [ "*" ], ContentPane = function(ContentPane) {
            return ContentPane[ContentPane.MainSection = 0] = "MainSection", ContentPane[ContentPane.SubSection = 1] = "SubSection", 
            ContentPane[ContentPane.ContentSection = 2] = "ContentSection", ContentPane;
        }({}), NavigatableDialogComponent = function() {
            function NavigatableDialogComponent() {
                this.indexesChange = new core.EventEmitter, this.saveChange = new core.EventEmitter, 
                this.cancelChange = new core.EventEmitter, this.activeSectionIndex = 0, this.ContentPane = ContentPane, 
                this.subSectionIndexesDict = {
                    0: 0
                };
            }
            return NavigatableDialogComponent.prototype.updateActiveSectionIndex = function(index) {
                this.activeSectionIndex = index, this.subSectionIndexesDict[index] = void 0 === this.subSectionIndexesDict[index] ? 0 : this.subSectionIndexesDict[index], 
                this.indexesChange.emit({
                    section: index,
                    subSection: this.subSectionIndexesDict[index]
                });
            }, NavigatableDialogComponent.prototype.updateActiveSubSectionIndex = function(index) {
                this.subSectionIndexesDict[this.activeSectionIndex] = index, this.indexesChange.emit({
                    section: this.activeSectionIndex,
                    subSection: index
                });
            }, Object.defineProperty(NavigatableDialogComponent.prototype, "activeSubSections", {
                get: function() {
                    return this.sections[this.activeSectionIndex].subSections;
                },
                enumerable: !1,
                configurable: !0
            }), NavigatableDialogComponent.prototype.onSaveClicked = function() {
                this.saveChange.emit();
            }, NavigatableDialogComponent.prototype.onCancelClicked = function() {
                this.cancelChange.emit();
            }, NavigatableDialogComponent.prototype.focusSection = function(section, isShift) {
                switch (section) {
                  case ContentPane.MainSection:
                    this.focusNextElement(isShift ? this.contentPane.element.nativeElement : this.subSectionPane.element.nativeElement);
                    break;

                  case ContentPane.SubSection:
                    this.focusNextElement(isShift ? this.mainSectionPane.element.nativeElement : this.contentPane.element.nativeElement);
                    break;

                  case ContentPane.ContentSection:
                    this.focusNextElement(isShift ? this.subSectionPane.element.nativeElement : this.mainSectionPane.element.nativeElement);
                    break;

                  default:
                    debug.fF.assertNever(section);
                }
            }, NavigatableDialogComponent.prototype.onCancelKeyDown = function(event) {
                9 === event.keyCode && (event.stopPropagation(), event.preventDefault(), this.focusSection(ContentPane.ContentSection, event.shiftKey));
            }, NavigatableDialogComponent.prototype.focusNextElement = function(elementToFocus) {
                var nextFocus = FocusNavigationUtility.M.getFirstTabbableChild(elementToFocus);
                nextFocus && focusManager.IK.focus(nextFocus, !0);
            }, NavigatableDialogComponent.\u0275fac = function(t) {
                return new (t || NavigatableDialogComponent);
            }, NavigatableDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: NavigatableDialogComponent,
                selectors: [ [ "navigatable-dialog" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](navigatable_dialog_component_c0, 5, core.ViewContainerRef), 
                    core["\u0275\u0275viewQuery"](navigatable_dialog_component_c1, 5, core.ViewContainerRef), 
                    core["\u0275\u0275viewQuery"](_c2, 5, core.ViewContainerRef)), 2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.mainSectionPane = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.subSectionPane = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.contentPane = _t.first);
                    }
                },
                inputs: {
                    sections: "sections",
                    title: "title",
                    saveButtonLocStr: "saveButtonLocStr",
                    cancelButtonLocStr: "cancelButtonLocStr"
                },
                outputs: {
                    indexesChange: "indexesChange",
                    saveChange: "saveChange",
                    cancelChange: "cancelChange"
                },
                ngContentSelectors: _c3,
                decls: 9,
                vars: 6,
                consts: [ [ 3, "sections", "activeSectionIndex", "title", "tabKeyPress", "activeSectionIndexChange" ], [ "mainSectionPane", "" ], [ 3, "isSubSection", "sections", "activeSectionIndex", "tabKeyPress", "activeSectionIndexChange", 4, "ngIf" ], [ "focus-nav-mode", "Group", 1, "rightPane" ], [ "contentPane", "" ], [ "class", "pbi-fluent-button primary", 3, "localize", "click", 4, "ngIf" ], [ "class", "pbi-fluent-button", 3, "localize", "keydown", "click", 4, "ngIf" ], [ 3, "isSubSection", "sections", "activeSectionIndex", "tabKeyPress", "activeSectionIndexChange" ], [ "subSectionPane", "" ], [ 1, "pbi-fluent-button", "primary", 3, "localize", "click" ], [ 1, "pbi-fluent-button", 3, "localize", "keydown", "click" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275projectionDef"](), core["\u0275\u0275elementStart"](0, "dialog-side-navigation", 0, 1), 
                    core["\u0275\u0275listener"]("tabKeyPress", function($event) {
                        return ctx.focusSection(ctx.ContentPane.MainSection, $event);
                    })("activeSectionIndexChange", function($event) {
                        return ctx.updateActiveSectionIndex($event);
                    }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](2, NavigatableDialogComponent_dialog_side_navigation_2_Template, 2, 3, "dialog-side-navigation", 2), 
                    core["\u0275\u0275elementStart"](3, "div", 3, 4), core["\u0275\u0275projection"](5), 
                    core["\u0275\u0275elementStart"](6, "mat-dialog-actions"), core["\u0275\u0275template"](7, NavigatableDialogComponent_button_7_Template, 1, 1, "button", 5), 
                    core["\u0275\u0275template"](8, NavigatableDialogComponent_button_8_Template, 1, 1, "button", 6), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275property"]("sections", ctx.sections)("activeSectionIndex", ctx.activeSectionIndex)("title", ctx.title), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !!ctx.activeSubSections), 
                    core["\u0275\u0275advance"](5), core["\u0275\u0275property"]("ngIf", ctx.saveButtonLocStr), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.cancelButtonLocStr));
                },
                dependencies: [ common.NgIf, localize_directive.X, dialog.H8, DialogSideNavigationComponent ],
                styles: [ '.legacy-dialog.hasNavigatableDialog mat-dialog-container .mat-mdc-dialog-surface{padding:0;-webkit-user-select:none;-ms-user-select:none;user-select:none}  .legacy-dialog.hasNavigatableDialog mat-dialog-container .mat-mdc-dialog-surface .mat-mdc-dialog-title{margin:0}  .legacy-dialog.hasNavigatableDialog mat-dialog-container .mat-mdc-dialog-surface .mat-mdc-dialog-content{flex:1;display:flex;padding:0;overflow:hidden;width:100%;height:100%}[_nghost-%COMP%]{--navigatableDialogBorder: var(--fluent-theme-neutral-light-color, #EDEBE9);display:flex;width:100%;height:100%}[data-legacy-theming=false]   [_nghost-%COMP%]{--navigatableDialogBorder: var(--colorNeutralStroke1)}[_nghost-%COMP%]   .dialog-content-wrapper[_ngcontent-%COMP%]{flex-grow:1;flex-shrink:1}[_nghost-%COMP%]   .rightPane[_ngcontent-%COMP%]{flex-grow:1;flex-shrink:1;display:flex;flex-direction:column;overflow:hidden;height:100vh}[_nghost-%COMP%]   .rightPane[_ngcontent-%COMP%]     .dialogContent{flex-shrink:1;flex-grow:1;display:flex;flex-direction:column}[_nghost-%COMP%]   .rightPane[_ngcontent-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%]{border:none;min-height:64px;flex-shrink:0;flex-grow:0;display:flex;justify-content:flex-end;margin:0;padding-right:24px;padding-bottom:16px;border-top:1px solid var(--navigatableDialogBorder)}[_nghost-%COMP%]   .rightPane[_ngcontent-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:4px 16px}html:not([dir="rtl"])   [_nghost-%COMP%]   .rightPane[_ngcontent-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-left:8px}html[dir="rtl"]   [_nghost-%COMP%]   .rightPane[_ngcontent-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:8px}' ]
            }), NavigatableDialogComponent;
        }(), a11y_module = __webpack_require__(20914), localization_module = __webpack_require__(79061), DialogNavigationModule = function() {
            function DialogNavigationModule() {}
            return DialogNavigationModule.\u0275fac = function(t) {
                return new (t || DialogNavigationModule);
            }, DialogNavigationModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: DialogNavigationModule
            }), DialogNavigationModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, localization_module.v, dialog.Is, legacy_list.gR, a11y_module._ ]
            }), DialogNavigationModule;
        }(), tslib_es6 = __webpack_require__(81337), constants = __webpack_require__(87632), colorUtility = __webpack_require__(1521), VisualsCommon_color = __webpack_require__(64067), fontUtils = __webpack_require__(38265), visualStyles = __webpack_require__(48708), StandaloneUtility1 = __webpack_require__(64329), fill = __webpack_require__(59897), localization_service = __webpack_require__(65181), font_picker_component = __webpack_require__(91146), fesm2022_forms = __webpack_require__(17174), localize_attr_directive = __webpack_require__(22844), hsv_color_picker_component = __webpack_require__(74118), Subject = __webpack_require__(30794), merge = __webpack_require__(63057), debounceTime = __webpack_require__(6754), take = __webpack_require__(48787), pbi_overlay_service = __webpack_require__(86940), safe_style_pipe = __webpack_require__(39546);
        function ColorPickerInputComponent_span_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 4), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](ctx_r0.selectedColor);
            }
        }
        function ColorPickerInputComponent_i_4_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "i", 5);
        }
        var color_picker_input_component_c0 = function(a0, a1, a2) {
            return {
                compact: a0,
                fullLength: a1,
                disabled: a2
            };
        }, ColorPickerInputComponent = function() {
            function ColorPickerInputComponent(cd, elementRef, injector, overlay) {
                var _this = this;
                this.cd = cd, this.elementRef = elementRef, this.injector = injector, this.overlay = overlay, 
                this.colorChanged = new core.EventEmitter, this.compact = !1, this.isDisabled = !1, 
                this.debouncedColorChanged = new Subject.xQ, this.debouncedColorChanged.pipe((0, 
                debounceTime.b)(100)).subscribe(function(hex) {
                    return _this.colorChanged.emit(hex);
                });
            }
            return ColorPickerInputComponent.prototype.ngOnInit = function() {
                (0, colorUtility.K_)(this.initialColor) ? this.selectedColor = this.initialColor : (this.selectedColor = "#FFFFFF", 
                this.colorChanged.emit(this.selectedColor));
            }, ColorPickerInputComponent.prototype.ngOnChanges = function(changes) {
                changes.initialColor && !changes.initialColor.isFirstChange() && this.setSelectedColor(this.initialColor);
            }, ColorPickerInputComponent.prototype.ngOnDestroy = function() {
                this.debouncedColorChanged.unsubscribe();
            }, ColorPickerInputComponent.prototype.openColorPicker = function() {
                var _this = this;
                if (!this.isDisabled) {
                    var overlayPosition = this.overlay.position().flexibleConnectedTo(this.elementRef).withPush(!1).withFlexibleDimensions(!1).withViewportMargin(0).withPositions([ {
                        originX: "start",
                        originY: "bottom",
                        overlayX: "start",
                        overlayY: "top"
                    }, {
                        originX: "start",
                        originY: "top",
                        overlayX: "start",
                        overlayY: "bottom"
                    }, {
                        originX: "end",
                        originY: "top",
                        overlayX: "end",
                        overlayY: "bottom"
                    }, {
                        originX: "end",
                        originY: "bottom",
                        overlayX: "end",
                        overlayY: "top"
                    }, {
                        originX: "center",
                        originY: "top",
                        overlayX: "center",
                        overlayY: "bottom"
                    }, {
                        originX: "center",
                        originY: "bottom",
                        overlayX: "center",
                        overlayY: "top"
                    }, {
                        originX: "end",
                        originY: "center",
                        overlayX: "end",
                        overlayY: "center"
                    } ]), overlayRef = this.overlay.open({
                        component: hsv_color_picker_component.A,
                        options: {
                            width: "288px",
                            height: "342px",
                            hasBackdrop: !0,
                            backdropClass: "invisible-backdrop",
                            positionStrategy: overlayPosition
                        },
                        injector: this.injector
                    }), hsvColorPickerRef = overlayRef.componentRef;
                    hsvColorPickerRef.instance.setProperties(this.selectedColor), (0, merge.T)(overlayRef.overlayRef.backdropClick(), hsvColorPickerRef.instance.closed.asObservable()).pipe((0, 
                    take.q)(1)).subscribe(function() {
                        overlayRef.close(), _this.colorChangedSubscription.unsubscribe();
                    }), this.colorChangedSubscription = hsvColorPickerRef.instance.colorChanged.subscribe(function(hex) {
                        return _this.onColorChanged(hex);
                    });
                }
            }, ColorPickerInputComponent.prototype.onColorChanged = function(hex) {
                this.selectedColor !== hex && (this.selectedColor = hex, this.debouncedColorChanged.next(this.selectedColor), 
                this.cd.markForCheck());
            }, ColorPickerInputComponent.prototype.setSelectedColor = function(hex) {
                this.selectedColor = hex, this.cd.markForCheck();
            }, ColorPickerInputComponent.\u0275fac = function(t) {
                return new (t || ColorPickerInputComponent)(core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](core.Injector), core["\u0275\u0275directiveInject"](pbi_overlay_service._));
            }, ColorPickerInputComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ColorPickerInputComponent,
                selectors: [ [ "color-picker-input" ] ],
                inputs: {
                    initialColor: "initialColor",
                    compact: "compact",
                    isDisabled: "isDisabled",
                    ariaDescribedId: "ariaDescribedId"
                },
                outputs: {
                    colorChanged: "colorChanged"
                },
                features: [ core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 5,
                vars: 12,
                consts: [ [ "role", "button", 1, "input-wrapper", 3, "ngClass", "accessible-click" ], [ 1, "color-preview" ], [ "class", "color-text", 4, "ngIf" ], [ "class", "glyphicon pbi-glyph-chevrondownmedium glyph-mini", 4, "ngIf" ], [ 1, "color-text" ], [ 1, "glyphicon", "pbi-glyph-chevrondownmedium", "glyph-mini" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275listener"]("accessible-click", function() {
                        return ctx.openColorPicker();
                    }), core["\u0275\u0275element"](1, "div", 1), core["\u0275\u0275pipe"](2, "safeStyle"), 
                    core["\u0275\u0275template"](3, ColorPickerInputComponent_span_3_Template, 2, 1, "span", 2), 
                    core["\u0275\u0275template"](4, ColorPickerInputComponent_i_4_Template, 1, 0, "i", 3), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction3"](8, color_picker_input_component_c0, ctx.compact, !ctx.compact, ctx.isDisabled)), 
                    core["\u0275\u0275attribute"]("aria-describedby", ctx.ariaDescribedId)("aria-label", ctx.selectedColor), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("style", core["\u0275\u0275pipeBind1"](2, 6, "background-color:" + ctx.selectedColor + " !important"), core["\u0275\u0275sanitizeStyle"]), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !ctx.compact), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.compact));
                },
                dependencies: [ common.NgClass, common.NgIf, accessible_click_directive.t, safe_style_pipe.i ],
                styles: [ "[_nghost-%COMP%]{display:inline-flex;flex-direction:column;--colorPicker-border: var(--fluent-theme-neutral-tertiary-color, #A19F9D);--colorPicker-foreground: var(--fluent-theme-neutral-secondary-color, #605E5C);--colorPicker-background-disabled: var(--fluent-theme-neutral-light-color, #EDEBE9)}[_nghost-%COMP%]:focus{outline:none}[data-legacy-theming=false]   [_nghost-%COMP%]{--colorPicker-border: var(--colorNeutralStrokeAccessible);--colorPicker-foreground: var(--colorNeutralForeground2);--colorPicker-background-disabled: var(--colorNeutralBackgroundDisabled)}.input-wrapper[_ngcontent-%COMP%]{display:inline-flex;border:1px solid var(--colorPicker-border);border-radius:4px}.input-wrapper.compact[_ngcontent-%COMP%]{align-items:center;width:80px;border-color:var(--colorPicker-border)}.input-wrapper.fullLength[_ngcontent-%COMP%]{min-width:125px;padding-right:8px}.input-wrapper.disabled[_ngcontent-%COMP%]{opacity:.3;background:var(--colorPicker-background-disabled)}.input-wrapper[_ngcontent-%COMP%]   .glyphicon[_ngcontent-%COMP%]{margin:11px 8px 9px auto;color:var(--colorPicker-foreground)}.color-preview[_ngcontent-%COMP%]{width:20px;height:20px;margin:6px 12px 6px 8px;border:1px solid var(--colorPicker-border)}.color-text[_ngcontent-%COMP%]{align-self:center}" ],
                changeDetection: 0
            }), ColorPickerInputComponent;
        }(), num_up_down_component = __webpack_require__(7970), pbi_scrollbar_directive = __webpack_require__(80649), pbi_toggle_button_component = __webpack_require__(64734), slider_component = __webpack_require__(25929), tooltip_directive = __webpack_require__(1240), message_banner_component = __webpack_require__(44641);
        function ThemeDialogContentComponent_message_banner_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r8 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "message-banner", 10), core["\u0275\u0275listener"]("buttonClicked", function() {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r7 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r7.updateBaseThemeForTextClasses());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("viewModel", ctx_r0.messageBannerModel);
            }
        }
        function ThemeDialogContentComponent_ng_template_2_div_0_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "div", 13), 2 & rf) {
                var ctx_r9 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275propertyInterpolate2"]("id", "sectionDescription-", ctx_r9.activeSectionIndex, "-", ctx_r9.activeSubSectionIndex, ""), 
                core["\u0275\u0275property"]("localize", ctx_r9.sectionDescription);
            }
        }
        function ThemeDialogContentComponent_ng_template_2_div_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 14), core["\u0275\u0275element"](1, "a", 15), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r10 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275propertyInterpolate2"]("id", "sectionDescription-", ctx_r10.activeSectionIndex, "-", ctx_r10.activeSubSectionIndex, ""), 
                core["\u0275\u0275property"]("localize", ctx_r10.sectionDescription);
            }
        }
        function ThemeDialogContentComponent_ng_template_2_div_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 14), core["\u0275\u0275element"](1, "a", 16), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r11 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275propertyInterpolate2"]("id", "sectionDescription-", ctx_r11.activeSectionIndex, "-", ctx_r11.activeSubSectionIndex, ""), 
                core["\u0275\u0275property"]("localize", ctx_r11.sectionDescription);
            }
        }
        function ThemeDialogContentComponent_ng_template_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275template"](0, ThemeDialogContentComponent_ng_template_2_div_0_Template, 1, 3, "div", 11), 
            core["\u0275\u0275template"](1, ThemeDialogContentComponent_ng_template_2_div_1_Template, 2, 3, "div", 12), 
            core["\u0275\u0275template"](2, ThemeDialogContentComponent_ng_template_2_div_2_Template, 2, 3, "div", 12)), 
            2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngIf", !ctx_r1.hasLearnMoreLink), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngIf", ctx_r1.isAdvancedColorsSubsection), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngIf", ctx_r1.isGeneralTextSubsection);
            }
        }
        function ThemeDialogContentComponent_div_4_ng_container_2_div_1_div_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r21 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 24), core["\u0275\u0275element"](1, "label", 25), 
                core["\u0275\u0275elementStart"](2, "input", 26), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r21);
                    var ctx_r20 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r20.customThemeName = $event);
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var section_r15 = core["\u0275\u0275nextContext"]().$implicit, ctx_r17 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", section_r15.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("placeholder", ctx_r17.localizationService.get(section_r15.description))("ngModel", ctx_r17.customThemeName)("maxlength", 260);
            }
        }
        var theme_dialog_content_component_c0 = function(a0) {
            return {
                "aria-label": a0
            };
        };
        function ThemeDialogContentComponent_div_4_ng_container_2_div_1_label_2_i_2_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "i", 30), 2 & rf) {
                var section_r15 = core["\u0275\u0275nextContext"](2).$implicit, ctx_r23 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction1"](2, theme_dialog_content_component_c0, section_r15.description))("pbi-tooltip", ctx_r23.getSectionHeaderTooltip(section_r15.description));
            }
        }
        function ThemeDialogContentComponent_div_4_ng_container_2_div_1_label_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "label", 27), core["\u0275\u0275element"](1, "span", 28), 
            core["\u0275\u0275template"](2, ThemeDialogContentComponent_div_4_ng_container_2_div_1_label_2_i_2_Template, 1, 4, "i", 29), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var section_r15 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", section_r15.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", section_r15.description);
            }
        }
        function ThemeDialogContentComponent_div_4_ng_container_2_div_1_div_3_div_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r30 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 33)(1, "label", 34), core["\u0275\u0275text"](2), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "color-picker-input", 35), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    var collectionColor_r27 = core["\u0275\u0275restoreView"](_r30).$implicit, ctx_r29 = core["\u0275\u0275nextContext"](5);
                    return core["\u0275\u0275resetView"](ctx_r29.onCollectionColorChanged(collectionColor_r27.key, $event, !1));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var collectionColor_r27 = ctx.$implicit, colorIndex_r28 = ctx.index, contentSubSection_r16 = core["\u0275\u0275nextContext"](2).index, ctx_r26 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275propertyInterpolate1"]("id", "themeColorsLabel-", collectionColor_r27.key, ""), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](ctx_r26.getColorNumberString(contentSubSection_r16, collectionColor_r27.key, colorIndex_r28)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaDescribedId", "themeColorsLabel-" + collectionColor_r27.key)("initialColor", ctx_r26.getColorFromCollection(collectionColor_r27.key, collectionColor_r27.value))("compact", !0), 
                core["\u0275\u0275attribute"]("aria-posinset", colorIndex_r28 + 1)("aria-setsize", ctx_r26.getColorCollection(contentSubSection_r16).length);
            }
        }
        var theme_dialog_content_component_c1 = function(a0) {
            return {
                lastExpansion: a0
            };
        };
        function ThemeDialogContentComponent_div_4_ng_container_2_div_1_div_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 31), core["\u0275\u0275template"](1, ThemeDialogContentComponent_div_4_ng_container_2_div_1_div_3_div_1_Template, 4, 7, "div", 32), 
            core["\u0275\u0275pipe"](2, "keyvalue"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var contentSubSection_r16 = core["\u0275\u0275nextContext"]().index, ctx_r19 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](4, theme_dialog_content_component_c1, contentSubSection_r16 === ctx_r19.NameAndColorsContentSubSection.ThemeColors)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](2, 2, ctx_r19.getColorCollection(contentSubSection_r16)));
            }
        }
        function ThemeDialogContentComponent_div_4_ng_container_2_div_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div"), core["\u0275\u0275template"](1, ThemeDialogContentComponent_div_4_ng_container_2_div_1_div_1_Template, 3, 4, "div", 21), 
            core["\u0275\u0275template"](2, ThemeDialogContentComponent_div_4_ng_container_2_div_1_label_2_Template, 3, 2, "label", 22), 
            core["\u0275\u0275template"](3, ThemeDialogContentComponent_div_4_ng_container_2_div_1_div_3_Template, 3, 6, "div", 23), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var contentSubSection_r16 = ctx.index, ctx_r14 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", contentSubSection_r16 === ctx_r14.NameAndColorsContentSubSection.Name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", contentSubSection_r16 !== ctx_r14.NameAndColorsContentSubSection.Name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", contentSubSection_r16 !== ctx_r14.NameAndColorsContentSubSection.Name);
            }
        }
        function ThemeDialogContentComponent_div_4_ng_container_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, ThemeDialogContentComponent_div_4_ng_container_2_div_1_Template, 4, 3, "div", 20), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var ctx_r12 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r12.dialogViewModel.sections[ctx_r12.activeSectionIndex].subSections[ctx_r12.activeSubSectionIndex].subSections);
            }
        }
        function ThemeDialogContentComponent_div_4_div_3_div_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r37 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 33), core["\u0275\u0275element"](1, "label", 37), 
                core["\u0275\u0275elementStart"](2, "color-picker-input", 35), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    var advancedColor_r34 = core["\u0275\u0275restoreView"](_r37).$implicit, ctx_r36 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r36.onCollectionColorChanged(advancedColor_r34.key, $event, !0));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var advancedColor_r34 = ctx.$implicit, colorIndex_r35 = ctx.index, ctx_r33 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275propertyInterpolate1"]("id", "advancedColorLabel-", advancedColor_r34.key, ""), 
                core["\u0275\u0275property"]("localize", ctx_r33.getAdvancedColorPickerName(advancedColor_r34.key)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaDescribedId", "advancedColorLabel-" + advancedColor_r34.key)("initialColor", ctx_r33.getColorFromCollection(advancedColor_r34.key, advancedColor_r34.value, !0))("compact", !0), 
                core["\u0275\u0275attribute"]("aria-posinset", colorIndex_r35 + 1)("aria-setsize", ctx_r33.dataViewModel.themeColors.length);
            }
        }
        function ThemeDialogContentComponent_div_4_div_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 36), core["\u0275\u0275template"](1, ThemeDialogContentComponent_div_4_div_3_div_1_Template, 3, 7, "div", 32), 
            core["\u0275\u0275pipe"](2, "keyvalue"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r13 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind2"](2, 1, ctx_r13.dataViewModel.themeColors, ctx_r13.sortAdvancedColors));
            }
        }
        function ThemeDialogContentComponent_div_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 17), core["\u0275\u0275elementContainerStart"](1, 18), 
            core["\u0275\u0275template"](2, ThemeDialogContentComponent_div_4_ng_container_2_Template, 2, 1, "ng-container", 5), 
            core["\u0275\u0275template"](3, ThemeDialogContentComponent_div_4_div_3_Template, 3, 4, "div", 19), 
            core["\u0275\u0275elementContainerEnd"](), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitch", ctx_r2.activeSubSectionIndex), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r2.ColorSubSection.NameAndColors), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r2.ColorSubSection.Advanced);
            }
        }
        var theme_dialog_content_component_c2 = function() {
            return {
                "aria-label": "ThemeDialog_SubSection_Text_Title_FontSize_Desc"
            };
        };
        function ThemeDialogContentComponent_ng_container_5_i_6_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "i", 30), 2 & rf) {
                var ctx_r38 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](2, theme_dialog_content_component_c2))("pbi-tooltip", ctx_r38.getSectionHeaderTooltip("ThemeDialog_SubSection_Text_Title_FontSize_Desc"));
            }
        }
        var theme_dialog_content_component_c3 = function(a0) {
            return {
                disabled: a0
            };
        };
        function ThemeDialogContentComponent_ng_container_5_Template(rf, ctx) {
            if (1 & rf) {
                var _r40 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 38), 
                core["\u0275\u0275element"](2, "label", 39), core["\u0275\u0275elementStart"](3, "font-picker", 40), 
                core["\u0275\u0275listener"]("onFontFamilyChange", function($event) {
                    core["\u0275\u0275restoreView"](_r40);
                    var ctx_r39 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r39.onPropertyChanged(ctx_r39.FontProperty.FontFace, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "label", 41), 
                core["\u0275\u0275element"](5, "span", 42), core["\u0275\u0275template"](6, ThemeDialogContentComponent_ng_container_5_i_6_Template, 1, 3, "i", 29), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](7, "num-up-down", 43), 
                core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r40);
                    var ctx_r41 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r41.onPropertyChanged(ctx_r41.FontProperty.FontSize, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](8, "label", 44), 
                core["\u0275\u0275elementStart"](9, "color-picker-input", 45), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r40);
                    var ctx_r42 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r42.onPropertyChanged(ctx_r42.FontProperty.Color, $event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](13, theme_dialog_content_component_c3, !ctx_r3.isTextSectionEnabled)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](15, theme_dialog_content_component_c3, !ctx_r3.isTextSectionEnabled))("fontFamily", ctx_r3.getFontProperty(ctx_r3.FontProperty.FontFace)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](17, theme_dialog_content_component_c3, !ctx_r3.isTextSectionEnabled)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r3.activeSubSectionIndex === ctx_r3.TextSubSection.Title), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("isDisabled", !ctx_r3.isTextSectionEnabled)("modelValue", ctx_r3.getFontProperty(ctx_r3.FontProperty.FontSize))("options", ctx_r3.fontSizeValueOptions), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](19, theme_dialog_content_component_c3, !ctx_r3.isTextSectionEnabled)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("isDisabled", !ctx_r3.isTextSectionEnabled)("ariaDescribedId", "textSectionColorPickerTitle")("initialColor", ctx_r3.getFontProperty(ctx_r3.FontProperty.Color))("compact", !0);
            }
        }
        function ThemeDialogContentComponent_div_6_ng_container_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r48 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "label", 47), 
                core["\u0275\u0275elementStart"](2, "color-picker-input", 48), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r48);
                    var ctx_r47 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r47.onVCPropertyChanged(ctx_r47.ColorTransparencyKey.Color, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](3, "label", 49), 
                core["\u0275\u0275elementStart"](4, "slider", 50), core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r48);
                    var ctx_r49 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r49.onVCPropertyChanged(ctx_r49.ColorTransparencyKey.Transparency, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r43 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaDescribedId", "visualSectionColorPickerTitle-background")("initialColor", ctx_r43.getVCValueFromCollection(ctx_r43.ColorTransparencyKey.Color))("compact", !0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("modelValue", ctx_r43.getVCValueFromCollection(ctx_r43.ColorTransparencyKey.Transparency))("options", ctx_r43.transparencyValueOptions);
            }
        }
        function ThemeDialogContentComponent_div_6_ng_container_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r51 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "label", 51), 
                core["\u0275\u0275elementStart"](2, "pbi-toggle-button", 52), core["\u0275\u0275listener"]("change", function($event) {
                    core["\u0275\u0275restoreView"](_r51);
                    var ctx_r50 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r50.onVCPropertyChanged(ctx_r50.VCBorder.Show, $event.checked));
                }), core["\u0275\u0275element"](3, "span", 53), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275element"](4, "label", 54), core["\u0275\u0275elementStart"](5, "color-picker-input", 55), 
                core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r51);
                    var ctx_r52 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r52.onVCPropertyChanged(ctx_r52.VCBorder.Color, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](6, "label", 56), 
                core["\u0275\u0275elementStart"](7, "num-up-down", 57), core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r51);
                    var ctx_r53 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r53.onVCPropertyChanged(ctx_r53.VCBorder.Radius, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r44 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("checked", ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Show)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Show) ? "ToggleSwitchOn" : "ToggleSwitchOff"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](11, theme_dialog_content_component_c3, !ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Show))), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaDescribedId", "visualSectionColorPickerTitle-border")("initialColor", ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Color))("isDisabled", !ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Show))("compact", !0), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](13, theme_dialog_content_component_c3, !ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Show))), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("isDisabled", !ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Show))("modelValue", ctx_r44.getVCValueFromCollection(ctx_r44.VCBorder.Radius))("options", ctx_r44.radiusValueOptions);
            }
        }
        function ThemeDialogContentComponent_div_6_ng_container_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r55 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "label", 58), 
                core["\u0275\u0275elementStart"](2, "color-picker-input", 59), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r55);
                    var ctx_r54 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r54.onVCPropertyChanged(ctx_r54.VCHeader.BackgroundColor, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](3, "label", 60), 
                core["\u0275\u0275elementStart"](4, "color-picker-input", 61), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r55);
                    var ctx_r56 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r56.onVCPropertyChanged(ctx_r56.VCHeader.BorderColor, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](5, "label", 62), 
                core["\u0275\u0275elementStart"](6, "slider", 63), core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r55);
                    var ctx_r57 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r57.onVCPropertyChanged(ctx_r57.VCHeader.Transparency, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](7, "label", 64), 
                core["\u0275\u0275elementStart"](8, "color-picker-input", 65), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r55);
                    var ctx_r58 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r58.onVCPropertyChanged(ctx_r58.VCHeader.IconColor, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r45 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("initialColor", ctx_r45.getVCValueFromCollection(ctx_r45.VCHeader.BackgroundColor))("ariaDescribedId", "visualSectionColorPickerTitle-header-background")("compact", !0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("initialColor", ctx_r45.getVCValueFromCollection(ctx_r45.VCHeader.BorderColor))("ariaDescribedId", "visualSectionColorPickerTitle-header-border")("compact", !0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("modelValue", ctx_r45.getVCValueFromCollection(ctx_r45.VCHeader.Transparency))("options", ctx_r45.transparencyValueOptions), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaDescribedId", "visualSectionColorPickerTitle-header-icon")("initialColor", ctx_r45.getVCValueFromCollection(ctx_r45.VCHeader.IconColor))("compact", !0);
            }
        }
        function ThemeDialogContentComponent_div_6_ng_container_5_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r63 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "label", 66), 
                core["\u0275\u0275elementStart"](2, "color-picker-input", 35), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    var section_r60 = core["\u0275\u0275restoreView"](_r63).$implicit, ctx_r62 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r62.onVCPropertyChanged(section_r60.tooltipType, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var section_r60 = ctx.$implicit, index_r61 = ctx.index, ctx_r59 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("id", section_r60.labelId)("localize", section_r60.localizedKey), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaDescribedId", section_r60.labelId)("initialColor", ctx_r59.getVCValueFromCollection(section_r60.tooltipType))("compact", !0), 
                core["\u0275\u0275attribute"]("aria-setsize", ctx_r59.tooltipColorInformation.length)("aria-posinset", index_r61 + 1);
            }
        }
        function ThemeDialogContentComponent_div_6_ng_container_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, ThemeDialogContentComponent_div_6_ng_container_5_ng_container_1_Template, 3, 7, "ng-container", 20), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var ctx_r46 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r46.tooltipColorInformation);
            }
        }
        function ThemeDialogContentComponent_div_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 46), core["\u0275\u0275elementContainerStart"](1, 18), 
            core["\u0275\u0275template"](2, ThemeDialogContentComponent_div_6_ng_container_2_Template, 5, 5, "ng-container", 5), 
            core["\u0275\u0275template"](3, ThemeDialogContentComponent_div_6_ng_container_3_Template, 8, 15, "ng-container", 5), 
            core["\u0275\u0275template"](4, ThemeDialogContentComponent_div_6_ng_container_4_Template, 9, 11, "ng-container", 5), 
            core["\u0275\u0275template"](5, ThemeDialogContentComponent_div_6_ng_container_5_Template, 2, 1, "ng-container", 5), 
            core["\u0275\u0275elementContainerEnd"](), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitch", ctx_r4.activeSubSectionIndex), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r4.VisualsSubSection.Background), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r4.VisualsSubSection.Border), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r4.VisualsSubSection.Header), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r4.VisualsSubSection.Tooltips);
            }
        }
        function ThemeDialogContentComponent_div_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r65 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 67), core["\u0275\u0275element"](1, "label", 68), 
                core["\u0275\u0275elementStart"](2, "color-picker-input", 48), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r65);
                    var ctx_r64 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r64.onPropertyChanged(ctx_r64.PageProperty.Color, $event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](3, "label", 69), 
                core["\u0275\u0275elementStart"](4, "slider", 70), core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r65);
                    var ctx_r66 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r66.onPropertyChanged(ctx_r66.PageProperty.Transparency, $event));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ariaDescribedId", "pageSectionColorPickerTitle")("initialColor", ctx_r5.getPageProperty(ctx_r5.PageProperty.Color))("compact", !0), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("modelValue", ctx_r5.getPageProperty(ctx_r5.PageProperty.Transparency))("options", ctx_r5.transparencyValueOptions);
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_i_3_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "i", 30), 2 & rf) {
                var section_r68 = core["\u0275\u0275nextContext"]().$implicit, ctx_r70 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction1"](2, theme_dialog_content_component_c0, section_r68.description))("pbi-tooltip", ctx_r70.getSectionHeaderTooltip(section_r68.description));
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_color_picker_input_5_Template(rf, ctx) {
            if (1 & rf) {
                var _r79 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "color-picker-input", 81), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r79);
                    var ctx_r78 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r78.onPropertyChanged(ctx_r78.FilterPaneContentSubSection.BackgroundColor, $event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var contentSubSection_r69 = core["\u0275\u0275nextContext"]().index, ctx_r71 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ariaDescribedId", "filterPaneLabel-" + contentSubSection_r69)("initialColor", ctx_r71.getFilterPaneProperty(ctx_r71.FilterPaneContentSubSection.BackgroundColor, ctx_r71.activeSubSectionIndex))("compact", !0), 
                core["\u0275\u0275attribute"]("aria-setsize", contentSubSection_r69 + 1);
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_slider_6_Template(rf, ctx) {
            if (1 & rf) {
                var _r82 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "slider", 82), core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r82);
                    var ctx_r81 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r81.onPropertyChanged(ctx_r81.FilterPaneContentSubSection.Transparency, $event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var contentSubSection_r69 = core["\u0275\u0275nextContext"]().index, ctx_r72 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("modelValue", ctx_r72.getFilterPaneProperty(ctx_r72.FilterPaneContentSubSection.Transparency, ctx_r72.activeSubSectionIndex))("options", ctx_r72.transparencyValueOptions), 
                core["\u0275\u0275attribute"]("aria-setsize", contentSubSection_r69 + 1)("aria-labelledby", "filterPaneLabel-" + contentSubSection_r69);
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_color_picker_input_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r85 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "color-picker-input", 83), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r85);
                    var ctx_r84 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r84.onPropertyChanged(ctx_r84.FilterPaneContentSubSection.FontAndIconColor, $event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var contentSubSection_r69 = core["\u0275\u0275nextContext"]().index, ctx_r73 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ariaDescribedId", "filterPaneLabel-" + contentSubSection_r69)("initialColor", ctx_r73.getFilterPaneProperty(ctx_r73.FilterPaneContentSubSection.FontAndIconColor, ctx_r73.activeSubSectionIndex))("compact", !0), 
                core["\u0275\u0275attribute"]("aria-posinset", 3);
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_num_up_down_8_Template(rf, ctx) {
            if (1 & rf) {
                var _r88 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "num-up-down", 84), core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r88);
                    var ctx_r87 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r87.onPropertyChanged(ctx_r87.FilterPaneContentSubSection.TitleFontSize, $event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var contentSubSection_r69 = core["\u0275\u0275nextContext"]().index, ctx_r74 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("modelValue", ctx_r74.getFilterPaneProperty(ctx_r74.FilterPaneContentSubSection.TitleFontSize, ctx_r74.activeSubSectionIndex))("options", ctx_r74.fontSizeValueOptions), 
                core["\u0275\u0275attribute"]("aria-setsize", contentSubSection_r69 + 1)("aria-labelledby", "filterPaneLabel-" + contentSubSection_r69);
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_num_up_down_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r91 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "num-up-down", 85), core["\u0275\u0275listener"]("modelValueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r91);
                    var ctx_r90 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r90.onPropertyChanged(ctx_r90.FilterPaneContentSubSection.HeaderFontSize, $event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var contentSubSection_r69 = core["\u0275\u0275nextContext"]().index, ctx_r75 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("modelValue", ctx_r75.getFilterPaneProperty(ctx_r75.FilterPaneContentSubSection.HeaderFontSize, ctx_r75.activeSubSectionIndex))("options", ctx_r75.fontSizeValueOptions), 
                core["\u0275\u0275attribute"]("aria-setsize", contentSubSection_r69 + 1)("aria-labelledby", "filterPaneLabel-" + contentSubSection_r69);
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_color_picker_input_10_Template(rf, ctx) {
            if (1 & rf) {
                var _r94 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "color-picker-input", 86), core["\u0275\u0275listener"]("colorChanged", function($event) {
                    core["\u0275\u0275restoreView"](_r94);
                    var ctx_r93 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r93.onPropertyChanged(ctx_r93.FilterPaneContentSubSection.CheckboxAndApplyColor, $event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var contentSubSection_r69 = core["\u0275\u0275nextContext"]().index, ctx_r76 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ariaDescribedId", "filterPaneLabel-" + contentSubSection_r69)("initialColor", ctx_r76.getFilterPaneProperty(ctx_r76.FilterPaneContentSubSection.CheckboxAndApplyColor, ctx_r76.activeSubSectionIndex))("compact", !0), 
                core["\u0275\u0275attribute"]("aria-setsize", contentSubSection_r69 + 1);
            }
        }
        function ThemeDialogContentComponent_div_8_div_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 73)(1, "label", 74), core["\u0275\u0275element"](2, "span", 53), 
            core["\u0275\u0275template"](3, ThemeDialogContentComponent_div_8_div_1_i_3_Template, 1, 4, "i", 29), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerStart"](4, 18), 
            core["\u0275\u0275template"](5, ThemeDialogContentComponent_div_8_div_1_color_picker_input_5_Template, 1, 4, "color-picker-input", 75), 
            core["\u0275\u0275template"](6, ThemeDialogContentComponent_div_8_div_1_slider_6_Template, 1, 4, "slider", 76), 
            core["\u0275\u0275template"](7, ThemeDialogContentComponent_div_8_div_1_color_picker_input_7_Template, 1, 4, "color-picker-input", 77), 
            core["\u0275\u0275template"](8, ThemeDialogContentComponent_div_8_div_1_num_up_down_8_Template, 1, 4, "num-up-down", 78), 
            core["\u0275\u0275template"](9, ThemeDialogContentComponent_div_8_div_1_num_up_down_9_Template, 1, 4, "num-up-down", 79), 
            core["\u0275\u0275template"](10, ThemeDialogContentComponent_div_8_div_1_color_picker_input_10_Template, 1, 4, "color-picker-input", 80), 
            core["\u0275\u0275elementContainerEnd"](), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var section_r68 = ctx.$implicit, contentSubSection_r69 = ctx.index, ctx_r67 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("spaced", 0 === contentSubSection_r69 && 0 === ctx_r67.activeSubSectionIndex), 
                core["\u0275\u0275propertyInterpolate1"]("id", "filterPaneLabel-", contentSubSection_r69, ""), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", section_r68.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", section_r68.description), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitch", contentSubSection_r69), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r67.FilterPaneContentSubSection.BackgroundColor), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r67.FilterPaneContentSubSection.Transparency), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r67.FilterPaneContentSubSection.FontAndIconColor), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r67.FilterPaneContentSubSection.TitleFontSize), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r67.FilterPaneContentSubSection.HeaderFontSize), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r67.FilterPaneContentSubSection.CheckboxAndApplyColor);
            }
        }
        function ThemeDialogContentComponent_div_8_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 71), core["\u0275\u0275template"](1, ThemeDialogContentComponent_div_8_div_1_Template, 11, 12, "div", 72), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r6.dialogViewModel.sections[ctx_r6.activeSectionIndex].subSections[ctx_r6.activeSubSectionIndex].subSections);
            }
        }
        var AdvancedColorsLocKey = function(AdvancedColorsLocKey) {
            return AdvancedColorsLocKey.foreground = "ThemeDialog_Colors_FirstLevelElements", 
            AdvancedColorsLocKey.foregroundNeutralSecondary = "ThemeDialog_Colors_SecondLevelElements", 
            AdvancedColorsLocKey.backgroundLight = "ThemeDialog_Colors_ThirdLevelElements", 
            AdvancedColorsLocKey.foregroundNeutralTertiary = "ThemeDialog_Colors_FourthLevelElements", 
            AdvancedColorsLocKey.background = "ThemeDialog_Colors_BackgroundElements", AdvancedColorsLocKey.backgroundNeutral = "ThemeDialog_Colors_SecondaryBackground", 
            AdvancedColorsLocKey;
        }({}), SentimentColorsLocKey = function(SentimentColorsLocKey) {
            return SentimentColorsLocKey.good = "ThemeDialog_Color_Positive", SentimentColorsLocKey.neutral = "ThemeDialog_Color_Neutral", 
            SentimentColorsLocKey.bad = "ThemeDialog_Color_Negative", SentimentColorsLocKey;
        }({}), DivergentColorsLocKey = function(DivergentColorsLocKey) {
            return DivergentColorsLocKey.minColor = "Min", DivergentColorsLocKey.midColor = "Middle", 
            DivergentColorsLocKey.maxColor = "Max", DivergentColorsLocKey;
        }({}), ColorCollectionKey = function(ColorCollectionKey) {
            return ColorCollectionKey.Advanced = "themeColors", ColorCollectionKey.ThemeColors = "dataColors", 
            ColorCollectionKey.SentimentColors = "sentimentColors", ColorCollectionKey.DivergentColors = "gradientColors", 
            ColorCollectionKey;
        }({}), ColorSubSection = function(ColorSubSection) {
            return ColorSubSection[ColorSubSection.NameAndColors = 0] = "NameAndColors", ColorSubSection[ColorSubSection.Advanced = 1] = "Advanced", 
            ColorSubSection;
        }({}), PageProperty = function(PageProperty) {
            return PageProperty.Color = "color", PageProperty.Transparency = "transparency", 
            PageProperty;
        }({}), FilterPaneContentSubSection = function(FilterPaneContentSubSection) {
            return FilterPaneContentSubSection[FilterPaneContentSubSection.BackgroundColor = 0] = "BackgroundColor", 
            FilterPaneContentSubSection[FilterPaneContentSubSection.Transparency = 1] = "Transparency", 
            FilterPaneContentSubSection[FilterPaneContentSubSection.FontAndIconColor = 2] = "FontAndIconColor", 
            FilterPaneContentSubSection[FilterPaneContentSubSection.TitleFontSize = 3] = "TitleFontSize", 
            FilterPaneContentSubSection[FilterPaneContentSubSection.HeaderFontSize = 4] = "HeaderFontSize", 
            FilterPaneContentSubSection[FilterPaneContentSubSection.CheckboxAndApplyColor = 5] = "CheckboxAndApplyColor", 
            FilterPaneContentSubSection;
        }({}), FilterPaneSubSection = function(FilterPaneSubSection) {
            return FilterPaneSubSection[FilterPaneSubSection.FilterPane = 0] = "FilterPane", 
            FilterPaneSubSection[FilterPaneSubSection.AvailableFilterCards = 1] = "AvailableFilterCards", 
            FilterPaneSubSection[FilterPaneSubSection.AppliedFilterCards = 2] = "AppliedFilterCards", 
            FilterPaneSubSection;
        }({}), FontProperty = function(FontProperty) {
            return FontProperty.FontFace = "fontFace", FontProperty.FontSize = "fontSize", FontProperty.Color = "color", 
            FontProperty;
        }({}), FontPropertyType = function(FontPropertyType) {
            return FontPropertyType.General = "label", FontPropertyType.Title = "title", FontPropertyType.CardAndKpi = "callout", 
            FontPropertyType.TabHeaders = "header", FontPropertyType;
        }({}), NameAndColorsContentSubSection = function(NameAndColorsContentSubSection) {
            return NameAndColorsContentSubSection[NameAndColorsContentSubSection.Name = 0] = "Name", 
            NameAndColorsContentSubSection[NameAndColorsContentSubSection.ThemeColors = 1] = "ThemeColors", 
            NameAndColorsContentSubSection[NameAndColorsContentSubSection.SentimentColors = 2] = "SentimentColors", 
            NameAndColorsContentSubSection[NameAndColorsContentSubSection.DivergentColors = 3] = "DivergentColors", 
            NameAndColorsContentSubSection;
        }({}), PageSubSection = function(PageSubSection) {
            return PageSubSection[PageSubSection.Wallpaper = 0] = "Wallpaper", PageSubSection[PageSubSection.PageBackground = 1] = "PageBackground", 
            PageSubSection;
        }({}), TextSubSection = function(TextSubSection) {
            return TextSubSection[TextSubSection.General = 0] = "General", TextSubSection[TextSubSection.Title = 1] = "Title", 
            TextSubSection[TextSubSection.CardAndKpi = 2] = "CardAndKpi", TextSubSection[TextSubSection.TabHeaders = 3] = "TabHeaders", 
            TextSubSection;
        }({}), ColorTransparencyKey = function(ColorTransparencyKey) {
            return ColorTransparencyKey.Color = "color", ColorTransparencyKey.Transparency = "transparency", 
            ColorTransparencyKey;
        }({}), VCBorder = function(VCBorder) {
            return VCBorder.Show = "show", VCBorder.Color = "color", VCBorder.Radius = "radius", 
            VCBorder;
        }({}), VCHeader = function(VCHeader) {
            return VCHeader.BackgroundColor = "background", VCHeader.BorderColor = "border", 
            VCHeader.Transparency = "transparency", VCHeader.IconColor = "foreground", VCHeader;
        }({}), VCTooltips = function(VCTooltips) {
            return VCTooltips.Label = "titleFontColor", VCTooltips.Value = "valueFontColor", 
            VCTooltips.Action = "actionFontColor", VCTooltips.Background = "background", VCTooltips.ThemedLabel = "themedTitleFontColor", 
            VCTooltips.ThemedValue = "themedValueFontColor", VCTooltips.ThemedBackground = "themedBackground", 
            VCTooltips;
        }({}), ThemeDialogSection = function(ThemeDialogSection) {
            return ThemeDialogSection[ThemeDialogSection.NameAndColors = 0] = "NameAndColors", 
            ThemeDialogSection[ThemeDialogSection.Text = 1] = "Text", ThemeDialogSection[ThemeDialogSection.Visuals = 2] = "Visuals", 
            ThemeDialogSection[ThemeDialogSection.Page = 3] = "Page", ThemeDialogSection[ThemeDialogSection.FilterPane = 4] = "FilterPane", 
            ThemeDialogSection;
        }({}), VisualsSubSection = function(VisualsSubSection) {
            return VisualsSubSection[VisualsSubSection.Background = 0] = "Background", VisualsSubSection[VisualsSubSection.Border = 1] = "Border", 
            VisualsSubSection[VisualsSubSection.Header = 2] = "Header", VisualsSubSection[VisualsSubSection.Tooltips = 3] = "Tooltips", 
            VisualsSubSection;
        }({}), ThemeDialogContentComponent = function() {
            function ThemeDialogContentComponent(localizationService) {
                this.localizationService = localizationService, this.fontSizeValueOptions = {
                    unitSymbol: "Slider_Weight",
                    minValue: StandaloneUtility1.Gj,
                    maxValue: StandaloneUtility1.PR
                }, this.transparencyValueOptions = {
                    unitSymbol: "Slider_Percent",
                    minValue: 0,
                    maxValue: 100
                }, this.radiusValueOptions = {
                    unitSymbol: "Numeric_Pixel",
                    minValue: 0,
                    maxValue: 30
                }, this.ColorSubSection = ColorSubSection, this.PageProperty = PageProperty, this.FilterPaneContentSubSection = FilterPaneContentSubSection, 
                this.FontProperty = FontProperty, this.VisualsSubSection = VisualsSubSection, this.ColorTransparencyKey = ColorTransparencyKey, 
                this.VCBorder = VCBorder, this.VCHeader = VCHeader, this.VCTooltips = VCTooltips, 
                this.NameAndColorsContentSubSection = NameAndColorsContentSubSection, this.TextSubSection = TextSubSection, 
                this.ThemeDialogSection = ThemeDialogSection, this.scrollbarsConfig = {
                    ignoreOverlay: !1,
                    ignoreMobile: !1
                }, this.initialize(), this.messageBannerModel = {
                    bannerType: 0,
                    iconName: "pbi-glyph-info",
                    message: this.localizationService.get("ThemeDialog_TextSection_UpdateThemeDescription"),
                    buttonText: this.localizationService.get("ThemeDialog_TextSection_UpdateTheme"),
                    isSeperateLink: !0
                };
            }
            return ThemeDialogContentComponent.prototype.ngOnInit = function() {
                if (!this.isTextSectionEnabled) {
                    var updateThemeText = this.localizationService.get("ThemeDialog_TextSection_UpdateTheme");
                    this.messageBannerModel = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.messageBannerModel), {
                        message: this.localizationService.format("ThemeDialog_TextSection_Upgradable", "<strong>" + updateThemeText + "</strong>"),
                        linkDisplayName: this.localizationService.get("LearnMore"),
                        link: "https://go.microsoft.com/fwlink/?linkid=2112156"
                    });
                }
                this.tooltipColorInformation = this.dataViewModel.useEnhancedTooltips ? [ {
                    tooltipType: VCTooltips.ThemedLabel,
                    labelId: "visualSectionColorPickerTitle-tooltip-label",
                    localizedKey: "Visual_Label_FontColor"
                }, {
                    tooltipType: VCTooltips.ThemedValue,
                    labelId: "visualSectionColorPickerTitle-tooltip-value",
                    localizedKey: "Visual_Value_FontColor"
                }, {
                    tooltipType: VCTooltips.Action,
                    labelId: "visualSectionColorPickerTitle-tooltip-action",
                    localizedKey: "Visual_Action_FontColor"
                }, {
                    tooltipType: VCTooltips.ThemedBackground,
                    labelId: "visualSectionColorPickerTitle-tooltip-background",
                    localizedKey: "Background_Color"
                } ] : [ {
                    tooltipType: VCTooltips.Label,
                    labelId: "visualSectionColorPickerTitle-tooltip-label",
                    localizedKey: "Visual_Label_FontColor"
                }, {
                    tooltipType: VCTooltips.Value,
                    labelId: "visualSectionColorPickerTitle-tooltip-value",
                    localizedKey: "Visual_Value_FontColor"
                }, {
                    tooltipType: VCTooltips.Background,
                    labelId: "visualSectionColorPickerTitle-tooltip-background",
                    localizedKey: "Background_Color"
                } ];
            }, ThemeDialogContentComponent.prototype.initialize = function() {
                this.currentCollectionColorDict = {}, this.currentAdvancedColorDict = {}, this.currentVCBackground = {}, 
                this.currentVCBorder = {}, this.currentVCHeader = {}, this.currentVCTooltips = {}, 
                this.currentFontPropertiesDict = {}, this.currentPageDict = {}, this.currentFilterPaneDict = {};
            }, ThemeDialogContentComponent.prototype.getAriaLabel = function(texts) {
                return texts.join(", ");
            }, ThemeDialogContentComponent.prototype.ngOnChanges = function(changes) {
                (changes.activeSubSectionIndex || changes.activeSectionIndex) && (this.sectionDescription = this.getCurrentSection().description, 
                this.sectionName = this.getCurrentSection().name, this.activeSectionIndex !== ThemeDialogSection.Text || this.isTextSectionEnabled || (this.isOldThemeTextClassesAccessed = !0));
            }, ThemeDialogContentComponent.prototype.getCurrentSection = function() {
                var primarySection = this.dialogViewModel.sections[this.activeSectionIndex];
                return primarySection.subSections ? primarySection.subSections[this.activeSubSectionIndex] : primarySection;
            }, Object.defineProperty(ThemeDialogContentComponent.prototype, "hasLearnMoreLink", {
                get: function() {
                    return this.isAdvancedColorsSubsection || this.isGeneralTextSubsection;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ThemeDialogContentComponent.prototype, "isAdvancedColorsSubsection", {
                get: function() {
                    return this.activeSectionIndex === ThemeDialogSection.NameAndColors && this.activeSubSectionIndex === ColorSubSection.Advanced;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ThemeDialogContentComponent.prototype, "isGeneralTextSubsection", {
                get: function() {
                    return this.activeSectionIndex === ThemeDialogSection.Text && this.activeSubSectionIndex === TextSubSection.General;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ThemeDialogContentComponent.prototype, "isTextSectionEnabled", {
                get: function() {
                    return !!this.dataViewModel.textClasses;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ThemeDialogContentComponent.prototype, "isMessageBannerVisible", {
                get: function() {
                    var _a;
                    return !this.updateBaseTheme && (this.activeSectionIndex === ThemeDialogSection.NameAndColors && (null === (_a = this.dataViewModel) || void 0 === _a ? void 0 : _a.baseThemeUpdateAvailable) || this.activeSectionIndex === ThemeDialogSection.Text && !this.isTextSectionEnabled);
                },
                enumerable: !1,
                configurable: !0
            }), ThemeDialogContentComponent.prototype.requestBaseThemeUpdate = function(doUpdate) {
                void 0 === doUpdate && (doUpdate = !0), this.updateBaseTheme = doUpdate;
            }, ThemeDialogContentComponent.prototype.updateBaseThemeForTextClasses = function() {
                this.requestBaseThemeUpdate(), this.dataViewModel.textClasses = (0, visualStyles.Oy)();
            }, Object.defineProperty(ThemeDialogContentComponent.prototype, "customThemeName", {
                get: function() {
                    return this.currentThemeName || this.dataViewModel.name;
                },
                set: function(themeName) {
                    this.currentThemeName = themeName;
                },
                enumerable: !1,
                configurable: !0
            }), ThemeDialogContentComponent.prototype.getFontPropertyType = function(key) {
                return FontPropertyType[_.keys(FontPropertyType)[key]];
            }, ThemeDialogContentComponent.prototype.getFontProperty = function(property) {
                return this.isTextSectionEnabled ? this.currentFontPropertiesDict[this.activeSubSectionIndex] && void 0 !== this.currentFontPropertiesDict[this.activeSubSectionIndex][property] ? this.currentFontPropertiesDict[this.activeSubSectionIndex][property] : this.extractValueFromViewModel(this.dataViewModel.textClasses[this.getFontPropertyType(this.activeSubSectionIndex)][property]) : ThemeDialogContentComponent.stubFontProperty[property];
            }, ThemeDialogContentComponent.prototype.localize = function(key) {
                return this.localizationService.get(key);
            }, ThemeDialogContentComponent.prototype.sortAdvancedColors = function(a, b) {
                return ThemeDialogContentComponent.advancedColorsOrder.indexOf(a.key) - ThemeDialogContentComponent.advancedColorsOrder.indexOf(b.key);
            }, ThemeDialogContentComponent.prototype.getAdvancedColorPickerName = function(key) {
                return AdvancedColorsLocKey[key];
            }, ThemeDialogContentComponent.prototype.getColorNumberString = function(section, key, index) {
                return section === NameAndColorsContentSubSection.ThemeColors ? this.localizationService.format("ThemeDialog_Color_Number", index + 1) : section === NameAndColorsContentSubSection.SentimentColors ? this.localizationService.get(SentimentColorsLocKey[key]) : section === NameAndColorsContentSubSection.DivergentColors ? this.localizationService.get(DivergentColorsLocKey[key]) : void 0;
            }, ThemeDialogContentComponent.prototype.getColorCollectionKey = function(section) {
                return ColorCollectionKey[_.keys(ColorCollectionKey)[section]];
            }, ThemeDialogContentComponent.prototype.getColorCollection = function(section) {
                return this.dataViewModel[this.getColorCollectionKey(section)];
            }, ThemeDialogContentComponent.prototype.getColorFromCollection = function(key, value, isAdvancedColor) {
                return void 0 === isAdvancedColor && (isAdvancedColor = !1), (isAdvancedColor ? this.currentAdvancedColorDict[key] : this.currentCollectionColorDict[key]) || value.value;
            }, ThemeDialogContentComponent.prototype.getVCValueFromCollection = function(property) {
                var _this = this;
                switch (debug.fF.assert(function() {
                    return _this.activeSectionIndex === ThemeDialogSection.Visuals;
                }, "this function should only be called when the visuals section is active"), this.activeSubSectionIndex) {
                  case VisualsSubSection.Background:
                    return this.extractValueFromViewModel(this.currentVCBackground[property]) || this.extractValueFromViewModel(this.dataViewModel.visualContainer.background[property]);

                  case VisualsSubSection.Border:
                    return this.extractValueFromViewModel(this.currentVCBorder[property]) || this.extractValueFromViewModel(this.dataViewModel.visualContainer.border[property]);

                  case VisualsSubSection.Header:
                    return this.extractValueFromViewModel(this.currentVCHeader[property]) || this.extractValueFromViewModel(this.dataViewModel.visualContainer.header[property]);

                  case VisualsSubSection.Tooltips:
                    return this.extractValueFromViewModel(this.currentVCTooltips[property]) || this.extractValueFromViewModel(this.dataViewModel.visualContainer.tooltips[property]);

                  default:
                    debug.fF.assertFail("unknown visualSubSection");
                }
            }, ThemeDialogContentComponent.prototype.onVCPropertyChanged = function(property, event) {
                var _this = this;
                switch (debug.fF.assert(function() {
                    return _this.activeSectionIndex === ThemeDialogSection.Visuals;
                }, "this function should only be called when the visuals section is active"), this.activeSubSectionIndex) {
                  case VisualsSubSection.Background:
                    switch (property) {
                      case ColorTransparencyKey.Color:
                        this.currentVCBackground[property] = {
                            solid: {
                                color: event
                            }
                        };
                        break;

                      case ColorTransparencyKey.Transparency:
                        this.currentVCBackground[property] = event;
                    }
                    break;

                  case VisualsSubSection.Border:
                    switch (property) {
                      case VCBorder.Show:
                        this.currentVCBorder[property] = event;
                        break;

                      case VCBorder.Color:
                        this.currentVCBorder[property] = {
                            solid: {
                                color: event
                            }
                        };
                        break;

                      case VCBorder.Radius:
                        this.currentVCBorder[property] = event;
                    }
                    break;

                  case VisualsSubSection.Header:
                    switch (property) {
                      case VCHeader.BackgroundColor:
                      case VCHeader.BorderColor:
                        this.currentVCHeader[property] = {
                            solid: {
                                color: event
                            }
                        };
                        break;

                      case VCHeader.Transparency:
                        this.currentVCHeader[property] = event;
                        break;

                      case VCHeader.IconColor:
                        this.currentVCHeader[property] = {
                            solid: {
                                color: event
                            }
                        };
                    }
                    break;

                  case VisualsSubSection.Tooltips:
                    switch (property) {
                      case VCTooltips.Label:
                      case VCTooltips.Value:
                      case VCTooltips.Action:
                      case VCTooltips.Background:
                      case VCTooltips.ThemedLabel:
                      case VCTooltips.ThemedValue:
                      case VCTooltips.ThemedBackground:
                        this.currentVCTooltips[property] = {
                            solid: {
                                color: event
                            }
                        };
                    }
                    break;

                  default:
                    debug.fF.assertFail("unimplemented onVCPropertyChanged for this visualSubSection");
                }
            }, ThemeDialogContentComponent.prototype.getSectionHeaderTooltip = function(description) {
                return {
                    tooltipArrowVerticalPosition: constants.r4.bottom,
                    tooltipDescription: this.localizationService.get(description),
                    tooltipShowOnFocus: !0
                };
            }, ThemeDialogContentComponent.prototype.extractValueFromViewModel = function(value) {
                return this.isIColorInfo(value) ? value.value : (0, fill.Gl)(value) ? (0, VisualsCommon_color.ci)(value.solid.color) : value;
            }, ThemeDialogContentComponent.prototype.extractValueFromCallback = function(value) {
                return this.isFontFamily(value) ? value.fontFamily : value;
            }, ThemeDialogContentComponent.prototype.isIColorInfo = function(property) {
                return property && void 0 !== property.value;
            }, ThemeDialogContentComponent.prototype.isFontFamily = function(property) {
                return property && void 0 !== property.fontFamily;
            }, ThemeDialogContentComponent.prototype.onPropertyChanged = function(property, event) {
                var dictionary;
                this.activeSectionIndex === ThemeDialogSection.Text ? dictionary = this.currentFontPropertiesDict : this.activeSectionIndex === ThemeDialogSection.FilterPane ? dictionary = this.currentFilterPaneDict : this.activeSectionIndex === ThemeDialogSection.Page ? dictionary = this.currentPageDict : debug.fF.assertFail("not a valid active section for onPropertyChanged"), 
                (dictionary[this.activeSubSectionIndex] = dictionary[this.activeSubSectionIndex] || {})[property] = this.extractValueFromCallback(event);
            }, ThemeDialogContentComponent.prototype.onCollectionColorChanged = function(key, color, isAdvancedColor) {
                isAdvancedColor ? this.currentAdvancedColorDict[key] = color : this.currentCollectionColorDict[key] = color;
            }, ThemeDialogContentComponent.prototype.isFilterPaneTypeStyle = function(filterPane) {
                return void 0 !== filterPane.titleSize;
            }, ThemeDialogContentComponent.prototype.convertRgbColorToHex = function(color) {
                return (0, VisualsCommon_color.A7)(color) ? color : (0, VisualsCommon_color.ci)(color);
            }, ThemeDialogContentComponent.prototype.getFilterPaneSectionValuesFromViewModel = function(filterPaneObj, property) {
                switch (property) {
                  case FilterPaneContentSubSection.BackgroundColor:
                    return this.convertRgbColorToHex(filterPaneObj.backgroundColor);

                  case FilterPaneContentSubSection.Transparency:
                    return this.isFilterPaneTypeStyle(filterPaneObj) ? filterPaneObj.transparency : (0, 
                    VisualsCommon_color.rJ)(filterPaneObj.backgroundColor);

                  case FilterPaneContentSubSection.FontAndIconColor:
                    return this.convertRgbColorToHex(filterPaneObj.foregroundColor);

                  case FilterPaneContentSubSection.TitleFontSize:
                    return this.isFilterPaneTypeStyle(filterPaneObj) ? filterPaneObj.titleSize : _.toNumber(filterPaneObj.fontSize);

                  case FilterPaneContentSubSection.HeaderFontSize:
                    if (this.isFilterPaneTypeStyle(filterPaneObj)) return filterPaneObj.headerSize;
                    debug.fF.assertFail("filterPaneObj not the right type");
                    break;

                  case FilterPaneContentSubSection.CheckboxAndApplyColor:
                    return this.extractValueFromViewModel(filterPaneObj.checkboxAndApplyColor);

                  default:
                    debug.fF.assertNever(property);
                }
            }, ThemeDialogContentComponent.prototype.getFilterPaneObj = function(sectionIndex) {
                var filterPaneObj;
                switch (sectionIndex) {
                  case FilterPaneSubSection.FilterPane:
                    filterPaneObj = this.dataViewModel.page.filterPane;
                    break;

                  case FilterPaneSubSection.AvailableFilterCards:
                    filterPaneObj = this.dataViewModel.page.filterCards.available;
                    break;

                  case FilterPaneSubSection.AppliedFilterCards:
                    filterPaneObj = this.dataViewModel.page.filterCards.applied;
                    break;

                  default:
                    debug.fF.assertNever(sectionIndex);
                }
                return filterPaneObj;
            }, ThemeDialogContentComponent.prototype.getFilterPaneProperty = function(property, sectionIndex) {
                var dictValue = this.currentFilterPaneDict[sectionIndex] && this.currentFilterPaneDict[sectionIndex][property], filterPaneObj = this.getFilterPaneObj(sectionIndex);
                return void 0 !== dictValue ? dictValue : this.getFilterPaneSectionValuesFromViewModel(filterPaneObj, property);
            }, ThemeDialogContentComponent.prototype.getPageValuesFromViewModel = function(property) {
                return this.activeSubSectionIndex === PageSubSection.Wallpaper ? this.dataViewModel.page.wallpaper[property] : this.activeSubSectionIndex === PageSubSection.PageBackground ? this.dataViewModel.page.background[property] : void 0;
            }, ThemeDialogContentComponent.prototype.getPageProperty = function(property) {
                var value = this.currentPageDict[this.activeSubSectionIndex] && this.currentPageDict[this.activeSubSectionIndex][property];
                return void 0 !== value ? value : this.getPageValuesFromViewModel(property);
            }, ThemeDialogContentComponent.prototype.revertToDefault = function() {
                switch (this.activeSectionIndex) {
                  case ThemeDialogSection.NameAndColors:
                    this.revertNameAndColorCollections();
                    break;

                  case ThemeDialogSection.Text:
                    this.revertTextProperties();
                    break;

                  case ThemeDialogSection.FilterPane:
                    this.revertFilterPaneProperties();
                    break;

                  case ThemeDialogSection.Page:
                    this.revertPageProperties();
                    break;

                  case ThemeDialogSection.Visuals:
                    this.revertVCProperties();
                    break;

                  default:
                    debug.fF.assertNever(this.activeSectionIndex);
                }
            }, ThemeDialogContentComponent.prototype.save = function() {
                var result = {};
                return this.saveNameAndColorCollections(result), this.saveAdvancedColorCollection(result), 
                this.saveFontProperties(result), this.savePageProperties(result), this.saveVCCollections(result), 
                this.saveFilterPaneProperties(result), this.isOldThemeTextClassesAccessed && (result.isOldThemeTextClassesAccessed = this.isOldThemeTextClassesAccessed), 
                this.updateBaseTheme && (result.updateBaseTheme = this.updateBaseTheme), result;
            }, ThemeDialogContentComponent.prototype.convertPropertyToViewModel = function(property, value, section) {
                return section === ThemeDialogSection.Text && property === FontProperty.Color && "string" == typeof value ? {
                    value
                } : value;
            }, ThemeDialogContentComponent.prototype.setHexColorAndTransparencyToRgba = function(partialResult, backgroundColor, transparency) {
                var opacity = (0, colorUtility.TD)(transparency), rgbColor = (0, VisualsCommon_color.WV)(backgroundColor);
                rgbColor.A = opacity;
                var rgbaString = (0, VisualsCommon_color.U8)(rgbColor);
                partialResult.backgroundColor = rgbaString;
            }, ThemeDialogContentComponent.prototype.saveFilterPaneAndCardsProperties = function(partialResult, dictObj, subSectionIndex) {
                var backgroundColor = dictObj[FilterPaneContentSubSection.BackgroundColor], transparency = dictObj[FilterPaneContentSubSection.Transparency];
                void 0 === backgroundColor && void 0 === transparency || (subSectionIndex === FilterPaneSubSection.FilterPane ? (backgroundColor && (partialResult.backgroundColor = backgroundColor), 
                void 0 !== transparency && (partialResult.transparency = transparency)) : (backgroundColor = backgroundColor || this.getFilterPaneProperty(FilterPaneContentSubSection.BackgroundColor, subSectionIndex), 
                void 0 === transparency && (transparency = this.getFilterPaneProperty(FilterPaneContentSubSection.Transparency, subSectionIndex)), 
                this.setHexColorAndTransparencyToRgba(partialResult, backgroundColor, transparency)));
                var checkboxAndApplyColor = dictObj[FilterPaneContentSubSection.CheckboxAndApplyColor];
                void 0 !== checkboxAndApplyColor && (subSectionIndex === FilterPaneSubSection.FilterPane ? checkboxAndApplyColor && (partialResult.checkboxAndApplyColor = checkboxAndApplyColor) : (checkboxAndApplyColor = checkboxAndApplyColor || this.getFilterPaneProperty(FilterPaneContentSubSection.CheckboxAndApplyColor, subSectionIndex), 
                this.setHexColorAndTransparencyToRgba(partialResult, checkboxAndApplyColor, 1)));
                var fontIconColor = dictObj[FilterPaneContentSubSection.FontAndIconColor];
                fontIconColor && (partialResult.foregroundColor = fontIconColor);
                var fontSize = dictObj[FilterPaneContentSubSection.TitleFontSize];
                void 0 !== fontSize && (subSectionIndex === FilterPaneSubSection.FilterPane ? partialResult.titleSize = fontSize : partialResult.fontSize = _.toString(fontSize));
                var headerSize = dictObj[FilterPaneContentSubSection.HeaderFontSize];
                headerSize && (subSectionIndex === FilterPaneSubSection.FilterPane ? partialResult.headerSize = headerSize : debug.fF.assertFail("not valid sub section index while saving filter pane"));
            }, ThemeDialogContentComponent.prototype.saveFilterPaneProperties = function(result) {
                for (var filterPaneSubsections = this.dialogViewModel.sections[ThemeDialogSection.FilterPane].subSections, index = 0; index < filterPaneSubsections.length; index++) {
                    var typedIndex = index, dictValue = this.currentFilterPaneDict[typedIndex];
                    switch (typedIndex) {
                      case FilterPaneSubSection.FilterPane:
                        if (dictValue) {
                            var filterPane = (page = result.page = result.page || {}).filterPane = page.filterPane || {};
                            this.saveFilterPaneAndCardsProperties(filterPane, dictValue, typedIndex);
                        }
                        break;

                      case FilterPaneSubSection.AvailableFilterCards:
                        if (dictValue) {
                            (page = result.page = result.page || {}).filterCards = page.filterCards || {};
                            var availableCards = page.filterCards.available = page.filterCards.available || {};
                            this.saveFilterPaneAndCardsProperties(availableCards, dictValue, typedIndex);
                        }
                        break;

                      case FilterPaneSubSection.AppliedFilterCards:
                        if (dictValue) {
                            var page;
                            (page = result.page = result.page || {}).filterCards = page.filterCards || {};
                            var appliedFilterCards = page.filterCards.applied = page.filterCards.applied || {};
                            this.saveFilterPaneAndCardsProperties(appliedFilterCards, dictValue, typedIndex);
                        }
                        break;

                      default:
                        debug.fF.assertNever(typedIndex);
                    }
                }
            }, ThemeDialogContentComponent.prototype.savePageProperties = function(result) {
                for (var pageSubsections = this.dialogViewModel.sections[ThemeDialogSection.Page].subSections, index = 0; index < pageSubsections.length; index++) {
                    var pagePropertyObj = this.currentPageDict[index];
                    if (pagePropertyObj) {
                        var pageObj = result.page = result.page || {}, pageSectionObj = void 0;
                        for (var key in index === PageSubSection.Wallpaper ? pageSectionObj = pageObj.wallpaper = pageObj.wallpaper || {} : index === PageSubSection.PageBackground && (pageSectionObj = pageObj.background = pageObj.background || {}), 
                        PageProperty) this.saveProperties(pageSectionObj, pagePropertyObj, ThemeDialogSection.Page, PageProperty[key]);
                    }
                }
            }, ThemeDialogContentComponent.prototype.saveProperties = function(partialResult, propertyObj, section, propertyKey) {
                var property = propertyObj[propertyKey];
                void 0 !== property && (partialResult[propertyKey] = this.convertPropertyToViewModel(propertyKey, property, section));
            }, ThemeDialogContentComponent.prototype.saveFontProperties = function(result) {
                for (var textSubsections = this.dialogViewModel.sections[ThemeDialogSection.Text].subSections, index = 0; index < textSubsections.length; index++) {
                    var fontPropertyObj = this.currentFontPropertiesDict[index];
                    if (fontPropertyObj) {
                        var textClasses = result.textClasses = result.textClasses || {}, propertyKey = this.getFontPropertyType(index);
                        for (var key in textClasses[propertyKey] = textClasses[propertyKey] || {}, FontProperty) this.saveProperties(textClasses[propertyKey], fontPropertyObj, ThemeDialogSection.Text, FontProperty[key]);
                    }
                }
            }, ThemeDialogContentComponent.prototype.saveColorCollections = function(result, keyAccessor, dictionary) {
                if (keyAccessor === ColorCollectionKey.ThemeColors) _.forEach(this.dataViewModel.dataColors, function(_value, index) {
                    dictionary[_.toString(index)] && (result.dataColors = result.dataColors || [], result.dataColors[index] = {
                        value: dictionary[_.toString(index)]
                    });
                }); else for (var _i = 0, _a = _.keys(this.dataViewModel[keyAccessor]); _i < _a.length; _i++) {
                    var colorKey = _a[_i];
                    dictionary[colorKey] && (result[keyAccessor] = result[keyAccessor] || {}, result[keyAccessor][colorKey] = {
                        value: dictionary[colorKey]
                    });
                }
            }, ThemeDialogContentComponent.prototype.saveNameAndColorCollections = function(result) {
                null != this.currentThemeName && (result.name = this.currentThemeName), _.isEmpty(this.currentCollectionColorDict) || (this.saveColorCollections(result, ColorCollectionKey.ThemeColors, this.currentCollectionColorDict), 
                this.saveColorCollections(result, ColorCollectionKey.SentimentColors, this.currentCollectionColorDict), 
                this.saveColorCollections(result, ColorCollectionKey.DivergentColors, this.currentCollectionColorDict));
            }, ThemeDialogContentComponent.prototype.saveAdvancedColorCollection = function(result) {
                _.isEmpty(this.currentAdvancedColorDict) || this.saveColorCollections(result, ColorCollectionKey.Advanced, this.currentAdvancedColorDict);
            }, ThemeDialogContentComponent.prototype.saveVCCollections = function(result) {
                _.isEmpty(this.currentVCBackground) || (result.visualContainer = result.visualContainer || {}, 
                result.visualContainer.background = this.currentVCBackground), _.isEmpty(this.currentVCBorder) || (result.visualContainer = result.visualContainer || {}, 
                result.visualContainer.border = this.currentVCBorder), _.isEmpty(this.currentVCHeader) || (result.visualContainer = result.visualContainer || {}, 
                result.visualContainer.header = this.currentVCHeader), _.isEmpty(this.currentVCTooltips) || (result.visualContainer = result.visualContainer || {}, 
                result.visualContainer.tooltips = this.currentVCTooltips);
            }, ThemeDialogContentComponent.prototype.revertNameAndColorCollections = function() {
                var colorSubSectionIndex = this.activeSubSectionIndex;
                switch (colorSubSectionIndex) {
                  case ColorSubSection.NameAndColors:
                    this.currentThemeName = void 0, this.currentCollectionColorDict = {};
                    break;

                  case ColorSubSection.Advanced:
                    this.currentAdvancedColorDict = {};
                    break;

                  default:
                    debug.fF.assertNever(colorSubSectionIndex);
                }
            }, ThemeDialogContentComponent.prototype.revertTextProperties = function() {
                delete this.currentFontPropertiesDict[this.activeSubSectionIndex];
            }, ThemeDialogContentComponent.prototype.revertFilterPaneProperties = function() {
                delete this.currentFilterPaneDict[this.activeSubSectionIndex];
            }, ThemeDialogContentComponent.prototype.revertPageProperties = function() {
                delete this.currentPageDict[this.activeSubSectionIndex];
            }, ThemeDialogContentComponent.prototype.revertVCProperties = function() {
                var subSectionIndex = this.activeSubSectionIndex;
                switch (subSectionIndex) {
                  case VisualsSubSection.Background:
                    this.currentVCBackground = {};
                    break;

                  case VisualsSubSection.Border:
                    this.currentVCBorder = {};
                    break;

                  case VisualsSubSection.Header:
                    this.currentVCHeader = {};
                    break;

                  case VisualsSubSection.Tooltips:
                    this.currentVCTooltips = {};
                    break;

                  default:
                    debug.fF.assertNever(subSectionIndex);
                }
            }, ThemeDialogContentComponent.advancedColorsOrder = [ "foreground", "foregroundNeutralSecondary", "backgroundLight", "foregroundNeutralTertiary", "background", "backgroundNeutral" ], 
            ThemeDialogContentComponent.stubFontProperty = {
                fontSize: "12",
                fontFace: fontUtils.bw.DIN.family,
                color: "#252423"
            }, ThemeDialogContentComponent.\u0275fac = function(t) {
                return new (t || ThemeDialogContentComponent)(core["\u0275\u0275directiveInject"](localization_service.o));
            }, ThemeDialogContentComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ThemeDialogContentComponent,
                selectors: [ [ "theme-dialog-content" ] ],
                inputs: {
                    activeSectionIndex: "activeSectionIndex",
                    activeSubSectionIndex: "activeSubSectionIndex",
                    dataViewModel: "dataViewModel",
                    dialogViewModel: "dialogViewModel"
                },
                features: [ core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 10,
                vars: 12,
                consts: [ [ "role", "heading", 1, "sectionTitle", 3, "localize" ], [ 3, "viewModel", "buttonClicked", 4, "ngIf" ], [ 3, "ngIf" ], [ 1, "contentScrollSection", 3, "pbiScrollbar", "ngSwitch" ], [ "class", "nameAndColorsSection", 4, "ngSwitchCase" ], [ 4, "ngSwitchCase" ], [ "role", "list", "class", "visualSection", 4, "ngSwitchCase" ], [ "class", "pageSection", "role", "list", 4, "ngSwitchCase" ], [ "role", "list", "class", "filterPaneSection", 4, "ngSwitchCase" ], [ "role", "button", "tabindex", "0", "localize", "Reset_To_Default", 1, "revert", "trimmedTextWithEllipsis", 3, "accessible-click" ], [ 3, "viewModel", "buttonClicked" ], [ "class", "sectionDescription", 3, "id", "localize", 4, "ngIf" ], [ "class", "sectionDescription", "localize-fragments", "", 3, "id", "localize", 4, "ngIf" ], [ 1, "sectionDescription", 3, "id", "localize" ], [ "localize-fragments", "", 1, "sectionDescription", 3, "id", "localize" ], [ "href", "https://go.microsoft.com/fwlink/?linkid=2110847", "target", "_blank", "localize", "Generic_LearnMore", "fragment-index", "0", 1, "pbi-external-link" ], [ "href", "https://go.microsoft.com/fwlink/?linkid=2111809", "target", "_blank", "localize", "Generic_LearnMore", "fragment-index", "0", 1, "pbi-external-link" ], [ 1, "nameAndColorsSection" ], [ 3, "ngSwitch" ], [ "role", "list", 4, "ngSwitchCase" ], [ 4, "ngFor", "ngForOf" ], [ "class", "nameSection", 4, "ngIf" ], [ "class", "title trimmedTextWithEllipsis subSectionTitle", 4, "ngIf" ], [ "role", "list", "class", "themeColorSection", 3, "ngClass", 4, "ngIf" ], [ 1, "nameSection" ], [ 1, "subSectionTitle", "spaced", 3, "localize" ], [ "name", "section.name", "type", "text", 1, "pbi-text-input", 3, "placeholder", "ngModel", "maxlength", "ngModelChange" ], [ 1, "title", "trimmedTextWithEllipsis", "subSectionTitle" ], [ "tabindex", "0", 3, "localize" ], [ "tabindex", "0", "class", "glyphicon pbi-glyph-info icon", 3, "localizeAttr", "pbi-tooltip", 4, "ngIf" ], [ "tabindex", "0", 1, "glyphicon", "pbi-glyph-info", "icon", 3, "localizeAttr", "pbi-tooltip" ], [ "role", "list", 1, "themeColorSection", 3, "ngClass" ], [ "class", "colorPickerComponent", 4, "ngFor", "ngForOf" ], [ 1, "colorPickerComponent" ], [ 3, "id" ], [ "tabindex", "-1", "role", "listitem", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged" ], [ "role", "list" ], [ 3, "id", "localize" ], [ "role", "list", 1, "textSection" ], [ "id", "textSectionFontPickerTitle", "localize", "Visual_FontFamily", 1, "title", "trimmedTextWithEllipsis", 3, "ngClass" ], [ "role", "listitem", "attr.aria-setsize", "3", "attr.aria-posinset", "1", "attr.aria-labelledby", "textSectionFontPickerTitle", 1, "modern", 3, "ngClass", "fontFamily", "onFontFamilyChange" ], [ "id", "textSectionNumUpDownTitle", 1, "title", "trimmedTextWithEllipsis", 3, "ngClass" ], [ "tabindex", "0", "localize", "ThemeDialog_SubSection_FontSize" ], [ "role", "listitem", "attr.aria-setsize", "3", "attr.aria-posinset", "2", "attr.aria-labelledby", "textSectionNumUpDownTitle", 3, "isDisabled", "modelValue", "options", "modelValueChange" ], [ "id", "textSectionColorPickerTitle", "localize", "Visual_FontColor", 1, "title", "trimmedTextWithEllipsis", 3, "ngClass" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "3", "attr.aria-posinset", "3", 3, "isDisabled", "ariaDescribedId", "initialColor", "compact", "colorChanged" ], [ "role", "list", 1, "visualSection" ], [ "id", "visualSectionColorPickerTitle-background", "localize", "Generic_Color", 1, "title", "trimmedTextWithEllipsis", "spaced" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "2", "attr.aria-posinset", "1", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged" ], [ "id", "visualSectionSliderTitle-background", "localize", "Transparency", 1, "title", "trimmedTextWithEllipsis" ], [ "role", "listitem", "attr.aria-setsize", "2", "attr.aria-posinset", "2", "attr.aria-labelledby", "visualSectionSliderTitle-background", 3, "modelValue", "options", "modelValueChange" ], [ "id", "visualSectionSliderTitle-border", "localize", "Visual_Border", 1, "title", "trimmedTextWithEllipsis", "spaced" ], [ "role", "listitem", "attr.aria-setsize", "3", "attr.aria-posinset", "1", "attr.aria-labelledby", "visualSectionSliderTitle-border", 3, "checked", "change" ], [ 3, "localize" ], [ "id", "visualSectionColorPickerTitle-border", "localize", "Generic_Color", 1, "title", "trimmedTextWithEllipsis", 3, "ngClass" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "3", "attr.aria-posinset", "2", 3, "ariaDescribedId", "initialColor", "isDisabled", "compact", "colorChanged" ], [ "id", "visualSectionNumUpDownnTitle-border", "localize", "Visual_Radius", 1, "title", "trimmedTextWithEllipsis", 3, "ngClass" ], [ "role", "listitem", "attr.aria-setsize", "3", "attr.aria-posinset", "3", "attr.aria-labelledby", "visualSectionNumUpDownnTitle-border", 3, "isDisabled", "modelValue", "options", "modelValueChange" ], [ "id", "visualSectionColorPickerTitle-header-background", "localize", "Background_Color", 1, "title", "trimmedTextWithEllipsis" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "4", "attr.aria-posinset", "1", 3, "initialColor", "ariaDescribedId", "compact", "colorChanged" ], [ "id", "visualSectionColorPickerTitle-header-border", "localize", "PagePropertyPane_FilterCards_BorderColor", 1, "title", "trimmedTextWithEllipsis" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "4", "attr.aria-posinset", "2", 3, "initialColor", "ariaDescribedId", "compact", "colorChanged" ], [ "id", "visualSectionSliderTitle-header", "localize", "Transparency", 1, "title", "trimmedTextWithEllipsis" ], [ "role", "listitem", "attr.aria-setsize", "4", "attr.aria-posinset", "3", "attr.aria-labelledby", "visualSectionSliderTitle-header", 3, "modelValue", "options", "modelValueChange" ], [ "id", "visualSectionColorPickerTitle-header-icon", "localize", "VisualHeader_Foreground_Color", 1, "title", "trimmedTextWithEllipsis" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "4", "attr.aria-posinset", "4", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged" ], [ 1, "title", "trimmedTextWithEllipsis", 3, "id", "localize" ], [ "role", "list", 1, "pageSection" ], [ "id", "pageSectionColorPickerTitle", "localize", "Generic_Color", 1, "title", "trimmedTextWithEllipsis" ], [ "id", "pageSectionSliderTitle", "localize", "Transparency", 1, "title", "trimmedTextWithEllipsis" ], [ "role", "listitem", "attr.aria-setsize", "2", "attr.aria-posinset", "2", "attr.aria-labelledby", "'pageSectionSliderTitle'", 3, "modelValue", "options", "modelValueChange" ], [ "role", "list", 1, "filterPaneSection" ], [ "class", "subComponent", 4, "ngFor", "ngForOf" ], [ 1, "subComponent" ], [ 1, "title", "trimmedTextWithEllipsis", 3, "id" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-posinset", "1", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged", 4, "ngSwitchCase" ], [ "role", "listitem", "attr.aria-posinset", "2", 3, "modelValue", "options", "modelValueChange", 4, "ngSwitchCase" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "contentSubSection+1", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged", 4, "ngSwitchCase" ], [ "role", "listitem", "attr.aria-posinset", "4", 3, "modelValue", "options", "modelValueChange", 4, "ngSwitchCase" ], [ "role", "listitem", "attr.aria-posinset", "5", 3, "modelValue", "options", "modelValueChange", 4, "ngSwitchCase" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-posinset", "6", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged", 4, "ngSwitchCase" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-posinset", "1", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged" ], [ "role", "listitem", "attr.aria-posinset", "2", 3, "modelValue", "options", "modelValueChange" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-setsize", "contentSubSection+1", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged" ], [ "role", "listitem", "attr.aria-posinset", "4", 3, "modelValue", "options", "modelValueChange" ], [ "role", "listitem", "attr.aria-posinset", "5", 3, "modelValue", "options", "modelValueChange" ], [ "tabindex", "-1", "role", "listitem", "attr.aria-posinset", "6", 3, "ariaDescribedId", "initialColor", "compact", "colorChanged" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275element"](0, "div", 0), core["\u0275\u0275template"](1, ThemeDialogContentComponent_message_banner_1_Template, 1, 1, "message-banner", 1), 
                    core["\u0275\u0275template"](2, ThemeDialogContentComponent_ng_template_2_Template, 3, 3, "ng-template", 2), 
                    core["\u0275\u0275elementStart"](3, "div", 3), core["\u0275\u0275template"](4, ThemeDialogContentComponent_div_4_Template, 4, 3, "div", 4), 
                    core["\u0275\u0275template"](5, ThemeDialogContentComponent_ng_container_5_Template, 10, 21, "ng-container", 5), 
                    core["\u0275\u0275template"](6, ThemeDialogContentComponent_div_6_Template, 6, 5, "div", 6), 
                    core["\u0275\u0275template"](7, ThemeDialogContentComponent_div_7_Template, 5, 5, "div", 7), 
                    core["\u0275\u0275template"](8, ThemeDialogContentComponent_div_8_Template, 2, 1, "div", 8), 
                    core["\u0275\u0275elementStart"](9, "div", 9), core["\u0275\u0275listener"]("accessible-click", function() {
                        return ctx.revertToDefault();
                    }), core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275attributeInterpolate2"]("aria-labelledby", "sectionDescription-", ctx.activeSectionIndex, "-", ctx.activeSubSectionIndex, ""), 
                    core["\u0275\u0275property"]("localize", ctx.sectionName), core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("ngIf", ctx.isMessageBannerVisible), core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("ngIf", ctx.sectionDescription), core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("pbiScrollbar", ctx.scrollbarsConfig)("ngSwitch", ctx.activeSectionIndex), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx.ThemeDialogSection.NameAndColors), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx.ThemeDialogSection.Text), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx.ThemeDialogSection.Visuals), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx.ThemeDialogSection.Page), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx.ThemeDialogSection.FilterPane));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, common.NgSwitch, common.NgSwitchCase, font_picker_component.w, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.nD, fesm2022_forms.On, localize_directive.X, localize_attr_directive.b, accessible_click_directive.t, ColorPickerInputComponent, num_up_down_component.x4, pbi_scrollbar_directive.r, pbi_toggle_button_component.d, slider_component.P, tooltip_directive.i, message_banner_component.A, common.KeyValuePipe ],
                styles: [ '[_nghost-%COMP%]{margin:18px 4px 0 24px;overflow:hidden;display:flex;flex-direction:column;-webkit-user-select:none;-ms-user-select:none;user-select:none;--themeDialogForeground: var(--fluent-theme-neutral-primary-color, #323130);--themeDialogForeground2: var(--fluent-theme-neutral-secondary-color, #605E5C);--themeDialogForegroundDisabled: var(--fluent-theme-neutral-tertiary-color, #A19F9D);--themeDialogLink: var(--fluent-theme-link-color, #0078D4)}[data-legacy-theming=false]   [_nghost-%COMP%]{--themeDialogForeground: var(--colorNeutralForeground1);--themeDialogForeground2: var(--colorNeutralForeground2);--themeDialogForegroundDisabled: var(--colorNeutralForegroundDisabled);--themeDialogLink: var(--colorBrandForegroundLink)}.sectionTitle[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--vlg-font-size, 18px);font-weight:var(--font-weight-semi-bold, 600);color:var(--themeDialogForeground);padding-bottom:18px}message-banner[_ngcontent-%COMP%]{flex-shrink:0;padding-right:32px}.sectionDescription[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);color:var(--themeDialogForeground2);padding-right:32px}.contentScrollSection[_ngcontent-%COMP%]{color:var(--themeDialogForeground)}.contentScrollSection[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);padding:16px 12px 5px 0;display:flex;align-items:center}.contentScrollSection[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]   i.glyphicon[_ngcontent-%COMP%]{font-size:inherit;padding-left:8px}.contentScrollSection[_ngcontent-%COMP%]   label.subSectionTitle[_ngcontent-%COMP%]{padding-top:24px;padding-bottom:0;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--lg-font-size, 16px);font-weight:var(--font-weight-semi-bold, 600)}.contentScrollSection[_ngcontent-%COMP%]   label.subSectionTitle.spaced[_ngcontent-%COMP%]{padding-bottom:5px}.contentScrollSection[_ngcontent-%COMP%]   label.spaced[_ngcontent-%COMP%]{padding-top:0}.contentScrollSection[_ngcontent-%COMP%]   .revert[_ngcontent-%COMP%]{display:inline-block;margin:24px 0 40px;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);color:var(--themeDialogLink);cursor:pointer}html[data-focus-source=key][_ngcontent-%COMP%]   .contentScrollSection[_ngcontent-%COMP%]   .revert[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.colorPickerComponent[_ngcontent-%COMP%]{display:flex;flex-direction:column;padding-right:24px}num-up-down[_ngcontent-%COMP%]{width:72px}.nameAndColorsSection[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{flex-grow:1;flex-shrink:0}.nameAndColorsSection[_ngcontent-%COMP%]   .nameSection[_ngcontent-%COMP%]{display:flex;flex-direction:column}.nameAndColorsSection[_ngcontent-%COMP%]   .nameSection[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%]{margin-right:48px}.nameAndColorsSection[_ngcontent-%COMP%]   .themeColorSection[_ngcontent-%COMP%]{display:grid;grid-template-columns:120px 120px 120px}.textSection[_ngcontent-%COMP%]   font-picker[_ngcontent-%COMP%]{width:170px}.textSection[_ngcontent-%COMP%]   font-picker.disabled[_ngcontent-%COMP%]{pointer-events:none;opacity:.3}.textSection[_ngcontent-%COMP%], .visualSection[_ngcontent-%COMP%], .pageSection[_ngcontent-%COMP%], .filterPaneSection[_ngcontent-%COMP%] > .subComponent[_ngcontent-%COMP%]{display:flex;flex-direction:column}.textSection[_ngcontent-%COMP%]   label.title.disabled[_ngcontent-%COMP%], .visualSection[_ngcontent-%COMP%]   label.title.disabled[_ngcontent-%COMP%], .pageSection[_ngcontent-%COMP%]   label.title.disabled[_ngcontent-%COMP%], .filterPaneSection[_ngcontent-%COMP%] > .subComponent[_ngcontent-%COMP%]   label.title.disabled[_ngcontent-%COMP%]{color:var(--themeDialogForegroundDisabled)}' ],
                changeDetection: 0
            }), ThemeDialogContentComponent;
        }(), localize_tooltip_directive = __webpack_require__(50057), theme_dialog_component_c0 = [ "themeDialogContent" ], theme_dialog_component_c1 = function() {
            return {
                "aria-label": "Close"
            };
        }, ThemeDialogComponent = function() {
            function ThemeDialogComponent(data, matDialogRef) {
                this.matDialogRef = matDialogRef, this.activeSectionIndex = ThemeDialogSection.NameAndColors, 
                this.activeSubSectionIndex = ColorSubSection.NameAndColors, this.dataViewModel = data.dataViewModel, 
                this.dialogViewModel = data.dialogViewModel, this.sections = this.dialogViewModel.sections, 
                this.title = this.dialogViewModel.title;
            }
            return ThemeDialogComponent.prototype.close = function() {
                this.matDialogRef.close();
            }, ThemeDialogComponent.prototype.updateIndexes = function(event) {
                this.activeSectionIndex = event.section, this.activeSubSectionIndex = event.subSection;
            }, ThemeDialogComponent.prototype.onSaveButtonClicked = function() {
                var result = this.themeDialogContent.save();
                this.matDialogRef.close(result);
            }, ThemeDialogComponent.prototype.onCancelButtonClicked = function() {
                this.close();
            }, ThemeDialogComponent.\u0275fac = function(t) {
                return new (t || ThemeDialogComponent)(core["\u0275\u0275directiveInject"](dialog.WI), core["\u0275\u0275directiveInject"](dialog.so));
            }, ThemeDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ThemeDialogComponent,
                selectors: [ [ "theme-dialog" ] ],
                viewQuery: function(rf, ctx) {
                    var _t;
                    1 & rf && core["\u0275\u0275viewQuery"](theme_dialog_component_c0, 5), 2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.themeDialogContent = _t.first);
                },
                decls: 7,
                vars: 10,
                consts: [ [ "role", "application", 1, "themeDialogContainer", "themeableElement" ], [ "mat-dialog-title", "", 1, "dragHandle" ], [ "role", "button", "tabindex", "0", "localizeTooltip", "Close", 1, "closeIcon", "glyphicon", "pbi-glyph-close", "glyph-mini", 3, "localizeAttr", "click" ], [ 3, "saveButtonLocStr", "cancelButtonLocStr", "sections", "title", "indexesChange", "saveChange", "cancelChange" ], [ 1, "dialogContent", 3, "activeSectionIndex", "activeSubSectionIndex", "dataViewModel", "dialogViewModel" ], [ "themeDialogContent", "" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275element"](1, "div", 1), 
                    core["\u0275\u0275elementStart"](2, "div", 2), core["\u0275\u0275listener"]("click", function() {
                        return ctx.close();
                    }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "mat-dialog-content")(4, "navigatable-dialog", 3), 
                    core["\u0275\u0275listener"]("indexesChange", function($event) {
                        return ctx.updateIndexes($event);
                    })("saveChange", function() {
                        return ctx.onSaveButtonClicked();
                    })("cancelChange", function() {
                        return ctx.onCancelButtonClicked();
                    }), core["\u0275\u0275element"](5, "theme-dialog-content", 4, 5), core["\u0275\u0275elementEnd"]()()()), 
                    2 & rf && (core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](9, theme_dialog_component_c1)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("saveButtonLocStr", ctx.dialogViewModel.commit)("cancelButtonLocStr", ctx.dialogViewModel.cancel)("sections", ctx.sections)("title", ctx.title), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("activeSectionIndex", ctx.activeSectionIndex)("activeSubSectionIndex", ctx.activeSubSectionIndex)("dataViewModel", ctx.dataViewModel)("dialogViewModel", ctx.dialogViewModel));
                },
                dependencies: [ NavigatableDialogComponent, dialog.uh, dialog.xY, localize_attr_directive.b, localize_tooltip_directive.r, ThemeDialogContentComponent ],
                styles: [ ".themeDialogContainer[_ngcontent-%COMP%]{width:750px;height:650px}.themeDialogContainer[_ngcontent-%COMP%]   .dragHandle[_ngcontent-%COMP%]{height:24px;width:100%;position:absolute}.themeDialogContainer[_ngcontent-%COMP%]   .closeIcon[_ngcontent-%COMP%]{color:var(--colorNeutralForeground2)}html[data-focus-source=key][_ngcontent-%COMP%]   .themeDialogContainer[_ngcontent-%COMP%]   .closeIcon[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.themeDialogContainer[_ngcontent-%COMP%]   .closeIcon.pbi-glyph-close[_ngcontent-%COMP%]{position:absolute;top:24px;right:16px;padding:0;margin:0;border:0;background-color:transparent}" ],
                changeDetection: 0
            }), ThemeDialogComponent;
        }(), legacy_form_field = __webpack_require__(87650), UILibrary_module = __webpack_require__(94785), dialogs_module = __webpack_require__(76966), font_picker_module = __webpack_require__(45925), ThemeDialogModule = function() {
            function ThemeDialogModule() {}
            return ThemeDialogModule.\u0275fac = function(t) {
                return new (t || ThemeDialogModule);
            }, ThemeDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ThemeDialogModule
            }), ThemeDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, DialogNavigationModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: "ThemeDialog",
                    componentType: ThemeDialogComponent
                } ]), font_picker_module.e, fesm2022_forms.u5, localization_module.v, legacy_form_field.wp, a11y_module._, UILibrary_module.g.forRoot() ]
            }), ThemeDialogModule;
        }();
    },
    91146: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            w: function() {
                return FontPickerComponent;
            }
        });
        var tslib_es6 = __webpack_require__(81337), core = __webpack_require__(50423), fesm2022_forms = __webpack_require__(17174), debug = __webpack_require__(62458);
        function getCustomFontPickerInfo(newFontFamily) {
            debug.fF.assert(function() {
                return !_.isEmpty(newFontFamily);
            }, "Font family should exist");
            var match = newFontFamily.match(/^(?:\s)*('|")?((?:\w|\s|-|\\.)+)(?:\1(?=,|$))/);
            return match && match[2] || newFontFamily;
        }
        var rx_form_control_component = __webpack_require__(72065), of = __webpack_require__(11547), combineLatest = __webpack_require__(59017), map = __webpack_require__(14172), takeUntil = __webpack_require__(83317), distinctUntilChanged = __webpack_require__(77526), font_service = __webpack_require__(49083), common = __webpack_require__(77476), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529);
        function FontPickerComponent_ng_container_0_pbi_dropdown_1_pbi_dropdown_item_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 5)(1, "p", 3), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var item_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r5), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngStyle", item_r5.style), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate"](item_r5.displayName);
            }
        }
        var _c0 = function(a0) {
            return {
                showFullContent: a0
            };
        };
        function FontPickerComponent_ng_container_0_pbi_dropdown_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-dropdown", 2), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r6.setFontFamily($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275elementStart"](2, "pbi-dropdown-trigger")(3, "p", 3), 
                core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](5, FontPickerComponent_ng_container_0_pbi_dropdown_1_pbi_dropdown_item_5_Template, 3, 3, "pbi-dropdown-item", 4), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var selectedItem_r3 = ctx.ngIf, fontPickerItems_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("aria-label", ctx_r2.ariaLabel)("aria-labelledby", ctx_r2.ariaLabelledby)("aria-describedby", ctx_r2.ariaDescribedby)("compact", ctx_r2.compact)("size", ctx_r2.size)("maxHeight", ctx_r2.maxHeight)("options", core["\u0275\u0275pureFunction1"](14, _c0, ctx_r2.showFullContent))("value", selectedItem_r3)("isDisabled", core["\u0275\u0275pipeBind1"](1, 12, ctx_r2.isDisabled$)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngStyle", selectedItem_r3.style), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](selectedItem_r3.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", fontPickerItems_r1);
            }
        }
        function FontPickerComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FontPickerComponent_ng_container_0_pbi_dropdown_1_Template, 6, 16, "pbi-dropdown", 1), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 1, ctx_r0.selectedItem$));
            }
        }
        var FontPickerComponent = function(_super) {
            function FontPickerComponent(fontService) {
                var _this = _super.call(this) || this;
                return _this.fontService = fontService, _this.onFontFamilyChange = new core.EventEmitter, 
                _this.maxHeight = 324, _this;
            }
            return (0, tslib_es6.__extends)(FontPickerComponent, _super), FontPickerComponent.prototype.ngOnInit = function() {
                this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$), 
                this.populateFontPickerItems();
            }, FontPickerComponent.prototype.populateFontPickerItems = function() {
                var _this = this, fontFamily$ = this.mergePropertyInputsAndFormControl(this.changes$("fontFamily"), this.value$, "fontFamily", this.onDestroy$).pipe((0, 
                map.U)(function(fontFamily) {
                    return _this.normalizeFontFamily(fontFamily);
                }), (0, takeUntil.R)(this.onDestroy$), (0, distinctUntilChanged.x)());
                this.fontPickerItems$ = (0, of.of)(this.fontService.getAllFonts()).pipe((0, map.U)(function(fonts) {
                    return fonts.map(function(font) {
                        return _this.getFontPickerItem(font);
                    });
                })), this.selectedItem$ = (0, combineLatest.aj)([ fontFamily$, this.fontPickerItems$ ]).pipe((0, 
                map.U)(function(_a) {
                    var _b, fontFamily = _a[0];
                    return null !== (_b = _.find(_a[1], function(font) {
                        return font.family === fontFamily;
                    })) && void 0 !== _b ? _b : _this.getCustomFontPickerInfo(fontFamily);
                }));
            }, FontPickerComponent.prototype.normalizeFontFamily = function(fontFamily) {
                return (null != fontFamily ? fontFamily : "").split(", ").map(function(font) {
                    return font.indexOf(" ") > 0 && !font.startsWith("'") ? "'".concat(font, "'") : font;
                }).join(", ");
            }, FontPickerComponent.prototype.getFontPickerItem = function(font) {
                return {
                    displayName: font.displayName,
                    family: font.family,
                    style: {
                        fontFamily: font.suppressStyle ? void 0 : font.family
                    }
                };
            }, FontPickerComponent.prototype.setFontFamily = function(selectedItem) {
                var newFontFamily = selectedItem.family;
                this.onFontFamilyChange.emit(newFontFamily), this.onValueChange(newFontFamily), 
                this.onTouched();
            }, FontPickerComponent.prototype.getCustomFontPickerInfo = function(newFontFamily) {
                return {
                    displayName: newFontFamily ? getCustomFontPickerInfo(newFontFamily) : "",
                    family: newFontFamily,
                    style: {
                        fontFamily: newFontFamily
                    }
                };
            }, FontPickerComponent.\u0275fac = function(t) {
                return new (t || FontPickerComponent)(core["\u0275\u0275directiveInject"](font_service.f));
            }, FontPickerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FontPickerComponent,
                selectors: [ [ "font-picker" ] ],
                inputs: {
                    fontFamily: "fontFamily",
                    ariaLabel: "ariaLabel",
                    ariaDescribedby: "ariaDescribedby",
                    ariaLabelledby: "ariaLabelledby",
                    compact: "compact",
                    isDisabled: "isDisabled",
                    showFullContent: "showFullContent",
                    size: "size"
                },
                outputs: {
                    onFontFamilyChange: "onFontFamilyChange"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ {
                    provide: fesm2022_forms.JU,
                    useExisting: (0, core.forwardRef)(function() {
                        return FontPickerComponent;
                    }),
                    multi: !0
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ 4, "ngIf" ], [ 3, "aria-label", "aria-labelledby", "aria-describedby", "compact", "size", "maxHeight", "options", "value", "isDisabled", "valueChange", 4, "ngIf" ], [ 3, "aria-label", "aria-labelledby", "aria-describedby", "compact", "size", "maxHeight", "options", "value", "isDisabled", "valueChange" ], [ 3, "ngStyle" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, FontPickerComponent_ng_container_0_Template, 3, 3, "ng-container", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.fontPickerItems$));
                },
                dependencies: [ common.NgForOf, common.NgIf, common.NgStyle, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, common.AsyncPipe ],
                styles: [ "pbi-dropdown[_ngcontent-%COMP%]{width:100%}pbi-dropdown-trigger[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}pbi-dropdown-item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:auto}" ],
                changeDetection: 0
            }), FontPickerComponent;
        }(rx_form_control_component.N);
    },
    45925: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return FontPickerModule;
            }
        });
        var _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6015), _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17174), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), FontPickerModule = function() {
            function FontPickerModule() {}
            return FontPickerModule.\u0275fac = function(t) {
                return new (t || FontPickerModule);
            }, FontPickerModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: FontPickerModule
            }), FontPickerModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.u5, _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__.C, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.UX ]
            }), FontPickerModule;
        }();
    },
    25929: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            P: function() {
                return SliderComponent;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(17174), _powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(72065), rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59017), rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63057), rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59973), rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14172), _powerbi_A11y__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(64647), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(65181), _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(77476), _angular_material_legacy_slider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(31496), _pbi_spin_button_pbi_spin_button_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(78173), _c0 = function(a0) {
            return {
                modernStyles: a0
            };
        }, _c1 = function(a0) {
            return {
                disabled: a0
            };
        }, SliderComponent = function(_super) {
            function SliderComponent(highContrastCssGenerationService, localizationService) {
                var _this = _super.call(this) || this;
                return _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.localizationService = localizationService, _this.inputFocusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this.modelValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SliderComponent, _super), 
            SliderComponent.prototype.ngOnInit = function() {
                var _a, _this = this;
                this.onModelValueChanged = this.createEventAdapter(), this.onModelValueChanged.$.subscribe(function(value) {
                    _this.modelValueChange.emit(value), _this.onValueChange(value), _this.onTouched();
                });
                var options$ = this.changes$("options");
                this.onSliderSliding = this.createEventAdapter(), this.modelValue$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.aj)([ (0, 
                rxjs__WEBPACK_IMPORTED_MODULE_3__.T)(this.mergePropertyInputsAndFormControl(this.changes$("modelValue"), this.value$, "modelValue", this.onDestroy$), this.onSliderSliding.$), options$ ]).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.h)(function(_a) {
                    var modelValue = _a[0], options = _a[1], minValue = options.minValue, maxValue = options.maxValue, isMinLimitValid = !0, isMaxLimitValid = !0;
                    return _.isFinite(minValue) && _.isFinite(modelValue) && (isMinLimitValid = modelValue >= minValue), 
                    _.isFinite(maxValue) && _.isFinite(modelValue) && (isMaxLimitValid = modelValue <= maxValue), 
                    isMinLimitValid && isMaxLimitValid;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.U)(function(_a) {
                    return _a[0];
                })), this.isDisabled$ = this.mergePropertyInputsAndFormControl(this.changes$("isDisabled"), this.disabled$, "isDisabled", this.onDestroy$), 
                this.useModernStyles = null === (_a = this.useModernStyles) || void 0 === _a || _a, 
                this.sliderUnits$ = options$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.U)(function(options) {
                    return (null == options ? void 0 : options.unitSymbol) ? _this.localizationService.get(options.unitSymbol) : "";
                })), this.initializeHighContrastRules();
            }, SliderComponent.prototype.displayValue = function() {
                return "".concat(this.modelValue$, " ").concat(this.sliderUnits$);
            }, SliderComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background", "{ background-color: @disabledTextColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-fill", "{ background-color: @selectedBackgroundColor !important; }"), 
                this.highContrastCssGenerationService.addRule(".unit-slider .sliderWrapper .mat-slider-ticks", "{ background-color: transparent !important; }");
            }, SliderComponent.\u0275fac = function(t) {
                return new (t || SliderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275directiveInject"](_powerbi_A11y__WEBPACK_IMPORTED_MODULE_6__.g), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275directiveInject"](_powerbi_Localization__WEBPACK_IMPORTED_MODULE_7__.o));
            }, SliderComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineComponent"]({
                type: SliderComponent,
                selectors: [ [ "slider" ] ],
                inputs: {
                    modelValue: "modelValue",
                    initialValue: "initialValue",
                    options: "options",
                    inputName: "inputName",
                    isDisabled: "isDisabled",
                    labelId: "labelId",
                    ariaDescribedby: "ariaDescribedby",
                    newPaneColors: "newPaneColors",
                    useModernStyles: "useModernStyles"
                },
                outputs: {
                    inputFocusChange: "inputFocusChange",
                    modelValueChange: "modelValueChange"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275ProvidersFeature"]([ {
                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_8__.JU,
                    useExisting: (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function() {
                        return SliderComponent;
                    }),
                    multi: !0
                } ]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 11,
                vars: 33,
                consts: [ [ 1, "unit-slider" ], [ 1, "sliderWrapper", 3, "ngClass" ], [ 1, "slider-num-input", 3, "ngModel", "disabled", "hideUpDownButtons", "options", "labelId", "ariaDescribedby", "inputName", "focusChange", "modelValueChange" ], [ 1, "sliderInput", 3, "ngModel", "disabled", "ngClass", "min", "max", "valueText", "input", "change" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementStart"](0, "div", 0)(1, "div", 1)(2, "pbi-spin-button", 2), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275listener"]("focusChange", function($event) {
                        return ctx.inputFocusChange.emit($event);
                    })("modelValueChange", function($event) {
                        return ctx.onModelValueChanged.fn($event);
                    }), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](3, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](4, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementEnd"](), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementStart"](5, "mat-slider", 3), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275listener"]("input", function($event) {
                        return ctx.onSliderSliding.fn($event.value);
                    })("change", function($event) {
                        return ctx.onModelValueChanged.fn($event.value);
                    }), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](6, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](7, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](8, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](9, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](10, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementEnd"]()()()), 2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275advance"](1), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pureFunction1"](29, _c0, ctx.useModernStyles)), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275advance"](1), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("ngModel", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](3, 15, ctx.modelValue$))("disabled", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](4, 17, ctx.isDisabled$))("hideUpDownButtons", !ctx.useModernStyles)("options", ctx.options)("labelId", ctx.labelId)("ariaDescribedby", ctx.ariaDescribedby)("inputName", ctx.inputName + "-spinButton"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275advance"](3), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275propertyInterpolate"]("min", ctx.options.minValue), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275propertyInterpolate"]("max", ctx.options.maxValue), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("ngModel", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](6, 19, ctx.modelValue$))("disabled", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](7, 21, ctx.isDisabled$))("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pureFunction1"](31, _c1, _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](8, 23, ctx.isDisabled$)))("valueText", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](9, 25, ctx.modelValue$) + " " + _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](10, 27, ctx.sliderUnits$)), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275attribute"]("aria-labelledby", ctx.labelId));
                },
                dependencies: [ _angular_common__WEBPACK_IMPORTED_MODULE_9__.NgClass, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.JJ, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.On, _angular_material_legacy_slider__WEBPACK_IMPORTED_MODULE_10__.ST, _pbi_spin_button_pbi_spin_button_component__WEBPACK_IMPORTED_MODULE_11__.a, _angular_common__WEBPACK_IMPORTED_MODULE_9__.AsyncPipe ],
                styles: [ ".unit-slider{--sliderNumberInput: var(--fluent-theme-white-color);--sliderHorizontalFocus: var(--fluent-theme-black-color);--sliderTrackBackground: var(--fluent-theme-neutral-tertiary-alt-color);--sliderTrackBackgroundHover: var(--fluent-theme-neutral-tertiary-alt-color);--sliderTrackFill: var(--fluent-theme-neutral-secondary-color);--sliderThumbBorder: var(--fluent-theme-neutral-secondary-color);--sliderThumbBorderHover: var(--fluent-theme-neutral-secondary-color);--sliderThumbBackground: var(--fluent-theme-white-color);--sliderThumbBackgroundHover: var(--fluent-theme-white-color);--sliderFocusRing: transparent;--sliderTrackBackgroundDisabled: var(--fluent-theme-neutral-tertiary-alt-color);--sliderThumbBorderDisabled: var(--fluent-theme-neutral-secondary-color);--sliderThumbBackgroundDisabled: var(--fluent-theme-white-color);--sliderTrackFillDisabled: var(--fluent-theme-neutral-tertiary-alt-color);line-height:32px}[data-legacy-theming=false] .unit-slider{--sliderNumberInput: var(--colorNeutralStrokeDisabled);--sliderHorizontalFocus: var(--colorNeutralStrokeFocus2);--sliderTrackBackground: var(--colorNeutralStrokeAccessible);--sliderTrackBackgroundHover: var(--colorCompoundBrandBackgroundHover);--sliderTrackFill: var(--colorCompoundBrandBackground);--sliderThumbBorder: var(--colorNeutralStroke1);--sliderThumbBackground: var(--colorCompoundBrandBackground);--sliderThumbBorderHover: var(--colorNeutralStroke1);--sliderThumbBackgroundHover: var(--colorCompoundBrandBackgroundHover);--sliderFocusRing: var(--colorNeutralStroke1);--sliderThumbBorderDisabled: var(--colorNeutralStrokeDisabled);--sliderThumbBackgroundDisabled: var(--colorNeutralForegroundDisabled);--sliderTrackBackgroundDisabled: var(--colorNeutralStrokeDisabled);--sliderTrackFillDisabled: var(--colorNeutralForegroundDisabled)}.unit-slider .sliderWrapper{display:flex;flex-direction:row;align-items:center}.unit-slider .sliderWrapper .slider-num-input{margin-right:12px;background-color:var(--sliderNumberInput)}.unit-slider .sliderWrapper.modernStyles .slider-num-input{width:54px;margin-right:4px}.unit-slider .sliderWrapper.modernStyles .mat-slider-horizontal{min-width:92px}.unit-slider .sliderWrapper.modernStyles .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper{height:4px}.unit-slider .sliderWrapper .mat-slider-horizontal{padding:0;height:36px}.unit-slider .sliderWrapper .mat-slider-horizontal:focus-within{border:solid 1px var(--sliderHorizontalFocus)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper{top:17px}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background{height:4px;border-radius:2px;background-color:var(--sliderTrackBackground)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background:hover{background-color:var(--sliderTrackBackgroundHover)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-fill{height:4px;border-radius:2px;background-color:var(--sliderTrackFill)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-thumb{bottom:-11px;border-width:2px;border-color:var(--sliderThumbBorder);background-color:var(--sliderThumbBackground)}.unit-slider .sliderWrapper .mat-slider-horizontal .mat-slider-wrapper .mat-slider-thumb:hover{border-color:var(--sliderThumbBorderHover);background-color:var(--sliderThumbBackgroundHover)}.unit-slider .sliderWrapper .mat-slider:not(.mat-slider-sliding):not(.mat-slider-disabled) .mat-slider-thumb{transform:scale(.7)}.unit-slider .sliderWrapper .slider-value{margin-left:6px}.unit-slider .mat-slider-focus-ring{background-color:var(--sliderFocusRing)}.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-thumb{border-color:var(--sliderThumbBorderDisabled);background-color:var(--sliderThumbBackgroundDisabled)}.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background,.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-background:hover{background-color:var(--sliderTrackBackgroundDisabled)}.unit-slider .mat-slider-horizontal.mat-slider-disabled .mat-slider-wrapper .mat-slider-track-wrapper .mat-slider-track-fill{background-color:var(--sliderTrackFillDisabled)}\n" ],
                encapsulation: 2,
                changeDetection: 0
            }), SliderComponent;
        }(_powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_12__.N);
    }
} ]);