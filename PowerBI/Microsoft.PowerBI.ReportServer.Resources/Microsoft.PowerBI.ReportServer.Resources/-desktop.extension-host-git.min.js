"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-git" ], {
    19828: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            X: function() {
                return retry;
            }
        });
        var C_w_1_s_node_modules_pnpm_babel_runtime_7_14_8_node_modules_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37419), _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47875);
        function retry(count) {
            return void 0 === count && (count = -1), function(source) {
                return source.lift(new RetryOperator(count, source));
            };
        }
        var RetryOperator = function() {
            function RetryOperator(count, source) {
                this.count = count, this.source = source;
            }
            return RetryOperator.prototype.call = function(subscriber, source) {
                return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
            }, RetryOperator;
        }(), RetrySubscriber = function(_Subscriber) {
            function RetrySubscriber(destination, count, source) {
                var _this;
                return (_this = _Subscriber.call(this, destination) || this).count = count, _this.source = source, 
                _this;
            }
            return (0, C_w_1_s_node_modules_pnpm_babel_runtime_7_14_8_node_modules_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.Z)(RetrySubscriber, _Subscriber), 
            RetrySubscriber.prototype.error = function(err) {
                if (!this.isStopped) {
                    var source = this.source, count = this.count;
                    if (0 === count) return _Subscriber.prototype.error.call(this, err);
                    count > -1 && (this.count = count - 1), source.subscribe(this._unsubscribeAndRecycle());
                }
            }, RetrySubscriber;
        }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.L);
    },
    18176: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ug: function() {
                return DataAccessGitModule;
            },
            su: function() {
                return GitBranchOutClient;
            },
            ce: function() {
                return GitCommitClient;
            },
            Kl: function() {
                return GitConfigureCredentialsClient;
            },
            i: function() {
                return GitConnectionDetailsClient;
            },
            bE: function() {
                return GitConnectionDiscoveryClient;
            },
            xU: function() {
                return GitConnectionInitializationResult;
            },
            aw: function() {
                return GitDatasourceClient;
            },
            Zt: function() {
                return GitInitializationClient;
            },
            P9: function() {
                return GitRepairClient;
            },
            mK: function() {
                return GitStatusClient;
            },
            ZH: function() {
                return GitSwitchBranchClient;
            },
            WV: function() {
                return GitSyncClient;
            },
            nD: function() {
                return GitUndoClient;
            },
            Jv: function() {
                return GitUpdateClient;
            },
            h_: function() {
                return isExtensionDatasourceConnectionDetails;
            }
        });
        var throwError = __webpack_require__(60225), retry = __webpack_require__(19828), map = __webpack_require__(14172), catchError = __webpack_require__(59822), http_service = __webpack_require__(68698), core = __webpack_require__(50423), GitHttpUtils = function() {
            function GitHttpUtils(httpService) {
                this.httpService = httpService;
            }
            return GitHttpUtils.prototype.getData = function(url) {
                var option = this.createNoRetriesRequestOptions();
                return this.httpService.get(url, option).pipe((0, retry.X)(0), (0, map.U)(function(response) {
                    return response.data;
                }));
            }, GitHttpUtils.prototype.postData = function(url, data) {
                var option = this.createNoRetriesRequestOptions();
                return this.httpService.post(url, data, option).pipe(this.retryWithTransform(), (0, 
                map.U)(function(_a) {
                    return _a.data;
                }));
            }, GitHttpUtils.prototype.deleteData = function(url) {
                var option = this.createNoRetriesRequestOptions();
                return this.httpService.delete(url, option).pipe((0, retry.X)(0), (0, map.U)(function(response) {
                    return response.data;
                }));
            }, GitHttpUtils.prototype.createNoRetriesRequestOptions = function() {
                var option = this.httpService.powerbiRequestOptions();
                return option.disableRetriesOnServerError = !0, option.retryCount = 0, option.signInOnConditionalAccessErrors = !1, 
                option;
            }, GitHttpUtils.prototype.retryWithTransform = function() {
                return function(source) {
                    return source.pipe((0, retry.X)(0), (0, catchError.K)(function(error) {
                        return (0, throwError._)(error);
                    }), (0, map.U)(function(_a) {
                        return {
                            data: _a.data
                        };
                    }));
                };
            }, GitHttpUtils.\u0275fac = function(t) {
                return new (t || GitHttpUtils)(core["\u0275\u0275inject"](http_service.s));
            }, GitHttpUtils.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitHttpUtils,
                factory: GitHttpUtils.\u0275fac,
                providedIn: "root"
            }), GitHttpUtils;
        }(), GitBranchOutClient = function() {
            function GitBranchOutClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitBranchOutClient.prototype.branchOut = function(workspaceId, branchOutRequest) {
                return this.httpUtils.postData("metadata/git/workspaces/".concat(workspaceId, "/branchOut"), branchOutRequest);
            }, GitBranchOutClient.\u0275fac = function(t) {
                return new (t || GitBranchOutClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitBranchOutClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitBranchOutClient,
                factory: GitBranchOutClient.\u0275fac
            }), GitBranchOutClient;
        }(), tslib_es6 = __webpack_require__(81337), GitCommitClient = function() {
            function GitCommitClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitCommitClient.prototype.commitArtifacts = function(workspaceId, commitToGitRequest) {
                return this.httpUtils.postData("metadata/git/workspaces/".concat(workspaceId, "/commitToGit?skipHeadValidation=true"), commitToGitRequest).pipe((0, 
                map.U)(function(response) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, response), {
                        responseDate: new Date(Date.now())
                    });
                }));
            }, GitCommitClient.\u0275fac = function(t) {
                return new (t || GitCommitClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitCommitClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitCommitClient,
                factory: GitCommitClient.\u0275fac
            }), GitCommitClient;
        }(), GitConfigureCredentialsClient = function() {
            function GitConfigureCredentialsClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitConfigureCredentialsClient.prototype.postConfigureCredentials = function(workspaceId, configureCredentialsRequest) {
                return this.httpUtils.postData("/metadata/git/workspaces/".concat(workspaceId, "/configureCredentials"), configureCredentialsRequest);
            }, GitConfigureCredentialsClient.prototype.deleteConfiguredCredentials = function(workspaceId) {
                return this.httpUtils.deleteData("/metadata/git/workspaces/".concat(workspaceId, "/configureCredentials"));
            }, GitConfigureCredentialsClient.\u0275fac = function(t) {
                return new (t || GitConfigureCredentialsClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitConfigureCredentialsClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitConfigureCredentialsClient,
                factory: GitConfigureCredentialsClient.\u0275fac,
                providedIn: "root"
            }), GitConfigureCredentialsClient;
        }(), GitConnectionDetailsClient = function() {
            function GitConnectionDetailsClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitConnectionDetailsClient.prototype.getGitConnectionDetails = function(workspaceId) {
                return this.httpUtils.getData("/metadata/git/workspaces/".concat(workspaceId, "/connection"));
            }, GitConnectionDetailsClient.prototype.setGitConnectionDetails = function(workspaceId, gitConnectionDetails) {
                return this.httpUtils.postData("/metadata/git/workspaces/".concat(workspaceId, "/connection"), gitConnectionDetails);
            }, GitConnectionDetailsClient.prototype.checkoutBranch = function(workspaceId, checkoutBranchRequest) {
                return this.httpUtils.postData("/metadata/git/workspaces/".concat(workspaceId, "/checkoutBranch"), checkoutBranchRequest);
            }, GitConnectionDetailsClient.prototype.deleteGitConnectionDetails = function(workspaceId) {
                return this.httpUtils.deleteData("/metadata/git/workspaces/".concat(workspaceId, "/connection"));
            }, GitConnectionDetailsClient.\u0275fac = function(t) {
                return new (t || GitConnectionDetailsClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitConnectionDetailsClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitConnectionDetailsClient,
                factory: GitConnectionDetailsClient.\u0275fac
            }), GitConnectionDetailsClient;
        }(), src = __webpack_require__(18016), GitConnectionDiscoveryClient = function() {
            function GitConnectionDiscoveryClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitConnectionDiscoveryClient.prototype.getOrganizations = function(gitProviderType, workspaceId) {
                return this.httpUtils.getData("/metadata/git/organizations?gitProviderType=".concat(src.IS[gitProviderType], "&workspaceId=").concat(workspaceId));
            }, GitConnectionDiscoveryClient.prototype.getProjects = function(gitProviderType, gitOrganizationName, workspaceId) {
                return this.httpUtils.getData("/metadata/git/projects?gitProviderType=".concat(src.IS[gitProviderType], "&organizationName=").concat(gitOrganizationName, "&workspaceId=").concat(workspaceId));
            }, GitConnectionDiscoveryClient.prototype.getRepositories = function(gitProviderType, gitOrganizationName, gitProjectName, workspaceId) {
                return this.httpUtils.getData("/metadata/git/repositories?gitProviderType=".concat(src.IS[gitProviderType], "&organizationName=").concat(gitOrganizationName, "&projectName=").concat(gitProjectName, "&workspaceId=").concat(workspaceId));
            }, GitConnectionDiscoveryClient.prototype.getBranches = function(workspaceId, gitProviderType, organization, repository, project, datasourceOID) {
                var url = "/metadata/git/branches?workspaceId=".concat(workspaceId, "&gitProviderType=").concat(src.IS[gitProviderType], "&organizationName=").concat(organization, "&repositoryName=").concat(repository);
                return project && (url += "&projectName=".concat(project)), datasourceOID && (url += "&datasourceOID=".concat(datasourceOID)), 
                this.httpUtils.getData(url);
            }, GitConnectionDiscoveryClient.prototype.createBranch = function(createBranchRequest) {
                return this.httpUtils.postData("/metadata/git/branches", createBranchRequest);
            }, GitConnectionDiscoveryClient.prototype.createDirectory = function(createDirectoryRequest) {
                return this.httpUtils.postData("/metadata/git/directory", createDirectoryRequest);
            }, GitConnectionDiscoveryClient.prototype.getRelatedWorkspaces = function(workspaceId) {
                return this.httpUtils.getData("/metadata/git/workspaces/".concat(workspaceId, "/relatedWorkspaces"));
            }, GitConnectionDiscoveryClient.\u0275fac = function(t) {
                return new (t || GitConnectionDiscoveryClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitConnectionDiscoveryClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitConnectionDiscoveryClient,
                factory: GitConnectionDiscoveryClient.\u0275fac,
                providedIn: "root"
            }), GitConnectionDiscoveryClient;
        }(), GitDatasourceClient = function() {
            function GitDatasourceClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitDatasourceClient.prototype.createDatasource = function(request) {
                return this.httpUtils.postData("/v2.0/myorg/me/gatewayClusterCloudDatasource", request);
            }, GitDatasourceClient.prototype.discoverDatasources = function() {
                return this.httpUtils.postData("/v2.0/myorg/me/gatewayClusterDatasources", {
                    datasourceTypes: [ "Extension" ]
                });
            }, GitDatasourceClient.prototype.getDatasource = function(datasourceId) {
                var requestUrl = "/v2.0/myorg/me/gatewayClusterDatasources/".concat(datasourceId);
                return this.httpUtils.getData(requestUrl);
            }, GitDatasourceClient.\u0275fac = function(t) {
                return new (t || GitDatasourceClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitDatasourceClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitDatasourceClient,
                factory: GitDatasourceClient.\u0275fac,
                providedIn: "root"
            }), GitDatasourceClient;
        }(), GitInitializationClient = function() {
            function GitInitializationClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitInitializationClient.prototype.initializeGitConnection = function(workspaceId, initializeGitConnectionRequest) {
                return this.httpUtils.postData("/metadata/git/workspaces/".concat(workspaceId, "/connection/initialize"), initializeGitConnectionRequest);
            }, GitInitializationClient.\u0275fac = function(t) {
                return new (t || GitInitializationClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitInitializationClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitInitializationClient,
                factory: GitInitializationClient.\u0275fac
            }), GitInitializationClient;
        }(), GitStatusClient = function() {
            function GitStatusClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitStatusClient.prototype.getUncommittedChanges = function(workspaceId) {
                return this.getData(workspaceId, "uncommittedChanges");
            }, GitStatusClient.prototype.getIncomingChanges = function(workspaceId) {
                return this.getData(workspaceId, "incomingChanges");
            }, GitStatusClient.prototype.getGitStatus = function(workspaceId) {
                return this.getData(workspaceId, "gitStatus");
            }, GitStatusClient.prototype.getData = function(workspaceId, operation) {
                var path = "metadata/git/workspaces/".concat(workspaceId, "/").concat(operation);
                return this.httpUtils.getData(path);
            }, GitStatusClient.\u0275fac = function(t) {
                return new (t || GitStatusClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitStatusClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitStatusClient,
                factory: GitStatusClient.\u0275fac
            }), GitStatusClient;
        }(), GitSyncClient = function() {
            function GitSyncClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitSyncClient.prototype.getlatestGitOperation = function(workspaceId) {
                return this.httpUtils.getData("metadata/git/workspaces/".concat(workspaceId, "/latestGitOperationV2"));
            }, GitSyncClient.\u0275fac = function(t) {
                return new (t || GitSyncClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitSyncClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitSyncClient,
                factory: GitSyncClient.\u0275fac
            }), GitSyncClient;
        }(), GitSwitchBranchClient = function() {
            function GitSwitchBranchClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitSwitchBranchClient.prototype.switchBranch = function(workspaceId, switchBranchRequest) {
                return this.httpUtils.postData("/metadata/git/workspaces/".concat(workspaceId, "/switchBranch"), switchBranchRequest);
            }, GitSwitchBranchClient.\u0275fac = function(t) {
                return new (t || GitSwitchBranchClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitSwitchBranchClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitSwitchBranchClient,
                factory: GitSwitchBranchClient.\u0275fac
            }), GitSwitchBranchClient;
        }(), GitUndoClient = function() {
            function GitUndoClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitUndoClient.prototype.undoCommitArtifacts = function(workspaceId, undoFromGitRequest) {
                return this.httpUtils.postData("metadata/git/workspaces/".concat(workspaceId, "/undo"), undoFromGitRequest);
            }, GitUndoClient.\u0275fac = function(t) {
                return new (t || GitUndoClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitUndoClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitUndoClient,
                factory: GitUndoClient.\u0275fac
            }), GitUndoClient;
        }(), GitUpdateClient = function() {
            function GitUpdateClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitUpdateClient.prototype.UpdateArtifactsFromGit = function(workspaceId, updateFromGitRequest) {
                return this.httpUtils.postData("metadata/git/workspaces/".concat(workspaceId, "/updateFromGit"), updateFromGitRequest).pipe((0, 
                map.U)(function(response) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, response), {
                        responseDate: new Date(Date.now())
                    });
                }));
            }, GitUpdateClient.\u0275fac = function(t) {
                return new (t || GitUpdateClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitUpdateClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitUpdateClient,
                factory: GitUpdateClient.\u0275fac
            }), GitUpdateClient;
        }(), GitRepairClient = function() {
            function GitRepairClient(httpUtils) {
                this.httpUtils = httpUtils;
            }
            return GitRepairClient.prototype.gitRepairItems = function(workspaceId, repairRemoteItemsRequest) {
                return this.httpUtils.postData("metadata/git/workspaces/".concat(workspaceId, "/repairGitItems"), repairRemoteItemsRequest).pipe((0, 
                map.U)(function(response) {
                    return (0, tslib_es6.__assign)({}, response);
                }));
            }, GitRepairClient.\u0275fac = function(t) {
                return new (t || GitRepairClient)(core["\u0275\u0275inject"](GitHttpUtils));
            }, GitRepairClient.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitRepairClient,
                factory: GitRepairClient.\u0275fac
            }), GitRepairClient;
        }();
        function isExtensionDatasourceConnectionDetails(object) {
            return object && "string" == typeof object.extensionDataSourceKind && "string" == typeof object.extensionDataSourcePath;
        }
        var GitConnectionInitializationResult = function(GitConnectionInitializationResult) {
            return GitConnectionInitializationResult[GitConnectionInitializationResult.Undefined = 0] = "Undefined", 
            GitConnectionInitializationResult[GitConnectionInitializationResult.Completed = 1] = "Completed", 
            GitConnectionInitializationResult[GitConnectionInitializationResult.UpdateFromGitRequired = 2] = "UpdateFromGitRequired", 
            GitConnectionInitializationResult[GitConnectionInitializationResult.CommitToGitRequired = 3] = "CommitToGitRequired", 
            GitConnectionInitializationResult[GitConnectionInitializationResult.Failed = 100] = "Failed", 
            GitConnectionInitializationResult;
        }({}), common = __webpack_require__(77476), DataAccessGitModule = function() {
            function DataAccessGitModule() {}
            return DataAccessGitModule.forRoot = function() {
                return {
                    ngModule: DataAccessGitModule,
                    providers: []
                };
            }, DataAccessGitModule.\u0275fac = function(t) {
                return new (t || DataAccessGitModule);
            }, DataAccessGitModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: DataAccessGitModule
            }), DataAccessGitModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ GitBranchOutClient, GitCommitClient, GitConfigureCredentialsClient, GitConnectionDetailsClient, GitConnectionDiscoveryClient, GitDatasourceClient, GitHttpUtils, GitInitializationClient, GitStatusClient, GitSyncClient, GitSwitchBranchClient, GitUndoClient, GitUpdateClient, GitRepairClient ],
                imports: [ common.CommonModule ]
            }), DataAccessGitModule;
        }();
    },
    70628: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            CmZ: function() {
                return ConnectionOperationState;
            },
            DAQ: function() {
                return DataGitModule;
            },
            j3q: function() {
                return DatasourceManagementState;
            },
            f$Z: function() {
                return GitConnectionFacade;
            },
            iAv: function() {
                return GitDatasourcesFacade;
            },
            REK: function() {
                return GitInitializeFacade;
            },
            gCl: function() {
                return GitSessionStorageService;
            },
            F8e: function() {
                return GitStatusFacade;
            },
            pPx: function() {
                return GitStatusMode;
            },
            CCT: function() {
                return GitSwitchBranchFacade;
            },
            Gui: function() {
                return LoadingState;
            },
            ND3: function() {
                return SwitchBranchState;
            },
            x6e: function() {
                return loadUncommittedChanges;
            },
            V_q: function() {
                return updateDatasourceInGitConnection;
            }
        });
        var ngrx_effects = __webpack_require__(60756), ngrx_store = __webpack_require__(85732), src = __webpack_require__(18176), tslib_es6 = __webpack_require__(81337), ngrx_entity = __webpack_require__(8894), loadUncommittedChanges = (0, 
        ngrx_store.PH)("[GitStatus] Load Uncommitted Changes", (0, ngrx_store.Ky)()), loadUncommittedChangesSuccess = (0, 
        ngrx_store.PH)("[GitStatus] Load Uncommitted Changes Success", (0, ngrx_store.Ky)()), loadUncommittedChangesFailure = (0, 
        ngrx_store.PH)("[GitStatus] Load Uncommitted Changes Failure", (0, ngrx_store.Ky)()), loadIncomingChanges = (0, 
        ngrx_store.PH)("[GitStatus] Load Incoming Changes", (0, ngrx_store.Ky)()), loadIncomingChangesSuccess = (0, 
        ngrx_store.PH)("[GitStatus] Load Incoming Changes Success", (0, ngrx_store.Ky)()), loadIncomingChangesFailure = (0, 
        ngrx_store.PH)("[GitStatus] Load Incoming Changes Failure", (0, ngrx_store.Ky)()), setChangesArtifactSelection = (0, 
        ngrx_store.PH)("[GitStatus] set selection of artifact in changes tab", (0, ngrx_store.Ky)()), clearChangesArtifactSelection = (0, 
        ngrx_store.PH)("[GitStatus] clear selection of artifact in changes tab", (0, ngrx_store.Ky)()), invalidateGitStatus = (0, 
        ngrx_store.PH)("[GitConnection] Invalidate Git status", (0, ngrx_store.Ky)()), loadGitStatus = (0, 
        ngrx_store.PH)("[GitStatus] Load Git Status", (0, ngrx_store.Ky)()), loadGitStatusSuccess = (0, 
        ngrx_store.PH)("[GitStatus] Load Git Status Success", (0, ngrx_store.Ky)()), loadGitStatusFailure = (0, 
        ngrx_store.PH)("[GitStatus] Load Git Status Failure", (0, ngrx_store.Ky)()), LoadingState = function(LoadingState) {
            return LoadingState[LoadingState.Initial = 0] = "Initial", LoadingState[LoadingState.Loading = 1] = "Loading", 
            LoadingState[LoadingState.Loaded = 2] = "Loaded", LoadingState;
        }({}), ConnectionOperationState = function(ConnectionOperationState) {
            return ConnectionOperationState[ConnectionOperationState.Initial = 0] = "Initial", 
            ConnectionOperationState[ConnectionOperationState.InProgress = 1] = "InProgress", 
            ConnectionOperationState[ConnectionOperationState.Completed = 2] = "Completed", 
            ConnectionOperationState;
        }({}), types_CommittingState = function(CommittingState) {
            return CommittingState[CommittingState.Initial = 0] = "Initial", CommittingState[CommittingState.Committing = 1] = "Committing", 
            CommittingState[CommittingState.Committed = 2] = "Committed", CommittingState;
        }({}), UndoingState = function(UndoingState) {
            return UndoingState[UndoingState.Initial = 0] = "Initial", UndoingState[UndoingState.Undoing = 1] = "Undoing", 
            UndoingState[UndoingState.Undone = 2] = "Undone", UndoingState;
        }({}), UpdatingState = function(UpdatingState) {
            return UpdatingState[UpdatingState.Initial = 0] = "Initial", UpdatingState[UpdatingState.Updating = 1] = "Updating", 
            UpdatingState[UpdatingState.Updated = 2] = "Updated", UpdatingState;
        }({}), GitProgressIndicatorState = function(GitProgressIndicatorState) {
            return GitProgressIndicatorState[GitProgressIndicatorState.None = 0] = "None", GitProgressIndicatorState[GitProgressIndicatorState.CommitFlowInProgress = 1] = "CommitFlowInProgress", 
            GitProgressIndicatorState[GitProgressIndicatorState.CommitInitialFlowInProgress = 2] = "CommitInitialFlowInProgress", 
            GitProgressIndicatorState[GitProgressIndicatorState.UpdateFlowInProgress = 3] = "UpdateFlowInProgress", 
            GitProgressIndicatorState[GitProgressIndicatorState.UpdateInitialFlowInProgress = 4] = "UpdateInitialFlowInProgress", 
            GitProgressIndicatorState[GitProgressIndicatorState.UndoFlowInProgress = 5] = "UndoFlowInProgress", 
            GitProgressIndicatorState[GitProgressIndicatorState.CheckoutBranchFlowInProgress = 6] = "CheckoutBranchFlowInProgress", 
            GitProgressIndicatorState[GitProgressIndicatorState.SwitchBranchFlowInProgress = 7] = "SwitchBranchFlowInProgress", 
            GitProgressIndicatorState;
        }({}), SwitchBranchState = function(SwitchBranchState) {
            return SwitchBranchState[SwitchBranchState.Initial = 0] = "Initial", SwitchBranchState[SwitchBranchState.InProgress = 1] = "InProgress", 
            SwitchBranchState[SwitchBranchState.Completed = 2] = "Completed", SwitchBranchState;
        }({}), types_BranchOutState = function(BranchOutState) {
            return BranchOutState[BranchOutState.Initial = 0] = "Initial", BranchOutState[BranchOutState.InProgress = 1] = "InProgress", 
            BranchOutState[BranchOutState.Completed = 2] = "Completed", BranchOutState;
        }({}), DatasourceManagementState = function(DatasourceManagementState) {
            return DatasourceManagementState[DatasourceManagementState.Initial = 0] = "Initial", 
            DatasourceManagementState[DatasourceManagementState.InProgress = 1] = "InProgress", 
            DatasourceManagementState[DatasourceManagementState.Completed = 2] = "Completed", 
            DatasourceManagementState;
        }({}), types_RepairingItemsState = function(RepairingItemsState) {
            return RepairingItemsState[RepairingItemsState.Initial = 0] = "Initial", RepairingItemsState[RepairingItemsState.InProgress = 1] = "InProgress", 
            RepairingItemsState[RepairingItemsState.Completed = 2] = "Completed", RepairingItemsState;
        }({}), gitStatusAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), initialState = (0, tslib_es6.__assign)({}, gitStatusAdapter.getInitialState()), gitStatusReducer = (0, 
        ngrx_store.Lq)(initialState, (0, ngrx_store.on)(loadGitStatus, function(state, _a) {
            return gitStatusAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                statusCallState: LoadingState.Loading
            }, state);
        }), (0, ngrx_store.on)(loadGitStatusSuccess, function(state, _a) {
            return gitStatusAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitStatus), {
                statusCallState: LoadingState.Loaded
            }), state);
        }), (0, ngrx_store.on)(loadGitStatusFailure, function(state, _a) {
            return gitStatusAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                statusCallState: _a.error
            }, state);
        }), (0, ngrx_store.on)(loadUncommittedChanges, function(state, _a) {
            return gitStatusAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                uncommittedChangesCallState: LoadingState.Loading
            }, state);
        }), (0, ngrx_store.on)(loadUncommittedChangesSuccess, function(state, _a) {
            var _b, _c, _d, _e, _f, gitStatus = _a.gitStatus;
            return gitStatusAdapter.upsertOne({
                workspaceId: gitStatus.workspaceId,
                head: gitStatus.head,
                gitChanges: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], null !== (_d = null === (_c = null === (_b = state.entities[gitStatus.workspaceId]) || void 0 === _b ? void 0 : _b.gitChanges) || void 0 === _c ? void 0 : _c.filter(function(change) {
                    return change.remoteChange;
                })) && void 0 !== _d ? _d : [], !0), null !== (_e = null == gitStatus ? void 0 : gitStatus.gitChanges) && void 0 !== _e ? _e : [], !0),
                incomingChangesCommitHash: null === (_f = state.entities[gitStatus.workspaceId]) || void 0 === _f ? void 0 : _f.incomingChangesCommitHash,
                uncommittedChangesCallState: LoadingState.Loaded
            }, state);
        }), (0, ngrx_store.on)(loadUncommittedChangesFailure, function(state, _a) {
            return gitStatusAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                uncommittedChangesCallState: _a.error
            }, state);
        }), (0, ngrx_store.on)(loadIncomingChanges, function(state, _a) {
            return gitStatusAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                incomingChangesCallState: LoadingState.Loading
            }, state);
        }), (0, ngrx_store.on)(loadIncomingChangesSuccess, function(state, _a) {
            var _b, _c, _d, _e, gitStatus = _a.gitStatus;
            return gitStatusAdapter.upsertOne({
                workspaceId: gitStatus.workspaceId,
                head: gitStatus.head,
                gitChanges: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], null !== (_d = null === (_c = null === (_b = state.entities[gitStatus.workspaceId]) || void 0 === _b ? void 0 : _b.gitChanges) || void 0 === _c ? void 0 : _c.filter(function(change) {
                    return change.workspaceChange;
                })) && void 0 !== _d ? _d : [], !0), null !== (_e = null == gitStatus ? void 0 : gitStatus.gitChanges) && void 0 !== _e ? _e : [], !0),
                incomingChangesCommitHash: gitStatus.incomingChangesCommitHash,
                incomingChangesCallState: LoadingState.Loaded
            }, state);
        }), (0, ngrx_store.on)(loadIncomingChangesFailure, function(state, _a) {
            return gitStatusAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                incomingChangesCallState: _a.error
            }, state);
        }), (0, ngrx_store.on)(setChangesArtifactSelection, function(state, _a) {
            var _b, _c, workspaceId = _a.workspaceId, artifactId = _a.artifactId, logicalId = _a.logicalId, currentSelection = (null === (_c = null === (_b = state.entities[workspaceId]) || void 0 === _b ? void 0 : _b.uncommittedChangesArtifactSelectionState) || void 0 === _c ? void 0 : _c.selectedArtifacts) || [], newSelection = _a.isChecked ? currentSelection.concat({
                artifactId,
                logicalId
            }) : currentSelection.filter(function(selector) {
                return selector.artifactId !== artifactId || selector.logicalId !== logicalId;
            });
            return gitStatusAdapter.upsertOne({
                workspaceId,
                uncommittedChangesArtifactSelectionState: {
                    selectedArtifacts: newSelection
                }
            }, state);
        }), (0, ngrx_store.on)(clearChangesArtifactSelection, function(state, _a) {
            return gitStatusAdapter.updateOne({
                id: _a.workspaceId,
                changes: {
                    uncommittedChangesArtifactSelectionState: {
                        selectedArtifacts: []
                    }
                }
            }, state);
        }), (0, ngrx_store.on)(invalidateGitStatus, function(state, _a) {
            return gitStatusAdapter.removeOne(_a.workspaceId, state);
        })), git_src = __webpack_require__(18016), initializeGitConnection = (0, ngrx_store.PH)("[GitConnection] Initialize Git connection", (0, 
        ngrx_store.Ky)()), initializeGitConnectionSuccess = (0, ngrx_store.PH)("[GitConnection] Initialize Git connection success", (0, 
        ngrx_store.Ky)()), initializeGitConnectionFailure = (0, ngrx_store.PH)("[GitConnection] Initialize Git connection failure", (0, 
        ngrx_store.Ky)()), invalidateGitConnectionInitialization = (0, ngrx_store.PH)("[GitConnection] Invalidate Git connection initialization", (0, 
        ngrx_store.Ky)()), loadGitConnection = (0, ngrx_store.PH)("[GitConnection] Load Git Connection", (0, 
        ngrx_store.Ky)()), loadGitConnectionSuccess = (0, ngrx_store.PH)("[GitConnection] Load Git Connection Success", (0, 
        ngrx_store.Ky)()), loadGitConnectionFailure = (0, ngrx_store.PH)("[GitConnection] Load Git Connection Failure", (0, 
        ngrx_store.Ky)()), ensureGitConnection = (0, ngrx_store.PH)("[GitConnection] Ensure Git Connection", (0, 
        ngrx_store.Ky)()), saveGitConnection = (0, ngrx_store.PH)("[GitConnection] Save Git Connection", (0, 
        ngrx_store.Ky)()), saveGitConnectionSuccess = (0, ngrx_store.PH)("[GitConnection] Save Git Connection Success", (0, 
        ngrx_store.Ky)()), saveGitConnectionFailure = (0, ngrx_store.PH)("[GitConnection] Save Git Connection Failure", (0, 
        ngrx_store.Ky)()), deleteGitConnection = (0, ngrx_store.PH)("[GitConnection] Delete Git Connection", (0, 
        ngrx_store.Ky)()), deleteGitConnectionSuccess = (0, ngrx_store.PH)("[GitConnection] Delete Git Connection Success", (0, 
        ngrx_store.Ky)()), deleteGitConnectionFailure = (0, ngrx_store.PH)("[GitConnection] Delete Git Connection Failure", (0, 
        ngrx_store.Ky)()), gitCheckoutBranch = (0, ngrx_store.PH)("[GitConnection] Git Checkout Branch", (0, 
        ngrx_store.Ky)()), gitCheckoutBranchSuccess = (0, ngrx_store.PH)("[GitConnection] Git Checkout Branch Success", (0, 
        ngrx_store.Ky)()), gitCheckoutBranchFailure = (0, ngrx_store.PH)("[GitConnection] Git Checkout Branch Failure", (0, 
        ngrx_store.Ky)()), updateDatasourceInGitConnection = (0, ngrx_store.PH)("[GitConnection] Update datasource in GitConnection", (0, 
        ngrx_store.Ky)()), git_sync_actions_getLatestGitAlmOperation = (0, ngrx_store.PH)("[GitSync] Get latest git alm operation", (0, 
        ngrx_store.Ky)()), getLatestGitAlmOperationSuccess = (0, ngrx_store.PH)("[GitSync] Get latest git alm operation Success", (0, 
        ngrx_store.Ky)()), getLatestGitAlmOperationFailure = (0, ngrx_store.PH)("[GitSync] Get latest git alm operation Failure", (0, 
        ngrx_store.Ky)()), invalidateGitSync = (0, ngrx_store.PH)("[GitConnection] Invalidate Git sync", (0, 
        ngrx_store.Ky)()), gitSwitchBranch = (0, ngrx_store.PH)("[GitSwitchBranch] Git Switch Branch", (0, 
        ngrx_store.Ky)()), gitSwitchBranchSuccess = (0, ngrx_store.PH)("[GitSwitchBranch] Git Switch Branch Success", (0, 
        ngrx_store.Ky)()), gitSwitchBranchInProgress = (0, ngrx_store.PH)("[GitSwitchBranch] Git Switch Branch In Progress", (0, 
        ngrx_store.Ky)()), gitSwitchBranchFailureServerError = (0, ngrx_store.PH)("[GitSwitchBranch] Git Switch Branch Failure server error", (0, 
        ngrx_store.Ky)()), gitSwitchBranchFailure = (0, ngrx_store.PH)("[GitSwitchBranch] Git Switch Branch Failure", (0, 
        ngrx_store.Ky)()), git_branch_out_actions_gitBranchOut = (0, ngrx_store.PH)("[GitBranchOut] Branch Out", (0, 
        ngrx_store.Ky)()), gitBranchOutSuccess = (0, ngrx_store.PH)("[GitBranchOut] Branch Out success", (0, 
        ngrx_store.Ky)()), gitBranchOutFailure = (0, ngrx_store.PH)("[GitBranchOut] Branch Out failure", (0, 
        ngrx_store.Ky)()), gitBranchOutSyncFolder = (0, ngrx_store.PH)("[GitBranchOut] Branch Out requires to sync folder into store", (0, 
        ngrx_store.Ky)()), gitBranchOutCompleted = (0, ngrx_store.PH)("[GitBranchOut] Branch Out completed", (0, 
        ngrx_store.Ky)()), git_branch_out_actions_gitBranchOutSyncFolderNoUpdate = (0, ngrx_store.PH)("[GitBranchOut] Branch Out requires to sync folder into store without update", (0, 
        ngrx_store.Ky)()), git_branch_out_actions_gitBranchOutStoreInvalidate = (0, ngrx_store.PH)("[GitBranchOut] Branch Out store invalidate", (0, 
        ngrx_store.Ky)()), gitConnectionAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_connection_reducer_initialState = (0, tslib_es6.__assign)({}, gitConnectionAdapter.getInitialState()), gitConnectionReducer = (0, 
        ngrx_store.Lq)(git_connection_reducer_initialState, (0, ngrx_store.on)(loadGitConnection, deleteGitConnection, function(state, _a) {
            return gitConnectionAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                callState: ConnectionOperationState.InProgress
            }, state);
        }), (0, ngrx_store.on)(saveGitConnection, function(state, _a) {
            return gitConnectionAdapter.upsertOne({
                workspaceId: _a.gitConnection.workspaceId,
                callState: ConnectionOperationState.InProgress
            }, state);
        }), (0, ngrx_store.on)(gitCheckoutBranch, function(state, _a) {
            return gitConnectionAdapter.upsertOne({
                workspaceId: _a.gitCheckoutBranchState.workspaceId,
                callState: ConnectionOperationState.InProgress
            }, state);
        }), (0, ngrx_store.on)(loadGitConnectionSuccess, saveGitConnectionSuccess, function(state, _a) {
            return gitConnectionAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitConnection), {
                callState: ConnectionOperationState.Completed
            }), state);
        }), (0, ngrx_store.on)(gitCheckoutBranchSuccess, function(state, _a) {
            var _b, gitCheckoutBranchState = _a.gitCheckoutBranchState, workspaceId = gitCheckoutBranchState.workspaceId, currentGitConnectionDetails = null === (_b = state.entities[workspaceId]) || void 0 === _b ? void 0 : _b.gitConnectionDetails;
            return gitConnectionAdapter.updateOne({
                id: workspaceId,
                changes: {
                    gitConnectionDetails: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentGitConnectionDetails), {
                        branchName: gitCheckoutBranchState.request.branchName
                    }),
                    callState: ConnectionOperationState.Completed
                }
            }, state);
        }), (0, ngrx_store.on)(gitSwitchBranchInProgress, function(state, _a) {
            var _b, gitSwitchBranchState = _a.gitSwitchBranchState;
            return void 0 !== (null === (_b = null == gitSwitchBranchState ? void 0 : gitSwitchBranchState.request) || void 0 === _b ? void 0 : _b.targetBranchName) ? function(state, workspaceId, newBranchName) {
                var _a, currentGitConnectionDetails = null === (_a = state.entities[workspaceId]) || void 0 === _a ? void 0 : _a.gitConnectionDetails;
                return gitConnectionAdapter.updateOne({
                    id: workspaceId,
                    changes: {
                        gitConnectionDetails: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentGitConnectionDetails), {
                            branchName: newBranchName
                        }),
                        callState: ConnectionOperationState.Completed
                    }
                }, state);
            }(state, gitSwitchBranchState.workspaceId, gitSwitchBranchState.request.targetBranchName) : state;
        }), (0, ngrx_store.on)(updateDatasourceInGitConnection, function(state, _a) {
            var _b, workspaceId = _a.workspaceId, datasourceOID = _a.datasourceOID, currentGitConnectionDetails = null === (_b = state.entities[workspaceId]) || void 0 === _b ? void 0 : _b.gitConnectionDetails;
            return gitConnectionAdapter.updateOne({
                id: workspaceId,
                changes: {
                    gitConnectionDetails: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentGitConnectionDetails), {
                        datasourceOID
                    }),
                    callState: ConnectionOperationState.Completed
                }
            }, state);
        }), (0, ngrx_store.on)(deleteGitConnectionSuccess, function(state, _a) {
            return gitConnectionAdapter.removeOne(_a.workspaceId, state);
        }), (0, ngrx_store.on)(loadGitConnectionFailure, deleteGitConnectionFailure, gitCheckoutBranchFailure, function(state, _a) {
            return gitConnectionAdapter.updateOne({
                id: _a.workspaceId,
                changes: {
                    callState: _a.error
                }
            }, state);
        }), (0, ngrx_store.on)(saveGitConnectionFailure, function(state, _a) {
            return gitConnectionAdapter.updateOne({
                id: _a.gitConnection.workspaceId,
                changes: {
                    callState: _a.error
                }
            }, state);
        }), (0, ngrx_store.on)(initializeGitConnectionSuccess, function(state, _a) {
            var _b, _c, gitInitializationStateWithResponse = _a.gitInitializationStateWithResponse, workspaceId = gitInitializationStateWithResponse.workspaceId, currentGitConnectionDetails = null === (_b = state.entities[workspaceId]) || void 0 === _b ? void 0 : _b.gitConnectionDetails;
            return gitConnectionAdapter.updateOne({
                id: workspaceId,
                changes: {
                    gitConnectionDetails: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentGitConnectionDetails), {
                        isInitialized: !0,
                        head: null === (_c = gitInitializationStateWithResponse.response) || void 0 === _c ? void 0 : _c.head
                    })
                }
            }, state);
        }), (0, ngrx_store.on)(gitBranchOutSuccess, function(state, _a) {
            var _b, _c, _d, _e, _f, _g, gitBranchOutState = _a.gitBranchOutState;
            if (void 0 === (null === (_b = gitBranchOutState.response) || void 0 === _b ? void 0 : _b.folder)) return state;
            var targetWorkspaceId = null === (_d = null === (_c = gitBranchOutState.response) || void 0 === _c ? void 0 : _c.folder) || void 0 === _d ? void 0 : _d.objectId, currentGitConnectionDetails = null === (_e = state.entities[gitBranchOutState.workspaceId]) || void 0 === _e ? void 0 : _e.gitConnectionDetails, newgitConnectionDetails = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentGitConnectionDetails), {
                head: null === (_g = null === (_f = gitBranchOutState.response) || void 0 === _f ? void 0 : _f.initializeConnectionStatus) || void 0 === _g ? void 0 : _g.head,
                branchName: gitBranchOutState.request.targetBranchName
            });
            return gitConnectionAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, newgitConnectionDetails), {
                workspaceId: targetWorkspaceId,
                callState: ConnectionOperationState.Completed
            }), state);
        }), (0, ngrx_store.on)(loadUncommittedChangesSuccess, loadIncomingChangesSuccess, loadGitStatusSuccess, function(state, _a) {
            var _b, _c, _d, gitStatus = _a.gitStatus, workspaceId = gitStatus.workspaceId, currentGitConnectionDetails = null === (_b = state.entities[workspaceId]) || void 0 === _b ? void 0 : _b.gitConnectionDetails;
            return gitStatus.head && gitStatus.head !== (null === (_d = null === (_c = state.entities[gitStatus.workspaceId]) || void 0 === _c ? void 0 : _c.gitConnectionDetails) || void 0 === _d ? void 0 : _d.head) ? gitConnectionAdapter.updateOne({
                id: workspaceId,
                changes: {
                    gitConnectionDetails: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentGitConnectionDetails), {
                        head: gitStatus.head
                    })
                }
            }, state) : state;
        }), (0, ngrx_store.on)(getLatestGitAlmOperationSuccess, function(state, _a) {
            var _b, _c, gitSyncState = _a.gitSyncState, workspaceId = gitSyncState.workspaceId, currentGitConnectionDetails = null === (_b = state.entities[workspaceId]) || void 0 === _b ? void 0 : _b.gitConnectionDetails;
            return gitSyncState.gitOperationStatus !== git_src.wM.Successful ? state : gitConnectionAdapter.updateOne({
                id: workspaceId,
                changes: {
                    gitConnectionDetails: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentGitConnectionDetails), {
                        lastSyncTime: null === (_c = gitSyncState.lastUpdatedTime) || void 0 === _c ? void 0 : _c.toString()
                    })
                }
            }, state);
        })), git_commit_actions_commitToGit = (0, ngrx_store.PH)("[CommitToGit] Commit Changes To Git", (0, 
        ngrx_store.Ky)()), commitToGitInProgress = (0, ngrx_store.PH)("[CommitToGit] Commit Changes To Git inProgress", (0, 
        ngrx_store.Ky)()), commitToGitSuccess = (0, ngrx_store.PH)("[CommitToGit] Commit Changes To Git success", (0, 
        ngrx_store.Ky)()), commitToGitFailureServerError = (0, ngrx_store.PH)("[CommitToGit] Commit Changes To Git failure server error ", (0, 
        ngrx_store.Ky)()), commitToGitFailure = (0, ngrx_store.PH)("[CommitToGit] Commit Changes To Git failure ", (0, 
        ngrx_store.Ky)()), gitCommitAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_commit_reducer_initialState = (0, tslib_es6.__assign)({}, gitCommitAdapter.getInitialState()), gitCommitReducer = (0, 
        ngrx_store.Lq)(git_commit_reducer_initialState, (0, ngrx_store.on)(git_commit_actions_commitToGit, function(state, _a) {
            return gitCommitAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitCommitState), {
                callState: types_CommittingState.Committing
            }), state);
        }), (0, ngrx_store.on)(commitToGitInProgress, function(state, _a) {
            return gitCommitAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitCommitState), {
                callState: types_CommittingState.Committing
            }), state);
        }), (0, ngrx_store.on)(commitToGitSuccess, function(state, _a) {
            return gitCommitAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitCommitStateWithResponse), {
                callState: types_CommittingState.Committed,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(commitToGitFailureServerError, function(state, _a) {
            return gitCommitAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitCommitState), {
                callState: types_CommittingState.Committed,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(commitToGitFailure, function(state, _a) {
            var error = _a.error;
            return gitCommitAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitCommitState), {
                callState: error,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(invalidateGitConnectionInitialization, function(state, _a) {
            return gitCommitAdapter.removeOne(_a.workspaceId, state);
        })), updateFromGit = (0, ngrx_store.PH)("[UpdateFromGit] Update Changes From Git", (0, 
        ngrx_store.Ky)()), updateFromGitInProgress = (0, ngrx_store.PH)("[UpdateFromGit] Update Changes From Git InProgress", (0, 
        ngrx_store.Ky)()), updateFromGitSuccess = (0, ngrx_store.PH)("[UpdateFromGit] Update Changes From Git success", (0, 
        ngrx_store.Ky)()), updateFromGitFailure = (0, ngrx_store.PH)("[UpdateFromGit] Update Changes From Git failure ", (0, 
        ngrx_store.Ky)()), updateFromGitFailureServerError = (0, ngrx_store.PH)("[UpdateFromGit] Update Changes From Git failure server error", (0, 
        ngrx_store.Ky)()), gitUpdateAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_update_reducer_initialState = (0, tslib_es6.__assign)({}, gitUpdateAdapter.getInitialState()), gitUpdateReducer = (0, 
        ngrx_store.Lq)(git_update_reducer_initialState, (0, ngrx_store.on)(updateFromGit, function(state, _a) {
            return gitUpdateAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUpdateState), {
                callState: UpdatingState.Updating
            }), state);
        }), (0, ngrx_store.on)(updateFromGitInProgress, function(state, _a) {
            return gitUpdateAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUpdateState), {
                callState: UpdatingState.Updating
            }), state);
        }), (0, ngrx_store.on)(updateFromGitSuccess, function(state, _a) {
            return gitUpdateAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUpdateStateWithResponse), {
                callState: UpdatingState.Updated,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(updateFromGitFailureServerError, function(state, _a) {
            var error = _a.error;
            return gitUpdateAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUpdateState), {
                callState: error,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(updateFromGitFailure, function(state, _a) {
            var error = _a.error;
            return gitUpdateAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUpdateState), {
                callState: error,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(invalidateGitConnectionInitialization, function(state, _a) {
            return gitUpdateAdapter.removeOne(_a.workspaceId, state);
        })), gitInitializationAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_initialization_reducer_initialState = (0, tslib_es6.__assign)({}, gitInitializationAdapter.getInitialState()), git_initialization_reducer_gitCommitReducer = (0, 
        ngrx_store.Lq)(git_initialization_reducer_initialState, (0, ngrx_store.on)(initializeGitConnection, function(state, _a) {
            return gitInitializationAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitInitializationState), {
                callState: ConnectionOperationState.InProgress
            }), state);
        }), (0, ngrx_store.on)(initializeGitConnectionSuccess, function(state, _a) {
            return gitInitializationAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitInitializationStateWithResponse), {
                callState: ConnectionOperationState.Completed
            }), state);
        }), (0, ngrx_store.on)(initializeGitConnectionFailure, function(state, _a) {
            var error = _a.error;
            return gitInitializationAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitInitializationState), {
                callState: error
            }), state);
        }), (0, ngrx_store.on)(invalidateGitConnectionInitialization, function(state, _a) {
            return gitInitializationAdapter.removeOne(_a.workspaceId, state);
        })), gitSyncAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_sync_reducer_initialState = (0, tslib_es6.__assign)({}, gitSyncAdapter.getInitialState()), gitSyncReducer = (0, 
        ngrx_store.Lq)(git_sync_reducer_initialState, (0, ngrx_store.on)(git_sync_actions_getLatestGitAlmOperation, function(state, _a) {
            return gitSyncAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                isValid: !0,
                isInitial: !!_a.isInitial,
                callState: ConnectionOperationState.InProgress
            }, state);
        }), (0, ngrx_store.on)(getLatestGitAlmOperationSuccess, function(state, _a) {
            return gitSyncAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitSyncState), {
                callState: ConnectionOperationState.Completed
            }), state);
        }), (0, ngrx_store.on)(getLatestGitAlmOperationFailure, function(state, _a) {
            return gitSyncAdapter.updateOne({
                id: _a.workspaceId,
                changes: {
                    callState: _a.error,
                    isValid: !1
                }
            }, state);
        }), (0, ngrx_store.on)(invalidateGitSync, function(state, _a) {
            return gitSyncAdapter.removeOne(_a.workspaceId, state);
        })), undoFromGit = (0, ngrx_store.PH)("[undoFromGit] Undo changes From Git", (0, 
        ngrx_store.Ky)()), undoFromGitInProgress = (0, ngrx_store.PH)("[undoFromGit] Undo changes From Git inProgress", (0, 
        ngrx_store.Ky)()), undoFromGitSuccess = (0, ngrx_store.PH)("[undoFromGit] Undo changes From Git success", (0, 
        ngrx_store.Ky)()), undoFromGitFailureServerError = (0, ngrx_store.PH)("[undoFromGit] Undo changes From Git failure server error ", (0, 
        ngrx_store.Ky)()), undoFromGitFailure = (0, ngrx_store.PH)("[undoFromGit] Undo changes From Git failure ", (0, 
        ngrx_store.Ky)()), gitUndoAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_undo_reducer_initialState = (0, tslib_es6.__assign)({}, gitUndoAdapter.getInitialState()), gitUndoReducer = (0, 
        ngrx_store.Lq)(git_undo_reducer_initialState, (0, ngrx_store.on)(undoFromGit, function(state, _a) {
            return gitUndoAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUndoState), {
                callState: UndoingState.Undoing
            }), state);
        }), (0, ngrx_store.on)(undoFromGitInProgress, function(state, _a) {
            return gitUndoAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUndoState), {
                callState: UndoingState.Undoing
            }), state);
        }), (0, ngrx_store.on)(undoFromGitSuccess, function(state, _a) {
            return gitUndoAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUndoStateWithResponse), {
                callState: UndoingState.Undone,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(undoFromGitFailureServerError, function(state, _a) {
            var error = _a.error;
            return gitUndoAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUndoState), {
                callState: error,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(undoFromGitFailure, function(state, _a) {
            var error = _a.error;
            return gitUndoAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitUndoState), {
                callState: error,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(invalidateGitConnectionInitialization, function(state, _a) {
            return gitUndoAdapter.removeOne(_a.workspaceId, state);
        })), ProgressState = function(ProgressState) {
            return ProgressState[ProgressState.None = 0] = "None", ProgressState[ProgressState.GitActionStart = 1] = "GitActionStart", 
            ProgressState[ProgressState.GitActionInProgress = 2] = "GitActionInProgress", ProgressState[ProgressState.GitActionDone = 3] = "GitActionDone", 
            ProgressState[ProgressState.GitSyncStart = 4] = "GitSyncStart", ProgressState[ProgressState.GitSyncInProgress = 5] = "GitSyncInProgress", 
            ProgressState[ProgressState.GitSyncDone = 6] = "GitSyncDone", ProgressState;
        }({}), ActiveFlowName = function(ActiveFlowName) {
            return ActiveFlowName[ActiveFlowName.None = 0] = "None", ActiveFlowName[ActiveFlowName.Commit = 1] = "Commit", 
            ActiveFlowName[ActiveFlowName.Update = 2] = "Update", ActiveFlowName[ActiveFlowName.Undo = 3] = "Undo", 
            ActiveFlowName[ActiveFlowName.CheckoutBranch = 4] = "CheckoutBranch", ActiveFlowName[ActiveFlowName.SwitchBranch = 5] = "SwitchBranch", 
            ActiveFlowName;
        }({}), gitProgressIndicatorAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_progressIndicator_reducer_initialState = (0, tslib_es6.__assign)({}, gitProgressIndicatorAdapter.getInitialState()), gitProgressIndicatorReducer = (0, 
        ngrx_store.Lq)(git_progressIndicator_reducer_initialState, (0, ngrx_store.on)(git_commit_actions_commitToGit, function(state, _a) {
            return gitProgressIndicatorAdapter.upsertOne({
                workspaceId: _a.gitCommitState.workspaceId,
                activeFlowName: ActiveFlowName.Commit,
                progressState: ProgressState.GitActionStart,
                activeFlowState: _a.isInitialSync ? GitProgressIndicatorState.CommitInitialFlowInProgress : GitProgressIndicatorState.CommitFlowInProgress,
                isIntermidiateStep: !1
            }, state);
        }), (0, ngrx_store.on)(commitToGitInProgress, function(state, _a) {
            var gitCommitState = _a.gitCommitState, currentState = state.entities[gitCommitState.workspaceId];
            return currentState && isSameSession(ActiveFlowName.Commit, currentState) ? gitProgressIndicatorAdapter.upsertOne((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionInProgress
            }), state) : gitProgressIndicatorAdapter.upsertOne({
                workspaceId: gitCommitState.workspaceId,
                activeFlowName: ActiveFlowName.Commit,
                progressState: ProgressState.GitActionInProgress,
                activeFlowState: GitProgressIndicatorState.CommitFlowInProgress,
                isIntermidiateStep: !1
            }, state);
        }), (0, ngrx_store.on)(commitToGitSuccess, function(state, _a) {
            var currentState = state.entities[_a.gitCommitStateWithResponse.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionDone
            }), state) : state;
        }), (0, ngrx_store.on)(commitToGitFailure, commitToGitFailureServerError, function(state, _a) {
            var currentState = state.entities[_a.gitCommitState.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                activeFlowState: GitProgressIndicatorState.None,
                progressState: ProgressState.None,
                isIntermidiateStep: !1
            }), state) : state;
        }), (0, ngrx_store.on)(undoFromGit, function(state, _a) {
            return gitProgressIndicatorAdapter.upsertOne({
                workspaceId: _a.gitUndoState.workspaceId,
                activeFlowName: ActiveFlowName.Undo,
                activeFlowState: GitProgressIndicatorState.UndoFlowInProgress,
                isIntermidiateStep: !1,
                progressState: ProgressState.GitActionStart
            }, state);
        }), (0, ngrx_store.on)(undoFromGitInProgress, function(state, _a) {
            var gitUndoState = _a.gitUndoState, currentState = state.entities[gitUndoState.workspaceId];
            return currentState && isSameSession(ActiveFlowName.Undo, currentState) ? gitProgressIndicatorAdapter.upsertOne((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionInProgress
            }), state) : gitProgressIndicatorAdapter.upsertOne({
                workspaceId: gitUndoState.workspaceId,
                activeFlowName: ActiveFlowName.Undo,
                progressState: ProgressState.GitActionInProgress,
                activeFlowState: GitProgressIndicatorState.UndoFlowInProgress,
                isIntermidiateStep: !1
            }, state);
        }), (0, ngrx_store.on)(undoFromGitSuccess, function(state, _a) {
            var currentState = state.entities[_a.gitUndoStateWithResponse.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionDone
            }), state) : state;
        }), (0, ngrx_store.on)(undoFromGitFailure, undoFromGitFailureServerError, function(state, _a) {
            var currentState = state.entities[_a.gitUndoState.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                activeFlowState: GitProgressIndicatorState.None,
                progressState: ProgressState.None,
                isIntermidiateStep: !1
            }), state) : state;
        }), (0, ngrx_store.on)(gitSwitchBranch, function(state, _a) {
            return gitProgressIndicatorAdapter.upsertOne({
                workspaceId: _a.gitSwitchBranchState.workspaceId,
                activeFlowName: ActiveFlowName.SwitchBranch,
                activeFlowState: GitProgressIndicatorState.SwitchBranchFlowInProgress,
                isIntermidiateStep: !1,
                progressState: ProgressState.GitActionStart
            }, state);
        }), (0, ngrx_store.on)(gitSwitchBranchInProgress, function(state, _a) {
            var gitSwitchBranchState = _a.gitSwitchBranchState, currentState = state.entities[gitSwitchBranchState.workspaceId];
            return currentState && isSameSession(ActiveFlowName.SwitchBranch, currentState) ? gitProgressIndicatorAdapter.upsertOne((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionInProgress
            }), state) : gitProgressIndicatorAdapter.upsertOne({
                workspaceId: gitSwitchBranchState.workspaceId,
                activeFlowName: ActiveFlowName.SwitchBranch,
                progressState: ProgressState.GitActionInProgress,
                activeFlowState: GitProgressIndicatorState.SwitchBranchFlowInProgress,
                isIntermidiateStep: !1
            }, state);
        }), (0, ngrx_store.on)(gitSwitchBranchSuccess, function(state, _a) {
            var currentState = state.entities[_a.gitSwitchBranchState.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionDone
            }), state) : state;
        }), (0, ngrx_store.on)(gitSwitchBranchFailure, gitSwitchBranchFailureServerError, function(state, _a) {
            var currentState = state.entities[_a.gitSwitchBranchState.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                activeFlowState: GitProgressIndicatorState.None,
                progressState: ProgressState.None,
                isIntermidiateStep: !1
            }), state) : state;
        }), (0, ngrx_store.on)(updateFromGit, function(state, _a) {
            return gitProgressIndicatorAdapter.upsertOne({
                workspaceId: _a.gitUpdateState.workspaceId,
                activeFlowName: ActiveFlowName.Update,
                activeFlowState: _a.isInitialSync ? GitProgressIndicatorState.UpdateInitialFlowInProgress : GitProgressIndicatorState.UpdateFlowInProgress,
                isIntermidiateStep: !1,
                progressState: ProgressState.GitActionStart
            }, state);
        }), (0, ngrx_store.on)(updateFromGitInProgress, function(state, _a) {
            var gitUpdateState = _a.gitUpdateState, currentState = state.entities[gitUpdateState.workspaceId];
            return currentState && isSameSession(ActiveFlowName.Update, currentState) ? gitProgressIndicatorAdapter.upsertOne((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionInProgress
            }), state) : gitProgressIndicatorAdapter.upsertOne({
                workspaceId: gitUpdateState.workspaceId,
                activeFlowName: ActiveFlowName.Update,
                progressState: ProgressState.GitActionInProgress,
                activeFlowState: GitProgressIndicatorState.UpdateFlowInProgress,
                isIntermidiateStep: !1
            }, state);
        }), (0, ngrx_store.on)(updateFromGitSuccess, function(state, _a) {
            var currentState = state.entities[_a.gitUpdateStateWithResponse.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionDone
            }), state) : state;
        }), (0, ngrx_store.on)(updateFromGitFailure, updateFromGitFailureServerError, function(state, _a) {
            var currentState = state.entities[_a.gitUpdateState.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                activeFlowState: GitProgressIndicatorState.None,
                progressState: ProgressState.None,
                isIntermidiateStep: !1
            }), state) : state;
        }), (0, ngrx_store.on)(loadIncomingChanges, loadUncommittedChanges, loadGitStatus, function(state, _a) {
            var currentState = state.entities[_a.workspaceId];
            return _a.isTriggeredByGitAction && (null == currentState ? void 0 : currentState.progressState) === ProgressState.GitActionDone ? gitProgressIndicatorAdapter.upsertOne((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentState), {
                isIntermidiateStep: !0,
                progressState: ProgressState.GitSyncStart
            }), state) : state;
        }), (0, ngrx_store.on)(loadUncommittedChangesSuccess, loadIncomingChangesSuccess, loadGitStatusSuccess, function(state, _a) {
            var currentState = state.entities[_a.gitStatus.workspaceId];
            return (null == currentState ? void 0 : currentState.isIntermidiateStep) && (null == currentState ? void 0 : currentState.progressState) === ProgressState.GitSyncStart ? gitProgressIndicatorAdapter.upsertOne((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentState), {
                activeFlowState: GitProgressIndicatorState.None,
                progressState: ProgressState.GitSyncDone,
                isIntermidiateStep: !1
            }), state) : state;
        }), (0, ngrx_store.on)(loadUncommittedChangesFailure, loadIncomingChangesFailure, loadGitStatusFailure, function(state, _a) {
            var currentState = state.entities[_a.workspaceId];
            return (null == currentState ? void 0 : currentState.isIntermidiateStep) ? gitProgressIndicatorAdapter.upsertOne((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.None,
                isIntermidiateStep: !1
            }), state) : state;
        }), (0, ngrx_store.on)(gitCheckoutBranch, function(state, _a) {
            return gitProgressIndicatorAdapter.upsertOne({
                workspaceId: _a.gitCheckoutBranchState.workspaceId,
                activeFlowName: ActiveFlowName.CheckoutBranch,
                activeFlowState: GitProgressIndicatorState.CheckoutBranchFlowInProgress,
                isIntermidiateStep: !1,
                progressState: ProgressState.GitActionStart
            }, state);
        }), (0, ngrx_store.on)(gitCheckoutBranchSuccess, function(state, _a) {
            var currentState = state.entities[_a.gitCheckoutBranchState.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                progressState: ProgressState.GitActionDone
            }), state) : state;
        }), (0, ngrx_store.on)(gitCheckoutBranchFailure, function(state, _a) {
            var currentState = state.entities[_a.workspaceId];
            return currentState ? gitProgressIndicatorAdapter.upsertOne((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, currentState), {
                activeFlowState: GitProgressIndicatorState.None,
                progressState: ProgressState.None,
                isIntermidiateStep: !1
            }), state) : state;
        }));
        function isSameSession(actionName, currentState) {
            return currentState.activeFlowName === actionName && (currentState.progressState === ProgressState.GitActionStart || currentState.progressState === ProgressState.GitActionInProgress);
        }
        var gitSwitchBranchAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_switch_branch_reducer_initialState = (0, tslib_es6.__assign)({}, gitSwitchBranchAdapter.getInitialState()), gitSwitchBranchReducer = (0, 
        ngrx_store.Lq)(git_switch_branch_reducer_initialState, (0, ngrx_store.on)(gitSwitchBranch, function(state, _a) {
            return gitSwitchBranchAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitSwitchBranchState), {
                response: void 0,
                callState: SwitchBranchState.InProgress
            }), state);
        }), (0, ngrx_store.on)(gitSwitchBranchInProgress, function(state, _a) {
            return gitSwitchBranchAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitSwitchBranchState), {
                callState: SwitchBranchState.InProgress
            }), state);
        }), (0, ngrx_store.on)(gitSwitchBranchSuccess, function(state, _a) {
            var gitSwitchBranchState = _a.gitSwitchBranchState;
            return gitSwitchBranchAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitSwitchBranchState), {
                callState: SwitchBranchState.Completed,
                response: gitSwitchBranchState.response,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(gitSwitchBranchFailureServerError, function(state, _a) {
            return gitSwitchBranchAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitSwitchBranchState), {
                callState: SwitchBranchState.Completed,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(gitSwitchBranchFailure, function(state, _a) {
            var error = _a.error;
            return gitSwitchBranchAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitSwitchBranchState), {
                callState: error,
                notificationId: void 0
            }), state);
        }), (0, ngrx_store.on)(invalidateGitConnectionInitialization, function(state, _a) {
            return gitSwitchBranchAdapter.removeOne(_a.workspaceId, state);
        })), selectGitProviderType = (0, ngrx_store.PH)("[GitSessionStorage] select Git provider type", (0, 
        ngrx_store.Ky)()), selectDatasource = (0, ngrx_store.PH)("[GitSessionStorage] select datasource", (0, 
        ngrx_store.Ky)()), selectTempDatasource = (0, ngrx_store.PH)("[GitSessionStorage] select temp datasource", (0, 
        ngrx_store.Ky)()), setDatasourceUrl = (0, ngrx_store.PH)("[GitSessionStorage] set datasource url", (0, 
        ngrx_store.Ky)()), resetDatasourceUrl = (0, ngrx_store.PH)("[GitSessionStorage] reset datasource url", (0, 
        ngrx_store.Ky)()), selectOrganization = (0, ngrx_store.PH)("[GitSessionStorage] select organization", (0, 
        ngrx_store.Ky)()), selectRepository = (0, ngrx_store.PH)("[GitSessionStorage] select repository", (0, 
        ngrx_store.Ky)()), selectBranch = (0, ngrx_store.PH)("[GitSessionStorage] select branch", (0, 
        ngrx_store.Ky)()), selectRootDirectory = (0, ngrx_store.PH)("[GitSessionStorage] select directory", (0, 
        ngrx_store.Ky)()), selectUserAccount = (0, ngrx_store.PH)("[GitSessionStorage] select userAccount", (0, 
        ngrx_store.Ky)()), configureCredentials = (0, ngrx_store.PH)("[GitSessionStorage] configure credentials", (0, 
        ngrx_store.Ky)()), deleteCredentials = (0, ngrx_store.PH)("[GitSessionStorage] delete credentials", (0, 
        ngrx_store.Ky)()), selectWorkspaceOnCapacity = (0, ngrx_store.PH)("[GitSessionStorage] select workspace capacity", (0, 
        ngrx_store.Ky)()), GitSessionStorageAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), session_storage_reducer_initialState = (0, tslib_es6.__assign)({}, GitSessionStorageAdapter.getInitialState()), gitSessionStorageReducer = (0, 
        ngrx_store.Lq)(session_storage_reducer_initialState, (0, ngrx_store.on)(selectGitProviderType, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedGitProviderType: _a.gitProviderType
            }, state);
        }), (0, ngrx_store.on)(selectDatasource, function(state, _a) {
            var workspaceId = _a.workspaceId, datasourceOID = _a.datasourceOID, currentEntity = state.entities[workspaceId];
            return currentEntity && currentEntity.selectedDatasourceOID === datasourceOID ? state : GitSessionStorageAdapter.upsertOne({
                workspaceId,
                selectedDatasourceOID: datasourceOID
            }, state);
        }), (0, ngrx_store.on)(selectTempDatasource, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedTempDatasourceOID: _a.datasourceOID
            }, state);
        }), (0, ngrx_store.on)(selectOrganization, function(state, _a) {
            var organization = _a.organization;
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedOrganization: organization ? {
                    name: organization,
                    setByDatasource: !1
                } : void 0
            }, state);
        }), (0, ngrx_store.on)(selectRepository, function(state, _a) {
            var repository = _a.repository;
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedRepository: repository ? {
                    name: repository,
                    setByDatasource: !1
                } : void 0
            }, state);
        }), (0, ngrx_store.on)(selectBranch, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedBranch: _a.branch
            }, state);
        }), (0, ngrx_store.on)(selectRootDirectory, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedDirectory: _a.directory
            }, state);
        }), (0, ngrx_store.on)(setDatasourceUrl, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedOrganization: {
                    name: _a.organization,
                    setByDatasource: !0
                },
                selectedRepository: {
                    name: _a.repository,
                    setByDatasource: !0
                }
            }, state);
        }), (0, ngrx_store.on)(resetDatasourceUrl, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedOrganization: void 0,
                selectedRepository: void 0
            }, state);
        }), (0, ngrx_store.on)(selectUserAccount, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                selectedUserAccount: _a.userAccount
            }, state);
        }), (0, ngrx_store.on)(configureCredentials, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                isConfigured: !0
            }, state);
        }), (0, ngrx_store.on)(deleteCredentials, function(state, _a) {
            return GitSessionStorageAdapter.updateOne({
                id: _a.workspaceId,
                changes: {
                    selectedUserAccount: void 0,
                    isConfigured: !1
                }
            }, state);
        }), (0, ngrx_store.on)(loadGitConnectionSuccess, function(state, _a) {
            var _b, _c, _d, gitConnection = _a.gitConnection;
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: gitConnection.workspaceId,
                selectedGitProviderType: null === (_b = gitConnection.gitConnectionDetails) || void 0 === _b ? void 0 : _b.gitProviderType,
                selectedDatasourceOID: null === (_c = gitConnection.gitConnectionDetails) || void 0 === _c ? void 0 : _c.datasourceOID,
                isConfigured: void 0 !== (null === (_d = gitConnection.gitConnectionDetails) || void 0 === _d ? void 0 : _d.datasourceOID)
            }, state);
        }), (0, ngrx_store.on)(deleteGitConnectionSuccess, function(state, _a) {
            return GitSessionStorageAdapter.updateOne({
                id: _a.workspaceId,
                changes: {
                    selectedBranch: void 0,
                    selectedDatasourceOID: void 0,
                    selectedTempDatasourceOID: void 0,
                    selectedGitProviderType: void 0,
                    selectedDirectory: void 0,
                    selectedOrganization: void 0,
                    selectedRepository: void 0,
                    selectedUserAccount: void 0,
                    isConfigured: void 0
                }
            }, state);
        }), (0, ngrx_store.on)(selectWorkspaceOnCapacity, function(state, _a) {
            return GitSessionStorageAdapter.upsertOne({
                workspaceId: _a.workspaceId,
                isWorkspaceOnCapaity: _a.isWorkspaceOnCapacity
            }, state);
        })), branchOutAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_branch_out_reducer_initialState = (0, tslib_es6.__assign)({}, branchOutAdapter.getInitialState()), branchOutReducer = (0, 
        ngrx_store.Lq)(git_branch_out_reducer_initialState, (0, ngrx_store.on)(git_branch_out_actions_gitBranchOut, function(state, _a) {
            return branchOutAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitBranchOutState), {
                response: void 0,
                callState: types_BranchOutState.InProgress
            }), state);
        }), (0, ngrx_store.on)(gitBranchOutSuccess, function(state, _a) {
            var gitBranchOutState = _a.gitBranchOutState;
            return branchOutAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitBranchOutState), {
                callState: types_BranchOutState.InProgress,
                response: gitBranchOutState.response
            }), state);
        }), (0, ngrx_store.on)(gitBranchOutSyncFolder, function(state, _a) {
            var gitBranchOutState = _a.gitBranchOutState;
            return branchOutAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitBranchOutState), {
                callState: types_BranchOutState.InProgress,
                response: gitBranchOutState.response
            }), state);
        }), (0, ngrx_store.on)(git_branch_out_actions_gitBranchOutSyncFolderNoUpdate, function(state, _a) {
            var gitBranchOutState = _a.gitBranchOutState;
            return branchOutAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitBranchOutState), {
                callState: types_BranchOutState.Completed,
                response: gitBranchOutState.response
            }), state);
        }), (0, ngrx_store.on)(gitBranchOutCompleted, function(state, _a) {
            var gitBranchOutState = _a.gitBranchOutState;
            return branchOutAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitBranchOutState), {
                callState: types_BranchOutState.Completed,
                response: gitBranchOutState.response
            }), state);
        }), (0, ngrx_store.on)(gitBranchOutFailure, function(state, _a) {
            var error = _a.error;
            return branchOutAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitBranchOutState), {
                callState: error
            }), state);
        }), (0, ngrx_store.on)(git_branch_out_actions_gitBranchOutStoreInvalidate, function(state, _a) {
            return branchOutAdapter.removeOne(_a.gitBranchOutState.workspaceId, state);
        })), loadDatasources = (0, ngrx_store.PH)("[GitDatasources] Load Datasources", (0, 
        ngrx_store.Ky)()), loadDatasourcesSuccess = (0, ngrx_store.PH)("[GitDatasources] Load Datasources Success", (0, 
        ngrx_store.Ky)()), loadDatasourcesFailure = (0, ngrx_store.PH)("[GitDatasources] Load Datasources Failure", (0, 
        ngrx_store.Ky)()), createDatasource = (0, ngrx_store.PH)("[GitDatasources] Create Datasource", (0, 
        ngrx_store.Ky)()), createDatasourceSuccess = (0, ngrx_store.PH)("[GitDatasources] Create Datasource Success", (0, 
        ngrx_store.Ky)()), createDatasourceFailure = (0, ngrx_store.PH)("[GitDatasources] Create Datasource Failure", (0, 
        ngrx_store.Ky)()), gitDatasourcesAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_datasources_reducer_initialState = (0, tslib_es6.__assign)({}, gitDatasourcesAdapter.getInitialState()), gitDatasourcesReducer = (0, 
        ngrx_store.Lq)(git_datasources_reducer_initialState, (0, ngrx_store.on)(loadDatasources, function(state, _a) {
            return gitDatasourcesAdapter.upsertOne({
                workspaceId: _a.gitDatasourceRequest.workspaceId,
                callState: DatasourceManagementState.InProgress
            }, state);
        }), (0, ngrx_store.on)(loadDatasourcesSuccess, function(state, _a) {
            return gitDatasourcesAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitDatasourcesState), {
                callState: DatasourceManagementState.Completed
            }), state);
        }), (0, ngrx_store.on)(loadDatasourcesFailure, createDatasourceFailure, function(state, _a) {
            return gitDatasourcesAdapter.updateOne({
                id: _a.workspaceId,
                changes: {
                    callState: _a.error
                }
            }, state);
        }), (0, ngrx_store.on)(createDatasource, function(state, _a) {
            return gitDatasourcesAdapter.upsertOne({
                workspaceId: _a.request.workspaceId,
                callState: DatasourceManagementState.InProgress
            }, state);
        })), git_repair_actions_gitRepairItems = (0, ngrx_store.PH)("[GitRepairItems] Repair Items in Git", (0, 
        ngrx_store.Ky)()), gitRepairItemsInProgress = (0, ngrx_store.PH)("[GitRepairItems] Repair Items in Git inProgress", (0, 
        ngrx_store.Ky)()), gitRepairItemsSuccess = (0, ngrx_store.PH)("[GitRepairItems] Repair Items in Git success", (0, 
        ngrx_store.Ky)()), gitRepairItemsFailure = (0, ngrx_store.PH)("[GitRepairItems] Repair Items in Git failure ", (0, 
        ngrx_store.Ky)()), gitRepairAdapter = (0, ngrx_entity.H)({
            selectId: function(item) {
                return item.workspaceId;
            }
        }), git_repair_reducer_initialState = (0, tslib_es6.__assign)({}, gitRepairAdapter.getInitialState()), gitRepairReducer = (0, 
        ngrx_store.Lq)(git_repair_reducer_initialState, (0, ngrx_store.on)(git_repair_actions_gitRepairItems, gitRepairItemsInProgress, function(state, _a) {
            return gitRepairAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitRepairState), {
                callState: types_RepairingItemsState.InProgress
            }), state);
        }), (0, ngrx_store.on)(gitRepairItemsSuccess, function(state, _a) {
            var gitRepairStateWithResponse = _a.gitRepairStateWithResponse;
            return gitRepairAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitRepairStateWithResponse), {
                response: gitRepairStateWithResponse.response,
                callState: types_RepairingItemsState.Completed
            }), state);
        }), (0, ngrx_store.on)(gitRepairItemsFailure, function(state, _a) {
            var error = _a.error;
            return gitRepairAdapter.upsertOne((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, _a.gitRepairState), {
                callState: error,
                notificationId: void 0
            }), state);
        })), reducers = {
            gitStatus: function(state, action) {
                return gitStatusReducer(state, action);
            },
            gitConnection: function(state, action) {
                return gitConnectionReducer(state, action);
            },
            gitCommit: function(state, action) {
                return gitCommitReducer(state, action);
            },
            gitUpdate: function(state, action) {
                return gitUpdateReducer(state, action);
            },
            gitInitialization: function(state, action) {
                return git_initialization_reducer_gitCommitReducer(state, action);
            },
            gitSync: function(state, action) {
                return gitSyncReducer(state, action);
            },
            gitUndo: function(state, action) {
                return gitUndoReducer(state, action);
            },
            gitProgressIndicator: function(state, action) {
                return gitProgressIndicatorReducer(state, action);
            },
            gitSwitchBranch: function(state, action) {
                return gitSwitchBranchReducer(state, action);
            },
            gitSessionStorage: function(state, action) {
                return gitSessionStorageReducer(state, action);
            },
            gitBranchOut: function(state, action) {
                return branchOutReducer(state, action);
            },
            gitDatasources: function(state, action) {
                return gitDatasourcesReducer(state, action);
            },
            gitRepair: function(state, action) {
                return gitRepairReducer(state, action);
            }
        }, getGitState = (0, ngrx_store.ZF)("git"), observable_of = __webpack_require__(11547), operators_map = __webpack_require__(14172), switchMap = __webpack_require__(81905), catchError = __webpack_require__(59822), manifest_src = __webpack_require__(67758), error_src = __webpack_require__(65232), artifact_src = __webpack_require__(12315), GitStatusMode = function(GitStatusMode) {
            return GitStatusMode[GitStatusMode.SingleCall = 0] = "SingleCall", GitStatusMode[GitStatusMode.SeparateCalls = 1] = "SeparateCalls", 
            GitStatusMode;
        }({});
        function parseArtifactType(artifactType) {
            var availableTypes = artifact_src.RG, isValidArtifactType = availableTypes.includes(artifactType);
            if (isValidArtifactType) return artifactType;
            if (!isValidArtifactType) {
                var index = availableTypes.findIndex(function(item) {
                    return artifactType.toLowerCase() === item.toLowerCase();
                });
                if (index >= 0) return availableTypes[index];
            }
            throw Error("Invalid ArtifactType: " + artifactType);
        }
        function convertGitIncomingChangeToModel(gitChange, extensionManifestService) {
            return {
                artifact: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitChange.artifact), {
                    artifactType: extensionManifestService.getFrontendArtifactType(gitChange.artifact.artifactType)
                }),
                remoteChange: {
                    displayName: gitChange.artifact.displayName,
                    changeType: gitChange.gitChangeType
                },
                syncStatus: 0
            };
        }
        function convertGitUncommittedChangeToModel(gitChange, extensionManifestService) {
            var frontendArtifactType = extensionManifestService.getFrontendArtifactType(gitChange.artifact.artifactType);
            return {
                artifact: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitChange.artifact), {
                    artifactType: parseArtifactType(frontendArtifactType)
                }),
                workspaceChange: {
                    displayName: gitChange.artifact.displayName,
                    changeType: gitChange.gitChangeType
                },
                syncStatus: 0
            };
        }
        function makeGitStatus(workspaceId, head, changes, incomingChangesCommitHash) {
            return {
                workspaceId,
                head,
                gitChanges: changes,
                incomingChangesCommitHash: incomingChangesCommitHash || void 0
            };
        }
        var core = __webpack_require__(50423), GitStatusEffects = function() {
            function GitStatusEffects(actions$, gitStatusClient, gitErrorService, extensionManifestService) {
                var _this = this;
                this.actions$ = actions$, this.gitStatusClient = gitStatusClient, this.gitErrorService = gitErrorService, 
                this.extensionManifestService = extensionManifestService, this.loadUncommittedChanges$ = (0, 
                ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(loadUncommittedChanges), (0, operators_map.U)(function(_a) {
                        return _a.workspaceId;
                    }), (0, switchMap.w)(function(workspaceId) {
                        return _this.gitStatusClient.getUncommittedChanges(workspaceId).pipe((0, operators_map.U)(function(uncommittedChanges) {
                            return _this.updateGitStatusWithUncommittedChanges(workspaceId, uncommittedChanges);
                        }), (0, operators_map.U)(function(gitStatus) {
                            return loadUncommittedChangesSuccess({
                                gitStatus
                            });
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Status_Failed", httpError);
                            return (0, observable_of.of)(loadUncommittedChangesFailure({
                                workspaceId,
                                error
                            }));
                        }));
                    }));
                }), this.loadIncomingChanges$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(loadIncomingChanges), (0, operators_map.U)(function(_a) {
                        return _a.workspaceId;
                    }), (0, switchMap.w)(function(workspaceId) {
                        return _this.gitStatusClient.getIncomingChanges(workspaceId).pipe((0, operators_map.U)(function(incomingChanges) {
                            return _this.updateGitStatusWithIncomingChanges(workspaceId, incomingChanges);
                        }), (0, operators_map.U)(function(gitStatus) {
                            return loadIncomingChangesSuccess({
                                gitStatus
                            });
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Status_Failed", httpError);
                            return (0, observable_of.of)(loadIncomingChangesFailure({
                                workspaceId,
                                error
                            }));
                        }));
                    }));
                }), this.loadGitStatus$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(loadGitStatus), (0, operators_map.U)(function(_a) {
                        return _a.workspaceId;
                    }), (0, switchMap.w)(function(workspaceId) {
                        return _this.gitStatusClient.getGitStatus(workspaceId).pipe((0, operators_map.U)(function(gitStatusResponse) {
                            return _this.gitStatusContractToModel(workspaceId, gitStatusResponse);
                        }), (0, operators_map.U)(function(gitStatus) {
                            return loadGitStatusSuccess({
                                gitStatus
                            });
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Status_Failed", httpError);
                            return (0, observable_of.of)(loadGitStatusFailure({
                                workspaceId,
                                error
                            }));
                        }));
                    }));
                });
            }
            return GitStatusEffects.prototype.updateGitStatusWithIncomingChanges = function(workspaceId, incomingChangesContract) {
                var incomingChanges = function(incomingChangesContract, extensionManifestService) {
                    for (var incomingChanges = [], _i = 0, _a = incomingChangesContract.changes; _i < _a.length; _i++) incomingChanges.push(convertGitIncomingChangeToModel(_a[_i], extensionManifestService));
                    return incomingChanges;
                }(incomingChangesContract, this.extensionManifestService);
                return makeGitStatus(workspaceId, incomingChangesContract.head, incomingChanges, incomingChangesContract.targetCommit.commitId);
            }, GitStatusEffects.prototype.updateGitStatusWithUncommittedChanges = function(workspaceId, uncommittedChangesContract) {
                var uncommittedChanges = function(uncommittedChangesContract, extensionManifestService) {
                    for (var uncommittedChanges = [], _i = 0, _a = uncommittedChangesContract.changes; _i < _a.length; _i++) uncommittedChanges.push(convertGitUncommittedChangeToModel(_a[_i], extensionManifestService));
                    return uncommittedChanges;
                }(uncommittedChangesContract, this.extensionManifestService);
                return makeGitStatus(workspaceId, uncommittedChangesContract.head, uncommittedChanges);
            }, GitStatusEffects.prototype.gitStatusContractToModel = function(workspaceId, gitStatusResponse) {
                var _a, changes = function(gitStatusResponse, extensionManifestService) {
                    var gitStatusChanges = [];
                    if (null == gitStatusResponse.changes) return gitStatusChanges;
                    for (var _i = 0, _a = gitStatusResponse.changes; _i < _a.length; _i++) {
                        var change = _a[_i], newChange = change;
                        newChange.artifact.artifactType = extensionManifestService.getFrontendArtifactType(change.artifact.artifactType), 
                        gitStatusChanges.push(newChange);
                    }
                    return gitStatusChanges;
                }(gitStatusResponse, this.extensionManifestService);
                return makeGitStatus(workspaceId, gitStatusResponse.head, changes, null === (_a = gitStatusResponse.targetCommit) || void 0 === _a ? void 0 : _a.commitId);
            }, GitStatusEffects.\u0275fac = function(t) {
                return new (t || GitStatusEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.mK), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](manifest_src.vC));
            }, GitStatusEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitStatusEffects,
                factory: GitStatusEffects.\u0275fac
            }), GitStatusEffects;
        }(), empty = __webpack_require__(37272), notification_src = __webpack_require__(12385), feature_switch_service = __webpack_require__(94771), getGitConnectionStoreState = (0, 
        ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitConnection) || git_connection_reducer_initialState;
        }), _a = gitConnectionAdapter.getSelectors(), selectAll = _a.selectAll, selectEntities = _a.selectEntities, getAllGitConnectionEntities = ((0, 
        ngrx_store.P1)(getGitConnectionStoreState, function(state) {
            return selectAll(state);
        }), (0, ngrx_store.P1)(getGitConnectionStoreState, function(state) {
            return selectEntities(state);
        })), getWorkspaceGitConnection = function(workspaceId) {
            return (0, ngrx_store.P1)(getAllGitConnectionEntities, function(entities) {
                return entities[workspaceId];
            });
        };
        function getGitStatusActions(workspaceId, isTriggeredByGitAction, gitStatusApiEnabled) {
            return gitStatusApiEnabled ? [ loadGitStatus({
                workspaceId,
                isTriggeredByGitAction
            }) ] : [ loadIncomingChanges({
                workspaceId,
                isTriggeredByGitAction
            }), loadUncommittedChanges({
                workspaceId,
                isTriggeredByGitAction
            }) ];
        }
        var GitConnectionEffects = function() {
            function GitConnectionEffects(actions$, gitConnectionDetailsClient, gitErrorService, gitNotificationService, extensionManifestService, store, featureSwitchService) {
                var _this = this;
                this.actions$ = actions$, this.gitConnectionDetailsClient = gitConnectionDetailsClient, 
                this.gitErrorService = gitErrorService, this.gitNotificationService = gitNotificationService, 
                this.extensionManifestService = extensionManifestService, this.store = store, this.featureSwitchService = featureSwitchService, 
                this.ensureGitConnection$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(ensureGitConnection), (0, operators_map.U)(function(_a) {
                        return _a.workspaceId;
                    }), (0, ngrx_effects.IC)(function(workspaceId) {
                        return _this.store.select(getWorkspaceGitConnection(workspaceId));
                    }), (0, switchMap.w)(function(_a) {
                        var workspaceId = _a[0], gitConnection = _a[1];
                        return (null == gitConnection ? void 0 : gitConnection.gitConnectionDetails) && gitConnection.callState === ConnectionOperationState.Completed || !(null == gitConnection ? void 0 : gitConnection.gitConnectionDetails) && (0, 
                        git_src.pb)(null == gitConnection ? void 0 : gitConnection.callState) ? empty.E : (0, 
                        observable_of.of)(loadGitConnection({
                            workspaceId
                        }));
                    }));
                }), this.loadGitConnection$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(loadGitConnection), (0, operators_map.U)(function(_a) {
                        return _a.workspaceId;
                    }), (0, switchMap.w)(function(workspaceId) {
                        return _this.gitConnectionDetailsClient.getGitConnectionDetails(workspaceId).pipe((0, 
                        operators_map.U)(function(gitConnectionDetailsContract) {
                            return _this.gitConnectionContractToModel(workspaceId, gitConnectionDetailsContract);
                        }), (0, operators_map.U)(function(gitConnection) {
                            return loadGitConnectionSuccess({
                                gitConnection
                            });
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Connect_Failed", httpError);
                            return (0, observable_of.of)(loadGitConnectionFailure({
                                workspaceId,
                                error
                            }));
                        }));
                    }));
                }), this.saveGitConnection$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(saveGitConnection), (0, operators_map.U)(function(_a) {
                        return _a.gitConnection;
                    }), (0, switchMap.w)(function(gitConnection) {
                        if (!gitConnection.gitConnectionDetails) {
                            var error = _this.gitErrorService.makeClientSideGitError("Git_Invalid_Connection_Details");
                            return _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Git_Invalid_Connection_Details_Title"), 
                            (0, observable_of.of)(saveGitConnectionFailure({
                                gitConnection,
                                error
                            }));
                        }
                        var loadingNotificationId = _this.gitNotificationService.showLoadingNotification("Trident_Git_Toast_Connect_Loading");
                        return _this.gitConnectionDetailsClient.setGitConnectionDetails(gitConnection.workspaceId, gitConnection.gitConnectionDetails).pipe((0, 
                        operators_map.U)(function() {
                            return _this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Connect_Success", loadingNotificationId), 
                            saveGitConnectionSuccess({
                                gitConnection
                            });
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Connect_Failed", httpError);
                            return (0, git_src.yG)(error) ? _this.gitNotificationService.hideCurrentNotification() : _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Git_Invalid_Connection_Details_Title", loadingNotificationId), 
                            (0, observable_of.of)(saveGitConnectionFailure({
                                gitConnection,
                                error
                            }));
                        }));
                    }));
                }), this.gitCheckoutBranch$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(gitCheckoutBranch), (0, operators_map.U)(function(_a) {
                        return _a.gitCheckoutBranchState;
                    }), (0, switchMap.w)(function(gitCheckoutBranchState) {
                        return _this.gitConnectionDetailsClient.checkoutBranch(gitCheckoutBranchState.workspaceId, gitCheckoutBranchState.request).pipe((0, 
                        switchMap.w)(function() {
                            var _a;
                            return _this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_CheckoutBranch_Success"), 
                            (0, tslib_es6.__spreadArray)([ gitCheckoutBranchSuccess({
                                gitCheckoutBranchState
                            }), git_sync_actions_getLatestGitAlmOperation({
                                workspaceId: gitCheckoutBranchState.workspaceId
                            }) ], getGitStatusActions(gitCheckoutBranchState.workspaceId, !0, null !== (_a = _this.featureSwitchService.featureSwitches.tridentGitStatusAPI) && void 0 !== _a && _a), !0);
                        }), (0, catchError.K)(function(httpError) {
                            var gitError = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Checkout_Branch_Failed", httpError);
                            return (0, git_src.xT)(gitError, "Git_BranchNameAlreadyExists") || _this.gitNotificationService.showErrorNotification(gitError, "Trident_Git_Error_Git_Checkout_Branch_Failed_Title"), 
                            (0, observable_of.of)(gitCheckoutBranchFailure({
                                workspaceId: gitCheckoutBranchState.workspaceId,
                                error: gitError
                            }));
                        }));
                    }));
                }), this.deleteGitConnection$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(deleteGitConnection), (0, operators_map.U)(function(_a) {
                        return _a.workspaceId;
                    }), (0, switchMap.w)(function(workspaceId) {
                        var loadingNotificationId = _this.gitNotificationService.showLoadingNotification("Trident_Git_Toast_Disconnect_Loading_Title", "Trident_Git_Toast_Disconnect_Loading_Message");
                        return _this.gitConnectionDetailsClient.deleteGitConnectionDetails(workspaceId).pipe((0, 
                        switchMap.w)(function() {
                            return _this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Disconnect_Success", loadingNotificationId), 
                            [ deleteGitConnectionSuccess({
                                workspaceId
                            }), invalidateGitConnectionInitialization({
                                workspaceId
                            }), invalidateGitSync({
                                workspaceId
                            }), invalidateGitStatus({
                                workspaceId
                            }) ];
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Connect_Failed", httpError);
                            return _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Git_Disconnect_Failed_Title", loadingNotificationId), 
                            (0, observable_of.of)(deleteGitConnectionFailure({
                                workspaceId,
                                error
                            }));
                        }));
                    }));
                });
            }
            return GitConnectionEffects.prototype.gitConnectionContractToModel = function(workspaceId, gitConnectionDetails) {
                var datasourceOID = gitConnectionDetails.datasourceOID;
                return {
                    workspaceId,
                    gitConnectionDetails: {
                        gitProviderType: gitConnectionDetails.gitProviderType,
                        organizationName: gitConnectionDetails.organizationName,
                        projectName: gitConnectionDetails.projectName,
                        repositoryName: gitConnectionDetails.repositoryName,
                        branchName: gitConnectionDetails.branchName,
                        rootDirectory: gitConnectionDetails.rootDirectory,
                        head: gitConnectionDetails.head,
                        isInitialized: !!gitConnectionDetails.isInitialized,
                        lastSyncTime: gitConnectionDetails.lastSyncTime,
                        supportedArtifactTypeNames: this.ConvertArtifactNamesBackendToFrontEnd(gitConnectionDetails.supportedArtifactTypeNames),
                        datasourceOID
                    }
                };
            }, GitConnectionEffects.prototype.ConvertArtifactNamesBackendToFrontEnd = function(backendArtifactNames) {
                var _this = this;
                if (backendArtifactNames) return backendArtifactNames.map(function(backendArtifactName) {
                    return _this.extensionManifestService.getFrontendArtifactType(backendArtifactName);
                });
            }, GitConnectionEffects.\u0275fac = function(t) {
                return new (t || GitConnectionEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.i), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn), core["\u0275\u0275inject"](manifest_src.vC), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](feature_switch_service.V$));
            }, GitConnectionEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitConnectionEffects,
                factory: GitConnectionEffects.\u0275fac
            }), GitConnectionEffects;
        }(), combineLatest = __webpack_require__(59017), filter = __webpack_require__(59973), take = __webpack_require__(48787), getGitStatusStoreState = (0, 
        ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitStatus) || initialState;
        }), git_status_selectors_a = gitStatusAdapter.getSelectors(), git_status_selectors_selectAll = git_status_selectors_a.selectAll, git_status_selectors_selectEntities = git_status_selectors_a.selectEntities, getAllGitStatusEntities = ((0, 
        ngrx_store.P1)(getGitStatusStoreState, function(state) {
            return git_status_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitStatusStoreState, function(state) {
            return git_status_selectors_selectEntities(state);
        })), getWorkspaceGitStatus = function(workspaceId) {
            return (0, ngrx_store.P1)(getAllGitStatusEntities, function(entities) {
                return entities[workspaceId];
            });
        }, GitStatusFacade = function() {
            function GitStatusFacade(store) {
                this.store = store;
            }
            return GitStatusFacade.prototype.getGitStatus = function(workspaceId) {
                return this.store.select(getWorkspaceGitStatus(workspaceId));
            }, GitStatusFacade.prototype.loadGitStatus = function(workspaceId) {
                return this.store.dispatch(loadGitStatus({
                    workspaceId
                })), this.getGitStatus(workspaceId);
            }, GitStatusFacade.prototype.getStatusLoadingState = function(workspaceId) {
                return this.store.select(getWorkspaceGitStatus(workspaceId)).pipe((0, operators_map.U)(function(gitStatus) {
                    var _a;
                    return null !== (_a = null == gitStatus ? void 0 : gitStatus.statusCallState) && void 0 !== _a ? _a : LoadingState.Initial;
                }));
            }, GitStatusFacade.prototype.getAllChanges = function(workspaceId) {
                return this.getGitStatus(workspaceId).pipe((0, operators_map.U)(function(gitStatus) {
                    var _a;
                    return null !== (_a = null == gitStatus ? void 0 : gitStatus.gitChanges) && void 0 !== _a ? _a : [];
                }));
            }, GitStatusFacade.prototype.getUncommittedChanges = function(workspaceId) {
                return this.getGitStatus(workspaceId).pipe((0, operators_map.U)(function(gitStatus) {
                    var _a, _b;
                    return null !== (_b = null === (_a = null == gitStatus ? void 0 : gitStatus.gitChanges) || void 0 === _a ? void 0 : _a.filter(function(change) {
                        return change.workspaceChange;
                    })) && void 0 !== _b ? _b : [];
                }));
            }, GitStatusFacade.prototype.loadUncommittedChanges = function(workspaceId) {
                return this.store.dispatch(loadUncommittedChanges({
                    workspaceId
                })), this.getUncommittedChanges(workspaceId);
            }, GitStatusFacade.prototype.getUncommittedChangesLoadingState = function(workspaceId) {
                return this.store.select(getWorkspaceGitStatus(workspaceId)).pipe((0, operators_map.U)(function(gitStatus) {
                    return gitStatus && gitStatus.uncommittedChangesCallState || LoadingState.Initial;
                }));
            }, GitStatusFacade.prototype.getUncommittedArtifactsSelectionState = function(workspaceId) {
                return this.store.select(getWorkspaceGitStatus(workspaceId)).pipe((0, operators_map.U)(function(gitStatus) {
                    return gitStatus && gitStatus.uncommittedChangesArtifactSelectionState || {
                        selectedArtifacts: []
                    };
                }));
            }, GitStatusFacade.prototype.setChangesArtifactSelection = function(workspaceId, artifactId, logicalId, isChecked) {
                this.store.dispatch(setChangesArtifactSelection({
                    workspaceId,
                    artifactId,
                    logicalId,
                    isChecked
                }));
            }, GitStatusFacade.prototype.clearChangesArtifactSelection = function(workspaceId) {
                this.store.dispatch(clearChangesArtifactSelection({
                    workspaceId
                }));
            }, GitStatusFacade.prototype.getIncomingChanges = function(workspaceId) {
                return this.getGitStatus(workspaceId).pipe((0, operators_map.U)(function(gitStatus) {
                    var _a, _b;
                    return null !== (_b = null === (_a = null == gitStatus ? void 0 : gitStatus.gitChanges) || void 0 === _a ? void 0 : _a.filter(function(change) {
                        return change.remoteChange;
                    })) && void 0 !== _b ? _b : [];
                }));
            }, GitStatusFacade.prototype.loadIncomingChanges = function(workspaceId) {
                return this.store.dispatch(loadIncomingChanges({
                    workspaceId
                })), this.getIncomingChanges(workspaceId);
            }, GitStatusFacade.prototype.getIncomingChangesLoadingState = function(workspaceId) {
                return this.store.select(getWorkspaceGitStatus(workspaceId)).pipe((0, operators_map.U)(function(gitStatus) {
                    return gitStatus && gitStatus.incomingChangesCallState || LoadingState.Initial;
                }));
            }, GitStatusFacade.prototype.getIncomingChangesCommitId = function(workspaceId) {
                return this.store.select(getWorkspaceGitStatus(workspaceId)).pipe((0, operators_map.U)(function(gitStatus) {
                    return null == gitStatus ? void 0 : gitStatus.incomingChangesCommitHash;
                }));
            }, GitStatusFacade.\u0275fac = function(t) {
                return new (t || GitStatusFacade)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitStatusFacade.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitStatusFacade,
                factory: GitStatusFacade.\u0275fac,
                providedIn: "root"
            }), GitStatusFacade;
        }(), getGitCommitStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitCommit) || git_commit_reducer_initialState;
        }), git_commit_selectors_a = gitCommitAdapter.getSelectors(), git_commit_selectors_selectAll = git_commit_selectors_a.selectAll, git_commit_selectors_selectEntities = git_commit_selectors_a.selectEntities, getAllGitCommitEntities = ((0, 
        ngrx_store.P1)(getGitCommitStoreState, function(state) {
            return git_commit_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitCommitStoreState, function(state) {
            return git_commit_selectors_selectEntities(state);
        })), GitCommitEffects = function() {
            function GitCommitEffects(actions$, gitCommitClient, gitErrorService, gitNotificationService, extensionManifestService, gitStatusFacade, store, featureSwitchService) {
                var _this = this;
                this.actions$ = actions$, this.gitCommitClient = gitCommitClient, this.gitErrorService = gitErrorService, 
                this.gitNotificationService = gitNotificationService, this.extensionManifestService = extensionManifestService, 
                this.gitStatusFacade = gitStatusFacade, this.store = store, this.featureSwitchService = featureSwitchService, 
                this.commitToGit$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(git_commit_actions_commitToGit), (0, 
                    operators_map.U)(function(_a) {
                        var gitCommitState = _a.gitCommitState, isInitialSync = _a.isInitialSync, loadingNotificationId = _this.gitNotificationService.showLoadingNotification(isInitialSync ? "Trident_Git_Toast_Initial_Commit_Loading" : "Trident_Git_Toast_Commit_Loading_Title", isInitialSync ? void 0 : "Trident_Git_Toast_Commit_Loading_Message");
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitCommitState), {
                            isInitialSync,
                            notificationId: loadingNotificationId
                        });
                    }), (0, switchMap.w)(function(gitCommitStateWithNotification) {
                        return (0, combineLatest.aj)([ _this.gitCommitClient.commitArtifacts(gitCommitStateWithNotification.workspaceId, _this.fromGitCommitContractToGitCommitRequest(gitCommitStateWithNotification.request)) ]).pipe((0, 
                        switchMap.w)(function(_a) {
                            var gitCommitContractResponse = _a[0], gitCommitStateWithResponse = (0, tslib_es6.__assign)((0, 
                            tslib_es6.__assign)({}, gitCommitStateWithNotification), {
                                response: {
                                    almAction: gitCommitContractResponse.almOperation,
                                    responseDate: gitCommitContractResponse.responseDate
                                }
                            });
                            return [ commitToGitInProgress({
                                gitCommitState: gitCommitStateWithResponse
                            }) ];
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse(" Git_Commit_Invalid_Request", httpError);
                            return (null == gitCommitStateWithNotification ? void 0 : gitCommitStateWithNotification.notificationId) && (_this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Commit_Title", gitCommitStateWithNotification.notificationId), 
                            _this.gitErrorService.showErrorHandlingDialog(error)), (0, observable_of.of)(commitToGitFailure({
                                gitCommitState: gitCommitStateWithNotification,
                                error
                            }));
                        }));
                    }));
                }), this.getLatestGitAlmOperationSuccess$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(getLatestGitAlmOperationSuccess), (0, 
                    operators_map.U)(function(_a) {
                        return _a.gitSyncState;
                    }), (0, filter.h)(function(latestGitOp) {
                        return _this.isLatestOpValid(latestGitOp);
                    }), (0, switchMap.w)(function(gitSyncState) {
                        return _this.store.select((workspaceId = gitSyncState.workspaceId, (0, ngrx_store.P1)(getAllGitCommitEntities, function(entities) {
                            return entities[workspaceId];
                        }))).pipe((0, take.q)(1), (0, switchMap.w)(function(gitCommitState) {
                            return _this.getActions(gitSyncState, gitCommitState);
                        }));
                        var workspaceId;
                    }));
                });
            }
            return GitCommitEffects.prototype.isLatestOpValid = function(latestGitOp) {
                return !!(null == latestGitOp ? void 0 : latestGitOp.isValid) && latestGitOp.gitOperationType === git_src.u9.Commit;
            }, GitCommitEffects.prototype.getActions = function(latestGitOp, gitCommitRecord) {
                var _a, gitCommitState = gitCommitRecord && gitCommitRecord.workspaceId === latestGitOp.workspaceId ? {
                    workspaceId: gitCommitRecord.workspaceId,
                    request: gitCommitRecord.request,
                    response: null == gitCommitRecord ? void 0 : gitCommitRecord.response,
                    isInitialSync: null == gitCommitRecord ? void 0 : gitCommitRecord.isInitialSync,
                    notificationId: null == gitCommitRecord ? void 0 : gitCommitRecord.notificationId
                } : {
                    workspaceId: latestGitOp.workspaceId,
                    request: void 0
                };
                switch (latestGitOp.gitOperationStatus) {
                  case git_src.wM.Successful:
                    return (null == gitCommitRecord ? void 0 : gitCommitRecord.notificationId) && this.gitNotificationService.showSuccessNotification((null == gitCommitRecord ? void 0 : gitCommitRecord.isInitialSync) ? "Trident_Git_Toast_Initial_Action_Success" : "Trident_Git_Toast_Commit_Success", gitCommitRecord.notificationId), 
                    this.gitStatusFacade.clearChangesArtifactSelection(gitCommitState.workspaceId), 
                    (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([ commitToGitSuccess({
                        gitCommitStateWithResponse: gitCommitState
                    }) ], getGitStatusActions(gitCommitState.workspaceId, !0, null !== (_a = this.featureSwitchService.featureSwitches.tridentGitStatusAPI) && void 0 !== _a && _a), !0), [ invalidateGitSync({
                        workspaceId: gitCommitState.workspaceId
                    }) ], !1);

                  case git_src.wM.InProgress:
                    return [ commitToGitInProgress({
                        gitCommitState
                    }) ];

                  case git_src.wM.Failed:
                    var error = this.gitErrorService.handleAlmGitError("AlmOperationFailed_CommitToGit", latestGitOp);
                    return (null == gitCommitRecord ? void 0 : gitCommitRecord.notificationId) && (this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Commit_Title", gitCommitRecord.notificationId), 
                    this.gitErrorService.showErrorHandlingDialog(error)), [ commitToGitFailureServerError({
                        gitCommitState
                    }), invalidateGitSync({
                        workspaceId: gitCommitState.workspaceId
                    }) ];
                }
                return [ commitToGitInProgress({
                    gitCommitState
                }) ];
            }, GitCommitEffects.prototype.fromGitCommitContractToGitCommitRequest = function(gitCommitRequestModel) {
                var _this = this;
                return {
                    artifacts: gitCommitRequestModel.artifacts.map(function(artifact) {
                        return _this.fromGitArtifactChangeToArtifactSelector(artifact);
                    }),
                    workspaceHead: gitCommitRequestModel.workspaceHead,
                    comment: gitCommitRequestModel.comment
                };
            }, GitCommitEffects.prototype.fromGitArtifactChangeToArtifactSelector = function(gitArtifactChange) {
                var gitArtifact = gitArtifactChange.artifact;
                return {
                    artifactType: this.extensionManifestService.getBackendArtifactType(gitArtifact.artifactType),
                    etag: gitArtifact.etag,
                    objectId: gitArtifact.objectId,
                    logicalId: gitArtifact.logicalId,
                    changeType: gitArtifactChange.workspaceChange.changeType
                };
            }, GitCommitEffects.\u0275fac = function(t) {
                return new (t || GitCommitEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.ce), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn), core["\u0275\u0275inject"](manifest_src.vC), core["\u0275\u0275inject"](GitStatusFacade), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](feature_switch_service.V$));
            }, GitCommitEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitCommitEffects,
                factory: GitCommitEffects.\u0275fac
            }), GitCommitEffects;
        }(), dialog_src = __webpack_require__(32980), dialog = (__webpack_require__(17177), 
        __webpack_require__(94228), __webpack_require__(14977), __webpack_require__(95228), 
        __webpack_require__(32293)), registry_src = __webpack_require__(41838), AlmGitOperationType = function(AlmGitOperationType) {
            return AlmGitOperationType[AlmGitOperationType.CommitToGit = 100] = "CommitToGit", 
            AlmGitOperationType[AlmGitOperationType.UpdateFromGit = 101] = "UpdateFromGit", 
            AlmGitOperationType[AlmGitOperationType.InitializeWorkspaceGitConnection = 102] = "InitializeWorkspaceGitConnection", 
            AlmGitOperationType[AlmGitOperationType.Undo = 103] = "Undo", AlmGitOperationType[AlmGitOperationType.CheckoutBranch = 104] = "CheckoutBranch", 
            AlmGitOperationType[AlmGitOperationType.SwitchBranch = 105] = "SwitchBranch", AlmGitOperationType;
        }({}), AlmOperationStatus = function(AlmOperationStatus) {
            return AlmOperationStatus[AlmOperationStatus.NonFinalBase = 0] = "NonFinalBase", 
            AlmOperationStatus[AlmOperationStatus.FinalBase = 1001] = "FinalBase", AlmOperationStatus[AlmOperationStatus.FinalSuccessBase = 1001] = "FinalSuccessBase", 
            AlmOperationStatus[AlmOperationStatus.FinalErrorBase = 2001] = "FinalErrorBase", 
            AlmOperationStatus[AlmOperationStatus.Created = 0] = "Created", AlmOperationStatus[AlmOperationStatus.Approval_Pending = 10] = "Approval_Pending", 
            AlmOperationStatus[AlmOperationStatus.Execution_Pending = 20] = "Execution_Pending", 
            AlmOperationStatus[AlmOperationStatus.Executing_Running = 30] = "Executing_Running", 
            AlmOperationStatus[AlmOperationStatus.Succeeded = 1001] = "Succeeded", AlmOperationStatus[AlmOperationStatus.SucceededWithWarning_RefreshSkipped = 1011] = "SucceededWithWarning_RefreshSkipped", 
            AlmOperationStatus[AlmOperationStatus.SucceededWithWarning_MissingCredentials = 1012] = "SucceededWithWarning_MissingCredentials", 
            AlmOperationStatus[AlmOperationStatus.Failed_GenericError = 2001] = "Failed_GenericError", 
            AlmOperationStatus[AlmOperationStatus.Failed_GenericDryRunError = 2006] = "Failed_GenericDryRunError", 
            AlmOperationStatus[AlmOperationStatus.Approval_Abandoned = 2011] = "Approval_Abandoned", 
            AlmOperationStatus[AlmOperationStatus.Approval_Rejected = 2012] = "Approval_Rejected", 
            AlmOperationStatus[AlmOperationStatus.Execution_Cancelled = 2021] = "Execution_Cancelled", 
            AlmOperationStatus[AlmOperationStatus.Execution_UnsupportedOperationType = 2031] = "Execution_UnsupportedOperationType", 
            AlmOperationStatus[AlmOperationStatus.Execution_UnsupportedStepType = 2032] = "Execution_UnsupportedStepType", 
            AlmOperationStatus[AlmOperationStatus.Execution_NoSteps = 2033] = "Execution_NoSteps", 
            AlmOperationStatus;
        }({}), InteractionType = function(InteractionType) {
            return InteractionType[InteractionType.SingleOption = 0] = "SingleOption", InteractionType[InteractionType.None = 1] = "None", 
            InteractionType;
        }({}), common = __webpack_require__(77476), dialog_component = __webpack_require__(95825), tri_svg_icon_component = __webpack_require__(74913), tri_pivot_item_component = __webpack_require__(64266), tri_pivot_component = __webpack_require__(94243), tri_checkbox_component = __webpack_require__(10965), tri_radio_button_component = __webpack_require__(37350), tri_radio_group_component = __webpack_require__(89330), localize_pipe = __webpack_require__(55334);
        function GitInteractiveOperationsDialogComponent_tri_pivot_item_7_tri_svg_icon_2_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "tri-svg-icon", 16);
        }
        function GitInteractiveOperationsDialogComponent_tri_pivot_item_7_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-pivot-item", 11)(1, "span", 12), 
            core["\u0275\u0275template"](2, GitInteractiveOperationsDialogComponent_tri_pivot_item_7_tri_svg_icon_2_Template, 1, 0, "tri-svg-icon", 13), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](3, "tri-svg-icon", 14), 
            core["\u0275\u0275elementStart"](4, "span", 15), core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"]()()), 
            2 & rf) {
                var tmp_2_0, tmp_3_0, error_r2 = ctx.$implicit, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("value", error_r2), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275property"]("ngIf", ctx_r0.isArtifactOptionSelected(error_r2)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("sprite", null == (tmp_2_0 = ctx_r0.localGetArtifactIconFromDict(ctx_r0.getArtifactType(error_r2))) ? null : tmp_2_0.sprite)("name", null == (tmp_3_0 = ctx_r0.localGetArtifactIconFromDict(ctx_r0.getArtifactType(error_r2))) ? null : tmp_3_0.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("aria-label", null == error_r2.failedArtifactMetadata ? null : error_r2.failedArtifactMetadata.artifactDisplayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", null == error_r2.failedArtifactMetadata ? null : error_r2.failedArtifactMetadata.artifactDisplayName, " ");
            }
        }
        function GitInteractiveOperationsDialogComponent_ng_container_13_ng_container_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r8 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0, 19), core["\u0275\u0275elementStart"](1, "tri-checkbox", 20), 
                core["\u0275\u0275listener"]("onChange", function() {
                    core["\u0275\u0275restoreView"](_r8);
                    var ctx_r7 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r7.checkBoxSelectionChanged(ctx_r7.getSingleOption(ctx_r7.displayError)));
                }), core["\u0275\u0275text"](2), core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("checked", ctx_r4.isArtifactOptionSelected(ctx_r4.displayError)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](3, 2, ctx_r4.getSingleOptionMessageKey(ctx_r4.displayError)), " ");
            }
        }
        function GitInteractiveOperationsDialogComponent_ng_container_13_ng_template_2_tri_radio_button_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r12 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "tri-radio-button", 22), core["\u0275\u0275listener"]("change", function() {
                    var option_r10 = core["\u0275\u0275restoreView"](_r12).$implicit, ctx_r11 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r11.radioButtonSelectionChanged(option_r10));
                }), core["\u0275\u0275text"](1), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var option_r10 = ctx.$implicit, ctx_r9 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("value", option_r10.OptionKey)("checked", ctx_r9.isArtifactOptionSelected(ctx_r9.displayError, option_r10)), 
                core["\u0275\u0275attribute"]("role", "radio"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 4, option_r10.OptionMessageKey), " ");
            }
        }
        function GitInteractiveOperationsDialogComponent_ng_container_13_ng_template_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-radio-group"), core["\u0275\u0275template"](1, GitInteractiveOperationsDialogComponent_ng_container_13_ng_template_2_tri_radio_button_1_Template, 3, 6, "tri-radio-button", 21), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", null == ctx_r6.displayError.interactiveOperationInfo ? null : ctx_r6.displayError.interactiveOperationInfo.options);
            }
        }
        function GitInteractiveOperationsDialogComponent_ng_container_13_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, GitInteractiveOperationsDialogComponent_ng_container_13_ng_container_1_Template, 4, 4, "ng-container", 17), 
            core["\u0275\u0275template"](2, GitInteractiveOperationsDialogComponent_ng_container_13_ng_template_2_Template, 2, 1, "ng-template", null, 18, core["\u0275\u0275templateRefExtractor"]), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var _r5 = core["\u0275\u0275reference"](3), ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", 1 === ctx_r1.displayErrorOptionsListSize)("ngIfElse", _r5);
            }
        }
        var GitInteractiveOperationsDialogComponent = function() {
            function GitInteractiveOperationsDialogComponent(extensionManifestService, dialogRef, data) {
                var _a, _b;
                this.extensionManifestService = extensionManifestService, this.dialogRef = dialogRef, 
                this.data = data, this.localGetArtifactIconFromDict = registry_src.zp, this.enabledOptions = new Map, 
                this.displayError = (0, git_src.lz)(this.data.errors), this.displayErrorOptionsListSize = null !== (_b = null === (_a = this.displayError.interactiveOperationInfo) || void 0 === _a ? void 0 : _a.options.length) && void 0 !== _b ? _b : 0, 
                this.InteractionType = InteractionType;
            }
            return GitInteractiveOperationsDialogComponent.prototype.buttonClicked = function(buttonName) {
                if (buttonName === this.data.buttons[0].name) return this.dialogRef.close(this.getInteractiveOperationsOptions(this.enabledOptions));
                this.dialogRef.close();
            }, GitInteractiveOperationsDialogComponent.prototype.getInteractiveOperationsOptions = function(enabledOptions) {
                var optionPerArtifactList = [];
                return enabledOptions.forEach(function(value, key) {
                    optionPerArtifactList.push({
                        artifactLogicalId: key,
                        optionName: value
                    });
                }), {
                    optionPerArtifactList
                };
            }, GitInteractiveOperationsDialogComponent.prototype.convertDialogData = function(data) {
                return {
                    title: data.title,
                    buttons: data.buttons
                };
            }, GitInteractiveOperationsDialogComponent.prototype.onArtifactSelectionChange = function(error) {
                var _a, _b;
                this.displayError = error, this.displayErrorOptionsListSize = null !== (_b = null === (_a = this.displayError.interactiveOperationInfo) || void 0 === _a ? void 0 : _a.options.length) && void 0 !== _b ? _b : 0;
            }, GitInteractiveOperationsDialogComponent.prototype.radioButtonSelectionChanged = function(option) {
                var _a;
                this.enabledOptions.set(null === (_a = this.displayError.failedArtifactMetadata) || void 0 === _a ? void 0 : _a.artifactLogicalId, option.OptionKey), 
                this.data.buttons[0].disabled = this.enabledOptions.size !== this.data.errors.errorsDetails.length;
            }, GitInteractiveOperationsDialogComponent.prototype.checkBoxSelectionChanged = function(option) {
                var _a, _b, _c;
                this.enabledOptions.has(null === (_a = this.displayError.failedArtifactMetadata) || void 0 === _a ? void 0 : _a.artifactLogicalId) ? this.enabledOptions.delete(null === (_b = this.displayError.failedArtifactMetadata) || void 0 === _b ? void 0 : _b.artifactLogicalId) : this.enabledOptions.set(null === (_c = this.displayError.failedArtifactMetadata) || void 0 === _c ? void 0 : _c.artifactLogicalId, option.OptionKey), 
                this.data.buttons[0].disabled = this.enabledOptions.size !== this.data.errors.errorsDetails.length;
            }, GitInteractiveOperationsDialogComponent.prototype.getOptionsListSize = function(error) {
                var _a, _b;
                return null !== (_b = null === (_a = error.interactiveOperationInfo) || void 0 === _a ? void 0 : _a.options.length) && void 0 !== _b ? _b : 0;
            }, GitInteractiveOperationsDialogComponent.prototype.getSingleOption = function(error) {
                var _a;
                return null === (_a = error.interactiveOperationInfo) || void 0 === _a ? void 0 : _a.options[0];
            }, GitInteractiveOperationsDialogComponent.prototype.getSingleOptionMessageKey = function(error) {
                var _a;
                return null === (_a = error.interactiveOperationInfo) || void 0 === _a ? void 0 : _a.options[0].OptionMessageKey;
            }, GitInteractiveOperationsDialogComponent.prototype.isArtifactOptionSelected = function(error, option) {
                var _a, artifactErrorLogicalId = null === (_a = error.failedArtifactMetadata) || void 0 === _a ? void 0 : _a.artifactLogicalId;
                return option ? this.enabledOptions.has(artifactErrorLogicalId) && this.enabledOptions.get(artifactErrorLogicalId) === option.OptionKey : this.enabledOptions.has(artifactErrorLogicalId);
            }, GitInteractiveOperationsDialogComponent.prototype.getArtifactType = function(error) {
                var _a;
                return this.extensionManifestService.getFrontendArtifactType(null === (_a = error.failedArtifactMetadata) || void 0 === _a ? void 0 : _a.artifactType);
            }, GitInteractiveOperationsDialogComponent.\u0275fac = function(t) {
                return new (t || GitInteractiveOperationsDialogComponent)(core["\u0275\u0275directiveInject"](manifest_src.vC), core["\u0275\u0275directiveInject"](dialog.so), core["\u0275\u0275directiveInject"](dialog.WI));
            }, GitInteractiveOperationsDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GitInteractiveOperationsDialogComponent,
                selectors: [ [ "interactive-operations-dialog" ] ],
                decls: 14,
                vars: 11,
                consts: [ [ 3, "dialogData", "closeButtonLabel", "buttonClickEvent" ], [ 1, "subtitle" ], [ 1, "content" ], [ 1, "artifacts" ], [ "linkFormat", "tab", "direction", "vertical", 3, "selectedValue", "selectedValueChange" ], [ "class", "artifact-details", 3, "value", 4, "ngFor", "ngForOf" ], [ 1, "divider" ], [ 1, "options" ], [ "tabindex", "0", 1, "message" ], [ 1, "options-list-container", 3, "ngSwitch" ], [ 4, "ngSwitchCase" ], [ 1, "artifact-details", 3, "value" ], [ 1, "check-mark-icon" ], [ "sprite", "fluentui-icons", "name", "checkmark_12_filled", 4, "ngIf" ], [ "tri-svg-icon-22", "", 1, "artifact-icon", 3, "sprite", "name" ], [ 1, "trimmedTextWithEllipsis" ], [ "sprite", "fluentui-icons", "name", "checkmark_12_filled" ], [ "class", "single-option", 4, "ngIf", "ngIfElse" ], [ "multiOptions", "" ], [ 1, "single-option" ], [ "ng-non-bindable", "", 3, "checked", "onChange" ], [ "ng-non-bindable", "", 3, "value", "checked", "change", 4, "ngFor", "ngForOf" ], [ "ng-non-bindable", "", 3, "value", "checked", "change" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "trident-dialog", 0), core["\u0275\u0275listener"]("buttonClickEvent", function($event) {
                        return ctx.buttonClicked($event);
                    }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275elementStart"](2, "div", 1), 
                    core["\u0275\u0275text"](3), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "div", 2)(5, "div", 3)(6, "tri-pivot", 4), 
                    core["\u0275\u0275listener"]("selectedValueChange", function($event) {
                        return ctx.onArtifactSelectionChange($event);
                    }), core["\u0275\u0275template"](7, GitInteractiveOperationsDialogComponent_tri_pivot_item_7_Template, 6, 6, "tri-pivot-item", 5), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275element"](8, "hr", 6), core["\u0275\u0275elementStart"](9, "div", 7)(10, "div", 8), 
                    core["\u0275\u0275text"](11), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](12, "div", 9), 
                    core["\u0275\u0275template"](13, GitInteractiveOperationsDialogComponent_ng_container_13_Template, 4, 2, "ng-container", 10), 
                    core["\u0275\u0275elementEnd"]()()()()), 2 & rf && (core["\u0275\u0275property"]("dialogData", ctx.convertDialogData(ctx.data))("closeButtonLabel", core["\u0275\u0275pipeBind1"](1, 9, "Cancel_ButtonText")), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate1"](" ", ctx.data.subTitle, " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("selectedValue", ctx.displayError), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx.data.errors.errorsDetails), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275attribute"]("aria-label", null == ctx.displayError.interactiveOperationInfo ? null : ctx.displayError.interactiveOperationInfo.dialogMessage), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", null == ctx.displayError.interactiveOperationInfo ? null : ctx.displayError.interactiveOperationInfo.dialogMessage, " "), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitch", null == ctx.displayError.interactiveOperationInfo ? null : ctx.displayError.interactiveOperationInfo.interactionType), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx.InteractionType.SingleOption));
                },
                dependencies: [ common.NgForOf, common.NgIf, common.NgSwitch, common.NgSwitchCase, dialog_component.v, tri_svg_icon_component.M, tri_pivot_item_component.E, tri_pivot_component.B, tri_checkbox_component.r, tri_radio_button_component.Y, tri_radio_group_component.Z, localize_pipe.Y ],
                styles: [ ".content[_ngcontent-%COMP%]{display:flex;flex-direction:row;gap:16px}.subtitle[_ngcontent-%COMP%]{padding:0 0 16px}.artifacts[_ngcontent-%COMP%]   tri-pivot-item[_ngcontent-%COMP%]{width:220px;padding-bottom:10px;margin-inline-end:10px}.artifacts[_ngcontent-%COMP%]   .tri-pivot-item-tab[_ngcontent-%COMP%]{display:flex;gap:4px}.artifacts[_ngcontent-%COMP%]   .check-mark-icon[_ngcontent-%COMP%]{width:20px}hr.divider[_ngcontent-%COMP%]{border:1px solid var(--colorNeutralStroke1);height:inherit;margin:0}[_nghost-%COMP%]     .tri-pivot-item-tab{display:flex;gap:4px}.message[_ngcontent-%COMP%]{font-size:16px;font-weight:600;padding:0 0 10px}.options-list-container[_ngcontent-%COMP%]{max-height:100px;overflow-y:scroll}" ],
                changeDetection: 0
            }), GitInteractiveOperationsDialogComponent;
        }(), localization_service = __webpack_require__(7452), interactive_operations_service_InteractiveOperationsService = function() {
            function InteractiveOperationsService(dialogService, localizationService) {
                this.dialogService = dialogService, this.localizationService = localizationService;
            }
            return InteractiveOperationsService.prototype.isOptionNotEnabled = function(error) {
                return (0, git_src.lz)(error).workloadErrorCategory === git_src.QJ;
            }, InteractiveOperationsService.prototype.showInteractiveOperationsDialog = function(error, dialogSubTitle, handler) {
                var dialog = function(localizationService, errors, dialogTitle) {
                    var cancelButtonText = localizationService.get("Cancel_ButtonText"), acceptButtonText = localizationService.get("ModalDialogButtonText_Continue"), dialogSubTitle = localizationService.get("Trident_Git_Interactive_Operations_Dialog_Message"), data = {
                        title: localizationService.get(dialogTitle),
                        buttons: [ {
                            name: acceptButtonText,
                            label: acceptButtonText,
                            buttonType: "primary",
                            disabled: !0
                        }, {
                            name: cancelButtonText,
                            label: cancelButtonText,
                            buttonType: null
                        } ],
                        subTitle: dialogSubTitle,
                        errors
                    };
                    return {
                        componentRef: GitInteractiveOperationsDialogComponent,
                        config: {
                            width: "864px",
                            panelClass: "dialog-style",
                            data
                        }
                    };
                }(this.localizationService, error, dialogSubTitle);
                this.dialogService.open(dialog.componentRef, dialog.config).afterClosed().pipe((0, 
                take.q)(1), (0, filter.h)(function(enabledOptions) {
                    return enabledOptions;
                })).subscribe(function(enabledOptions) {
                    handler(error, enabledOptions);
                });
            }, InteractiveOperationsService.\u0275fac = function(t) {
                return new (t || InteractiveOperationsService)(core["\u0275\u0275inject"](dialog_src.uQ), core["\u0275\u0275inject"](localization_service.z));
            }, InteractiveOperationsService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: InteractiveOperationsService,
                factory: InteractiveOperationsService.\u0275fac,
                providedIn: "root"
            }), InteractiveOperationsService;
        }(), getGitUpdateStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitUpdate) || git_update_reducer_initialState;
        }), git_update_selectors_a = gitUpdateAdapter.getSelectors(), git_update_selectors_selectAll = git_update_selectors_a.selectAll, git_update_selectors_selectEntities = git_update_selectors_a.selectEntities, getAllGitUpdateEntities = ((0, 
        ngrx_store.P1)(getGitUpdateStoreState, function(state) {
            return git_update_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitUpdateStoreState, function(state) {
            return git_update_selectors_selectEntities(state);
        })), getWorkspaceGitUpdates = function(workspaceId) {
            return (0, ngrx_store.P1)(getAllGitUpdateEntities, function(entities) {
                return entities[workspaceId];
            });
        }, GitConnectionFacade = function() {
            function GitConnectionFacade(store) {
                this.store = store;
            }
            return GitConnectionFacade.prototype.getGitConnection = function(workspaceId) {
                return this.store.select(getWorkspaceGitConnection(workspaceId));
            }, GitConnectionFacade.prototype.ensureGitConnection = function(workspaceId) {
                return this.store.dispatch(ensureGitConnection({
                    workspaceId
                })), this.getGitConnection(workspaceId);
            }, GitConnectionFacade.prototype.loadGitConnection = function(workspaceId) {
                return this.store.dispatch(loadGitConnection({
                    workspaceId
                })), this.getGitConnection(workspaceId);
            }, GitConnectionFacade.prototype.saveGitConnection = function(gitConnection) {
                return this.store.dispatch(saveGitConnection({
                    gitConnection
                })), (0, observable_of.of)(void 0);
            }, GitConnectionFacade.prototype.deleteGitConnection = function(workspaceId) {
                return this.store.dispatch(deleteGitConnection({
                    workspaceId
                })), (0, observable_of.of)(void 0);
            }, GitConnectionFacade.prototype.checkoutBranch = function(gitCheckoutBranchState) {
                return this.store.dispatch(gitCheckoutBranch({
                    gitCheckoutBranchState
                })), (0, observable_of.of)(void 0);
            }, GitConnectionFacade.prototype.getGitConnectionOperationState = function(workspaceId) {
                return this.store.select(getWorkspaceGitConnection(workspaceId)).pipe((0, operators_map.U)(function(gitConnection) {
                    return gitConnection && gitConnection.callState || ConnectionOperationState.Initial;
                }));
            }, GitConnectionFacade.\u0275fac = function(t) {
                return new (t || GitConnectionFacade)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitConnectionFacade.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitConnectionFacade,
                factory: GitConnectionFacade.\u0275fac,
                providedIn: "root"
            }), GitConnectionFacade;
        }(), GitUpdateFacade = function() {
            function GitUpdateFacade(store) {
                this.store = store;
            }
            return GitUpdateFacade.prototype.updateFromGit = function(gitUpdateState) {
                return this.store.dispatch(updateFromGit({
                    gitUpdateState
                })), this.store.select(getWorkspaceGitUpdates(gitUpdateState.workspaceId));
            }, GitUpdateFacade.prototype.getUpdatingState = function(workspaceId) {
                return this.store.select(getWorkspaceGitUpdates(workspaceId)).pipe((0, operators_map.U)(function(gitUpdateState) {
                    return gitUpdateState && gitUpdateState.callState || UpdatingState.Initial;
                }));
            }, GitUpdateFacade.\u0275fac = function(t) {
                return new (t || GitUpdateFacade)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitUpdateFacade.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitUpdateFacade,
                factory: GitUpdateFacade.\u0275fac,
                providedIn: "root"
            }), GitUpdateFacade;
        }(), GitUpdateEffects = function() {
            function GitUpdateEffects(actions$, gitUpdateClient, gitErrorService, gitNotificationService, interactiveOperationsService, store, extensionManifestService, gitConnectionFacade, gitUpdateFacade, featureSwitchService) {
                var _this = this;
                this.actions$ = actions$, this.gitUpdateClient = gitUpdateClient, this.gitErrorService = gitErrorService, 
                this.gitNotificationService = gitNotificationService, this.interactiveOperationsService = interactiveOperationsService, 
                this.store = store, this.extensionManifestService = extensionManifestService, this.gitConnectionFacade = gitConnectionFacade, 
                this.gitUpdateFacade = gitUpdateFacade, this.featureSwitchService = featureSwitchService, 
                this.updateFromGit$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(updateFromGit), (0, operators_map.U)(function(_a) {
                        var gitUpdateState = _a.gitUpdateState, isInitialSync = _a.isInitialSync, loadingNotificationId = _this.gitNotificationService.showLoadingNotification(isInitialSync ? "Trident_Git_Toast_Initial_Update_Loading" : "Trident_Git_Toast_Update_Loading_Title", isInitialSync ? void 0 : "Trident_Git_Toast_Update_Loading_Message");
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitUpdateState), {
                            isInitialSync,
                            notificationId: loadingNotificationId
                        });
                    }), (0, switchMap.w)(function(gitUpdateStateWithNotification) {
                        return _this.gitUpdateClient.UpdateArtifactsFromGit(gitUpdateStateWithNotification.workspaceId, _this.updateFromGitModelToContract(gitUpdateStateWithNotification.request)).pipe((0, 
                        switchMap.w)(function(gitUpdateContractResponse) {
                            var gitUpdateStateWithResponse = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitUpdateStateWithNotification), {
                                response: {
                                    almAction: gitUpdateContractResponse.almOperation
                                }
                            });
                            return [ updateFromGitInProgress({
                                gitUpdateState: gitUpdateStateWithResponse
                            }) ];
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Update_Invalid_Request", httpError);
                            return (null == gitUpdateStateWithNotification ? void 0 : gitUpdateStateWithNotification.notificationId) && (_this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Update_Title", gitUpdateStateWithNotification.notificationId), 
                            _this.gitErrorService.showErrorHandlingDialog(error)), (0, observable_of.of)(updateFromGitFailure({
                                gitUpdateState: gitUpdateStateWithNotification,
                                error
                            }));
                        }));
                    }));
                }), this.getLatestGitAlmOperationSuccess$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(getLatestGitAlmOperationSuccess), (0, 
                    operators_map.U)(function(_a) {
                        return _a.gitSyncState;
                    }), (0, filter.h)(function(latestGitOp) {
                        return _this.isLatestOpValid(latestGitOp);
                    }), (0, switchMap.w)(function(gitSyncState) {
                        return _this.store.select(getWorkspaceGitUpdates(gitSyncState.workspaceId)).pipe((0, 
                        take.q)(1), (0, switchMap.w)(function(gitUpdateState) {
                            return _this.getActions(gitSyncState, gitUpdateState);
                        }));
                    }));
                });
            }
            return GitUpdateEffects.prototype.isLatestOpValid = function(latestGitOp) {
                return !!(null == latestGitOp ? void 0 : latestGitOp.isValid) && latestGitOp.gitOperationType === git_src.u9.Update;
            }, GitUpdateEffects.prototype.getActions = function(latestGitOp, gitUpdateRecord) {
                var _a, _this = this, gitUpdateState = gitUpdateRecord && gitUpdateRecord.workspaceId === latestGitOp.workspaceId ? {
                    workspaceId: gitUpdateRecord.workspaceId,
                    request: gitUpdateRecord.request,
                    response: null == gitUpdateRecord ? void 0 : gitUpdateRecord.response,
                    isInitialSync: null == gitUpdateRecord ? void 0 : gitUpdateRecord.isInitialSync,
                    notificationId: null == gitUpdateRecord ? void 0 : gitUpdateRecord.notificationId
                } : {
                    workspaceId: latestGitOp.workspaceId,
                    request: void 0
                };
                switch (latestGitOp.gitOperationStatus) {
                  case git_src.wM.Successful:
                    return (null == gitUpdateRecord ? void 0 : gitUpdateRecord.notificationId) && this.gitNotificationService.showSuccessNotification((null == gitUpdateRecord ? void 0 : gitUpdateRecord.notificationId) ? "Trident_Git_Toast_Initial_Action_Success" : "Trident_Git_Toast_Update_Success", gitUpdateRecord.notificationId), 
                    (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([ updateFromGitSuccess({
                        gitUpdateStateWithResponse: gitUpdateState
                    }) ], getGitStatusActions(gitUpdateState.workspaceId, !0, null !== (_a = this.featureSwitchService.featureSwitches.tridentGitStatusAPI) && void 0 !== _a && _a), !0), [ invalidateGitSync({
                        workspaceId: gitUpdateState.workspaceId
                    }) ], !1);

                  case git_src.wM.InProgress:
                    return [ updateFromGitInProgress({
                        gitUpdateState
                    }) ];

                  case git_src.wM.Failed:
                    var error = this.gitErrorService.handleAlmGitError("AlmOperationFailed_UpdateFromGit", latestGitOp);
                    return (null == gitUpdateRecord ? void 0 : gitUpdateRecord.notificationId) && (this.featureSwitchService.featureSwitches.interactiveOperationUI && this.interactiveOperationsService.isOptionNotEnabled(error) ? (this.interactiveOperationsService.showInteractiveOperationsDialog(error, "Trident_Git_Updates_Fail_Message_Bar", function(error, enabledOptions) {
                        return _this.doUpdateFlowWithInteractiveOptions(error, enabledOptions, latestGitOp.workspaceId);
                    }), this.gitNotificationService.hideCurrentNotification()) : (this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Update_Title", gitUpdateRecord.notificationId), 
                    this.gitErrorService.showErrorHandlingDialog(error))), [ updateFromGitFailureServerError({
                        gitUpdateState,
                        error
                    }), invalidateGitSync({
                        workspaceId: gitUpdateState.workspaceId
                    }) ];
                }
                return [ updateFromGitInProgress({
                    gitUpdateState
                }) ];
            }, GitUpdateEffects.prototype.updateFromGitModelToContract = function(model) {
                var _a, treeWithBackendTypes = this.ConvertArtifactTypesInTree(model.artifactMergePolicyInfoTreeList, this.extensionManifestService);
                return {
                    targetCommit: model.targetCommit,
                    workspaceHead: null !== (_a = model.workspaceHead) && void 0 !== _a ? _a : null,
                    ArtifactMergePolicyInfoTreeList: treeWithBackendTypes,
                    retryOperationId: model.retryOperationId,
                    interactiveUpdateOptions: model.interactiveUpdateOptions
                };
            }, GitUpdateEffects.prototype.ConvertArtifactTypesInTree = function(artifactMergePolicyInfoTreeList, extensionManifestService) {
                return artifactMergePolicyInfoTreeList ? artifactMergePolicyInfoTreeList.map(function(tree) {
                    var newTree = (0, tslib_es6.__assign)({}, tree);
                    return "artifact" in newTree.root && (newTree.root = (0, tslib_es6.__assign)((0, 
                    tslib_es6.__assign)({}, newTree.root), {
                        artifact: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, newTree.root.artifact), {
                            artifactType: extensionManifestService.getBackendArtifactType(newTree.root.artifact.artifactType)
                        })
                    })), newTree;
                }) : artifactMergePolicyInfoTreeList;
            }, GitUpdateEffects.prototype.doUpdateFlowWithInteractiveOptions = function(error, enabledOptions, workspaceId) {
                var _this = this;
                this.gitConnectionFacade.getGitConnection(workspaceId).pipe((0, take.q)(1)).subscribe(function(gitConnectionRecord) {
                    var _a, _b, workspaceHead = null === (_a = null == gitConnectionRecord ? void 0 : gitConnectionRecord.gitConnectionDetails) || void 0 === _a ? void 0 : _a.head;
                    _this.gitUpdateFacade.updateFromGit({
                        workspaceId,
                        request: {
                            workspaceHead,
                            targetCommit: void 0,
                            artifactMergePolicyInfoTreeList: void 0,
                            retryOperationId: null === (_b = error.errorInfo) || void 0 === _b ? void 0 : _b.retryOperationId,
                            interactiveUpdateOptions: enabledOptions
                        }
                    });
                });
            }, GitUpdateEffects.\u0275fac = function(t) {
                return new (t || GitUpdateEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.Jv), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn), core["\u0275\u0275inject"](interactive_operations_service_InteractiveOperationsService), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](manifest_src.vC), core["\u0275\u0275inject"](GitConnectionFacade), core["\u0275\u0275inject"](GitUpdateFacade), core["\u0275\u0275inject"](feature_switch_service.V$));
            }, GitUpdateEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitUpdateEffects,
                factory: GitUpdateEffects.\u0275fac
            }), GitUpdateEffects;
        }(), telemetry_service = __webpack_require__(54323), GitInitializationEffects = function() {
            function GitInitializationEffects(actions$, gitInitializationClient, gitErrorService, gitNotificationService, interactiveOperationsService, telemetryService, extensionManifestService) {
                var _this = this;
                this.actions$ = actions$, this.gitInitializationClient = gitInitializationClient, 
                this.gitErrorService = gitErrorService, this.gitNotificationService = gitNotificationService, 
                this.interactiveOperationsService = interactiveOperationsService, this.telemetryService = telemetryService, 
                this.extensionManifestService = extensionManifestService, this.initializeGitConnection$ = (0, 
                ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(initializeGitConnection), (0, operators_map.U)(function(_a) {
                        return _a.gitInitializationState;
                    }), (0, switchMap.w)(function(gitInitializationState) {
                        return _this.gitInitializationClient.initializeGitConnection(gitInitializationState.workspaceId, _this.gitInitializationRequestFromState(gitInitializationState)).pipe((0, 
                        switchMap.w)(function(gitInitializeResponse) {
                            var gitInitializationStateWithResponse = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitInitializationState), {
                                response: gitInitializeResponse
                            });
                            return _this.mapInitializationStateToActions(gitInitializationStateWithResponse);
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Initialization_Failed", httpError);
                            return (0, git_src.E6)(error) || _this.interactiveOperationsService.isOptionNotEnabled(error) || _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Toast_Initialize_Fail"), 
                            (0, observable_of.of)(initializeGitConnectionFailure({
                                gitInitializationState,
                                error
                            }));
                        }));
                    }));
                });
            }
            return GitInitializationEffects.prototype.gitInitializationRequestFromState = function(gitInitializationContract) {
                return {
                    mergePolicy: gitInitializationContract.request.mergePolicy
                };
            }, GitInitializationEffects.prototype.mapInitializationStateToActions = function(state) {
                var _a;
                switch (null === (_a = state.response) || void 0 === _a ? void 0 : _a.result) {
                  case src.xU.Completed:
                    if (state.response.incomingChanges && state.response.incomingChanges.length > 0 || state.response.uncommittedChanges && state.response.uncommittedChanges.length > 0 || !state.response.head) {
                        var error = this.gitErrorService.makeClientSideGitError("Git_Initialization_Invalid_Request");
                        return this.gitNotificationService.showErrorNotification(error, "Trident_Git_Toast_Initialize_Fail"), 
                        [ initializeGitConnectionFailure({
                            gitInitializationState: state,
                            error
                        }) ];
                    }
                    return [ initializeGitConnectionSuccess({
                        gitInitializationStateWithResponse: state
                    }), git_sync_actions_getLatestGitAlmOperation({
                        workspaceId: state.workspaceId
                    }) ];

                  case src.xU.UpdateFromGitRequired:
                    if (!state.response.incomingChanges || !state.response.partialSyncBaseCommit) return error = this.gitErrorService.makeClientSideGitError("Git_Initialization_Invalid_Request"), 
                    this.gitNotificationService.showErrorNotification(error, "Trident_Git_Toast_Initialize_Fail"), 
                    [ initializeGitConnectionFailure({
                        gitInitializationState: state,
                        error
                    }) ];
                    var gitUpdateState = this.createUpdateRequestFromState(state);
                    return this.telemetryService.logEvent({
                        name: "Automatic update after initialization",
                        properties: {
                            workspaceId: state.workspaceId,
                            targetCommit: gitUpdateState.request.targetCommit
                        }
                    }), [ initializeGitConnectionSuccess({
                        gitInitializationStateWithResponse: state
                    }), updateFromGit({
                        gitUpdateState,
                        isInitialSync: !0
                    }) ];

                  case src.xU.CommitToGitRequired:
                    var gitCommitState = this.createCommitRequestFromState(state);
                    return null != gitCommitState ? (this.telemetryService.logEvent({
                        name: "Automatic commit after initialization",
                        properties: {
                            workspaceId: state.workspaceId,
                            workspaceHead: gitCommitState.request.workspaceHead
                        }
                    }), [ initializeGitConnectionSuccess({
                        gitInitializationStateWithResponse: state
                    }), git_commit_actions_commitToGit({
                        gitCommitState,
                        isInitialSync: !0
                    }) ]) : (error = this.gitErrorService.makeClientSideGitError("Git_Initialization_Invalid_Request"), 
                    this.gitNotificationService.showErrorNotification(error, "Trident_Git_Toast_Initialize_Fail"), 
                    [ initializeGitConnectionFailure({
                        gitInitializationState: state,
                        error
                    }) ]);

                  default:
                    return error = this.gitErrorService.makeClientSideGitError("Git_Initialization_Invalid_Request"), 
                    this.gitNotificationService.showErrorNotification(error, "Trident_Git_Toast_Initialize_Fail"), 
                    [ initializeGitConnectionFailure({
                        gitInitializationState: state,
                        error
                    }) ];
                }
            }, GitInitializationEffects.prototype.createUpdateRequestFromState = function(state) {
                var _a, response = state.response;
                return {
                    workspaceId: state.workspaceId,
                    request: {
                        targetCommit: null == response ? void 0 : response.partialSyncBaseCommit,
                        workspaceHead: null !== (_a = null == response ? void 0 : response.head) && void 0 !== _a ? _a : null
                    }
                };
            }, GitInitializationEffects.prototype.createCommitRequestFromState = function(state) {
                var _a, _b, _this = this, head = null === (_a = null == state ? void 0 : state.response) || void 0 === _a ? void 0 : _a.head, uncommittedChangesList = null === (_b = null == state ? void 0 : state.response) || void 0 === _b ? void 0 : _b.uncommittedChanges;
                if (!uncommittedChangesList || !head) return this.gitErrorService.handleClientSideGitError(" Git_Commit_Invalid_Request"), 
                null;
                var items, workspaceId, artifacts = uncommittedChangesList.map(function(uncommittedChange) {
                    return convertGitUncommittedChangeToModel(uncommittedChange, _this.extensionManifestService);
                });
                return {
                    workspaceId: state.workspaceId,
                    request: {
                        workspaceHead: head,
                        artifacts,
                        comment: (items = uncommittedChangesList.length, workspaceId = state.workspaceId, 
                        "Committing ".concat(items.toString(), " ").concat(1 === items ? "item" : "items", " from workspace ").concat(workspaceId))
                    }
                };
            }, GitInitializationEffects.\u0275fac = function(t) {
                return new (t || GitInitializationEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.Zt), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn), core["\u0275\u0275inject"](interactive_operations_service_InteractiveOperationsService), core["\u0275\u0275inject"](telemetry_service.t), core["\u0275\u0275inject"](manifest_src.vC));
            }, GitInitializationEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitInitializationEffects,
                factory: GitInitializationEffects.\u0275fac
            }), GitInitializationEffects;
        }(), GitSyncEffects = function() {
            function GitSyncEffects(actions$, gitSyncClient, gitErrorService) {
                var _this = this;
                this.actions$ = actions$, this.gitSyncClient = gitSyncClient, this.gitErrorService = gitErrorService, 
                this.getLatestGitAlmOperation$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(git_sync_actions_getLatestGitAlmOperation), (0, 
                    switchMap.w)(function(_a) {
                        var workspaceId = _a.workspaceId, isInitial = _a.isInitial;
                        return _this.gitSyncClient.getlatestGitOperation(workspaceId).pipe((0, operators_map.U)(function(gitAlmOperation) {
                            return _this.almOperationToSyncModel(gitAlmOperation, workspaceId, isInitial);
                        }), (0, operators_map.U)(function(gitSyncState) {
                            return getLatestGitAlmOperationSuccess({
                                gitSyncState
                            });
                        }), (0, catchError.K)(function() {
                            var error = _this.gitErrorService.makeClientSideGitError("Git_Sync_Failed");
                            return (0, observable_of.of)(getLatestGitAlmOperationFailure({
                                workspaceId,
                                error
                            }));
                        }));
                    }));
                });
            }
            return GitSyncEffects.prototype.almOperationToSyncModel = function(gitAlmOperation, workspaceId, isInitial) {
                var operationType = this.getGitOperationType(gitAlmOperation.operationType), isValid = "0" !== gitAlmOperation.objectId && void 0 !== operationType, operationStatus = this.getGitOperationStatus(gitAlmOperation.status);
                return {
                    isValid,
                    isInitial: !!isInitial,
                    workspaceId,
                    gitOperationId: gitAlmOperation.operationId,
                    gitOperationType: operationType,
                    gitOperationStatus: operationStatus,
                    lastUpdatedTime: new Date(gitAlmOperation.lastUpdatedTime),
                    gitNonInteractiveOperationErrorDetails: this.getNonInteractiveErrorDetails(gitAlmOperation.gitOperationErrorDetailsList),
                    gitInteractiveOperationErrorDetailsList: this.getInteractiveErrorDetails(gitAlmOperation.gitOperationErrorDetailsList)
                };
            }, GitSyncEffects.prototype.getInteractiveErrorDetails = function(gitOperationErrorDetailsList) {
                if (!gitOperationErrorDetailsList || !gitOperationErrorDetailsList.some(function(error) {
                    var _a;
                    return (null === (_a = error.artifactErrorDetails) || void 0 === _a ? void 0 : _a.ErrorCategory) !== git_src.QJ;
                })) return gitOperationErrorDetailsList;
            }, GitSyncEffects.prototype.getNonInteractiveErrorDetails = function(gitOperationErrorDetailsList) {
                if (gitOperationErrorDetailsList) return gitOperationErrorDetailsList.find(function(error) {
                    var _a;
                    return (null === (_a = error.artifactErrorDetails) || void 0 === _a ? void 0 : _a.ErrorCategory) !== git_src.QJ;
                });
            }, GitSyncEffects.prototype.getGitOperationType = function(almOperationType) {
                switch (almOperationType) {
                  case AlmGitOperationType.CommitToGit:
                    return git_src.u9.Commit;

                  case AlmGitOperationType.UpdateFromGit:
                    return git_src.u9.Update;

                  case AlmGitOperationType.InitializeWorkspaceGitConnection:
                    return git_src.u9.Initialize;

                  case AlmGitOperationType.Undo:
                    return git_src.u9.Undo;

                  case AlmGitOperationType.CheckoutBranch:
                    return git_src.u9.CheckoutBranch;

                  case AlmGitOperationType.SwitchBranch:
                    return git_src.u9.SwitchBranch;

                  default:
                    return;
                }
            }, GitSyncEffects.prototype.getGitOperationStatus = function(almOperationStatus) {
                return almOperationStatus < AlmOperationStatus.FinalBase ? git_src.wM.InProgress : almOperationStatus >= AlmOperationStatus.FinalSuccessBase && almOperationStatus < AlmOperationStatus.FinalErrorBase ? git_src.wM.Successful : git_src.wM.Failed;
            }, GitSyncEffects.\u0275fac = function(t) {
                return new (t || GitSyncEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.WV), core["\u0275\u0275inject"](error_src.jR));
            }, GitSyncEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitSyncEffects,
                factory: GitSyncEffects.\u0275fac
            }), GitSyncEffects;
        }(), getGitUndoStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitUndo) || git_undo_reducer_initialState;
        }), git_undo_selectors_a = gitUndoAdapter.getSelectors(), git_undo_selectors_selectAll = git_undo_selectors_a.selectAll, git_undo_selectors_selectEntities = git_undo_selectors_a.selectEntities, getAllGitUndoEntities = ((0, 
        ngrx_store.P1)(getGitUndoStoreState, function(state) {
            return git_undo_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitUndoStoreState, function(state) {
            return git_undo_selectors_selectEntities(state);
        })), getGitUndoState = function(workspaceId) {
            return (0, ngrx_store.P1)(getAllGitUndoEntities, function(entities) {
                return entities[workspaceId];
            });
        }, GitUndoFacade = function() {
            function GitUndoFacade(store) {
                this.store = store;
            }
            return GitUndoFacade.prototype.UndoFromGit = function(gitUndoState) {
                return this.store.dispatch(undoFromGit({
                    gitUndoState
                })), this.store.select(getGitUndoState(gitUndoState.workspaceId));
            }, GitUndoFacade.prototype.getUndoState = function(workspaceId) {
                return this.store.select(getGitUndoState(workspaceId)).pipe((0, operators_map.U)(function(gitUndoState) {
                    return gitUndoState && gitUndoState.callState || UndoingState.Initial;
                }));
            }, GitUndoFacade.\u0275fac = function(t) {
                return new (t || GitUndoFacade)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitUndoFacade.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitUndoFacade,
                factory: GitUndoFacade.\u0275fac,
                providedIn: "root"
            }), GitUndoFacade;
        }(), GitUndoEffects = function() {
            function GitUndoEffects(actions$, gitUndoClient, gitErrorService, gitNotificationService, interactiveOperationsService, gitUndoFacade, gitStatusFacade, gitConnectionFacade, store, featureSwitchService) {
                var _this = this;
                this.actions$ = actions$, this.gitUndoClient = gitUndoClient, this.gitErrorService = gitErrorService, 
                this.gitNotificationService = gitNotificationService, this.interactiveOperationsService = interactiveOperationsService, 
                this.gitUndoFacade = gitUndoFacade, this.gitStatusFacade = gitStatusFacade, this.gitConnectionFacade = gitConnectionFacade, 
                this.store = store, this.featureSwitchService = featureSwitchService, this.undoFromGit$ = (0, 
                ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(undoFromGit), (0, operators_map.U)(function(_a) {
                        var gitUndoState = _a.gitUndoState, loadingNotificationId = _this.gitNotificationService.showLoadingNotification("Trident_Git_Toast_Undo_Loading_Title", "Trident_Git_Toast_Undo_Loading_Message");
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitUndoState), {
                            notificationId: loadingNotificationId
                        });
                    }), (0, switchMap.w)(function(gitUndoStateWithNotification) {
                        return _this.gitUndoClient.undoCommitArtifacts(gitUndoStateWithNotification.workspaceId, _this.fromGitUndoContractToGitUndoRequest(gitUndoStateWithNotification.request)).pipe((0, 
                        switchMap.w)(function(gitUndoContractResponse) {
                            var gitUndoStateWithResponse = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitUndoStateWithNotification), {
                                response: {
                                    almAciton: gitUndoContractResponse.almOperation
                                }
                            });
                            return [ undoFromGitInProgress({
                                gitUndoState: gitUndoStateWithResponse
                            }) ];
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_InvalidUndoRequest", httpError);
                            return (null == gitUndoStateWithNotification ? void 0 : gitUndoStateWithNotification.notificationId) && (_this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Undo_Title", gitUndoStateWithNotification.notificationId), 
                            _this.gitErrorService.showErrorHandlingDialog(error)), (0, observable_of.of)(undoFromGitFailure({
                                gitUndoState: gitUndoStateWithNotification,
                                error
                            }));
                        }));
                    }));
                }), this.getLatestGitAlmOperationSuccess$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(getLatestGitAlmOperationSuccess), (0, 
                    operators_map.U)(function(_a) {
                        return _a.gitSyncState;
                    }), (0, filter.h)(function(latestGitOp) {
                        return _this.isLatestOpValid(latestGitOp);
                    }), (0, switchMap.w)(function(gitSyncState) {
                        return _this.store.select(getGitUndoState(gitSyncState.workspaceId)).pipe((0, take.q)(1), (0, 
                        switchMap.w)(function(gitUndoState) {
                            return _this.getUndoActions(gitSyncState, gitUndoState);
                        }));
                    }));
                });
            }
            return GitUndoEffects.prototype.isLatestOpValid = function(latestGitOp) {
                return !!(null == latestGitOp ? void 0 : latestGitOp.isValid) && latestGitOp.gitOperationType === git_src.u9.Undo;
            }, GitUndoEffects.prototype.getUndoActions = function(latestGitOp, gitUndoRecord) {
                var _a, _this = this, gitUndoState = gitUndoRecord && gitUndoRecord.workspaceId === latestGitOp.workspaceId ? {
                    workspaceId: gitUndoRecord.workspaceId,
                    request: gitUndoRecord.request,
                    response: null == gitUndoRecord ? void 0 : gitUndoRecord.response,
                    notificationId: null == gitUndoRecord ? void 0 : gitUndoRecord.notificationId
                } : {
                    workspaceId: latestGitOp.workspaceId,
                    request: void 0
                };
                switch (latestGitOp.gitOperationStatus) {
                  case git_src.wM.Successful:
                    return (null == gitUndoState ? void 0 : gitUndoState.notificationId) && this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Undo_Success", gitUndoState.notificationId), 
                    this.gitStatusFacade.clearChangesArtifactSelection(gitUndoState.workspaceId), (0, 
                    tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([ undoFromGitSuccess({
                        gitUndoStateWithResponse: gitUndoState
                    }) ], getGitStatusActions(gitUndoState.workspaceId, !0, null !== (_a = this.featureSwitchService.featureSwitches.tridentGitStatusAPI) && void 0 !== _a && _a), !0), [ invalidateGitSync({
                        workspaceId: gitUndoState.workspaceId
                    }) ], !1);

                  case git_src.wM.InProgress:
                    return [ undoFromGitInProgress({
                        gitUndoState
                    }) ];

                  case git_src.wM.Failed:
                    var error = this.gitErrorService.handleAlmGitError("AlmOperationFailed_UndoFromGit", latestGitOp);
                    return (null == gitUndoState ? void 0 : gitUndoState.notificationId) && (this.featureSwitchService.featureSwitches.interactiveOperationUI && this.interactiveOperationsService.isOptionNotEnabled(error) ? (this.interactiveOperationsService.showInteractiveOperationsDialog(error, "Trident_Git_Error_Undo_Title", function(error, enabledOptions) {
                        return _this.undoWithInteractiveOptions(error, enabledOptions, latestGitOp.workspaceId);
                    }), this.gitNotificationService.hideCurrentNotification()) : (this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Undo_Title", gitUndoState.notificationId), 
                    this.gitErrorService.showErrorHandlingDialog(error))), [ undoFromGitFailureServerError({
                        gitUndoState,
                        error
                    }), invalidateGitSync({
                        workspaceId: gitUndoState.workspaceId
                    }) ];
                }
                return [ undoFromGitInProgress({
                    gitUndoState
                }) ];
            }, GitUndoEffects.prototype.fromGitArtifactToArtifactSelector = function(gitArtifactChange) {
                var _a, _b, _c, gitArtifact = gitArtifactChange.artifact;
                return {
                    artifactType: gitArtifact.artifactType,
                    etag: gitArtifact.etag,
                    objectId: gitArtifact.objectId,
                    logicalId: gitArtifact.logicalId,
                    changeType: null !== (_b = null === (_a = gitArtifactChange.remoteChange) || void 0 === _a ? void 0 : _a.changeType) && void 0 !== _b ? _b : null === (_c = null == gitArtifactChange ? void 0 : gitArtifactChange.workspaceChange) || void 0 === _c ? void 0 : _c.changeType
                };
            }, GitUndoEffects.prototype.fromGitUndoContractToGitUndoRequest = function(GitUndoRequestModel) {
                var _a, _this = this;
                return {
                    artifacts: null === (_a = GitUndoRequestModel.artifacts) || void 0 === _a ? void 0 : _a.map(function(artifact) {
                        return _this.fromGitArtifactToArtifactSelector(artifact);
                    }),
                    workspaceHead: GitUndoRequestModel.workspaceHead,
                    retryOperationId: GitUndoRequestModel.retryOperationId,
                    interactiveUpdateOptions: GitUndoRequestModel.interactiveUpdateOptions
                };
            }, GitUndoEffects.prototype.undoWithInteractiveOptions = function(error, enabledOptions, workspaceId) {
                var _this = this;
                this.gitConnectionFacade.getGitConnection(workspaceId).pipe((0, take.q)(1)).subscribe(function(gitConnection) {
                    var _a, _b;
                    _this.gitUndoFacade.UndoFromGit({
                        workspaceId,
                        request: {
                            workspaceHead: null === (_a = null == gitConnection ? void 0 : gitConnection.gitConnectionDetails) || void 0 === _a ? void 0 : _a.head,
                            artifacts: void 0,
                            retryOperationId: null === (_b = error.errorInfo) || void 0 === _b ? void 0 : _b.retryOperationId,
                            interactiveUpdateOptions: enabledOptions
                        }
                    });
                });
            }, GitUndoEffects.\u0275fac = function(t) {
                return new (t || GitUndoEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.nD), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn), core["\u0275\u0275inject"](interactive_operations_service_InteractiveOperationsService), core["\u0275\u0275inject"](GitUndoFacade), core["\u0275\u0275inject"](GitStatusFacade), core["\u0275\u0275inject"](GitConnectionFacade), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](feature_switch_service.V$));
            }, GitUndoEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitUndoEffects,
                factory: GitUndoEffects.\u0275fac
            }), GitUndoEffects;
        }(), getgitSwitchBranchStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitSwitchBranch) || git_switch_branch_reducer_initialState;
        }), git_switch_branch_selectors_a = gitSwitchBranchAdapter.getSelectors(), git_switch_branch_selectors_selectAll = git_switch_branch_selectors_a.selectAll, git_switch_branch_selectors_selectEntities = git_switch_branch_selectors_a.selectEntities, getAllGitSwitchBranchEntities = ((0, 
        ngrx_store.P1)(getgitSwitchBranchStoreState, function(state) {
            return git_switch_branch_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getgitSwitchBranchStoreState, function(state) {
            return git_switch_branch_selectors_selectEntities(state);
        })), getGitSwitchBranchState = function(workspaceId) {
            return (0, ngrx_store.P1)(getAllGitSwitchBranchEntities, function(entities) {
                return entities[workspaceId];
            });
        }, GitSwitchBranchEffects = function() {
            function GitSwitchBranchEffects(actions$, gitSwitchBranchClient, gitErrorService, gitNotificationService, store, featureSwitchService) {
                var _this = this;
                this.actions$ = actions$, this.gitSwitchBranchClient = gitSwitchBranchClient, this.gitErrorService = gitErrorService, 
                this.gitNotificationService = gitNotificationService, this.store = store, this.featureSwitchService = featureSwitchService, 
                this.gitSwitchBranch$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(gitSwitchBranch), (0, operators_map.U)(function(_a) {
                        var gitSwitchBranchState = _a.gitSwitchBranchState, loadingNotificationId = _this.gitNotificationService.showLoadingNotification("Trident_Git_Toast_Switch_Branch_Switching_In_Progress_Message");
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitSwitchBranchState), {
                            notificationId: loadingNotificationId
                        });
                    }), (0, switchMap.w)(function(gitSwitchBranchStateWithNotification) {
                        return _this.gitSwitchBranchClient.switchBranch(gitSwitchBranchStateWithNotification.workspaceId, gitSwitchBranchStateWithNotification.request).pipe((0, 
                        switchMap.w)(function(gitSwitchBranchContractResponse) {
                            var switchBranchResponse = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitSwitchBranchStateWithNotification), {
                                response: {
                                    almOperation: gitSwitchBranchContractResponse.almOperation
                                }
                            });
                            return _this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Switch_Branch_Success_Message", gitSwitchBranchStateWithNotification.notificationId), 
                            [ gitSwitchBranchInProgress({
                                gitSwitchBranchState: switchBranchResponse
                            }) ];
                        }), (0, catchError.K)(function(httpError) {
                            var gitError = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Switch_Branch_Failed", httpError), gitErrorType = _this.convertToSwitchBranchSpecficError(gitError), error = _this.gitErrorService.handleSyncGitError(gitErrorType, httpError);
                            return (null == gitSwitchBranchStateWithNotification ? void 0 : gitSwitchBranchStateWithNotification.notificationId) && _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Switch_Branch_Title", gitSwitchBranchStateWithNotification.notificationId), 
                            (0, observable_of.of)(gitSwitchBranchFailure({
                                gitSwitchBranchState: gitSwitchBranchStateWithNotification,
                                error
                            }));
                        }));
                    }));
                }), this.getLatestGitAlmOperationSuccess$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(getLatestGitAlmOperationSuccess), (0, 
                    operators_map.U)(function(_a) {
                        return _a.gitSyncState;
                    }), (0, filter.h)(function(latestGitOp) {
                        return _this.isLatestOpValid(latestGitOp);
                    }), (0, switchMap.w)(function(gitSyncState) {
                        return _this.store.select(getGitSwitchBranchState(gitSyncState.workspaceId)).pipe((0, 
                        take.q)(1), (0, switchMap.w)(function(gitSwitchBranchState) {
                            return _this.getSwitchBranchActions(gitSyncState, gitSwitchBranchState);
                        }));
                    }));
                });
            }
            return GitSwitchBranchEffects.prototype.getSwitchBranchActions = function(latestGitOp, gitSwitchBranchRecord) {
                var _a, switchBranchStateWithResponse = gitSwitchBranchRecord && gitSwitchBranchRecord.workspaceId === latestGitOp.workspaceId ? (0, 
                tslib_es6.__assign)({}, gitSwitchBranchRecord) : {
                    workspaceId: latestGitOp.workspaceId,
                    request: void 0
                };
                if (latestGitOp) switch (latestGitOp.gitOperationStatus) {
                  case git_src.wM.Successful:
                    return (null == switchBranchStateWithResponse ? void 0 : switchBranchStateWithResponse.notificationId) && this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Switch_Branch_Syncing_Completed_Message", switchBranchStateWithResponse.notificationId), 
                    (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([ gitSwitchBranchSuccess({
                        gitSwitchBranchState: switchBranchStateWithResponse
                    }) ], getGitStatusActions(switchBranchStateWithResponse.workspaceId, !0, null !== (_a = this.featureSwitchService.featureSwitches.tridentGitStatusAPI) && void 0 !== _a && _a), !0), [ invalidateGitSync({
                        workspaceId: switchBranchStateWithResponse.workspaceId
                    }) ], !1);

                  case git_src.wM.InProgress:
                    return this.setInProgress(switchBranchStateWithResponse);

                  default:
                    var error = this.gitErrorService.handleAlmGitError("AlmOperationFailed_SwitchGitBranch", latestGitOp);
                    return (null == switchBranchStateWithResponse ? void 0 : switchBranchStateWithResponse.notificationId) && this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Switch_Branch_Title", switchBranchStateWithResponse.notificationId), 
                    [ gitSwitchBranchFailureServerError({
                        gitSwitchBranchState: switchBranchStateWithResponse
                    }), invalidateGitSync({
                        workspaceId: switchBranchStateWithResponse.workspaceId
                    }) ];
                }
                return [ gitSwitchBranchInProgress({
                    gitSwitchBranchState: switchBranchStateWithResponse
                }) ];
            }, GitSwitchBranchEffects.prototype.setInProgress = function(gitSwitchBranchRecord) {
                var notificationId = this.gitNotificationService.showLoadingNotification("Trident_Git_Toast_Switch_Branch_Syncing_In_Progress_Message");
                return [ gitSwitchBranchInProgress({
                    gitSwitchBranchState: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitSwitchBranchRecord), {
                        notificationId
                    })
                }) ];
            }, GitSwitchBranchEffects.prototype.isLatestOpValid = function(latestGitOp) {
                return !!(null == latestGitOp ? void 0 : latestGitOp.isValid) && latestGitOp.gitOperationType === git_src.u9.SwitchBranch;
            }, GitSwitchBranchEffects.prototype.convertToSwitchBranchSpecficError = function(gitError) {
                if (void 0 === gitError) return "Git_Switch_Branch_Invalid_Request";
                if ((0, git_src.yG)(gitError)) return "Git_Switch_Branch_Item_Not_Found";
                switch ((0, git_src.lz)(gitError).errorType) {
                  case "Git_MissingDependencies":
                    return "Git_MissingDependenciesSwitchBranch";

                  case "Git_CyclicDependencyDetected":
                    return "Git_CyclicDependencyDetectedSwitchBranch";

                  default:
                    return "Git_Switch_Branch_Invalid_Request";
                }
            }, GitSwitchBranchEffects.\u0275fac = function(t) {
                return new (t || GitSwitchBranchEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.ZH), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](feature_switch_service.V$));
            }, GitSwitchBranchEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitSwitchBranchEffects,
                factory: GitSwitchBranchEffects.\u0275fac
            }), GitSwitchBranchEffects;
        }(), tap = __webpack_require__(17653), router = __webpack_require__(9398), GitBranchOutEffects = function() {
            function GitBranchOutEffects(actions$, router, gitBranchOutClient, gitErrorService, gitNotificationService) {
                var _this = this;
                this.actions$ = actions$, this.router = router, this.gitBranchOutClient = gitBranchOutClient, 
                this.gitErrorService = gitErrorService, this.gitNotificationService = gitNotificationService, 
                this.gitBranchOut$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(git_branch_out_actions_gitBranchOut), (0, 
                    operators_map.U)(function(_a) {
                        var gitBranchOutState = _a.gitBranchOutState, loadingNotificationId = _this.gitNotificationService.showLoadingNotification("Trident_Git_Branch_Out", "Trident_Git_Toast_Branch_Out_In_Progress_Message");
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitBranchOutState), {
                            notificationId: loadingNotificationId
                        });
                    }), (0, switchMap.w)(function(gitBranchOutStateWithNotification) {
                        return _this.gitBranchOutClient.branchOut(gitBranchOutStateWithNotification.workspaceId, gitBranchOutStateWithNotification.request).pipe((0, 
                        switchMap.w)(function(gitBranchOutResponse) {
                            var branchOutResponse = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitBranchOutStateWithNotification), {
                                response: gitBranchOutResponse
                            });
                            return [ gitBranchOutSuccess({
                                gitBranchOutState: branchOutResponse
                            }) ];
                        }), (0, catchError.K)(function(httpError) {
                            var gitError = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Branch_Out_Failed", httpError), branchOutErrorState = "Git_Branch_Out_Failed" !== (0, 
                            git_src.lz)(gitError).errorType && function(response, presetnState) {
                                var _a, _b, _c, _d, _e, errorDetailsStr = null === (_e = null === (_d = null === (_c = null === (_b = null === (_a = response.error) || void 0 === _a ? void 0 : _a["pbi.error"]) || void 0 === _b ? void 0 : _b.details) || void 0 === _c ? void 0 : _c[0]) || void 0 === _d ? void 0 : _d.detail) || void 0 === _e ? void 0 : _e.value;
                                if (errorDetailsStr) try {
                                    var errorDetails = JSON.parse(errorDetailsStr);
                                    if (null == errorDetails ? void 0 : errorDetails.errorSpecificData) {
                                        var groupAsFolder = JSON.parse(errorDetails.errorSpecificData);
                                        if (groupAsFolder) return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, presetnState), {
                                            response: {
                                                folder: groupAsFolder
                                            }
                                        });
                                    }
                                } catch (error) {
                                    return null;
                                }
                                return null;
                            }(httpError, gitBranchOutStateWithNotification) || gitBranchOutStateWithNotification;
                            return (null == gitBranchOutStateWithNotification ? void 0 : gitBranchOutStateWithNotification.notificationId) && _this.gitNotificationService.showErrorNotification(gitError, "Trident_Git_Error_Unable_To_Branch_Out_Git_Branch_Fail_Title", gitBranchOutStateWithNotification.notificationId), 
                            (0, observable_of.of)(gitBranchOutFailure({
                                gitBranchOutState: branchOutErrorState,
                                error: gitError
                            }));
                        }));
                    }));
                }), this.gitBranchOutSuccess$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(gitBranchOutSuccess), (0, switchMap.w)(function(_a) {
                        var _b, _c, _d, gitBranchOutState = _a.gitBranchOutState;
                        if (null === (_b = null == gitBranchOutState ? void 0 : gitBranchOutState.response) || void 0 === _b ? void 0 : _b.initializeConnectionStatus) {
                            var gitUpdateState = gitBranchOutState.response.initializeConnectionStatus.incomingChanges && (null === (_d = null === (_c = gitBranchOutState.response) || void 0 === _c ? void 0 : _c.initializeConnectionStatus) || void 0 === _d ? void 0 : _d.incomingChanges.length) > 0 ? _this.createUpdateRequestFromState(gitBranchOutState) : void 0;
                            return (0, observable_of.of)(gitBranchOutSyncFolder({
                                gitBranchOutState,
                                gitUpdateState
                            }));
                        }
                        var error = _this.gitErrorService.makeClientSideGitError("Git_Invalid_Connection_Details");
                        return _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Git_Invalid_Connection_Details_Title"), 
                        (0, observable_of.of)(gitBranchOutFailure({
                            gitBranchOutState,
                            error
                        }));
                    }));
                }), this.gitBranchOutCompleted$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(gitBranchOutCompleted), (0, tap.b)(function(action) {
                        var _a, _b, _c;
                        _this.navigateToNewWorkspace(null === (_a = action.gitBranchOutState.response) || void 0 === _a ? void 0 : _a.folder.objectId), 
                        (null === (_b = action.gitBranchOutState) || void 0 === _b ? void 0 : _b.notificationId) && _this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Branch_Out_Success_Message", null === (_c = action.gitBranchOutState) || void 0 === _c ? void 0 : _c.notificationId);
                    }));
                }, {
                    dispatch: !1
                });
            }
            return GitBranchOutEffects.prototype.createUpdateRequestFromState = function(state) {
                var _a, _b, _c, response = null === (_a = state.response) || void 0 === _a ? void 0 : _a.initializeConnectionStatus, targetWorkspaceId = null === (_b = state.response) || void 0 === _b ? void 0 : _b.folder.objectId;
                if (response && targetWorkspaceId) return {
                    workspaceId: targetWorkspaceId,
                    request: {
                        targetCommit: response.partialSyncBaseCommit,
                        workspaceHead: null !== (_c = response.head) && void 0 !== _c ? _c : null
                    }
                };
            }, GitBranchOutEffects.prototype.navigateToNewWorkspace = function(targetWorkspaceId) {
                this.router.navigate([ "/groups/".concat(targetWorkspaceId, "/") ], {
                    queryParamsHandling: "preserve"
                });
            }, GitBranchOutEffects.\u0275fac = function(t) {
                return new (t || GitBranchOutEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](router.F0), core["\u0275\u0275inject"](src.su), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn));
            }, GitBranchOutEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitBranchOutEffects,
                factory: GitBranchOutEffects.\u0275fac
            }), GitBranchOutEffects;
        }();
        function filterDatasourceGitHub(responseContract) {
            var parsedConnectionDetails = JSON.parse(responseContract.connectionDetails);
            return (0, src.h_)(parsedConnectionDetails) && "GitHubSourceControl" === parsedConnectionDetails.extensionDataSourceKind;
        }
        function convertDatasourceContractToModelGitHub(responseContract) {
            var parsedConnectionDetails = JSON.parse(responseContract.connectionDetails);
            return {
                id: responseContract.id,
                datasourceName: responseContract.datasourceName,
                url: (0, src.h_)(parsedConnectionDetails) ? parsedConnectionDetails.extensionDataSourcePath : "https://github.com"
            };
        }
        function convertCreateDatasourceRequestModelToContractGitHub(requestModel) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, git_src.I), {
                datasourceName: requestModel.displayName,
                datasourceType: git_src.LO,
                connectionDetails: JSON.stringify((null == requestModel ? void 0 : requestModel.repositoryUrl) ? {
                    url: null == requestModel ? void 0 : requestModel.repositoryUrl
                } : {}),
                mashupTestConnectionDetails: {
                    functionName: "GitHubSourceControl.Contents",
                    parameters: [ (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, git_src.cW), {
                        value: null == requestModel ? void 0 : requestModel.repositoryUrl
                    }) ]
                },
                credentialDetails: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, git_src.f7), {
                    credentials: JSON.stringify({
                        credentialData: [ {
                            name: "key",
                            value: requestModel.personalAccessToken
                        } ]
                    })
                })
            });
        }
        var GitDatasourcesEffects = function() {
            function GitDatasourcesEffects(actions$, gitDatasourceClient, gitErrorService, gitNotificationService) {
                var _this = this;
                this.actions$ = actions$, this.gitDatasourceClient = gitDatasourceClient, this.gitErrorService = gitErrorService, 
                this.gitNotificationService = gitNotificationService, this.loadDatasources$ = (0, 
                ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(loadDatasources), (0, switchMap.w)(function(_a) {
                        var _b, _c, gitDatasourceRequest = _a.gitDatasourceRequest, convertFunc = null === (_b = _this.gitDatasourcesConfigRecord[gitDatasourceRequest.gitProviderType]) || void 0 === _b ? void 0 : _b.convertDatasourceContractToModel, filterFunc = null === (_c = _this.gitDatasourcesConfigRecord[gitDatasourceRequest.gitProviderType]) || void 0 === _c ? void 0 : _c.filterDatasource;
                        if (!convertFunc || !filterFunc) {
                            var error = _this.gitErrorService.makeClientSideGitError("Git_UnsupportedGitProvider");
                            return (0, observable_of.of)(loadDatasourcesFailure({
                                workspaceId: gitDatasourceRequest.workspaceId,
                                error
                            }));
                        }
                        return _this.gitDatasourceClient.discoverDatasources().pipe((0, take.q)(1), (0, 
                        operators_map.U)(function(list) {
                            return list.value.filter(filterFunc);
                        }), (0, operators_map.U)(function(filteredList) {
                            return filteredList.map(convertFunc);
                        }), (0, switchMap.w)(function(datasources) {
                            var _a, datasourcesState = {
                                workspaceId: gitDatasourceRequest.workspaceId,
                                datasourcesRecord: (_a = {}, _a[gitDatasourceRequest.gitProviderType] = datasources, 
                                _a)
                            };
                            return (0, observable_of.of)(loadDatasourcesSuccess({
                                gitDatasourcesState: datasourcesState
                            }));
                        }), (0, catchError.K)(function(error) {
                            var gitError = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Load_Datasources_Failed", error);
                            return (0, observable_of.of)(loadDatasourcesFailure({
                                workspaceId: gitDatasourceRequest.workspaceId,
                                error: gitError
                            }));
                        }));
                    }));
                }), this.createDatasource$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(createDatasource), (0, switchMap.w)(function(_a) {
                        var _b, request = _a.request, loadingNotificationId = _this.gitNotificationService.showLoadingNotification("Trident_Git_Toast_Add_Account_In_Progress_Title", "Trident_Git_Toast_Add_Account_In_Progress_Message"), convertFunc = null === (_b = _this.gitDatasourcesConfigRecord[request.gitProviderType]) || void 0 === _b ? void 0 : _b.convertCreateDatasourceRequestModelToContract;
                        if (!convertFunc) {
                            var error = _this.gitErrorService.makeClientSideGitError("Git_UnsupportedGitProvider");
                            return _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Toast_Add_Account_Fail_Title", loadingNotificationId), 
                            (0, observable_of.of)(createDatasourceFailure({
                                workspaceId: request.workspaceId,
                                error
                            }));
                        }
                        var loadDatasourcesRequest = {
                            workspaceId: request.workspaceId,
                            gitProviderType: request.gitProviderType
                        };
                        return _this.gitDatasourceClient.createDatasource(convertFunc(request)).pipe((0, 
                        switchMap.w)(function(id) {
                            return _this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Add_Account_Success", loadingNotificationId), 
                            [ createDatasourceSuccess({
                                workspaceId: request.workspaceId,
                                datasourceResponse: id
                            }), loadDatasources({
                                gitDatasourceRequest: loadDatasourcesRequest
                            }) ];
                        }), (0, catchError.K)(function(error) {
                            var gitError = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Create_Datasource_Failed", error);
                            return _this.gitNotificationService.showErrorNotification(gitError, "Trident_Git_Toast_Add_Account_Fail_Title", loadingNotificationId), 
                            (0, observable_of.of)(createDatasourceFailure({
                                workspaceId: request.workspaceId,
                                error: gitError
                            }));
                        }));
                    }));
                }), this.gitDatasourcesConfigRecord = function() {
                    var _a;
                    return (_a = {})[git_src.IS.AzureDevOps] = {}, _a[git_src.IS.GitHub] = {
                        filterDatasource: filterDatasourceGitHub,
                        convertDatasourceContractToModel: convertDatasourceContractToModelGitHub,
                        convertCreateDatasourceRequestModelToContract: convertCreateDatasourceRequestModelToContractGitHub
                    }, _a;
                }();
            }
            return GitDatasourcesEffects.\u0275fac = function(t) {
                return new (t || GitDatasourcesEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.aw), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](notification_src.mn));
            }, GitDatasourcesEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitDatasourcesEffects,
                factory: GitDatasourcesEffects.\u0275fac
            }), GitDatasourcesEffects;
        }(), GitRepairItemsEffects = function() {
            function GitRepairItemsEffects(actions$, gitNotificationService, gitErrorService, gitRepairClient) {
                var _this = this;
                this.actions$ = actions$, this.gitNotificationService = gitNotificationService, 
                this.gitErrorService = gitErrorService, this.gitRepairClient = gitRepairClient, 
                this.gitRepairItems$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, ngrx_effects.l4)(git_repair_actions_gitRepairItems), (0, 
                    operators_map.U)(function(_a) {
                        var gitRepairState = _a.gitRepairState, loadingNotificationId = _this.gitNotificationService.showLoadingNotification("Trident_Git_Toast_Repair_Loading_Message");
                        return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitRepairState), {
                            notificationId: loadingNotificationId
                        });
                    }), (0, switchMap.w)(function(stateWithNotification) {
                        return _this.gitRepairClient.gitRepairItems(stateWithNotification.workspaceId, stateWithNotification.request).pipe((0, 
                        switchMap.w)(function(gitRepairItemsResponse) {
                            var gitRepairStateWithResponse = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, stateWithNotification), {
                                response: gitRepairItemsResponse
                            });
                            return (0, observable_of.of)(gitRepairItemsSuccess({
                                gitRepairStateWithResponse
                            }));
                        }), (0, catchError.K)(function(httpError) {
                            var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Repair_Items_Failed", httpError);
                            return (null == stateWithNotification ? void 0 : stateWithNotification.notificationId) && (_this.gitNotificationService.showErrorNotification(error, "Trident_Git_Error_Unable_To_Repair_Items_Title", stateWithNotification.notificationId), 
                            _this.gitErrorService.showErrorHandlingDialog(error)), (0, observable_of.of)(gitRepairItemsFailure({
                                gitRepairState: stateWithNotification,
                                error
                            }));
                        }));
                    }));
                });
            }
            return GitRepairItemsEffects.\u0275fac = function(t) {
                return new (t || GitRepairItemsEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](notification_src.mn), core["\u0275\u0275inject"](error_src.jR), core["\u0275\u0275inject"](src.P9));
            }, GitRepairItemsEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitRepairItemsEffects,
                factory: GitRepairItemsEffects.\u0275fac
            }), GitRepairItemsEffects;
        }(), DataGitModule = function() {
            function DataGitModule() {}
            return DataGitModule.\u0275fac = function(t) {
                return new (t || DataGitModule);
            }, DataGitModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: DataGitModule
            }), DataGitModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ ngrx_store.Aw.forFeature("git", reducers), ngrx_effects.sQ.forFeature([ GitStatusEffects ]), ngrx_effects.sQ.forFeature([ GitConnectionEffects ]), ngrx_effects.sQ.forFeature([ GitCommitEffects ]), ngrx_effects.sQ.forFeature([ GitUpdateEffects ]), ngrx_effects.sQ.forFeature([ GitInitializationEffects ]), ngrx_effects.sQ.forFeature([ GitSyncEffects ]), ngrx_effects.sQ.forFeature([ GitUndoEffects ]), ngrx_effects.sQ.forFeature([ GitSwitchBranchEffects ]), ngrx_effects.sQ.forFeature([ GitBranchOutEffects ]), ngrx_effects.sQ.forFeature([ GitDatasourcesEffects ]), ngrx_effects.sQ.forFeature([ GitRepairItemsEffects ]), src.Ug ]
            }), DataGitModule;
        }(), getGitInitializationStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitInitialization) || git_initialization_reducer_initialState;
        }), git_initialization_selectors_a = gitInitializationAdapter.getSelectors(), git_initialization_selectors_selectAll = git_initialization_selectors_a.selectAll, git_initialization_selectors_selectEntities = git_initialization_selectors_a.selectEntities, getAllGitInitializationEntities = ((0, 
        ngrx_store.P1)(getGitInitializationStoreState, function(state) {
            return git_initialization_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitInitializationStoreState, function(state) {
            return git_initialization_selectors_selectEntities(state);
        })), GitInitializeFacade = function() {
            function GitInitializeFacade(store) {
                this.store = store;
            }
            return GitInitializeFacade.prototype.getGitInitializationState = function(workspaceId) {
                return this.store.select(function(workspaceId) {
                    return (0, ngrx_store.P1)(getAllGitInitializationEntities, function(entities) {
                        return entities[workspaceId];
                    });
                }(workspaceId));
            }, GitInitializeFacade.prototype.initializeGitConnection = function(gitInitializationState) {
                return this.store.dispatch(initializeGitConnection({
                    gitInitializationState
                })), this.getGitInitializationState(gitInitializationState.workspaceId);
            }, GitInitializeFacade.prototype.invalidateGitConnectionInitialization = function(workspaceId) {
                return this.store.dispatch(invalidateGitConnectionInitialization({
                    workspaceId
                })), (0, observable_of.of)(void 0);
            }, GitInitializeFacade.prototype.getGitInitializationCallState = function(workspaceId) {
                return this.getGitInitializationState(workspaceId).pipe((0, operators_map.U)(function(gitInitialization) {
                    return gitInitialization && gitInitialization.callState || ConnectionOperationState.Initial;
                }));
            }, GitInitializeFacade.\u0275fac = function(t) {
                return new (t || GitInitializeFacade)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitInitializeFacade.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitInitializeFacade,
                factory: GitInitializeFacade.\u0275fac,
                providedIn: "root"
            }), GitInitializeFacade;
        }(), getGitSyncStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitSync) || git_sync_reducer_initialState;
        }), git_sync_selectors_a = gitSyncAdapter.getSelectors(), git_sync_selectors_selectAll = git_sync_selectors_a.selectAll, git_sync_selectors_selectEntities = git_sync_selectors_a.selectEntities, getgitProgressIndicatorState = ((0, 
        ngrx_store.P1)(getGitSyncStoreState, function(state) {
            return git_sync_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitSyncStoreState, function(state) {
            return git_sync_selectors_selectEntities(state);
        }), (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitProgressIndicator) || git_progressIndicator_reducer_initialState;
        })), git_progressIndicator_selectors_a = gitProgressIndicatorAdapter.getSelectors(), git_progressIndicator_selectors_selectAll = git_progressIndicator_selectors_a.selectAll, git_progressIndicator_selectors_selectEntities = git_progressIndicator_selectors_a.selectEntities, GitSwitchBranchFacade = ((0, 
        ngrx_store.P1)(getgitProgressIndicatorState, function(state) {
            return git_progressIndicator_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getgitProgressIndicatorState, function(state) {
            return git_progressIndicator_selectors_selectEntities(state);
        }), function() {
            function GitSwitchBranchFacade(store) {
                this.store = store;
            }
            return GitSwitchBranchFacade.prototype.switchBranch = function(gitSwitchBranchState) {
                return this.store.dispatch(gitSwitchBranch({
                    gitSwitchBranchState
                })), this.store.select(getGitSwitchBranchState(gitSwitchBranchState.workspaceId));
            }, GitSwitchBranchFacade.prototype.getSwitchBranchState = function(workspaceId) {
                return this.store.select(getGitSwitchBranchState(workspaceId)).pipe((0, operators_map.U)(function(gitSwitchBranchState) {
                    return gitSwitchBranchState && gitSwitchBranchState.callState || SwitchBranchState.Initial;
                }));
            }, GitSwitchBranchFacade.\u0275fac = function(t) {
                return new (t || GitSwitchBranchFacade)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitSwitchBranchFacade.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitSwitchBranchFacade,
                factory: GitSwitchBranchFacade.\u0275fac,
                providedIn: "root"
            }), GitSwitchBranchFacade;
        }()), getGitStorageSelectionState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitSessionStorage) || session_storage_reducer_initialState;
        }), session_storage_selectors_a = GitSessionStorageAdapter.getSelectors(), session_storage_selectors_selectAll = session_storage_selectors_a.selectAll, session_storage_selectors_selectEntities = session_storage_selectors_a.selectEntities, getAllGitSessionStorageEntities = ((0, 
        ngrx_store.P1)(getGitStorageSelectionState, function(state) {
            return session_storage_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitStorageSelectionState, function(state) {
            return session_storage_selectors_selectEntities(state);
        })), GitSessionStorageService = function() {
            function GitSessionStorageService(store) {
                this.store = store;
            }
            return GitSessionStorageService.prototype.selectGitProviderType = function(workspaceId, gitProviderType) {
                this.store.dispatch(selectGitProviderType({
                    workspaceId,
                    gitProviderType
                }));
            }, GitSessionStorageService.prototype.selectDatasource = function(workspaceId, datasourceOID) {
                this.store.dispatch(selectDatasource({
                    workspaceId,
                    datasourceOID
                }));
            }, GitSessionStorageService.prototype.selectTempDatasource = function(workspaceId, datasourceOID) {
                this.store.dispatch(selectTempDatasource({
                    workspaceId,
                    datasourceOID
                }));
            }, GitSessionStorageService.prototype.selectOrganization = function(workspaceId, organization) {
                this.store.dispatch(selectOrganization({
                    workspaceId,
                    organization
                }));
            }, GitSessionStorageService.prototype.selectRepository = function(workspaceId, repository) {
                this.store.dispatch(selectRepository({
                    workspaceId,
                    repository
                }));
            }, GitSessionStorageService.prototype.selectBranch = function(workspaceId, branch) {
                this.store.dispatch(selectBranch({
                    workspaceId,
                    branch
                }));
            }, GitSessionStorageService.prototype.selectRootDirectory = function(workspaceId, directory) {
                this.store.dispatch(selectRootDirectory({
                    workspaceId,
                    directory
                }));
            }, GitSessionStorageService.prototype.selectUserAccount = function(workspaceId, userAccount) {
                this.store.dispatch(selectUserAccount({
                    workspaceId,
                    userAccount
                }));
            }, GitSessionStorageService.prototype.setDatasourceUrl = function(workspaceId, organization, repository) {
                this.store.dispatch(setDatasourceUrl({
                    workspaceId,
                    organization,
                    repository
                }));
            }, GitSessionStorageService.prototype.selectWorkspaceCapacity = function(workspaceId, isWorkspaceOnCapacity) {
                this.store.dispatch(selectWorkspaceOnCapacity({
                    workspaceId,
                    isWorkspaceOnCapacity
                }));
            }, GitSessionStorageService.prototype.resetDatasourceUrl = function(workspaceId) {
                this.store.dispatch(resetDatasourceUrl({
                    workspaceId
                }));
            }, GitSessionStorageService.prototype.loadGitSessionStorage = function(workspaceId) {
                return this.store.select(function(workspaceId) {
                    return (0, ngrx_store.P1)(getAllGitSessionStorageEntities, function(entities) {
                        return entities[workspaceId];
                    });
                }(workspaceId)).pipe((0, operators_map.U)(function(sessionState) {
                    return null != sessionState ? sessionState : {
                        workspaceId
                    };
                }));
            }, GitSessionStorageService.prototype.configureCredentials = function(workspaceId) {
                this.store.dispatch(configureCredentials({
                    workspaceId
                }));
            }, GitSessionStorageService.prototype.deleteCredentials = function(workspaceId) {
                this.store.dispatch(deleteCredentials({
                    workspaceId
                }));
            }, GitSessionStorageService.\u0275fac = function(t) {
                return new (t || GitSessionStorageService)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitSessionStorageService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitSessionStorageService,
                factory: GitSessionStorageService.\u0275fac,
                providedIn: "root"
            }), GitSessionStorageService;
        }(), getBranchOutStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitBranchOut) || git_branch_out_reducer_initialState;
        }), git_branch_out_selectors_a = branchOutAdapter.getSelectors(), git_branch_out_selectors_selectAll = git_branch_out_selectors_a.selectAll, git_branch_out_selectors_selectEntities = git_branch_out_selectors_a.selectEntities, gitDatasourcesStoreState = ((0, 
        ngrx_store.P1)(getBranchOutStoreState, function(state) {
            return git_branch_out_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getBranchOutStoreState, function(state) {
            return git_branch_out_selectors_selectEntities(state);
        }), (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitDatasources) || git_datasources_reducer_initialState;
        })), git_datasources_selector_a = gitDatasourcesAdapter.getSelectors(), git_datasources_selector_selectAll = git_datasources_selector_a.selectAll, git_datasources_selector_selectEntities = git_datasources_selector_a.selectEntities, getAllDatasourcesEntities = ((0, 
        ngrx_store.P1)(gitDatasourcesStoreState, function(state) {
            return git_datasources_selector_selectAll(state);
        }), (0, ngrx_store.P1)(gitDatasourcesStoreState, function(state) {
            return git_datasources_selector_selectEntities(state);
        })), getDatasources = function(workspaceId) {
            return (0, ngrx_store.P1)(getAllDatasourcesEntities, function(entities) {
                return entities[workspaceId];
            });
        }, GitDatasourcesFacade = function() {
            function GitDatasourcesFacade(store) {
                this.store = store;
            }
            return GitDatasourcesFacade.prototype.getDatasources = function(gitDatasourceRequest) {
                return this.store.select(getDatasources(gitDatasourceRequest.workspaceId)).pipe((0, 
                operators_map.U)(function(datasourcesState) {
                    return {
                        workspaceId: gitDatasourceRequest.workspaceId,
                        datasourcesRecord: null == datasourcesState ? void 0 : datasourcesState.datasourcesRecord,
                        callState: (null == datasourcesState ? void 0 : datasourcesState.callState) || DatasourceManagementState.Initial
                    };
                }));
            }, GitDatasourcesFacade.prototype.loadDatasources = function(gitDatasourceRequest) {
                return this.store.dispatch(loadDatasources({
                    gitDatasourceRequest
                })), this.getDatasources(gitDatasourceRequest);
            }, GitDatasourcesFacade.prototype.createDatasource = function(request) {
                return this.store.dispatch(createDatasource({
                    request
                })), (0, observable_of.of)(void 0);
            }, GitDatasourcesFacade.prototype.getDataSourcesCallState = function(workspaceId) {
                return this.store.select(getDatasources(workspaceId)).pipe((0, operators_map.U)(function(datasourcesState) {
                    return (null == datasourcesState ? void 0 : datasourcesState.callState) || DatasourceManagementState.Initial;
                }));
            }, GitDatasourcesFacade.\u0275fac = function(t) {
                return new (t || GitDatasourcesFacade)(core["\u0275\u0275inject"](ngrx_store.yh));
            }, GitDatasourcesFacade.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitDatasourcesFacade,
                factory: GitDatasourcesFacade.\u0275fac,
                providedIn: "root"
            }), GitDatasourcesFacade;
        }(), getGitRepairStoreState = (0, ngrx_store.P1)(getGitState, function(state) {
            return (null == state ? void 0 : state.gitRepair) || git_repair_reducer_initialState;
        }), git_repair_selectors_a = gitRepairAdapter.getSelectors(), git_repair_selectors_selectAll = git_repair_selectors_a.selectAll, git_repair_selectors_selectEntities = git_repair_selectors_a.selectEntities;
        (0, ngrx_store.P1)(getGitRepairStoreState, function(state) {
            return git_repair_selectors_selectAll(state);
        }), (0, ngrx_store.P1)(getGitRepairStoreState, function(state) {
            return git_repair_selectors_selectEntities(state);
        });
    },
    6393: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostGitModule: function() {
                return ExtensionHostGitModule;
            },
            createExtensionHostGitModule: function() {
                return createExtensionHostGitModule;
            }
        });
        var common = __webpack_require__(77476), core = __webpack_require__(50423), ngrx_effects = __webpack_require__(60756), tslib_es6 = __webpack_require__(81337), from = __webpack_require__(82762), of = __webpack_require__(11547), switchMap = __webpack_require__(81905), filter = __webpack_require__(59973), take = __webpack_require__(48787), map = __webpack_require__(14172), catchError = __webpack_require__(59822), tap = __webpack_require__(17653), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), connection_src = __webpack_require__(10510), lazy_provider_service = __webpack_require__(6814), git_src = __webpack_require__(18016), extension_host_git_actions = __webpack_require__(88), IFrames$InjectionToken = new core.InjectionToken("IFrames$"), localization_service = __webpack_require__(7452), LoadingState = function(LoadingState) {
            return LoadingState[LoadingState.Initial = 0] = "Initial", LoadingState[LoadingState.Loading = 1] = "Loading", 
            LoadingState[LoadingState.Loaded = 2] = "Loaded", LoadingState;
        }({}), ExtensionHostGitEffects = function() {
            function ExtensionHostGitEffects(actions$, messageBroker, triLocalizationService, lazyProvider, iframes$) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.triLocalizationService = triLocalizationService, 
                this.lazyProvider = lazyProvider, this.iframes$ = iframes$, this.sharedUtils = (0, 
                git_src.L4)(), this.onGetGitConnectionRecieved$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getGitConnection, function(_a) {
                    var workspaceObjectId = _a.workspaceObjectId;
                    return (0, from.D)(_this.lazyProvider.get("@trident/git/services/connection", connection_src.AC)).pipe((0, 
                    switchMap.w)(function(gitConnectionService) {
                        return gitConnectionService.ensureGitConnection(workspaceObjectId);
                    }), (0, filter.h)(function(result) {
                        return (null == result ? void 0 : result.callState) === LoadingState.Loaded || (0, 
                        git_src.pb)(null == result ? void 0 : result.callState);
                    }), (0, take.q)(1), (0, map.U)(function(result) {
                        if ((null == result ? void 0 : result.gitConnectionDetails) && !(0, git_src.pb)(null == result ? void 0 : result.callState)) {
                            var details = result.gitConnectionDetails;
                            return index_core.Vm.getGitConnection.resolve({
                                branchName: details.branchName,
                                headRef: _this.sharedUtils[details.gitProviderType].getHeadReference(details),
                                lastSyncTime: (0, git_src.n)(_this.triLocalizationService, null == details ? void 0 : details.lastSyncTime)
                            });
                        }
                        return index_core.Vm.getGitConnection.resolve({});
                    }), (0, catchError.K)(function(error) {
                        return (0, of.of)(index_core.Vm.getGitConnection.reject({
                            error
                        }));
                    }));
                }), this.updateGitConnection$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.UF)(extension_host_git_actions.E), (0, 
                    ngrx_effects.IC)(function() {
                        return _this.iframes$;
                    }), (0, map.U)(function(_a) {
                        var iframes = _a[1], gitConnectionDetails = (0, tslib_es6.__rest)(_a[0], [ "type" ]);
                        return Object.values(iframes).filter(function(iframe) {
                            return "initialized" === (null == iframe ? void 0 : iframe.initState);
                        }).map(function(_a) {
                            var iframeId = _a.iframeId;
                            return index_core.Vm.onGitConnectionChange(gitConnectionDetails)(iframeId);
                        });
                    }), (0, tap.b)(function(messages) {
                        return messages.forEach(function(message) {
                            delete message.lazyModuleId, _this.messageBroker.send(message);
                        });
                    }));
                }, {
                    dispatch: !1
                });
            }
            return ExtensionHostGitEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostGitEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](localization_service.z), core["\u0275\u0275inject"](lazy_provider_service.rn), core["\u0275\u0275inject"](IFrames$InjectionToken));
            }, ExtensionHostGitEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostGitEffects,
                factory: ExtensionHostGitEffects.\u0275fac
            }), ExtensionHostGitEffects;
        }();
        function createExtensionHostGitModule(config, parent) {
            return (0, core.createNgModule)(ExtensionHostGitModule, core.Injector.create({
                providers: [ {
                    provide: IFrames$InjectionToken,
                    useValue: config.iframes$
                } ],
                parent
            }));
        }
        var ExtensionHostGitModule = function() {
            function ExtensionHostGitModule() {}
            return ExtensionHostGitModule.\u0275fac = function(t) {
                return new (t || ExtensionHostGitModule);
            }, ExtensionHostGitModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostGitModule
            }), ExtensionHostGitModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostGitEffects ]) ]
            }), ExtensionHostGitModule;
        }();
    },
    10510: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Gg: function() {
                return services.Gg;
            },
            eL: function() {
                return services.eL;
            },
            rC: function() {
                return services.rC;
            },
            AC: function() {
                return services.AC;
            },
            a6: function() {
                return GitCreateBranchComponent;
            },
            FF: function() {
                return GitServicesConnectionModule;
            },
            Mv: function() {
                return services.Mv;
            },
            rl: function() {
                return git_providers.rl;
            },
            EI: function() {
                return git_providers.EI;
            }
        }), __webpack_require__(81544);
        var dialog = __webpack_require__(32293), BehaviorSubject = __webpack_require__(35510), of = __webpack_require__(11547), take = __webpack_require__(48787), tap = __webpack_require__(17653), catchError = __webpack_require__(59822), src = __webpack_require__(18016), error_src = __webpack_require__(65232), services = __webpack_require__(40773), core = __webpack_require__(50423), localization_service = __webpack_require__(7452), telemetry_service = __webpack_require__(54323), common = __webpack_require__(77476), fesm2022_forms = __webpack_require__(17174), dialog_component = __webpack_require__(95825), tri_link_component = __webpack_require__(65e3), tri_svg_icon_component = __webpack_require__(74913), tri_tooltip_directive = __webpack_require__(55490), tri_dropdown_component = __webpack_require__(20551), tri_dropdown_item_component = __webpack_require__(64716), tri_dropdown_item_menu_directive = __webpack_require__(85721), tri_search_box_component = __webpack_require__(89237), localize_pipe = __webpack_require__(55334);
        function GitCreateBranchComponent_ng_container_16_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 14), 
            core["\u0275\u0275element"](2, "tri-svg-icon", 15), core["\u0275\u0275elementStart"](3, "span"), 
            core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("data-testid", "tri-git-connection-details-settings-v2-directory-error"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("name", "error_circle_12_filled"), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", ctx_r0.branchNameInputError$.value, " ");
            }
        }
        function GitCreateBranchComponent_tri_dropdown_item_32_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-item", 16)(1, "p"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var item_r2 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r2), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275textInterpolate"](item_r2.text);
            }
        }
        var _c0 = function(a0) {
            return {
                error: a0
            };
        }, GitCreateBranchComponent = function() {
            function GitCreateBranchComponent(data, cdr, dr, gitConnectionDiscoveryService, localizationService, telemetryService, gitErrorService) {
                this.data = data, this.cdr = cdr, this.dr = dr, this.gitConnectionDiscoveryService = gitConnectionDiscoveryService, 
                this.localizationService = localizationService, this.telemetryService = telemetryService, 
                this.gitErrorService = gitErrorService, this._isCreateButtonEnabled = !1, this._isCreateButtonLoading = !1, 
                this.branchNameInputError$ = new BehaviorSubject.X(void 0), this.unfiliteredBranchesList = this.data.branchesList.map(function(branch) {
                    return {
                        key: branch,
                        text: branch
                    };
                }), this.filteredBranchesList = this.unfiliteredBranchesList, this.dialogData = {
                    title: this.localizationService.get("Trident_Git_Create_New_Branch"),
                    buttons: [ {
                        name: "createButton",
                        label: this.localizationService.get("Create_ButtonText"),
                        buttonType: "primary",
                        disabled: !this.isCreateButtonEnabled,
                        isLoading: this.isCreateButtonLoading
                    }, {
                        name: "cancelButton",
                        label: this.localizationService.get("Cancel_ButtonText"),
                        closeButton: !0
                    } ]
                };
            }
            return GitCreateBranchComponent.prototype.onBranchNameChange = function(branchName) {
                this.branchName = branchName, this.branchNameInputError$.next(this.validateBranchName(branchName)), 
                this.calculateCreateButtonState();
            }, GitCreateBranchComponent.prototype.onParentBranchNameChange = function(parentBranch) {
                this.parentBranch = null == parentBranch ? void 0 : parentBranch.text, this.calculateCreateButtonState();
            }, GitCreateBranchComponent.prototype.onBranchesSearch = function(searchTerm) {
                this.filteredBranchesList = this.unfiliteredBranchesList.filter(function(branch) {
                    return !searchTerm || branch.text.toLowerCase().includes(searchTerm.toLowerCase());
                });
            }, GitCreateBranchComponent.prototype.clickButton = function(buttonName) {
                "createButton" === buttonName ? this.handleCreateBranchRequest() : "cancelButton" === buttonName && this.dr.close();
            }, GitCreateBranchComponent.prototype.handleCreateBranchRequest = function() {
                var _a, _this = this;
                if (this.isCreateButtonLoading = !0, this.branchNameInputError$.next(void 0), !this.branchName) return this.isCreateButtonLoading = !1, 
                void this.branchNameInputError$.next(this.localizationService.get("Trident_Git_Error_Git_InvalidBranchName_Message"));
                if (!this.parentBranch) return this.isCreateButtonLoading = !1, void this.branchNameInputError$.next(this.localizationService.get("Trident_Git_Error_Git_Create_Branch_Origin_Branch_Not_Found_Message"));
                if (void 0 === this.data.details.gitProviderType || !this.data.details.organizationName || !this.data.details.repositoryName) return this.isCreateButtonLoading = !1, 
                void this.branchNameInputError$.next(this.localizationService.get("Trident_Git_Error_Git_Create_Branch_Failed_Message"));
                var createBranchRequest = {
                    branchName: this.branchName,
                    parentBranchName: this.parentBranch,
                    organizationName: this.data.details.organizationName,
                    providerType: this.data.details.gitProviderType,
                    repositoryId: this.data.details.repositoryName,
                    projectName: this.data.details.projectName,
                    datasourceOID: null === (_a = this.data.details) || void 0 === _a ? void 0 : _a.datasourceOID,
                    workspaceId: this.data.workspaceId
                };
                this.gitConnectionDiscoveryService.createBranch(createBranchRequest).pipe((0, take.q)(1), (0, 
                tap.b)(function() {
                    _this.isCreateButtonLoading = !1, _this.telemetryService.logEvent({
                        name: "Create branch request",
                        properties: {
                            isWorkspaceConnected: _this.data.isWorkspaceConnected
                        }
                    }), _this.dr.close(_this.branchName);
                }), (0, catchError.K)(function(error) {
                    var _a, gitErrorDetails = null === (_a = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Create_Branch_Failed", error)) || void 0 === _a ? void 0 : _a.errorsDetails[0];
                    return gitErrorDetails && _this.gitErrorService.isDedicatedErrorMessageAvailable(gitErrorDetails.errorType) ? _this.branchNameInputError$.next(gitErrorDetails.message) : _this.branchNameInputError$.next(_this.localizationService.get("Trident_Git_Error_Git_Create_Branch_Failed_Message")), 
                    _this.isCreateButtonLoading = !1, (0, of.of)();
                })).subscribe();
            }, GitCreateBranchComponent.prototype.validateBranchName = function(branchName) {
                return (0, src.tI)(branchName, this.localizationService);
            }, GitCreateBranchComponent.prototype.calculateCreateButtonState = function() {
                this.isCreateButtonEnabled = void 0 !== this.branchName && "" !== this.branchName && void 0 !== this.parentBranch && void 0 === this.branchNameInputError$.value;
            }, GitCreateBranchComponent.prototype.getDropDownOptions = function() {
                return {
                    showFullContent: !1,
                    dropdownHeight: this.filteredBranchesList.length > 1 ? 200 : 76,
                    dropdownWidth: 304
                };
            }, GitCreateBranchComponent.prototype.getDropdownOverlayOptions = function(optionCount) {
                return {
                    dropdownHeight: 30 * Math.max(Math.min(optionCount, 12), 1) + 34
                };
            }, Object.defineProperty(GitCreateBranchComponent.prototype, "isCreateButtonEnabled", {
                get: function() {
                    return this._isCreateButtonEnabled;
                },
                set: function(value) {
                    this._isCreateButtonEnabled = value, this.dialogData.buttons[0].disabled = !value;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GitCreateBranchComponent.prototype, "isCreateButtonLoading", {
                get: function() {
                    return this._isCreateButtonLoading;
                },
                set: function(value) {
                    this._isCreateButtonLoading = value, this.dialogData.buttons[0].isLoading = value, 
                    this.dialogData.buttons[0].label = this.localizationService.get(value ? "CapacityProvisioning_SpinnerText" : "Create_ButtonText"), 
                    this.cdr.detectChanges();
                },
                enumerable: !1,
                configurable: !0
            }), GitCreateBranchComponent.\u0275fac = function(t) {
                return new (t || GitCreateBranchComponent)(core["\u0275\u0275directiveInject"](dialog.WI), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](dialog.so), core["\u0275\u0275directiveInject"](services.eL), core["\u0275\u0275directiveInject"](localization_service.z), core["\u0275\u0275directiveInject"](telemetry_service.t), core["\u0275\u0275directiveInject"](error_src.jR));
            }, GitCreateBranchComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GitCreateBranchComponent,
                selectors: [ [ "tri-git-create-branch" ] ],
                decls: 33,
                vars: 37,
                consts: [ [ 3, "dialogData", "buttonClickEvent" ], [ "target", "_blank", "href", "https://go.microsoft.com/fwlink/?linkid=2235132", "localize", "LearnMore", "localize-tooltip", "LearnMore", 1, "learn-more-link-icon" ], [ 1, "accordion-area" ], [ 1, "branch-name-input" ], [ 1, "mandatory" ], [ "type", "text", 3, "ngClass", "ngModel", "placeholder", "ngModelChange" ], [ 4, "ngIf" ], [ 1, "parent-branch-selection" ], [ 1, "header-and-tooltip" ], [ "id", "select-origin-branch-dropdown-label-v2" ], [ "tri-svg-icon-16", "", 3, "name", "triTooltip" ], [ "aria-labelledby", "select-origin-branch-dropdown-label-V2", 3, "ngModel", "isDisabled", "options", "valueChange" ], [ 1, "dropdown-search", 3, "value" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ "tri-textfield-error", "", 1, "error-message" ], [ "tri-svg-icon-12", "", 3, "name" ], [ 3, "value" ] ],
                template: function(rf, ctx) {
                    var tmp_17_0;
                    1 & rf && (core["\u0275\u0275elementStart"](0, "trident-dialog", 0), core["\u0275\u0275listener"]("buttonClickEvent", function($event) {
                        return ctx.clickButton($event);
                    }), core["\u0275\u0275elementStart"](1, "div"), core["\u0275\u0275text"](2), core["\u0275\u0275pipe"](3, "localize"), 
                    core["\u0275\u0275elementStart"](4, "tri-link", 1), core["\u0275\u0275text"](5), 
                    core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](7, "div", 2)(8, "div", 3)(9, "h4"), 
                    core["\u0275\u0275text"](10), core["\u0275\u0275pipe"](11, "localize"), core["\u0275\u0275elementStart"](12, "span", 4), 
                    core["\u0275\u0275text"](13, " *"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](14, "input", 5), 
                    core["\u0275\u0275listener"]("ngModelChange", function($event) {
                        return ctx.onBranchNameChange($event);
                    }), core["\u0275\u0275pipe"](15, "localize"), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275template"](16, GitCreateBranchComponent_ng_container_16_Template, 5, 3, "ng-container", 6), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](17, "div", 7)(18, "div", 8)(19, "h4", 9), 
                    core["\u0275\u0275text"](20), core["\u0275\u0275pipe"](21, "localize"), core["\u0275\u0275elementStart"](22, "span", 4), 
                    core["\u0275\u0275text"](23, " *"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275element"](24, "tri-svg-icon", 10), 
                    core["\u0275\u0275pipe"](25, "localize"), core["\u0275\u0275pipe"](26, "localize"), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](27, "tri-dropdown", 11), 
                    core["\u0275\u0275listener"]("valueChange", function($event) {
                        return ctx.onParentBranchNameChange($event);
                    }), core["\u0275\u0275elementStart"](28, "tri-dropdown-trigger"), core["\u0275\u0275text"](29), 
                    core["\u0275\u0275pipe"](30, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](31, "tri-search-box", 12), 
                    core["\u0275\u0275listener"]("value", function($event) {
                        return ctx.onBranchesSearch($event);
                    }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](32, GitCreateBranchComponent_tri_dropdown_item_32_Template, 3, 2, "tri-dropdown-item", 13), 
                    core["\u0275\u0275elementEnd"]()()()()), 2 & rf && (core["\u0275\u0275property"]("dialogData", ctx.dialogData), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](3, 19, "Trident_Git_Create_New_Branch_Info"), " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](6, 21, "LearnMore"), " "), 
                    core["\u0275\u0275advance"](5), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](11, 23, "Trident_Git_Branch_Name"), " "), 
                    core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](35, _c0, void 0 !== ctx.branchNameInputError$.value))("ngModel", ctx.branchName)("placeholder", core["\u0275\u0275pipeBind1"](15, 25, "Trident_Git_Branch_Name")), 
                    core["\u0275\u0275attribute"]("data-testid", "branch-name-text-input"), core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("ngIf", void 0 !== ctx.branchNameInputError$.value), 
                    core["\u0275\u0275advance"](4), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](21, 27, "Trident_Git_Create_New_Branch_Create_From"), " "), 
                    core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("name", "info_16_regular")("triTooltip", core["\u0275\u0275pipeBind1"](25, 29, "Trident_Git_Create_New_Branch_Tooltip")), 
                    core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](26, 31, "Trident_Git_Create_New_Branch_Tooltip")), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngModel", ctx.parentBranch)("isDisabled", 0 === ctx.data.branchesList.length)("options", ctx.getDropDownOptions()), 
                    core["\u0275\u0275attribute"]("data-testid", "parent-branch-dropdown"), core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275textInterpolate1"](" ", null !== (tmp_17_0 = ctx.parentBranch) && void 0 !== tmp_17_0 ? tmp_17_0 : core["\u0275\u0275pipeBind1"](30, 33, "Trident_Git_Create_New_Branch_Choose_Parent_Branch"), " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngForOf", ctx.filteredBranchesList));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, dialog_component.v, tri_link_component.v, tri_svg_icon_component.M, tri_tooltip_directive.Z, tri_dropdown_component.M3, tri_dropdown_item_component.l, tri_dropdown_item_menu_directive.q, tri_dropdown_component.ii, tri_search_box_component.U, localize_pipe.Y ],
                styles: [ "[_nghost-%COMP%]     mat-dialog-content{display:flex;flex-direction:column;font-size:var(--fontSizeBase300)}[_nghost-%COMP%]     .mat-mdc-dialog-content.dialog-body{display:flex;flex-direction:column;gap:16px;max-height:none}.accordion-area[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:stretch;padding:24px;border:1px solid var(--globalColorGrey82);border-radius:8px;gap:24px;height:100%}.accordion-area[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);margin:0 0 4px}.accordion-area[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]   span.mandatory[_ngcontent-%COMP%]{color:var(--globalColorRedShade10)}.accordion-area[_ngcontent-%COMP%]   .branch-name-input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;border-bottom:1px solid var(--globalColorGrey38);border:1px solid var(--globalColorGrey82);border-radius:4px;padding:6px 10px 6px 12px;box-sizing:border-box}.accordion-area[_ngcontent-%COMP%]   .branch-name-input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus{outline:none;border-bottom:2px solid var(--globalColorBrand80)}.accordion-area[_ngcontent-%COMP%]   .branch-name-input[_ngcontent-%COMP%]   .input-error[_ngcontent-%COMP%]{border-color:var(--colorPaletteRedForeground1)}.accordion-area[_ngcontent-%COMP%]   .parent-branch-selection[_ngcontent-%COMP%]{margin-bottom:12px;display:flex;flex-direction:column;gap:4px}.accordion-area[_ngcontent-%COMP%]   .parent-branch-selection[_ngcontent-%COMP%]   .header-and-tooltip[_ngcontent-%COMP%]{display:flex;flex-direction:row;height:20px}.accordion-area[_ngcontent-%COMP%]   .parent-branch-selection[_ngcontent-%COMP%]   .header-and-tooltip[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{fill:var(--globalColorGrey38)}tri-dropdown[_ngcontent-%COMP%]{width:100%;overflow-x:hidden;text-overflow:ellipsis;color:var(--colorNeutralForeground4);box-sizing:border-box}tri-dropdown.error[_ngcontent-%COMP%]{border:1px solid var(--globalColorCranberryPrimary)}.dropdown-search[_ngcontent-%COMP%]{box-sizing:border-box;width:100%;margin-bottom:2px}.error-message[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;gap:4px;color:var(--globalColorCranberryPrimary);fill:var(--globalColorCranberryPrimary)}.error-message[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:var(--fontSizeBase200)}.error-message[_ngcontent-%COMP%]   tri-svg-icon[_ngcontent-%COMP%]{min-width:12px;min-height:12px}" ],
                changeDetection: 0
            }), GitCreateBranchComponent;
        }(), git_providers = (__webpack_require__(81099), __webpack_require__(31572)), dialog_src = __webpack_require__(32980), lazy_provider_service = __webpack_require__(6814), localization_module = __webpack_require__(78035), tri_radio_button = __webpack_require__(95228), tri_link = __webpack_require__(16149), tri_svg_icon = __webpack_require__(17177), tri_empty_state = __webpack_require__(75476), tri_collapsed_container = __webpack_require__(57156), tri_card = __webpack_require__(13281), tri_tooltip = __webpack_require__(8816), git_src = __webpack_require__(18176), notification_src = __webpack_require__(12385), tri_dropdown = __webpack_require__(44913), tri_search_box = __webpack_require__(46303), git_admin_switches_service = __webpack_require__(94757), git_connection_discovery_service = __webpack_require__(84515), git_connection_service = __webpack_require__(42178), git_connection_service_injection_token = __webpack_require__(81339), git_datasource_service = __webpack_require__(15468), GitServicesConnectionModule = function() {
            function GitServicesConnectionModule() {}
            return GitServicesConnectionModule.\u0275fac = function(t) {
                return new (t || GitServicesConnectionModule);
            }, GitServicesConnectionModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: GitServicesConnectionModule
            }), GitServicesConnectionModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ git_admin_switches_service.G, git_connection_discovery_service.e, git_connection_service.r, git_datasource_service.A, lazy_provider_service.Ns.withLazyService(git_connection_service_injection_token.A, git_connection_service.r) ],
                imports: [ common.CommonModule, fesm2022_forms.u5, dialog_src.sp, tri_link.m, localization_module.Y, tri_svg_icon.T6, tri_tooltip.w, tri_card.fe, tri_collapsed_container.F, tri_empty_state.OT, tri_radio_button.W, git_src.Ug, notification_src.K3, tri_dropdown.lK, tri_search_box.b ]
            }), GitServicesConnectionModule;
        }();
    },
    81544: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            b: function() {
                return GitAuthDialogComponent;
            }
        });
        var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(32293), rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(30794), rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(35510), rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(11547), rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(59017), rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(48787), rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(14172), rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(81905), rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(83317), rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(59973), _trident_data_git__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70628), _trident_shared_git__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18016), _git_providers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31572), _services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(40773), _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(50423), _trident_localization__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(7452), _angular_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(77476), _angular_forms__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(17174), _dialog_src_lib_components_dialog_dialog_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(95825), _ux_angular_src_lib_tri_svg_icon_components_tri_svg_icon_tri_svg_icon_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(74913), _ux_angular_src_lib_tri_tooltip_tri_tooltip_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(55490), _localization_src_localize_pipe__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(55334);
        function GitAuthDialogComponent_ng_container_0_ng_container_14_Template(rf, ctx) {
            1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerStart"](0), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](1, "div", 7), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275element"](2, "tri-svg-icon", 8), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](3, "span"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](5, "localize"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"]()(), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerEnd"]()), 
            2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](1), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275attribute"]("data-testid", "tri-git-auth-dialog-name-error"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](1), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("name", "error_circle_12_filled"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275textInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](5, 3, "Pipelines_CreatePipelineDialog_NameAlreadyExistsError"), " "));
        }
        function GitAuthDialogComponent_ng_container_0_ng_container_29_Template(rf, ctx) {
            1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerStart"](0), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](1, "div", 7), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275element"](2, "tri-svg-icon", 8), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](3, "span"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](5, "localize"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"]()(), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerEnd"]()), 
            2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](1), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275attribute"]("data-testid", "tri-git-auth-dialog-pat-error"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](1), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("name", "error_circle_12_filled"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275textInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](5, 3, "Trident_Git_Auth_Dialog_Param_PAT_Error"), " "));
        }
        function GitAuthDialogComponent_ng_container_0_ng_container_42_Template(rf, ctx) {
            1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerStart"](0), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](1, "div", 7), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275element"](2, "tri-svg-icon", 8), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](3, "span"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](5, "localize"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"]()(), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerEnd"]()), 
            2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](1), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275attribute"]("data-testid", "tri-git-auth-dialog-url-error"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](1), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("name", "error_circle_12_filled"), 
            _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275textInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](5, 3, "Trident_Git_Auth_Dialog_Param_RepoUrl_Error"), " "));
        }
        var _c0 = function(a0) {
            return {
                error: a0
            };
        };
        function GitAuthDialogComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275getCurrentView"]();
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerStart"](0), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](1, "trident-dialog", 1), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275listener"]("buttonClickEvent", function($event) {
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275restoreView"](_r6);
                    var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                    return _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275resetView"](ctx_r5.clickButton($event));
                }), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](2, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](3, "div")(4, "h4"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](5), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](6, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](7, "span", 2), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](8, " *"), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"]()(), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](9, "div", 3)(10, "input", 4), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275listener"]("ngModelChange", function($event) {
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275restoreView"](_r6);
                    var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                    return _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275resetView"](ctx_r7.displayName = $event);
                })("ngModelChange", function($event) {
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275restoreView"](_r6);
                    var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                    return _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275resetView"](ctx_r8.displayNameChanged($event));
                }), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](11, "async"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](12, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](13, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275template"](14, GitAuthDialogComponent_ng_container_0_ng_container_14_Template, 6, 5, "ng-container", 0), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](15, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"]()(), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](16, "div")(17, "h4"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](18), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](19, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](20, "span", 2), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](21, " *"), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"](), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275element"](22, "tri-svg-icon", 5), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](23, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](24, "div", 3)(25, "input", 6), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275listener"]("ngModelChange", function($event) {
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275restoreView"](_r6);
                    var ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                    return _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275resetView"](ctx_r9.personalAccessToken = $event);
                })("ngModelChange", function($event) {
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275restoreView"](_r6);
                    var ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                    return _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275resetView"](ctx_r10.personalAccessTokenChanged($event));
                }), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](26, "async"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](27, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](28, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275template"](29, GitAuthDialogComponent_ng_container_0_ng_container_29_Template, 6, 5, "ng-container", 0), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](30, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"]()(), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](31, "div")(32, "h4"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275text"](33), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](34, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275element"](35, "tri-svg-icon", 5), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](36, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementStart"](37, "div", 3)(38, "input", 4), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275listener"]("ngModelChange", function($event) {
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275restoreView"](_r6);
                    var ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                    return _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275resetView"](ctx_r11.repositoryUrl = $event);
                })("ngModelChange", function($event) {
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275restoreView"](_r6);
                    var ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                    return _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275resetView"](ctx_r12.repositoryUrlChanged($event));
                }), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](39, "async"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](40, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](41, "localize"), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275template"](42, GitAuthDialogComponent_ng_container_0_ng_container_42_Template, 6, 5, "ng-container", 0), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](43, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementEnd"]()()(), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var componentAssets_r1 = ctx.ngIf, ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275nextContext"]();
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](1), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("dialogData", ctx_r0.dialogData)("closeButtonLabel", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](2, 27, "Cancel_ButtonText")), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275textInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](6, 29, "Trident_Git_Auth_Dialog_Param_DisplayName"), " "), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](5), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pureFunction1"](63, _c0, _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](11, 31, ctx_r0.isDisplayNameInvalid$)))("ngModel", ctx_r0.displayName)("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](12, 33, componentAssets_r1.localizationKeysList[1])), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275attribute"]("data-testid", "tri-git-auth-dialog-display-name-input")("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](13, 35, "Trident_Git_Auth_Dialog_Param_DisplayName")), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("ngIf", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](15, 37, ctx_r0.isDisplayNameInvalid$)), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275textInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](19, 39, "Trident_Git_Auth_Dialog_Param_PAT"), " "), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("name", "info_16_regular")("triTooltip", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](23, 41, componentAssets_r1.localizationKeysList[2])), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](3), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pureFunction1"](65, _c0, _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](26, 43, ctx_r0.isPersonalAccessTokenInvalid$)))("ngModel", ctx_r0.personalAccessToken)("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](27, 45, componentAssets_r1.localizationKeysList[3])), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275attribute"]("data-testid", "tri-git-auth-dialog-pat-input")("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](28, 47, "Trident_Git_Auth_Dialog_Param_PAT")), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("ngIf", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](30, 49, ctx_r0.isPersonalAccessTokenInvalid$)), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275textInterpolate1"](" ", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](34, 51, "Trident_Git_Auth_Dialog_Param_RepoUrl"), " "), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](2), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("name", "info_16_regular")("triTooltip", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](36, 53, componentAssets_r1.localizationKeysList[4])), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](3), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pureFunction1"](67, _c0, _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](39, 55, ctx_r0.isRepositoryUrlInvalid$)))("ngModel", ctx_r0.repositoryUrl)("placeholder", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](40, 57, componentAssets_r1.localizationKeysList[5])), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275attribute"]("data-testid", "tri-git-auth-dialog-url-input")("aria-label", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](41, 59, "Trident_Git_Auth_Dialog_Param_RepoUrl")), 
                _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275advance"](4), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("ngIf", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](43, 61, ctx_r0.isRepositoryUrlInvalid$));
            }
        }
        var GitAuthDialogComponent = function() {
            function GitAuthDialogComponent(cdr, dr, gitDatasourceService, gitSessionStorageService, localizationService, data) {
                this.cdr = cdr, this.dr = dr, this.gitDatasourceService = gitDatasourceService, 
                this.gitSessionStorageService = gitSessionStorageService, this.localizationService = localizationService, 
                this.data = data, this._isAddButtonEnabled = !1, this._isAddButtonLoading = !1, 
                this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__.xQ, this.isDisplayNameInvalid$ = new rxjs__WEBPACK_IMPORTED_MODULE_9__.X(void 0), 
                this.isPersonalAccessTokenInvalid$ = new rxjs__WEBPACK_IMPORTED_MODULE_9__.X(void 0), 
                this.validatePersonalAccessToken = function() {
                    return !1;
                }, this.isRepositoryUrlInvalid$ = new rxjs__WEBPACK_IMPORTED_MODULE_9__.X(!1), this.validateRepositoryUrl = function() {
                    return !0;
                }, this.workspaceId = this.data, this.selectedGitProviderType$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(), 
                this.componentAssets$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_10__.of)(), this.existingDatasourcesNames = [], 
                this.dialogData = {
                    title: "",
                    buttons: [ {
                        name: "Add",
                        label: this.localizationService.get("ItemAction_Add"),
                        buttonType: "primary",
                        disabled: !this.isAddButtonEnabled,
                        isLoading: this.isAddButtonLoading
                    }, {
                        name: "Cancel",
                        label: this.localizationService.get("Cancel_ButtonText"),
                        closeButton: !0
                    } ]
                }, this.displayName = "", this.personalAccessToken = "", this.repositoryUrl = "";
            }
            return GitAuthDialogComponent.prototype.ngOnInit = function() {
                var _this = this, componentAssetsRecord = (0, _git_providers__WEBPACK_IMPORTED_MODULE_2__.fA)();
                this.selectedGitProviderType$ = this.gitSessionStorageService.loadGitSessionStorage(this.workspaceId).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.U)(function(sessionStorage) {
                    return null == sessionStorage ? void 0 : sessionStorage.selectedGitProviderType;
                })), this.componentAssets$ = this.selectedGitProviderType$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.q)(1), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.U)(function(gitProviderType) {
                    if (gitProviderType) {
                        var componentAssets = componentAssetsRecord[gitProviderType];
                        if (componentAssets) return _this.dialogData.title = _this.localizationService.get(componentAssets.localizationKeysList[0]), 
                        _this.validatePersonalAccessToken = componentAssets.validationFunctionsList[0], 
                        _this.validateRepositoryUrl = componentAssets.validationFunctionsList[1], componentAssets;
                    }
                })), this.selectedGitProviderType$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.q)(1), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.w)(function(gitProviderType) {
                    return void 0 !== gitProviderType ? _this.gitDatasourceService.getDatasources({
                        workspaceId: _this.workspaceId,
                        gitProviderType
                    }).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.U)(function(datasources) {
                        return {
                            gitProviderType,
                            datasources
                        };
                    })) : (0, rxjs__WEBPACK_IMPORTED_MODULE_10__.of)({
                        gitProviderType: void 0,
                        datasources: void 0
                    });
                })).subscribe(function(_a) {
                    var _b, gitProviderType = _a.gitProviderType, datasources = _a.datasources;
                    void 0 !== (null == datasources ? void 0 : datasources.datasourcesRecord) && void 0 !== gitProviderType && (_this.existingDatasourcesNames = null !== (_b = datasources.datasourcesRecord[gitProviderType].map(function(datasource) {
                        return datasource.datasourceName.toLowerCase();
                    })) && void 0 !== _b ? _b : []);
                });
            }, GitAuthDialogComponent.prototype.ngOnDestroy = function() {
                this.destroy$.next(), this.destroy$.complete();
            }, GitAuthDialogComponent.prototype.clickButton = function(buttonName) {
                "Add" === buttonName ? this.handleCreateDatasourceRequest() : "Cancel" === buttonName && this.dr.close();
            }, GitAuthDialogComponent.prototype.displayNameChanged = function(displayName) {
                this.isDisplayNameInvalid$.next(this.existingDatasourcesNames.includes(displayName.toLowerCase())), 
                this.calculateAddButtonState();
            }, GitAuthDialogComponent.prototype.personalAccessTokenChanged = function(personalAccessToken) {
                this.isPersonalAccessTokenInvalid$.next(!("" === this.personalAccessToken || this.validatePersonalAccessToken(personalAccessToken))), 
                this.calculateAddButtonState();
            }, GitAuthDialogComponent.prototype.repositoryUrlChanged = function(repositoryUrl) {
                this.isRepositoryUrlInvalid$.next("" !== repositoryUrl && !this.validateRepositoryUrl(repositoryUrl)), 
                this.calculateAddButtonState();
            }, GitAuthDialogComponent.prototype.handleCreateDatasourceRequest = function() {
                var _this = this, request = {
                    workspaceId: this.workspaceId,
                    gitProviderType: _trident_shared_git__WEBPACK_IMPORTED_MODULE_1__.IS.GitHub,
                    displayName: this.displayName,
                    personalAccessToken: this.personalAccessToken,
                    repositoryUrl: this.repositoryUrl
                };
                this.isAddButtonLoading = !0, (0, rxjs__WEBPACK_IMPORTED_MODULE_14__.aj)([ this.gitDatasourceService.getDatasourceCallState(this.workspaceId), this.gitDatasourceService.createDatasource(request) ]).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_15__.R)(this.destroy$), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.h)(function(_a) {
                    var callState = _a[0];
                    return callState === _trident_data_git__WEBPACK_IMPORTED_MODULE_0__.j3q.Completed || (0, 
                    _trident_shared_git__WEBPACK_IMPORTED_MODULE_1__.pb)(callState);
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.q)(1)).subscribe(function(_a) {
                    var callState = _a[0];
                    callState === _trident_data_git__WEBPACK_IMPORTED_MODULE_0__.j3q.Completed ? _this.dr.close() : (_this.isAddButtonLoading = !1, 
                    (0, _trident_shared_git__WEBPACK_IMPORTED_MODULE_1__.pb)(callState) && _this.isRecoverableError(callState) || _this.dr.close());
                });
            }, GitAuthDialogComponent.prototype.calculateAddButtonState = function() {
                this.isAddButtonEnabled = !("" === this.displayName || this.isDisplayNameInvalid$.value || "" === this.personalAccessToken || this.isPersonalAccessTokenInvalid$.value || "" !== this.repositoryUrl && this.isRepositoryUrlInvalid$.value);
            }, GitAuthDialogComponent.prototype.isRecoverableError = function(_error) {
                return !1;
            }, Object.defineProperty(GitAuthDialogComponent.prototype, "isAddButtonEnabled", {
                get: function() {
                    return this._isAddButtonEnabled;
                },
                set: function(value) {
                    this._isAddButtonEnabled = value, this.dialogData.buttons[0].disabled = !value;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GitAuthDialogComponent.prototype, "isAddButtonLoading", {
                get: function() {
                    return this._isAddButtonLoading;
                },
                set: function(value) {
                    this._isAddButtonLoading = value, this.dialogData.buttons[0].isLoading = value, 
                    this.dialogData.buttons[0].label = this.localizationService.get(value ? "Adding" : "ItemAction_Add"), 
                    this.cdr.detectChanges();
                },
                enumerable: !1,
                configurable: !0
            }), GitAuthDialogComponent.\u0275fac = function(t) {
                return new (t || GitAuthDialogComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_7__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275directiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_17__.so), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275directiveInject"](_services__WEBPACK_IMPORTED_MODULE_3__.Ae), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275directiveInject"](_trident_data_git__WEBPACK_IMPORTED_MODULE_0__.gCl), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275directiveInject"](_trident_localization__WEBPACK_IMPORTED_MODULE_18__.z), _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275directiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_17__.WI));
            }, GitAuthDialogComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275defineComponent"]({
                type: GitAuthDialogComponent,
                selectors: [ [ "tri-git-auth-dialog" ] ],
                decls: 2,
                vars: 3,
                consts: [ [ 4, "ngIf" ], [ 3, "dialogData", "closeButtonLabel", "buttonClickEvent" ], [ 1, "mandatory" ], [ "tri-textfield", "", 1, "input-container" ], [ "type", "text", 3, "ngClass", "ngModel", "placeholder", "ngModelChange" ], [ "tri-svg-icon-16", "", 3, "name", "triTooltip" ], [ "type", "password", 3, "ngClass", "ngModel", "placeholder", "ngModelChange" ], [ "tri-textfield-error", "", 1, "error-message" ], [ "tri-svg-icon-12", "", 3, "name" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275template"](0, GitAuthDialogComponent_ng_container_0_Template, 44, 69, "ng-container", 0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipe"](1, "async")), 2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275property"]("ngIf", _angular_core__WEBPACK_IMPORTED_MODULE_7__["\u0275\u0275pipeBind1"](1, 1, ctx.componentAssets$));
                },
                dependencies: [ _angular_common__WEBPACK_IMPORTED_MODULE_19__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_19__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.Fj, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.JJ, _angular_forms__WEBPACK_IMPORTED_MODULE_20__.On, _dialog_src_lib_components_dialog_dialog_component__WEBPACK_IMPORTED_MODULE_4__.v, _ux_angular_src_lib_tri_svg_icon_components_tri_svg_icon_tri_svg_icon_component__WEBPACK_IMPORTED_MODULE_5__.M, _ux_angular_src_lib_tri_tooltip_tri_tooltip_directive__WEBPACK_IMPORTED_MODULE_6__.Z, _angular_common__WEBPACK_IMPORTED_MODULE_19__.AsyncPipe, _localization_src_localize_pipe__WEBPACK_IMPORTED_MODULE_21__.Y ],
                styles: [ "[_nghost-%COMP%]     mat-dialog-content{display:flex;flex-direction:column;gap:8px;font-size:var(--fontSizeBase300)}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container){display:flex;flex-direction:column;gap:4px}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) h4{display:flex;flex-direction:row;align-items:center;gap:4px;margin:0;font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold)}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) h4 span.mandatory{color:var(--globalColorRedShade10)}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) h4 tri-svg-icon{fill:var(--globalColorGrey38)}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) input{width:100%;border-bottom:1px solid var(--globalColorGrey38)}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) input.error{border:1px solid var(--globalColorCranberryPrimary)}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) input:focus{border-bottom:2px solid var(--globalColorBrand80)}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) .error-message{display:flex;flex-direction:row}[_nghost-%COMP%]     mat-dialog-content div:not(.input-container) .error-message span{font-size:var(--fontSizeBase200)}[_nghost-%COMP%]     mat-dialog-actions .button-container{gap:8px;margin:16px 0 0}[_nghost-%COMP%]     .mat-mdc-dialog-content.dialog-body{max-height:none}" ],
                changeDetection: 0
            }), GitAuthDialogComponent;
        }();
    },
    81099: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            A: function() {
                return GitLogoutDialogComponent;
            }
        });
        var take = __webpack_require__(48787), switchMap = __webpack_require__(81905), tap = __webpack_require__(17653), catchError = __webpack_require__(59822), dialog = __webpack_require__(32293), of = __webpack_require__(11547), src = __webpack_require__(65232), git_src = __webpack_require__(70628), notification_src = __webpack_require__(12385), services = __webpack_require__(40773), core = __webpack_require__(50423), localization_service = __webpack_require__(7452), dialog_component = __webpack_require__(95825), localize_pipe = __webpack_require__(55334), GitLogoutDialogComponent = function() {
            function GitLogoutDialogComponent(data, dr, localizationService, gitConfigureCredentialsService, gitSessionStorageService, gitNotificationService, gitConnectionService, gitErrorService) {
                this.data = data, this.dr = dr, this.localizationService = localizationService, 
                this.gitConfigureCredentialsService = gitConfigureCredentialsService, this.gitSessionStorageService = gitSessionStorageService, 
                this.gitNotificationService = gitNotificationService, this.gitConnectionService = gitConnectionService, 
                this.gitErrorService = gitErrorService, this.dialogData = {
                    title: this.localizationService.get("Trident_Git_Log_Out_Dialog_Title"),
                    buttons: [ {
                        name: "logoutButton",
                        label: this.localizationService.get("Trident_Git_Log_Out"),
                        buttonType: "primary"
                    }, {
                        name: "cancelButton",
                        label: this.localizationService.get("Cancel_ButtonText"),
                        closeButton: !0
                    } ]
                };
            }
            return GitLogoutDialogComponent.prototype.clickButton = function(buttonName) {
                "logoutButton" === buttonName ? this.handleLogOutRequest() : "cancelButton" === buttonName && this.dr.close(buttonName);
            }, GitLogoutDialogComponent.prototype.handleLogOutRequest = function() {
                var _this = this;
                this.gitConnectionService.getGitConnection(this.data.workspaceId).pipe((0, take.q)(1), (0, 
                switchMap.w)(function(gitConnectionRecord) {
                    return (null == gitConnectionRecord ? void 0 : gitConnectionRecord.gitConnectionDetails) ? _this.gitConfigureCredentialsService.deleteConfiguredCredentials(_this.data.workspaceId) : (0, 
                    of.of)(void 0);
                }), (0, take.q)(1), (0, tap.b)(function() {
                    _this.gitSessionStorageService.deleteCredentials(_this.data.workspaceId), _this.gitNotificationService.showSuccessNotification("Trident_Git_Toast_Logout_Success"), 
                    _this.dr.close("logoutButton");
                }), (0, catchError.K)(function(httpError) {
                    var error = _this.gitErrorService.makeGitErrorFromHttpResponse("Git_Delete_Credentials_Failed", httpError);
                    return _this.gitNotificationService.showErrorNotification(error, "Trident_Git_Toast_Logout_Fail"), 
                    [];
                })).subscribe();
            }, GitLogoutDialogComponent.\u0275fac = function(t) {
                return new (t || GitLogoutDialogComponent)(core["\u0275\u0275directiveInject"](dialog.WI), core["\u0275\u0275directiveInject"](dialog.so), core["\u0275\u0275directiveInject"](localization_service.z), core["\u0275\u0275directiveInject"](services.id), core["\u0275\u0275directiveInject"](git_src.gCl), core["\u0275\u0275directiveInject"](notification_src.mn), core["\u0275\u0275directiveInject"](services.rC), core["\u0275\u0275directiveInject"](src.jR));
            }, GitLogoutDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GitLogoutDialogComponent,
                selectors: [ [ "tri-git-logout-dialog" ] ],
                decls: 4,
                vars: 4,
                consts: [ [ 3, "dialogData", "buttonClickEvent" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "trident-dialog", 0), core["\u0275\u0275listener"]("buttonClickEvent", function($event) {
                        return ctx.clickButton($event);
                    }), core["\u0275\u0275elementStart"](1, "p"), core["\u0275\u0275text"](2), core["\u0275\u0275pipe"](3, "localize"), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275property"]("dialogData", ctx.dialogData), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](3, 2, "Trident_Git_Log_Out_Dialog_Message"), " "));
                },
                dependencies: [ dialog_component.v, localize_pipe.Y ],
                encapsulation: 2,
                changeDetection: 0
            }), GitLogoutDialogComponent;
        }();
    },
    31572: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            NJ: function() {
                return AccountsListDisplayMode;
            },
            P0: function() {
                return ConnectedProviderDetailsType;
            },
            rl: function() {
                return getUrlGitHub;
            },
            fA: function() {
                return initializeGitAuthDialogComponentAssetsRecord;
            },
            ge: function() {
                return initializeGitConnectionDiscoveryServiceConfigRecord;
            },
            _k: function() {
                return initializeGitConnectionServiceConfigRecord;
            },
            Tr: function() {
                return initializeGitDatasourceServiceConfigRecord;
            },
            EI: function() {
                return initializeGitProviderAccountsComponentAssetsRecord;
            },
            yp: function() {
                return populateGitProviderEnableMap;
            }
        });
        var of = __webpack_require__(11547), src = __webpack_require__(18016), take = __webpack_require__(48787), map = __webpack_require__(14172);
        function getBranchesValidator(request) {
            if (!(null == request ? void 0 : request.project)) throw "Git_AzureDevOpsMissingProjectName";
            if (null == request ? void 0 : request.datasourceOID) throw "Git_AzureDevOpsInvalidParameters";
        }
        function createBranchRequestValidator(requestContract) {
            if (!(null == requestContract ? void 0 : requestContract.projectName)) throw "Git_AzureDevOpsMissingProjectName";
        }
        function createDirectoryRequestValidator(request) {
            if (!(null == request ? void 0 : request.projectName)) throw "Git_AzureDevOpsMissingProjectName";
        }
        function isAzureDevopsUserAccountSelected(sessionState) {
            return void 0 !== (null == sessionState ? void 0 : sessionState.selectedUserAccount);
        }
        function gitConnectionDetailsContractValidator(details) {
            if (!(null == details ? void 0 : details.projectName)) throw "Git_AzureDevOpsMissingProjectName";
        }
        function canUserLogOut(workspaceId, gitConnectionService) {
            return gitConnectionService.getGitConnection(workspaceId).pipe((0, take.q)(1), (0, 
            map.U)(function(connection) {
                return void 0 === (null == connection ? void 0 : connection.gitConnectionDetails);
            }));
        }
        var combineLatest = __webpack_require__(59017), c_extensionDataSourcePathGitHub = "https://github.com";
        function createConfigureCredentialsRequestFromDatasourceGitHub(datasouce) {
            return {
                datasourceOID: datasouce.id
            };
        }
        function isGitHubDatasourceSelected(sessionState) {
            var _a;
            return null !== (_a = sessionState.isConfigured) && void 0 !== _a && _a;
        }
        function shouldShowGitHubSwitchAccount(workspaceId, gitConnectionService, gitSessionStorageService) {
            return (0, combineLatest.aj)([ gitSessionStorageService.loadGitSessionStorage(workspaceId), gitConnectionService.getGitConnection(workspaceId) ]).pipe((0, 
            map.U)(function(_a) {
                var connection = _a[1];
                return void 0 !== (null == connection ? void 0 : connection.gitConnectionDetails);
            }));
        }
        function selectDatasourceSideEffectGitHub(gitSessionStorageService, url, workspaceId) {
            if (url && url !== c_extensionDataSourcePathGitHub) {
                if (!validateRepositoryUrl(url)) throw new Error("Git_Invalid_Github_Repository_Url");
                var url_parts = url.split("/");
                gitSessionStorageService.setDatasourceUrl(workspaceId, url_parts[3], url_parts[4]);
            } else gitSessionStorageService.resetDatasourceUrl(workspaceId);
        }
        var localizationKeysListGitHub = [ "Trident_Git_Auth_Dialog_Title_GitHub", "Trident_Git_Auth_Dialog_Param_DisplayName_Placeholder", "Trident_Git_Auth_Dialog_Param_PAT_Tooltip_GitHub", "Trident_Git_Auth_Dialog_Param_PAT_Placeholder_GitHub", "Trident_Git_Auth_Dialog_Param_RepoUrl_Tooltip_GitHub", "Trident_Git_Auth_Dialog_Param_RepoUrl_Placeholder" ], validationFunctionsListGitHub = [ function(value) {
            return value.toLowerCase().startsWith("ghp_") || value.startsWith("github_pat_");
        }, validateRepositoryUrl ];
        function validateRepositoryUrl(value) {
            var normalizedUrl = value.replace(/\/$|\.git$/g, "");
            return /^https:\/\/github\.com\/[^/]+\/[^/]+$/.test(normalizedUrl);
        }
        function getBranchesRequestValidator(request) {
            if (!(null == request ? void 0 : request.datasourceOID)) throw "Git_GitHubMissingDatasourceOID";
        }
        function validateCreateBranchRequest(requestContract) {
            if (null == requestContract ? void 0 : requestContract.projectName) throw "Git_GitHubInvalidParameters";
            if (!(null == requestContract ? void 0 : requestContract.datasourceOID)) throw "Git_GitHubMissingDatasourceOID";
        }
        function validateCreateDirectoryRequest(request) {
            if (null == request ? void 0 : request.projectName) throw "Git_GitHubInvalidParameters";
            if (!(null == request ? void 0 : request.datasourceOID)) throw "Git_GitHubMissingDatasourceOID";
        }
        function github_gitConnectionDetailsContractValidator(details) {
            if (null == details ? void 0 : details.projectName) throw "Git_GitHubInvalidParameters";
            if (!(null == details ? void 0 : details.datasourceOID)) throw "Git_GitHubMissingDatasourceOID";
        }
        function filterDatasourcesGitHub(datasourcesList, value) {
            return null == datasourcesList ? void 0 : datasourcesList.filter(function(datasource) {
                return datasource.url === value || datasource.url === c_extensionDataSourcePathGitHub;
            });
        }
        function getUrlGitHub(gitConnectionDetails) {
            return "".concat(c_extensionDataSourcePathGitHub, "/").concat(gitConnectionDetails.organizationName, "/").concat(gitConnectionDetails.repositoryName);
        }
        var AccountsListDisplayMode = function(AccountsListDisplayMode) {
            return AccountsListDisplayMode[AccountsListDisplayMode.ShowADOAccountsList = 0] = "ShowADOAccountsList", 
            AccountsListDisplayMode[AccountsListDisplayMode.ShowGitHubDataSourcesList = 1] = "ShowGitHubDataSourcesList", 
            AccountsListDisplayMode;
        }({}), ConnectedProviderDetailsType = function(ConnectedProviderDetailsType) {
            return ConnectedProviderDetailsType.UserAccountDetails = "UserAccountDetails", ConnectedProviderDetailsType.DatasourceDetails = "DatasourceDetails", 
            ConnectedProviderDetailsType;
        }({});
        function initializeGitAuthDialogComponentAssetsRecord() {
            var _a;
            return (_a = {})[src.IS.AzureDevOps] = void 0, _a[src.IS.GitHub] = {
                localizationKeysList: localizationKeysListGitHub,
                validationFunctionsList: validationFunctionsListGitHub
            }, _a;
        }
        function initializeGitProviderAccountsComponentAssetsRecord() {
            var _a;
            return (_a = {})[src.IS.AzureDevOps] = {
                displayMode: AccountsListDisplayMode.ShowADOAccountsList,
                connectedProviderDetailsType: ConnectedProviderDetailsType.UserAccountDetails,
                doesGitProviderNeedsDatasource: !1,
                canTheUserLogOut: canUserLogOut,
                shouldShowSwitchAccount: function() {
                    return (0, of.of)(!1);
                },
                isWorkspaceConnectedToGitProvider: isAzureDevopsUserAccountSelected
            }, _a[src.IS.GitHub] = {
                displayMode: AccountsListDisplayMode.ShowGitHubDataSourcesList,
                connectedProviderDetailsType: ConnectedProviderDetailsType.DatasourceDetails,
                doesGitProviderNeedsDatasource: !0,
                canTheUserLogOut: function() {
                    return (0, of.of)(!0);
                },
                shouldShowSwitchAccount: shouldShowGitHubSwitchAccount,
                isWorkspaceConnectedToGitProvider: isGitHubDatasourceSelected,
                selectDatasourceSideEffect: selectDatasourceSideEffectGitHub,
                filterDatasources: filterDatasourcesGitHub,
                getFilteringValue: getUrlGitHub
            }, _a;
        }
        function initializeGitDatasourceServiceConfigRecord() {
            var _a;
            return (_a = {})[src.IS.AzureDevOps] = {}, _a[src.IS.GitHub] = {
                createConfigureCredentialsRequestFromDatasource: createConfigureCredentialsRequestFromDatasourceGitHub
            }, _a;
        }
        function initializeGitConnectionDiscoveryServiceConfigRecord() {
            var _a;
            return (_a = {})[src.IS.AzureDevOps] = {
                getBranchesValidator,
                createBranchRequestValidator,
                createDirectoryRequestValidator
            }, _a[src.IS.GitHub] = {
                getBranchesValidator: getBranchesRequestValidator,
                createBranchRequestValidator: validateCreateBranchRequest,
                createDirectoryRequestValidator: validateCreateDirectoryRequest
            }, _a;
        }
        function initializeGitConnectionServiceConfigRecord() {
            var _a;
            return (_a = {})[src.IS.AzureDevOps] = {
                gitConnectionDetailsContractValidator
            }, _a[src.IS.GitHub] = {
                gitConnectionDetailsContractValidator: github_gitConnectionDetailsContractValidator
            }, _a;
        }
        function populateGitProviderEnableMap(featureSwitchService) {
            var gitProviderEnabledMap = new Map;
            return gitProviderEnabledMap.set(src.IS.GitHub, function(featureSwitchService) {
                var _a, _b;
                return null === (_b = null === (_a = featureSwitchService.featureSwitches) || void 0 === _a ? void 0 : _a.gitHubTenantSettingsEnabled) || void 0 === _b || _b;
            }(featureSwitchService)), gitProviderEnabledMap.set(src.IS.AzureDevOps, !0), gitProviderEnabledMap;
        }
    },
    94757: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            G: function() {
                return GitAdminSwitchesService;
            }
        });
        var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(33554), rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(58417), rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48787), rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14172), _trident_models_feature_switch_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94771), _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50423), GitAdminSwitchesService = function() {
            function GitAdminSwitchesService(featureSwitchService) {
                this.featureSwitchService = featureSwitchService, this.featureSwitchStatusSubjects = {};
            }
            return GitAdminSwitchesService.prototype.isTenantAdminEnabled = function(workspaceId) {
                return this.featureSwitchStatusSubjects[workspaceId] || (this.featureSwitchStatusSubjects[workspaceId] = new rxjs__WEBPACK_IMPORTED_MODULE_1__.t(1), 
                this.fetchFeatureSwitchStatus(workspaceId).subscribe(this.featureSwitchStatusSubjects[workspaceId])), 
                this.featureSwitchStatusSubjects[workspaceId].asObservable();
            }, GitAdminSwitchesService.prototype.fetchFeatureSwitchStatus = function(workspaceId) {
                var _this = this;
                return !0 !== this.featureSwitchService.featureSwitches.tridentGitSwitchesDelegation ? new rxjs__WEBPACK_IMPORTED_MODULE_2__.y(function(observer) {
                    observer.next(!!_this.featureSwitchService.featureSwitches.gitIntegrationTenantSwitchEnabled), 
                    observer.complete();
                }) : this.featureSwitchService.getWorkspaceDelegatedSetting({
                    name: "GitIntegrationTenantSwitchEnabled",
                    workspaceObjectId: workspaceId
                }).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.U)(function(delegatedSetting) {
                    return delegatedSetting.isEnabled || !1;
                }));
            }, GitAdminSwitchesService.\u0275fac = function(t) {
                return new (t || GitAdminSwitchesService)(_angular_core__WEBPACK_IMPORTED_MODULE_5__["\u0275\u0275inject"](_trident_models_feature_switch_service__WEBPACK_IMPORTED_MODULE_0__.V$));
            }, GitAdminSwitchesService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_5__["\u0275\u0275defineInjectable"]({
                token: GitAdminSwitchesService,
                factory: GitAdminSwitchesService.\u0275fac,
                providedIn: "root"
            }), GitAdminSwitchesService;
        }();
    },
    84515: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return GitConnectionDiscoveryService;
            }
        });
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14172), _trident_data_access_git__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18176), _git_providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31572), _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(50423), GitConnectionDiscoveryService = function() {
            function GitConnectionDiscoveryService(gitConnectionDiscoveryClient) {
                this.gitConnectionDiscoveryClient = gitConnectionDiscoveryClient, this.serviceConfig = (0, 
                _git_providers__WEBPACK_IMPORTED_MODULE_1__.ge)();
            }
            return GitConnectionDiscoveryService.prototype.getOrganizations = function(gitProviderType, workspaceId) {
                return this.gitConnectionDiscoveryClient.getOrganizations(gitProviderType, workspaceId);
            }, GitConnectionDiscoveryService.prototype.getProjects = function(gitProviderType, gitOrganizationName, workspaceId) {
                return this.gitConnectionDiscoveryClient.getProjects(gitProviderType, gitOrganizationName, workspaceId);
            }, GitConnectionDiscoveryService.prototype.getRepositories = function(gitProviderType, gitOrganizationName, gitProjectName, workspaceId) {
                return this.gitConnectionDiscoveryClient.getRepositories(gitProviderType, gitOrganizationName, gitProjectName, workspaceId);
            }, GitConnectionDiscoveryService.prototype.getBranches = function(request) {
                var _a, validatorFunc = null === (_a = this.serviceConfig[request.gitProviderType]) || void 0 === _a ? void 0 : _a.getBranchesValidator;
                return validatorFunc && validatorFunc(request), this.gitConnectionDiscoveryClient.getBranches(request.workspaceId, request.gitProviderType, request.organization, request.repository, null == request ? void 0 : request.project, null == request ? void 0 : request.datasourceOID);
            }, GitConnectionDiscoveryService.prototype.createBranch = function(createBranchRequest) {
                var _a, validatorFunc = null === (_a = this.serviceConfig[createBranchRequest.providerType]) || void 0 === _a ? void 0 : _a.createBranchRequestValidator;
                return validatorFunc && validatorFunc(createBranchRequest), this.gitConnectionDiscoveryClient.createBranch(createBranchRequest);
            }, GitConnectionDiscoveryService.prototype.createDirectory = function(request) {
                var _a, validatorFunc = null === (_a = this.serviceConfig[request.providerType]) || void 0 === _a ? void 0 : _a.createDirectoryRequestValidator;
                return validatorFunc && validatorFunc(request), this.gitConnectionDiscoveryClient.createDirectory(request);
            }, GitConnectionDiscoveryService.prototype.getRelatedWorkspaces = function(workspaceId) {
                return this.gitConnectionDiscoveryClient.getRelatedWorkspaces(workspaceId).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.U)(function(gitRelatedWorkspaces) {
                    return gitRelatedWorkspaces.relatedWorkspaces;
                }));
            }, GitConnectionDiscoveryService.\u0275fac = function(t) {
                return new (t || GitConnectionDiscoveryService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275inject"](_trident_data_access_git__WEBPACK_IMPORTED_MODULE_0__.bE));
            }, GitConnectionDiscoveryService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275defineInjectable"]({
                token: GitConnectionDiscoveryService,
                factory: GitConnectionDiscoveryService.\u0275fac,
                providedIn: "root"
            }), GitConnectionDiscoveryService;
        }();
    },
    81339: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            A: function() {
                return GitConnectionServiceInjectionToken;
            }
        });
        var GitConnectionServiceInjectionToken = new (__webpack_require__(50423).InjectionToken)("GitConnectionService");
    },
    42178: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            r: function() {
                return GitConnectionService;
            }
        });
        var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11547), rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48787), rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(81905), rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(17653), rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(59822), _trident_data_git__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70628), _git_admin_switches_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94757), _git_providers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31572), _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50423), _ngrx_store__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(85732), GitConnectionService = function() {
            function GitConnectionService(gitConnectionFacade, gitAdminSwitchesService, store) {
                this.gitConnectionFacade = gitConnectionFacade, this.gitAdminSwitchesService = gitAdminSwitchesService, 
                this.store = store, this.serviceConfig = (0, _git_providers__WEBPACK_IMPORTED_MODULE_2__._k)();
            }
            return GitConnectionService.prototype.loadGitConnection = function(workspaceId) {
                var _this = this;
                return this.gitAdminSwitchesService.isTenantAdminEnabled(workspaceId).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.q)(1), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.w)(function(isEnabled) {
                    return isEnabled ? _this.gitConnectionFacade.loadGitConnection(workspaceId) : (0, 
                    rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(void 0);
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.b)(function(connection) {
                    var _a;
                    if (null == connection ? void 0 : connection.gitConnectionDetails) {
                        var validatorFunc = null === (_a = _this.serviceConfig[connection.gitConnectionDetails.gitProviderType]) || void 0 === _a ? void 0 : _a.gitConnectionDetailsContractValidator;
                        validatorFunc && validatorFunc(connection.gitConnectionDetails);
                    }
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.K)(function() {
                    return (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(void 0);
                }));
            }, GitConnectionService.prototype.ensureGitConnection = function(workspaceId, bypassAdminSwitch) {
                var _this = this;
                return void 0 === bypassAdminSwitch && (bypassAdminSwitch = !1), bypassAdminSwitch ? this.gitConnectionFacade.ensureGitConnection(workspaceId) : this.gitAdminSwitchesService.isTenantAdminEnabled(workspaceId).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.w)(function(isEnabled) {
                    return isEnabled ? _this.gitConnectionFacade.ensureGitConnection(workspaceId) : (0, 
                    rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(void 0);
                }));
            }, GitConnectionService.prototype.getGitConnection = function(workspaceId) {
                var _this = this;
                return this.gitAdminSwitchesService.isTenantAdminEnabled(workspaceId).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.q)(1), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.w)(function(isEnabled) {
                    return isEnabled ? _this.gitConnectionFacade.getGitConnection(workspaceId) : (0, 
                    rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(void 0);
                }));
            }, GitConnectionService.prototype.updateDatasourceInGitConnection = function(workspaceId, datasourceOID) {
                this.store.dispatch((0, _trident_data_git__WEBPACK_IMPORTED_MODULE_0__.V_q)({
                    workspaceId,
                    datasourceOID
                }));
            }, GitConnectionService.prototype.saveGitConnection = function(gitConnection) {
                var _a;
                if (null == gitConnection ? void 0 : gitConnection.gitConnectionDetails) {
                    var validatorFunc = null === (_a = this.serviceConfig[gitConnection.gitConnectionDetails.gitProviderType]) || void 0 === _a ? void 0 : _a.gitConnectionDetailsContractValidator;
                    validatorFunc && validatorFunc(gitConnection.gitConnectionDetails);
                }
                return this.gitConnectionFacade.saveGitConnection(gitConnection);
            }, GitConnectionService.prototype.deleteGitConnection = function(workspaceId) {
                return this.gitConnectionFacade.deleteGitConnection(workspaceId);
            }, GitConnectionService.prototype.getGitConnectionOperationState = function(workspaceId) {
                var _this = this;
                return this.gitAdminSwitchesService.isTenantAdminEnabled(workspaceId).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.q)(1), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.w)(function(isEnabled) {
                    return isEnabled ? _this.gitConnectionFacade.getGitConnectionOperationState(workspaceId) : (0, 
                    rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(_trident_data_git__WEBPACK_IMPORTED_MODULE_0__.Gui.Initial);
                }));
            }, GitConnectionService.prototype.checkoutBranch = function(gitCheckoutBranchState) {
                return this.gitConnectionFacade.checkoutBranch(gitCheckoutBranchState);
            }, GitConnectionService.\u0275fac = function(t) {
                return new (t || GitConnectionService)(_angular_core__WEBPACK_IMPORTED_MODULE_8__["\u0275\u0275inject"](_trident_data_git__WEBPACK_IMPORTED_MODULE_0__.f$Z), _angular_core__WEBPACK_IMPORTED_MODULE_8__["\u0275\u0275inject"](_git_admin_switches_service__WEBPACK_IMPORTED_MODULE_1__.G), _angular_core__WEBPACK_IMPORTED_MODULE_8__["\u0275\u0275inject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_9__.yh));
            }, GitConnectionService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_8__["\u0275\u0275defineInjectable"]({
                token: GitConnectionService,
                factory: GitConnectionService.\u0275fac,
                providedIn: "root"
            }), GitConnectionService;
        }();
    },
    15468: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            A: function() {
                return GitDatasourceService;
            }
        });
        var _trident_data_git__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70628), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), GitDatasourceService = function() {
            function GitDatasourceService(gitDatasourcesFacade) {
                this.gitDatasourcesFacade = gitDatasourcesFacade;
            }
            return GitDatasourceService.prototype.createDatasource = function(request) {
                return this.gitDatasourcesFacade.createDatasource(request);
            }, GitDatasourceService.prototype.discoverDatasources = function(gitDatasourcesModel) {
                return this.gitDatasourcesFacade.loadDatasources(gitDatasourcesModel);
            }, GitDatasourceService.prototype.getDatasources = function(gitDatasourcesModel) {
                return this.gitDatasourcesFacade.getDatasources(gitDatasourcesModel);
            }, GitDatasourceService.prototype.getDatasourceCallState = function(workspaceId) {
                return this.gitDatasourcesFacade.getDataSourcesCallState(workspaceId);
            }, GitDatasourceService.\u0275fac = function(t) {
                return new (t || GitDatasourceService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275inject"](_trident_data_git__WEBPACK_IMPORTED_MODULE_0__.iAv));
            }, GitDatasourceService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjectable"]({
                token: GitDatasourceService,
                factory: GitDatasourceService.\u0275fac,
                providedIn: "root"
            }), GitDatasourceService;
        }();
    },
    40773: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Gg: function() {
                return git_admin_switches_service.G;
            },
            id: function() {
                return GitConfigureCredentialsService;
            },
            eL: function() {
                return git_connection_discovery_service.e;
            },
            rC: function() {
                return git_connection_service.r;
            },
            AC: function() {
                return git_connection_service_injection_token.A;
            },
            Ae: function() {
                return git_datasource_service.A;
            },
            Mv: function() {
                return GitSwitchBranchService;
            }
        });
        var git_admin_switches_service = __webpack_require__(94757), src = __webpack_require__(70628), git_connection_discovery_service = __webpack_require__(84515), git_connection_service_injection_token = __webpack_require__(81339), git_connection_service = __webpack_require__(42178), git_datasource_service = __webpack_require__(15468), throwError = __webpack_require__(60225), git_src = __webpack_require__(18176), git_providers = __webpack_require__(31572), core = __webpack_require__(50423), GitConfigureCredentialsService = function() {
            function GitConfigureCredentialsService(gitDatasourceClient) {
                this.gitDatasourceClient = gitDatasourceClient, this.datasourceServiceConfigRecord = (0, 
                git_providers.Tr)();
            }
            return GitConfigureCredentialsService.prototype.configureCredentials = function(gitProviderType, workspaceId, dataSource) {
                var _a, createRequestFunc = null === (_a = this.datasourceServiceConfigRecord[gitProviderType]) || void 0 === _a ? void 0 : _a.createConfigureCredentialsRequestFromDatasource;
                return createRequestFunc ? this.gitDatasourceClient.postConfigureCredentials(workspaceId, createRequestFunc(dataSource)) : (0, 
                throwError._)("Git_UnsupportedGitProvider");
            }, GitConfigureCredentialsService.prototype.deleteConfiguredCredentials = function(workspaceId) {
                return this.gitDatasourceClient.deleteConfiguredCredentials(workspaceId);
            }, Object.defineProperty(GitConfigureCredentialsService.prototype, "getDatasourceServiceConfig", {
                get: function() {
                    return this.datasourceServiceConfigRecord;
                },
                enumerable: !1,
                configurable: !0
            }), GitConfigureCredentialsService.\u0275fac = function(t) {
                return new (t || GitConfigureCredentialsService)(core["\u0275\u0275inject"](git_src.Kl));
            }, GitConfigureCredentialsService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitConfigureCredentialsService,
                factory: GitConfigureCredentialsService.\u0275fac,
                providedIn: "root"
            }), GitConfigureCredentialsService;
        }(), GitSwitchBranchService = function() {
            function GitSwitchBranchService(gitSwitchBranchFacade) {
                this.gitSwitchBranchFacade = gitSwitchBranchFacade;
            }
            return GitSwitchBranchService.prototype.switchBranch = function(gitSwitchBranchState) {
                return this.gitSwitchBranchFacade.switchBranch(gitSwitchBranchState);
            }, GitSwitchBranchService.prototype.getSwitchBranchState = function(workspaceId) {
                return this.gitSwitchBranchFacade.getSwitchBranchState(workspaceId);
            }, GitSwitchBranchService.\u0275fac = function(t) {
                return new (t || GitSwitchBranchService)(core["\u0275\u0275inject"](src.CCT));
            }, GitSwitchBranchService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitSwitchBranchService,
                factory: GitSwitchBranchService.\u0275fac,
                providedIn: "root"
            }), GitSwitchBranchService;
        }();
    },
    65232: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            jR: function() {
                return GitErrorService;
            },
            Nn: function() {
                return GitServicesErrorModule;
            }
        });
        var common = __webpack_require__(77476), dialog = __webpack_require__(32293), localization_module = __webpack_require__(78035), src = __webpack_require__(32980), tri_svg_icon = __webpack_require__(17177), core = __webpack_require__(50423), GitServicesErrorModule = function() {
            function GitServicesErrorModule() {}
            return GitServicesErrorModule.\u0275fac = function(t) {
                return new (t || GitServicesErrorModule);
            }, GitServicesErrorModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: GitServicesErrorModule
            }), GitServicesErrorModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, dialog.Is, localization_module.Y, src.sp, tri_svg_icon.T6 ]
            }), GitServicesErrorModule;
        }(), tslib_es6 = __webpack_require__(81337), git_src = __webpack_require__(18016), manifest_src = __webpack_require__(67758), registry_src = __webpack_require__(41838), artifact_src = __webpack_require__(12315), dialog_component = __webpack_require__(95825), tri_svg_icon_component = __webpack_require__(74913);
        function GitItemsListComponent_div_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 1), core["\u0275\u0275element"](1, "tri-svg-icon", 2), 
            core["\u0275\u0275elementStart"](2, "span", 3), core["\u0275\u0275text"](3), core["\u0275\u0275elementEnd"]()()), 
            2 & rf) {
                var item_r1 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("sprite", item_r1.sprite)("name", item_r1.iconName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("aria-label", item_r1.name), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](item_r1.name);
            }
        }
        var GitItemsListComponent = function() {
            function GitItemsListComponent() {
                this.artifactList = [];
            }
            return GitItemsListComponent.\u0275fac = function(t) {
                return new (t || GitItemsListComponent);
            }, GitItemsListComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GitItemsListComponent,
                selectors: [ [ "tri-git-items-list" ] ],
                inputs: {
                    artifactList: "artifactList"
                },
                decls: 1,
                vars: 1,
                consts: [ [ "class", "artifacts-list", 4, "ngFor", "ngForOf" ], [ 1, "artifacts-list" ], [ "tri-svg-icon-22", "", 1, "artifact-icon", 3, "sprite", "name" ], [ "tabIndex", "0", 1, "artifact-name", "trimmedTextWithEllipsis" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, GitItemsListComponent_div_0_Template, 4, 4, "div", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngForOf", ctx.artifactList);
                },
                dependencies: [ common.NgForOf, tri_svg_icon_component.M ],
                styles: [ ".artifacts-list[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;min-height:40px;flex-grow:1;gap:8px}.artifacts-list[_ngcontent-%COMP%]   .artifact-icon[_ngcontent-%COMP%]{fill:var(--globalColorGrey26)}.artifacts-list[_ngcontent-%COMP%]   .artifact-name[_ngcontent-%COMP%]{font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);color:var(--colorNeutralForeground1)}" ]
            }), GitItemsListComponent;
        }(), localize_pipe = __webpack_require__(55334);
        function GitErrorDialogComponent_tri_git_items_list_3_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "tri-git-items-list", 5), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("artifactList", ctx_r0.failedArtifacts);
            }
        }
        function GitErrorDialogComponent_div_4_div_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 8)(1, "span"), core["\u0275\u0275element"](2, "tri-svg-icon", 9), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "span", 10), 
            core["\u0275\u0275text"](4), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var infoText_r5 = ctx.$implicit;
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("sprite", "git-icons")("name", "bullet_dot_8"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("aria-label", infoText_r5), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](infoText_r5);
            }
        }
        function GitErrorDialogComponent_div_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 6), core["\u0275\u0275template"](1, GitErrorDialogComponent_div_4_div_1_Template, 5, 4, "div", 7), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r1.data.moreInfo);
            }
        }
        function GitErrorDialogComponent_div_5_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 11), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.collapseExpand());
                }), core["\u0275\u0275pipe"](1, "localizeFormat"), core["\u0275\u0275elementStart"](2, "span"), 
                core["\u0275\u0275text"](3), core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275pipe"](5, "localize"), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](6, "tri-svg-icon", 12), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275attribute"]("aria-expanded", !ctx_r2.showDetailsToggle)("aria-label", core["\u0275\u0275pipeBind2"](1, 4, ctx_r2.showDetailsToggle ? "ClickToExpandFormat" : "ClickToCollapseFormat", "errorDetails")), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate"](ctx_r2.showDetailsToggle ? core["\u0275\u0275pipeBind1"](4, 7, "Generic_HideDetails") : core["\u0275\u0275pipeBind1"](5, 9, "Generic_ShowDetails")), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("name", ctx_r2.showDetailsToggle ? "chevron_up_16_regular" : "chevron_down_16_regular");
            }
        }
        function GitErrorDialogComponent_ng_container_6_p_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "p")(1, "b"), core["\u0275\u0275text"](2), 
            core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275text"](4), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var detail_r9 = ctx.$implicit;
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"]("", detail_r9.shouldLocalize ? core["\u0275\u0275pipeBind1"](3, 2, detail_r9.name) : detail_r9.name, " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"]("", detail_r9.content, " ");
            }
        }
        function GitErrorDialogComponent_ng_container_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "div", 13), 
            core["\u0275\u0275template"](2, GitErrorDialogComponent_ng_container_6_p_2_Template, 5, 4, "p", 14), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", ctx_r3.details);
            }
        }
        var GitErrorDialogComponent = function() {
            function GitErrorDialogComponent(dialogRef, extensionManifestService, data) {
                var _a, _b, _c, _d;
                this.dialogRef = dialogRef, this.extensionManifestService = extensionManifestService, 
                this.data = data, this.showDetailsToggle = !1, this.errorDetails = this.data.errorDetails, 
                this.requestInfo = this.data.requestInfo, this.details = [], this.artifactType = null === (_b = null === (_a = this.errorDetails) || void 0 === _a ? void 0 : _a.failedArtifactMetadata) || void 0 === _b ? void 0 : _b.artifactType, 
                this.artifactName = null === (_d = null === (_c = this.errorDetails) || void 0 === _c ? void 0 : _c.failedArtifactMetadata) || void 0 === _d ? void 0 : _d.artifactDisplayName, 
                this.failedArtifacts = [], this.failedArtifactsSize = 0, this.createGitErrorDetailsFromGitError();
            }
            return GitErrorDialogComponent.prototype.convertDialogData = function(data) {
                return {
                    title: data.title,
                    buttons: data.buttons
                };
            }, GitErrorDialogComponent.prototype.close = function() {
                return this.dialogRef.close();
            }, GitErrorDialogComponent.prototype.collapseExpand = function() {
                this.showDetailsToggle = !this.showDetailsToggle;
            }, GitErrorDialogComponent.prototype.getErrorMoreInfoSize = function() {
                var _a, _b;
                return null !== (_b = null === (_a = this.data.moreInfo) || void 0 === _a ? void 0 : _a.length) && void 0 !== _b ? _b : 0;
            }, GitErrorDialogComponent.prototype.createGitErrorDetailsFromGitError = function() {
                var _a, _b, _c, _d, _e, _f;
                if (null == this ? void 0 : this.errorDetails) {
                    if (this.requestInfo.clusterUri && this.details.push(this.createGitErrorDetail("ServerError_ClusterUriText", this.requestInfo.clusterUri)), 
                    this.requestInfo.activityId && this.details.push(this.createGitErrorDetail("ServerError_ActivityIdText", this.requestInfo.activityId)), 
                    this.requestInfo.requestId && this.details.push(this.createGitErrorDetail("AdditionalErrorInfo_RequestIdText", this.requestInfo.requestId)), 
                    (null === (_a = this.errorDetails) || void 0 === _a ? void 0 : _a.workloadErrorCode) && this.details.push(this.createGitErrorDetail("Workload_Error_Code", this.errorDetails.workloadErrorCode)), 
                    this.getFailedArtifactsDetails(), null === (_b = this.errorDetails) || void 0 === _b ? void 0 : _b.workloadErrorMessage) {
                        var errorMessage = this.errorDetails.workloadErrorMessage, numberOfParamsInMessage = (errorMessage.match(/{(\d+)}/g) || []).length;
                        if (null === (_c = this.errorDetails) || void 0 === _c ? void 0 : _c.workloadErrorParameters) {
                            var params = this.errorDetails.workloadErrorParameters, numberOfParamsInJSON = params.length;
                            if (numberOfParamsInMessage === numberOfParamsInJSON) {
                                for (var formattedMessage = errorMessage, i = 0; i < numberOfParamsInJSON; i++) formattedMessage = formattedMessage.replace("{".concat(i, "}"), params[i]);
                                this.details.push(this.createGitErrorDetail("Workload_Error_Message", formattedMessage));
                            }
                        } else 0 === numberOfParamsInMessage && this.details.push(this.createGitErrorDetail("Workload_Error_Message", errorMessage));
                    }
                    if (null === (_d = this.errorDetails) || void 0 === _d ? void 0 : _d.errorParameters) for (var key in this.errorDetails.errorParameters) this.details.push(this.createGitErrorDetail(key, this.errorDetails.errorParameters[key], !1));
                    this.details.push(this.createGitErrorDetail("ServerError_TimestampText", null !== (_f = null === (_e = null == this ? void 0 : this.errorDetails) || void 0 === _e ? void 0 : _e.time) && void 0 !== _f ? _f : (new Date).toString()));
                }
            }, GitErrorDialogComponent.prototype.createGitErrorDetail = function(name, content, shouldLocalize) {
                return void 0 === shouldLocalize && (shouldLocalize = !0), {
                    name,
                    content,
                    shouldLocalize
                };
            }, GitErrorDialogComponent.prototype.getFailedArtifactsDetails = function() {
                var _a, _b, _c;
                if (this.artifactType && this.artifactName) {
                    var artifactType = this.extensionManifestService.getFrontendArtifactType(this.artifactType), artifactIcon = (0, 
                    registry_src.zp)(artifactType);
                    this.failedArtifacts.push({
                        name: this.artifactName,
                        iconName: null == artifactIcon ? void 0 : artifactIcon.name,
                        sprite: null == artifactIcon ? void 0 : artifactIcon.sprite
                    });
                } else if (null === (_a = this.errorDetails) || void 0 === _a ? void 0 : _a.errorParameters) for (var parms = null === (_c = null === (_b = this.errorDetails) || void 0 === _b ? void 0 : _b.errorParameters.Artifacts) || void 0 === _c ? void 0 : _c.slice(1, -1), regex = /Display Name: '([^']+)' Type: '([^']+)'/g, matches = void 0; null !== (matches = regex.exec(parms)); ) artifactType = this.extensionManifestService.getFrontendArtifactType(matches[2]), 
                artifact_src.RG.includes(artifactType) && (artifactIcon = (0, registry_src.zp)(artifactType), 
                this.failedArtifacts.push({
                    name: matches[1],
                    iconName: null == artifactIcon ? void 0 : artifactIcon.name,
                    sprite: null == artifactIcon ? void 0 : artifactIcon.sprite
                }));
                this.failedArtifactsSize = this.failedArtifacts.length;
            }, GitErrorDialogComponent.\u0275fac = function(t) {
                return new (t || GitErrorDialogComponent)(core["\u0275\u0275directiveInject"](dialog.so), core["\u0275\u0275directiveInject"](manifest_src.vC), core["\u0275\u0275directiveInject"](dialog.WI));
            }, GitErrorDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: GitErrorDialogComponent,
                selectors: [ [ "tri-git-error-dialog" ] ],
                decls: 7,
                vars: 9,
                consts: [ [ 3, "dialogData", "closeButtonLabel", "buttonClickEvent" ], [ "class", "git-artifact-list", 3, "artifactList", 4, "ngIf" ], [ "class", "git-info-list", 4, "ngIf" ], [ "class", "details-selector", 3, "click", 4, "ngIf" ], [ 4, "ngIf" ], [ 1, "git-artifact-list", 3, "artifactList" ], [ 1, "git-info-list" ], [ "class", "info-list-item", 4, "ngFor", "ngForOf" ], [ 1, "info-list-item" ], [ "calss", "info-icon", "tri-svg-icon-8", "", 3, "sprite", "name" ], [ 1, "list-item" ], [ 1, "details-selector", 3, "click" ], [ "tri-svg-icon-16", "", 3, "name" ], [ 1, "error-details-container" ], [ 4, "ngFor", "ngForOf" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "trident-dialog", 0), core["\u0275\u0275listener"]("buttonClickEvent", function() {
                        return ctx.close();
                    }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275text"](2), core["\u0275\u0275template"](3, GitErrorDialogComponent_tri_git_items_list_3_Template, 1, 1, "tri-git-items-list", 1), 
                    core["\u0275\u0275template"](4, GitErrorDialogComponent_div_4_Template, 2, 1, "div", 2), 
                    core["\u0275\u0275template"](5, GitErrorDialogComponent_div_5_Template, 7, 11, "div", 3), 
                    core["\u0275\u0275template"](6, GitErrorDialogComponent_ng_container_6_Template, 3, 1, "ng-container", 4), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275property"]("dialogData", ctx.convertDialogData(ctx.data))("closeButtonLabel", core["\u0275\u0275pipeBind1"](1, 7, "Close")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", ctx.data.content, " "), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.failedArtifactsSize > 0), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.getErrorMoreInfoSize() > 0), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.details.length > 0), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.showDetailsToggle));
                },
                dependencies: [ common.NgForOf, common.NgIf, dialog_component.v, tri_svg_icon_component.M, GitItemsListComponent, localize_pipe.Y, localize_pipe.A ],
                styles: [ ".mat-mdc-dialog-content{display:flex;flex-direction:column;margin-top:4px;margin-bottom:16px;gap:12px}.details-selector[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;gap:6px;font-weight:600}.error-details-container[_ngcontent-%COMP%]{font-size:12px;display:flex;flex-direction:column;align-items:flex-start;padding:12px;max-height:228px;overflow-y:scroll;background:var(--globalColorGrey96);border-radius:4px}.error-details-container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0}.git-artifact-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;overflow-y:auto;min-height:40px;max-height:200px}.git-info-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:8px}.info-list-item[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:flex-start;gap:8px}" ],
                changeDetection: 0
            }), GitErrorDialogComponent;
        }(), localization_service = __webpack_require__(7452), telemetry_service = __webpack_require__(54323), GitErrorService = function() {
            function GitErrorService(dialogService, localizationService, telemetryService) {
                this.dialogService = dialogService, this.localizationService = localizationService, 
                this.telemetryService = telemetryService, this.dialogWidth = "564px", this.defaultDialogClass = "dialog-style";
            }
            return GitErrorService.prototype.getErrorContent = function(errorType) {
                var _a, _b, messageKey = null === (_a = git_src.A6[errorType]) || void 0 === _a ? void 0 : _a.messageKey, titleKey = null === (_b = git_src.A6[errorType]) || void 0 === _b ? void 0 : _b.titleKey;
                return messageKey && titleKey || !errorType.startsWith("Git_") && !errorType.startsWith("Alm") || this.telemetryService.logEvent({
                    name: "Git error which is not mapped to content occurred",
                    properties: {
                        errorType
                    }
                }), {
                    message: this.localizationService.get(null != messageKey ? messageKey : "ErrorDialogHelperText_TechnicalDetails"),
                    title: this.localizationService.get(null != titleKey ? titleKey : "ErrorMessage_DefaultTitle")
                };
            }, GitErrorService.prototype.getErrorMoreInfo = function(errorType) {
                var _a, _b;
                return null !== (_b = null === (_a = git_src.jZ[errorType]) || void 0 === _a ? void 0 : _a.moreInfoKeys) && void 0 !== _b ? _b : [];
            }, GitErrorService.prototype.handleSyncGitError = function(errorType, response) {
                var error = this.makeGitErrorFromHttpResponse(errorType, response);
                return this.showErrorHandlingDialog(error), error;
            }, GitErrorService.prototype.handleAlmGitError = function(cause, gitSyncState) {
                return this.isGitAlmError(cause, gitSyncState) ? this.makeGitErrorFromAlmResponse(cause, gitSyncState) : this.makeClientSideGitError(cause);
            }, GitErrorService.prototype.handleClientSideGitError = function(type, parameters) {
                this.logValidationError(type);
                var error = this.makeClientSideGitError(type, parameters);
                return this.showErrorHandlingDialog(error), error;
            }, GitErrorService.prototype.logValidationError = function(errorType) {
                this.telemetryService.logEvent({
                    name: "Validation error occurred",
                    properties: {
                        errorType
                    }
                });
            }, GitErrorService.prototype.showErrorHandlingDialog = function(error) {
                var dialog = this.createGitErrorDialogModel(error);
                return this.dialogService.open(dialog.componentRef, dialog.config);
            }, GitErrorService.prototype.createGitErrorDialogModel = function(error) {
                var _a, _b, _c, _this = this, closeButtonText = this.localizationService.get("Close"), errorDetails = (0, 
                git_src.lz)(error), moreInfo = this.getErrorMoreInfo(null == errorDetails ? void 0 : errorDetails.errorType).map(function(key) {
                    return _this.localizationService.get(key);
                }), data = {
                    title: errorDetails.title,
                    buttons: [ {
                        name: closeButtonText,
                        label: closeButtonText,
                        buttonType: null
                    } ],
                    content: errorDetails.message,
                    moreInfo,
                    errorDetails,
                    requestInfo: {
                        clusterUri: null === (_a = error.errorInfo) || void 0 === _a ? void 0 : _a.clusterUri,
                        activityId: null === (_b = error.errorInfo) || void 0 === _b ? void 0 : _b.activityId,
                        requestId: null === (_c = error.errorInfo) || void 0 === _c ? void 0 : _c.requestId
                    }
                };
                return {
                    componentRef: GitErrorDialogComponent,
                    config: {
                        width: this.dialogWidth,
                        panelClass: this.defaultDialogClass,
                        data
                    }
                };
            }, GitErrorService.prototype.makeClientSideGitError = function(errorType, parameters) {
                var errorContent = this.getErrorContent(errorType);
                return (0, git_src.iX)([ {
                    errorType,
                    title: errorContent.title,
                    message: errorContent.message,
                    errorParameters: parameters
                } ]);
            }, GitErrorService.prototype.makeGitErrorFromHttpResponse = function(cause, response) {
                var errorType, gitWorkloadErrorDetails = this.parseHttpWorkloadError(response), gitHttpErrorDetails = this.parseHttpError(response);
                errorType = (0, git_src.KJ)(response) ? "Git_AdoConditionalAccessNotSupported" : "Git_Switch_Branch_Item_Not_Found" === cause ? "Git_Switch_Branch_Item_Not_Found" : "Git_Branch_Out_Failed" === cause ? this.getBranchOutError(response) : (null == gitHttpErrorDetails ? void 0 : gitHttpErrorDetails.code) ? gitHttpErrorDetails.code : cause;
                var errorContent = this.getErrorContent(errorType), errorDetails = (0, tslib_es6.__assign)((0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitWorkloadErrorDetails), gitHttpErrorDetails), {
                    errorType,
                    time: (new Date).toString(),
                    title: errorContent.title,
                    message: errorContent.message
                }), errorInfo = {
                    requestId: null == response ? void 0 : response.requestId,
                    clusterUri: window.clusterUri,
                    activityId: null == response ? void 0 : response.activityId,
                    statusCode: null == response ? void 0 : response.status
                };
                return (0, git_src.iX)([ errorDetails ], errorInfo);
            }, GitErrorService.prototype.makeGitErrorFromAlmResponse = function(cause, gitSyncState) {
                var _a, _b, _c, _d, gitWorkloadErrorDetails, _this = this, gitErrorDetails = [];
                if (gitSyncState.gitInteractiveOperationErrorDetailsList) null === (_a = gitSyncState.gitInteractiveOperationErrorDetailsList) || void 0 === _a || _a.forEach(function(element) {
                    var _a, _b, _c, _d, _e, _f, _g;
                    gitWorkloadErrorDetails = _this.parseAlmWorkloadError(element);
                    var errorContet = _this.getErrorContent(gitWorkloadErrorDetails.workloadErrorCode), interactiveOperationInfo = {
                        dialogMessage: errorContet.message,
                        interactionType: null !== (_c = null === (_b = null === (_a = null == element ? void 0 : element.artifactErrorDetails) || void 0 === _a ? void 0 : _a.UserInteractionRequest) || void 0 === _b ? void 0 : _b.InteractionType) && void 0 !== _c ? _c : git_src.s_.None,
                        options: null !== (_f = null === (_e = null === (_d = null == element ? void 0 : element.artifactErrorDetails) || void 0 === _d ? void 0 : _d.UserInteractionRequest) || void 0 === _e ? void 0 : _e.Options) && void 0 !== _f ? _f : []
                    }, errorDetails = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitWorkloadErrorDetails), {
                        errorType: cause,
                        time: null === (_g = gitSyncState.lastUpdatedTime) || void 0 === _g ? void 0 : _g.toString(),
                        title: errorContet.title,
                        message: errorContet.message,
                        interactiveOperationInfo
                    });
                    gitErrorDetails.push(errorDetails);
                }); else if (gitSyncState.gitNonInteractiveOperationErrorDetails) {
                    var errorType = null !== (_b = null == (gitWorkloadErrorDetails = this.parseAlmWorkloadError(gitSyncState.gitNonInteractiveOperationErrorDetails)) ? void 0 : gitWorkloadErrorDetails.workloadErrorCode) && void 0 !== _b ? _b : cause, errorContet = this.getErrorContent(errorType), errorDetails = (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, gitWorkloadErrorDetails), {
                        errorType,
                        time: null === (_c = gitSyncState.lastUpdatedTime) || void 0 === _c ? void 0 : _c.toString(),
                        title: errorContet.title,
                        message: errorContet.message
                    });
                    if ((0, git_src.VQ)(cause, gitSyncState)) {
                        var errorContent = this.getErrorContent("Git_GitProviderCommitRejectedByPolicy");
                        errorDetails.errorType = "Git_GitProviderCommitRejectedByPolicy", errorDetails.title = errorContent.title, 
                        errorDetails.message = errorContent.message;
                    } else (0, git_src.Ss)(cause, gitSyncState) && (errorContent = this.getErrorContent("Git_GitProviderCommitMaxSizeExceeded"), 
                    errorDetails.errorType = "Git_GitProviderCommitMaxSizeExceeded", errorDetails.title = errorContent.title, 
                    errorDetails.message = errorContent.message);
                    gitErrorDetails.push(errorDetails);
                }
                var errorInfo = {
                    requestId: null === (_d = gitSyncState.gitNonInteractiveOperationErrorDetails) || void 0 === _d ? void 0 : _d.requestId,
                    clusterUri: window.clusterUri,
                    retryOperationId: gitSyncState.gitOperationId
                };
                return (0, git_src.iX)(gitErrorDetails, errorInfo);
            }, GitErrorService.prototype.isDedicatedErrorMessageAvailable = function(error) {
                return error in git_src.A6;
            }, GitErrorService.prototype.parseHttpError = function(response) {
                var _a, _b, _c;
                return {
                    code: null === (_a = null == response ? void 0 : response.error) || void 0 === _a ? void 0 : _a.code,
                    errorParameters: null === (_c = null === (_b = null == response ? void 0 : response.error) || void 0 === _b ? void 0 : _b["pbi.error"]) || void 0 === _c ? void 0 : _c.parameters
                };
            }, GitErrorService.prototype.parseHttpWorkloadError = function(response) {
                var _a, _b, _c, _d, _e, _f, _g, deserializedGitErrorDetails, serializedGitErrorDetails = null === (_c = null === (_b = null === (_a = null == response ? void 0 : response.error) || void 0 === _a ? void 0 : _a["pbi.error"]) || void 0 === _b ? void 0 : _b.parameters) || void 0 === _c ? void 0 : _c.GitErrorDetails;
                return serializedGitErrorDetails && (deserializedGitErrorDetails = JSON.parse(serializedGitErrorDetails)), 
                deserializedGitErrorDetails ? {
                    failedArtifactMetadata: (null == deserializedGitErrorDetails ? void 0 : deserializedGitErrorDetails.artifactType) && (null == deserializedGitErrorDetails ? void 0 : deserializedGitErrorDetails.artifactDisplayName) ? {
                        artifactType: deserializedGitErrorDetails.artifactType,
                        artifactDisplayName: deserializedGitErrorDetails.artifactDisplayName,
                        artifactLogicalId: deserializedGitErrorDetails.artifactLogicalId
                    } : void 0,
                    workloadErrorCode: null !== (_e = null === (_d = null == deserializedGitErrorDetails ? void 0 : deserializedGitErrorDetails.errorDetails) || void 0 === _d ? void 0 : _d.ErrorCode) && void 0 !== _e ? _e : null == deserializedGitErrorDetails ? void 0 : deserializedGitErrorDetails.errorCode,
                    workloadErrorMessage: null === (_f = null == deserializedGitErrorDetails ? void 0 : deserializedGitErrorDetails.errorDetails) || void 0 === _f ? void 0 : _f.ErrorMessage,
                    workloadErrorParameters: null === (_g = null == deserializedGitErrorDetails ? void 0 : deserializedGitErrorDetails.errorDetails) || void 0 === _g ? void 0 : _g.ErrorParameters
                } : {
                    failedArtifactMetadata: void 0,
                    workloadErrorCode: void 0,
                    workloadErrorMessage: void 0,
                    workloadErrorParameters: void 0
                };
            }, GitErrorService.prototype.parseAlmWorkloadError = function(gitErrorDetails) {
                var _a, _b, _c, _d, _e;
                return {
                    failedArtifactMetadata: {
                        artifactDisplayName: gitErrorDetails.artifactDisplayName,
                        artifactType: gitErrorDetails.artifactType,
                        artifactLogicalId: gitErrorDetails.artifactLogicalId
                    },
                    workloadErrorCode: null !== (_b = null === (_a = gitErrorDetails.artifactErrorDetails) || void 0 === _a ? void 0 : _a.ErrorCode) && void 0 !== _b ? _b : gitErrorDetails.errorCode,
                    workloadErrorMessage: null === (_c = gitErrorDetails.artifactErrorDetails) || void 0 === _c ? void 0 : _c.ErrorMessage,
                    workloadErrorCategory: null === (_d = gitErrorDetails.artifactErrorDetails) || void 0 === _d ? void 0 : _d.ErrorCategory,
                    workloadErrorParameters: null === (_e = null == gitErrorDetails ? void 0 : gitErrorDetails.artifactErrorDetails) || void 0 === _e ? void 0 : _e.ErrorParameters
                };
            }, GitErrorService.prototype.isGitAlmError = function(cause, gitSyncState) {
                return gitSyncState.gitOperationStatus === git_src.wM.Failed && (!!gitSyncState.gitNonInteractiveOperationErrorDetails || !!gitSyncState.gitInteractiveOperationErrorDetailsList) && (0, 
                git_src.ve)(cause);
            }, GitErrorService.prototype.getBranchOutError = function(httpError) {
                var _a, _b, _c, _d, _e, errorType = null === (_a = httpError.error) || void 0 === _a ? void 0 : _a.code;
                if ("Alm_InvalidBranchOutRequest_OperationFailureAfterFolderCreation" === errorType) {
                    var internalErrorCode = null === (_e = null === (_d = null === (_c = null === (_b = httpError.error) || void 0 === _b ? void 0 : _b["pbi.error"]) || void 0 === _c ? void 0 : _c.details) || void 0 === _d ? void 0 : _d[0]) || void 0 === _e ? void 0 : _e.code;
                    if (internalErrorCode) return internalErrorCode;
                } else if (errorType) return errorType;
                return "Git_Branch_Out_Failed";
            }, GitErrorService.\u0275fac = function(t) {
                return new (t || GitErrorService)(core["\u0275\u0275inject"](src.uQ), core["\u0275\u0275inject"](localization_service.z), core["\u0275\u0275inject"](telemetry_service.t));
            }, GitErrorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitErrorService,
                factory: GitErrorService.\u0275fac,
                providedIn: "root"
            }), GitErrorService;
        }();
        (0, tslib_es6.__assign)({
            errorType: "Git_MergePolicyNotSpecified"
        }, {
            title: "MockTitle",
            message: "MockMessage"
        });
    },
    12385: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            mn: function() {
                return GitNotificationService;
            },
            K3: function() {
                return GitServicesNotificationModule;
            }
        });
        var common = __webpack_require__(77476), src = __webpack_require__(65232), core = __webpack_require__(50423), GitServicesNotificationModule = function() {
            function GitServicesNotificationModule() {}
            return GitServicesNotificationModule.\u0275fac = function(t) {
                return new (t || GitServicesNotificationModule);
            }, GitServicesNotificationModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: GitServicesNotificationModule
            }), GitServicesNotificationModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, src.Nn ]
            }), GitServicesNotificationModule;
        }(), tslib_es6 = __webpack_require__(81337), notification_toast_service = __webpack_require__(42888), index_core = __webpack_require__(73471), baseNotification = {
            style: "Trident"
        }, baseLoadingNotification = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseNotification), {
            notificationType: index_core.k$.Loading
        }), baseSuccessNotification = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseNotification), {
            notificationType: index_core.k$.Success
        }), baseErrorNotification = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseNotification), {
            notificationType: index_core.k$.Error
        }), localization_service = __webpack_require__(7452), GitNotificationService = function() {
            function GitNotificationService(localizationService, notificationService) {
                this.localizationService = localizationService, this.notificationService = notificationService;
            }
            return GitNotificationService.prototype.hideNotification = function(notificationId) {
                return this.notificationService.hide(notificationId);
            }, GitNotificationService.prototype.hideCurrentNotification = function() {
                this.notificationService.hideCurrentNotification();
            }, GitNotificationService.prototype.showLoadingNotification = function(titleKey, messageKey) {
                var notification = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseLoadingNotification), {
                    title: this.localizationService.get(titleKey),
                    message: messageKey ? this.localizationService.get(messageKey) : void 0
                });
                return this.notificationService.notify(notification);
            }, GitNotificationService.prototype.showSuccessNotification = function(titleKey, loadingNotificationId) {
                var notification = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseSuccessNotification), {
                    id: loadingNotificationId,
                    title: this.localizationService.get(titleKey)
                });
                return this.notificationService.notify(notification);
            }, GitNotificationService.prototype.showErrorNotification = function(gitError, titleKey, loadingNotificationId) {
                var openGitErrorDialogPortalAction = {
                    action: "open.git.error.dialog",
                    data: gitError
                }, openErrorDialogAction = {
                    displayText: this.localizationService.get("View_Details"),
                    action: openGitErrorDialogPortalAction
                };
                return this.notificationService.notify((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, baseErrorNotification), {
                    id: loadingNotificationId,
                    duration: notification_toast_service.S.Long,
                    title: this.localizationService.get(titleKey),
                    message: this.localizationService.get("View_Details_Learn_More"),
                    actionButtons: [ openErrorDialogAction ]
                }));
            }, GitNotificationService.\u0275fac = function(t) {
                return new (t || GitNotificationService)(core["\u0275\u0275inject"](localization_service.z), core["\u0275\u0275inject"](notification_toast_service.g));
            }, GitNotificationService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: GitNotificationService,
                factory: GitNotificationService.\u0275fac,
                providedIn: "root"
            }), GitNotificationService;
        }();
    },
    18016: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        var _a, _b;
        __webpack_require__.d(__webpack_exports__, {
            wM: function() {
                return GitOperationStatus;
            },
            u9: function() {
                return GitOperationType;
            },
            IS: function() {
                return GitProviderType;
            },
            s_: function() {
                return InteractionType;
            },
            Z_: function() {
                return MergePolicy;
            },
            I: function() {
                return c_createDatasourceRequestStaticInfo;
            },
            f7: function() {
                return c_credentialsDetailsStaticInfo;
            },
            LO: function() {
                return c_datasourceType;
            },
            Rv: function() {
                return c_gitProviderInfoRecord;
            },
            cW: function() {
                return c_testConnectionParameterStaticInfo;
            },
            tI: function() {
                return checkBranchNameValidity;
            },
            lz: function() {
                return getFirstErrorDetails;
            },
            n: function() {
                return getFormattedLastSyncTime;
            },
            A6: function() {
                return gitErrorLocalizationMap;
            },
            jZ: function() {
                return gitErrorMoreInfoLocalizationMap;
            },
            xT: function() {
                return hasError;
            },
            L4: function() {
                return initializeGitProviderSharedUtils;
            },
            KJ: function() {
                return isAdoMFAError;
            },
            VQ: function() {
                return isBranchPolicyCommitError;
            },
            Ss: function() {
                return isCommitMaxSizeExceededError;
            },
            ve: function() {
                return isGitAlmOperationType;
            },
            pb: function() {
                return isGitError;
            },
            Fc: function() {
                return isInvalidDirectoryNameError;
            },
            yG: function() {
                return isItemNotFoundError;
            },
            E6: function() {
                return isMergePolicyNotSpecifiedError;
            },
            iX: function() {
                return makeGitError;
            },
            QJ: function() {
                return optionNotEnabled;
            }
        });
        var AdalErrorType = function(AdalErrorType) {
            return AdalErrorType.AdalMultiFactorAuthEnrollRequiredErrorCode = "AdalMultiFactorAuthEnrollRequiredErrorCode", 
            AdalErrorType.AdalMultiFactorAuthRequiredErrorCode = "AdalMultiFactorAuthRequiredErrorCode", 
            AdalErrorType.AdalDeviceObjectNotFoundInTenantErrorCode = "AdalDeviceObjectNotFoundInTenantErrorCode", 
            AdalErrorType;
        }({}), gitErrorLocalizationMap = ((_a = {}).Git_MissingRequiredParam = {
            messageKey: "Trident_Git_Error_Git_Provider_API_Message",
            titleKey: "Trident_Git_Error_Git_Provider_API_Title"
        }, _a.Git_DirectoryHasInvalidSystemFiles = {
            messageKey: "Trident_Git_Error_Git_DirectoryHasInvalidSystemFiles_Message",
            titleKey: "Trident_Git_Error_Git_DirectoryHasInvalidSystemFiles_Title"
        }, _a.Git_SelectedArtifactsDoNotBelongToWorkspace = {
            messageKey: "Trident_Git_Error_Git_Undo_Failed_Message",
            titleKey: "Trident_Git_Error_Unable_To_Undo_Title"
        }, _a.Git_AzureDevOpsMissingProjectName = {
            messageKey: "Trident_Git_Error_Git_Connect_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Connect_Failed_Title"
        }, _a.Git_UndoDuplicateArtifacts = {
            messageKey: "Trident_Git_Error_Git_Undo_Failed_Message",
            titleKey: "Trident_Git_Error_Unable_To_Undo_Title"
        }, _a.Git_CommitInvalidArtifacts = {
            messageKey: "Trident_Git_Error_Git_InvalidCommitRequest_Message",
            titleKey: "Trident_Git_Error_Unable_To_Commit_Title"
        }, _a.Git_GitProviderApiFailed = {
            messageKey: "Trident_Git_Error_Git_Provider_API_Message",
            titleKey: "Trident_Git_Error_Git_Provider_API_Title"
        }, _a.Git_GitProviderDeserialization = {
            messageKey: "Trident_Git_Error_Git_Provider_API_Message",
            titleKey: "Trident_Git_Error_Git_Provider_API_Title"
        }, _a.Git_GitProviderResourceNotExistOrUnauthorized = {
            messageKey: "Trident_Git_Error_Git_No_Permissions_ADO_Message",
            titleKey: "Trident_Git_Error_Git_No_Permissions_ADO_Title"
        }, _a.Git_WorkspaceAlreadyConnectedToGit = {
            messageKey: "Trident_Git_Error_Git_Workspace_Already_Connected_To_Git_Message",
            titleKey: "Trident_Git_Error_Git_Workspace_Already_Connected_To_Git_Title"
        }, _a.Git_WorkspaceNotConnectedToGit = {
            messageKey: "Trident_Git_Error_Git_Workspace_Not_Connected_To_Git_Message",
            titleKey: "Trident_Git_Error_Git_Workspace_Not_Connected_To_Git_Title"
        }, _a.Git_WorkspaceHasNoCapacity = {
            messageKey: "Trident_Git_Error_Git_Workspace_Has_No_Capacity_Message",
            titleKey: "Pipelines_Error_FoldersHasNoCapacity_Title"
        }, _a.Git_InvalidPath = {
            messageKey: "Trident_Git_Error_Git_Connection_Details_Message",
            titleKey: "Trident_Git_Error_Git_Connection_Details_Title"
        }, _a.Alm_InvalidRequest_PurgeRequired = {
            messageKey: "Trident_Git_Error_Dataset_PurgeData_Message",
            titleKey: "Trident_Git_Error_AlmOperation_Update_Title"
        }, _a.Git_PotentialCrossGeo = {
            messageKey: "Trident_Git_Error_Git_PotentialCrossGeo_Message",
            titleKey: "Trident_Git_Error_Git_PotentialCrossGeo_Title"
        }, _a.Git_DuplicateDisplayNameAndType = {
            messageKey: "Trident_Git_Error_Git_DuplicateDisplayNameAndType_Message",
            titleKey: "Trident_Git_Error_Unable_To_Complete_Action_Title"
        }, _a.Git_CommitDuplicateArtifacts = {
            messageKey: "Trident_Git_Error_Git_CommitDuplicateArtifacts_Message",
            titleKey: "Trident_Git_Error_Git_CommitDuplicateArtifacts_Title"
        }, _a.Git_HeadNotSynced = {
            messageKey: "Trident_Git_Error_Git_HeadNotSynced_Message",
            titleKey: "Trident_Git_Error_Git_HeadNotSynced_Title"
        }, _a.Git_IdentifierExceededMaxLength = {
            messageKey: "Trident_Git_Error_Git_IdentifierExceededMaxLength_Message",
            titleKey: "Trident_Git_Error_Unable_To_Complete_Action_Title"
        }, _a.Git_InvalidCommitRequest = {
            messageKey: "Trident_Git_Error_Git_InvalidCommitRequest_Message",
            titleKey: "Trident_Git_Error_Unable_To_Commit_Title"
        }, _a.Git_InvalidUndoRequest = {
            messageKey: "Trident_Git_Error_Git_Undo_Failed_Message",
            titleKey: "Trident_Git_Error_Unable_To_Undo_Title"
        }, _a.Git_InvalidBranchName = {
            messageKey: "Trident_Git_Error_Git_InvalidBranchName_Message",
            titleKey: "Trident_Git_Error_Git_InvalidBranchName_Title"
        }, _a.Git_InvalidDirectoryName = {
            messageKey: "Trident_Git_Error_Git_InvalidDirectoryName_Message",
            titleKey: "Trident_Git_Error_Git_InvalidDirectoryName_Title"
        }, _a.Git_InvalidRequestNoFilesToCommit = {
            messageKey: "Trident_Git_Error_Git_InvalidRequestNoFilesToCommit_Message",
            titleKey: "Trident_Git_Error_Git_InvalidRequestNoFilesToCommit_Title"
        }, _a.Git_PotentialMergeConflict = {
            messageKey: "Trident_Git_Error_Git_PotentialMergeConflict_Message",
            titleKey: "Trident_Git_Error_Git_PotentialMergeConflict_Title"
        }, _a.Git_GitConnectionAlreadyInitialized = {
            messageKey: "Trident_Git_Error_Git_GitConnectionAlreadyInitialized_Message",
            titleKey: "Trident_Git_Error_Git_GitConnectionAlreadyInitialized_Title"
        }, _a.Git_UnexpectedResponseFromGitProvider = {
            messageKey: "Trident_Git_Error_Git_Provider_API_Message",
            titleKey: "Trident_Git_Error_Git_Provider_API_Title"
        }, _a.Git_DependenciesDeletionFailed = {
            messageKey: "Trident_Git_Error_Git_DependenciesDeletionFailed_Message",
            titleKey: "Trident_Git_Error_Unable_To_Complete_Action_Title"
        }, _a.Git_MissingDependencies = {
            messageKey: "Trident_Git_Error_Git_MissingDependencies_Message",
            titleKey: "Trident_Git_Error_Unable_To_Update_Title"
        }, _a.Git_MissingDependenciesSwitchBranch = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_MissingDependencies_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.Git_CyclicDependencyDetectedSwitchBranch = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_MissingDependencies_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.Git_CyclicDependencyDetected = {
            messageKey: "Trident_Git_Error_Git_MissingDependencies_Message",
            titleKey: "Trident_Git_Error_Unable_To_Update_Title"
        }, _a.Git_ItemNotFound = {
            titleKey: "Trident_Git_Error_Git_ItemNotFound_Title",
            messageKey: "Trident_Git_Error_Git_ItemNotFound_Message"
        }, _a.Git_PathTooLong = {
            titleKey: "Trident_Git_Error_Git_PathTooLong_Title",
            messageKey: "Trident_Git_Error_Git_PathTooLong_Message"
        }, _a.Git_GitOperationWithSensitivityLabelsNotSupported = {
            messageKey: "Trident_Git_Error_Git_GitOperationWithSensitivityLabelsNotSupported_Message",
            titleKey: "Trident_Git_Error_Git_GitOperationWithSensitivityLabelsNotSupported_Title"
        }, _a.Git_BranchDeleted = {
            messageKey: "Trident_Git_Error_Git_BranchDeleted_Message",
            titleKey: "Trident_Git_Error_Unable_To_Complete_Action_Title"
        }, _a.Git_GitProviderCommitRejectedByPolicy = {
            messageKey: "Trident_Git_Error_GitProviderCommitRejectedByPolicy_Message",
            titleKey: "Trident_Git_Error_GitProviderCommitRejectedByPolicy_Title"
        }, _a.Git_DirectoryNameDiffersByCase = {
            messageKey: "Trident_Git_Error_Git_ItemNotFound_Message",
            titleKey: "Trident_Git_Error_Git_ItemNotFound_Title"
        }, _a.Git_GitIntegrationTenantAdminSwitchDisabled = {
            messageKey: "Trident_Git_TenantAdminSwitchDisabled_Message",
            titleKey: "Trident_Git_TenantAdminSwitchDisabled_Title"
        }, _a.Git_GitProviderCommitMaxSizeExceeded = {
            messageKey: "Trident_Git_Error_GitProviderCommitMaxSizeExceeded_Message",
            titleKey: "Trident_Git_Error_GitProviderCommitMaxSizeExceeded_Title"
        }, _a.Git_ExportDefinitionFailed = {
            messageKey: "Trident_Git_Error_ExportDefinitionFailed_Message",
            titleKey: "Trident_Git_Error_ExportDefinitionFailed_Title"
        }, _a.Git_DiscoverDependenciesFailed = {
            messageKey: "Trident_Git_Error_DiscoverDependenciesFailed_Message",
            titleKey: "Trident_Git_Error_DiscoverDependenciesFailed_Title"
        }, _a.Git_GitProviderUnauthorizedGuestUser = {
            messageKey: "Trident_Git_Error_GitProviderUnauthorizedGuestUser_Message",
            titleKey: "Trident_Git_Error_GitProviderUnauthorizedGuestUser_Title"
        }, _a.Git_GitProviderCommitObjectRejected = {
            messageKey: "Trident_Git_Error_GitProviderCommitObjectRejected_Message",
            titleKey: "Trident_Git_Error_GitProviderCommitRejectedByPolicy_Title"
        }, _a.Git_BranchNameAlreadyExists = {
            messageKey: "Trident_Git_Error_Git_Branch_Name_Already_Exists_Message",
            titleKey: "Trident_Git_Error_Git_InvalidBranchName_Title"
        }, _a.Git_GitProviderAadUserStateError = {
            messageKey: "Trident_Git_Error_GitProviderAadUserStateError_Message",
            titleKey: "Trident_Git_Error_Unable_To_Complete_Action_Title"
        }, _a.Git_Disconnect_No_Connection = {
            messageKey: "Trident_Git_Error_Git_Disconnect_No_Connection_Message",
            titleKey: "Trident_Git_Error_Git_Disconnect_Failed_Title"
        }, _a.Git_Invalid_Connection_Details = {
            messageKey: "Trident_Git_Error_Git_Invalid_Connection_Details_Message",
            titleKey: "Trident_Git_Error_Git_Invalid_Connection_Details_Title"
        }, _a.Git_ConnectionDetailsNotFound = {
            messageKey: "Trident_Git_Error_Git_Connection_Details_Not_Found_Message",
            titleKey: "ErrorMessage_DefaultTitle"
        }, _a.Git_Workspace_Not_Initialized = {
            messageKey: "Trident_Git_Error_Git_Workspace_Not_Initialized_Message",
            titleKey: "Trident_Git_Error_Git_Workspace_Not_Initialized_Title"
        }, _a.Git_Create_Branch_Origin_Branch_Not_Found = {
            messageKey: "Trident_Git_Error_Git_Create_Branch_Origin_Branch_Not_Found_Message",
            titleKey: "Trident_Git_Error_Git_Create_Branch_Origin_Branch_Not_Found_Title"
        }, _a.Git_GitSwitchBranchWithUncommittedChanges = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_Uncommited_Changes_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.GitGitInvalidSwitchBranchRequest = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_Invalid_Request_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.GitSwitchBranchIdenticalBranchName = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_Identical_Branch_Name_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.Git_Switch_Branch_Item_Not_Found = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_Item_Not_Found_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.Git_Switch_Branch_Head_Not_Synced = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_Head_Not_Synced_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.Git_GitProviderCredentialsNotAuthorizedError = {
            messageKey: "Trident_Git_Error_Git_CredentialsNotAuthorized_Message",
            titleKey: "Trident_Git_Error_Git_CredentialsNotAuthorized_Title"
        }, _a.Git_DuplicateArtifactsWithSameLogicalId = {
            messageKey: "Trident_Git_Duplicate_LogicalId_Message",
            titleKey: "Trident_Git_Duplicate_LogicalId_Title"
        }, _a.Git_PotentialDuplicateDisplayNameAndType = {
            messageKey: "Trident_Git_Error_Git_Potential_Duplicate_Diaplay_Name_And_Type_Message",
            titleKey: "Trident_Git_Error_AlmOperation_Update_Title"
        }, _a.Git_DisplayNameIsInvalid = {
            messageKey: "Trident_Git_Error_Git_Display_Name_Is_Invalid_Message",
            titleKey: "Trident_Git_Error_AlmOperation_Update_Title"
        }, _a.Git_GitIntegrationBlockedByDataLossPrevention = {
            messageKey: "Trident_Git_Blocked_DataLoss_Prevention_Message",
            titleKey: "Trident_Git_Blocked_DataLoss_Prevention_Title"
        }, _a.Git_Connect_Invalid_Request = {
            messageKey: "Trident_Git_Error_Git_Connect_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Connect_Failed_Title"
        }, _a.Git_Disconnect_Invalid_Request = {
            messageKey: "Trident_Git_Error_Git_Disconnect_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Disconnect_Failed_Title"
        }, _a.Git_Initialization_Invalid_Request = {
            messageKey: "Trident_Git_Error_Git_Invalid_Initialization_Request_Message",
            titleKey: "Trident_Git_Error_Unable_To_Initialize_Title"
        }, _a.Git_Undo_Invalid_Request = {
            messageKey: "Trident_Git_Error_Undo_Message",
            titleKey: "Trident_Git_Error_Unable_To_Undo_Title"
        }, _a[" Git_Commit_Invalid_Request"] = {
            messageKey: "Trident_Git_Error_Git_InvalidCommitRequest_Message",
            titleKey: "Trident_Git_Error_Unable_To_Commit_Title"
        }, _a.Git_Update_Invalid_Request = {
            messageKey: "Trident_Git_Error_Git_Update_Invalid_Request_Message",
            titleKey: "Trident_Git_Error_Unable_To_Update_Title"
        }, _a.Git_Create_Branch_Invalid_Request = {
            messageKey: "Trident_Git_Error_Git_Create_Branch_Invalid_Request_Message",
            titleKey: "Trident_Git_Error_Unable_To_Create_Branch_Title"
        }, _a.Git_Create_Directory_Invalid_Request = {
            messageKey: "Trident_Git_Error_Git_Create_Folder_Invalid_Request_Message",
            titleKey: "Trident_Git_Error_Unable_To_Create_Folder_Title"
        }, _a.Git_Switch_Branch_Invalid_Request = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_Invalid_Request_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.Git_Connect_Failed = {
            messageKey: "Trident_Git_Error_Git_Connect_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Connect_Failed_Title"
        }, _a.Git_Status_Failed = {
            messageKey: "Trident_Git_Error_Git_Status_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Status_Failed_Title"
        }, _a.Git_Create_Branch_Failed = {
            messageKey: "Trident_Git_Error_Git_Create_Branch_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Create_Branch_Failed_Title"
        }, _a.Git_Sync_Failed = {
            messageKey: "Trident_Git_Error_Git_Sync_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Sync_Failed_Title"
        }, _a.Git_Disconnect_Failed = {
            messageKey: "Trident_Git_Error_Git_Disconnect_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Disconnect_Failed_Title"
        }, _a.Git_Initialization_Failed = {
            messageKey: "Trident_Git_Error_Git_Initialization_Failed_Message",
            titleKey: "Trident_Git_Error_Unable_To_Initialize_Title"
        }, _a.Git_Undo_Failed = {
            messageKey: "Trident_Git_Error_Git_Undo_Failed_Message",
            titleKey: "Trident_Git_Error_Unable_To_Undo_Title"
        }, _a.Git_Commit_Failed = {
            messageKey: "Trident_Git_Error_Git_InvalidCommitRequest_Message",
            titleKey: "Trident_Git_Error_Unable_To_Commit_Title"
        }, _a.Git_Update_Failed = {
            messageKey: "Trident_Git_Error_Git_Update_Invalid_Request_Message",
            titleKey: "Trident_Git_Error_Unable_To_Update_Title"
        }, _a.Git_Create_Folder_Failed = {
            messageKey: "Trident_Git_Error_Git_Create_Folder_Invalid_Request_Message",
            titleKey: "Trident_Git_Error_Unable_To_Create_Folder_Title"
        }, _a.Git_Checkout_Branch_Failed = {
            messageKey: "Trident_Git_Error_Git_Checkout_Branch_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Checkout_Branch_Failed_Title"
        }, _a.Git_Switch_Branch_Failed = {
            messageKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Switch_Branch_Failed_Title"
        }, _a.Git_Get_Branches_Failed = {
            messageKey: "Trident_Git_Error_Git_Get_Branches_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Connection_Details_Title"
        }, _a.Git_Branch_Out_Failed = {
            messageKey: "Trident_Git_Error_Git_Branch_Out_Failed_Message",
            titleKey: "Trident_Git_Error_Git_Branch_Out_Failed_Title"
        }, _a.Git_BranchOutIdenticalBranchNames = {
            messageKey: "Trident_Git_Error_Git_Branch_Name_Already_Exists_Message",
            titleKey: "Trident_Git_Error_Git_InvalidBranchName_Title"
        }, _a.GitProviderRepositoryNotFoundException = {
            messageKey: "Trident_Git_Provider_Repository_Not_Found_Error_Message",
            titleKey: "Trident_Git_Provider_Repository_Not_Found_Error_Title"
        }, _a.GitTreeSizeExceeded = {
            messageKey: "Trident_Git_Tree_Size_Exceeded_Message",
            titleKey: "Trident_Git_Tree_Size_Exceeded_Title"
        }, _a.GitIntegrationGitHubTenantAdminSwitchDisabled = {
            messageKey: "Trident_Git_GitHub_Tenant_Admin_Switch_Disabled_Message",
            titleKey: "Trident_Git_GitHub_Tenant_Admin_Switch_Disabled_Title"
        }, _a.GitTokenExpiredOrDeprecatedException = {
            messageKey: "Trident_Git_Token_Expired_Or_Deprecated_Exception_Message",
            titleKey: "Trident_Git_Token_Expired_Or_Deprecated_Exception_Title"
        }, _a.Git_GitTokenProviderCredentialsKindMismatchError = {
            messageKey: "Trident_Git_Git_Token_Provider_Credentials_Kind_Mismatch_Error_Message",
            titleKey: "Trident_Git_Git_Token_Provider_Credentials_Kind_Mismatch_Error_Title"
        }, _a.Git_GitTokenProviderCredentialsConnectionMismatchError = {
            messageKey: "Trident_Git_Git_Token_Provider_Credentials_Connection_Mismatch_Error_Message",
            titleKey: "Trident_Git_Git_Token_Provider_Credentials_Connection_Mismatch_Error_Title"
        }, _a.Git_GitTokenProviderCredentialsInternalError = {
            messageKey: "Trident_Git_Provider_Bad_Credentials_Message",
            titleKey: "Trident_Git_Provider_Bad_Credentials_Title"
        }, _a.Git_InvalidConfigureCredentialsRequest = {
            messageKey: "Trident_Git_Invalid_Configure_Credentials_Request_Message",
            titleKey: "Trident_Git_Invalid_Configure_Credentials_Request_Title"
        }, _a.GitCommitInvalidOperationResult = {
            messageKey: "Trident_Git_Commit_Invalid_Operation_Result_Message",
            titleKey: "Trident_Git_Commit_Invalid_Operation_Result_Title"
        }, _a.Git_GitProviderRateLimitExceeded = {
            messageKey: "Trident_Git_Git_Provider_Rate_Limit_Exceeded_Message",
            titleKey: "Trident_Git_Git_Provider_Rate_Limit_Exceeded_Title"
        }, _a.Git_GitProviderBadCredentials = {
            messageKey: "Trident_Git_Provider_Bad_Credentials_Message",
            titleKey: "Trident_Git_Provider_Bad_Credentials_Title"
        }, _a.Git_Create_Datasource_Failed = {
            messageKey: "Trident_Git_Create_Datasource_Failed_Message",
            titleKey: "Trident_Git_Create_Datasource_Failed_Title"
        }, _a.Git_Load_Datasources_Failed = {
            messageKey: "Trident_Git_Load_Datasources_Failed_Message",
            titleKey: "Trident_Git_Load_Datasources_Failed_Title"
        }, _a.Git_SQLDatabaseDisplayNameCannotBeChanged = {
            messageKey: "Trident_Git_SQL_Database_Display_Name_Cannot_Be_Changed_Message",
            titleKey: "Trident_Git_SQL_Database_Display_Name_Cannot_Be_Changed_Title"
        }, _a.Git_GitHttpClientTimeout = {
            messageKey: "Trident_Git_Error_Git_GitHttpClientTimeout_Message",
            titleKey: "MultiSelect_Shortcut_Failed"
        }, _a.Alm_InvalidBranchOutRequest_OperationFailureAfterFolderCreation = {
            messageKey: "Trident_Git_Branch_Out_Error_Branch_Error_Message",
            titleKey: "Trident_Git_Branch_Out_Error_Branch_Error_Title"
        }, _a.AlmOperationFailed_CommitToGit = {
            messageKey: "ErrorDialogHelperText_TechnicalDetails",
            titleKey: "Trident_Git_Error_AlmOperation_Commit_Title"
        }, _a.AlmOperationFailed_UndoFromGit = {
            messageKey: "ErrorDialogHelperText_TechnicalDetails",
            titleKey: "Trident_Git_Error_AlmOperation_Undo_Title"
        }, _a.AlmOperationFailed_UpdateFromGit = {
            messageKey: "ErrorDialogHelperText_TechnicalDetails",
            titleKey: "Trident_Git_Error_AlmOperation_Update_Title"
        }, _a.AlmOperationFailed_SwitchGitBranch = {
            messageKey: "ErrorDialogHelperText_TechnicalDetails",
            titleKey: "Trident_Git_Error_AlmOperation_Switch_Branch_Title"
        }, _a.DMTS_DuplicateDataSourceNameError = {
            messageKey: "Trident_Git_Data_Source_Name_Already_Exists_Message",
            titleKey: "Trident_Git_Data_Source_Name_Already_Exists_Title"
        }, _a.DM_GWPipeline_Gateway_MashupDataAccessError = {
            messageKey: "Trident_Git_Provider_Bad_Credentials_Message",
            titleKey: "Trident_Git_Provider_Bad_Credentials_Title"
        }, _a), gitErrorMoreInfoLocalizationMap = ((_b = {}).Git_PotentialDuplicateDisplayNameAndType = {
            moreInfoKeys: [ "Trident_Git_Error_Git_Potential_Duplicate_Diaplay_Name_And_Type_MoreInfo1", "Trident_Git_Error_Git_Potential_Duplicate_Diaplay_Name_And_Type_MoreInfo2" ]
        }, _b);
        function isGitError(token) {
            return token && "GitError" === token.__tag;
        }
        function getFirstErrorDetails(gitError) {
            return null == gitError ? void 0 : gitError.errorsDetails[0];
        }
        function hasError(gitError, errorType) {
            return null == gitError ? void 0 : gitError.errorsDetails.some(function(error) {
                return error.errorType === errorType;
            });
        }
        function isAdoMFAError(response) {
            var _a, adalError = AdalErrorType[null === (_a = null == response ? void 0 : response.error) || void 0 === _a ? void 0 : _a.code];
            return 400 === (null == response ? void 0 : response.status) && !!adalError;
        }
        function isInvalidDirectoryNameError(response) {
            var _a;
            return "Git_InvalidDirectoryName" === (null === (_a = response.error["pbi.error"]) || void 0 === _a ? void 0 : _a.code);
        }
        function isMergePolicyNotSpecifiedError(gitError) {
            return hasError(gitError, "Git_MergePolicyNotSpecified");
        }
        function isBranchPolicyCommitError(errortype, gitSyncState) {
            var _a;
            return "AlmOperationFailed_CommitToGit" === errortype && "Git_GitProviderCommitRejectedByPolicy" === (null === (_a = null == gitSyncState ? void 0 : gitSyncState.gitNonInteractiveOperationErrorDetails) || void 0 === _a ? void 0 : _a.errorCode);
        }
        function isCommitMaxSizeExceededError(errortype, gitSyncState) {
            var _a;
            return "AlmOperationFailed_CommitToGit" === errortype && "Git_GitProviderCommitMaxSizeExceeded" === (null === (_a = null == gitSyncState ? void 0 : gitSyncState.gitNonInteractiveOperationErrorDetails) || void 0 === _a ? void 0 : _a.errorCode);
        }
        function makeGitError(errorDetails, errorInfo) {
            return {
                __tag: "GitError",
                errorInfo,
                errorsDetails: errorDetails
            };
        }
        function isGitAlmOperationType(gitErrorType) {
            return !!gitAlmOperationErrors.find(function(e) {
                return e === gitErrorType;
            });
        }
        function isItemNotFoundError(gitError) {
            return hasError(gitError, "Git_ItemNotFound") || hasError(gitError, "Git_DirectoryNameDiffersByCase");
        }
        var constants_a, InteractionType = function(InteractionType) {
            return InteractionType[InteractionType.SingleOption = 0] = "SingleOption", InteractionType[InteractionType.None = 1] = "None", 
            InteractionType;
        }({}), gitAlmOperationErrors = [ "AlmOperationFailed_CommitToGit", "AlmOperationFailed_UndoFromGit", "AlmOperationFailed_UpdateFromGit" ], GitProviderType = function(GitProviderType) {
            return GitProviderType[GitProviderType.AzureDevOps = 0] = "AzureDevOps", GitProviderType[GitProviderType.GitHub = 1] = "GitHub", 
            GitProviderType;
        }({}), optionNotEnabled = "optionNotEnabled", GitOperationType = function(GitOperationType) {
            return GitOperationType[GitOperationType.Commit = 0] = "Commit", GitOperationType[GitOperationType.Update = 1] = "Update", 
            GitOperationType[GitOperationType.Initialize = 2] = "Initialize", GitOperationType[GitOperationType.Undo = 3] = "Undo", 
            GitOperationType[GitOperationType.CheckoutBranch = 4] = "CheckoutBranch", GitOperationType[GitOperationType.SwitchBranch = 5] = "SwitchBranch", 
            GitOperationType;
        }({}), GitOperationStatus = function(GitOperationStatus) {
            return GitOperationStatus[GitOperationStatus.InProgress = 0] = "InProgress", GitOperationStatus[GitOperationStatus.Successful = 1] = "Successful", 
            GitOperationStatus[GitOperationStatus.Failed = 2] = "Failed", GitOperationStatus;
        }({}), MergePolicy = function(MergePolicy) {
            return MergePolicy[MergePolicy.None = 0] = "None", MergePolicy[MergePolicy.KeepYours = 1] = "KeepYours", 
            MergePolicy[MergePolicy.TakeTheirs = 2] = "TakeTheirs", MergePolicy;
        }({}), GitProviderDisplayName = function(GitProviderDisplayName) {
            return GitProviderDisplayName.AzureDevOps = "Azure DevOps", GitProviderDisplayName.GitHub = "GitHub", 
            GitProviderDisplayName;
        }({}), c_gitProviderInfoRecord = ((constants_a = {})[GitProviderType.AzureDevOps] = {
            type: GitProviderType.AzureDevOps,
            name: GitProviderDisplayName.AzureDevOps,
            iconName: "azuredevops_logo_16_regular"
        }, constants_a[GitProviderType.GitHub] = {
            type: GitProviderType.GitHub,
            name: GitProviderDisplayName.GitHub,
            iconName: "github_logo"
        }, constants_a);
        function getBranchReference(details) {
            var _a, repoUrl = null === (_a = getRepositoryReference(details)) || void 0 === _a ? void 0 : _a.repositoryLink;
            if (repoUrl) return {
                branchName: details.branchName,
                branchLink: repoUrl + "?version=GB".concat(details.branchName)
            };
        }
        function getHeadReference(details) {
            var _a, repoUrl = null === (_a = getRepositoryReference(details)) || void 0 === _a ? void 0 : _a.repositoryLink;
            if (repoUrl && (null == details ? void 0 : details.head)) return {
                commitId: details.head,
                commitLink: repoUrl + "/commit/".concat(details.head, "/?refName=refs/heads/").concat(details.branchName)
            };
        }
        function getRepositoryReference(details) {
            if (null == details ? void 0 : details.projectName) return {
                repositoryName: details.repositoryName,
                repositoryLink: "https://".concat(details.organizationName, ".visualstudio.com/").concat(details.projectName, "/_git/").concat(details.repositoryName)
            };
        }
        function github_getBranchReference(details) {
            return {
                branchName: details.branchName,
                branchLink: github_getRepositoryReference(details).repositoryLink + "/tree/".concat(details.branchName)
            };
        }
        function github_getHeadReference(details) {
            if (null == details ? void 0 : details.head) return {
                commitId: details.head,
                commitLink: github_getRepositoryReference(details).repositoryLink + "/commit/".concat(details.head)
            };
        }
        function github_getRepositoryReference(details) {
            return {
                repositoryName: details.repositoryName,
                repositoryLink: "https://github.com/".concat(details.organizationName, "/").concat(details.repositoryName)
            };
        }
        var c_credentialsDetailsStaticInfo = {
            credentialType: "Key",
            encryptedConnection: "Any",
            privacyLevel: "Private",
            skipTestConnection: !1,
            encryptionAlgorithm: "NONE"
        }, c_createDatasourceRequestStaticInfo = {
            singleSignOnType: "None",
            allowDatasourceThroughGateway: !1
        }, c_datasourceType = "Extension", c_testConnectionParameterStaticInfo = {
            name: "url",
            type: "nullable text",
            isRequired: !1
        }, c_branchNameInvalidCharacters = [ "\\", "?", "*", ":", "|", '"', "<", ">" ], c_branchNameInvalidSuffix = [ ".", " " ];
        function getFormattedLastSyncTime(triLocalizationService, time, message) {
            if (void 0 === message && (message = "Trident_Git_Last_Synced_At"), time) {
                var currentLocale = triLocalizationService.currentLanguageLocale, date = new Date(time), formattedDate = triLocalizationService.format("Trident_Git_Last_Synced_At", [ date.toLocaleDateString(currentLocale, {
                    day: "numeric",
                    month: "numeric",
                    year: "numeric"
                }), date.toLocaleTimeString(currentLocale, {
                    hour: "numeric",
                    minute: "numeric"
                }) ]);
                return "Trident_Git_Last_Synced_At" === message ? formattedDate : triLocalizationService.get(message) + formattedDate;
            }
        }
        function initializeGitProviderSharedUtils() {
            var _a;
            return (_a = {})[GitProviderType.AzureDevOps] = {
                getBranchReference,
                getHeadReference,
                getIconName: function() {
                    return "azuredevops_logo_16_regular";
                },
                getRepositoryReference
            }, _a[GitProviderType.GitHub] = {
                getBranchReference: github_getBranchReference,
                getHeadReference: github_getHeadReference,
                getIconName: function() {
                    return "github_logo";
                },
                getRepositoryReference: github_getRepositoryReference
            }, _a;
        }
        function checkBranchNameValidity(branchName, localizationService) {
            return c_branchNameInvalidCharacters.some(function(char) {
                return branchName.includes(char);
            }) ? localizationService.get("Trident_Git_Error_Git_InvalidBranchName_Message") : c_branchNameInvalidSuffix.some(function(char) {
                return branchName.endsWith(char);
            }) ? localizationService.get("Trident_Git_Error_Git_InvalidBranchNameSuffix_Message") : void 0;
        }
    },
    57156: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            F: function() {
                return TriCollapsedContainerModule;
            }
        });
        var common = __webpack_require__(77476), localization_module = __webpack_require__(78035), tri_svg_icon = __webpack_require__(17177), tri_svg_icon_mock = __webpack_require__(16622), core = __webpack_require__(50423), TriCollapsedContainerModule = function() {
            function TriCollapsedContainerModule() {}
            return TriCollapsedContainerModule.\u0275fac = function(t) {
                return new (t || TriCollapsedContainerModule);
            }, TriCollapsedContainerModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: TriCollapsedContainerModule
            }), TriCollapsedContainerModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, localization_module.Y, tri_svg_icon.T6, tri_svg_icon_mock.u ]
            }), TriCollapsedContainerModule;
        }();
    }
} ]);