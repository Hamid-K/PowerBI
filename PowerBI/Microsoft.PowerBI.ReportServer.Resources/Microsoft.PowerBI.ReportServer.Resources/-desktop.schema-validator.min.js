"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "schema-validator" ], {
    73566: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            E: function() {
                return JsonSchemaValidationEagerModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9398), _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(82156), _lazy_load_routes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8483), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), JsonSchemaValidationEagerModule = function() {
            function JsonSchemaValidationEagerModule() {}
            return JsonSchemaValidationEagerModule.\u0275fac = function(t) {
                return new (t || JsonSchemaValidationEagerModule);
            }, JsonSchemaValidationEagerModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: JsonSchemaValidationEagerModule
            }), JsonSchemaValidationEagerModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_2__.N, _angular_router__WEBPACK_IMPORTED_MODULE_3__.Bz.forChild(_lazy_load_routes__WEBPACK_IMPORTED_MODULE_4__.Vc) ]
            }), JsonSchemaValidationEagerModule;
        }();
    },
    8483: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Vc: function() {
                return LazyLoadRoutes;
            },
            yO: function() {
                return JsonSchemaValidationServiceInjectionToken;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57786), JsonSchemaValidationServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("JsonSchemaValidationService"), lazyLoadJsonSchemaValidation = {
            loadChildren: function() {
                return __webpack_require__.e("json-schema-validation-lazy").then(__webpack_require__.bind(__webpack_require__, 98909)).then(function(m) {
                    return m.JsonSchemaValidationLazyModule;
                });
            }
        };
        _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_1__.E.addLazyLoadForLegacyMapping("@powerbi/JsonSchemaValidation/lazy/json-schema-validation-lazy-module#JsonSchemaValidationLazyModule", lazyLoadJsonSchemaValidation.loadChildren);
        var LazyLoadRoutes = [ {
            path: "dummy-json-schema-validation-lazy",
            loadChildren: lazyLoadJsonSchemaValidation.loadChildren
        } ];
    },
    36731: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            D: function() {
                return DefaultValidationOptions;
            }
        });
        var DefaultValidationOptions = {
            allErrors: !0,
            verbose: !0,
            allowUnionTypes: !0,
            validateSchema: "log"
        };
    },
    60639: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ReportDefinitionSchemaValidatorModule: function() {
                return ReportDefinitionSchemaValidatorModule;
            }
        });
        var common = __webpack_require__(77476), json_schema_validation_eager_module = __webpack_require__(73566), lazy_load_module = __webpack_require__(82156), tslib_es6 = __webpack_require__(81337), typings = __webpack_require__(36731), validation_typings = __webpack_require__(38504), SchemaType = function(SchemaType) {
            return SchemaType.Bookmark = "bookmark", SchemaType.BookmarksMetadata = "bookmarksMetadata", 
            SchemaType.FormattingObjectDefinitions = "formattingObjectDefinitions", SchemaType.Page = "page", 
            SchemaType.PagesMetadata = "pagesMetadata", SchemaType.ReportExtension = "reportExtension", 
            SchemaType.Report = "report", SchemaType.SemanticQuery = "semanticQuery", SchemaType.VersionMetadata = "versionMetadata", 
            SchemaType.VisualContainerMobileState = "visualContainerMobileState", SchemaType.VisualContainer = "visualContainer", 
            SchemaType;
        }({}), BookmarkMajorVersions = [ 1 ], BookmarksMetadataMajorVersions = [ 1 ], PageMajorVersions = [ 1 ], PagesMetadataMajorVersions = [ 1 ], ReportExtensionMajorVersions = [ 1 ], ReportMajorVersions = [ 1 ], VersionMetadataMajorVersions = [ 1 ], VisualContainerMobileStateMajorVersions = [ 1 ], VisualContainerMajorVersions = [ 1 ];
        function isValidMajorVersion(version, versions) {
            return versions.includes(version);
        }
        function getSchema(info) {
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                return (0, tslib_es6.__generator)(this, function(_c) {
                    switch (_c.label) {
                      case 0:
                        return 1 === info.majorVersion ? [ 3, 1 ] : [ 3, 24 ];

                      case 1:
                        switch (info.type) {
                          case SchemaType.Bookmark:
                            return [ 3, 2 ];

                          case SchemaType.BookmarksMetadata:
                            return [ 3, 4 ];

                          case SchemaType.FormattingObjectDefinitions:
                            return [ 3, 6 ];

                          case SchemaType.Page:
                            return [ 3, 8 ];

                          case SchemaType.PagesMetadata:
                            return [ 3, 10 ];

                          case SchemaType.ReportExtension:
                            return [ 3, 12 ];

                          case SchemaType.Report:
                            return [ 3, 14 ];

                          case SchemaType.SemanticQuery:
                            return [ 3, 16 ];

                          case SchemaType.VersionMetadata:
                            return [ 3, 18 ];

                          case SchemaType.VisualContainerMobileState:
                            return [ 3, 20 ];

                          case SchemaType.VisualContainer:
                            return [ 3, 22 ];
                        }
                        return [ 3, 24 ];

                      case 2:
                        return [ 4, __webpack_require__.e("schema.json").then(__webpack_require__.t.bind(__webpack_require__, 61811, 19)) ];

                      case 3:
                      case 5:
                      case 7:
                      case 9:
                      case 11:
                      case 13:
                      case 15:
                      case 17:
                      case 19:
                      case 21:
                      case 23:
                        return [ 2, _c.sent() ];

                      case 4:
                        return [ 4, __webpack_require__.e("schema.json.0").then(__webpack_require__.t.bind(__webpack_require__, 60378, 19)) ];

                      case 6:
                        return [ 4, __webpack_require__.e("schema.json.1").then(__webpack_require__.t.bind(__webpack_require__, 86891, 19)) ];

                      case 8:
                        return [ 4, __webpack_require__.e("schema.json.2").then(__webpack_require__.t.bind(__webpack_require__, 9590, 19)) ];

                      case 10:
                        return [ 4, __webpack_require__.e("schema.json.3").then(__webpack_require__.t.bind(__webpack_require__, 81938, 19)) ];

                      case 12:
                        return [ 4, __webpack_require__.e("schema.json.4").then(__webpack_require__.t.bind(__webpack_require__, 50339, 19)) ];

                      case 14:
                        return [ 4, __webpack_require__.e("schema.json.5").then(__webpack_require__.t.bind(__webpack_require__, 75774, 19)) ];

                      case 16:
                        return [ 4, __webpack_require__.e("schema.json.6").then(__webpack_require__.t.bind(__webpack_require__, 33959, 19)) ];

                      case 18:
                        return [ 4, __webpack_require__.e("schema.json.7").then(__webpack_require__.t.bind(__webpack_require__, 90836, 19)) ];

                      case 20:
                        return [ 4, __webpack_require__.e("schema.json.8").then(__webpack_require__.t.bind(__webpack_require__, 41605, 19)) ];

                      case 22:
                        return [ 4, __webpack_require__.e("schema.json.9").then(__webpack_require__.t.bind(__webpack_require__, 91139, 19)) ];

                      case 24:
                        throw Error("Error major version ".concat(info.majorVersion, " of ").concat(info.type, " schema not found!"));
                    }
                });
            });
        }
        function getSchemaOptionsWithDependencies(semanticQueryVersion, formattingObjectDefinitionsMajorVersion) {
            return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                var semanticQuerySchema, formattingObjectDefinitionsSchema;
                return (0, tslib_es6.__generator)(this, function(_a) {
                    switch (_a.label) {
                      case 0:
                        return [ 4, getSchema({
                            type: SchemaType.SemanticQuery,
                            majorVersion: semanticQueryVersion
                        }) ];

                      case 1:
                        return semanticQuerySchema = _a.sent(), [ 4, getSchema({
                            type: SchemaType.FormattingObjectDefinitions,
                            majorVersion: formattingObjectDefinitionsMajorVersion
                        }) ];

                      case 2:
                        return formattingObjectDefinitionsSchema = _a.sent(), [ 2, (0, tslib_es6.__assign)({
                            schemas: [ semanticQuerySchema, formattingObjectDefinitionsSchema ]
                        }, typings.D) ];
                    }
                });
            });
        }
        function getInvalidMajorVersionResult(filePath, majorVersion) {
            return {
                filePath,
                keyword: validation_typings.VL.InvalidMajorVersion,
                params: {
                    InvalidMajorVersionError: majorVersion
                },
                level: validation_typings.qB.Error,
                type: validation_typings.ER
            };
        }
        var SchemaWarningKeywords = [ validation_typings.VL.AdditionalProperties ];
        function getSchemaValidationResults(filePath, validationResult) {
            if (!validationResult.isValid && !_.isEmpty(validationResult.errors)) {
                for (var validations = [], _i = 0, _a = validationResult.errors; _i < _a.length; _i++) {
                    var error = _a[_i];
                    if ("string" == typeof error) validations.push({
                        filePath,
                        keyword: "error",
                        params: {
                            error
                        },
                        level: validation_typings.qB.Error,
                        type: validation_typings.ER
                    }); else {
                        if (error.keyword === validation_typings.VL.OneOf) {
                            var fields = error.schema.map(function(s) {
                                return s.required;
                            });
                            error.params.fields = fields.join(",");
                        }
                        validations.push({
                            filePath,
                            keyword: error.keyword,
                            instancePath: error.instancePath,
                            params: error.params,
                            level: SchemaWarningKeywords.includes(error.keyword) ? validation_typings.qB.Warning : validation_typings.qB.Error,
                            type: validation_typings.ER
                        });
                    }
                }
                return validations;
            }
        }
        var versioning_utils = __webpack_require__(541), core = __webpack_require__(50423), lazy_provider = __webpack_require__(57786), lazy_load_routes = __webpack_require__(8483), JsonSchemaValidationEagerService = function() {
            function JsonSchemaValidationEagerService() {
                this.lazyProvider = (0, core.inject)(lazy_provider.E);
            }
            return JsonSchemaValidationEagerService.prototype.registerSchema = function(schemaName, schema, validationOptions) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getService() ];

                          case 1:
                            return _a.sent().registerSchema(schemaName, schema, validationOptions), [ 2 ];
                        }
                    });
                });
            }, JsonSchemaValidationEagerService.prototype.validate = function(arg0, data, validationOptions) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var lazyService;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getService() ];

                          case 1:
                            return lazyService = _a.sent(), "string" == typeof arg0 ? [ 2, lazyService.validate(arg0, data) ] : [ 2, lazyService.validate(arg0, data, validationOptions) ];
                        }
                    });
                });
            }, JsonSchemaValidationEagerService.prototype.getService = function() {
                return this.servicePromise || (this.servicePromise = this.lazyProvider.get("@powerbi/JsonSchemaValidation/lazy/json-schema-validation-lazy-module#JsonSchemaValidationLazyModule", lazy_load_routes.yO)), 
                this.servicePromise;
            }, JsonSchemaValidationEagerService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: JsonSchemaValidationEagerService,
                factory: JsonSchemaValidationEagerService.\u0275fac = function(t) {
                    return new (t || JsonSchemaValidationEagerService);
                },
                providedIn: "root"
            }), JsonSchemaValidationEagerService;
        }(), BookmarkSchemaValidatorService = function() {
            function BookmarkSchemaValidatorService(jsonSchemaValidationService) {
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return BookmarkSchemaValidatorService.prototype.validate = function(wireContract) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var version, majorVersion, bookmarkSchema, dependenciesVersions, schemaOptions, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return version = (0, versioning_utils.ZG)(wireContract.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, BookmarkMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.Bookmark,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.filePath, majorVersion) ] ];

                          case 1:
                            return bookmarkSchema = _a.sent(), [ 4, getSchemaOptionsWithDependencies((dependenciesVersions = {
                                semanticQueryVersion: 1,
                                formattingObjectDefinitionsMajorVersion: 1
                            }).semanticQueryVersion, dependenciesVersions.formattingObjectDefinitionsMajorVersion) ];

                          case 2:
                            return schemaOptions = _a.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(bookmarkSchema.$id, bookmarkSchema, schemaOptions) ];

                          case 3:
                            return _a.sent(), [ 4, this.jsonSchemaValidationService.validate(bookmarkSchema.$id, wireContract.content) ];

                          case 4:
                            return result = _a.sent(), [ 2, getSchemaValidationResults(wireContract.filePath, result) ];
                        }
                    });
                });
            }, BookmarkSchemaValidatorService.\u0275fac = function(t) {
                return new (t || BookmarkSchemaValidatorService)(core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, BookmarkSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: BookmarkSchemaValidatorService,
                factory: BookmarkSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), BookmarkSchemaValidatorService;
        }(), BookmarksMetadataSchemaValidatorService = function() {
            function BookmarksMetadataSchemaValidatorService(jsonSchemaValidationService) {
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return BookmarksMetadataSchemaValidatorService.prototype.validate = function(input) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var version, majorVersion, bookmarksMetadataSchema, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return version = (0, versioning_utils.ZG)(input.wireContract.$schema).version, isValidMajorVersion(majorVersion = (0, 
                            versioning_utils.W3)(version).major, BookmarksMetadataMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.BookmarksMetadata,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(input.filePath, majorVersion) ] ];

                          case 1:
                            return bookmarksMetadataSchema = _a.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(bookmarksMetadataSchema.$id, bookmarksMetadataSchema) ];

                          case 2:
                            return _a.sent(), [ 4, this.jsonSchemaValidationService.validate(bookmarksMetadataSchema.$id, input.wireContract) ];

                          case 3:
                            return result = _a.sent(), [ 2, getSchemaValidationResults(input.filePath, result) ];
                        }
                    });
                });
            }, BookmarksMetadataSchemaValidatorService.\u0275fac = function(t) {
                return new (t || BookmarksMetadataSchemaValidatorService)(core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, BookmarksMetadataSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: BookmarksMetadataSchemaValidatorService,
                factory: BookmarksMetadataSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), BookmarksMetadataSchemaValidatorService;
        }(), v2 = __webpack_require__(43838), VisualContainerMobileStateSchemaValidatorService = function() {
            function VisualContainerMobileStateSchemaValidatorService(jsonSchemaValidationService) {
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return VisualContainerMobileStateSchemaValidatorService.prototype.validate = function(wireContract) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var version, majorVersion, visualContainerMobileStateSchema, dependenciesVersions, schemaOptions, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return version = (0, versioning_utils.ZG)(wireContract.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, VisualContainerMobileStateMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.VisualContainerMobileState,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.filePath, majorVersion) ] ];

                          case 1:
                            return visualContainerMobileStateSchema = _a.sent(), [ 4, getSchemaOptionsWithDependencies((dependenciesVersions = {
                                semanticQueryVersion: 1,
                                formattingObjectDefinitionsMajorVersion: 1
                            }).semanticQueryVersion, dependenciesVersions.formattingObjectDefinitionsMajorVersion) ];

                          case 2:
                            return schemaOptions = _a.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(visualContainerMobileStateSchema.$id, visualContainerMobileStateSchema, schemaOptions) ];

                          case 3:
                            return _a.sent(), [ 4, this.jsonSchemaValidationService.validate(visualContainerMobileStateSchema.$id, wireContract.content) ];

                          case 4:
                            return result = _a.sent(), [ 2, getSchemaValidationResults(wireContract.filePath, result) ];
                        }
                    });
                });
            }, VisualContainerMobileStateSchemaValidatorService.\u0275fac = function(t) {
                return new (t || VisualContainerMobileStateSchemaValidatorService)(core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, VisualContainerMobileStateSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualContainerMobileStateSchemaValidatorService,
                factory: VisualContainerMobileStateSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), VisualContainerMobileStateSchemaValidatorService;
        }(), VisualContainerSchemaValidatorService = function() {
            function VisualContainerSchemaValidatorService(jsonSchemaValidationService) {
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return VisualContainerSchemaValidatorService.prototype.validate = function(wireContract) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var version, majorVersion, visualContainerSchema, dependenciesVersions, schemaOptions, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return version = (0, versioning_utils.ZG)(wireContract.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, VisualContainerMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.VisualContainer,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.filePath, majorVersion) ] ];

                          case 1:
                            return visualContainerSchema = _a.sent(), [ 4, getSchemaOptionsWithDependencies((dependenciesVersions = {
                                semanticQueryVersion: 1,
                                formattingObjectDefinitionsMajorVersion: 1
                            }).semanticQueryVersion, dependenciesVersions.formattingObjectDefinitionsMajorVersion) ];

                          case 2:
                            return schemaOptions = _a.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(visualContainerSchema.$id, visualContainerSchema, schemaOptions) ];

                          case 3:
                            return _a.sent(), [ 4, this.jsonSchemaValidationService.validate(visualContainerSchema.$id, wireContract.content) ];

                          case 4:
                            return result = _a.sent(), [ 2, getSchemaValidationResults(wireContract.filePath, result) ];
                        }
                    });
                });
            }, VisualContainerSchemaValidatorService.\u0275fac = function(t) {
                return new (t || VisualContainerSchemaValidatorService)(core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, VisualContainerSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualContainerSchemaValidatorService,
                factory: VisualContainerSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), VisualContainerSchemaValidatorService;
        }(), PageSchemaValidatorService = function() {
            function PageSchemaValidatorService(visualContainerMobileStateSchemaValidatorService, visualContainerSchemaValidatorService, jsonSchemaValidationService) {
                this.visualContainerMobileStateSchemaValidatorService = visualContainerMobileStateSchemaValidatorService, 
                this.visualContainerSchemaValidatorService = visualContainerSchemaValidatorService, 
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return PageSchemaValidatorService.prototype.validate = function(wireContract) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var validations, version, majorVersion, pageSchema, dependenciesVersions, schemaOptions, result, pageValidations, _i, _a, visualContainer, visualContainerResult;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return validations = [], version = (0, versioning_utils.ZG)(wireContract.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, PageMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.Page,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.filePath, majorVersion) ] ];

                          case 1:
                            return pageSchema = _b.sent(), [ 4, getSchemaOptionsWithDependencies((dependenciesVersions = {
                                semanticQueryVersion: 1,
                                formattingObjectDefinitionsMajorVersion: 1
                            }).semanticQueryVersion, dependenciesVersions.formattingObjectDefinitionsMajorVersion) ];

                          case 2:
                            return schemaOptions = _b.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(pageSchema.$id, pageSchema, schemaOptions) ];

                          case 3:
                            return _b.sent(), [ 4, this.jsonSchemaValidationService.validate(pageSchema.$id, wireContract.content) ];

                          case 4:
                            if (result = _b.sent(), pageValidations = getSchemaValidationResults(wireContract.filePath, result), 
                            _.isEmpty(pageValidations) || validations.push.apply(validations, pageValidations), 
                            !wireContract.visualContainers) return [ 3, 11 ];
                            _i = 0, _a = wireContract.visualContainers, _b.label = 5;

                          case 5:
                            return _i < _a.length ? (visualContainerResult = void 0, (0, v2.$h)((visualContainer = _a[_i]).content) ? [ 4, this.visualContainerMobileStateSchemaValidatorService.validate(visualContainer) ] : [ 3, 7 ]) : [ 3, 11 ];

                          case 6:
                            return visualContainerResult = _b.sent(), [ 3, 9 ];

                          case 7:
                            return [ 4, this.visualContainerSchemaValidatorService.validate(visualContainer) ];

                          case 8:
                            visualContainerResult = _b.sent(), _b.label = 9;

                          case 9:
                            _.isEmpty(visualContainerResult) || validations.push.apply(validations, visualContainerResult), 
                            _b.label = 10;

                          case 10:
                            return _i++, [ 3, 5 ];

                          case 11:
                            return [ 2, validations ];
                        }
                    });
                });
            }, PageSchemaValidatorService.\u0275fac = function(t) {
                return new (t || PageSchemaValidatorService)(core["\u0275\u0275inject"](VisualContainerMobileStateSchemaValidatorService), core["\u0275\u0275inject"](VisualContainerSchemaValidatorService), core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, PageSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: PageSchemaValidatorService,
                factory: PageSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), PageSchemaValidatorService;
        }(), PagesMetadataSchemaValidatorService = function() {
            function PagesMetadataSchemaValidatorService(jsonSchemaValidationService) {
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return PagesMetadataSchemaValidatorService.prototype.validate = function(wireContract) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var version, majorVersion, pagesMetadataSchema, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return version = (0, versioning_utils.ZG)(wireContract.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, PagesMetadataMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.PagesMetadata,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.filePath, majorVersion) ] ];

                          case 1:
                            return pagesMetadataSchema = _a.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(pagesMetadataSchema.$id, pagesMetadataSchema) ];

                          case 2:
                            return _a.sent(), [ 4, this.jsonSchemaValidationService.validate(pagesMetadataSchema.$id, wireContract.content) ];

                          case 3:
                            return result = _a.sent(), [ 2, getSchemaValidationResults(wireContract.filePath, result) ];
                        }
                    });
                });
            }, PagesMetadataSchemaValidatorService.\u0275fac = function(t) {
                return new (t || PagesMetadataSchemaValidatorService)(core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, PagesMetadataSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: PagesMetadataSchemaValidatorService,
                factory: PagesMetadataSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), PagesMetadataSchemaValidatorService;
        }(), ReportExtensionSchemaValidatorService = function() {
            function ReportExtensionSchemaValidatorService(jsonSchemaValidationService) {
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return ReportExtensionSchemaValidatorService.prototype.validate = function(wireContract) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var version, majorVersion, reportExtensionSchema, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return version = (0, versioning_utils.ZG)(wireContract.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, ReportExtensionMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.ReportExtension,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.filePath, majorVersion) ] ];

                          case 1:
                            return reportExtensionSchema = _a.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(reportExtensionSchema.$id, reportExtensionSchema) ];

                          case 2:
                            return _a.sent(), [ 4, this.jsonSchemaValidationService.validate(reportExtensionSchema.$id, wireContract.content) ];

                          case 3:
                            return result = _a.sent(), [ 2, getSchemaValidationResults(wireContract.filePath, result) ];
                        }
                    });
                });
            }, ReportExtensionSchemaValidatorService.\u0275fac = function(t) {
                return new (t || ReportExtensionSchemaValidatorService)(core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, ReportExtensionSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ReportExtensionSchemaValidatorService,
                factory: ReportExtensionSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), ReportExtensionSchemaValidatorService;
        }(), VersionMetadataSchemaValidatorService = function() {
            function VersionMetadataSchemaValidatorService(jsonSchemaValidationService) {
                this.jsonSchemaValidationService = jsonSchemaValidationService;
            }
            return VersionMetadataSchemaValidatorService.prototype.validate = function(wireContract) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var version, majorVersion, versionMetadataSchema, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return version = (0, versioning_utils.ZG)(wireContract.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, VersionMetadataMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.VersionMetadata,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.filePath, majorVersion) ] ];

                          case 1:
                            return versionMetadataSchema = _a.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(versionMetadataSchema.$id, versionMetadataSchema) ];

                          case 2:
                            return _a.sent(), [ 4, this.jsonSchemaValidationService.validate(versionMetadataSchema.$id, wireContract.content) ];

                          case 3:
                            return result = _a.sent(), [ 2, getSchemaValidationResults(wireContract.filePath, result) ];
                        }
                    });
                });
            }, VersionMetadataSchemaValidatorService.\u0275fac = function(t) {
                return new (t || VersionMetadataSchemaValidatorService)(core["\u0275\u0275inject"](JsonSchemaValidationEagerService));
            }, VersionMetadataSchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VersionMetadataSchemaValidatorService,
                factory: VersionMetadataSchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), VersionMetadataSchemaValidatorService;
        }(), SchemaValidatorService = function() {
            function SchemaValidatorService(bookmarkSchemaValidatorService, bookmarksMetadataSchemaValidatorService, jsonSchemaValidationService, pageSchemaValidatorService, pagesMetadataSchemaValidatorService, reportExtensionSchemaValidatorService, versionMetadataSchemaValidatorService) {
                this.bookmarkSchemaValidatorService = bookmarkSchemaValidatorService, this.bookmarksMetadataSchemaValidatorService = bookmarksMetadataSchemaValidatorService, 
                this.jsonSchemaValidationService = jsonSchemaValidationService, this.pageSchemaValidatorService = pageSchemaValidatorService, 
                this.pagesMetadataSchemaValidatorService = pagesMetadataSchemaValidatorService, 
                this.reportExtensionSchemaValidatorService = reportExtensionSchemaValidatorService, 
                this.versionMetadataSchemaValidatorService = versionMetadataSchemaValidatorService;
            }
            return SchemaValidatorService.prototype.validate = function(wireContract, parentActivity) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var activity, validations, versionMetadataResult, version, majorVersion, reportSchema, dependenciesVersions, schemaOptions, reportResult, reportValidations, reportExtensionResult, bookmarksMetadataResult, _i, _a, bookmarkResult, pagesMetadataResult, _b, _c, pageResult;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return activity = null == parentActivity ? void 0 : parentActivity.createChildActivity({
                                name: "ReportSchemaValidationStep"
                            }), validations = [], [ 4, this.versionMetadataSchemaValidatorService.validate(wireContract.version) ];

                          case 1:
                            return versionMetadataResult = _d.sent(), _.isEmpty(versionMetadataResult) || validations.push.apply(validations, versionMetadataResult), 
                            version = (0, versioning_utils.ZG)(wireContract.report.content.$schema).version, 
                            isValidMajorVersion(majorVersion = (0, versioning_utils.W3)(version).major, ReportMajorVersions) ? [ 4, getSchema({
                                type: SchemaType.Report,
                                majorVersion
                            }) ] : [ 2, [ getInvalidMajorVersionResult(wireContract.report.filePath, majorVersion) ] ];

                          case 2:
                            return reportSchema = _d.sent(), [ 4, getSchemaOptionsWithDependencies((dependenciesVersions = {
                                semanticQueryVersion: 1,
                                formattingObjectDefinitionsMajorVersion: 1
                            }).semanticQueryVersion, dependenciesVersions.formattingObjectDefinitionsMajorVersion) ];

                          case 3:
                            return schemaOptions = _d.sent(), [ 4, this.jsonSchemaValidationService.registerSchema(reportSchema.$id, reportSchema, schemaOptions) ];

                          case 4:
                            return _d.sent(), [ 4, this.jsonSchemaValidationService.validate(reportSchema.$id, wireContract.report.content) ];

                          case 5:
                            return reportResult = _d.sent(), reportValidations = getSchemaValidationResults(wireContract.report.filePath, reportResult), 
                            _.isEmpty(reportValidations) || validations.push.apply(validations, reportValidations), 
                            wireContract.reportExtensions ? [ 4, this.reportExtensionSchemaValidatorService.validate(wireContract.reportExtensions) ] : [ 3, 7 ];

                          case 6:
                            reportExtensionResult = _d.sent(), _.isEmpty(reportExtensionResult) || validations.push.apply(validations, reportExtensionResult), 
                            _d.label = 7;

                          case 7:
                            return wireContract.bookmarks ? [ 4, this.bookmarksMetadataSchemaValidatorService.validate({
                                wireContract: wireContract.bookmarks.content,
                                filePath: wireContract.bookmarks.filePath
                            }) ] : [ 3, 12 ];

                          case 8:
                            bookmarksMetadataResult = _d.sent(), _.isEmpty(bookmarksMetadataResult) || validations.push.apply(validations, bookmarksMetadataResult), 
                            _i = 0, _a = wireContract.bookmarks.bookmarks, _d.label = 9;

                          case 9:
                            return _i < _a.length ? [ 4, this.bookmarkSchemaValidatorService.validate(_a[_i]) ] : [ 3, 12 ];

                          case 10:
                            bookmarkResult = _d.sent(), _.isEmpty(bookmarkResult) || validations.push.apply(validations, bookmarkResult), 
                            _d.label = 11;

                          case 11:
                            return _i++, [ 3, 9 ];

                          case 12:
                            return wireContract.pages.pagesMetadata ? [ 4, this.pagesMetadataSchemaValidatorService.validate(wireContract.pages.pagesMetadata) ] : [ 3, 14 ];

                          case 13:
                            pagesMetadataResult = _d.sent(), _.isEmpty(pagesMetadataResult) || validations.push.apply(validations, pagesMetadataResult), 
                            _d.label = 14;

                          case 14:
                            _b = 0, _c = wireContract.pages.pages, _d.label = 15;

                          case 15:
                            return _b < _c.length ? [ 4, this.pageSchemaValidatorService.validate(_c[_b]) ] : [ 3, 18 ];

                          case 16:
                            pageResult = _d.sent(), _.isEmpty(pageResult) || validations.push.apply(validations, pageResult), 
                            _d.label = 17;

                          case 17:
                            return _b++, [ 3, 15 ];

                          case 18:
                            return null == activity || activity.setProperty("errorCodes", _.map(validations, function(validation) {
                                return JSON.stringify(validation);
                            })), null == activity || activity.resolve(), [ 2, validations ];
                        }
                    });
                });
            }, SchemaValidatorService.\u0275fac = function(t) {
                return new (t || SchemaValidatorService)(core["\u0275\u0275inject"](BookmarkSchemaValidatorService), core["\u0275\u0275inject"](BookmarksMetadataSchemaValidatorService), core["\u0275\u0275inject"](JsonSchemaValidationEagerService), core["\u0275\u0275inject"](PageSchemaValidatorService), core["\u0275\u0275inject"](PagesMetadataSchemaValidatorService), core["\u0275\u0275inject"](ReportExtensionSchemaValidatorService), core["\u0275\u0275inject"](VersionMetadataSchemaValidatorService));
            }, SchemaValidatorService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: SchemaValidatorService,
                factory: SchemaValidatorService.\u0275fac,
                providedIn: "root"
            }), SchemaValidatorService;
        }(), ReportDefinition_lazy_load_routes = __webpack_require__(61032), ReportDefinitionSchemaValidatorModule = function() {
            function ReportDefinitionSchemaValidatorModule() {}
            return ReportDefinitionSchemaValidatorModule.\u0275fac = function(t) {
                return new (t || ReportDefinitionSchemaValidatorModule);
            }, ReportDefinitionSchemaValidatorModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ReportDefinitionSchemaValidatorModule
            }), ReportDefinitionSchemaValidatorModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ lazy_load_module.N.withLazyService(ReportDefinition_lazy_load_routes.ED, SchemaValidatorService) ],
                imports: [ common.CommonModule, lazy_load_module.N, json_schema_validation_eager_module.E ]
            }), ReportDefinitionSchemaValidatorModule;
        }();
    }
} ]);