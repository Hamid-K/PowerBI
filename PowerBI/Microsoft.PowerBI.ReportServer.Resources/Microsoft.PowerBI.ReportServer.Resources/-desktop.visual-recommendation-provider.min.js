"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "visual-recommendation-provider" ], {
    66098: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            VisualRecommendationProviderModule: function() {
                return VisualRecommendationProviderModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), columnChart_capabilities = __webpack_require__(47287), TooltipRole = columnChart_capabilities.au.tooltips, VisualRecommendationConstants = function() {
            function VisualRecommendationConstants() {}
            return VisualRecommendationConstants.defaultFieldCount = 20, VisualRecommendationConstants.defaultTopNFieldCount = 3, 
            VisualRecommendationConstants.fieldScoreBase = 1.2, VisualRecommendationConstants.dispreferedLegendScoreReducer = .67, 
            VisualRecommendationConstants.dispreferedRoleReducer = .67, VisualRecommendationConstants.dispreferedSortScoreReducer = .1, 
            VisualRecommendationConstants.incompleteFieldsScore = .1, VisualRecommendationConstants.unsureTypeFieldScore = .3, 
            VisualRecommendationConstants.idOnDispreferedAxis = .3, VisualRecommendationConstants.incompatibleAggregate = .1, 
            VisualRecommendationConstants;
        }(), FieldTypePreferenceScores = function() {
            function FieldTypePreferenceScores() {}
            return FieldTypePreferenceScores.strong = 1, FieldTypePreferenceScores.medium = .85, 
            FieldTypePreferenceScores.low = .3, FieldTypePreferenceScores;
        }(), sqExpr = __webpack_require__(94419), sqExprRewriter = __webpack_require__(5361), sqExprStaticMembers = __webpack_require__(74082), DateAddToDateSpanRewriter = function(_super) {
            function DateAddToDateSpanRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(DateAddToDateSpanRewriter, _super), DateAddToDateSpanRewriter.prototype.visitDateAdd = function(expr) {
                var dateSpanRewriter = new ReplaceDateSpanRewriter, newExpr = expr.accept(dateSpanRewriter);
                return dateSpanRewriter.dateSpanExpr ? (0, sqExpr.uQ)(dateSpanRewriter.dateSpanExpr.unit, newExpr) : expr;
            }, DateAddToDateSpanRewriter;
        }(sqExprRewriter.b), RelativeDayToHourRewriter = function(_super) {
            function RelativeDayToHourRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(RelativeDayToHourRewriter, _super), RelativeDayToHourRewriter.prototype.visitDateAdd = function(expr) {
                return (0, sqExprStaticMembers.jr)(expr.arg) && 0 === expr.unit && -1 === expr.amount ? (0, 
                sqExpr.sO)(7, -24, expr.arg) : expr;
            }, RelativeDayToHourRewriter;
        }(sqExprRewriter.b), ReplaceDateSpanRewriter = function(_super) {
            function ReplaceDateSpanRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(ReplaceDateSpanRewriter, _super), ReplaceDateSpanRewriter.prototype.visitDateSpan = function(expr) {
                return this.dateSpanExpr = expr, expr.arg;
            }, ReplaceDateSpanRewriter;
        }(sqExprRewriter.b), debug = __webpack_require__(62458), sqExprEqualityVisitor = __webpack_require__(45413), sqExprUtils_isMeasure = __webpack_require__(58295);
        function updateWithDefaultLabel(groupedExprs, schema) {
            var _a, _b, _c;
            debug.fF.assertNonEmpty(groupedExprs, "groupedExprs");
            for (var updated = [], _i = 0, groupedExprs_1 = groupedExprs; _i < groupedExprs_1.length; _i++) {
                var g = groupedExprs_1[_i];
                if (1 === _.size(g.exprs) && (0, sqExprStaticMembers.Lk)(g.exprs[0])) {
                    if (!g.defaultLabel) return;
                    if (isDuplicateField(g.defaultLabel, groupedExprs)) continue;
                    updated.push({
                        exprs: [ g.defaultLabel ],
                        type: g.type,
                        isMeasure: g.isMeasure,
                        entity: null === (_a = g.defaultLabel.getTargetEntity()) || void 0 === _a ? void 0 : _a.entity,
                        canAggregate: g.canAggregate,
                        isFiltered: g.isFiltered,
                        isSingleValue: g.isSingleValue,
                        isIdentity: null === (_c = null === (_b = g.defaultLabel.getConceptualProperty(schema)) || void 0 === _b ? void 0 : _b.column) || void 0 === _c ? void 0 : _c.idOnEntityKey,
                        isParameter: g.isParameter,
                        isTooltip: g.isTooltip,
                        showAll: g.showAll,
                        groupMetadata: g.groupMetadata
                    });
                } else updated.push(g);
            }
            return updated;
        }
        function updateWithAggregates(exprs, query, schema, aggrOps, predicate) {
            debug.fF.assertNonEmpty(exprs, "exprs"), debug.fF.assertValue(schema, "schema"), 
            debug.fF.assertValue(aggrOps, "aggrOps"), debug.fF.assertValue(predicate, "condition");
            var isAggregatable = function(e) {
                return predicate(e) && 1 === _.size(e.exprs) && !e.isFiltered && !e.isSingleValue && !e.isParameter && !e.showAll && e.canAggregate;
            }, aggregatableExprs = _.filter(exprs, function(e) {
                return isAggregatable(e);
            });
            if (_.isEmpty(aggregatableExprs)) return {
                groupedExprsWithMetadata: exprs,
                query
            };
            for (var result = [], orderBy = query.orderBy(), updatedQuery = query, _loop_1 = function(e) {
                if (!isAggregatable(e)) return result.push(e), "continue";
                var aggregatableExpr = e, expr = aggrOps.createExprWithAggregate(aggregatableExpr.exprs[0], schema, !1, void 0);
                if (!expr || !(0, sqExprUtils_isMeasure.k)(expr)) return result.push(aggregatableExpr), 
                "continue";
                var metadata = expr.getMetadata(schema);
                result.push({
                    exprs: [ expr ],
                    isMeasure: !0,
                    type: metadata && metadata.type,
                    entity: e.entity,
                    isTooltip: e.isTooltip,
                    groupMetadata: e.groupMetadata,
                    isHidden: e.isHidden
                });
                var orderByToUpdate = _.find(orderBy, function(o) {
                    return (0, sqExprEqualityVisitor.fS)(o.expr, aggregatableExpr.exprs[0]);
                });
                orderByToUpdate && (orderByToUpdate.expr = expr);
            }, _i = 0, exprs_1 = exprs; _i < exprs_1.length; _i++) _loop_1(exprs_1[_i]);
            return updatedQuery = updatedQuery.orderBy(orderBy), {
                groupedExprsWithMetadata: result,
                query: updatedQuery
            };
        }
        function isNumeric(expr) {
            return expr && expr.type && !expr.type.temporal && (expr.type.numeric || expr.type.integer);
        }
        function isNonAdditiveMeasure(expr) {
            return (0, sqExprStaticMembers.iV)(expr) && (1 === expr.func || 2 === expr.func);
        }
        function addField(query, field, role, showAll, isParameter, nativeReferenceName, isHidden) {
            isParameter ? query.addParameter(field, role) : query.add(field, role, {
                nativeReferenceName,
                isHidden
            }), showAll && !query.projections[role].showAll && query.toggleShowAll(role);
        }
        function ensureActiveProjections(query, role, addDefaultFormatting, metadataProjectedIndex) {
            var _a, exprCount = _.size(null === (_a = query.projections[role]) || void 0 === _a ? void 0 : _a.all());
            exprCount <= 1 || query.setActiveProjections([ role ], addDefaultFormatting ? exprCount : null != metadataProjectedIndex ? metadataProjectedIndex + 1 : 1);
        }
        function isDuplicateField(expr, exprs) {
            var allExprs = _.flatten(_.map(exprs, function(e) {
                return e.exprs;
            }));
            return !!_.find(allExprs, function(e) {
                return (0, sqExprEqualityVisitor.fS)(e, expr, !1, !0);
            });
        }
        var contracts_visualQuery = __webpack_require__(45114), plugins = __webpack_require__(47508), semanticQuery = __webpack_require__(95462), CardRecommendationPlugin = function() {
            function CardRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(CardRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.card.name, plugins.L.multiRowCard.name ];
                },
                enumerable: !1,
                configurable: !0
            }), CardRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                debug.fF.assertNonEmpty(typedExprs, "typedExprs should not be empty"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var dimensions = _.filter(updatedExprs, function(expr) {
                        return !expr.isMeasure;
                    }), measures = _.filter(updatedExprs, function(expr) {
                        return expr.isMeasure;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    });
                    _.isEmpty(visibleMeasures) && (updatedExprs = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                        return isNumeric(e);
                    }).groupedExprsWithMetadata, dimensions = _.filter(updatedExprs, function(expr) {
                        return !expr.isMeasure;
                    }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                        return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                    }));
                    for (var visibleMeasureCount = _.size(visibleMeasures), nonMeasureCount = _.size(dimensions), useCard = 1 === visibleMeasureCount && 0 === nonMeasureCount, fieldScore = _.size(_.filter(updatedExprs, function(e) {
                        return e.isSingleValue;
                    })) === nonMeasureCount ? 1 : Math.pow(5, -nonMeasureCount), semanticTypeScore = 0 === visibleMeasureCount ? VisualRecommendationConstants.incompleteFieldsScore : 1, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), _i = 0, visibleMeasures_1 = visibleMeasures; _i < visibleMeasures_1.length; _i++) {
                        var nativeReferenceName = query.selectNativeReferenceNameOf(expr = (measure = visibleMeasures_1[_i]).exprs[0]);
                        addField(visualQuery, expr, "Values", measure.showAll, measure.isParameter, nativeReferenceName);
                    }
                    for (var hiddenMeasures = _.filter(measures, function(expr) {
                        return expr.isHidden;
                    }), _a = 0, hiddenMeasures_1 = hiddenMeasures; _a < hiddenMeasures_1.length; _a++) {
                        var measure;
                        nativeReferenceName = query.selectNativeReferenceNameOf(expr = (measure = hiddenMeasures_1[_a]).exprs[0]), 
                        addField(visualQuery, expr, "Values", measure.showAll, measure.isParameter, nativeReferenceName, !0);
                    }
                    for (var _b = 0, dimensions_1 = dimensions; _b < dimensions_1.length; _b++) for (var dimension = dimensions_1[_b], _c = 0, _d = dimension.exprs; _c < _d.length; _c++) nativeReferenceName = query.selectNativeReferenceNameOf(expr = _d[_c]), 
                    addField(visualQuery, expr, "Values", dimension.showAll, dimension.isParameter, nativeReferenceName);
                    if (!useCard) {
                        var orderBy = query.orderBy(), hasExplicitSort = _.some(typedExprs, function(e) {
                            return e.isExplicitSortBy;
                        });
                        if (_.isEmpty(orderBy) || !hasExplicitSort) {
                            var expr, firstMeasure = _.first(visibleMeasures);
                            orderBy = null != firstMeasure ? [ {
                                expr: expr = firstMeasure.exprs[0],
                                direction: getSortDirection(orderBy, expr, 2)
                            } ] : [ {
                                expr: expr = _.first(dimensions).exprs[0],
                                direction: getSortDirection(orderBy, expr, 1)
                            } ];
                        }
                        visualQuery.orderBy(orderBy);
                    }
                    return [ {
                        config: this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: useCard ? plugins.L.card.name : plugins.L.multiRowCard.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        }),
                        scores: {
                            fieldScore,
                            semanticTypeScore
                        }
                    } ];
                }
            }, CardRecommendationPlugin;
        }();
        function getSortDirection(orderBy, field, defaultSort) {
            var _a, queryOrder = _.find(orderBy, function(o) {
                return (0, sqExprEqualityVisitor.fS)(o.expr, field, !0, !0);
            });
            return null !== (_a = null == queryOrder ? void 0 : queryOrder.direction) && void 0 !== _a ? _a : defaultSort;
        }
        var treemap_capabilities = __webpack_require__(92947), waterfallChart_capabilities = __webpack_require__(5616), axisType = __webpack_require__(48766), dataViewObjectDefinition1 = __webpack_require__(5265), ColumnRecommendationPlugin = function() {
            function ColumnRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(ColumnRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.clusteredColumnChart.name, plugins.L.clusteredBarChart.name, plugins.L.columnChart.name, plugins.L.barChart.name, plugins.L.hundredPercentStackedColumnChart.name, plugins.L.hundredPercentStackedBarChart.name, plugins.L.donutChart.name, plugins.L.pieChart.name, plugins.L.ribbonChart.name, plugins.L.waterfallChart.name, plugins.L.treemap.name ];
                },
                enumerable: !1,
                configurable: !0
            }), ColumnRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                var _a, _b, _c;
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var roles = function(visualType) {
                    return visualType === plugins.L.waterfallChart.name ? {
                        category: waterfallChart_capabilities.IT.category,
                        series: waterfallChart_capabilities.IT.breakdown,
                        y: waterfallChart_capabilities.IT.y
                    } : visualType === plugins.L.treemap.name ? {
                        category: treemap_capabilities.A4.group,
                        series: treemap_capabilities.A4.details,
                        y: treemap_capabilities.A4.values
                    } : {
                        category: columnChart_capabilities.au.category,
                        series: columnChart_capabilities.au.series,
                        y: columnChart_capabilities.au.y
                    };
                }(pluginConfig.visualType), updatedQuery = query, updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var fieldScore = 1, semanticTypeScore = 1, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure && !t.isTooltip;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    }), tooltips = _.filter(updatedExprs, function(t) {
                        return t.isTooltip;
                    });
                    if (_.isEmpty(visibleMeasures)) {
                        var result_1 = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                            return isNumeric(e);
                        });
                        updatedExprs = result_1.groupedExprsWithMetadata, updatedQuery = result_1.query, 
                        dimensions = _.filter(updatedExprs, function(t) {
                            return !t.isMeasure;
                        }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                            return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                        });
                    }
                    var singleValued = _.remove(dimensions, function(d) {
                        return d.isSingleValue;
                    });
                    if (_.isEmpty(dimensions) && (dimensions = singleValued), !_.some(visibleMeasures, function(m) {
                        return m.type && !m.type.numeric && !m.type.integer;
                    })) {
                        var legendIsText, orderedDimensions = function(dimensions) {
                            return _.orderBy(dimensions, function(d) {
                                return d.type && (d.type.text || d.type.temporal) ? 1 : d.type && d.type.bool ? 2 : 3;
                            });
                        }(dimensions), idEntities = _.chain(orderedDimensions).filter(function(d) {
                            return d.isIdentity;
                        }).map(function(d) {
                            return d.entity;
                        }).value(), canSupportLegend = _.size(visibleMeasures) <= 1 && _.size(dimensions) > 1;
                        if (canSupportLegend) {
                            var legendIndexInOrderedDimensions = _.findLastIndex(orderedDimensions, function(d) {
                                return 1 === _.size(d.exprs) && !d.isIdentity && _.indexOf(idEntities, d.entity) < 0;
                            });
                            if (legendIndexInOrderedDimensions >= 0) {
                                var legend = orderedDimensions[legendIndexInOrderedDimensions], legendIndexInDimensions = _.findLastIndex(dimensions, legend);
                                legendIsText = legend.type && legend.type.text && !legend.type.geography && !legend.type.misc && !legend.type.temporal, 
                                dimensions.splice(legendIndexInDimensions, 1), orderedDimensions.splice(legendIndexInOrderedDimensions, 1);
                                var nativeReferenceName = query.selectNativeReferenceNameOf(expr = legend.exprs[0]);
                                addField(visualQuery, expr, roles.series, legend.showAll, legend.isParameter, nativeReferenceName);
                            }
                        }
                        for (var shouldSortByCategory = !0, idUsedAsAxis = !1, _i = 0, orderedDimensions_1 = orderedDimensions; _i < orderedDimensions_1.length; _i++) {
                            var category = orderedDimensions_1[_i];
                            category.isIdentity && (idUsedAsAxis = !0);
                            var score = FieldTypePreferenceScores.low;
                            if (null == category.type) return;
                            !category.isIdentity && !category.type.text || category.type.geography || category.type.misc || category.type.temporal || category.type.dateTime ? category.type && (category.type.bool || category.type.geography || category.type.misc) && (score = FieldTypePreferenceScores.medium) : score = FieldTypePreferenceScores.strong, 
                            semanticTypeScore = Math.min(semanticTypeScore, score);
                            for (var fieldHasSortBy = !0, _d = 0, _e = category.exprs; _d < _e.length; _d++) nativeReferenceName = query.selectNativeReferenceNameOf(expr = _e[_d]), 
                            addField(visualQuery, expr, roles.category, category.showAll, category.isParameter, nativeReferenceName), 
                            fieldHasSortBy = fieldHasSortBy && !_.isEmpty(expr.getOrderByColumns(pluginConfig.schema));
                            shouldSortByCategory = shouldSortByCategory && (!!(null === (_a = category.type) || void 0 === _a ? void 0 : _a.temporal) || fieldHasSortBy);
                        }
                        ensureActiveProjections(visualQuery, roles.category, pluginConfig.addDefaultFormatting, null === (_c = null === (_b = null == orderedDimensions ? void 0 : orderedDimensions[0]) || void 0 === _b ? void 0 : _b.groupMetadata) || void 0 === _c ? void 0 : _c.maxProjectedIndex), 
                        canSupportLegend && !legendIsText && (semanticTypeScore *= VisualRecommendationConstants.dispreferedLegendScoreReducer);
                        for (var hasNonAdditiveAggregates = !1, _loop_1 = function(measure) {
                            debug.fF.assert(function() {
                                return 1 === _.size(measure.exprs);
                            });
                            var expr = measure.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, roles.y, measure.showAll, measure.isParameter, nativeReferenceName), 
                            hasNonAdditiveAggregates = hasNonAdditiveAggregates || isNonAdditiveMeasure(expr);
                        }, _f = 0, visibleMeasures_1 = visibleMeasures; _f < visibleMeasures_1.length; _f++) _loop_1(measure = visibleMeasures_1[_f]);
                        for (var _g = 0, hiddenMeasures_1 = _.filter(measures, function(t) {
                            return t.isHidden;
                        }); _g < hiddenMeasures_1.length; _g++) {
                            var measure;
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = (measure = hiddenMeasures_1[_g]).exprs[0]), 
                            addField(visualQuery, expr, roles.y, measure.showAll, measure.isParameter, nativeReferenceName, !0);
                        }
                        for (var _loop_2 = function(tooltip) {
                            debug.fF.assert(function() {
                                return 1 === _.size(tooltip.exprs);
                            });
                            var expr = tooltip.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, TooltipRole, tooltip.showAll, tooltip.isParameter, nativeReferenceName, tooltip.isHidden), 
                            hasNonAdditiveAggregates = hasNonAdditiveAggregates || isNonAdditiveMeasure(expr);
                        }, _h = 0, tooltips_1 = tooltips; _h < tooltips_1.length; _h++) _loop_2(tooltips_1[_h]);
                        var orderBy = updatedQuery.orderBy(), hasExplicitSort = _.some(typedExprs, function(e) {
                            return e.isExplicitSortBy;
                        });
                        if (_.isEmpty(orderBy) || !hasExplicitSort) {
                            var firstMeasure = _.first(visibleMeasures);
                            if (shouldSortByCategory && !_.isEmpty(orderedDimensions)) orderBy = [ {
                                expr: expr = _.first(orderedDimensions).exprs[0],
                                direction: column_recommendation_plugin_getSortDirection(orderBy, expr, 1)
                            } ]; else if (firstMeasure) orderBy = [ {
                                expr: expr = firstMeasure.exprs[0],
                                direction: column_recommendation_plugin_getSortDirection(orderBy, expr, 2)
                            } ]; else {
                                var expr;
                                orderBy = [ {
                                    expr: expr = _.first(orderedDimensions).exprs[0],
                                    direction: column_recommendation_plugin_getSortDirection(orderBy, expr, 1)
                                } ];
                            }
                        }
                        visualQuery.orderBy(orderBy), fieldScore = Math.pow(VisualRecommendationConstants.fieldScoreBase, 1 - _.size(dimensions)) * Math.pow(VisualRecommendationConstants.fieldScoreBase, 1 - _.size(visibleMeasures)), 
                        (_.isEmpty(dimensions) || _.isEmpty(visibleMeasures)) && (fieldScore = VisualRecommendationConstants.incompleteFieldsScore);
                        var visualType = pluginConfig.visualType;
                        if (!visualType) if (idUsedAsAxis) visualType = plugins.L.clusteredColumnChart.name; else {
                            var firstOrderBy = _.first(orderBy);
                            visualType = (0, sqExprUtils_isMeasure.k)(firstOrderBy.expr) ? plugins.L.clusteredBarChart.name : plugins.L.clusteredColumnChart.name;
                        }
                        var clusteredBarConfig = createConfig(this.visualAuthoring, visualQuery, plugins.L.clusteredBarChart.name, pluginConfig.schema, idUsedAsAxis, pluginConfig.addDefaultFormatting), clusteredColumnConfig = createConfig(this.visualAuthoring, visualQuery, plugins.L.clusteredColumnChart.name, pluginConfig.schema, idUsedAsAxis, pluginConfig.addDefaultFormatting), stackedBarConfig = createConfig(this.visualAuthoring, visualQuery, plugins.L.barChart.name, pluginConfig.schema, idUsedAsAxis, pluginConfig.addDefaultFormatting), stackedColumnConfig = createConfig(this.visualAuthoring, visualQuery, plugins.L.columnChart.name, pluginConfig.schema, idUsedAsAxis, pluginConfig.addDefaultFormatting), stackedSemanticScore = hasNonAdditiveAggregates ? VisualRecommendationConstants.incompatibleAggregate : semanticTypeScore, barResult = [ {
                            config: clusteredBarConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore
                            }
                        }, {
                            config: stackedBarConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore: stackedSemanticScore
                            }
                        } ], columnResult = [ {
                            config: clusteredColumnConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore
                            }
                        }, {
                            config: stackedColumnConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore: stackedSemanticScore
                            }
                        } ], result = visualType !== plugins.L.clusteredColumnChart.name && visualType !== plugins.L.columnChart.name ? (0, 
                        tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], barResult, !0), columnResult, !0) : (0, 
                        tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], columnResult, !0), barResult, !0);
                        if (function(visualType) {
                            return null != visualType && visualType !== plugins.L.clusteredBarChart.name && visualType !== plugins.L.clusteredColumnChart.name && visualType !== plugins.L.barChart.name && visualType !== plugins.L.columnChart.name;
                        }(pluginConfig.visualType)) {
                            var config = createConfig(this.visualAuthoring, visualQuery, pluginConfig.visualType, pluginConfig.schema, idUsedAsAxis, pluginConfig.addDefaultFormatting);
                            result.unshift({
                                config,
                                scores: {
                                    fieldScore,
                                    semanticTypeScore: stackedSemanticScore
                                }
                            });
                        }
                        return result;
                    }
                }
            }, ColumnRecommendationPlugin;
        }();
        function createConfig(visualAuthoring, query, visualType, schema, idUsedAsAxis, withFormatting) {
            var config = visualAuthoring.create({
                query,
                visualType,
                schema,
                expr: void 0
            });
            return withFormatting && (function(config) {
                config.singleVisual.objects = {}, (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                    objectName: "categoryAxis",
                    propertyName: "showAxisTitle"
                }, void 0, (0, sqExpr.O7)(!0)), (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                    objectName: "valueAxis",
                    propertyName: "showAxisTitle"
                }, void 0, (0, sqExpr.O7)(!0));
            }(config), idUsedAsAxis && function(config) {
                (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                    objectName: "categoryAxis",
                    propertyName: "axisType"
                }, void 0, (0, sqExpr.fL)(axisType.w.categorical));
            }(config)), config;
        }
        function column_recommendation_plugin_getSortDirection(orderBy, field, defaultSort) {
            var _a, queryOrder = _.find(orderBy, function(o) {
                return (0, sqExprEqualityVisitor.fS)(o.expr, field, !0, !0);
            });
            return null !== (_a = null == queryOrder ? void 0 : queryOrder.direction) && void 0 !== _a ? _a : defaultSort;
        }
        var comboChart_capabilities = __webpack_require__(84741), ComboRecommendationPlugin = function() {
            function ComboRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(ComboRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.lineStackedColumnComboChart.name, plugins.L.lineClusteredColumnComboChart.name ];
                },
                enumerable: !1,
                configurable: !0
            }), ComboRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                var _a, _b;
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure && !t.isTooltip;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    }), tooltips = _.filter(updatedExprs, function(t) {
                        return t.isTooltip;
                    });
                    if (_.isEmpty(visibleMeasures) && (updatedExprs = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                        return isNumeric(e);
                    }).groupedExprsWithMetadata, dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                        return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                    })), !_.some(visibleMeasures, function(m) {
                        return m.type && !m.type.numeric && !m.type.integer;
                    })) {
                        var legend, yMeasures, y2Measures, visibleMeasureCount = _.size(visibleMeasures), orderedDimensions = function(dimensions) {
                            return _.orderBy(dimensions, function(d) {
                                return d.type && (d.type.temporal || d.type.dateTime) ? 1 : d.type && (d.type.numeric || d.type.integer) ? 2 : 3;
                            });
                        }(dimensions), idEntities = _.chain(orderedDimensions).filter(function(d) {
                            return d.isIdentity;
                        }).map(function(d) {
                            return d.entity;
                        }).value(), fieldScore = 1, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []);
                        if (_.size(dimensions) > 1 && (legend = _.findLast(orderedDimensions, function(d) {
                            return 1 === _.size(d.exprs) && !d.isIdentity && _.indexOf(idEntities, d.entity) < 0;
                        }))) {
                            _.remove(dimensions, legend), _.remove(orderedDimensions, legend);
                            var nativeReferenceName = query.selectNativeReferenceNameOf(expr = legend.exprs[0]);
                            addField(visualQuery, expr, comboChart_capabilities.rJ.series, legend.showAll, legend.isParameter, nativeReferenceName);
                        }
                        for (var _i = 0, orderedDimensions_1 = orderedDimensions; _i < orderedDimensions_1.length; _i++) for (var category = orderedDimensions_1[_i], _c = 0, _d = category.exprs; _c < _d.length; _c++) {
                            var expr;
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = _d[_c]), addField(visualQuery, expr, comboChart_capabilities.rJ.category, category.showAll, category.isParameter, nativeReferenceName);
                        }
                        ensureActiveProjections(visualQuery, comboChart_capabilities.rJ.category, pluginConfig.addDefaultFormatting, null === (_b = null === (_a = null == orderedDimensions ? void 0 : orderedDimensions[0]) || void 0 === _a ? void 0 : _a.groupMetadata) || void 0 === _b ? void 0 : _b.maxProjectedIndex), 
                        legend ? (yMeasures = [ _.first(visibleMeasures) ], visibleMeasureCount > 1 && (y2Measures = visibleMeasures.splice(1, visibleMeasureCount - 1))) : (yMeasures = visibleMeasureCount <= 1 ? visibleMeasures : visibleMeasures.splice(0, visibleMeasureCount - 1), 
                        y2Measures = visibleMeasureCount <= 1 ? void 0 : [ _.last(visibleMeasures) ]);
                        for (var _e = 0, hiddenMeasures_1 = _.filter(measures, function(t) {
                            return t.isHidden;
                        }); _e < hiddenMeasures_1.length; _e++) yMeasures.push(hiddenMeasures_1[_e]);
                        var hasNonAdditiveAggregates = !1;
                        if (!_.isEmpty(yMeasures)) for (var _loop_1 = function(measure) {
                            debug.fF.assert(function() {
                                return 1 === _.size(measure.exprs);
                            });
                            var expr = measure.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, comboChart_capabilities.rJ.y, measure.showAll, measure.isParameter, nativeReferenceName, measure.isHidden), 
                            hasNonAdditiveAggregates = hasNonAdditiveAggregates || isNonAdditiveMeasure(expr);
                        }, _f = 0, yMeasures_1 = yMeasures; _f < yMeasures_1.length; _f++) _loop_1(yMeasures_1[_f]);
                        if (!_.isEmpty(y2Measures)) for (var _loop_2 = function(measure) {
                            debug.fF.assert(function() {
                                return 1 === _.size(measure.exprs);
                            });
                            var expr = measure.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, comboChart_capabilities.rJ.y2, measure.showAll, measure.isParameter, nativeReferenceName, measure.isHidden);
                        }, _g = 0, y2Measures_1 = y2Measures; _g < y2Measures_1.length; _g++) _loop_2(y2Measures_1[_g]);
                        for (var _loop_3 = function(tooltip) {
                            debug.fF.assert(function() {
                                return 1 === _.size(tooltip.exprs);
                            });
                            var expr = tooltip.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, TooltipRole, tooltip.showAll, tooltip.isParameter, nativeReferenceName, tooltip.isHidden), 
                            hasNonAdditiveAggregates = hasNonAdditiveAggregates || isNonAdditiveMeasure(expr);
                        }, _h = 0, tooltips_1 = tooltips; _h < tooltips_1.length; _h++) _loop_3(tooltips_1[_h]);
                        fieldScore = Math.pow(VisualRecommendationConstants.fieldScoreBase, 1 - _.size(dimensions)) * Math.pow(VisualRecommendationConstants.fieldScoreBase, 1 - _.size(visibleMeasures)), 
                        (_.isEmpty(dimensions) || _.isEmpty(visibleMeasures)) && (fieldScore = VisualRecommendationConstants.incompleteFieldsScore);
                        var clusteredConfig = this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.lineClusteredColumnComboChart.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        });
                        pluginConfig.addDefaultFormatting && combo_recommendation_plugin_showAxisLabels(clusteredConfig);
                        var stackedConfig = this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.lineStackedColumnComboChart.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        });
                        return pluginConfig.addDefaultFormatting && combo_recommendation_plugin_showAxisLabels(stackedConfig), 
                        [ {
                            config: clusteredConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore: 1
                            }
                        }, {
                            config: stackedConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore: hasNonAdditiveAggregates ? VisualRecommendationConstants.incompatibleAggregate : 1
                            }
                        } ];
                    }
                }
            }, ComboRecommendationPlugin;
        }();
        function combo_recommendation_plugin_showAxisLabels(config) {
            config.singleVisual.objects = {}, (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                objectName: "categoryAxis",
                propertyName: "showAxisTitle"
            }, void 0, (0, sqExpr.O7)(!0)), (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                objectName: "valueAxis",
                propertyName: "showAxisTitle"
            }, void 0, (0, sqExpr.O7)(!0)), (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                objectName: "valueAxis",
                propertyName: "secShowAxisTitle"
            }, void 0, (0, sqExpr.O7)(!0));
        }
        var funnelChart_capabilities = __webpack_require__(99653), FunnelRecommendationPlugin = function() {
            function FunnelRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(FunnelRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.funnel.name ];
                },
                enumerable: !1,
                configurable: !0
            }), FunnelRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                var _a, _b;
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure && !t.isTooltip;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    }), tooltips = _.filter(updatedExprs, function(t) {
                        return t.isTooltip;
                    });
                    if (_.isEmpty(visibleMeasures) && (updatedExprs = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                        return isNumeric(e);
                    }).groupedExprsWithMetadata, dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                        return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                    })), !_.some(visibleMeasures, function(m) {
                        return m.type && !m.type.numeric && !m.type.integer;
                    })) {
                        var visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []);
                        if (!_.isEmpty(dimensions)) {
                            for (var _i = 0, dimensions_1 = dimensions; _i < dimensions_1.length; _i++) for (var dimension = dimensions_1[_i], _c = 0, _d = dimension.exprs; _c < _d.length; _c++) {
                                var nativeReferenceName = query.selectNativeReferenceNameOf(expr = _d[_c]);
                                addField(visualQuery, expr, funnelChart_capabilities.IW.category, dimension.showAll, dimension.isParameter, nativeReferenceName);
                            }
                            ensureActiveProjections(visualQuery, funnelChart_capabilities.IW.category, pluginConfig.addDefaultFormatting, null === (_b = null === (_a = null == dimensions ? void 0 : dimensions[0]) || void 0 === _a ? void 0 : _a.groupMetadata) || void 0 === _b ? void 0 : _b.maxProjectedIndex);
                        }
                        if (!_.isEmpty(visibleMeasures)) {
                            var firstMeasure = _.first(visibleMeasures);
                            visualQuery.orderBy([ {
                                expr: expr = firstMeasure.exprs[0],
                                direction: 2
                            } ]);
                            for (var _e = 0, visibleMeasures_1 = visibleMeasures; _e < visibleMeasures_1.length; _e++) {
                                var expr_1 = (measure = visibleMeasures_1[_e]).exprs[0];
                                nativeReferenceName = query.selectNativeReferenceNameOf(expr_1), addField(visualQuery, expr_1, funnelChart_capabilities.IW.y, measure.showAll, measure.isParameter, nativeReferenceName);
                            }
                        }
                        for (var _f = 0, hiddenMeasures_1 = _.filter(measures, function(t) {
                            return t.isHidden;
                        }); _f < hiddenMeasures_1.length; _f++) {
                            var measure;
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = (measure = hiddenMeasures_1[_f]).exprs[0]), 
                            addField(visualQuery, expr, funnelChart_capabilities.IW.y, measure.showAll, measure.isParameter, nativeReferenceName, !0);
                        }
                        for (var _g = 0, tooltips_1 = tooltips; _g < tooltips_1.length; _g++) {
                            var expr, tooltip = tooltips_1[_g];
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = tooltip.exprs[0]), 
                            addField(visualQuery, expr, TooltipRole, tooltip.showAll, tooltip.isParameter, nativeReferenceName, tooltip.isHidden);
                        }
                        return [ {
                            config: this.visualAuthoring.create({
                                query: visualQuery,
                                visualType: pluginConfig.visualType,
                                schema: pluginConfig.schema,
                                expr: void 0
                            }),
                            scores: {
                                fieldScore: 1,
                                semanticTypeScore: 1
                            }
                        } ];
                    }
                }
            }, FunnelRecommendationPlugin;
        }(), gauge_capabilities = __webpack_require__(5719), GaugeRecommendationPlugin = function() {
            function GaugeRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(GaugeRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.gauge.name ];
                },
                enumerable: !1,
                configurable: !0
            }), GaugeRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure && !t.isTooltip;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    }), tooltips = _.filter(updatedExprs, function(t) {
                        return t.isTooltip;
                    });
                    if (_.isEmpty(visibleMeasures) && (updatedExprs = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                        return isNumeric(e);
                    }).groupedExprsWithMetadata, dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                        return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                    })), !_.isEmpty(visibleMeasures) && _.isEmpty(dimensions) && !_.some(visibleMeasures, function(m) {
                        return m.type && !m.type.numeric && !m.type.integer;
                    })) {
                        for (var visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), i = 0; i < visibleMeasures.length; i++) {
                            var role;
                            role = 0 === i ? gauge_capabilities.Vd.y : 1 === i ? gauge_capabilities.Vd.targetValue : 2 === i ? gauge_capabilities.Vd.minValue : 3 === i ? gauge_capabilities.Vd.maxValue : gauge_capabilities.Vd.tooltips;
                            var measureExpr = visibleMeasures[i].exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(measureExpr);
                            addField(visualQuery, measureExpr, role, measures[i].showAll, measures[i].isParameter, nativeReferenceName);
                        }
                        for (var _i = 0, hiddenMeasures_1 = _.filter(measures, function(t) {
                            return t.isHidden;
                        }); _i < hiddenMeasures_1.length; _i++) {
                            var measure = hiddenMeasures_1[_i];
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = measure.exprs[0]), 
                            addField(visualQuery, expr, gauge_capabilities.Vd.y, measure.showAll, measure.isParameter, nativeReferenceName, !0);
                        }
                        for (var _a = 0, tooltips_1 = tooltips; _a < tooltips_1.length; _a++) {
                            var expr, tooltip = tooltips_1[_a];
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = tooltip.exprs[0]), 
                            addField(visualQuery, expr, TooltipRole, tooltip.showAll, tooltip.isParameter, nativeReferenceName, tooltip.isHidden);
                        }
                        return [ {
                            config: this.visualAuthoring.create({
                                query: visualQuery,
                                visualType: pluginConfig.visualType,
                                schema: pluginConfig.schema,
                                expr: void 0
                            }),
                            scores: {
                                fieldScore: 1,
                                semanticTypeScore: 1
                            }
                        } ];
                    }
                }
            }, GaugeRecommendationPlugin;
        }(), kpiStatusWithHistory_capabilities = __webpack_require__(47895), fieldExprPatternToSQExprConverter = __webpack_require__(80366), KpiRecommendationPlugin = function() {
            function KpiRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(KpiRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.kpi.name ];
                },
                enumerable: !1,
                configurable: !0
            }), KpiRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    });
                    _.isEmpty(visibleMeasures) && (updatedExprs = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                        return isNumeric(e);
                    }).groupedExprsWithMetadata, dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                        return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                    }));
                    var measureCount = _.size(visibleMeasures);
                    if (!(measureCount <= 0 || measureCount > 2 || _.some(visibleMeasures, function(m) {
                        return m.type && !m.type.numeric && !m.type.integer;
                    }))) {
                        var valueExpr, goalExpr, trendExpr;
                        if (1 === _.size(dimensions) && 1 === _.size(dimensions[0].exprs)) {
                            var type = dimensions[0].type;
                            (type.temporal || type.dateTime) && (trendExpr = dimensions[0].exprs[0]);
                        }
                        measureCount >= 1 && (valueExpr = visibleMeasures[0].exprs[0]), 2 === measureCount && (goalExpr = visibleMeasures[1].exprs[0]);
                        var kpiMeasureExpr = _.chain(visibleMeasures).map(function(m) {
                            return m.exprs;
                        }).flatten().find(function(m) {
                            var conceptualProperty = m.getConceptualProperty(pluginConfig.schema);
                            return conceptualProperty.measure && conceptualProperty.measure.kpi;
                        }).value();
                        if (kpiMeasureExpr) {
                            var kpi = kpiMeasureExpr.getConceptualProperty(pluginConfig.schema).measure.kpi;
                            valueExpr = kpiMeasureExpr, !trendExpr && kpi.trend && (trendExpr = convertToSQExpr(kpi.trend, kpiMeasureExpr)), 
                            !goalExpr && kpi.goal && (goalExpr = convertToSQExpr(kpi.goal, kpiMeasureExpr));
                        }
                        if (valueExpr && trendExpr) {
                            var visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []);
                            visualQuery.add(valueExpr, kpiStatusWithHistory_capabilities.Pn.indicator, {
                                nativeReferenceName: query.selectNativeReferenceNameOf(valueExpr)
                            }), visualQuery.add(trendExpr, kpiStatusWithHistory_capabilities.Pn.trendLine, {
                                nativeReferenceName: query.selectNativeReferenceNameOf(trendExpr)
                            }), goalExpr && visualQuery.add(goalExpr, kpiStatusWithHistory_capabilities.Pn.goal, {
                                nativeReferenceName: query.selectNativeReferenceNameOf(goalExpr)
                            });
                            for (var _i = 0, hiddenMeasures_1 = _.filter(measures, function(t) {
                                return t.isHidden;
                            }); _i < hiddenMeasures_1.length; _i++) {
                                var measure = hiddenMeasures_1[_i];
                                visualQuery.add(measure.exprs[0], kpiStatusWithHistory_capabilities.Pn.indicator, {
                                    nativeReferenceName: query.selectNativeReferenceNameOf(measure.exprs[0]),
                                    isHidden: !0
                                });
                            }
                            return [ {
                                config: this.visualAuthoring.create({
                                    query: visualQuery,
                                    visualType: pluginConfig.visualType,
                                    schema: pluginConfig.schema,
                                    expr: void 0
                                }),
                                scores: {
                                    fieldScore: 1,
                                    semanticTypeScore: 1
                                }
                            } ];
                        }
                    }
                }
            }, KpiRecommendationPlugin;
        }();
        function convertToSQExpr(conceptualProperty, kpiMeasure) {
            var entity = kpiMeasure.getTargetEntity();
            return (0, fieldExprPatternToSQExprConverter.og)({
                measure: {
                    schema: entity.schema,
                    entity: entity.entity,
                    name: conceptualProperty.name
                }
            });
        }
        var cartesian_capabilities = __webpack_require__(22733), LineRecommendationPlugin = function() {
            function LineRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(LineRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.lineChart.name, plugins.L.areaChart.name, plugins.L.stackedAreaChart.name ];
                },
                enumerable: !1,
                configurable: !0
            }), LineRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                var _a, _b, _c;
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedQuery = query, updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var fieldScore = 1, semanticTypeScore = FieldTypePreferenceScores.strong, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure && !t.isTooltip;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    }), tooltips = _.filter(updatedExprs, function(t) {
                        return t.isTooltip;
                    });
                    if (_.isEmpty(visibleMeasures)) {
                        var result = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                            return isNumeric(e);
                        });
                        updatedExprs = result.groupedExprsWithMetadata, updatedQuery = result.query, dimensions = _.filter(updatedExprs, function(t) {
                            return !t.isMeasure;
                        }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                            return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                        });
                    }
                    var singleValued = _.remove(dimensions, function(d) {
                        return d.isSingleValue;
                    });
                    if (_.isEmpty(dimensions) && (dimensions = singleValued), !_.some(visibleMeasures, function(m) {
                        return m.type && !m.type.numeric && !m.type.integer;
                    })) {
                        var orderedDimensions = function(dimensions) {
                            return _.orderBy(dimensions, function(d) {
                                return d.type && (d.type.temporal || d.type.dateTime) ? 1 : d.type && (d.type.numeric || d.type.integer) ? 2 : 3;
                            });
                        }(dimensions), firstDimension = orderedDimensions[0], timeDimension = _.find(orderedDimensions, function(d) {
                            return d.type && (d.type.temporal || d.type.dateTime);
                        });
                        if (timeDimension) {
                            for (var _i = 0, _d = timeDimension.exprs; _i < _d.length; _i++) {
                                var nativeReferenceName = query.selectNativeReferenceNameOf(expr = _d[_i]);
                                addField(visualQuery, expr, cartesian_capabilities.x.category, timeDimension.showAll, timeDimension.isParameter, nativeReferenceName);
                            }
                            _.remove(orderedDimensions, timeDimension);
                        }
                        var legend, legendIsText, idEntities = _.chain(orderedDimensions).filter(function(d) {
                            return d.isIdentity;
                        }).map(function(d) {
                            return d.entity;
                        }).value();
                        _.size(visibleMeasures) <= 1 && (timeDimension ? _.size(orderedDimensions) > 0 : _.size(orderedDimensions) > 1) && (legend = _.findLast(orderedDimensions, function(d) {
                            return 1 === _.size(d.exprs) && !d.isIdentity && _.indexOf(idEntities, d.entity) < 0;
                        })) && (legendIsText = legend.type && legend.type.text && !legend.type.misc, _.remove(dimensions, legend), 
                        _.remove(orderedDimensions, legend), nativeReferenceName = query.selectNativeReferenceNameOf(expr = legend.exprs[0]), 
                        addField(visualQuery, expr, cartesian_capabilities.x.series, legend.showAll, legend.isParameter, nativeReferenceName));
                        for (var categoryHasSortBy = !0, hasIdOnXAxis = !1, _e = 0, orderedDimensions_1 = orderedDimensions; _e < orderedDimensions_1.length; _e++) {
                            var dim = orderedDimensions_1[_e];
                            !dim.type || dim.type.numeric || dim.type.integer || (semanticTypeScore = FieldTypePreferenceScores.low), 
                            dim.isIdentity && dim.type && !dim.type.temporal && !dim.type.dateTime && (hasIdOnXAxis = !0);
                            for (var _f = 0, _g = dim.exprs; _f < _g.length; _f++) nativeReferenceName = query.selectNativeReferenceNameOf(expr = _g[_f]), 
                            addField(visualQuery, expr, cartesian_capabilities.x.category, dim.showAll, dim.isParameter, nativeReferenceName), 
                            categoryHasSortBy = categoryHasSortBy && !_.isEmpty(expr.getOrderByColumns(pluginConfig.schema));
                        }
                        ensureActiveProjections(visualQuery, cartesian_capabilities.x.category, pluginConfig.addDefaultFormatting, null === (_c = null === (_b = null === (_a = (0, 
                        tslib_es6.__spreadArray)([ timeDimension ], orderedDimensions, !0)) || void 0 === _a ? void 0 : _a[0]) || void 0 === _b ? void 0 : _b.groupMetadata) || void 0 === _c ? void 0 : _c.maxProjectedIndex), 
                        legend && !legendIsText && (semanticTypeScore *= VisualRecommendationConstants.dispreferedLegendScoreReducer);
                        for (var hasNonAdditiveAggregates = !1, _loop_1 = function(measure) {
                            debug.fF.assert(function() {
                                return 1 === _.size(measure.exprs);
                            });
                            var expr = measure.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, cartesian_capabilities.x.y, measure.showAll, measure.isParameter, nativeReferenceName), 
                            hasNonAdditiveAggregates = hasNonAdditiveAggregates || isNonAdditiveMeasure(expr);
                        }, _h = 0, visibleMeasures_1 = visibleMeasures; _h < visibleMeasures_1.length; _h++) _loop_1(measure = visibleMeasures_1[_h]);
                        for (var _j = 0, hiddenMeasures_1 = _.filter(measures, function(t) {
                            return t.isHidden;
                        }); _j < hiddenMeasures_1.length; _j++) {
                            var measure, expr;
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = (measure = hiddenMeasures_1[_j]).exprs[0]), 
                            addField(visualQuery, expr, cartesian_capabilities.x.y, measure.showAll, measure.isParameter, nativeReferenceName, !0);
                        }
                        for (var _loop_2 = function(tooltip) {
                            debug.fF.assert(function() {
                                return 1 === _.size(tooltip.exprs);
                            });
                            var expr = tooltip.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, TooltipRole, tooltip.showAll, tooltip.isParameter, nativeReferenceName, tooltip.isHidden), 
                            hasNonAdditiveAggregates = hasNonAdditiveAggregates || isNonAdditiveMeasure(expr);
                        }, _k = 0, tooltips_1 = tooltips; _k < tooltips_1.length; _k++) _loop_2(tooltips_1[_k]);
                        var orderBy = updatedQuery.orderBy();
                        if (_.isEmpty(orderBy)) if (firstDimension && (categoryHasSortBy || firstDimension.type && (firstDimension.type.numeric || firstDimension.type.integer || firstDimension.type.dateTime || firstDimension.type.temporal))) orderBy = [ {
                            expr: firstDimension.exprs[0],
                            direction: 1
                        } ]; else {
                            var firstMeasure = _.first(visibleMeasures);
                            orderBy = firstMeasure ? [ {
                                expr: firstMeasure.exprs[0],
                                direction: 2
                            } ] : [ {
                                expr: firstDimension.exprs[0],
                                direction: 1
                            } ];
                        }
                        visualQuery.orderBy(orderBy), fieldScore = Math.pow(VisualRecommendationConstants.fieldScoreBase, 1 - _.size(dimensions)) * Math.pow(VisualRecommendationConstants.fieldScoreBase, 1 - _.size(visibleMeasures)), 
                        hasIdOnXAxis && (fieldScore *= VisualRecommendationConstants.idOnDispreferedAxis), 
                        (_.isEmpty(dimensions) || _.isEmpty(visibleMeasures)) && (fieldScore = VisualRecommendationConstants.incompleteFieldsScore);
                        var lineConfig = this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.lineChart.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        });
                        pluginConfig.addDefaultFormatting && line_recommendation_plugin_showAxisLabels(lineConfig);
                        var areaConfig = this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.areaChart.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        });
                        pluginConfig.addDefaultFormatting && line_recommendation_plugin_showAxisLabels(areaConfig);
                        var stackedAreaConfig = this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.stackedAreaChart.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        });
                        return pluginConfig.addDefaultFormatting && line_recommendation_plugin_showAxisLabels(stackedAreaConfig), 
                        [ {
                            config: lineConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore
                            }
                        }, {
                            config: areaConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore
                            }
                        }, {
                            config: stackedAreaConfig,
                            scores: {
                                fieldScore,
                                semanticTypeScore: hasNonAdditiveAggregates ? VisualRecommendationConstants.incompatibleAggregate : semanticTypeScore
                            }
                        } ];
                    }
                }
            }, LineRecommendationPlugin;
        }();
        function line_recommendation_plugin_showAxisLabels(config) {
            config.singleVisual.objects = {}, (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                objectName: "categoryAxis",
                propertyName: "showAxisTitle"
            }, void 0, (0, sqExpr.O7)(!0)), (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                objectName: "valueAxis",
                propertyName: "showAxisTitle"
            }, void 0, (0, sqExpr.O7)(!0));
        }
        var map_capabilities = __webpack_require__(98755), gradientUtils = __webpack_require__(52083), dataViewWildcard = __webpack_require__(96915), MapRecommendationPlugin = function() {
            function MapRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(MapRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.map.name, plugins.L.filledMap.name ];
                },
                enumerable: !1,
                configurable: !0
            }), MapRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                var _a, _b;
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var semanticTypeScore = 1, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    });
                    if (!_.isEmpty(dimensions)) {
                        var measures = _.filter(updatedExprs, function(t) {
                            return t.isMeasure && !t.isTooltip;
                        }), visibleMeasures = _.filter(measures, function(t) {
                            return !t.isHidden;
                        }), tooltips = _.filter(updatedExprs, function(t) {
                            return t.isTooltip;
                        });
                        _.isEmpty(visibleMeasures) && (updatedExprs = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                            return isNumeric(e);
                        }).groupedExprsWithMetadata, dimensions = _.filter(updatedExprs, function(expr) {
                            return !expr.isMeasure;
                        }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                            return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                        }));
                        var singleValued = _.remove(dimensions, function(d) {
                            return d.isSingleValue;
                        });
                        _.isEmpty(dimensions) && (dimensions = singleValued);
                        var locationFields = _.filter(dimensions, function(d) {
                            return d.type && d.type.geography && !d.type.geography.latitude && !d.type.geography.longitude;
                        }), latitiudeField = _.find(dimensions, function(d) {
                            return d.type && d.type.geography && d.type.geography.latitude;
                        }), longitudeField = _.find(dimensions, function(d) {
                            return d.type && d.type.geography && d.type.geography.longitude;
                        }), otherDimensions = _.filter(dimensions, function(d) {
                            return d.type && !d.type.geography && 1 === _.size(d.exprs);
                        });
                        if (!(_.size(otherDimensions) > 1)) {
                            if (_.isEmpty(locationFields) && !latitiudeField && !longitudeField) {
                                if (!pluginConfig.visualType) return;
                                locationFields = otherDimensions, otherDimensions = void 0, semanticTypeScore = VisualRecommendationConstants.unsureTypeFieldScore;
                            }
                            var latitiudeExpr, longitudeExpr;
                            if (latitiudeField) {
                                var expr = latitiudeField.exprs[0];
                                latitiudeExpr = _.isEmpty(locationFields) ? expr : (0, sqExpr.m_)(expr, 1);
                            }
                            if (longitudeField && (expr = longitudeField.exprs[0], longitudeExpr = _.isEmpty(locationFields) ? expr : (0, 
                            sqExpr.m_)(expr, 1)), !_.isEmpty(locationFields)) {
                                for (var _i = 0, locationFields_1 = locationFields; _i < locationFields_1.length; _i++) for (var locationField = locationFields_1[_i], _c = 0, _d = locationField.exprs; _c < _d.length; _c++) {
                                    var locationExpr = _d[_c], nativeReferenceName = query.selectNativeReferenceNameOf(locationExpr);
                                    addField(visualQuery, locationExpr, map_capabilities.aX.category, locationField.showAll, locationField.isParameter, nativeReferenceName);
                                }
                                ensureActiveProjections(visualQuery, map_capabilities.aX.category, pluginConfig.addDefaultFormatting, null === (_b = null === (_a = null == locationFields ? void 0 : locationFields[0]) || void 0 === _a ? void 0 : _a.groupMetadata) || void 0 === _b ? void 0 : _b.maxProjectedIndex);
                            }
                            latitiudeExpr && addField(visualQuery, latitiudeExpr, map_capabilities.aX.y, latitiudeField.showAll, latitiudeField.isParameter, query.selectNativeReferenceNameOf(latitiudeExpr), latitiudeField.isHidden), 
                            longitudeExpr && addField(visualQuery, longitudeExpr, map_capabilities.aX.x, longitudeField.showAll, longitudeField.isParameter, query.selectNativeReferenceNameOf(longitudeExpr), longitudeField.isHidden);
                            var hasSeriesDimension = !1;
                            if (!_.isEmpty(otherDimensions)) {
                                var dimExpr = otherDimensions[0].exprs[0];
                                nativeReferenceName = query.selectNativeReferenceNameOf(dimExpr), addField(visualQuery, dimExpr, map_capabilities.aX.series, otherDimensions[0].showAll, otherDimensions[0].isParameter, nativeReferenceName), 
                                hasSeriesDimension = !0, (expr = otherDimensions[0]).type && expr.type.text && !expr.type.geography && !expr.type.misc || (semanticTypeScore *= VisualRecommendationConstants.dispreferedLegendScoreReducer), 
                                expr.isIdentity && (semanticTypeScore *= VisualRecommendationConstants.idOnDispreferedAxis);
                            }
                            if (!_.some(visibleMeasures, function(m) {
                                return m.type && !m.type.numeric && !m.type.integer;
                            })) {
                                var mapConfig = this.visualAuthoring.create({
                                    query: visualQuery.clone(),
                                    visualType: plugins.L.map.name,
                                    schema: pluginConfig.schema,
                                    expr: void 0
                                }), mapFieldScore = addMeasures(mapConfig, query, (0, tslib_es6.__spreadArray)([], measures, !0), tooltips, hasSeriesDimension, pluginConfig.allowTooltipMeasures, pluginConfig.addDefaultFormatting), filledMapConfig = this.visualAuthoring.create({
                                    query: visualQuery.clone(),
                                    visualType: plugins.L.filledMap.name,
                                    schema: pluginConfig.schema,
                                    expr: void 0
                                }), filledMapFieldScore = addMeasures(filledMapConfig, query, (0, tslib_es6.__spreadArray)([], measures, !0), tooltips, hasSeriesDimension, pluginConfig.allowTooltipMeasures, pluginConfig.addDefaultFormatting), result = [];
                                return mapFieldScore && result.push({
                                    config: mapConfig,
                                    scores: {
                                        fieldScore: mapFieldScore,
                                        semanticTypeScore
                                    }
                                }), filledMapFieldScore && result.push({
                                    config: filledMapConfig,
                                    scores: {
                                        fieldScore: filledMapFieldScore,
                                        semanticTypeScore
                                    }
                                }), _.isEmpty(result) ? void 0 : result;
                            }
                        }
                    }
                }
            }, MapRecommendationPlugin;
        }();
        function addMeasures(config, query, measures, tooltips, hasSeriesDimension, allowTooltipMeasures, addDefaultFormatting) {
            var visibleMeasures = _.filter(measures, function(t) {
                return !t.isHidden;
            }), hiddenMeasures = _.filter(measures, function(t) {
                return t.isHidden;
            }), visibleMeasureCount = _.size(visibleMeasures);
            if (0 === visibleMeasureCount) return 1;
            var visualQuery = config.singleVisual.query, fieldScore = 1;
            if (config.singleVisual.visualType === plugins.L.map.name) {
                debug.fF.assert(function() {
                    return 1 === _.size(visibleMeasures[0].exprs);
                }, "we can only have 1 measure group");
                var nativeReferenceName = query.selectNativeReferenceNameOf(expr = visibleMeasures[0].exprs[0]);
                addField(visualQuery, expr, map_capabilities.aX.size, visibleMeasures[0].showAll, visibleMeasures[0].isParameter, nativeReferenceName, visibleMeasures[0].isHidden), 
                visibleMeasures.splice(0, 1), visibleMeasureCount -= 1;
            }
            if (0 !== visibleMeasureCount && !hasSeriesDimension && addDefaultFormatting) {
                debug.fF.assert(function() {
                    return 1 === _.size(measures[0].exprs);
                }, "we can only have 1 measure group");
                var conditionalFormattingMeasure = visibleMeasures[0].exprs[0];
                (function(config, measure) {
                    config.singleVisual.objects = {}, (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                        objectName: "dataPoint",
                        propertyName: "fill"
                    }, {
                        data: [ (0, dataViewWildcard.Ue)(1) ]
                    }, {
                        solid: {
                            color: (0, sqExpr.x5)(measure, (0, gradientUtils.jT)())
                        }
                    });
                })(config, conditionalFormattingMeasure), allowTooltipMeasures && (nativeReferenceName = query.selectNativeReferenceNameOf(conditionalFormattingMeasure), 
                addField(visualQuery, conditionalFormattingMeasure, TooltipRole, !1, !1, nativeReferenceName, measures[0].isHidden)), 
                visibleMeasures.splice(0, 1), visibleMeasureCount -= 1;
            }
            if (0 !== visibleMeasureCount) {
                if (!allowTooltipMeasures) return;
                fieldScore = Math.pow(VisualRecommendationConstants.fieldScoreBase, -visibleMeasureCount);
                for (var _loop_1 = function(measure) {
                    debug.fF.assert(function() {
                        return 1 === _.size(measure.exprs);
                    }, "we can only have 1 measure group");
                    var expr = measure.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                    addField(visualQuery, expr, TooltipRole, measure.showAll, measure.isParameter, nativeReferenceName, measure.isHidden);
                }, _i = 0, visibleMeasures_1 = visibleMeasures; _i < visibleMeasures_1.length; _i++) _loop_1(measure = visibleMeasures_1[_i]);
            }
            for (var _a = 0, hiddenMeasures_1 = hiddenMeasures; _a < hiddenMeasures_1.length; _a++) {
                var measure, expr;
                nativeReferenceName = query.selectNativeReferenceNameOf(expr = (measure = hiddenMeasures_1[_a]).exprs[0]), 
                addField(visualQuery, expr, TooltipRole, measure.showAll, measure.isParameter, nativeReferenceName, measure.isHidden);
            }
            for (var _loop_2 = function(tooltip) {
                debug.fF.assert(function() {
                    return 1 === _.size(tooltip.exprs);
                });
                var expr = tooltip.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                addField(visualQuery, expr, TooltipRole, tooltip.showAll, tooltip.isParameter, nativeReferenceName, tooltip.isHidden);
            }, _b = 0, tooltips_1 = tooltips; _b < tooltips_1.length; _b++) _loop_2(tooltips_1[_b]);
            return fieldScore;
        }
        var matrix_capabilities = __webpack_require__(85196), MatrixRecommendationPlugin = function() {
            function MatrixRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(MatrixRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.pivotTable.name, plugins.L.tableEx.name ];
                },
                enumerable: !1,
                configurable: !0
            }), MatrixRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = function(groupedExprs, schema) {
                    var _a, _b, _c;
                    debug.fF.assertNonEmpty(groupedExprs, "groupedExprs");
                    for (var updated = [], _i = 0, groupedExprs_2 = groupedExprs; _i < groupedExprs_2.length; _i++) {
                        var g = groupedExprs_2[_i];
                        if (1 === _.size(g.exprs) && (0, sqExprStaticMembers.Lk)(g.exprs[0])) {
                            if (!g.defaultFields) return;
                            for (var _d = 0, _e = g.defaultFields; _d < _e.length; _d++) {
                                var field = _e[_d];
                                if (!isDuplicateField(field, groupedExprs)) {
                                    var metadata = field.getMetadata(schema);
                                    updated.push({
                                        exprs: [ field ],
                                        type: metadata && metadata.type,
                                        isMeasure: (0, sqExprUtils_isMeasure.k)(field),
                                        entity: null === (_a = field.getTargetEntity()) || void 0 === _a ? void 0 : _a.entity,
                                        canAggregate: !1,
                                        isIdentity: null === (_c = null === (_b = field.getConceptualProperty(schema)) || void 0 === _b ? void 0 : _b.column) || void 0 === _c ? void 0 : _c.idOnEntityKey,
                                        isParameter: g.isParameter,
                                        isTooltip: g.isTooltip,
                                        showAll: g.showAll
                                    });
                                }
                            }
                        } else updated.push(g);
                    }
                    return updated;
                }(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    }), idEntities = _.chain(dimensions).filter(function(d) {
                        return d.isIdentity;
                    }).map(function(d) {
                        return d.entity;
                    }).value(), column = 2 === _.size(dimensions) && 1 === _.size(visibleMeasures) ? _.findLast(dimensions, function(d) {
                        return 1 === _.size(d.exprs) && !d.isIdentity && _.indexOf(idEntities, d.entity) < 0;
                    }) : void 0, hasAnyMiscType = _.some(dimensions, function(d) {
                        return d.type && d.type.misc;
                    }), useMatrixOnly = function(visibleMeasures) {
                        var expressions = _.chain(visibleMeasures).map(function(m) {
                            return m.exprs;
                        }).flatten().value();
                        if (_.some(expressions, function(e) {
                            return (0, sqExprStaticMembers.g5)(e) && !_.isEmpty(e.scope);
                        })) return !0;
                    }(visibleMeasures), useTableOnly = !useMatrixOnly && function(dimensions, visibleMeasures, idEntities, query, column) {
                        for (var isTableOnlyGroup = function(g) {
                            return g.isParameter || _.some(g.exprs, function(e) {
                                return (0, sqExprStaticMembers.tO)(e);
                            });
                        }, foundNonIdentityDimensions = !1, _i = 0, dimensions_1 = dimensions; _i < dimensions_1.length; _i++) {
                            var dimension = dimensions_1[_i];
                            if (_.indexOf(idEntities, dimension.entity) < 0 && (foundNonIdentityDimensions = !0), 
                            isTableOnlyGroup(dimension)) return !0;
                        }
                        if (!foundNonIdentityDimensions) return !0;
                        if (_.some(visibleMeasures, function(m) {
                            return isTableOnlyGroup(m);
                        })) return !0;
                        var orderBy = query.orderBy();
                        return !!column && _.some(orderBy, function(o) {
                            return (0, sqExprUtils_isMeasure.k)(o.expr);
                        });
                    }(dimensions, visibleMeasures, idEntities, query, column), tableConfig = useMatrixOnly ? void 0 : function(originalQuery, visualAuthoring, schema, dimensions, measures, hasAnyMiscType, withFormatting) {
                        for (var objects, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), visibleMeasures = _.filter(measures, function(t) {
                            return !t.isHidden;
                        }), _i = 0, dimensions_2 = dimensions; _i < dimensions_2.length; _i++) for (var dim = dimensions_2[_i], _a = 0, _b = dim.exprs; _a < _b.length; _a++) {
                            var nativeReferenceName = originalQuery.selectNativeReferenceNameOf(expr = _b[_a]);
                            addField(visualQuery, expr, matrix_capabilities.r.values, dim.showAll, dim.isParameter, nativeReferenceName);
                        }
                        for (var _c = 0, measures_1 = measures; _c < measures_1.length; _c++) for (var measure = measures_1[_c], _d = 0, _e = measure.exprs; _d < _e.length; _d++) {
                            var expr;
                            nativeReferenceName = originalQuery.selectNativeReferenceNameOf(expr = _e[_d]), 
                            addField(visualQuery, expr, matrix_capabilities.r.values, measure.showAll, measure.isParameter, nativeReferenceName, measure.isHidden);
                        }
                        withFormatting && _.size(originalQuery.select()) > 1 && _.some(dimensions, function(d) {
                            return d.type && d.type.misc && d.type.misc.webUrl;
                        }) && (0, dataViewObjectDefinition1.sO)(objects = {}, {
                            objectName: "values",
                            propertyName: "urlIcon"
                        }, void 0, (0, sqExpr.O7)(!0));
                        var orderBy = originalQuery.orderBy();
                        if (_.isEmpty(orderBy)) {
                            var firstMeasure = _.first(visibleMeasures);
                            if (firstMeasure) orderBy = [ {
                                expr: firstMeasure.exprs[0],
                                direction: 2
                            } ]; else {
                                var firstDimension = _.find(dimensions);
                                firstDimension ? orderBy = [ {
                                    expr: firstDimension.exprs[0],
                                    direction: 1
                                } ] : debug.fF.assertFail("No expr for order by. This should not happen.");
                            }
                        }
                        visualQuery.orderBy(orderBy);
                        var config = visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.tableEx.name,
                            schema,
                            expr: void 0
                        });
                        return objects && (config.singleVisual.objects = objects), {
                            config,
                            fieldScore: hasAnyMiscType ? 1 : (1 + _.size(dimensions)) / (2 + _.size(dimensions)),
                            semanticScore: FieldTypePreferenceScores.strong
                        };
                    }(query, this.visualAuthoring, pluginConfig.schema, dimensions, measures, hasAnyMiscType, pluginConfig.addDefaultFormatting), matrixConfig = useTableOnly ? void 0 : function(originalQuery, visualAuthoring, schema, dimensions, measures, idEntities, withFormatting) {
                        for (var objects, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), visibleMeasures = _.filter(measures, function(t) {
                            return !t.isHidden;
                        }), hiddenMeasures = _.filter(measures, function(t) {
                            return t.isHidden;
                        }), column = 2 === _.size(dimensions) && 1 === _.size(visibleMeasures) ? _.findLast(dimensions, function(d) {
                            return 1 === _.size(d.exprs) && !d.isIdentity && _.indexOf(idEntities, d.entity) < 0;
                        }) : void 0, _i = 0, dimensions_3 = dimensions; _i < dimensions_3.length; _i++) for (var dim = dimensions_3[_i], role = dim === column ? matrix_capabilities.r.columns : matrix_capabilities.r.rows, _a = 0, _b = dim.exprs; _a < _b.length; _a++) {
                            var nativeReferenceName = originalQuery.selectNativeReferenceNameOf(expr = _b[_a]);
                            addField(visualQuery, expr, role, dim.showAll, dim.isParameter, nativeReferenceName);
                        }
                        var columnCount = column ? 1 : 0;
                        if (_.size(_.flatten(_.map(dimensions, function(d) {
                            return d.exprs;
                        }))) - columnCount > 1) {
                            var queryRef = visualQuery.getQueryRefByProjectionIndex(matrix_capabilities.r.rows, 0);
                            visualQuery.projections[matrix_capabilities.r.rows].addActiveQueryReference(queryRef), 
                            (0, dataViewObjectDefinition1.sO)(objects = {}, {
                                objectName: "rowHeaders",
                                propertyName: "showExpandCollapseButtons"
                            }, void 0, (0, sqExpr.O7)(!0));
                        }
                        for (var i = 0; i < visibleMeasures.length; i++) for (var _c = 0, _d = visibleMeasures[i].exprs; _c < _d.length; _c++) {
                            nativeReferenceName = originalQuery.selectNativeReferenceNameOf(expr = _d[_c]), 
                            addField(visualQuery, expr, matrix_capabilities.r.values, visibleMeasures[i].showAll, visibleMeasures[i].isParameter, nativeReferenceName);
                            var type = visibleMeasures[i].type;
                            (!type || type.numeric || type.integer) && withFormatting && (queryRef = visualQuery.getQueryRef(matrix_capabilities.r.values, {
                                fieldIndex: i
                            }), objects || (objects = {}), (0, dataViewObjectDefinition1.sO)(objects, {
                                objectName: "columnFormatting",
                                propertyName: "dataBars"
                            }, {
                                metadata: queryRef
                            }, {
                                axisColor: {
                                    solid: {
                                        color: (0, sqExpr.fL)("foreground")
                                    }
                                },
                                hideText: (0, sqExpr.O7)(!1),
                                negativeColor: {
                                    solid: {
                                        color: (0, sqExpr.fL)("minColor")
                                    }
                                },
                                positiveColor: {
                                    solid: {
                                        color: (0, sqExpr.fL)("maxColor")
                                    }
                                },
                                reverseDirection: (0, sqExpr.O7)(!1),
                                maxValue: void 0,
                                minValue: void 0
                            }));
                        }
                        for (var _e = 0, hiddenMeasures_1 = hiddenMeasures; _e < hiddenMeasures_1.length; _e++) for (var measure = hiddenMeasures_1[_e], _f = 0, _g = measure.exprs; _f < _g.length; _f++) {
                            var expr;
                            nativeReferenceName = originalQuery.selectNativeReferenceNameOf(expr = _g[_f]), 
                            addField(visualQuery, expr, matrix_capabilities.r.values, measure.showAll, measure.isParameter, nativeReferenceName, !0);
                        }
                        var orderBy = originalQuery.orderBy();
                        if (_.isEmpty(orderBy)) {
                            var firstMeasure = _.first(visibleMeasures);
                            if (!column && firstMeasure) orderBy = [ {
                                expr: firstMeasure.exprs[0],
                                direction: 2
                            } ]; else {
                                var firstDimension = _.find(dimensions, function(d) {
                                    return d !== column;
                                });
                                firstDimension ? orderBy = [ {
                                    expr: firstDimension.exprs[0],
                                    direction: 1
                                } ] : debug.fF.assertFail("No expr for order by. This should not happen.");
                            }
                        }
                        visualQuery.orderBy(orderBy);
                        var config = visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.pivotTable.name,
                            schema,
                            expr: void 0
                        });
                        return objects && (config.singleVisual.objects = objects), {
                            config,
                            fieldScore: (1 + _.size(dimensions)) / (2 + _.size(dimensions)),
                            semanticScore: _.isEmpty(visibleMeasures) ? FieldTypePreferenceScores.medium : FieldTypePreferenceScores.strong
                        };
                    }(query, this.visualAuthoring, pluginConfig.schema, dimensions, measures, idEntities, pluginConfig.addDefaultFormatting), result = [];
                    return matrixConfig && result.push({
                        config: matrixConfig.config,
                        scores: {
                            fieldScore: matrixConfig.fieldScore,
                            semanticTypeScore: matrixConfig.semanticScore
                        }
                    }), tableConfig && result.push({
                        config: tableConfig.config,
                        scores: {
                            fieldScore: tableConfig.fieldScore,
                            semanticTypeScore: tableConfig.semanticScore
                        }
                    }), result;
                }
            }, MatrixRecommendationPlugin;
        }(), scatterChart_capabilities = __webpack_require__(14577), ScatterRecommendationPlugin = function() {
            function ScatterRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(ScatterRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.scatterChart.name ];
                },
                enumerable: !1,
                configurable: !0
            }), ScatterRecommendationPlugin.prototype.process = function(typedExprs, query, pluginConfig) {
                var _a, _b, _c;
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(query, "query"), 
                debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs)) {
                    var dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), measures = _.filter(updatedExprs, function(t) {
                        return t.isMeasure && !t.isTooltip;
                    }), visibleMeasures = _.filter(measures, function(t) {
                        return !t.isHidden;
                    }), tooltips = _.filter(updatedExprs, function(t) {
                        return t.isTooltip;
                    });
                    _.isEmpty(visibleMeasures) && (updatedExprs = updateWithAggregates(updatedExprs, query, pluginConfig.schema, pluginConfig.aggrOps, function(e) {
                        return isNumeric(e);
                    }).groupedExprsWithMetadata, dimensions = _.filter(updatedExprs, function(t) {
                        return !t.isMeasure;
                    }), visibleMeasures = _.filter(updatedExprs, function(expr) {
                        return expr.isMeasure && !expr.isTooltip && !expr.isHidden;
                    }));
                    var singleValued = _.remove(dimensions, function(d) {
                        return d.isSingleValue;
                    });
                    if (_.isEmpty(dimensions) && (dimensions = singleValued), !_.some(visibleMeasures, function(m) {
                        return m.type && !m.type.numeric && !m.type.integer;
                    })) {
                        var fieldScore = 1, semanticTypeScore = 1, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []);
                        if (Math.max(0, 2 - _.size(visibleMeasures)) > 0) {
                            for (var map = [], _i = 0, measureLikeDimensions_1 = _.filter(dimensions, function(d) {
                                return d.type && (d.type.numeric || d.type.integer) && 1 === _.size(d.exprs) && !d.isIdentity;
                            }); _i < measureLikeDimensions_1.length; _i++) (expr = pluginConfig.aggrOps.createExprWithAggregate((dim = measureLikeDimensions_1[_i]).exprs[0], pluginConfig.schema, !1, void 0)) && (0, 
                            sqExprUtils_isMeasure.k)(expr) && map.push({
                                original: dim,
                                measure: {
                                    exprs: [ expr ],
                                    isMeasure: !0,
                                    type: null === (_a = expr.getMetadata(pluginConfig.schema)) || void 0 === _a ? void 0 : _a.type,
                                    entity: expr.getTargetEntity().entity,
                                    isTooltip: !1
                                }
                            });
                            for (var _d = 0, map_1 = map; _d < map_1.length; _d++) {
                                var record = map_1[_d];
                                _.remove(dimensions, record.original), visibleMeasures.push(record.measure);
                            }
                        }
                        var legend = _.findLast(dimensions, function(d, i) {
                            return i > 0 && 1 === _.size(d.exprs);
                        });
                        legend && (!(legend && legend.type && legend.type.text) || legend.type.geography || legend.type.misc) && (semanticTypeScore *= VisualRecommendationConstants.dispreferedLegendScoreReducer);
                        for (var _e = 0, dimensions_1 = dimensions; _e < dimensions_1.length; _e++) for (var dim, role = (dim = dimensions_1[_e]) === legend ? scatterChart_capabilities.TL.series : scatterChart_capabilities.TL.category, _f = 0, _g = dim.exprs; _f < _g.length; _f++) {
                            var nativeReferenceName = query.selectNativeReferenceNameOf(expr = _g[_f]);
                            addField(visualQuery, expr, role, dim.showAll, dim.isParameter, nativeReferenceName);
                        }
                        ensureActiveProjections(visualQuery, scatterChart_capabilities.TL.category, pluginConfig.addDefaultFormatting, null === (_c = null === (_b = null == dimensions ? void 0 : dimensions[0]) || void 0 === _b ? void 0 : _b.groupMetadata) || void 0 === _c ? void 0 : _c.maxProjectedIndex);
                        for (var _loop_1 = function(i) {
                            debug.fF.assert(function() {
                                return 1 === _.size(visibleMeasures[i].exprs);
                            }, "measure groups should have only 1 expr");
                            var role = 0 === i ? scatterChart_capabilities.TL.x : 1 === i ? scatterChart_capabilities.TL.y : 2 === i ? scatterChart_capabilities.TL.size : scatterChart_capabilities.TL.tooltips, expr = visibleMeasures[i].exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, role, visibleMeasures[i].showAll, visibleMeasures[i].isParameter, nativeReferenceName);
                        }, i = 0; i < _.size(visibleMeasures); i++) _loop_1(i);
                        for (var _h = 0, hiddenMeasures_1 = _.filter(measures, function(t) {
                            return t.isHidden;
                        }); _h < hiddenMeasures_1.length; _h++) {
                            var expr, measure = hiddenMeasures_1[_h];
                            nativeReferenceName = query.selectNativeReferenceNameOf(expr = measure.exprs[0]), 
                            addField(visualQuery, expr, scatterChart_capabilities.TL.x, measure.showAll, measure.isParameter, nativeReferenceName, !0);
                        }
                        for (var _loop_2 = function(tooltip) {
                            debug.fF.assert(function() {
                                return 1 === _.size(tooltip.exprs);
                            });
                            var expr = tooltip.exprs[0], nativeReferenceName = query.selectNativeReferenceNameOf(expr);
                            addField(visualQuery, expr, TooltipRole, tooltip.showAll, tooltip.isParameter, nativeReferenceName, tooltip.isHidden);
                        }, _j = 0, tooltips_1 = tooltips; _j < tooltips_1.length; _j++) _loop_2(tooltips_1[_j]);
                        fieldScore = _.isEmpty(dimensions) || _.size(visibleMeasures) < 2 ? VisualRecommendationConstants.incompleteFieldsScore : Math.pow(VisualRecommendationConstants.fieldScoreBase, 2 - _.size(visibleMeasures)) * Math.pow(VisualRecommendationConstants.fieldScoreBase, 1 - _.size(dimensions)), 
                        _.some(dimensions, function(d) {
                            return d.type && (d.type.temporal || !d.type.text);
                        }) && (fieldScore *= VisualRecommendationConstants.dispreferedLegendScoreReducer);
                        var orderBy = query.orderBy();
                        _.isEmpty(orderBy) || (semanticTypeScore *= VisualRecommendationConstants.dispreferedSortScoreReducer);
                        var config = this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: pluginConfig.visualType || plugins.L.scatterChart.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        });
                        return pluginConfig.addDefaultFormatting && function(config) {
                            config.singleVisual.objects = {}, (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                                objectName: "categoryAxis",
                                propertyName: "showAxisTitle"
                            }, void 0, (0, sqExpr.O7)(!0)), (0, dataViewObjectDefinition1.sO)(config.singleVisual.objects, {
                                objectName: "valueAxis",
                                propertyName: "showAxisTitle"
                            }, void 0, (0, sqExpr.O7)(!0));
                        }(config), [ {
                            config,
                            scores: {
                                fieldScore,
                                semanticTypeScore
                            }
                        } ];
                    }
                }
            }, ScatterRecommendationPlugin;
        }(), slicer_capabilities = __webpack_require__(9434), SlicerRecommendationPlugin = function() {
            function SlicerRecommendationPlugin(visualAuthoring) {
                this.visualAuthoring = visualAuthoring;
            }
            return Object.defineProperty(SlicerRecommendationPlugin.prototype, "applicableVisuals", {
                get: function() {
                    return [ plugins.L.slicer.name ];
                },
                enumerable: !1,
                configurable: !0
            }), SlicerRecommendationPlugin.prototype.process = function(typedExprs, _query, pluginConfig) {
                debug.fF.assertNonEmpty(typedExprs, "typedExprs"), debug.fF.assertValue(pluginConfig, "pluginConfig");
                var updatedExprs = updateWithDefaultLabel(typedExprs, pluginConfig.schema);
                if (!_.isEmpty(updatedExprs) && 1 === _.size(updatedExprs) && 1 === _.size(updatedExprs[0].exprs) && !updatedExprs[0].isMeasure) {
                    var visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), expr = updatedExprs[0].exprs[0], nativeReferenceName = _query.selectNativeReferenceNameOf(expr);
                    return addField(visualQuery, expr, slicer_capabilities.CT.value, updatedExprs[0].showAll, updatedExprs[0].isParameter, nativeReferenceName), 
                    [ {
                        config: this.visualAuthoring.create({
                            query: visualQuery,
                            visualType: plugins.L.slicer.name,
                            schema: pluginConfig.schema,
                            expr: void 0
                        }),
                        scores: {
                            fieldScore: 1,
                            semanticTypeScore: 1
                        }
                    } ];
                }
            }, SlicerRecommendationPlugin;
        }(), sq_aggregation_operations_service = __webpack_require__(28199), geo_tagging_analyzer_service = __webpack_require__(77435), visual_authoring_customize_operations_service = __webpack_require__(28107), feature_switch_service = __webpack_require__(9380), visualAuthoringCore = __webpack_require__(66794), filterUtils = __webpack_require__(42614), visualContainerUtilsHelper = __webpack_require__(3579), arrayExtensions = __webpack_require__(50550), Utility = __webpack_require__(38078), sqExprVisitor = __webpack_require__(75074), sqFrom = __webpack_require__(38953), sqFromUtils = __webpack_require__(19501), sqHierarchyExprUtils1 = __webpack_require__(45551), visual_plugin_service = __webpack_require__(29866), core = __webpack_require__(50423), exploration_display_name_service = __webpack_require__(13702), VisualRecommendationServiceLazyProvider = {
            provide: "visualRecommendationService",
            useFactory: function(aggrOps, featureSwitchService, geoTaggingAnalyzer, visualPlugin, visualAuthoringCustomizeOperations, displayNameService) {
                return new Promise(function(resolve) {
                    resolve(new VisualRecommendationService(aggrOps, featureSwitchService, geoTaggingAnalyzer, visualPlugin, visualAuthoringCustomizeOperations, displayNameService));
                });
            },
            deps: [ sq_aggregation_operations_service.C, feature_switch_service.vZ, geo_tagging_analyzer_service.q, visual_plugin_service.D, visual_authoring_customize_operations_service.Q ]
        }, VisualRecommendationService = function() {
            function VisualRecommendationService(aggrOps, featureSwitchService, geoTaggingAnalyzer, visualPlugin, visualAuthoringCustomizeOperations, displayNameService) {
                this.aggrOps = aggrOps, this.visualPlugin = visualPlugin, this.visualAuthoringCore = (0, 
                visualAuthoringCore.Vz)(visualPlugin, geoTaggingAnalyzer, aggrOps, featureSwitchService, visualAuthoringCustomizeOperations, displayNameService), 
                this.recommendationPlugins = [ new CardRecommendationPlugin(this.visualAuthoringCore), new ColumnRecommendationPlugin(this.visualAuthoringCore), new LineRecommendationPlugin(this.visualAuthoringCore), new MapRecommendationPlugin(this.visualAuthoringCore), new MatrixRecommendationPlugin(this.visualAuthoringCore), new ScatterRecommendationPlugin(this.visualAuthoringCore) ], 
                this.pluginsByExplicitRequestOnly = [ new ComboRecommendationPlugin(this.visualAuthoringCore), new FunnelRecommendationPlugin(this.visualAuthoringCore), new GaugeRecommendationPlugin(this.visualAuthoringCore), new KpiRecommendationPlugin(this.visualAuthoringCore) ], 
                this.pluginsForChartSuggestionOnly = [ new SlicerRecommendationPlugin(this.visualAuthoringCore) ];
            }
            return VisualRecommendationService.prototype.recommendVisuals = function(query, schema, recommendationConfig) {
                var _a, _this = this;
                debug.fF.assertValue(query, "query"), debug.fF.assertValue(schema, "schema"), debug.fF.assertValue(recommendationConfig, "recommendationConfig");
                var warning, requestedVisual = recommendationConfig.visualType, pluginsToRun = [];
                if (function(query, recommendationConfig) {
                    var selects = query.select();
                    return _.some(selects, function(s) {
                        var _a;
                        return (0, sqExprStaticMembers.tO)(s.expr) || (null === (_a = _.find(recommendationConfig.exprMetadata, function(e) {
                            return (0, sqExprEqualityVisitor.fS)(e.expression, s.expr, !0, !0);
                        })) || void 0 === _a ? void 0 : _a.isParameter);
                    });
                }(query, recommendationConfig)) {
                    var tableName_1 = plugins.L.tableEx.name;
                    pluginsToRun.push(_.find(this.recommendationPlugins, function(p) {
                        return _.indexOf(p.applicableVisuals, tableName_1) >= 0;
                    })), warning = requestedVisual === tableName_1 ? void 0 : "TypeRequestedNotCompatible", 
                    requestedVisual = requestedVisual === tableName_1 ? requestedVisual : void 0;
                } else if (function(query) {
                    var selects = query.select();
                    return _.some(selects, function(s) {
                        return (0, sqExprStaticMembers.g5)(s.expr) && !_.isEmpty(s.expr.scope);
                    });
                }(query)) {
                    var matrixName_1 = plugins.L.pivotTable.name;
                    pluginsToRun.push(_.find(this.recommendationPlugins, function(p) {
                        return _.indexOf(p.applicableVisuals, matrixName_1) >= 0;
                    })), warning = requestedVisual === matrixName_1 ? void 0 : "TypeRequestedNotCompatible", 
                    requestedVisual = requestedVisual === matrixName_1 ? requestedVisual : void 0;
                } else pluginsToRun.push.apply(pluginsToRun, this.recommendationPlugins), requestedVisual && (pluginsToRun.push.apply(pluginsToRun, this.pluginsByExplicitRequestOnly), 
                pluginsToRun = _.filter(pluginsToRun, function(p) {
                    return _.indexOf(p.applicableVisuals, requestedVisual) >= 0;
                }));
                _.isEmpty(pluginsToRun) && (pluginsToRun = (0, tslib_es6.__spreadArray)([], this.recommendationPlugins, !0), 
                requestedVisual = void 0, warning = "TypeRequestedNotSupported");
                var modifiedQuery = (_a = this.processInput(query, recommendationConfig.exprMetadata, schema)).modifiedQuery, processedExprs = _a.processedExprs, visualQuery = new contracts_visualQuery.g(semanticQuery.vQ.create(), {}, []), dummyResult = {
                    visualContainers: [ convertToVisualContainer(this.visualAuthoringCore.create({
                        query: visualQuery,
                        visualType: requestedVisual || plugins.L.columnChart.name,
                        schema,
                        expr: void 0
                    }), void 0) ],
                    warning: "CouldNotGenerateResult"
                };
                if (_.isEmpty(processedExprs)) return dummyResult;
                if (_.every(processedExprs, function(e) {
                    return e.isHidden;
                })) return dummyResult.warning = "HasOnlyHiddenFields", dummyResult;
                if (_.some(processedExprs, function(e) {
                    return (0, sqExprStaticMembers.Lk)(e.exprs[0]) && !e.defaultLabel && _.isEmpty(e.defaultFields);
                })) return dummyResult;
                var pluginConfig = {
                    schema,
                    aggrOps: this.aggrOps,
                    addDefaultFormatting: recommendationConfig.addDefaultFormatting,
                    allowTooltipMeasures: recommendationConfig.allowTooltipMeasures
                };
                requestedVisual && (pluginConfig.visualType = requestedVisual);
                var processPredicate = function(plugin) {
                    var ensureMeasureResult = _this.ensureMeasures(processedExprs, modifiedQuery, schema), results = plugin.process(ensureMeasureResult.groupedExprsWithMetadata, ensureMeasureResult.query, pluginConfig);
                    if (!_.isEmpty(results)) return _.map(results, function(r) {
                        return {
                            result: r,
                            score: (scores = r.scores, Math.pow(scores.fieldScore, 1.2) * Math.pow(scores.semanticTypeScore, 1.5))
                        };
                        var scores;
                    });
                }, filterContainers = filterUtils.l.deriveFromSQFilters(modifiedQuery.from(), modifiedQuery.where(), {
                    Select: void 0,
                    Filters: recommendationConfig.filterMetadata
                }), resultWithScore = _.chain(pluginsToRun).map(function(p) {
                    return processPredicate(p);
                }).flatten().filter(function(p) {
                    return null != p;
                }).value();
                _.isEmpty(resultWithScore) && null != pluginConfig.visualType && (pluginConfig.visualType = void 0, 
                resultWithScore = _.chain(this.recommendationPlugins).map(function(p) {
                    return processPredicate(p);
                }).flatten().filter(function(p) {
                    return null != p;
                }).value());
                var visualResults = _.orderBy(resultWithScore, [ function(p) {
                    return p.result.config.singleVisual.visualType === pluginConfig.visualType;
                }, function(p) {
                    return p.score;
                } ], [ "desc", "desc" ]);
                if (recommendationConfig.includeChartTypeOnlyAlternatives) {
                    var chartSuggestionResult = _.chain(this.pluginsForChartSuggestionOnly).map(function(p) {
                        return processPredicate(p);
                    }).flatten().filter(function(p) {
                        return null != p;
                    }).value();
                    _.isEmpty(chartSuggestionResult) || _.isEmpty(visualResults) || visualResults.splice.apply(visualResults, (0, 
                    tslib_es6.__spreadArray)([ 1, 0 ], chartSuggestionResult, !1));
                }
                _.isFunction(recommendationConfig.isVisualExcluded) && (visualResults = _.filter(visualResults, function(v) {
                    return !recommendationConfig.isVisualExcluded(v.result.config.singleVisual.visualType);
                })), query.hasVisualCalculations() && (visualResults = _.filter(visualResults, function(v) {
                    return !_this.visualPlugin.capabilities(v.result.config.singleVisual.visualType).suppressVisualCalc;
                })), visualResults = _.take(visualResults, recommendationConfig.numberOfResults), 
                recommendationConfig.filterOutLowScoringResults && (visualResults = _.filter(visualResults, function(p) {
                    return p.score > .1;
                }));
                var visualContainerResults = _.map(visualResults, function(p) {
                    return convertToVisualContainer(p.result.config, filterContainers);
                });
                if (!_.isEmpty(visualContainerResults)) {
                    var firstResult = _.first(visualContainerResults), firstResultVisualType = (0, visualContainerUtilsHelper.s)(firstResult);
                    return null != requestedVisual && firstResultVisualType !== requestedVisual && null == warning && (warning = "TypeRequestedNotCompatible"), 
                    {
                        visualContainers: visualContainerResults,
                        warning
                    };
                }
                return dummyResult;
            }, VisualRecommendationService.prototype.processInput = function(query, exprMetadata, schema) {
                var selects = query.select();
                if (_.isEmpty(exprMetadata) && !_.isEmpty(selects)) {
                    exprMetadata = [];
                    for (var _i = 0, selects_1 = selects; _i < selects_1.length; _i++) exprMetadata.push({
                        expression: selects_1[_i].expr
                    });
                }
                var measureMetadata = _.filter(exprMetadata, function(e) {
                    return (0, sqExprUtils_isMeasure.k)(e.expression);
                });
                !_.isEmpty(measureMetadata) && _.every(measureMetadata, function(e) {
                    return e.isTooltip;
                }) && _.forEach(measureMetadata, function(e) {
                    return e.isTooltip = !1;
                });
                var result = function(query, exprMetadata, schema) {
                    var modifiedQuery = query, modifiedExprMetadata = [], selects = query.select();
                    debug.fF.assert(function() {
                        return _.size(selects) === _.size(exprMetadata);
                    }, "each select should have metadata");
                    for (var i = 0; i < selects.length; i++) {
                        var select = selects[i], metadata = exprMetadata[i];
                        if ((0, sqExprStaticMembers.y3)(select.expr)) {
                            var expr = select.expr, levelExprs = (0, sqHierarchyExprUtils1.wA)(schema, expr);
                            if (_.isEmpty(levelExprs)) modifiedExprMetadata.push(metadata); else {
                                levelExprs = (0, arrayExtensions.rY)(levelExprs), modifiedQuery = modifiedQuery.removeSelect(expr);
                                for (var _i = 0, levelExprs_1 = levelExprs; _i < levelExprs_1.length; _i++) {
                                    var levelExpr = levelExprs_1[_i];
                                    modifiedQuery = modifiedQuery.addSelect(levelExpr);
                                    var clone = _.clone(metadata);
                                    clone.expression = levelExpr, modifiedExprMetadata.push(clone);
                                }
                            }
                        } else modifiedExprMetadata.push(metadata);
                    }
                    return {
                        modifiedQuery,
                        modifiedExprMetadata
                    };
                }(query, exprMetadata, schema);
                result.modifiedQuery = rewriteRelativeDateFilters(result.modifiedQuery), result.modifiedQuery = ensureCorrectSort(result.modifiedQuery);
                var processedExprs = function(query, exprMetadata, schema) {
                    var _a, _b, _c, result = [], hierarchyGroups = {}, exprsWithName = query.select();
                    debug.fF.assert(function() {
                        return _.size(exprsWithName) === _.size(exprMetadata);
                    }, "each expr should have metadata");
                    for (var singleValueExprs = function(query) {
                        for (var from = query.from(), filters = query.where(), singleValueExprs = _.chain(filters).filter(function(f) {
                            return (0, sqExprStaticMembers.Hi)(f.condition) && 1 === _.size(f.condition.values) && 1 === _.size(f.condition.values.values) || (0, 
                            sqExprStaticMembers.$Q)(f.condition) && 0 === f.condition.comparison;
                        }).map(function(f) {
                            return (0, sqExprStaticMembers.Hi)(f.condition) ? _.first(f.condition.args) : (0, 
                            sqExprStaticMembers.$Q)(f.condition) ? f.condition.left : void 0;
                        }).value(), _i = 0, topNFilterVariables_1 = _.map(filters, function(f) {
                            return (0, sqExprStaticMembers.Hi)(f.condition) && f.condition.table && (0, sqExprStaticMembers.jv)(f.condition.table) ? f.condition.table.variable : void 0;
                        }); _i < topNFilterVariables_1.length; _i++) {
                            var variable = topNFilterVariables_1[_i];
                            if (variable) {
                                var source = from.source(variable);
                                if ((0, sqFromUtils.y)(source)) {
                                    if (1 === source.subquery.top()) {
                                        var selects = _.map(source.subquery.select(), function(s) {
                                            return s.expr;
                                        });
                                        singleValueExprs.push.apply(singleValueExprs, selects || []);
                                    }
                                } else debug.fF.assertFail("should be subquery source");
                            }
                        }
                        return singleValueExprs;
                    }(query), filteredExprs = function(query) {
                        for (var filters = query.where(), visitor = new ReferencedFieldVisitor, _i = 0, filters_2 = filters; _i < filters_2.length; _i++) filters_2[_i].condition.accept(visitor);
                        return visitor.fields;
                    }(query), sourceVariableRewriter = new RemoveSourceVariableRewriter, _loop_1 = function(i) {
                        var expr = exprsWithName[i].expr;
                        expr = expr.accept(sourceVariableRewriter);
                        var metadataType, hintType, expressionMetadata = exprMetadata[i], defaultLabel = function(expr, schema) {
                            if ((0, sqExprStaticMembers.Lk)(expr)) {
                                var entity = schema.schema(expr.schema).entities.withName(expr.entity);
                                if (entity) {
                                    var defaultLabel = entity.defaultLabel;
                                    return defaultLabel ? (0, sqExpr.Oh)(expr, defaultLabel.name) : void 0;
                                }
                            }
                        }(expr, schema) || (null == expressionMetadata ? void 0 : expressionMetadata.defaultLabel), metadata = defaultLabel ? defaultLabel.getMetadata(schema) : expr.getMetadata(schema), type = (metadataType = null == metadata ? void 0 : metadata.type, 
                        (hintType = null == expressionMetadata ? void 0 : expressionMetadata.type) ? hintType.geography ? (null == metadataType ? void 0 : metadataType.geography) ? metadataType : hintType : hintType.dateTime && ((null == metadataType ? void 0 : metadataType.dateTime) || (null == metadataType ? void 0 : metadataType.temporal)) ? metadataType : hintType : metadataType), isMeasure = (0, 
                        sqExprUtils_isMeasure.k)(expr), canAggregate = expressionMetadata && !expressionMetadata.isGroup, isExplicitSortBy = null == expressionMetadata ? void 0 : expressionMetadata.isExplicitSortBy, isParameter = null == expressionMetadata ? void 0 : expressionMetadata.isParameter, isIdentity = null === (_b = null === (_a = (null != defaultLabel ? defaultLabel : expr).getConceptualProperty(schema)) || void 0 === _a ? void 0 : _a.column) || void 0 === _b ? void 0 : _b.idOnEntityKey, defaultFields = function(expr, defaultLabel, schema) {
                            if ((0, sqExprStaticMembers.Lk)(expr)) {
                                var entity = schema.schema(expr.schema).entities.withName(expr.entity);
                                if (entity) {
                                    var properties = entity.defaultFields;
                                    _.isEmpty(properties) && (properties = _.chain(entity.properties).filter(function(p) {
                                        return (p.column || p.measure) && !p.hidden;
                                    }).take(VisualRecommendationConstants.defaultFieldCount).value());
                                    var result = [];
                                    defaultLabel && result.push(defaultLabel);
                                    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
                                        var p = properties_1[_i], newExpr = p.column ? (0, sqExpr.Oh)((0, sqExpr.nw)(expr.schema, expr.entity), p.name) : (0, 
                                        sqExpr.mv)((0, sqExpr.nw)(expr.schema, expr.entity), p.name);
                                        defaultLabel && (0, sqExprEqualityVisitor.fS)(newExpr, defaultLabel, !1, !0) || result.push(newExpr);
                                    }
                                    return result;
                                }
                            }
                        }(expr, defaultLabel, schema), entity = null === (_c = expr.getTargetEntity()) || void 0 === _c ? void 0 : _c.entity, isTooltip = null == expressionMetadata ? void 0 : expressionMetadata.isTooltip, showAll = null == expressionMetadata ? void 0 : expressionMetadata.showAll, groupMetadata = null == expressionMetadata ? void 0 : expressionMetadata.groupMetadata, groupId = null == groupMetadata ? void 0 : groupMetadata.groupId, isProjected = null == groupMetadata ? void 0 : groupMetadata.isProjected, isHidden = null == expressionMetadata ? void 0 : expressionMetadata.isHidden, matchingExprPredicate = function(e) {
                            var exprKeyColumn = _.first(expr.getKeyColumns(schema)), labelKeyColumn = defaultLabel ? _.first(defaultLabel.getKeyColumns(schema)) : void 0;
                            return (0, sqExprEqualityVisitor.fS)(e, expr, !1, !0) || exprKeyColumn && (0, sqExprEqualityVisitor.fS)(e, exprKeyColumn, !1, !0) || defaultLabel && (0, 
                            sqExprEqualityVisitor.fS)(e, defaultLabel, !1, !0) || labelKeyColumn && (0, sqExprEqualityVisitor.fS)(e, labelKeyColumn, !1, !0);
                        }, isSingleValue = _.some(singleValueExprs, function(s) {
                            return matchingExprPredicate(s);
                        }), isFiltered = _.some(filteredExprs, function(f) {
                            return matchingExprPredicate(f);
                        });
                        defaultLabel && (defaultLabel = defaultLabel.accept(sourceVariableRewriter));
                        var group = {
                            exprs: [ expr ],
                            type,
                            isMeasure,
                            entity,
                            isTooltip,
                            canAggregate,
                            defaultLabel,
                            defaultFields,
                            isExplicitSortBy,
                            isParameter,
                            isSingleValue,
                            isFiltered,
                            isIdentity,
                            showAll,
                            groupMetadata: groupMetadata ? {
                                groupId,
                                maxProjectedIndex: isProjected ? 0 : void 0
                            } : void 0,
                            isHidden
                        }, updateMatchingGroupOrAdd = function(matchingGroup) {
                            if (matchingGroup) {
                                if (matchingGroup.exprs.push(expr), matchingGroup.isSingleValue = !1, matchingGroup.isFiltered = matchingGroup.isFiltered || isFiltered, 
                                matchingGroup.isIdentity = void 0, isProjected) {
                                    var currentProjectedIndex = matchingGroup.groupMetadata.maxProjectedIndex, exprIndex = _.size(matchingGroup.exprs) - 1;
                                    matchingGroup.groupMetadata.maxProjectedIndex = currentProjectedIndex + 1 === exprIndex ? exprIndex : void 0;
                                }
                                return "Updated";
                            }
                            return result.push(group), "Added";
                        };
                        if (null != groupId) {
                            var matchingGroup = _.find(result, function(r) {
                                var _a;
                                return (null === (_a = r.groupMetadata) || void 0 === _a ? void 0 : _a.groupId) === groupId;
                            });
                            updateMatchingGroupOrAdd(matchingGroup);
                        } else (0, sqExprStaticMembers.ez)(expr) && (0, sqExprStaticMembers.y3)(expr.arg) ? "Added" === updateMatchingGroupOrAdd(matchingGroup = hierarchyGroups[expr.arg.hierarchy]) && (hierarchyGroups[expr.arg.hierarchy] = group) : result.push(group);
                    }, i = 0; i < exprsWithName.length; i++) _loop_1(i);
                    return result;
                }(result.modifiedQuery, result.modifiedExprMetadata, schema);
                return {
                    modifiedQuery: result.modifiedQuery,
                    processedExprs
                };
            }, VisualRecommendationService.prototype.ensureMeasures = function(exprs, query, schema) {
                var groupedExprs = _.filter(exprs, function(e) {
                    return !e.isMeasure && !e.canAggregate;
                });
                return _.isEmpty(groupedExprs) ? {
                    groupedExprsWithMetadata: exprs,
                    query
                } : updateWithAggregates(exprs, query, schema, this.aggrOps, function(e) {
                    return !e.isMeasure && e.canAggregate && isNumeric(e);
                });
            }, VisualRecommendationService.\u0275fac = function(t) {
                return new (t || VisualRecommendationService)(core["\u0275\u0275inject"](sq_aggregation_operations_service.C), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](geo_tagging_analyzer_service.q), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visual_authoring_customize_operations_service.Q), core["\u0275\u0275inject"](exploration_display_name_service.O));
            }, VisualRecommendationService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualRecommendationService,
                factory: VisualRecommendationService.\u0275fac
            }), VisualRecommendationService;
        }();
        function rewriteRelativeDateFilters(query) {
            for (var newFrom = ensureSubqueryRewrites(query, rewriteRelativeDateFilters), filters = query.where(), _i = 0, filters_1 = filters; _i < filters_1.length; _i++) {
                var filter = filters_1[_i];
                filter.condition = filter.condition.accept(new DateAddToDateSpanRewriter), filter.condition = filter.condition.accept(new RelativeDayToHourRewriter);
            }
            return query.where(filters, newFrom);
        }
        function ensureCorrectSort(query) {
            var newFrom = ensureSubqueryRewrites(query, ensureCorrectSort), orderBys = query.orderBy();
            if (_.isEmpty(orderBys)) return query;
            for (var _i = 0, orderBys_1 = orderBys; _i < orderBys_1.length; _i++) {
                var orderby = orderBys_1[_i];
                if (null == orderby.direction || 0 === orderby.direction) {
                    var isMeasure = (0, sqExprUtils_isMeasure.k)(orderby.expr);
                    orderby.direction = isMeasure ? 2 : 1;
                }
            }
            return query.from(newFrom).orderBy(orderBys);
        }
        function ensureSubqueryRewrites(query, processor) {
            var sources = query.from().sources();
            for (var key in sources) {
                var source = sources[key];
                if ((0, sqFromUtils.y)(source)) {
                    var rewritten = processor(source.subquery);
                    sources[key] = new sqFrom.vd(rewritten);
                }
            }
            return new sqFrom.cL(sources);
        }
        function convertToVisualContainer(config, filters) {
            return {
                name: Utility.b$.generateGuid(),
                config,
                filters
            };
        }
        var ReferencedFieldVisitor = function(_super) {
            function ReferencedFieldVisitor() {
                var _this = null !== _super && _super.apply(this, arguments) || this;
                return _this.fields = [], _this;
            }
            return (0, tslib_es6.__extends)(ReferencedFieldVisitor, _super), ReferencedFieldVisitor.prototype.visitColumnRef = function(expr) {
                this.fields.push(expr);
            }, ReferencedFieldVisitor.prototype.visitHierarchyLevel = function(expr) {
                this.fields.push(expr);
            }, ReferencedFieldVisitor.prototype.visitMeasureRef = function(expr) {
                this.fields.push(expr);
            }, ReferencedFieldVisitor;
        }(sqExprVisitor.PA), RemoveSourceVariableRewriter = function(_super) {
            function RemoveSourceVariableRewriter() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return (0, tslib_es6.__extends)(RemoveSourceVariableRewriter, _super), RemoveSourceVariableRewriter.prototype.visitEntity = function(expr) {
                return (0, sqExpr.nw)(expr.schema, expr.entity);
            }, RemoveSourceVariableRewriter;
        }(sqExprRewriter.b), visualContainerUtils = __webpack_require__(60661), fieldExprRemoveAggregateRewriter = __webpack_require__(68509), sqExprUtils = __webpack_require__(45334), AuthoringVisualRecommendationInteropLazyProvider = {
            provide: "authoringVisualRecommendationInterop",
            useFactory: function(aggrOps, visualRecommendationService, displayNameService, visualPlugin) {
                return new Promise(function(resolve) {
                    resolve(new AuthoringVisualRecommendationInterop(aggrOps, visualRecommendationService, displayNameService, visualPlugin));
                });
            },
            deps: [ sq_aggregation_operations_service.C, VisualRecommendationService, exploration_display_name_service.O, visual_plugin_service.D ]
        }, AuthoringVisualRecommendationInterop = function() {
            function AuthoringVisualRecommendationInterop(aggrOps, visualRecommendationService, displayNameService, visualPluginService) {
                this.aggrOps = aggrOps, this.visualRecommendationService = visualRecommendationService, 
                this.displayNameService = displayNameService, this.visualPluginService = visualPluginService;
            }
            return AuthoringVisualRecommendationInterop.prototype.updateWithRecommendation = function(visualContainer, withChanges, schema, preserveGroupingStructure) {
                var _a;
                debug.fF.assertValue(visualContainer, "visualContainer"), debug.fF.assertAnyValue(withChanges, "withChanges"), 
                debug.fF.assertValue(schema, "schema");
                var config = (0, visualContainerUtils.PQ)(visualContainer);
                if (config) {
                    var capabilities;
                    ((null == withChanges ? void 0 : withChanges.toUpdate) || (null == withChanges ? void 0 : withChanges.toAdd)) && (capabilities = this.visualPluginService.capabilities(config.visualType));
                    var processNewResult, processExistingResult = processExistingFields(config, semanticQuery.vQ.create(), null == withChanges ? void 0 : withChanges.toUpdate, preserveGroupingStructure, schema, capabilities, this.displayNameService);
                    (null == withChanges ? void 0 : withChanges.toAdd) && (processNewResult = function(config, query, toAdd, schema, capabilities, aggrOps, displayNameService) {
                        var _a, hasDefaultSort = config.hasDefaultSort, orderBy = null === (_a = config.query) || void 0 === _a ? void 0 : _a.defn.orderBy(), newQuery = query, modifiedFieldsToAdd = [];
                        if ((0, sqHierarchyExprUtils1.K8)(schema, toAdd)) for (var expandedExpressions = (0, 
                        sqHierarchyExprUtils1.wA)(schema, toAdd), _i = 0, _b = (0, arrayExtensions.rY)(expandedExpressions); _i < _b.length; _i++) modifiedFieldsToAdd.push(expr = _b[_i]); else if (!sqExprUtils.m.isExprValidForAggregation(toAdd) || sqExprUtils.m.discourageAggregation(toAdd, schema) || (0, 
                        sqExprUtils_isMeasure.k)(toAdd)) modifiedFieldsToAdd.push(toAdd); else {
                            var expr = aggrOps.createExprWithAggregate(toAdd, schema, !1, void 0);
                            modifiedFieldsToAdd.push(expr);
                        }
                        var exprMetadata = [];
                        return _.forEach(modifiedFieldsToAdd, function(expr) {
                            var nativeReferenceName = displayNameService.createUniqueNativeReference(expr, schema, config.query, capabilities, void 0);
                            newQuery = newQuery.addSelect(expr, void 0, nativeReferenceName), exprMetadata.push(toMetadata(expr, !1, !1, orderBy, hasDefaultSort, void 0));
                        }), {
                            query: newQuery,
                            exprMetadata
                        };
                    }(config, processExistingResult.query, withChanges.toAdd, schema, capabilities, this.aggrOps, this.displayNameService));
                    var newQuery = null !== (_a = null == processNewResult ? void 0 : processNewResult.query) && void 0 !== _a ? _a : processExistingResult.query, exprMetadata = processNewResult ? (0, 
                    tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], processExistingResult.exprMetadata, !0), processNewResult.exprMetadata, !0) : (0, 
                    tslib_es6.__spreadArray)([], processExistingResult.exprMetadata, !0), result = this.visualRecommendationService.recommendVisuals(newQuery, schema, {
                        numberOfResults: 1,
                        exprMetadata,
                        filterMetadata: void 0,
                        filterOutLowScoringResults: !0,
                        visualType: null == withChanges ? void 0 : withChanges.visualType,
                        isVisualExcluded: null == withChanges ? void 0 : withChanges.isVisualExcluded
                    });
                    if ("CouldNotGenerateResult" !== result.warning && "HasOnlyHiddenFields" !== result.warning && !_.isEmpty(null == result ? void 0 : result.visualContainers)) {
                        var resultConfig = result.visualContainers[0].config.singleVisual;
                        return visualContainer.config.singleVisual.query = resultConfig.query, visualContainer.config.singleVisual.visualType = resultConfig.visualType, 
                        visualContainer.config.singleVisual.conversionSourceContext = void 0, resultConfig.visualType;
                    }
                }
            }, AuthoringVisualRecommendationInterop.prototype.getRecommendedVisualTypes = function(visualContainer, schema, numberOfSuggestions, isVisualExcluded) {
                debug.fF.assertValue(visualContainer, "visualContainer"), debug.fF.assertValue(schema, "schema"), 
                debug.fF.assert(function() {
                    return numberOfSuggestions > 0;
                }, "invalid number of suggestions");
                var config = (0, visualContainerUtils.PQ)(visualContainer);
                if (config) {
                    var processExistingResult = processExistingFields(config, semanticQuery.vQ.create()), result = this.visualRecommendationService.recommendVisuals(processExistingResult.query, schema, {
                        numberOfResults: numberOfSuggestions,
                        exprMetadata: processExistingResult.exprMetadata,
                        filterMetadata: void 0,
                        filterOutLowScoringResults: !0,
                        isVisualExcluded
                    });
                    return "CouldNotGenerateResult" === result.warning || "HasOnlyHiddenFields" === result.warning || _.isEmpty(null == result ? void 0 : result.visualContainers) ? void 0 : _.map(result.visualContainers, function(vc) {
                        return (0, visualContainerUtilsHelper.s)(vc);
                    });
                }
            }, AuthoringVisualRecommendationInterop;
        }();
        function toMetadata(expr, isParameter, isTooltip, orderBy, hasDefaultSort, showAll, groupMetadata, isHidden) {
            var isGroup = !(0, sqExprUtils_isMeasure.k)(expr);
            return {
                expression: expr,
                isGroup,
                isParameter,
                isTooltip,
                isExplicitSortBy: !hasDefaultSort && !!_.find(orderBy, function(o) {
                    return (0, sqExprEqualityVisitor.fS)(o.expr, expr);
                }),
                showAll,
                groupMetadata: isGroup ? groupMetadata : void 0,
                isHidden
            };
        }
        function processExistingFields(config, query, toUpdate, setGroupingIds, schema, capabilities, displayNameService) {
            var _a, _b, _c, exprMetadata = [], projections = null === (_a = config.query) || void 0 === _a ? void 0 : _a.projections, selects = null === (_b = config.query) || void 0 === _b ? void 0 : _b.defn.select(), orderBy = null === (_c = config.query) || void 0 === _c ? void 0 : _c.defn.orderBy(), hasDefaultSort = config.hasDefaultSort;
            if (_.isEmpty(projections)) return {
                exprMetadata,
                query
            };
            var newQuery = query, groupId = 0, _loop_1 = function(key) {
                for (var projection = projections[key], items = projection.all(), activeProjections = projection.activeProjectionRefs, parameters = projection.getFieldParameters(), showAll = projection.showAll, isTooltipProjection = key === TooltipRole, projectionIndexToParameterExpr = {}, _i = 0, parameters_1 = parameters; _i < parameters_1.length; _i++) {
                    var parameter = parameters_1[_i];
                    if (null != parameter.index || null != parameter.length && parameter.length > 0) for (var projectionIndex = projection.convertFieldIndexToProjectionIndex(parameter.index), i = 0; i < parameter.length; i++) projectionIndexToParameterExpr[projectionIndex + i] = parameter.expr;
                    newQuery = newQuery.addSelect(parameter.expr), exprMetadata.push(toMetadata(parameter.expr, !0, isTooltipProjection, orderBy, hasDefaultSort, showAll, setGroupingIds ? {
                        groupId,
                        isProjected: !1
                    } : void 0));
                }
                var _loop_2 = function(i) {
                    var expr = void 0, nativeReferenceName = void 0;
                    if (projectionIndexToParameterExpr[i]) return "continue";
                    var targetSelect = _.find(selects, function(s) {
                        return s.name === items[i].queryRef;
                    });
                    if (expr = null == targetSelect ? void 0 : targetSelect.expr, nativeReferenceName = null == targetSelect ? void 0 : targetSelect.nativeReferenceName, 
                    toUpdate && key === toUpdate.role && i === toUpdate.index && (expr = (0, sqExprStaticMembers.iV)(expr) ? expr.arg : expr, 
                    expr = void 0 === toUpdate.aggregateToUse ? (0, fieldExprRemoveAggregateRewriter.n)(expr, schema) : (0, 
                    sqExpr.m_)(expr, toUpdate.aggregateToUse), nativeReferenceName = displayNameService.createUniqueNativeReference(expr, schema, config.query, capabilities, void 0)), 
                    debug.fF.assertValue(expr, "projection has to exist as a parameter or in the query selects"), 
                    expr) {
                        var isProjected = _.indexOf(activeProjections, items[i].queryRef) >= 0, projectionHidden = items[i].hidden;
                        newQuery = newQuery.addSelect(expr, void 0, nativeReferenceName), exprMetadata.push(toMetadata(expr, !1, isTooltipProjection, orderBy, hasDefaultSort, showAll, setGroupingIds ? {
                            groupId,
                            isProjected
                        } : void 0, projectionHidden));
                    }
                };
                for (i = 0; i < items.length; i++) _loop_2(i);
                groupId++;
            };
            for (var key in projections) _loop_1(key);
            return {
                query: newQuery,
                exprMetadata
            };
        }
        var common = __webpack_require__(77476), VisualRecommendationProviderModule = function() {
            function VisualRecommendationProviderModule() {}
            return VisualRecommendationProviderModule.\u0275fac = function(t) {
                return new (t || VisualRecommendationProviderModule);
            }, VisualRecommendationProviderModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: VisualRecommendationProviderModule
            }), VisualRecommendationProviderModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ AuthoringVisualRecommendationInteropLazyProvider, VisualRecommendationService, VisualRecommendationServiceLazyProvider ],
                imports: [ common.CommonModule ]
            }), VisualRecommendationProviderModule;
        }();
    }
} ]);