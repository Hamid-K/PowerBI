"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "explore-ui-authoring" ], {
    41606: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            x: function() {
                return FieldWellUtility;
            }
        });
        var _PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47508), FieldWellUtility = function() {
            function FieldWellUtility() {}
            return FieldWellUtility.getDefaultVisualPlugin = function(featureSwitchService) {
                return featureSwitchService && featureSwitchService.featureSwitches && featureSwitchService.featureSwitches.pivotTableVisualEnabled ? _PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_0__.L.tableEx : _PowerBIVisuals_Visuals_plugins__WEBPACK_IMPORTED_MODULE_0__.L.table;
            }, FieldWellUtility;
        }();
    },
    55201: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        function comparableSequenceEqual(array1, array2) {
            if (!array1 && !array2) return !0;
            if (!!array1 != !!array2 || array1.length !== array2.length) return !1;
            for (var i = 0, len = array1.length; i < len; i++) if (!array1[i].equals(array2[i])) return !1;
            return !0;
        }
        __webpack_require__.d(__webpack_exports__, {
            L: function() {
                return comparableSequenceEqual;
            }
        });
    },
    32441: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            u: function() {
                return FormattingPaneLazyComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0, a1, a2, a3, a4) {
            return {
                formattingSources: a0,
                indicatorEnabled: a1,
                mobileFormatting: a2,
                disabledCards: a3,
                disabledSlices: a4
            };
        }, FormattingPaneLazyComponent = function() {
            function FormattingPaneLazyComponent() {
                var _this = this;
                this.mobileFormatting = !1, this.propertyChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, 
                this.outputArgs = {
                    propertyChanged: function(args) {
                        return _this.propertyChanged.emit(args);
                    }
                }, this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "FormattingPaneComponentId";
            }
            return FormattingPaneLazyComponent.\u0275fac = function(t) {
                return new (t || FormattingPaneLazyComponent);
            }, FormattingPaneLazyComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: FormattingPaneLazyComponent,
                selectors: [ [ "formatting-pane-lazy" ] ],
                inputs: {
                    formattingSources: "formattingSources",
                    indicatorEnabled: "indicatorEnabled",
                    mobileFormatting: "mobileFormatting",
                    disabledCards: "disabledCards",
                    disabledSlices: "disabledSlices"
                },
                outputs: {
                    propertyChanged: "propertyChanged"
                },
                decls: 1,
                vars: 10,
                consts: [ [ 3, "inputArgs", "modulePath", "outputArgs", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction5"](4, _c0, ctx.formattingSources, ctx.indicatorEnabled, ctx.mobileFormatting, ctx.disabledCards, ctx.disabledSlices))("modulePath", ctx.modulePath)("outputArgs", ctx.outputArgs)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), FormattingPaneLazyComponent;
        }();
    },
    78633: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            a: function() {
                return GradientBarLazyComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0) {
            return {
                colors: a0
            };
        }, GradientBarLazyComponent = function() {
            function GradientBarLazyComponent() {
                this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "GradientBarComponentId";
            }
            return GradientBarLazyComponent.\u0275fac = function(t) {
                return new (t || GradientBarLazyComponent);
            }, GradientBarLazyComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: GradientBarLazyComponent,
                selectors: [ [ "gradient-bar-lazy" ] ],
                inputs: {
                    colors: "colors"
                },
                decls: 1,
                vars: 5,
                consts: [ [ 3, "inputArgs", "modulePath", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction1"](3, _c0, ctx.colors))("modulePath", ctx.modulePath)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), GradientBarLazyComponent;
        }();
    },
    71707: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            I: function() {
                return ToggleSwitchModernLazyComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0, a1, a2, a3, a4) {
            return {
                toggle: a0,
                ariaLabelledby: a1,
                ariaDescribedby: a2,
                toggleLabel: a3,
                isDisabled: a4
            };
        }, ToggleSwitchModernLazyComponent = function() {
            function ToggleSwitchModernLazyComponent() {
                var _this = this;
                this.onToggleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, 
                this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "ToggleSwitchModernComponentId", this.outputArgs = {
                    onToggleChange: function(args) {
                        return _this.onToggleChange.emit(args);
                    }
                };
            }
            return ToggleSwitchModernLazyComponent.\u0275fac = function(t) {
                return new (t || ToggleSwitchModernLazyComponent);
            }, ToggleSwitchModernLazyComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: ToggleSwitchModernLazyComponent,
                selectors: [ [ "toggle-switch-modern-lazy" ] ],
                inputs: {
                    toggle: "toggle",
                    ariaLabelledby: "ariaLabelledby",
                    ariaDescribedby: "ariaDescribedby",
                    toggleLabel: "toggleLabel",
                    isDisabled: "isDisabled"
                },
                outputs: {
                    onToggleChange: "onToggleChange"
                },
                decls: 1,
                vars: 10,
                consts: [ [ 3, "inputArgs", "modulePath", "outputArgs", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction5"](4, _c0, ctx.toggle, ctx.ariaLabelledby, ctx.ariaDescribedby, ctx.toggleLabel, ctx.isDisabled))("modulePath", ctx.modulePath)("outputArgs", ctx.outputArgs)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), ToggleSwitchModernLazyComponent;
        }();
    },
    90094: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            l: function() {
                return WarningEagerComponent;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18460), _c0 = function(a0) {
            return {
                warningMessage: a0
            };
        }, WarningEagerComponent = function() {
            function WarningEagerComponent() {
                this.modulePath = "@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", 
                this.componentId = "WarningComponentId";
            }
            return WarningEagerComponent.\u0275fac = function(t) {
                return new (t || WarningEagerComponent);
            }, WarningEagerComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: WarningEagerComponent,
                selectors: [ [ "warning-eager" ] ],
                inputs: {
                    warningMessage: "warningMessage"
                },
                decls: 1,
                vars: 5,
                consts: [ [ 3, "inputArgs", "modulePath", "componentId" ] ],
                template: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275element"](0, "pbi-lazy-load", 0), 
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275property"]("inputArgs", _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275pureFunction1"](3, _c0, ctx.warningMessage))("modulePath", ctx.modulePath)("componentId", ctx.componentId);
                },
                dependencies: [ _LazyLoad_components_pbi_lazy_load_pbi_lazy_load_component__WEBPACK_IMPORTED_MODULE_1__.R ],
                encapsulation: 2,
                changeDetection: 0
            }), WarningEagerComponent;
        }();
    },
    42101: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            p: function() {
                return PaneFormattingEagerModule;
            }
        });
        var _format_mode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9844), _angular_common__WEBPACK_IMPORTED_MODULE_6__ = (__webpack_require__(32441), 
        __webpack_require__(78633), __webpack_require__(71707), __webpack_require__(90094), 
        __webpack_require__(77476)), _angular_router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9398), _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(57786), _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82156), _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50423), lazyLoadPaneFormatting = {
            loadChildren: function() {
                return Promise.all([ __webpack_require__.e(4), __webpack_require__.e("pane-formatting") ]).then(__webpack_require__.bind(__webpack_require__, 71980)).then(function(m) {
                    return m.PaneFormattingModule;
                });
            }
        };
        _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_0__.E.addLazyLoadForLegacyMapping("@powerbi/ExploreUIAuthoring/lazy-modules/pane-formatting/pane-formatting.module#PaneFormattingModule", lazyLoadPaneFormatting.loadChildren);
        var LazyLoadRoutes = [ {
            path: "dummy-pane-formatting-lazy",
            loadChildren: lazyLoadPaneFormatting.loadChildren
        } ], PaneFormattingEagerModule = function() {
            function PaneFormattingEagerModule() {}
            return PaneFormattingEagerModule.\u0275fac = function(t) {
                return new (t || PaneFormattingEagerModule);
            }, PaneFormattingEagerModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_5__["\u0275\u0275defineNgModule"]({
                type: PaneFormattingEagerModule
            }), PaneFormattingEagerModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_5__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_6__.CommonModule, _format_mode__WEBPACK_IMPORTED_MODULE_7__.j, _powerbi_LazyLoad__WEBPACK_IMPORTED_MODULE_8__.N, _angular_router__WEBPACK_IMPORTED_MODULE_9__.Bz.forChild(LazyLoadRoutes) ]
            }), PaneFormattingEagerModule;
        }();
    },
    21302: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ol: function() {
                return PropertyChangeIndicatorServiceInjectionToken;
            },
            mF: function() {
                return showPageFormatPane;
            },
            sn: function() {
                return showFormatPane;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), showFormatPane = {
            type: 3,
            name: "showFormatPane"
        }, showPageFormatPane = {
            type: 3,
            name: "showPageFormatPane"
        }, PropertyChangeIndicatorServiceInjectionToken = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("PropertyChangeIndicatorService");
    },
    43281: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExploreUIAuthoringModule: function() {
                return ExploreUIAuthoringModule;
            }
        });
        var pbi_overlay_ref = __webpack_require__(86286), core = __webpack_require__(50423), common = __webpack_require__(77476), visual_types_container_modern_component = __webpack_require__(89961);
        function AllVisualSelector_section_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "section", 1), core["\u0275\u0275element"](1, "visual-types-container-modern", 4), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("visualContainer", ctx_r0.visualContainer)("visualPluginFilter", ctx_r0.nonPersonalVisualPluginFilter)("disableMoreOptionsIcon", !0)("visualConversionSource", ctx_r0.visualConversionSource);
            }
        }
        var AllVisualSelector = function() {
            function AllVisualSelector() {}
            return AllVisualSelector.\u0275fac = function(t) {
                return new (t || AllVisualSelector);
            }, AllVisualSelector.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: AllVisualSelector,
                selectors: [ [ "all-visual-selector" ] ],
                inputs: {
                    visualContainer: "visualContainer",
                    visualPluginFilter: "visualPluginFilter",
                    showNonPersonalVisualizationPane$: "showNonPersonalVisualizationPane$",
                    nonPersonalVisualPluginFilter: "nonPersonalVisualPluginFilter",
                    visualConversionSource: "visualConversionSource"
                },
                decls: 5,
                vars: 6,
                consts: [ [ 1, "allVisualizationsPicker", "explorationContainer", "newPaneColors" ], [ 1, "modern-format-pane" ], [ 1, "compact-visual-types", 3, "visualContainer", "visualPluginFilter", "visualConversionSource" ], [ "class", "modern-format-pane", 4, "ngIf" ], [ 1, "withTopDivider", "compact-visual-types", 3, "visualContainer", "visualPluginFilter", "disableMoreOptionsIcon", "visualConversionSource" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0)(1, "section", 1), core["\u0275\u0275element"](2, "visual-types-container-modern", 2), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](3, AllVisualSelector_section_3_Template, 2, 4, "section", 3), 
                    core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("visualContainer", ctx.visualContainer)("visualPluginFilter", ctx.visualPluginFilter)("visualConversionSource", ctx.visualConversionSource), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](4, 4, ctx.showNonPersonalVisualizationPane$)));
                },
                dependencies: [ common.NgIf, visual_types_container_modern_component.r, common.AsyncPipe ],
                styles: [ ".allVisualizationsPicker[_ngcontent-%COMP%]{display:flex;flex-direction:column}" ]
            }), AllVisualSelector;
        }(), AllVisualSelectorFlyout = function() {
            function AllVisualSelectorFlyout(visualSelectorInput) {
                this.visualSelectorInput = visualSelectorInput, this.visualContainer = visualSelectorInput.visualContainer, 
                this.visualPluginFilter = visualSelectorInput.visualPluginFilter, this.nonPersonalVisualPluginFilter = visualSelectorInput.nonPersonalVisualPluginFilter, 
                this.showNonPersonalVisualizationPane$ = visualSelectorInput.showNonPersonalVisualizationPane$;
            }
            return AllVisualSelectorFlyout.\u0275fac = function(t) {
                return new (t || AllVisualSelectorFlyout)(core["\u0275\u0275directiveInject"](pbi_overlay_ref.M));
            }, AllVisualSelectorFlyout.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: AllVisualSelectorFlyout,
                selectors: [ [ "all-visual-selector-flyout" ] ],
                decls: 2,
                vars: 4,
                consts: [ [ 1, "allVisualSelectorContainer" ], [ 1, "white-background", 3, "visualContainer", "visualPluginFilter", "nonPersonalVisualPluginFilter", "showNonPersonalVisualizationPane$" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275element"](1, "all-visual-selector", 1), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("visualContainer", ctx.visualContainer)("visualPluginFilter", ctx.visualPluginFilter)("nonPersonalVisualPluginFilter", ctx.nonPersonalVisualPluginFilter)("showNonPersonalVisualizationPane$", ctx.showNonPersonalVisualizationPane$));
                },
                dependencies: [ AllVisualSelector ],
                styles: [ "[_nghost-%COMP%]{width:100%}.allVisualSelectorContainer[_ngcontent-%COMP%]{padding:3px 0;background:var(--fluent-theme-white-color);border:1px solid var(--gray-110);border-top:none}" ]
            }), AllVisualSelectorFlyout;
        }(), tslib_es6 = __webpack_require__(81337), BehaviorSubject = __webpack_require__(35510), merge = __webpack_require__(63057), takeUntil = __webpack_require__(83317), filter = __webpack_require__(59973), take = __webpack_require__(48787), visual_types_service = __webpack_require__(33754), explore_ui_dialogs_identifiers = __webpack_require__(78778), rx_component = __webpack_require__(73221), pbi_overlay_positions = __webpack_require__(25512), pbi_overlay_service = __webpack_require__(86940), events = __webpack_require__(8590), visualContainerUtilsHelper = __webpack_require__(3579), visualContainerUtils = __webpack_require__(60661), viewModelFactory = __webpack_require__(26982), viewModelFactoryEx = __webpack_require__(20590), plugins = __webpack_require__(47508), debug = __webpack_require__(62458), conceptual_schema_proxy_service = __webpack_require__(26898), context_activity_service = __webpack_require__(22292), exploration_navigation_service = __webpack_require__(39503), event_bridge_service = __webpack_require__(11494), data_sources_service = __webpack_require__(83008), visual_plugin_operations_service = __webpack_require__(66977), feature_switch_service = __webpack_require__(9380), lazy_scoped_provider = __webpack_require__(28894), localization_service = __webpack_require__(65181), trusted_visual_service = __webpack_require__(69071), visual_plugin_service = __webpack_require__(29866), visual_authoring_service = __webpack_require__(66890), visual_pane_settings_service = __webpack_require__(34518), svg_use_symbol_component = __webpack_require__(65188), toggle_switch_modern_lazy_component = __webpack_require__(71707), pbi_tooltip_directive = __webpack_require__(36858), localize_pipe = __webpack_require__(85102), _c0 = [ "visualPicker" ], _c1 = [ "allVisualToggleButton" ], _c2 = [ "suggestedVisualTypeElement" ];
        function AutoVisualComponent_div_0_label_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "label", 8), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](ctx_r2.label);
            }
        }
        var _c3 = function(a0, a1) {
            return {
                selected: a0,
                notSelected: a1
            };
        };
        function AutoVisualComponent_div_0_div_5_button_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r13 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 14, 15), core["\u0275\u0275listener"]("click", function() {
                    var suggestion_r9 = core["\u0275\u0275restoreView"](_r13).$implicit, ctx_r12 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r12.updateVisualType(suggestion_r9.type));
                })("keydown", function($event) {
                    var buttonIndex_r10 = core["\u0275\u0275restoreView"](_r13).index, visualViewModel_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r14 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r14.onSuggestedVisualTypeKeydown($event, buttonIndex_r10, visualViewModel_r1.suggestions.length));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275element"](3, "svg-use-symbol", 16), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var suggestion_r9 = ctx.$implicit, buttonIndex_r10 = ctx.index, visualViewModel_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r7 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("tabindex", buttonIndex_r10 === core["\u0275\u0275pipeBind1"](2, 8, ctx_r7.suggestedVisualTypeFocusIndex$) ? 0 : -1)("ngClass", core["\u0275\u0275pureFunction2"](10, _c3, suggestion_r9.type === visualViewModel_r1.selectedInfo.type, suggestion_r9.type !== visualViewModel_r1.selectedInfo.type))("disabled", !ctx_r7.allowChangeVisualType)("ngStyle", suggestion_r9.imageStyles)("pbiTooltip", suggestion_r9.tooltip), 
                core["\u0275\u0275attribute"]("aria-colindex", buttonIndex_r10), core["\u0275\u0275advance"](3), 
                core["\u0275\u0275property"]("sheet", suggestion_r9.iconSheet)("symbolId", suggestion_r9.symbol);
            }
        }
        var _c4 = function(a0, a1) {
            return {
                "pbi-glyph-chevronupsmall": a0,
                "pbi-glyph-chevrondownsmall": a1
            };
        };
        function AutoVisualComponent_div_0_div_5_button_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r19 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 17, 18), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r18 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r18.toggleAllVisualState());
                }), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "localize"), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r8 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction2"](9, _c4, ctx_r8.showAllVisualizations, !ctx_r8.showAllVisualizations))("pbiTooltip", core["\u0275\u0275pipeBind1"](3, 7, ctx_r8.showAllVisualizations ? "Chevron_CollapseDescription" : "Chevron_ExpandDescription"))("disabled", !ctx_r8.allowChangeVisualType), 
                core["\u0275\u0275attribute"]("aria-expanded", ctx_r8.showAllVisualizations)("aria-label", core["\u0275\u0275pipeBind1"](2, 5, "Show_All_Visual_Types"));
            }
        }
        var _c5 = function(a0) {
            return {
                withAllVisualsSelector: a0
            };
        };
        function AutoVisualComponent_div_0_div_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 9)(1, "div", 10)(2, "div", 11), 
            core["\u0275\u0275template"](3, AutoVisualComponent_div_0_div_5_button_3_Template, 4, 13, "button", 12), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](4, AutoVisualComponent_div_0_div_5_button_4_Template, 4, 12, "button", 13), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var visualViewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](4, _c5, ctx_r4.showAllVisualizations && !ctx_r4.allVisualsPickerInFlyout || ctx_r4.alwaysExpanded)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("aria-colcount", visualViewModel_r1.suggestions.length), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", visualViewModel_r1.suggestions), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r4.alwaysExpanded);
            }
        }
        function AutoVisualComponent_div_0_all_visual_selector_6_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "all-visual-selector", 19), 2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("visualContainer", ctx_r5.visualContainer)("visualPluginFilter", ctx_r5.visualPluginFilter)("showNonPersonalVisualizationPane$", ctx_r5.showNonPersonalVisualizationPane$)("nonPersonalVisualPluginFilter", ctx_r5.nonPersonalVisualizationPaneFilter)("visualConversionSource", ctx_r5.host);
            }
        }
        var _c6 = function(a0) {
            return {
                isDisabled: a0
            };
        };
        function AutoVisualComponent_div_0_div_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r22 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 20)(1, "toggle-switch-modern-lazy", 21), 
                core["\u0275\u0275listener"]("onToggleChange", function($event) {
                    core["\u0275\u0275restoreView"](_r22);
                    var ctx_r21 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r21.updateAutoVisualState($event));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var visualViewModel_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r6 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](5, _c6, !ctx_r6.allowChangeVisualType)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("toggle", visualViewModel_r1.selectedInfo.isAutoVisual)("isDisabled", !ctx_r6.allowChangeVisualType)("pbiTooltip", ctx_r6.tooltip)("toggleLabel", ctx_r6.autoModeToggleLabel);
            }
        }
        var _c7 = function(a0, a1) {
            return {
                disabledVisualPicker: a0,
                withSuggestions: a1
            };
        };
        function AutoVisualComponent_div_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 1), core["\u0275\u0275template"](1, AutoVisualComponent_div_0_label_1_Template, 2, 1, "label", 2), 
            core["\u0275\u0275elementStart"](2, "div", 3, 4), core["\u0275\u0275pipe"](4, "async"), 
            core["\u0275\u0275template"](5, AutoVisualComponent_div_0_div_5_Template, 5, 6, "div", 5), 
            core["\u0275\u0275template"](6, AutoVisualComponent_div_0_all_visual_selector_6_Template, 1, 5, "all-visual-selector", 6), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](7, AutoVisualComponent_div_0_div_7_Template, 2, 7, "div", 7), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.label), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction2"](7, _c7, core["\u0275\u0275pipeBind1"](4, 5, ctx_r0.disabled$), !ctx_r0.noSuggestions)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", !ctx_r0.noSuggestions), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.showAllVisualizations && !ctx_r0.allVisualsPickerInFlyout || ctx_r0.alwaysExpanded), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r0.noAutoToggleSwitch);
            }
        }
        var AutoVisualComponent = function(_super) {
            function AutoVisualComponent(conceptualSchemaProxy, contextActivityService, explorationNavigation, eventBridge, dataSources, featureSwitchService, injector, lazyScoped, localizationService, overlay, trustedVisual, visualAuthoring, visualPaneSettingsService, visualPluginOperationsService, visualPlugin, visualTypesService) {
                var _this = _super.call(this) || this;
                return _this.conceptualSchemaProxy = conceptualSchemaProxy, _this.contextActivityService = contextActivityService, 
                _this.explorationNavigation = explorationNavigation, _this.eventBridge = eventBridge, 
                _this.dataSources = dataSources, _this.featureSwitchService = featureSwitchService, 
                _this.injector = injector, _this.lazyScoped = lazyScoped, _this.localizationService = localizationService, 
                _this.overlay = overlay, _this.trustedVisual = trustedVisual, _this.visualAuthoring = visualAuthoring, 
                _this.visualPaneSettingsService = visualPaneSettingsService, _this.visualPluginOperationsService = visualPluginOperationsService, 
                _this.visualPlugin = visualPlugin, _this.visualTypesService = visualTypesService, 
                _this.numberOfSuggestionsToShow = 5, _this.onVisualTypeUpdated = new core.EventEmitter, 
                _this.showNonPersonalVisualizationPane$ = new BehaviorSubject.X(!1), _this.isInitialized$ = new BehaviorSubject.X(!1), 
                _this.suggestedVisualTypeFocusIndex$ = new BehaviorSubject.X(void 0), _this.visualViewModel$ = new BehaviorSubject.X(void 0), 
                _this.isInitialFocusSet = !1, _this.visualPluginFilter = function(visual, features, visualPaneService) {
                    return (!_this.withPerspectives || !_this.visualPluginOperationsService.isQnaVisual(visual.name)) && (!_.isFunction(_this.isVisualExcluded) || !_this.isVisualExcluded(visual.name)) && (0, 
                    viewModelFactory.CL)(visual, features, visualPaneService);
                }, _this.nonPersonalVisualizationPaneFilter = function(visual, features, visualPaneService) {
                    return !(0, viewModelFactory.CL)(visual, features, visualPaneService);
                }, _this;
            }
            return (0, tslib_es6.__extends)(AutoVisualComponent, _super), Object.defineProperty(AutoVisualComponent.prototype, "_suggestedVisualTypeElementRefs", {
                set: function(elementRefs) {
                    this.suggestedVisualTypeElementRefs = (null == elementRefs ? void 0 : elementRefs.toArray()) || [], 
                    !this.isInitialFocusSet && null != this.suggestedVisualTypeFocusIndex$.value && this.setFocusAfterInitialization && (this.setInitialFocus(), 
                    this.isInitialFocusSet = !0);
                },
                enumerable: !1,
                configurable: !0
            }), AutoVisualComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.lazyScoped.get("authoringVisualRecommendationInterop").then(function(recommendationInterop) {
                    _this.recommendationInterop = recommendationInterop, _this.visualTypesService.initialize(), 
                    _this.isInitialized$.next(!0);
                }), this.visualTypesService.availableVisualTypes$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(availableVisualTypes) {
                    _this.availableVisualTypes = availableVisualTypes;
                }), this.allowChangeVisualType = this.visualContainer ? this.visualPluginOperationsService.canConvertVisual(this.visualContainer) : this.allowSelectVisualTypeWhenNoVisual, 
                this.isInitialized$.pipe((0, takeUntil.R)(this.onDestroy$), (0, filter.h)(function(isInitialized) {
                    return !!isInitialized;
                })).subscribe(function() {
                    _this.updateVisualViewModel(), _this.updateNonPersonalVisualState();
                }), (0, merge.T)(this.changes$("visualContainer"), this.eventBridge.on(events.KD7), this.eventBridge.on(events.jCS), this.eventBridge.on(events.D1A), this.eventBridge.on(events.Udu)).pipe((0, 
                takeUntil.R)(this.onDestroy$)).subscribe(function() {
                    _this.isInitialized$.value && (_this.updateVisualViewModel(), _this.updateNonPersonalVisualState());
                });
            }, AutoVisualComponent.prototype.onResize = function() {
                var _a;
                null === (_a = this.allVisualSelectorOverlayRef) || void 0 === _a || _a.close();
            }, AutoVisualComponent.prototype.toggleAllVisualState = function() {
                this.showAllVisualizations = !this.showAllVisualizations, this.allVisualsPickerInFlyout && this.showHideVisualPickerFlyout(this.showAllVisualizations);
            }, AutoVisualComponent.prototype.updateAutoVisualState = function(setToAuto) {
                this.visualAuthoring.convert(this.visualContainer, this.dataSources.get(), setToAuto ? void 0 : (0, 
                visualContainerUtilsHelper.s)(this.visualContainer), this.explorationNavigation.getCurrentSection());
            }, AutoVisualComponent.prototype.updateVisualType = function(visualType) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var activity, keepAutoVisualState, error_1, plugin_1, selectedVisualType;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            if (!this.visualContainer) return [ 3, 5 ];
                            activity = this.contextActivityService.createActivity({
                                name: "SelectVisualRecommendation",
                                visualName: this.visualContainer.name,
                                data: {
                                    visualTypePicked: visualType,
                                    source: "Skittle",
                                    skittleType: "Build"
                                }
                            }), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 3, , 4 ]), keepAutoVisualState = (0, visualContainerUtils.II)(this.visualContainer), 
                            [ 4, this.visualAuthoring.convert(this.visualContainer, this.dataSources.get(), visualType, this.explorationNavigation.getCurrentSection(), keepAutoVisualState, "Skittle", activity) ];

                          case 2:
                            return _a.sent() ? (this.onVisualTypeUpdated.emit(visualType), activity.resolve()) : activity.reject(new Error("cannot convert to recommended type")), 
                            [ 3, 4 ];

                          case 3:
                            throw error_1 = _a.sent(), activity.reject(error_1), error_1;

                          case 4:
                            return [ 3, 6 ];

                          case 5:
                            this.allowSelectVisualTypeWhenNoVisual && (plugin_1 = this.visualPlugin.getPlugin(visualType)) && (selectedVisualType = _.find(this.availableVisualTypes.types, function(availableVisualType) {
                                return availableVisualType.plugin.name === plugin_1.name;
                            })) && this.visualTypesService.performSelectVisualTypeAction(selectedVisualType, this.host), 
                            _a.label = 6;

                          case 6:
                            return [ 2 ];
                        }
                    });
                });
            }, AutoVisualComponent.prototype.onSuggestedVisualTypeKeydown = function(event, currentIndex, totalLength) {
                "ArrowRight" === event.key || "ArrowDown" === event.key ? currentIndex + 1 < totalLength && (this.suggestedVisualTypeFocusIndex$.next(currentIndex + 1), 
                this.suggestedVisualTypeElementRefs[currentIndex + 1].nativeElement.focus()) : "ArrowLeft" !== event.key && "ArrowUp" !== event.key || currentIndex - 1 >= 0 && (this.suggestedVisualTypeFocusIndex$.next(currentIndex - 1), 
                this.suggestedVisualTypeElementRefs[currentIndex - 1].nativeElement.focus());
            }, AutoVisualComponent.prototype.showHideVisualPickerFlyout = function(show) {
                show && !this.allVisualSelectorOverlayRef && this.showAllVisualFlyout(), !show && this.allVisualSelectorOverlayRef && (this.allVisualSelectorOverlayRef.close(), 
                this.allVisualSelectorOverlayRef = void 0);
            }, AutoVisualComponent.prototype.showAllVisualFlyout = function() {
                var _this = this;
                this.allVisualSelectorOverlayRef = this.overlay.open({
                    component: AllVisualSelectorFlyout,
                    data: {
                        visualContainer: this.visualContainer,
                        visualPluginFilter: this.visualPluginFilter,
                        showNonPersonalVisualizationPane$: this.showNonPersonalVisualizationPane$,
                        nonPersonalVisualPluginFilter: this.nonPersonalVisualizationPaneFilter
                    },
                    options: {
                        width: this.visualPickerRef.nativeElement.offsetWidth,
                        positionStrategy: this.overlay.position().flexibleConnectedTo(this.visualPickerRef).withPositions([ (0, 
                        pbi_overlay_positions.Oq)() ]).withFlexibleDimensions(!0).withGrowAfterOpen(!0),
                        hasBackdrop: !0,
                        backdropClass: pbi_overlay_service.L,
                        disposeOnNavigation: !0
                    },
                    injector: this.injector,
                    closeOnBackdropClick: !0,
                    forwardClickDisabledElements: [ this.allVisualToggleButtonRef.nativeElement ]
                }), this.allVisualSelectorOverlayRef.onClose.pipe((0, take.q)(1)).subscribe(function() {
                    _this.allVisualSelectorOverlayRef = void 0, _this.showAllVisualizations = !1;
                });
            }, AutoVisualComponent.prototype.setInitialFocus = function() {
                var _a, _b, _this = this;
                this.suggestedVisualTypeFocusIndex$.value >= 0 && (debug.fF.assert(function() {
                    return _this.suggestedVisualTypeFocusIndex$.value < _.size(_this.suggestedVisualTypeElementRefs);
                }, "suggested type elementRefs not updated yet"), null === (_b = null === (_a = this.suggestedVisualTypeElementRefs[this.suggestedVisualTypeFocusIndex$.value]) || void 0 === _a ? void 0 : _a.nativeElement) || void 0 === _b || _b.focus());
            }, AutoVisualComponent.prototype.updateVisualViewModel = function() {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var query, recommendations, schema, currentVisualType, suggestedIndex, visualTypeInfo, visualSuggestions, visualType, isAuto, selectedVisualInfo, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return query = (0, visualContainerUtils.Xf)(this.visualContainer), _.isEmpty(null === (_a = null == query ? void 0 : query.defn) || void 0 === _a ? void 0 : _a.select()) ? [ 3, 2 ] : [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            schema = _b.sent(), recommendations = this.recommendationInterop.getRecommendedVisualTypes(this.visualContainer, schema, this.numberOfSuggestionsToShow, this.isVisualExcluded), 
                            _b.label = 2;

                          case 2:
                            return _.isEmpty(recommendations) && (recommendations = [ plugins.L.columnChart.name, plugins.L.barChart.name, plugins.L.lineChart.name, plugins.L.tableEx.name, plugins.L.card.name ]), 
                            (0, visualContainerUtils.II)(this.visualContainer) || (currentVisualType = (0, visualContainerUtilsHelper.s)(this.visualContainer), 
                            (suggestedIndex = _.indexOf(recommendations, currentVisualType)) >= 0 && recommendations.splice(suggestedIndex, 1), 
                            recommendations.unshift(currentVisualType), _.size(recommendations) > this.numberOfSuggestionsToShow && recommendations.pop()), 
                            visualTypeInfo = _.map(recommendations, function(visualType) {
                                var plugin = _this.visualPlugin.getPlugin(visualType);
                                if (plugin) {
                                    var visualInfo = (0, viewModelFactoryEx.tl)(plugin, _this.trustedVisual, _this.localizationService, void 0);
                                    return {
                                        type: visualType,
                                        symbol: visualInfo.class,
                                        iconSheet: "visualizationPaneIcons",
                                        imageStyles: _this.getVisualImageStyles(plugin),
                                        tooltip: visualInfo.title
                                    };
                                }
                            }), visualSuggestions = _.filter(visualTypeInfo, function(i) {
                                return null != i;
                            }), visualType = (0, visualContainerUtilsHelper.s)(this.visualContainer), isAuto = (0, 
                            visualContainerUtils.II)(this.visualContainer), selectedVisualInfo = {
                                type: visualType,
                                isAutoVisual: isAuto
                            }, this.withPerspectives && this.visualAuthoring.setPresentationChangesApplied(!0), 
                            this.visualViewModel$.next({
                                selectedInfo: selectedVisualInfo,
                                suggestions: visualSuggestions
                            }), this.suggestedVisualTypeFocusIndex$.next(Math.min(0, visualSuggestions.length - 1)), 
                            [ 2 ];
                        }
                    });
                });
            }, AutoVisualComponent.prototype.getVisualImageStyles = function(plugin) {
                return plugin.iconUrl && (plugin.developerModeVisual || plugin.custom && !this.trustedVisual.isAutomaticallyImportedVisual(plugin.name)) ? {
                    "background-image": plugin.iconUrl,
                    "background-repeat": "round",
                    "background-clip": "content-box",
                    padding: "1px"
                } : null;
            }, AutoVisualComponent.prototype.updateNonPersonalVisualState = function() {
                var _this = this;
                this.showNonPersonalVisualizationPane$.next(_.some(this.visualPlugin.getConvertibleVisuals(), function(visual) {
                    return null != visual && !(0, viewModelFactory.CL)(visual, _this.featureSwitchService, _this.visualPaneSettingsService);
                }));
            }, AutoVisualComponent.\u0275fac = function(t) {
                return new (t || AutoVisualComponent)(core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](context_activity_service.r), core["\u0275\u0275directiveInject"](exploration_navigation_service.z), core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](core.Injector), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](pbi_overlay_service._), core["\u0275\u0275directiveInject"](trusted_visual_service.t), core["\u0275\u0275directiveInject"](visual_authoring_service.$8), core["\u0275\u0275directiveInject"](visual_pane_settings_service.R), core["\u0275\u0275directiveInject"](visual_plugin_operations_service.f), core["\u0275\u0275directiveInject"](visual_plugin_service.D), core["\u0275\u0275directiveInject"](visual_types_service.V));
            }, AutoVisualComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: AutoVisualComponent,
                selectors: [ [ "auto-visual" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](_c0, 5, core.ElementRef), core["\u0275\u0275viewQuery"](_c1, 5, core.ElementRef), 
                    core["\u0275\u0275viewQuery"](_c2, 5, core.ElementRef)), 2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.visualPickerRef = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.allVisualToggleButtonRef = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx._suggestedVisualTypeElementRefs = _t);
                    }
                },
                hostBindings: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275listener"]("resize", function() {
                        return ctx.onResize();
                    }, !1, core["\u0275\u0275resolveWindow"]);
                },
                inputs: {
                    visualContainer: "visualContainer",
                    label: "label",
                    autoModeToggleLabel: "autoModeToggleLabel",
                    withPerspectives: "withPerspectives",
                    tooltip: "tooltip",
                    numberOfSuggestionsToShow: "numberOfSuggestionsToShow",
                    setFocusAfterInitialization: "setFocusAfterInitialization",
                    noAutoToggleSwitch: "noAutoToggleSwitch",
                    noSuggestions: "noSuggestions",
                    allVisualsPickerInFlyout: "allVisualsPickerInFlyout",
                    disabled$: "disabled$",
                    host: "host",
                    alwaysExpanded: "alwaysExpanded",
                    allowSelectVisualTypeWhenNoVisual: "allowSelectVisualTypeWhenNoVisual",
                    isVisualExcluded: "isVisualExcluded"
                },
                outputs: {
                    onVisualTypeUpdated: "onVisualTypeUpdated"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ visual_types_service.V, {
                    provide: visual_types_service.B,
                    useValue: explore_ui_dialogs_identifiers.Ys
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 2,
                vars: 3,
                consts: [ [ "class", "visualPickerContainer", 4, "ngIf" ], [ 1, "visualPickerContainer" ], [ "id", "visualPickerTitle", 4, "ngIf" ], [ 1, "visualPicker", 3, "ngClass" ], [ "visualPicker", "" ], [ "class", "suggestionsContainer", 3, "ngClass", 4, "ngIf" ], [ "class", "allVisualSelector white-background", 3, "visualContainer", "visualPluginFilter", "showNonPersonalVisualizationPane$", "nonPersonalVisualPluginFilter", "visualConversionSource", 4, "ngIf" ], [ "class", "autoVisualContainer", 3, "ngClass", 4, "ngIf" ], [ "id", "visualPickerTitle" ], [ 1, "suggestionsContainer", 3, "ngClass" ], [ "id", "suggestedVisualTypesContainer", "aria-labelledby", "visualPickerTitle", "role", "grid", "aria-rowcount", "1", 1, "suggestions" ], [ "role", "row", 1, "suggestionsRow" ], [ "class", "visualSymbol", "role", "gridcell", 3, "tabindex", "ngClass", "disabled", "ngStyle", "pbiTooltip", "click", "keydown", 4, "ngFor", "ngForOf" ], [ "class", "glyphicon glyph-mini toggleAllVisualsButton", 3, "ngClass", "pbiTooltip", "disabled", "click", 4, "ngIf" ], [ "role", "gridcell", 1, "visualSymbol", 3, "tabindex", "ngClass", "disabled", "ngStyle", "pbiTooltip", "click", "keydown" ], [ "suggestedVisualTypeElement", "" ], [ 3, "sheet", "symbolId" ], [ 1, "glyphicon", "glyph-mini", "toggleAllVisualsButton", 3, "ngClass", "pbiTooltip", "disabled", "click" ], [ "allVisualToggleButton", "" ], [ 1, "allVisualSelector", "white-background", 3, "visualContainer", "visualPluginFilter", "showNonPersonalVisualizationPane$", "nonPersonalVisualPluginFilter", "visualConversionSource" ], [ 1, "autoVisualContainer", 3, "ngClass" ], [ 3, "toggle", "isDisabled", "pbiTooltip", "toggleLabel", "onToggleChange" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, AutoVisualComponent_div_0_Template, 8, 10, "div", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.visualViewModel$));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, common.NgStyle, svg_use_symbol_component.k, toggle_switch_modern_lazy_component.I, pbi_tooltip_directive.V, AllVisualSelector, common.AsyncPipe, localize_pipe.F ],
                styles: [ '.visualPickerContainer[_ngcontent-%COMP%]{--visual-symbol-selected-background-color: var(--gray-40);--visual-symbol-selected-border-color: var(--gray-130)}  [data-legacy-theming=false] .visualPickerContainer{--visual-symbol-selected-background-color: var(--colorNeutralBackground1);--visual-symbol-selected-border-color: var(--colorNeutralStroke1)}.visualPickerContainer[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-size:12px;display:block;margin-bottom:4px}.visualPickerContainer[_ngcontent-%COMP%]   .disabledVisualPicker[_ngcontent-%COMP%]{pointer-events:none;opacity:.4}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]{display:flex;flex-direction:column;background:var(--fluent-theme-white-color, #FFF);padding:3px;border:1px solid var(--gray-110);border-radius:2px}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsRow[_ngcontent-%COMP%]{display:flex;align-items:center}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]{display:flex;justify-content:space-between;padding:0}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer.withAllVisualsSelector[_ngcontent-%COMP%]{margin-bottom:3px}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]{display:flex;flex:1}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol[_ngcontent-%COMP%]{height:24px;width:24px;padding:0;box-sizing:border-box;border:none;background-color:transparent;display:flex;align-items:center;justify-content:center}html:not([dir="rtl"])[_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol[_ngcontent-%COMP%]{margin-right:2px}html[dir="rtl"][_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol[_ngcontent-%COMP%]{margin-left:2px}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol[_ngcontent-%COMP%]   svg-use-symbol[_ngcontent-%COMP%]{height:20px;width:20px}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol.selected[_ngcontent-%COMP%]{background-color:var(--visual-symbol-selected-background-color);border:1px solid var(--visual-symbol-selected-border-color)}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .suggestions[_ngcontent-%COMP%]   .visualSymbol.notSelected[disabled][_ngcontent-%COMP%]{opacity:.4}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .toggleAllVisualsButton[_ngcontent-%COMP%]{border:none;background-color:transparent;border-left:1px solid var(--gray-110);width:24px;box-sizing:border-box}html:not([dir="rtl"])[_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .toggleAllVisualsButton[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .toggleAllVisualsButton[_ngcontent-%COMP%]{padding:0 2px 0 6px}html[dir="rtl"][_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .toggleAllVisualsButton[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   .suggestionsContainer[_ngcontent-%COMP%]   .toggleAllVisualsButton[_ngcontent-%COMP%]{padding:0 6px 0 2px}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker.withSuggestions[_ngcontent-%COMP%]   all-visual-selector[_ngcontent-%COMP%]{padding-top:3px;border-top:1px solid var(--gray-110)}.visualPickerContainer[_ngcontent-%COMP%]   .visualPicker[_ngcontent-%COMP%]   button[disabled][_ngcontent-%COMP%]{color:var(--gray-90)}.visualPickerContainer[_ngcontent-%COMP%]   .autoVisualContainer[_ngcontent-%COMP%]{margin-bottom:2px;margin-top:2px}' ]
            }), AutoVisualComponent;
        }(rx_component.w), section_animation_slider = __webpack_require__(64824), pbi_scrollbar_directive = __webpack_require__(80649), spinner_component = __webpack_require__(73425), drill_through_util = __webpack_require__(42587), modernFieldListDragDrop = __webpack_require__(76312), filterPaneUtils = __webpack_require__(73795), Telemetry = __webpack_require__(21617), tap = __webpack_require__(17653), sqExprStaticMembers = __webpack_require__(74082), sq_aggregation_operations_service = __webpack_require__(28199), exploration_display_name_service = __webpack_require__(13702), script_visuals_service = __webpack_require__(5862), selection_service = __webpack_require__(72262), drag_data_service = __webpack_require__(50702), exploration_capabilities_service = __webpack_require__(48145), drop_directive = __webpack_require__(82214), filter_component = __webpack_require__(77919), tooltip_directive = __webpack_require__(1240);
        function DrillthroughPaneComponent_div_6_Template(rf, ctx) {
            if (1 & rf) {
                var _r5 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 10)(1, "div", 11), core["\u0275\u0275text"](2), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "toggle-switch-modern-lazy", 12), 
                core["\u0275\u0275listener"]("onToggleChange", function($event) {
                    core["\u0275\u0275restoreView"](_r5);
                    var ctx_r4 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r4.crossReportDrillthroughAdapter.fn($event));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](ctx_r0.viewModel.crossReportDrillthroughToggle.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaLabelledby", "cross-report-toggle-id")("toggle", ctx_r0.viewModel.crossReportDrillthroughToggle.value)("isDisabled", ctx_r0.viewModel.crossReportDrillthroughToggle.isDisabled);
            }
        }
        function DrillthroughPaneComponent_div_8_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 10)(1, "div", 13), core["\u0275\u0275text"](2), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "toggle-switch-modern-lazy", 12), 
                core["\u0275\u0275listener"]("onToggleChange", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.filterPassingModeAdapter.fn($event));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](ctx_r1.viewModel.filterPassingModeToggle.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ariaLabelledby", "keep-all-toggle-id")("toggle", ctx_r1.viewModel.filterPassingModeToggle.value)("isDisabled", ctx_r1.viewModel.filterPassingModeToggle.isDisabled);
            }
        }
        function DrillthroughPaneComponent_filter_11_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "filter", 14), 2 & rf && core["\u0275\u0275property"]("viewModel", ctx.$implicit);
        }
        function DrillthroughPaneComponent_filter_14_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "filter", 14), 2 & rf && core["\u0275\u0275property"]("viewModel", ctx.$implicit);
        }
        var IsTransientFilterPipe = function() {
            function IsTransientFilterPipe() {}
            return IsTransientFilterPipe.prototype.transform = function(filterViewModels) {
                return filterViewModels ? _.filter(filterViewModels, function(filterViewModel) {
                    return filterViewModel && filterViewModel.contract && !!filterViewModel.contract.isTransient;
                }) : filterViewModels;
            }, IsTransientFilterPipe.\u0275fac = function(t) {
                return new (t || IsTransientFilterPipe);
            }, IsTransientFilterPipe.\u0275pipe = core["\u0275\u0275definePipe"]({
                name: "isTransientFilter",
                type: IsTransientFilterPipe,
                pure: !1
            }), IsTransientFilterPipe;
        }(), IsNonTransientFilterPipe = function() {
            function IsNonTransientFilterPipe() {}
            return IsNonTransientFilterPipe.prototype.transform = function(filterViewModels) {
                return filterViewModels ? _.filter(filterViewModels, function(filterViewModel) {
                    return filterViewModel && filterViewModel.contract && !filterViewModel.contract.isTransient;
                }) : filterViewModels;
            }, IsNonTransientFilterPipe.\u0275fac = function(t) {
                return new (t || IsNonTransientFilterPipe);
            }, IsNonTransientFilterPipe.\u0275pipe = core["\u0275\u0275definePipe"]({
                name: "isNonTransientFilter",
                type: IsNonTransientFilterPipe,
                pure: !1
            }), IsNonTransientFilterPipe;
        }(), DrillthroughPaneComponent = function(_super) {
            function DrillthroughPaneComponent(aggrOps, conceptualSchemaProxy, dataSources, displayNameService, dragDataService, elementRef, eventBridge, explorationCapabilities, explorationNavigation, featureSwitchService, lazyScoped, localizationService, scriptVisuals, selection, telemetryService, visualAuthoring, visualPlugin) {
                var _this = _super.call(this) || this;
                return _this.aggrOps = aggrOps, _this.conceptualSchemaProxy = conceptualSchemaProxy, 
                _this.dataSources = dataSources, _this.displayNameService = displayNameService, 
                _this.dragDataService = dragDataService, _this.elementRef = elementRef, _this.eventBridge = eventBridge, 
                _this.explorationCapabilities = explorationCapabilities, _this.explorationNavigation = explorationNavigation, 
                _this.featureSwitchService = featureSwitchService, _this.lazyScoped = lazyScoped, 
                _this.localizationService = localizationService, _this.scriptVisuals = scriptVisuals, 
                _this.selection = selection, _this.telemetryService = telemetryService, _this.visualAuthoring = visualAuthoring, 
                _this.visualPlugin = visualPlugin, _this.useModernFormatPane = _this.featureSwitchService.featureSwitches.useModernFormatPane, 
                _this.dropActionHandler = function(dropPosition) {
                    return _this.getDropAction(dropPosition);
                }, _this;
            }
            return (0, tslib_es6.__extends)(DrillthroughPaneComponent, _super), DrillthroughPaneComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var section, resources, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return section = this.explorationNavigation.getCurrentSection(), resources = drill_through_util.j(null == section ? void 0 : section.type, this.localizationService), 
                            this.isDestroyed = !1, this.viewModel = {
                                drillthroughFilters: [],
                                filterPassingModeToggle: {
                                    name: "keepAllFilters",
                                    displayName: resources.keepAllFiltersLabel,
                                    value: !1,
                                    isDisabled: !1,
                                    tooltip: resources.keepAllFiltersTooltip,
                                    type: {
                                        bool: !0
                                    },
                                    show: !0,
                                    placeholder: "",
                                    isValid: !0
                                },
                                crossReportDrillthroughToggle: {
                                    name: "crossReportDrillthrough",
                                    displayName: resources.crossReportDrillthroughLabel,
                                    value: !1,
                                    isDisabled: !1,
                                    tooltip: resources.crossReportDrillthroughTooltip,
                                    type: {
                                        bool: !0
                                    },
                                    show: !1,
                                    placeholder: "",
                                    isValid: !0
                                },
                                resources
                            }, this.filterPassingModeAdapter = this.createEventAdapter(), this.crossReportDrillthroughAdapter = this.createEventAdapter(), 
                            this.filterPassingModeAdapter.$.pipe((0, tap.b)(function(value) {
                                return _this.viewModel.filterPassingModeToggle.value = value;
                            })).subscribe(function() {
                                return _this.onFilterPassingModeToggleChanged();
                            }), this.crossReportDrillthroughAdapter.$.pipe((0, tap.b)(function(value) {
                                return _this.viewModel.crossReportDrillthroughToggle.value = value;
                            })).subscribe(function() {
                                return _this.onCrossReportDrillthroughToggleChanged();
                            }), this.dropConfig = {
                                accept: "field"
                            }, this.onDestroy$.subscribe(function() {
                                _this.subscriptionManager && _this.subscriptionManager.unsubscribeAll(), _this.isDestroyed = !0;
                            }), [ 4, this.createDrillthroughFilters() ];

                          case 1:
                            return _a.sent(), this.isDestroyed || (this.subscriptionManager = this.eventBridge.createChannelSubscriptionManager().subscribe(events.Tuj, function(e, arg) {
                                return _this.onFilterContainerChanged(arg);
                            }).subscribe(events.yVh, function() {
                                return _this.onSectionChanged();
                            }).subscribe(events.CCe, function() {
                                return _this.onModelChanged();
                            }).subscribe(events.wAN, function() {
                                return _this.onCanvasChanged();
                            }).subscribe(events.LE3, function() {
                                return _this.onExplorationLoaded();
                            }).subscribe(events.mke, function(e, args) {
                                return _this.onSectionFiltersContainerChanged(args);
                            }), this.checkAndSetToggle(), (0, modernFieldListDragDrop.$o)(this.elementRef.nativeElement, function(_event, fieldExpr) {
                                return _this.dropDrillthroughFilterFromField(fieldExpr);
                            })), [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.getDropAction = function(dropPosition) {
                var explorePayload = this.dragDataService.getDragContext();
                return explorePayload && explorePayload.field && this.isSupportedDrillthroughFilterExpr(explorePayload.field) ? Promise.resolve(3) : Promise.resolve(0);
            }, DrillthroughPaneComponent.prototype.dropDrillthroughFilter = function() {
                var explorePayload = this.dragDataService.getDragContext();
                explorePayload && explorePayload.field && this.dropDrillthroughFilterFromField(explorePayload.field);
            }, DrillthroughPaneComponent.prototype.dropDrillthroughFilterFromField = function(fieldExpr) {
                var currentSection = this.explorationNavigation.getCurrentSection();
                debug.fF.assertValue(currentSection, "No section"), (0, filterPaneUtils.uE)(1, currentSection, !0, this.dataSources, fieldExpr, this.visualAuthoring, !0), 
                this.checkAndSetToggle();
            }, DrillthroughPaneComponent.prototype.getFilterPaneUtilServices = function() {
                return {
                    aggrOps: this.aggrOps,
                    conceptualSchemaProxy: this.conceptualSchemaProxy,
                    dataSources: this.dataSources,
                    displayNameService: this.displayNameService,
                    eventBridge: this.eventBridge,
                    explorationCapabilities: this.explorationCapabilities,
                    explorationNavigation: this.explorationNavigation,
                    featureSwitchService: this.featureSwitchService,
                    localizationService: this.localizationService,
                    scriptVisuals: this.scriptVisuals,
                    selection: this.selection,
                    telemetryService: this.telemetryService,
                    visualAuthoring: this.visualAuthoring,
                    visualPlugin: this.visualPlugin
                };
            }, DrillthroughPaneComponent.prototype.getKeepAllFiltersTooltipConfig = function() {
                var slice = this.viewModel.filterPassingModeToggle;
                return {
                    tooltipTitle: slice.displayName,
                    tooltipDescription: slice.tooltip
                };
            }, DrillthroughPaneComponent.prototype.getCrossReportDrillthroughTooltipConfig = function() {
                var slice = this.viewModel.crossReportDrillthroughToggle;
                return {
                    tooltipTitle: slice.displayName,
                    tooltipDescription: slice.tooltip
                };
            }, DrillthroughPaneComponent.prototype.getPaneTitleTooltipConfig = function() {
                var resources = this.viewModel.resources;
                return {
                    tooltipTitle: resources.paneTitle,
                    tooltipDescription: resources.paneTitleTooltip
                };
            }, DrillthroughPaneComponent.prototype.onFilterPassingModeToggleChanged = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var section, explorationContract;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return section = this.explorationNavigation.getCurrentSection(), explorationContract = this.explorationNavigation.getCurrentExploration(), 
                            [ 4, this.lazyScoped.get("explorationAuthoring") ];

                          case 1:
                            return _a.sent().setDrillthroughFilterPassingMode(explorationContract, section, this.viewModel.filterPassingModeToggle.value), 
                            [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.onCrossReportDrillthroughToggleChanged = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var section, explorationContract;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return section = this.explorationNavigation.getCurrentSection(), explorationContract = this.explorationNavigation.getCurrentExploration(), 
                            [ 4, this.lazyScoped.get("explorationAuthoring") ];

                          case 1:
                            return _a.sent().setCrossReportDrillthrough(explorationContract, section, this.viewModel.crossReportDrillthroughToggle.value), 
                            [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.onSectionChanged = function() {
                var section = this.explorationNavigation.getCurrentSection();
                debug.fF.assertValue(section, "section undefined in onSectionChanged"), this.viewModel.resources = drill_through_util.j(section.type, this.localizationService), 
                this.checkAndSetToggle();
            }, DrillthroughPaneComponent.prototype.onModelChanged = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.createDrillthroughFilters() ];

                          case 1:
                            return _a.sent(), this.checkAndSetToggle(), [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.onCanvasChanged = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.createDrillthroughFilters() ];

                          case 1:
                            return _a.sent(), this.checkAndSetToggle(), [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.onExplorationLoaded = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.createDrillthroughFilters() ];

                          case 1:
                            return _a.sent(), this.checkAndSetToggle(), [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.onFilterContainerChanged = function(arg) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var filters, filterPaneUtilServices, exploration, schema;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return filters = this.viewModel.drillthroughFilters, filterPaneUtilServices = this.getFilterPaneUtilServices(), 
                            (0, filterPaneUtils.Rh)(filterPaneUtilServices, 1, filters, arg), arg.filter && 5 === arg.filter.howCreated ? (exploration = this.explorationNavigation.getCurrentExploration(), 
                            [ 4, (0, filterPaneUtils.PJ)(this.dataSources, this.conceptualSchemaProxy) ]) : [ 3, 2 ];

                          case 1:
                            schema = _a.sent(), (0, filterPaneUtils.Z)(arg, filters, exploration, filterPaneUtilServices, schema), 
                            _a.label = 2;

                          case 2:
                            return this.checkAndSetToggle(), [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.isSupportedDrillthroughFilterExpr = function(expr) {
                return (0, sqExprStaticMembers.kb)(expr) || (0, sqExprStaticMembers.t3)(expr) || (0, 
                sqExprStaticMembers.ez)(expr) || (0, sqExprStaticMembers.wD)(expr);
            }, DrillthroughPaneComponent.prototype.onSectionFiltersContainerChanged = function(args) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return args.container !== this.explorationNavigation.getCurrentSection() ? [ 3, 2 ] : [ 4, this.createDrillthroughFilters() ];

                          case 1:
                            _a.sent(), this.checkAndSetToggle(), _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.createDrillthroughFilters = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var filterPaneUtilServices, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return filterPaneUtilServices = this.getFilterPaneUtilServices(), _a = this.viewModel, 
                            [ 4, (0, filterPaneUtils.JN)(filterPaneUtilServices, 5) ];

                          case 1:
                            return _a.drillthroughFilters = _b.sent(), [ 2 ];
                        }
                    });
                });
            }, DrillthroughPaneComponent.prototype.checkAndSetToggle = function() {
                var _a, section = this.explorationNavigation.getCurrentSection(), exploration = this.explorationNavigation.getCurrentExploration(), controlStates = drill_through_util.F(exploration, section, this.viewModel.resources, !0), filterPassingModeToggle = (_a = this.viewModel).filterPassingModeToggle, crossReportDrillthroughToggle = _a.crossReportDrillthroughToggle;
                filterPassingModeToggle.isDisabled = controlStates.keepAllFilters.disabled, filterPassingModeToggle.value = controlStates.keepAllFilters.value, 
                filterPassingModeToggle.tooltip = controlStates.keepAllFilters.tooltip, crossReportDrillthroughToggle.show = controlStates.crossReportDrillthrough.show, 
                crossReportDrillthroughToggle.isDisabled = controlStates.crossReportDrillthrough.disabled, 
                crossReportDrillthroughToggle.value = controlStates.crossReportDrillthrough.value;
            }, DrillthroughPaneComponent.prototype.trackByFn = function(_index, filter) {
                return null == filter ? void 0 : filter.id;
            }, DrillthroughPaneComponent.\u0275fac = function(t) {
                return new (t || DrillthroughPaneComponent)(core["\u0275\u0275directiveInject"](sq_aggregation_operations_service.C), core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](exploration_display_name_service.O), core["\u0275\u0275directiveInject"](drag_data_service.x), core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](exploration_capabilities_service.U), core["\u0275\u0275directiveInject"](exploration_navigation_service.z), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](script_visuals_service.k), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](Telemetry.y0), core["\u0275\u0275directiveInject"](visual_authoring_service.$8), core["\u0275\u0275directiveInject"](visual_plugin_service.D));
            }, DrillthroughPaneComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: DrillthroughPaneComponent,
                selectors: [ [ "drillthrough-pane" ] ],
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 18,
                vars: 19,
                consts: [ [ 1, "sectionHeader", "drillthroughSectionHeader" ], [ 1, "sectionTitle", "sidePaneTitle", "unselectable", "largeFontSize", 3, "pbi-tooltip" ], [ 1, "drillthroughPane", "filterPane", "filterPaneClassic", "propertyPaneContents" ], [ 3, "pbi-tooltip" ], [ "class", "toggle-container", 4, "ngIf" ], [ 1, "cards", 3, "drop", "dropAction", "dropHandler" ], [ 1, "linkFieldFilters" ], [ "dataAutomationType", "filterCard", 3, "viewModel", 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ 1, "transientFilters" ], [ 1, "unselectable", "trimmedTextWithEllipsis", 3, "ngClass" ], [ 1, "toggle-container" ], [ "id", "cross-report-toggle-id", 1, "toggle-text" ], [ 3, "ariaLabelledby", "toggle", "isDisabled", "onToggleChange" ], [ "id", "keep-all-toggle-id", 1, "toggle-text" ], [ "dataAutomationType", "filterCard", 3, "viewModel" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "h3", 0)(1, "span", 1), core["\u0275\u0275text"](2), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](3, "section", 2)(4, "div")(5, "div", 3), 
                    core["\u0275\u0275template"](6, DrillthroughPaneComponent_div_6_Template, 4, 4, "div", 4), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](7, "div", 3), 
                    core["\u0275\u0275template"](8, DrillthroughPaneComponent_div_8_Template, 4, 4, "div", 4), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](9, "div", 5), 
                    core["\u0275\u0275listener"]("dropHandler", function() {
                        return ctx.dropDrillthroughFilter();
                    }), core["\u0275\u0275elementStart"](10, "ul", 6), core["\u0275\u0275template"](11, DrillthroughPaneComponent_filter_11_Template, 1, 1, "filter", 7), 
                    core["\u0275\u0275pipe"](12, "isNonTransientFilter"), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275elementStart"](13, "ul", 8), core["\u0275\u0275template"](14, DrillthroughPaneComponent_filter_14_Template, 1, 1, "filter", 7), 
                    core["\u0275\u0275pipe"](15, "isTransientFilter"), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275elementStart"](16, "div", 9), core["\u0275\u0275text"](17), core["\u0275\u0275elementEnd"]()()()()), 
                    2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("pbi-tooltip", ctx.getPaneTitleTooltipConfig()), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", ctx.viewModel.resources.paneTitle, " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("pbi-tooltip", ctx.getCrossReportDrillthroughTooltipConfig()), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.viewModel.crossReportDrillthroughToggle.show && ctx.useModernFormatPane), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("pbi-tooltip", ctx.getKeepAllFiltersTooltipConfig()), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.useModernFormatPane), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("drop", ctx.dropConfig)("dropAction", ctx.dropActionHandler), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](12, 15, ctx.viewModel.drillthroughFilters))("ngForTrackBy", ctx.trackByFn), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](15, 17, ctx.viewModel.drillthroughFilters))("ngForTrackBy", ctx.trackByFn), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngClass", 0 === ctx.viewModel.drillthroughFilters.length ? "dropzone" : "end-dropzone"), 
                    core["\u0275\u0275attribute"]("tabindex", 0 === ctx.viewModel.drillthroughFilters.length ? 0 : -1), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", 0 === ctx.viewModel.drillthroughFilters.length ? ctx.viewModel.resources.dropZoneText : "", " "));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, drop_directive.W, filter_component.z, toggle_switch_modern_lazy_component.I, tooltip_directive.i, IsNonTransientFilterPipe, IsTransientFilterPipe ],
                styles: [ '.drillthroughPane[_ngcontent-%COMP%]{width:100%;box-sizing:border-box;padding:0 6px 4px 4px}.drillthroughPane[_ngcontent-%COMP%]   ul.transientFilters[_ngcontent-%COMP%]{font-style:italic}.modern[_nghost-%COMP%]   .drillthroughSectionHeader[_ngcontent-%COMP%]{padding:6px 4px 4px;font-size:unset;margin-left:8px}.modern[_nghost-%COMP%]   .drillthroughSectionHeader[_ngcontent-%COMP%]   .sectionTitle[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-semi-bold, 600);margin:0;line-height:16px}.modern[_nghost-%COMP%]   .toggle-container[_ngcontent-%COMP%]{display:flex;justify-content:space-between;padding:5px 0;margin-left:8px}.modern[_nghost-%COMP%]   .filterPane[_ngcontent-%COMP%]   .cards[_ngcontent-%COMP%]{margin-top:5px}.filterPane[_ngcontent-%COMP%]{--field-well-title-color: var(--gray-180, #252423);--field-well-bucket-border-color: var(--gray-60, #C8C6C4);float:left;width:100%;box-sizing:border-box;padding:0 6px 4px 4px;overflow:visible}  [data-legacy-theming=false] .filterPane{--field-well-title-color: var(--colorNeutralForeground1);--field-well-bucket-border-color: var(--colorNeutralStroke1)}.filterPane[_ngcontent-%COMP%]   .bucket[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:100%}.filterPane[_ngcontent-%COMP%]   .bucket[_ngcontent-%COMP%]:focus{outline:none}.filterPane[_ngcontent-%COMP%]   .bucket[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{color:var(--gray-180, #252423);display:flex;margin:6px 5px 6px 0;box-sizing:border-box;font-weight:inherit}.filterPane[_ngcontent-%COMP%]   .bucket[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .caption[_ngcontent-%COMP%]{margin-left:12px;font-size:var(--sm-font-size, 12px)}.filterPane[_ngcontent-%COMP%]   .bucket[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .caption[_ngcontent-%COMP%]:focus{outline:none}.filterPane[_ngcontent-%COMP%]   .cards[_ngcontent-%COMP%]{float:left;width:100%;box-sizing:border-box;background-color:var(--fluent-theme-white-color, #FFF);border:1px dashed var(--field-well-bucket-border-color);border-radius:2px}.filterPane[_ngcontent-%COMP%]   .cards.append[_ngcontent-%COMP%]{border-color:var(--gray-130, #605E5C)}.filterPane[_ngcontent-%COMP%]   .dropzone[_ngcontent-%COMP%]{color:var(--field-well-title-color);padding:4px 8px}html[data-focus-source=key][_ngcontent-%COMP%]   .filterPane[_ngcontent-%COMP%]   .dropzone[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:-1px}.filterPane[_ngcontent-%COMP%]   .end-dropzone[_ngcontent-%COMP%]{height:8px}' ]
            }), DrillthroughPaneComponent;
        }(rx_component.w), field_well_view_model = __webpack_require__(84431), visualContainer1 = __webpack_require__(15580), selectionUtils = __webpack_require__(21728), visualAuthoringCore = __webpack_require__(66794), fieldWellUtility = __webpack_require__(41606), comparable = __webpack_require__(55201), focusManager = __webpack_require__(65302), dataViewObjectDefinition1 = __webpack_require__(5265), Subscription = __webpack_require__(34763), empty = __webpack_require__(37272), switchMap = __webpack_require__(81905), running_visual_service = __webpack_require__(8082), visibility_service = __webpack_require__(15393), grouping_design_state_service = __webpack_require__(23983), show_value_as_service = __webpack_require__(85677), visual_calc_eager_service = __webpack_require__(88409), telemetry_events = __webpack_require__(40702), promiseFactory = __webpack_require__(14463);
        function getSchemaPromise(dataSources, promiseFactory, conceptualSchemaProxy) {
            return dataSources ? conceptualSchemaProxy.get(dataSources) : promiseFactory.reject();
        }
        var rx_rx_component = __webpack_require__(12587), combineLatest = __webpack_require__(59017), map = __webpack_require__(14172), shareReplay = __webpack_require__(57243), group_authoring_service = __webpack_require__(28149), view_mode_state_service = __webpack_require__(77200), tri_svg_icon_component = __webpack_require__(74913), conditional_formatting_dialog_launcher_service = __webpack_require__(79930), field_well_view_model_operations_util = __webpack_require__(89839), visual_container_menu_factory_service = __webpack_require__(72038), semanticGroupingDefinition = __webpack_require__(47755), dataViewObjectSerializer = __webpack_require__(54766), semanticQuerySerializer = __webpack_require__(3468), dragDropUtils = __webpack_require__(42342), arrayExtensions = __webpack_require__(50550), zone = __webpack_require__(79602), query = __webpack_require__(19008), fieldExprPatternToSQExprConverter = __webpack_require__(80366), fieldExprPatternBuilder = __webpack_require__(76001), sqExpr = __webpack_require__(94419), sqHierarchyExprUtils1 = __webpack_require__(45551), sqExprEqualityVisitor = __webpack_require__(45413), isMeasure = __webpack_require__(58295), context_activity_utils = __webpack_require__(58609), model_change_handler_service = __webpack_require__(54165), theme_service = __webpack_require__(67660), sparklines_service = __webpack_require__(62812), pbi_menu_service = __webpack_require__(5467), screen_reader_service = __webpack_require__(83309), drag_directive = __webpack_require__(53267), fesm2022_forms = __webpack_require__(17174), accessible_click_directive = __webpack_require__(44581), pbi_editable_label_directive = __webpack_require__(24150), pbi_svg_use_symbol_component = __webpack_require__(45916);
        function FieldWellFieldModernComponent_li_0_ng_template_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "div", 13)(1, "div", 14), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("textContent", ctx_r2.viewModel.displayOptions.tooltipTitle), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("textContent", ctx_r2.viewModel.displayOptions.tooltipDescription);
            }
        }
        function FieldWellFieldModernComponent_li_0_i_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r12 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "i", 15), core["\u0275\u0275listener"]("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r12);
                    var ctx_r11 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r11.editLabel());
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275element"](2, "pbi-svg-use-symbol", 16), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](1, 3, ctx_r3.editableLabelAriaLabel$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("sheet", "fieldListPaneIcons")("symbolId", "fieldListError");
            }
        }
        function FieldWellFieldModernComponent_li_0_tri_svg_icon_5_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "tri-svg-icon", 17);
        }
        function FieldWellFieldModernComponent_li_0_i_7_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "i", 18), 2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ngClass", ctx_r5.viewModel.displayOptions.glyph);
            }
        }
        function FieldWellFieldModernComponent_li_0_input_10_Template(rf, ctx) {
            if (1 & rf) {
                var _r14 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "input", 19), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r13 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r13.editableLabelName = $event);
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ngModel", ctx_r6.editableLabelName), core["\u0275\u0275attribute"]("maxlength", ctx_r6.maxInputlength);
            }
        }
        function FieldWellFieldModernComponent_li_0_button_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r16 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 20), core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r16);
                    var ctx_r15 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r15.toggleHiddenProjection($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275element"](2, "tri-svg-icon", 21), 
                core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r7 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](1, 3, ctx_r7.tooltipForHide$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("name", core["\u0275\u0275pipeBind1"](3, 5, ctx_r7.iconNameForHide$))("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 7, ctx_r7.tooltipForHide$));
            }
        }
        function FieldWellFieldModernComponent_li_0_button_13_pbi_svg_use_symbol_2_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "pbi-svg-use-symbol", 24);
        }
        var field_well_field_component_c0 = function(a0) {
            return {
                "glyphicon glyph-mini pbi-glyph-chevrondownsmall": a0
            };
        };
        function FieldWellFieldModernComponent_li_0_button_13_Template(rf, ctx) {
            if (1 & rf) {
                var _r19 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 22), core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r18 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r18.showMenu($event));
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275template"](2, FieldWellFieldModernComponent_li_0_button_13_pbi_svg_use_symbol_2_Template, 1, 0, "pbi-svg-use-symbol", 23), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r8 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](5, field_well_field_component_c0, ctx_r8.newPaneColorsEnabled)), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](1, 3, ctx_r8.editableLabelAriaLabel$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !ctx_r8.newPaneColorsEnabled);
            }
        }
        function FieldWellFieldModernComponent_li_0_button_14_Template(rf, ctx) {
            if (1 & rf) {
                var _r21 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 25), core["\u0275\u0275listener"]("click", function($event) {
                    core["\u0275\u0275restoreView"](_r21);
                    var ctx_r20 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r20.deleteFieldAndFocus($event));
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r9 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275attribute"]("aria-label", ctx_r9.removeAriaLabel);
            }
        }
        function FieldWellFieldModernComponent_li_0_ol_15_li_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r26 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "li", 28), core["\u0275\u0275element"](1, "span", 29), 
                core["\u0275\u0275elementStart"](2, "button", 25), core["\u0275\u0275listener"]("click", function($event) {
                    var i_r24 = core["\u0275\u0275restoreView"](_r26).index, ctx_r25 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r25.deleteFieldAndFocus($event, i_r24));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var hierarchyLevel_r23 = ctx.$implicit, ctx_r22 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("textContent", hierarchyLevel_r23.displayName), 
                core["\u0275\u0275attribute"]("aria-label", hierarchyLevel_r23.displayName), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275attribute"]("aria-label", ctx_r22.removeAriaLabel);
            }
        }
        function FieldWellFieldModernComponent_li_0_ol_15_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "ol", 26), core["\u0275\u0275template"](1, FieldWellFieldModernComponent_li_0_ol_15_li_1_Template, 3, 3, "li", 27), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r10 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r10.viewModel.hierarchyLevels);
            }
        }
        var field_well_field_component_c1 = function(a0, a1) {
            return {
                "can-prepend": a0,
                "not-draggable": a1
            };
        };
        function FieldWellFieldModernComponent_li_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r28 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "li", 1), core["\u0275\u0275listener"]("dropHandler", function($event) {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r27 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r27.drop($event.event, $event.ui, $event.dropAction));
                }), core["\u0275\u0275template"](1, FieldWellFieldModernComponent_li_0_ng_template_1_Template, 2, 2, "ng-template", null, 2, core["\u0275\u0275templateRefExtractor"]), 
                core["\u0275\u0275elementStart"](3, "h2", 3), core["\u0275\u0275listener"]("contextmenu", function($event) {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r29 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r29.showMenu($event));
                }), core["\u0275\u0275template"](4, FieldWellFieldModernComponent_li_0_i_4_Template, 3, 5, "i", 4), 
                core["\u0275\u0275template"](5, FieldWellFieldModernComponent_li_0_tri_svg_icon_5_Template, 1, 0, "tri-svg-icon", 5), 
                core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275template"](7, FieldWellFieldModernComponent_li_0_i_7_Template, 1, 1, "i", 6), 
                core["\u0275\u0275elementStart"](8, "div", 7), core["\u0275\u0275listener"]("dblclick", function() {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r30 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r30.editLabel());
                })("keydown.enter", function() {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r31 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r31.editLabel());
                })("keydown.space", function() {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r32 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r32.editLabel());
                })("click", function() {
                    core["\u0275\u0275restoreView"](_r28);
                    var ctx_r33 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r33.editVisualCalc());
                }), core["\u0275\u0275pipe"](9, "async"), core["\u0275\u0275template"](10, FieldWellFieldModernComponent_li_0_input_10_Template, 1, 2, "input", 8), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](11, FieldWellFieldModernComponent_li_0_button_11_Template, 5, 9, "button", 9), 
                core["\u0275\u0275pipe"](12, "async"), core["\u0275\u0275template"](13, FieldWellFieldModernComponent_li_0_button_13_Template, 3, 7, "button", 10), 
                core["\u0275\u0275template"](14, FieldWellFieldModernComponent_li_0_button_14_Template, 1, 1, "button", 11), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](15, FieldWellFieldModernComponent_li_0_ol_15_Template, 2, 1, "ol", 12), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var _r1 = core["\u0275\u0275reference"](2), ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction2"](30, field_well_field_component_c1, !ctx_r0.viewModel.interactivityOptions.isReplaceable, !ctx_r0.viewModel.interactivityOptions.isDraggableField))("drag", "field")("dragDisabled", !ctx_r0.viewModel.interactivityOptions.isDraggableField)("getDragContext", ctx_r0.getDragContext)("drop", ctx_r0.dropConfig)("dropAction", ctx_r0.dropActionHandler)("dropContainerId", ctx_r0.fieldDropUniqueId)("pbiTooltip", _r1)("pbiTooltipDisabled", ctx_r0.isTooltipDisabled)("pbiTooltipHideDelay", 100)("pbiTooltipMaxHeight", "92vh")("pbiTooltipPosition", "before"), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", !ctx_r0.viewModel.valid), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](6, 24, ctx_r0.hasVisualCalcExpression$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r0.viewModel.displayOptions.glyph), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngStyle", core["\u0275\u0275pipeBind1"](9, 26, ctx_r0.displayNameStyle$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("pbiEditableLabel", ctx_r0.pbiEditableLabelOptions)("pbiEditableLabelValue", ctx_r0.currentDisplayName)("pbiEditableLabelMode", ctx_r0.viewModel.isEditingLabel)("pbiEditableLabelEditable", ctx_r0.viewModel.isEditingLabel), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](12, 28, ctx_r0.showHideButton$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r0.viewModel.interactivityOptions.hasContextMenu), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.viewModel.interactivityOptions.isRemovableField), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.viewModel.hierarchyLevels);
            }
        }
        var FieldWellFieldModernComponent = function(_super) {
            function FieldWellFieldModernComponent(changeDetection, conceptualSchemaProxy, contextActivityService, dataSources, dragDataService, element, eventBridge, explorationCapabilities, explorationNavigation, featureSwitchService, groupAuthoring, lazyScoped, localizationService, modelChangeHandler, pbiMenuService, promiseFactory, screenReaderService, selection, showValueAsService, sparklinesService, telemetryService, themeService, visibilityService, visualAuthoring, visualCalcEagerService, visualPlugin) {
                var _this = _super.call(this) || this;
                return _this.changeDetection = changeDetection, _this.conceptualSchemaProxy = conceptualSchemaProxy, 
                _this.contextActivityService = contextActivityService, _this.dataSources = dataSources, 
                _this.dragDataService = dragDataService, _this.element = element, _this.eventBridge = eventBridge, 
                _this.explorationCapabilities = explorationCapabilities, _this.explorationNavigation = explorationNavigation, 
                _this.featureSwitchService = featureSwitchService, _this.groupAuthoring = groupAuthoring, 
                _this.lazyScoped = lazyScoped, _this.localizationService = localizationService, 
                _this.modelChangeHandler = modelChangeHandler, _this.pbiMenuService = pbiMenuService, 
                _this.promiseFactory = promiseFactory, _this.screenReaderService = screenReaderService, 
                _this.selection = selection, _this.showValueAsService = showValueAsService, _this.sparklinesService = sparklinesService, 
                _this.telemetryService = telemetryService, _this.themeService = themeService, _this.visibilityService = visibilityService, 
                _this.visualAuthoring = visualAuthoring, _this.visualCalcEagerService = visualCalcEagerService, 
                _this.visualPlugin = visualPlugin, _this.maxInputlength = 100, _this.getDragContext = function() {
                    return {
                        sourceIndex: _this.viewModel.startIndex,
                        sourceRole: _this.viewModel.role,
                        hierarchyLevelCount: _this.viewModel.hierarchyLevels.length
                    };
                }, _this.fieldDropUniqueId = _.uniqueId("fieldDropUniqueId"), _this.element.nativeElement.id = _this.fieldDropUniqueId, 
                _this.pbiEditableLabelOptions = {
                    disableClick: !0,
                    customTooltip: !0,
                    inputMatchLabelWidth: !1,
                    onEdit: function() {
                        return _this.editLabel();
                    },
                    onBlur: function() {
                        return _this.rename();
                    }
                }, _this.showFieldTooltip = _this.localizationService.get("Visual_Calculation_Field_Well_Show_In_Visual"), 
                _this.hideFieldTooltip = _this.localizationService.get("Visual_Calculation_Field_Well_Hide_From_Visual"), 
                _this.tooltipConfigManager = {
                    getTooltipConfig: function() {
                        return {
                            tooltipTitle: _this.viewModel.displayOptions.tooltipTitle,
                            tooltipDescription: _this.viewModel.displayOptions.tooltipDescription
                        };
                    }
                }, _this.dropConfig = {
                    accept: "field",
                    greedy: !1
                }, _this.removeAriaLabel = _this.localizationService.get("FieldWell_Remove"), _this.newPaneColorsEnabled = _this.explorationCapabilities.getCapabilities().showFluentDesign || _this.featureSwitchService.featureSwitches && _this.featureSwitchService.featureSwitches.paneColorRefresh, 
                _this;
            }
            return (0, tslib_es6.__extends)(FieldWellFieldModernComponent, _super), Object.defineProperty(FieldWellFieldModernComponent.prototype, "currentDisplayName", {
                get: function() {
                    return this.viewModel.displayOptions.displayName;
                },
                enumerable: !1,
                configurable: !0
            }), FieldWellFieldModernComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.core = new FieldWellFieldCore({
                    conceptualSchemaProxy: this.conceptualSchemaProxy,
                    contextActivityService: this.contextActivityService,
                    dataSources: this.dataSources,
                    eventBridge: this.eventBridge,
                    explorationNavigation: this.explorationNavigation,
                    featureSwitchService: this.featureSwitchService,
                    groupAuthoring: this.groupAuthoring,
                    lazyScoped: this.lazyScoped,
                    localizationService: this.localizationService,
                    modelChangeHandler: this.modelChangeHandler,
                    promiseFactory: this.promiseFactory,
                    screenReaderService: this.screenReaderService,
                    selection: this.selection,
                    showValueAsService: this.showValueAsService,
                    sparklinesService: this.sparklinesService,
                    telemetryService: this.telemetryService,
                    themeService: this.themeService,
                    visualAuthoring: this.visualAuthoring,
                    visualPlugin: this.visualPlugin,
                    visibilityService: this.visibilityService,
                    visualCalcEagerService: this.visualCalcEagerService
                }, function() {
                    focusManager.IK.focus($(_this.element.nativeElement).find(".fieldWellIcon.dropDown")[0]);
                }), this.core.viewModel = this.viewModel, this.core.bucketDisplayName = this.bucketDisplayName;
                var modernFieldlistDropElement = this.element.nativeElement;
                modernFieldlistDropElement && (0, modernFieldListDragDrop.$o)(modernFieldlistDropElement, function(_event, fieldExpr, dropPosition) {
                    return _this.core.dropField(fieldExpr, _this.getFieldDropAction(dropPosition));
                }, function(dropPosition) {
                    return _this.getFieldDropAction(dropPosition);
                }), this.dropActionHandler = function(dropPosition) {
                    return Promise.resolve(_this.getDropAction(dropPosition));
                }, this.editableLabelName = this.currentDisplayName;
                var sharedViewModel$ = this.changes$("viewModel").pipe((0, shareReplay.d)());
                this.hasVisualCalcExpression$ = sharedViewModel$.pipe((0, map.U)(function(viewModel) {
                    var fieldExpr = viewModel.expr;
                    return viewModel.valid && !!fieldExpr && (0, sqExprStaticMembers.jX)(fieldExpr);
                }), (0, takeUntil.R)(this.onDestroy$)), this.iconNameForHide$ = sharedViewModel$.pipe((0, 
                map.U)(function(viewModel) {
                    return (null == viewModel ? void 0 : viewModel.isHiddenInVisual) ? "eye_off_16_regular" : "eye_16_regular";
                }), (0, takeUntil.R)(this.onDestroy$)), this.tooltipForHide$ = sharedViewModel$.pipe((0, 
                map.U)(function(viewModel) {
                    return (null == viewModel ? void 0 : viewModel.isHiddenInVisual) ? _this.showFieldTooltip : _this.hideFieldTooltip;
                }), (0, takeUntil.R)(this.onDestroy$)), this.showHideButton$ = (0, combineLatest.aj)([ sharedViewModel$, this.visibilityService.get$(16) ]).pipe((0, 
                map.U)(function(_a) {
                    var viewModel = _a[0], container = _a[1], fieldExpr = null == viewModel ? void 0 : viewModel.expr;
                    return null != fieldExpr && ((0, isMeasure.k)(fieldExpr) || (0, sqExprStaticMembers.jX)(fieldExpr)) && 16 === (null == container ? void 0 : container.visibility);
                }), (0, takeUntil.R)(this.onDestroy$)), this.editableLabelAriaLabel$ = sharedViewModel$.pipe((0, 
                map.U)(function(viewModel) {
                    return _this.getEditableLabelAriaLabel(viewModel);
                })), this.displayNameStyle$ = (0, combineLatest.aj)([ sharedViewModel$, this.visibilityService.get$(16) ]).pipe((0, 
                map.U)(function(_a) {
                    var container = _a[1];
                    if (16 === (null == container ? void 0 : container.visibility)) return _a[0].displayOptions.pbiStyle;
                }), (0, takeUntil.R)(this.onDestroy$)), this.changeDetection.detectChanges();
            }, Object.defineProperty(FieldWellFieldModernComponent.prototype, "isTooltipDisabled", {
                get: function() {
                    var displayOptions = this.viewModel.displayOptions;
                    return _.isEmpty(displayOptions.tooltipDescription) && _.isEmpty(displayOptions.tooltipTitle);
                },
                enumerable: !1,
                configurable: !0
            }), FieldWellFieldModernComponent.prototype.onDestroy = function() {
                this.core.onDestroy();
            }, FieldWellFieldModernComponent.prototype.getDropAction = function(dropPosition) {
                var fieldWellPayload = this.dragDataService.getDragContext(), interactivityOptions = this.viewModel.interactivityOptions, dropAction = interactivityOptions.canAppend ? 3 : 2;
                if (fieldWellPayload && interactivityOptions.isDroppableField && (interactivityOptions.canAppend || interactivityOptions.canPrepend)) {
                    var sourceRole = fieldWellPayload.sourceRole;
                    if (sourceRole) {
                        var countExpressionsInDraggedProperty = fieldWellPayload.hierarchyLevelCount || 1, sourceIndex = fieldWellPayload.sourceIndex, isAppend = !interactivityOptions.canPrepend || (0, 
                        dragDropUtils.wc)(dropPosition);
                        if (this.core.getTargetIndex(sourceRole, sourceIndex, countExpressionsInDraggedProperty, {
                            role: this.viewModel.role,
                            startIndex: this.viewModel.startIndex,
                            hierarchyLevelsLength: this.viewModel.hierarchyLevels ? this.viewModel.hierarchyLevels.length : 0
                        }, isAppend) < 0) return 0;
                    }
                    interactivityOptions.isReplaceable && interactivityOptions.isReplaceOnly ? dropAction = 1 : (0, 
                    dragDropUtils.W6)(dropPosition) && interactivityOptions.canPrepend && (dropAction = 2);
                } else dropAction = 0;
                return dropAction;
            }, FieldWellFieldModernComponent.prototype.drop = function(_event, _args, dropAction) {
                var dragPayload = this.dragDataService.getDragContext();
                this.core.dropWithPayloadAndAction(dragPayload, dropAction);
            }, FieldWellFieldModernComponent.prototype.deleteField = function(index) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.core.deleteField(index) ];
                    });
                });
            }, FieldWellFieldModernComponent.prototype.deleteFieldAndFocus = function($event, index) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.core.deleteFieldAndFocus($event, index) ];
                    });
                });
            }, FieldWellFieldModernComponent.prototype.selectFieldMenuItem = function(fieldWellMenuItemOption) {
                this.core.selectFieldMenuItem(fieldWellMenuItemOption);
            }, FieldWellFieldModernComponent.prototype.showMenu = function(event) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var options, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return event.preventDefault(), options = {
                            anchorElement: $(event.currentTarget)
                        }, this.pbiMenuService.open(visual_container_menu_factory_service.p.getPbiMenuConfig(this.viewModel.interactivityOptions.dropDownItems, event.currentTarget, !1, !1, options)).onButtonClick$.pipe((0, 
                        take.q)(1)).subscribe(function(item) {
                            _this.selectFieldMenuItem(item.id);
                        }), event.keyCode === $.ui.keyCode.SPACE && event.stopPropagation(), [ 2 ];
                    });
                });
            }, FieldWellFieldModernComponent.prototype.editLabel = function() {
                this.core.editLabel();
            }, FieldWellFieldModernComponent.prototype.cancelRename = function() {
                this.core.cancelRename(), this.changeDetection.detectChanges();
            }, FieldWellFieldModernComponent.prototype.rename = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.core.rename(this.editableLabelName) ];

                          case 1:
                            return _a.sent(), this.cancelRename(), [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldModernComponent.prototype.toggleHiddenProjection = function(event) {
                return event.preventDefault(), this.toggleFieldHidden();
            }, FieldWellFieldModernComponent.prototype.editVisualCalc = function() {
                var _a;
                if (16 === (null === (_a = this.visibilityService.get(16)) || void 0 === _a ? void 0 : _a.visibility)) {
                    var fieldExpr = this.viewModel.expr;
                    null !== fieldExpr && (0, sqExprStaticMembers.jX)(fieldExpr) && this.core.editVisualCalculation();
                }
            }, FieldWellFieldModernComponent.prototype.toggleFieldHidden = function() {
                var role = this.viewModel.role, index = this.viewModel.startIndex, visualContainer = this.core.getSelectedVisual(), dataSources = this.dataSources.get();
                return this.visualAuthoring.toggleFieldHidden(role, index, visualContainer, dataSources);
            }, FieldWellFieldModernComponent.prototype.getFieldDropAction = function(dropPosition) {
                var interactivityOptions = this.viewModel.interactivityOptions;
                return interactivityOptions.isDroppableField && (interactivityOptions.canAppend || interactivityOptions.canPrepend) ? interactivityOptions.isReplaceable && interactivityOptions.isReplaceOnly ? 1 : (0, 
                dragDropUtils.W6)(dropPosition) && interactivityOptions.canPrepend ? 2 : (0, dragDropUtils.wc)(dropPosition) && interactivityOptions.canAppend ? 3 : 0 : 0;
            }, FieldWellFieldModernComponent.prototype.getEditableLabelAriaLabel = function(viewModel) {
                var editableLabelString = viewModel.displayOptions.displayName;
                return _.isString(viewModel.displayOptions.tooltipTitle) && (editableLabelString = _.isString(editableLabelString) ? editableLabelString.concat(". ", viewModel.displayOptions.tooltipTitle) : viewModel.displayOptions.tooltipTitle), 
                _.isString(viewModel.displayOptions.tooltipDescription) && (editableLabelString = _.isString(editableLabelString) ? editableLabelString.concat(". ", viewModel.displayOptions.tooltipDescription) : viewModel.displayOptions.tooltipDescription), 
                editableLabelString;
            }, FieldWellFieldModernComponent.\u0275fac = function(t) {
                return new (t || FieldWellFieldModernComponent)(core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](context_activity_service.r), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](drag_data_service.x), core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](exploration_capabilities_service.U), core["\u0275\u0275directiveInject"](exploration_navigation_service.z), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](group_authoring_service.RD), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](model_change_handler_service.x), core["\u0275\u0275directiveInject"](pbi_menu_service.o), core["\u0275\u0275directiveInject"](promiseFactory.t), core["\u0275\u0275directiveInject"](screen_reader_service.g), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](show_value_as_service.P), core["\u0275\u0275directiveInject"](sparklines_service.s), core["\u0275\u0275directiveInject"](Telemetry.y0), core["\u0275\u0275directiveInject"](theme_service.f), core["\u0275\u0275directiveInject"](visibility_service.w), core["\u0275\u0275directiveInject"](visual_authoring_service.$8), core["\u0275\u0275directiveInject"](visual_calc_eager_service.w), core["\u0275\u0275directiveInject"](visual_plugin_service.D));
            }, FieldWellFieldModernComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FieldWellFieldModernComponent,
                selectors: [ [ "field-well-field-modern" ] ],
                inputs: {
                    bucketDisplayName: "bucketDisplayName",
                    viewModel: "viewModel"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ conditional_formatting_dialog_launcher_service.Wg ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 1,
                vars: 1,
                consts: [ [ "role", "listitem", "class", "fieldWellProperty", "data-testid", "field-well-property", 3, "ngClass", "drag", "dragDisabled", "getDragContext", "drop", "dropAction", "dropContainerId", "pbiTooltip", "pbiTooltipDisabled", "pbiTooltipHideDelay", "pbiTooltipMaxHeight", "pbiTooltipPosition", "dropHandler", 4, "ngIf" ], [ "role", "listitem", "data-testid", "field-well-property", 1, "fieldWellProperty", 3, "ngClass", "drag", "dragDisabled", "getDragContext", "drop", "dropAction", "dropContainerId", "pbiTooltip", "pbiTooltipDisabled", "pbiTooltipHideDelay", "pbiTooltipMaxHeight", "pbiTooltipPosition", "dropHandler" ], [ "tooltipTemplateRef", "" ], [ 1, "flex", "smallFontSize", 3, "contextmenu" ], [ "tabindex", "0", "role", "button", "class", "errorIcon error item-auto", 3, "accessible-click", 4, "ngIf" ], [ "class", "fieldIcon", "sprite", "visual-calc-icons", "name", "data_histogram_function_20_regular", 4, "ngIf" ], [ "class", "field-glyph glyphicon glyph-mini", 3, "ngClass", 4, "ngIf" ], [ "tabindex", "0", 1, "item-fill", "propertyText", "propertyContent", "caption", "trimmedTextWithEllipsis", "fieldWellFieldEditableLabel", 3, "ngStyle", "dblclick", "keydown.enter", "keydown.space", "click" ], [ 3, "ngModel", "ngModelChange", 4, "pbiEditableLabel", "pbiEditableLabelValue", "pbiEditableLabelMode", "pbiEditableLabelEditable" ], [ "role", "button", "class", "actionButton", 3, "click", 4, "ngIf" ], [ "role", "button", "aria-expanded", "false", "class", "fieldWellIcon dropDown item-auto", 3, "ngClass", "click", 4, "ngIf" ], [ "class", "delete glyphicon pbi-glyph-close glyph-micro", 3, "click", 4, "ngIf" ], [ "class", "hierarchyList", 4, "ngIf" ], [ 1, "tooltipTitle", 3, "textContent" ], [ 1, "fieldTooltipDescription", 3, "textContent" ], [ "tabindex", "0", "role", "button", 1, "errorIcon", "error", "item-auto", 3, "accessible-click" ], [ 3, "sheet", "symbolId" ], [ "sprite", "visual-calc-icons", "name", "data_histogram_function_20_regular", 1, "fieldIcon" ], [ 1, "field-glyph", "glyphicon", "glyph-mini", 3, "ngClass" ], [ 3, "ngModel", "ngModelChange" ], [ "role", "button", 1, "actionButton", 3, "click" ], [ "tri-svg-icon-16", "", "sprite", "fluentui-icons", 1, "eyeIcon", 3, "name", "pbiTooltip" ], [ "role", "button", "aria-expanded", "false", 1, "fieldWellIcon", "dropDown", "item-auto", 3, "ngClass", "click" ], [ "sheet", "fieldListPaneIcons", "symbol-id", "fieldListDropdown", 4, "ngIf" ], [ "sheet", "fieldListPaneIcons", "symbol-id", "fieldListDropdown" ], [ 1, "delete", "glyphicon", "pbi-glyph-close", "glyph-micro", 3, "click" ], [ 1, "hierarchyList" ], [ "class", "flex", 4, "ngFor", "ngForOf" ], [ 1, "flex" ], [ "tabindex", "0", 1, "subcaption", "trimmedTextWithEllipsis", "item-fill", 3, "textContent" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, FieldWellFieldModernComponent_li_0_Template, 16, 33, "li", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngIf", ctx.core);
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, common.NgStyle, drag_directive.w, drop_directive.W, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.On, accessible_click_directive.t, pbi_editable_label_directive.D, pbi_svg_use_symbol_component.R, pbi_tooltip_directive.V, tri_svg_icon_component.M, common.AsyncPipe ],
                styles: [ ".fieldWellFieldEditableLabel[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;border:none}.tooltipTitle[_ngcontent-%COMP%]{font-weight:700}.fieldTooltipDescription[_ngcontent-%COMP%]{max-width:240px;display:block;position:relative;word-break:break-word;white-space:pre-wrap}.fieldIcon[_ngcontent-%COMP%]{margin-right:4px}.actionButton[_ngcontent-%COMP%]{background:transparent;margin-right:4px;margin-top:-4px}.eyeIcon[_ngcontent-%COMP%]{--eye-icon-fill: var(--gray-140);fill:var(--eye-icon-fill)}  [data-legacy-theming=false] .eyeIcon{--eye-icon-fill: var(--colorNeutralForeground1)}" ]
            }), FieldWellFieldModernComponent;
        }(rx_rx_component.w), FieldWellFieldCore = function() {
            function FieldWellFieldCore(services, onContextMenuActionFailed, onLabelInEditingModeChanged) {
                this.services = services, this.onContextMenuActionFailed = onContextMenuActionFailed, 
                this.onLabelInEditingModeChanged = onLabelInEditingModeChanged;
            }
            return FieldWellFieldCore.prototype.onDestroy = function() {
                this.dataBarsDialogRef && this.dataBarsDialogRef.close();
            }, FieldWellFieldCore.prototype.dropWithPayloadAndAction = function(dragPayload, dropAction) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var fieldWellPayload, viewModel, dataSources, isVisualCalc, sourceRole, countExpressionsInDraggedProperty, sourceIndex, targetIndex, explorePayload;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        return fieldWellPayload = dragPayload, viewModel = this.viewModel, dataSources = this.services.dataSources.get(), 
                        isVisualCalc = 16 === (null === (_a = this.services.visibilityService.get(16)) || void 0 === _a ? void 0 : _a.visibility), 
                        (sourceRole = fieldWellPayload.sourceRole) ? [ 2, !((targetIndex = this.getTargetIndex(sourceRole, sourceIndex = fieldWellPayload.sourceIndex, countExpressionsInDraggedProperty = fieldWellPayload.hierarchyLevelCount || 1, {
                            role: this.viewModel.role,
                            startIndex: this.viewModel.startIndex,
                            hierarchyLevelsLength: this.viewModel.hierarchyLevels ? this.viewModel.hierarchyLevels.length : 0
                        }, 3 === dropAction)) < 0) && this.services.visualAuthoring.moveField(sourceRole, viewModel.role, sourceIndex, targetIndex, countExpressionsInDraggedProperty, dataSources, isVisualCalc) ] : (explorePayload = dragPayload).field ? [ 2, this.dropField(explorePayload.field, dropAction) ] : [ 2, !1 ];
                    });
                });
            }, FieldWellFieldCore.prototype.dropField = function(fieldExpr, dropAction) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, hierarchyLevelsCount, selectedVisual, isVisualCalc;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return dataSources = this.services.dataSources.get(), hierarchyLevelsCount = _.size(this.viewModel.hierarchyLevels), 
                            selectedVisual = this.getSelectedVisual(), !this.viewModel.interactivityOptions.isReplaceable || !this.viewModel.interactivityOptions.isReplaceOnly && 1 !== dropAction ? [ 3, 2 ] : (this.viewModel.isInsideAutoVisualBucket || ((0, 
                            visualContainerUtils.PQ)(selectedVisual).autoSelectVisualType = void 0), [ 4, this.checkToRestoreOrMergeLevelToHierarchy(fieldExpr, dataSources) ]);

                          case 1:
                            return _b.sent() ? [ 2, !0 ] : [ 2, this.services.visualAuthoring.replaceField(fieldExpr, this.viewModel.role, this.viewModel.startIndex, selectedVisual, dataSources, hierarchyLevelsCount > 0 ? hierarchyLevelsCount : void 0) ];

                          case 2:
                            return isVisualCalc = 16 === (null === (_a = this.services.visibilityService.get(16)) || void 0 === _a ? void 0 : _a.visibility), 
                            [ 2, this.services.visualAuthoring.addFieldInRole(fieldExpr, this.viewModel.role, dataSources, selectedVisual, 3 === dropAction ? this.viewModel.startIndex + Math.max(hierarchyLevelsCount, 1) : this.viewModel.startIndex, void 0, void 0, isVisualCalc) ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.editLabel = function() {
                var viewModel = this.viewModel;
                viewModel.interactivityOptions.isEditableField && (viewModel.isEditingLabel = !0, 
                this.onLabelInEditingModeChanged && this.onLabelInEditingModeChanged(!0));
            }, FieldWellFieldCore.prototype.deleteField = function(index) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualContainer, queryName, schema;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return null !== this.viewModel.expr && (0, sqExprStaticMembers.jX)(this.viewModel.expr) && (visualContainer = this.getSelectedVisual(), 
                            queryName = (0, visualContainerUtils.$Z)(visualContainer, this.viewModel.role, this.viewModel.startIndex), 
                            this.services.visualCalcEagerService.deleteVisualCalc(queryName)), [ 4, this.services.conceptualSchemaProxy.get(this.services.dataSources.get()) ];

                          case 1:
                            return schema = _a.sent(), this.services.visualAuthoring.removeFieldFromRole({
                                role: this.viewModel.role,
                                projOptions: {
                                    fieldIndex: this.viewModel.startIndex + (index || 0)
                                },
                                count: _.isNumber(index) ? 1 : this.viewModel.hierarchyLevels.length || 1
                            }, schema), this.logDeleteTelemetry(), [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.deleteFieldAndFocus = function($event, index) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return $event && $event.stopPropagation(), [ 4, this.deleteField(index) ];

                          case 1:
                            return _a.sent(), zone.l.setTimeout(function() {
                                _this.services.eventBridge.publishToChannel(events.Ah$, _this.bucketDisplayName);
                            }), [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.cancelRename = function() {
                this.viewModel.isEditingLabel = !1, this.onLabelInEditingModeChanged && this.onLabelInEditingModeChanged(!1);
            }, FieldWellFieldCore.prototype.rename = function(newName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var displayOptions, visualContainer, query, currentVisualContainerName, currentVisualType;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return newName === (displayOptions = this.viewModel.displayOptions).displayName || null == (visualContainer = this.getSelectedVisual()) ? [ 2 ] : (query = visualContainer.config.singleVisual.query, 
                            currentVisualContainerName = visualContainer && visualContainer.name, currentVisualType = visualContainer && visualContainer.config.singleVisual.visualType, 
                            visualContainer && query && query.projections && query.projections[this.viewModel.role] && this.viewModel.visualContainerName === currentVisualContainerName ? (displayOptions.displayName = newName, 
                            [ 4, this.services.visualAuthoring.setDisplayNameAlias(visualContainer, {
                                fieldIndex: this.viewModel.startIndex
                            }, this.viewModel.role, newName) ]) : (this.services.telemetryService.logEvent(telemetry_events.jG, {
                                originalVisualContainerName: this.viewModel.visualContainerName,
                                originalVisualType: this.viewModel.visualType,
                                currentVisualContainerName,
                                currentVisualType
                            }), [ 2 ]));

                          case 1:
                            return _a.sent(), this.cancelRename(), [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.selectFieldMenuItem = function(fieldWellMenuItemOption) {
                switch (debug.fF.assertValue(fieldWellMenuItemOption, "Expected a menu item option."), 
                fieldWellMenuItemOption.action) {
                  case 32768:
                    this.editLabel();
                    break;

                  case 1:
                    this.deleteFieldAndFocus();
                    break;

                  case 4:
                    this.setAggregate(this.viewModel, fieldWellMenuItemOption.aggregate);
                    break;

                  case 2:
                    this.removeAggregate(this.viewModel);
                    break;

                  case 8:
                    this.toggleShowAll(this.viewModel);
                    break;

                  case 128:
                    this.setVariation(this.viewModel, fieldWellMenuItemOption.variationExpr);
                    break;

                  case 32:
                    this.setShowValueAs(this.viewModel, fieldWellMenuItemOption.showValueAs);
                    break;

                  case 64:
                    this.showQuickCalcDialog();
                    break;

                  case 256:
                    this.showGroupsDialog(this.viewModel, !0);
                    break;

                  case 512:
                    this.showGroupsDialog(this.viewModel, !1);
                    break;

                  case 1024:
                    this.showEditClusteringDialogAsync(this.viewModel);
                    break;

                  case 2048:
                    this.restoreHierarchy();
                    break;

                  case 4096:
                    this.setConditionalFormatting(fieldWellMenuItemOption.conditionalFormattingOptions);
                    break;

                  case 16384:
                    this.removeConditionalFormatting(fieldWellMenuItemOption.conditionalFormattingOptions);
                    break;

                  case 8192:
                    this.removeConditionalFormattingAll();
                    break;

                  case 65536:
                    this.moveField(fieldWellMenuItemOption.moveFieldPropertyOptions, !1);
                    break;

                  case 131072:
                    this.moveField(fieldWellMenuItemOption.moveFieldPropertyOptions, !0);
                    break;

                  case 262144:
                    this.moveToBucket(fieldWellMenuItemOption.moveFieldBucketOptions);
                    break;

                  case 2097152:
                    this.showSparklinesDialog(!1);
                    break;

                  case 33554432:
                    this.editVisualCalculation();
                    break;

                  case 4194304:
                    this.showSparklinesDialog(!0);
                    break;

                  case 16777216:
                  case 8388608:
                    this.switchQueryParameter();
                    break;

                  default:
                    debug.fF.assertFail("Invalid action.");
                }
            }, FieldWellFieldCore.prototype.restoreHierarchy = function() {
                var context = this.getAuthoringContext();
                return context ? this.services.visualAuthoring.expandHierarchy(context.dataSources, context.visual, this.viewModel.role, this.viewModel.startIndex, this.viewModel.hierarchyLevels.length) : Promise.resolve(!1);
            }, FieldWellFieldCore.prototype.editVisualCalculation = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualContainer, queryName, activity;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return visualContainer = this.getSelectedVisual(), queryName = (0, visualContainerUtils.$Z)(visualContainer, this.viewModel.role, this.viewModel.startIndex), 
                        activity = (0, context_activity_utils.hF)(this.services.contextActivityService, {
                            name: "VisualAction",
                            visualName: visualContainer.name,
                            data: {
                                action: "EditVisualCalculation",
                                source: "ContextMenu",
                                contextMenuType: "FieldWell"
                            }
                        }), [ 2, this.services.visualCalcEagerService.enterVisualCalcMode(visualContainer, queryName, activity) ];
                    });
                });
            }, FieldWellFieldCore.prototype.getTargetIndex = function(sourceRole, sourceIndex, countExpressionsInCurrentProperty, targetFieldOptions, isAppend) {
                var targetIndex = targetFieldOptions.startIndex;
                if (isAppend && (targetIndex += targetFieldOptions.hierarchyLevelsLength || 1), 
                sourceRole === targetFieldOptions.role) {
                    if (targetIndex === sourceIndex || targetIndex === sourceIndex + countExpressionsInCurrentProperty) return -1;
                    targetIndex > sourceIndex && (targetIndex = Math.max(targetIndex - countExpressionsInCurrentProperty, 0));
                }
                return targetIndex;
            }, FieldWellFieldCore.prototype.getSelectedVisual = function() {
                return selectionUtils.UP.getSelectedVisual(this.services.selection);
            }, FieldWellFieldCore.prototype.checkToRestoreOrMergeLevelToHierarchy = function(replacementExpr, dataSources) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var hierarchyLevels, oneExistingHierarchyLevel, schema, toRestoreHierarchy, existingLevelVariationSource, existingLevelSourceHierarchy, allLevels, newLevelIndexInAllLevels, insertAfterIndex_1, mergeIndex, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return hierarchyLevels = this.viewModel.hierarchyLevels, _.size(hierarchyLevels) > 0 ? (oneExistingHierarchyLevel = null === (_a = _.first(hierarchyLevels)) || void 0 === _a ? void 0 : _a.expr, 
                            [ 4, this.services.conceptualSchemaProxy.get(dataSources) ]) : [ 2, !1 ];

                          case 1:
                            return schema = _b.sent(), (0, sqExprStaticMembers.t3)(replacementExpr) && (0, sqHierarchyExprUtils1.K8)(schema, replacementExpr) && (0, 
                            sqExprEqualityVisitor.fS)((0, sqHierarchyExprUtils1.ZB)(oneExistingHierarchyLevel), replacementExpr) ? (allLevels = (0, 
                            sqHierarchyExprUtils1.wA)(schema, replacementExpr), _.size(allLevels) === _.size(hierarchyLevels) ? [ 2, !0 ] : [ 4, this.restoreHierarchy() ]) : [ 3, 3 ];

                          case 2:
                            if (_b.sent()) return [ 2, !0 ];
                            _b.label = 3;

                          case 3:
                            return (0, sqExprStaticMembers.y3)(replacementExpr) ? (toRestoreHierarchy = !1, 
                            replacementExpr.arg instanceof sqExpr.c7 ? (existingLevelVariationSource = (0, sqHierarchyExprUtils1.cH)(oneExistingHierarchyLevel), 
                            toRestoreHierarchy = (0, sqExprEqualityVisitor.fS)(existingLevelVariationSource, replacementExpr.arg)) : (existingLevelSourceHierarchy = (0, 
                            sqHierarchyExprUtils1.uW)(oneExistingHierarchyLevel), toRestoreHierarchy = (0, sqExprEqualityVisitor.fS)(existingLevelSourceHierarchy, replacementExpr)), 
                            toRestoreHierarchy ? (allLevels = (0, sqHierarchyExprUtils1.wA)(schema, replacementExpr), 
                            _.size(allLevels) === _.size(hierarchyLevels) ? [ 2, !0 ] : [ 4, this.restoreHierarchy() ]) : [ 3, 5 ]) : [ 3, 5 ];

                          case 4:
                            if (_b.sent()) return [ 2, !0 ];
                            _b.label = 5;

                          case 5:
                            return (0, sqExprStaticMembers.ez)(replacementExpr) ? (allLevels = (0, sqHierarchyExprUtils1.wA)(schema, this.viewModel.expr), 
                            _.isArray(allLevels) && _.find(allLevels, function(level) {
                                return (0, sqExprEqualityVisitor.fS)(level, replacementExpr);
                            }) ? _.find(this.viewModel.hierarchyLevels, function(includedLevel) {
                                return (0, sqExprEqualityVisitor.fS)(includedLevel.expr, replacementExpr);
                            }) ? [ 2, !0 ] : (newLevelIndexInAllLevels = _.findIndex(allLevels, function(level) {
                                return (0, sqExprEqualityVisitor.fS)(level, replacementExpr);
                            }), insertAfterIndex_1 = -1, _.findLast(allLevels.slice(0, newLevelIndexInAllLevels), function(level) {
                                var indexInIncludedLevels = _.findIndex(_this.viewModel.hierarchyLevels, function(includedLevel) {
                                    return (0, sqExprEqualityVisitor.fS)(includedLevel.expr, level);
                                });
                                if (-1 !== indexInIncludedLevels) return insertAfterIndex_1 = indexInIncludedLevels, 
                                !0;
                            }), mergeIndex = -1 !== insertAfterIndex_1 ? insertAfterIndex_1 + 1 : 0, [ 4, this.services.visualAuthoring.addFieldInRole(replacementExpr, this.viewModel.role, dataSources, this.getSelectedVisual(), this.viewModel.startIndex + mergeIndex) ]) : [ 3, 7 ]) : [ 3, 7 ];

                          case 6:
                            if (_b.sent()) return [ 2, !0 ];
                            _b.label = 7;

                          case 7:
                            return [ 2, !1 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.switchQueryParameter = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.services.conceptualSchemaProxy.get(this.services.dataSources.get()) ];

                          case 1:
                            return schema = _a.sent(), this.services.visualAuthoring.switchQueryParameter(schema, this.viewModel.startIndex, this.viewModel.role), 
                            [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.setAggregate = function(property, newAggregate) {
                debug.fF.assertValue(newAggregate, "Must specify a new aggregate.");
                var context = this.getAuthoringContext();
                if (context) {
                    var oldAggregate = (0, fieldExprPatternToSQExprConverter._L)((0, fieldExprPatternBuilder.Q)(property.expr)), setPromise = this.services.visualAuthoring.setAggregate(this.viewModel.role, this.viewModel.startIndex, newAggregate, context.visual, context.dataSources);
                    return (0, field_well_view_model_operations_util.l)(property, context.visual), this.services.telemetryService.logEvent(telemetry_events.TS, {
                        original: (0, query.b)(oldAggregate),
                        target: (0, query.b)(newAggregate),
                        visualName: context.visual.name
                    }), setPromise;
                }
            }, FieldWellFieldCore.prototype.setVariation = function(property, variationExpr) {
                var context = this.getAuthoringContext();
                context && this.services.visualAuthoring.setVariation(context.dataSources, context.visual, variationExpr, this.viewModel.role, this.viewModel.startIndex, this.viewModel.hierarchyLevels.length);
            }, FieldWellFieldCore.prototype.removeAggregate = function(property) {
                var context = this.getAuthoringContext();
                context && (this.services.visualAuthoring.removeAggregate(this.viewModel.role, this.viewModel.startIndex, context.visual, context.dataSources), 
                (0, field_well_view_model_operations_util.l)(property, context.visual));
            }, FieldWellFieldCore.prototype.toggleShowAll = function(property) {
                var context = this.getAuthoringContext();
                context && (this.services.visualAuthoring.toggleShowAll(property.role, context.visual), 
                (0, field_well_view_model_operations_util.l)(property, context.visual));
            }, FieldWellFieldCore.prototype.showQuickCalcDialog = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var authoringContext, role, startIndex, selectedExpr;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (authoringContext = this.getAuthoringContext()) ? (selectedExpr = authoringContext.visual.config.singleVisual.query.tryGetExpr(role = this.viewModel.role, startIndex = this.viewModel.startIndex), 
                            [ 4, this.services.lazyScoped.get("quickMeasures") ]) : [ 2 ];

                          case 1:
                            return _a.sent().launchQuickMeasures(selectedExpr, "FieldWell", void 0, {
                                visualContainer: authoringContext.visual,
                                index: startIndex,
                                role
                            }), [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.showSparklinesDialog = function(isEdit) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var authoringContext, role, startIndex, selectedExpr, result, measure, grouping;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (authoringContext = this.getAuthoringContext()) ? (selectedExpr = authoringContext.visual.config.singleVisual.query.tryGetExpr(role = this.viewModel.role, startIndex = this.viewModel.startIndex), 
                            isEdit ? [ 3, 2 ] : [ 4, this.services.sparklinesService.showCreateDialog(selectedExpr) ]) : [ 2 ];

                          case 1:
                            return (result = _a.sent()) && (measure = semanticQuerySerializer.ib.deserializeExpr(result.measure), 
                            grouping = semanticQuerySerializer.ib.deserializeExpr(result.grouping), this.services.sparklinesService.addSparklinesToVisual(measure, grouping, authoringContext.visual)), 
                            [ 3, 4 ];

                          case 2:
                            return [ 4, this.services.sparklinesService.showEditDialog(selectedExpr) ];

                          case 3:
                            (result = _a.sent()) && (measure = semanticQuerySerializer.ib.deserializeExpr(result.measure), 
                            grouping = semanticQuerySerializer.ib.deserializeExpr(result.grouping), this.services.sparklinesService.updateSparklinesExpr(measure, grouping, authoringContext.visual, role, startIndex)), 
                            _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.showGroupsDialog = function(property, isNew) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, schema, targetEntity, conceptualProperty, args, token, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return dataSources = this.services.dataSources.get(), [ 4, this.services.conceptualSchemaProxy.get(dataSources) ];

                          case 1:
                            schema = _a.sent(), targetEntity = property.expr.getTargetEntity(), conceptualProperty = property.expr.getConceptualProperty(schema), 
                            args = {
                                schema: targetEntity.schema,
                                entity: targetEntity.entity,
                                name: isNew ? null : conceptualProperty.name,
                                sourcePropertyName: isNew ? conceptualProperty.name : null,
                                isNew
                            }, token = this.services.modelChangeHandler.register(function(result) {
                                return _this.handleNewGroupsBins(targetEntity, property, result), _this.services.promiseFactory.resolve();
                            }), _a.label = 2;

                          case 2:
                            return _a.trys.push([ 2, , 4, 5 ]), [ 4, this.services.groupAuthoring.openGroupDialog(args) ];

                          case 3:
                            return _a.sent(), [ 3, 5 ];

                          case 4:
                            return token.stopHandling(), [ 7 ];

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.handleNewGroupsBins = function(entity, property, result) {
                var columnRef, newBinChange = _.find(result.changes, function(c) {
                    return c.newBins;
                });
                newBinChange && (columnRef = (0, sqExpr.Oh)(entity, newBinChange.newBins.name));
                var newGroupsChange = _.find(result.changes, function(c) {
                    return c.newGroups;
                });
                if (newGroupsChange) {
                    var groupingDefinition = (0, semanticGroupingDefinition.vB)(newGroupsChange.newGroups.definition);
                    columnRef = (0, sqExpr.Wp)(newGroupsChange.newGroups.name, entity, [ groupingDefinition.groupedColumns[0] ]);
                }
                if (columnRef) {
                    var dataSources = this.services.dataSources.get();
                    this.services.visualAuthoring.replaceField(columnRef, property.role, property.startIndex, this.getSelectedVisual(), dataSources);
                }
            }, FieldWellFieldCore.prototype.showEditClusteringDialogAsync = function(property) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.services.lazyScoped.get("clustering") ];

                          case 1:
                            return [ 4, _a.sent().editClustering((0, fieldExprPatternBuilder.Q)(property.expr), this.services.dataSources.get()) ];

                          case 2:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.setShowValueAs = function(property, showValueAs) {
                var _this = this, authoringContext = this.getAuthoringContext();
                if (authoringContext) {
                    var dataSources = this.services.dataSources.get();
                    this.services.conceptualSchemaProxy.get(dataSources).then(function(schema) {
                        var context = {
                            dataSources,
                            roleIndex: _this.viewModel.startIndex,
                            visual: authoringContext.visual,
                            visualDataRole: _this.getVisualDataRole()
                        }, showValueAsItem = _.find(property.interactivityOptions.dropDownItems.items, function(item) {
                            return item.key && 16 === item.key.action;
                        }), previousSelectedShowValueAsItem = _.find(showValueAsItem.children, function(child) {
                            return child.checked;
                        });
                        _this.services.showValueAsService.applyShowValueAs(context, previousSelectedShowValueAsItem.key.showValueAs, showValueAs), 
                        (0, field_well_view_model_operations_util.l)(property, authoringContext.visual);
                    });
                }
            }, FieldWellFieldCore.prototype.logDeleteTelemetry = function() {
                var schemaPromise = getSchemaPromise(this.services.dataSources.get(), this.services.promiseFactory, this.services.conceptualSchemaProxy), visualType = (0, 
                visualContainerUtilsHelper.s)(this.getSelectedVisual());
                this.services.groupAuthoring.telemetry.logGroupsUsageTelemetry(schemaPromise, this.viewModel.expr, visualType, null, this.viewModel.role, "Delete");
            }, FieldWellFieldCore.prototype.moveField = function(targetFieldPropertyOptions, isAppend) {
                var countExpressionsInMovingProperty = this.viewModel.hierarchyLevels.length || 1, targetIndex = this.getTargetIndex(this.viewModel.role, this.viewModel.startIndex, countExpressionsInMovingProperty, targetFieldPropertyOptions, isAppend);
                targetIndex >= 0 && this.services.visualAuthoring.moveField(this.viewModel.role, targetFieldPropertyOptions.role, this.viewModel.startIndex, targetIndex, countExpressionsInMovingProperty, this.services.dataSources.get(), !1);
            }, FieldWellFieldCore.prototype.moveToBucket = function(targetFieldBucketOption) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var invalidMoveBucketString;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.services.visualAuthoring.moveField(this.viewModel.role, targetFieldBucketOption.role, this.viewModel.startIndex, targetFieldBucketOption.targetIndex, this.viewModel.hierarchyLevels.length || 1, this.services.dataSources.get(), !1) ];

                          case 1:
                            return _a.sent() || (invalidMoveBucketString = this.services.localizationService.format("Invalid_FieldWellBucket_Move", [ this.viewModel.displayOptions.displayName, targetFieldBucketOption.displayName ]), 
                            this.services.screenReaderService.alert(invalidMoveBucketString), this.onContextMenuActionFailed && this.onContextMenuActionFailed()), 
                            [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.setConditionalFormatting = function(option) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var visualContainer, dataSources, viewModel, featureSwitches, conditionalWebURLEnabled, dataBarsUpdate, schema, repetition, type, misc, themeCollection, visualStyle, displayName, result, newProperty, newSelector, type_1, dataBarsDialogLauncher, _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return visualContainer = this.getSelectedVisual(), dataSources = this.services.dataSources.get(), 
                            viewModel = this.viewModel, conditionalWebURLEnabled = null == (featureSwitches = this.services.featureSwitchService.featureSwitches) ? void 0 : featureSwitches.conditionalTablixWebURL, 
                            dataBarsUpdate = null == featureSwitches ? void 0 : featureSwitches.dataBarsUpdate, 
                            [ 4, this.services.conceptualSchemaProxy.get(dataSources) ];

                          case 1:
                            return schema = _b.sent(), type = (repetition = option.repetition).propertyDescriptor && repetition.propertyDescriptor.type, 
                            misc = repetition.propertyDescriptor && repetition.propertyDescriptor.type.misc, 
                            themeCollection = this.services.explorationNavigation.getCurrentExploration().themeCollection, 
                            visualStyle = this.services.themeService.getVisualStyle(themeCollection), displayName = this.viewModel.displayOptions.displayName, 
                            type && (type.fill || type.icon || conditionalWebURLEnabled && misc && misc.webUrl || dataBarsUpdate && type.dataBars) ? [ 4, this.services.lazyScoped.get("conditionalFormattingDialogLauncherService") ] : [ 3, 4 ];

                          case 2:
                            return [ 4, _b.sent().show(visualContainer, displayName, viewModel.expr, repetition, option.propertyDefinition, visualStyle) ];

                          case 3:
                            return (result = _b.sent()) && (newProperty = (0, dataViewObjectSerializer.PU)(result.propertyDefinition, repetition.propertyDescriptor, !1), 
                            newSelector = (0, dataViewObjectSerializer.L1)(result.selector), this.services.visualAuthoring.setPropertyDefinition(visualContainer, repetition.propertyId, repetition.selector, newProperty, newSelector)), 
                            [ 3, 8 ];

                          case 4:
                            return type && type.dataBars ? (type_1 = viewModel.expr.getMetadata(schema).type, 
                            [ 4, this.services.lazyScoped.get("dataBarsDialogLauncherService") ]) : [ 3, 7 ];

                          case 5:
                            return dataBarsDialogLauncher = _b.sent(), _a = this, [ 4, dataBarsDialogLauncher.show(visualContainer, displayName, repetition, visualStyle.colorPalette, type_1, !1) ];

                          case 6:
                            return _a.dataBarsDialogRef = _b.sent(), [ 3, 8 ];

                          case 7:
                            debug.fF.assertFail("FieldWellFieldController.createConditionalFormatting - Invalid Conditional Formatting Type"), 
                            _b.label = 8;

                          case 8:
                            return [ 2 ];
                        }
                    });
                });
            }, FieldWellFieldCore.prototype.removeConditionalFormatting = function(option) {
                debug.fF.assertValue(option.propertyDefinition, "removeConditionalFormatting called for missing property");
                var visualContainer = this.getSelectedVisual(), repetition = option.repetition, type = repetition.propertyDescriptor && repetition.propertyDescriptor.type, misc = repetition.propertyDescriptor && repetition.propertyDescriptor.type.misc;
                type && (type.fill || type.icon || this.services.featureSwitchService.featureSwitches && this.services.featureSwitchService.featureSwitches.conditionalTablixWebURL && misc && misc.webUrl) ? this.services.visualAuthoring.removePropertyDefinition(visualContainer, repetition.propertyId, repetition.selector) : type && type.dataBars ? this.services.visualAuthoring.removeDataBars(visualContainer, repetition) : debug.fF.assertFail("FieldWellFieldController.createConditionalFormatting - Invalid Conditional Formatting Type"), 
                this.services.telemetryService.logEvent(telemetry_events.Sd, {
                    visualType: (0, visualContainerUtilsHelper.s)(visualContainer),
                    visualName: visualContainer.name
                });
            }, FieldWellFieldCore.prototype.removeConditionalFormattingAll = function() {
                var visualContainer = this.getSelectedVisual();
                this.services.visualAuthoring.removeConditionalFormattingAll(visualContainer, this.viewModel.conditionalFormattingRepetitions), 
                this.services.telemetryService.logEvent(telemetry_events.Sd, {
                    visualType: (0, visualContainerUtilsHelper.s)(visualContainer),
                    visualName: visualContainer.name
                });
            }, FieldWellFieldCore.prototype.getAuthoringContext = function() {
                var visual = this.getSelectedVisual();
                if (visual) {
                    var dataSources = this.services.dataSources.get();
                    if (dataSources) return {
                        visual,
                        dataSources
                    };
                }
            }, FieldWellFieldCore.prototype.getVisualDataRole = function() {
                var roleDefs = (0, visualContainerUtils.d$)(this.getSelectedVisual(), this.services.visualPlugin);
                if (!_.isEmpty(roleDefs)) return (0, arrayExtensions.rC)(roleDefs, this.viewModel.role);
            }, FieldWellFieldCore;
        }();
        function FieldWellBucketModernComponent_i_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "i", 8), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275pipe"](2, "async")), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275classMapInterpolate1"]("warning glyphicon glyph-mini ng-scope ", ctx_r0.viewModel.warning.glyph, ""), 
                core["\u0275\u0275property"]("pbiTooltip", core["\u0275\u0275pipeBind1"](2, 7, ctx_r0.warningTooltip$)), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](1, 5, ctx_r0.tooltipDescription$));
            }
        }
        function FieldWellBucketModernComponent_tri_svg_icon_6_Template(rf, ctx) {
            if (1 & rf) {
                var _r4 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "tri-svg-icon", 9), core["\u0275\u0275listener"]("mouseenter", function() {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r3 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r3.infoIconName = "info_20_filled");
                })("mouseleave", function() {
                    core["\u0275\u0275restoreView"](_r4);
                    var ctx_r5 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r5.infoIconName = "info_20_regular");
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("name", ctx_r1.infoIconName)("pbiTooltip", ctx_r1.bucketTooltip), 
                core["\u0275\u0275attribute"]("aria-label", ctx_r1.bucketTooltip);
            }
        }
        function FieldWellBucketModernComponent_ng_container_11_field_well_field_modern_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "field-well-field-modern", 12), 2 & rf) {
                var property_r8 = ctx.$implicit, ctx_r7 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("bucketDisplayName", ctx_r7.viewModel.displayName)("viewModel", property_r8);
            }
        }
        var field_well_bucket_component_c0 = function(a0, a1, a2) {
            return {
                dropzone: a0,
                "end-dropzone": a1,
                "supports-multiple-items": a2
            };
        };
        function FieldWellBucketModernComponent_ng_container_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r10 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, FieldWellBucketModernComponent_ng_container_11_field_well_field_modern_1_Template, 1, 2, "field-well-field-modern", 10), 
                core["\u0275\u0275elementStart"](2, "li", 11), core["\u0275\u0275listener"]("dropHandler", function($event) {
                    core["\u0275\u0275restoreView"](_r10);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.drop($event.event, $event.ui, $event.dropAction));
                }), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), 
                core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var fieldProperties_r6 = ctx.ngIf, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", fieldProperties_r6), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("drop", ctx_r2.dropConfig)("dropAction", ctx_r2.dropActionHandler)("ngClass", core["\u0275\u0275pureFunction3"](16, field_well_bucket_component_c0, 0 === fieldProperties_r6.length, fieldProperties_r6.length > 0, core["\u0275\u0275pipeBind1"](3, 8, ctx_r2.supportsMultipleItems$)))("textContent", core["\u0275\u0275pipeBind1"](4, 10, ctx_r2.dropzoneLocalize$))("title", core["\u0275\u0275pipeBind1"](5, 12, ctx_r2.dropzoneLocalize$))("tabindex", core["\u0275\u0275pipeBind1"](6, 14, ctx_r2.tabIndex$)), 
                core["\u0275\u0275attribute"]("aria-label", ctx_r2.addFieldsAriaLabel);
            }
        }
        var field_well_bucket_component_c1 = function(a0) {
            return {
                disabled: a0
            };
        }, field_well_bucket_component_c2 = function(a0) {
            return {
                border: a0
            };
        }, FieldWellBucketModernComponent = function(_super) {
            function FieldWellBucketModernComponent(element, conceptualSchemaProxy, dataSources, dragDataService, eventBridge, featureSwitchService, groupAuthoring, localizationService, promiseFactory, selection, telemetryService, viewModeState, visibilityService, visualAuthoring) {
                var _this = _super.call(this) || this;
                return _this.element = element, _this.conceptualSchemaProxy = conceptualSchemaProxy, 
                _this.dataSources = dataSources, _this.dragDataService = dragDataService, _this.eventBridge = eventBridge, 
                _this.featureSwitchService = featureSwitchService, _this.groupAuthoring = groupAuthoring, 
                _this.localizationService = localizationService, _this.promiseFactory = promiseFactory, 
                _this.selection = selection, _this.telemetryService = telemetryService, _this.viewModeState = viewModeState, 
                _this.visibilityService = visibilityService, _this.visualAuthoring = visualAuthoring, 
                _this.infoIconName = "info_20_regular", _this.core = new FieldWellBucketCore({
                    conceptualSchemaProxy: _this.conceptualSchemaProxy,
                    dataSources: _this.dataSources,
                    eventBridge: _this.eventBridge,
                    featureSwitchService: _this.featureSwitchService,
                    groupAuthoring: _this.groupAuthoring,
                    promiseFactory: _this.promiseFactory,
                    selection: _this.selection,
                    telemetryService: _this.telemetryService,
                    visualAuthoring: _this.visualAuthoring
                }), _this.uniqueId = _.uniqueId("fieldWellId"), _this.dropConfig = _this.getDropConfig(), 
                _this.dropActionHandler = function(dropPosition) {
                    return Promise.resolve(_this.getDropAction(dropPosition));
                }, _this.bucketTooltip = localizationService.get("Visual_Calculation_Field_Bucket_Tooltip"), 
                _this.dropzoneText = _this.localizationService.get("FieldDropZone_AddFields"), _this;
            }
            return (0, tslib_es6.__extends)(FieldWellBucketModernComponent, _super), Object.defineProperty(FieldWellBucketModernComponent.prototype, "viewModel", {
                get: function() {
                    return this.core.viewModel;
                },
                set: function(bucket) {
                    this.core.viewModel = bucket;
                },
                enumerable: !1,
                configurable: !0
            }), FieldWellBucketModernComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.viewModel$ = this.changes$("viewModel"), this.showTooltip$ = (0, combineLatest.aj)([ this.viewModel$, this.visibilityService.get$(16) ]).pipe((0, 
                map.U)(function(_a) {
                    var container = _a[1];
                    return _a[0].properties.filter(function(p) {
                        return p.isHiddenInVisual;
                    }).length > 0 && 16 !== (null == container ? void 0 : container.visibility);
                }), (0, takeUntil.R)(this.onDestroy$)), this.visibleFieldProperties$ = (0, combineLatest.aj)([ this.viewModel$, this.visibilityService.get$(16) ]).pipe((0, 
                map.U)(function(_a) {
                    var viewModel = _a[0], container = _a[1];
                    return 16 === (null == container ? void 0 : container.visibility) ? viewModel.properties : _.filter(viewModel.properties, function(p) {
                        return !p.isHiddenInVisual;
                    });
                }), (0, shareReplay.d)(1), (0, takeUntil.R)(this.onDestroy$)), this.dropzoneLocalize$ = this.visibleFieldProperties$.pipe((0, 
                map.U)(function(visibleFieldProperties) {
                    return 0 === visibleFieldProperties.length ? _this.dropzoneText : "";
                })), this.tabIndex$ = this.visibleFieldProperties$.pipe((0, map.U)(function(visibleFieldProperties) {
                    return 0 === visibleFieldProperties.length ? 0 : -1;
                })), this.supportsMultipleItems$ = (0, combineLatest.aj)([ this.viewModel$, this.visibilityService.get$(16) ]).pipe((0, 
                map.U)(function(_a) {
                    var container = _a[1];
                    return 16 === (null == container ? void 0 : container.visibility) || _a[0].supportsMultipleItems;
                }), (0, takeUntil.R)(this.onDestroy$)), this.addFieldsAriaLabel = this.getAddFieldsAriaLabel(), 
                this.borderStyle$ = (0, combineLatest.aj)([ this.viewModel$, this.viewModeState.getMode$() ]).pipe((0, 
                map.U)(function(_a) {
                    return _this.getBorderStyle(_a[0], _a[1]);
                }), (0, takeUntil.R)(this.onDestroy$)), this.fieldWellAriaLabel$ = this.viewModel$.pipe((0, 
                map.U)(function(viewModel) {
                    return _this.getFieldWellAriaLabel(viewModel);
                })), this.tooltipDescription$ = this.viewModel$.pipe((0, map.U)(function(viewModel) {
                    return viewModel.description || viewModel.displayName;
                })), this.warningTooltip$ = this.viewModel$.pipe((0, map.U)(function(viewModel) {
                    return _this.getWarningTooltip(viewModel);
                }));
            }, FieldWellBucketModernComponent.prototype.ngAfterViewInit = function() {
                var _this = this;
                this.viewModel$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(viewModel) {
                    viewModel.disabled ? (0, modernFieldListDragDrop.u3)(_this.element.nativeElement) : (0, 
                    modernFieldListDragDrop.$o)(_this.element.nativeElement, function(_event, fieldExpr) {
                        return _this.core.dropField(fieldExpr);
                    });
                });
            }, FieldWellBucketModernComponent.prototype.drop = function(_event, _ui, _dropAction) {
                var dragPayload = this.dragDataService.getDragContext();
                this.core.dropWithPayload(dragPayload);
            }, FieldWellBucketModernComponent.prototype.getDropAction = function(_dropPosition) {
                var fieldWellPayload = this.dragDataService.getDragContext(), dropAction = 0;
                if (fieldWellPayload) {
                    var viewModel = this.viewModel;
                    dropAction = fieldWellPayload.sourceRole === viewModel.role && _.last(viewModel.properties).startIndex === fieldWellPayload.sourceIndex ? 0 : _.isEmpty(this.viewModel.properties) ? 1 : 2;
                }
                return dropAction;
            }, FieldWellBucketModernComponent.prototype.getDropConfig = function() {
                return {
                    accept: "field",
                    greedy: !1
                };
            }, FieldWellBucketModernComponent.prototype.getAddFieldsAriaLabel = function() {
                var localization = this.localizationService;
                return localization.get("FieldDropZone_NoDataFields").concat(". ", localization.get("FieldDropZone_AddFields"));
            }, FieldWellBucketModernComponent.prototype.getBorderStyle = function(viewModel, viewMode) {
                if (0 === viewMode && 0 !== viewModel.properties.length) return "none";
            }, FieldWellBucketModernComponent.prototype.getFieldWellAriaLabel = function(viewModel) {
                var ariaLabelString = viewModel.displayName;
                return _.isString(viewModel.description) && (ariaLabelString = _.isString(ariaLabelString) ? ariaLabelString.concat(". ", viewModel.description) : viewModel.description), 
                ariaLabelString;
            }, FieldWellBucketModernComponent.prototype.getWarningTooltip = function(viewModel) {
                var warningTooltip = {
                    tooltipTitle: "",
                    tooltipDescription: ""
                };
                return viewModel.warning && (warningTooltip = {
                    tooltipTitle: viewModel.warning.title,
                    tooltipDescription: viewModel.warning.description
                }), warningTooltip.tooltipDescription || warningTooltip.tooltipTitle;
            }, FieldWellBucketModernComponent.\u0275fac = function(t) {
                return new (t || FieldWellBucketModernComponent)(core["\u0275\u0275directiveInject"](core.ElementRef), core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](drag_data_service.x), core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](group_authoring_service.RD), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](promiseFactory.t), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](Telemetry.y0), core["\u0275\u0275directiveInject"](view_mode_state_service.kc), core["\u0275\u0275directiveInject"](visibility_service.w), core["\u0275\u0275directiveInject"](visual_authoring_service.$8));
            }, FieldWellBucketModernComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FieldWellBucketModernComponent,
                selectors: [ [ "field-well-bucket-modern" ] ],
                inputs: {
                    viewModel: "viewModel"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 13,
                vars: 23,
                consts: [ [ 1, "bucket", 3, "ngClass" ], [ 1, "bucket-header" ], [ 1, "caption", "trimmedTextWithEllipsis", "smallFontSize", 3, "textContent", "pbiTooltip" ], [ "role", "alert", "tabindex", "0", 3, "class", "pbiTooltip", 4, "ngIf" ], [ "role", "tooltip", "style", "margin-left:4px", "tabindex", "0", "tri-svg-icon-16", "", "sprite", "fluentui-icons", 3, "name", "pbiTooltip", "mouseenter", "mouseleave", 4, "ngIf" ], [ 1, "properties", 3, "ngStyle", "drop" ], [ "aria-hidden", "true", 1, "bucketTopBorder" ], [ 4, "ngIf" ], [ "role", "alert", "tabindex", "0", 3, "pbiTooltip" ], [ "role", "tooltip", "tabindex", "0", "tri-svg-icon-16", "", "sprite", "fluentui-icons", 2, "margin-left", "4px", 3, "name", "pbiTooltip", "mouseenter", "mouseleave" ], [ 3, "bucketDisplayName", "viewModel", 4, "ngFor", "ngForOf" ], [ "data-testid", "bucket-add-field", 1, "trimmedTextWithEllipsis", 3, "drop", "dropAction", "ngClass", "textContent", "title", "tabindex", "dropHandler" ], [ 3, "bucketDisplayName", "viewModel" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0)(1, "div", 1), core["\u0275\u0275element"](2, "h2", 2), 
                    core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275template"](5, FieldWellBucketModernComponent_i_5_Template, 3, 9, "i", 3), 
                    core["\u0275\u0275template"](6, FieldWellBucketModernComponent_tri_svg_icon_6_Template, 1, 3, "tri-svg-icon", 4), 
                    core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](8, "ol", 5), 
                    core["\u0275\u0275pipe"](9, "async"), core["\u0275\u0275element"](10, "li", 6), 
                    core["\u0275\u0275template"](11, FieldWellBucketModernComponent_ng_container_11_Template, 7, 20, "ng-container", 7), 
                    core["\u0275\u0275pipe"](12, "async"), core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](19, field_well_bucket_component_c1, ctx.viewModel.disabled)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("textContent", ctx.viewModel.displayName)("pbiTooltip", core["\u0275\u0275pipeBind1"](4, 11, ctx.tooltipDescription$)), 
                    core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](3, 9, ctx.fieldWellAriaLabel$)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx.viewModel.warning), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](7, 13, ctx.showTooltip$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngStyle", core["\u0275\u0275pureFunction1"](21, field_well_bucket_component_c2, core["\u0275\u0275pipeBind1"](9, 15, ctx.borderStyle$)))("drop", ctx.dropConfig), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](12, 17, ctx.visibleFieldProperties$)));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, common.NgStyle, drop_directive.W, pbi_tooltip_directive.V, tri_svg_icon_component.M, FieldWellFieldModernComponent, common.AsyncPipe ],
                styles: [ ".bucket.disabled[_ngcontent-%COMP%]{pointer-events:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;opacity:.5}" ]
            }), FieldWellBucketModernComponent;
        }(rx_rx_component.w), FieldWellBucketCore = function() {
            function FieldWellBucketCore(services) {
                this.services = services;
            }
            return FieldWellBucketCore.prototype.dropWithPayload = function(dragPayload) {
                if (dragPayload && !this.viewModel.disabled) {
                    var fieldWellPayload = dragPayload, selectedVisual = this.getSelectedVisual();
                    if (fieldWellPayload.sourceRole) {
                        debug.fF.assert(function() {
                            return $.isNumeric(fieldWellPayload.sourceIndex);
                        }, "Unexpected drag source");
                        var targetIndex = 0;
                        this.viewModel.properties.length > 0 && (targetIndex = _.last(this.viewModel.properties).endIndex + 1), 
                        fieldWellPayload.sourceRole === this.viewModel.role && (targetIndex = Math.max(targetIndex - (fieldWellPayload.hierarchyLevelCount || 1), 0));
                        var dataSources = this.services.dataSources.get();
                        this.services.visualAuthoring.moveField(fieldWellPayload.sourceRole, this.viewModel.role, fieldWellPayload.sourceIndex, targetIndex, fieldWellPayload.hierarchyLevelCount || 1, dataSources, 16 === (null == selectedVisual ? void 0 : selectedVisual.visibility));
                        var expr = selectedVisual ? selectedVisual.config.singleVisual.query.tryGetExpr(fieldWellPayload.sourceRole, fieldWellPayload.sourceIndex) : null;
                        this.logTelemetry(expr, fieldWellPayload.sourceRole, selectedVisual);
                    } else dragPayload.field && this.dropField(dragPayload.field);
                }
            }, FieldWellBucketCore.prototype.dropField = function(expr) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var success, selectedVisual, dataSources;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.viewModel.disabled ? [ 2, !1 ] : (selectedVisual = this.getSelectedVisual()) ? (dataSources = this.services.dataSources.get(), 
                            [ 4, this.services.visualAuthoring.addFieldInRole(expr, this.viewModel.role, dataSources, selectedVisual, void 0, void 0, void 0, 16 === (null == selectedVisual ? void 0 : selectedVisual.visibility)) ]) : [ 3, 2 ];

                          case 1:
                            return success = _a.sent(), [ 3, 3 ];

                          case 2:
                            this.services.eventBridge.publishToChannel(events.Tyr, {
                                expr,
                                visualType: fieldWellUtility.x.getDefaultVisualPlugin(this.services.featureSwitchService).name,
                                targetRole: this.viewModel.role,
                                allowAggregate: !0,
                                telemetrySource: 3,
                                startAuthoringAfterAddition: !1
                            }), success = !0, _a.label = 3;

                          case 3:
                            return this.logTelemetry(expr, null), [ 2, success ];
                        }
                    });
                });
            }, FieldWellBucketCore.prototype.logTelemetry = function(expr, sourceRole, selectedVisual) {
                if (expr) {
                    var action = "Create";
                    sourceRole && (action = "Update", this.services.telemetryService.logEvent(telemetry_events.V1, {
                        sourceBucketRole: sourceRole,
                        targetBucketRole: this.viewModel.role,
                        visualName: selectedVisual && selectedVisual.name
                    }));
                    var visualType = (0, visualContainerUtilsHelper.s)(this.getSelectedVisual()), schemaPromise = getSchemaPromise(this.services.dataSources.get(), this.services.promiseFactory, this.services.conceptualSchemaProxy);
                    this.services.groupAuthoring.telemetry.logGroupsUsageTelemetry(schemaPromise, expr, visualType, this.viewModel.role, sourceRole, action);
                }
            }, FieldWellBucketCore.prototype.getSelectedVisual = function() {
                return selectionUtils.UP.getSelectedVisual(this.services.selection);
            }, FieldWellBucketCore;
        }();
        function FieldWellModernComponent_ol_1_field_well_bucket_modern_1_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "field-well-bucket-modern", 3), 2 & rf && core["\u0275\u0275property"]("viewModel", ctx.$implicit);
        }
        function FieldWellModernComponent_ol_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "ol"), core["\u0275\u0275template"](1, FieldWellModernComponent_ol_1_field_well_bucket_modern_1_Template, 1, 1, "field-well-bucket-modern", 2), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r0.viewModel.buckets);
            }
        }
        var CreateBucketsCancelled = {}, FieldWellModernComponent = function() {
            function FieldWellModernComponent(changeDetection, conceptualSchemaProxy, dataSources, displayNameService, eventBridge, explorationNavigation, groupingDesignStateService, featureSwitchService, lazyScoped, localizationService, runningVisualService, selectionService, showValueAsService, vcRef, visualPlugin, visibility, visualCalcEagerService) {
                this.changeDetection = changeDetection, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.dataSources = dataSources, this.displayNameService = displayNameService, this.eventBridge = eventBridge, 
                this.explorationNavigation = explorationNavigation, this.groupingDesignStateService = groupingDesignStateService, 
                this.featureSwitchService = featureSwitchService, this.lazyScoped = lazyScoped, 
                this.localizationService = localizationService, this.runningVisualService = runningVisualService, 
                this.selectionService = selectionService, this.showValueAsService = showValueAsService, 
                this.vcRef = vcRef, this.visualPlugin = visualPlugin, this.visibility = visibility, 
                this.visualCalcEagerService = visualCalcEagerService;
            }
            return FieldWellModernComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var services;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return services = {
                                $element: $(this.vcRef.element.nativeElement),
                                conceptualSchemaProxy: this.conceptualSchemaProxy,
                                dataSources: this.dataSources,
                                explorationDisplayNameService: this.displayNameService,
                                eventBridge: this.eventBridge,
                                explorationNavigation: this.explorationNavigation,
                                groupingDesignStateService: this.groupingDesignStateService,
                                featureSwitchService: this.featureSwitchService,
                                selection: this.selectionService,
                                showValueAsService: this.showValueAsService,
                                visualPlugin: this.visualPlugin,
                                localizationService: this.localizationService,
                                runningVisuals: this.runningVisualService,
                                visibility: this.visibility,
                                visualCalcEagerService: this.visualCalcEagerService,
                                lazyScopedProvider: this.lazyScoped
                            }, this.core = new FieldWellCore(services, !1, this.updateViewModel.bind(this)), 
                            [ 4, this.core.onInit() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, FieldWellModernComponent.prototype.ngOnDestroy = function() {
                this.core.onDestroy();
            }, FieldWellModernComponent.prototype.updateViewModel = function(viewModel) {
                this.viewModel = viewModel, this.changeDetection.detectChanges();
            }, FieldWellModernComponent.\u0275fac = function(t) {
                return new (t || FieldWellModernComponent)(core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](exploration_display_name_service.O), core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](exploration_navigation_service.z), core["\u0275\u0275directiveInject"](grouping_design_state_service.AA), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](lazy_scoped_provider.H), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](running_visual_service.s), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](show_value_as_service.P), core["\u0275\u0275directiveInject"](core.ViewContainerRef), core["\u0275\u0275directiveInject"](visual_plugin_service.D), core["\u0275\u0275directiveInject"](visibility_service.w), core["\u0275\u0275directiveInject"](visual_calc_eager_service.w));
            }, FieldWellModernComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FieldWellModernComponent,
                selectors: [ [ "field-well-modern" ] ],
                decls: 2,
                vars: 1,
                consts: [ [ 1, "fieldWell", "unselectable" ], [ 4, "ngIf" ], [ "class", "field-well-bucket-element", "data-testid", "field-well-bucket-element", "role", "listitem", 3, "viewModel", 4, "ngFor", "ngForOf" ], [ "data-testid", "field-well-bucket-element", "role", "listitem", 1, "field-well-bucket-element", 3, "viewModel" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "section", 0), core["\u0275\u0275template"](1, FieldWellModernComponent_ol_1_Template, 2, 1, "ol", 1), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.viewModel && ctx.viewModel.buckets));
                },
                dependencies: [ common.NgForOf, common.NgIf, FieldWellBucketModernComponent ],
                styles: [ ".explorationContainer .fieldWell{overflow:auto}.explorationContainer .fieldWell .errorIcon{cursor:pointer;width:16px;height:16px;background-color:transparent;vertical-align:top}.explorationContainer .fieldWell .bucket{display:flex;flex-direction:column;padding-bottom:4px;color:var(--neutral-tertiary-alt-color, #C8C8C8);width:100%}.explorationContainer .fieldWell .bucket .bucket-header{display:flex;flex-direction:row;margin:6px 5px 6px 0;align-items:center}.explorationContainer .fieldWell .bucket .bucket-header .caption{box-sizing:border-box;margin-left:12px;font-weight:inherit;color:var(--white-color, #FFF)}.explorationContainer .fieldWell .bucket .bucket-header .caption:focus{outline:none}.explorationContainer .fieldWell .bucket .bucket-header .warning{flex:none;margin-top:auto;color:var(--data-color6, #8AD4EB);cursor:pointer}.explorationContainer .fieldWell .properties{float:left;min-height:28px;width:calc(100% - 10px);margin:0 4px;border:1px dashed var(--neutral-secondary-color, #666666);border-radius:4px;background-color:var(--neutral-primary-color-alt2, #4a4a4a);padding:1px 0}.explorationContainer .fieldWell .properties.dragover{border:1px dashed var(--theme-primary-color, #F2C811)!important}.explorationContainer .fieldWell .properties li:focus{outline:none}.explorationContainer .fieldWell .dropzone,.explorationContainer .fieldWell .end-dropzone{width:calc(100% - 4px);line-height:22px;padding-left:8px;margin:0 2px}.explorationContainer .fieldWell .end-dropzone.supports-multiple-items{height:7px;border-top:1px solid transparent}.explorationContainer .fieldWell .end-dropzone.supports-multiple-items.prepend{border-top-color:var(--theme-primary-color, #F2C811)!important}.explorationContainer .fieldWell .end-dropzone.supports-multiple-items:focus{outline:none}.explorationContainer .fieldWellProperty[drag]{position:relative;padding-left:4px;background:var(--neutral-primary-color, #333333);border-radius:3px;border:1px solid var(--neutral-dark-color, #212121);cursor:pointer}.explorationContainer .fieldWellProperty[drag].not-draggable,.explorationContainer .fieldWellProperty[drag].not-draggable .errorIcon,.explorationContainer .fieldWellProperty[drag].not-draggable .editableLabel .textLabel{cursor:default}.explorationContainer .fieldWellProperty[drag] .caption{color:var(--white-color, #FFF);line-height:21px}.explorationContainer .fieldWellProperty[drag] .field-glyph{float:left;margin:4px 4px 4px 2px}.explorationContainer .fieldWellProperty[drag] .error{float:left;width:16px;height:16px}.explorationContainer .fieldWellProperty[drag] .delete{width:16px;height:16px;color:var(--neutral-secondary-alt-color2, #888888);background:transparent}.explorationContainer .fieldWellProperty[drag] .hierarchyList{padding-left:8px;color:var(--white-color, #FFF)}.explorationContainer .fieldWellProperty[drag] .hierarchyList .subcaption{color:var(--white-color, #FFF);line-height:19px}.explorationContainer .fieldWellProperty[drag] .glyphicon{color:var(--white-color, #FFF)}.explorationContainer field-well-field-modern{border:solid var(--neutral-primary-color-alt2, #4a4a4a);display:block;border-width:1px 0;border-radius:3px;margin:0 2px}.explorationContainer field-well-field-modern.append{border-bottom-color:var(--theme-primary-color, #F2C811)!important}.explorationContainer field-well-field-modern.prepend{border-top-color:var(--theme-primary-color, #F2C811)!important}.explorationContainer field-well-field-modern .textInput{background:var(--neutral-tertiary-alt-color, #C8C8C8);color:var(--black-color, #000)}.explorationContainer field-well-field-modern .textInput::selection{background:var(--theme-primary-color, #F2C811)}.explorationContainer field-well-field-modern editable-label .textLabel{white-space:nowrap}.explorationContainer .fieldWellIcon{background-color:transparent}.explorationContainer .fieldWellIcon:hover,.explorationContainer .fieldWellIcon:focus,.explorationContainer .fieldWellIcon:active,.explorationContainer .fieldWellIcon:active:hover,.explorationContainer .fieldWellIcon:focus:hover{background-color:transparent}.explorationContainer .bucketTopBorder{border-bottom:1px solid transparent;border-radius:3px;margin:0 2px}.explorationContainer .bucketTopBorder.append{border-bottom-color:var(--theme-primary-color, #F2C811)}.newPaneColors.explorationContainer{--field-well-title-color: var(--gray-180, #252423);--field-well-background: var(--white-color, #FFF);--field-well-item-background: var(--gray-30, #EDEBE9);--field-well-item-border-color: var(--gray-60, #C8C6C4)}[data-legacy-theming=false] .newPaneColors.explorationContainer{--field-well-title-color: var(--colorNeutralForeground1);--field-well-background: var(--colorNeutralBackground3);--field-well-item-background: var(--colorNeutralBackground2);--field-well-item-border-color: var(--colorNeutralStroke1)}.newPaneColors.explorationContainer .fieldWell .bucket,.newPaneColors.explorationContainer .fieldWell .bucket .bucket-header .caption{color:var(--field-well-title-color)}html[data-focus-source=key] .newPaneColors.explorationContainer .fieldWell .bucket .bucket-header .caption:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.newPaneColors.explorationContainer .fieldWell .properties{border-color:var(--field-well-item-border-color);background-color:var(--field-well-background);border-radius:2px}.newPaneColors.explorationContainer .fieldWell .properties.dragover{border-color:var(--gray-130, #605E5C)!important}html[data-focus-source=key] .newPaneColors.explorationContainer .fieldWell .properties li:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}html[data-focus-source=key] .newPaneColors.explorationContainer .fieldWell .errorIcon:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.newPaneColors.explorationContainer .fieldWellProperty[drag]{background:var(--field-well-item-background);border-radius:2px;border-color:var(--field-well-item-border-color)}.newPaneColors.explorationContainer .fieldWellProperty[drag] .caption{color:var(--field-well-title-color)}.newPaneColors.explorationContainer .fieldWellProperty[drag] .caption input{background:var(--field-well-background);color:var(--field-well-title-color)}.newPaneColors.explorationContainer .fieldWellProperty[drag] .delete{color:var(--field-well-title-color)}html[data-focus-source=key] .newPaneColors.explorationContainer .fieldWellProperty[drag] .delete:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.newPaneColors.explorationContainer .fieldWellProperty[drag] .hierarchyList,.newPaneColors.explorationContainer .fieldWellProperty[drag] .hierarchyList .subcaption{color:var(--field-well-title-color)}html[data-focus-source=key] .newPaneColors.explorationContainer .fieldWellProperty[drag] .hierarchyList .subcaption:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.newPaneColors.explorationContainer .fieldWellProperty[drag] .glyphicon{color:var(--field-well-title-color)}.newPaneColors.explorationContainer field-well-field-modern{border-color:transparent;border-radius:2px}.newPaneColors.explorationContainer field-well-field-modern .textInput{background:var(--field-well-background);color:var(--field-well-title-color)}html[data-focus-source=key] .newPaneColors.explorationContainer field-well-field-modern editable-label:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}html[data-focus-source=key] .newPaneColors.explorationContainer .fieldWellIcon:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.newPaneColors.explorationContainer .bucketTopBorder{border-radius:2px}\n" ],
                encapsulation: 2
            }), FieldWellModernComponent;
        }(), FieldWellCore = function() {
            function FieldWellCore(services, disableHierarchyLevelGrouping, onViewModelChange) {
                this.services = services, this.disableHierarchyLevelGrouping = disableHierarchyLevelGrouping, 
                this.onViewModelChange = onViewModelChange, this.additionalSubscriptions = new Subscription.w;
            }
            return FieldWellCore.prototype.onInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.viewModel = new field_well_view_model.KT([]), this.subscriptionManager = this.services.eventBridge.createChannelSubscriptionManager().subscribe(events.CCe, function() {
                                return _this.requestModelAndUpdate(!0);
                            }).subscribe(events.tRg, function() {
                                return _this.requestModelAndUpdate();
                            }).subscribe(events.KD7, function() {
                                return _this.requestModelAndUpdate();
                            }).subscribe(events.y5h, function() {
                                return _this.requestModelAndUpdate(!0);
                            }).subscribe(events.jCS, function() {
                                return _this.requestModelAndUpdate(!0);
                            }).subscribe(events.Ah$, function(e, displayName) {
                                return _this.onFieldWellFieldRemoved(displayName);
                            }).subscribe(events.D1A, function() {
                                return _this.requestModelAndUpdate(!0);
                            }).subscribe(events.oRp, function() {
                                return _this.requestModelAndUpdate();
                            }), this.additionalSubscriptions.add(this.services.visualCalcEagerService.onContextChange$().subscribe(function() {
                                return _this.requestModelAndUpdate();
                            })), this.additionalSubscriptions.add(selectionUtils.UP.getSelectedVisualContainer$(this.services.selection).pipe((0, 
                            filter.h)(function(visualContainer) {
                                return !!visualContainer;
                            }), (0, switchMap.w)(function(visualContainer) {
                                return _this.services.runningVisuals.getVisual$(visualContainer);
                            }), (0, switchMap.w)(function(visual) {
                                return visual ? visual.getErrorInfo$() : empty.E;
                            })).subscribe(function() {
                                return _this.requestModelAndUpdate();
                            })), [ 4, this.requestModelAndUpdate() ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, FieldWellCore.prototype.onDestroy = function() {
                this.subscriptionManager && this.subscriptionManager.unsubscribeAll(), this.additionalSubscriptions.unsubscribe();
            }, FieldWellCore.prototype.onFieldWellFieldRemoved = function(displayName) {
                focusManager.IK.focus(_.find(this.services.$element.find(".field-well-bucket-element .bucket .bucket-header .caption"), function(caption) {
                    return $(caption).html() === displayName;
                }), !1);
            }, FieldWellCore.prototype.requestModelAndUpdate = function(reuseViewModel) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return (dataSources = this.services.dataSources.get()) ? [ 2, this.services.conceptualSchemaProxy.get(dataSources).then(function(schema) {
                            return _this.update(schema, reuseViewModel);
                        }) ] : [ 2 ];
                    });
                });
            }, FieldWellCore.prototype.update = function(schema, reuseViewModel) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var factory, newBuckets, visual, roles, extensions, useNativeReferenceNames, runningVisual, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return [ 4, this.services.lazyScopedProvider.get("fieldWellViewModelService") ];

                          case 1:
                            if (factory = _b.sent(), visual = this.getSelectedVisual(), this.deferredCreateBuckets && (this.deferredCreateBuckets.reject(CreateBucketsCancelled), 
                            this.deferredCreateBuckets = void 0), schema) {
                                if (visual) return extensions = [ new FieldWellCanvasTooltipProperty(this.services.explorationNavigation, this.services.localizationService) ], 
                                useNativeReferenceNames = 16 === (null === (_a = this.services.visibility.get()) || void 0 === _a ? void 0 : _a.visibility), 
                                this.services.featureSwitchService.featureSwitches.cartesianMultiplesAuthoring || extensions.push(new FieldWellSmallMultiplesExtensions(this.services.visualPlugin, visual)), 
                                runningVisual = this.services.runningVisuals.getVisual(visual), this.deferredCreateBuckets = factory.createBuckets(runningVisual, visual, schema, this.services.groupingDesignStateService, this.services.showValueAsService, this.services.visualPlugin, this.services.explorationDisplayNameService, extensions, this.disableHierarchyLevelGrouping, useNativeReferenceNames), 
                                [ 2, this.deferredCreateBuckets.promise.then(function(result) {
                                    _this.updateViewModel(result, reuseViewModel);
                                }, function(error) {
                                    if (error !== CreateBucketsCancelled) throw error;
                                }).finally(function() {
                                    _this.deferredCreateBuckets = void 0;
                                }) ];
                                roles = (0, visualContainerUtils.x3)(fieldWellUtility.x.getDefaultVisualPlugin(this.services.featureSwitchService)), 
                                newBuckets = factory.createEmptyBuckets(roles, []), this.updateViewModel(newBuckets, reuseViewModel);
                            } else this.updateViewModel(newBuckets = null, reuseViewModel);
                            return [ 2 ];
                        }
                    });
                });
            }, FieldWellCore.prototype.updateViewModel = function(newBuckets, reuseViewModel) {
                reuseViewModel && (0, comparable.L)(newBuckets, this.viewModel.buckets) || (this.viewModel.buckets = newBuckets, 
                this.onViewModelChange && this.onViewModelChange(this.viewModel));
            }, FieldWellCore.prototype.getSelectedVisual = function() {
                return selectionUtils.UP.getSelectedVisual(this.services.selection);
            }, FieldWellCore;
        }(), FieldWellCanvasTooltipProperty = function() {
            function FieldWellCanvasTooltipProperty(explorationNavigation, localizationService) {
                this.explorationNavigation = explorationNavigation, this.localizationService = localizationService;
            }
            return FieldWellCanvasTooltipProperty.prototype.onBucketCreated = function(bucket, visual, _schema, _groupingDesign, _showValueAs, visualPluginService, localizationService) {
                var singleVisual = visual.config.singleVisual, capabilities = visualPluginService.capabilities(singleVisual.visualType), showByDefault = !capabilities || !capabilities.tooltips || void 0 === capabilities.tooltips.showByDefault || capabilities.tooltips.showByDefault, tooltipShowExpr = (0, 
                dataViewObjectDefinition1.NA)(singleVisual.vcObjects, {
                    objectName: "visualTooltip",
                    propertyName: "show"
                }, void 0);
                if ((tooltipShowExpr || showByDefault) && (!tooltipShowExpr || tooltipShowExpr.value)) {
                    var tooltipTypeExpr = (0, dataViewObjectDefinition1.NA)(singleVisual.vcObjects, {
                        objectName: "visualTooltip",
                        propertyName: "type"
                    }, void 0), tooltipSectionExpr = (0, dataViewObjectDefinition1.NA)(singleVisual.vcObjects, {
                        objectName: "visualTooltip",
                        propertyName: "section"
                    }, void 0), userSpecifiedTooltipType = tooltipTypeExpr && tooltipTypeExpr.value, userSpecifiedTooltipSection = tooltipSectionExpr && tooltipSectionExpr.value;
                    if ((!userSpecifiedTooltipType || userSpecifiedTooltipType === visualContainer1.Xz) && userSpecifiedTooltipSection && userSpecifiedTooltipSection !== visualContainer1.pJ && _.some(capabilities.tooltips && capabilities.tooltips.roles, function(role) {
                        return role === bucket.role;
                    })) {
                        var sectionname_1 = tooltipSectionExpr && tooltipSectionExpr.value, displayName = void 0;
                        if (sectionname_1 === visualContainer1.pJ) displayName = localizationService.get("ReportPage"); else {
                            var sections = this.explorationNavigation.getAllSections(), section = _.find(sections, function(section) {
                                return section.name === sectionname_1 && 1 === section.type;
                            });
                            if (!section) return;
                            displayName = section.displayName;
                        }
                        var displayOptions = new field_well_view_model.DR(displayName, null, null, "pbi-glyph-canvas-tooltip"), interactivityOptions = new field_well_view_model.Ct(null, !1, !1);
                        interactivityOptions.disableInteractivity();
                        var newProperty = new field_well_view_model._d(void 0, bucket.role, -1, -1, !0, displayOptions, interactivityOptions, void 0, void 0, void 0, void 0);
                        bucket.properties.push(newProperty), bucket.warning = new field_well_view_model.kh("pbi-glyph-info", void 0, this.localizationService.get("FieldWellBucket_Warning_CanvasTooltipDescription"));
                    }
                }
            }, FieldWellCanvasTooltipProperty.prototype.shouldCreateBucketForRole = function(dataRole) {
                return !0;
            }, FieldWellCanvasTooltipProperty;
        }(), FieldWellSmallMultiplesExtensions = function() {
            function FieldWellSmallMultiplesExtensions(visualPluginService, visual) {
                this.visualPluginService = visualPluginService, this.visual = visual;
            }
            return FieldWellSmallMultiplesExtensions.prototype.onBucketCreated = function(_bucket, _visual, _schema, _groupingDesign, _showValueAs, _visualPluginService, _localizationService) {}, 
            FieldWellSmallMultiplesExtensions.prototype.shouldCreateBucketForRole = function(dataRole) {
                var capabilities = this.visualPluginService.capabilities(this.visual.config.singleVisual.visualType);
                return (0, visualAuthoringCore.hQ)(dataRole, this.visual.config.singleVisual, capabilities);
            }, FieldWellSmallMultiplesExtensions;
        }();
        function BuildSectionComponent_section_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "section"), core["\u0275\u0275element"](1, "visual-types-container-modern", 5), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("visualPluginFilter", ctx_r0.visualPluginFilter);
            }
        }
        function BuildSectionComponent_section_3_spinner_1_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "spinner");
        }
        function BuildSectionComponent_section_3_Template(rf, ctx) {
            if (1 & rf) {
                var _r5 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "section", 6), core["\u0275\u0275template"](1, BuildSectionComponent_section_3_spinner_1_Template, 1, 0, "spinner", 2), 
                core["\u0275\u0275elementStart"](2, "visual-types-container-modern", 7), core["\u0275\u0275listener"]("isFinishedLoading", function() {
                    core["\u0275\u0275restoreView"](_r5);
                    var ctx_r4 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r4.onVisualTypesContainerDoneLoading());
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r1.isPersonalVisualTypesLoaded), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("hidden", !ctx_r1.isPersonalVisualTypesLoaded), 
                core["\u0275\u0275property"]("visualPluginFilter", ctx_r1.nonPersonalVisualizationPaneFilter)("disableMoreOptionsIcon", !0);
            }
        }
        function BuildSectionComponent_div_4_section_2_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementStart"](0, "section"), core["\u0275\u0275element"](1, "field-well-modern"), 
            core["\u0275\u0275elementEnd"]());
        }
        function BuildSectionComponent_div_4_section_3_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementStart"](0, "section"), core["\u0275\u0275element"](1, "drillthrough-pane", 9), 
            core["\u0275\u0275elementEnd"]());
        }
        var build_section_component_c0 = function() {
            return {
                ignoreOverlay: !1,
                ignoreMobile: !1
            };
        };
        function BuildSectionComponent_div_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div")(1, "div", 8), core["\u0275\u0275template"](2, BuildSectionComponent_div_4_section_2_Template, 2, 0, "section", 2), 
            core["\u0275\u0275template"](3, BuildSectionComponent_div_4_section_3_Template, 2, 0, "section", 2), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275classMap"](ctx_r2.fieldWellOrFiltersClass), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("pbiScrollbar", core["\u0275\u0275pureFunction0"](6, build_section_component_c0))("pbiScrollbarDisabled", ctx_r2.disableScrollbar), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r2.showFieldWell), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r2.showDrillthroughPane);
            }
        }
        var SyncGroupPaneViewModelFactory, BuildSectionComponent = function() {
            function BuildSectionComponent() {
                this.disableScrollbar = !1;
            }
            return BuildSectionComponent.prototype.onVisualTypesContainerDoneLoading = function() {
                this.isPersonalVisualTypesLoaded = !0;
            }, Object.defineProperty(BuildSectionComponent.prototype, "fieldWellOrFiltersClass", {
                get: function() {
                    return this.disableScrollbar ? "fieldWellOrFilters disableScrollbar" : "fieldWellOrFilters enableScrollbar";
                },
                enumerable: !1,
                configurable: !0
            }), BuildSectionComponent.\u0275fac = function(t) {
                return new (t || BuildSectionComponent);
            }, BuildSectionComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: BuildSectionComponent,
                selectors: [ [ "build-section" ] ],
                inputs: {
                    showVisualTypes: "showVisualTypes",
                    showFieldWell: "showFieldWell",
                    showDrillthroughPane: "showDrillthroughPane",
                    showFieldWellOrFilters: "showFieldWellOrFilters",
                    populatePanes: "populatePanes",
                    visualPluginFilter: "visualPluginFilter",
                    nonPersonalVisualizationPaneFilter: "nonPersonalVisualizationPaneFilter",
                    showNonPersonalVisuals: "showNonPersonalVisuals",
                    disableScrollbar: "disableScrollbar"
                },
                decls: 5,
                vars: 3,
                consts: [ [ "section-animation-slider", "", 1, "pane-contents-modern", "modern-format-pane" ], [ 1, "visualTypesContainer" ], [ 4, "ngIf" ], [ "class", "nonPersonalVisualizationPane", 4, "ngIf" ], [ 3, "class", 4, "ngIf" ], [ 3, "visualPluginFilter" ], [ 1, "nonPersonalVisualizationPane" ], [ 3, "visualPluginFilter", "disableMoreOptionsIcon", "isFinishedLoading" ], [ 1, "scroller", 3, "pbiScrollbar", "pbiScrollbarDisabled" ], [ 1, "modern" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0)(1, "div", 1), core["\u0275\u0275template"](2, BuildSectionComponent_section_2_Template, 2, 1, "section", 2), 
                    core["\u0275\u0275template"](3, BuildSectionComponent_section_3_Template, 3, 5, "section", 3), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](4, BuildSectionComponent_div_4_Template, 4, 7, "div", 4), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.showVisualTypes), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.showVisualTypes && ctx.showNonPersonalVisuals), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.showFieldWellOrFilters));
                },
                dependencies: [ common.NgIf, section_animation_slider.R, pbi_scrollbar_directive.r, spinner_component.O, visual_types_container_modern_component.r, DrillthroughPaneComponent, FieldWellModernComponent ],
                styles: [ '.pane-contents-modern[_ngcontent-%COMP%]{display:flex;flex-direction:column;flex:1;margin-top:2px}.hidden[_ngcontent-%COMP%]{display:none}.nonPersonalVisualizationPane[_ngcontent-%COMP%]{margin-top:4px;padding-top:4px;border-top:1px dashed var(--gray-40, #E1DFDD)}.fieldWellOrFilters[_ngcontent-%COMP%]{border-top:1px solid var(--gray-40, #E1DFDD);padding-top:2px;flex-basis:0;flex-grow:1}.disableScrollbar[_ngcontent-%COMP%]{overflow:unset;padding-right:"6px";padding-left:"6px"}.enableScrollbar[_ngcontent-%COMP%]{overflow:hidden}.visualTypesContainer[_ngcontent-%COMP%]{display:flex;flex-direction:column;padding:2px 6px;margin-bottom:4px}' ]
            }), BuildSectionComponent;
        }(), canvasVisualsUtility = __webpack_require__(41887), visualContainer2 = __webpack_require__(80981);
        !function(SyncGroupPaneViewModelFactory) {
            function create(sourceVisual, visualPlugin, localizationService, visualSyncService, exploration, schema) {
                if (sourceVisual && function(sourceVisual, visualPlugin) {
                    var visualConfig = sourceVisual.config.singleVisual, visualQuery = visualConfig.query;
                    if (visualQuery) return visualPlugin.capabilities(visualConfig.visualType).supportsSynchronizingFilterState && visualQuery.hasProjections();
                }(sourceVisual, visualPlugin)) return new SyncGroupPaneViewModel(sourceVisual, exploration, schema, localizationService, visualSyncService);
            }
            SyncGroupPaneViewModelFactory.create = create, SyncGroupPaneViewModelFactory.createObservable = function(subscriptionManager, conceptualSchemaProxy, dataSources, selection, visualPlugin, visualSync, explorationNavigation, localizationService) {
                var _this = this, conceptualSchema$ = new BehaviorSubject.X(void 0);
                conceptualSchemaProxy.get(dataSources.get()).then(function(schema) {
                    return conceptualSchema$.next(schema);
                });
                var waitForSchema, selectedVisual$ = new BehaviorSubject.X(selectionUtils.UP.getSelectedVisual(selection)), exploration$ = new BehaviorSubject.X(explorationNavigation.getCurrentExploration());
                return subscriptionManager.subscribe(events.jCS, function(_, args) {
                    if (1 !== args.visualContainerChangeType) {
                        var selected = selectionUtils.UP.getSelectedVisual(selection);
                        selected && args.affectContainer(selected) && selectedVisual$.next(selected);
                    }
                }).subscribe(events.tRg, function() {
                    selectedVisual$.next(selectionUtils.UP.getSelectedVisual(selection));
                }).subscribe(events.UpY, function() {
                    waitForSchema = !0;
                }).subscribe(events.t4l, function() {
                    exploration$.next(explorationNavigation.getCurrentExploration());
                }).subscribe(events.LE3, function() {
                    exploration$.next(explorationNavigation.getCurrentExploration());
                }).subscribeAsync(events.CCe, function() {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        var schema;
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return [ 4, conceptualSchemaProxy.get(dataSources.get()) ];

                              case 1:
                                return schema = _a.sent(), waitForSchema = !1, conceptualSchema$.next(schema), [ 2 ];
                            }
                        });
                    });
                }).subscribe(events.KD7, function() {
                    return selectedVisual$.next(selectionUtils.UP.getSelectedVisual(selection));
                }).subscribe(events.TTT, function() {
                    exploration$.next(explorationNavigation.getCurrentExploration());
                }).subscribe(events.HGU, function() {
                    exploration$.next(explorationNavigation.getCurrentExploration());
                }), (0, combineLatest.aj)([ conceptualSchema$, selectedVisual$, exploration$ ]).pipe((0, 
                filter.h)(function() {
                    return !waitForSchema;
                }), (0, map.U)(function(_a) {
                    var conceptualSchema = _a[0], selectedVisual = _a[1], exploration = _a[2];
                    if (selectedVisual && conceptualSchema && exploration) return create(selectedVisual, visualPlugin, localizationService, visualSync, exploration, conceptualSchema);
                }));
            };
        }(SyncGroupPaneViewModelFactory || (SyncGroupPaneViewModelFactory = {}));
        var SyncGroupPaneViewModel = function() {
            return function(sourceVisual, exploration, schema, localizationService, visualSyncService) {
                this.sourceVisual = sourceVisual, this.exploration = exploration, this.schema = schema, 
                this.localizationService = localizationService, this.visualSyncService = visualSyncService, 
                this.pageSyncItems = [];
                var groupResult = function(sourceVisualConfig, exploration, visualSyncService, schema, localizationService) {
                    return sourceVisualConfig.syncGroup ? function(sourceVisual, exploration, localizationService) {
                        var sourceVisualGroup = getNormalizedGroupName(sourceVisual);
                        debug.fF.assertValue(sourceVisualGroup, "source visual should be in a group");
                        for (var syncGroupItems = [], allGroupNames = {}, _i = 0, _a = exploration.sections; _i < _a.length; _i++) {
                            for (var section = _a[_i], syncCheckboxAriaLabel = localizationService.format("SyncGroupPane_SyncCheckboxLabel", [ section.displayName ]), visibleCheckboxAriaLabel = localizationService.format("SyncGroupPane_VisibleCheckboxLabel", [ section.displayName ]), sourceVisualInSection = void 0, ungroupedCandidates = [], visualsInSourceGroup = [], _b = 0, _c = section.visualContainers; _b < _c.length; _b++) {
                                var singleVisualConfig = (visual = _c[_b]).config.singleVisual, visualGroup = getNormalizedGroupName(singleVisualConfig);
                                visualGroup ? (allGroupNames[visualGroup] = !0, singleVisualConfig === sourceVisual ? sourceVisualInSection = visual : visualGroup === sourceVisualGroup && visualsInSourceGroup.push(visual)) : canSyncVisuals(sourceVisual, singleVisualConfig) && ungroupedCandidates.push(visual);
                            }
                            if (sourceVisualInSection) syncGroupItems.push({
                                section,
                                synced: !!sourceVisualGroup,
                                visible: !(0, visualContainer2.xj)(sourceVisual),
                                visualContainer: sourceVisualInSection,
                                isSourceVisual: !0,
                                syncCheckboxAriaLabel,
                                visibleCheckboxAriaLabel
                            }); else if (_.some(visualsInSourceGroup)) syncGroupItems.push(1 === visualsInSourceGroup.length ? {
                                section,
                                synced: !0,
                                visible: !(0, visualContainer2.xj)((visual = visualsInSourceGroup[0]).config.singleVisual),
                                visualContainer: visual,
                                syncCheckboxAriaLabel,
                                visibleCheckboxAriaLabel
                            } : {
                                disabledReason: 1,
                                section,
                                synced: !0,
                                visible: _.some(visualsInSourceGroup, function(v) {
                                    return !(0, visualContainer2.xj)(v.config.singleVisual);
                                }),
                                visualContainer: visualsInSourceGroup[0],
                                syncCheckboxAriaLabel,
                                visibleCheckboxAriaLabel
                            }); else if (1 === ungroupedCandidates.length) {
                                var visual;
                                syncGroupItems.push({
                                    section,
                                    synced: !1,
                                    visible: !(0, visualContainer2.xj)((visual = ungroupedCandidates[0]).config.singleVisual),
                                    visualContainer: visual,
                                    syncCheckboxAriaLabel,
                                    visibleCheckboxAriaLabel
                                });
                            } else syncGroupItems.push({
                                section,
                                synced: !1,
                                visible: !1,
                                syncCheckboxAriaLabel,
                                visibleCheckboxAriaLabel
                            });
                        }
                        return debug.fF.assert(function() {
                            return syncGroupItems.length === exploration.sections.length;
                        }, "expected a single sync group item for each section"), {
                            state: 0,
                            items: syncGroupItems,
                            activeSyncGroup: sourceVisualGroup
                        };
                    }(sourceVisualConfig, exploration, localizationService) : function(sourceVisual, exploration, visualSyncService, schema, localizationService) {
                        debug.fF.assert(function() {
                            return !sourceVisual.syncGroup;
                        }, "expected visual to be ungrouped");
                        for (var sourceVisualContainer, allGroupNames = {}, potentialGroups = {}, disallowedGroups = {}, sourceVisualSectionIndex = -1, syncGroupsForPage = [], i = 0; i < exploration.sections.length; i++) {
                            var syncCheckboxAriaLabel = localizationService.format("SyncGroupPane_SyncCheckboxLabel", [ (section = exploration.sections[i]).displayName ]), visibleCheckboxAriaLabel = localizationService.format("SyncGroupPane_VisibleCheckboxLabel", [ section.displayName ]);
                            syncGroupsForPage[i] = {};
                            for (var sourceVisualInSection = void 0, groupsOnPage = {}, _i = 0, _a = section.visualContainers; _i < _a.length; _i++) {
                                var visual = _a[_i], singleVisualConfig = visual.config.singleVisual, visualGroup = getNormalizedGroupName(singleVisualConfig);
                                if (singleVisualConfig === sourceVisual && (sourceVisualInSection = sourceVisualContainer = visual, 
                                sourceVisualSectionIndex = i), visualGroup && (allGroupNames[visualGroup] = !0), 
                                canSyncVisuals(sourceVisual, singleVisualConfig)) {
                                    visualGroup && (potentialGroups[visualGroup] = !0, groupsOnPage[visualGroup] = !0, 
                                    sourceVisualInSection && (disallowedGroups[visualGroup] = !0));
                                    var existingGroupItemForPage = syncGroupsForPage[i][visualGroup];
                                    existingGroupItemForPage && singleVisualConfig !== sourceVisual ? sourceVisualInSection || (syncGroupsForPage[i][visualGroup] = visualGroup ? {
                                        disabledReason: 1,
                                        synced: !0,
                                        section,
                                        visible: existingGroupItemForPage.visible || !(0, visualContainer2.xj)(singleVisualConfig),
                                        syncCheckboxAriaLabel,
                                        visibleCheckboxAriaLabel
                                    } : {
                                        synced: !1,
                                        section,
                                        visible: !1,
                                        syncCheckboxAriaLabel,
                                        visibleCheckboxAriaLabel
                                    }) : syncGroupsForPage[i][visualGroup] = {
                                        synced: !!visualGroup,
                                        section,
                                        visible: !(0, visualContainer2.xj)(singleVisualConfig),
                                        visualContainer: visual,
                                        syncCheckboxAriaLabel,
                                        visibleCheckboxAriaLabel
                                    };
                                }
                            }
                            sourceVisualInSection && (disallowedGroups = groupsOnPage);
                        }
                        for (var disallowed in disallowedGroups) delete potentialGroups[disallowed];
                        var potentialGroupNames = Object.keys(potentialGroups), ungroupedName = getNormalizedGroupName(null), groupName = 1 === potentialGroupNames.length ? potentialGroupNames[0] : ungroupedName, syncGroupItems = [];
                        for (i = 0; i < exploration.sections.length; i++) {
                            var section;
                            syncCheckboxAriaLabel = localizationService.format("SyncGroupPane_SyncCheckboxLabel", [ (section = exploration.sections[i]).displayName ]), 
                            visibleCheckboxAriaLabel = localizationService.format("SyncGroupPane_VisibleCheckboxLabel", [ section.displayName ]), 
                            syncGroupItems.push(i === sourceVisualSectionIndex ? {
                                section,
                                synced: !!sourceVisual.syncGroup,
                                visible: !(0, visualContainer2.xj)(sourceVisual),
                                visualContainer: sourceVisualContainer,
                                isSourceVisual: !0,
                                syncCheckboxAriaLabel,
                                visibleCheckboxAriaLabel
                            } : syncGroupsForPage[i][groupName] || syncGroupsForPage[i][ungroupedName] || {
                                section,
                                synced: !1,
                                visible: !1,
                                syncCheckboxAriaLabel,
                                visibleCheckboxAriaLabel
                            });
                        }
                        return debug.fF.assert(function() {
                            return syncGroupItems.length === exploration.sections.length;
                        }, "expected a single sync group item for each section"), {
                            state: 0,
                            items: syncGroupItems,
                            activeSyncGroup: groupName || visualSyncService.generateUniqueGroupName(schema, sourceVisual, allGroupNames)
                        };
                    }(sourceVisualConfig, exploration, visualSyncService, schema, localizationService);
                }(this.sourceVisual.config.singleVisual, this.exploration, this.visualSyncService, this.schema, this.localizationService), config = this.sourceVisual.config.singleVisual;
                this.pageSyncItems = groupResult.items, this.syncFields = config.syncGroup && config.syncGroup.fieldChanges, 
                this.syncFilters = config.syncGroup && config.syncGroup.filterChanges, this.sourceVisualSyncGroup = getNormalizedGroupName(config), 
                this.activeSyncGroup = groupResult.activeSyncGroup, this.status = groupResult.state;
            };
        }();
        function canSyncVisuals(source, candidate) {
            if (candidate.visualType !== source.visualType) return !1;
            var candidateSelects = candidate.query && candidate.query.defn && candidate.query.defn.select(), sourceSelects = source.query && source.query.defn && source.query.defn.select();
            return !_.isEmpty(sourceSelects) && !_.isEmpty(candidateSelects) && sourceSelects.length === candidateSelects.length && (1 === sourceSelects.length ? (0, 
            sqExprEqualityVisitor.fS)(sourceSelects[0].expr, candidateSelects[0].expr) : !_.differenceWith(sourceSelects, candidateSelects, function(sourceSelect, candidateSelect) {
                return (0, sqExprEqualityVisitor.fS)(sourceSelect.expr, candidateSelect.expr);
            }).length);
        }
        function getNormalizedGroupName(config) {
            return config && config.syncGroup && config.syncGroup.groupName || null;
        }
        var high_contrast_css_generation_service = __webpack_require__(64647), exploration_activity_service = __webpack_require__(69474), exploration_serializer_service = __webpack_require__(81986), undo_redo_service = __webpack_require__(84281), form_factor_provider_service = __webpack_require__(17328), panes_visibility_service = __webpack_require__(21024), visual_authoring_operations_service = __webpack_require__(27980), visual_sync_service = __webpack_require__(64370), localize_directive = __webpack_require__(59968), localize_tooltip_directive = __webpack_require__(50057), pbi_auto_focus_directive = __webpack_require__(54932), keyboard_shortcuts_directive = __webpack_require__(35756), pbi_checkbox_component = __webpack_require__(56011), pbi_icon_component = __webpack_require__(86663), pbi_pane_component = __webpack_require__(21023), pbi_pane_section_component = __webpack_require__(24548);
        function SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_1_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-pane-section"), core["\u0275\u0275element"](1, "legend", 4), 
            core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("id", "syncGroupDescriptionLegend"));
        }
        function SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_2_div_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r8 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 10)(1, "div", 21), core["\u0275\u0275listener"]("click", function() {
                    var item_r6 = core["\u0275\u0275restoreView"](_r8).$implicit, ctx_r7 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r7.navigateAndSelectVisual(item_r6));
                }), core["\u0275\u0275elementStart"](2, "label", 22), core["\u0275\u0275text"](3), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](4, "div", 23)(5, "pbi-checkbox", 24), 
                core["\u0275\u0275listener"]("onChange", function($event) {
                    var item_r6 = core["\u0275\u0275restoreView"](_r8).$implicit, ctx_r9 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r9.onSyncCheckChanged(item_r6, $event));
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](6, "div", 23)(7, "pbi-checkbox", 25), 
                core["\u0275\u0275listener"]("onChange", function($event) {
                    var item_r6 = core["\u0275\u0275restoreView"](_r8).$implicit, ctx_r10 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r10.onVisibleCheckChanged(item_r6, $event));
                }), core["\u0275\u0275elementEnd"]()()();
            }
            if (2 & rf) {
                var item_r6 = ctx.$implicit, ctx_r4 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275classProp"]("navigatable", item_r6.visualContainer)("currentPage", item_r6.isSourceVisual), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275attribute"]("title", item_r6.section.displayName)("role", item_r6.visualContainer ? "button" : null)("tabindex", item_r6.visualContainer ? 0 : null)("aria-label", item_r6.visualContainer ? ctx_r4.ariaNavigateDescription : null), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", item_r6.section.displayName, " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("isCompact", !0)("ariaLabel", item_r6.syncCheckboxAriaLabel)("checked", item_r6.synced)("disabled", !!item_r6.disabledReason), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("isCompact", !0)("ariaLabel", item_r6.visibleCheckboxAriaLabel)("disabled", !!item_r6.disabledReason)("checked", item_r6.visible);
            }
        }
        function SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_2_div_16_Template(rf, ctx) {
            if (1 & rf) {
                var _r12 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 26), core["\u0275\u0275element"](1, "label", 27), 
                core["\u0275\u0275elementStart"](2, "input", 28), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    core["\u0275\u0275restoreView"](_r12);
                    var ctx_r11 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r11.onSourceVisualSyncGroupChanged($event));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](3, "pbi-checkbox", 29), 
                core["\u0275\u0275listener"]("onChange", function($event) {
                    core["\u0275\u0275restoreView"](_r12);
                    var ctx_r13 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r13.onSyncFieldsCheckChanged($event));
                }), core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](5, "pbi-checkbox", 29), 
                core["\u0275\u0275listener"]("onChange", function($event) {
                    core["\u0275\u0275restoreView"](_r12);
                    var ctx_r14 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r14.onSyncFiltersCheckChanged($event));
                }), core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngModel", ctx_r5.syncViewModel.sourceVisualSyncGroup), 
                core["\u0275\u0275attribute"]("aria-label", ctx_r5.ariaSyncGroupName), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("isCompact", !0)("disabled", !ctx_r5.syncViewModel.sourceVisualSyncGroup)("label", core["\u0275\u0275pipeBind1"](4, 12, "SyncGroupPane_SyncFieldsLabel"))("ariaLabel", ctx_r5.ariaSyncFieldCheckbox)("checked", ctx_r5.syncViewModel.syncFields), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("isCompact", !0)("disabled", !ctx_r5.syncViewModel.sourceVisualSyncGroup)("label", core["\u0275\u0275pipeBind1"](6, 14, "SyncGroupPane_SyncFiltersLabel"))("ariaLabel", ctx_r5.ariaSyncFiltersCheckbox)("checked", ctx_r5.syncViewModel.syncFilters);
            }
        }
        function SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r16 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-pane-section", 5)(1, "pbi-pane-section", 6)(2, "legend", 7)(3, "span", 8), 
                core["\u0275\u0275listener"]("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r16);
                    var ctx_r15 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r15.syncToAll());
                }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](4, "div", 9)(5, "div", 10), 
                core["\u0275\u0275element"](6, "div", 11), core["\u0275\u0275elementStart"](7, "div", 12), 
                core["\u0275\u0275element"](8, "pbi-icon", 13), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementStart"](9, "div", 12), core["\u0275\u0275element"](10, "pbi-icon", 14), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](11, SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_2_div_11_Template, 8, 17, "div", 15), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](12, "pbi-pane-section", 16)(13, "div", 17), 
                core["\u0275\u0275listener"]("accessible-click", function() {
                    core["\u0275\u0275restoreView"](_r16);
                    var ctx_r17 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r17.toggleShowAdvancedOptions());
                }), core["\u0275\u0275element"](14, "pbi-icon", 18)(15, "legend", 19), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275template"](16, SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_2_div_16_Template, 7, 16, "div", 20), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](8), core["\u0275\u0275attribute"]("aria-label", ctx_r3.ariaSyncDescription), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275attribute"]("aria-label", ctx_r3.ariaVisibilityDescription), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx_r3.syncViewModel.pageSyncItems)("ngForTrackBy", ctx_r3.trackPageSyncItemBy), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("expandedAdvancedOptions", ctx_r3.showAdvancedOptions), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", ctx_r3.showAdvancedOptions);
            }
        }
        function SyncGroupPaneComponent_pbi_pane_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r19 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "pbi-pane", 1), core["\u0275\u0275listener"]("onCollapse", function() {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r18 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r18.onPaneCollapsed());
                })("onToggle", function() {
                    core["\u0275\u0275restoreView"](_r19);
                    var ctx_r20 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r20.onTogglePane());
                }), core["\u0275\u0275template"](1, SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_1_Template, 2, 1, "pbi-pane-section", 2), 
                core["\u0275\u0275template"](2, SyncGroupPaneComponent_pbi_pane_0_pbi_pane_section_2_Template, 17, 7, "pbi-pane-section", 3), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var paneViewModel_r1 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("expanded", paneViewModel_r1.isPaneExpanded)("allowToggle", !ctx_r0.onObject)("title", paneViewModel_r1.title)("optionsSetting", paneViewModel_r1.optionsSetting)("ariaDescribedBy", "syncGroupDescriptionLegend")("showCollapse", ctx_r0.onObject), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r0.syncViewModel || 0 !== ctx_r0.syncViewModel.status), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r0.syncViewModel && 0 === ctx_r0.syncViewModel.status);
            }
        }
        var SyncGroupPaneComponent = function() {
            function SyncGroupPaneComponent(conceptualSchemaProxy, highContrastCssGenerationService, dataSources, eventBridge, explorationActivity, explorationCapabilities, explorationNavigation, explorationSerializer, featureSwitchService, telemetryService, formFactor, localizationService, panesVisibility, selection, undoRedo, visualAuthoring, visualAuthoringOperations, visualPlugin, visualSync, changeDetectorRef) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.highContrastCssGenerationService = highContrastCssGenerationService, 
                this.dataSources = dataSources, this.eventBridge = eventBridge, this.explorationActivity = explorationActivity, 
                this.explorationCapabilities = explorationCapabilities, this.explorationNavigation = explorationNavigation, 
                this.explorationSerializer = explorationSerializer, this.featureSwitchService = featureSwitchService, 
                this.telemetryService = telemetryService, this.formFactor = formFactor, this.localizationService = localizationService, 
                this.panesVisibility = panesVisibility, this.selection = selection, this.undoRedo = undoRedo, 
                this.visualAuthoring = visualAuthoring, this.visualAuthoringOperations = visualAuthoringOperations, 
                this.visualPlugin = visualPlugin, this.visualSync = visualSync, this.changeDetectorRef = changeDetectorRef, 
                this.paneViewModel$ = this.panesVisibility.getPanes$().pipe((0, map.U)(function(panes) {
                    return panes.syncSlicers;
                })), this.newPaneColorsEnabled = this.explorationCapabilities.getCapabilities().showFluentDesign || this.featureSwitchService.featureSwitches && this.featureSwitchService.featureSwitches.paneColorRefresh, 
                this.initializeHighContrastRules(), this.scrollbarsConfig = {
                    ignoreOverlay: !1,
                    ignoreMobile: !1
                }, this.subscriptionManager = this.eventBridge.createChannelSubscriptionManager();
            }
            return SyncGroupPaneComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.ariaSyncFieldCheckbox = this.localizationService.get("SyncGroupPane_SyncFieldsLabel"), 
                this.ariaSyncFilterCheckbox = this.localizationService.get("SyncGroupPane_SyncFiltersLabel"), 
                this.ariaSyncGroupName = this.localizationService.get("SyncGroupPane_GroupNameLabel"), 
                this.ariaSyncDescription = this.localizationService.get("Sync"), this.ariaVisibilityDescription = this.localizationService.get("Visible"), 
                this.ariaNavigateDescription = this.localizationService.get("SyncGroupPane_NavigateDescription");
                var viewModel$ = SyncGroupPaneViewModelFactory.createObservable(this.subscriptionManager, this.conceptualSchemaProxy, this.dataSources, this.selection, this.visualPlugin, this.visualSync, this.explorationNavigation, this.localizationService);
                this.viewModelSubscription = viewModel$.subscribe(function(v) {
                    _this.syncViewModel = v, _this.changeDetectorRef.markForCheck();
                });
            }, SyncGroupPaneComponent.prototype.ngOnDestroy = function() {
                this.subscriptionManager.unsubscribeAll(), this.viewModelSubscription.unsubscribe();
            }, Object.defineProperty(SyncGroupPaneComponent.prototype, "onObject", {
                get: function() {
                    return this.featureSwitchService.featureSwitches.onObject;
                },
                enumerable: !1,
                configurable: !0
            }), SyncGroupPaneComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".themeableElement .advancedOptionsToggle:focus, .themeableElement .advancedOptionsToggle:focus-within, .themeableElement .advancedOptionsToggle:hover", "{ color: @selectedForegroundColor !important; background-color: @selectedBackgroundColor !important; outline: none; }");
            }, SyncGroupPaneComponent.prototype.getVisibleCheckboxAriaLabel = function(item) {
                return this.localizationService.format("SyncGroupPane_VisibleCheckboxLabel", [ item.section.displayName ]);
            }, SyncGroupPaneComponent.prototype.syncToAll = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.undoRedo.register("SyncToAll", function() {
                                for (var _i = 0, _a = _this.syncViewModel.pageSyncItems; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    item.synced || item.disabledReason || _this.syncItem(item);
                                }
                            }), [ 4, this.visualSync.syncFilterState(this.syncViewModel.sourceVisual, !0) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, SyncGroupPaneComponent.prototype.onSyncCheckChanged = function(item, sync) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.undoRedo.register("Sync changed", function() {
                                sync ? _this.syncItem(item) : unsyncVisual(_this.visualAuthoringOperations, _this.eventBridge, item.visualContainer);
                            }), sync ? [ 4, this.visualSync.syncFilterState(this.syncViewModel.sourceVisual.config.singleVisual.syncGroup ? this.syncViewModel.sourceVisual : item.visualContainer, !0) ] : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, SyncGroupPaneComponent.prototype.onSyncFieldsCheckChanged = function(checked) {
                var _this = this;
                this.undoRedo.register("Sync fields changed", function() {
                    _this.visualAuthoringOperations.assignSyncGroup(_this.syncViewModel.sourceVisual, (0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, _this.syncViewModel.sourceVisual.config.singleVisual.syncGroup), {
                        fieldChanges: checked
                    }));
                });
            }, SyncGroupPaneComponent.prototype.onSyncFiltersCheckChanged = function(checked) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.undoRedo.register("Sync fields changed", function() {
                                _this.visualAuthoringOperations.assignSyncGroup(_this.syncViewModel.sourceVisual, (0, 
                                tslib_es6.__assign)((0, tslib_es6.__assign)({}, _this.syncViewModel.sourceVisual.config.singleVisual.syncGroup), {
                                    filterChanges: checked
                                }));
                            }), checked ? [ 4, this.visualSync.syncVisualFiltersState(this.syncViewModel.sourceVisual) ] : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, SyncGroupPaneComponent.prototype.onVisibleCheckChanged = function(item, visible) {
                var _this = this;
                this.undoRedo.register("Visible changed", function() {
                    item.visualContainer ? setVisibility(_this.visualAuthoringOperations, _this.eventBridge, item.visualContainer, visible) : _this.syncItem(item);
                });
            }, SyncGroupPaneComponent.prototype.onSourceVisualSyncGroupChanged = function(newGroupName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var syncFilterState, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return syncFilterState = !!newGroupName, this.undoRedo.register("Sync group changed", function() {
                                syncFilterState ? assignSyncGroup(_this.visualAuthoringOperations, _this.syncViewModel.sourceVisual, newGroupName) : unsyncVisual(_this.visualAuthoringOperations, _this.eventBridge, _this.syncViewModel.sourceVisual);
                            }), syncFilterState ? [ 4, this.visualSync.syncFilterState(this.syncViewModel.sourceVisual, !0) ] : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return [ 2 ];
                        }
                    });
                });
            }, SyncGroupPaneComponent.prototype.onTogglePane = function() {
                this.panesVisibility.togglePaneExpansion("syncSlicers");
            }, SyncGroupPaneComponent.prototype.onPaneCollapsed = function() {
                this.panesVisibility.setPaneExpansion("syncSlicers", !1);
            }, SyncGroupPaneComponent.prototype.toggleShowAdvancedOptions = function() {
                this.showAdvancedOptions = !this.showAdvancedOptions;
            }, SyncGroupPaneComponent.prototype.trackPageSyncItemBy = function(index, item) {
                return item.section.name;
            }, SyncGroupPaneComponent.prototype.navigateAndSelectVisual = function(item) {
                var _this = this;
                this.undoRedo.register("Navigate and select", function() {
                    _this.explorationActivity.doRootActivity(function(telemetryActivity) {
                        var sectionIndex = _this.syncViewModel.exploration.sections.indexOf(item.section);
                        sectionIndex < 0 || !item.visualContainer || (_this.explorationNavigation.updateActiveSection({
                            targetSectionIndex: sectionIndex,
                            parentActivity: telemetryActivity
                        }), selectionUtils.UP.selectCanvasItem(item.visualContainer, _this.selection));
                    }, function() {
                        return _this.telemetryService.startChildActivity(void 0, telemetry_events.Es);
                    });
                });
            }, SyncGroupPaneComponent.prototype.syncItem = function(item) {
                if (item.visualContainer) assignSyncGroup(this.visualAuthoringOperations, item.visualContainer, this.syncViewModel.activeSyncGroup); else {
                    var duplicateVisual = (0, canvasVisualsUtility.Mt)(this.explorationSerializer.serializeVisualContainer(this.syncViewModel.sourceVisual), this.syncViewModel.exploration, item.section, this.explorationSerializer, this.formFactor, this.visualAuthoring);
                    assignSyncGroup(this.visualAuthoringOperations, duplicateVisual, this.syncViewModel.activeSyncGroup);
                }
            }, SyncGroupPaneComponent.\u0275fac = function(t) {
                return new (t || SyncGroupPaneComponent)(core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](exploration_activity_service.Z), core["\u0275\u0275directiveInject"](exploration_capabilities_service.U), core["\u0275\u0275directiveInject"](exploration_navigation_service.z), core["\u0275\u0275directiveInject"](exploration_serializer_service.L), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](Telemetry.y0), core["\u0275\u0275directiveInject"](form_factor_provider_service.F), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](panes_visibility_service.r), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](undo_redo_service.z), core["\u0275\u0275directiveInject"](visual_authoring_service.$8), core["\u0275\u0275directiveInject"](visual_authoring_operations_service.Q), core["\u0275\u0275directiveInject"](visual_plugin_service.D), core["\u0275\u0275directiveInject"](visual_sync_service.M), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef));
            }, SyncGroupPaneComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: SyncGroupPaneComponent,
                selectors: [ [ "sync-group-pane" ] ],
                decls: 2,
                vars: 3,
                consts: [ [ "focus-nav-mode", "Group", "disableScroll", "", "noPadding", "", "pbiAutoFocus", "", "keyboard-shortcuts", "ctrl-F6", "focus-priority", "8", 3, "expanded", "allowToggle", "title", "optionsSetting", "ariaDescribedBy", "showCollapse", "onCollapse", "onToggle", 4, "ngIf" ], [ "focus-nav-mode", "Group", "disableScroll", "", "noPadding", "", "pbiAutoFocus", "", "keyboard-shortcuts", "ctrl-F6", "focus-priority", "8", 3, "expanded", "allowToggle", "title", "optionsSetting", "ariaDescribedBy", "showCollapse", "onCollapse", "onToggle" ], [ 4, "ngIf" ], [ "class", "syncGroupPane", "noPadding", "", 4, "ngIf" ], [ "localize", "SyncGroupPane_SelectSlicer", 1, "selectionInstructions", 3, "id" ], [ "noPadding", "", 1, "syncGroupPane" ], [ 1, "syncGroupSection" ], [ "localize", "SyncGroupPane_Description", "localize-fragments", "", 1, "syncGroupDescription" ], [ "tabindex", "0", "role", "button", "fragment-index", "0", "localize", "SyncGroupPane_AddToAll", 1, "syncAllButton", 3, "accessible-click" ], [ "data-testid", "sync-group-table", "role", "table", 1, "syncGroupTable" ], [ "role", "row", 1, "row" ], [ "role", "columnheader", "localize", "PageName", 1, "headerCell", "columnPageName", "trimmedTextWithEllipsis" ], [ "role", "columnheader", 1, "headerCell", "columnCheckbox" ], [ "size", "mini", "role", "img", "name", "filtersync", "localize-tooltip", "Sync" ], [ "role", "img", "size", "mini", "name", "show", "localize-tooltip", "Visible", 1, "visibility" ], [ "role", "row", "class", "row", 3, "navigatable", "currentPage", 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ "noPadding", "", 1, "advancedOptions" ], [ "tabindex", "0", 1, "advancedOptionsToggle", 3, "accessible-click" ], [ "size", "mini", "name", "chevrondownsmall", 1, "advancedOptionsCaret" ], [ "localize", "AdvancedOptions", 1, "advancedOptionsLabel" ], [ "class", "advancedOptionsContent", 4, "ngIf" ], [ "role", "rowheader", 1, "bodyCell", "columnPageName", 3, "click" ], [ 1, "trimmedTextWithEllipsis" ], [ "role", "cell", 1, "bodyCell", "columnCheckbox" ], [ "localize-tooltip", "SyncGroupPane_SyncTooltip", 3, "isCompact", "ariaLabel", "checked", "disabled", "onChange" ], [ "localize-tooltip", "SyncGroupPane_VisibleTooltip", 3, "isCompact", "ariaLabel", "disabled", "checked", "onChange" ], [ 1, "advancedOptionsContent" ], [ "localize", "SyncGroupPane_GroupNameLabel", 1, "groupNameLabel" ], [ "maxlength", "250", 1, "groupNameInput", 3, "ngModel", "ngModelChange" ], [ 1, "syncFieldsCheckbox", 3, "isCompact", "disabled", "label", "ariaLabel", "checked", "onChange" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, SyncGroupPaneComponent_pbi_pane_0_Template, 3, 8, "pbi-pane", 0), 
                    core["\u0275\u0275pipe"](1, "async")), 2 & rf && core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 1, ctx.paneViewModel$));
                },
                dependencies: [ common.NgForOf, common.NgIf, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.nD, fesm2022_forms.On, localize_directive.X, localize_tooltip_directive.r, accessible_click_directive.t, pbi_auto_focus_directive.r, keyboard_shortcuts_directive.q, pbi_checkbox_component.v, pbi_icon_component._, pbi_pane_component.VO, pbi_pane_section_component.i, common.AsyncPipe, localize_pipe.F ],
                styles: [ "[_nghost-%COMP%]{display:flex;flex-grow:1;flex-direction:column}.syncGroupPane[_ngcontent-%COMP%]{--sync-slicers-link-color: var(--fluent-theme-link-color, #0078D4);--sync-slicers-link-hover-color: var(--fluent-theme-dark-color, #A98C0C);--sync-slicers-row-hover-background-color: var(--gray-30, #EDEBE9);--sync-slicers-advanced-pane-hover-background-color: var(--gray-30, #EDEBE9);--sync-slicers-input-border-color: var(--gray-120, #797775);--sync-slicers-input-background-color: var(--fluent-theme-white-color, #FFF);--sync-slicers-advanced-button-border-color: var(--gray-40, #E1DFDD);--sync-slicers-table-border-color: var(--gray-60, #C8C6C4);--sync-slicers-table-header-background: var(--fluent-theme-neutral-quarter-alt-color, #E1DFDD);--sync-slicers-table-header-border-color: var(--fluent-theme-neutral-tertiary-alt-color, #C8C6C4);flex-grow:1;overflow:auto}  [data-legacy-theming=false] .syncGroupPane{--sync-slicers-link-color: var(--colorBrandForegroundLink);--sync-slicers-link-hover-color: var(--colorBrandForegroundLinkHover);--sync-slicers-row-hover-background-color: var(--colorNeutralBackground1Hover);--sync-slicers-advanced-pane-hover-background-color: var(--colorNeutralBackground1Hover);--sync-slicers-input-border-color: var(--colorNeutralStroke1);--sync-slicers-input-background-color: var(--colorNeutralBackground1);--sync-slicers-advanced-button-border-color: var(--colorNeutralStroke1);--sync-slicers-table-border-color: var(--colorNeutralStroke1);--sync-slicers-table-header-background: var(--colorNeutralBackground1);--sync-slicers-table-header-border-color: var(--colorNeutralStroke1)}.syncGroupPane[_ngcontent-%COMP%]   legend[_ngcontent-%COMP%], .syncGroupPane[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{cursor:default}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupSection[_ngcontent-%COMP%]{display:flex;flex-direction:column}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupDescription[_ngcontent-%COMP%]{margin-bottom:4px}.syncGroupPane[_ngcontent-%COMP%]   .syncAllButton[_ngcontent-%COMP%]{color:var(--sync-slicers-link-color)}.syncGroupPane[_ngcontent-%COMP%]   .syncAllButton[_ngcontent-%COMP%]:hover, .syncGroupPane[_ngcontent-%COMP%]   .syncAllButton[_ngcontent-%COMP%]:focus{cursor:pointer;text-decoration:underline}html[data-focus-source=key][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncAllButton[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}html[data-focus-source=mouse][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncAllButton[_ngcontent-%COMP%]:focus, html[data-focus-source=program][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncAllButton[_ngcontent-%COMP%]:focus{outline:none}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]{border:1px solid var(--sync-slicers-table-border-color)}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{display:flex}html[data-focus-source=key][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]:focus-within{background:var(--fluent-theme-neutral-secondary-color, #605E5C)}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.navigatable[_ngcontent-%COMP%]:hover{background:var(--sync-slicers-row-hover-background-color)}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.navigatable[_ngcontent-%COMP%]   label[_ngcontent-%COMP%], .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.navigatable[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]{cursor:pointer;color:var(--sync-slicers-link-color)}html[data-focus-source][_ngcontent-%COMP%]:not([data-focus-source=key])   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.navigatable[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:focus, html[data-focus-source][_ngcontent-%COMP%]:not([data-focus-source=key])   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.navigatable[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]:focus{outline:none}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.currentPage[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]{color:var(--sync-slicers-link-color)}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.currentPage[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]:hover{color:var(--sync-slicers-link-hover-color)}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .headerCell[_ngcontent-%COMP%]{height:20px;border-style:solid;border-width:0 0 1px 1px;background:var(--sync-slicers-table-header-background);border-color:var(--sync-slicers-table-header-border-color)}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .headerCell.columnPageName[_ngcontent-%COMP%]{text-align:left;cursor:default}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .headerCell[_ngcontent-%COMP%]   pbi-icon.visibility[_ngcontent-%COMP%]   .glyphicon[_ngcontent-%COMP%]{font-size:13px}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .bodyCell[_ngcontent-%COMP%]{border-left:1px solid var(--fluent-theme-neutral-secondary-color, #605E5C);padding:2px 0}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .columnCheckbox[_ngcontent-%COMP%], .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .columnVisible[_ngcontent-%COMP%]{width:24px;display:flex;align-items:center;justify-content:center;flex:0 0 auto}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column;border-left:0;overflow:hidden;white-space:nowrap}.syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{flex:1;display:block;padding-left:2px}.syncGroupPane[_ngcontent-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin-bottom:0}.syncGroupPane[_ngcontent-%COMP%]   .advancedOptions[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:flex-start;margin-top:12px}.syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsContent[_ngcontent-%COMP%]{padding:8px}.syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsCaret[_ngcontent-%COMP%]{transform:rotate(-90deg);transition:transform .25s ease-out;display:flex}.syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]{height:36px;padding:4px 4px 4px 12px;display:flex;align-items:center;border:1px solid var(--sync-slicers-advanced-button-border-color);border-style:solid none;cursor:pointer}.syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]:hover{background:var(--sync-slicers-advanced-pane-hover-background-color)}html[data-focus-source=key][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}html[data-focus-source=mouse][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]:focus, html[data-focus-source=program][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]:focus{outline:none}.syncGroupPane[_ngcontent-%COMP%]   .expandedAdvancedOptions[_ngcontent-%COMP%]   .advancedOptionsCaret[_ngcontent-%COMP%]{transform:rotate(0)}.syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsLabel[_ngcontent-%COMP%]{display:inline;margin-left:8px;cursor:pointer}.syncGroupPane[_ngcontent-%COMP%]   .groupNameLabel[_ngcontent-%COMP%]{white-space:normal}.syncGroupPane[_ngcontent-%COMP%]   .groupNameInput[_ngcontent-%COMP%]{display:block;width:100%;height:24px;margin-top:8px;padding-left:4px;border:1px solid var(--sync-slicers-input-border-color);background:var(--sync-slicers-input-background-color)}.syncGroupPane[_ngcontent-%COMP%]   .groupNameInput[_ngcontent-%COMP%]:focus{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.syncGroupPane[_ngcontent-%COMP%]   .syncFieldsCheckbox[_ngcontent-%COMP%]{margin-top:8px}html[data-focus-source=key][_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncFieldsCheckbox[_ngcontent-%COMP%]:focus-within{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncAllButton[_ngcontent-%COMP%]{color:var(--fluent-theme-link-color, #0078D4)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]{border-color:var(--gray-60, #C8C6C4)}html[data-focus-source=key][_ngcontent-%COMP%]   .newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]:focus-within{background:var(--gray-30, #EDEBE9)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.navigatable[_ngcontent-%COMP%]:hover{background:var(--gray-30, #EDEBE9)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.currentPage[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]{color:var(--fluent-theme-link-color, #0078D4)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .row.currentPage[_ngcontent-%COMP%]   .columnPageName[_ngcontent-%COMP%]:hover{color:var(--fluent-theme-dark-color, #A98C0C)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .headerCell[_ngcontent-%COMP%]{background:var(--gray-40, #E1DFDD);border-color:var(--gray-60, #C8C6C4)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .syncGroupTable[_ngcontent-%COMP%]   .bodyCell[_ngcontent-%COMP%]{border-color:var(--gray-60, #C8C6C4)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsContent[_ngcontent-%COMP%]{background:var(--gray-20, #F3F2F1)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]{border-color:var(--gray-40, #E1DFDD)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]:hover, .newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]:focus, .newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .advancedOptionsToggle[_ngcontent-%COMP%]:focus-within{background:var(--gray-30, #EDEBE9)}.newPaneColors.explorationContainer[_ngcontent-%COMP%]   .syncGroupPane[_ngcontent-%COMP%]   .groupNameInput[_ngcontent-%COMP%]{background:var(--fluent-theme-white-color, #FFF);border-color:var(--gray-60, #C8C6C4)}" ],
                changeDetection: 0
            }), SyncGroupPaneComponent;
        }();
        function unsyncVisual(visualAuthoringOperations, eventBridge, visualContainer) {
            visualAuthoringOperations.clearSyncGroup(visualContainer), setVisibility(visualAuthoringOperations, eventBridge, visualContainer, !0);
        }
        function setVisibility(visualAuthoringOperations, eventBridge, visualContainer, visible) {
            visualAuthoringOperations.setVisibility(visualContainer, !visible, !0), visualAuthoringOperations.notifyVisualContainers([ visualContainer ]), 
            eventBridge.publishToChannel(events.cyb, {
                changedItems: [ visualContainer ]
            });
        }
        function assignSyncGroup(visualAuthoringOperations, visualContainer, groupName) {
            var existingGroup = visualContainer.config.singleVisual.syncGroup;
            visualAuthoringOperations.assignSyncGroup(visualContainer, existingGroup ? (0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, existingGroup), {
                groupName
            }) : {
                groupName,
                fieldChanges: !0,
                filterChanges: !0
            });
        }
        __webpack_require__(92160);
        var fromEvent = __webpack_require__(59787), startWith = __webpack_require__(22318), withLatestFrom = __webpack_require__(23558), distinctUntilChanged = __webpack_require__(77526), pluck = __webpack_require__(6181), mapTo = __webpack_require__(73805), visualContainerGroup2 = __webpack_require__(9215), hostGlobalEvents = __webpack_require__(23224), ExploreUI_telemetry_events = __webpack_require__(10556), DOMConstants = __webpack_require__(65195), exploreUITelemetryUtil = __webpack_require__(9500), services_events = __webpack_require__(7475), ngrx_component_store = __webpack_require__(95281), ngrx_store = __webpack_require__(85732);
        function getSelectedVisuals(selectionService) {
            return selectionUtils.UP.getSelectedCanvasItems(selectionService);
        }
        function areAllVisualsQueryVisuals(selectedVisuals, visualPluginOps) {
            return !_.isEmpty(selectedVisuals) && _.every(selectedVisuals, function(selectedVisual) {
                return (0, visualContainerGroup2.Vz)(selectedVisual) && visualPluginOps.isQueryVisual((0, 
                visualContainerUtilsHelper.s)(selectedVisual));
            });
        }
        function areAllVisualsConvertible(selectedVisuals, visualPluginOps) {
            return !_.isEmpty(selectedVisuals) && _.every(selectedVisuals, function(selectedVisual) {
                return (0, visualContainerGroup2.Vz)(selectedVisual) && visualPluginOps.canConvertVisual(selectedVisual);
            });
        }
        function areAllVisualTypesEqual(selectedVisuals) {
            return !_.isEmpty(selectedVisuals) && _.every(selectedVisuals, function(selectedVisual) {
                return (0, visualContainerUtilsHelper.s)(selectedVisual) === (0, visualContainerUtilsHelper.s)(selectedVisuals[0]);
            });
        }
        function areSelectedVisualsSupported(selectedVisuals, visualPluginOps) {
            return !_.isEmpty(selectedVisuals) && _.every(selectedVisuals, function(selectedVisual) {
                return (0, visualContainerGroup2.Vz)(selectedVisual) && visualPluginOps.isSupportedVisual(selectedVisual);
            });
        }
        var selectActive = function(state) {
            return state.active;
        }, selectAlwaysPopulatePanes = function(state) {
            return state.alwaysPopulatePanes;
        }, selectAvailableSectionTypes = function(state) {
            return state.availableSectionTypes;
        }, selectIsEditing = function(state) {
            return state.isEditing;
        }, selectSelectedVisuals = function(state) {
            return state.selectedVisuals;
        }, VisualizationPaneService = function(_super) {
            function VisualizationPaneService(featureSwitchService, localizationService, visualPluginOps) {
                var _this = _super.call(this) || this;
                return _this.featureSwitchService = featureSwitchService, _this.localizationService = localizationService, 
                _this.visualPluginOps = visualPluginOps, _this.updateState = _this.updater(function(state, properties) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), properties);
                }), _this.getProperty = function(key) {
                    return (0, ngrx_store.P1)(function(state) {
                        return state;
                    }, function(state) {
                        return state[key];
                    });
                }, _this.populatePanes = (0, ngrx_store.P1)(selectIsEditing, selectAlwaysPopulatePanes, function(isEditing, alwaysPopulatePanes) {
                    return isEditing || alwaysPopulatePanes;
                }), _this.header = (0, ngrx_store.P1)(_this.populatePanes, selectSelectedVisuals, function(populatePanes, selectedVisuals) {
                    var _a, localizationKey, visualContainers = (_a = (0, visualContainerGroup2.rQ)(selectedVisuals))[0], visualContainerGroups = _a[1];
                    if (populatePanes && !_.isEmpty(visualContainers) && _.isEmpty(visualContainerGroups)) {
                        var firstVisualType = (0, visualContainerUtilsHelper.s)(visualContainers[0]), visualType = areAllVisualTypesEqual(visualContainers) ? firstVisualType : null;
                        visualType && (visualType === plugins.L.basicShape.name || visualType === plugins.L.shape.name ? localizationKey = "VisualizationPane_Shape" : visualType === plugins.L.image.name ? localizationKey = "VisualizationPane_Image" : visualType === plugins.L.textbox.name ? localizationKey = "VisualizationPane_Text_Box" : visualType === plugins.L.actionButton.name ? localizationKey = "VisualizationPane_Action_Button" : visualType !== plugins.L.pageNavigator.name && visualType !== plugins.L.bookmarkNavigator.name || (localizationKey = "VisualizationPane_Navigator"));
                    }
                    return null != localizationKey ? localizationKey : _this.featureSwitchService.featureSwitches.onObject ? "Format" : "VisualizationPane_Title";
                }), _this.showVisualTypes = (0, ngrx_store.P1)(_this.populatePanes, selectSelectedVisuals, selectActive, function(populatePanes, selectedVisuals, active) {
                    var _a, showVisualTypes;
                    if (_.isEmpty(selectedVisuals)) showVisualTypes = populatePanes && 0 === active; else {
                        var visualContainers = (_a = (0, visualContainerGroup2.rQ)(selectedVisuals))[0];
                        showVisualTypes = populatePanes && (!_.isEmpty(_a[1]) || areAllVisualsConvertible(visualContainers, _this.visualPluginOps)) && 0 === active;
                    }
                    return showVisualTypes;
                }), _this.sections = (0, ngrx_store.P1)(selectAvailableSectionTypes, function(availableSectionTypes) {
                    return _this.loadSectionDetails(availableSectionTypes);
                }), _this.showFieldWellOrFilters = (0, ngrx_store.P1)(selectActive, function(active) {
                    return 0 === active;
                }), _this.showFieldWell = (0, ngrx_store.P1)(_this.populatePanes, selectActive, function(populatePanes, active) {
                    return populatePanes && 0 === active;
                }), _this.showPropertyPane = (0, ngrx_store.P1)(_this.populatePanes, selectActive, selectSelectedVisuals, function(populatePanes, active, selectedVisuals) {
                    return !_.isEmpty(selectedVisuals) && populatePanes && 1 === active;
                }), _this.showPagePropertyPane = (0, ngrx_store.P1)(_this.populatePanes, selectActive, selectSelectedVisuals, function(populatePanes, active, selectedVisuals) {
                    return _.isEmpty(selectedVisuals) && populatePanes && 3 === active;
                }), _this.showAnalyticsPane = (0, ngrx_store.P1)(_this.populatePanes, selectActive, function(populatePanes, active) {
                    return populatePanes && 2 === active;
                }), _this.showDrillthroughPane = (0, ngrx_store.P1)(_this.showFieldWellOrFilters, function(fieldWellOrFilters) {
                    return fieldWellOrFilters;
                }), _this.showBuildSection = (0, ngrx_store.P1)(_this.showVisualTypes, _this.showFieldWellOrFilters, function(showVisualTypes, showFieldWellOrFilters) {
                    return !_this.featureSwitchService.featureSwitches.onObject && (showVisualTypes || showFieldWellOrFilters);
                }), _this.activeSectionIndex = (0, ngrx_store.P1)(selectActive, selectAvailableSectionTypes, function(activeSection, availableSectionTypes) {
                    return availableSectionTypes.findIndex(function(sectionType) {
                        return sectionType === activeSection;
                    });
                }), _this;
            }
            return (0, tslib_es6.__extends)(VisualizationPaneService, _super), VisualizationPaneService.prototype.setVisualizationPaneViewModelState = function(state) {
                this.setState(state);
            }, VisualizationPaneService.prototype.select$ = function(key) {
                return this.select(this.getProperty(key));
            }, VisualizationPaneService.prototype.loadSectionDetails = function(sectionTypes) {
                var _this = this;
                return sectionTypes.map(function(sectionType) {
                    return _this.getSectionDetails(sectionType);
                });
            }, VisualizationPaneService.prototype.getSectionDetails = function(sectionType) {
                var section;
                switch (sectionType) {
                  case 0:
                    section = {
                        sectionType,
                        displayName: this.localizationService.get("VisualizationPane_Section_Fields"),
                        cssClass: "fields",
                        normalSvg: "",
                        styledSvg: ""
                    };
                    break;

                  case 1:
                    section = {
                        sectionType,
                        displayName: this.localizationService.get("Format"),
                        cssClass: "format",
                        normalSvg: "",
                        styledSvg: ""
                    };
                    break;

                  case 2:
                    section = {
                        sectionType,
                        displayName: this.localizationService.get("VisualizationPane_Section_Analytics"),
                        cssClass: "analytics",
                        normalSvg: "",
                        styledSvg: ""
                    };
                    break;

                  case 3:
                    section = {
                        sectionType,
                        displayName: this.localizationService.get("Page"),
                        cssClass: "page",
                        normalSvg: "",
                        styledSvg: ""
                    };
                    break;

                  default:
                    debug.fF.assertNever(sectionType);
                }
                return section.normalSvg = "visualizationPane".concat(_.upperFirst(section.cssClass), "Modern").concat("_paneColorRefresh"), 
                section.styledSvg = "visualizationPane".concat(_.upperFirst(section.cssClass), "ModernSelected").concat("_paneColorRefresh"), 
                section;
            }, VisualizationPaneService.\u0275fac = function(t) {
                return new (t || VisualizationPaneService)(core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](visual_plugin_operations_service.f));
            }, VisualizationPaneService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: VisualizationPaneService,
                factory: VisualizationPaneService.\u0275fac
            }), VisualizationPaneService;
        }(ngrx_component_store.m1), constants = __webpack_require__(21302), bidi = __webpack_require__(94130), favorite_visual_loader_service = __webpack_require__(22885), global_event_bridge = __webpack_require__(43025), svg_provider_service = __webpack_require__(84144), pivot_tab_key_handler = __webpack_require__(43859), formatting_pane_lazy_component = __webpack_require__(32441), pbi_button_toggle_component = __webpack_require__(53240), pbi_button_toggle_group_component = __webpack_require__(64713), pbi_emphasis_background_directive = __webpack_require__(2380), pbi_emphasis_directive = __webpack_require__(11991), animations = __webpack_require__(26124), PbiEmphasisOpacityDirective = function(_super) {
            function PbiEmphasisOpacityDirective(animationBuilder, element) {
                return _super.call(this, animationBuilder, element) || this;
            }
            return (0, tslib_es6.__extends)(PbiEmphasisOpacityDirective, _super), PbiEmphasisOpacityDirective.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("pbiEmphasisOpacity").pipe((0, switchMap.w)(function(emphasisInput) {
                    return emphasisInput || empty.E;
                })).subscribe(function() {
                    var animation = _this.getAnimation("opacity", 1);
                    _this.emphasize(animation);
                });
            }, PbiEmphasisOpacityDirective.\u0275fac = function(t) {
                return new (t || PbiEmphasisOpacityDirective)(core["\u0275\u0275directiveInject"](animations._j, 8), core["\u0275\u0275directiveInject"](core.ElementRef));
            }, PbiEmphasisOpacityDirective.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiEmphasisOpacityDirective,
                selectors: [ [ "", "pbiEmphasisOpacity", "" ] ],
                inputs: {
                    pbiEmphasisOpacity: "pbiEmphasisOpacity"
                },
                features: [ core["\u0275\u0275InheritDefinitionFeature"] ]
            }), PbiEmphasisOpacityDirective;
        }(pbi_emphasis_directive.A), pbi_pane_divider_component = __webpack_require__(47808), easeCubic = d3.easeCubic, visualization_pane_modern_component_select = d3.select, visualization_pane_modern_component_c0 = [ "svgPathElement" ];
        function VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_div_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 10), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var sectionTitle_r7 = ctx.ngIf;
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 1, sectionTitle_r7), " ");
            }
        }
        var visualization_pane_modern_component_c1 = function(a0, a1) {
            return {
                currentSection: a0,
                sections: a1,
                rootAttribute: "focus-pivot-root",
                pivotAttribute: "focus-pivot"
            };
        };
        function VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_ng_container_4_Template(rf, ctx) {
            if (1 & rf) {
                var _r11 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "pbi-button-toggle", 11), 
                core["\u0275\u0275listener"]("pointerenter", function() {
                    var section_r8 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r10 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r10.toggleEffectClasses(section_r8.styledSvg, !0, !0));
                })("pointerleave", function() {
                    var section_r8 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r12 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r12.toggleEffectClasses(section_r8.styledSvg, !1, !0));
                })("onFocus", function() {
                    var section_r8 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r13 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r13.toggleEffectClasses(section_r8.normalSvg, !0, !1));
                })("onBlur", function() {
                    var section_r8 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r14 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r14.toggleEffectClasses(section_r8.normalSvg, !1, !1));
                })("valueChanged", function($event) {
                    var section_r8 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r15 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r15.sectionSelectEvent.fn({
                        value: section_r8.sectionType,
                        checked: $event
                    }));
                })("onActiveSection", function($event) {
                    core["\u0275\u0275restoreView"](_r11);
                    var ctx_r16 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r16.sectionSelectEvent.fn({
                        value: $event.nextSection.sectionType,
                        checked: !0
                    }));
                }), core["\u0275\u0275elementStart"](2, "div", 12)(3, "div", 13), core["\u0275\u0275element"](4, "pbi-svg-use-symbol", 14)(5, "pbi-svg-use-symbol", 15), 
                core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var section_r8 = ctx.$implicit, sections_r9 = ctx.ngForOf, viewModelStore_r1 = core["\u0275\u0275nextContext"](2).ngIf, ctx_r5 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("role", "tab")("checked", section_r8.sectionType === viewModelStore_r1.active)("value", section_r8.sectionType)("aria-label", ctx_r5.ariaLabels[section_r8.sectionType])("buttonTabIndex", section_r8.sectionType === viewModelStore_r1.active ? 0 : -1)("pivot-tab-key-handler", core["\u0275\u0275pureFunction2"](15, visualization_pane_modern_component_c1, section_r8, sections_r9)), 
                core["\u0275\u0275attribute"]("data-testid", "visualization-pane-tab-" + section_r8.sectionType), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275classProp"]("selected", section_r8.sectionType === viewModelStore_r1.active), 
                core["\u0275\u0275property"]("pbiTooltip", ctx_r5.tooltips[section_r8.sectionType]), 
                core["\u0275\u0275attribute"]("data-unique-id", section_r8.sectionType), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275property"]("sheet", ctx_r5.sectionIconSheetName)("symbolId", section_r8.normalSvg), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("sheet", ctx_r5.sectionIconSheetName)("symbolId", section_r8.styledSvg);
            }
        }
        function VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_div_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 16, 17)(2, "div", 18), 
            core["\u0275\u0275namespaceSVG"](), core["\u0275\u0275elementStart"](3, "svg", 19, 20), 
            core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275element"](6, "path", 21, 22), 
            core["\u0275\u0275elementEnd"](), core["\u0275\u0275namespaceHTML"](), core["\u0275\u0275elementStart"](8, "div", 23), 
            core["\u0275\u0275element"](9, "div", 24)(10, "div", 25), core["\u0275\u0275elementEnd"]()()()), 
            2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](3), core["\u0275\u0275attribute"]("transform", core["\u0275\u0275pipeBind1"](5, 1, ctx_r6.isRTL$) ? "scale(-1, 1)" : null);
            }
        }
        function VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-pane-divider"), core["\u0275\u0275template"](1, VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_div_1_Template, 3, 3, "div", 6), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275elementStart"](3, "pbi-button-toggle-group", 7), 
            core["\u0275\u0275template"](4, VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_ng_container_4_Template, 6, 18, "ng-container", 8), 
            core["\u0275\u0275pipe"](5, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](6, VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_div_6_Template, 11, 3, "div", 9), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var viewModelStore_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 4, ctx_r2.sectionTitle$)), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](5, 6, ctx_r2.sections$))("ngForTrackBy", ctx_r2.trackBySectionTypeFn), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx_r2.showIndicator(viewModelStore_r1.availableSectionTypes));
            }
        }
        function VisualizationPaneModernComponent_div_0_pbi_pane_section_4_build_section_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "build-section", 29), core["\u0275\u0275pipe"](1, "async"), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), 
            core["\u0275\u0275pipe"](5, "async")), 2 & rf) {
                var ctx_r22 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("disableScrollbar", ctx_r22.isWholePaneScrollable)("showVisualTypes", core["\u0275\u0275pipeBind1"](1, 9, ctx_r22.showVisualTypes$))("showFieldWell", core["\u0275\u0275pipeBind1"](2, 11, ctx_r22.showFieldWell$))("showDrillthroughPane", core["\u0275\u0275pipeBind1"](3, 13, ctx_r22.showDrillthroughPane$))("showFieldWellOrFilters", core["\u0275\u0275pipeBind1"](4, 15, ctx_r22.showFieldWellOrFilters$))("populatePanes", core["\u0275\u0275pipeBind1"](5, 17, ctx_r22.populatePanes$))("visualPluginFilter", ctx_r22.paneViewModel.visualPluginFilter)("nonPersonalVisualizationPaneFilter", ctx_r22.paneViewModel.nonPersonalVisualizationPaneFilter)("showNonPersonalVisuals", ctx_r22.showNonPersonalVisualizationPane());
            }
        }
        function VisualizationPaneModernComponent_div_0_pbi_pane_section_4_section_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "section", 30), core["\u0275\u0275element"](1, "formatting-pane-lazy", 31), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var formattingPaneModel_r24 = ctx.ngIf, ctx_r23 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("id", "toggle-group-tab-panel3"), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("formattingSources", formattingPaneModel_r24.formattingSources)("disableScrollbar", ctx_r23.isWholePaneScrollable);
            }
        }
        function VisualizationPaneModernComponent_div_0_pbi_pane_section_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-pane-section", 26), core["\u0275\u0275template"](1, VisualizationPaneModernComponent_div_0_pbi_pane_section_4_build_section_1_Template, 6, 19, "build-section", 27), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, VisualizationPaneModernComponent_div_0_pbi_pane_section_4_section_3_Template, 2, 3, "section", 28), 
            core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var viewModelStore_r1 = core["\u0275\u0275nextContext"]().ngIf, ctx_r3 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("hidden", !viewModelStore_r1.isPaneExpanded), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 3, ctx_r3.showBuildSection$)), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](4, 5, ctx_r3.formattingPaneModel$));
            }
        }
        function VisualizationPaneModernComponent_div_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r27 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 2), core["\u0275\u0275listener"]("resizing", function($event) {
                    core["\u0275\u0275restoreView"](_r27);
                    var ctx_r26 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r26.onResizing($event));
                }), core["\u0275\u0275elementStart"](1, "pbi-pane", 3), core["\u0275\u0275listener"]("onToggle", function() {
                    var viewModelStore_r1 = core["\u0275\u0275restoreView"](_r27).ngIf, ctx_r28 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r28.onPaneExpanded.emit(!viewModelStore_r1.isPaneExpanded));
                })("onCollapse", function() {
                    core["\u0275\u0275restoreView"](_r27);
                    var ctx_r29 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r29.onPaneCollapsed());
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, VisualizationPaneModernComponent_div_0_pbi_pane_divider_3_Template, 7, 8, "pbi-pane-divider", 4), 
                core["\u0275\u0275template"](4, VisualizationPaneModernComponent_div_0_pbi_pane_section_4_Template, 5, 7, "pbi-pane-section", 5), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var viewModelStore_r1 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275classProp"]("isCollapsed", !viewModelStore_r1.isPaneExpanded), 
                core["\u0275\u0275property"]("pbiEmphasisBackground", ctx_r0.emphasize$)("pbiEmphasisBackgroundColor", "var(--globalColorBrand160)"), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("expanded", viewModelStore_r1.isPaneExpanded)("title", core["\u0275\u0275pipeBind1"](2, 12, ctx_r0.header$))("allowToggle", !ctx_r0.onObject)("optionsSetting", ctx_r0.paneViewModel.optionsSetting)("disableScroll", !ctx_r0.isWholePaneScrollable)("showCollapse", ctx_r0.onObject), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !ctx_r0.onObjectOn && viewModelStore_r1.isPaneExpanded), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", viewModelStore_r1.isPaneExpanded);
            }
        }
        var PathMoves = [ "M0 8.5H16L24 1L32 8.5H180", "M0 8.5H82L90 1L98 8.5H180", "M0 8.5H148L156 1L164 8.5H180" ], VisualizationPaneModernComponent = function(_super) {
            function VisualizationPaneModernComponent(promiseFactory, directionality, eventBridge, explorationNavigation, favoriteVisualLoader, featureSwitchService, globalEventBridge, highContrastCssGenerationService, localizationService, paneVisibilityService, selection, svgProviderService, telemetryService, viewModeState, visualizationPaneService, visualPaneSettingsService, visualPlugin, visualPluginOps) {
                var _this = _super.call(this) || this;
                return _this.promiseFactory = promiseFactory, _this.directionality = directionality, 
                _this.eventBridge = eventBridge, _this.explorationNavigation = explorationNavigation, 
                _this.favoriteVisualLoader = favoriteVisualLoader, _this.featureSwitchService = featureSwitchService, 
                _this.globalEventBridge = globalEventBridge, _this.highContrastCssGenerationService = highContrastCssGenerationService, 
                _this.localizationService = localizationService, _this.paneVisibilityService = paneVisibilityService, 
                _this.selection = selection, _this.svgProviderService = svgProviderService, _this.telemetryService = telemetryService, 
                _this.viewModeState = viewModeState, _this.visualizationPaneService = visualizationPaneService, 
                _this.visualPaneSettingsService = visualPaneSettingsService, _this.visualPlugin = visualPlugin, 
                _this.visualPluginOps = visualPluginOps, _this.onPaneExpanded = new core.EventEmitter, 
                _this.isWholePaneScrollable = window.innerWidth < 640 || window.innerHeight < 360, 
                _this.preparePersonalVisualizationPane(), _this.initializeHighContrastRules(), _this.onObjectOn = _this.featureSwitchService.featureSwitches.onObject, 
                _this.channelSubscriptions = eventBridge.createChannelSubscriptionManager(), _this.channelSubscriptions.subscribe(constants.sn, function() {
                    _this.visualizationPaneService.updateState({
                        isPaneExpanded: !0,
                        active: 1
                    }), _this.paneVisibilityService.isPaneExpanded("format") || _this.paneVisibilityService.togglePaneExpansion("format");
                }), _this.channelSubscriptions.subscribe(constants.mF, function() {
                    _this.selection.clearSelection(), _this.visualizationPaneService.updateState({
                        isPaneExpanded: !0,
                        active: 3
                    }), _this.paneVisibilityService.isPaneExpanded("format") || _this.paneVisibilityService.togglePaneExpansion("format");
                }), _this.onDestroy$.subscribe(function(destroyed) {
                    destroyed && _this.channelSubscriptions.unsubscribeAll();
                }), _this;
            }
            return (0, tslib_es6.__extends)(VisualizationPaneModernComponent, _super), VisualizationPaneModernComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.setInitialState(), this.initSelectors(), this.initExpansionHandler(), this.initEventHandlers(), 
                this.ariaLabels = this.buildAriaLabels(), this.tooltips = this.buildTooltips();
                var isEditingStoreObject$ = this.isEditing$.pipe((0, map.U)(function(isEditing) {
                    return {
                        isEditing
                    };
                })), alwaysPopulatePanesStoreObject$ = this.alwaysPopulatePanes$.pipe((0, map.U)(function(alwaysPopulatePanes) {
                    return {
                        alwaysPopulatePanes
                    };
                })), mergeSelectedVisualTypeStoreObject$ = this.mergeSelectedVisualType$.pipe((0, 
                map.U)(function(value) {
                    return {
                        selectedVisuals: value.selectedVisuals,
                        visualType: value.visualType
                    };
                })), availableSectionTypesStoreObject$ = this.availableSectionTypes$.pipe((0, map.U)(function(availableSectionTypes) {
                    return {
                        availableSectionTypes
                    };
                })), activeStoreObject$ = this.active$.pipe((0, map.U)(function(value) {
                    return {
                        active: value.active,
                        previous: value.previous
                    };
                })), isPaneExpandedStoreObject$ = this.isPaneExpanded$.pipe((0, map.U)(function(isPaneExpanded) {
                    return {
                        isPaneExpanded
                    };
                })), isPaneVisibleStoreObject$ = this.isPaneVisible$.pipe((0, map.U)(function(isPaneVisible) {
                    return {
                        isPaneVisible
                    };
                })), merged$ = (0, merge.T)(isEditingStoreObject$, alwaysPopulatePanesStoreObject$, mergeSelectedVisualTypeStoreObject$, availableSectionTypesStoreObject$, activeStoreObject$, isPaneExpandedStoreObject$, isPaneVisibleStoreObject$);
                this.visualizationPaneService.updateState(merged$), this.isRTL$ = this.directionality.change.pipe((0, 
                startWith.O)(this.directionality.value), (0, map.U)(function(direction) {
                    return "rtl" === direction;
                })), this.emphasize$ = this.paneVisibilityService.getPaneEmphasis$("format"), (0, 
                fromEvent.R)(window, "resize").subscribe(function(_) {
                    var windowInnerWidth = window.innerWidth, windowInnerHeight = window.innerHeight;
                    _this.isWholePaneScrollable = windowInnerWidth < 640 || windowInnerHeight < 360;
                });
            }, VisualizationPaneModernComponent.prototype.ngAfterViewInit = function() {
                var _this = this;
                this.svgPathElement$ = this.svgPathElements.changes.pipe((0, map.U)(function(elements) {
                    return elements.first;
                }), (0, startWith.O)(this.svgPathElements.first), (0, map.U)(function(svg) {
                    return svg && visualization_pane_modern_component_select(svg.nativeElement);
                }));
                var filteredActiveSectionIndex$ = this.svgPathElement$.pipe((0, switchMap.w)(function(svgPathElement) {
                    return svgPathElement ? _this.activeSectionIndex$ : empty.E;
                }));
                (0, merge.T)(filteredActiveSectionIndex$, this.svgPathElement$.pipe((0, filter.h)(function(svgPathElement) {
                    return !!svgPathElement;
                }))).pipe((0, withLatestFrom.M)(filteredActiveSectionIndex$, this.svgPathElement$), (0, 
                distinctUntilChanged.x)()).subscribe(function(_a) {
                    return _this.changePath(_a[2], _a[1]);
                }), this.svgProviderService.toggleCssClasses(!0, "active", this.sectionIconSheetName, this.defaultSectionSelectedSVG);
            }, Object.defineProperty(VisualizationPaneModernComponent.prototype, "onObject", {
                get: function() {
                    return this.featureSwitchService.featureSwitches.onObject;
                },
                enumerable: !1,
                configurable: !0
            }), VisualizationPaneModernComponent.prototype.onPaneCollapsed = function() {
                this.paneVisibilityService.setPaneExpansion("format", !1);
            }, VisualizationPaneModernComponent.prototype.showNonPersonalVisualizationPane = function() {
                var _this = this;
                return _.some(this.visualPlugin.getConvertibleVisuals(), function(visual) {
                    if (!visual) return !1;
                    var result = !1, isFavoritePublicCustomVisual = _this.featureSwitchService.featureSwitches.userFavoriteResourcePackagesEnabled && visual.custom && _this.visualPaneSettingsService.isFavoritePublicCustomVisual(visual.name), isFavorite = _this.featureSwitchService.featureSwitches.userFavoriteResourcePackagesEnabled && visual.custom && visual.favoriteId || isFavoritePublicCustomVisual, isNonFavorite = _this.featureSwitchService.featureSwitches.userFavoriteResourcePackagesEnabled && visual.custom && !visual.favoriteId && !isFavoritePublicCustomVisual, isOutOfBox = _this.featureSwitchService.featureSwitches.tenantOutOfBoxVisualsEnabled && visual.custom && visual.isOutOfBox, isUnpinned = _this.featureSwitchService.featureSwitches.personalVisualizationPaneEnabled && _this.visualPaneSettingsService.isUnpinnedVisual(visual.name);
                    return (visual.custom && !isOutOfBox && isNonFavorite || isUnpinned && !isFavorite) && (result = !0), 
                    result;
                });
            }, VisualizationPaneModernComponent.prototype.preparePersonalVisualizationPaneServices = function() {
                var _this = this, promises = [];
                return this.featureSwitchService.featureSwitches.userFavoriteResourcePackagesEnabled && promises.push(this.favoriteVisualLoader.ensureFavoriteVisualResources(this.visualPlugin)), 
                this.featureSwitchService.featureSwitches.tenantOutOfBoxVisualsEnabled && promises.push(this.favoriteVisualLoader.ensureOutOfBoxVisuals(this.visualPlugin)), 
                this.promiseFactory.allSettled(promises).finally(function() {
                    if (_this.featureSwitchService.featureSwitches.personalVisualizationPaneEnabled) return _this.visualPaneSettingsService.updateVisuals();
                });
            }, VisualizationPaneModernComponent.prototype.preparePersonalVisualizationPane = function() {
                var _this = this;
                this.preparePersonalVisualizationPaneServices().finally(function() {
                    _this.eventBridge.publishToChannel(events.Udu);
                });
            }, VisualizationPaneModernComponent.prototype.initSelectors = function() {
                var service = this.visualizationPaneService;
                this.activeSectionIndex$ = service.select(service.activeSectionIndex), this.populatePanes$ = service.select(service.populatePanes), 
                this.showFieldWell$ = service.select(service.showFieldWell), this.showAnalyticsPane$ = service.select(service.showAnalyticsPane), 
                this.showDrillthroughPane$ = service.select(service.showDrillthroughPane), this.showPropertyPane$ = service.select(service.showPropertyPane), 
                this.showPagePropertyPane$ = service.select(service.showPagePropertyPane), this.showVisualTypes$ = service.select(service.showVisualTypes), 
                this.showFieldWellOrFilters$ = service.select(service.showFieldWellOrFilters), this.showBuildSection$ = service.select(service.showBuildSection), 
                this.header$ = service.select(service.header), this.sections$ = service.select(service.sections), 
                this.sectionTitle$ = service.select(selectActive).pipe((0, map.U)(function(activeSection) {
                    switch (activeSection) {
                      case 3:
                        return "Format_Page";

                      case 1:
                        return "Format_Visual";

                      case 0:
                        return "Build_Visual";

                      case 2:
                        return "VisualizationPane_Section_Analytics";

                      default:
                        return void debug.fF.assertNever(activeSection);
                    }
                }));
                var analyticsPaneProperties$ = this.showAnalyticsPane$.pipe((0, map.U)(function(value) {
                    return value ? {
                        formattingSources: [ "Analytics" ]
                    } : void 0;
                })), pageFormattingProperties$ = this.showPagePropertyPane$.pipe((0, map.U)(function(value) {
                    return value ? {
                        formattingSources: [ "Page" ]
                    } : void 0;
                })), visualFormattingProperties$ = this.showPropertyPane$.pipe((0, map.U)(function(value) {
                    return value ? {
                        formattingSources: [ "Visual", "Format_Label_General" ]
                    } : void 0;
                }));
                this.formattingPaneModel$ = (0, combineLatest.aj)([ analyticsPaneProperties$, pageFormattingProperties$, visualFormattingProperties$ ]).pipe((0, 
                map.U)(function(paneProperties) {
                    return paneProperties.find(function(properties) {
                        return !_.isUndefined(properties);
                    });
                }));
            }, VisualizationPaneModernComponent.prototype.initEventHandlers = function() {
                var _this = this, service = this.visualizationPaneService, selectedVisualsStore$ = service.select$("selectedVisuals"), activeStore$ = service.select$("active"), availableSectionTypesStore$ = service.select$("availableSectionTypes");
                this.isEditing$ = this.viewModeState.getMode$().pipe((0, takeUntil.R)(this.onDestroy$), (0, 
                map.U)(function(mode) {
                    return 1 === mode;
                })), this.isEditing$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(isEditing) {
                    isEditing && _this.updateExplorationVisuals();
                }), this.alwaysPopulatePanes$ = this.viewModeState.getConfig$().pipe((0, pluck.j)("alwaysPopulatePanes"), (0, 
                takeUntil.R)(this.onDestroy$), (0, map.U)(function(alwaysPopulatePanes) {
                    return alwaysPopulatePanes;
                })), this.mergeSelectedVisualType$ = (0, merge.T)(this.eventBridge.on(events.tRg), this.eventBridge.on(events.KD7)).pipe((0, 
                takeUntil.R)(this.onDestroy$), (0, map.U)(function(_event) {
                    var _a, selectedVisuals = getSelectedVisuals(_this.selection), visualType = null, visualContainers = (_a = (0, 
                    visualContainerGroup2.rQ)(selectedVisuals))[0], visualContainerGroups = _a[1];
                    if (!_.isEmpty(visualContainers) && _.isEmpty(visualContainerGroups)) {
                        var firstVisualType = (0, visualContainerUtilsHelper.s)(visualContainers[0]);
                        areAllVisualTypesEqual(visualContainers) && (visualType = firstVisualType);
                    }
                    return {
                        selectedVisuals,
                        visualType
                    };
                }));
                var signInStatusChangedEvent$ = this.globalEventBridge.on(hostGlobalEvents.U.SignInStatusChangedEvent);
                signInStatusChangedEvent$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(_event) {
                    _this.favoriteVisualLoader.reset(_this.visualPlugin), _this.visualPaneSettingsService.reset();
                }), (0, merge.T)(this.eventBridge.on(services_events.nR), signInStatusChangedEvent$).pipe((0, 
                takeUntil.R)(this.onDestroy$)).subscribe(function(_event) {
                    _this.preparePersonalVisualizationPane();
                }), this.availableSectionTypes$ = this.mergeSelectedVisualType$.pipe((0, withLatestFrom.M)(selectedVisualsStore$), (0, 
                map.U)(function(_a) {
                    var _b, selectedVisuals = _a[1], availableSectionTypes = [];
                    if (_.isEmpty(selectedVisuals)) _this.featureSwitchService.featureSwitches.onObject || availableSectionTypes.push(0), 
                    availableSectionTypes.push(3); else {
                        var visualContainers = (_b = (0, visualContainerGroup2.rQ)(selectedVisuals))[0], visualContainerGroups = _b[1], areVisualsConvertible = areAllVisualsConvertible(selectedVisuals, _this.visualPluginOps);
                        (areAllVisualsQueryVisuals(selectedVisuals, _this.visualPluginOps) || areVisualsConvertible || !_.isEmpty(visualContainerGroups)) && (_this.featureSwitchService.featureSwitches.onObject || availableSectionTypes.push(0), 
                        _.every(visualContainers, function(visualContainer) {
                            return _this.visualPluginOps.canFormatVisual(visualContainer);
                        }) && (availableSectionTypes.push(1), _this.featureSwitchService.featureSwitches.onObject || availableSectionTypes.push(2)));
                    }
                    return availableSectionTypes;
                })), this.sectionSelectEvent = this.createEventAdapter();
                var selectActive$ = this.sectionSelectEvent.$.pipe((0, filter.h)(function(event) {
                    return event.checked;
                }), (0, withLatestFrom.M)(availableSectionTypesStore$), (0, map.U)(function(_a) {
                    var event = _a[0];
                    return _a[1].find(function(sectionType) {
                        return sectionType === event.value;
                    });
                })), analyticsEvent$ = (0, merge.T)(this.eventBridge.on(events.cY_), this.eventBridge.on(events.x4H)).pipe((0, 
                withLatestFrom.M)(selectedVisualsStore$), (0, filter.h)(function(_a) {
                    return areAllVisualsQueryVisuals(_a[1], _this.visualPluginOps);
                }), (0, mapTo.h)(this.featureSwitchService.featureSwitches.onObject ? 1 : 2)), changesActive$ = this.mergeSelectedVisualType$.pipe((0, 
                withLatestFrom.M)(selectedVisualsStore$, activeStore$), (0, map.U)(function(_a) {
                    var active, selectedVisuals = _a[1], activeStore = _a[2], defaultActive = _this.featureSwitchService.featureSwitches.onObject ? 3 : 0;
                    if (_.isEmpty(selectedVisuals)) active = defaultActive; else {
                        var visualContainerGroups = (0, visualContainerGroup2.rQ)(selectedVisuals)[1], areVisualsQueryVisuals = areAllVisualsQueryVisuals(selectedVisuals, _this.visualPluginOps), areVisualsConvertible = areAllVisualsConvertible(selectedVisuals, _this.visualPluginOps);
                        active = !_.isEmpty(visualContainerGroups) || areVisualsQueryVisuals || areVisualsConvertible ? 3 === activeStore ? 1 : activeStore : areSelectedVisualsSupported(selectedVisuals, _this.visualPluginOps) ? 1 : defaultActive;
                    }
                    return active;
                }));
                this.active$ = (0, merge.T)(selectActive$, analyticsEvent$, changesActive$).pipe((0, 
                withLatestFrom.M)(activeStore$), (0, map.U)(function(_a) {
                    return {
                        active: _a[0],
                        previous: _a[1]
                    };
                })), (0, combineLatest.aj)([ this.active$, this.sections$ ]).subscribe(function(_a) {
                    var activePrevious = _a[0], sections = _a[1], active = activePrevious.active, previous = activePrevious.previous, activeSection = sections.find(function(section) {
                        return section.sectionType === active;
                    }), previousSection = sections.find(function(section) {
                        return section.sectionType === previous;
                    });
                    previousSection && (_this.svgProviderService.toggleCssClasses(!1, "active", _this.sectionIconSheetName, previousSection.styledSvg), 
                    _this.svgProviderService.toggleCssClasses(!1, "focus", _this.sectionIconSheetName, previousSection.normalSvg)), 
                    activeSection && _this.svgProviderService.toggleCssClasses(!0, "active", _this.sectionIconSheetName, activeSection.styledSvg);
                });
            }, VisualizationPaneModernComponent.prototype.initExpansionHandler = function() {
                var _this = this, isPaneExpandedInput$ = this.paneVisibilityService.getPanes$().pipe((0, 
                map.U)(function(panes) {
                    var _a;
                    return null === (_a = panes.format) || void 0 === _a ? void 0 : _a.isPaneExpanded;
                })), onPaneExpanded$ = this.onPaneExpanded.asObservable();
                this.isPaneExpanded$ = (0, merge.T)(onPaneExpanded$, isPaneExpandedInput$), this.isPaneVisible$ = this.paneVisibilityService.getPanes$().pipe((0, 
                map.U)(function(panes) {
                    var _a;
                    return null === (_a = panes.format) || void 0 === _a ? void 0 : _a.isPaneVisible;
                })), onPaneExpanded$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(isPaneExpanded) {
                    _this.telemetryService.logEvent(ExploreUI_telemetry_events.vLR, {
                        paneType: "Visualization",
                        expanded: isPaneExpanded,
                        viewMode: (0, exploreUITelemetryUtil.ku)(_this.viewModeState.getMode())
                    }), _this.paneVisibilityService.togglePaneExpansion("format");
                });
            }, VisualizationPaneModernComponent.prototype.setInitialState = function() {
                this.sectionIconSheetName = "visualizationPaneIcons_paneColorRefresh", this.defaultSectionSelectedSVG = "visualizationPaneFieldsModernSelected_paneColorRefresh", 
                this.viewModelStore$ = this.visualizationPaneService.state$, this.svgProviderService.loadSheet(this.sectionIconSheetName);
                var selectedVisuals = getSelectedVisuals(this.selection), availableSectionTypes = _.isEmpty(selectedVisuals) ? [ 3 ] : [ 1 ], initialSection = 0, areAllSelectedVisualsSupported = areSelectedVisualsSupported(selectedVisuals, this.visualPluginOps);
                this.featureSwitchService.featureSwitches.onObject ? initialSection = areAllSelectedVisualsSupported ? 1 : 3 : (availableSectionTypes.unshift(0), 
                areAllSelectedVisualsSupported && availableSectionTypes.push(2)), this.visualizationPaneService.setVisualizationPaneViewModelState({
                    active: initialSection,
                    previous: initialSection,
                    availableSectionTypes,
                    isPaneVisible: this.paneVisibilityService.isPaneVisible("format"),
                    isPaneExpanded: this.paneVisibilityService.isPaneExpanded("format"),
                    selectedVisuals
                });
            }, VisualizationPaneModernComponent.prototype.changePath = function(svg, index) {
                index >= 0 && index <= 2 && svg.transition().duration(200).ease(easeCubic).attr("d", PathMoves[index]);
            }, VisualizationPaneModernComponent.prototype.updateExplorationVisuals = function() {
                this.visualPaneSettingsService.resetExplorationVisuals();
                var exploration = this.explorationNavigation.getCurrentExploration();
                if (exploration) for (var _i = 0, _a = exploration.sections; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].visualContainers; _b < _c.length; _b++) this.visualPaneSettingsService.addExplorationVisual(_c[_b].config.singleVisual.visualType);
            }, VisualizationPaneModernComponent.prototype.showIndicator = function(availableSectionTypes) {
                return !!(availableSectionTypes && availableSectionTypes.length > 0);
            }, VisualizationPaneModernComponent.prototype.buildAriaLabels = function() {
                var _a;
                return (_a = {})[0] = this.localizationService.get("Build_Visual"), _a[1] = this.localizationService.get("Format_Visual"), 
                _a[2] = this.localizationService.get("VisualizationPane_Section_Analytics"), _a[3] = this.localizationService.get("Format_Page"), 
                _a;
            }, VisualizationPaneModernComponent.prototype.buildTooltips = function() {
                var _a;
                return (_a = {})[0] = this.localizationService.get("VisualizationPane_Section_Build_Visual_Description"), 
                _a[1] = this.localizationService.get("VisualizationPane_Section_Format_Visual_Description"), 
                _a[2] = this.localizationService.get("VisualizationPane_Section_Analytics_Button_Description"), 
                _a[3] = this.localizationService.get("VisualizationPane_Section_Format_Page_Description"), 
                _a;
            }, VisualizationPaneModernComponent.prototype.initializeHighContrastRules = function() {
                this.highContrastCssGenerationService.addRule(".visualization-pane pbi-button-toggle-group .outer.selected", "{ background-color: @selectedBackgroundColor !important; }");
            }, VisualizationPaneModernComponent.prototype.toggleEffectClasses = function(symbolId, isEntering, isHover) {
                this.svgProviderService.toggleCssClasses(isEntering, isHover ? DOMConstants.Cj : DOMConstants.PG, this.sectionIconSheetName, symbolId);
            }, VisualizationPaneModernComponent.prototype.trackBySectionTypeFn = function(index, sectionDetail) {
                return sectionDetail.sectionType;
            }, Object.defineProperty(VisualizationPaneModernComponent.prototype, "paneSectionClass", {
                get: function() {
                    return this.isWholePaneScrollable ? "pane-section paneScrollable" : "pane-section paneNotScrollable";
                },
                enumerable: !1,
                configurable: !0
            }), VisualizationPaneModernComponent.\u0275fac = function(t) {
                return new (t || VisualizationPaneModernComponent)(core["\u0275\u0275directiveInject"](promiseFactory.t), core["\u0275\u0275directiveInject"](bidi.Is), core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](exploration_navigation_service.z), core["\u0275\u0275directiveInject"](favorite_visual_loader_service.W), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](global_event_bridge.Z), core["\u0275\u0275directiveInject"](high_contrast_css_generation_service.g), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](panes_visibility_service.r), core["\u0275\u0275directiveInject"](selection_service.z), core["\u0275\u0275directiveInject"](svg_provider_service.g), core["\u0275\u0275directiveInject"](Telemetry.y0), core["\u0275\u0275directiveInject"](view_mode_state_service.kc), core["\u0275\u0275directiveInject"](VisualizationPaneService), core["\u0275\u0275directiveInject"](visual_pane_settings_service.R), core["\u0275\u0275directiveInject"](visual_plugin_service.D), core["\u0275\u0275directiveInject"](visual_plugin_operations_service.f));
            }, VisualizationPaneModernComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: VisualizationPaneModernComponent,
                selectors: [ [ "visualization-pane-modern" ] ],
                viewQuery: function(rf, ctx) {
                    var _t;
                    1 & rf && core["\u0275\u0275viewQuery"](visualization_pane_modern_component_c0, 5), 
                    2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.svgPathElements = _t);
                },
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && core["\u0275\u0275attribute"]("data-automation-type", "visualizationPane")("data-testid", "visualization-pane");
                },
                inputs: {
                    paneViewModel: "paneViewModel"
                },
                outputs: {
                    onPaneExpanded: "onPaneExpanded"
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ VisualizationPaneService, {
                    provide: context_activity_utils.yk,
                    useValue: {
                        source: "Pane",
                        paneType: "format"
                    }
                } ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 3,
                vars: 4,
                consts: [ [ "class", "visualization-pane", "data-automation-type", "visualizationPaneGroup", "keyboard-shortcuts", "ctrl-F6", "focus-priority", "12", "focus-nav-mode", "Group", 3, "isCollapsed", "pbiEmphasisBackground", "pbiEmphasisBackgroundColor", "resizing", 4, "ngIf" ], [ 1, "emphasis-border", 3, "pbiEmphasisOpacity" ], [ "data-automation-type", "visualizationPaneGroup", "keyboard-shortcuts", "ctrl-F6", "focus-priority", "12", "focus-nav-mode", "Group", 1, "visualization-pane", 3, "pbiEmphasisBackground", "pbiEmphasisBackgroundColor", "resizing" ], [ "role", "region", "overlayScrollbar", "", "noPadding", "", 3, "expanded", "title", "allowToggle", "optionsSetting", "disableScroll", "showCollapse", "onToggle", "onCollapse" ], [ 4, "ngIf" ], [ "class", "pane-section", "noPadding", "", 3, "hidden", 4, "ngIf" ], [ "class", "section-title", 4, "ngIf" ], [ "role", "tablist", "focus-pivot-root", "" ], [ 4, "ngFor", "ngForOf", "ngForTrackBy" ], [ "class", "select-button-indicator", 4, "ngIf" ], [ 1, "section-title" ], [ "pbiTooltipCheckChildren", "true", "focus-pivot", "", 3, "role", "checked", "value", "aria-label", "buttonTabIndex", "pivot-tab-key-handler", "pointerenter", "pointerleave", "onFocus", "onBlur", "valueChanged", "onActiveSection" ], [ 1, "outer", 3, "pbiTooltip" ], [ 1, "content" ], [ 1, "normal-svg", 3, "sheet", "symbolId" ], [ 1, "styled-svg", 3, "sheet", "symbolId" ], [ 1, "select-button-indicator" ], [ "custom", "" ], [ 1, "divider-component" ], [ "width", "180", "height", "9", "viewBox", "0 0 180 9", "fill", "none", "xmlns", "http://www.w3.org/2000/svg", 1, "select-indicator-bar" ], [ "svgElement", "" ], [ "d", "M0 8.5H16L24 1L32 8.5H180" ], [ "svgPathElement", "" ], [ 1, "filler" ], [ 1, "space" ], [ 1, "line" ], [ "noPadding", "", 1, "pane-section", 3, "hidden" ], [ "class", "pane-content", 3, "disableScrollbar", "showVisualTypes", "showFieldWell", "showDrillthroughPane", "showFieldWellOrFilters", "populatePanes", "visualPluginFilter", "nonPersonalVisualizationPaneFilter", "showNonPersonalVisuals", 4, "ngIf" ], [ "class", "pane-content", "role", "tabpanel", "section-animation-slider", "", 3, "id", 4, "ngIf" ], [ 1, "pane-content", 3, "disableScrollbar", "showVisualTypes", "showFieldWell", "showDrillthroughPane", "showFieldWellOrFilters", "populatePanes", "visualPluginFilter", "nonPersonalVisualizationPaneFilter", "showNonPersonalVisuals" ], [ "role", "tabpanel", "section-animation-slider", "", 1, "pane-content", 3, "id" ], [ "data-testid", "formatting-pane-lazy", 3, "formattingSources", "disableScrollbar" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275template"](0, VisualizationPaneModernComponent_div_0_Template, 5, 14, "div", 0), 
                    core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275element"](2, "div", 1)), 
                    2 & rf && (core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](1, 2, ctx.viewModelStore$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("pbiEmphasisOpacity", ctx.emphasize$));
                },
                dependencies: [ common.NgForOf, common.NgIf, section_animation_slider.R, pivot_tab_key_handler.H, formatting_pane_lazy_component.u, keyboard_shortcuts_directive.q, pbi_button_toggle_component.I, pbi_button_toggle_group_component.J, pbi_emphasis_background_directive.O, PbiEmphasisOpacityDirective, pbi_pane_component.VO, pbi_pane_divider_component.P, pbi_pane_section_component.i, pbi_svg_use_symbol_component.R, pbi_tooltip_directive.V, BuildSectionComponent, common.AsyncPipe, localize_pipe.F ],
                styles: [ '[_nghost-%COMP%]{display:flex;height:100%}.emphasis-border[_ngcontent-%COMP%]{border:1px solid var(--globalColorBrand80);position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;opacity:0;pointer-events:none}.visualization-pane[_ngcontent-%COMP%]{--viz-pane-selected-button-background: var(--gray-50, #D2D0CE);--viz-pane-button-hover-background: var(--gray-40, #E1DFDD);--viz-pane-button-hover-outline-color: var(--gray-110, #8A8886);--viz-pane-selected-svg-line-color: var(--gray-110, #8A8886);--viz-pane-selected-line-color: var(--gray-70, #BEBBB8);--icon-fill-color: var(--theme-primary-color);--icon-stroke-color: #252423;overflow:hidden;flex-grow:1}  [data-legacy-theming=false] .visualization-pane{--viz-pane-selected-button-background: var(--colorNeutralBackground1);--viz-pane-button-hover-background: var(--colorNeutralBackground1Hover);--viz-pane-button-hover-outline-color: var(--colorNeutralStroke1Hover);--viz-pane-selected-svg-line-color: var(--colorNeutralStroke1);--viz-pane-selected-line-color: var(--colorNeutralStroke1);--icon-fill-color: var(--colorCompoundBrandStroke);--icon-stroke-color: var(--colorNeutralStrokeAccessible)}.visualization-pane[_ngcontent-%COMP%]   .section-title[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-semi-bold, 600);overflow:hidden;text-overflow:ellipsis;white-space:nowrap;-webkit-user-select:none;-ms-user-select:none;user-select:none}html:not([dir="rtl"])[_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   .section-title[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   .section-title[_ngcontent-%COMP%]{margin-left:8px}html[dir="rtl"][_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   .section-title[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   .section-title[_ngcontent-%COMP%]{margin-right:8px}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]{display:flex;padding:4px 0}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]{cursor:pointer;border-radius:2px;border:none;padding:4px}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]   .normal-svg[_ngcontent-%COMP%]{display:block}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]   .styled-svg[_ngcontent-%COMP%]{display:none}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer.selected[_ngcontent-%COMP%]{background:var(--viz-pane-selected-button-background)}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer.selected[_ngcontent-%COMP%]   .normal-svg[_ngcontent-%COMP%]{display:none}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer.selected[_ngcontent-%COMP%]   .styled-svg[_ngcontent-%COMP%]{display:block}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:hover{outline:var(--focus-outline-definition, 2.5px solid) var(--viz-pane-button-hover-outline-color);background:var(--viz-pane-button-hover-background)}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:hover   .normal-svg[_ngcontent-%COMP%]{display:none}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:hover   .styled-svg[_ngcontent-%COMP%]{display:block}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]:focus{outline:none}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle-group[_ngcontent-%COMP%]   .outer[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%]{height:24px;width:24px;display:flex;justify-content:center}.visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]{flex:none}html:not([dir="rtl"])[_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]{margin-right:34px}html[dir="rtl"][_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]{margin-left:34px}html[data-focus-source="key"][_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within   .content[_ngcontent-%COMP%], html[data-focus-source="key"]   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:focus-within   .content[_ngcontent-%COMP%]{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color)}html:not([dir="rtl"])[_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child, html:not([dir="rtl"])   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child{margin-left:8px}html[dir="rtl"][_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child, html[dir="rtl"]   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:first-child{margin-right:8px}html:not([dir="rtl"])[_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:last-child, html:not([dir="rtl"])   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:last-child{margin-right:0}html[dir="rtl"][_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:last-child, html[dir="rtl"]   [_nghost-%COMP%]   .visualization-pane[_ngcontent-%COMP%]   pbi-button-toggle[_ngcontent-%COMP%]:last-child{margin-left:0}.visualization-pane[_ngcontent-%COMP%]   .select-button-indicator[_ngcontent-%COMP%]{display:block;padding-bottom:4px}.visualization-pane[_ngcontent-%COMP%]   .select-button-indicator[_ngcontent-%COMP%]   .divider-component[_ngcontent-%COMP%]{display:flex;width:100%}.visualization-pane[_ngcontent-%COMP%]   .select-button-indicator[_ngcontent-%COMP%]   .divider-component[_ngcontent-%COMP%]   .select-indicator-bar[_ngcontent-%COMP%]{flex:none}.visualization-pane[_ngcontent-%COMP%]   .select-button-indicator[_ngcontent-%COMP%]   .divider-component[_ngcontent-%COMP%]   .select-indicator-bar[_ngcontent-%COMP%]   path[_ngcontent-%COMP%]{stroke:var(--viz-pane-selected-svg-line-color)}.visualization-pane[_ngcontent-%COMP%]   .select-button-indicator[_ngcontent-%COMP%]   .divider-component[_ngcontent-%COMP%]   .filler[_ngcontent-%COMP%]{height:9px;display:flex;flex-direction:column;flex-grow:1}.visualization-pane[_ngcontent-%COMP%]   .select-button-indicator[_ngcontent-%COMP%]   .divider-component[_ngcontent-%COMP%]   .filler[_ngcontent-%COMP%]   .space[_ngcontent-%COMP%]{height:8px}.visualization-pane[_ngcontent-%COMP%]   .select-button-indicator[_ngcontent-%COMP%]   .divider-component[_ngcontent-%COMP%]   .filler[_ngcontent-%COMP%]   .line[_ngcontent-%COMP%]{height:1px;background:var(--viz-pane-selected-line-color)}.visualization-pane[_ngcontent-%COMP%]   .pane-section[_ngcontent-%COMP%], .visualization-pane[_ngcontent-%COMP%]   .pane-section[_ngcontent-%COMP%]   .pane-content[_ngcontent-%COMP%]{flex-grow:1;display:flex;flex-direction:column}.visualization-pane[_ngcontent-%COMP%]   .pane-section[_ngcontent-%COMP%]   .pane-content[_ngcontent-%COMP%]   formatting-pane-lazy[_ngcontent-%COMP%]{flex-grow:1;display:flex;flex-direction:column}.visualization-pane[_ngcontent-%COMP%]   .paneScrollable[_ngcontent-%COMP%]{height:"100%"}.visualization-pane[_ngcontent-%COMP%]   .paneNotScrollable[_ngcontent-%COMP%]{height:unset}' ]
            }), VisualizationPaneModernComponent;
        }(rx_component.w), exploration_state_manager_service = __webpack_require__(49080), bookmark_service = __webpack_require__(17966), exploration_state_applier_service = __webpack_require__(19276), contracts_bookmark = __webpack_require__(49702), itemGrouping = __webpack_require__(23306), idUtility = __webpack_require__(35497), BookmarkAuthoringServiceLazyProvider = {
            provide: "bookmarkAuthoringService",
            useFactory: function(bookmarkService, conceptualSchemaProxy, dataSources, eventBridge, explorationStateApplier, stateManager, localizationService, screenReaderService, selection, telemetryService, undoRedoService) {
                return new BookmarkAuthoringService(bookmarkService, conceptualSchemaProxy, dataSources, eventBridge, explorationStateApplier, localizationService, screenReaderService, selection, stateManager, telemetryService, undoRedoService);
            },
            deps: [ bookmark_service.F, conceptual_schema_proxy_service.i, data_sources_service.D, event_bridge_service.J, exploration_state_applier_service.j, exploration_state_manager_service.J, localization_service.o, screen_reader_service.g, selection_service.z, Telemetry.y0, undo_redo_service.z ]
        }, BookmarkAuthoringService = function() {
            function BookmarkAuthoringService(bookmarkService, conceptualSchemaProxy, dataSources, eventBridge, explorationStateApplier, localizationService, screenReaderService, selection, stateManager, telemetryService, undoRedoService) {
                this.bookmarkService = bookmarkService, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.dataSources = dataSources, this.eventBridge = eventBridge, this.explorationStateApplier = explorationStateApplier, 
                this.localizationService = localizationService, this.screenReaderService = screenReaderService, 
                this.selection = selection, this.stateManager = stateManager, this.telemetryService = telemetryService, 
                this.undoRedoService = undoRedoService;
            }
            return BookmarkAuthoringService.prototype.create = function(displayName, explorationState, options, captureOptions) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, defaultCaptureOptions, bookmarks, newBookmarkIndex, newBookmarkTitle, name;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            return schema = _a.sent(), explorationState ? [ 3, 3 ] : (defaultCaptureOptions = {
                                captureAllSections: !1,
                                suppressDataSourceVariables: !0,
                                capturePresentation: !1
                            }, _.assign(defaultCaptureOptions, captureOptions), [ 4, this.stateManager.capture(schema, defaultCaptureOptions) ]);

                          case 2:
                            explorationState = _a.sent(), _a.label = 3;

                          case 3:
                            return bookmarks = this.bookmarkService.getBookmarks(), newBookmarkIndex = bookmarks ? bookmarks.length + 1 : 1, 
                            newBookmarkTitle = displayName || this.localizationService.get("Generic_Bookmark") + " ".concat(newBookmarkIndex), 
                            name = this.generateBookmarkName(), options || (options = this.updateTargetVisualsOptions({})), 
                            [ 2, {
                                displayName: newBookmarkTitle,
                                name,
                                explorationState,
                                options
                            } ];
                        }
                    });
                });
            }, BookmarkAuthoringService.prototype.add = function(displayName, state, bookmarkOptions, activate) {
                return void 0 === activate && (activate = !0), (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var bookmark, schema, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.create(displayName, state, bookmarkOptions) ];

                          case 1:
                            return bookmark = _a.sent(), [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 2:
                            return schema = _a.sent(), this.undoRedoService.register(contracts_bookmark.U.Add, function() {
                                _this.bookmarkService.setBookmarks((0, itemGrouping.IH)(_this.bookmarkService.getBookmarks(), bookmark)), 
                                activate && (_this.bookmarkService.setActiveBookmark(bookmark), state && _this.applyBookmarkState(bookmark, schema)), 
                                _this.telemetryService.logEvent(ExploreUI_telemetry_events.Dbt);
                            }), this.screenReaderService.alertPolite(this.localizationService.format("CreatedItem", bookmark.displayName)), 
                            [ 2, bookmark ];
                        }
                    });
                });
            }, BookmarkAuthoringService.prototype.remove = function(bookmarkInstance) {
                var _this = this, bookmarkToRemove = this.getBookmark(bookmarkInstance);
                debug.fF.assert(function() {
                    return contracts_bookmark.J.isValidBookmark(bookmarkToRemove);
                }, "Invalid bookmark"), this.undoRedoService.register(contracts_bookmark.U.Remove, function() {
                    var x = (0, itemGrouping.Od)(bookmarkToRemove, _this.bookmarkService.getBookmarks());
                    _this.bookmarkService.setBookmarks(x);
                    var activeBookmark = _this.bookmarkService.getActiveBookmark();
                    activeBookmark && bookmarkToRemove.name === activeBookmark.name && _this.bookmarkService.setActiveBookmark(null), 
                    _this.telemetryService.logEvent(ExploreUI_telemetry_events.FQA);
                });
            }, BookmarkAuthoringService.prototype.move = function(sourceBookmark, targetBookmark, appendBookmark, parentGroup) {
                var _this = this;
                void 0 === appendBookmark && (appendBookmark = !1), "number" == typeof sourceBookmark && "number" == typeof targetBookmark && (appendBookmark = sourceBookmark < targetBookmark);
                var bookmarkToMove = this.getBookmark(sourceBookmark), bookmarkToTarget = this.getBookmark(targetBookmark);
                debug.fF.assert(function() {
                    return contracts_bookmark.J.isValidBookmark(bookmarkToMove);
                }, "Invalid source bookmark"), debug.fF.assert(function() {
                    return contracts_bookmark.J.isValidBookmark(bookmarkToTarget);
                }, "Invalid target bookmark"), this.undoRedoService.register(contracts_bookmark.U.Move, function() {
                    _this.bookmarkService.setBookmarks((0, itemGrouping.pB)([ bookmarkToMove ], bookmarkToTarget, _this.bookmarkService.getBookmarks(), appendBookmark));
                });
            }, BookmarkAuthoringService.prototype.rename = function(bookmarkInstance, name) {
                var _this = this, bookmarkToRename = this.getBookmark(bookmarkInstance);
                debug.fF.assert(function() {
                    return contracts_bookmark.J.isValidBookmark(bookmarkToRename);
                }, "Invalid bookmark"), debug.fF.assert(function() {
                    return !_.isEmpty(name);
                }, "Bookmark name can't be empty"), this.undoRedoService.register(contracts_bookmark.U.Rename, function() {
                    bookmarkToRename.displayName = name, _this.bookmarkService.emitUpdatedBookmarks();
                });
            }, BookmarkAuthoringService.prototype.update = function(bookmarkInstance) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var bookmarkToUpdate, schema, explorationState, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return bookmarkToUpdate = this.getBookmark(bookmarkInstance), debug.fF.assert(function() {
                                return contracts_bookmark.J.isValidBookmark(bookmarkToUpdate);
                            }, "Invalid bookmark"), [ 4, this.conceptualSchemaProxy.get(this.dataSources.get()) ];

                          case 1:
                            return schema = _a.sent(), [ 4, this.stateManager.capture(schema, {
                                captureAllSections: !1
                            }) ];

                          case 2:
                            return explorationState = _a.sent(), this.undoRedoService.register(contracts_bookmark.U.Update, function() {
                                _this.bookmarkService.setActiveBookmark(bookmarkToUpdate), bookmarkToUpdate.explorationState = explorationState, 
                                bookmarkToUpdate.options = _this.updateTargetVisualsOptions(bookmarkToUpdate.options), 
                                _this.telemetryService.logEvent(ExploreUI_telemetry_events.m_M);
                            }), [ 2 ];
                        }
                    });
                });
            }, BookmarkAuthoringService.prototype.ungroup = function(bookmarkGroup) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assert(function() {
                                return contracts_bookmark.J.isValidBookmark(bookmarkGroup);
                            }, "Invalid bookmark"), [ 4, this.undoRedoService.register(contracts_bookmark.U.Ungroup, function() {
                                _this.bookmarkService.setBookmarks((0, itemGrouping.Z8)(bookmarkGroup, _this.bookmarkService.getBookmarks()));
                            }) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, BookmarkAuthoringService.prototype.group = function(childBookmarks) {
                var _this = this;
                debug.fF.assert(function() {
                    return !_.isEmpty(childBookmarks);
                }, "Bookmarks to group should not be empty");
                var bookmarkGroup = this.createBookmarkGroup(childBookmarks);
                this.undoRedoService.register(contracts_bookmark.U.Group, function() {
                    _this.bookmarkService.setBookmarks((0, itemGrouping.ru)(bookmarkGroup, _this.bookmarkService.getBookmarks()));
                });
            }, BookmarkAuthoringService.prototype.getBookmark = function(arg0) {
                return "number" == typeof arg0 ? this.bookmarkService.getBookmarks()[arg0] : arg0;
            }, BookmarkAuthoringService.prototype.generateBookmarkName = function() {
                var nameDict = {};
                return _.each(this.bookmarkService.getBookmarks(), function(bookmark) {
                    nameDict[bookmark.name] = !0;
                }), idUtility.q.generateUniqueId(nameDict);
            }, BookmarkAuthoringService.prototype.createBookmarkGroup = function(childBookmarks) {
                var bookmarkGroups = _.filter(this.bookmarkService.getBookmarks(), function(bookmark) {
                    return contracts_bookmark.J.isBookmarkGroup(bookmark);
                }), newBookmarkGroupIndex = bookmarkGroups ? bookmarkGroups.length + 1 : 1;
                return {
                    displayName: this.localizationService.get("Group") + " ".concat(newBookmarkGroupIndex),
                    name: this.generateBookmarkName(),
                    children: childBookmarks
                };
            }, BookmarkAuthoringService.prototype.updateTargetVisualsOptions = function(options) {
                options || (options = {});
                for (var selectedContainers = selectionUtils.UP.getSelectedCanvasItems(this.selection), targetVisualNames = [], selectedGroups = [], _i = 0, selectedContainers_1 = selectedContainers; _i < selectedContainers_1.length; _i++) {
                    var selectedContainer = selectedContainers_1[_i];
                    targetVisualNames.push(selectedContainer.name), (0, visualContainerGroup2.q4)(selectedContainer) && selectedGroups.push(selectedContainer);
                }
                return _.isEmpty(selectedGroups) || (0, visualContainerGroup2.Iw)(selectedGroups, function(selectedContainer) {
                    return targetVisualNames.push(selectedContainer.name);
                }), options.targetVisualNames = _.uniq(targetVisualNames), options;
            }, BookmarkAuthoringService.prototype.applyBookmarkState = function(bookmark, schema, options) {
                debug.fF.assertValue(bookmark, "bookmark");
                var applyStateOptions = {
                    clearUnmatchedData: !0,
                    suppressDataSourceVariables: !0
                };
                if (_.assign(applyStateOptions, options), !contracts_bookmark.J.isBookmarkGroup(bookmark)) {
                    var activity = this.explorationStateApplier.createApplyBookmarkActivity("AddReportBookmark");
                    try {
                        bookmark.options && (applyStateOptions.suppressData = bookmark.options.suppressData, 
                        applyStateOptions.suppressActiveSection = bookmark.options.suppressActiveSection, 
                        applyStateOptions.suppressDisplay = bookmark.options.suppressDisplay, bookmark.options.applyOnlyToTargetVisuals && (applyStateOptions.targetVisualNames = bookmark.options.targetVisualNames));
                        var impact = this.applyState(activity, bookmark.explorationState, schema, applyStateOptions);
                        return this.eventBridge.publishToChannel(events.gG5, {
                            bookmarkName: bookmark.name
                        }), this.telemetryService.logEvent(ExploreUI_telemetry_events.LPp, {
                            bookmarkName: bookmark.name
                        }), activity.resolve(), impact;
                    } catch (error) {
                        activity.reject(error);
                    }
                }
            }, BookmarkAuthoringService.prototype.applyState = function(activity, state, schema, options) {
                return this.explorationStateApplier.applyDirty(state, schema, options, activity);
            }, BookmarkAuthoringService;
        }(), canvas_list_order_normalize_service = __webpack_require__(40033), canvasListOrderNormalizeService = __webpack_require__(80), CanvasListOrderingServiceLazyProvider = {
            provide: "canvasListOrderingService",
            useFactory: function(canvasListOrderNormalizeService, visualAuthoring, visualAuthoringOperations, formFactor) {
                return new Promise(function(resolve) {
                    resolve(new CanvasListOrderingService(canvasListOrderNormalizeService, visualAuthoring, visualAuthoringOperations, formFactor));
                });
            },
            deps: [ canvas_list_order_normalize_service.F, visual_authoring_service.$8, visual_authoring_operations_service.Q, form_factor_provider_service.F ]
        }, CanvasListOrderingService = function() {
            function CanvasListOrderingService(canvasListOrderNormalizeService, visualAuthoring, visualAuthoringOperations, formFactor) {
                this.canvasListOrderNormalizeService = canvasListOrderNormalizeService, this.visualAuthoring = visualAuthoring, 
                this.visualAuthoringOperations = visualAuthoringOperations, this.formFactor = formFactor;
            }
            return CanvasListOrderingService.prototype.getListOrderPropertyFunction = function(canvasItem, listProperty) {
                var currentLayout = this.formFactor.getCurrentLayout();
                return canvasItem.layouts.withId(currentLayout).position[listProperty];
            }, CanvasListOrderingService.prototype.insertAtMinMagnitude = function(canvasItemsContract, containersToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo, reverse) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    });
                    this.insertAtMinMagnitudeInternal(containersToMove, containerListOrders, isPositiveRange, containerListOrderingProperty, suppressUndoRedo, reverse);
                    var allCanvasItems = _.concat(canvasItemsContract, containersToMove);
                    if (containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(allCanvasItems, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    }), this.canvasListOrderNormalizeService.shouldNormalizeListOrder(containerListOrders, isPositiveRange)) {
                        var newContainerListOrders = this.canvasListOrderNormalizeService.normalizeListOrder(containerListOrders, isPositiveRange);
                        suppressUndoRedo ? this.visualAuthoringOperations.updateContainerListOrders(allCanvasItems, newContainerListOrders, containerListOrderingProperty) : this.visualAuthoring.updateContainerListOrders(allCanvasItems, newContainerListOrders, containerListOrderingProperty);
                    }
                }
            }, CanvasListOrderingService.prototype.insertAtMinMagnitudeInternal = function(containersToMove, allContainerListOrders, isPositiveRange, containerListOrderingProperty, suppressUndoRedo, reverse) {
                var nextMinMagnitudeOrder, _this = this, containerToAddListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(containersToMove, function(item) {
                    return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                }), sortedContainerToAddNames = this.canvasListOrderNormalizeService.getSortedContainerNames(containerToAddListOrders, reverse ? !isPositiveRange : isPositiveRange), sortedAllContainerNames = this.canvasListOrderNormalizeService.getSortedContainerNames(allContainerListOrders, isPositiveRange);
                nextMinMagnitudeOrder = sortedAllContainerNames.length ? allContainerListOrders[_.head(sortedAllContainerNames)] : isPositiveRange ? canvasListOrderNormalizeService.RT : canvasListOrderNormalizeService.Wp;
                var gap = this.convertsMagnitude(canvasListOrderNormalizeService.oZ, !isPositiveRange), newContainerListOrders = {};
                this.canvasListOrderNormalizeService.settingListOrder(newContainerListOrders, sortedContainerToAddNames, nextMinMagnitudeOrder += gap, gap), 
                suppressUndoRedo ? this.visualAuthoringOperations.updateContainerListOrders(containersToMove, newContainerListOrders, containerListOrderingProperty) : this.visualAuthoring.updateContainerListOrders(containersToMove, newContainerListOrders, containerListOrderingProperty);
            }, CanvasListOrderingService.prototype.convertsMagnitude = function(gap, isPositiveRange) {
                return isPositiveRange ? gap : -gap;
            }, CanvasListOrderingService.prototype.bringToFront = function(canvasItemsContract, containersToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    });
                    this.moveAfterIndexInternal(canvasItemsContract, canvasItemsContract.length - 1, containerListOrders, containersToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo);
                }
            }, CanvasListOrderingService.prototype.bringForward = function(canvasItemsContract, canvasItemsToBringForward, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                var _this = this;
                if (!_.isEmpty(canvasItemsToBringForward)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    });
                    this.groupSequentialContainers(canvasItemsContract, canvasItemsToBringForward, containerListOrders, function(containerNames, startVisualIndex, endContainerIndex) {
                        var afterContainerIndex = endContainerIndex + 1;
                        return _.map(containerNames, function(containerName) {
                            return {
                                afterContainerIndex,
                                containerName
                            };
                        });
                    }, isPositiveRange, containerListOrderingProperty, suppressUndoRedo);
                }
            }, CanvasListOrderingService.prototype.sendToBack = function(canvasItemsContract, containersToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    });
                    this.moveBeforeIndexInternal(canvasItemsContract, 0, containerListOrders, containersToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo);
                }
            }, CanvasListOrderingService.prototype.sendBackward = function(canvasItemsContract, containersToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    });
                    this.groupSequentialContainers(canvasItemsContract, containersToMove, containerListOrders, function(containerNames, startContainerIndex, endContainerIndex) {
                        var beforeContainerIndex = startContainerIndex - 1;
                        return _.map(containerNames, function(containerName) {
                            return {
                                beforeContainerIndex,
                                containerName
                            };
                        });
                    }, isPositiveRange, containerListOrderingProperty, suppressUndoRedo);
                }
            }, CanvasListOrderingService.prototype.moveAfter = function(canvasItemsContract, afterContainer, containersToMove, isPositiveRange, containerListOrderingProperty) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    }), afterContainerIndex = this.findContainerIndex(afterContainer, containerListOrders, isPositiveRange), canvasItemsUnion = _.union(canvasItemsContract, containersToMove);
                    this.moveAfterIndexInternal(canvasItemsUnion, afterContainerIndex, containerListOrders, containersToMove, isPositiveRange, containerListOrderingProperty);
                }
            }, CanvasListOrderingService.prototype.moveAfterIndex = function(canvasItemsContract, afterContainerIndex, containersToMove, isPositiveRange, containerListOrderingProperty) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    });
                    this.moveAfterIndexInternal(canvasItemsContract, afterContainerIndex, containerListOrders, containersToMove, isPositiveRange, containerListOrderingProperty);
                }
            }, CanvasListOrderingService.prototype.shouldNormalize = function(canvasItemsContract, isPositiveRange, containerListOrderingProperty) {
                var _this = this, containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                    return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                }), shouldNormalizeCurrentLevel = this.canvasListOrderNormalizeService.shouldNormalizeListOrder(containerListOrders, isPositiveRange);
                if (!shouldNormalizeCurrentLevel) for (var _i = 0, canvasItemsContract_1 = canvasItemsContract; _i < canvasItemsContract_1.length; _i++) {
                    var item = canvasItemsContract_1[_i];
                    if ((0, visualContainerGroup2.q4)(item) && (shouldNormalizeCurrentLevel = this.shouldNormalize(item.children, isPositiveRange, containerListOrderingProperty))) break;
                }
                return shouldNormalizeCurrentLevel;
            }, CanvasListOrderingService.prototype.normalize = function(canvasItemsContract, isPositiveRange, containerListOrderingProperty) {
                var _this = this, containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                    return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                }), newContainerListOrders = this.canvasListOrderNormalizeService.normalizeListOrder(containerListOrders, isPositiveRange);
                this.visualAuthoringOperations.updateContainerListOrders(canvasItemsContract, newContainerListOrders, containerListOrderingProperty);
                for (var _i = 0, canvasItemsContract_2 = canvasItemsContract; _i < canvasItemsContract_2.length; _i++) {
                    var item = canvasItemsContract_2[_i];
                    (0, visualContainerGroup2.q4)(item) && this.normalize(item.children, isPositiveRange, containerListOrderingProperty);
                }
            }, CanvasListOrderingService.prototype.moveAfterIndexInternal = function(canvasItems, afterContainerIndex, containerListOrders, canvasItemsToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                var operations = this.buildOperations(canvasItemsToMove, containerListOrders, isPositiveRange, function(visualContainer) {
                    return {
                        containerName: visualContainer.name,
                        afterContainerIndex
                    };
                });
                this.movecanvasItems(canvasItems, operations, containerListOrders, isPositiveRange, containerListOrderingProperty, suppressUndoRedo);
            }, CanvasListOrderingService.prototype.moveBefore = function(canvasItemsContract, beforeContainer, containersToMove, isPositiveRange, containerListOrderingProperty) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    }), beforeContainerIndex = this.findContainerIndex(beforeContainer, containerListOrders, isPositiveRange), canvasItemsUnion = _.union(canvasItemsContract, containersToMove);
                    this.moveBeforeIndexInternal(canvasItemsUnion, beforeContainerIndex, containerListOrders, containersToMove, isPositiveRange, containerListOrderingProperty);
                }
            }, CanvasListOrderingService.prototype.moveBeforeIndex = function(canvasItemsContract, beforeContainerIndex, containersToMove, isPositiveRange, containerListOrderingProperty) {
                var _this = this;
                if (!_.isEmpty(containersToMove)) {
                    var containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItemsContract, function(item) {
                        return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                    });
                    this.moveBeforeIndexInternal(canvasItemsContract, beforeContainerIndex, containerListOrders, containersToMove, isPositiveRange, containerListOrderingProperty);
                }
            }, CanvasListOrderingService.prototype.moveBeforeIndexInternal = function(canvasItems, beforeContainerIndex, containerListOrders, containersToMove, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                var operations = this.buildOperations(containersToMove, containerListOrders, isPositiveRange, function(visualContainer) {
                    return {
                        containerName: visualContainer.name,
                        beforeContainerIndex
                    };
                });
                this.movecanvasItems(canvasItems, operations, containerListOrders, isPositiveRange, containerListOrderingProperty, suppressUndoRedo);
            }, CanvasListOrderingService.prototype.findContainerIndex = function(visualContainer, containerListOrders, isPositiveRange) {
                var sortedContainerNames = this.canvasListOrderNormalizeService.getSortedContainerNames(containerListOrders, isPositiveRange);
                return _.findIndex(sortedContainerNames, function(containerName) {
                    return containerName === visualContainer.name;
                });
            }, CanvasListOrderingService.prototype.movecanvasItems = function(canvasItems, operations, containerListOrders, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                for (var sortedContainerNames = this.canvasListOrderNormalizeService.getSortedContainerNames(containerListOrders, isPositiveRange), afterListOrderMapping = [], touchedContainers = {}, newContainerListOrders = {}, gap = canvasListOrderNormalizeService.oZ, _loop_1 = function(operation) {
                    var targetName = operation.containerName;
                    debug.fF.assert(function() {
                        return !touchedContainers[targetName];
                    }, "VisualContainer is used in multiple operations");
                    var afterContainerIndex = void 0, beforeContainerIndex = void 0, defaultOffset = void 0;
                    !function(operation) {
                        return null != operation.afterContainerIndex;
                    }(operation) ? function(operation) {
                        return null != operation.beforeContainerIndex;
                    }(operation) ? (afterContainerIndex = (beforeContainerIndex = Math.max(operation.beforeContainerIndex, 0)) - 1, 
                    defaultOffset = this_1.convertsMagnitude(gap, !isPositiveRange)) : debug.fF.assertFail("Unknown operation type") : (beforeContainerIndex = (afterContainerIndex = Math.min(operation.afterContainerIndex, sortedContainerNames.length - 1)) + 1, 
                    defaultOffset = this_1.convertsMagnitude(gap, isPositiveRange));
                    var afterListOrderNumber = this_1.getAfterContainerListOrderPropertyNumber(afterListOrderMapping, sortedContainerNames, containerListOrders, afterContainerIndex), beforeListOrderNumber = this_1.getBeforeContainerListOrderPropertyNumber(sortedContainerNames, containerListOrders, beforeContainerIndex), hasAfterListOrderNumber = null != afterListOrderNumber, hasBeforeListOrderNumber = null != beforeListOrderNumber;
                    hasAfterListOrderNumber && hasBeforeListOrderNumber || (!hasAfterListOrderNumber && hasBeforeListOrderNumber ? afterListOrderNumber = beforeListOrderNumber + defaultOffset : hasAfterListOrderNumber && !hasBeforeListOrderNumber ? beforeListOrderNumber = afterListOrderNumber + defaultOffset : debug.fF.assertFail("Could not find afterListOrderNumber and beforeListOrderNumber"));
                    var insertionListOrderNumber = (beforeListOrderNumber + afterListOrderNumber) / 2;
                    debug.fF.assert(function() {
                        return isPositiveRange ? afterListOrderNumber < insertionListOrderNumber : insertionListOrderNumber < afterListOrderNumber;
                    }, "afterListOrderNumber is not less than insertionListOrderNumber if range is positive, insertionListOrderNumber is not less than afterListOrderNumber if range is negative"), 
                    debug.fF.assert(function() {
                        return isPositiveRange ? beforeListOrderNumber > insertionListOrderNumber : insertionListOrderNumber > beforeListOrderNumber;
                    }, "beforeListOrderNumber is not greater than insertionListOrderNumber if range is positive, insertionListOrderNumber is not greater than beforePrderNumber if range is negative"), 
                    afterListOrderMapping[afterContainerIndex] = insertionListOrderNumber, newContainerListOrders[targetName] = insertionListOrderNumber;
                }, this_1 = this, _i = 0, operations_1 = operations; _i < operations_1.length; _i++) _loop_1(operations_1[_i]);
                var allIndexes = _.extend({}, containerListOrders, newContainerListOrders);
                this.canvasListOrderNormalizeService.shouldNormalizeListOrder(allIndexes, isPositiveRange) && (allIndexes = this.canvasListOrderNormalizeService.normalizeListOrder(allIndexes, isPositiveRange)), 
                suppressUndoRedo ? this.visualAuthoringOperations.updateContainerListOrders(canvasItems, allIndexes, containerListOrderingProperty) : this.visualAuthoring.updateContainerListOrders(canvasItems, allIndexes, containerListOrderingProperty);
            }, CanvasListOrderingService.prototype.getAfterContainerListOrderPropertyNumber = function(afterListOrderMapping, containerIndexes, containerListOrders, afterContainerIndex) {
                var afterListOrder = afterListOrderMapping[afterContainerIndex];
                if (null == afterListOrder) {
                    var afterContainer = containerIndexes[afterContainerIndex];
                    afterContainer && (afterListOrder = containerListOrders[afterContainer]);
                }
                return afterListOrder;
            }, CanvasListOrderingService.prototype.getBeforeContainerListOrderPropertyNumber = function(containerIndexes, containerListOrders, beforeContainerIndex) {
                return containerListOrders[containerIndexes[beforeContainerIndex]];
            }, CanvasListOrderingService.prototype.groupSequentialContainers = function(canvasItems, canvasItemsToGroup, containerListOrders, builder, isPositiveRange, containerListOrderingProperty, suppressUndoRedo) {
                for (var currentGroup, _this = this, sortedContainerNames = this.canvasListOrderNormalizeService.getSortedContainerNames(containerListOrders, isPositiveRange), inputContainers = _.zipObject(_.map(canvasItemsToGroup, function(visualContainer) {
                    return visualContainer.name;
                }), _.map(canvasItemsToGroup, function() {
                    return !0;
                })), numContainersToMove = canvasItemsToGroup.length, numMovedContainers = 0, startContainerPosition = 0, endContainerPosition = 0, currentPosition = 0; currentPosition < sortedContainerNames.length; currentPosition++) {
                    var containerName = sortedContainerNames[currentPosition];
                    if (inputContainers[containerName]) {
                        if (currentGroup ? currentGroup.push(containerName) : (currentGroup = [ containerName ], 
                        startContainerPosition = currentPosition), ++numMovedContainers === numContainersToMove) {
                            endContainerPosition = currentPosition;
                            break;
                        }
                    } else if (currentGroup) {
                        var operations = builder(currentGroup, startContainerPosition, endContainerPosition = currentPosition - 1);
                        this.movecanvasItems(canvasItems, operations, containerListOrders, isPositiveRange, containerListOrderingProperty), 
                        containerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(canvasItems, function(item) {
                            return _this.getListOrderPropertyFunction(item, containerListOrderingProperty);
                        }), currentGroup = null;
                    }
                }
                currentGroup && (operations = builder(currentGroup, startContainerPosition, endContainerPosition), 
                this.movecanvasItems(canvasItems, operations, containerListOrders, isPositiveRange, containerListOrderingProperty, suppressUndoRedo));
            }, CanvasListOrderingService.prototype.buildOperations = function(canvasItems, containerListOrders, isPositiveRange, builder) {
                var orderByOrder = isPositiveRange ? "asc" : "desc";
                return _.chain(canvasItems).map(builder).orderBy(function(operation) {
                    return containerListOrders[operation.containerName];
                }, orderByOrder).value();
            }, CanvasListOrderingService.\u0275fac = function(t) {
                return new (t || CanvasListOrderingService)(core["\u0275\u0275inject"](canvas_list_order_normalize_service.F), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_authoring_operations_service.Q), core["\u0275\u0275inject"](form_factor_provider_service.F));
            }, CanvasListOrderingService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: CanvasListOrderingService,
                factory: CanvasListOrderingService.\u0275fac
            }), CanvasListOrderingService;
        }(), dataBarsUtil = __webpack_require__(26902), visualStyleSerializer = __webpack_require__(25740), dialog_service = __webpack_require__(58938), DataBarsDialogLauncherServiceLazyProvider = {
            provide: "dataBarsDialogLauncherService",
            useFactory: function(dialogService, localizationService, telemetryService, visualAuthoringService) {
                return new DataBarsDialogLauncherService(dialogService, localizationService, telemetryService, visualAuthoringService);
            },
            deps: [ dialog_service.x, localization_service.o, Telemetry.y0, visual_authoring_service.$8 ]
        }, DataBarsDialogLauncherService = function() {
            function DataBarsDialogLauncherService(dialogService, localizationService, telemetryService, visualAuthoring) {
                this.dialogService = dialogService, this.localizationService = localizationService, 
                this.telemetryService = telemetryService, this.visualAuthoring = visualAuthoring;
            }
            return DataBarsDialogLauncherService.prototype.show = function(visualContainer, fieldDisplayName, repetition, colorPalette, dataType, fromPropertyPane) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataBarsSettings, inputArgs, dialogTitle, bindings, dialogRef, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return dataBarsSettings = (0, dataBarsUtil.aI)(visualContainer.config.singleVisual, repetition), 
                            inputArgs = {
                                dataBarsSettings,
                                colorPalette: (0, visualStyleSerializer.NO)(colorPalette)
                            }, dialogTitle = this.localizationService.get("Visual_ConditionalFormatting_DataBars"), 
                            bindings = {
                                title: "".concat(dialogTitle, " - ").concat(fieldDisplayName),
                                input: inputArgs,
                                hideOkButton: !1,
                                hideCancelButton: !1
                            }, [ 4, this.dialogService.showTemplateDialog("DataBarsDialog", bindings, {
                                height: "668px",
                                width: "426px"
                            }) ];

                          case 1:
                            return (dialogRef = _a.sent()).afterClosed().subscribe(function(result) {
                                result && _this.setDataBars(result.dataBars, visualContainer, repetition, dataType, fromPropertyPane);
                            }), [ 2, dialogRef ];
                        }
                    });
                });
            }, DataBarsDialogLauncherService.prototype.setDataBars = function(dataBars, visual, repetition, dataType, fromPropertyPane) {
                var dataBarsDefinition = (0, dataBarsUtil.ac)(dataBars, dataType);
                this.visualAuthoring.addDataBars(visual, repetition, dataBarsDefinition), this.telemetryService.logEvent(ExploreUI_telemetry_events.QBi, {
                    visualType: (0, visualContainerUtilsHelper.s)(visual),
                    userValueSpecified: void 0 !== dataBars.minValue || void 0 !== dataBars.maxValue,
                    fromPropertyPane,
                    visualName: visual.name
                });
            }, DataBarsDialogLauncherService.\u0275fac = function(t) {
                return new (t || DataBarsDialogLauncherService)(core["\u0275\u0275inject"](dialog_service.x), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_authoring_service.$8));
            }, DataBarsDialogLauncherService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DataBarsDialogLauncherService,
                factory: DataBarsDialogLauncherService.\u0275fac
            }), DataBarsDialogLauncherService;
        }(), linguistic_schema_proxy_service = __webpack_require__(52298), Explore_constants = __webpack_require__(57871), podUtils = __webpack_require__(78417), sectionUtils = __webpack_require__(83400), controllers_sectionUtils = __webpack_require__(71216), StandaloneUtility3 = __webpack_require__(43286), ExplorationAuthoringLazyProvider = {
            provide: "explorationAuthoring",
            useFactory: function(eventBridge, explorationActivity, explorationNavigation, explorationSerializer, featureSwitchService, linguisticSchemaProxy, localization, promiseFactory, telemetryService, undoRedo) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, new ExplorationAuthoring(eventBridge, explorationActivity, explorationNavigation, explorationSerializer, featureSwitchService, linguisticSchemaProxy, localization, promiseFactory, telemetryService, undoRedo) ];
                    });
                });
            },
            deps: [ event_bridge_service.J, exploration_activity_service.Z, exploration_navigation_service.z, exploration_serializer_service.L, feature_switch_service.vZ, linguistic_schema_proxy_service.e, localization_service.o, promiseFactory.t, Telemetry.y0, undo_redo_service.z ]
        }, ExplorationAuthoring = function() {
            function ExplorationAuthoring(eventBridge, explorationActivity, explorationNavigation, explorationSerializer, featureSwitchService, linguisticSchemaProxy, localization, promiseFactory, telemetryService, undoRedo) {
                this.eventBridge = eventBridge, this.explorationNavigation = explorationNavigation, 
                this.featureSwitchService = featureSwitchService, this.linguisticSchemaProxy = linguisticSchemaProxy, 
                this.promiseFactory = promiseFactory, this.undoRedo = undoRedo, this.explorationAuthoringOps = new ExplorationAuthoringOperations(explorationActivity, explorationNavigation, explorationSerializer, localization, telemetryService);
            }
            return ExplorationAuthoring.prototype.renameSection = function(viewModel, newName, sectionIndex) {
                var _this = this, contract = viewModel.exploration.contract, originalName = contract.sections[sectionIndex].name;
                this.undoRedo.register("RenameNavigationTab", function() {
                    _this.explorationAuthoringOps.renameSection(viewModel, newName, sectionIndex), (0, 
                    podUtils.D6)(contract, originalName, newName, _this.linguisticSchemaProxy, !1).then(function() {
                        _this.eventBridge.publishToChannel(events.TTT, {
                            sectionName: newName,
                            sectionIndex
                        });
                    });
                });
            }, ExplorationAuthoring.prototype.createSection = function(viewModel, howCreated, size, objects, displayName) {
                var _this = this;
                this.undoRedo.register("CreateSection", function() {
                    _this.explorationAuthoringOps.createSection(viewModel, howCreated, size, objects, displayName);
                });
            }, ExplorationAuthoring.prototype.duplicateSection = function(viewModel, targetSectionIndex) {
                var _this = this;
                this.undoRedo.register("DuplicateSection", function() {
                    var newSection = _this.explorationAuthoringOps.duplicateSection(viewModel, targetSectionIndex);
                    (0, podUtils.bx)(viewModel.exploration.contract, newSection, targetSectionIndex, _this.linguisticSchemaProxy, _this.promiseFactory).then(function() {
                        _this.explorationAuthoringOps.insertSection(viewModel, newSection);
                    });
                });
            }, ExplorationAuthoring.prototype.deleteSection = function(viewModel, targetSectionIndex, addToUndoRedoStack) {
                var _this = this, removeSection = function() {
                    var contract = viewModel.exploration.contract;
                    (0, podUtils.Og)(contract, contract.sections[targetSectionIndex].name, _this.linguisticSchemaProxy).then(function() {
                        _this.explorationAuthoringOps.deleteSection(viewModel, targetSectionIndex), _this.eventBridge.publishToChannel(events.HGU, {
                            sectionIndex: targetSectionIndex
                        });
                    });
                };
                addToUndoRedoStack ? this.undoRedo.register("DeleteSection", function() {
                    removeSection();
                }) : removeSection();
            }, ExplorationAuthoring.prototype.insertSection = function(viewModel, sectionContract) {
                var _this = this;
                this.undoRedo.register("InsertSection", function() {
                    _this.explorationAuthoringOps.insertSection(viewModel, sectionContract);
                });
            }, ExplorationAuthoring.prototype.setSectionVisibility = function(sectionContract, visibility) {
                var _this = this;
                this.undoRedo.register("SetSectionVisibility", function() {
                    _this.explorationAuthoringOps.setSectionVisibility(sectionContract, visibility);
                });
            }, ExplorationAuthoring.prototype.reorderSection = function(viewModel, originalSectionIndex, targetSectionIndex) {
                var _this = this;
                this.undoRedo.register("ReorderSection", function() {
                    _this.explorationAuthoringOps.reorderSection(viewModel, originalSectionIndex, targetSectionIndex);
                });
            }, ExplorationAuthoring.prototype.setSectionType = function(exploration, sectionContract, type, noUndo) {
                var _this = this, operation = function() {
                    0 === type ? _this.explorationAuthoringOps.clearSectionType(sectionContract, ~type) : _this.explorationAuthoringOps.setSectionType(sectionContract, type), 
                    (0, podUtils.TJ)(exploration, sectionContract.name, (0, podUtils.wj)(sectionContract, _this.featureSwitchService.featureSwitches.onObject));
                };
                noUndo ? operation() : this.undoRedo.register("SetSectionType", operation);
            }, ExplorationAuthoring.prototype.clearSectionType = function(exploration, sectionContract, type) {
                var _this = this;
                0 !== type ? this.undoRedo.register("ClearSectionType", function() {
                    _this.explorationAuthoringOps.clearSectionType(sectionContract, type), (0, podUtils.TJ)(exploration, sectionContract.name, (0, 
                    podUtils.wj)(sectionContract, _this.featureSwitchService.featureSwitches.onObject));
                }) : debug.fF.assertFail('Can not clear a "Regular" default section state');
            }, ExplorationAuthoring.prototype.setDrillthroughFilterPassingMode = function(explorationContract, sectionContract, passAllFilters) {
                var _this = this;
                this.undoRedo.register("setDrillthroughFilterPassingMode", function() {
                    _this.explorationAuthoringOps.setDrillthroughFilterPassingMode(explorationContract, sectionContract, passAllFilters);
                });
            }, ExplorationAuthoring.prototype.setCrossReportDrillthrough = function(explorationContract, sectionContract, crossReportDrillthrough, undoRedoRegister) {
                var _this = this;
                void 0 === undoRedoRegister && (undoRedoRegister = !0), undoRedoRegister ? this.undoRedo.register("setCrossReportDrillthrough", function() {
                    _this.explorationAuthoringOps.setCrossReportDrillthrough(explorationContract, sectionContract, crossReportDrillthrough);
                }) : this.explorationAuthoringOps.setCrossReportDrillthrough(explorationContract, sectionContract, crossReportDrillthrough);
            }, ExplorationAuthoring.prototype.setDataSourceVariables = function(newDataSourceVariables, contract) {
                var _this = this;
                void 0 === contract && (contract = this.explorationNavigation.getCurrentExploration()), 
                debug.fF.assertValue(contract, "contract"), this.undoRedo.register("setDataSourceVariables", function() {
                    _this.explorationAuthoringOps.setDataSourceVariables(contract, newDataSourceVariables), 
                    _this.eventBridge.publishToChannel(events.jCS, {
                        affectContainer: _.stubTrue
                    });
                });
            }, ExplorationAuthoring.prototype.setCanvasDisplay = function(pageSizeTypeName) {
                this.eventBridge.publishToChannel(events.Pkb, pageSizeTypeName);
            }, (0, tslib_es6.__decorate)([ (0, tslib_es6.__param)(7, (0, core.Inject)(promiseFactory.t)), (0, 
            tslib_es6.__metadata)("design:paramtypes", [ event_bridge_service.J, exploration_activity_service.Z, exploration_navigation_service.z, exploration_serializer_service.L, feature_switch_service.vZ, linguistic_schema_proxy_service.e, localization_service.o, Object, Telemetry.y0, undo_redo_service.z ]) ], ExplorationAuthoring);
        }(), ExplorationAuthoringOperations = function() {
            function ExplorationAuthoringOperations(explorationActivity, explorationNavigation, explorationSerializer, localization, telemetryService) {
                this.explorationActivity = explorationActivity, this.explorationNavigation = explorationNavigation, 
                this.explorationSerializer = explorationSerializer, this.localization = localization, 
                this.telemetryService = telemetryService;
            }
            return ExplorationAuthoringOperations.prototype.renameSection = function(viewModel, newName, sectionIndex) {
                var explorationViewModel = viewModel.exploration;
                explorationViewModel.contract.sections[sectionIndex].displayName = newName;
                var sectionViewModels = explorationViewModel.sections;
                sectionViewModels[sectionIndex].displayName = newName, sectionViewModels[sectionIndex].isTabEditable = !1, 
                this.explorationNavigation.emitUpdatedSections();
            }, ExplorationAuthoringOperations.prototype.duplicateSection = function(viewModel, targetSectionIndex) {
                var contract = viewModel.exploration.contract;
                debug.fF.assert(function() {
                    return targetSectionIndex <= contract.sections.length;
                }, "Expected target index should be less than or equals sections length.");
                var newSectionWireData = this.explorationSerializer.serializePage(contract.sections[targetSectionIndex], 1), newSection = this.explorationSerializer.deserializePage(newSectionWireData, {
                    enableVisualContainerGrouping: contract.settings && contract.settings.useStylableVisualContainerHeader
                });
                return newSection.name = getNextSectionName(contract), (0, sectionUtils.gs)(newSection, viewModel.exploration.contract.sections), 
                newSection.displayName = this.localization.format("DuplicateSectionName_StartingText", [ newSection.displayName ]), 
                newSection;
            }, ExplorationAuthoringOperations.prototype.insertSection = function(viewModel, sectionContract) {
                var _this = this;
                this.explorationActivity.doRootActivity(function(telemetryActivity) {
                    sectionContract.id = void 0, sectionContract.objectId = void 0;
                    var sections = viewModel.exploration.contract.sections;
                    sections.push(sectionContract), viewModel.exploration.sections.push((0, viewModelFactory.Iu)(sectionContract, _this.localization));
                    var newActiveSectionIdx = sections.length - 1;
                    _this.explorationNavigation.updateActiveSection({
                        targetSectionIndex: newActiveSectionIdx,
                        forceUpdate: viewModel.sectionStatus.currentSectionNumber === newActiveSectionIdx,
                        parentActivity: telemetryActivity
                    }), _this.explorationNavigation.emitUpdatedSections();
                }, function() {
                    return _this.telemetryService.startChildActivity(void 0, telemetry_events.$0);
                });
            }, ExplorationAuthoringOperations.prototype.deleteSection = function(viewModel, targetSectionIndex) {
                var _this = this;
                this.explorationActivity.doRootActivity(function(telemetryActivity) {
                    var contract = viewModel.exploration.contract;
                    if (targetSectionIndex > -1 && contract && targetSectionIndex < contract.sections.length) {
                        var sectionContract = contract.sections[targetSectionIndex];
                        contract.sections.splice(targetSectionIndex, 1);
                        var sections = viewModel.exploration.sections, sectionViewModel = sections[targetSectionIndex];
                        sectionViewModel && sectionViewModel.contract === sectionContract && sections.splice(targetSectionIndex, 1);
                        var currentSectionNumber = viewModel.sectionStatus.currentSectionNumber;
                        if (currentSectionNumber === targetSectionIndex) {
                            var nextSlideIndex = targetSectionIndex;
                            nextSlideIndex >= contract.sections.length && (nextSlideIndex = contract.sections.length - 1), 
                            _this.explorationNavigation.updateActiveSection({
                                targetSectionIndex: nextSlideIndex,
                                forceUpdate: currentSectionNumber === nextSlideIndex,
                                suppressHistory: !0,
                                parentActivity: telemetryActivity
                            });
                        } else {
                            var activeSectionIndex = targetSectionIndex > currentSectionNumber ? currentSectionNumber : currentSectionNumber - 1;
                            viewModel.sectionStatus.currentSectionNumber = activeSectionIndex, contract.activeSectionIndex = activeSectionIndex;
                        }
                    }
                    _this.explorationNavigation.emitUpdatedSections();
                }, function() {
                    return _this.telemetryService.startChildActivity(void 0, telemetry_events.yw);
                });
            }, ExplorationAuthoringOperations.prototype.createSection = function(viewModel, howCreated, size, objects, displayName) {
                var contract = viewModel.exploration.contract;
                size || (size = {
                    displayOption: 1,
                    width: Explore_constants.$z,
                    height: Explore_constants.az
                });
                var newSection = {
                    name: getNextSectionName(contract),
                    displayName: displayName || (0, controllers_sectionUtils.Vk)(contract.sections, this.localization),
                    size,
                    objects,
                    visualContainers: [],
                    visualContainerGroups: [],
                    filters: [],
                    acceptsAllFiltersWhenLinked: void 0,
                    howCreated: null != howCreated ? howCreated : "Default",
                    isNew: !0
                };
                this.insertSection(viewModel, newSection), this.explorationNavigation.emitUpdatedSections();
            }, ExplorationAuthoringOperations.prototype.reorderSection = function(viewModel, originalSectionIndex, targetSectionIndex) {
                if (originalSectionIndex < 0 || targetSectionIndex < 0) return !1;
                var reorderSucceeded = !1, sectionContracts = viewModel.exploration.contract.sections, sectionContract = sectionContracts[originalSectionIndex];
                sectionContracts.splice(originalSectionIndex, 1), sectionContracts.splice(targetSectionIndex, 0, sectionContract);
                var sections = viewModel.exploration.sections, sectionViewModel = sections[originalSectionIndex];
                sectionViewModel && sectionViewModel.contract === sectionContract && (sections.splice(originalSectionIndex, 1), 
                sections.splice(targetSectionIndex, 0, sectionViewModel), reorderSucceeded = !0);
                for (var i = sections.length - 1; i >= 0; --i) if (sections[i].selected) {
                    viewModel.sectionStatus.currentSectionNumber = i;
                    break;
                }
                return this.explorationNavigation.emitUpdatedSections(), reorderSucceeded;
            }, ExplorationAuthoringOperations.prototype.setSectionVisibility = function(sectionContract, visibility) {
                sectionContract.visibility = visibility, this.explorationNavigation.emitUpdatedSections();
            }, ExplorationAuthoringOperations.prototype.setSectionType = function(sectionContract, type) {
                debug.fF.assert(function() {
                    return !((0, StandaloneUtility3.yE)(type, 2) && (0, StandaloneUtility3.yE)(type, 1));
                }, "Tooltip and Drillthrough types cannot co-exist!"), (0, StandaloneUtility3.yE)(type, 2) && this.clearSectionType(sectionContract, 1), 
                (0, StandaloneUtility3.yE)(type, 1) && this.clearSectionType(sectionContract, 2), 
                sectionContract.type |= type, this.explorationNavigation.emitUpdatedSections();
            }, ExplorationAuthoringOperations.prototype.clearSectionType = function(sectionContract, type) {
                sectionContract.type &= ~type, this.explorationNavigation.emitUpdatedSections();
            }, ExplorationAuthoringOperations.prototype.setDrillthroughFilterPassingMode = function(explorationContract, sectionContract, passAllFilters) {
                (0, podUtils.rF)(explorationContract, sectionContract.name, (0, podUtils.Js)(passAllFilters));
            }, ExplorationAuthoringOperations.prototype.setCrossReportDrillthrough = function(explorationContract, sectionContract, crossReportDrillthrough) {
                (0, podUtils.kt)(explorationContract, sectionContract.name, (0, podUtils.zO)(crossReportDrillthrough));
            }, ExplorationAuthoringOperations.prototype.setDataSourceVariables = function(explorationContract, dataSourceVariables) {
                explorationContract.dataSourceVariables = dataSourceVariables;
            }, ExplorationAuthoringOperations;
        }();
        function getNextSectionName(contract) {
            var sectionNames = _.map(contract.sections, function(section) {
                return section.name;
            }), sectionNamesMap = _.zipObject(sectionNames, _.map(sectionNames, function() {
                return !0;
            }));
            return idUtility.q.generateUniqueId(sectionNamesMap);
        }
        var data_proxy_service = __webpack_require__(49092), visual_query_generator_service = __webpack_require__(88565), geo_tagging_analyzer_service = __webpack_require__(77435), visual_parameter_service = __webpack_require__(66028), visual_authoring_customize_operations_service = __webpack_require__(28107), query_projection_builder_core_utils = __webpack_require__(33163), ExportToExcelProxy = function() {
            function ExportToExcelProxy() {}
            return ExportToExcelProxy.prototype.exportToExcel = function(exportToExcelRequest, requestOptions) {
                debug.fF.assertValue(exportToExcelRequest, "exportToExcelRequest"), debug.fF.assertValue(requestOptions, "requestOptions"), 
                debug.fF.assertFail("ExportToExcelProxy code path should only be through webExploration");
            }, ExportToExcelProxy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExportToExcelProxy,
                factory: ExportToExcelProxy.\u0275fac = function(t) {
                    return new (t || ExportToExcelProxy);
                },
                providedIn: "root"
            }), ExportToExcelProxy;
        }(), http_service = __webpack_require__(73875), dataViewObject2 = __webpack_require__(82755), formattingService = __webpack_require__(28326), valueType = __webpack_require__(80777), doubleQuotes = '"', delimiter = ",", dateFormat = "yyyy-MM-dd HH:mm:ss", singleQuote = "'";
        function fromDataView(dataView, formatStringProp, rowsLimit) {
            var _a, tableView = dataView.table;
            if (!tableView) return "";
            var columnsMetadata = tableView.columns;
            debug.fF.assertValue(columnsMetadata, "columns metadata is null");
            var s = "", columnCount = 0;
            (null == rowsLimit || rowsLimit > tableView.rows.length) && (rowsLimit = tableView.rows.length);
            for (var i = 0; i < rowsLimit; i++) {
                var row = tableView.rows[i], data = [];
                row.length > columnCount && (columnCount = row.length);
                for (var iCol = 0, len = row.length; iCol < len; iCol++) {
                    var metadata = columnsMetadata[iCol], valueType = metadata && metadata.type, dynamicFormatString = (0, 
                    dataViewObject2.NA)(null === (_a = row.objects) || void 0 === _a ? void 0 : _a[iCol], formatStringProp);
                    data.push(escapeValue(row[iCol], valueType, dynamicFormatString || metadata && metadata.format));
                }
                data.length > 0 && (s += data.join(delimiter) + "\r\n");
            }
            return s = function(columnsMetadata, columnCount) {
                (columnCount <= 0 || columnCount > columnsMetadata.length) && (columnCount = columnsMetadata.length);
                for (var columnArray = [], i = 0; i < columnCount; i++) columnArray.push(escapeStringValue(columnsMetadata[i].displayName));
                return columnArray.join(delimiter);
            }(columnsMetadata, columnCount) + "\r\n" + s, s;
        }
        function escapeValue(value, valueType, format) {
            return null == value ? "" : (valueType || (valueType = inferTypeFromValue(value)), 
            stringValue = valueType.dateTime ? formattingService.dx.formatValue(value, dateFormat) : valueType.bool || valueType.numeric && !format ? value.toString() : valueType.numeric ? formattingService.dx.formatValue(value, function(format) {
                return debug.fF.assertValue(format, "format"), format.replace(/(\r\n|\n|\r|,)/g, "");
            }(format)) : function(stringValue) {
                return "=" !== stringValue.charAt(0) && "-" !== stringValue.charAt(0) && "+" !== stringValue.charAt(0) && "@" !== stringValue.charAt(0) || (stringValue = singleQuote.concat(stringValue)), 
                stringValue;
            }(value.toString()), escapeStringValue(stringValue));
            var stringValue;
        }
        function inferTypeFromValue(value) {
            return debug.fF.assertValue(value, "value"), _.isDate(value) ? valueType.Ge.fromPrimitiveTypeAndCategory(6) : _.isBoolean(value) ? valueType.Ge.fromPrimitiveTypeAndCategory(5) : _.isNumber(value) ? valueType.Ge.fromPrimitiveTypeAndCategory(3) : valueType.Ge.fromPrimitiveTypeAndCategory(1);
        }
        function escapeStringValue(stringValue) {
            return null == stringValue ? "" : (stringValue = stringValue.replace(/\"/g, '""'), 
            _.includes(stringValue, "\n") || _.includes(stringValue, doubleQuotes) || _.includes(stringValue, delimiter) || _.includes(stringValue, "\r") || 0 === stringValue.length ? doubleQuotes + stringValue + doubleQuotes : stringValue);
        }
        var executeSemanticQueryProxy_helpers = __webpack_require__(42220), dsrLimitsWarning = __webpack_require__(74593), dsrReader = __webpack_require__(48706), executeSemanticQueryBatcher = __webpack_require__(13479), dataSource = __webpack_require__(74804), exploration_data_reader_data_source_utils = __webpack_require__(29169), filters_filterBuilder = __webpack_require__(11077), sparklinesUtil = __webpack_require__(89522), errorDetailsHelper = __webpack_require__(94853), errorCodes = __webpack_require__(53497), featureSwitchUtils = __webpack_require__(16699), dataViewObjectProperties = __webpack_require__(14599), visualStyles = __webpack_require__(48708), Utility = __webpack_require__(38078), dataShapeBindingDataReduction = __webpack_require__(71813), colorAllocatorFactory = __webpack_require__(39317), dataViewTransform = __webpack_require__(25992), sqExprRewriter = __webpack_require__(5361), localeProvider_service = __webpack_require__(8679), ExportVisualDataLazyProvider = {
            provide: "exportVisualData",
            useFactory: function(visualPluginService, visualQueryGenerator, dataProxy, conceptualSchemaProxy, aggrOps, geotaggingAnalyzerService, featureSwitchService, displayNameService, localizationService, localeProviderService, exportToExcelProxy, httpService, visualAuthoringOperations, visualParameterServiceFactory, visualAuthoringCustomizeOperations) {
                var visualAuthoring = (0, visualAuthoringCore.Vz)(visualPluginService, geotaggingAnalyzerService, aggrOps, featureSwitchService, visualAuthoringCustomizeOperations, displayNameService), visualParameterService = visualParameterServiceFactory.create();
                return new ExportVisualDataService(visualAuthoring, visualPluginService, visualQueryGenerator, dataProxy, conceptualSchemaProxy, displayNameService, localizationService, localeProviderService, featureSwitchService, exportToExcelProxy, httpService, visualAuthoringOperations, visualAuthoringCustomizeOperations, visualParameterService);
            },
            deps: [ visual_plugin_service.D, visual_query_generator_service.S, data_proxy_service.d, conceptual_schema_proxy_service.i, sq_aggregation_operations_service.C, geo_tagging_analyzer_service.q, feature_switch_service.vZ, exploration_display_name_service.O, localization_service.o, localeProvider_service.z, ExportToExcelProxy, http_service.O, visual_authoring_operations_service.Q, visual_parameter_service.P, visual_authoring_customize_operations_service.Q ]
        }, ExportVisualDataService = function() {
            function ExportVisualDataService(visualAuthoringCore, visualPluginService, visualQueryGenerator, dataProxy, conceptualSchemaProxy, displayNameService, localizationService, localeProviderService, featureSwitchService, exportToExcelProxy, httpService, visualAuthoringOperations, visualAuthoringCustomizeOperations, visualParameterService) {
                this.visualAuthoringCore = visualAuthoringCore, this.visualPluginService = visualPluginService, 
                this.visualQueryGenerator = visualQueryGenerator, this.dataProxy = dataProxy, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.displayNameService = displayNameService, this.localizationService = localizationService, 
                this.localeProviderService = localeProviderService, this.featureSwitchService = featureSwitchService, 
                this.exportToExcelProxy = exportToExcelProxy, this.httpService = httpService, this.visualAuthoringOperations = visualAuthoringOperations, 
                this.visualAuthoringCustomizeOperations = visualAuthoringCustomizeOperations, this.visualParameterService = visualParameterService, 
                debug.fF.assertValue(visualAuthoringCore, "visualAuthoring"), debug.fF.assertValue(visualPluginService, "visualPluginService"), 
                debug.fF.assertValue(visualQueryGenerator, "visualQueryGenerator"), debug.fF.assertValue(dataProxy, "dataProxy"), 
                debug.fF.assertValue(conceptualSchemaProxy, "conceptualSchemaProxy"), debug.fF.assertValue(displayNameService, "displayNameService"), 
                debug.fF.assertValue(localizationService, "localizationService"), debug.fF.assertValue(localeProviderService, "localeProviderService"), 
                debug.fF.assertValue(visualAuthoringOperations, "visualAuthoringOperations");
            }
            return ExportVisualDataService.prototype.exportToCsv = function(visualTitle, visualData, dataSources, visualContainer, additionalFilters, rowsLimit) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var data, dataViewSource, isFirstSegment, transformActions, result, schema, conversionResult, queryGeneratorResult, dataViewTransformActions, resultHandlerDelegate, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertAnyValue(visualTitle, "visualTitle"), debug.fF.assertAnyValue(visualData, "visualData"), 
                            debug.fF.assertValue(dataSources, "dataSources"), debug.fF.assertValue(visualContainer, "visualContainer"), 
                            debug.fF.assertAnyValue(additionalFilters, "additionalFilters"), dataViewSource = (data = visualData && visualData.data) && data.dataViewSource, 
                            data && (isFirstSegment = data.isFirstSegment), transformActions = visualData && visualData.dataTransforms, 
                            null == dataSources || null == transformActions || null == dataViewSource || (0, 
                            sparklinesUtil.e6)(visualContainer) ? [ 3, 2 ] : [ 4, this.exportDataViewSourceToCSV(dataViewSource, transformActions, null != rowsLimit, visualTitle, this.featureSwitchService.featureSwitches, isFirstSegment, rowsLimit) ];

                          case 1:
                            if (null != (result = _a.sent())) return [ 2, Promise.resolve(result) ];
                            _a.label = 2;

                          case 2:
                            return [ 4, this.getConceptualSchema(dataSources) ];

                          case 3:
                            return schema = _a.sent(), [ 4, this.getGeneratedQuery(schema, visualContainer, dataSources, additionalFilters, null == transformActions ? void 0 : transformActions.selects) ];

                          case 4:
                            return (conversionResult = _a.sent()) && conversionResult.result && !conversionResult.result.error ? (this.overrideDataReduction((queryGeneratorResult = conversionResult.result).options.query.command, rowsLimit = null != rowsLimit ? rowsLimit : 1e6, !1), 
                            queryGeneratorResult && queryGeneratorResult.options && queryGeneratorResult.options.query && (queryGeneratorResult.options.query.cacheResponseOnClient = !1), 
                            dataViewTransformActions = queryGeneratorResult.transforms, resultHandlerDelegate = function(dataViewSource) {
                                return _this.exportDataViewSourceToCSV(dataViewSource, dataViewTransformActions, !0, visualTitle, _this.featureSwitchService.featureSwitches, void 0, rowsLimit);
                            }, [ 2, this.queryData(queryGeneratorResult.options, resultHandlerDelegate) ]) : [ 2, Promise.resolve({
                                blob: null,
                                errorDetails: {
                                    errorType: 0
                                }
                            }) ];
                        }
                    });
                });
            }, ExportVisualDataService.prototype.getConceptualSchema = function(dataSources) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _a.trys.push([ 0, 2, , 3 ]), [ 4, this.conceptualSchemaProxy.get(dataSources) ];

                          case 1:
                            return schema = _a.sent(), [ 3, 3 ];

                          case 2:
                            return _a.sent(), [ 2, Promise.reject({
                                blob: null,
                                errorDetails: {
                                    errorType: 3
                                }
                            }) ];

                          case 3:
                            return [ 2, schema ];
                        }
                    });
                });
            }, ExportVisualDataService.prototype.exportToExcel = function(visualTitle, visualData, dataSources, visualContainer, additionalFilters, filtersDescription, exportType, artifactId) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, conversionResult, generatedQuery, dataQuery_1, visualConfig, exportCommand, command, requestOptions_1, batch, executeSemanticQueryRequest, exportToExcelRequest_1, maxRetries_1, _generateExcelWithRetries_, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return debug.fF.assertAnyValue(visualTitle, "visualTitle"), debug.fF.assertValue(dataSources, "dataSources"), 
                            debug.fF.assertValue(visualContainer, "visualContainer"), debug.fF.assertAnyValue(additionalFilters, "additionalFilters"), 
                            debug.fF.assertAnyValue(filtersDescription, "filtersDescription"), debug.fF.assertAnyValue(exportType, "exportType"), 
                            [ 4, this.getConceptualSchema(dataSources) ];

                          case 1:
                            return schema = _b.sent(), 2 !== exportType ? [ 3, 2 ] : (conversionResult = this.getGeneratedQueryMatrixDataLayout(schema, visualContainer, dataSources, additionalFilters), 
                            [ 3, 4 ]);

                          case 2:
                            return [ 4, this.getGeneratedQuery(schema, visualContainer, dataSources, additionalFilters, null === (_a = null == visualData ? void 0 : visualData.dataTransforms) || void 0 === _a ? void 0 : _a.selects) ];

                          case 3:
                            conversionResult = _b.sent(), _b.label = 4;

                          case 4:
                            return conversionResult && conversionResult.result && !conversionResult.result.error ? (dataQuery_1 = (generatedQuery = conversionResult.result).options.query.command, 
                            visualConfig = visualContainer.config.singleVisual, debug.fF.assert(function() {
                                return !_.isEmpty(dataQuery_1.Commands);
                            }, "query command should contains Commands"), debug.fF.assertValue(dataQuery_1.Commands[0].SemanticQueryDataShapeCommand, "The first command must be a SemanticQuery command"), 
                            2 === exportType ? (exportCommand = this.generateExportVisualLayoutDataCommand(schema, dataQuery_1.Commands[0].SemanticQueryDataShapeCommand.Query, visualConfig, generatedQuery.transforms, filtersDescription), 
                            dataQuery_1.Commands.push(exportCommand), this.overrideDataReduction(dataQuery_1, 1e6, this.featureSwitchService.featureSwitches.useWindowWhenExporting)) : (command = this.generateExportDataCommand(schema, dataQuery_1.Commands[0].SemanticQueryDataShapeCommand.Query, filtersDescription, visualConfig, generatedQuery.transforms, conversionResult.selectsWithDisplayName), 
                            dataQuery_1.Commands.push(command), this.clearDataQuerySubtotal(dataQuery_1), 3 === exportType && this.setConnectedExportRowLimit(visualContainer.config.singleVisual.query, dataQuery_1.Commands[0].SemanticQueryDataShapeCommand.Query), 
                            this.overrideDataReduction(dataQuery_1, 1e6, !1)), (requestOptions_1 = this.httpService.powerbiRequestOptions()).responseType = "blob", 
                            requestOptions_1.retryCount = 0, batch = (0, executeSemanticQueryBatcher.xV)([ dataQuery_1 ], (0, 
                            dataSource.kB)((0, dataSource.$$)(dataSources, visualConfig.query && visualConfig.query.defn))), 
                            executeSemanticQueryRequest = (0, executeSemanticQueryProxy_helpers.u5)(batch, this.localeProviderService), 
                            3 === exportType && (0, executeSemanticQueryProxy_helpers.K4)(executeSemanticQueryRequest) ? [ 2, Promise.reject({
                                blob: null,
                                errorDetails: {
                                    errorType: 7
                                }
                            }) ] : (exportToExcelRequest_1 = {
                                exportDataType: exportType,
                                executeSemanticQueryRequest,
                                artifactId
                            }, maxRetries_1 = 1, _generateExcelWithRetries_ = function() {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    var result, errorResult_1, reqId, exportDataResult, _a;
                                    return (0, tslib_es6.__generator)(this, function(_b) {
                                        switch (_b.label) {
                                          case 0:
                                            return _b.trys.push([ 0, 2, , 3 ]), [ 4, this.exportToExcelProxy.exportToExcel(exportToExcelRequest_1, requestOptions_1) ];

                                          case 1:
                                            return result = _b.sent(), [ 3, 3 ];

                                          case 2:
                                            return errorResult_1 = _b.sent(), maxRetries_1 > 0 && 0 === (null == errorResult_1 ? void 0 : errorResult_1.status) && "NetworkConnectionIssue" === (null === (_a = errorResult_1.error) || void 0 === _a ? void 0 : _a.code) ? (maxRetries_1--, 
                                            [ 2, _generateExcelWithRetries_() ]) : [ 2, this.handleExportToExcelErrorResult(errorResult_1) ];

                                          case 3:
                                            return result.headers && (reqId = result.headers("requestId")), 0 === result.data.size ? [ 2, Promise.reject({
                                                blob: null,
                                                requestId: reqId,
                                                errorDetails: {
                                                    errorType: 1
                                                }
                                            }) ] : (exportDataResult = {
                                                blob: result.data,
                                                requestId: reqId,
                                                isPartialResult: !1,
                                                format: 1,
                                                fileName: ExportVisualDataService.getFileName(visualTitle, 1)
                                            }, [ 2, Promise.resolve(exportDataResult) ]);
                                        }
                                    });
                                });
                            }, [ 2, _generateExcelWithRetries_() ])) : [ 2, Promise.reject({
                                blob: null,
                                errorDetails: {
                                    errorType: 0
                                }
                            }) ];
                        }
                    });
                });
            }, ExportVisualDataService.prototype.handleExportToExcelErrorResult = function(errorResult) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var reqId, telemetryErrorDetails, reader, textResult, textErrorResult_1, result, exportDataResult;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            if (errorResult.headers && (reqId = errorResult.headers("requestId")), !(errorResult.data && errorResult.data instanceof Blob && _.startsWith(errorResult.data.type, "application/json"))) return [ 3, 9 ];
                            reader = new FileReader, textResult = void 0, _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 3, , 5 ]), [ 4, this.readAsText(errorResult.data, reader) ];

                          case 2:
                            return textResult = _a.sent(), [ 3, 5 ];

                          case 3:
                            return textErrorResult_1 = _a.sent(), [ 4, this.getDefaultQueryErrorExportDataResult(textErrorResult_1, reqId) ];

                          case 4:
                            return exportDataResult = _a.sent(), [ 2, Promise.reject(exportDataResult) ];

                          case 5:
                            return (result = JSON.parse(textResult)) && result.error && (telemetryErrorDetails = (0, 
                            errorDetailsHelper.GB)(result.error)), telemetryErrorDetails ? [ 2, Promise.reject(this.getTelemetryErrorExportDataResult(telemetryErrorDetails, reqId)) ] : [ 3, 6 ];

                          case 6:
                            return [ 4, this.getDefaultQueryErrorExportDataResult(textResult, reqId) ];

                          case 7:
                            return exportDataResult = _a.sent(), [ 2, Promise.reject(exportDataResult) ];

                          case 8:
                            return [ 3, 12 ];

                          case 9:
                            return errorResult.error || errorResult.data && errorResult.data.error ? (telemetryErrorDetails = (0, 
                            errorDetailsHelper.GB)(errorResult.error ? errorResult.error : errorResult.data.error), 
                            [ 2, Promise.reject(this.getTelemetryErrorExportDataResult(telemetryErrorDetails, reqId, errorResult.status)) ]) : [ 3, 10 ];

                          case 10:
                            return [ 4, this.getDefaultQueryErrorExportDataResult(errorResult.data, reqId) ];

                          case 11:
                            return exportDataResult = _a.sent(), [ 2, Promise.reject(exportDataResult) ];

                          case 12:
                            return [ 2 ];
                        }
                    });
                });
            }, ExportVisualDataService.prototype.getCustomizedVisualArgs = function(hostVisualContainer, additionalFilters) {
                if (debug.fF.assertValue(hostVisualContainer, "hostVisualContainer is undefined"), 
                hostVisualContainer) {
                    if (!this.visualAuthoringCustomizeOperations.requiresCustomizeConvert(hostVisualContainer)) return {
                        customizedVisualContainer: hostVisualContainer,
                        mergedFilters: additionalFilters
                    };
                    var visualName = Utility.b$.generateGuid(), visualConfig = {
                        singleVisual: (0, visualContainer1.d9)(hostVisualContainer.config.singleVisual)
                    }, customizedVisualContainer = this.visualAuthoringOperations.buildVisualContainerFromConfig(visualName, visualConfig, "Default");
                    return customizedVisualContainer.name = hostVisualContainer.name, this.visualAuthoringCustomizeOperations.customizeConvert(customizedVisualContainer), 
                    {
                        customizedVisualContainer,
                        mergedFilters: this.mergeCustomizedFilters(customizedVisualContainer.filters, additionalFilters)
                    };
                }
            }, ExportVisualDataService.prototype.readAsText = function(file, fileReader) {
                if (void 0 !== file) return new Promise(function(resolve, reject) {
                    fileReader.onload = function() {
                        resolve(fileReader.result);
                    }, fileReader.onerror = function() {
                        reject(fileReader.error);
                    }, fileReader.readAsText(file);
                });
            }, ExportVisualDataService.prototype.getDefaultQueryErrorExportDataResult = function(resultData, requestId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var errorMessage, fileReader, result, newErrMsg;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            if (errorMessage = resultData.toString(), !(resultData instanceof Blob)) return [ 3, 5 ];
                            fileReader = new FileReader, result = void 0, _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 3, , 4 ]), [ 4, this.readAsText(resultData, fileReader) ];

                          case 2:
                            return result = _a.sent(), [ 3, 4 ];

                          case 3:
                            return _a.sent(), [ 2, Promise.resolve({
                                blob: null,
                                requestId,
                                errorDetails: {
                                    errorType: 2,
                                    errorMessage,
                                    errorSource: (0, errorDetailsHelper.oG)("System")
                                }
                            }) ];

                          case 4:
                            return errorMessage = result, (newErrMsg = JSON.stringify(result)) && newErrMsg.length > 2 && (errorMessage = newErrMsg), 
                            [ 2, Promise.resolve({
                                blob: null,
                                requestId,
                                errorDetails: {
                                    errorType: 2,
                                    errorMessage,
                                    errorSource: (0, errorDetailsHelper.oG)("System")
                                }
                            }) ];

                          case 5:
                            return "object" == typeof resultData && (newErrMsg = JSON.stringify(resultData)) && newErrMsg.length > 2 && (errorMessage = newErrMsg), 
                            [ 2, Promise.resolve({
                                blob: null,
                                requestId,
                                errorDetails: {
                                    errorType: 2,
                                    errorMessage,
                                    errorSource: (0, errorDetailsHelper.oG)("System")
                                }
                            }) ];
                        }
                    });
                });
            }, ExportVisualDataService.prototype.getTelemetryErrorExportDataResult = function(telemetryErrorDetails, requestId, statusCode) {
                return {
                    blob: null,
                    requestId,
                    errorDetails: {
                        errorType: telemetryErrorDetails.errorCode === errorCodes._h ? 6 : 2,
                        errorCode: telemetryErrorDetails.errorCode,
                        errorSource: telemetryErrorDetails.errorCode === errorCodes._h ? (0, errorDetailsHelper.oG)("User") : telemetryErrorDetails.errorSource,
                        errorMessage: telemetryErrorDetails.errorCode,
                        status: statusCode
                    }
                };
            }, ExportVisualDataService.prototype.mergeCustomizedFilters = function(customizedVisualFilters, additionalFilters) {
                var filterBuilder = new filters_filterBuilder.ME;
                if (additionalFilters && !_.isEmpty(additionalFilters.dataFiltersUnmerged)) for (var _i = 0, _a = additionalFilters.dataFiltersUnmerged; _i < _a.length; _i++) filterBuilder.addVisualFilter(_a[_i]);
                for (var _b = 0, customizedDataFilters_1 = _.isEmpty(customizedVisualFilters) ? [] : _.chain(customizedVisualFilters).filter(function(f) {
                    return f.filter;
                }).map(function(f) {
                    return f.filter;
                }).value(); _b < customizedDataFilters_1.length; _b++) filterBuilder.addVisualFilter({
                    filter: customizedDataFilters_1[_b]
                });
                return filterBuilder.getFilters(!1);
            }, ExportVisualDataService.prototype.resolveQueryParameters = function(schema, dataSources, additionalFilters, visual) {
                return this.visualParameterService.resolve({
                    dataSources,
                    schema,
                    additionalFilters,
                    config: visual.config.singleVisual,
                    visual
                });
            }, ExportVisualDataService.prototype.getGeneratedQuery = function(schema, visualContainer, dataSources, additionalFilters, selects) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var clonedSingleVisualConfig, customizedVisualArgs, selectIndicesWithDisplayName, selectsWithDisplayName, tableExPlugin, visualConversionResult, clonedContract, query, projections, tableExCapabilities, _i, selects_1, select, _loop_1, this_1, _a, selectsWithDisplayName_1, overrideDataViewMappings, explorationDatasources, dataSourceVariables;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return clonedSingleVisualConfig = (0, visualContainer1.d9)(visualContainer.config.singleVisual), 
                            this.visualAuthoringCustomizeOperations.requiresCustomizeConvert(visualContainer) && (customizedVisualArgs = this.getCustomizedVisualArgs(visualContainer, additionalFilters), 
                            clonedSingleVisualConfig = customizedVisualArgs.customizedVisualContainer.config.singleVisual, 
                            additionalFilters = customizedVisualArgs.mergedFilters), clonedSingleVisualConfig = this.replaceSparklineDataWithMeasure(schema, clonedSingleVisualConfig), 
                            selectIndicesWithDisplayName = this.getPercentRoleSelectIndexToDisplayNameMapping(clonedSingleVisualConfig, schema), 
                            this.rewritePercentRoleRefs(clonedSingleVisualConfig, additionalFilters), selectsWithDisplayName = this.mapSelectIndexWithExprs(clonedSingleVisualConfig, selectIndicesWithDisplayName), 
                            this.clearConversionContextWithPercentRole(clonedSingleVisualConfig), this.clearVisualConfigObjects(clonedSingleVisualConfig), 
                            [ 4, this.visualPluginService.ensureBuiltInPlugins() ];

                          case 1:
                            return _b.sent(), tableExPlugin = this.visualPluginService.getPlugin(plugins.L.tableEx.name), 
                            visualContainer.config.singleVisual.visualType === tableExPlugin.name ? [ 3, 3 ] : (visualConversionResult = this.visualAuthoringCore.convert({
                                schema,
                                source: clonedSingleVisualConfig,
                                target: tableExPlugin.name
                            }), (clonedContract = _.clone(visualContainer)).config = _.clone(clonedContract.config), 
                            clonedContract.config.singleVisual = clonedSingleVisualConfig, [ 4, this.resolveQueryParameters(schema, dataSources, additionalFilters, clonedContract) ]);

                          case 2:
                            if (_b.sent(), !visualConversionResult) return [ 2 ];
                            _b.label = 3;

                          case 3:
                            if (projections = (query = clonedSingleVisualConfig.query).projections, tableExCapabilities = this.visualPluginService.capabilities(plugins.L.tableEx.name), 
                            !_.isEmpty(selects)) for (_i = 0, selects_1 = selects; _i < selects_1.length; _i++) select = selects_1[_i], 
                            !_.isEmpty(select.relatedSelects) && select.expr && query.add(select.expr, tableExCapabilities.dataRoles[0].name);
                            for (_loop_1 = function(selectWithDisplayName) {
                                var selectInNewQuery = _.find(query.defn.select(), function(select) {
                                    return (0, sqExprEqualityVisitor.fS)(select.expr, selectWithDisplayName.expr);
                                }), queryProjection = this_1.getQueryProjectionForSelect(selectInNewQuery, projections);
                                queryProjection && (queryProjection.displayName = selectWithDisplayName.name);
                            }, this_1 = this, _a = 0, selectsWithDisplayName_1 = selectsWithDisplayName; _a < selectsWithDisplayName_1.length; _a++) _loop_1(selectsWithDisplayName_1[_a]);
                            return (overrideDataViewMappings = _.cloneDeep(tableExCapabilities.dataViewMappings))[0].table.rows.dataReductionAlgorithm = {
                                top: {
                                    count: 1e6
                                }
                            }, explorationDatasources = (0, exploration_data_reader_data_source_utils.c)(dataSources), 
                            dataSourceVariables = explorationDatasources && explorationDatasources.getDataSourceVariables(), 
                            [ 2, {
                                result: this.visualQueryGenerator.execute({
                                    dataSources,
                                    config: clonedSingleVisualConfig,
                                    schema,
                                    additionalFilters,
                                    dataViewMappingsOverride: overrideDataViewMappings,
                                    dataSourceVariables
                                }),
                                selectsWithDisplayName
                            } ];
                        }
                    });
                });
            }, ExportVisualDataService.prototype.getGeneratedQueryMatrixDataLayout = function(schema, visualContainer, dataSources, additionalFilters) {
                var clonedSingleVisualConfig = (0, visualContainer1.d9)(visualContainer.config.singleVisual);
                clonedSingleVisualConfig = this.replaceSparklineDataWithMeasure(schema, clonedSingleVisualConfig);
                var explorationDatasources = (0, exploration_data_reader_data_source_utils.c)(dataSources), dataSourceVariables = explorationDatasources && explorationDatasources.getDataSourceVariables();
                return {
                    result: this.visualQueryGenerator.execute({
                        dataSources,
                        config: clonedSingleVisualConfig,
                        schema,
                        additionalFilters,
                        dataViewMappingsOverride: void 0,
                        dataSourceVariables
                    }),
                    selectsWithDisplayName: void 0
                };
            }, ExportVisualDataService.prototype.replaceSparklineDataWithMeasure = function(schema, visualConfig) {
                var vc = {
                    name: "vc",
                    config: {
                        singleVisual: visualConfig
                    }
                };
                return (0, sparklinesUtil.e6)(vc) ? ((0, sparklinesUtil.Gy)(schema, vc, this.visualAuthoringOperations), 
                vc.config.singleVisual) : visualConfig;
            }, ExportVisualDataService.prototype.queryData = function(dataProxyExecutionOptions, resultHandler) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var result, exportData;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _a.trys.push([ 0, 2, , 3 ]), [ 4, this.dataProxy.execute(dataProxyExecutionOptions) ];

                          case 1:
                            return result = _a.sent(), [ 3, 3 ];

                          case 2:
                            return _a.sent(), [ 2, Promise.reject({
                                blob: null,
                                errorDetails: {
                                    errorType: 2
                                }
                            }) ];

                          case 3:
                            return [ 4, resultHandler(result.dataViewSource) ];

                          case 4:
                            return [ 2, null != (exportData = _a.sent()) ? Promise.resolve(exportData) : Promise.reject({
                                blob: null,
                                errorDetails: {
                                    errorType: 1
                                }
                            }) ];
                        }
                    });
                });
            }, ExportVisualDataService.prototype.exportDataViewSourceToCSV = function(dataViewSource, transformActions, allowPartialResult, visualTitle, featureSwitches, isFirstSegment, rowsLimit) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataReaderTransform, prototypeDataView, dataViewTable, isPartialResult, capabilities, dataViews;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return debug.fF.assertValue(dataViewSource, "dataViewSource"), debug.fF.assertValue(transformActions, "transformActions"), 
                            (dataReaderTransform = ExportVisualDataService.readDataViewSource(dataViewSource, featureSwitches)) && (dataViewTable = (prototypeDataView = dataReaderTransform.dataView) && prototypeDataView.table) ? _.filter(dataViewTable.columns, function(column) {
                                return null != column.index && !_.find(dataViewTable.columns, function(otherColumn) {
                                    return otherColumn.formatSource && otherColumn.formatSource.formatString === column;
                                });
                            }).length !== transformActions.selects.length || (isPartialResult = ExportVisualDataService.isPartialResult(dataReaderTransform, isFirstSegment)) && !allowPartialResult ? [ 2 ] : [ 4, this.visualPluginService.ensureBuiltInPlugins() ] : [ 2 ];

                          case 1:
                            return _a.sent(), capabilities = this.visualPluginService.capabilities(plugins.L.table.name), 
                            dataViews = (0, dataViewTransform.nn)({
                                transforms: transformActions,
                                dataRoles: capabilities.dataRoles,
                                objectDescriptors: capabilities.objects,
                                prototype: prototypeDataView,
                                colorAllocatorFactory: (0, colorAllocatorFactory.V)(),
                                dataViewMappings: capabilities.dataViewMappings,
                                visualStyle: (0, visualStyles.Ue)(),
                                featureSwitches: this.featureSwitchService.featureSwitches
                            }).dataViews, _.isEmpty(dataViews) || null != rowsLimit && void 0 !== isFirstSegment && ExportVisualDataService.isRowsBelowLimit(dataViews[0], rowsLimit) ? [ 2 ] : isPartialResult || null == rowsLimit || !(isPartialResult = ExportVisualDataService.isRowsAboveLimit(dataViews[0], rowsLimit)) || allowPartialResult ? [ 2, {
                                isPartialResult,
                                blob: fromDataView(dataViews[0], dataViewObjectProperties.e0.formatString, rowsLimit),
                                format: 0,
                                fileName: ExportVisualDataService.getFileName(visualTitle, 0)
                            } ] : [ 2 ];
                        }
                    });
                });
            }, ExportVisualDataService.isRowsAboveLimit = function(dataView, rowsLimit) {
                var tableView = dataView.table;
                return !!tableView && tableView.rows.length > rowsLimit;
            }, ExportVisualDataService.isRowsBelowLimit = function(dataView, rowsLimit) {
                var tableView = dataView.table;
                return !!tableView && tableView.rows.length < rowsLimit;
            }, ExportVisualDataService.readDataViewSource = function(dataViewSource, featureSwitches) {
                var dataObject;
                try {
                    dataObject = (0, dsrReader.ij)(31, dataViewSource.data, (0, featureSwitchUtils.u)(featureSwitches));
                } catch (e) {
                    return;
                }
                return dataObject;
            }, ExportVisualDataService.isPartialResult = function(dataReaderTransformResult, isFirstSegment) {
                if (!dataReaderTransformResult) return !1;
                var hasDsrLimitsWarning = _.some(dataReaderTransformResult.warnings, function(warning) {
                    return warning instanceof dsrLimitsWarning.x;
                });
                return !!dataReaderTransformResult.restartToken || hasDsrLimitsWarning || void 0 !== isFirstSegment;
            }, ExportVisualDataService.getFileName = function(visualTitle, format) {
                var fileName = "data";
                if (!_.isEmpty(visualTitle)) {
                    var normalizedVisualTitleName = (0, Utility.k4)(visualTitle);
                    _.isEmpty(normalizedVisualTitleName) || (fileName = normalizedVisualTitleName);
                }
                switch (format) {
                  case 0:
                    return fileName + ".csv";

                  case 1:
                    return fileName + ".xlsx";

                  default:
                    debug.fF.assertFail("Unknown format type");
                }
            }, ExportVisualDataService.prototype.generateExportDataCommand = function(schema, query, filtersDescription, visualConfig, transformActions, selectsWithDisplayName) {
                var _this = this, semanticQuery = semanticQuerySerializer.ib.deserializeQuery(query), displayOptions = {
                    includeVariationSource: !0,
                    includeDefaultAggregate: !0,
                    includeHierarchyName: !0
                }, capabilities = this.visualPluginService.capabilities(visualConfig.visualType), selectsNames = _.map(semanticQuery.select(), function(sel) {
                    var selectWithDisplayName = _.find(selectsWithDisplayName, function(select) {
                        return (0, sqExprEqualityVisitor.fS)(sel.expr, select.expr);
                    });
                    return {
                        queryName: sel.name,
                        displayName: selectWithDisplayName ? selectWithDisplayName.name : _this.displayNameService.getDisplayName(sel.expr, schema, capabilities, sel.name, visualConfig.columnProperties, displayOptions),
                        qualifiedDisplayName: selectWithDisplayName ? selectWithDisplayName.name : _this.displayNameService.getQualifiedDisplayName(sel.expr, schema, capabilities, displayOptions)
                    };
                });
                return ExportVisualDataService.ensureUniqueName(selectsNames, filtersDescription), 
                {
                    ExportDataCommand: {
                        Columns: _.map(selectsNames, function(sel) {
                            return {
                                QueryName: sel.queryName,
                                Name: sel.useQualified ? sel.qualifiedDisplayName : sel.displayName
                            };
                        }),
                        Ordering: this.getTableOrderingFromTransforms(transformActions) || this.getDefaultTableOrdering(semanticQuery.select().length),
                        FiltersDescription: this.generateFiltersDescriptionString(filtersDescription)
                    }
                };
            }, ExportVisualDataService.prototype.generateExportVisualLayoutDataCommand = function(schema, query, visualConfig, transformActions, filtersDescription) {
                var _this = this, semanticQuery = semanticQuerySerializer.ib.deserializeQuery(query), displayOptions = {
                    includeVariationSource: !0,
                    includeDefaultAggregate: !1,
                    includeHierarchyName: !0
                }, capabilities = this.visualPluginService.capabilities(visualConfig.visualType);
                return {
                    ExportDataCommand: {
                        Columns: _.map(semanticQuery.select(), function(select) {
                            var displayName = _this.displayNameService.getDisplayName(select.expr, schema, capabilities, select.name, visualConfig.columnProperties, displayOptions);
                            return {
                                QueryName: select.name,
                                Name: displayName
                            };
                        }),
                        Ordering: this.getTableOrderingFromTransforms(transformActions) || [],
                        FiltersDescription: this.generateFiltersDescriptionString(filtersDescription)
                    }
                };
            }, ExportVisualDataService.prototype.getTableOrderingFromTransforms = function(transformActions) {
                if (transformActions.roles && transformActions.roles.ordering) return transformActions.roles.ordering[query_projection_builder_core_utils.xP.ValuesRoleName];
            }, ExportVisualDataService.prototype.getDefaultTableOrdering = function(selectsCount) {
                return _.range(selectsCount);
            }, ExportVisualDataService.ensureUniqueName = function(selectsNames, filtersDescription) {
                var qualifiedNameByDisplayName = {}, ambiguousDisplayName = {};
                debug.fF.assertValue(selectsNames, "selectsNames"), debug.fF.assertValue(filtersDescription, "filtersDescription");
                for (var selectsAndFiltersWithDisplayName = [], _i = 0, selectsAndFiltersNames_1 = selectsNames.concat(filtersDescription.filtersNamesAndRestatements || []); _i < selectsAndFiltersNames_1.length; _i++) if ((item = selectsAndFiltersNames_1[_i]).displayName) {
                    selectsAndFiltersWithDisplayName.push(item);
                    var displayName = item.displayName.toLowerCase(), qualifiedDisplayName = item.qualifiedDisplayName.toLowerCase();
                    displayName in qualifiedNameByDisplayName && qualifiedNameByDisplayName[displayName] !== qualifiedDisplayName && (ambiguousDisplayName[displayName] = !0), 
                    qualifiedNameByDisplayName[displayName] = qualifiedDisplayName;
                } else item.useQualified = !0;
                for (var _a = 0, selectsAndFiltersWithDisplayName_1 = selectsAndFiltersWithDisplayName; _a < selectsAndFiltersWithDisplayName_1.length; _a++) {
                    var item;
                    (item = selectsAndFiltersWithDisplayName_1[_a]).useQualified = ambiguousDisplayName[item.displayName.toLowerCase()];
                }
            }, ExportVisualDataService.prototype.generateFiltersDescriptionString = function(filtersDescription) {
                if (null == filtersDescription.filtersNamesAndRestatements) return "";
                if (0 === filtersDescription.filtersNamesAndRestatements.length) return this.localizationService.get("ExportData_NoAppliedFiltersText");
                for (var descriptionString = "", _i = 0, _a = filtersDescription.filtersNamesAndRestatements; _i < _a.length; _i++) {
                    var filter = _a[_i];
                    descriptionString = descriptionString.concat(this.localizationService.format("ExportData_SingleFilterText", [ "\n", filter.useQualified ? filter.qualifiedDisplayName : filter.displayName, filter.restatement ]));
                }
                return this.localizationService.format("ExportData_AppliedFiltersText", [ descriptionString ]);
            }, ExportVisualDataService.prototype.overrideDataReduction = function(dataQuery, rowsLimit, useWindowsForPrimary, columnsLimit) {
                columnsLimit = columnsLimit || 100, dataQuery.Commands[0].SemanticQueryDataShapeCommand.Binding.DataReduction = useWindowsForPrimary ? {
                    Primary: (0, dataShapeBindingDataReduction.P)({
                        window: {
                            count: rowsLimit
                        }
                    }, void 0),
                    Secondary: (0, dataShapeBindingDataReduction.P)({
                        top: {
                            count: columnsLimit
                        }
                    }, void 0)
                } : {
                    Primary: (0, dataShapeBindingDataReduction.P)({
                        top: {
                            count: rowsLimit
                        }
                    }, void 0),
                    Secondary: (0, dataShapeBindingDataReduction.P)({
                        top: {
                            count: columnsLimit
                        }
                    }, void 0)
                };
            }, ExportVisualDataService.prototype.clearDataQuerySubtotal = function(dataQuery) {
                for (var _i = 0, _a = dataQuery.Commands[0].SemanticQueryDataShapeCommand.Binding.Primary.Groupings; _i < _a.length; _i++) {
                    var grouping = _a[_i];
                    null != grouping.Subtotal && (grouping.Subtotal = 0);
                }
            }, ExportVisualDataService.prototype.clearVisualConfigObjects = function(visualConfig) {
                visualConfig.objects = void 0, visualConfig.vcObjects = void 0;
            }, ExportVisualDataService.prototype.getPercentRoleSelectIndexToDisplayNameMapping = function(visualConfig, schema) {
                for (var capabilities = this.visualPluginService.capabilities(visualConfig.visualType), selects = visualConfig.query.defn.select(), selectIndicesWithDisplayName = [], i = 0; i < selects.length; i++) {
                    var select = selects[i];
                    if ((0, fieldExprPatternToSQExprConverter.fv)(select.expr)) {
                        var displayName = this.displayNameService.getDisplayName(select.expr, schema, capabilities, select.name, visualConfig.columnProperties);
                        selectIndicesWithDisplayName.push({
                            selectIndex: i,
                            displayName
                        });
                    }
                }
                return selectIndicesWithDisplayName;
            }, ExportVisualDataService.prototype.rewritePercentRoleRefs = function(visualConfig, additionalFilters) {
                var query = visualConfig.query, selects = query.defn.select(), rewriter = new SQRoleRefToMappingColumnRewriter(selects, query.projections);
                query.defn = query.defn.rewrite(rewriter), additionalFilters && additionalFilters.dataFilter && (additionalFilters.dataFilter = additionalFilters.dataFilter.rewrite(rewriter));
            }, ExportVisualDataService.prototype.mapSelectIndexWithExprs = function(visualConfig, indexToDisplayNameMapping) {
                for (var selects = visualConfig.query.defn.select(), selectsWithDisplayName = [], _i = 0, indexToDisplayNameMapping_1 = indexToDisplayNameMapping; _i < indexToDisplayNameMapping_1.length; _i++) {
                    var selectIndexWithDisplayName = indexToDisplayNameMapping_1[_i];
                    selectsWithDisplayName.push({
                        expr: selects[selectIndexWithDisplayName.selectIndex].expr,
                        name: selectIndexWithDisplayName.displayName
                    });
                }
                return selectsWithDisplayName;
            }, ExportVisualDataService.prototype.clearConversionContextWithPercentRole = function(visualConfig) {
                if (visualConfig.conversionSourceContext && visualConfig.conversionSourceContext.query) for (var _i = 0, selects_2 = visualConfig.conversionSourceContext.query.defn.select(); _i < selects_2.length; _i++) if ((0, 
                fieldExprPatternToSQExprConverter.fv)(selects_2[_i].expr)) {
                    visualConfig.conversionSourceContext = void 0;
                    break;
                }
            }, ExportVisualDataService.prototype.getQueryProjectionForSelect = function(select, projections) {
                for (var roleName in projections) {
                    var projectionSet = projections[roleName].all(), queryProjection = _.find(projectionSet, function(projection) {
                        return projection.queryRef === select.name;
                    });
                    if (queryProjection) return queryProjection;
                }
            }, ExportVisualDataService.prototype.setConnectedExportRowLimit = function(visualQuery, query) {
                visualQuery && !this.checkQueryForAllMeasures(visualQuery) && (null == query.Top || query.Top > 5e5) && (query.Top = 5e5);
            }, ExportVisualDataService.prototype.checkQueryForAllMeasures = function(visualQuery) {
                return _.every(visualQuery.defn.select(), function(s) {
                    return (0, isMeasure.k)(s.expr);
                });
            }, ExportVisualDataService;
        }(), SQRoleRefToMappingColumnRewriter = function(_super) {
            function SQRoleRefToMappingColumnRewriter(selects, projections) {
                var _this = _super.call(this) || this;
                return _this.selects = selects, _this.projections = projections, _this;
            }
            return (0, tslib_es6.__extends)(SQRoleRefToMappingColumnRewriter, _super), SQRoleRefToMappingColumnRewriter.prototype.visitScopedEval = function(expr) {
                for (var _this = this, exprs = [], hasRoleRefs = !1, _i = 0, _a = expr.scope; _i < _a.length; _i++) {
                    var scopeExpr = _a[_i];
                    if ((0, sqExprStaticMembers.yL)(scopeExpr)) {
                        hasRoleRefs = !0;
                        var queryProjections = this.projections[scopeExpr.role];
                        if (queryProjections) {
                            var selectRefs = queryProjections.all();
                            exprs.push.apply(exprs, _.map(selectRefs, function(selectRef) {
                                return _this.selects.withName(selectRef.queryRef).expr;
                            }));
                        }
                    } else exprs.push(scopeExpr);
                }
                return hasRoleRefs ? new sqExpr.kC(expr.expression, exprs) : expr;
            }, SQRoleRefToMappingColumnRewriter;
        }(sqExprRewriter.b), lazy_load_routes = __webpack_require__(43626), FieldWellBucketServiceLazyProvider = {
            provide: lazy_load_routes.DS,
            useFactory: function(conceptualSchemaProxy, dataSources, eventBridge, featureSwitchService, groupAuthoring, promiseFactory, selection, telemetryService, visualAuthoring) {
                return new FieldWellBucketService(conceptualSchemaProxy, dataSources, eventBridge, featureSwitchService, groupAuthoring, selection, promiseFactory, telemetryService, visualAuthoring);
            },
            deps: [ conceptual_schema_proxy_service.i, data_sources_service.D, event_bridge_service.J, feature_switch_service.vZ, group_authoring_service.RD, promiseFactory.t, selection_service.z, Telemetry.y0, visual_authoring_service.$8 ]
        }, FieldWellBucketService = function() {
            function FieldWellBucketService(conceptualSchemaProxy, dataSources, eventBridge, featureSwitchService, groupAuthoring, selection, promiseFactory, telemetryService, visualAuthoring) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.eventBridge = eventBridge, this.featureSwitchService = featureSwitchService, 
                this.groupAuthoring = groupAuthoring, this.selection = selection, this.promiseFactory = promiseFactory, 
                this.telemetryService = telemetryService, this.visualAuthoring = visualAuthoring;
            }
            return FieldWellBucketService.prototype.createFieldWellBucketCore = function() {
                return new FieldWellBucketCore({
                    conceptualSchemaProxy: this.conceptualSchemaProxy,
                    dataSources: this.dataSources,
                    eventBridge: this.eventBridge,
                    featureSwitchService: this.featureSwitchService,
                    groupAuthoring: this.groupAuthoring,
                    promiseFactory: this.promiseFactory,
                    selection: this.selection,
                    telemetryService: this.telemetryService,
                    visualAuthoring: this.visualAuthoring
                });
            }, FieldWellBucketService.\u0275fac = function(t) {
                return new (t || FieldWellBucketService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](group_authoring_service.RD), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](promiseFactory.t), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_authoring_service.$8));
            }, FieldWellBucketService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldWellBucketService,
                factory: FieldWellBucketService.\u0275fac
            }), FieldWellBucketService;
        }(), FieldWellFieldServiceLazyProvider = {
            provide: lazy_load_routes.E6,
            useFactory: function(conceptualSchemaProxy, dataSources, eventBridge, explorationNavigation, featureSwitchService, groupAuthoring, lazyScoped, localizationService, modelChangeHandler, promiseFactory, screenReaderService, selection, showValueAsService, sparklinesService, themeService, telemetryService, visualAuthoring, visualCalcEagerService, visualPlugin, visibilityService, contextActivityService) {
                return new FieldWellFieldService(conceptualSchemaProxy, dataSources, eventBridge, explorationNavigation, featureSwitchService, groupAuthoring, lazyScoped, localizationService, modelChangeHandler, promiseFactory, screenReaderService, selection, showValueAsService, sparklinesService, themeService, telemetryService, visualAuthoring, visualCalcEagerService, visualPlugin, visibilityService, contextActivityService);
            },
            deps: [ conceptual_schema_proxy_service.i, data_sources_service.D, event_bridge_service.J, exploration_navigation_service.z, feature_switch_service.vZ, group_authoring_service.RD, lazy_scoped_provider.H, localization_service.o, model_change_handler_service.x, promiseFactory.t, screen_reader_service.g, selection_service.z, show_value_as_service.P, sparklines_service.s, theme_service.f, Telemetry.y0, visual_authoring_service.$8, visual_calc_eager_service.w, visual_plugin_service.D, visibility_service.w, context_activity_service.r ]
        }, FieldWellFieldService = function() {
            function FieldWellFieldService(conceptualSchemaProxy, dataSources, eventBridge, explorationNavigation, featureSwitchService, groupAuthoring, lazyScoped, localizationService, modelChangeHandler, promiseFactory, screenReaderService, selection, showValueAsService, sparklinesService, themeService, telemetryService, visualAuthoring, visualCalcEagerService, visualPlugin, visibilityService, contextActivityService) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.eventBridge = eventBridge, this.explorationNavigation = explorationNavigation, 
                this.featureSwitchService = featureSwitchService, this.groupAuthoring = groupAuthoring, 
                this.lazyScoped = lazyScoped, this.localizationService = localizationService, this.modelChangeHandler = modelChangeHandler, 
                this.promiseFactory = promiseFactory, this.screenReaderService = screenReaderService, 
                this.selection = selection, this.showValueAsService = showValueAsService, this.sparklinesService = sparklinesService, 
                this.themeService = themeService, this.telemetryService = telemetryService, this.visualAuthoring = visualAuthoring, 
                this.visualCalcEagerService = visualCalcEagerService, this.visualPlugin = visualPlugin, 
                this.visibilityService = visibilityService, this.contextActivityService = contextActivityService;
            }
            return FieldWellFieldService.prototype.createFieldWellFieldCore = function(onContextMenuActionFailed, onLabelInEditingModeChanged) {
                return new FieldWellFieldCore({
                    conceptualSchemaProxy: this.conceptualSchemaProxy,
                    dataSources: this.dataSources,
                    eventBridge: this.eventBridge,
                    explorationNavigation: this.explorationNavigation,
                    featureSwitchService: this.featureSwitchService,
                    groupAuthoring: this.groupAuthoring,
                    lazyScoped: this.lazyScoped,
                    localizationService: this.localizationService,
                    modelChangeHandler: this.modelChangeHandler,
                    promiseFactory: this.promiseFactory,
                    screenReaderService: this.screenReaderService,
                    selection: this.selection,
                    showValueAsService: this.showValueAsService,
                    sparklinesService: this.sparklinesService,
                    telemetryService: this.telemetryService,
                    themeService: this.themeService,
                    visualAuthoring: this.visualAuthoring,
                    visualPlugin: this.visualPlugin,
                    visibilityService: this.visibilityService,
                    visualCalcEagerService: this.visualCalcEagerService,
                    contextActivityService: this.contextActivityService
                }, onContextMenuActionFailed, onLabelInEditingModeChanged);
            }, FieldWellFieldService.\u0275fac = function(t) {
                return new (t || FieldWellFieldService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](group_authoring_service.RD), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](model_change_handler_service.x), core["\u0275\u0275inject"](promiseFactory.t), core["\u0275\u0275inject"](screen_reader_service.g), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](show_value_as_service.P), core["\u0275\u0275inject"](sparklines_service.s), core["\u0275\u0275inject"](theme_service.f), core["\u0275\u0275inject"](Telemetry.y0), core["\u0275\u0275inject"](visual_authoring_service.$8), core["\u0275\u0275inject"](visual_calc_eager_service.w), core["\u0275\u0275inject"](visual_plugin_service.D), core["\u0275\u0275inject"](visibility_service.w), core["\u0275\u0275inject"](context_activity_service.r));
            }, FieldWellFieldService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldWellFieldService,
                factory: FieldWellFieldService.\u0275fac
            }), FieldWellFieldService;
        }(), FieldWellModernServiceLazyProvider = {
            provide: "fieldWellModernService",
            useFactory: function(conceptualSchemaProxy, dataSources, eventBridge, explorationDisplayNameService, explorationNavigation, featureSwitchService, groupingDesignStateService, lazyScopedProvider, localizationService, runningVisuals, selection, showValueAsService, visibility, visualCalcEagerService, visualPlugin) {
                return new FieldWellModernService(conceptualSchemaProxy, dataSources, eventBridge, explorationDisplayNameService, explorationNavigation, featureSwitchService, groupingDesignStateService, lazyScopedProvider, localizationService, runningVisuals, selection, showValueAsService, visibility, visualCalcEagerService, visualPlugin);
            },
            deps: [ conceptual_schema_proxy_service.i, data_sources_service.D, event_bridge_service.J, exploration_display_name_service.O, exploration_navigation_service.z, feature_switch_service.vZ, grouping_design_state_service.AA, lazy_scoped_provider.H, localization_service.o, running_visual_service.s, selection_service.z, show_value_as_service.P, visibility_service.w, visual_calc_eager_service.w, visual_plugin_service.D ]
        }, FieldWellModernService = function() {
            function FieldWellModernService(conceptualSchemaProxy, dataSources, eventBridge, explorationDisplayNameService, explorationNavigation, featureSwitchService, groupingDesignStateService, lazyScopedProvider, localizationService, runningVisuals, selection, showValueAsService, visibility, visualCalcEagerService, visualPlugin) {
                this.conceptualSchemaProxy = conceptualSchemaProxy, this.dataSources = dataSources, 
                this.eventBridge = eventBridge, this.explorationDisplayNameService = explorationDisplayNameService, 
                this.explorationNavigation = explorationNavigation, this.featureSwitchService = featureSwitchService, 
                this.groupingDesignStateService = groupingDesignStateService, this.lazyScopedProvider = lazyScopedProvider, 
                this.localizationService = localizationService, this.runningVisuals = runningVisuals, 
                this.selection = selection, this.showValueAsService = showValueAsService, this.visibility = visibility, 
                this.visualCalcEagerService = visualCalcEagerService, this.visualPlugin = visualPlugin;
            }
            return FieldWellModernService.prototype.createFieldWellCore = function($element, disableHierarchyLevelGrouping, onViewModelChange) {
                return new FieldWellCore({
                    $element,
                    conceptualSchemaProxy: this.conceptualSchemaProxy,
                    dataSources: this.dataSources,
                    eventBridge: this.eventBridge,
                    explorationDisplayNameService: this.explorationDisplayNameService,
                    explorationNavigation: this.explorationNavigation,
                    featureSwitchService: this.featureSwitchService,
                    groupingDesignStateService: this.groupingDesignStateService,
                    lazyScopedProvider: this.lazyScopedProvider,
                    localizationService: this.localizationService,
                    runningVisuals: this.runningVisuals,
                    selection: this.selection,
                    showValueAsService: this.showValueAsService,
                    visibility: this.visibility,
                    visualCalcEagerService: this.visualCalcEagerService,
                    visualPlugin: this.visualPlugin
                }, disableHierarchyLevelGrouping, onViewModelChange);
            }, FieldWellModernService.\u0275fac = function(t) {
                return new (t || FieldWellModernService)(core["\u0275\u0275inject"](conceptual_schema_proxy_service.i), core["\u0275\u0275inject"](data_sources_service.D), core["\u0275\u0275inject"](event_bridge_service.J), core["\u0275\u0275inject"](exploration_display_name_service.O), core["\u0275\u0275inject"](exploration_navigation_service.z), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](grouping_design_state_service.AA), core["\u0275\u0275inject"](lazy_scoped_provider.H), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](running_visual_service.s), core["\u0275\u0275inject"](selection_service.z), core["\u0275\u0275inject"](show_value_as_service.P), core["\u0275\u0275inject"](visibility_service.w), core["\u0275\u0275inject"](visual_calc_eager_service.w), core["\u0275\u0275inject"](visual_plugin_service.D));
            }, FieldWellModernService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldWellModernService,
                factory: FieldWellModernService.\u0275fac
            }), FieldWellModernService;
        }(), TabOrderServiceLazyProvider = {
            provide: "tabOrderService",
            useFactory: function(canvasListOrderNormalizeService, formFactor, legacyLazyScoped, undoRedoService, visualAuthoringOperationsService) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var canvasListOrderingService;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, legacyLazyScoped.get("canvasListOrderingService") ];

                          case 1:
                            return canvasListOrderingService = _a.sent(), [ 2, new TabOrderService(canvasListOrderingService, canvasListOrderNormalizeService, formFactor, undoRedoService, visualAuthoringOperationsService) ];
                        }
                    });
                });
            },
            deps: [ canvas_list_order_normalize_service.F, form_factor_provider_service.F, lazy_scoped_provider.H, undo_redo_service.z, visual_authoring_operations_service.Q ]
        }, TabOrderService = function() {
            function TabOrderService(canvasListOrderingService, canvasListOrderNormalizeService, formFactor, undoRedoService, visualAuthoringOperations) {
                this.canvasListOrderingService = canvasListOrderingService, this.canvasListOrderNormalizeService = canvasListOrderNormalizeService, 
                this.formFactor = formFactor, this.undoRedoService = undoRedoService, this.visualAuthoringOperations = visualAuthoringOperations, 
                this.tabOrderPropertyName = "tabOrder";
            }
            return TabOrderService.prototype.changeSection = function(containerList, containersToMove, isUnskipped, suppressUndoRedo, reverse) {
                this.canvasListOrderingService.insertAtMinMagnitude(containerList, containersToMove, isUnskipped, this.tabOrderPropertyName, suppressUndoRedo, reverse);
            }, TabOrderService.prototype.bringForward = function(containerList, containersToMove, isUnskipped, suppressUndoRedo) {
                this.canvasListOrderingService.bringForward(containerList, containersToMove, isUnskipped, this.tabOrderPropertyName, suppressUndoRedo);
            }, TabOrderService.prototype.sendBackward = function(containerList, containersToMove, isUnskipped, suppressUndoRedo) {
                this.canvasListOrderingService.sendBackward(containerList, containersToMove, isUnskipped, this.tabOrderPropertyName, suppressUndoRedo);
            }, TabOrderService.prototype.moveAfter = function(containerList, aftervisualContainer, containersToMove, isUnskipped) {
                this.canvasListOrderingService.moveAfter(containerList, aftervisualContainer, containersToMove, isUnskipped, this.tabOrderPropertyName);
            }, TabOrderService.prototype.moveAfterIndex = function(containerList, afterContainerIndex, containersToMove, isUnskipped) {
                this.canvasListOrderingService.moveAfterIndex(containerList, afterContainerIndex, containersToMove, isUnskipped, this.tabOrderPropertyName);
            }, TabOrderService.prototype.moveBefore = function(containerList, beforeVisualContainer, containersToMove, isUnskipped) {
                this.canvasListOrderingService.moveBefore(containerList, beforeVisualContainer, containersToMove, isUnskipped, this.tabOrderPropertyName);
            }, TabOrderService.prototype.moveBeforeIndex = function(containerList, beforeContainerIndex, containersToMove, isUnskipped) {
                this.canvasListOrderingService.moveBeforeIndex(containerList, beforeContainerIndex, containersToMove, isUnskipped, this.tabOrderPropertyName);
            }, TabOrderService.prototype.shouldNormalize = function(containerList, isUnskipped) {
                return this.canvasListOrderingService.shouldNormalize(containerList, isUnskipped, this.tabOrderPropertyName);
            }, TabOrderService.prototype.normalize = function(containerList, isUnskipped) {
                this.canvasListOrderingService.normalize(containerList, isUnskipped, this.tabOrderPropertyName);
            }, TabOrderService.prototype.normalizeHierarchy = function(canvasItemsContract) {
                var _this = this, _a = _.partition(canvasItemsContract, function(canvasItem) {
                    var tabOrder = (0, canvasVisualsUtility.bt)(canvasItem, 0).tabOrder;
                    return void 0 === tabOrder || tabOrder >= 0;
                }), negativeContracts = _a[1], positiveContainerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(_a[0], function(item) {
                    return _this.canvasListOrderingService.getListOrderPropertyFunction(item, "tabOrder");
                }), negativeContainerListOrders = this.canvasListOrderNormalizeService.getContainerListOrders(negativeContracts, function(item) {
                    return _this.canvasListOrderingService.getListOrderPropertyFunction(item, "tabOrder");
                }), newPositiveContainerListOrders = this.canvasListOrderNormalizeService.normalizeListOrder(positiveContainerListOrders, !0), newNegativeContainerListOrders = this.canvasListOrderNormalizeService.normalizeListOrder(negativeContainerListOrders, !1), newContainerListOrders = (0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, newPositiveContainerListOrders), newNegativeContainerListOrders);
                this.visualAuthoringOperations.updateContainerListOrders(canvasItemsContract, newContainerListOrders, "tabOrder");
                for (var _i = 0, canvasItemsContract_1 = canvasItemsContract; _i < canvasItemsContract_1.length; _i++) {
                    var item = canvasItemsContract_1[_i];
                    (0, visualContainerGroup2.q4)(item) && this.normalizeHierarchy(item.children);
                }
            }, TabOrderService.prototype.sendTabOrderCommandsByLevel = function(selectionService, canvasItemContainers, tabOrderMode) {
                var _this = this;
                this.undoRedoService.register("Update Visual Containers for tabOrder", function() {
                    _this.sendTabOrderCommandsByLevelImpl(selectionService, canvasItemContainers, tabOrderMode);
                });
            }, TabOrderService.prototype.sendTabOrderCommandsByLevelImpl = function(selectionService, canvasItemContainers, tabOrderMode) {
                var groupByParentGroup = (0, canvasVisualsUtility.Dg)(selectionService);
                for (var name_1 in groupByParentGroup) {
                    var selectedItems = groupByParentGroup[name_1], itemSiblings = (0, itemGrouping.E8)(selectedItems[0], canvasItemContainers);
                    switch (tabOrderMode) {
                      case 0:
                        this.bringForwardHierarchy(itemSiblings, selectedItems, !0, !0);
                        break;

                      case 1:
                        this.sendBackwardHierarchy(itemSiblings, selectedItems, !0, !0);
                    }
                }
            }, TabOrderService.prototype.bringForwardHierarchy = function(containerList, containersToMove, isUnskipped, suppressUndoRedo) {
                var positiveTabOrderContainerList = (0, canvasVisualsUtility.cV)(containerList, !0);
                this.canvasListOrderingService.bringForward(positiveTabOrderContainerList, containersToMove, isUnskipped, this.tabOrderPropertyName, suppressUndoRedo);
            }, TabOrderService.prototype.sendBackwardHierarchy = function(containerList, containersToMove, isUnskipped, suppressUndoRedo) {
                var positiveTabOrderContainerList = (0, canvasVisualsUtility.cV)(containerList, !0);
                this.canvasListOrderingService.sendBackward(positiveTabOrderContainerList, containersToMove, isUnskipped, this.tabOrderPropertyName, suppressUndoRedo);
            }, TabOrderService.prototype.orderByPosition = function(canvasItemsContracts) {
                var _this = this;
                this.undoRedoService.register("Update Visual Containers for tabOrder", function() {
                    _this.orderByPositionImpl(canvasItemsContracts);
                });
            }, TabOrderService.prototype.orderByPositionImpl = function(canvasItemsContracts) {
                for (var _this = this, sorted = (0, canvasVisualsUtility.cV)(canvasItemsContracts, !0).map(function(contract) {
                    return (0, canvasVisualsUtility.bt)(contract, _this.formFactor.getCurrentLayout());
                }).sort(function(a, b) {
                    var xDiff = Math.round(b.x) - Math.round(a.x), yDiff = Math.round(b.y) - Math.round(a.y);
                    return 0 === Math.abs(yDiff) ? xDiff : yDiff;
                }), i = 0; i < sorted.length; i++) {
                    sorted[i].tabOrder = i * canvasListOrderNormalizeService.R$;
                    var item = canvasItemsContracts[i];
                    (0, visualContainerGroup2.q4)(item) && this.orderByPositionImpl(item.children);
                }
            }, TabOrderService;
        }(), ZIndexServiceLazyProvider = {
            provide: "zIndexService",
            useFactory: function(legacyLazyScoped) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var canvasListOrderingService;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, legacyLazyScoped.get("canvasListOrderingService") ];

                          case 1:
                            return canvasListOrderingService = _a.sent(), [ 2, new ZIndexService(canvasListOrderingService) ];
                        }
                    });
                });
            },
            deps: [ lazy_scoped_provider.H ]
        }, ZIndexService = function() {
            function ZIndexService(canvasListOrderingService) {
                this.canvasListOrderingService = canvasListOrderingService, this.zIndexPropertyName = "z";
            }
            return ZIndexService.prototype.bringForward = function(canvasItemContainers, containersToMove, suppressUndoRedo) {
                this.canvasListOrderingService.bringForward(canvasItemContainers, containersToMove, !0, this.zIndexPropertyName, suppressUndoRedo);
            }, ZIndexService.prototype.bringToFront = function(canvasItemContainers, containersToMove, suppressUndoRedo) {
                this.canvasListOrderingService.bringToFront(canvasItemContainers, containersToMove, !0, this.zIndexPropertyName, suppressUndoRedo);
            }, ZIndexService.prototype.sendBackward = function(canvasItemContainers, containersToMove, suppressUndoRedo) {
                this.canvasListOrderingService.sendBackward(canvasItemContainers, containersToMove, !0, this.zIndexPropertyName, suppressUndoRedo);
            }, ZIndexService.prototype.sendToBack = function(canvasItemContainers, containersToMove, suppressUndoRedo) {
                this.canvasListOrderingService.sendToBack(canvasItemContainers, containersToMove, !0, this.zIndexPropertyName, suppressUndoRedo);
            }, ZIndexService.prototype.moveAfter = function(canvasItemContainers, afterCanvasItem, containersToMove) {
                this.canvasListOrderingService.moveAfter(canvasItemContainers, afterCanvasItem, containersToMove, !0, this.zIndexPropertyName);
            }, ZIndexService.prototype.moveAfterIndex = function(canvasItemContainers, afterContainerIndex, containersToMove) {
                this.canvasListOrderingService.moveAfterIndex(canvasItemContainers, afterContainerIndex, containersToMove, !0, this.zIndexPropertyName);
            }, ZIndexService.prototype.moveBefore = function(canvasItemContainers, beforeCanvasItem, containersToMove) {
                this.canvasListOrderingService.moveBefore(canvasItemContainers, beforeCanvasItem, containersToMove, !0, this.zIndexPropertyName);
            }, ZIndexService.prototype.moveBeforeIndex = function(canvasItemContainers, beforeContainerIndex, containersToMove) {
                this.canvasListOrderingService.moveBeforeIndex(canvasItemContainers, beforeContainerIndex, containersToMove, !0, this.zIndexPropertyName);
            }, ZIndexService.prototype.shouldNormalize = function(canvasItemContainers) {
                return this.canvasListOrderingService.shouldNormalize(canvasItemContainers, !0, this.zIndexPropertyName);
            }, ZIndexService.prototype.normalize = function(canvasItemContainers) {
                this.canvasListOrderingService.normalize(canvasItemContainers, !0, this.zIndexPropertyName);
            }, ZIndexService.prototype.sendZIndexCommandsByLevel = function(selectionService, canvasItemContainers, zIndexMode) {
                var groupByParentGroup = (0, canvasVisualsUtility.Dg)(selectionService);
                for (var name_1 in groupByParentGroup) {
                    var selectedItems = groupByParentGroup[name_1], itemSiblings = (0, itemGrouping.E8)(selectedItems[0], canvasItemContainers);
                    switch (zIndexMode) {
                      case 3:
                        this.bringForward(itemSiblings, selectedItems, !0);
                        break;

                      case 4:
                        this.sendBackward(itemSiblings, selectedItems, !0);
                        break;

                      case 1:
                        this.bringToFront(itemSiblings, selectedItems, !0);
                        break;

                      case 2:
                        this.sendToBack(itemSiblings, selectedItems, !0);
                    }
                }
            }, ZIndexService;
        }(), icon = __webpack_require__(44408), a11y_module = __webpack_require__(20914), Data_module = __webpack_require__(52910), Explore_module = __webpack_require__(31109), ExploreUI_module = __webpack_require__(87121), visual_types_container_modern_module = __webpack_require__(91280), pane_formatting_eager_module = __webpack_require__(42101), InsightsUI_module = __webpack_require__(9530), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), QnaUI_module = __webpack_require__(11429), drag_drop_module = __webpack_require__(13316), pbi_editable_label_module = __webpack_require__(94770), pbi_scrollbar_module = __webpack_require__(72359), tooltip_module = __webpack_require__(3741), UILibrary_module = __webpack_require__(94785), font_picker_module = __webpack_require__(45925), message_banner_module = __webpack_require__(52040), num_up_down_module = __webpack_require__(91382), pbi_button_toggle_module = __webpack_require__(53935), pbi_checkbox_module = __webpack_require__(47913), pbi_dropdown_module = __webpack_require__(6015), pbi_emphasis_module = __webpack_require__(76433), pbi_highlight_module = __webpack_require__(47542), pbi_icon_module = __webpack_require__(93367), pbi_menu_module = __webpack_require__(94841), pbi_pane_module = __webpack_require__(13254), pbi_search_box_module = __webpack_require__(39433), pbi_spin_button_module = __webpack_require__(55533), pbi_svg_use_symbol_module = __webpack_require__(79725), pbi_tooltip_module = __webpack_require__(16095), slider_module = __webpack_require__(6618), theme_color_picker_module = __webpack_require__(27037), tri_svg_icon = __webpack_require__(17177), manifests = [ {
            type: SyncGroupPaneComponent,
            componentId: "SyncGroupPaneComponentId"
        }, {
            type: VisualizationPaneModernComponent,
            componentId: "VisualizationPaneModernComponentId"
        }, {
            type: FieldWellModernComponent,
            componentId: "FieldWellModernComponentId"
        }, {
            type: DrillthroughPaneComponent,
            componentId: "DrillthroughPaneComponentId"
        }, {
            type: AutoVisualComponent,
            componentId: "AutoVisualComponentId"
        } ], ExploreUIAuthoringModule = function() {
            function ExploreUIAuthoringModule() {}
            return ExploreUIAuthoringModule.\u0275fac = function(t) {
                return new (t || ExploreUIAuthoringModule);
            }, ExploreUIAuthoringModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExploreUIAuthoringModule
            }), ExploreUIAuthoringModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ BookmarkAuthoringServiceLazyProvider, CanvasListOrderingServiceLazyProvider, conditional_formatting_dialog_launcher_service.EY, DataBarsDialogLauncherServiceLazyProvider, ExplorationAuthoringLazyProvider, ExportVisualDataLazyProvider, FieldWellBucketServiceLazyProvider, FieldWellFieldServiceLazyProvider, FieldWellModernServiceLazyProvider, TabOrderServiceLazyProvider, ZIndexServiceLazyProvider ],
                imports: [ common.CommonModule, Data_module.O, drag_drop_module._, Explore_module.F, ExploreUI_module.J, font_picker_module.e, fesm2022_forms.u5, InsightsUI_module.InsightsUIModule, lazy_load_module.N.withManifests(manifests), localization_module.v, icon.Ps, message_banner_module.x, num_up_down_module.d, pane_formatting_eager_module.p, a11y_module._, pbi_button_toggle_module.e, pbi_checkbox_module.V, pbi_dropdown_module.C, pbi_editable_label_module.f, pbi_emphasis_module.d, pbi_highlight_module.d, pbi_icon_module.U, pbi_menu_module.b, pbi_pane_module.x, pbi_scrollbar_module.K, pbi_search_box_module.t, pbi_spin_button_module.q, pbi_svg_use_symbol_module.j, pbi_tooltip_module.Z, QnaUI_module.m, fesm2022_forms.UX, slider_module.J, theme_color_picker_module.b, tooltip_module.z, tri_svg_icon.T6, UILibrary_module.g, visual_types_container_modern_module.Q ]
            }), ExploreUIAuthoringModule;
        }();
    },
    79930: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            EY: function() {
                return ConditionalFormattingDialogLauncherServiceLazyProvider;
            },
            Wg: function() {
                return ConditionalFormattingDialogLauncherService;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(81337), _powerbi_Explore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8082), _powerbi_Explore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40823), _powerbi_ExploreUI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(83008), _powerbi_legacy_Data_services_serialization_dataViewObjectDescriptorSerializer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(77616), _powerbi_legacy_Data_services_serialization_dataViewObjectSerializer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(54766), _powerbi_legacy_Data_services_serialization_semanticQuerySerializer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(3468), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprStaticMembers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(74082), _powerbi_legacy_VisualHostCore_services_serializers_visualStyleSerializer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(25740), _powerbi_Localization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65181), _powerbi_UILibrary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58938), _powerbi_UILibrary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4877), _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(50423), ConditionalFormattingDialogLauncherServiceLazyProvider = {
            provide: "conditionalFormattingDialogLauncherService",
            useFactory: function(localizationService, dialogService, itemPickerService, dataSourcesService, runningVisuals, dataSourcesSerializer) {
                return new ConditionalFormattingDialogLauncherService(localizationService, dialogService, itemPickerService, dataSourcesService, runningVisuals, dataSourcesSerializer);
            },
            deps: [ _powerbi_Localization__WEBPACK_IMPORTED_MODULE_0__.o, _powerbi_UILibrary__WEBPACK_IMPORTED_MODULE_1__.x, _powerbi_UILibrary__WEBPACK_IMPORTED_MODULE_2__.a, _powerbi_ExploreUI__WEBPACK_IMPORTED_MODULE_3__.D, _powerbi_Explore__WEBPACK_IMPORTED_MODULE_4__.s, _powerbi_Explore__WEBPACK_IMPORTED_MODULE_5__._ ]
        }, ConditionalFormattingDialogLauncherService = function() {
            function ConditionalFormattingDialogLauncherService(localizationService, dialogService, itemPickerService, dataSourcesService, runningVisuals, dataSourcesSerializer) {
                this.localizationService = localizationService, this.dialogService = dialogService, 
                this.itemPickerService = itemPickerService, this.dataSourcesService = dataSourcesService, 
                this.runningVisuals = runningVisuals, this.dataSourcesSerializer = dataSourcesSerializer;
            }
            return ConditionalFormattingDialogLauncherService.prototype.show = function(visualContainer, exprDisplayName, targetFieldExpr, repetition, propertyDefinition, visualStyle) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function() {
                    var exprToUse;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return exprToUse = targetFieldExpr && (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprStaticMembers__WEBPACK_IMPORTED_MODULE_7__.tO)(targetFieldExpr) ? targetFieldExpr.measure : targetFieldExpr, 
                            [ 4, this.showModernConditionaFormattingDialog(visualContainer, exprDisplayName, exprToUse, repetition, propertyDefinition, visualStyle) ];

                          case 1:
                            return [ 2, _a.sent().afterClosed().toPromise() ];
                        }
                    });
                });
            }, ConditionalFormattingDialogLauncherService.prototype.showModernConditionaFormattingDialog = function(visualContainer, exprDisplayName, targetFieldExpr, repetition, propertyDefinition, visualStyle) {
                var _a, _b;
                return (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function() {
                    var dataSources, propertyDescriptor, runningVisual, inputArgs, bindings;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_c) {
                        return dataSources = this.dataSourcesSerializer.serializeDataSources(this.dataSourcesService.get()), 
                        propertyDescriptor = repetition.propertyDescriptor, runningVisual = this.runningVisuals.getVisual(visualContainer), 
                        inputArgs = {
                            colorPalette: (0, _powerbi_legacy_VisualHostCore_services_serializers_visualStyleSerializer__WEBPACK_IMPORTED_MODULE_8__.NO)(visualStyle.colorPalette),
                            icons: null === (_a = this.itemPickerService) || void 0 === _a ? void 0 : _a.getIcons(),
                            iconSets: null === (_b = this.itemPickerService) || void 0 === _b ? void 0 : _b.getIconSets(),
                            inDataSources: dataSources,
                            propertySelector: repetition.selector && (0, _powerbi_legacy_Data_services_serialization_dataViewObjectSerializer__WEBPACK_IMPORTED_MODULE_9__.UZ)(repetition.selector),
                            allowOverrideTotalMatching: repetition.allowOverrideSubtotalMatching,
                            propertyDefinition: propertyDefinition && (0, _powerbi_legacy_Data_services_serialization_dataViewObjectSerializer__WEBPACK_IMPORTED_MODULE_9__.W7)(propertyDefinition, propertyDescriptor),
                            propertyDescriptor: (0, _powerbi_legacy_Data_services_serialization_dataViewObjectDescriptorSerializer__WEBPACK_IMPORTED_MODULE_10__.m8)(propertyDescriptor, this.localizationService),
                            targetFieldDisplayName: exprDisplayName,
                            targetFieldExpr: targetFieldExpr && _powerbi_legacy_Data_services_serialization_semanticQuerySerializer__WEBPACK_IMPORTED_MODULE_11__.ib.serializeExpr(targetFieldExpr),
                            visualType: runningVisual.getType(),
                            hasGrouping: !!repetition.selector && this.hasGroupingColumn(runningVisual)
                        }, bindings = {
                            title: "".concat(inputArgs.propertyDescriptor.displayName, " - ").concat(inputArgs.targetFieldDisplayName),
                            input: inputArgs,
                            hideOkButton: !1,
                            hideCancelButton: !1,
                            focusInitialCloseButton: !0,
                            footerLink: {
                                text: this.localizationService.get("ConditionalFormattingDialog_LearnMore"),
                                url: "https://go.microsoft.com/fwlink/?linkid=874399",
                                type: "external"
                            }
                        }, [ 2, this.dialogService.showTemplateDialog("ConditionalFormattingDialog", bindings, {
                            minWidth: "940px",
                            height: "665px",
                            autoFocus: !0
                        }) ];
                    });
                });
            }, ConditionalFormattingDialogLauncherService.prototype.hasGroupingColumn = function(runningVisual) {
                if (!runningVisual) return !1;
                var dataView = runningVisual.getDataViews()[0];
                if (dataView.metadata && dataView.metadata.columns) for (var _i = 0, _a = dataView.metadata.columns; _i < _a.length; _i++) if (!_a[_i].isMeasure) return !0;
                return !1;
            }, ConditionalFormattingDialogLauncherService.\u0275fac = function(t) {
                return new (t || ConditionalFormattingDialogLauncherService)(_angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275inject"](_powerbi_Localization__WEBPACK_IMPORTED_MODULE_0__.o), _angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275inject"](_powerbi_UILibrary__WEBPACK_IMPORTED_MODULE_1__.x), _angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275inject"](_powerbi_UILibrary__WEBPACK_IMPORTED_MODULE_2__.a), _angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275inject"](_powerbi_ExploreUI__WEBPACK_IMPORTED_MODULE_3__.D), _angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275inject"](_powerbi_Explore__WEBPACK_IMPORTED_MODULE_4__.s), _angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275inject"](_powerbi_Explore__WEBPACK_IMPORTED_MODULE_5__._));
            }, ConditionalFormattingDialogLauncherService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275defineInjectable"]({
                token: ConditionalFormattingDialogLauncherService,
                factory: ConditionalFormattingDialogLauncherService.\u0275fac
            }), ConditionalFormattingDialogLauncherService;
        }();
    },
    42587: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            F: function() {
                return getDrillthroughControlStates;
            },
            j: function() {
                return getResources;
            }
        });
        var _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(78417);
        function getResources(sectionType, localizationService, showLinkFieldsInPageFormatting) {
            return void 0 === showLinkFieldsInPageFormatting && (showLinkFieldsInPageFormatting = !1), 
            1 === sectionType ? {
                paneTitle: localizationService.get("Tooltip"),
                paneTitleTooltip: localizationService.get("Drillthrough_TooltipTitleTooltip"),
                linkFieldsDropZoneTitle: localizationService.get(showLinkFieldsInPageFormatting ? "PagePropertyPane_LinkFieldsDropZoneTitle_Tooltip" : "DrillthroughLinks_Tooltip_Fields"),
                dropZoneText: localizationService.get("FieldDropZone_TooltipLink_Watermark"),
                keepAllFiltersLabel: localizationService.get("Drillthrough_KeepAllFilters"),
                keepAllFiltersTooltip: localizationService.get("Drillthrough_KeepAllFiltersForTooltip_Tooltip"),
                keepAllFiltersToggleForcedOnTooltip: localizationService.format("Drillthrough_KeepAllFiltersForcedOnForTooltip_Tooltip", [ localizationService.get("Drillthrough_KeepAllFiltersForTooltip_Tooltip") ]),
                crossReportDrillthroughLabel: localizationService.get("Drillthrough_CrossReportDrillthrough"),
                crossReportDrillthroughTooltip: localizationService.get("Drillthrough_CrossReportDrillthrough_Tooltip"),
                linkFieldsLinkTypeGroupTitle: localizationService.get("DrillthroughLinks_LinkTypeGroup_Tooltip")
            } : {
                paneTitle: localizationService.get("Drillthrough"),
                paneTitleTooltip: localizationService.get("Drillthrough_DrillthroughTitleTooltip"),
                linkFieldsDropZoneTitle: localizationService.get(showLinkFieldsInPageFormatting ? "PagePropertyPane_LinkFieldsDropZoneTitle_Drillthrough" : "DrillthroughLinks_Drillthrough_Fields"),
                dropZoneText: localizationService.get("FieldDropZone_DrillthroughLink_Watermark"),
                keepAllFiltersLabel: localizationService.get("Drillthrough_KeepAllFilters"),
                keepAllFiltersTooltip: localizationService.get("Drillthrough_KeepAllFiltersForDrillthrough_Tooltip"),
                keepAllFiltersToggleForcedOnTooltip: localizationService.format("Drillthrough_KeepAllFiltersForcedOnForDrillthrough_Tooltip", [ localizationService.get("Drillthrough_KeepAllFiltersForDrillthrough_Tooltip") ]),
                crossReportDrillthroughLabel: localizationService.get("Drillthrough_CrossReportDrillthrough"),
                crossReportDrillthroughTooltip: localizationService.get("Drillthrough_CrossReportDrillthrough_Tooltip"),
                linkFieldsLinkTypeGroupTitle: localizationService.get("DrillthroughLinks_LinkTypeGroup_Drillthrough")
            };
        }
        function getDrillthroughControlStates(exploration, section, resources, allowRegularSectionAsDrillthroughTarget) {
            var hasMeasureOrAsAggregationLinkField = (0, _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__.Dt)(exploration, section), keepAllFiltersSettingValue = (0, 
            _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__.LM)(exploration, section) || hasMeasureOrAsAggregationLinkField, keepAllFiltersSettingDisabled = !section || hasMeasureOrAsAggregationLinkField, crossReportDrillthroughSettingApplicable = !!section && 2 === section.type || allowRegularSectionAsDrillthroughTarget && !!section && (void 0 === section.type || 0 === section.type);
            return {
                keepAllFilters: {
                    disabled: keepAllFiltersSettingDisabled,
                    value: keepAllFiltersSettingValue,
                    tooltip: keepAllFiltersSettingDisabled && keepAllFiltersSettingValue ? resources.keepAllFiltersToggleForcedOnTooltip : resources.keepAllFiltersTooltip
                },
                crossReportDrillthrough: {
                    show: crossReportDrillthroughSettingApplicable,
                    disabled: !section,
                    value: !!crossReportDrillthroughSettingApplicable && (0, _powerbi_legacy_Explore_util_podUtils__WEBPACK_IMPORTED_MODULE_0__.aQ)(exploration, section),
                    tooltip: resources.crossReportDrillthroughTooltip
                },
                linkFieldsDropZoneTitle: resources.linkFieldsDropZoneTitle,
                linkFieldsLinkTypeGroupTitle: resources.linkFieldsLinkTypeGroupTitle
            };
        }
    },
    89839: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            l: function() {
                return updateSelectedMenuItems;
            }
        });
        var _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76001), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternToSQExprConverter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80366), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(94419);
        function updateSelectedMenuItems(property, visual) {
            var propertyAggregate = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternToSQExprConverter__WEBPACK_IMPORTED_MODULE_0__._L)((0, 
            _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__.Q)(property.expr)), hasAggregate = void 0 !== propertyAggregate, menuItemCollection = property.interactivityOptions.dropDownItems;
            if (menuItemCollection) for (var _i = 0, _a = menuItemCollection.items; _i < _a.length; _i++) {
                var menuItem = _a[_i], fieldWellMenuItemOption = menuItem.key;
                if (fieldWellMenuItemOption) switch (fieldWellMenuItemOption.action) {
                  case 4:
                    menuItem.checked = hasAggregate && fieldWellMenuItemOption.aggregate === propertyAggregate;
                    break;

                  case 2:
                    menuItem.checked = !hasAggregate;
                    break;

                  case 8:
                    var propertyRole = visual.config.singleVisual.query.projections[property.role];
                    menuItem.checked = !(!propertyRole || !propertyRole.showAll);
                    break;

                  case 128:
                    menuItem.checked = isVariationChecked(property, menuItem.text);
                    break;

                  case 16:
                    for (var _b = 0, _c = menuItem.children; _b < _c.length; _b++) {
                        var child = _c[_b];
                        child.checked = isShowValueAsChecked(property, child.key.showValueAs);
                    }
                    break;

                  case 2048:
                    menuItem.checked = !1;
                    break;

                  default:
                    menuItem.checked = void 0;
                }
            }
        }
        function isVariationChecked(property, currentLabel) {
            var hierarchyExpr = function(property) {
                if (!_.isEmpty(property.hierarchyLevels)) {
                    var hierarchyLevelExpr_1 = property.hierarchyLevels[0].expr;
                    return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assert(function() {
                        return hierarchyLevelExpr_1.arg instanceof _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExpr__WEBPACK_IMPORTED_MODULE_3__.jE;
                    }, "hierarchyLevelExpr.arg should be instanceof powerbi.data.SQHierarchyExpr"), 
                    hierarchyLevelExpr_1.arg;
                }
            }(property);
            if (hierarchyExpr) return hierarchyExpr.hierarchy === currentLabel;
            var fieldExpr = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__.Q)(property.expr);
            return !!fieldExpr && (fieldExpr.columnAggr ? fieldExpr.columnAggr.name === currentLabel : fieldExpr.groupingColumnAggr ? fieldExpr.groupingColumnAggr.name === currentLabel : fieldExpr.column ? fieldExpr.column.name === currentLabel : !!fieldExpr.groupingColumn && fieldExpr.groupingColumn.name === currentLabel);
        }
        function isShowValueAsChecked(property, showValueAs) {
            var fieldExprPattern = (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_exprPatterns_fieldExprPatternBuilder__WEBPACK_IMPORTED_MODULE_1__.Q)(property.expr);
            if (!fieldExprPattern || !showValueAs) return !1;
            switch (showValueAs.kind) {
              case void 0:
                return !fieldExprPattern.percentOfGrandTotal && !fieldExprPattern.percentOfRoleTotal;

              case 0:
                return !!fieldExprPattern.percentOfGrandTotal;

              case 1:
                var percentRoleTotal_1 = showValueAs;
                return !(!fieldExprPattern.percentOfRoleTotal || !_.every(fieldExprPattern.percentOfRoleTotal.roles, function(role) {
                    return _.includes(percentRoleTotal_1.roles, role);
                }));

              default:
                return !1;
            }
        }
    },
    43859: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            H: function() {
                return PivotTabKeyHandlerDirective;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57470), _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62458), PivotTabKeyHandlerDirective = function() {
            function PivotTabKeyHandlerDirective() {
                this.onActiveSection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, 
                this.observedTargetsMap = new Map;
            }
            return PivotTabKeyHandlerDirective.prototype.onKeyDown = function(event) {
                var currentSectionIndex, options = this.options, sections = this.options.sections, length = sections.length;
                switch (event.keyCode) {
                  case 37:
                  case 38:
                    currentSectionIndex = sections.findIndex(function(section) {
                        return section === options.currentSection;
                    }), this.switchTab(sections[(currentSectionIndex - 1 + length) % length], event, !0);
                    break;

                  case 39:
                  case 40:
                    currentSectionIndex = sections.findIndex(function(section) {
                        return section === options.currentSection;
                    }), this.switchTab(sections[(currentSectionIndex + 1) % length], event);
                }
            }, PivotTabKeyHandlerDirective.prototype.switchTab = function(nextSection, event, backwards) {
                var _this = this;
                void 0 === backwards && (backwards = void 0);
                var target = event.target, observer = new MutationObserver(function(record) {
                    for (var _loop_1 = function(mutation) {
                        if ("attributes" === mutation.type && "tabindex" === mutation.attributeName && document.activeElement === target) {
                            var pivotRootElement_1 = _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getFirstMatchingAncestor(target, function(e) {
                                return e.hasAttribute(_this.options.rootAttribute);
                            }), nextTabPivot = void 0;
                            null == (nextTabPivot = backwards ? _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getPrevTabbableMatchingSibling(target, function(e) {
                                return !!_powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getFirstMatchingAncestor(e, function(e) {
                                    return e.hasAttribute(_this.options.pivotAttribute);
                                }, pivotRootElement_1, !0);
                            }, pivotRootElement_1) : _powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getNextTabbableMatchingSibling(target, function(e) {
                                return !!_powerbi_legacy_JsCommon_focus_FocusNavigationUtility__WEBPACK_IMPORTED_MODULE_1__.M.getFirstMatchingAncestor(e, function(e) {
                                    return e.hasAttribute(_this.options.pivotAttribute);
                                }, pivotRootElement_1, !0);
                            }, pivotRootElement_1)) || nextTabPivot.focus();
                        }
                    }, _i = 0, record_1 = record; _i < record_1.length; _i++) _loop_1(record_1[_i]);
                    var observedTarget = _this.observedTargetsMap.has(target);
                    observedTarget || _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_2__.fF.assertFail("PivotTabKeyHandler does not have the correct observed target on mutation observer callback - possibly detached early"), 
                    observer.disconnect();
                    var observedTargetCount = _this.observedTargetsMap.get(target);
                    observedTargetCount > 1 ? _this.observedTargetsMap.set(target, observedTargetCount - 1) : observedTarget && _this.observedTargetsMap.delete(target);
                });
                observer.observe(target, {
                    attributes: !0,
                    attributeFilter: [ "tabindex" ]
                });
                var observedTargetCount = this.observedTargetsMap.get(target);
                this.observedTargetsMap.set(target, observedTargetCount ? observedTargetCount + 1 : 1), 
                this.onActiveSection.emit({
                    nextSection
                }), event.stopPropagation();
            }, PivotTabKeyHandlerDirective.\u0275fac = function(t) {
                return new (t || PivotTabKeyHandlerDirective);
            }, PivotTabKeyHandlerDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PivotTabKeyHandlerDirective,
                selectors: [ [ "", "pivot-tab-key-handler", "" ] ],
                hostBindings: function(rf, ctx) {
                    1 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275listener"]("keydown", function($event) {
                        return ctx.onKeyDown($event);
                    });
                },
                inputs: {
                    options: [ "pivot-tab-key-handler", "options" ]
                },
                outputs: {
                    onActiveSection: "onActiveSection"
                }
            }), PivotTabKeyHandlerDirective;
        }();
    },
    64824: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            R: function() {
                return SectionAnimationSliderDirective;
            }
        });
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), SectionAnimationSliderDirective = function() {
            function SectionAnimationSliderDirective(elementRef) {
                this.elementRef = elementRef;
            }
            return SectionAnimationSliderDirective.prototype.ngOnChanges = function(changes) {
                if (changes.sectionNumber && !changes.sectionNumber.isFirstChange()) {
                    var newNumber = changes.sectionNumber.currentValue;
                    null != newNumber && this.animateSectionSlide(newNumber, changes.sectionNumber.previousValue);
                }
            }, SectionAnimationSliderDirective.prototype.animateElement = function(element, cssProperties, animateProperties) {
                element.css(cssProperties).animate(animateProperties, 200);
            }, SectionAnimationSliderDirective.prototype.animateSectionSlide = function(newIndex, oldIndex) {
                this.doNotAnimateSection || (newIndex < oldIndex ? this.animateElement($(this.elementRef.nativeElement), {
                    right: "200%"
                }, {
                    right: 0
                }) : newIndex > oldIndex && this.animateElement($(this.elementRef.nativeElement), {
                    "margin-left": "200%"
                }, {
                    "margin-left": 0
                }));
                var navMarker = $(".".concat(this.navMarkerParent, " .navMarker"));
                if (this.autoWidth) {
                    var marginToAnimate = 0 === newIndex ? "margin-left" : "margin-right", marginToReset = 0 === newIndex ? "margin-right" : "margin-left", cssProperties = {};
                    cssProperties[marginToAnimate] = "".concat(navMarker.width(), "px"), cssProperties[marginToReset] = "auto";
                    var animationProperties = {};
                    animationProperties[marginToAnimate] = "0", this.animateElement(navMarker, cssProperties, animationProperties);
                } else this.animateElement(navMarker, {}, {
                    "margin-left": navMarker.width() * newIndex + "px"
                });
            }, SectionAnimationSliderDirective.\u0275fac = function(t) {
                return new (t || SectionAnimationSliderDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
            }, SectionAnimationSliderDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: SectionAnimationSliderDirective,
                selectors: [ [ "", "section-animation-slider", "" ] ],
                inputs: {
                    sectionNumber: "sectionNumber",
                    navMarkerParent: "navMarkerParent",
                    autoWidth: "autoWidth",
                    doNotAnimateSection: "doNotAnimateSection"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275NgOnChangesFeature"] ]
            }), SectionAnimationSliderDirective;
        }();
    },
    84431: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Ct: function() {
                return FieldWellPropertyInteractivityOptions;
            },
            DR: function() {
                return FieldWellPropertyDisplayOptions;
            },
            KT: function() {
                return FieldWellViewModel;
            },
            OB: function() {
                return FieldWellBucket;
            },
            _d: function() {
                return FieldWellProperty;
            },
            aT: function() {
                return FieldWellHierarchyLevel;
            },
            kh: function() {
                return FieldWellBucketWarning;
            }
        });
        var _powerbi_legacy_JsCommon_comparable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(55201), _powerbi_legacy_PowerBIVisuals_Visuals_common_visualObjectRepetition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40812), _powerbi_legacy_PowerBIVisuals_VisualsCommon_arrayExtensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50550), _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45413), FieldWellProperty = function() {
            function FieldWellProperty(expr, role, startIndex, endIndex, valid, displayOptions, interactivityOptions, hierarchyLevels, conditionalFormattingRepetitions, visualContainerName, visualType, isHiddenInVisual, supportedOperations) {
                this.expr = expr, this.role = role, this.startIndex = startIndex, this.endIndex = endIndex, 
                this.valid = valid, this.displayOptions = displayOptions, this.interactivityOptions = interactivityOptions, 
                this.hierarchyLevels = hierarchyLevels, this.conditionalFormattingRepetitions = conditionalFormattingRepetitions, 
                this.supportedOperations = 67108863, this.visualContainerName = visualContainerName, 
                this.visualType = visualType, this.isHiddenInVisual = isHiddenInVisual, this.supportedOperations = supportedOperations;
            }
            return FieldWellProperty.prototype.equals = function(other) {
                return this.role === other.role && (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_0__.fS)(this.expr, other.expr) && this.startIndex === other.startIndex && this.endIndex === other.endIndex && this.isEditingLabel === other.isEditingLabel && this.valid === other.valid && (this.displayOptions === other.displayOptions || !!(this.displayOptions && other.displayOptions && this.displayOptions.equals && this.displayOptions.equals(other.displayOptions))) && (this.interactivityOptions === other.interactivityOptions || !!(this.interactivityOptions && other.interactivityOptions && this.interactivityOptions.equals && this.interactivityOptions.equals(other.interactivityOptions))) && (0, 
                _powerbi_legacy_PowerBIVisuals_VisualsCommon_arrayExtensions__WEBPACK_IMPORTED_MODULE_1__.NF)(this.conditionalFormattingRepetitions, other.conditionalFormattingRepetitions, _powerbi_legacy_PowerBIVisuals_Visuals_common_visualObjectRepetition__WEBPACK_IMPORTED_MODULE_2__.u9) && (0, 
                _powerbi_legacy_JsCommon_comparable__WEBPACK_IMPORTED_MODULE_3__.L)(this.hierarchyLevels, other.hierarchyLevels) && this.visualContainerName === other.visualContainerName && this.visualType === other.visualType && this.isHiddenInVisual === other.isHiddenInVisual && this.supportedOperations === other.supportedOperations;
            }, FieldWellProperty;
        }(), FieldWellPropertyDisplayOptions = function() {
            function FieldWellPropertyDisplayOptions(displayName, tooltipTitle, tooltipDescription, glyph, pbiStyle) {
                this.displayName = displayName, this.tooltipTitle = tooltipTitle, this.tooltipDescription = tooltipDescription, 
                this.glyph = glyph, this.pbiStyle = pbiStyle;
            }
            return FieldWellPropertyDisplayOptions.prototype.equals = function(other) {
                return this.displayName === other.displayName && this.tooltipTitle === other.tooltipTitle && this.tooltipDescription === other.tooltipDescription && this.glyph === other.glyph && this.pbiStyle === other.pbiStyle;
            }, FieldWellPropertyDisplayOptions;
        }(), FieldWellPropertyInteractivityOptions = function() {
            function FieldWellPropertyInteractivityOptions(dropDownItems, isReplaceable, isEditableField) {
                this.dropDownItems = dropDownItems, this.isReplaceable = isReplaceable, this.isEditableField = isEditableField, 
                this.canAppend = !0, this.canPrepend = !0, this.hasContextMenu = !0, this.isDraggableField = !0, 
                this.isDroppableField = !0, this.isRemovableField = !0;
            }
            return FieldWellPropertyInteractivityOptions.prototype.disableInteractivity = function() {
                this.canAppend = !1, this.canPrepend = !1, this.hasContextMenu = !1, this.isDraggableField = !1, 
                this.isDroppableField = !1, this.isEditableField = !1, this.isRemovableField = !1;
            }, FieldWellPropertyInteractivityOptions.prototype.equals = function(other) {
                return this.canAppend === other.canAppend && this.canPrepend === other.canPrepend && _.isEqual(this.dropDownItems, other.dropDownItems) && this.hasContextMenu === other.hasContextMenu && this.isDraggableField === other.isDraggableField && this.isDroppableField === other.isDroppableField && this.isEditableField === other.isEditableField && this.isRemovableField === other.isRemovableField && this.isReplaceable === other.isReplaceable;
            }, FieldWellPropertyInteractivityOptions;
        }(), FieldWellHierarchyLevel = function() {
            function FieldWellHierarchyLevel(expr, displayName, tooltipTitle) {
                this.expr = expr, this.displayName = displayName, this.tooltipTitle = tooltipTitle;
            }
            return FieldWellHierarchyLevel.prototype.equals = function(other) {
                return (0, _powerbi_legacy_PowerBIVisuals_VisualsData_semanticQuery_sqExprEqualityVisitor__WEBPACK_IMPORTED_MODULE_0__.fS)(this.expr, other.expr) && this.displayName === other.displayName && this.tooltipTitle === other.tooltipTitle;
            }, FieldWellHierarchyLevel;
        }(), FieldWellBucket = function() {
            function FieldWellBucket(role, displayName, properties, supportsMultipleItems, description) {
                this.role = role, this.displayName = displayName, this.properties = properties, 
                this.supportsMultipleItems = supportsMultipleItems, this.description = description;
            }
            return FieldWellBucket.prototype.equals = function(other) {
                return this.role === other.role && this.displayName === other.displayName && (0, 
                _powerbi_legacy_JsCommon_comparable__WEBPACK_IMPORTED_MODULE_3__.L)(this.properties, other.properties) && this.supportsMultipleItems === other.supportsMultipleItems && this.description === other.description && (this.warning === other.warning || !!(this.warning && other.warning && this.warning.equals && this.warning.equals(other.warning))) && this.disabled === other.disabled;
            }, FieldWellBucket;
        }(), FieldWellBucketWarning = function() {
            function FieldWellBucketWarning(glyph, title, description) {
                this.glyph = glyph, this.title = title, this.description = description;
            }
            return FieldWellBucketWarning.prototype.equals = function(other) {
                return this.glyph === other.glyph && this.title === other.title && this.description === other.description;
            }, FieldWellBucketWarning;
        }(), FieldWellViewModel = function() {
            return function(buckets) {
                this.buckets = buckets;
            };
        }();
    },
    45925: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return FontPickerModule;
            }
        });
        var _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6015), _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17174), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), FontPickerModule = function() {
            function FontPickerModule() {}
            return FontPickerModule.\u0275fac = function(t) {
                return new (t || FontPickerModule);
            }, FontPickerModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: FontPickerModule
            }), FontPickerModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.u5, _pbi_dropdown__WEBPACK_IMPORTED_MODULE_3__.C, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.UX ]
            }), FontPickerModule;
        }();
    },
    64713: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            J: function() {
                return PbiButtonToggleGroupComponent;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42900), _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4437), _powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(73221), rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14172), _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(50423), _c0 = [ "*" ], PbiButtonToggleGroupComponent = function(_super) {
            function PbiButtonToggleGroupComponent(pbiButtonToggleService) {
                var _this = _super.call(this) || this;
                return _this.pbiButtonToggleService = pbiButtonToggleService, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiButtonToggleGroupComponent, _super), 
            PbiButtonToggleGroupComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("disabled").pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.U)(function(disabled) {
                    return (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.Ig)(disabled);
                })).subscribe(function(disabled) {
                    return _this.pbiButtonToggleService.setDisabled(disabled);
                }), this.changes$("multiple").pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.U)(function(multiple) {
                    return (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.Ig)(multiple);
                })).subscribe(function(multiple) {
                    return _this.pbiButtonToggleService.setMultiple(multiple);
                });
            }, PbiButtonToggleGroupComponent.\u0275fac = function(t) {
                return new (t || PbiButtonToggleGroupComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275directiveInject"](_pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_4__.r));
            }, PbiButtonToggleGroupComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275defineComponent"]({
                type: PbiButtonToggleGroupComponent,
                selectors: [ [ "pbi-button-toggle-group" ] ],
                hostAttrs: [ "role", "group" ],
                hostVars: 4,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275classProp"]("multiple", ctx.multiple)("disabled", ctx.disabled);
                },
                inputs: {
                    disabled: "disabled",
                    multiple: "multiple"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275ProvidersFeature"]([ _pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_4__.r ]), _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275InheritDefinitionFeature"] ],
                ngContentSelectors: _c0,
                decls: 1,
                vars: 0,
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275projectionDef"](), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_3__["\u0275\u0275projection"](0));
                },
                encapsulation: 2,
                changeDetection: 0
            }), PbiButtonToggleGroupComponent;
        }(_powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_5__.w);
    },
    53935: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            e: function() {
                return PbiButtonToggleModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), PbiButtonToggleModule = function() {
            function PbiButtonToggleModule() {}
            return PbiButtonToggleModule.\u0275fac = function(t) {
                return new (t || PbiButtonToggleModule);
            }, PbiButtonToggleModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: PbiButtonToggleModule
            }), PbiButtonToggleModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule ]
            }), PbiButtonToggleModule;
        }();
    },
    42900: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            r: function() {
                return PbiButtonToggleService;
            }
        });
        var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33554), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), PbiButtonToggleService = function() {
            function PbiButtonToggleService() {
                this.selected$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(1), this.disabled$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(1), 
                this.multiple$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(1);
            }
            return PbiButtonToggleService.prototype.select = function(value) {
                this.selected$.next(value);
            }, PbiButtonToggleService.prototype.setDisabled = function(value) {
                this.disabled$.next(value);
            }, PbiButtonToggleService.prototype.setMultiple = function(value) {
                this.multiple$.next(value);
            }, PbiButtonToggleService.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineInjectable"]({
                token: PbiButtonToggleService,
                factory: PbiButtonToggleService.\u0275fac = function(t) {
                    return new (t || PbiButtonToggleService);
                }
            }), PbiButtonToggleService;
        }();
    },
    53240: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            I: function() {
                return PbiButtonToggleComponent;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4437), _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50423), _angular_forms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(17174), _powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(72065), rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63057), rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14172), rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(22318), rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(23558), rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(83317), rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(59973), rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(73805), rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(57243), _pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(42900), _angular_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(77476), _c0 = [ "*" ], PbiButtonToggleComponent = function(_super) {
            function PbiButtonToggleComponent(pbiButtonToggleService) {
                var _this = _super.call(this) || this;
                return _this.pbiButtonToggleService = pbiButtonToggleService, _this.checked = !1, 
                _this.supportsNoSelection = !1, _this.role = "button", _this.ariaControls = null, 
                _this.id = null, _this.valueChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this.onFocus = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, _this.onBlur = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, 
                _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiButtonToggleComponent, _super), 
            PbiButtonToggleComponent.prototype.ngOnInit = function() {
                this.isDisabled$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.T)(this.pbiButtonToggleService.disabled$, this.mergePropertyInputsAndFormControl(this.changes$("disabled").pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.U)(function(disabled) {
                    return (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__.Ig)(disabled);
                })), this.disabled$, "disabled", this.onDestroy$)).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.O)((0, 
                _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__.Ig)(this.disabled))), this.setCheckedObservable();
            }, PbiButtonToggleComponent.prototype.setCheckedObservable = function() {
                var _this = this, multiple$ = this.pbiButtonToggleService.multiple$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.O)(!1)), checkedParent$ = this.mergePropertyInputsAndFormControl(this.changes$("checked"), this.value$, "checked", this.onDestroy$);
                checkedParent$.subscribe(function(checked) {
                    return _this.checked = checked;
                });
                var checkedSiblings$ = this.pbiButtonToggleService.selected$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.M)(multiple$), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.R)(this.onDestroy$), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.h)(function(_a) {
                    return !_a[1] && _this.value !== _a[0];
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.h)(!1));
                this.onButtonClicked = this.createEventAdapter();
                var checkedByEvent$ = this.onButtonClicked.$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.M)(multiple$), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.U)(function(_a) {
                    var multiple = _a[1];
                    return _a[0].stopPropagation(), !multiple && !_this.supportsNoSelection || !_this.checked;
                })), checkedInternal$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.T)(checkedSiblings$, checkedByEvent$).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.d)(1));
                this.checked$ = (0, rxjs__WEBPACK_IMPORTED_MODULE_2__.T)(checkedParent$, checkedInternal$), 
                checkedInternal$.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.M)(this.isDisabled$), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.h)(function(_a) {
                    return !_a[1];
                })).subscribe(function(_a) {
                    var checked = _a[0];
                    checked && _this.pbiButtonToggleService.select(_this.value), _this.checked = checked, 
                    _this.valueChanged.emit(_this.checked), _this.onValueChange(_this.checked), _this.onTouched();
                });
            }, PbiButtonToggleComponent.\u0275fac = function(t) {
                return new (t || PbiButtonToggleComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275directiveInject"](_pbi_button_toggle_service__WEBPACK_IMPORTED_MODULE_11__.r));
            }, PbiButtonToggleComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275defineComponent"]({
                type: PbiButtonToggleComponent,
                selectors: [ [ "pbi-button-toggle" ] ],
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275classProp"]("checked", ctx.checked);
                },
                inputs: {
                    value: "value",
                    disabled: "disabled",
                    checked: "checked",
                    supportsNoSelection: "supportsNoSelection",
                    role: "role",
                    ariaControls: "ariaControls",
                    id: "id",
                    ariaLabel: [ "aria-label", "ariaLabel" ],
                    ariaLabelledby: [ "aria-labelledby", "ariaLabelledby" ],
                    ariaDescribedby: [ "aria-describedby", "ariaDescribedby" ],
                    buttonTabIndex: "buttonTabIndex"
                },
                outputs: {
                    valueChanged: "valueChanged",
                    onFocus: "onFocus",
                    onBlur: "onBlur"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275ProvidersFeature"]([ {
                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_12__.JU,
                    useExisting: (0, _angular_core__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function() {
                        return PbiButtonToggleComponent;
                    }),
                    multi: !0
                } ]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275InheritDefinitionFeature"] ],
                ngContentSelectors: _c0,
                decls: 5,
                vars: 17,
                consts: [ [ "type", "button", 3, "disabled", "tabindex", "click", "focus", "blur" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275projectionDef"](), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementStart"](0, "button", 0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275listener"]("click", function($event) {
                        return ctx.onButtonClicked.fn($event);
                    })("focus", function() {
                        return ctx.onFocus.emit();
                    })("blur", function() {
                        return ctx.onBlur.emit();
                    }), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](1, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](2, "async"), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipe"](3, "async"), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275projection"](4), _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275elementEnd"]()), 
                    2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275property"]("disabled", _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](1, 11, ctx.isDisabled$) || null)("tabindex", ctx.buttonTabIndex), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275attribute"]("value", ctx.value)("role", ctx.role)("aria-controls", ctx.ariaControls)("id", ctx.id)("aria-pressed", "button" === ctx.role ? _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](2, 13, ctx.checked$) : null)("aria-selected", "button" !== ctx.role ? _angular_core__WEBPACK_IMPORTED_MODULE_1__["\u0275\u0275pipeBind1"](3, 15, ctx.checked$) : null)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedby));
                },
                dependencies: [ _angular_common__WEBPACK_IMPORTED_MODULE_13__.AsyncPipe ],
                styles: [ "button[_ngcontent-%COMP%]{background:transparent;overflow:hidden;border:none;margin:0;padding:0}button[_ngcontent-%COMP%]:focus{outline:none}" ],
                changeDetection: 0
            }), PbiButtonToggleComponent;
        }(_powerbi_RxAngular__WEBPACK_IMPORTED_MODULE_14__.N);
    },
    2380: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            O: function() {
                return PbiEmphasisBackgroundDirective;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _pbi_emphasis_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11991), rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37272), rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81905), rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23558), _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50423), _angular_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26124), PbiEmphasisBackgroundDirective = function(_super) {
            function PbiEmphasisBackgroundDirective(animationBuilder, element) {
                return _super.call(this, animationBuilder, element) || this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiEmphasisBackgroundDirective, _super), 
            PbiEmphasisBackgroundDirective.prototype.ngOnInit = function() {
                var _this = this;
                this.changes$("pbiEmphasisBackground").pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.w)(function(emphasisInput) {
                    return emphasisInput || rxjs__WEBPACK_IMPORTED_MODULE_2__.E;
                })).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.M)(this.changes$("pbiEmphasisBackgroundColor", !0))).subscribe(function(_a) {
                    var color = _a[1], animation = _this.getAnimation("backgroundColor", null != color ? color : "var(--globalColorBrand160)");
                    _this.emphasize(animation);
                });
            }, PbiEmphasisBackgroundDirective.\u0275fac = function(t) {
                return new (t || PbiEmphasisBackgroundDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275directiveInject"](_angular_animations__WEBPACK_IMPORTED_MODULE_5__._j, 8), _angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_4__.ElementRef));
            }, PbiEmphasisBackgroundDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275defineDirective"]({
                type: PbiEmphasisBackgroundDirective,
                selectors: [ [ "", "pbiEmphasisBackground", "" ] ],
                inputs: {
                    pbiEmphasisBackground: "pbiEmphasisBackground",
                    pbiEmphasisBackgroundColor: "pbiEmphasisBackgroundColor"
                },
                features: [ _angular_core__WEBPACK_IMPORTED_MODULE_4__["\u0275\u0275InheritDefinitionFeature"] ]
            }), PbiEmphasisBackgroundDirective;
        }(_pbi_emphasis_directive__WEBPACK_IMPORTED_MODULE_6__.A);
    },
    11991: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            A: function() {
                return PbiEmphasisDirective;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26124), PbiEmphasisDirective = function(_super) {
            function PbiEmphasisDirective(animationBuilder, element) {
                var _this = _super.call(this) || this;
                return _this.animationBuilder = animationBuilder, _this.element = element, _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PbiEmphasisDirective, _super), 
            PbiEmphasisDirective.prototype.emphasize = function(animation) {
                var _this = this;
                if (this.animationBuilder) {
                    var playAnimation = function() {
                        var animationFactory = _this.animationBuilder.build(animation), currentPlayer = _this.currentPlayer = animationFactory.create(_this.element.nativeElement);
                        currentPlayer.onDestroy(function() {
                            return _this.currentPlayer = void 0;
                        }), currentPlayer.play();
                    };
                    this.currentPlayer ? (this.currentPlayer.finish(), this.currentPlayer.destroy(), 
                    this.requestedAnimationFrameId && window.cancelAnimationFrame(this.requestedAnimationFrameId), 
                    this.requestedAnimationFrameId = window.requestAnimationFrame(function() {
                        playAnimation(), _this.requestedAnimationFrameId = void 0;
                    })) : playAnimation();
                }
            }, PbiEmphasisDirective.prototype.getAnimation = function(propertyToAnimate, value) {
                var _a, _b, _c;
                return [ (0, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.oB)((_a = {}, _a[propertyToAnimate] = "*", 
                _a)), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.jt)("100ms ease-out", (0, 
                _angular_animations__WEBPACK_IMPORTED_MODULE_1__.oB)((_b = {}, _b[propertyToAnimate] = value, 
                _b))), (0, _angular_animations__WEBPACK_IMPORTED_MODULE_1__.jt)("500ms ease-out", (0, 
                _angular_animations__WEBPACK_IMPORTED_MODULE_1__.oB)((_c = {}, _c[propertyToAnimate] = "*", 
                _c))) ];
            }, PbiEmphasisDirective;
        }(__webpack_require__(73221).w);
    },
    76433: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            d: function() {
                return PbiEmphasisModule;
            }
        });
        var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77476), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), PbiEmphasisModule = function() {
            function PbiEmphasisModule() {}
            return PbiEmphasisModule.\u0275fac = function(t) {
                return new (t || PbiEmphasisModule);
            }, PbiEmphasisModule.\u0275mod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineNgModule"]({
                type: PbiEmphasisModule
            }), PbiEmphasisModule.\u0275inj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineInjector"]({
                imports: [ _angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule ]
            }), PbiEmphasisModule;
        }();
    }
} ]);