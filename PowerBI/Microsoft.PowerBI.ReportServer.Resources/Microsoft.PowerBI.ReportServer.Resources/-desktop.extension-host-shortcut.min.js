"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-shortcut" ], {
    11240: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostShortcutModule: function() {
                return ExtensionHostShortcutModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), map = __webpack_require__(14172), tap = __webpack_require__(17653), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), core = __webpack_require__(50423), ShortcutServiceInjectionToken = new core.InjectionToken("ShortcutService"), extension_host_shortcut_actions = __webpack_require__(19595), telemetry_service = __webpack_require__(54323), ExtensionHostShortcutEffects = function() {
            function ExtensionHostShortcutEffects(actions$, messageBroker, telemetryService, shortcutService) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.telemetryService = telemetryService, 
                this.shortcutService = shortcutService, this.onOpenCreateShortcutReceived$ = (0, 
                host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.openCreateShortcut, function(action) {
                    _this.shortcutService.createShortcut(action);
                    var shortDialogOpenEvent = {
                        name: "Open shortcut dialog load time - start",
                        properties: {
                            featureName: "Shortcuts",
                            asyncId: action.asyncId,
                            operationEndTime: (new Date).toISOString()
                        }
                    };
                    return _this.telemetryService.logEvent(shortDialogOpenEvent), index_core.Vm.openCreateShortcut.resolve({
                        value: action.asyncId
                    });
                }), this.updateShortcutResult$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.UF)(extension_host_shortcut_actions.D), (0, 
                    map.U)(function(_a) {
                        var iframeId = _a.iframeId;
                        return index_core.Vm.onShortcutWizardClosed(_a.shortcutContext)(iframeId);
                    }), (0, tap.b)(function(message) {
                        return _this.messageBroker.send(message);
                    }));
                }, {
                    dispatch: !1
                });
            }
            return ExtensionHostShortcutEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostShortcutEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](telemetry_service.t), core["\u0275\u0275inject"](ShortcutServiceInjectionToken));
            }, ExtensionHostShortcutEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostShortcutEffects,
                factory: ExtensionHostShortcutEffects.\u0275fac
            }), ExtensionHostShortcutEffects;
        }(), ExtensionHostShortcutModule = function() {
            function ExtensionHostShortcutModule() {}
            return ExtensionHostShortcutModule.\u0275fac = function(t) {
                return new (t || ExtensionHostShortcutModule);
            }, ExtensionHostShortcutModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostShortcutModule
            }), ExtensionHostShortcutModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostShortcutEffects ]) ]
            }), ExtensionHostShortcutModule;
        }();
    }
} ]);