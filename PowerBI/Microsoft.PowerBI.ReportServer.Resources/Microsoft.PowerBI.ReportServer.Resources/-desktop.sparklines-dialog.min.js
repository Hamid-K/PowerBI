"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "sparklines-dialog" ], {
    61587: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            SparklinesDialogModule: function() {
                return SparklinesDialogModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), semanticQuerySerializer = __webpack_require__(3468), fieldWellMenuViewModelFactory = __webpack_require__(67290), debug = __webpack_require__(62458), enums = __webpack_require__(46135), sqExpr = __webpack_require__(94419), sqExprStaticMembers = __webpack_require__(74082), field_list_tree_service = __webpack_require__(75096), fieldListPropertyExprGenerator = __webpack_require__(44529), rx_component = __webpack_require__(73221), template_dialog_payload_service = __webpack_require__(67489), BehaviorSubject = __webpack_require__(35510), combineLatest = __webpack_require__(59017), takeUntil = __webpack_require__(83317), filter = __webpack_require__(59973), map = __webpack_require__(14172), isMeasure = __webpack_require__(58295), core = __webpack_require__(50423), sq_aggregation_operations_service = __webpack_require__(28199), conceptual_schema_proxy_service = __webpack_require__(26898), data_sources_service = __webpack_require__(83008), exploration_display_name_service = __webpack_require__(13702), data_source_serializer_service = __webpack_require__(40823), model_to_pbi_tree_caption_strategy = __webpack_require__(29524), model_to_pbi_tree_draggable_item_strategy = __webpack_require__(88023), model_to_pbi_tree_inline_item_strategy = __webpack_require__(72525), model_to_pbi_tree_hidden_item_strategy = __webpack_require__(72193), tooltip_strategy_service = __webpack_require__(66014), grouping_design_state_service = __webpack_require__(23983), localization_service = __webpack_require__(65181), model_service = __webpack_require__(93215), common = __webpack_require__(77476), template_dialog_component = __webpack_require__(96777), localize_directive = __webpack_require__(59968), localize_attr_directive = __webpack_require__(22844), pbi_field_list_component = __webpack_require__(65005), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_field_list_menu_directive = __webpack_require__(58679), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529);
        function SparklinesDialogComponent_div_7_label_11_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "label", 18);
        }
        var _c0 = function(a0) {
            return {
                placeholderState: a0
            };
        };
        function SparklinesDialogComponent_div_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 9), core["\u0275\u0275element"](1, "label", 10), 
                core["\u0275\u0275elementStart"](2, "pbi-dropdown", 11, 12)(4, "pbi-dropdown-trigger")(5, "span", 13), 
                core["\u0275\u0275text"](6), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](7, "div", 14)(8, "pbi-field-list", 15), 
                core["\u0275\u0275listener"]("onNodeClick", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var _r4 = core["\u0275\u0275reference"](3), ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.onMeasureSelect($event, _r4));
                }), core["\u0275\u0275pipe"](9, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](10, "div", 16), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](11, SparklinesDialogComponent_div_7_label_11_Template, 1, 0, "label", 17), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var measureInput_r3 = ctx.ngIf, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("options", ctx_r0.dropdownOptions), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](10, _c0, !measureInput_r3.expr)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", measureInput_r3.displayName, " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("fieldListTree", core["\u0275\u0275pipeBind1"](9, 8, ctx_r0.fieldListTree$))("scrollSelectedItemIntoViewOnInit", !0)("hasHighlights", !1)("options", ctx_r0.fieldListTreeOptions), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", !measureInput_r3.isValid);
            }
        }
        function SparklinesDialogComponent_div_9_pbi_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 24)(1, "span"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var item_r10 = ctx.$implicit;
                core["\u0275\u0275property"]("value", item_r10), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275textInterpolate"](item_r10.displayName);
            }
        }
        function SparklinesDialogComponent_div_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r12 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 19), core["\u0275\u0275element"](1, "label", 20), 
                core["\u0275\u0275elementStart"](2, "pbi-dropdown", 21), core["\u0275\u0275listener"]("valueChange", function($event) {
                    var restoredCtx = core["\u0275\u0275restoreView"](_r12);
                    return core["\u0275\u0275resetView"](restoredCtx.ngIf.selectedAggregate = $event);
                }), core["\u0275\u0275elementStart"](3, "pbi-dropdown-trigger")(4, "span", 22), 
                core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](6, SparklinesDialogComponent_div_9_pbi_dropdown_item_6_Template, 3, 2, "pbi-dropdown-item", 23), 
                core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var aggregateInput_r8 = ctx.ngIf;
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("value", aggregateInput_r8.selectedAggregate)("isDisabled", null == aggregateInput_r8.availableAggregates), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275textInterpolate"](null == aggregateInput_r8.selectedAggregate ? null : aggregateInput_r8.selectedAggregate.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", aggregateInput_r8.availableAggregates);
            }
        }
        function SparklinesDialogComponent_div_11_label_11_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "label", 31);
        }
        function SparklinesDialogComponent_div_11_Template(rf, ctx) {
            if (1 & rf) {
                var _r17 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 25), core["\u0275\u0275element"](1, "label", 26), 
                core["\u0275\u0275elementStart"](2, "pbi-dropdown", 27, 28)(4, "pbi-dropdown-trigger")(5, "span", 13), 
                core["\u0275\u0275text"](6), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](7, "div", 29)(8, "pbi-field-list", 15), 
                core["\u0275\u0275listener"]("onNodeClick", function($event) {
                    core["\u0275\u0275restoreView"](_r17);
                    var _r14 = core["\u0275\u0275reference"](3), ctx_r16 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r16.onGroupingSelect($event, _r14));
                }), core["\u0275\u0275pipe"](9, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](10, "div", 16), 
                core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275template"](11, SparklinesDialogComponent_div_11_label_11_Template, 1, 0, "label", 30), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var groupingInput_r13 = ctx.ngIf, ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("options", ctx_r2.dropdownOptions), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](10, _c0, !groupingInput_r13.expr)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", groupingInput_r13.displayName, " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("fieldListTree", core["\u0275\u0275pipeBind1"](9, 8, ctx_r2.fieldListTree$))("scrollSelectedItemIntoViewOnInit", !0)("hasHighlights", !1)("options", ctx_r2.fieldListTreeOptions), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", !groupingInput_r13.isValid);
            }
        }
        var _c1 = function() {
            return {
                "aria-label": "Sparkline_Dialog_Description"
            };
        }, _c2 = function() {
            return {
                "aria-label": "Generic_LearnMore"
            };
        }, SparklinesDialogComponent = function(_super) {
            function SparklinesDialogComponent(aggrOps, conceptualSchemaProxy, dataSourcesService, displayNameService, fieldListTreeService, captionSetting, draggableSetting, inlineItemsSetting, groupingDesignStateService, hiddenSetting, localizationService, modelService, templateDialogPayload, tooltipStrategy, dataSourceSerializer) {
                var _this = _super.call(this) || this;
                return _this.aggrOps = aggrOps, _this.conceptualSchemaProxy = conceptualSchemaProxy, 
                _this.dataSourcesService = dataSourcesService, _this.displayNameService = displayNameService, 
                _this.fieldListTreeService = fieldListTreeService, _this.captionSetting = captionSetting, 
                _this.draggableSetting = draggableSetting, _this.inlineItemsSetting = inlineItemsSetting, 
                _this.groupingDesignStateService = groupingDesignStateService, _this.hiddenSetting = hiddenSetting, 
                _this.localizationService = localizationService, _this.modelService = modelService, 
                _this.templateDialogPayload = templateDialogPayload, _this.tooltipStrategy = tooltipStrategy, 
                _this.dataSourceSerializer = dataSourceSerializer, _this.dropdownOptions = {
                    dropdownHeight: 184
                }, _this.fieldListTree$ = _this.fieldListTreeService.fieldListTree$, _this.fieldListTreeOptions = {
                    editLabel: null,
                    tooltip: _this.tooltipStrategy
                }, _this.pbiTreeNodeSettingOptions = {
                    captionSetting: _this.captionSetting,
                    draggableSetting: _this.draggableSetting,
                    inlineItemsSetting: _this.inlineItemsSetting,
                    hiddenSetting: _this.hiddenSetting,
                    showMenuSetting: {
                        canShowMenu: function() {
                            return !1;
                        }
                    }
                }, _this.measureInput$ = new BehaviorSubject.X({
                    displayName: _this.localizationService.get("Select_A_Field"),
                    expr: void 0,
                    isValid: !0
                }), _this.groupingInput$ = new BehaviorSubject.X({
                    displayName: _this.localizationService.get("Select_A_Field"),
                    expr: void 0,
                    isValid: !0
                }), _this.aggregateInput$ = new BehaviorSubject.X({
                    availableAggregates: void 0,
                    selectedAggregate: void 0
                }), _this.fieldListTreeService.modelToPbiTreeConverterOptions = _this.pbiTreeNodeSettingOptions, 
                _this;
            }
            return (0, tslib_es6.__extends)(SparklinesDialogComponent, _super), SparklinesDialogComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dataSourceArray, selectedMeasure, measureExpr, selectedGrouping, groupingExpr, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.input = this.templateDialogPayload.input, dataSourceArray = this.dataSourceSerializer.deserializeDataSources(this.input.dataSources), 
                            this.dataSourcesService.set(dataSourceArray), (0, combineLatest.aj)([ this.measureInput$, this.groupingInput$ ]).pipe((0, 
                            takeUntil.R)(this.onDestroy$)).subscribe(function(_a) {
                                var measureInput = _a[0], dimensionInput = _a[1];
                                _this.templateDialogPayload.setOkButtonState(!(measureInput.expr && dimensionInput.expr && measureInput.isValid && dimensionInput.isValid));
                            }), (selectedMeasure = this.input.selectedMeasure) ? (measureExpr = semanticQuerySerializer.ib.deserializeExpr(selectedMeasure), 
                            [ 4, this.updateMeasureInput(measureExpr) ]) : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return (selectedGrouping = this.input.selectedGrouping) ? (groupingExpr = semanticQuerySerializer.ib.deserializeExpr(selectedGrouping), 
                            [ 4, this.updateGroupingInput(groupingExpr) ]) : [ 3, 4 ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return this.templateDialogPayload.onOkButtonClick = function() {
                                return _this.onCommit();
                            }, [ 4, this.modelService.update([]) ];

                          case 5:
                            return _a.sent(), this.modelService.modelChange$.pipe((0, filter.h)(function(fieldListModelChange) {
                                return !!(null == fieldListModelChange ? void 0 : fieldListModelChange.model);
                            }), (0, map.U)(function(fieldListModelChange) {
                                return fieldListModelChange.model;
                            }), (0, takeUntil.R)(this.onDestroy$)).subscribe(function(fieldListModel) {
                                return _this.fieldListTreeService.setOrUpdateFieldListTreeModel(fieldListModel, []);
                            }), [ 2 ];
                        }
                    });
                });
            }, SparklinesDialogComponent.prototype.ngOnDestroy = function() {
                return this.measureInput$.complete(), this.groupingInput$.complete(), this.aggregateInput$.complete(), 
                _super.prototype.ngOnDestroy.call(this);
            }, SparklinesDialogComponent.prototype.onMeasureSelect = function(flatNode, dropdown) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var expr;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getExprFromNodeSelection(flatNode) ];

                          case 1:
                            return (expr = _a.sent()) ? [ 4, this.updateMeasureInput(expr) ] : [ 2 ];

                          case 2:
                            return _a.sent(), dropdown.closeDropdown(), [ 2 ];
                        }
                    });
                });
            }, SparklinesDialogComponent.prototype.onGroupingSelect = function(flatNode, dropdown) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var expr;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.getExprFromNodeSelection(flatNode) ];

                          case 1:
                            return (expr = _a.sent()) ? [ 4, this.updateGroupingInput(expr) ] : [ 2 ];

                          case 2:
                            return _a.sent(), dropdown.closeDropdown(), [ 2 ];
                        }
                    });
                });
            }, SparklinesDialogComponent.prototype.updateMeasureInput = function(measureExpr) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, availableAggregates, aggregateItems, measureMetadata, type, selectedAggregate, measureToUse, currentSelectedAggregate_1, defaultAggregate_1, field, displayName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ];

                          case 1:
                            return schema = _a.sent(), aggregateItems = (0, fieldWellMenuViewModelFactory.Hh)(measureExpr, schema, this.aggrOps, !1, enums.DW.Measure, [ {
                                numeric: !0
                            } ], this.localizationService), _.isEmpty(aggregateItems) || (availableAggregates = _.map(aggregateItems, function(a) {
                                return {
                                    displayName: a.text,
                                    value: a.key.aggregate
                                };
                            })), measureMetadata = measureExpr.getMetadata(schema), type = null == measureMetadata ? void 0 : measureMetadata.type, 
                            (0, sqExprStaticMembers.iV)(measureExpr) && (null == type ? void 0 : type.numeric) ? (debug.fF.assertNonEmpty(availableAggregates, "if expr has aggregate set, then it should have available aggregates"), 
                            selectedAggregate = _.find(availableAggregates, function(a) {
                                return a.value === measureExpr.func;
                            })) : (measureToUse = measureExpr, (0, sqExprStaticMembers.iV)(measureExpr) && (measureToUse = measureExpr.arg), 
                            null != (currentSelectedAggregate_1 = this.aggregateInput$.value.selectedAggregate) && _.find(availableAggregates, function(a) {
                                return a.value === currentSelectedAggregate_1.value;
                            }) ? selectedAggregate = currentSelectedAggregate_1 : null != (defaultAggregate_1 = this.aggrOps.defaultAggregate(measureToUse, schema, !0, [ {
                                numeric: !0
                            } ])) && (selectedAggregate = _.find(availableAggregates, function(a) {
                                return a.value === defaultAggregate_1;
                            }))), field = (0, sqExprStaticMembers.iV)(measureExpr) ? measureExpr.arg : measureExpr, 
                            displayName = this.displayNameService.getDisplayName(field, schema, void 0), this.measureInput$.next({
                                displayName,
                                expr: field,
                                isValid: (0, sqExprStaticMembers.kb)(field) || null != selectedAggregate
                            }), this.aggregateInput$.next({
                                availableAggregates,
                                selectedAggregate
                            }), [ 2 ];
                        }
                    });
                });
            }, SparklinesDialogComponent.prototype.updateGroupingInput = function(groupingExpr) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema, displayName;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.conceptualSchemaProxy.get(this.dataSourcesService.get()) ];

                          case 1:
                            return schema = _a.sent(), displayName = this.displayNameService.getDisplayName(groupingExpr, schema, void 0), 
                            this.groupingInput$.next({
                                expr: groupingExpr,
                                displayName,
                                isValid: !(0, isMeasure.k)(groupingExpr)
                            }), [ 2 ];
                        }
                    });
                });
            }, SparklinesDialogComponent.prototype.getExprFromNodeSelection = function(flatNode) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var property, expr;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        return property = null === (_a = null == flatNode ? void 0 : flatNode.node) || void 0 === _a ? void 0 : _a.data, 
                        (expr = (0, fieldListPropertyExprGenerator.Sd)(property, this.groupingDesignStateService)) ? (0, 
                        sqExprStaticMembers.Lk)(expr) || (0, sqExprStaticMembers.y3)(expr) ? [ 2 ] : [ 2, expr ] : [ 2 ];
                    });
                });
            }, SparklinesDialogComponent.prototype.onCommit = function() {
                var _a, measureInputField = this.measureInput$.value.expr, selectedAggregate = null === (_a = this.aggregateInput$.value.selectedAggregate) || void 0 === _a ? void 0 : _a.value, groupingInputField = this.groupingInput$.value.expr, measure = null != selectedAggregate ? (0, 
                sqExpr.m_)(measureInputField, selectedAggregate) : measureInputField;
                return new Promise(function(resolve, _reject) {
                    resolve({
                        grouping: semanticQuerySerializer.ib.serializeExpr(groupingInputField),
                        measure: semanticQuerySerializer.ib.serializeExpr(measure)
                    });
                });
            }, SparklinesDialogComponent.\u0275fac = function(t) {
                return new (t || SparklinesDialogComponent)(core["\u0275\u0275directiveInject"](sq_aggregation_operations_service.C), core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](data_sources_service.D), core["\u0275\u0275directiveInject"](exploration_display_name_service.O), core["\u0275\u0275directiveInject"](field_list_tree_service.p), core["\u0275\u0275directiveInject"](model_to_pbi_tree_caption_strategy.B), core["\u0275\u0275directiveInject"](model_to_pbi_tree_draggable_item_strategy.F), core["\u0275\u0275directiveInject"](model_to_pbi_tree_inline_item_strategy.wt), core["\u0275\u0275directiveInject"](grouping_design_state_service.AA), core["\u0275\u0275directiveInject"](model_to_pbi_tree_hidden_item_strategy.J), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](model_service.b), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](tooltip_strategy_service.Z), core["\u0275\u0275directiveInject"](data_source_serializer_service._));
            }, SparklinesDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: SparklinesDialogComponent,
                selectors: [ [ "ng-component" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ field_list_tree_service.p, template_dialog_payload_service.x ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 13,
                vars: 14,
                consts: [ [ 1, "sparklineDialogContent" ], [ 1, "header" ], [ "localize", "Sparkline_Dialog_Description", "tabindex", "0", 3, "localizeAttr" ], [ "target", "_blank", "href", "https://go.microsoft.com/fwlink/?linkid=2173413", "rel", "noreferrer noopener", 1, "pbi-internal-link", 3, "localize", "localizeAttr" ], [ 1, "linkGlyph", "glyphicon", "pbi-glyph-miniexpand", "glyph-mini" ], [ 1, "inputContainer", "measureInputContainer" ], [ "class", "measureFieldContainer", 4, "ngIf" ], [ "class", "measureSummarizationContainer", 4, "ngIf" ], [ "class", "inputContainer groupingInputContainer", 4, "ngIf" ], [ 1, "measureFieldContainer" ], [ "localize", "Visual_YAxis_Hyphen", "id", "sparklineMeasureLabel" ], [ "aria-labelledby", "sparklineMeasureLabel", "aria-describedby", "sparklineMeasureError", "dropdown-type", "field-list", 3, "options" ], [ "dropdownMeasureRef", "" ], [ 1, "dropdownSelection", 3, "ngClass" ], [ 1, "sparklinesDialogFieldList", "measureFieldList" ], [ "focus-nav-mode", "Browser", 1, "fieldList", "themeableElement", 3, "fieldListTree", "scrollSelectedItemIntoViewOnInit", "hasHighlights", "options", "onNodeClick" ], [ "tabindex", "0", 1, "container-stop-bottom" ], [ "id", "sparklineMeasureError", "class", "error", "localize", "Sparkline_Dialog_InvalidY", 4, "ngIf" ], [ "id", "sparklineMeasureError", "localize", "Sparkline_Dialog_InvalidY", 1, "error" ], [ 1, "measureSummarizationContainer" ], [ "localize", "Summarization", "id", "sparklineAggregateLabel" ], [ "aria-labelledby", "sparklineAggregateLabel", 3, "value", "isDisabled", "valueChange" ], [ 1, "dropdownSelection" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 3, "value" ], [ 1, "inputContainer", "groupingInputContainer" ], [ "localize", "Visual_XAxis_Hyphen", "id", "sparklineGroupingLabel" ], [ "aria-labelledby", "sparklineGroupingLabel", "aria-describedby", "sparklineGroupingError", "dropdown-type", "field-list", 3, "options" ], [ "dropdownGroupingRef", "" ], [ 1, "sparklinesDialogFieldList" ], [ "id", "sparklineGroupingError", "class", "error", "localize", "Sparkline_Dialog_InvalidX", 4, "ngIf" ], [ "id", "sparklineGroupingError", "localize", "Sparkline_Dialog_InvalidX", 1, "error" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "section", 0)(2, "div", 1), 
                    core["\u0275\u0275element"](3, "span", 2)(4, "a", 3)(5, "i", 4), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275elementStart"](6, "div", 5), core["\u0275\u0275template"](7, SparklinesDialogComponent_div_7_Template, 12, 12, "div", 6), 
                    core["\u0275\u0275pipe"](8, "async"), core["\u0275\u0275template"](9, SparklinesDialogComponent_div_9_Template, 7, 4, "div", 7), 
                    core["\u0275\u0275pipe"](10, "async"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](11, SparklinesDialogComponent_div_11_Template, 12, 12, "div", 8), 
                    core["\u0275\u0275pipe"](12, "async"), core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](3), 
                    core["\u0275\u0275property"]("localizeAttr", core["\u0275\u0275pureFunction0"](12, _c1)), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", "Generic_LearnMore")("localizeAttr", core["\u0275\u0275pureFunction0"](13, _c2)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](8, 6, ctx.measureInput$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](10, 8, ctx.aggregateInput$)), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](12, 10, ctx.groupingInput$)));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, template_dialog_component.J, localize_directive.X, localize_attr_directive.b, pbi_field_list_component.l, pbi_dropdown_component.H, pbi_dropdown_field_list_menu_directive.I, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, common.AsyncPipe ],
                styles: [ '.sparklineDialogContent[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin-bottom:120px;max-width:400px}.sparklineDialogContent[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{line-height:initial}.sparklineDialogContent[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{margin:0 4px}.sparklineDialogContent[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .linkGlyph[_ngcontent-%COMP%]{color:var(--fluent-theme-link-color, #0078D4)}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer[_ngcontent-%COMP%]{margin-top:16px;display:flex}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]{width:100%}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer[_ngcontent-%COMP%]   pbi-dropdown[_ngcontent-%COMP%]   .dropdownSelection.placeholderState[_ngcontent-%COMP%]{color:var(--gray-130, #605E5C)}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);margin-bottom:4px}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer[_ngcontent-%COMP%]   .error[_ngcontent-%COMP%]{margin-top:4px;color:var(--fluent-theme-error-dark-color, #A80000);font-size:12px}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer.groupingInputContainer[_ngcontent-%COMP%]{flex-direction:column}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer.measureInputContainer[_ngcontent-%COMP%]   .measureFieldContainer[_ngcontent-%COMP%]{width:60%;display:flex;flex-direction:column}.sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer.measureInputContainer[_ngcontent-%COMP%]   .measureSummarizationContainer[_ngcontent-%COMP%]{flex:1;display:flex;flex-direction:column}html:not([dir="rtl"])[_nghost-%COMP%]   .sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer.measureInputContainer[_ngcontent-%COMP%]   .measureSummarizationContainer[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer.measureInputContainer[_ngcontent-%COMP%]   .measureSummarizationContainer[_ngcontent-%COMP%]{margin-left:8px}html[dir="rtl"][_nghost-%COMP%]   .sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer.measureInputContainer[_ngcontent-%COMP%]   .measureSummarizationContainer[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .sparklineDialogContent[_ngcontent-%COMP%]   .inputContainer.measureInputContainer[_ngcontent-%COMP%]   .measureSummarizationContainer[_ngcontent-%COMP%]{margin-right:8px}.sparklinesDialogFieldList[_ngcontent-%COMP%]   pbi-field-list[_ngcontent-%COMP%]{position:absolute;box-shadow:var(--fluent-shadow-depth8, 0px 0px 2px var(--colorNeutralShadowAmbient), 0px 4px 8px var(--colorNeutralShadowKey));padding:4px 4px 8px;box-sizing:border-box;width:100%;height:100%;background-color:var(--fluent-theme-white-color, #FFF);border:1px solid transparent}.container-stop-bottom[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;pointer-events:none}' ],
                changeDetection: 0
            }), SparklinesDialogComponent;
        }(rx_component.w), fesm2022_forms = __webpack_require__(17174), event_bridge_service = __webpack_require__(11494), scoped_services = __webpack_require__(42680), localization_module = __webpack_require__(79061), field_list_services_providers = __webpack_require__(41920), dialogs_module = __webpack_require__(76966), pbi_dropdown_module = __webpack_require__(6015), pbi_field_list_module = __webpack_require__(63654), pbi_search_box_module = __webpack_require__(39433), pbi_tree_module = __webpack_require__(35284), SparklinesDialogModule = function() {
            function SparklinesDialogModule() {}
            return SparklinesDialogModule.\u0275fac = function(t) {
                return new (t || SparklinesDialogModule);
            }, SparklinesDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: SparklinesDialogModule
            }), SparklinesDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], scoped_services.H, !0), field_list_services_providers.U, !0), [ data_sources_service.D, event_bridge_service.J, grouping_design_state_service.AA, model_service.b ], !1),
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: "SparklinesDialog",
                    componentType: SparklinesDialogComponent
                } ]), localization_module.v, pbi_search_box_module.t, pbi_tree_module.J, pbi_field_list_module.X, pbi_dropdown_module.C, fesm2022_forms.u5 ]
            }), SparklinesDialogModule;
        }();
    },
    58679: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            I: function() {
                return PbiDropdownFieldListMenuDirective;
            }
        });
        var pbi_field_list_component = __webpack_require__(65005), debug = __webpack_require__(62458), keyUtils = __webpack_require__(9795), combineLatest = __webpack_require__(59017), filter = __webpack_require__(59973), map = __webpack_require__(14172), switchMap = __webpack_require__(81905), takeUntil = __webpack_require__(83317), take = __webpack_require__(48787), core = __webpack_require__(50423), pbi_dropdown_service = __webpack_require__(84354), PbiDropdownFieldListStrategy = function() {
            function PbiDropdownFieldListStrategy(pbiDropdownService) {
                this.pbiDropdownService = pbiDropdownService, this.isOpen$ = this.pbiDropdownService.select$("open");
                var dropdownItems$ = this.pbiDropdownService.select$("dropdownItems"), overlayRef$ = this.pbiDropdownService.select$("overlayRef"), fieldListComponent$ = dropdownItems$.pipe((0, 
                filter.h)(function(dropdownItems) {
                    return !!dropdownItems;
                }), (0, map.U)(function(dropdownItems) {
                    return debug.fF.assert(function() {
                        return 1 === dropdownItems.length;
                    }, "Expected 1 FieldListComponent"), dropdownItems.first;
                })), fieldListRendered$ = fieldListComponent$.pipe((0, switchMap.w)(function(fieldListComponent) {
                    return fieldListComponent.onFirstRenderComplete;
                }));
                (0, combineLatest.aj)([ this.isOpen$, overlayRef$, fieldListComponent$, fieldListRendered$ ]).pipe((0, 
                takeUntil.R)(this.pbiDropdownService.onDestroy$), (0, filter.h)(function(_a) {
                    var overlayRef = _a[1];
                    return _a[0] && !!(null == overlayRef ? void 0 : overlayRef.overlayRef.overlayElement) && !!_a[2];
                })).subscribe(function(_a) {
                    _a[2].focusSearchBox();
                });
            }
            return PbiDropdownFieldListStrategy.prototype.buttonKeydown = function(event) {
                var _this = this;
                this.isOpen$.pipe((0, take.q)(1)).subscribe(function(isOpen) {
                    isOpen || (0, keyUtils.Wl)(event.keyCode) && (_this.pbiDropdownService.toggleOpenState(), 
                    event.preventDefault());
                });
            }, PbiDropdownFieldListStrategy.\u0275fac = function(t) {
                return new (t || PbiDropdownFieldListStrategy)(core["\u0275\u0275inject"](pbi_dropdown_service.S));
            }, PbiDropdownFieldListStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: PbiDropdownFieldListStrategy,
                factory: PbiDropdownFieldListStrategy.\u0275fac
            }), PbiDropdownFieldListStrategy;
        }(), scheduled = __webpack_require__(26333), queue = __webpack_require__(31343), PbiDropdownFieldListMenuDirective = function() {
            function PbiDropdownFieldListMenuDirective(pbiDropdownService, strategy) {
                this.pbiDropdownService = pbiDropdownService, this.strategy = strategy;
            }
            return PbiDropdownFieldListMenuDirective.prototype.ngAfterViewInit = function() {
                var _this = this;
                (0, scheduled.x)([ {
                    strategy: this.strategy,
                    dropdownItems: this.dropdownItems
                } ], queue.N).subscribe(function(newValues) {
                    _this.pbiDropdownService.updateState(newValues);
                });
            }, PbiDropdownFieldListMenuDirective.\u0275fac = function(t) {
                return new (t || PbiDropdownFieldListMenuDirective)(core["\u0275\u0275directiveInject"](pbi_dropdown_service.S), core["\u0275\u0275directiveInject"](PbiDropdownFieldListStrategy));
            }, PbiDropdownFieldListMenuDirective.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiDropdownFieldListMenuDirective,
                selectors: [ [ "pbi-dropdown", "dropdown-type", "field-list" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    var _t;
                    1 & rf && core["\u0275\u0275contentQuery"](dirIndex, pbi_field_list_component.l, 5), 
                    2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.dropdownItems = _t);
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ PbiDropdownFieldListStrategy ]) ]
            }), PbiDropdownFieldListMenuDirective;
        }();
    }
} ]);