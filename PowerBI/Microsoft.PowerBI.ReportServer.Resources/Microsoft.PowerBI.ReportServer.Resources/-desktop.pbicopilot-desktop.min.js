"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "pbicopilot-desktop" ], {
    57485: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            PBICopilotDesktopModule: function() {
                return PBICopilotDesktopModule;
            }
        });
        var common = __webpack_require__(77476), from = __webpack_require__(82762), core = __webpack_require__(50423), aiScenarioCompletionService = __webpack_require__(80795), CopilotScenarioDesktopService = function() {
            function CopilotScenarioDesktopService() {
                this.aiScenarioDesktopService = (0, core.inject)(aiScenarioCompletionService.$);
            }
            return CopilotScenarioDesktopService.prototype.runScenario = function(request, stream) {
                if (stream) throw Error("Streaming not yet supported");
                var response = this.aiScenarioDesktopService.complete(request);
                return (0, from.D)(response);
            }, CopilotScenarioDesktopService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: CopilotScenarioDesktopService,
                factory: CopilotScenarioDesktopService.\u0275fac = function(t) {
                    return new (t || CopilotScenarioDesktopService);
                }
            }), CopilotScenarioDesktopService;
        }(), tslib_es6 = __webpack_require__(81337), src = __webpack_require__(62345), Telemetry = __webpack_require__(21617), errorDetailsHelper = __webpack_require__(94853), events = __webpack_require__(83019), DesktopLLMService = function() {
            function DesktopLLMService() {
                this.telemetryService = (0, core.inject)(Telemetry.y0), this.aiScenarioDesktopService = (0, 
                core.inject)(aiScenarioCompletionService.$);
            }
            return DesktopLLMService.prototype.complete = function(params, usageMetadata, options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var request, usageRequest, telemetryEvent, response;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return request = (0, tslib_es6.__assign)({
                                scenarioDefinition: {
                                    aiClientCompletion: params
                                }
                            }, usageMetadata), usageRequest = this.buildCopilotUsageRequest(request, usageMetadata), 
                            telemetryEvent = this.telemetryService.startEvent(events.ob, (0, tslib_es6.__assign)({
                                promptLength: params.prompt.length
                            }, (null == options ? void 0 : options.telemetryOptions) || {})), [ 4, this.aiScenarioDesktopService.complete(usageRequest) ];

                          case 1:
                            if ((response = _a.sent()).error) throw this.logError(telemetryEvent, response.error), 
                            response;
                            return telemetryEvent.resolve(), [ 2, response ];
                        }
                    });
                });
            }, DesktopLLMService.prototype.embedding = function(request, usageMetadata, options) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var usageRequest, telemetryEvent, response;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return usageRequest = this.buildCopilotUsageRequest(request, usageMetadata), telemetryEvent = this.telemetryService.startEvent(events.yI, (0, 
                            tslib_es6.__assign)({
                                inputLength: usageRequest.input.length
                            }, (null == options ? void 0 : options.telemetryOptions) || {})), [ 4, this.aiScenarioDesktopService.embedding(usageRequest) ];

                          case 1:
                            if ((response = _a.sent()).error) throw this.logError(telemetryEvent, response.error), 
                            response;
                            return telemetryEvent.resolve(), [ 2, response ];
                        }
                    });
                });
            }, DesktopLLMService.prototype.complete$ = function(_request) {
                throw new Error("complete$ not yet implemented");
            }, DesktopLLMService.prototype.chatCompletion = function(request, usageMetadata, options) {
                var _a;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var usageRequest, telemetryOptions, model, scenarioType, numberOfMessages, messageLengths, telemetryEvent, response;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return usageRequest = this.buildCopilotUsageRequest(request, usageMetadata), telemetryOptions = (null == options ? void 0 : options.telemetryOptions) || {}, 
                            model = request.model, scenarioType = src.eH[null === (_a = request.client_scenario) || void 0 === _a ? void 0 : _a.scenario_type], 
                            numberOfMessages = usageRequest.messages.length, messageLengths = usageRequest.messages.map(function(message) {
                                return message.content ? message.content.length : 0;
                            }), telemetryEvent = this.telemetryService.startEvent(events.C_, (0, tslib_es6.__assign)({
                                numberOfMessages,
                                messageLengths,
                                scenarioType,
                                model
                            }, telemetryOptions)), [ 4, this.aiScenarioDesktopService.chatCompletion(usageRequest) ];

                          case 1:
                            if ((response = _b.sent()).error) throw this.logError(telemetryEvent, response.error), 
                            response;
                            return telemetryEvent.resolve(), [ 2, response ];
                        }
                    });
                });
            }, DesktopLLMService.prototype.buildCopilotUsageRequest = function(request, usageMetadata) {
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, request), {
                    copilotUsageMetadata: usageMetadata
                });
            }, DesktopLLMService.prototype.logError = function(telemetryEvent, error) {
                var telemetryErrorDetails;
                error && (telemetryErrorDetails = (0, errorDetailsHelper.GB)(error)), telemetryEvent.reject(telemetryErrorDetails);
            }, DesktopLLMService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DesktopLLMService,
                factory: DesktopLLMService.\u0275fac = function(t) {
                    return new (t || DesktopLLMService);
                }
            }), DesktopLLMService;
        }(), titlebar_service = __webpack_require__(66971), ReportContentCopilotDesktopService = function() {
            function ReportContentCopilotDesktopService(titlebarService) {
                this.titlebarService = titlebarService;
            }
            return ReportContentCopilotDesktopService.prototype.getReportTitle = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.titlebarService.getTitleAsync() ];
                    });
                });
            }, ReportContentCopilotDesktopService.prototype.getAvailableTokens = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        throw new Error("getAvailableTokens not available in Desktop");
                    });
                });
            }, ReportContentCopilotDesktopService.\u0275fac = function(t) {
                return new (t || ReportContentCopilotDesktopService)(core["\u0275\u0275inject"](titlebar_service.M));
            }, ReportContentCopilotDesktopService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ReportContentCopilotDesktopService,
                factory: ReportContentCopilotDesktopService.\u0275fac
            }), ReportContentCopilotDesktopService;
        }(), PBICopilotDesktopModule = function() {
            function PBICopilotDesktopModule() {}
            return PBICopilotDesktopModule.\u0275fac = function(t) {
                return new (t || PBICopilotDesktopModule);
            }, PBICopilotDesktopModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: PBICopilotDesktopModule
            }), PBICopilotDesktopModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ {
                    provide: "copilotScenarioProxyService",
                    useClass: CopilotScenarioDesktopService
                }, {
                    provide: "copilotLLMProxyService",
                    useClass: DesktopLLMService
                }, {
                    provide: "reportContentCopilotProxyService",
                    useClass: ReportContentCopilotDesktopService
                } ],
                imports: [ common.CommonModule ]
            }), PBICopilotDesktopModule;
        }();
    },
    83019: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            C_: function() {
                return CopilotChatCompletionEvent;
            },
            Cp: function() {
                return CopilotRetriableError;
            },
            H$: function() {
                return CopilotAggregationError;
            },
            I9: function() {
                return CopilotUndoSkill;
            },
            IS: function() {
                return CopilotPromptGuideAction;
            },
            Is: function() {
                return CopilotSkillSetExecution;
            },
            L3: function() {
                return CopilotUserTurn;
            },
            P0: function() {
                return CopilotFeedbackDialog;
            },
            T4: function() {
                return CopilotFeedbackDialogError;
            },
            TL: function() {
                return CopilotTurn;
            },
            Tk: function() {
                return CopilotTurnSkillExecution;
            },
            ef: function() {
                return CopilotRetrySkill;
            },
            fD: function() {
                return CopilotFeedbackDialogView;
            },
            hi: function() {
                return CopilotGetSerializedSchema;
            },
            ob: function() {
                return CopilotCompletionEvent;
            },
            wl: function() {
                return CopilotNonRetriableError;
            },
            yI: function() {
                return CopilotEmbeddingEvent;
            },
            yg: function() {
                return CopilotZeroPromptAction;
            }
        });
        var _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41114), CopilotCompletionEvent = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.CompletionEvent"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.CompletionEvent"), CopilotEmbeddingEvent = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.EmbeddingEvent"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.EmbeddingEvent"), CopilotChatCompletionEvent = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.ChatCompletionEvent"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.ChatCompletionEvent"), CopilotGetSerializedSchema = (_powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.StreamCompletionEvent"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.StreamCompletionEvent"), 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.GetSerializedSchema"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.GetSerializedSchema")), CopilotUndoSkill = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.UndoSkill"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.UndoSkill"), CopilotRetrySkill = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.RetrySkill"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.RetrySkill"), CopilotZeroPromptAction = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.ZeroPromptAction"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.ZeroPromptAction"), CopilotPromptGuideAction = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.PromptGuideAction"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.PromptGuideAction"), CopilotSkillSetExecution = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.SkillSetExecution"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.SkillSetExecution"), CopilotUserTurn = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.UserTurn"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.UserTurn"), CopilotTurn = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.CopilotTurn"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.CopilotTurn"), CopilotTurnSkillExecution = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.CopilotTurnSkillExecution"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.CopilotTurnSkillExecution"), CopilotAggregationError = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.AggregationError"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.AggregationError"), CopilotNonRetriableError = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.NonRetriableError"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.NonRetriableError"), CopilotRetriableError = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.RetriableError"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.RetriableError"), CopilotFeedbackDialog = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.FeedbackDialog"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.FeedbackDialog"), CopilotFeedbackDialogError = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.FeedbackDialogError"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.FeedbackDialogError"), CopilotFeedbackDialogView = _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.cx["PBI.Copilot.FeedbackDialogView"] = (0, 
        _powerbi_legacy_JsCommon_telemetry_powerbi_telemetryHelpers__WEBPACK_IMPORTED_MODULE_0__.b1)("PBI.Copilot.FeedbackDialogView");
    }
} ]);