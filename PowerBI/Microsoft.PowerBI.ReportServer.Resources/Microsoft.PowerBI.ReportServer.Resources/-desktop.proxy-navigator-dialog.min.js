"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "proxy-navigator-dialog" ], {
    24387: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ProxyNavigatorDialogModule: function() {
                return ProxyNavigatorDialogModule;
            }
        });
        var proxy_navigator_dialog_identifier = __webpack_require__(60693), tslib_es6 = __webpack_require__(81337), proxy_navigator_settings_dialog_identifier = __webpack_require__(43045), proxy_navigator_settings_dialog_types = __webpack_require__(36946);
        function isRemoteServer(obj) {
            return "Server" === obj.modelObjectType;
        }
        function isDatabase(obj) {
            return "Database" === obj.modelObjectType;
        }
        function isPerspective(obj) {
            return "Perspective" === obj.modelObjectType;
        }
        var debug = __webpack_require__(62458), modeling_selection_service = __webpack_require__(9738), namedModelObjectUtils = __webpack_require__(70863);
        function getRemoteItemDescendants(item, descendants) {
            if ("Server" !== item.modelObjectType) if ("Database" === item.modelObjectType) {
                item.model && (0, namedModelObjectUtils.Ie)(item.model, descendants);
                for (var _b = 0, _c = item.perspectives; _b < _c.length; _b++) getRemoteItemDescendants(_c[_b], descendants);
            } else "Perspective" !== item.modelObjectType ? (0, namedModelObjectUtils.Ie)(item, descendants) : item.model && (0, 
            namedModelObjectUtils.Ie)(item.model, descendants); else for (var _i = 0, _a = item.databases; _i < _a.length; _i++) {
                var database = _a[_i];
                descendants.push(database), getRemoteItemDescendants(database, descendants);
            }
        }
        var pbi_tree_traversal_helper = __webpack_require__(31802), core = __webpack_require__(50423), CheckStrategy = function() {
            function CheckStrategy(checkingService) {
                this.checkingService = checkingService;
            }
            return CheckStrategy.prototype.check = function(event) {
                var node = event.flatNode.node;
                this.checkingService.suspendNotification();
                var dbNode = this.fetchDatabaseNodeForGivenTreeNode(node), previouslySelectedDatabaseNode = null == dbNode ? void 0 : dbNode.parent.children.find(function(db) {
                    return db.checked || db.isIndeterminate;
                });
                dbNode && previouslySelectedDatabaseNode && dbNode.data.name !== previouslySelectedDatabaseNode.data.name && this.deselectGivenNodeAndItsChildren(previouslySelectedDatabaseNode), 
                this.checkNodeRecursively(node, event.checked), this.checkingService.resumeNotification();
            }, CheckStrategy.prototype.onChildrenAdded = function(node) {
                node.checked && this.checkNodeRecursively(node, !0);
            }, CheckStrategy.prototype.checkNodeRecursively = function(node, check) {
                var _this = this;
                check ? (0, pbi_tree_traversal_helper.r)([ node ], function(node) {
                    "Null" !== node.data.modelObjectType && (_this.checkingService.select(node.data, !1), 
                    node.isIndeterminate = !1);
                }) : ((0, pbi_tree_traversal_helper.r)([ node ], function(node) {
                    _this.checkingService.deselect(node.data), node.isIndeterminate = !1;
                }), this.normalizeSelection(node)), this.updateAncestorsCheckedAndIndeterminateState(node.parent);
            }, CheckStrategy.prototype.deselectGivenNodeAndItsChildren = function(node) {
                var _this = this;
                (0, pbi_tree_traversal_helper.r)([ node ], function(node) {
                    _this.checkingService.deselect(node.data), node.isIndeterminate = !1;
                });
            }, CheckStrategy.prototype.fetchDatabaseNodeForGivenTreeNode = function(node) {
                return "Database" === node.data.modelObjectType ? node : node.parent ? this.fetchDatabaseNodeForGivenTreeNode(node.parent) : void 0;
            }, CheckStrategy.prototype.normalizeSelection = function(lastUnselectedNode) {
                if (0 !== this.checkingService.selection.length) {
                    var selectedDatabaseNode = this.fetchDatabaseNodeForGivenTreeNode(lastUnselectedNode);
                    selectedDatabaseNode && isDatabase(selectedDatabaseNode.data) && this.uncheckAncestorsOfNodeIfNeeded(lastUnselectedNode.data, selectedDatabaseNode.data);
                }
            }, CheckStrategy.prototype.uncheckAncestorsOfNodeIfNeeded = function(lastUnselectedNode, selectedDatabase) {
                var ancestors = [];
                ((0, namedModelObjectUtils.vP)(lastUnselectedNode) || (0, namedModelObjectUtils.wb)(lastUnselectedNode) || (0, 
                namedModelObjectUtils.t3)(lastUnselectedNode) || (0, namedModelObjectUtils.kb)(lastUnselectedNode) || (0, 
                namedModelObjectUtils.y3)(lastUnselectedNode) || (0, namedModelObjectUtils.jz)(lastUnselectedNode) || (0, 
                namedModelObjectUtils.ez)(lastUnselectedNode)) && (0, namedModelObjectUtils.nP)(lastUnselectedNode, ancestors);
                var model = ancestors[ancestors.length - 1];
                debug.fF.assert(function() {
                    return !model || (0, namedModelObjectUtils.vP)(model);
                }, "last ancestor in a model must be a model");
                var perspective = selectedDatabase.perspectives.find(function(p) {
                    return p.model === model;
                });
                perspective && ancestors.push(perspective), ancestors.push(selectedDatabase), ancestors.push(selectedDatabase.server);
                for (var descendants = [], _i = 0, ancestors_1 = ancestors; _i < ancestors_1.length; _i++) {
                    var ancestor = ancestors_1[_i];
                    if (getRemoteItemDescendants(ancestor, descendants), this.hasSelectedDescendant(descendants)) return;
                    this.checkingService.isSelected(ancestor) && this.checkingService.deselect(ancestor);
                }
            }, CheckStrategy.prototype.hasSelectedDescendant = function(descendants) {
                for (var _i = 0, descendants_1 = descendants; _i < descendants_1.length; _i++) if (this.checkingService.isSelected(descendants_1[_i])) return !0;
                return !1;
            }, CheckStrategy.prototype.updateAncestorsCheckedAndIndeterminateState = function(parent) {
                var _this = this;
                (null == parent ? void 0 : parent.checkable) && (parent.children.every(function(c) {
                    return _this.checkingService.isSelected(c.data);
                }) ? (this.checkingService.select(parent.data, !1), parent.isIndeterminate = !1) : parent.children.some(function(c) {
                    return c.isIndeterminate;
                }) || this.nodeHasAnySelectedChildren(parent) && this.nodeHasAnyUnselectedChildren(parent) ? (parent.checked = !1, 
                parent.isIndeterminate = !0) : (parent.checked = !0, parent.isIndeterminate = !1), 
                this.updateAncestorsCheckedAndIndeterminateState(parent.parent));
            }, CheckStrategy.prototype.nodeHasAnySelectedChildren = function(node) {
                var _a, _this = this;
                return null === (_a = node.children) || void 0 === _a ? void 0 : _a.some(function(c) {
                    return _this.checkingService.isSelected(c.data);
                });
            }, CheckStrategy.prototype.nodeHasAnyUnselectedChildren = function(node) {
                var _a, _this = this;
                return null === (_a = node.children) || void 0 === _a ? void 0 : _a.some(function(c) {
                    return !_this.checkingService.isSelected(c.data);
                });
            }, CheckStrategy.\u0275fac = function(t) {
                return new (t || CheckStrategy)(core["\u0275\u0275inject"](modeling_selection_service.fc));
            }, CheckStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: CheckStrategy,
                factory: CheckStrategy.\u0275fac
            }), CheckStrategy;
        }(), CheckableSettingStrategy = function() {
            function CheckableSettingStrategy() {}
            return CheckableSettingStrategy.prototype.isCheckable = function(data) {
                return !(isRemoteServer(data) || (0, namedModelObjectUtils.t3)(data) || (0, namedModelObjectUtils.kb)(data) || (0, 
                namedModelObjectUtils.y3)(data) || (0, namedModelObjectUtils.ez)(data) || !(isDatabase(data) || isPerspective(data) || (0, 
                namedModelObjectUtils.wb)(data)));
            }, CheckableSettingStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: CheckableSettingStrategy,
                factory: CheckableSettingStrategy.\u0275fac = function(t) {
                    return new (t || CheckableSettingStrategy);
                }
            }), CheckableSettingStrategy;
        }(), EnabledSettingStrategy = function() {
            function EnabledSettingStrategy() {}
            return EnabledSettingStrategy.prototype.isEnabled = function(data) {
                return !!(isRemoteServer(data) || isDatabase(data) || isPerspective(data)) || 1 !== this.viewKind();
            }, EnabledSettingStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: EnabledSettingStrategy,
                factory: EnabledSettingStrategy.\u0275fac = function(t) {
                    return new (t || EnabledSettingStrategy);
                }
            }), EnabledSettingStrategy;
        }(), fieldListViewModelFactory = __webpack_require__(32518), BehaviorSubject = __webpack_require__(35510), localization_service = __webpack_require__(65181), ProxyModelService = function() {
            function ProxyModelService(localizationService) {
                this.localizationService = localizationService, this.modelUpdates = new BehaviorSubject.X({
                    schema: void 0,
                    model: void 0,
                    appliedChanges: void 0
                });
            }
            return ProxyModelService.prototype.update = function(changes, schema) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var model;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return model = new fieldListViewModelFactory.O(this.localizationService).createModel(schema, !1), 
                        this.modelUpdates.next({
                            schema,
                            model,
                            appliedChanges: changes
                        }), [ 2 ];
                    });
                });
            }, Object.defineProperty(ProxyModelService.prototype, "modelChange$", {
                get: function() {
                    return this.modelUpdates.asObservable();
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ProxyModelService.prototype, "model", {
                get: function() {
                    return this.modelUpdates.value.model;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ProxyModelService.prototype, "schema", {
                get: function() {
                    return this.modelUpdates.value.schema;
                },
                enumerable: !1,
                configurable: !0
            }), ProxyModelService.\u0275fac = function(t) {
                return new (t || ProxyModelService)(core["\u0275\u0275inject"](localization_service.o));
            }, ProxyModelService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ProxyModelService,
                factory: ProxyModelService.\u0275fac
            }), ProxyModelService;
        }(), constants = __webpack_require__(2142), OfflineCollection = function() {
            function OfflineCollection(items) {
                this.items = items;
            }
            return OfflineCollection.prototype[Symbol.iterator] = function() {
                return this.getItems()[Symbol.iterator]();
            }, OfflineCollection.prototype.contains = function(item) {
                return this.getItems().some(function(i) {
                    return i === item;
                });
            }, OfflineCollection.prototype.filter = function(filterFunction) {
                return this.getItems().filter(filterFunction);
            }, OfflineCollection.prototype.getItems = function() {
                return this.items;
            }, OfflineCollection.prototype.find = function(findFunction) {
                return this.items.find(findFunction);
            }, OfflineCollection.prototype.findByName = function(name) {
                return this.items.find(function(n) {
                    return n.name === name;
                });
            }, OfflineCollection.prototype.findByUrn = function(urn) {
                return this.items.find(function(n) {
                    return n.urn === urn;
                });
            }, OfflineCollection.prototype.push = function() {
                for (var _a, items = [], _i = 0; _i < arguments.length; _i++) items[_i] = arguments[_i];
                return (_a = this.items).push.apply(_a, items);
            }, OfflineCollection.prototype.unshift = function() {
                for (var _a, items = [], _i = 0; _i < arguments.length; _i++) items[_i] = arguments[_i];
                return (_a = this.items).unshift.apply(_a, items);
            }, Object.defineProperty(OfflineCollection.prototype, "length", {
                get: function() {
                    return this.items.length;
                },
                enumerable: !1,
                configurable: !0
            }), OfflineCollection;
        }(), pbi_tree_options = __webpack_require__(16789), SearchStrategy = function() {
            function SearchStrategy(defaultSearchStrategy) {
                this.defaultSearchStrategy = defaultSearchStrategy;
            }
            return SearchStrategy.prototype.applySearchState = function(_a) {
                this.defaultSearchStrategy.applySearchState({
                    tree: _a.tree,
                    term: _a.term
                });
            }, SearchStrategy.prototype.search = function(_a) {
                var flatNodes = _a.flatNodes, search = _a.search;
                return flatNodes = flatNodes.filter(function(flatNode) {
                    var _a;
                    return "Null" !== (null === (_a = flatNode.node.data) || void 0 === _a ? void 0 : _a.modelObjectType);
                }), this.defaultSearchStrategy.search({
                    flatNodes,
                    search
                });
            }, SearchStrategy.\u0275fac = function(t) {
                return new (t || SearchStrategy)(core["\u0275\u0275inject"](pbi_tree_options.XI));
            }, SearchStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: SearchStrategy,
                factory: SearchStrategy.\u0275fac
            }), SearchStrategy;
        }(), model_object_tooltip_component = __webpack_require__(46227), model_object_tooltip_factory = __webpack_require__(65534), TooltipStrategy = function() {
            function TooltipStrategy(localizationService, modelObjectTooltipFactory) {
                this.localizationService = localizationService, this.modelObjectTooltipFactory = modelObjectTooltipFactory, 
                this.tooltipCaretSize = "small", this.tooltipPosition = "above";
            }
            return TooltipStrategy.prototype.getTooltip = function() {
                return model_object_tooltip_component.x;
            }, TooltipStrategy.prototype.getTooltipComponentData = function(event) {
                var data = event.flatNode.node.data;
                switch (data.modelObjectType) {
                  case "Database":
                    return this.populateTooltipForDatabase(data);

                  case "Server":
                    return this.populateTooltipForServer(data);

                  case "Perspective":
                    return this.populateTooltipForPerspective(data);

                  default:
                    return this.modelObjectTooltipFactory.getTooltipData(data);
                }
            }, TooltipStrategy.prototype.populateTooltipForServer = function(server) {
                return [ {
                    title: this.localizationService.get("Name"),
                    value: server.displayName
                }, {
                    title: this.localizationService.get("Databases"),
                    value: this.localizationService.formatValue(server.databases.length)
                } ];
            }, TooltipStrategy.prototype.populateTooltipForDatabase = function(database) {
                return this.getRemoteModelTooltipData(database);
            }, TooltipStrategy.prototype.populateTooltipForPerspective = function(perspective) {
                return this.getRemoteModelTooltipData(perspective);
            }, TooltipStrategy.prototype.getRemoteModelTooltipData = function(remoteItem) {
                var model = remoteItem.model, data = [];
                return remoteItem.lastModifiedDate && data.push({
                    title: this.localizationService.get("Modified"),
                    value: remoteItem.lastModifiedDate
                }), model && (data.push({
                    title: this.localizationService.get("Tables"),
                    value: "".concat(model.tables.length)
                }), data.push({
                    title: this.localizationService.get("TaskPane_Fields"),
                    value: this.localizationService.formatValue(_.reduce(remoteItem.model.tables.getItems(), function(total, t) {
                        return total + t.measures.length + t.columns.length;
                    }, 0))
                })), remoteItem.description && data.push({
                    title: this.localizationService.get("Description"),
                    value: remoteItem.description
                }), data;
            }, TooltipStrategy.\u0275fac = function(t) {
                return new (t || TooltipStrategy)(core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](model_object_tooltip_factory.n));
            }, TooltipStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: TooltipStrategy,
                factory: TooltipStrategy.\u0275fac
            }), TooltipStrategy;
        }(), dialog = __webpack_require__(32293), urn_builder = __webpack_require__(12985), model_to_pbi_tree_converter = __webpack_require__(47458), pbi_tree_check_state_updater = __webpack_require__(19326), feature_switch_service = __webpack_require__(9380), RemoteModelFieldListTreeService = function() {
            function RemoteModelFieldListTreeService(localizationService, featureSwitchService) {
                this.localizationService = localizationService, this.featureSwitchService = featureSwitchService, 
                this._fieldListTree$ = new BehaviorSubject.X(void 0), this.fieldListTree$ = this._fieldListTree$.asObservable();
            }
            return Object.defineProperty(RemoteModelFieldListTreeService.prototype, "fieldListTreeModel", {
                get: function() {
                    return this._fieldListTree$.value;
                },
                enumerable: !1,
                configurable: !0
            }), RemoteModelFieldListTreeService.prototype.initialize = function(server, serverViewKind, checkedItems) {
                var serverNode = new model_to_pbi_tree_converter.l(this.localizationService, this.featureSwitchService, this.modelToPbiTreeConverterOptions).convertServerToPbiTreeNode(server, serverViewKind);
                this.setTree({
                    nodes: [ serverNode ],
                    parent: void 0
                }), this.updateChecked(checkedItems, !0);
            }, RemoteModelFieldListTreeService.prototype.updateNodeChildren = function(model, parentNode, checkedItems) {
                var pbiTreeConverter = new model_to_pbi_tree_converter.l(this.localizationService, this.featureSwitchService, this.modelToPbiTreeConverterOptions);
                parentNode.children = pbiTreeConverter.convertModelToPbiTreeNodes(model, parentNode), 
                this.updateChecked(checkedItems, !0);
            }, RemoteModelFieldListTreeService.prototype.updateChecked = function(checkedItems, shouldUpdateIndeterminateCheckboxes) {
                this.fieldListTreeModel && void 0 !== checkedItems && ((0, pbi_tree_check_state_updater.Z)(this.fieldListTreeModel, checkedItems, this.localizationService.get("FieldList_HasCheckedDecsendantsLabel"), !1), 
                shouldUpdateIndeterminateCheckboxes && this.updateIndeterminateCheckboxes(this.fieldListTreeModel.nodes), 
                this.updateDisabled(), this.update());
            }, RemoteModelFieldListTreeService.prototype.updateIndeterminateCheckboxes = function(nodes) {
                for (var nextLevelNodes = [], _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                    var node = nodes_1[_i];
                    node.children && (nextLevelNodes.push.apply(nextLevelNodes, node.children), node.checkable && node.children.some(function(c) {
                        return c.checked;
                    }) && node.children.some(function(c) {
                        return !c.checked;
                    }) && (node.isIndeterminate = !0, node.checked = !1, this.updateAncestorsIndeterminateState(node.parent)));
                }
                nextLevelNodes.length && this.updateIndeterminateCheckboxes(nextLevelNodes);
            }, RemoteModelFieldListTreeService.prototype.updateAncestorsIndeterminateState = function(parent) {
                (null == parent ? void 0 : parent.checkable) && (parent.isIndeterminate = !0, parent.checked = !1, 
                this.updateAncestorsIndeterminateState(parent.parent));
            }, RemoteModelFieldListTreeService.prototype.updateDisabled = function() {
                var databases = this.fieldListTreeModel.nodes[0].children;
                databases.every(function(db) {
                    return db.children.every(function(child) {
                        return "Perspective" === child.data.modelObjectType;
                    });
                }) && databases.forEach(function(db) {
                    var _a;
                    (null === (_a = db.children) || void 0 === _a ? void 0 : _a.some(function(perspective) {
                        return perspective.checked;
                    })) ? db.children.forEach(function(perspective) {
                        return perspective.disabled = !perspective.checked;
                    }) : db.children.forEach(function(perspective) {
                        return perspective.disabled = !1;
                    });
                });
            }, RemoteModelFieldListTreeService.prototype.update = function() {
                this._fieldListTree$.next((0, tslib_es6.__assign)({}, this.fieldListTreeModel));
            }, RemoteModelFieldListTreeService.prototype.setTree = function(tree) {
                this._fieldListTree$.next(tree);
            }, RemoteModelFieldListTreeService.\u0275fac = function(t) {
                return new (t || RemoteModelFieldListTreeService)(core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](feature_switch_service.vZ));
            }, RemoteModelFieldListTreeService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: RemoteModelFieldListTreeService,
                factory: RemoteModelFieldListTreeService.\u0275fac
            }), RemoteModelFieldListTreeService;
        }(), model_to_pbi_tree_inline_item_strategy = __webpack_require__(72525), model_to_pbi_tree_hidden_item_strategy = __webpack_require__(72193), model_to_pbi_tree_show_menu_strategy = __webpack_require__(78963), pbi_tree_contracts = __webpack_require__(46015), Subscription = __webpack_require__(34763), conceptual_schema_proxy_service = __webpack_require__(26898), model_to_pbi_tree_caption_strategy = __webpack_require__(29524), model_to_pbi_tree_draggable_item_strategy = __webpack_require__(88023), host_interop_registry_service = __webpack_require__(39119), DirectLakeService = function() {
            function DirectLakeService(hostInteropRegistry) {
                this.hostService = hostInteropRegistry.getHostService("directLakeDesktopHostService");
            }
            return DirectLakeService.prototype.getDirectLakeAsync = function(datamartObjectId) {
                return this.hostService.getDirectLake(datamartObjectId);
            }, DirectLakeService.\u0275fac = function(t) {
                return new (t || DirectLakeService)(core["\u0275\u0275inject"](host_interop_registry_service.j));
            }, DirectLakeService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DirectLakeService,
                factory: DirectLakeService.\u0275fac,
                providedIn: "root"
            }), DirectLakeService;
        }(), dialog_service = __webpack_require__(58938), common = __webpack_require__(77476), localize_directive = __webpack_require__(59968), pbi_tree_component = __webpack_require__(37196), fesm2022_forms = __webpack_require__(17174), pbi_dropdown_component = __webpack_require__(76492), pbi_dropdown_item_component = __webpack_require__(42189), pbi_dropdown_item_menu_directive = __webpack_require__(9529), pbi_icon_component = __webpack_require__(86663), pbi_search_box_component = __webpack_require__(68070), dialog_header_component = __webpack_require__(45051), dialog_body_component = __webpack_require__(53833), dialog_footer_component = __webpack_require__(44511), localize_pipe = __webpack_require__(85102);
        function ProxyNavigatorDialogComponent_ng_container_6_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275elementContainer"](0);
        }
        function ProxyNavigatorDialogComponent_pbi_dropdown_item_7_ng_container_1_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275elementContainer"](0);
        }
        var _c0 = function(a0) {
            return {
                disabled: a0
            };
        }, _c1 = function(a0) {
            return {
                $implicit: a0
            };
        };
        function ProxyNavigatorDialogComponent_pbi_dropdown_item_7_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "pbi-dropdown-item", 22), core["\u0275\u0275template"](1, ProxyNavigatorDialogComponent_pbi_dropdown_item_7_ng_container_1_Template, 1, 0, "ng-container", 3), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var viewMapping_r5 = ctx.$implicit;
                core["\u0275\u0275nextContext"]();
                var _r3 = core["\u0275\u0275reference"](33);
                core["\u0275\u0275property"]("value", viewMapping_r5.key)("disabled", viewMapping_r5.value.disabled())("ngClass", core["\u0275\u0275pureFunction1"](5, _c0, viewMapping_r5.value.disabled())), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngTemplateOutlet", _r3)("ngTemplateOutletContext", core["\u0275\u0275pureFunction1"](7, _c1, viewMapping_r5.value));
            }
        }
        function ProxyNavigatorDialogComponent_ng_template_32_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 23), core["\u0275\u0275element"](1, "pbi-icon", 24), 
            core["\u0275\u0275elementStart"](2, "span"), core["\u0275\u0275text"](3), core["\u0275\u0275elementEnd"]()()), 
            2 & rf) {
                var serverView_r7 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("name", serverView_r7.iconName), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](serverView_r7.displayName);
            }
        }
        var ProxyNavigatorDialogComponent = function() {
            function ProxyNavigatorDialogComponent(dialogRef, localizationService, conceptualSchemaProxy, captionSetting, draggableSetting, inlineItemsSetting, showMenuSetting, checkableSetting, enabledSetting, hiddenSetting, fieldListTreeService, modelService, checkStrategy, tooltipStrategy, directLakeService, data, searchStrategy, checkingService, modernDialogService) {
                var serverName, server, _this = this;
                this.dialogRef = dialogRef, this.localizationService = localizationService, this.conceptualSchemaProxy = conceptualSchemaProxy, 
                this.captionSetting = captionSetting, this.draggableSetting = draggableSetting, 
                this.inlineItemsSetting = inlineItemsSetting, this.showMenuSetting = showMenuSetting, 
                this.checkableSetting = checkableSetting, this.enabledSetting = enabledSetting, 
                this.hiddenSetting = hiddenSetting, this.fieldListTreeService = fieldListTreeService, 
                this.modelService = modelService, this.checkStrategy = checkStrategy, this.tooltipStrategy = tooltipStrategy, 
                this.directLakeService = directLakeService, this.searchStrategy = searchStrategy, 
                this.checkingService = checkingService, this.modernDialogService = modernDialogService, 
                this.subscription = new Subscription.w, this.checkMode = pbi_tree_contracts.kH.Multi, 
                this.canIncludeFutureArtifacts = !0, this.enableDisambiguationPreferences = !1, 
                this.canSubmit = !1, this.canRefresh = !1, this.serverViewKindToViewInfoMappings = new Map, 
                this.otherServerViewSelectionCache = [], this.fieldListTree$ = this.fieldListTreeService.fieldListTree$, 
                this.fieldListOptions = {
                    check: this.checkStrategy,
                    search: this.searchStrategy,
                    editLabel: null,
                    tooltip: this.tooltipStrategy
                }, this.pbiTreeNodeSettingOptions = {
                    captionSetting: this.captionSetting,
                    draggableSetting: this.draggableSetting,
                    inlineItemsSetting: this.inlineItemsSetting,
                    enabledSetting: this.enabledSetting,
                    showMenuSetting: this.showMenuSetting,
                    checkableSetting: this.checkableSetting,
                    hiddenSetting: this.hiddenSetting
                }, this.inlineItemsSetting.addHiddenItemsOnly = !0, this.inlineItemsSetting.hideInlineItemTooltip = "Field_ShowHiddenFieldInProxyNavigator", 
                this.hiddenSetting.showHiddenFields = function() {
                    return 0 === _this.selectedServerViewKind;
                }, this.enabledSetting.viewKind = function() {
                    return _this.selectedServerViewKind;
                }, this.fieldListTreeService.modelToPbiTreeConverterOptions = this.pbiTreeNodeSettingOptions, 
                this.selectedServerViewKind = 0, this.server = ((server = {
                    canDelete: !1,
                    canEdit: !1,
                    databases: [],
                    displayName: serverName = data.serverName,
                    modelObjectType: "Server",
                    name: serverName,
                    schemaName: serverName,
                    urn: serverName
                }).databases = data.databases.map(function(d) {
                    return function(server, node) {
                        var _a, dataSource, databaseUrn = "".concat(server.urn, "/databases/").concat(node.name);
                        if ("lakehouse" === node.dataSourceType) {
                            var offlineDataSource = {
                                id: 0,
                                name: "offlineMode",
                                isOfflineMode: !0
                            };
                            offlineDataSource.datamartObjectId = node.modelId, dataSource = offlineDataSource;
                        } else dataSource = {
                            id: parseInt(node.modelId, 10),
                            name: databaseUrn,
                            type: constants.nKy,
                            dsr: {
                                schemaName: databaseUrn,
                                modelId: parseInt(node.modelId, 10)
                            }
                        };
                        var database = {
                            server,
                            canDelete: !1,
                            canEdit: !1,
                            displayName: node.name,
                            description: node.description,
                            lastModifiedDate: node.lastModifiedDate,
                            modelObjectType: "Database",
                            name: node.name,
                            modelRequested: !1,
                            canMaterializeModelFromDatasource: !0,
                            model: void 0,
                            dataSource,
                            perspectives: [],
                            schemaName: databaseUrn,
                            urn: databaseUrn
                        };
                        return (_a = database.perspectives).push.apply(_a, node.perspectives.map(function(p) {
                            return function(database, node) {
                                var urn = "".concat(database.urn, "/perspectives/").concat(node.name);
                                return {
                                    database,
                                    canDelete: !1,
                                    canEdit: !1,
                                    displayName: node.name,
                                    description: node.description,
                                    lastModifiedDate: node.lastModifiedDate,
                                    modelObjectType: "Perspective",
                                    name: node.name,
                                    model: void 0,
                                    canMaterializeModelFromDatasource: !0,
                                    modelRequested: !1,
                                    dataSource: {
                                        id: parseInt(node.modelId, 10),
                                        name: urn,
                                        type: constants.nKy,
                                        dsr: {
                                            modelId: parseInt(node.modelId, 10),
                                            schemaName: urn
                                        }
                                    },
                                    schemaName: urn,
                                    urn
                                };
                            }(database, p);
                        })), database;
                    }(server, d);
                }), server), this.serverViewKindToViewInfoMappings.set(0, {
                    iconName: "databaseicon",
                    description: this.localizationService.get("ProxyNavigator_Description_Databases"),
                    displayName: this.localizationService.get("Databases"),
                    disabled: function() {
                        return !1;
                    }
                }), this.serverViewKindToViewInfoMappings.set(1, {
                    iconName: "pbiperspective",
                    description: this.localizationService.get("ProxyNavigator_Description_Perspectives"),
                    displayName: this.localizationService.get("Perspectives"),
                    disabled: function() {
                        return !_this.server.databases.some(function(db) {
                            return db.perspectives.length > 0;
                        });
                    }
                }), this.fieldListTreeService.fieldListTree$.subscribe(function(t) {
                    return _this.fieldListTree = t;
                }), this.initialSelection = data.initialSelection;
            }
            return Object.defineProperty(ProxyNavigatorDialogComponent.prototype, "selectedServerView", {
                get: function() {
                    return this.serverViewKindToViewInfoMappings.get(this.selectedServerViewKind);
                },
                enumerable: !1,
                configurable: !0
            }), ProxyNavigatorDialogComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.subscription.add(this.checkingService.selectionChanged.subscribe(function(checked) {
                                _this.fieldListTreeService.updateChecked(checked, !1), _this.updateCanSubmit();
                            })), this.fieldListTreeService.initialize(this.server, this.selectedServerViewKind, this.checkingService.selection), 
                            [ 4, this.loadInitialSelection() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.loadInitialSelection = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var selectedDatabaseNode, selectedDatabase, selectedModelObjectIds, unselectedModelObjectIds, _i, _a, modelObject, modelObjectId, checkedItems, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.initialSelection ? (this.includeFutureArtifacts = this.initialSelection.includeFutureArtifacts, 
                            this.initializeDisambiguationPreferences(this.initialSelection.disambiguationPreferences), 
                            (selectedDatabaseNode = this.findTreeNodeByName(this.initialSelection.databaseName, "Database")) ? (selectedDatabaseNode.expanded = !0, 
                            selectedDatabase = selectedDatabaseNode.data, this.initialSelection.perspectiveName ? [ 3, 3 ] : [ 4, this.populateModel(selectedDatabase) ]) : [ 2 ]) : [ 2 ];

                          case 1:
                            for (_b.sent(), selectedModelObjectIds = [], unselectedModelObjectIds = [], _i = 0, 
                            _a = this.initialSelection.modelObjects; _i < _a.length; _i++) modelObjectId = {
                                name: this.getTableNameFromUrn((modelObject = _a[_i]).urn),
                                lineageTag: modelObject.lineageTag
                            }, modelObject.selected ? selectedModelObjectIds.push(modelObjectId) : unselectedModelObjectIds.push(modelObjectId);
                            return [ 4, this.getPreCheckedTreeItems(selectedDatabase, this.initialSelection.includeFutureArtifacts, selectedModelObjectIds, unselectedModelObjectIds) ];

                          case 2:
                            return (checkedItems = _b.sent()).forEach(function(ci) {
                                return _this.checkingService.select(ci, !1);
                            }), this.fieldListTreeService.updateNodeChildren(selectedDatabase.model, selectedDatabaseNode, checkedItems), 
                            [ 3, 5 ];

                          case 3:
                            return this.onServerViewChanged(1), [ 4, this.getPreCheckedTreeItems(selectedDatabase, void 0, [], [], this.initialSelection.perspectiveName) ];

                          case 4:
                            (checkedItems = _b.sent()).forEach(function(ci) {
                                return _this.checkingService.select(ci, !1);
                            }), this.fieldListTreeService.updateChecked(checkedItems, !0), _b.label = 5;

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.ngOnDestroy = function() {
                this.subscription.unsubscribe();
            }, ProxyNavigatorDialogComponent.prototype.onServerViewChanged = function(kind) {
                if (this.selectedServerViewKind !== kind) {
                    this.selectedServerViewKind = kind, this.canIncludeFutureArtifacts = 0 === this.selectedServerViewKind, 
                    this.canIncludeFutureArtifacts ? this.includeFutureArtifacts = this.includeFutureArtifactsRestorationValue : (this.includeFutureArtifactsRestorationValue = this.includeFutureArtifacts, 
                    this.includeFutureArtifacts = !0);
                    var selection = this.otherServerViewSelectionCache;
                    this.otherServerViewSelectionCache = this.checkingService.selection, this.checkingService.selectAll(selection, !0), 
                    this.fieldListTreeService.initialize(this.server, this.selectedServerViewKind, this.checkingService.selection);
                }
            }, ProxyNavigatorDialogComponent.prototype.onNodeExpanded = function(flatNode) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var nodeData;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return flatNode.node.expanded && (nodeData = flatNode.node.data) && nodeData.canMaterializeModelFromDatasource && !nodeData.modelRequested ? 1 === this.selectedServerViewKind && "Database" === nodeData.modelObjectType ? [ 2 ] : [ 4, this.populateModel(nodeData) ] : [ 2 ];

                          case 1:
                            return _a.sent(), this.fieldListTreeService.updateNodeChildren(nodeData.model, flatNode.node, this.checkingService.selection), 
                            this.checkStrategy.onChildrenAdded(flatNode.node), [ 2 ];
                        }
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.onCancel = function() {
                this.dialogRef.close();
            }, ProxyNavigatorDialogComponent.prototype.updateCanSubmit = function() {
                this.canSubmit = this.checkingService.selection.length > 0;
            }, ProxyNavigatorDialogComponent.prototype.onSubmit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var selectedDatabaseNode, result;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (selectedDatabaseNode = this.fieldListTree.nodes[0].children.find(function(db) {
                                return db.checked || db.isIndeterminate;
                            })) ? selectedDatabaseNode.data.modelRequested || 0 !== this.selectedServerViewKind ? [ 3, 2 ] : [ 4, this.populateModel(selectedDatabaseNode.data) ] : [ 2, this.dialogRef.close() ];

                          case 1:
                            _a.sent(), this.fieldListTreeService.updateNodeChildren(selectedDatabaseNode.data.model, selectedDatabaseNode, selectedDatabaseNode.data.model.tables.getItems()), 
                            _a.label = 2;

                          case 2:
                            return (result = this.getResults(selectedDatabaseNode)) ? (this.dialogRef.close({
                                selection: result
                            }), [ 2 ]) : [ 2, this.dialogRef.close() ];
                        }
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.openSettingsDialog = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var result, e_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _a.trys.push([ 0, 3, , 4 ]), [ 4, this.modernDialogService.openHostDialog({
                                componentName: proxy_navigator_settings_dialog_identifier.S,
                                dialogName: proxy_navigator_settings_dialog_identifier.S,
                                bindings: {
                                    initialSelection: {
                                        includeFutureArtifacts: this.includeFutureArtifacts,
                                        enableDisambiguationPreferences: this.enableDisambiguationPreferences,
                                        disambiguationPreferences: this.disambiguationPreferences
                                    },
                                    canIncludeFutureArtifacts: this.canIncludeFutureArtifacts
                                }
                            }) ];

                          case 1:
                            return [ 4, _a.sent().afterClosed().toPromise() ];

                          case 2:
                            return (result = _a.sent()) ? (this.populateFromSettingsDialog(result), [ 3, 4 ]) : [ 2 ];

                          case 3:
                            return e_1 = _a.sent(), debug.fF.assertFail("Proxy navigator settings dialog failed to open"), 
                            debug.fF.log(e_1), [ 3, 4 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.getPreCheckedTreeItems = function(selectedDatabase, includeFutureArtifacts, selectedModelObjectIds, unselectedModelObjectIds, selectedPerspectiveName) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var checked, selectedPerspective, selectedTables;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return checked = [], selectedPerspectiveName ? (selectedPerspective = this.findTreeNodeByName(selectedPerspectiveName, "Perspective").data) && checked.push(selectedPerspective) : (selectedModelObjectIds.length || unselectedModelObjectIds.length) && (selectedTables = this.getDatabaseSelectedTables(selectedDatabase, includeFutureArtifacts, selectedModelObjectIds, unselectedModelObjectIds), 
                        checked.push.apply(checked, selectedTables)), checked.length && checked.push(selectedDatabase), 
                        [ 2, checked ];
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.findTreeNodeByName = function(name, objectType) {
                return (0, pbi_tree_traversal_helper.Q)(this.fieldListTree.nodes, function(node) {
                    var _a, _b;
                    return (null === (_a = node.data) || void 0 === _a ? void 0 : _a.name) === name && (null === (_b = node.data) || void 0 === _b ? void 0 : _b.modelObjectType) === objectType;
                }, function(node) {
                    var _a;
                    return (null === (_a = node.data) || void 0 === _a ? void 0 : _a.modelObjectType) !== objectType;
                });
            }, ProxyNavigatorDialogComponent.prototype.getDatabaseSelectedTables = function(database, includeFutureArtifacts, selectedModelObjectIds, unselectedModelObjectIds) {
                var _this = this;
                return includeFutureArtifacts ? database.model.tables.getItems().filter(function(t) {
                    return !unselectedModelObjectIds.some(function(e) {
                        return _this.checkTableMatchesId(t, e);
                    });
                }) : database.model.tables.getItems().filter(function(t) {
                    return selectedModelObjectIds.some(function(e) {
                        return _this.checkTableMatchesId(t, e);
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.checkTableMatchesId = function(table, id) {
                return !(table.lineageTag && !id.lineageTag || !table.lineageTag && id.lineageTag) && (table.lineageTag ? table.lineageTag === id.lineageTag : this.getTableNameFromUrn(table.urn) === id.name);
            }, ProxyNavigatorDialogComponent.prototype.getTableNameFromUrn = function(urn) {
                if (urn) {
                    var indexOfTableName = urn.toLowerCase().indexOf("/table/") + 7;
                    return decodeURIComponent(urn.substring(indexOfTableName));
                }
            }, ProxyNavigatorDialogComponent.prototype.getResults = function(selectedDatabaseNode) {
                var selectedPerspectiveNode, modelObjects = [];
                if (0 === this.selectedServerViewKind) {
                    if ((modelObjects = selectedDatabaseNode.children.map(function(t) {
                        var table = t.data;
                        return {
                            selected: t.checked,
                            urn: urn_builder.X6.getTableUrn(table.name, table.schemaName),
                            lineageTag: table.lineageTag
                        };
                    })).every(function(obj) {
                        return !obj.selected;
                    })) return;
                } else if (!(selectedPerspectiveNode = selectedDatabaseNode.children.find(function(p) {
                    return p.checked;
                }))) return;
                return {
                    databaseName: selectedDatabaseNode.displayName,
                    includeFutureArtifacts: this.includeFutureArtifacts,
                    modelObjects: selectedPerspectiveNode ? [] : modelObjects,
                    perspectiveName: null == selectedPerspectiveNode ? void 0 : selectedPerspectiveNode.displayName,
                    disambiguationPreferences: this.enableDisambiguationPreferences ? this.disambiguationPreferences : null
                };
            }, ProxyNavigatorDialogComponent.prototype.populateModel = function(materializableModel) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var schema;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return materializableModel.modelRequested = !0, materializableModel.dataSource.isOfflineMode ? [ 4, this.directLakeService.getDirectLakeAsync(materializableModel.dataSource.datamartObjectId) ] : [ 3, 2 ];

                          case 1:
                            return function(model, database) {
                                var tables = [];
                                database.model = {
                                    tables: new OfflineCollection(tables),
                                    version: "",
                                    modelObjectType: "Model",
                                    name: "",
                                    schemaName: "",
                                    displayName: "",
                                    canEdit: !1,
                                    canDelete: !1,
                                    urn: ""
                                };
                                for (var _i = 0, _a = model.tables; _i < _a.length; _i++) {
                                    var table = _a[_i], newTable = {
                                        name: table.name,
                                        modelObjectType: "Table",
                                        model: database.model,
                                        columns: new OfflineCollection([]),
                                        measures: new OfflineCollection([]),
                                        hierarchies: new OfflineCollection([]),
                                        kpis: new OfflineCollection([]),
                                        partitions: new OfflineCollection([]),
                                        description: "",
                                        isCalculatedTable: !1,
                                        isMeasureGroup: !1,
                                        isErrorState: !1,
                                        isHidden: !1,
                                        canEditSource: !1,
                                        canRename: !1,
                                        canRefreshIndependently: !1,
                                        canHaveMeasures: !1,
                                        supportManageRelationships: !1,
                                        isDateTable: !1,
                                        schemaName: "",
                                        displayName: "",
                                        canEdit: !1,
                                        canDelete: !1,
                                        urn: table.name,
                                        lineageTag: table.lineageTag
                                    };
                                    tables.push(newTable);
                                }
                            }(_a.sent(), this.server.databases[0]), [ 3, 5 ];

                          case 2:
                            return [ 4, this.conceptualSchemaProxy.get([ materializableModel.dataSource ]) ];

                          case 3:
                            return schema = _a.sent(), [ 4, this.modelService.update([], schema) ];

                          case 4:
                            _a.sent(), materializableModel.model = this.modelService.model, _a.label = 5;

                          case 5:
                            return [ 2 ];
                        }
                    });
                });
            }, ProxyNavigatorDialogComponent.prototype.populateFromSettingsDialog = function(dialogResult) {
                this.includeFutureArtifacts = dialogResult.includeFutureArtifacts, this.enableDisambiguationPreferences = dialogResult.enableDisambiguationPreferences, 
                this.disambiguationPreferences = dialogResult.disambiguationPreferences;
            }, ProxyNavigatorDialogComponent.prototype.initializeDisambiguationPreferences = function(initialPreferences) {
                if (initialPreferences) {
                    var targetedModelObjectsString = initialPreferences.targetedModelObjects.toString(), targetedModelObjects = proxy_navigator_settings_dialog_types.S[targetedModelObjectsString], modeString = initialPreferences.mode.toString();
                    this.disambiguationPreferences = {
                        text: initialPreferences.text,
                        isPrefix: initialPreferences.isPrefix,
                        targetedModelObjects,
                        mode: proxy_navigator_settings_dialog_types.x[modeString]
                    }, this.enableDisambiguationPreferences = !0;
                }
            }, ProxyNavigatorDialogComponent.\u0275fac = function(t) {
                return new (t || ProxyNavigatorDialogComponent)(core["\u0275\u0275directiveInject"](dialog.so), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](conceptual_schema_proxy_service.i), core["\u0275\u0275directiveInject"](model_to_pbi_tree_caption_strategy.B), core["\u0275\u0275directiveInject"](model_to_pbi_tree_draggable_item_strategy.F), core["\u0275\u0275directiveInject"](model_to_pbi_tree_inline_item_strategy.VI), core["\u0275\u0275directiveInject"](model_to_pbi_tree_show_menu_strategy.W), core["\u0275\u0275directiveInject"](CheckableSettingStrategy), core["\u0275\u0275directiveInject"](EnabledSettingStrategy), core["\u0275\u0275directiveInject"](model_to_pbi_tree_hidden_item_strategy.J), core["\u0275\u0275directiveInject"](RemoteModelFieldListTreeService), core["\u0275\u0275directiveInject"](ProxyModelService), core["\u0275\u0275directiveInject"](CheckStrategy), core["\u0275\u0275directiveInject"](TooltipStrategy), core["\u0275\u0275directiveInject"](DirectLakeService), core["\u0275\u0275directiveInject"](dialog.WI), core["\u0275\u0275directiveInject"](SearchStrategy), core["\u0275\u0275directiveInject"](modeling_selection_service.fc), core["\u0275\u0275directiveInject"](dialog_service.x));
            }, ProxyNavigatorDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ProxyNavigatorDialogComponent,
                selectors: [ [ "proxy-navigator-dialog" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ CheckStrategy, model_object_tooltip_factory.n, TooltipStrategy, RemoteModelFieldListTreeService, ProxyModelService, SearchStrategy, EnabledSettingStrategy, pbi_tree_options.XI, model_to_pbi_tree_inline_item_strategy.VI, model_to_pbi_tree_hidden_item_strategy.J, CheckableSettingStrategy, EnabledSettingStrategy, {
                    provide: model_to_pbi_tree_show_menu_strategy.W,
                    useClass: model_to_pbi_tree_show_menu_strategy.w
                }, {
                    provide: modeling_selection_service.fc,
                    useClass: modeling_selection_service.$x
                } ]) ],
                decls: 34,
                vars: 32,
                consts: [ [ 3, "title", "close" ], [ 1, "header" ], [ 1, "server-view-dropdown", 3, "ngModel", "ngModelChange" ], [ 4, "ngTemplateOutlet", "ngTemplateOutletContext" ], [ 3, "value", "disabled", "ngClass", 4, "ngFor", "ngForOf" ], [ 3, "hidden" ], [ 1, "refresh-button", "pbi-fluent-button", "fluentTheme-md-reg" ], [ "name", "refresh", "size", "small" ], [ "localize", "Refresh" ], [ 1, "divider" ], [ 1, "search-box" ], [ "pbiSearchInput", "", 1, "pbi-focus-outline", "pbi-focus-outline", "search-box-input", 3, "placeholder", "keyup" ], [ "searchInput", "" ], [ 1, "settings" ], [ "aria-label", "settings", 1, "settings-button", "pbi-fluent-button", "fluentTheme-md-reg", 3, "click" ], [ "name", "settings", "size", "small" ], [ "localize", "Settings", 1, "settings-text" ], [ "id", "ConnectData_Description", 1, "description" ], [ "aria-describedby", "ConnectData_Description", "localize", "LearnMore", "href", "https://go.microsoft.com/fwlink/?linkid=2167320", "target", "_blank", 1, "pbi-external-link" ], [ "focus-nav-mode", "Browser", 1, "navigator-field-list", 3, "search", "tree", "options", "checkMode", "onNodeExpansionToggle" ], [ 3, "okText", "disableOk", "okAction", "cancelAction" ], [ "serverViewOptionTemplate", "" ], [ 3, "value", "disabled", "ngClass" ], [ 1, "server-view-option" ], [ "size", "small", 3, "name" ] ],
                template: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275elementStart"](0, "dialog-header", 0), core["\u0275\u0275listener"]("close", function() {
                        return ctx.onCancel();
                    }), core["\u0275\u0275pipe"](1, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](2, "dialog-body")(3, "div", 1)(4, "pbi-dropdown", 2), 
                    core["\u0275\u0275listener"]("ngModelChange", function($event) {
                        return ctx.onServerViewChanged($event);
                    }), core["\u0275\u0275elementStart"](5, "pbi-dropdown-trigger"), core["\u0275\u0275template"](6, ProxyNavigatorDialogComponent_ng_container_6_Template, 1, 0, "ng-container", 3), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](7, ProxyNavigatorDialogComponent_pbi_dropdown_item_7_Template, 2, 9, "pbi-dropdown-item", 4), 
                    core["\u0275\u0275pipe"](8, "keyvalue"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](9, "div", 5)(10, "button", 6), 
                    core["\u0275\u0275element"](11, "pbi-icon", 7)(12, "span", 8), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275element"](13, "div", 9), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](14, "pbi-search-box", 10)(15, "input", 11, 12), 
                    core["\u0275\u0275listener"]("keyup", function() {
                        return null;
                    }), core["\u0275\u0275pipe"](17, "localize"), core["\u0275\u0275pipe"](18, "localize"), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](19, "div", 13), 
                    core["\u0275\u0275element"](20, "div", 9), core["\u0275\u0275elementStart"](21, "button", 14), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.openSettingsDialog();
                    }), core["\u0275\u0275element"](22, "pbi-icon", 15)(23, "span", 16), core["\u0275\u0275elementEnd"]()()(), 
                    core["\u0275\u0275elementStart"](24, "p", 17), core["\u0275\u0275text"](25), core["\u0275\u0275element"](26, "a", 18), 
                    core["\u0275\u0275pipe"](27, "localize"), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](28, "pbi-tree", 19), 
                    core["\u0275\u0275listener"]("onNodeExpansionToggle", function($event) {
                        return ctx.onNodeExpanded($event);
                    }), core["\u0275\u0275pipe"](29, "async"), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](30, "dialog-footer", 20), 
                    core["\u0275\u0275listener"]("okAction", function() {
                        return ctx.onSubmit();
                    })("cancelAction", function() {
                        return ctx.onCancel();
                    }), core["\u0275\u0275pipe"](31, "localize"), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275template"](32, ProxyNavigatorDialogComponent_ng_template_32_Template, 4, 2, "ng-template", null, 21, core["\u0275\u0275templateRefExtractor"])), 
                    2 & rf) {
                        var _r2 = core["\u0275\u0275reference"](16), _r3 = core["\u0275\u0275reference"](33);
                        core["\u0275\u0275property"]("title", core["\u0275\u0275pipeBind1"](1, 16, "TutorialPopup_ConnectDataTitle")), 
                        core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngModel", ctx.selectedServerViewKind), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngTemplateOutlet", _r3)("ngTemplateOutletContext", core["\u0275\u0275pureFunction1"](30, _c1, ctx.selectedServerView)), 
                        core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](8, 18, ctx.serverViewKindToViewInfoMappings)), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("hidden", !ctx.canRefresh), 
                        core["\u0275\u0275advance"](6), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](18, 22, "SearchBox_Text")), 
                        core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](17, 20, "SearchBox_Text")), 
                        core["\u0275\u0275advance"](10), core["\u0275\u0275textInterpolate1"](" ", ctx.selectedServerView.description, " "), 
                        core["\u0275\u0275advance"](1), core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](27, 24, "LearnMore")), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("search", _r2.value)("tree", core["\u0275\u0275pipeBind1"](29, 26, ctx.fieldListTree$))("options", ctx.fieldListOptions)("checkMode", ctx.checkMode), 
                        core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("okText", core["\u0275\u0275pipeBind1"](31, 28, "Submit"))("disableOk", !ctx.canSubmit);
                    }
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgTemplateOutlet, localize_directive.X, pbi_tree_component.u, fesm2022_forms.JJ, fesm2022_forms.On, pbi_dropdown_component.H, pbi_dropdown_item_component.r, pbi_dropdown_item_menu_directive._, pbi_dropdown_component.T, pbi_icon_component._, pbi_search_box_component.a, pbi_search_box_component.p, dialog_header_component.A, dialog_body_component.H, dialog_footer_component.g, common.AsyncPipe, common.KeyValuePipe, localize_pipe.F ],
                styles: [ '[_nghost-%COMP%]{display:flex;flex-direction:column;height:100%;padding:24px;width:520px;box-sizing:border-box}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{display:flex}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .server-view-dropdown[_ngcontent-%COMP%]{width:160px}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .refresh-button[_ngcontent-%COMP%]{display:flex;align-items:center;border:none;margin-left:4px;padding-left:8px;padding-right:8px}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .refresh-button[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{margin-right:4px}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .divider[_ngcontent-%COMP%]{display:flex;align-self:center;width:1px;height:calc(100% - 12px);margin-right:4px;margin-left:4px;background-color:var(--gray-60, #C8C6C4)}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .search-box[_ngcontent-%COMP%]{display:flex;margin-right:4px}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .search-box[_ngcontent-%COMP%]:before{font-size:16px}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .search-box-input[_ngcontent-%COMP%]{border-color:transparent}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .settings[_ngcontent-%COMP%]{display:flex}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .settings[_ngcontent-%COMP%]   .settings-button[_ngcontent-%COMP%]{border-color:transparent;display:flex;align-items:center;border:none;padding-left:8px;padding-right:8px;cursor:pointer}dialog-body[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]   .settings[_ngcontent-%COMP%]   .settings-button[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{display:flex;margin-right:8px}dialog-body[_ngcontent-%COMP%]   .navigator-field-list[_ngcontent-%COMP%]{display:block;height:350px;margin-bottom:5px}.server-view-option[_ngcontent-%COMP%]{display:flex;align-items:center;font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif)}.server-view-option[_ngcontent-%COMP%]   pbi-icon[_ngcontent-%COMP%]{display:flex;margin-right:4px}' ]
            }), ProxyNavigatorDialogComponent;
        }(), localization_module = __webpack_require__(79061), dialogs_parts_module = __webpack_require__(96327), dialogs_module = __webpack_require__(76966), pbi_checkbox_module = __webpack_require__(47913), pbi_dropdown_module = __webpack_require__(6015), pbi_icon_module = __webpack_require__(93367), pbi_search_box_module = __webpack_require__(39433), pbi_tree_module = __webpack_require__(35284), ProxyNavigatorDialogModule = function() {
            function ProxyNavigatorDialogModule() {}
            return ProxyNavigatorDialogModule.\u0275fac = function(t) {
                return new (t || ProxyNavigatorDialogModule);
            }, ProxyNavigatorDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ProxyNavigatorDialogModule
            }), ProxyNavigatorDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, localization_module.v, pbi_tree_module.J, fesm2022_forms.u5, pbi_checkbox_module.V, pbi_dropdown_module.C, pbi_icon_module.U, pbi_search_box_module.t, dialogs_parts_module.F, dialogs_module.c.withManifest([ {
                    componentIdentifier: proxy_navigator_dialog_identifier.O,
                    componentType: ProxyNavigatorDialogComponent
                } ]) ]
            }), ProxyNavigatorDialogModule;
        }();
    },
    36946: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            S: function() {
                return TargetedModelObjects;
            },
            x: function() {
                return ModelObjectNameDisambiguationMode;
            }
        });
        var TargetedModelObjects = function(TargetedModelObjects) {
            return TargetedModelObjects[TargetedModelObjects.None = 0] = "None", TargetedModelObjects[TargetedModelObjects.Tables = 1] = "Tables", 
            TargetedModelObjects[TargetedModelObjects.Measures = 2] = "Measures", TargetedModelObjects[TargetedModelObjects.All = 3] = "All", 
            TargetedModelObjects;
        }({}), ModelObjectNameDisambiguationMode = function(ModelObjectNameDisambiguationMode) {
            return ModelObjectNameDisambiguationMode.Always = "Always", ModelObjectNameDisambiguationMode.ConflictOnly = "ConflictOnly", 
            ModelObjectNameDisambiguationMode;
        }({});
    }
} ]);