"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-access-management" ], {
    35750: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostAccessManagementModule: function() {
                return ExtensionHostAccessManagementModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), tslib_es6 = __webpack_require__(81337), combineLatest = __webpack_require__(59017), from = __webpack_require__(82762), throwError = __webpack_require__(60225), of = __webpack_require__(11547), switchMap = __webpack_require__(81905), filter = __webpack_require__(59973), take = __webpack_require__(48787), map = __webpack_require__(14172), tap = __webpack_require__(17653), catchError = __webpack_require__(59822), mergeMap = __webpack_require__(42195), artifact_type = (__webpack_require__(41838), 
        __webpack_require__(8697), __webpack_require__(50600));
        function getSharingError_TypeNotSupportedError(artifactType) {
            return {
                name: "SharingNotSupportedException",
                message: "Sharing not supported for type ".concat(artifactType)
            };
        }
        var core = __webpack_require__(50423), artifact_access_data_service_injection_token_TriArtifactAccessDataServiceInjectionToken = new core.InjectionToken("TriArtifactAccessDataService"), artifact_access_dialog_service_injection_token_TriArtifactAccessDialogServiceInjectionToken = new core.InjectionToken("TriArtifactAccessDialogService"), artifact_direct_access_service_injection_token_TriArtifactDirectAccessServiceInjectionToken = new core.InjectionToken("TriArtifactDirectAccessService"), artifact_permissions_service_injection_token_TriArtifactPermissionsServiceInjectionToken = new core.InjectionToken("TriArtifactPermissionsService"), SharingEntryPoint = (new core.InjectionToken("TriSharingUtilsService"), 
        function(SharingEntryPoint) {
            return SharingEntryPoint.QuickAction = "QuickAction", SharingEntryPoint.ContextMenu = "ContextMenu", 
            SharingEntryPoint.ManagePermissionPage = "ManagePermissionPage", SharingEntryPoint.ManagePermissionPanel = "ManagePermissionPanel", 
            SharingEntryPoint.ExtensionClientAPI = "ExtensionClientAPI", SharingEntryPoint.InArtifactComponent = "InArtifactComponent", 
            SharingEntryPoint.EditLinkPanel = "EditLinkPanel", SharingEntryPoint;
        }({})), index_core = (new core.InjectionToken("TriArtifactAccessRequestService"), 
        new core.InjectionToken("TriArtifactPermissionNavigationService"), new core.InjectionToken("TriArtifactSharingService"), 
        new core.InjectionToken("TriArtifactAccessTelemetryService"), new core.InjectionToken("TriUserPhotoService"), 
        __webpack_require__(73471)), host_message_broker_src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), manifest_src = __webpack_require__(67758), folder_service = __webpack_require__(18438), lazy_provider_service = __webpack_require__(6814), telemetry_service = __webpack_require__(54323), ExtensionHostAccessManagementEffects = function() {
            function ExtensionHostAccessManagementEffects(actions$, extensionManifestService, messageBroker, telemetryService, lazyProvider, folderService) {
                var _this = this;
                this.actions$ = actions$, this.extensionManifestService = extensionManifestService, 
                this.messageBroker = messageBroker, this.telemetryService = telemetryService, this.lazyProvider = lazyProvider, 
                this.folderService = folderService, this.onOpenArtifactSharingDialogReceived$ = (0, 
                ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.pR)(index_core.Vm.openArtifactSharingDialog), (0, 
                    switchMap.w)(function(_a) {
                        var artifactType = _a.artifactType, artifactObjectId = _a.artifactObjectId, linkSharing = _a.linkSharing, preSelectedUserPrincipals = _a.preSelectedUserPrincipals, defaultShareOptions = _a.defaultShareOptions, customizedTitle = _a.customizedTitle;
                        return (0, combineLatest.aj)([ (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_access_data_service_injection_token_TriArtifactAccessDataServiceInjectionToken)), (0, 
                        from.D)(_this.genericSharingSupported(artifactType)) ]).pipe((0, switchMap.w)(function(_a) {
                            return _a[1] ? _a[0].getArtifactDetails(artifactType, artifactObjectId) : (0, throwError._)(getSharingError_TypeNotSupportedError(artifactType));
                        }), (0, filter.h)(function(artifactDetails) {
                            return null == artifactDetails ? void 0 : artifactDetails.artifact;
                        }), (0, take.q)(1), (0, map.U)(function(_a) {
                            var artifact = _a.artifact;
                            return {
                                sharingInput: {
                                    artifactName: artifact.displayName,
                                    artifactType,
                                    artifactObjectId,
                                    folderObjectId: artifact.folderObjectId,
                                    userCorePermissions: artifact.permissions,
                                    userArtifactPermissions: artifact.artifactPermissions,
                                    preSelectedUserPrincipals,
                                    defaultShareOptions,
                                    customizedTitle,
                                    sharingEntryPoint: SharingEntryPoint.ExtensionClientAPI
                                },
                                linkSharing: null == linkSharing || linkSharing
                            };
                        }), (0, switchMap.w)(function(_a) {
                            var sharingInput = _a.sharingInput, linkSharing = _a.linkSharing;
                            return (sharingInput.userCorePermissions & index_core.Pl.ReShare) !== index_core.Pl.ReShare ? (0, 
                            throwError._)({
                                name: "LackOfReSharePermissionException",
                                message: "ReShare permission is needed for this action"
                            }) : (0, of.of)({
                                sharingInput,
                                linkSharing
                            });
                        }));
                    }), (0, tap.b)(function(_a) {
                        var sharingInput = _a.sharingInput, linkSharing = _a.linkSharing;
                        return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                            var artifactAccessDialogService;
                            return (0, tslib_es6.__generator)(this, function(_b) {
                                switch (_b.label) {
                                  case 0:
                                    return [ 4, this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_access_dialog_service_injection_token_TriArtifactAccessDialogServiceInjectionToken) ];

                                  case 1:
                                    return artifactAccessDialogService = _b.sent(), linkSharing ? artifactAccessDialogService.openSharingDialog(sharingInput) : artifactAccessDialogService.openGrantAccessDialog(sharingInput), 
                                    [ 2 ];
                                }
                            });
                        });
                    }), (0, catchError.K)(function(error) {
                        return _this.telemetryService.logEvent({
                            name: "PermissionsAPI.openArtifactSharingDialog",
                            properties: {
                                error
                            }
                        }), (0, throwError._)(error);
                    }));
                }, {
                    dispatch: !1
                }), this.onOpenArtifactSharingDialogWithResultReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.openArtifactSharingDialogWithResult, function(_a) {
                    var artifactType = _a.artifactType, artifactObjectId = _a.artifactObjectId, linkSharing = _a.linkSharing, preSelectedUserPrincipals = _a.preSelectedUserPrincipals, defaultShareOptions = _a.defaultShareOptions, customizedTitle = _a.customizedTitle;
                    return (0, from.D)(_this.genericSharingSupported(artifactType)).pipe((0, switchMap.w)(function(sharingSupported) {
                        return sharingSupported ? (0, combineLatest.aj)([ (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_access_data_service_injection_token_TriArtifactAccessDataServiceInjectionToken)).pipe((0, 
                        switchMap.w)(function(artifactAccessDataService) {
                            return artifactAccessDataService.getArtifactDetails(artifactType, artifactObjectId).pipe((0, 
                            filter.h)(function(artifactDetails) {
                                return null == artifactDetails ? void 0 : artifactDetails.artifact;
                            }));
                        })), (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_access_dialog_service_injection_token_TriArtifactAccessDialogServiceInjectionToken)) ]) : (0, 
                        throwError._)(getSharingError_TypeNotSupportedError(artifactType));
                    }), (0, take.q)(1), (0, map.U)(function(_a) {
                        var artifact = _a[0].artifact;
                        return [ {
                            sharingInput: {
                                artifactName: artifact.displayName,
                                artifactType,
                                artifactObjectId,
                                folderObjectId: artifact.folderObjectId,
                                userCorePermissions: artifact.permissions,
                                userArtifactPermissions: artifact.artifactPermissions,
                                preSelectedUserPrincipals,
                                defaultShareOptions,
                                customizedTitle,
                                sharingEntryPoint: SharingEntryPoint.ExtensionClientAPI
                            },
                            linkSharing: null == linkSharing || linkSharing
                        }, _a[1] ];
                    }), (0, switchMap.w)(function(_a) {
                        var _b = _a[0], sharingInput = _b.sharingInput, linkSharing = _b.linkSharing, artifactAccessDialogService = _a[1];
                        return (sharingInput.userCorePermissions & index_core.Pl.ReShare) !== index_core.Pl.ReShare ? (0, 
                        throwError._)({
                            name: "LackOfReSharePermissionException",
                            message: "ReShare permission is needed for this action"
                        }) : (0, from.D)(linkSharing ? artifactAccessDialogService.openSharingDialog(sharingInput) : artifactAccessDialogService.openGrantAccessDialog(sharingInput));
                    }), (0, map.U)(function(result) {
                        return index_core.Vm.openArtifactSharingDialogWithResult.resolve((null == result ? void 0 : result.sharingCompleted) ? result : {
                            sharingCompleted: !1
                        });
                    }), (0, catchError.K)(function(error) {
                        return (0, of.of)(index_core.Vm.openArtifactSharingDialogWithResult.reject({
                            error
                        }));
                    }));
                }), this.onCheckPermissionsOfArtifactReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.checkPermissionsOfArtifact, function(_a) {
                    var artifactType = _a.artifactType, artifactObjectId = _a.artifactObjectId, permissions = _a.permissions, artifactPermissions = _a.artifactPermissions;
                    return (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_access_data_service_injection_token_TriArtifactAccessDataServiceInjectionToken)).pipe((0, 
                    switchMap.w)(function(artifactAccessDataService) {
                        return artifactAccessDataService.getArtifactDetails(artifactType, artifactObjectId);
                    }), (0, take.q)(1), (0, map.U)(function(_a) {
                        var artifact = _a.artifact;
                        return index_core.Vm.checkPermissionsOfArtifact.resolve({
                            value: !!artifact && (artifact.permissions & permissions) === permissions && (artifact.artifactPermissions & artifactPermissions) === artifactPermissions
                        });
                    }), (0, catchError.K)(function(error) {
                        return _this.telemetryService.logEvent({
                            name: "PermissionsAPI.checkPermissionsOfArtifact",
                            properties: {
                                error,
                                artifactType,
                                artifactObjectId,
                                permissions,
                                artifactPermissions
                            }
                        }), (0, of.of)(index_core.Vm.checkPermissionsOfArtifact.reject({
                            error
                        }));
                    }));
                }), this.onCheckPermissionsOfWorkspaceReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.checkPermissionsOfWorkspace, function(_a) {
                    var permissions = _a.permissions, workspace = _this.folderService.getFolder(_a.workspaceObjectId);
                    return index_core.Vm.checkPermissionsOfWorkspace.resolve(workspace ? {
                        value: (workspace.contract.permissions & permissions) === permissions
                    } : {
                        value: !1
                    });
                }), this.onGetPermissionsOfArtifactReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getPermissionsOfArtifact, function(_a) {
                    var artifactType = _a.artifactType, artifactObjectId = _a.artifactObjectId;
                    return (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_access_data_service_injection_token_TriArtifactAccessDataServiceInjectionToken)).pipe((0, 
                    switchMap.w)(function(artifactAccessDataService) {
                        return artifactAccessDataService.getArtifactDetails(artifactType, artifactObjectId);
                    }), (0, take.q)(1), (0, map.U)(function(_a) {
                        var _b, artifact = _a.artifact;
                        return index_core.Vm.getPermissionsOfArtifact.resolve(artifact ? {
                            permissions: artifact.permissions,
                            artifactPermissions: null !== (_b = artifact.artifactPermissions) && void 0 !== _b ? _b : 0
                        } : {
                            permissions: index_core.Pl.None,
                            artifactPermissions: 0
                        });
                    }), (0, catchError.K)(function(error) {
                        return _this.telemetryService.logEvent({
                            name: "PermissionsAPI.getPermissionsOfArtifact",
                            properties: {
                                error,
                                artifactType,
                                artifactObjectId
                            }
                        }), (0, of.of)(index_core.Vm.getPermissionsOfArtifact.reject({
                            error
                        }));
                    }));
                }), this.onGetPermissionsOfArtifactByUserReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getPermissionsOfArtifactByUser, function(_a) {
                    var artifactObjectId = _a.artifactObjectId, userObjectIds = _a.userObjectIds;
                    return (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_direct_access_service_injection_token_TriArtifactDirectAccessServiceInjectionToken)).pipe((0, 
                    switchMap.w)(function(artifactDirectAccessService) {
                        return artifactDirectAccessService.getPermissionUsers(artifactObjectId, artifact_type.B.Artifact, void 0, !1);
                    }), (0, take.q)(1), (0, map.U)(function(permissionUsers) {
                        var permissionUserList = [];
                        return userObjectIds.forEach(function(userObjectId) {
                            var _a, _b, _c, _d, permissionUser = permissionUsers.filter(function(permissionUser) {
                                return permissionUser.objectId === userObjectId;
                            });
                            permissionUserList.push({
                                userObjectId,
                                permissions: null !== (_b = null === (_a = permissionUser[0]) || void 0 === _a ? void 0 : _a.permission) && void 0 !== _b ? _b : index_core.Pl.None,
                                artifactPermissions: null !== (_d = null === (_c = permissionUser[0]) || void 0 === _c ? void 0 : _c.artifactPermissions) && void 0 !== _d ? _d : 0
                            });
                        }), index_core.Vm.getPermissionsOfArtifactByUser.resolve({
                            permissionsOfArtifactByUserList: permissionUserList
                        });
                    }), (0, catchError.K)(function(error) {
                        var event = {
                            name: "PermissionsAPI.getPermissionsOfArtifactByUser",
                            properties: {
                                error,
                                artifactObjectId,
                                userObjectIds: JSON.stringify(userObjectIds)
                            }
                        };
                        return _this.telemetryService.logEvent(event), (0, of.of)(index_core.Vm.getPermissionsOfArtifactByUser.reject({
                            error
                        }));
                    }));
                }), this.onGetPermissionsOfWorkspaceReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getPermissionsOfWorkspace, function(_a) {
                    var workspace = _this.folderService.getFolder(_a.workspaceObjectId);
                    return index_core.Vm.getPermissionsOfWorkspace.resolve(workspace ? {
                        permissions: workspace.contract.permissions
                    } : {
                        permissions: index_core.Pl.None
                    });
                }), this.onCheckArtifactSharingEnabledReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.checkArtifactSharingEnabled, function(_a) {
                    var artifactType = _a.artifactType, artifactObjectId = _a.artifactObjectId;
                    return (0, combineLatest.aj)([ (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactAccess/trident-artifact-access.module#TridentArtifactAccessModule", artifact_access_data_service_injection_token_TriArtifactAccessDataServiceInjectionToken)).pipe((0, 
                    switchMap.w)(function(artifactAccessDataService) {
                        return artifactAccessDataService.getArtifactDetails(artifactType, artifactObjectId);
                    }), (0, take.q)(1)), (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactPermissions/trident-artifact-permissions.module#TridentArtifactPermissionsModule", artifact_permissions_service_injection_token_TriArtifactPermissionsServiceInjectionToken)) ]).pipe((0, 
                    mergeMap.zg)(function(_a) {
                        var artifact = _a[0].artifact;
                        return artifact ? (0, from.D)(_a[1].sharingEnabledForCurrentUser(artifactType, artifact.permissions, artifact.artifactPermissions)).pipe((0, 
                        map.U)(function(enabled) {
                            return index_core.Vm.checkArtifactSharingEnabled.resolve({
                                value: enabled
                            });
                        })) : (0, of.of)(index_core.Vm.checkArtifactSharingEnabled.resolve({
                            value: !1
                        }));
                    }), (0, catchError.K)(function(error) {
                        return _this.telemetryService.logEvent({
                            name: "PermissionsAPI.checkArtifactSharingEnabled",
                            properties: {
                                error,
                                artifactType,
                                artifactObjectId
                            }
                        }), (0, of.of)(index_core.Vm.checkArtifactSharingEnabled.reject({
                            error
                        }));
                    }));
                }), this.onGetArtifactTypeShareablePermissionsReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getArtifactTypeShareablePermissions, function(_a) {
                    var artifactType = _a.artifactType;
                    return (0, from.D)(_this.lazyProvider.get("@powerbi/TridentArtifactPermissions/trident-artifact-permissions.module#TridentArtifactPermissionsModule", artifact_permissions_service_injection_token_TriArtifactPermissionsServiceInjectionToken)).pipe((0, 
                    switchMap.w)(function(artifactPermissionsService) {
                        return (0, of.of)(index_core.Vm.getArtifactTypeShareablePermissions.resolve({
                            corePermissions: artifactPermissionsService.getShareableCorePermissions(artifactType),
                            artifactPermissions: artifactPermissionsService.getShareableArtifactPermissions(artifactType)
                        }));
                    }));
                });
            }
            return ExtensionHostAccessManagementEffects.prototype.genericSharingSupported = function(artifactType) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.extensionManifestService.isTridentArtifact(artifactType) ];

                          case 1:
                            return [ 2, _a.sent() || [ "datamart", "data-warehouse", "lake-warehouse", "mounted-warehouse" ].includes(artifactType) ];
                        }
                    });
                });
            }, ExtensionHostAccessManagementEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostAccessManagementEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](manifest_src.vC), core["\u0275\u0275inject"](host_message_broker_src.u), core["\u0275\u0275inject"](telemetry_service.t), core["\u0275\u0275inject"](lazy_provider_service.rn), core["\u0275\u0275inject"](folder_service.D));
            }, ExtensionHostAccessManagementEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostAccessManagementEffects,
                factory: ExtensionHostAccessManagementEffects.\u0275fac
            }), ExtensionHostAccessManagementEffects;
        }(), ExtensionHostAccessManagementModule = function() {
            function ExtensionHostAccessManagementModule() {}
            return ExtensionHostAccessManagementModule.\u0275fac = function(t) {
                return new (t || ExtensionHostAccessManagementModule);
            }, ExtensionHostAccessManagementModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostAccessManagementModule
            }), ExtensionHostAccessManagementModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostAccessManagementEffects ]) ]
            }), ExtensionHostAccessManagementModule;
        }();
    }
} ]);