"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-artifact-settings" ], {
    67683: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            createExtensionHostArtifactSettingsModule: function() {
                return createExtensionHostArtifactSettingsModule;
            }
        });
        var common = __webpack_require__(77476), core = __webpack_require__(50423), ngrx_effects = __webpack_require__(60756), tslib_es6 = __webpack_require__(81337), of = __webpack_require__(11547), map = __webpack_require__(14172), tap = __webpack_require__(17653), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), extension_host_artifact_settings_actions = __webpack_require__(21945), GetIFrameIdsInjectionToken = new core.InjectionToken("GetIFrameIds"), GetArtifactSettingsObjectIdInjectionToken = new core.InjectionToken("GetArtifactSettingsObjectId"), ngrx_store = __webpack_require__(85732), telemetry_service = __webpack_require__(54323), ExtensionHostArtifactSettingsEffects = function() {
            function ExtensionHostArtifactSettingsEffects(actions$, messageBroker, store, telemetryService, getIFrameIds, getArtifactSettingsObjectId) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.store = store, 
                this.telemetryService = telemetryService, this.getIFrameIds = getIFrameIds, this.getArtifactSettingsObjectId = getArtifactSettingsObjectId, 
                this.onOpenArtifactSettingsReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.openArtifactSettings, function(_a) {
                    var artifact = _a.artifact, selectedSettingId = _a.selectedSettingId;
                    return _this.store.dispatch(extension_host_artifact_settings_actions.zD({
                        artifact,
                        selectedSettingId
                    })), _this.telemetryService.logStandardFeatureEvent({
                        originatingService: "DataCloudUX",
                        activityName: "Detail settings",
                        featureName: "Artifact settings",
                        activityAttributes: {
                            selectedTab: selectedSettingId || "About",
                            artifactType: artifact.artifactType
                        }
                    }), (0, of.of)(index_core.Vm.openArtifactSettings.resolve({
                        value: !0
                    }));
                }), this.onResizeIframeHeightReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.resizeIframeHeight, function(_a) {
                    return _this.store.dispatch(extension_host_artifact_settings_actions.s0({
                        iframeHeight: _a.iframeHeight,
                        artifactId: _a.artifactId
                    })), (0, of.of)(index_core.Vm.resizeIframeHeight.resolve({
                        value: !0
                    }));
                }), this.openArtifactSettings$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.UF)(extension_host_artifact_settings_actions.zD), (0, 
                    map.U)(function(_a) {
                        var artifact = _a.artifact, selectedSettingId = _a.selectedSettingId, artifactSettingsEvent = {
                            name: "Load Artifact settings - start",
                            properties: {
                                operationEndTime: (new Date).toISOString(),
                                artifactObjectId: artifact.objectId,
                                featureName: "Artifact settings",
                                originatingService: "DataCloudUX",
                                selectedSettingId
                            }
                        };
                        return _this.telemetryService.logEvent(artifactSettingsEvent), extension_host_artifact_settings_actions.iJ({
                            visible: !0
                        });
                    }));
                }), this.closeArtifactSettings$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.UF)(extension_host_artifact_settings_actions.Eg), (0, 
                    tap.b)(function(_a) {
                        return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                            var iframeIds, artifactObjectId, _this = this, onCloseArtifactContext = (0, tslib_es6.__rest)(_a, [ "type" ]);
                            return (0, tslib_es6.__generator)(this, function(_b) {
                                switch (_b.label) {
                                  case 0:
                                    return this.store.dispatch(extension_host_artifact_settings_actions.iJ({
                                        visible: onCloseArtifactContext.visible
                                    })), [ 4, this.getIFrameIds() ];

                                  case 1:
                                    return iframeIds = _b.sent(), [ 4, this.getArtifactSettingsObjectId() ];

                                  case 2:
                                    return artifactObjectId = _b.sent(), iframeIds.forEach(function(iframeId) {
                                        _this.messageBroker.send(index_core.Vm.onCloseArtifactSettings({
                                            isClosed: !onCloseArtifactContext.visible,
                                            artifactObjectId
                                        })(iframeId));
                                    }), [ 2 ];
                                }
                            });
                        });
                    }));
                }, {
                    dispatch: !1
                });
            }
            return ExtensionHostArtifactSettingsEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostArtifactSettingsEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](telemetry_service.t), core["\u0275\u0275inject"](GetIFrameIdsInjectionToken), core["\u0275\u0275inject"](GetArtifactSettingsObjectIdInjectionToken));
            }, ExtensionHostArtifactSettingsEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostArtifactSettingsEffects,
                factory: ExtensionHostArtifactSettingsEffects.\u0275fac
            }), ExtensionHostArtifactSettingsEffects;
        }();
        function createExtensionHostArtifactSettingsModule(config, parent) {
            return (0, core.createNgModule)(ExtensionHostArtifactSettingsModule, core.Injector.create({
                providers: [ {
                    provide: GetIFrameIdsInjectionToken,
                    useValue: config.getIFrameIds
                }, {
                    provide: GetArtifactSettingsObjectIdInjectionToken,
                    useValue: config.getArtifactSettingsObjectId
                } ],
                parent
            }));
        }
        var ExtensionHostArtifactSettingsModule = function() {
            function ExtensionHostArtifactSettingsModule() {}
            return ExtensionHostArtifactSettingsModule.\u0275fac = function(t) {
                return new (t || ExtensionHostArtifactSettingsModule);
            }, ExtensionHostArtifactSettingsModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostArtifactSettingsModule
            }), ExtensionHostArtifactSettingsModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostArtifactSettingsEffects ]) ]
            }), ExtensionHostArtifactSettingsModule;
        }();
    }
} ]);