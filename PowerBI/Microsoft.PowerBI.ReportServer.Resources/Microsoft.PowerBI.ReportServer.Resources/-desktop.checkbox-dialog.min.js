"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "checkbox-dialog" ], {
    30670: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            CheckboxDialogModule: function() {
                return CheckboxDialogModule;
            }
        });
        var dialog = __webpack_require__(32293), core = __webpack_require__(50423), common = __webpack_require__(77476), localize_directive = __webpack_require__(59968), localize_tooltip_directive = __webpack_require__(50057), legacy_checkbox = __webpack_require__(2467), fesm2022_forms = __webpack_require__(17174);
        function PbiTextFormatComponent_ng_container_0_ng_container_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "i"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var textFormatItem_r1 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](textFormatItem_r1.text);
            }
        }
        function PbiTextFormatComponent_ng_container_0_ng_container_3_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "b"), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var textFormatItem_r1 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](textFormatItem_r1.text);
            }
        }
        function PbiTextFormatComponent_ng_container_0_ng_container_4_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf) {
                var textFormatItem_r1 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](textFormatItem_r1.text);
            }
        }
        function PbiTextFormatComponent_ng_container_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0)(1, 1), core["\u0275\u0275template"](2, PbiTextFormatComponent_ng_container_0_ng_container_2_Template, 3, 1, "ng-container", 2), 
            core["\u0275\u0275template"](3, PbiTextFormatComponent_ng_container_0_ng_container_3_Template, 3, 1, "ng-container", 2), 
            core["\u0275\u0275template"](4, PbiTextFormatComponent_ng_container_0_ng_container_4_Template, 2, 1, "ng-container", 3), 
            core["\u0275\u0275elementContainerEnd"]()()), 2 & rf) {
                var textFormatItem_r1 = ctx.$implicit, ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitch", textFormatItem_r1.formattingTag), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r0.FormattingTag.Italics), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", ctx_r0.FormattingTag.Bold);
            }
        }
        var FormattingTag = function(FormattingTag) {
            return FormattingTag.Bold = "bold", FormattingTag.Italics = "italics", FormattingTag.None = "none", 
            FormattingTag;
        }({}), FormatType = function(FormatType) {
            return FormatType.HTML = "html", FormatType.Markdown = "markdown", FormatType;
        }({}), PbiTextFormatComponent = function() {
            function PbiTextFormatComponent() {
                this.text = "", this.format = FormatType.HTML, this.FormattingTag = FormattingTag, 
                this.formattingRegex = /\*\*([^*]+)\*\*|\*([^*]+)\*/g, this.allTextFormats = [], 
                this.formattingRegex.lastIndex = 0;
            }
            return PbiTextFormatComponent.prototype.ngOnChanges = function(changes) {
                (changes.text || changes.format) && this.convertToFormatText();
            }, PbiTextFormatComponent.prototype.makeTextMarkdown = function() {
                return this.text.replace(/<b>/g, "**").replace(/<\/b>/g, "**").replace(/<i>/g, "*").replace(/<\/i>/g, "*");
            }, PbiTextFormatComponent.prototype.convertToFormatText = function() {
                var markdownText = "";
                switch (this.format) {
                  case FormatType.HTML:
                    markdownText = this.makeTextMarkdown();
                    break;

                  case FormatType.Markdown:
                    markdownText = this.text;
                    break;

                  default:
                    throw new Error("Unsupported format type");
                }
                for (var matchResult, lastIndex = 0; null !== (matchResult = this.formattingRegex.exec(markdownText)); ) {
                    if (matchResult.index > lastIndex) {
                        var plainText = markdownText.substring(lastIndex, matchResult.index);
                        this.pushFormattedText(plainText, FormattingTag.None);
                    }
                    var formattingTag = this.determineFormattingTag(matchResult);
                    this.pushFormattedText(matchResult[1] || matchResult[2], formattingTag), lastIndex = this.formattingRegex.lastIndex;
                }
                lastIndex !== markdownText.length && (plainText = markdownText.substring(lastIndex, markdownText.length), 
                this.pushFormattedText(plainText, FormattingTag.None));
            }, PbiTextFormatComponent.prototype.pushFormattedText = function(text, formattingTag) {
                text && this.allTextFormats.push({
                    text,
                    formattingTag
                });
            }, PbiTextFormatComponent.prototype.determineFormattingTag = function(matchResult) {
                return void 0 !== matchResult[1] ? FormattingTag.Bold : void 0 !== matchResult[2] ? FormattingTag.Italics : FormattingTag.None;
            }, PbiTextFormatComponent.\u0275fac = function(t) {
                return new (t || PbiTextFormatComponent);
            }, PbiTextFormatComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: PbiTextFormatComponent,
                selectors: [ [ "pbi-text-format" ] ],
                inputs: {
                    text: "text",
                    format: "format"
                },
                features: [ core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 1,
                vars: 1,
                consts: [ [ 4, "ngFor", "ngForOf" ], [ 3, "ngSwitch" ], [ 4, "ngSwitchCase" ], [ 4, "ngSwitchDefault" ] ],
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275template"](0, PbiTextFormatComponent_ng_container_0_Template, 5, 3, "ng-container", 0), 
                    2 & rf && core["\u0275\u0275property"]("ngForOf", ctx.allTextFormats);
                },
                dependencies: [ common.NgForOf, common.NgSwitch, common.NgSwitchCase, common.NgSwitchDefault ],
                changeDetection: 0
            }), PbiTextFormatComponent;
        }(), localize_pipe = __webpack_require__(85102), _c0 = function(a0) {
            return [ a0 ];
        };
        function CheckboxDialogComponent_i_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "i", 7), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](1, _c0, ctx_r0.titleIcon));
            }
        }
        function CheckboxDialogComponent_pbi_text_format_5_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275element"](0, "pbi-text-format", 8), core["\u0275\u0275pipe"](1, "localize")), 
            2 & rf) {
                var ctx_r1 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("text", core["\u0275\u0275pipeBind1"](1, 2, ctx_r1.messageText))("type", "html");
            }
        }
        function CheckboxDialogComponent_pbi_text_format_6_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "pbi-text-format", 8), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("text", ctx_r2.messageTemplate)("type", "html");
            }
        }
        function CheckboxDialogComponent_div_7_a_4_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "a", 12), 2 & rf) {
                var checkbox_r6 = core["\u0275\u0275nextContext"]().$implicit;
                core["\u0275\u0275property"]("href", checkbox_r6.learnMoreLink, core["\u0275\u0275sanitizeUrl"]), 
                core["\u0275\u0275attribute"]("aria-label", checkbox_r6.learnMoreLinkAriaLabel);
            }
        }
        function CheckboxDialogComponent_div_7_Template(rf, ctx) {
            if (1 & rf) {
                var _r10 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 9)(1, "mat-checkbox", 10), core["\u0275\u0275listener"]("ngModelChange", function($event) {
                    var restoredCtx = core["\u0275\u0275restoreView"](_r10);
                    return core["\u0275\u0275resetView"](restoredCtx.$implicit.checked = $event);
                }), core["\u0275\u0275text"](2), core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275template"](4, CheckboxDialogComponent_div_7_a_4_Template, 1, 2, "a", 11), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var checkbox_r6 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngModel", checkbox_r6.checked), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](3, 3, checkbox_r6.label), " "), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", checkbox_r6.learnMoreLink);
            }
        }
        function CheckboxDialogComponent_button_9_Template(rf, ctx) {
            if (1 & rf) {
                var _r12 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 13), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r12);
                    var ctx_r11 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r11.ok());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("localize", ctx_r4.okButtonText);
            }
        }
        function CheckboxDialogComponent_button_10_Template(rf, ctx) {
            if (1 & rf) {
                var _r14 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 14), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r14);
                    var ctx_r13 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r13.cancel());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r5 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("localize", ctx_r5.cancelButtonText);
            }
        }
        var CheckboxDialogComponent = function() {
            function CheckboxDialogComponent(matDialogRef, config) {
                this.matDialogRef = matDialogRef, this.titleIcon = config.titleIcon, this.titleText = config.titleText, 
                this.messageText = config.messageText, this.messageTemplate = config.messageTemplate, 
                this.okButtonText = config.okButtonText, this.cancelButtonText = config.cancelButtonText, 
                this.checkboxesConfig = config.checkboxes;
            }
            return CheckboxDialogComponent.prototype.ngOnInit = function() {
                this.checkboxes = _.entries(this.checkboxesConfig).reduce(function(checkboxes, _a) {
                    var config = _a[1];
                    return checkboxes.push({
                        key: _a[0],
                        label: config.label,
                        checked: config.default,
                        learnMoreLink: config.learnMoreLink,
                        learnMoreLinkAriaLabel: config.learnMoreLinkAriaLabel
                    }), checkboxes;
                }, []);
            }, CheckboxDialogComponent.prototype.ok = function() {
                var checkboxes = this.checkboxes.reduce(function(checkboxes, checkbox) {
                    return checkboxes[checkbox.key] = !!checkbox.checked, checkboxes;
                }, {});
                this.matDialogRef.close({
                    result: 0,
                    checkboxes
                });
            }, CheckboxDialogComponent.prototype.cancel = function() {
                this.matDialogRef.close({
                    result: 1
                });
            }, CheckboxDialogComponent.\u0275fac = function(t) {
                return new (t || CheckboxDialogComponent)(core["\u0275\u0275directiveInject"](dialog.so), core["\u0275\u0275directiveInject"](dialog.WI));
            }, CheckboxDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: CheckboxDialogComponent,
                selectors: [ [ "checkbox-dialog" ] ],
                decls: 11,
                vars: 7,
                consts: [ [ "class", "titleIcon glyphicon glyph-normal", 3, "ngClass", 4, "ngIf" ], [ "mat-dialog-title", "", 3, "localize" ], [ "localizeTooltip", "Close", 1, "glyphicon", "pbi-glyph-close", "glyph-mini", 3, "click" ], [ 3, "text", "type", 4, "ngIf" ], [ "class", "checkboxes", 4, "ngFor", "ngForOf" ], [ "cdkFocusInitial", "", "class", "pbi-fluent-button primary", 3, "localize", "click", 4, "ngIf" ], [ "class", "pbi-fluent-button cancel", 3, "localize", "click", 4, "ngIf" ], [ 1, "titleIcon", "glyphicon", "glyph-normal", 3, "ngClass" ], [ 3, "text", "type" ], [ 1, "checkboxes" ], [ 1, "pbi-checkbox", 3, "ngModel", "ngModelChange" ], [ "target", "_blank", "localize", "Generic_LearnMore", 3, "href", 4, "ngIf" ], [ "target", "_blank", "localize", "Generic_LearnMore", 3, "href" ], [ "cdkFocusInitial", "", 1, "pbi-fluent-button", "primary", 3, "localize", "click" ], [ 1, "pbi-fluent-button", "cancel", 3, "localize", "click" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "header"), core["\u0275\u0275template"](1, CheckboxDialogComponent_i_1_Template, 1, 3, "i", 0), 
                    core["\u0275\u0275element"](2, "h1", 1), core["\u0275\u0275elementStart"](3, "button", 2), 
                    core["\u0275\u0275listener"]("click", function() {
                        return ctx.cancel();
                    }), core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](4, "mat-dialog-content"), 
                    core["\u0275\u0275template"](5, CheckboxDialogComponent_pbi_text_format_5_Template, 2, 4, "pbi-text-format", 3), 
                    core["\u0275\u0275template"](6, CheckboxDialogComponent_pbi_text_format_6_Template, 1, 2, "pbi-text-format", 3), 
                    core["\u0275\u0275template"](7, CheckboxDialogComponent_div_7_Template, 5, 5, "div", 4), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](8, "mat-dialog-actions"), 
                    core["\u0275\u0275template"](9, CheckboxDialogComponent_button_9_Template, 1, 1, "button", 5), 
                    core["\u0275\u0275template"](10, CheckboxDialogComponent_button_10_Template, 1, 1, "button", 6), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.titleIcon), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("localize", ctx.titleText), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx.messageText), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.messageTemplate), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", ctx.checkboxes), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.okButtonText), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.cancelButtonText));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, dialog.uh, dialog.xY, dialog.H8, localize_directive.X, localize_tooltip_directive.r, legacy_checkbox.FC, fesm2022_forms.JJ, fesm2022_forms.On, PbiTextFormatComponent, localize_pipe.F ],
                styles: [ 'header[_ngcontent-%COMP%]{display:flex;align-items:baseline}header[_ngcontent-%COMP%]   .pbi-glyph-close[_ngcontent-%COMP%]{border:none;background:none}html:not([dir="rtl"])[_nghost-%COMP%]   header[_ngcontent-%COMP%]   .pbi-glyph-close[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   header[_ngcontent-%COMP%]   .pbi-glyph-close[_ngcontent-%COMP%]{margin-left:auto}html[dir="rtl"][_nghost-%COMP%]   header[_ngcontent-%COMP%]   .pbi-glyph-close[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   header[_ngcontent-%COMP%]   .pbi-glyph-close[_ngcontent-%COMP%]{margin-right:auto}mat-dialog-content[_ngcontent-%COMP%]{padding:0 0 10px;margin:0}mat-dialog-content[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{padding-bottom:20px}mat-dialog-actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;min-height:0px}html:not([dir="rtl"])[_nghost-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%] > button[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]{margin-left:8px}html[dir="rtl"][_nghost-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%] > button[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   mat-dialog-actions[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]{margin-right:8px}' ],
                changeDetection: 0
            }), CheckboxDialogComponent;
        }(), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), PbiTextFormatModule = function() {
            function PbiTextFormatModule() {}
            return PbiTextFormatModule.\u0275fac = function(t) {
                return new (t || PbiTextFormatModule);
            }, PbiTextFormatModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: PbiTextFormatModule
            }), PbiTextFormatModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule ]
            }), PbiTextFormatModule;
        }(), CheckboxDialogModule = function() {
            function CheckboxDialogModule() {}
            return CheckboxDialogModule.\u0275fac = function(t) {
                return new (t || CheckboxDialogModule);
            }, CheckboxDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: CheckboxDialogModule
            }), CheckboxDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: "CheckboxDialog",
                    componentType: CheckboxDialogComponent
                } ]), localization_module.v, legacy_checkbox.Zh, fesm2022_forms.u5, PbiTextFormatModule ]
            }), CheckboxDialogModule;
        }();
    }
} ]);