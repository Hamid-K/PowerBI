"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-favorite" ], {
    51218: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostFavoriteModule: function() {
                return ExtensionHostFavoriteModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), ngrx_store = __webpack_require__(85732), of = __webpack_require__(11547), from = __webpack_require__(82762), v4 = __webpack_require__(11105), switchMap = __webpack_require__(81905), mergeMap = __webpack_require__(42195), catchError = __webpack_require__(59822), map = __webpack_require__(14172), distinctUntilChanged = __webpack_require__(77526), pairwise = __webpack_require__(6663), tap = __webpack_require__(17653), take = __webpack_require__(48787), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), favorite_actions_src = __webpack_require__(43419), favorites_src = __webpack_require__(1662), subscribeItemFavoriteStateChange = (0, 
        ngrx_store.PH)("[Extension Host Item FavoriteState Change] Subscribe Item Favorite Change", (0, 
        ngrx_store.Ky)()), unSubscribeItemFavoriteStateChange = (0, ngrx_store.PH)("[Extension Host Item FavoriteState Change] Unsubscribe Item Favorite Change", (0, 
        ngrx_store.Ky)()), tslib_es6 = __webpack_require__(81337), artifact_src = __webpack_require__(25082), itemFavoriteChangeSubscriptionsAdapter = (0, 
        __webpack_require__(8894).H)({
            selectId: function(e) {
                return e.subscriptionId;
            }
        }), initialState = {
            itemFavoriteChangeSubscriptions: itemFavoriteChangeSubscriptionsAdapter.getInitialState()
        }, getState = (0, ngrx_store.ZF)("extensionHostItemFavoriteChange"), getItemFavoriteChangeSubscriptions = (0, 
        ngrx_store.P1)(getState, function(state) {
            return itemFavoriteChangeSubscriptionsAdapter.getSelectors().selectAll(state.itemFavoriteChangeSubscriptions);
        }), getAllItems = (0, ngrx_store.P1)(artifact_src.rT, favorites_src.L1, function(artifacts, favorites) {
            var _a;
            return artifacts ? null === (_a = Object.keys(artifacts)) || void 0 === _a ? void 0 : _a.map(function(id) {
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, artifacts[id] || {}), favorites[id] || {});
            }) : [];
        }), core = __webpack_require__(50423), ItemFavoriteStateChange = function(ItemFavoriteStateChange) {
            return ItemFavoriteStateChange.unChanged = "UnChanged", ItemFavoriteStateChange.removedFromFavorites = "RemovedFromFavorites", 
            ItemFavoriteStateChange.addedToFavorites = "AddedToFavorites", ItemFavoriteStateChange;
        }({}), ExtensionHostFavoriteEffects = function() {
            function ExtensionHostFavoriteEffects(actions$, messageBroker, store, httpservice) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.store = store, 
                this.httpservice = httpservice, this.onFavoriteItemReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.favoriteItem, function(params) {
                    return _this.getItemFavoriteId(params.itemObjectId).pipe((0, switchMap.w)(function(favoriteId) {
                        return _this.isFavoriteId(favoriteId) ? (0, of.of)(index_core.Vm.favoriteItem.resolve({})) : (0, 
                        from.D)(_this.httpservice.addFavoriteByObjectId(favorites_src.nW.Artifact, params.itemObjectId, void 0)).pipe((0, 
                        mergeMap.zg)(function(result) {
                            return _this.store.dispatch(favorite_actions_src.nm({
                                objectId: params.itemObjectId,
                                favoriteId: result.id
                            })), (0, of.of)(index_core.Vm.favoriteItem.resolve({}));
                        }), (0, catchError.K)(function(error) {
                            return _this.store.dispatch(favorite_actions_src.V2({
                                objectId: params.itemObjectId
                            })), (0, of.of)(index_core.Vm.favoriteItem.reject({
                                error
                            }));
                        }));
                    }));
                }), this.onUnFavoriteItemReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.unFavoriteItem, function(params) {
                    return _this.getItemFavoriteId(params.itemObjectId).pipe((0, switchMap.w)(function(favoriteId) {
                        return _this.isFavoriteId(favoriteId) ? (0, from.D)(_this.httpservice.deleteFavorite({
                            favoriteType: favorites_src.nW.Artifact,
                            id: favoriteId
                        }, void 0)).pipe((0, mergeMap.zg)(function() {
                            return _this.store.dispatch(favorite_actions_src.rg({
                                objectId: params.itemObjectId
                            })), (0, of.of)(index_core.Vm.unFavoriteItem.resolve({}));
                        }), (0, catchError.K)(function(error) {
                            return _this.store.dispatch(favorite_actions_src.MC({
                                objectId: params.itemObjectId,
                                favoriteId,
                                error
                            })), (0, of.of)(index_core.Vm.unFavoriteItem.reject({
                                error
                            }));
                        })) : (0, of.of)(index_core.Vm.unFavoriteItem.resolve({}));
                    }));
                }), this.onGetFavoriteStateReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.getItemFavoriteState, function(params) {
                    return _this.getItemFavoriteId(params.itemObjectId).pipe((0, map.U)(function(favoriteId) {
                        var favorited = _this.isFavoriteId(favoriteId);
                        return index_core.Vm.getItemFavoriteState.resolve({
                            favorited
                        });
                    }), (0, catchError.K)(function(error) {
                        return (0, of.of)(index_core.Vm.getItemFavoriteState.reject({
                            error
                        }));
                    }));
                }), this.pushItemChange$ = (0, ngrx_effects.GW)(function() {
                    return _this.store.select(getAllItems).pipe((0, distinctUntilChanged.x)(), (0, pairwise.G)(), (0, 
                    ngrx_effects.IC)(function() {
                        return _this.store.select(getItemFavoriteChangeSubscriptions);
                    }), (0, map.U)(function(_a) {
                        for (var _b = _a[0], prevItems = _b[0], currItems = _b[1], messages = [], _loop_1 = function(subscriptionId, iframeId, itemObjectId) {
                            var changes = [];
                            prevItems && currItems && currItems.forEach(function(currItem) {
                                if (currItem.objectId === itemObjectId) {
                                    var prevItem = prevItems.find(function(_a) {
                                        return _a.objectId === currItem.objectId;
                                    });
                                    if (void 0 !== prevItem && _this.isFavoriteStateChanged(prevItem.favoriteId, currItem.favoriteId) !== ItemFavoriteStateChange.unChanged) {
                                        var favorited = _this.isFavoriteStateChanged(prevItem.favoriteId, currItem.favoriteId) === ItemFavoriteStateChange.addedToFavorites;
                                        changes.push({
                                            itemObjectId: currItem.objectId,
                                            favorited
                                        });
                                    }
                                }
                            }), changes.length > 0 && messages.push(index_core.Vm.onItemFavoriteStateChange({
                                subscriptionId,
                                changes
                            })(iframeId));
                        }, _i = 0, subscriptions_1 = _a[1]; _i < subscriptions_1.length; _i++) {
                            var _c = subscriptions_1[_i];
                            _loop_1(_c.subscriptionId, _c.iframeId, _c.itemObjectId);
                        }
                        return messages;
                    }), (0, tap.b)(function(messages) {
                        messages.forEach(function(message) {
                            _this.messageBroker.send(message);
                        });
                    }));
                }, {
                    dispatch: !1
                }), this.onSubscribeItemFavoriteChangeReceived$ = (0, host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.subscribeItemFavoriteStateChange, function(_a) {
                    var iframeId = _a.iframeId, itemObjectId = _a.itemObjectId, subscriptionId = (0, 
                    v4.Z)();
                    return _this.store.dispatch(subscribeItemFavoriteStateChange({
                        subscriptionId,
                        iframeId,
                        itemObjectId
                    })), index_core.Vm.subscribeItemFavoriteStateChange.resolve({
                        subscriptionId
                    });
                }), this.onUnsubscribeItemChangeReceived$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.pR)(index_core.Vm.unSubscribeItemFavoriteStateChange), (0, 
                    map.U)(function(_a) {
                        return unSubscribeItemFavoriteStateChange({
                            subscriptionId: _a.subscriptionId
                        });
                    }));
                });
            }
            return ExtensionHostFavoriteEffects.prototype.getItemFavoriteId = function(itemObjectId) {
                return this.store.select(favorites_src.L1).pipe((0, take.q)(1), (0, map.U)(function(favoriteEntities) {
                    var _a, favoriteId = null === (_a = favoriteEntities[itemObjectId]) || void 0 === _a ? void 0 : _a.favoriteId;
                    return void 0 === favoriteId ? -1 : favoriteId;
                }));
            }, ExtensionHostFavoriteEffects.prototype.isFavoriteStateChanged = function(preFavoriteId, currFavoriteId) {
                return !this.isFavoriteId(preFavoriteId) && this.isFavoriteId(currFavoriteId) ? ItemFavoriteStateChange.addedToFavorites : this.isFavoriteId(preFavoriteId) && !this.isFavoriteId(currFavoriteId) ? ItemFavoriteStateChange.removedFromFavorites : ItemFavoriteStateChange.unChanged;
            }, ExtensionHostFavoriteEffects.prototype.isFavoriteId = function(favoriteId) {
                return void 0 !== favoriteId && -1 !== favoriteId;
            }, ExtensionHostFavoriteEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostFavoriteEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](favorites_src.HP));
            }, ExtensionHostFavoriteEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostFavoriteEffects,
                factory: ExtensionHostFavoriteEffects.\u0275fac
            }), ExtensionHostFavoriteEffects;
        }(), ngrx_immer_store = __webpack_require__(36012);
        function reducer(state, action) {
            return (0, ngrx_store.Lq)(initialState, (0, ngrx_immer_store.P)(subscribeItemFavoriteStateChange, function(state, _a) {
                state.itemFavoriteChangeSubscriptions = itemFavoriteChangeSubscriptionsAdapter.upsertOne({
                    subscriptionId: _a.subscriptionId,
                    iframeId: _a.iframeId,
                    itemObjectId: _a.itemObjectId
                }, state.itemFavoriteChangeSubscriptions);
            }), (0, ngrx_immer_store.P)(unSubscribeItemFavoriteStateChange, function(state, _a) {
                state.itemFavoriteChangeSubscriptions = itemFavoriteChangeSubscriptionsAdapter.removeOne(_a.subscriptionId, state.itemFavoriteChangeSubscriptions);
            }))(state, action);
        }
        var ExtensionHostFavoriteModule = function() {
            function ExtensionHostFavoriteModule() {}
            return ExtensionHostFavoriteModule.\u0275fac = function(t) {
                return new (t || ExtensionHostFavoriteModule);
            }, ExtensionHostFavoriteModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostFavoriteModule
            }), ExtensionHostFavoriteModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_store.Aw.forFeature("extensionHostItemFavoriteChange", reducer), ngrx_effects.sQ.forFeature([ ExtensionHostFavoriteEffects ]) ]
            }), ExtensionHostFavoriteModule;
        }();
    }
} ]);