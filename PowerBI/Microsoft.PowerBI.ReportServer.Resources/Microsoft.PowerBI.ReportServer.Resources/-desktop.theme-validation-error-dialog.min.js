(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "theme-validation-error-dialog" ], {
    80204: function(module) {
        var factory;
        factory = function() {
            return function(modules) {
                var installedModules = {};
                function __nested_webpack_require_657__(moduleId) {
                    if (installedModules[moduleId]) return installedModules[moduleId].exports;
                    var module = installedModules[moduleId] = {
                        i: moduleId,
                        l: !1,
                        exports: {}
                    };
                    return modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_657__), 
                    module.l = !0, module.exports;
                }
                return __nested_webpack_require_657__.m = modules, __nested_webpack_require_657__.c = installedModules, 
                __nested_webpack_require_657__.d = function(exports, name, getter) {
                    __nested_webpack_require_657__.o(exports, name) || Object.defineProperty(exports, name, {
                        enumerable: !0,
                        get: getter
                    });
                }, __nested_webpack_require_657__.r = function(exports) {
                    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports, Symbol.toStringTag, {
                        value: "Module"
                    }), Object.defineProperty(exports, "__esModule", {
                        value: !0
                    });
                }, __nested_webpack_require_657__.t = function(value, mode) {
                    if (1 & mode && (value = __nested_webpack_require_657__(value)), 8 & mode) return value;
                    if (4 & mode && "object" == typeof value && value && value.__esModule) return value;
                    var ns = Object.create(null);
                    if (__nested_webpack_require_657__.r(ns), Object.defineProperty(ns, "default", {
                        enumerable: !0,
                        value
                    }), 2 & mode && "string" != typeof value) for (var key in value) __nested_webpack_require_657__.d(ns, key, function(key) {
                        return value[key];
                    }.bind(null, key));
                    return ns;
                }, __nested_webpack_require_657__.n = function(module) {
                    var getter = module && module.__esModule ? function() {
                        return module.default;
                    } : function() {
                        return module;
                    };
                    return __nested_webpack_require_657__.d(getter, "a", getter), getter;
                }, __nested_webpack_require_657__.o = function(object, property) {
                    return Object.prototype.hasOwnProperty.call(object, property);
                }, __nested_webpack_require_657__.p = "", __nested_webpack_require_657__(__nested_webpack_require_657__.s = 6);
            }([ function(module, exports) {
                module.exports = function(element) {
                    var selectedText;
                    if ("SELECT" === element.nodeName) element.focus(), selectedText = element.value; else if ("INPUT" === element.nodeName || "TEXTAREA" === element.nodeName) {
                        var isReadOnly = element.hasAttribute("readonly");
                        isReadOnly || element.setAttribute("readonly", ""), element.select(), element.setSelectionRange(0, element.value.length), 
                        isReadOnly || element.removeAttribute("readonly"), selectedText = element.value;
                    } else {
                        element.hasAttribute("contenteditable") && element.focus();
                        var selection = window.getSelection(), range = document.createRange();
                        range.selectNodeContents(element), selection.removeAllRanges(), selection.addRange(range), 
                        selectedText = selection.toString();
                    }
                    return selectedText;
                };
            }, function(module, exports) {
                function E() {}
                E.prototype = {
                    on: function(name, callback, ctx) {
                        var e = this.e || (this.e = {});
                        return (e[name] || (e[name] = [])).push({
                            fn: callback,
                            ctx
                        }), this;
                    },
                    once: function(name, callback, ctx) {
                        var self = this;
                        function listener() {
                            self.off(name, listener), callback.apply(ctx, arguments);
                        }
                        return listener._ = callback, this.on(name, listener, ctx);
                    },
                    emit: function(name) {
                        for (var data = [].slice.call(arguments, 1), evtArr = ((this.e || (this.e = {}))[name] || []).slice(), i = 0, len = evtArr.length; i < len; i++) evtArr[i].fn.apply(evtArr[i].ctx, data);
                        return this;
                    },
                    off: function(name, callback) {
                        var e = this.e || (this.e = {}), evts = e[name], liveEvents = [];
                        if (evts && callback) for (var i = 0, len = evts.length; i < len; i++) evts[i].fn !== callback && evts[i].fn._ !== callback && liveEvents.push(evts[i]);
                        return liveEvents.length ? e[name] = liveEvents : delete e[name], this;
                    }
                }, module.exports = E, module.exports.TinyEmitter = E;
            }, function(module, exports, __nested_webpack_require_7664__) {
                var is = __nested_webpack_require_7664__(3), delegate = __nested_webpack_require_7664__(4);
                module.exports = function(target, type, callback) {
                    if (!target && !type && !callback) throw new Error("Missing required arguments");
                    if (!is.string(type)) throw new TypeError("Second argument must be a String");
                    if (!is.fn(callback)) throw new TypeError("Third argument must be a Function");
                    if (is.node(target)) return function(node, type, callback) {
                        return node.addEventListener(type, callback), {
                            destroy: function() {
                                node.removeEventListener(type, callback);
                            }
                        };
                    }(target, type, callback);
                    if (is.nodeList(target)) return function(nodeList, type, callback) {
                        return Array.prototype.forEach.call(nodeList, function(node) {
                            node.addEventListener(type, callback);
                        }), {
                            destroy: function() {
                                Array.prototype.forEach.call(nodeList, function(node) {
                                    node.removeEventListener(type, callback);
                                });
                            }
                        };
                    }(target, type, callback);
                    if (is.string(target)) return function(selector, type, callback) {
                        return delegate(document.body, selector, type, callback);
                    }(target, type, callback);
                    throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
                };
            }, function(module, exports) {
                exports.node = function(value) {
                    return void 0 !== value && value instanceof HTMLElement && 1 === value.nodeType;
                }, exports.nodeList = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return void 0 !== value && ("[object NodeList]" === type || "[object HTMLCollection]" === type) && "length" in value && (0 === value.length || exports.node(value[0]));
                }, exports.string = function(value) {
                    return "string" == typeof value || value instanceof String;
                }, exports.fn = function(value) {
                    return "[object Function]" === Object.prototype.toString.call(value);
                };
            }, function(module, exports, __nested_webpack_require_11586__) {
                var closest = __nested_webpack_require_11586__(5);
                function _delegate(element, selector, type, callback, useCapture) {
                    var listenerFn = listener.apply(this, arguments);
                    return element.addEventListener(type, listenerFn, useCapture), {
                        destroy: function() {
                            element.removeEventListener(type, listenerFn, useCapture);
                        }
                    };
                }
                function listener(element, selector, type, callback) {
                    return function(e) {
                        e.delegateTarget = closest(e.target, selector), e.delegateTarget && callback.call(element, e);
                    };
                }
                module.exports = function(elements, selector, type, callback, useCapture) {
                    return "function" == typeof elements.addEventListener ? _delegate.apply(null, arguments) : "function" == typeof type ? _delegate.bind(null, document).apply(null, arguments) : ("string" == typeof elements && (elements = document.querySelectorAll(elements)), 
                    Array.prototype.map.call(elements, function(element) {
                        return _delegate(element, selector, type, callback, useCapture);
                    }));
                };
            }, function(module, exports) {
                if ("undefined" != typeof Element && !Element.prototype.matches) {
                    var proto = Element.prototype;
                    proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
                }
                module.exports = function(element, selector) {
                    for (;element && 9 !== element.nodeType; ) {
                        if ("function" == typeof element.matches && element.matches(selector)) return element;
                        element = element.parentNode;
                    }
                };
            }, function(module, __nested_webpack_exports__, __nested_webpack_require_14893__) {
                "use strict";
                __nested_webpack_require_14893__.r(__nested_webpack_exports__);
                var src_select = __nested_webpack_require_14893__(0), select_default = __nested_webpack_require_14893__.n(src_select), _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj;
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                }, _createClass = function() {
                    function defineProperties(target, props) {
                        for (var i = 0; i < props.length; i++) {
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                            "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                        }
                    }
                    return function(Constructor, protoProps, staticProps) {
                        return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                        Constructor;
                    };
                }(), clipboard_action_ClipboardAction = function() {
                    function ClipboardAction(options) {
                        !function(instance, Constructor) {
                            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                        }(this, ClipboardAction), this.resolveOptions(options), this.initSelection();
                    }
                    return _createClass(ClipboardAction, [ {
                        key: "resolveOptions",
                        value: function() {
                            var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                            this.action = options.action, this.container = options.container, this.emitter = options.emitter, 
                            this.target = options.target, this.text = options.text, this.trigger = options.trigger, 
                            this.selectedText = "";
                        }
                    }, {
                        key: "initSelection",
                        value: function() {
                            this.text ? this.selectFake() : this.target && this.selectTarget();
                        }
                    }, {
                        key: "selectFake",
                        value: function() {
                            var _this = this, isRTL = "rtl" == document.documentElement.getAttribute("dir");
                            this.removeFake(), this.fakeHandlerCallback = function() {
                                return _this.removeFake();
                            }, this.fakeHandler = this.container.addEventListener("click", this.fakeHandlerCallback) || !0, 
                            this.fakeElem = document.createElement("textarea"), this.fakeElem.style.fontSize = "12pt", 
                            this.fakeElem.style.border = "0", this.fakeElem.style.padding = "0", this.fakeElem.style.margin = "0", 
                            this.fakeElem.style.position = "absolute", this.fakeElem.style[isRTL ? "right" : "left"] = "-9999px";
                            var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                            this.fakeElem.style.top = yPosition + "px", this.fakeElem.setAttribute("readonly", ""), 
                            this.fakeElem.value = this.text, this.container.appendChild(this.fakeElem), this.selectedText = select_default()(this.fakeElem), 
                            this.copyText();
                        }
                    }, {
                        key: "removeFake",
                        value: function() {
                            this.fakeHandler && (this.container.removeEventListener("click", this.fakeHandlerCallback), 
                            this.fakeHandler = null, this.fakeHandlerCallback = null), this.fakeElem && (this.container.removeChild(this.fakeElem), 
                            this.fakeElem = null);
                        }
                    }, {
                        key: "selectTarget",
                        value: function() {
                            this.selectedText = select_default()(this.target), this.copyText();
                        }
                    }, {
                        key: "copyText",
                        value: function() {
                            var succeeded = void 0;
                            try {
                                succeeded = document.execCommand(this.action);
                            } catch (err) {
                                succeeded = !1;
                            }
                            this.handleResult(succeeded);
                        }
                    }, {
                        key: "handleResult",
                        value: function(succeeded) {
                            this.emitter.emit(succeeded ? "success" : "error", {
                                action: this.action,
                                text: this.selectedText,
                                trigger: this.trigger,
                                clearSelection: this.clearSelection.bind(this)
                            });
                        }
                    }, {
                        key: "clearSelection",
                        value: function() {
                            this.trigger && this.trigger.focus(), document.activeElement.blur(), window.getSelection().removeAllRanges();
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.removeFake();
                        }
                    }, {
                        key: "action",
                        set: function() {
                            if (this._action = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "copy", 
                            "copy" !== this._action && "cut" !== this._action) throw new Error('Invalid "action" value, use either "copy" or "cut"');
                        },
                        get: function() {
                            return this._action;
                        }
                    }, {
                        key: "target",
                        set: function(target) {
                            if (void 0 !== target) {
                                if (!target || "object" !== (void 0 === target ? "undefined" : _typeof(target)) || 1 !== target.nodeType) throw new Error('Invalid "target" value, use a valid Element');
                                if ("copy" === this.action && target.hasAttribute("disabled")) throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                                if ("cut" === this.action && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                                this._target = target;
                            }
                        },
                        get: function() {
                            return this._target;
                        }
                    } ]), ClipboardAction;
                }(), clipboard_action = clipboard_action_ClipboardAction, tiny_emitter = __nested_webpack_require_14893__(1), tiny_emitter_default = __nested_webpack_require_14893__.n(tiny_emitter), listen = __nested_webpack_require_14893__(2), listen_default = __nested_webpack_require_14893__.n(listen), clipboard_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
                    return typeof obj;
                } : function(obj) {
                    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                }, clipboard_createClass = function() {
                    function defineProperties(target, props) {
                        for (var i = 0; i < props.length; i++) {
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                            "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                        }
                    }
                    return function(Constructor, protoProps, staticProps) {
                        return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                        Constructor;
                    };
                }(), clipboard_Clipboard = function(_Emitter) {
                    function Clipboard(trigger, options) {
                        !function(instance, Constructor) {
                            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                        }(this, Clipboard);
                        var _this = function(self, call) {
                            if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                            return !call || "object" != typeof call && "function" != typeof call ? self : call;
                        }(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));
                        return _this.resolveOptions(options), _this.listenClick(trigger), _this;
                    }
                    return function(subClass, superClass) {
                        if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                        subClass.prototype = Object.create(superClass && superClass.prototype, {
                            constructor: {
                                value: subClass,
                                enumerable: !1,
                                writable: !0,
                                configurable: !0
                            }
                        }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
                    }(Clipboard, _Emitter), clipboard_createClass(Clipboard, [ {
                        key: "resolveOptions",
                        value: function() {
                            var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                            this.action = "function" == typeof options.action ? options.action : this.defaultAction, 
                            this.target = "function" == typeof options.target ? options.target : this.defaultTarget, 
                            this.text = "function" == typeof options.text ? options.text : this.defaultText, 
                            this.container = "object" === clipboard_typeof(options.container) ? options.container : document.body;
                        }
                    }, {
                        key: "listenClick",
                        value: function(trigger) {
                            var _this2 = this;
                            this.listener = listen_default()(trigger, "click", function(e) {
                                return _this2.onClick(e);
                            });
                        }
                    }, {
                        key: "onClick",
                        value: function(e) {
                            var trigger = e.delegateTarget || e.currentTarget;
                            this.clipboardAction && (this.clipboardAction = null), this.clipboardAction = new clipboard_action({
                                action: this.action(trigger),
                                target: this.target(trigger),
                                text: this.text(trigger),
                                container: this.container,
                                trigger,
                                emitter: this
                            });
                        }
                    }, {
                        key: "defaultAction",
                        value: function(trigger) {
                            return getAttributeValue("action", trigger);
                        }
                    }, {
                        key: "defaultTarget",
                        value: function(trigger) {
                            var selector = getAttributeValue("target", trigger);
                            if (selector) return document.querySelector(selector);
                        }
                    }, {
                        key: "defaultText",
                        value: function(trigger) {
                            return getAttributeValue("text", trigger);
                        }
                    }, {
                        key: "destroy",
                        value: function() {
                            this.listener.destroy(), this.clipboardAction && (this.clipboardAction.destroy(), 
                            this.clipboardAction = null);
                        }
                    } ], [ {
                        key: "isSupported",
                        value: function() {
                            var action = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [ "copy", "cut" ], support = !!document.queryCommandSupported;
                            return ("string" == typeof action ? [ action ] : action).forEach(function(action) {
                                support = support && !!document.queryCommandSupported(action);
                            }), support;
                        }
                    } ]), Clipboard;
                }(tiny_emitter_default.a);
                function getAttributeValue(suffix, element) {
                    var attribute = "data-clipboard-" + suffix;
                    if (element.hasAttribute(attribute)) return element.getAttribute(attribute);
                }
                __nested_webpack_exports__.default = clipboard_Clipboard;
            } ]).default;
        }, module.exports = factory();
    },
    56650: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ThemeValidationErrorDialogModule: function() {
                return ThemeValidationErrorDialogModule;
            }
        });
        var template_dialog_payload_service = __webpack_require__(67489), core = __webpack_require__(50423), template_dialog_component = __webpack_require__(96777), localize_directive = __webpack_require__(59968), clipboard = __webpack_require__(80204), PbiClipboardDirective = function() {
            function PbiClipboardDirective(elementRef) {
                this.elementRef = elementRef, this.pbiClipboardSuccess = new core.EventEmitter, 
                this.pbiClipboardError = new core.EventEmitter, this.Clipboard = clipboard;
            }
            return PbiClipboardDirective.prototype.ngOnInit = function() {
                var _this = this, clipboardOptions = {};
                "string" == typeof this.pbiClipboard ? clipboardOptions.text = function() {
                    return _this.pbiClipboard;
                } : clipboardOptions.target = function() {
                    return _this.pbiClipboard;
                }, this.clipboard = new this.Clipboard(this.elementRef.nativeElement, clipboardOptions), 
                this.clipboard.on("success", function(clipboardEvent) {
                    return _this.pbiClipboardSuccess.emit(clipboardEvent);
                }), this.clipboard.on("error", function(clipboardEvent) {
                    return _this.pbiClipboardError.emit(clipboardEvent);
                });
            }, PbiClipboardDirective.prototype.ngOnDestroy = function() {
                this.clipboard.destroy();
            }, PbiClipboardDirective.\u0275fac = function(t) {
                return new (t || PbiClipboardDirective)(core["\u0275\u0275directiveInject"](core.ElementRef));
            }, PbiClipboardDirective.\u0275dir = core["\u0275\u0275defineDirective"]({
                type: PbiClipboardDirective,
                selectors: [ [ "", "pbiClipboard", "" ] ],
                inputs: {
                    pbiClipboard: "pbiClipboard"
                },
                outputs: {
                    pbiClipboardSuccess: "pbiClipboardSuccess",
                    pbiClipboardError: "pbiClipboardError"
                }
            }), PbiClipboardDirective;
        }(), ThemeValidationErrorDialogComponent = function() {
            function ThemeValidationErrorDialogComponent(templateDialogPayload) {
                this.templateDialogPayload = templateDialogPayload;
            }
            return ThemeValidationErrorDialogComponent.prototype.ngOnInit = function() {
                this.errorList = this.templateDialogPayload.input.errors, this.themeName = this.templateDialogPayload.input.themeName;
            }, Object.defineProperty(ThemeValidationErrorDialogComponent.prototype, "errors", {
                get: function() {
                    return this.errorList.join("\n");
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ThemeValidationErrorDialogComponent.prototype, "theme", {
                get: function() {
                    return this.themeName;
                },
                enumerable: !1,
                configurable: !0
            }), ThemeValidationErrorDialogComponent.\u0275fac = function(t) {
                return new (t || ThemeValidationErrorDialogComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x));
            }, ThemeValidationErrorDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ThemeValidationErrorDialogComponent,
                selectors: [ [ "theme-validation-error-dialog" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 9,
                vars: 2,
                consts: [ [ 1, "theme-validation-error-dialog-container" ], [ "localize", "Report_Theme_ErrorDialogDescription", 1, "fluentTheme-md-reg" ], [ "href", "https://go.microsoft.com/fwlink/?linkid=2111809", "target", "_blank", "rel", "noreferrer noopener", "localize", "Report_Theme_ErrorDialogLearnMore", 1, "learn-link" ], [ "rows", "8", "cols", "58", "readonly", "", "aria-label", "'Embed_ErrorMessage' | localize" ], [ "localize", "CopyVisualImage_Copy", 1, "pbi-fluent-button", "secondary", 3, "pbiClipboard" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "div", 0)(2, "div"), 
                    core["\u0275\u0275element"](3, "span", 1)(4, "a", 2), core["\u0275\u0275elementEnd"](), 
                    core["\u0275\u0275elementStart"](5, "textarea", 3), core["\u0275\u0275text"](6), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](7, "span"), core["\u0275\u0275element"](8, "button", 4), 
                    core["\u0275\u0275elementEnd"]()()()), 2 & rf && (core["\u0275\u0275advance"](6), 
                    core["\u0275\u0275textInterpolate"](ctx.errors), core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("pbiClipboard", ctx.errors));
                },
                dependencies: [ template_dialog_component.J, localize_directive.X, PbiClipboardDirective ],
                styles: [ ".theme-validation-error-dialog-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}.theme-validation-error-dialog-container[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{margin-bottom:24px}a.learn-link[_ngcontent-%COMP%]{margin-left:.5rem}textarea[_ngcontent-%COMP%]{margin-bottom:10px;font-size:12px;padding:4px}" ],
                changeDetection: 0
            }), ThemeValidationErrorDialogComponent;
        }(), common = __webpack_require__(77476), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), template_dialog_module = __webpack_require__(16973), PbiClipboardModule = function() {
            function PbiClipboardModule() {}
            return PbiClipboardModule.\u0275fac = function(t) {
                return new (t || PbiClipboardModule);
            }, PbiClipboardModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: PbiClipboardModule
            }), PbiClipboardModule.\u0275inj = core["\u0275\u0275defineInjector"]({}), PbiClipboardModule;
        }(), ThemeValidationErrorDialogModule = function() {
            function ThemeValidationErrorDialogModule() {}
            return ThemeValidationErrorDialogModule.\u0275fac = function(t) {
                return new (t || ThemeValidationErrorDialogModule);
            }, ThemeValidationErrorDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ThemeValidationErrorDialogModule
            }), ThemeValidationErrorDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: "ThemeValidationErrorDialog",
                    componentType: ThemeValidationErrorDialogComponent
                } ]), localization_module.v, PbiClipboardModule, template_dialog_module.e ]
            }), ThemeValidationErrorDialogModule;
        }();
    }
} ]);