"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "extension-host-notification" ], {
    73327: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ExtensionHostNotificationModule: function() {
                return ExtensionHostNotificationModule;
            }
        });
        var common = __webpack_require__(77476), ngrx_effects = __webpack_require__(60756), tap = __webpack_require__(17653), index_core = __webpack_require__(73471), src = __webpack_require__(60397), host_proxy_src = __webpack_require__(17899), notification_toast_service = __webpack_require__(42888), core = __webpack_require__(50423), localization_service = __webpack_require__(7452), ExtensionHostNotificationEffects = function() {
            function ExtensionHostNotificationEffects(actions$, messageBroker, localizationService, notificationService) {
                var _this = this;
                this.actions$ = actions$, this.messageBroker = messageBroker, this.localizationService = localizationService, 
                this.notificationService = notificationService, this.onOpenNotificationReceived$ = (0, 
                host_proxy_src.Av)(this.actions$, this.messageBroker, index_core.Vm.openNotification, function(action) {
                    var notificationId = _this.notificationService.notify({
                        id: action.notificationId,
                        title: action.title,
                        message: action.message,
                        notificationType: action.notificationType,
                        eventId: action.eventId,
                        duration: action.duration ? notification_toast_service.S[action.duration] : void 0,
                        actionButtons: _this.buttonsToActionDefs(action.buttons),
                        itemType: action.itemType,
                        style: "Trident"
                    });
                    return index_core.Vm.openNotification.resolve({
                        notificationId
                    });
                }), this.onHideNotificationReceived$ = (0, ngrx_effects.GW)(function() {
                    return _this.actions$.pipe((0, host_proxy_src.pR)(index_core.Vm.hideNotification), (0, 
                    tap.b)(function(_a) {
                        _this.notificationService.hide(_a.notificationId);
                    }));
                }, {
                    dispatch: !1
                });
            }
            return ExtensionHostNotificationEffects.prototype.buttonsToActionDefs = function(buttons) {
                var _this = this;
                if (buttons && 0 !== buttons.length) return buttons.map(function(actionButton) {
                    return "CopyButton" === actionButton ? {
                        displayText: _this.localizationService.get("Copy"),
                        action: "CopyButton"
                    } : {
                        displayText: actionButton.label,
                        action: actionButton
                    };
                });
            }, ExtensionHostNotificationEffects.\u0275fac = function(t) {
                return new (t || ExtensionHostNotificationEffects)(core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](src.u), core["\u0275\u0275inject"](localization_service.z), core["\u0275\u0275inject"](notification_toast_service.g));
            }, ExtensionHostNotificationEffects.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ExtensionHostNotificationEffects,
                factory: ExtensionHostNotificationEffects.\u0275fac
            }), ExtensionHostNotificationEffects;
        }(), ExtensionHostNotificationModule = function() {
            function ExtensionHostNotificationModule() {}
            return ExtensionHostNotificationModule.\u0275fac = function(t) {
                return new (t || ExtensionHostNotificationModule);
            }, ExtensionHostNotificationModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ExtensionHostNotificationModule
            }), ExtensionHostNotificationModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, ngrx_effects.sQ.forFeature([ ExtensionHostNotificationEffects ]) ]
            }), ExtensionHostNotificationModule;
        }();
    }
} ]);