"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "animatedNumber" ], {
    58914: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            AnimatedNumber: function() {
                return AnimatedNumber;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81337), _Visuals_animators_animatorCommon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94478), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62458), AnimatedNumber = function(_super) {
            function AnimatedNumber(svg, animator) {
                var _this = _super.call(this, "animatedNumber") || this;
                return svg && (_this.svg = svg), animator && (_this.animator = animator), _this;
            }
            return (0, tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AnimatedNumber, _super), 
            AnimatedNumber.prototype.init = function(options) {
                this.options = options, this.svg || (this.svg = d3.select(options.element.get(0)).append("svg")), 
                this.currentViewport = options.viewport, this.hostServices = options.host, this.style = options.style, 
                this.updateViewportDependantProperties();
            }, AnimatedNumber.prototype.updateViewportDependantProperties = function() {
                var viewport = this.currentViewport;
                this.svg.attr("width", viewport.width).attr("height", viewport.height);
            }, AnimatedNumber.prototype.update = function(options) {
                _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_1__.fF.assertValue(options, "options"), 
                this.currentViewport = options.viewport;
                var dataViews = this.dataViews = options.dataViews;
                if (dataViews && dataViews[0]) {
                    var dataView = dataViews[0];
                    this.updateViewportDependantProperties(), this.getMetaDataColumn(dataView), this.updateInternal(dataView && dataView.single ? dataView.single.value : 0, options.suppressAnimations, !0, this.formatter);
                }
            }, AnimatedNumber.prototype.setFormatter = function(formatter) {
                this.formatter = formatter;
            }, AnimatedNumber.prototype.onDataChanged = function(options) {
                this.update({
                    dataViews: options.dataViews,
                    suppressAnimations: options.suppressAnimations,
                    viewport: this.currentViewport
                });
            }, AnimatedNumber.prototype.onResizing = function(viewport) {
                this.update({
                    dataViews: this.dataViews,
                    suppressAnimations: !0,
                    viewport
                });
            }, AnimatedNumber.prototype.canResizeTo = function(viewport) {
                return !0;
            }, AnimatedNumber.prototype.updateInternal = function(target, suppressAnimations, forceUpdate, formatter) {
                void 0 === forceUpdate && (forceUpdate = !1);
                var start = this.value, duration = (0, _Visuals_animators_animatorCommon__WEBPACK_IMPORTED_MODULE_2__.Mb)(this.animator, suppressAnimations);
                this.doValueTransition(start, target, null, this.options.animation, duration, forceUpdate, formatter), 
                this.value = target;
            }, AnimatedNumber;
        }(__webpack_require__(68193).V);
    },
    68193: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            V: function() {
                return AnimatedText;
            }
        });
        var _Visuals_capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14599), _Visuals_common_axisHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53197), _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(90120), _Visuals_common_tooltipUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38400), _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79154), _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(62458), _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32041), _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(64329), _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10389), _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72489), AnimatedText = function() {
            function AnimatedText(name) {
                this.defaultTitleColor = "#333333", this._animatedTextOptions = {}, this.mainText = (0, 
                _VisualsCommon_CssConstants__WEBPACK_IMPORTED_MODULE_0__.CH)("mainText"), this.name = name, 
                this.visualConfiguration = {
                    maxFontSize: 60
                };
            }
            return AnimatedText.prototype.getMetaDataColumn = function(dataView) {
                if (dataView && dataView.metadata && dataView.metadata.columns) for (var i = 0, ilen = dataView.metadata.columns.length; i < ilen; i++) {
                    var column = dataView.metadata.columns[i];
                    if (column.isMeasure) {
                        this.metaDataColumn = column;
                        break;
                    }
                }
            }, AnimatedText.prototype.getAdjustedFontHeight = function(availableWidth, textToMeasure, seedFontHeight) {
                var _a, _b, _c, _d, textProperties = {
                    fontFamily: null === (_a = this._animatedTextOptions.textProperties) || void 0 === _a ? void 0 : _a.fontFamily,
                    fontWeight: null === (_b = this._animatedTextOptions.textProperties) || void 0 === _b ? void 0 : _b.fontWeight,
                    fontStyle: null === (_c = this._animatedTextOptions.textProperties) || void 0 === _c ? void 0 : _c.fontStyle,
                    textDecoration: null === (_d = this._animatedTextOptions.textProperties) || void 0 === _d ? void 0 : _d.textDecoration,
                    text: textToMeasure
                };
                return this.getAdjustedFontHeightCore(textProperties, availableWidth, seedFontHeight, 0);
            }, AnimatedText.prototype.getAdjustedFontHeightCore = function(textProperties, availableWidth, seedFontHeight, iteration) {
                return iteration > 10 ? seedFontHeight : (textProperties.fontSize = _VisualsCommon_Utility_StandaloneUtility1__WEBPACK_IMPORTED_MODULE_1__.FP.toString(seedFontHeight), 
                _VisualsCommon_services_textMeasurementService__WEBPACK_IMPORTED_MODULE_2__.b.measureSvgTextWidth(textProperties) < availableWidth ? seedFontHeight : this.getAdjustedFontHeightCore(textProperties, availableWidth, .9 * seedFontHeight, iteration + 1));
            }, AnimatedText.prototype.clear = function() {
                this.svg.select(this.mainText.selector).text("");
            }, AnimatedText.prototype.doValueTransition = function(startValue, endValue, displayUnitSystemType, animationOptions, duration, forceUpdate, formatter, datumTransform) {
                var _a, _b, _c, _d;
                if (forceUpdate || startValue !== endValue || null == endValue) {
                    startValue || (startValue = 0), datumTransform || (datumTransform = this.getDefaultDatumTransform());
                    var svg = this.svg, viewport = this.currentViewport, height = viewport.height, width = viewport.width, seedFontHeight = this.getSeedFontHeight(width, height), translateX = this.getTranslateX(width), translateY = this.getTranslateY(seedFontHeight), metaDataColumn = this.metaDataColumn;
                    formatter || (formatter = (0, _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__.Ue)({
                        format: this.getFormatString(this.dataPointObjects, metaDataColumn),
                        value: endValue,
                        displayUnitSystemType,
                        formatSingleValues: !0,
                        allowFormatBeautification: !0,
                        columnType: metaDataColumn ? metaDataColumn.type : void 0
                    }));
                    var startText = String(startValue), endText = String(endValue);
                    (_.isEmpty(endValue) || "string" != typeof endValue) && (endText = formatter.format(endValue)), 
                    (_.isEmpty(startValue) || "string" != typeof startValue) && (startText = formatter.format(startValue)), 
                    svg.classed(this.name, !0);
                    var endValueArr = [ datumTransform.getDatum(endValue, endText) ], textElement = svg.selectAll("text").data(endValueArr), textElementUpdate = textElement.enter().append("text").classed(this.mainText.class, !0).merge(textElement), fontHeight = this.getAdjustedFontHeight(width, endText, seedFontHeight);
                    if (translateY = this.getTranslateY(fontHeight + (height - fontHeight) / 2), textElementUpdate.text(startText).attr("text-anchor", this.getTextAnchor()).attr("font-size", fontHeight).attr("transform", (0, 
                    _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__.Iu)(translateX, translateY)).style("font-style", null === (_a = this._animatedTextOptions.textProperties) || void 0 === _a ? void 0 : _a.fontStyle).style("text-decoration", null === (_b = this._animatedTextOptions.textProperties) || void 0 === _b ? void 0 : _b.textDecoration).style("font-weight", null === (_c = this._animatedTextOptions.textProperties) || void 0 === _c ? void 0 : _c.fontWeight).style("font-family", null === (_d = this._animatedTextOptions.textProperties) || void 0 === _d ? void 0 : _d.fontFamily).style("fill", this.getTextColor()).call(_Visuals_common_tooltipUtils__WEBPACK_IMPORTED_MODULE_5__.Q, [ startText ]), 
                    null == endValue || metaDataColumn && (0, _Visuals_common_axisHelper__WEBPACK_IMPORTED_MODULE_6__.v9)(metaDataColumn.type) || "string" == typeof endValue || "string" == typeof startValue) textElementUpdate.text(endText).call(_Visuals_common_tooltipUtils__WEBPACK_IMPORTED_MODULE_5__.Q, [ endText ]); else {
                        var interpolatedValue_1 = startValue;
                        textElementUpdate.transition().duration(duration).tween("text", function(d) {
                            var value = datumTransform.getValue(d), i = d3.interpolate(interpolatedValue_1, value);
                            return function(t) {
                                var num = i(t);
                                this.textContent = formatter.format(num);
                            };
                        });
                    }
                    return (0, _VisualsCommon_Utility_svgUtil__WEBPACK_IMPORTED_MODULE_4__.bL)(animationOptions, textElementUpdate), 
                    textElementUpdate;
                }
            }, AnimatedText.prototype.getDefaultDatumTransform = function() {
                return {
                    getDatum: function(value, _formattedValue) {
                        return {
                            value
                        };
                    },
                    getValue: function(datum) {
                        return datum.value;
                    }
                };
            }, Object.defineProperty(AnimatedText.prototype, "animatedTextOptions", {
                get: function() {
                    return this._animatedTextOptions;
                },
                set: function(options) {
                    this._animatedTextOptions = options;
                },
                enumerable: !1,
                configurable: !0
            }), AnimatedText.prototype.getTextColor = function() {
                var _a, styleForegroundColor = this.style && _Visuals_common_colorHelper__WEBPACK_IMPORTED_MODULE_7__.v.getThemeColor(this.style, "foreground");
                return (null === (_a = this._animatedTextOptions) || void 0 === _a ? void 0 : _a.titleColor) || styleForegroundColor || this.defaultTitleColor;
            }, AnimatedText.prototype.getSeedFontHeight = function(boundingWidth, boundingHeight) {
                var estimatedSize = Math.floor(.75 * Math.min(boundingWidth, boundingHeight)), maxFontSize = this.visualConfiguration.maxFontSize;
                return maxFontSize ? Math.min(maxFontSize, estimatedSize) : estimatedSize;
            }, AnimatedText.prototype.getTranslateX = function(width) {
                if (this.visualConfiguration) switch (this.visualConfiguration.align) {
                  case "left":
                    return 0;

                  case "right":
                    return width;
                }
                return width / 2;
            }, AnimatedText.prototype.getTranslateY = function(height) {
                return height;
            }, AnimatedText.prototype.getTextAnchor = function() {
                if (this.visualConfiguration) switch (this.visualConfiguration.align) {
                  case "left":
                    return "start";

                  case "right":
                    return "end";
                }
                return "middle";
            }, AnimatedText.prototype.getFormatString = function(dataPointObjects, column) {
                return _VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_8__.fF.assertAnyValue(column, "column"), 
                (0, _VisualsData_formatting_valueFormatter__WEBPACK_IMPORTED_MODULE_3__.eU)(dataPointObjects, column, _Visuals_capabilities_dataViewObjectProperties__WEBPACK_IMPORTED_MODULE_9__.e0.formatString);
            }, AnimatedText;
        }();
    }
} ]);