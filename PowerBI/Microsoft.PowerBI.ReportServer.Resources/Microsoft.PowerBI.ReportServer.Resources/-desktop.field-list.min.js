"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "field-list" ], {
    6788: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            FieldListModule: function() {
                return FieldListModule;
            }
        });
        var tslib_es6 = __webpack_require__(81337), ExploreUI_module = __webpack_require__(87121), field_list_scoped_services = __webpack_require__(87616), add_to_drillthrough_menu_item = __webpack_require__(89079), add_to_filters_menu_item = __webpack_require__(63943), add_to_field_menu_item = __webpack_require__(27541), namedModelObjectUtils = __webpack_require__(70863), expand_collapse_menu_items = __webpack_require__(19129), pbi_menu_contracts = __webpack_require__(64560), core = __webpack_require__(50423), menu_factory = __webpack_require__(34162), expand_collapse_menu_item_handlers = __webpack_require__(66444), add_to_field_menu_item_handler = __webpack_require__(89726), add_to_filters_menu_item_handlers = __webpack_require__(40443), add_to_drillthrough_menu_item_handler = __webpack_require__(30527), menuItemSections = [ add_to_field_menu_item.wg, expand_collapse_menu_items.qd, add_to_filters_menu_item.tj, add_to_drillthrough_menu_item._b, add_to_filters_menu_item.z$ ], FieldListMenuStrategy = function() {
            function FieldListMenuStrategy(menuFactory, expandCollapseMenuItemHandlers, checkMenuItemHandler, addToFiltersMenuItemHandler, addToDrillthroughItemHandler) {
                this.menuFactory = menuFactory, this.expandCollapseMenuItemHandlers = expandCollapseMenuItemHandlers, 
                this.checkMenuItemHandler = checkMenuItemHandler, this.addToFiltersMenuItemHandler = addToFiltersMenuItemHandler, 
                this.addToDrillthroughItemHandler = addToDrillthroughItemHandler, this.menuMode = pbi_menu_contracts.Kb.Compact, 
                this.activeContextMenuRef = void 0;
            }
            return FieldListMenuStrategy.prototype.menuClick = function(event) {}, FieldListMenuStrategy.prototype.menuOpen = function(event) {
                this.activeContextMenuRef = event.menuRef;
            }, FieldListMenuStrategy.prototype.menuClose = function(event) {
                this.activeContextMenuRef = void 0;
            }, FieldListMenuStrategy.prototype.closeActiveMenu = function() {
                void 0 !== this.activeContextMenuRef && this.activeContextMenuRef.close();
            }, FieldListMenuStrategy.prototype.getMenu = function(event) {
                var _a;
                return this.menuFactory.getMenu(event, menuItemSections, this.getItemMenuHandlers(null === (_a = event.flatNode) || void 0 === _a ? void 0 : _a.node.data));
            }, FieldListMenuStrategy.prototype.menuItemClick = function(event) {
                var _a, _b, menuItemHandler = this.getItemMenuHandlers(null === (_a = event.flatNode) || void 0 === _a ? void 0 : _a.node.data).get(event.menuItem.id);
                menuItemHandler.execute ? menuItemHandler.execute(event) : menuItemHandler.executeMany && menuItemHandler.executeMany([ null === (_b = event.flatNode) || void 0 === _b ? void 0 : _b.node.data ], event);
            }, FieldListMenuStrategy.prototype.getItemMenuHandlers = function(item) {
                var handlers = [];
                return handlers.push.apply(handlers, this.expandCollapseMenuItemHandlers.getHandlers()), 
                item && (((0, namedModelObjectUtils.t3)(item) || (0, namedModelObjectUtils.kb)(item) || (0, 
                namedModelObjectUtils.y3)(item) || (0, namedModelObjectUtils.ez)(item)) && handlers.push.apply(handlers, this.checkMenuItemHandler.getHandlers(item)), 
                ((0, namedModelObjectUtils.t3)(item) || (0, namedModelObjectUtils.kb)(item) || (0, 
                namedModelObjectUtils.ez)(item)) && (handlers.push.apply(handlers, this.addToFiltersMenuItemHandler.getHandlers(item)), 
                handlers.push(this.addToDrillthroughItemHandler.getHandler(item)))), new Map(handlers);
            }, FieldListMenuStrategy.\u0275fac = function(t) {
                return new (t || FieldListMenuStrategy)(core["\u0275\u0275inject"](menu_factory.E), core["\u0275\u0275inject"](expand_collapse_menu_item_handlers.T), core["\u0275\u0275inject"](add_to_field_menu_item_handler.H), core["\u0275\u0275inject"](add_to_filters_menu_item_handlers.q), core["\u0275\u0275inject"](add_to_drillthrough_menu_item_handler.b));
            }, FieldListMenuStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: FieldListMenuStrategy,
                factory: FieldListMenuStrategy.\u0275fac
            }), FieldListMenuStrategy;
        }(), events = __webpack_require__(8590), modeling_selection_service = __webpack_require__(9738), click_strategy_service = __webpack_require__(90166), field_list_tree_service = __webpack_require__(75096), modeling_scoped_services_providers = __webpack_require__(7779), pbi_tree_contracts = __webpack_require__(46015), Subscription = __webpack_require__(34763), map = __webpack_require__(14172), event_bridge_service = __webpack_require__(11494), model_service = __webpack_require__(93215), schema_item_activation_service_synchronizer = __webpack_require__(8538), getting_started_service = __webpack_require__(29834), model_change_selection_synchronizer = __webpack_require__(50998), model_to_pbi_tree_caption_strategy = __webpack_require__(29524), model_to_pbi_tree_draggable_item_strategy = __webpack_require__(88023), model_to_pbi_tree_hidden_item_strategy = __webpack_require__(72193), model_to_pbi_tree_inline_item_strategy = __webpack_require__(72525), model_to_pbi_tree_checkable_item_strategy = __webpack_require__(81141), key_board_strategy_service = __webpack_require__(412), tooltip_strategy_service = __webpack_require__(66014), field_list_check_strategy = __webpack_require__(78225), drag_drop_strategy_service = __webpack_require__(58286), pbi_field_list_component = __webpack_require__(65005), field_list_watermark_component = __webpack_require__(56213), common = __webpack_require__(77476), FieldListContainerComponent = function() {
            function FieldListContainerComponent(eventBridge, modelService, modelingSelectionService, modelingCheckingService, modelChangeSelectionSynchronizer, schemaItemActivationServiceSynchronizer, captionSetting, draggableSetting, hiddenSetting, inlineItemsSetting, checkableSetting, fieldListTreeService, clickStrategy, menuStrategy, checkStrategy, dragDropStrategy, keyboardStrategy, tooltipStrategy, gettingStartedService) {
                this.modelService = modelService, this.modelingSelectionService = modelingSelectionService, 
                this.modelingCheckingService = modelingCheckingService, this.modelChangeSelectionSynchronizer = modelChangeSelectionSynchronizer, 
                this.schemaItemActivationServiceSynchronizer = schemaItemActivationServiceSynchronizer, 
                this.captionSetting = captionSetting, this.draggableSetting = draggableSetting, 
                this.hiddenSetting = hiddenSetting, this.inlineItemsSetting = inlineItemsSetting, 
                this.checkableSetting = checkableSetting, this.fieldListTreeService = fieldListTreeService, 
                this.clickStrategy = clickStrategy, this.menuStrategy = menuStrategy, this.checkStrategy = checkStrategy, 
                this.dragDropStrategy = dragDropStrategy, this.keyboardStrategy = keyboardStrategy, 
                this.tooltipStrategy = tooltipStrategy, this.gettingStartedService = gettingStartedService, 
                this.fieldListTree$ = this.fieldListTreeService.fieldListTree$, this.fieldListOptions = {
                    click: this.clickStrategy,
                    check: this.checkStrategy,
                    menu: this.menuStrategy,
                    dragDrop: this.dragDropStrategy,
                    keyboard: this.keyboardStrategy,
                    tooltip: this.tooltipStrategy
                }, this.pbiTreeNodeSettingOptions = {
                    captionSetting: this.captionSetting,
                    draggableSetting: this.draggableSetting,
                    inlineItemsSetting: this.inlineItemsSetting,
                    checkableSetting: this.checkableSetting,
                    hiddenSetting: this.hiddenSetting
                }, this.checkMode = pbi_tree_contracts.kH.Multi, this.subscription = new Subscription.w, 
                this.fieldListTreeService.modelToPbiTreeConverterOptions = this.pbiTreeNodeSettingOptions, 
                this.subscriptionManager = eventBridge.createChannelSubscriptionManager();
            }
            return FieldListContainerComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.subscriptionManager.subscribe(events.LE3, function() {
                    return _this.modelService.update(void 0);
                }), this.subscription.add(this.modelService.modelChange$.subscribe(function(modelChange) {
                    return _this.onModelChange(modelChange);
                })), this.subscription.add(this.modelingSelectionService.selectionChanged.subscribe(function(selection) {
                    return _this.updateSelection(selection);
                })), this.subscription.add(this.modelingCheckingService.selectionChanged.subscribe(function(checked) {
                    return _this.fieldListTreeService.updateChecked(checked);
                })), this.loading$ = this.gettingStartedService.currentState$.pipe((0, map.U)(function(state) {
                    return 1 === state;
                })), this.emptyModel$ = this.gettingStartedService.currentState$.pipe((0, map.U)(function(state) {
                    return 0 === state;
                })), this.schemaItemActivationServiceSynchronizer.initialize(), this.modelService.update(void 0);
            }, FieldListContainerComponent.prototype.ngOnDestroy = function() {
                this.subscriptionManager.unsubscribeAll(), this.subscription.unsubscribe();
            }, FieldListContainerComponent.prototype.updateSelection = function(selection) {
                this.closeActiveMenus(), this.fieldListTreeService.updateSelected(selection);
            }, FieldListContainerComponent.prototype.closeActiveMenus = function() {
                this.menuStrategy && this.menuStrategy.closeActiveMenu();
            }, FieldListContainerComponent.prototype.onModelChange = function(modelChange) {
                this.modelChangeSelectionSynchronizer.update(modelChange.model, modelChange.appliedChanges), 
                this.fieldListTreeService.setOrUpdateFieldListTreeModel(modelChange.model, this.modelingSelectionService.selection, this.modelingCheckingService.selection);
            }, FieldListContainerComponent.\u0275fac = function(t) {
                return new (t || FieldListContainerComponent)(core["\u0275\u0275directiveInject"](event_bridge_service.J), core["\u0275\u0275directiveInject"](model_service.b), core["\u0275\u0275directiveInject"](modeling_selection_service.W6), core["\u0275\u0275directiveInject"](modeling_selection_service.fc), core["\u0275\u0275directiveInject"](model_change_selection_synchronizer.O), core["\u0275\u0275directiveInject"](schema_item_activation_service_synchronizer.h), core["\u0275\u0275directiveInject"](model_to_pbi_tree_caption_strategy.B), core["\u0275\u0275directiveInject"](model_to_pbi_tree_draggable_item_strategy.F), core["\u0275\u0275directiveInject"](model_to_pbi_tree_hidden_item_strategy.J), core["\u0275\u0275directiveInject"](model_to_pbi_tree_inline_item_strategy.wt), core["\u0275\u0275directiveInject"](model_to_pbi_tree_checkable_item_strategy.x), core["\u0275\u0275directiveInject"](field_list_tree_service.p), core["\u0275\u0275directiveInject"](click_strategy_service.Y), core["\u0275\u0275directiveInject"](FieldListMenuStrategy), core["\u0275\u0275directiveInject"](field_list_check_strategy.F), core["\u0275\u0275directiveInject"](drag_drop_strategy_service.H), core["\u0275\u0275directiveInject"](key_board_strategy_service.W), core["\u0275\u0275directiveInject"](tooltip_strategy_service.Z), core["\u0275\u0275directiveInject"](getting_started_service.c));
            }, FieldListContainerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: FieldListContainerComponent,
                selectors: [ [ "field-list-container" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]((0, tslib_es6.__spreadArray)((0, 
                tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], field_list_scoped_services.h, !0), modeling_scoped_services_providers.r, !0), [ click_strategy_service.Y, FieldListMenuStrategy, expand_collapse_menu_item_handlers.T, field_list_tree_service.p ], !1)) ],
                decls: 6,
                vars: 11,
                consts: [ [ 1, "container", 3, "click" ], [ "focus-nav-mode", "Browser", "fluent", "true", 3, "fieldListTree", "scrollSelectedItemIntoViewOnInit", "checkMode", "options", "loading" ], [ 1, "pbi-field-list-watermark" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "div", 0), core["\u0275\u0275listener"]("click", function($event) {
                        return $event.stopPropagation();
                    }), core["\u0275\u0275elementStart"](1, "pbi-field-list", 1), core["\u0275\u0275pipe"](2, "async"), 
                    core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), core["\u0275\u0275element"](5, "field-list-watermark", 2), 
                    core["\u0275\u0275elementEnd"]()()), 2 & rf && (core["\u0275\u0275advance"](1), 
                    core["\u0275\u0275property"]("fieldListTree", core["\u0275\u0275pipeBind1"](2, 5, ctx.emptyModel$) ? null : core["\u0275\u0275pipeBind1"](3, 7, ctx.fieldListTree$))("scrollSelectedItemIntoViewOnInit", !0)("checkMode", ctx.checkMode)("options", ctx.fieldListOptions)("loading", core["\u0275\u0275pipeBind1"](4, 9, ctx.loading$)));
                },
                dependencies: [ pbi_field_list_component.l, field_list_watermark_component.s, common.AsyncPipe ],
                styles: [ ".container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%}pbi-field-list[_ngcontent-%COMP%]{flex:1;padding:0 4px}pbi-field-list[_ngcontent-%COMP%]     pbi-tree{margin-top:8px;padding-top:0!important}" ],
                changeDetection: 0
            }), FieldListContainerComponent;
        }(), Data_module = __webpack_require__(52910), lazy_load_module = __webpack_require__(82156), localization_module = __webpack_require__(79061), modeling_services_providers = __webpack_require__(34256), model_object_tooltip_module = __webpack_require__(69792), field_list_services_providers = __webpack_require__(41920), field_list_watermark_module = __webpack_require__(97930), pbi_scrollbar_module = __webpack_require__(72359), UILibrary_module = __webpack_require__(94785), pbi_field_list_module = __webpack_require__(63654), pbi_menu_module = __webpack_require__(94841), manifests = [ {
            type: FieldListContainerComponent,
            componentId: "FieldListContainerComponentId"
        } ], FieldListModule = function() {
            function FieldListModule() {}
            return FieldListModule.\u0275fac = function(t) {
                return new (t || FieldListModule);
            }, FieldListModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: FieldListModule
            }), FieldListModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], modeling_services_providers.q, !0), field_list_services_providers.U, !0), [ model_to_pbi_tree_hidden_item_strategy.J ], !1),
                imports: [ common.CommonModule, Data_module.O, ExploreUI_module.J, lazy_load_module.N.withManifests(manifests), localization_module.v, pbi_menu_module.b, pbi_scrollbar_module.K, UILibrary_module.g, pbi_field_list_module.X, field_list_watermark_module.g, model_object_tooltip_module.v ]
            }), FieldListModule;
        }();
    }
} ]);