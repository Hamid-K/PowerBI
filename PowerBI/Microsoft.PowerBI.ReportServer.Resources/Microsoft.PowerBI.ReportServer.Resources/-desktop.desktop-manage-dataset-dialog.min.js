"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "desktop-manage-dataset-dialog" ], {
    96038: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            jn: function() {
                return expand;
            }
        });
        var C_w_1_s_node_modules_pnpm_babel_runtime_7_14_8_node_modules_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37419), _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73449);
        function expand(project, concurrent, scheduler) {
            return void 0 === concurrent && (concurrent = Number.POSITIVE_INFINITY), concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent, 
            function(source) {
                return source.lift(new ExpandOperator(project, concurrent, scheduler));
            };
        }
        var ExpandOperator = function() {
            function ExpandOperator(project, concurrent, scheduler) {
                this.project = project, this.concurrent = concurrent, this.scheduler = scheduler;
            }
            return ExpandOperator.prototype.call = function(subscriber, source) {
                return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
            }, ExpandOperator;
        }(), ExpandSubscriber = function(_SimpleOuterSubscribe) {
            function ExpandSubscriber(destination, project, concurrent, scheduler) {
                var _this;
                return (_this = _SimpleOuterSubscribe.call(this, destination) || this).project = project, 
                _this.concurrent = concurrent, _this.scheduler = scheduler, _this.index = 0, _this.active = 0, 
                _this.hasCompleted = !1, concurrent < Number.POSITIVE_INFINITY && (_this.buffer = []), 
                _this;
            }
            (0, C_w_1_s_node_modules_pnpm_babel_runtime_7_14_8_node_modules_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.Z)(ExpandSubscriber, _SimpleOuterSubscribe), 
            ExpandSubscriber.dispatch = function(arg) {
                arg.subscriber.subscribeToProjection(arg.result, arg.value, arg.index);
            };
            var _proto2 = ExpandSubscriber.prototype;
            return _proto2._next = function(value) {
                var destination = this.destination;
                if (destination.closed) this._complete(); else {
                    var index = this.index++;
                    if (this.active < this.concurrent) {
                        destination.next(value);
                        try {
                            var result = (0, this.project)(value, index);
                            this.scheduler ? this.destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, {
                                subscriber: this,
                                result,
                                value,
                                index
                            })) : this.subscribeToProjection(result, value, index);
                        } catch (e) {
                            destination.error(e);
                        }
                    } else this.buffer.push(value);
                }
            }, _proto2.subscribeToProjection = function(result, value, index) {
                this.active++, this.destination.add((0, _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__.ft)(result, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_1__.IY(this)));
            }, _proto2._complete = function() {
                this.hasCompleted = !0, this.hasCompleted && 0 === this.active && this.destination.complete(), 
                this.unsubscribe();
            }, _proto2.notifyNext = function(innerValue) {
                this._next(innerValue);
            }, _proto2.notifyComplete = function() {
                var buffer = this.buffer;
                this.active--, buffer && buffer.length > 0 && this._next(buffer.shift()), this.hasCompleted && 0 === this.active && this.destination.complete();
            }, ExpandSubscriber;
        }(_innerSubscribe__WEBPACK_IMPORTED_MODULE_1__.Ds);
    },
    19828: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            X: function() {
                return retry;
            }
        });
        var C_w_1_s_node_modules_pnpm_babel_runtime_7_14_8_node_modules_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37419), _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47875);
        function retry(count) {
            return void 0 === count && (count = -1), function(source) {
                return source.lift(new RetryOperator(count, source));
            };
        }
        var RetryOperator = function() {
            function RetryOperator(count, source) {
                this.count = count, this.source = source;
            }
            return RetryOperator.prototype.call = function(subscriber, source) {
                return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
            }, RetryOperator;
        }(), RetrySubscriber = function(_Subscriber) {
            function RetrySubscriber(destination, count, source) {
                var _this;
                return (_this = _Subscriber.call(this, destination) || this).count = count, _this.source = source, 
                _this;
            }
            return (0, C_w_1_s_node_modules_pnpm_babel_runtime_7_14_8_node_modules_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.Z)(RetrySubscriber, _Subscriber), 
            RetrySubscriber.prototype.error = function(err) {
                if (!this.isStopped) {
                    var source = this.source, count = this.count;
                    if (0 === count) return _Subscriber.prototype.error.call(this, err);
                    count > -1 && (this.count = count - 1), source.subscribe(this._unsubscribeAndRecycle());
                }
            }, RetrySubscriber;
        }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.L);
    },
    19178: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            Y: function() {
                return GroupStore;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(81337), _actions_group__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(82515), _reducers_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(74076), _reducers_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40898), rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(82762), rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11547), rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59017), rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(81905), rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14172), rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(48787), rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(41198), rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(23558), _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(50423), _ngrx_store__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(85732), GroupStore = function() {
            function GroupStore(store) {
                this.store = store;
            }
            return Object.defineProperty(GroupStore.prototype, "selectedGroup$", {
                get: function() {
                    return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.S6);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GroupStore.prototype, "selectedFolderId$", {
                get: function() {
                    return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.CW);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GroupStore.prototype, "myFolderObjectId$", {
                get: function() {
                    return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.iF);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GroupStore.prototype, "nonMyWorkspaces$", {
                get: function() {
                    return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.c_);
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(GroupStore.prototype, "myWorkspace$", {
                get: function() {
                    return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.Au);
                },
                enumerable: !1,
                configurable: !0
            }), GroupStore.prototype.foldersWithEditPermissions = function(includeMyWorkspace) {
                var _this = this;
                return (0, rxjs__WEBPACK_IMPORTED_MODULE_1__.D)(this.ensureWorkspacesLoaded()).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.w)(function() {
                    return (0, rxjs__WEBPACK_IMPORTED_MODULE_3__.aj)([ _this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_4__.Ou), includeMyWorkspace ? _this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.Ze) : (0, 
                    rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(null) ]);
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.U)(function(_a) {
                    var myWorkspace = _a[1], sortedFolders = _(_a[0]).filter(function(f) {
                        return !myWorkspace || !_.isEqual(f, myWorkspace);
                    }).sortBy(function(f) {
                        return f.displayName.toLocaleLowerCase();
                    }).value();
                    return myWorkspace ? (0, tslib__WEBPACK_IMPORTED_MODULE_7__.__spreadArray)([ myWorkspace ], sortedFolders, !0) : sortedFolders;
                }));
            }, GroupStore.prototype.add = function(group, isFolder) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.mm({
                    group,
                    isFolder
                }));
            }, Object.defineProperty(GroupStore.prototype, "folders", {
                get: function() {
                    return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_4__.xh).pipe((0, 
                    rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.U)(function(value) {
                        return _.map(Object.keys(value), function(key) {
                            return value[key];
                        });
                    }));
                },
                enumerable: !1,
                configurable: !0
            }), GroupStore.prototype.remove = function(objectId) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.JW(objectId));
            }, GroupStore.prototype.update = function(folders) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.BN(folders));
            }, GroupStore.prototype.updateGroup = function(group) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.bn(group));
            }, GroupStore.prototype.updatePartialWorkspaces = function(folders) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.ZG(folders));
            }, GroupStore.prototype.load = function(groupObjectId) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.q5({
                    groupId: groupObjectId
                }));
            }, GroupStore.prototype.getGroupById = function(groupObjectId) {
                return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.VL, {
                    id: groupObjectId
                });
            }, GroupStore.prototype.getAllNonEmptyDomains = function() {
                return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.vL);
            }, GroupStore.prototype.addDomainFilters = function(domainObjectIds) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.qC({
                    domainObjectIds
                }));
            }, GroupStore.prototype.deleteDomainFilters = function(domainObjectIds) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.tk({
                    domainObjectIds
                }));
            }, GroupStore.prototype.getGroupObjectId = function(groupId) {
                return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.cM).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.w)(function(groups) {
                    for (var groupObjectId in groups) {
                        var selectedGroup = groups[groupObjectId];
                        if (selectedGroup.id === groupId) return (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(null == selectedGroup ? void 0 : selectedGroup.objectId);
                    }
                    return (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(void 0);
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1));
            }, GroupStore.prototype.loadSuccess = function(groupObjectId, dashboardContainer, folderNumericId, permissions) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.Xt({
                    id: groupObjectId,
                    group: dashboardContainer,
                    folderId: folderNumericId,
                    permissions
                }));
            }, GroupStore.prototype.loadSuccessBasedOnWorkspaceContext = function(groupObjectId, dashboardContainer) {
                var _this = this;
                this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.ve).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1)).subscribe(function(folderId) {
                    _this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.Xt(folderId ? {
                        id: groupObjectId,
                        group: dashboardContainer,
                        folderId: void 0,
                        permissions: void 0,
                        currentWorkspaceType: "folder"
                    } : {
                        id: groupObjectId,
                        group: dashboardContainer,
                        folderId: void 0,
                        permissions: void 0,
                        currentWorkspaceType: "group"
                    }));
                });
            }, GroupStore.prototype.select = function(groupObjectId) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.Ph({
                    id: groupObjectId
                }));
            }, GroupStore.prototype.switch = function(groupObjectId, groupSwitchOptions) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.q_({
                    groupId: groupObjectId,
                    groupSwitchOptions
                }));
            }, GroupStore.prototype.ensureGroupArtifactsLoaded = function(groupObjectId, addArtifacts) {
                var _this = this;
                return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.s4).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(loaded) {
                    return !loaded;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1)).subscribe(function() {
                    _this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__._S({
                        groupObjectId,
                        refreshIfStale: !1,
                        addArtifacts
                    }));
                }), this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.VL, {
                    id: groupObjectId
                }).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.M)(this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.Uy)), (0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(_a) {
                    var group = _a[0];
                    return !group || !(group.loaded && (!addArtifacts || !0 === _a[1]));
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.U)(function() {
                    return !0;
                })).toPromise();
            }, GroupStore.prototype.ensureGroupArtifactsLoadedOrError = function(groupObjectId) {
                var _this = this;
                return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.s4).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(loaded) {
                    return !loaded;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1)).subscribe(function() {
                    _this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__._S({
                        groupObjectId,
                        refreshIfStale: !1
                    }));
                }), this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.VL, {
                    id: groupObjectId
                }).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(group) {
                    return !group || !group.loaded && !group.loadedWithError;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.U)(function() {
                    return !0;
                })).toPromise();
            }, GroupStore.prototype.ensureGroupSelectedAndLoaded = function(groupObjectId) {
                return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.S6).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(group) {
                    return !group || !group.loaded || group.objectId !== groupObjectId;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.U)(function() {
                    return !0;
                })).toPromise();
            }, GroupStore.prototype.ensureWorkspacesLoaded = function() {
                var _this = this;
                return this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.LD).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(groups) {
                    return !groups || groups.loading;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1)).subscribe(function(groups) {
                    groups.loaded || _this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.Us);
                }), this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.LD).pipe((0, 
                rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(groups) {
                    return !groups || !groups.loaded;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.U)(function() {
                    return !0;
                })).toPromise();
            }, GroupStore.prototype.forceReloadWorkspaces = function() {
                return this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.Us), 
                this.store.select(_reducers_index__WEBPACK_IMPORTED_MODULE_0__.LD).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.n)(function(groups) {
                    return !groups || !groups.loaded;
                }), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.q)(1), (0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.U)(function() {
                    return !0;
                })).toPromise();
            }, GroupStore.prototype.updateMyWorkSpaceCapacity = function(capacity) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.Vd(capacity));
            }, GroupStore.prototype.loadFoldersSuccess = function(folders) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.uw(folders));
            }, GroupStore.prototype.hide = function(group) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.c({
                    group
                }));
            }, GroupStore.prototype.unhide = function(group) {
                this.store.dispatch(new _actions_group__WEBPACK_IMPORTED_MODULE_8__.yO({
                    group
                }));
            }, GroupStore.\u0275fac = function(t) {
                return new (t || GroupStore)(_angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275inject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_13__.yh));
            }, GroupStore.\u0275prov = _angular_core__WEBPACK_IMPORTED_MODULE_12__["\u0275\u0275defineInjectable"]({
                token: GroupStore,
                factory: GroupStore.\u0275fac,
                providedIn: "root"
            }), GroupStore;
        }();
    },
    4301: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            $3: function() {
                return updateArtifactInfoDatamart;
            },
            Ap: function() {
                return bulkAdd;
            },
            BQ: function() {
                return loadDatamartSample;
            },
            CZ: function() {
                return onTryAgain;
            },
            Iz: function() {
                return refreshDatamart;
            },
            Mo: function() {
                return onDatamartUpdated;
            },
            Nl: function() {
                return addDatamartFavoriteSuccess;
            },
            Ok: function() {
                return OnUpdateAutoAddToDefaultDatasetValueSuccess;
            },
            Ou: function() {
                return unselectDatamart;
            },
            PZ: function() {
                return retrySuspendedDatamartError;
            },
            QC: function() {
                return loadDatamartSampleSuccess;
            },
            SX: function() {
                return getDatamartInfoSuccess;
            },
            Sw: function() {
                return addOrUpdateDatamartRecentSuccess;
            },
            XI: function() {
                return deleteDatamartFavoriteSuccess;
            },
            bU: function() {
                return datamartInitialized;
            },
            c7: function() {
                return loadDatamartFavoritesSuccess;
            },
            d7: function() {
                return selectDatamart;
            },
            fr: function() {
                return OnAutoAddToDefaultDatasetValueRequestedSuccess;
            },
            g3: function() {
                return loadDatamartWorkspace;
            },
            gY: function() {
                return loadDatamartRecentsSuccess;
            },
            hG: function() {
                return updateDatamartDescriptionSuccess;
            },
            lp: function() {
                return optimisticallyUpdateDatamartMetadataError;
            },
            nI: function() {
                return deleteDatamartInternal;
            },
            pT: function() {
                return loadDatamartSuccess;
            },
            rD: function() {
                return loadDatamartSampleError;
            },
            rM: function() {
                return updateCurrentRefreshStatus;
            },
            s: function() {
                return addDatamartFavoriteOptimistically;
            },
            sl: function() {
                return DatamartTakeoverSuccess;
            },
            uB: function() {
                return refreshDatamartError;
            },
            uh: function() {
                return moveToSubfolderSuccess;
            },
            vh: function() {
                return resumeSuspendedDatamartSucceeded;
            },
            wV: function() {
                return updateDatamartNameSuccess;
            }
        });
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85732), base = "[Datamart Metadata]", datamartInitialized = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Create datamart error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Datamart initalized"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), deleteDatamartInternal = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Delete datamart"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Delete datamart internal"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), refreshDatamart = ((0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Delete datamart Success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Delete datamart error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Refresh datamart"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), refreshDatamartError = ((0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Refresh datamart succeeded")), 
        (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Refresh datamart error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), updateDatamartNameSuccess = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update datamart name"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update datamart name success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), updateDatamartDescriptionSuccess = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update datamart name error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update datamart description"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update datamart description success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), bulkAdd = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Add bulk of datamarts"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), optimisticallyUpdateDatamartMetadataError = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update datamart description error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Optimistically update datamart metadata"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Optimistically update datamart metadata success")), 
        (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Optimistically update datamart metadata error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), loadDatamartWorkspace = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update datamart workspace"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), selectDatamart = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Select datamart"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), unselectDatamart = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Unselect datamart")), getDatamartInfoSuccess = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart info"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Datamart info succeeded"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), loadDatamartSuccess = ((0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart info error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Load datamart success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), updateCurrentRefreshStatus = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Load datamart error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update current refresh status"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), updateArtifactInfoDatamart = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update artifact info form"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), onTryAgain = ((0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart refresh history"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart refresh history success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart refresh history error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart batch history"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart batch history success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get datamart batch history error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Try Again"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), retrySuspendedDatamartError = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Retry suspended datamart error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), resumeSuspendedDatamartSucceeded = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Failure")), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Retry suspended datamart success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), onDatamartUpdated = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Datamart updated"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), DatamartTakeoverSuccess = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Datamart delete UI only"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Datamart takeover success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), loadDatamartRecentsSuccess = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Generate ADS Protocol By DatamartID"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Generate ADS Protocol By Connection string"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Load datamart recents success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)())), addOrUpdateDatamartRecentSuccess = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Add or Update datamart recent success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), loadDatamartFavoritesSuccess = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Load datamart favorites success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), addDatamartFavoriteOptimistically = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Add datamart favorite optimistically"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), addDatamartFavoriteSuccess = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Add datamart favorite success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), deleteDatamartFavoriteSuccess = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Delete datamart favorite success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), loadDatamartSample = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Set DW sample to load"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), loadDatamartSampleSuccess = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " DW Sample Load Success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), loadDatamartSampleError = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " DW Sample Load Error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), moveToSubfolderSuccess = (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Move To Subfolder Success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), OnAutoAddToDefaultDatasetValueRequestedSuccess = (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Auto Add To Default Dataset Value Requested Success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), OnUpdateAutoAddToDefaultDatasetValueSuccess = ((0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update Auto Add To Default Dataset Value"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Update Auto Add To Default Dataset Value Success"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()));
        (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get Active Query Runs Error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get Long Running Query Insights Error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Get Frequently Run Query Insights Error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)()), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.PH)("".concat(base, " Cancel Queries Error"), (0, 
        _ngrx_store__WEBPACK_IMPORTED_MODULE_0__.Ky)());
    },
    4565: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            EL: function() {
                return uniqueId;
            },
            LE: function() {
                return getDatamartIds;
            },
            WZ: function() {
                return getDatamartEntities;
            },
            pM: function() {
                return getAllDatamarts;
            }
        });
        var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81337), _actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4301), _ngrx_entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8894), _ngrx_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85732), _powerbi_DatahubStore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(93731), _powerbi_legacy_PowerBIContracts_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(2142), _powerbi_legacy_PowerBIContracts_contracts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(50600), _powerbi_legacy_PowerBIContracts_contracts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7600);
        function uniqueId(datamart) {
            return datamart.objectId;
        }
        var adapter = (0, _ngrx_entity__WEBPACK_IMPORTED_MODULE_0__.H)({
            selectId: function(datamart) {
                return uniqueId(datamart);
            },
            sortComparer: !1
        }), initialState = adapter.getInitialState({
            selectedDatamartId: null
        }), _a = ((0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.Lq)(initialState, (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.bU, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, datamartType = _a.datamartType, folderId = _a.folderId, subfolderId = _a.subfolderId;
            return state.entities[datamartObjectId] ? adapter.updateOne({
                id: datamartObjectId,
                changes: {
                    datamartType,
                    state: 0,
                    status: 1,
                    folderId,
                    subfolderId
                }
            }, state) : adapter.addOne({
                objectId: datamartObjectId,
                datamartType,
                state: 0,
                status: 1,
                folderId,
                subfolderId
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.Ou, function(state, _a) {
            return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, state), {
                selectedDatamartId: null
            });
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.g3, function(state, _a) {
            var datamarts = _a.datamarts, artifacts = _a.artifacts, genericMountedWarehouses = null == artifacts ? void 0 : artifacts.filter(function(artifact) {
                return "Warehouse" === artifact.artifactType || "SqlAnalyticsEndpoint" === artifact.artifactType;
            }), allDatamarts = datamarts;
            if (genericMountedWarehouses && genericMountedWarehouses.length > 0) {
                var genericDatamarts = _.map(genericMountedWarehouses, function(warehouse) {
                    return function(artifact, artifacts) {
                        var _a, _b, parentArtifact = null == artifacts ? void 0 : artifacts.find(function(a) {
                            var _a;
                            return null === (_a = a.artifactRelations) || void 0 === _a ? void 0 : _a.find(function(da) {
                                return da.dependentArtifactObjectId === artifact.objectId;
                            });
                        });
                        return {
                            objectId: artifact.objectId,
                            isGenericArtifact: !0,
                            datamartType: getDatamartTypeFromSqlAnalyticsEndpoint(artifact, parentArtifact),
                            datasetId: null === (_b = null === (_a = artifact.datasetRelations) || void 0 === _a ? void 0 : _a[0]) || void 0 === _b ? void 0 : _b.dependentArtifactId,
                            lastModifiedTimeUTC: "",
                            lastRefreshTimeUTC: "",
                            nextRefreshTimeUTC: "",
                            artifactPermissions: artifact.artifactPermissions,
                            lastRefreshStatus: 0,
                            state: artifact.extendedProperties.state,
                            status: artifact.extendedProperties.status,
                            id: artifact.extendedProperties.DatamartsMetadataId,
                            capabilities: artifact.extendedProperties.Capabilities,
                            displayName: artifact.displayName,
                            modifiedByUserId: artifact.modifiedByUserId,
                            modifiedByUser: {
                                id: artifact.modifiedByUser.id,
                                objectId: artifact.modifiedByUser.objectId,
                                displayName: artifact.modifiedByUser.name,
                                userPrincipalName: artifact.modifiedByUser.userPrincipalName
                            },
                            ownerUserId: artifact.ownerUserId,
                            ownerUser: {
                                id: artifact.ownerUser.id,
                                objectId: artifact.ownerUser.objectId,
                                displayName: artifact.ownerUser.name,
                                userPrincipalName: artifact.ownerUser.userPrincipalName
                            },
                            parentArtifact
                        };
                    }(warehouse, artifacts);
                });
                allDatamarts = datamarts.concat(genericDatamarts);
            }
            null == artifacts || artifacts.forEach(function(artifact) {
                var _a;
                null === (_a = artifact.datamartRelations) || void 0 === _a || _a.forEach(function(relatedDatamart) {
                    var datamart = allDatamarts.find(function(dm) {
                        return dm.id === relatedDatamart.dependentArtifactId;
                    });
                    datamart && (datamart.parentArtifact = artifact);
                });
            });
            var datamartWithCurrentRefreshStatus = _.map(allDatamarts, function(datamart) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, datamart), {
                    currentRefreshStatus: datamart.lastRefreshStatus
                });
            });
            return adapter.upsertMany(datamartWithCurrentRefreshStatus || [], state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.Ap, function(state, _a) {
            var datamartWithCurrentRefreshStatus = _.map(_a.datamarts, function(datamart) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, datamart), {
                    currentRefreshStatus: datamart.lastRefreshStatus
                });
            });
            return adapter.addMany(datamartWithCurrentRefreshStatus, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.$3, function(state, _a) {
            var name = _a.artifactInfo.title;
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    displayName: name,
                    name
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.wV, function(state, _a) {
            var name = _a.name;
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    displayName: name,
                    name
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.hG, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    description: _a.description
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.lp, function(state, _a) {
            var originalData = _a.originalData;
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    displayName: originalData.name,
                    name: originalData.name
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.d7, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, state), {
                selectedDatamartId: datamartObjectId
            });
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.Iz, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    currentRefreshStatus: 4
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.uB, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    currentRefreshStatus: 2
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.rM, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    currentRefreshStatus: _a.currentRefreshStatus
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_powerbi_DatahubStore__WEBPACK_IMPORTED_MODULE_4__.fk, _powerbi_DatahubStore__WEBPACK_IMPORTED_MODULE_4__.d_, function(state, _a) {
            var datahubArtifacts = _.filter(_a.artifacts, function(a) {
                return a.artifactType === _powerbi_legacy_PowerBIContracts_contracts__WEBPACK_IMPORTED_MODULE_5__.B.Datamart;
            });
            if (_.isEmpty(datahubArtifacts)) return state;
            var update = _.map(datahubArtifacts, function(a) {
                var changes = function(a) {
                    var isMyWorkspace = a.workspaceObjectId === _powerbi_legacy_PowerBIContracts_constants__WEBPACK_IMPORTED_MODULE_7__.wku;
                    return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, 
                    tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, 
                    tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, 
                    tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({
                        id: a.artifactId,
                        workspaceName: a.workspaceName,
                        workspaceType: a.workspaceType,
                        objectId: a.artifactObjectId.toLowerCase(),
                        artifactEndorsement: a.artifactEndorsement,
                        artifactInformationProtection: a.artifactInformationProtection
                    }, a.ownerUser && {
                        ownerUser: a.ownerUser
                    }), a.workspaceId && {
                        workspaceId: a.workspaceId
                    }), a.snapshotId && {
                        snapshotId: a.snapshotId
                    }), a.description && {
                        description: a.description
                    }), a.lastVisitedTimeUTC && {
                        lastVisitedTimeUTC: a.lastVisitedTimeUTC
                    }), a.lastRefreshTime && {
                        lastRefreshTime: a.lastRefreshTime
                    }), !isMyWorkspace && a.workspaceObjectId && {
                        workspaceObjectId: a.workspaceObjectId.toLocaleLowerCase()
                    });
                }(a);
                return {
                    id: changes.objectId,
                    changes
                };
            }), addedState = adapter.upsertMany(_.map(datahubArtifacts, function(a) {
                return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (datamartArtifact = a).artifact), {
                    displayName: datamartArtifact.displayName,
                    id: datamartArtifact.artifactId,
                    permissions: datamartArtifact.permissions
                });
                var datamartArtifact;
            }), state);
            return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, adapter.updateMany(update, addedState));
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.vh, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    status: 1
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.sl, function(state, _a) {
            var datamartInformation = _a.datamartInformation;
            return adapter.updateOne({
                id: datamartInformation.objectId,
                changes: {
                    ownerUser: datamartInformation.ownerUser,
                    modifiedByUser: datamartInformation.modifiedByUser
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.SX, function(state, _a) {
            var datamart = datamartInformationToDatamart(_a.datamartInformation);
            return adapter.updateOne({
                id: datamart.objectId,
                changes: datamart
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.pT, function(state, _a) {
            var datamart = datamartInformationToDatamart(_a.datamartInformation);
            return adapter.updateOne({
                id: datamart.objectId,
                changes: datamart
            }, (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, state), {
                selectedDatamartId: datamart.objectId
            }));
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.Mo, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, datamartType = _a.datamartType, artifactId = _a.artifactId;
            return state.entities[datamartObjectId] ? state.entities[datamartObjectId].id ? state : adapter.updateOne({
                id: datamartObjectId,
                changes: {
                    id: artifactId
                }
            }, (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, state), {
                selectedDatamartId: datamartObjectId
            })) : adapter.addOne({
                objectId: datamartObjectId,
                datamartType,
                isNew: !0,
                id: artifactId
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.gY, function(state, _a) {
            var datamartRecents = _a.recents.filter(function(recent) {
                return 8 === recent.ty;
            });
            if (_.isEmpty(datamartRecents)) return state;
            var changes = datamartRecents.map(function(recent) {
                var change = convertIRecentToDatamartRecent(recent);
                return {
                    id: change.objectId,
                    changes: change
                };
            }), addedState = adapter.upsertMany(_.map(datamartRecents, function(recent) {
                return convertIRecentToDatamartRecent(recent);
            }), state);
            return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, adapter.updateMany(changes, addedState));
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.Sw, function(state, _a) {
            var changes = convertIRecentToDatamartRecent(_a.recent);
            return adapter.updateOne({
                id: changes.objectId,
                changes
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.c7, function(state, _a) {
            var datamartFavorites = _a.favorites.filter(function(favorite) {
                return favorite.favoriteType === _powerbi_legacy_PowerBIContracts_contracts__WEBPACK_IMPORTED_MODULE_6__.nW.Datamart;
            });
            if (_.isEmpty(datamartFavorites)) return state;
            var changes = datamartFavorites.map(function(fav) {
                var change = convertIFavoriteToDatamartFavorite(fav);
                return {
                    id: fav.objectId,
                    changes: change
                };
            }), addedState = adapter.upsertMany(_.map(datamartFavorites, function(favorite) {
                return convertIFavoriteToDatamartFavorite(favorite);
            }), state);
            return (0, tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, adapter.updateMany(changes, addedState));
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.s, function(state, _a) {
            return adapter.updateOne({
                id: _a.objectId,
                changes: {
                    favoriteId: -1
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.Nl, function(state, _a) {
            return adapter.updateOne({
                id: _a.objectId,
                changes: {
                    favoriteId: _a.favoriteId,
                    workspaceObjectId: _a.workspaceObjectId
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.XI, function(state, _a) {
            return adapter.updateOne({
                id: _a.objectId,
                changes: {
                    favoriteId: void 0
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.BQ, function(state, _a) {
            var sampleId, datamartObjectId = _a.datamartObjectId, datamartChanges = {
                sampleName: (sampleId = _a.sampleName, sampleId && "nytaxi" === sampleId.toLowerCase() ? "nytaxi" : "")
            };
            return adapter.updateOne({
                id: datamartObjectId,
                changes: datamartChanges
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.QC, _actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.rD, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    sampleName: ""
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.uh, function(state, _a) {
            return adapter.updateMany(_a.movedDatamarts.map(function(movedDatamart) {
                return {
                    id: movedDatamart.objectId,
                    changes: {
                        subfolderId: movedDatamart.subfolderId
                    }
                };
            }), state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.Ok, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    autoAddToDefaultDataset: _a.autoAddToDefaultDataset
                }
            }, state);
        }), (0, _ngrx_store__WEBPACK_IMPORTED_MODULE_1__.on)(_actions_datamart_metadata_actions__WEBPACK_IMPORTED_MODULE_2__.fr, function(state, _a) {
            return adapter.updateOne({
                id: _a.datamartObjectId,
                changes: {
                    autoAddToDefaultDataset: _a.autoAddToDefaultDataset
                }
            }, state);
        })), adapter.getSelectors()), getDatamartIds = _a.selectIds, getDatamartEntities = _a.selectEntities, getAllDatamarts = _a.selectAll;
        function convertIRecentToDatamartRecent(recent) {
            return {
                displayName: recent.dn,
                objectId: recent.oid,
                lastAccessDate: recent.la,
                count: recent.co,
                workspaceObjectId: recent.gid,
                datamartType: recent.datamartType,
                status: recent.artifactStatus,
                state: recent.artifactState,
                datasetId: recent.datasetId
            };
        }
        function convertIFavoriteToDatamartFavorite(favorite) {
            return {
                displayName: favorite.displayName,
                objectId: favorite.objectId,
                favoriteId: favorite.id,
                workspaceObjectId: favorite.workspaceId,
                permissions: favorite.permissions,
                datamartType: favorite.datamartType,
                status: favorite.datamartStatus,
                state: favorite.datamartState,
                datasetId: favorite.datasetId
            };
        }
        function datamartInformationToDatamart(datamartInformation) {
            var datamart = {
                objectId: datamartInformation.objectId,
                name: datamartInformation.name,
                displayName: datamartInformation.name,
                description: datamartInformation.description,
                gatewayObjectId: datamartInformation.gatewayObjectId,
                dataflowObjectId: datamartInformation.dataflowObjectId,
                datasetObjectId: datamartInformation.datasetObjectId,
                datasetId: datamartInformation.datasetId,
                status: datamartInformation.status,
                currentRefreshStatus: datamartInformation.lastRefreshStatus,
                lastRefreshStatus: datamartInformation.lastRefreshStatus,
                tdsEndpoint: datamartInformation.tdsEndpoint,
                ownerUser: datamartInformation.ownerUser,
                datamartType: datamartInformation.datamartType,
                lastModifiedTimeUTC: void 0,
                lastRefreshTimeUTC: datamartInformation.lastRefreshTimeUTC,
                ownerUserId: datamartInformation.ownerUser.id,
                ownerArtifactObjectId: datamartInformation.ownerArtifactObjectId,
                nextRefreshTimeUTC: datamartInformation.nextRefreshTimeUTC,
                modifiedByUser: datamartInformation.modifiedByUser,
                permissions: datamartInformation.permissions,
                artifactPermissions: datamartInformation.artifactPermissions,
                subfolderId: datamartInformation.subfolderId
            };
            return void 0 !== datamartInformation.state && (datamart.state = datamartInformation.state), 
            datamart;
        }
        function getDatamartTypeFromSqlAnalyticsEndpoint(artifact, parentArtifact) {
            return "Warehouse" === artifact.artifactType ? 4 : "SqlAnalyticsEndpoint" === artifact.artifactType ? "Lakehouse" === (null == parentArtifact ? void 0 : parentArtifact.artifactType) ? 2 : 5 : void 0;
        }
    },
    2253: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            WZ: function() {
                return getDatamartEntities;
            },
            sv: function() {
                return getDatamartName;
            },
            LR: function() {
                return getDatamartType;
            },
            jf: function() {
                return getDatamartTypeName;
            },
            JJ: function() {
                return getSelectedDatamartForArtifactDetailsInfo;
            }
        });
        var datamart_metadata_reducers = __webpack_require__(4565), ngrx_store = __webpack_require__(85732), utils = __webpack_require__(48723), WebRouter = __webpack_require__(19533), getDatamartObjectId = ((0, 
        ngrx_store.P1)(WebRouter.C, function(state) {
            return state && state.params.groupid;
        }), (0, ngrx_store.P1)(WebRouter.C, function(state) {
            return state && state.params.datamartId;
        })), getWarehouseObjectId = (0, ngrx_store.P1)(WebRouter.C, function(state) {
            var _a, match = state && (null === (_a = null == state ? void 0 : state.url) || void 0 === _a ? void 0 : _a.match(/warehouses\/([^\/\?]+)/));
            return match ? match[1] : null;
        }), getDatamartsState = (0, ngrx_store.ZF)("datamartMetadataState"), getAllDatamarts = ((0, 
        ngrx_store.P1)(getDatamartsState, function(state) {
            return state && state.selectedDatamartId;
        }), (0, ngrx_store.P1)(getDatamartsState, datamart_metadata_reducers.LE), (0, ngrx_store.P1)(getDatamartsState, datamart_metadata_reducers.pM)), getDatamartEntities = (0, 
        ngrx_store.P1)(getDatamartsState, datamart_metadata_reducers.WZ), getSelectedDatamart = (0, 
        ngrx_store.P1)(getDatamartEntities, getDatamartObjectId, function(entities, id) {
            return id && entities[id];
        }), getSelectedDatamartForArtifactDetailsInfo = (0, ngrx_store.P1)(getDatamartEntities, getDatamartObjectId, getWarehouseObjectId, function(entities, datamartObjectId, warehouseObjectId) {
            var objectId = datamartObjectId || warehouseObjectId;
            return objectId && entities[objectId];
        }), getDatamartName = ((0, ngrx_store.P1)(getSelectedDatamart, function(datamart) {
            return datamart && datamart.status;
        }), (0, ngrx_store.P1)(getSelectedDatamart, function(datamart) {
            return datamart && datamart.datasetId;
        }), (0, ngrx_store.P1)(getSelectedDatamart, function(datamart) {
            return datamart && datamart.permissions;
        }), (0, ngrx_store.P1)(getDatamartEntities, function(entities) {
            return _.map(entities, function(datamart) {
                return datamart.displayName || datamart.name;
            });
        }), function(datamartObjectId) {
            return (0, ngrx_store.P1)(getDatamartEntities, function(entities) {
                return entities[datamartObjectId].displayName || entities[datamartObjectId].name;
            });
        }), getDatamartType = function(datamartObjectId) {
            return (0, ngrx_store.P1)(getDatamartEntities, function(entities) {
                return entities && entities[datamartObjectId].datamartType;
            });
        }, getDatamartTypeName = function(datamartObjectId) {
            return (0, ngrx_store.P1)(getDatamartEntities, function(entities) {
                var _a;
                return entities && (null === (_a = entities[datamartObjectId]) || void 0 === _a ? void 0 : _a.datamartType) ? (0, 
                utils.kK)(entities[datamartObjectId].datamartType) : "ArtifactKind_Datamart";
            });
        };
        (0, ngrx_store.P1)(getSelectedDatamart, function(selectedDatamart) {
            return selectedDatamart && selectedDatamart.datamartType;
        }), (0, ngrx_store.P1)(getDatamartEntities, getDatamartObjectId, function(entities, id) {
            var _a;
            return null === (_a = entities[id]) || void 0 === _a ? void 0 : _a.autoAddToDefaultDataset;
        }), (0, ngrx_store.P1)(getAllDatamarts, function(datamarts, id) {
            return id ? _.find(datamarts, function(datamart) {
                return datamart.id === id;
            }) : null;
        });
    },
    48723: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            LC: function() {
                return getPathByDatamartType;
            },
            PQ: function() {
                return getDatamartExtendedArtifactType;
            },
            kK: function() {
                return getDatamartTypeLowercaseResourceNameUtil;
            },
            q4: function() {
                return getDatamartTypeTitlecaseResourceNameUtil;
            },
            wZ: function() {
                return getAPIPathByDatamartType;
            }
        });
        var _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62458);
        function getPathByDatamartType(datamartType) {
            switch (datamartType) {
              case 4:
                return "datawarehouses";

              case 2:
                return "lakewarehouses";

              case 5:
                return "mountedwarehouses";

              case 1:
                return "datamarts";

              default:
                return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("invalid datamartType"), 
                "datamarts";
            }
        }
        function getAPIPathByDatamartType(datamartType) {
            switch (datamartType) {
              case 4:
                return "datawarehouses";

              case 2:
                return "lhdatamarts";

              case 5:
                return "mountedwarehouses";

              case 1:
                return "datamarts";

              default:
                return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assertFail("invalid datamartType"), 
                "datamarts";
            }
        }
        function getDatamartTypeLowercaseResourceNameUtil(datamartType) {
            switch (datamartType) {
              case 4:
                return "ArtifactKind_Warehouse";

              case 2:
              case 5:
                return "Artifact_SQL_Analytics_Endpoint";

              case 1:
                return "ArtifactKind_Datamart";

              default:
                return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return _.isNil(datamartType);
                }, "invalid datamartType"), "ArtifactKind_Datamart";
            }
        }
        function getDatamartTypeTitlecaseResourceNameUtil(datamartType) {
            switch (datamartType) {
              case 4:
                return "Artifact_Warehouse";

              case 2:
              case 5:
                return "Artifact_SQL_Analytics_Endpoint";

              case 1:
                return "Artifact_Datamart";

              default:
                return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return _.isNil(datamartType);
                }, "invalid datamartType"), "Artifact_Datamart";
            }
        }
        function getDatamartExtendedArtifactType(datamartType) {
            switch (datamartType) {
              case 4:
                return "data-warehouse";

              case 2:
                return "lake-warehouse";

              case 1:
                return "datamart";

              case 5:
                return "mounted-warehouse";

              default:
                return _powerbi_legacy_PowerBIVisuals_VisualsCommon_debug__WEBPACK_IMPORTED_MODULE_0__.fF.assert(function() {
                    return _.isNil(datamartType);
                }, "invalid datamartType"), "datamart";
            }
        }
    },
    47068: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            DesktopManageDatasetDialogModule: function() {
                return DesktopManageDatasetDialogModule;
            }
        });
        var common = __webpack_require__(77476), fesm2022_forms = __webpack_require__(17174), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), UILibrary_module = __webpack_require__(94785), template_dialog_module = __webpack_require__(16973), message_banner_module = __webpack_require__(52040), pbi_checkbox_module = __webpack_require__(47913), pbi_menu_module = __webpack_require__(94841), pbi_office_icon_module = __webpack_require__(45411), tri_tooltip = __webpack_require__(8816), pbi_tree_module = __webpack_require__(35284), take = __webpack_require__(48787), tslib_es6 = __webpack_require__(81337), ngrx_store = __webpack_require__(85732), datamart_metadata_selector = __webpack_require__(2253), utils = __webpack_require__(48723), urn_builder = __webpack_require__(12985), WebRouter = __webpack_require__(19533), UpdateStepType = function(UpdateStepType) {
            return UpdateStepType[UpdateStepType.ValidatingMashup = 0] = "ValidatingMashup", 
            UpdateStepType[UpdateStepType.BuildingDataflow = 1] = "BuildingDataflow", UpdateStepType[UpdateStepType.BuildingDataflowRelationships = 2] = "BuildingDataflowRelationships", 
            UpdateStepType[UpdateStepType.UpdatingDataflow = 3] = "UpdatingDataflow", UpdateStepType[UpdateStepType.RequestingDatamartRefresh = 4] = "RequestingDatamartRefresh", 
            UpdateStepType[UpdateStepType.ImportingData = 5] = "ImportingData", UpdateStepType[UpdateStepType.WrappingUp = 6] = "WrappingUp", 
            UpdateStepType[UpdateStepType.CreatingSampleTables = 7] = "CreatingSampleTables", 
            UpdateStepType[UpdateStepType.CopyingSampleData = 8] = "CopyingSampleData", UpdateStepType[UpdateStepType.CreatingSampleViewsSprocs = 9] = "CreatingSampleViewsSprocs", 
            UpdateStepType[UpdateStepType.BuildingObjects = 10] = "BuildingObjects", UpdateStepType[UpdateStepType.PublishingSchema = 11] = "PublishingSchema", 
            UpdateStepType[UpdateStepType.ImportingUserQueries = 12] = "ImportingUserQueries", 
            UpdateStepType;
        }({}), UpdateStepProgressType = function(UpdateStepProgressType) {
            return UpdateStepProgressType.NotStarted = "notStarted", UpdateStepProgressType.InProgress = "inProgress", 
            UpdateStepProgressType.Complete = "complete", UpdateStepProgressType;
        }({}), debug = __webpack_require__(62458), dataModelSchemas = __webpack_require__(5207), DatabaseDefinitionCommandUtils = function() {
            function DatabaseDefinitionCommandUtils() {}
            return DatabaseDefinitionCommandUtils.buildFilterCommandToGetSchemaObjectContainers = function(containersToRetrieve) {
                var _this = this;
                if (!_.isEmpty(containersToRetrieve)) {
                    var includeFilters = [];
                    return _.forEach(containersToRetrieve, function(container) {
                        includeFilters.push(_this.getIncludeFilter(container.schemaName, container.childrenType));
                    }), this.getFilterCommand(includeFilters, []);
                }
            }, DatabaseDefinitionCommandUtils.buildFilterCommandToGetDatabaseRoleContainers = function(containersToRetrieve) {
                var _this = this;
                if (!_.isEmpty(containersToRetrieve)) {
                    var includeFilters = [];
                    return _.forEach(containersToRetrieve, function(container) {
                        includeFilters.push(_this.getIncludeFilter(void 0, container.childrenDatamartObjectType));
                    }), this.getFilterCommand(includeFilters, []);
                }
            }, DatabaseDefinitionCommandUtils.buildFilterCommandToGetContainers = function(containersToRetrieve) {
                var _this = this;
                if (!_.isEmpty(containersToRetrieve)) {
                    var includeFilters = [];
                    return _.forEach(containersToRetrieve.schemaObjectContainers, function(container) {
                        includeFilters.push(_this.getIncludeFilter(container.schemaName, container.childrenType));
                    }), _.forEach(containersToRetrieve.databaseRoleContainers, function(container) {
                        includeFilters.push(_this.getIncludeFilter(void 0, container.childrenDatamartObjectType));
                    }), this.getFilterCommand(includeFilters, []);
                }
            }, DatabaseDefinitionCommandUtils.buildDatabaseDefinitionFilterCommandForSchema = function(schema) {
                return this.getFilterCommand([ {
                    schemaName: schema.name,
                    databaseObjectTypes: void 0
                } ], [ {
                    schemaName: schema.name,
                    databaseObjectTypes: [ "storedProcedure", "function" ]
                } ]);
            }, DatabaseDefinitionCommandUtils.buildDatabaseDefinitionFilterCommandForSchemaObjectContainer = function(container) {
                return this.getFilterCommand([ {
                    schemaName: container.schemaName,
                    databaseObjectTypes: [ this.datamartTypeToDatabaseType(container.childrenType) ]
                } ], []);
            }, DatabaseDefinitionCommandUtils.buildDatabaseDefinitionFilterCommandForDatabaseRoleContainer = function(roleContainer) {
                return this.getFilterCommand([ {
                    schemaName: void 0,
                    databaseObjectTypes: [ this.datamartTypeToDatabaseType(roleContainer.childrenDatamartObjectType) ]
                } ], []);
            }, DatabaseDefinitionCommandUtils.datamartTypeToDatabaseType = function(datamartObjectType) {
                switch (datamartObjectType) {
                  case "Table":
                    return "table";

                  case "View":
                    return "view";

                  case "StoredProcedure":
                    return "storedProcedure";

                  case "UserDefinedFunction":
                    return "function";

                  case "DatabaseRole":
                    return "dbRoles";

                  default:
                    throw "Cannot filter database definition on this datamart object type: ".concat(datamartObjectType, ".");
                }
            }, DatabaseDefinitionCommandUtils.databaseTypeToDatamartType = function(databaseObjectType) {
                switch (databaseObjectType) {
                  case "table":
                    return "Table";

                  case "view":
                    return "View";

                  case "storedProcedure":
                    return "StoredProcedure";

                  case "function":
                    return "UserDefinedFunction";

                  case "dbRoles":
                    return "DatabaseRole";

                  default:
                    throw "Cannot find database object type: ".concat(databaseObjectType, ".");
                }
            }, DatabaseDefinitionCommandUtils.getDatabaseRoleContainerUniqueIdentifier = function(datamartObjectId, databaseChildrenRoleType) {
                return "".concat(datamartObjectId, "_").concat(databaseChildrenRoleType);
            }, DatabaseDefinitionCommandUtils.getFilterCommand = function(includeFilters, excludeFilters) {
                return {
                    $type: "GetDatabaseCommand",
                    databaseDefinitionIncludeFilters: includeFilters,
                    databaseDefinitionExcludeFilters: excludeFilters
                };
            }, DatabaseDefinitionCommandUtils.getIncludeFilter = function(schemaName, datamartObjectType) {
                return {
                    schemaName,
                    databaseObjectTypes: [ this.datamartTypeToDatabaseType(datamartObjectType) ]
                };
            }, DatabaseDefinitionCommandUtils.defaultFilterCommand = {
                $type: "GetDatabaseCommand",
                databaseDefinitionIncludeFilters: [ {
                    schemaName: void 0,
                    databaseObjectTypes: [ "table", "view" ]
                } ],
                databaseDefinitionExcludeFilters: [ {
                    schemaName: void 0,
                    databaseObjectTypes: [ "function", "storedProcedure" ]
                }, {
                    schemaName: dataModelSchemas._.informationSchema,
                    databaseObjectTypes: [ "function", "storedProcedure", "view", "table" ]
                }, {
                    schemaName: dataModelSchemas._.sysSchema,
                    databaseObjectTypes: [ "function", "storedProcedure", "view", "table" ]
                } ]
            }, DatabaseDefinitionCommandUtils;
        }();
        function getAllSchemaNames(parsedModel) {
            var allSchemaNames = [];
            return parsedModel.schemas.forEach(function(schema) {
                return allSchemaNames.push(schema.name);
            }), allSchemaNames;
        }
        function parseIncludeFilterBySchemaName(commandMap, schemaName, databaseObjectTypes) {
            var existingTypesSet = commandMap.get(schemaName);
            return existingTypesSet ? databaseObjectTypes.forEach(function(databaseObjectType) {
                return existingTypesSet.add(DatabaseDefinitionCommandUtils.databaseTypeToDatamartType(databaseObjectType));
            }) : existingTypesSet = new Set(_.map(databaseObjectTypes, function(databaseObjectType) {
                return DatabaseDefinitionCommandUtils.databaseTypeToDatamartType(databaseObjectType);
            })), commandMap.set(schemaName, existingTypesSet), commandMap;
        }
        function parseExcludeFilterBySchemaName(commandMap, schemaName, databaseObjectTypes) {
            var existingTypesSet = commandMap.get(schemaName);
            return existingTypesSet ? databaseObjectTypes.forEach(function(databaseObjectType) {
                return existingTypesSet.delete(DatabaseDefinitionCommandUtils.databaseTypeToDatamartType(databaseObjectType));
            }) : existingTypesSet = new Set, commandMap.set(schemaName, existingTypesSet), commandMap;
        }
        var telemetryHelpers = __webpack_require__(41114), DatamartDbDefManagedViewNotInETL = (telemetryHelpers.cx["PBI.InitialLease.Event"] = (0, 
        telemetryHelpers.b1)("PBI.InitialLease.Event"), telemetryHelpers.cx["PBI.ExtendLease.Event"] = (0, 
        telemetryHelpers.b1)("PBI.ExtendLease.Event"), telemetryHelpers.cx["PBI.StartModelChangeCall.Event"] = (0, 
        telemetryHelpers.b1)("PBI.StartModelChangeCall.Event"), telemetryHelpers.cx["PBI.EndModelChangeCall.Event"] = (0, 
        telemetryHelpers.b1)("PBI.EndModelChangeCall.Event"), telemetryHelpers.cx["PBI.InvalidEndModelCall.Event"] = (0, 
        telemetryHelpers.b1)("PBI.InvalidEndModelCall.Event"), telemetryHelpers.cx["PBI.Datamart.DbDefManagedViewNotInETL"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.DbDefManagedViewNotInETL")), ASDataType = function(ASDataType) {
            return ASDataType[ASDataType.Automatic = 1] = "Automatic", ASDataType[ASDataType.String = 2] = "String", 
            ASDataType[ASDataType.Int64 = 6] = "Int64", ASDataType[ASDataType.Double = 8] = "Double", 
            ASDataType[ASDataType.DateTime = 9] = "DateTime", ASDataType[ASDataType.Decimal = 10] = "Decimal", 
            ASDataType[ASDataType.Boolean = 11] = "Boolean", ASDataType[ASDataType.Binary = 17] = "Binary", 
            ASDataType[ASDataType.Unknown = 19] = "Unknown", ASDataType[ASDataType.Variant = 20] = "Variant", 
            ASDataType;
        }({});
        function parseModelDataType(dataType) {
            switch (dataType) {
              case "auto":
                return ASDataType.Automatic;

              case "string":
                return ASDataType.String;

              case "int64":
                return ASDataType.Int64;

              case "double":
                return ASDataType.Double;

              case "dateTime":
                return ASDataType.DateTime;

              case "decimal":
                return ASDataType.Decimal;

              case "boolean":
                return ASDataType.Boolean;

              case "binary":
                return ASDataType.Binary;

              case "variant":
                return ASDataType.Variant;

              default:
                return ASDataType.Unknown;
            }
        }
        function convertDataTypeToSqlType(dataType) {
            switch (dataType) {
              case "string":
                return 24;

              case "int64":
                return 10;

              case "double":
                return 15;

              case "dateTime":
                return 6;

              case "decimal":
                return 19;

              default:
                return 0;
            }
        }
        function parseASModelDataType(dataType) {
            return dataType || ASDataType.Unknown;
        }
        function parseSqlDataType(dataType) {
            return dataType || 0;
        }
        function parseEtlRefreshPolicies(table) {
            var _a;
            if ("pbi:refreshPolicy" in table && "IncrementalRefreshPolicy" === table["pbi:refreshPolicy"].$type) {
                table["pbi:refreshPolicy"].refreshCompletePeriods = null !== (_a = table["pbi:refreshPolicy"].refreshCompletePeriods) && void 0 !== _a && _a;
                var filteredColumn = _.find(table.annotations, function(annotation) {
                    return "pbi:IncrementalRefreshFilterByAttribute" === annotation.name;
                }).value, detectChangesColumn = _.find(table.annotations, function(annotation) {
                    return "pbi:IncrementalRefreshDetectChangeAttribute" === annotation.name;
                }).value;
                table["pbi:refreshPolicy"].filterByAttributeName = filteredColumn, table["pbi:refreshPolicy"].detectChangesAttributeName = detectChangesColumn;
            }
        }
        function parseColumnType(value) {
            if (value) switch (value.toLowerCase()) {
              case "data":
                return "Data";

              case "calculated":
                return "Calculated";

              case "rownumber":
                return "RowNumber";

              default:
                return;
            }
        }
        function getCustomWarehouseUrn(name) {
            for (var args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
            return "".concat(name).concat(urn_builder.kr).concat(_.join(args, urn_builder.kr));
        }
        function getFullyQualifiedName() {
            for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
            return "[".concat(_.join(args, "].["), "]");
        }
        function parseDatabaseDefinitionTables(databaseDefinition, parsedModel, warehouseMetadata) {
            for (var _a, _b, t = 0; t < (null === (_a = databaseDefinition.tables) || void 0 === _a ? void 0 : _a.length); t++) {
                var table = databaseDefinition.tables[t], tableUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, table.schemaName, table.name), newTable = parsedModel.tables.get(tableUrn);
                newTable ? (newTable.name = table.name, newTable.schemaName = table.schemaName, 
                newTable.isBiObject = table.isBiObject, newTable.uniqueName = table.uniqueName, 
                newTable.modelUrn = urn_builder.X6.getTableUrn(table.uniqueName, table.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema)) : newTable = {
                    objectType: "Table",
                    urn: tableUrn,
                    columns: new Set,
                    measures: new Set,
                    name: table.name,
                    id: table.id,
                    isHidden: !1,
                    canEdit: !0,
                    isManaged: table.isManaged,
                    isBiObject: table.isBiObject,
                    schemaName: table.schemaName,
                    warehouseName: warehouseMetadata.name,
                    uniqueName: table.uniqueName,
                    modelUrn: urn_builder.X6.getTableUrn(table.uniqueName, table.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema),
                    syncErrors: [],
                    syncWarnings: [],
                    warehouseId: warehouseMetadata.datamartObjectId,
                    fullyQualifiedName: getFullyQualifiedName(warehouseMetadata.name, table.schemaName, table.name),
                    twoPartName: getFullyQualifiedName(table.schemaName, table.name)
                };
                for (var c = 0; c < (null === (_b = table.columns) || void 0 === _b ? void 0 : _b.length); c++) {
                    var column = table.columns[c], columnUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, table.schemaName, newTable.name, column.name), newColumn = parsedModel.columns.get(columnUrn);
                    addOrUpdateColumnInParsedModel(newColumn = newColumn ? updateDatabaseDefinitionColumn((0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, newColumn), {
                        index: c
                    }), column, newTable) : {
                        objectType: "Column",
                        urn: columnUrn,
                        name: column.name,
                        index: c,
                        isBiObject: newTable.isBiObject,
                        parentDisplayName: newTable.name,
                        warehouseId: warehouseMetadata.datamartObjectId,
                        isHidden: column.isHidden,
                        canEdit: !0,
                        columnType: "Data",
                        modelDataType: parseASModelDataType(column.asDataType),
                        sqlDataType: parseSqlDataType(column.dataType),
                        modelUrn: urn_builder.X6.getColumnUrn(newTable.uniqueName, column.name, newTable.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema),
                        fullyQualifiedName: getFullyQualifiedName(column.name)
                    }, newTable, parsedModel);
                }
                addOrUpdateTableInParsedModel(newTable, parsedModel, warehouseMetadata);
            }
            return parsedModel;
        }
        function parseViews(databaseDefinition, parsedModel, warehouseMetadata, telemetryService) {
            for (var _a, _b, _loop_1 = function(v) {
                var view = databaseDefinition.views[v];
                if (view.isManaged) {
                    var tableUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, dataModelSchemas._.EtlSchema, view.name.toLowerCase()), table_1 = parsedModel.tables.get(tableUrn);
                    return table_1 ? (table_1.isBiObject = view.isBiObject, table_1.uniqueName = view.uniqueName, 
                    table_1.modelUrn = urn_builder.X6.getTableUrn(view.uniqueName, view.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema), 
                    table_1.columns.forEach(function(columnUrn) {
                        var column = parsedModel.columns.get(columnUrn);
                        debug.fF.assertValue(column, "This column should exist."), column.modelUrn = urn_builder.X6.getColumnUrn(table_1.uniqueName, column.name, table_1.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema), 
                        column.isBiObject = table_1.isBiObject, column.sqlDataType = void 0, addOrUpdateColumnInParsedModel(column, table_1, parsedModel);
                    }), "continue") : (debug.fF.assertValue(table_1, "An ETL table should exist for the view ".concat(tableUrn, " but it doesnt.")), 
                    null == telemetryService || telemetryService.logEvent(DatamartDbDefManagedViewNotInETL), 
                    "continue");
                }
                var viewUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, view.schemaName, view.name), newView = parsedModel.views.get(viewUrn);
                newView ? (newView.name = view.name, newView.schemaName = view.schemaName, newView.isBiObject = view.isBiObject, 
                newView.uniqueName = view.uniqueName, newView.modelUrn = urn_builder.X6.getTableUrn(view.uniqueName, view.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema)) : newView = {
                    objectType: "View",
                    urn: viewUrn,
                    name: view.name,
                    columns: new Set,
                    measures: new Set,
                    isHidden: !1,
                    canEdit: !0,
                    isManaged: view.isManaged,
                    isBiObject: view.isBiObject,
                    schemaName: view.schemaName,
                    warehouseName: warehouseMetadata.name,
                    uniqueName: view.uniqueName,
                    modelUrn: urn_builder.X6.getTableUrn(view.uniqueName, view.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema),
                    warehouseId: warehouseMetadata.datamartObjectId,
                    fullyQualifiedName: getFullyQualifiedName(warehouseMetadata.name, view.schemaName, view.name),
                    twoPartName: getFullyQualifiedName(view.schemaName, view.name)
                };
                for (var c = 0; c < (null === (_b = view.columns) || void 0 === _b ? void 0 : _b.length); c++) {
                    var column = view.columns[c], columnUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, view.schemaName, newView.name, column.name), newColumn = parsedModel.columns.get(columnUrn);
                    addOrUpdateColumnInParsedModel(newColumn = newColumn ? updateDatabaseDefinitionColumn((0, 
                    tslib_es6.__assign)((0, tslib_es6.__assign)({}, newColumn), {
                        index: c
                    }), column, newView) : {
                        objectType: "Column",
                        urn: columnUrn,
                        name: column.name,
                        index: c,
                        isBiObject: newView.isBiObject,
                        parentDisplayName: newView.name,
                        isHidden: column.isHidden,
                        warehouseId: warehouseMetadata.datamartObjectId,
                        canEdit: !0,
                        columnType: "Data",
                        modelDataType: parseASModelDataType(column.asDataType),
                        sqlDataType: parseSqlDataType(column.dataType),
                        modelUrn: urn_builder.X6.getColumnUrn(newView.uniqueName, column.name, newView.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema),
                        fullyQualifiedName: getFullyQualifiedName(column.name)
                    }, newView, parsedModel);
                }
                !function(view, parsedModel, warehouseMetadata) {
                    parsedModel.views.set(view.urn, view), findOrCreateSchemaObjectContainer(view.schemaName, "Views", "View", parsedModel, warehouseMetadata).childrenUrns.add(view.urn);
                }(newView, parsedModel, warehouseMetadata);
            }, v = 0; v < (null === (_a = databaseDefinition.views) || void 0 === _a ? void 0 : _a.length); v++) _loop_1(v);
            return parsedModel;
        }
        function addOrUpdateSchemaObjectContainerInModel(schema, schemaObjectContainerName, childrenType, parsedModel, warehouseMetadata) {
            var container = findOrCreateSchemaObjectContainer(schema.name, schemaObjectContainerName, childrenType, parsedModel, warehouseMetadata);
            schema.schemaObjectContainersUrns.add(container.urn);
        }
        function findOrCreateWarehouse(parsedModel, warehouseMetadata) {
            var warehouse = parsedModel.datamarts.get(warehouseMetadata.datamartObjectId);
            return warehouse || (warehouse = {
                name: warehouseMetadata.name,
                canEdit: !1,
                objectType: "Warehouse",
                categoryUrns: new Set,
                isHidden: !1,
                urn: warehouseMetadata.name,
                objectId: warehouseMetadata.datamartObjectId,
                warehouseMetadata,
                autoRefreshingFromQueryExecution: !1,
                etlModel: void 0,
                datasetInfo: void 0,
                databaseDefinition: void 0,
                refreshingDatamartBatchId: void 0,
                refreshedEntityIds: [],
                importingWarehouseBatchId: void 0,
                updatingDatamartStepsProgressIds: [],
                updatingLoadingStepsProgressIds: [],
                viewAsRoles: [],
                infoLoadState: "LOADING",
                queriesLoadState: "LOADING",
                schemaLoadState: "LOADED",
                modelingServiceInitialized: !1,
                modelingServiceIgnoreModelChanged: !1,
                fromDatahub: !1,
                notificationSuspended: !1,
                isReadonly: !1,
                autoRefreshing: !1,
                isSyncRunning: !1,
                loadingForSearch: !1,
                isObjectContainerRefreshing: !1,
                isWarehouseImporting: !1,
                failedToLoadTableSyncErrors: []
            }, parsedModel.datamarts.set(warehouseMetadata.datamartObjectId, warehouse), warehouse);
        }
        function findOrCreateCategory(datamartCategoryType, parsedModel, warehouseMetadata) {
            var categoryUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, datamartCategoryType), category = parsedModel.categories.get(categoryUrn);
            return category || (category = {
                name: datamartCategoryType,
                canEdit: !1,
                objectType: "Category",
                childrenUrns: new Set,
                isHidden: !1,
                urn: categoryUrn,
                warehouseMetadata
            }, parsedModel.categories.set(categoryUrn, category), category);
        }
        function findOrCreateSchema(schemaName, parsedModel, warehouseMetadata) {
            var schemaUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, schemaName), schema = parsedModel.schemas.get(schemaUrn);
            return schema || (schema = {
                name: schemaName,
                canEdit: !1,
                objectType: "Schema",
                schemaObjectContainersUrns: new Set,
                isHidden: !1,
                urn: schemaUrn,
                warehouseMetadata
            }, parsedModel.schemas.set(schemaUrn, schema), schema);
        }
        function findOrCreateSchemaObjectContainer(schemaName, schemaObjectContainerName, childrenType, parsedModel, warehouseMetadata) {
            var containerUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, schemaName, schemaObjectContainerName), container = parsedModel.schemaObjectContainers.get(containerUrn);
            return container || (container = {
                name: schemaObjectContainerName,
                canEdit: !1,
                objectType: "SchemaObjectContainer",
                childrenUrns: new Set,
                isHidden: !1,
                urn: containerUrn,
                childrenType,
                warehouseMetadata,
                schemaName,
                isLoaded: isContainerLoaded(schemaName, childrenType)
            }, parsedModel.schemaObjectContainers.set(containerUrn, container), container);
        }
        function isContainerLoaded(schemaName, childrenType) {
            return "Table" === childrenType || "View" === childrenType && schemaName !== dataModelSchemas._.sysSchema && schemaName !== dataModelSchemas._.informationSchema && schemaName !== dataModelSchemas._.queryInsightsSchema;
        }
        function findOrCreateDatabaseRoleContainer(databaseRoleContainerName, childrenType, parsedModel, warehouseMetadata) {
            var containerUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, databaseRoleContainerName), container = parsedModel.databaseRoleContainers.get(containerUrn);
            return container || (container = {
                name: databaseRoleContainerName,
                canEdit: !1,
                objectType: "DatabaseRoleContainer",
                databaseRoleUrns: new Set,
                childrenRoleType: childrenType,
                isHidden: !1,
                urn: containerUrn,
                isLoaded: !1,
                warehouseMetadata,
                childrenDatamartObjectType: "DatabaseRole"
            }, parsedModel.databaseRoleContainers.set(containerUrn, container), container);
        }
        function addOrUpdateColumnInParsedModel(newColumn, newTableOrView, parsedModel) {
            return parsedModel.columns.set(newColumn.urn, newColumn), newTableOrView.columns.add(newColumn.urn), 
            parsedModel;
        }
        function addOrUpdateTableInParsedModel(table, parsedModel, warehouseMetadata, tablesCategory) {
            if (parsedModel.tables.set(table.urn, table), 1 !== warehouseMetadata.datamartType) findOrCreateSchemaObjectContainer(table.schemaName, "Tables", "Table", parsedModel, warehouseMetadata).childrenUrns.add(table.urn); else {
                if (!tablesCategory) throw new Error("Attempted to update SQL Datamart Table without Category");
                tablesCategory.childrenUrns.add(table.urn);
            }
            return parsedModel;
        }
        function updateColumnWithXMLA(existingColumn, newInfo) {
            var _a, _b, _c, _d;
            return existingColumn.name = null !== (_a = null == newInfo ? void 0 : newInfo.name) && void 0 !== _a ? _a : null == existingColumn ? void 0 : existingColumn.name, 
            existingColumn.columnType = parseColumnType(null == newInfo ? void 0 : newInfo.type), 
            existingColumn.dataType = _.isNull(null == newInfo ? void 0 : newInfo.dataType) ? null == existingColumn ? void 0 : existingColumn.dataType : function(dataType) {
                switch (_.toLower(dataType)) {
                  case "binary":
                    return "Binary";

                  case "boolean":
                    return "Boolean";

                  case "currency":
                    return "Currency";

                  case "date":
                    return "Date";

                  case "datetime":
                    return "DateTime";

                  case "number":
                    return "Number";

                  case "text":
                  default:
                    return "Text";

                  case "time":
                    return "Time";

                  case "variant":
                    return "Variant";

                  case "wholenumber":
                    return "WholeNumber";
                }
            }(null == newInfo ? void 0 : newInfo.dataType), existingColumn.isHidden = null == newInfo ? void 0 : newInfo.isHidden, 
            existingColumn.isKey = null !== (_b = null == newInfo ? void 0 : newInfo.isKey) && void 0 !== _b ? _b : null == existingColumn ? void 0 : existingColumn.isKey, 
            existingColumn.isNullable = null !== (_c = null == newInfo ? void 0 : newInfo.isNullable) && void 0 !== _c ? _c : null == existingColumn ? void 0 : existingColumn.isNullable, 
            existingColumn.isUnique = null !== (_d = null == newInfo ? void 0 : newInfo.isUnique) && void 0 !== _d ? _d : null == existingColumn ? void 0 : existingColumn.isUnique, 
            existingColumn.summarizeBy = _.isNull(null == newInfo ? void 0 : newInfo.summarizeBy) ? null == existingColumn ? void 0 : existingColumn.summarizeBy : function(summarizeBy) {
                switch (_.toLower(summarizeBy)) {
                  case "average":
                    return "Average";

                  case "count":
                    return "Count";

                  case "default":
                  default:
                    return "Default";

                  case "distinctCount":
                    return "DistinctCount";

                  case "max":
                    return "Max";

                  case "min":
                    return "Min";

                  case "none":
                    return "None";

                  case "sum":
                    return "Sum";
                }
            }(null == newInfo ? void 0 : newInfo.summarizeBy), existingColumn.formatString = null == newInfo ? void 0 : newInfo.formatString, 
            existingColumn;
        }
        function updateDatabaseDefinitionColumn(existingColumn, databaseColumnInfo, existingTable) {
            var _a, _b, _c, _d;
            return existingColumn.name = null !== (_a = databaseColumnInfo.name) && void 0 !== _a ? _a : existingColumn.name, 
            existingColumn.modelDataType = parseASModelDataType(databaseColumnInfo.asDataType), 
            existingColumn.isHidden = null !== (_b = databaseColumnInfo.isHidden) && void 0 !== _b ? _b : existingColumn.isHidden, 
            existingColumn.isKey = null !== (_c = databaseColumnInfo.isKey) && void 0 !== _c ? _c : existingColumn.isKey, 
            existingColumn.isUnique = null !== (_d = databaseColumnInfo.isUnique) && void 0 !== _d ? _d : existingColumn.isUnique, 
            existingColumn.formatString = databaseColumnInfo.formatString, existingColumn.modelUrn = urn_builder.X6.getColumnUrn(existingTable.uniqueName, existingColumn.name, existingTable.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema), 
            existingColumn;
        }
        function parseMeasuresAndColumnsFromXMLA(lookup, table, warehouseMetadata, parsedModel, columnModelUrnMap) {
            var _a, _b, xmlaTable = lookup[table.uniqueName];
            if (xmlaTable) {
                for (var m = 0; m < (null === (_a = xmlaTable.measures) || void 0 === _a ? void 0 : _a.length); m++) {
                    var measure = xmlaTable.measures[m], measureUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, table.schemaName, table.name, measure.name), newMeasure = parsedModel.measures.get(measureUrn);
                    newMeasure ? (newMeasure.name = measure.name, newMeasure.expression = measure.expression, 
                    newMeasure.annotations = measure.annotations, newMeasure.modelUrn = urn_builder.X6.getMeasureUrn(table.uniqueName, measure.name, table.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema)) : newMeasure = {
                        objectType: "Measure",
                        urn: measureUrn,
                        name: measure.name,
                        parentDisplayName: table.name,
                        isHidden: !1,
                        canEdit: !0,
                        warehouseId: warehouseMetadata.datamartObjectId,
                        expression: measure.expression,
                        annotations: measure.annotations,
                        modelUrn: urn_builder.X6.getMeasureUrn(table.uniqueName, measure.name, table.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema)
                    }, parsedModel.measures.set(newMeasure.urn, newMeasure), table.measures.add(newMeasure.urn);
                }
                for (var c = 0; c < (null === (_b = xmlaTable.columns) || void 0 === _b ? void 0 : _b.length); c++) {
                    var column = xmlaTable.columns[c];
                    if ("rowNumber" !== column.type) {
                        var columnModelUrn = urn_builder.X6.getColumnUrn(table.uniqueName, column.name, table.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema), parsedModelColumn = columnModelUrnMap.get(columnModelUrn), customUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, table.schemaName, table.name, column.name);
                        parsedModelColumn || (parsedModelColumn = {
                            objectType: "Column",
                            urn: customUrn,
                            name: column.name,
                            isHidden: column.isHidden,
                            canEdit: !0,
                            warehouseId: warehouseMetadata.datamartObjectId,
                            columnType: parseColumnType(column.type),
                            modelDataType: parseModelDataType(column.dataType),
                            sqlDataType: convertDataTypeToSqlType(column.dataType),
                            isBiObject: table.isBiObject,
                            modelUrn: columnModelUrn,
                            fullyQualifiedName: getFullyQualifiedName(column.name)
                        }), addOrUpdateColumnInParsedModel(parsedModelColumn = updateColumnWithXMLA(parsedModelColumn, column), table, parsedModel);
                    }
                }
            }
        }
        var editor_main = __webpack_require__(68816), BehaviorSubject = __webpack_require__(35510), MonacoEditorContext = function() {
            function MonacoEditorContext() {
                this.hasSelection$ = new BehaviorSubject.X(!1), this.selectedText$ = new BehaviorSubject.X(""), 
                this.hasErrorMarker$ = new BehaviorSubject.X(!1), this.model = editor_main.editor.createModel("", "AzureDb");
            }
            return MonacoEditorContext.prototype.bindEditor = function(editor) {
                var _this = this;
                this.codeEditor = editor, this.model && this.codeEditor.setModel(this.model), this.viewState && this.codeEditor.restoreViewState(this.viewState), 
                this.codeEditor.onDidChangeCursorSelection(function(_) {
                    var selection = _this.getHighlighted().trim();
                    _this.hasSelection$.next(!!selection), _this.selectedText$.next(selection);
                }), editor_main.editor.onDidChangeMarkers(function(_) {
                    var hasErrorMarker = editor_main.editor.getModelMarkers({}).some(function(marker) {
                        return marker.severity === editor_main.MarkerSeverity.Error;
                    });
                    _this.hasErrorMarker$.next(hasErrorMarker);
                });
            }, MonacoEditorContext.prototype.saveViewState = function() {
                this.codeEditor && (this.viewState = this.codeEditor.saveViewState());
            }, MonacoEditorContext.prototype.insertTextAboveSelections = function(text) {
                var selection = this.editor.getSelection(), previousLine = selection.startLineNumber - 1, previousLineLastColumn = 0;
                previousLine > 0 ? previousLineLastColumn = this.editor.getModel().getLineContent(previousLine).length + 1 : previousLine = 1;
                var range = new editor_main.Range(previousLine, previousLineLastColumn, previousLine, previousLineLastColumn + 1);
                text = "\n" + text.trim() + "\n", this.editor.executeEdits("", [ {
                    range,
                    text,
                    forceMoveMarkers: !0
                } ]), this.editor.setSelection(new editor_main.Selection(selection.startLineNumber + 1, selection.startColumn, selection.startLineNumber + 1, selection.startColumn));
            }, MonacoEditorContext.prototype.focus = function() {
                var _a;
                null === (_a = this.codeEditor) || void 0 === _a || _a.focus();
            }, MonacoEditorContext.prototype.getSql = function() {
                return _.isEmpty(this.getHighlighted()) ? this.editor.getModel().getLinesContent().join("\n") : this.getHighlighted();
            }, MonacoEditorContext.prototype.getAll = function() {
                return this.editor.getModel().getLinesContent().join("\n");
            }, MonacoEditorContext.prototype.getContent = function() {
                return this.editor.getModel().getLinesContent().join("\n");
            }, MonacoEditorContext.prototype.setSql = function(sqlExpression) {
                this.editor.setValue(sqlExpression);
            }, Object.defineProperty(MonacoEditorContext.prototype, "editor", {
                get: function() {
                    return this.codeEditor;
                },
                enumerable: !1,
                configurable: !0
            }), MonacoEditorContext.prototype.getHighlighted = function() {
                return this.editor.getModel().getValueInRange(this.editor.getSelection());
            }, MonacoEditorContext.prototype.getHighlightedWithContext = function(precedingLines, followingLines) {
                void 0 === precedingLines && (precedingLines = 5), void 0 === followingLines && (followingLines = 5);
                var selection = this.editor.getSelection(), startLine = Math.max(1, selection.startLineNumber - precedingLines), endLine = Math.min(this.editor.getModel().getLineCount(), selection.endLineNumber + followingLines), range = new editor_main.Range(startLine, 1, endLine, 1);
                return this.editor.getModel().getValueInRange(range);
            }, MonacoEditorContext.prototype.getHighlightedWithFoldingRange = function() {
                var ranges = this.editor.saveViewState().contributionsState["editor.contrib.folding"].collapsedRegions, selectionEndLine = this.editor.getSelection().endLineNumber;
                if (ranges) for (var _i = 0, ranges_1 = ranges; _i < ranges_1.length; _i++) {
                    var range = ranges_1[_i], startLineNumber = range.startLineNumber, endLineNumber = range.endLineNumber;
                    if (selectionEndLine >= startLineNumber && selectionEndLine <= endLineNumber) return this.getHighlightedWithContext(0, endLineNumber - startLineNumber + 1);
                }
                return this.getHighlighted();
            }, MonacoEditorContext.prototype.replaceSelection = function(text) {
                var selection = this.editor.getSelection();
                this.editor.executeEdits("", [ {
                    range: selection,
                    text,
                    forceMoveMarkers: !0
                } ]);
            }, MonacoEditorContext.prototype.replaceAll = function(text) {
                var range = this.editor.getModel().getFullModelRange();
                this.editor.executeEdits("", [ {
                    range,
                    text,
                    forceMoveMarkers: !0
                } ]);
            }, MonacoEditorContext;
        }();
        function createEditor(datamartId, overrides) {
            var _a;
            return (0, tslib_es6.__assign)({
                primaryDatamartObjectId: datamartId,
                dataExplorer: void 0,
                leaseExpiration: void 0,
                sqlRunId: 0,
                tabs: [],
                selected: {
                    queryId: void 0,
                    items: new Set
                },
                loadingWarehousesIds: [],
                oneLakeUrl: void 0,
                mwcTokenResponsePayload: void 0,
                loadedWarehouseIds: [],
                fieldListFilters: (_a = {}, _a.Table = !1, _a.View = !1, _a.Column = !1, _a.StoredProcedure = !1, 
                _a.UserDefinedFunction = !1, _a.Query = !1, _a),
                loadingError: void 0
            }, overrides);
        }
        function createWarehouse(datamartObjectId, overrides) {
            return (0, tslib_es6.__assign)({
                name: void 0,
                canEdit: !1,
                objectType: "Warehouse",
                categoryUrns: new Set,
                isHidden: !1,
                urn: void 0,
                objectId: datamartObjectId,
                warehouseMetadata: void 0,
                autoRefreshingFromQueryExecution: !1,
                etlModel: void 0,
                datasetInfo: void 0,
                databaseDefinition: void 0,
                refreshingDatamartBatchId: void 0,
                refreshedEntityIds: [],
                importingWarehouseBatchId: void 0,
                updatingDatamartStepsProgressIds: [],
                updatingLoadingStepsProgressIds: [],
                viewAsRoles: [],
                infoLoadState: "INIT",
                queriesLoadState: "INIT",
                schemaLoadState: "INIT",
                modelingServiceInitialized: !1,
                modelingServiceIgnoreModelChanged: !1,
                fromDatahub: !1,
                notificationSuspended: !1,
                isReadonly: !1,
                isLoadedFromCache: !1
            }, overrides);
        }
        function getModelFromSchema(schema, state, metadata, fromDatahub, telemetryService, filterCommand, databaseChildrenRoleType) {
            var _a, _b, _c, _d;
            void 0 === filterCommand && (filterCommand = DatabaseDefinitionCommandUtils.defaultFilterCommand);
            var parsedModel = {
                categories: new Map,
                schemas: new Map,
                schemaObjectContainers: new Map,
                tables: new Map,
                columns: new Map,
                measures: new Map,
                views: new Map,
                storedProcedures: new Map,
                userDefinedFunctions: new Map,
                datamarts: new Map,
                databaseRoleContainers: new Map,
                databaseRoles: new Map
            }, etlPayload = _.find(schema.operationInformation, isEtlOperationInfo);
            parsedModel = function(etlPayload, parsedModel, warehouseMetadata) {
                var _a, _b;
                if (1 !== warehouseMetadata.datamartType && (findOrCreateCategory("Schemas", parsedModel, warehouseMetadata), 
                !etlPayload || !(null == etlPayload ? void 0 : etlPayload.entities))) return parsedModel;
                var categoryUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, "Tables"), tablesCategory = {
                    name: "Tables",
                    canEdit: !1,
                    objectType: "Category",
                    childrenUrns: new Set,
                    isHidden: !1,
                    urn: categoryUrn,
                    warehouseMetadata
                };
                parsedModel.categories.set(tablesCategory.urn, tablesCategory);
                for (var t = 0; t < (null === (_a = null == etlPayload ? void 0 : etlPayload.entities) || void 0 === _a ? void 0 : _a.length); t++) {
                    var etlTable = etlPayload.entities[t];
                    parseEtlRefreshPolicies(etlTable);
                    for (var newTable = {
                        objectType: "Table",
                        urn: getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, dataModelSchemas._.EtlSchema, etlTable.name.toLowerCase()),
                        name: etlTable.name,
                        columns: new Set,
                        measures: new Set,
                        isHidden: etlTable.isHidden,
                        canEdit: !0,
                        isManaged: !0,
                        schemaName: dataModelSchemas._.EtlSchema,
                        warehouseName: warehouseMetadata.name,
                        isBiObject: void 0,
                        uniqueName: etlTable.name,
                        modelUrn: urn_builder.X6.getTableUrn(etlTable.name),
                        fullyQualifiedName: getFullyQualifiedName(warehouseMetadata.name, dataModelSchemas._.EtlSchema, etlTable.name),
                        twoPartName: getFullyQualifiedName(dataModelSchemas._.EtlSchema, etlTable.name),
                        warehouseId: warehouseMetadata.datamartObjectId
                    }, c = 0; c < (null === (_b = etlTable.attributes) || void 0 === _b ? void 0 : _b.length); c++) {
                        var column = etlTable.attributes[c];
                        addOrUpdateColumnInParsedModel({
                            objectType: "Column",
                            urn: getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, dataModelSchemas._.EtlSchema, newTable.name, column.name),
                            name: column.name,
                            isBiObject: newTable.isBiObject,
                            parentDisplayName: newTable.name,
                            isHidden: etlTable.isHidden,
                            warehouseId: warehouseMetadata.datamartObjectId,
                            canEdit: !0,
                            columnType: "Data",
                            modelDataType: parseModelDataType(column.dataType),
                            description: column.description,
                            modelUrn: urn_builder.X6.getColumnUrn(newTable.uniqueName, column.name, newTable.isBiObject ? null : dataModelSchemas._.DataWarehouseSchema),
                            fullyQualifiedName: getFullyQualifiedName(column.name),
                            sqlDataType: void 0
                        }, newTable, parsedModel);
                    }
                    addOrUpdateTableInParsedModel(newTable, parsedModel, warehouseMetadata, tablesCategory);
                }
                return parsedModel;
            }(null === (_a = null == etlPayload ? void 0 : etlPayload.progressDetail) || void 0 === _a ? void 0 : _a.dataflow, parsedModel, metadata);
            var databaseDefinitionPayload = _.find(schema.operationInformation, isDatabaseDefinitionOperationInfo), databaseDefinitionModel = null === (_b = null == databaseDefinitionPayload ? void 0 : databaseDefinitionPayload.progressDetail) || void 0 === _b ? void 0 : _b.databaseDefinition;
            parsedModel = fromDatahub ? function(databaseDefinition, parsedModel, warehouseMetadata, telemetryService) {
                if (1 !== warehouseMetadata.datamartType) {
                    var schemaCategory = findOrCreateCategory("Schemas", parsedModel, warehouseMetadata);
                    if (!databaseDefinition || !(null == databaseDefinition ? void 0 : databaseDefinition.schemas)) return parsedModel.categories.set(schemaCategory.urn, schemaCategory), 
                    parsedModel;
                    for (var _i = 0, _a = databaseDefinition.schemas; _i < _a.length; _i++) {
                        var databaseDefinitionSchema = _a[_i], schema = findOrCreateSchema(databaseDefinitionSchema.name, parsedModel, warehouseMetadata);
                        switch (databaseDefinitionSchema.name) {
                          case dataModelSchemas._.informationSchema:
                          case dataModelSchemas._.sysSchema:
                            addOrUpdateSchemaObjectContainerInModel(schema, "Views", "View", parsedModel, warehouseMetadata);
                            break;

                          default:
                            addOrUpdateSchemaObjectContainerInModel(schema, "Tables", "Table", parsedModel, warehouseMetadata), 
                            addOrUpdateSchemaObjectContainerInModel(schema, "Views", "View", parsedModel, warehouseMetadata);
                        }
                        parsedModel.schemas.set(schema.urn, schema), schemaCategory.childrenUrns.add(schema.urn);
                    }
                    parsedModel.categories.set(schemaCategory.urn, schemaCategory), parsedModel = parseDatabaseDefinitionTables(databaseDefinition, parsedModel, warehouseMetadata);
                } else if (!databaseDefinition || !(null == databaseDefinition ? void 0 : databaseDefinition.schemas)) return parsedModel;
                return parseViews(databaseDefinition, parsedModel, warehouseMetadata, telemetryService);
            }(databaseDefinitionModel, parsedModel, metadata, telemetryService) : function(warehouseCrossDbQueriesFeatureSwitchValue, databaseDefinition, parsedModel, warehouseMetadata, telemetryService) {
                var warehouse = findOrCreateWarehouse(parsedModel, warehouseMetadata);
                if (1 !== warehouseMetadata.datamartType) {
                    var schemaCategory = findOrCreateCategory("Schemas", parsedModel, warehouseMetadata);
                    if (warehouseCrossDbQueriesFeatureSwitchValue) {
                        warehouse.categoryUrns.add(schemaCategory.urn);
                        var securityCategory = findOrCreateCategory("Security", parsedModel, warehouseMetadata);
                        warehouse.categoryUrns.add(securityCategory.urn);
                        var builtInContainer = findOrCreateDatabaseRoleContainer("BuiltIn", "DB roles (Built-in)", parsedModel, warehouse.warehouseMetadata), customContainer = findOrCreateDatabaseRoleContainer("Custom", "DB roles (Custom)", parsedModel, warehouse.warehouseMetadata);
                        securityCategory.childrenUrns.add(getCustomWarehouseUrn(warehouse.objectId, builtInContainer.name)), 
                        securityCategory.childrenUrns.add(getCustomWarehouseUrn(warehouse.objectId, customContainer.name));
                    }
                    if (!databaseDefinition || !(null == databaseDefinition ? void 0 : databaseDefinition.schemas)) return parsedModel.categories.set(schemaCategory.urn, schemaCategory), 
                    parsedModel;
                    for (var _i = 0, _a = databaseDefinition.schemas; _i < _a.length; _i++) {
                        var databaseDefinitionSchema = _a[_i], schema = findOrCreateSchema(databaseDefinitionSchema.name, parsedModel, warehouseMetadata);
                        switch (databaseDefinitionSchema.name) {
                          case dataModelSchemas._.informationSchema:
                          case dataModelSchemas._.queryInsightsSchema:
                            addOrUpdateSchemaObjectContainerInModel(schema, "Views", "View", parsedModel, warehouseMetadata);
                            break;

                          case dataModelSchemas._.sysSchema:
                            addOrUpdateSchemaObjectContainerInModel(schema, "Views", "View", parsedModel, warehouseMetadata), 
                            addOrUpdateSchemaObjectContainerInModel(schema, "Stored Procedures", "StoredProcedure", parsedModel, warehouseMetadata), 
                            addOrUpdateSchemaObjectContainerInModel(schema, "Functions", "UserDefinedFunction", parsedModel, warehouseMetadata);
                            break;

                          default:
                            addOrUpdateSchemaObjectContainerInModel(schema, "Tables", "Table", parsedModel, warehouseMetadata), 
                            addOrUpdateSchemaObjectContainerInModel(schema, "Views", "View", parsedModel, warehouseMetadata), 
                            addOrUpdateSchemaObjectContainerInModel(schema, "Stored Procedures", "StoredProcedure", parsedModel, warehouseMetadata), 
                            addOrUpdateSchemaObjectContainerInModel(schema, "Functions", "UserDefinedFunction", parsedModel, warehouseMetadata);
                        }
                        parsedModel.schemas.set(schema.urn, schema), schemaCategory.childrenUrns.add(schema.urn);
                    }
                    parsedModel.categories.set(schemaCategory.urn, schemaCategory), parsedModel = function(databaseDefinition, parsedModel, warehouseMetadata) {
                        for (var _a, s = 0; s < (null === (_a = databaseDefinition.storedProcedures) || void 0 === _a ? void 0 : _a.length); s++) {
                            var storedProcedure = databaseDefinition.storedProcedures[s], storedProcedureUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, storedProcedure.schemaName, "StoredProcedure", storedProcedure.name), newStoredProcedure = parsedModel.storedProcedures.get(storedProcedureUrn);
                            newStoredProcedure ? (newStoredProcedure.name = newStoredProcedure.name, newStoredProcedure.schemaName = newStoredProcedure.schemaName, 
                            newStoredProcedure.uniqueName = newStoredProcedure.uniqueName) : newStoredProcedure = {
                                objectType: "StoredProcedure",
                                urn: storedProcedureUrn,
                                name: storedProcedure.name,
                                isHidden: !1,
                                canEdit: !1,
                                schemaName: storedProcedure.schemaName,
                                uniqueName: storedProcedure.uniqueName,
                                fullyQualifiedName: getFullyQualifiedName(storedProcedure.schemaName, storedProcedure.name),
                                warehouseId: warehouseMetadata.datamartObjectId
                            }, parsedModel.storedProcedures.set(newStoredProcedure.urn, newStoredProcedure), 
                            findOrCreateSchemaObjectContainer(newStoredProcedure.schemaName, "Stored Procedures", "StoredProcedure", parsedModel, warehouseMetadata).childrenUrns.add(newStoredProcedure.urn);
                        }
                        return parsedModel;
                    }(databaseDefinition, parsedModel = parseDatabaseDefinitionTables(databaseDefinition, parsedModel, warehouseMetadata), warehouseMetadata), 
                    parsedModel = function(databaseDefinition, parsedModel, warehouseMetadata) {
                        for (var _a, f = 0; f < (null === (_a = databaseDefinition.functions) || void 0 === _a ? void 0 : _a.length); f++) {
                            var func = databaseDefinition.functions[f], functionUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, func.schemaName, "UserDefinedFunction", func.name), newFunction = parsedModel.userDefinedFunctions.get(functionUrn);
                            newFunction ? (newFunction.name = newFunction.name, newFunction.schemaName = newFunction.schemaName, 
                            newFunction.uniqueName = newFunction.uniqueName) : newFunction = {
                                objectType: "UserDefinedFunction",
                                urn: functionUrn,
                                name: func.name,
                                isHidden: !1,
                                canEdit: !1,
                                schemaName: func.schemaName,
                                uniqueName: func.uniqueName,
                                fullyQualifiedName: getFullyQualifiedName(func.schemaName, func.name),
                                warehouseId: warehouseMetadata.datamartObjectId
                            }, parsedModel.userDefinedFunctions.set(newFunction.urn, newFunction), findOrCreateSchemaObjectContainer(newFunction.schemaName, "Functions", "UserDefinedFunction", parsedModel, warehouseMetadata).childrenUrns.add(newFunction.urn);
                        }
                        return parsedModel;
                    }(databaseDefinition, parsedModel, warehouseMetadata), parsedModel = function(databaseDefinition, parsedModel, warehouseMetadata) {
                        for (var _a, d = 0; d < (null === (_a = databaseDefinition.dbRoles) || void 0 === _a ? void 0 : _a.length); d++) {
                            var dbRole = databaseDefinition.dbRoles[d], databaseRoleContainerName = dbRole.isBuiltIn ? "BuiltIn" : "Custom", dbRoleUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, databaseRoleContainerName, dbRole.name), newDbRole = parsedModel.databaseRoles.get(dbRoleUrn);
                            newDbRole ? (newDbRole.name = newDbRole.name, newDbRole.databaseRoleType = newDbRole.databaseRoleType) : newDbRole = {
                                objectType: "DatabaseRole",
                                urn: dbRoleUrn,
                                name: dbRole.name,
                                isHidden: !1,
                                canEdit: !1,
                                warehouseId: warehouseMetadata.datamartObjectId,
                                databaseRoleType: dbRole.isBuiltIn ? "DB roles (Built-in)" : "DB roles (Custom)"
                            }, parsedModel.databaseRoles.set(newDbRole.urn, newDbRole), findOrCreateDatabaseRoleContainer(databaseRoleContainerName, dbRole.isBuiltIn ? "DB roles (Built-in)" : "DB roles (Custom)", parsedModel, warehouseMetadata).databaseRoleUrns.add(newDbRole.urn);
                        }
                        return parsedModel;
                    }(databaseDefinition, parsedModel, warehouseMetadata);
                } else if (!databaseDefinition || !(null == databaseDefinition ? void 0 : databaseDefinition.schemas)) return parsedModel;
                return parseViews(databaseDefinition, parsedModel, warehouseMetadata, telemetryService);
            }(state.warehouseCrossDbQueries, databaseDefinitionModel, parsedModel, metadata, telemetryService);
            var xmlaPayload = _.find(schema.operationInformation, isXmlaOperationInfo);
            parsedModel = function(state, datasetInfo, parsedModel, warehouseMetadata) {
                var _a, _b;
                if (_.isEmpty(datasetInfo)) return parsedModel;
                var lookup = function(datasetInfo) {
                    for (var _a, _b, xmlaLookup = {}, t = 0; t < (null === (_b = null === (_a = null == datasetInfo ? void 0 : datasetInfo.model) || void 0 === _a ? void 0 : _a.tables) || void 0 === _b ? void 0 : _b.length); t++) {
                        var table = null == datasetInfo ? void 0 : datasetInfo.model.tables[t];
                        xmlaLookup[table.name] = table;
                    }
                    return xmlaLookup;
                }(datasetInfo), columnModelUrnMap = new Map;
                parsedModel.columns.forEach(function(column) {
                    columnModelUrnMap.set(column.modelUrn, column);
                });
                var existingDwInState = state.datamarts.entities[warehouseMetadata.datamartObjectId], parsedModelWarehouse = findOrCreateWarehouse(parsedModel, warehouseMetadata);
                if (!_.isEmpty(existingDwInState)) {
                    var newViewAsRoles_1 = [], currentViewAsRoles = existingDwInState.viewAsRoles.map(function(viewAsRole) {
                        return viewAsRole.roleName;
                    }), currentBERoles = null === (_b = null === (_a = null == datasetInfo ? void 0 : datasetInfo.model) || void 0 === _a ? void 0 : _a.roles) || void 0 === _b ? void 0 : _b.map(function(r) {
                        return r.name;
                    });
                    _.difference(currentBERoles, currentViewAsRoles).forEach(function(newRoleName) {
                        newViewAsRoles_1.push({
                            roleName: newRoleName,
                            checked: !1
                        });
                    }), _.intersection(currentViewAsRoles, currentBERoles).forEach(function(intersectionName) {
                        newViewAsRoles_1.push(existingDwInState.viewAsRoles.find(function(r) {
                            return r.roleName === intersectionName;
                        }));
                    }), parsedModelWarehouse.viewAsRoles = newViewAsRoles_1, parsedModel.datamarts.set(warehouseMetadata.datamartObjectId, parsedModelWarehouse);
                }
                return parsedModel.tables.forEach(function(table) {
                    parseMeasuresAndColumnsFromXMLA(lookup, table, warehouseMetadata, parsedModel, columnModelUrnMap);
                }), parsedModel.views.forEach(function(view) {
                    parseMeasuresAndColumnsFromXMLA(lookup, view, warehouseMetadata, parsedModel, columnModelUrnMap);
                }), parsedModel;
            }(state, null === (_c = null == xmlaPayload ? void 0 : xmlaPayload.progressDetail) || void 0 === _c ? void 0 : _c.dataset, parsedModel, metadata);
            var syncErrorPayload = _.find(schema.operationInformation, isSyncErrorOperationInfo);
            return parsedModel = function(tablesSyncStatus, parsedModel, warehouseMetadata) {
                var _a, _b, warehouse = parsedModel.datamarts.get(warehouseMetadata.datamartObjectId);
                if (!warehouse || 2 !== warehouseMetadata.datamartType) return parsedModel;
                if (void 0 === tablesSyncStatus) return warehouse.failedToLoadTableSyncErrors = void 0, 
                parsedModel;
                for (var _i = 0, tablesSyncStatus_1 = tablesSyncStatus; _i < tablesSyncStatus_1.length; _i++) {
                    var tableSyncStatus = tablesSyncStatus_1[_i], syncStatusTableUrn = getCustomWarehouseUrn(warehouseMetadata.datamartObjectId, "dbo", tableSyncStatus.tableName), matchedTable = parsedModel.tables.get(syncStatusTableUrn);
                    tableSyncStatus.warehouseName = warehouse.name, matchedTable && !_.isEmpty(tableSyncStatus.warningMessages) ? matchedTable.syncWarnings = tableSyncStatus.warningMessages : matchedTable && tableSyncStatus.error ? (null !== (_a = matchedTable.syncErrors) && void 0 !== _a || (matchedTable.syncErrors = []), 
                    matchedTable.syncErrors.push(tableSyncStatus)) : tableSyncStatus.error && (null !== (_b = warehouse.failedToLoadTableSyncErrors) && void 0 !== _b || (warehouse.failedToLoadTableSyncErrors = []), 
                    warehouse.failedToLoadTableSyncErrors.push(tableSyncStatus));
                }
                return parsedModel;
            }(null === (_d = null == syncErrorPayload ? void 0 : syncErrorPayload.progressDetail) || void 0 === _d ? void 0 : _d.tablesSyncStatus, parsedModel, metadata), 
            function(parsedModel, existingState, warehouseMetadata, commandMap) {
                var firstWarehouse;
                return firstWarehouse = !0, parsedModel.datamarts.forEach(function(value, _) {
                    var _a, existingWarehouse = existingState.datamarts.entities[value.objectId];
                    if (existingWarehouse && "INIT" !== existingWarehouse.schemaLoadState) {
                        var parsedChildrenUrns = value.categoryUrns, failedToLoadTableSyncErrors = null !== (_a = value.failedToLoadTableSyncErrors) && void 0 !== _a ? _a : existingWarehouse.failedToLoadTableSyncErrors;
                        value = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, existingWarehouse), {
                            name: existingWarehouse.name,
                            canEdit: existingWarehouse.canEdit,
                            objectType: "Warehouse",
                            categoryUrns: parsedChildrenUrns,
                            isHidden: existingWarehouse.isHidden,
                            urn: existingWarehouse.urn,
                            objectId: existingWarehouse.objectId,
                            autoRefreshing: !1,
                            warehouseMetadata,
                            autoRefreshingFromQueryExecution: existingWarehouse.autoRefreshingFromQueryExecution,
                            isSyncRunning: !1,
                            isWarehouseImporting: !1,
                            failedToLoadTableSyncErrors,
                            viewAsRoles: value.viewAsRoles
                        });
                    } else firstWarehouse && (value = {
                        name: value.name,
                        canEdit: value.canEdit,
                        objectType: "Warehouse",
                        categoryUrns: value.categoryUrns,
                        isHidden: value.isHidden,
                        urn: value.urn,
                        objectId: value.objectId,
                        autoRefreshing: !1,
                        warehouseMetadata,
                        autoRefreshingFromQueryExecution: value.autoRefreshingFromQueryExecution,
                        isSyncRunning: !1,
                        isWarehouseImporting: !1,
                        failedToLoadTableSyncErrors: value.failedToLoadTableSyncErrors,
                        etlModel: void 0,
                        datasetInfo: value.datasetInfo,
                        databaseDefinition: value.databaseDefinition,
                        refreshingDatamartBatchId: value.refreshingDatamartBatchId,
                        refreshedEntityIds: value.refreshedEntityIds,
                        importingWarehouseBatchId: value.importingWarehouseBatchId,
                        updatingDatamartStepsProgressIds: value.updatingDatamartStepsProgressIds,
                        updatingLoadingStepsProgressIds: value.updatingLoadingStepsProgressIds,
                        viewAsRoles: value.viewAsRoles,
                        infoLoadState: value.infoLoadState,
                        queriesLoadState: value.queriesLoadState,
                        schemaLoadState: value.schemaLoadState,
                        modelingServiceInitialized: value.modelingServiceInitialized,
                        modelingServiceIgnoreModelChanged: value.modelingServiceIgnoreModelChanged,
                        fromDatahub: value.fromDatahub,
                        notificationSuspended: value.notificationSuspended,
                        isReadonly: value.isReadonly
                    }, firstWarehouse = !1);
                    parsedModel.datamarts.set(value.objectId, value);
                }), parsedModel.schemas.forEach(function(value, _key) {
                    var existingSchema = existingState.schemas.entities[value.urn];
                    if (existingSchema) {
                        var parsedChildrenUrns = value.schemaObjectContainersUrns;
                        (value = _.cloneDeep(existingSchema)).schemaObjectContainersUrns = parsedChildrenUrns, 
                        parsedModel.schemas.set(value.urn, value);
                    }
                }), parsedModel.categories.forEach(function(value, _key) {
                    var existingCategory = existingState.categories.entities[value.urn];
                    if (existingCategory) {
                        var parsedChildrenUrns = value.childrenUrns;
                        (value = _.cloneDeep(existingCategory)).childrenUrns = parsedChildrenUrns, parsedModel.categories.set(value.urn, value);
                    }
                }), parsedModel.schemaObjectContainers.forEach(function(value, _key) {
                    var existingContainer = existingState.schemaObjectContainers.entities[value.urn];
                    if (existingContainer) {
                        var parsedChildrenUrns = value.childrenUrns;
                        (function(container) {
                            var value = commandMap.get(container.schemaName);
                            return !!value && value.has(container.childrenType);
                        })(value = _.cloneDeep(existingContainer)) && (value.childrenUrns = parsedChildrenUrns), 
                        parsedModel.schemaObjectContainers.set(value.urn, value);
                    }
                }), parsedModel.tables.forEach(function(value, _) {
                    var existingTable = existingState.tables.entities[value.urn];
                    existingTable && 1 !== warehouseMetadata.datamartType && (value.isHidden = existingTable.isHidden, 
                    value.canEdit = existingTable.canEdit, value.syncErrors = existingTable.syncErrors, 
                    value.syncWarnings = existingTable.syncWarnings, parsedModel.tables.set(value.urn, value));
                }), parsedModel.views.forEach(function(value, _) {
                    var existingView = existingState.views.entities[value.urn];
                    existingView && (value.isHidden = existingView.isHidden, value.canEdit = existingView.canEdit, 
                    parsedModel.views.set(value.urn, value));
                }), parsedModel.measures.forEach(function(value, _) {
                    var existingMeasure = existingState.measures.entities[value.urn];
                    existingMeasure && (value.isHidden = existingMeasure.isHidden, value.canEdit = existingMeasure.canEdit, 
                    parsedModel.measures.set(value.urn, value));
                }), parsedModel.columns.forEach(function(value, _) {
                    var existingColumn = existingState.columns.entities[value.urn];
                    existingColumn && (value.isHidden = existingColumn.isHidden, value.canEdit = existingColumn.canEdit, 
                    parsedModel.columns.set(value.urn, value));
                }), parsedModel.storedProcedures.forEach(function(value, _) {
                    var existingSproc = existingState.storedProcedures.entities[value.urn];
                    existingSproc && (value.isHidden = existingSproc.isHidden, parsedModel.storedProcedures.set(value.urn, value));
                }), parsedModel.databaseRoleContainers.forEach(function(value, _key) {
                    var existingContainer = existingState.databaseRoleContainers.entities[value.urn];
                    if (existingContainer) {
                        var parsedChildrenUrns = value.databaseRoleUrns;
                        (function(container) {
                            var databaseRoleKey = DatabaseDefinitionCommandUtils.getDatabaseRoleContainerUniqueIdentifier(container.warehouseMetadata.datamartObjectId, container.childrenRoleType), value = commandMap.get(databaseRoleKey);
                            return !!value && value.has(container.childrenDatamartObjectType);
                        })(value = _.cloneDeep(existingContainer)) && (value.databaseRoleUrns = parsedChildrenUrns), 
                        parsedModel.databaseRoleContainers.set(value.urn, value);
                    }
                }), parsedModel.databaseRoles.forEach(function(value, _) {
                    var existingRole = existingState.databaseRoles.entities[value.urn];
                    existingRole && (value.isHidden = existingRole.isHidden, parsedModel.databaseRoles.set(value.urn, value));
                }), parsedModel;
            }(parsedModel, state, metadata, function(filterCommand, parsedModel, datamartObjectId, databaseChildrenRoleTypeRequested) {
                filterCommand = null != filterCommand ? filterCommand : DatabaseDefinitionCommandUtils.defaultFilterCommand;
                for (var commandMap = new Map, dbRoleTypes = [ "DB roles (Custom)", "DB roles (Built-in)" ], _loop_1 = function(includeFilter) {
                    var dbRoleUniqueIdentifier;
                    if (includeFilter.databaseObjectTypes.includes("dbRoles")) debug.fF.assert(function() {
                        return 1 === includeFilter.databaseObjectTypes.length;
                    }, "dbRoles should be the only type in the filter when included"), dbRoleUniqueIdentifier = DatabaseDefinitionCommandUtils.getDatabaseRoleContainerUniqueIdentifier(datamartObjectId, databaseChildrenRoleTypeRequested || dbRoleTypes.pop()), 
                    commandMap = parseIncludeFilterBySchemaName(commandMap, dbRoleUniqueIdentifier, includeFilter.databaseObjectTypes); else if (includeFilter.schemaName) commandMap = function(commandMap, includeFilter) {
                        return parseIncludeFilterBySchemaName(commandMap, includeFilter.schemaName, includeFilter.databaseObjectTypes);
                    }(commandMap, includeFilter); else for (var _d = 0, _e = getAllSchemaNames(parsedModel); _d < _e.length; _d++) commandMap = parseIncludeFilterBySchemaName(commandMap, _e[_d], includeFilter.databaseObjectTypes);
                }, _i = 0, _a = filterCommand.databaseDefinitionIncludeFilters; _i < _a.length; _i++) _loop_1(_a[_i]);
                for (var _loop_2 = function(excludeFilter) {
                    var dbRoleUniqueIdentifier;
                    if (excludeFilter.databaseObjectTypes.includes("dbRoles")) debug.fF.assert(function() {
                        return 1 === excludeFilter.databaseObjectTypes.length;
                    }, "dbRoles should be the only type in the filter when included"), dbRoleUniqueIdentifier = DatabaseDefinitionCommandUtils.getDatabaseRoleContainerUniqueIdentifier(datamartObjectId, databaseChildrenRoleTypeRequested || dbRoleTypes.pop()), 
                    commandMap = parseExcludeFilterBySchemaName(commandMap, dbRoleUniqueIdentifier, excludeFilter.databaseObjectTypes); else if (excludeFilter.schemaName) commandMap = function(commandMap, excludeFilter) {
                        return parseExcludeFilterBySchemaName(commandMap, excludeFilter.schemaName, excludeFilter.databaseObjectTypes);
                    }(commandMap, excludeFilter); else for (var _f = 0, _g = getAllSchemaNames(parsedModel); _f < _g.length; _f++) commandMap = parseExcludeFilterBySchemaName(commandMap, _g[_f], excludeFilter.databaseObjectTypes);
                }, _b = 0, _c = filterCommand.databaseDefinitionExcludeFilters; _b < _c.length; _b++) _loop_2(_c[_b]);
                return commandMap;
            }(filterCommand, parsedModel, metadata.datamartObjectId, databaseChildrenRoleType));
        }
        function isEtlOperationInfo(operationInfo) {
            var _a;
            return null != (null === (_a = null == operationInfo ? void 0 : operationInfo.progressDetail) || void 0 === _a ? void 0 : _a.dataflow);
        }
        function isXmlaOperationInfo(operationInfo) {
            var _a;
            return "GetDatasetOperationProgressDetail" === (null === (_a = null == operationInfo ? void 0 : operationInfo.progressDetail) || void 0 === _a ? void 0 : _a.$type);
        }
        function isDatabaseDefinitionOperationInfo(operationInfo) {
            var _a;
            return null != (null === (_a = null == operationInfo ? void 0 : operationInfo.progressDetail) || void 0 === _a ? void 0 : _a.databaseDefinition);
        }
        function isRefreshDatamartOperationInfo(operationInfo) {
            var _a;
            return "PutDataflowOperationProgressDetail" === (null === (_a = null == operationInfo ? void 0 : operationInfo.progressDetail) || void 0 === _a ? void 0 : _a.$type);
        }
        function isSyncErrorOperationInfo(operationInfo) {
            var _a;
            return null != (null === (_a = null == operationInfo ? void 0 : operationInfo.progressDetail) || void 0 === _a ? void 0 : _a.tablesSyncStatus);
        }
        function isExecuteSqlProgressDetail(operationInfo) {
            var _a;
            return "ExecuteSqlOperationProgressDetail" === (null === (_a = null == operationInfo ? void 0 : operationInfo.progressDetail) || void 0 === _a ? void 0 : _a.$type);
        }
        function isImportOperationProgressDetail(operationInfo) {
            var _a;
            return "ImportOperationProgressDetail" === (null === (_a = null == operationInfo ? void 0 : operationInfo.progressDetail) || void 0 === _a ? void 0 : _a.$type);
        }
        function unhideAllTables(state) {
            var updates = [];
            return _.forEach(state.tables.entities, function(table) {
                return updates.push({
                    id: table.urn,
                    changes: {
                        isHidden: !1
                    }
                });
            }), updates;
        }
        function unhideAllColumns(state) {
            var updates = [];
            return _.forEach(state.columns.entities, function(column) {
                return updates.push({
                    id: column.urn,
                    changes: {
                        isHidden: !1
                    }
                });
            }), updates;
        }
        function unhideAllMeasures(state) {
            var updates = [];
            return _.forEach(state.measures.entities, function(measure) {
                return updates.push({
                    id: measure.urn,
                    changes: {
                        isHidden: !1
                    }
                });
            }), updates;
        }
        function reducer_utils_findByUrn(state, urn) {
            var matchedSchema = state.schemas.entities[urn];
            if (matchedSchema) return {
                type: "Schema",
                value: matchedSchema
            };
            var matchedTable = state.tables.entities[urn];
            if (matchedTable) return {
                type: "Table",
                value: matchedTable
            };
            var matchedColumn = state.columns.entities[urn];
            if (matchedColumn) return {
                type: "Column",
                value: matchedColumn
            };
            var matchedMeasure = state.measures.entities[urn];
            if (matchedMeasure) return {
                type: "Measure",
                value: matchedMeasure
            };
            var matchedQuery = state.queries.entities[urn];
            if (matchedQuery) return {
                type: "Query",
                value: matchedQuery
            };
            var matchedStoredProcedure = state.storedProcedures.entities[urn];
            if (matchedStoredProcedure) return {
                type: "StoredProcedure",
                value: matchedStoredProcedure
            };
            var matchedView = state.views.entities[urn];
            if (matchedView) return {
                type: "View",
                value: matchedView
            };
            var matchedUserDefinedFunction = state.userDefinedFunctions.entities[urn];
            if (matchedUserDefinedFunction) return {
                type: "UserDefinedFunction",
                value: matchedUserDefinedFunction
            };
            var matchedWarehouse = state.datamarts.entities[urn];
            if (matchedWarehouse) return {
                type: "Warehouse",
                value: matchedWarehouse
            };
            var matchedCategory = state.categories.entities[urn];
            if (matchedCategory) return {
                type: "Category",
                value: matchedCategory
            };
            var matchedSchemaObjectContainer = state.schemaObjectContainers.entities[urn];
            if (matchedSchemaObjectContainer) return {
                type: "SchemaObjectContainer",
                value: matchedSchemaObjectContainer
            };
            var matchedDatabaseRoleContainers = state.databaseRoleContainers.entities[urn];
            if (matchedDatabaseRoleContainers) return {
                type: "DatabaseRoleContainer",
                value: matchedDatabaseRoleContainers
            };
            var matchedDatabaseRoles = state.databaseRoles.entities[urn];
            return matchedDatabaseRoles ? {
                type: "DatabaseRole",
                value: matchedDatabaseRoles
            } : null;
        }
        function mapDatmartQueryInfo(datamartObjectId, id, queryInfo, existingQuery) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            void 0 === existingQuery && (existingQuery = null);
            var query = {
                urn: urn_builder.X6.getQueryUrn(id),
                queryId: null === (_a = queryInfo.queryId) || void 0 === _a ? void 0 : _a.toString(),
                name: queryInfo.queryName,
                mExpression: queryInfo.mExpression,
                sqlExpression: queryInfo.sqlExpression,
                updatedAt: queryInfo.updatedAt,
                objectType: "Query",
                warehouseId: datamartObjectId,
                canEdit: !1,
                isHidden: !1,
                sqlGridResultIds: [],
                state: 3,
                clientExecutionStartTime: queryInfo.clientExecutionStartTime,
                sqlResultPaneSelectedView: "messages",
                sqlResultsPaneMessageIds: [],
                startLineNumber: null !== (_b = queryInfo.startLineNumber) && void 0 !== _b ? _b : 1,
                type: _.isEmpty(queryInfo.mExpression) ? 0 : 1,
                isSaving: !1,
                clientUniqueId: id,
                badge: 0,
                isShared: queryInfo.isShared,
                ownerUserObjectId: queryInfo.ownerUserObjectId,
                columns: []
            };
            return 0 === query.type && (query.editorContext = null !== (_c = null == existingQuery ? void 0 : existingQuery.editorContext) && void 0 !== _c ? _c : new MonacoEditorContext, 
            query.isResultGridVisible = null !== (_d = null == existingQuery ? void 0 : existingQuery.isResultGridVisible) && void 0 !== _d ? _d : queryInfo.isResultGridVisible, 
            query.isQueryCanceled = null !== (_e = null == existingQuery ? void 0 : existingQuery.isQueryCanceled) && void 0 !== _e ? _e : queryInfo.isQueryCanceled, 
            query.isQueryExecuting = null !== (_f = null == existingQuery ? void 0 : existingQuery.isQueryExecuting) && void 0 !== _f ? _f : queryInfo.isQueryExecuting, 
            query.sqlGridResultIds = null !== (_g = null == existingQuery ? void 0 : existingQuery.sqlGridResultIds) && void 0 !== _g ? _g : [], 
            query.sqlResultsPaneMessageIds = null !== (_h = null == existingQuery ? void 0 : existingQuery.sqlResultsPaneMessageIds) && void 0 !== _h ? _h : [], 
            query.sqlResultPaneSelectedView = null !== (_j = null == existingQuery ? void 0 : existingQuery.sqlResultPaneSelectedView) && void 0 !== _j ? _j : query.sqlResultPaneSelectedView), 
            query;
        }
        function createNewQuery(datamartObjectId, name, type, isShared) {
            void 0 === isShared && (isShared = !1);
            var id = generateClientUniqueId(), query = {
                sqlExpression: void 0,
                name,
                canEdit: !1,
                isHidden: !1,
                warehouseId: datamartObjectId,
                mExpression: void 0,
                objectType: "Query",
                urn: urn_builder.X6.getQueryUrn(id),
                queryId: "",
                updatedAt: "",
                sqlGridResultIds: [],
                state: 0,
                sqlResultPaneSelectedView: "messages",
                sqlResultsPaneMessageIds: [],
                type,
                clientUniqueId: id,
                isShared,
                columns: []
            };
            return 0 === type && (query.editorContext = new MonacoEditorContext, query.isResultGridVisible = !1, 
            query.isQueryCanceled = !1, query.isQueryExecuting = !1), query;
        }
        function getQueryCategory() {
            return {
                name: "Queries",
                canEdit: !1,
                objectType: "Category",
                childrenUrns: new Set,
                isHidden: !1,
                urn: "Queries",
                warehouseMetadata: void 0
            };
        }
        function generateClientUniqueId() {
            var guid = "", idx = 0;
            for (idx = 0; idx < 32; idx += 1) {
                var guidDigitsItem = 16 * Math.random() | 0;
                switch (idx) {
                  case 8:
                  case 12:
                  case 16:
                  case 20:
                    guid += "-";
                }
                guid += guidDigitsItem.toString(16);
            }
            return guid;
        }
        function getDatamartUpdateProgressKey(datamartObjectId, step) {
            return datamartObjectId + "/" + step;
        }
        var ngrx_entity = __webpack_require__(8894), datamart_metadata_actions = __webpack_require__(4301);
        function constants_getEncodedName(name) {
            return name.replace(/]/g, "]]");
        }
        var ExecuteSqlMessageType = function(ExecuteSqlMessageType) {
            return ExecuteSqlMessageType[ExecuteSqlMessageType.informational = 0] = "informational", 
            ExecuteSqlMessageType[ExecuteSqlMessageType.warning = 1] = "warning", ExecuteSqlMessageType[ExecuteSqlMessageType.error = 2] = "error", 
            ExecuteSqlMessageType;
        }({}), DmsErrorCodes = function(DmsErrorCodes) {
            return DmsErrorCodes.CapacityLimitExceeded = "CapacityLimitExceeded", DmsErrorCodes.CapacityNotActive = "CapacityNotActive", 
            DmsErrorCodes.DmsBatchNotFound = "DmsBatchNotFound", DmsErrorCodes.OperationCanceled = "OperationCanceled", 
            DmsErrorCodes.DmsImportDatabaseException = "DmsImportDatabaseException", DmsErrorCodes.SqlMwcTokenSizeLimitExceededException = "SqlMwcTokenSizeLimitExceededException", 
            DmsErrorCodes;
        }({}), base = "[Datamart Datahub Dialog]", onAddWarehouseToFieldList = ((0, ngrx_store.PH)("".concat(base, " Create Datahub")), 
        (0, ngrx_store.PH)("".concat(base, " Add Warehouse to OE"), (0, ngrx_store.Ky)())), selectTopRows = ((0, 
        ngrx_store.PH)("".concat(base, " Error while trying to show datahub dialog"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Select Table"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Unselect Table"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Select Multiple Tables"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Select Top 100 rows"), (0, 
        ngrx_store.Ky)())), onPreviewData = ((0, ngrx_store.PH)("".concat("[Datamart Field List]", " Select Multiple Columns"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Expand Table Category")), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Cancel preview data query")), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Preview selected table data"), (0, 
        ngrx_store.Ky)())), onPreviewDataSuccess = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Preview Data Success"), (0, 
        ngrx_store.Ky)()), onPreviewDataError = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Preview Data Failure"), (0, 
        ngrx_store.Ky)()), onPreviewDataQueryError = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " display Query Error message on Preview Data"), (0, 
        ngrx_store.Ky)()), createDefaultFunction = ((0, ngrx_store.PH)("".concat("[Datamart Field List]", " Collapse Table Category")), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Expand Table"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Collapse Table"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Select Column"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Unselect Column"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " New Measure"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Create Default Function"), (0, 
        ngrx_store.Ky)())), createDefaultSchema = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Create Default Schema"), (0, 
        ngrx_store.Ky)()), createDefaultStoredProc = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Create Default Stored Proc"), (0, 
        ngrx_store.Ky)()), createDefaultTable = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Create Default Table"), (0, 
        ngrx_store.Ky)()), createDefaultView = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Create Default View"), (0, 
        ngrx_store.Ky)()), onCtasTable = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Create Table as Select"), (0, 
        ngrx_store.Ky)()), addOrRemoveTableInBISuccess = ((0, ngrx_store.PH)("".concat("[Datamart Field List]", " Drop Database Object"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Show Incremental Refresh"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Edit Table")), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " On Add Remove Tables To BI"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Add or remove operation in BI model Succeeded"), (0, 
        ngrx_store.Ky)())), addOrRemoveTableInBIFailed = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Add or remove operation in BI model failed"), (0, 
        ngrx_store.Ky)()), schemaUpdatedAfterAddRemoveObject = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Schema updated after add/remove object operation"), (0, 
        ngrx_store.Ky)()), onLoadSchemaSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Field List]", " On expanded node"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Load schema succeeded"), (0, 
        ngrx_store.Ky)())), onLoadSchemaError = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Load schema failed"), (0, 
        ngrx_store.Ky)()), onSqlCreateScript = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Sql create script"), (0, 
        ngrx_store.Ky)()), onSqlAlterScript = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Alter Stored Procedure or View"), (0, 
        ngrx_store.Ky)()), onSqlDropCreateScript = ((0, ngrx_store.PH)("".concat("[Datamart Field List]", " Sql drop script"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Sql drop create script"), (0, 
        ngrx_store.Ky)())), newSqlScript = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " New sql script"), (0, 
        ngrx_store.Ky)()), onGenerateSqlScriptError = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Sql script generation failed"), (0, 
        ngrx_store.Ky)()), onObjectRefresh = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Object refresh"), (0, 
        ngrx_store.Ky)()), onObjectRefreshSuccess = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " object refresh succeeded"), (0, 
        ngrx_store.Ky)()), onObjectRefreshError = (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Object refresh failed"), (0, 
        ngrx_store.Ky)()), hideMashupDialog = ((0, ngrx_store.PH)("".concat("[Datamart Field List]", " Open Filepath Properties"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " On field list search triggered")), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " on drag start to monaco editor")), 
        (0, ngrx_store.PH)("".concat("[Datamart Field List]", " on drag end to monaco editor"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Field List]", " Export Datawarehouse")), 
        (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Launch Mashup Editor Dialog"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Recover mashup"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Hide mashup dialog"))), saveVisualQueryTransformation = (0, 
        ngrx_store.PH)("".concat("[Mashup Editor]", " Save Visual Query Transformation"), (0, 
        ngrx_store.Ky)()), viewSqlFromVisualQuery = (0, ngrx_store.PH)("".concat("[Mashup Editor]", " View SQL from Visual Query")), setMashupEditorDialog = ((0, 
        ngrx_store.PH)("".concat("[Mashup Editor]", " Save as Table from Visual Query")), 
        (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Save Query as View from Visual Query")), 
        (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Set Mashup Editor Dialog"), (0, 
        ngrx_store.Ky)())), leaveDesignContentSqlView = (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Unblock Interaction for Mashup Client UI")), addQueryCompleted = (0, 
        ngrx_store.PH)("".concat("[Mashup Editor]", " Added Query to Mashup Client Call Completed")), mashupEditorReady = (0, 
        ngrx_store.PH)("".concat("[Mashup Editor]", " Mashup Client is Ready")), setVisualQueryMashupEditorDialog = (0, 
        ngrx_store.PH)("".concat("[Mashup Editor]", " Set Visual Query Mashup Editor Dialog"), (0, 
        ngrx_store.Ky)()), effectsInitialized = (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Effects Initialized"), (0, 
        ngrx_store.Ky)()), pqoTableDragAndDrop = (0, ngrx_store.PH)("".concat("[Mashup Editor]", " PQO Drag and Drop Table in Query Designer"), (0, 
        ngrx_store.Ky)()), tableDragAndDrop = (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Drag and Drop Table in Query Designer"), (0, 
        ngrx_store.Ky)()), accessTokenAboutToExpire = ((0, ngrx_store.PH)("".concat("[Mashup Editor]", " Save Mashup Query in Query Designer")), 
        (0, ngrx_store.PH)("".concat("[Mashup Editor]", " Access Token Will Expire Soon"))), noViewAsRolesAreSelected = ((0, 
        ngrx_store.PH)("".concat("[Mashup Editor]", " Mwc Token Acquire Failed"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Mashup Editor]", " No View As Roles are Selected"))), loadDatamart = ((0, 
        ngrx_store.PH)("".concat("[Mashup Editor]", " On view selected"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart"), (0, ngrx_store.Ky)())), loadDatamartFromCache = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart from cache"), (0, ngrx_store.Ky)()), closeDatamartEditor = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Close Datamart Editor"), (0, ngrx_store.Ky)()), loadEditorFromCache = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart and editor from cache"), (0, 
        ngrx_store.Ky)()), loadDatamartInfoSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart information succeeded"), (0, 
        ngrx_store.Ky)()), loadDatamartSchemaSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " informationCallSuccedded"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart schema succeeded"), (0, 
        ngrx_store.Ky)())), loadDatamartQueriesSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart queries succeeded"), (0, 
        ngrx_store.Ky)()), loadDatamartInfoError = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart information failed"), (0, 
        ngrx_store.Ky)()), loadDatamartSchemaError = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart schema failed"), (0, 
        ngrx_store.Ky)()), cacheLoadingError = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Cache Load datamart error"), (0, 
        ngrx_store.Ky)()), loadDatamartQueriesError = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart queries failed"), (0, 
        ngrx_store.Ky)()), initializeModelingServiceSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " Handle newly loaded datamart history failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Initialize modeling service succeeded"))), ignoredFirstModelingServiceModelChanged = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Initialize modeling view succeeded")), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Initialize modeling service failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " First Modeling service modelChanged has been ignored"))), openDatahubSidepane = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Datahub show tables side pane opened"), (0, 
        ngrx_store.Ky)()), getDatamartSchemaSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Get datamart schema succeeded"), (0, 
        ngrx_store.Ky)()), autoRefreshingSchema = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Auto refreshing datamart schema"), (0, 
        ngrx_store.Ky)()), onAutoRefreshSchemaSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Auto refresh latest datamart schema success"), (0, 
        ngrx_store.Ky)()), onAutoRefreshSchemaError = (0, ngrx_store.PH)("".concat("[Datamart Model]", "  Auto refresh latest datamart schema failed"), (0, 
        ngrx_store.Ky)()), loadDatamartVersionSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load datamart version success"), (0, 
        ngrx_store.Ky)()), setCopilotCapability = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Set Copilot Capability"), (0, 
        ngrx_store.Ky)()), syncMetadataFromRunQueryResponseNoop = (0, ngrx_store.PH)("".concat("[Datamart Model]", "  Started metadata sync on run query success but no change to datamart version"), (0, 
        ngrx_store.Ky)()), syncMetadataFromRunQueryResponseSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", "  Started metadata sync on run query success and got new datamart version and schema"), (0, 
        ngrx_store.Ky)()), syncMetadataFromRunQueryResponseError = (0, ngrx_store.PH)("".concat("[Datamart Model]", "  Error during autoRefreshFromQueryExecution$"), (0, 
        ngrx_store.Ky)()), getDatamartSchemaError = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Get datamart schema failed"), (0, 
        ngrx_store.Ky)()), getDatahubSchemaSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Get datahub schema succeeded"), (0, 
        ngrx_store.Ky)()), exitDatamart = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Exit datamart")), saveDatamart = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Save Datamart"), (0, ngrx_store.Ky)()), trackingNewlyLoadedDatamartRefresh = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Tracking newly loaded datamart's refresh"), (0, 
        ngrx_store.Ky)()), startingUpdateStep = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Starting update step"), (0, 
        ngrx_store.Ky)()), completedUpdateStep = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Completed update step"), (0, 
        ngrx_store.Ky)()), trackingDatamartRefresh = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Tracking datamart refresh batch request"), (0, 
        ngrx_store.Ky)()), pollDatamartRefreshSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Poll datamart refresh success"), (0, 
        ngrx_store.Ky)()), saveDatamartSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Save Datamart succeeded"), (0, 
        ngrx_store.Ky)()), saveDatamartError = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Save Datamart failed"), (0, 
        ngrx_store.Ky)()), cancelDatamartRefreshSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " Cancel saving the datamart")), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Cancel refreshing the datamart succeeded"))), cancelDatamartRefreshError = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Cancel refreshing the datamart failed"), (0, 
        ngrx_store.Ky)()), datamart_model_actions_setIsHidden = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " Rename datamart"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Update Datamart"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Delete Measure"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Unrecoverable failure")), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Set is hidden"), (0, ngrx_store.Ky)())), unhideAllItems = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Unhide all items")), getLeaseSuccess = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " get lease succeeded"), (0, ngrx_store.Ky)()), extendLease = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " extend lease"), (0, ngrx_store.Ky)()), saveViewAsRoles = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Set View As Roles"), (0, ngrx_store.Ky)()), datamartEffectsLoaded = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Datamart effects are loaded"), (0, 
        ngrx_store.Ky)()), datamart_model_actions_select = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Selected"), (0, 
        ngrx_store.Ky)()), deselect = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Deselected"), (0, 
        ngrx_store.Ky)()), selectAll = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Selected All"), (0, 
        ngrx_store.Ky)()), clearSelections = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Cleared Selections")), suspendNotification = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Suspended Notifications")), resumeNotification = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Resumed Notifications")), syncSuccess = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Sync Succeeded"), (0, ngrx_store.Ky)()), onSyncError = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Sync failed"), (0, ngrx_store.Ky)()), addWarehouseToFieldListSuccess = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Sql lanuage service requests to load warehouse"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Add Warehouse to OE succeeded"), (0, 
        ngrx_store.Ky)())), removeWarehouseFromFieldList = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " Add Warehouse to OE failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Remove Warehouse from Field List"), (0, 
        ngrx_store.Ky)())), setReadOnlyMode = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " Manage Dataset From Message Bar")), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Dismiss Datamart Info Message Bar")), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Set Read Only Mode"), (0, ngrx_store.Ky)())), onActionError = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " On view changed"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " On action error"))), loadDatamartSampleStarted = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Load Datamart Sample"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load Datamart Sample started"), (0, 
        ngrx_store.Ky)())), pollLoadSampleProgressSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " Load Datamart Sample failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load Datamart Sample Lock Conflict Error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Load Sample Polling Success"), (0, 
        ngrx_store.Ky)())), getSchemaForSearch = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Get Datamart Schema For Search"), (0, 
        ngrx_store.Ky)()), getSchemaForSearchSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Get Datamart Schema For Search succeeded"), (0, 
        ngrx_store.Ky)()), getSchemaForSearchError = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Get Datamart Schema For Search failed"), (0, 
        ngrx_store.Ky)()), onTryToLoadIncrementally = (0, ngrx_store.PH)("".concat("[Datamart Model]", " On shouldTryToLoadIncrementally returns true"), (0, 
        ngrx_store.Ky)()), onOneLakeFilepathSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " OneLake Filepath Success"), (0, 
        ngrx_store.Ky)()), onObjectFilterToggle = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " OneLake Filepath Retry"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " OneLake Filepath Error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Field list object filter toggle"), (0, 
        ngrx_store.Ky)())), onObjectFilterClearAll = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Field list object filter clear all")), fetchMwcTokenSuccess = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Show datamart side panel"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Fetch mwc token success"), (0, 
        ngrx_store.Ky)())), requestWithTokenReturnedWith404 = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Http request using an mwc token returned with a 404")), onCloneTableSuccess = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " On clone table"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Clone table success"), (0, ngrx_store.Ky)())), activateCopilot = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Clone table error"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Activate Copilot"))), deactivateCopilot = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Deactivate Copilot")), toggleCopilot = (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Toggle Copilot")), onImportDatawarehouseInProgress = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Share datamart")), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Share datamart error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Export Datawarehouse failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Export Datawarehouse Success")), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Import Datawarehouse")), (0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Import Datawarehouse Started"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Import Datawarehouse in Progress"), (0, 
        ngrx_store.Ky)())), pollImportDatawarehouseProgressSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Import Datawarehouse Polling Success"), (0, 
        ngrx_store.Ky)()), onImportWarehouseSuccess = (0, ngrx_store.PH)("".concat("[Datamart Model]", " Import Datawarehouse Success"), (0, 
        ngrx_store.Ky)()), cancelImportDatawarehouseSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Model]", " Import Datawarehouse Failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Import Datawarehouse Exception"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Model]", " Cancel importing the datawarehouse")), 
        (0, ngrx_store.PH)("".concat("[Datamart Model]", " Cancel importing the datawarehouse succeeded"))), initQuery = ((0, 
        ngrx_store.PH)("".concat("[Datamart Model]", " Cancel importing the datawarehouse failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Initialize Query Editor"), (0, 
        ngrx_store.Ky)())), setName = (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Set Query Name"), (0, 
        ngrx_store.Ky)()), querySaved = (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Set Query Status to Saved")), save = (0, 
        ngrx_store.PH)("".concat("[Datamart Query Editor]", " Save Query"), (0, ngrx_store.Ky)()), discard = (0, 
        ngrx_store.PH)("".concat("[Datamart Query Editor]", " Discard Query")), addOrUpdateQuery = (0, 
        ngrx_store.PH)("".concat("[Datamart Query Editor]", " Add or Update Session Query"), (0, 
        ngrx_store.Ky)()), onExplainQuery = ((0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " On save query as view"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " On explain query"))), onFixQuery = (0, 
        ngrx_store.PH)("".concat("[Datamart Query Editor]", " On fix query"), (0, ngrx_store.Ky)()), transformDataFromVisualDesigner = ((0, 
        ngrx_store.PH)("".concat("[Datamart Query Editor]", " Open In Excel From Visual Designer"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Open query selection confirm dialog"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Transform Data from Visual Designer"))), generatedTransientModel = (0, 
        ngrx_store.PH)("".concat("[Datamart Query Editor]", " Add generated Transient Model to cache"), (0, 
        ngrx_store.Ky)()), saveReportSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Open visual result")), 
        (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Open data explore"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result save as report"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result save report failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result save report succeeded"), (0, 
        ngrx_store.Ky)())), saveQueryAsViewSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Launch Sql View of Visual Query"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result cancel save report")), 
        (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result discover datasources failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " save a view failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result save your report"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result discover datasources failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " get schemas from executeSql failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Visual result generate model failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Load visual result success"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Validate datamart mashup failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " save as view succeeded"), (0, 
        ngrx_store.Ky)())), onExplainQuerySuccess = ((0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " cancel save as view")), 
        (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " save as view succeeded")), 
        (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Explain query succeeded"), (0, 
        ngrx_store.Ky)())), onExplainQueryError = (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Explain query failed"), (0, 
        ngrx_store.Ky)()), onFixQuerySuccess = (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Fix query succeeded"), (0, 
        ngrx_store.Ky)()), onFixQueryError = (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Fix query failed"), (0, 
        ngrx_store.Ky)()), onBeginAutoCompletion = (0, ngrx_store.PH)("".concat("[Datamart Query Editor]", " Begin auto completion")), onEndAutoCompletion = (0, 
        ngrx_store.PH)("".concat("[Datamart Query Editor]", " End auto completion")), createQuerySuccess = ((0, 
        ngrx_store.PH)("".concat("[Datamart Query]", " Create query"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Query]", " Create query succeeded"), (0, 
        ngrx_store.Ky)())), updateQuery = ((0, ngrx_store.PH)("".concat("[Datamart Query]", " Create query failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Update Query"), (0, 
        ngrx_store.Ky)())), updateQuerySuccess = (0, ngrx_store.PH)("".concat("[Datamart Query]", " Update Query Succeeded"), (0, 
        ngrx_store.Ky)()), renameQueryOnClientSide = ((0, ngrx_store.PH)("".concat("[Datamart Query]", " Update Query Failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Update Query Conflict Error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Rename query on client side"), (0, 
        ngrx_store.Ky)())), renameQuery = (0, ngrx_store.PH)("".concat("[Datamart Query]", " Rename query"), (0, 
        ngrx_store.Ky)()), renameQuerySuccess = (0, ngrx_store.PH)("".concat("[Datamart Query]", " Rename query succeeded"), (0, 
        ngrx_store.Ky)()), updateQuerySharedStatusSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Query]", " Rename query failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Rename query conflict error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Update query shared status"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Update query shared status success"), (0, 
        ngrx_store.Ky)())), deleteQuerySuccess = ((0, ngrx_store.PH)("".concat("[Datamart Query]", " Update query shared status failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Delete query"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Delete query succeeded"), (0, 
        ngrx_store.Ky)())), getQueriesSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Query]", " Delete query failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Get queries")), 
        (0, ngrx_store.PH)("".concat("[Datamart Query]", " Get queries succeeded"), (0, 
        ngrx_store.Ky)())), onQueryHttpCall = ((0, ngrx_store.PH)("".concat("[Datamart Query]", " Get queries failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Open save query"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Create draft query"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Duplicate query"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Editing session mashup changed")), 
        (0, ngrx_store.PH)("".concat("[Datamart Query]", " On query Http call"), (0, ngrx_store.Ky)())), onQueryCanceled = ((0, 
        ngrx_store.PH)("".concat("[Datamart Query]", " Run Query")), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Cancel Query"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " On fetch MWC token for execteSql error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Query]", " Query canceled"), (0, 
        ngrx_store.Ky)())), onCancelQueryError = (0, ngrx_store.PH)("".concat("[Datamart Query]", " Query cancellation failed"), (0, 
        ngrx_store.Ky)()), onQueryBatchDispatched = (0, ngrx_store.PH)("".concat("[Datamart Query]", " Query batch dispatched"), (0, 
        ngrx_store.Ky)()), onQueryTabAdded = ((0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Get Data")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " New Data Pipeline")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " New Dataflow Gen 2")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Transform Data")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Enter Data")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Refresh")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Manage Roles")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " View As Roles")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Copy Tds Endpoint")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " New report")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " New Column")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " On query tab added."), (0, ngrx_store.Ky)())), createReport = ((0, 
        ngrx_store.PH)("".concat("[Datamart Ribbon]", " New Measure"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Create Hierarchy"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Create Report"), (0, ngrx_store.Ky)())), onAddRemoveTablesToBIFromManageDataset = ((0, 
        ngrx_store.PH)("".concat("[Datamart Ribbon]", " Table Name"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Column Name"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Measure Name"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Enable Column Profile"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Show Column Quality Details"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Show Column Value Distribution"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Show Column Profile In Details"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Run Query")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Cancel Query"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Save Query"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Discard Query"), (0, ngrx_store.Ky)()), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Show Incremental Refresh"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " New Dataset")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Manage Dataset")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Manage Dataset From New Report")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Manage Dataset From Auto Update Default Dataset"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Add/Remove Tables To/From BI"), (0, 
        ngrx_store.Ky)())), addRemoveOperationInProgress = ((0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Add/Remove Tables To/From BI From Auto Update Dataset"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Add/Remove Tables/Views To/From BI operation In Progress"), (0, 
        ngrx_store.Ky)())), onAddRemoveTablesToBIFromAutoUpdateDatasetSuccess = ((0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Cancel Add/Remove Tables/Views To/From BI")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Cancel Add/Remove Tables/Views To/From BI response"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Add or remove operation in BI model from auto update dataset success"), (0, 
        ngrx_store.Ky)())), onAddRemoveTablesToBIFromAutoUpdateDatasetFailed = (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Add or remove operation in BI model from auto update dataset failed"), (0, 
        ngrx_store.Ky)()), onAddRemoveTablesToBIFromManageDatasetFailed = (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Add or remove operation in BI model from manage dataset failed"), (0, 
        ngrx_store.Ky)()), onAddRemoveTablesToBIFromManageDatasetFailedWithInternalError = (0, 
        ngrx_store.PH)("".concat("[Datamart Ribbon]", " Add or remove operation in BI model from manage dataset failed with internal error"), (0, 
        ngrx_store.Ky)()), onSync = ((0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Automatically Update Dataset")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Automatically Update Dataset Success"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Automatically Update Dataset failed"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Automatically Update Dataset failed with internal error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Generate ADS Protocol By DatamartID"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Sync Data"))), onRefreshFromManageDataset = (0, 
        ngrx_store.PH)("".concat("[Datamart Ribbon]", " Refresh From Manage Dataset")), onCreateDefaultTableTemplate = ((0, 
        ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Settings Open")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Export Datawarehouse")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " Dialog Export Datawarehouse")), 
        (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Query Activity")), (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Create Default Table Template"), (0, 
        ngrx_store.Ky)())), onCreateDefaultViewTemplate = (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Create Default View Template"), (0, 
        ngrx_store.Ky)()), onCreateDefaultSchemaTemplate = (0, ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Create Default Schema Template")), onCreateDefaultStoredProcedureTemplate = (0, 
        ngrx_store.PH)("".concat("[Datamart Ribbon]", " On Create Default Stored Procedure Template"), (0, 
        ngrx_store.Ky)()), runSqlScript = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Run SQL native script."), (0, 
        ngrx_store.Ky)()), onEditorRunQuerySuccess = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On Editor Run Query Success"), (0, 
        ngrx_store.Ky)()), onAsyncQueryFinishedExecution = ((0, ngrx_store.PH)("".concat("[Datamart tabs]", " On Editor Run Async Query Success"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On Async Query Finished Execution"), (0, 
        ngrx_store.Ky)())), onEditorRunQueryError = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On Editor Run Query Error"), (0, 
        ngrx_store.Ky)()), onSqlResultSelected = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On SQL result selected."), (0, 
        ngrx_store.Ky)()), sqlQueryMashupEvaluationStarted = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Selected SQL query tab evaluation started.")), sqlQueryMashupEvaluationEnded = (0, 
        ngrx_store.PH)("".concat("[Datamart tabs]", " Selected SQL query tab evaluation ended"), (0, 
        ngrx_store.Ky)()), queryViewInitialized = ((0, ngrx_store.PH)("".concat("[Datamart tabs]", " Selected SQL query tab evaluation canceled")), 
        (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Query view initialized."))), datamart_tabs_actions_onQueryTabAdded = (0, 
        ngrx_store.PH)("".concat("[Datamart tabs]", " On query tab added."), (0, ngrx_store.Ky)()), onSavedQueryOpened = (0, 
        ngrx_store.PH)("".concat("[Datamart tabs]", " On saved query opened."), (0, ngrx_store.Ky)()), onSavedQueryOpenRefreshed = (0, 
        ngrx_store.PH)("".concat("[Datamart tabs]", " On saved query open refreshed."), (0, 
        ngrx_store.Ky)()), onQueryTabClosed = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On query tab closed."), (0, 
        ngrx_store.Ky)()), onSelectedTabChanged = ((0, ngrx_store.PH)("".concat("[Datamart tabs]", " On unsaved-query tab closed.")), 
        (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On selected query tab changed."), (0, 
        ngrx_store.Ky)())), selectedSqlQueryTabEditorActivated = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Selected SQL query tab editor activated."), (0, 
        ngrx_store.Ky)()), selectedSqlQueryTabPaneHeightChanged = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Selected SQL query tab pane height changed."), (0, 
        ngrx_store.Ky)()), selectedSqlQueryTabPaneMaximized = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Selected SQL query tab pane is expanded/maximized."), (0, 
        ngrx_store.Ky)()), selectedSqlQueryTabContentChanged = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " SQL query tab content changed."), (0, 
        ngrx_store.Ky)()), selectedSqlQueryResultPaneTabViewChanged = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " SQL query results pane tab view changed."), (0, 
        ngrx_store.Ky)()), selectedVisualQueryTabContentChanged = (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Visual query tab content changed."), (0, 
        ngrx_store.Ky)()), queryMashupValidated = ((0, ngrx_store.PH)("".concat("[Datamart tabs]", " Open in excel from SQL editor"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On close tab"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On Visualize result from SQL editor"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On Visualize result from Design view editor"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " Query info from datamart mashup validated"), (0, 
        ngrx_store.Ky)())), saveIncrementalRefresh = ((0, ngrx_store.PH)("".concat("[Datamart tabs]", " Save as table from SQL editor"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On save as table dialog submit"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On cancel save as table"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On cancel save as table success")), 
        (0, ngrx_store.PH)("".concat("[Datamart tabs]", " On cancel save as table error"), (0, 
        ngrx_store.Ky)()), (0, ngrx_store.PH)("".concat("[Datamart Incremental Refresh]", " Save Incremental Refresh"), (0, 
        ngrx_store.Ky)()));
        function isCategory(obj) {
            return obj && "Category" === obj.objectType;
        }
        function isSchema(obj) {
            return obj && "Schema" === obj.objectType;
        }
        function isSchemaObjectContainer(obj) {
            return obj && "SchemaObjectContainer" === obj.objectType;
        }
        function isTable(obj) {
            return obj && "Table" === obj.objectType;
        }
        function isView(obj) {
            return obj && "View" === obj.objectType;
        }
        function isStoredProcedure(obj) {
            return obj && "StoredProcedure" === obj.objectType;
        }
        function isDatabaseRoleContainer(obj) {
            return obj && "DatabaseRoleContainer" === obj.objectType;
        }
        function isColumn(obj) {
            return obj && "Column" === obj.objectType;
        }
        function isMeasure(obj) {
            return obj && "Measure" === obj.objectType;
        }
        function isNumericColumn(column) {
            return column && (column.modelDataType === ASDataType.Int64 || column.modelDataType === ASDataType.Decimal || column.modelDataType === ASDataType.Double);
        }
        var unique_name_generator_UniqueNameGenerator = function() {
            function UniqueNameGenerator() {}
            return UniqueNameGenerator.getUniqueName = function(newName, existingNames) {
                if (!_.find(existingNames, function(existingName) {
                    return existingName.toLocaleLowerCase() === newName.toLocaleLowerCase();
                })) return newName;
                for (var result, regex = /\d+/g, matches = []; null !== (result = regex.exec(newName)); ) {
                    var digits = result[0];
                    matches.push({
                        value: Number.parseInt(digits, void 0),
                        prefix: newName.substr(0, regex.lastIndex - digits.length),
                        suffix: newName.substr(regex.lastIndex)
                    });
                }
                for (var _i = 0, matches_1 = matches = _.reverse(matches); _i < matches_1.length; _i++) for (var match = matches_1[_i], _loop_1 = function(i) {
                    var name_1 = match.prefix + i + match.suffix;
                    if (!_.find(existingNames, function(existingName) {
                        return existingName.toLocaleLowerCase() === name_1.toLocaleLowerCase();
                    })) return {
                        value: name_1
                    };
                }, i = match.value + 1; i < 1e6; i++) {
                    var state_1 = _loop_1(i);
                    if ("object" == typeof state_1) return state_1.value;
                }
                return this.getUniqueName(newName + " (2)", existingNames);
            }, UniqueNameGenerator;
        }(), commonGlobals = window, editorAdapter = (0, ngrx_entity.H)({
            selectId: function(datamartEditor) {
                return datamartEditor.primaryDatamartObjectId;
            }
        }), refreshedEntityAdapter = (0, ngrx_entity.H)({
            selectId: function(refreshedEntity) {
                return refreshedEntity.id;
            }
        }), updatingDatamartProgressStepsAdapter = (0, ngrx_entity.H)({
            selectId: function(updatingDatamartProgressStep) {
                return updatingDatamartProgressStep.id;
            }
        }), updatingLoadingProgressStepsAdapter = (0, ngrx_entity.H)({
            selectId: function(updatingLoadingProgressStep) {
                return updatingLoadingProgressStep.id;
            }
        }), datamartsAdapter = (0, ngrx_entity.H)({
            selectId: function(warehouse) {
                return warehouse.objectId;
            }
        }), schemasAdapter = (0, ngrx_entity.H)({
            selectId: function(schema) {
                return schema.urn;
            }
        }), schemaObjectContainersAdapter = (0, ngrx_entity.H)({
            selectId: function(schemaObjectContainer) {
                return schemaObjectContainer.urn;
            }
        }), storedProceduresAdapter = (0, ngrx_entity.H)({
            selectId: function(storedProcedure) {
                return storedProcedure.urn;
            }
        }), userDefinedFunctionsAdapter = (0, ngrx_entity.H)({
            selectId: function(func) {
                return func.urn;
            }
        }), categoriesAdapter = (0, ngrx_entity.H)({
            selectId: function(category) {
                return category.urn;
            }
        }), sqlGridResultAdapter = (0, ngrx_entity.H)({
            selectId: function(result) {
                return result.id;
            }
        }), tablesAdapter = (0, ngrx_entity.H)({
            selectId: function(table) {
                return table.urn;
            }
        }), viewsAdapter = (0, ngrx_entity.H)({
            selectId: function(view) {
                return view.urn;
            }
        }), columnsAdapter = (0, ngrx_entity.H)({
            selectId: function(column) {
                return column.urn;
            }
        }), measuresAdapter = (0, ngrx_entity.H)({
            selectId: function(measure) {
                return measure.urn;
            }
        }), messagesAdapter = (0, ngrx_entity.H)({
            selectId: function(message) {
                return message.id;
            }
        }), queriesAdapter = (0, ngrx_entity.H)({
            selectId: function(datamartQuery) {
                return datamartQuery.urn;
            },
            sortComparer: function(q1, q2) {
                return q1.name.localeCompare(q2.name);
            }
        }), databaseRoleContainersAdapter = (0, ngrx_entity.H)({
            selectId: function(container) {
                return container.urn;
            }
        }), databaseRolesAdapter = (0, ngrx_entity.H)({
            selectId: function(role) {
                return role.urn;
            }
        }), initialState = {
            sqlMessages: messagesAdapter.getInitialState(),
            schemas: schemasAdapter.getInitialState(),
            schemaObjectContainers: schemaObjectContainersAdapter.getInitialState(),
            sqlGridResults: sqlGridResultAdapter.getInitialState(),
            categories: categoriesAdapter.getInitialState(),
            tables: tablesAdapter.getInitialState(),
            views: viewsAdapter.getInitialState(),
            storedProcedures: storedProceduresAdapter.getInitialState(),
            userDefinedFunctions: userDefinedFunctionsAdapter.getInitialState(),
            columns: columnsAdapter.getInitialState(),
            measures: measuresAdapter.getInitialState(),
            queries: queriesAdapter.getInitialState(),
            refreshedEntities: refreshedEntityAdapter.getInitialState(),
            updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.getInitialState(),
            updatingLoadingStepsProgress: updatingLoadingProgressStepsAdapter.getInitialState(),
            lakehouseModeling: void 0,
            datamartModeling: void 0,
            tridentMultitaskingDatamarts: void 0,
            datamarts: datamartsAdapter.getInitialState(),
            warehouseCrossDbQueries: void 0,
            activeEditorId: void 0,
            executeSqlAsyncFeatureSwitch: void 0,
            datamartAutoRefresh: void 0,
            databaseRoleContainers: databaseRoleContainersAdapter.getInitialState(),
            databaseRoles: databaseRolesAdapter.getInitialState(),
            editors: editorAdapter.getInitialState(),
            telemetryService: void 0,
            isCopilotActive: !1
        };
        function getSelectedItemChanges(queryId, state) {
            return queryId ? {
                selected: {
                    queryId,
                    items: new Set([ urn_builder.X6.getQueryUrn(queryId) ])
                }
            } : {
                selected: {
                    queryId: void 0,
                    items: new Set
                }
            };
        }
        function datamart_model_reducers_selectAll(datamartObjectId, items, clearPreviousSelection, state) {
            for (var selectedItems = clearPreviousSelection ? new Set : state.editors.entities[datamartObjectId].selected.items, _i = 0, items_1 = items; _i < items_1.length; _i++) selectedItems.add(items_1[_i].urn);
            return selectedItems;
        }
        function datamart_model_reducers_deselect(datamartObjectId, item, state) {
            var selectedItems = new Set(state.editors.entities[datamartObjectId].selected.items);
            return selectedItems.delete(item.urn), selectedItems;
        }
        function closeTab(editorObjectId, state, queryId) {
            var newSelectedId;
            if (1 === state.editors.entities[editorObjectId].tabs.length) newSelectedId = null; else if (queryId === state.editors.entities[editorObjectId].selected.queryId) {
                var closeQueryIdIndex = state.editors.entities[editorObjectId].tabs.indexOf(queryId);
                newSelectedId = state.editors.entities[editorObjectId].tabs[0 === closeQueryIdIndex ? 1 : closeQueryIdIndex - 1];
            } else newSelectedId = state.editors.entities[editorObjectId].selected.queryId;
            var tabs = state.editors.entities[editorObjectId].tabs;
            return tabs.splice(tabs.indexOf(queryId), 1), {
                newSelectedId,
                tabs
            };
        }
        function getStateFromModelNoQueries(schema, state, metadata, fromDatahub, telemetryService, filterCommand, containersToLoad) {
            var parsedSchema = getModelFromSchema(schema, state, metadata, fromDatahub, telemetryService, filterCommand), removedState = removeKeysFromState(metadata.datamartObjectId, state), schemaObjectContainers = Array.from(parsedSchema.schemaObjectContainers.values()), databaseRoleContainers = Array.from(parsedSchema.databaseRoleContainers.values());
            if (null == containersToLoad ? void 0 : containersToLoad.schemaObjectContainers) {
                var containerUrns_1 = new Set(containersToLoad.schemaObjectContainers.map(function(container) {
                    return container.urn;
                }));
                schemaObjectContainers.map(function(schemaObjectContainer) {
                    containerUrns_1.has(schemaObjectContainer.urn) && (schemaObjectContainer.isLoaded = !0);
                });
            }
            if (null == containersToLoad ? void 0 : containersToLoad.databaseRoleContainers) {
                var containerUrns_2 = new Set(containersToLoad.databaseRoleContainers.map(function(container) {
                    return container.urn;
                }));
                databaseRoleContainers.map(function(databaseRoleContainer) {
                    containerUrns_2.has(databaseRoleContainer.urn) && (databaseRoleContainer.isLoaded = !0);
                });
            }
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, removedState), {
                databaseRoleContainers: databaseRoleContainersAdapter.upsertMany(databaseRoleContainers, state.databaseRoleContainers),
                databaseRoles: databaseRolesAdapter.upsertMany(Array.from(parsedSchema.databaseRoles.values()), state.databaseRoles),
                categories: categoriesAdapter.upsertMany(Array.from(parsedSchema.categories.values()), state.categories),
                schemas: schemasAdapter.upsertMany(Array.from(parsedSchema.schemas.values()), state.schemas),
                schemaObjectContainers: schemaObjectContainersAdapter.upsertMany(schemaObjectContainers, state.schemaObjectContainers),
                tables: tablesAdapter.upsertMany(Array.from(parsedSchema.tables.values()), state.tables),
                views: viewsAdapter.upsertMany(Array.from(parsedSchema.views.values()), state.views),
                storedProcedures: storedProceduresAdapter.upsertMany(Array.from(parsedSchema.storedProcedures.values()), state.storedProcedures),
                userDefinedFunctions: userDefinedFunctionsAdapter.upsertMany(Array.from(parsedSchema.userDefinedFunctions.values()), state.userDefinedFunctions),
                columns: columnsAdapter.upsertMany(Array.from(parsedSchema.columns.values()), state.columns),
                measures: measuresAdapter.upsertMany(Array.from(parsedSchema.measures.values()), state.measures),
                queries: state.queries,
                datamarts: datamartsAdapter.upsertMany(Array.from(parsedSchema.datamarts.values()), state.datamarts)
            });
        }
        function updateEtlXmlState(state, datamartObjectId, schema) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        etlModel: null !== (_c = null === (_b = null === (_a = _.find(schema.operationInformation, isEtlOperationInfo)) || void 0 === _a ? void 0 : _a.progressDetail) || void 0 === _b ? void 0 : _b.dataflow) && void 0 !== _c ? _c : state.datamarts.entities[datamartObjectId].etlModel,
                        datasetInfo: null !== (_d = state.datamarts.entities[datamartObjectId].datasetInfo) && void 0 !== _d ? _d : null === (_f = null === (_e = _.find(schema.operationInformation, isXmlaOperationInfo)) || void 0 === _e ? void 0 : _e.progressDetail) || void 0 === _f ? void 0 : _f.dataset,
                        databaseDefinition: null !== (_g = state.datamarts.entities[datamartObjectId].databaseDefinition) && void 0 !== _g ? _g : null === (_j = null === (_h = _.find(schema.operationInformation, isDatabaseDefinitionOperationInfo)) || void 0 === _h ? void 0 : _h.progressDetail) || void 0 === _j ? void 0 : _j.databaseDefinition
                    }
                }, state.datamarts)
            });
        }
        function updateStateWithObjectContainerRefreshingStatus(state, datamartModelObject, isRefreshing) {
            switch (datamartModelObject.objectType) {
              case "Warehouse":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    datamarts: datamartsAdapter.updateOne({
                        id: datamartModelObject.objectId,
                        changes: {
                            isObjectContainerRefreshing: isRefreshing
                        }
                    }, state.datamarts)
                });

              case "Category":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    categories: categoriesAdapter.updateOne({
                        id: datamartModelObject.urn,
                        changes: {
                            isObjectContainerRefreshing: isRefreshing
                        }
                    }, state.categories)
                });

              case "SchemaObjectContainer":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    schemaObjectContainers: schemaObjectContainersAdapter.updateOne({
                        id: datamartModelObject.urn,
                        changes: {
                            isObjectContainerRefreshing: isRefreshing
                        }
                    }, state.schemaObjectContainers)
                });

              default:
                return state;
            }
        }
        function updateGeneratingSqlScriptStatus(state, datamartModelObject, generatingSqlScript) {
            if (!datamartModelObject) return state;
            switch (datamartModelObject.objectType) {
              case "Table":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    tables: tablesAdapter.updateOne({
                        id: datamartModelObject.urn,
                        changes: {
                            generatingSqlScript
                        }
                    }, state.tables)
                });

              case "View":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    views: viewsAdapter.updateOne({
                        id: datamartModelObject.urn,
                        changes: {
                            generatingSqlScript
                        }
                    }, state.views)
                });

              case "UserDefinedFunction":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    userDefinedFunctions: userDefinedFunctionsAdapter.updateOne({
                        id: datamartModelObject.urn,
                        changes: {
                            generatingSqlScript
                        }
                    }, state.userDefinedFunctions)
                });

              case "StoredProcedure":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    storedProcedures: storedProceduresAdapter.updateOne({
                        id: datamartModelObject.urn,
                        changes: {
                            generatingSqlScript
                        }
                    }, state.storedProcedures)
                });

              default:
                return state;
            }
        }
        function updateStateWithIncrementalLoad(schema, state, container, fromDatahub, telemetryService, filterCommand) {
            var databaseChildrenRoleType = isDatabaseRoleContainer(container) ? container.childrenRoleType : void 0, parsedSchema = getModelFromSchema(schema, state, container.warehouseMetadata, fromDatahub, telemetryService, filterCommand, databaseChildrenRoleType), schemaObjectContainers = Array.from(parsedSchema.schemaObjectContainers.values()), databaseRoleContainers = Array.from(parsedSchema.databaseRoleContainers.values());
            switch (container.objectType) {
              case "SchemaObjectContainer":
                schemaObjectContainers.map(function(c) {
                    c.urn === container.urn && (c.isLoaded = !0);
                });
                break;

              case "DatabaseRoleContainer":
                databaseRoleContainers.map(function(c) {
                    c.urn === container.urn && (c.isLoaded = !0);
                });
            }
            return {
                schemaObjectContainers: schemaObjectContainersAdapter.upsertMany(schemaObjectContainers, state.schemaObjectContainers),
                databaseRoleContainers: databaseRoleContainersAdapter.upsertMany(databaseRoleContainers, state.databaseRoleContainers),
                tables: tablesAdapter.upsertMany(Array.from(parsedSchema.tables.values()), state.tables),
                views: viewsAdapter.upsertMany(Array.from(parsedSchema.views.values()), state.views),
                storedProcedures: storedProceduresAdapter.upsertMany(Array.from(parsedSchema.storedProcedures.values()), state.storedProcedures),
                userDefinedFunctions: userDefinedFunctionsAdapter.upsertMany(Array.from(parsedSchema.userDefinedFunctions.values()), state.userDefinedFunctions),
                columns: columnsAdapter.upsertMany(Array.from(parsedSchema.columns.values()), state.columns),
                measures: measuresAdapter.upsertMany(Array.from(parsedSchema.measures.values()), state.measures),
                databaseRoles: databaseRolesAdapter.upsertMany(Array.from(parsedSchema.databaseRoles.values()), state.databaseRoles)
            };
        }
        function getReadonlyValue(datamartInformation, state) {
            return 2 === datamartInformation.status && void 0 !== datamartInformation.state || !!state.datamarts.entities[datamartInformation.objectId] && state.datamarts.entities[datamartInformation.objectId].isReadonly;
        }
        function removeKeysFromState(warehouseObjectId, state) {
            var dataWarehouseKeysToRemove = function(datamartObjectId, state) {
                var keysToRemove = {
                    datamarts: [],
                    categories: [],
                    schemas: [],
                    schemaObjectContainers: [],
                    tables: [],
                    views: [],
                    columns: [],
                    measures: [],
                    storedProcedures: [],
                    userDefinedFunctions: [],
                    databaseRoleContainers: [],
                    databaseRoles: []
                }, datamart = state.datamarts.entities[datamartObjectId];
                return datamart ? (keysToRemove.datamarts.push(datamartObjectId), keysToRemove.categories = Array.from(datamart.categoryUrns.values()), 
                _.forEach(keysToRemove.categories, function(categoryKeyToRemove) {
                    var _a, _b, category = state.categories.entities[categoryKeyToRemove];
                    if (category) switch (category.name) {
                      case "Schemas":
                        (_a = keysToRemove.schemas).push.apply(_a, Array.from(state.categories.entities[categoryKeyToRemove].childrenUrns.values()));
                        break;

                      case "Security":
                        (_b = keysToRemove.databaseRoleContainers).push.apply(_b, Array.from(state.categories.entities[categoryKeyToRemove].childrenUrns.values()));
                    } else debug.fF.assertFail("Expected ".concat(categoryKeyToRemove, " to be a real category"));
                }), _.forEach(keysToRemove.schemas, function(schemaKeyToRemove) {
                    var _a;
                    state.schemas.entities[schemaKeyToRemove] ? (_a = keysToRemove.schemaObjectContainers).push.apply(_a, Array.from(state.schemas.entities[schemaKeyToRemove].schemaObjectContainersUrns.values())) : debug.fF.assertFail("Expected ".concat(schemaKeyToRemove, " to be a real schema"));
                }), _.forEach(keysToRemove.schemaObjectContainers, function(key) {
                    var _a, _b, _c, _d, container = state.schemaObjectContainers.entities[key];
                    switch (null == container ? void 0 : container.childrenType) {
                      case "Table":
                        (_a = keysToRemove.tables).push.apply(_a, Array.from(container.childrenUrns.values()));
                        break;

                      case "View":
                        (_b = keysToRemove.views).push.apply(_b, Array.from(container.childrenUrns.values()));
                        break;

                      case "StoredProcedure":
                        (_c = keysToRemove.storedProcedures).push.apply(_c, Array.from(container.childrenUrns.values()));
                        break;

                      case "UserDefinedFunction":
                        (_d = keysToRemove.userDefinedFunctions).push.apply(_d, Array.from(container.childrenUrns.values()));
                        break;

                      default:
                        return;
                    }
                }), _.forEach(keysToRemove.databaseRoleContainers, function(key) {
                    var _a, container = state.databaseRoleContainers.entities[key];
                    if (container) switch (container.childrenRoleType) {
                      case "DB roles (Built-in)":
                      case "DB roles (Custom)":
                        (_a = keysToRemove.databaseRoles).push.apply(_a, Array.from(container.databaseRoleUrns.values()));
                        break;

                      default:
                        return;
                    }
                }), _.forEach(keysToRemove.tables, function(key) {
                    var _a, _b, table = state.tables.entities[key];
                    table && ((_a = keysToRemove.columns).push.apply(_a, Array.from(table.columns.values())), 
                    (_b = keysToRemove.measures).push.apply(_b, Array.from(table.measures.values())));
                }), _.forEach(keysToRemove.views, function(key) {
                    var _a, _b, view = state.views.entities[key];
                    view && ((_a = keysToRemove.columns).push.apply(_a, Array.from(view.columns.values())), 
                    (_b = keysToRemove.measures).push.apply(_b, Array.from(view.measures.values())));
                }), keysToRemove) : keysToRemove;
            }(warehouseObjectId, state), etlKeysToRemove = function(datamartObjectId, state) {
                var keysToRemove = {
                    datamarts: [],
                    categories: [],
                    schemas: [],
                    schemaObjectContainers: [],
                    tables: [],
                    views: [],
                    columns: [],
                    measures: [],
                    storedProcedures: [],
                    userDefinedFunctions: [],
                    databaseRoleContainers: [],
                    databaseRoles: []
                }, datamart = state.datamarts.entities[datamartObjectId];
                return datamart && datamart.warehouseMetadata && 1 === datamart.warehouseMetadata.datamartType && (keysToRemove.categories.push(getCustomWarehouseUrn(datamartObjectId, "Tables")), 
                _.forEach(keysToRemove.categories, function(key) {
                    var _a, _b, _c;
                    state.categories.entities[key] ? (_a = keysToRemove.schemas).push.apply(_a, Array.from(state.categories.entities[key].childrenUrns.values())) : debug.fF.assertFail("Expected ".concat(key, " to be a real category")), 
                    (_b = keysToRemove.tables).push.apply(_b, Array.from(null === (_c = state.categories.entities[key]) || void 0 === _c ? void 0 : _c.childrenUrns.values()));
                }), _.forEach(keysToRemove.tables, function(key) {
                    var _a, _b, table = state.tables.entities[key];
                    state.tables.entities[key] ? (table.columns.size > 0 && (_a = keysToRemove.columns).push.apply(_a, Array.from(state.tables.entities[key].columns.values())), 
                    table.measures.size > 0 && (_b = keysToRemove.measures).push.apply(_b, Array.from(state.tables.entities[key].measures.values()))) : debug.fF.assertFail("Expected ".concat(key, " to be a real table"));
                })), keysToRemove;
            }(warehouseObjectId, state);
            return {
                datamarts: datamartsAdapter.removeMany(dataWarehouseKeysToRemove.datamarts, state.datamarts),
                categories: categoriesAdapter.removeMany(dataWarehouseKeysToRemove.categories.concat(etlKeysToRemove.categories), state.categories),
                schemaObjectContainers: schemaObjectContainersAdapter.removeMany(dataWarehouseKeysToRemove.schemaObjectContainers, state.schemaObjectContainers),
                schemas: schemasAdapter.removeMany(dataWarehouseKeysToRemove.schemas, state.schemas),
                tables: tablesAdapter.removeMany(dataWarehouseKeysToRemove.tables.concat(etlKeysToRemove.tables), state.tables),
                views: viewsAdapter.removeMany(dataWarehouseKeysToRemove.views, state.views),
                storedProcedures: storedProceduresAdapter.removeMany(dataWarehouseKeysToRemove.storedProcedures, state.storedProcedures),
                userDefinedFunctions: userDefinedFunctionsAdapter.removeMany(dataWarehouseKeysToRemove.userDefinedFunctions, state.userDefinedFunctions),
                columns: columnsAdapter.removeMany(dataWarehouseKeysToRemove.columns.concat(etlKeysToRemove.columns), state.columns),
                measures: measuresAdapter.removeMany(dataWarehouseKeysToRemove.measures.concat(etlKeysToRemove.measures), state.measures),
                databaseRoleContainers: databaseRoleContainersAdapter.removeMany(dataWarehouseKeysToRemove.databaseRoleContainers, state.databaseRoleContainers),
                databaseRoles: databaseRolesAdapter.removeMany(dataWarehouseKeysToRemove.databaseRoles, state.databaseRoles)
            };
        }
        function getQueryById(state, id) {
            return state.entities[urn_builder.X6.getQueryUrn(id)];
        }
        function getMashupDocument(mExpression) {
            return _.isEmpty(mExpression) || _.isEmpty(mExpression.trim()) ? null : JSON.parse(mExpression).mashupDocument;
        }
        (0, ngrx_store.Lq)(initialState, (0, ngrx_store.on)(loadDatamart, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, editor = createEditor(datamartObjectId);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                activeEditorId: datamartObjectId,
                editors: editorAdapter.upsertOne(editor, state.editors),
                datamarts: datamartsAdapter.upsertOne(createWarehouse(datamartObjectId, {
                    infoLoadState: "LOADING",
                    queriesLoadState: "LOADING",
                    schemaLoadState: "LOADING"
                }), state.datamarts)
            });
        }), (0, ngrx_store.on)(cacheLoadingError, function(state, _a) {
            var editorId = _a.editorId, errorMsg = _a.errorMsg, errorType = _a.errorType, errorOptions = _a.errorOptions;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: editorId,
                    changes: {
                        loadingError: {
                            errorMsg,
                            errorType,
                            errorOptions
                        }
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(loadDatamartInfoSuccess, function(state, _a) {
            var datamartInformation = _a.datamartInformation;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                categories: categoriesAdapter.addOne(getQueryCategory(), state.categories),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartInformation.objectId,
                    changes: {
                        isReadonly: getReadonlyValue(datamartInformation, state),
                        infoLoadState: "LOADED",
                        name: datamartInformation.name,
                        urn: datamartInformation.name,
                        warehouseMetadata: {
                            datamartType: datamartInformation.datamartType,
                            name: datamartInformation.name,
                            datamartObjectId: datamartInformation.objectId,
                            datamartVersion: void 0,
                            artifactPermissions: datamartInformation.artifactPermissions
                        },
                        informationCallData: {
                            statusCode: datamartInformation.statusCode,
                            responseRequestId: datamartInformation.responseRequestId,
                            clientRequestId: datamartInformation.clientRequestId
                        }
                    }
                }, state.datamarts),
                editors: editorAdapter.updateOne({
                    id: datamartInformation.objectId,
                    changes: {
                        loadedWarehouseIds: [ datamartInformation.objectId ]
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(loadDatamartInfoError, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, error = _a.error;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        infoLoadState: "ERROR",
                        informationCallData: {
                            statusCode: error.status,
                            responseRequestId: error.responseRequestId,
                            clientRequestId: error.requestId
                        }
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(loadDatamartQueriesSuccess, function(state, _a) {
            var queries = _a.queries;
            return queries ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.upsertMany(queries.map(function(query) {
                    return mapDatmartQueryInfo(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, generateClientUniqueId(), query);
                }), state.queries),
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        queriesLoadState: "LOADED"
                    }
                }, state.datamarts)
            }) : state;
        }), (0, ngrx_store.on)(loadDatamartQueriesError, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        queriesLoadState: "ERROR"
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(loadDatamartSchemaSuccess, function(state, _a) {
            var _b, _c, _d, _e, _f, _g, schema = _a.schema, datamartInformation = _a.datamartInformation, primaryWarehouseMetadata = {
                datamartType: _a.datamartType,
                name: datamartInformation.name,
                datamartObjectId: datamartInformation.objectId,
                datamartVersion: schema.datamartVersion
            }, mergedState = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), function(schema, state, metadata, telemetryService) {
                if (!schema) return state;
                var parsedSchema = getModelFromSchema(schema, state, metadata, !1, telemetryService), categories = parsedSchema.categories, queryCategory = getQueryCategory();
                return categories.set(queryCategory.name, queryCategory), {
                    databaseRoleContainers: databaseRoleContainersAdapter.upsertMany(Array.from(parsedSchema.databaseRoleContainers.values()), state.databaseRoleContainers),
                    databaseRoles: databaseRolesAdapter.upsertMany(Array.from(parsedSchema.databaseRoles.values()), state.databaseRoles),
                    categories: categoriesAdapter.upsertMany(Array.from(categories.values()), state.categories),
                    schemas: schemasAdapter.upsertMany(Array.from(parsedSchema.schemas.values()), state.schemas),
                    schemaObjectContainers: schemaObjectContainersAdapter.upsertMany(Array.from(parsedSchema.schemaObjectContainers.values()), state.schemaObjectContainers),
                    tables: tablesAdapter.upsertMany(Array.from(parsedSchema.tables.values()), state.tables),
                    views: viewsAdapter.upsertMany(Array.from(parsedSchema.views.values()), state.views),
                    storedProcedures: storedProceduresAdapter.upsertMany(Array.from(parsedSchema.storedProcedures.values()), state.storedProcedures),
                    userDefinedFunctions: userDefinedFunctionsAdapter.upsertMany(Array.from(parsedSchema.userDefinedFunctions.values()), state.userDefinedFunctions),
                    columns: columnsAdapter.upsertMany(Array.from(parsedSchema.columns.values()), state.columns),
                    measures: measuresAdapter.upsertMany(Array.from(parsedSchema.measures.values()), state.measures),
                    datamarts: datamartsAdapter.upsertMany(Array.from(parsedSchema.datamarts.values()), state.datamarts)
                };
            }(schema, state, primaryWarehouseMetadata, state.telemetryService));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartInformation.objectId,
                    changes: {
                        etlModel: null === (_c = null === (_b = _.find(schema.operationInformation, isEtlOperationInfo)) || void 0 === _b ? void 0 : _b.progressDetail) || void 0 === _c ? void 0 : _c.dataflow,
                        datasetInfo: null === (_e = null === (_d = _.find(schema.operationInformation, isXmlaOperationInfo)) || void 0 === _d ? void 0 : _d.progressDetail) || void 0 === _e ? void 0 : _e.dataset,
                        databaseDefinition: null === (_g = null === (_f = _.find(schema.operationInformation, isDatabaseDefinitionOperationInfo)) || void 0 === _f ? void 0 : _f.progressDetail) || void 0 === _g ? void 0 : _g.databaseDefinition,
                        schemaLoadState: "LOADED",
                        isReadonly: getReadonlyValue(datamartInformation, state),
                        hasLockTimeoutException: !1
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(loadDatamartVersionSuccess, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, datamartVersion = _a.datamartVersion, datamart = state.datamarts.entities[datamartObjectId];
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                categories: categoriesAdapter.addOne(getQueryCategory(), state.categories),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        warehouseMetadata: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, datamart.warehouseMetadata), {
                            datamartVersion
                        })
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(loadDatamartSchemaError, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, error = _a.error;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        schemaLoadState: "ERROR",
                        hasLockTimeoutException: "SqlLockTimeoutException" === error.error.code
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(loadEditorFromCache, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                activeEditorId: datamartObjectId,
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        isLoadedFromCache: !0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(datamart_metadata_actions.nI, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return state.tridentMultitaskingDatamarts ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                activeEditorId: void 0,
                editors: editorAdapter.removeOne(datamartObjectId, state.editors),
                datamarts: datamartsAdapter.removeOne(datamartObjectId, state.datamarts)
            }) : state;
        }), (0, ngrx_store.on)(closeDatamartEditor, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                activeEditorId: state.activeEditorId === datamartObjectId ? void 0 : state.activeEditorId,
                editors: editorAdapter.removeOne(datamartObjectId, state.editors)
            });
        }), (0, ngrx_store.on)(loadDatamartFromCache, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, newEditor = createEditor(datamartObjectId, {
                primaryDatamartObjectId: datamartObjectId,
                loadedWarehouseIds: [ datamartObjectId ]
            });
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                activeEditorId: datamartObjectId,
                editors: editorAdapter.upsertOne(newEditor, state.editors),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        isLoadedFromCache: !0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(loadDatamartSampleStarted, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, loadingSteps = [ {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.CreatingSampleTables),
                step: UpdateStepType.CreatingSampleTables,
                progress: UpdateStepProgressType.InProgress
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.CopyingSampleData),
                step: UpdateStepType.CopyingSampleData,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.CreatingSampleViewsSprocs),
                step: UpdateStepType.CreatingSampleViewsSprocs,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                step: UpdateStepType.WrappingUp,
                progress: UpdateStepProgressType.NotStarted
            } ];
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingLoadingStepsProgress: updatingLoadingProgressStepsAdapter.setAll(loadingSteps, state.updatingLoadingStepsProgress),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        updatingLoadingStepsProgressIds: loadingSteps.map(function(step) {
                            return step.id;
                        })
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onImportDatawarehouseInProgress, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, loadingSteps = [ {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.BuildingObjects),
                step: UpdateStepType.BuildingObjects,
                progress: UpdateStepProgressType.InProgress
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.PublishingSchema),
                step: UpdateStepType.PublishingSchema,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ImportingUserQueries),
                step: UpdateStepType.ImportingUserQueries,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                step: UpdateStepType.WrappingUp,
                progress: UpdateStepProgressType.NotStarted
            } ];
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingLoadingStepsProgress: updatingLoadingProgressStepsAdapter.setAll(loadingSteps, state.updatingLoadingStepsProgress),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        updatingLoadingStepsProgressIds: loadingSteps.map(function(step) {
                            return step.id;
                        }),
                        isWarehouseImporting: !0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(initializeModelingServiceSuccess, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        modelingServiceInitialized: !0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(ignoredFirstModelingServiceModelChanged, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        modelingServiceIgnoreModelChanged: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(getDatahubSchemaSuccess, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, datamartName = _a.datamartName, schema = _a.schema, datamartType = _a.datamartType, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, {
                datamartObjectId,
                datamartType,
                name: datamartName,
                datamartVersion: schema.datamartVersion
            }, state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService)), mergedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, datamartObjectId, schema));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        schemaLoadState: "LOADED"
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(getDatamartSchemaSuccess, schemaUpdatedAfterAddRemoveObject, function(state, _a) {
            var schema = _a.schema, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.datamarts.entities[datamartObjectId].warehouseMetadata), {
                datamartVersion: schema.datamartVersion
            }), state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService)), mergedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, datamartObjectId, schema));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        schemaLoadState: "LOADED",
                        hasLockTimeoutException: !1
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(syncSuccess, function(state, _a) {
            var schema = _a.schema, datamartObjectId = _a.datamartObjectId, filterCommand = _a.filterCommand, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.datamarts.entities[datamartObjectId].warehouseMetadata), {
                datamartVersion: schema.datamartVersion
            }), state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService, filterCommand)), mergedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, datamartObjectId, schema));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        isSyncRunning: !1
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(onSyncError, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return datamartObjectId ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        isSyncRunning: !1
                    }
                }, state.datamarts)
            }) : state;
        }), (0, ngrx_store.on)(autoRefreshingSchema, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        autoRefreshing: !0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onAutoRefreshSchemaError, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        autoRefreshing: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onAutoRefreshSchemaSuccess, function(state, _a) {
            var schema = _a.schema, datamartObjectId = _a.datamartObjectId, filterCommand = _a.filterCommand, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.datamarts.entities[datamartObjectId].warehouseMetadata), {
                datamartVersion: schema.datamartVersion
            }), state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService, filterCommand)), mergedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, datamartObjectId, schema));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        schemaLoadState: "LOADED",
                        autoRefreshing: !1,
                        hasLockTimeoutException: !1
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(syncMetadataFromRunQueryResponseSuccess, function(state, _a) {
            var schema = _a.schema, datamartObjectId = _a.datamartObjectId, filterCommand = _a.filterCommand, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.datamarts.entities[datamartObjectId].warehouseMetadata), {
                datamartVersion: schema.datamartVersion
            }), state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService, filterCommand)), mergedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, datamartObjectId, schema));
            return (0, tslib_es6.__assign)({}, mergedState);
        }), (0, ngrx_store.on)(onExplainQuery, function(state) {
            var selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: selectedQuery.urn,
                    changes: {
                        isExplainQueryRunning: !0,
                        isLLMChatExecuting: !0
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onFixQuery, function(state) {
            var selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: selectedQuery.urn,
                    changes: {
                        isFixRunning: !0,
                        isLLMChatExecuting: !0
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onExplainQuerySuccess, onFixQuerySuccess, onExplainQueryError, onFixQueryError, function(state, _a) {
            var query = state.queries.entities[urn_builder.X6.getQueryUrn(_a.queryId)];
            return query ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: query.urn,
                    changes: {
                        isExplainQueryRunning: !1,
                        isFixRunning: !1,
                        isLLMChatExecuting: !1
                    }
                }, state.queries)
            }) : state;
        }), (0, ngrx_store.on)(onEditorRunQuerySuccess, saveQueryAsViewSuccess, onCloneTableSuccess, function(state, _a) {
            return function(sqlResponse) {
                var _a, _b, _c, operationInfo = null === (_b = null === (_a = sqlResponse.userOperationsBatchResponse) || void 0 === _a ? void 0 : _a.operationInformation) || void 0 === _b ? void 0 : _b[0];
                if (operationInfo && isExecuteSqlProgressDetail(operationInfo)) return (null === (_c = operationInfo.progressDetail) || void 0 === _c ? void 0 : _c.results) && null != _.find(operationInfo.progressDetail.results, function(result) {
                    return "shouldRefresh" === result.resultType;
                });
            }(_a.sqlResponse) && state.datamartAutoRefresh ? (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.map(function(datamart) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, datamart), {
                        autoRefreshingFromQueryExecution: !0
                    });
                }, state.datamarts)
            }) : state;
        }), (0, ngrx_store.on)(syncMetadataFromRunQueryResponseNoop, syncMetadataFromRunQueryResponseSuccess, syncMetadataFromRunQueryResponseError, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        autoRefreshingFromQueryExecution: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(getDatamartSchemaError, function(state, _a) {
            var _b, datamartObjectId = _a.datamartObjectId, error = _a.error;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        schemaLoadState: "ERROR",
                        hasLockTimeoutException: "SqlLockTimeoutException" === (null === (_b = error.error) || void 0 === _b ? void 0 : _b.code)
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onSync, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.map(function(datamart) {
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, datamart), {
                        isSyncRunning: !0
                    });
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onAddWarehouseToFieldList, function(state, _a) {
            var loadingDatamartObjectId = _a.datamartObjectId, activeEditor = state.editors.entities[_a.editorId];
            return activeEditor.loadingWarehousesIds = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], activeEditor.loadingWarehousesIds, !0), [ loadingDatamartObjectId ], !1), 
            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.upsertOne(activeEditor, state.editors),
                datamarts: datamartsAdapter.upsertOne(createWarehouse(loadingDatamartObjectId, {
                    infoLoadState: "LOADING",
                    schemaLoadState: "LOADING"
                }), state.datamarts)
            });
        }), (0, ngrx_store.on)(removeWarehouseFromFieldList, function(state, _a) {
            var warehouse = _a.warehouse;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), removeKeysFromState(warehouse.objectId, state)), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        loadedWarehouseIds: state.editors.entities[state.activeEditorId].loadedWarehouseIds.filter(function(id) {
                            return id !== warehouse.objectId;
                        })
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(saveDatamart, function(state) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, datamartSteps = [ {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ValidatingMashup),
                step: UpdateStepType.ValidatingMashup,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.BuildingDataflow),
                step: UpdateStepType.BuildingDataflow,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.BuildingDataflowRelationships),
                step: UpdateStepType.BuildingDataflowRelationships,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.RequestingDatamartRefresh),
                step: UpdateStepType.RequestingDatamartRefresh,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ImportingData),
                step: UpdateStepType.ImportingData,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                step: UpdateStepType.WrappingUp,
                progress: UpdateStepProgressType.NotStarted
            } ];
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.setAll(datamartSteps, state.updatingDatamartStepsProgress),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        updatingDatamartStepsProgressIds: datamartSteps.map(function(step) {
                            return step.id;
                        })
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(trackingNewlyLoadedDatamartRefresh, function(state, _a) {
            var batchId = _a.batchId, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, datamartSteps = [ {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ImportingData),
                step: UpdateStepType.ImportingData,
                progress: UpdateStepProgressType.InProgress
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                step: UpdateStepType.WrappingUp,
                progress: UpdateStepProgressType.NotStarted
            } ];
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.setAll(datamartSteps, state.updatingDatamartStepsProgress),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        updatingDatamartStepsProgressIds: datamartSteps.map(function(step) {
                            return step.id;
                        }),
                        refreshingDatamartBatchId: batchId
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(saveIncrementalRefresh, function(state) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, datamartSteps = [ {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.UpdatingDataflow),
                step: UpdateStepType.UpdatingDataflow,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.RequestingDatamartRefresh),
                step: UpdateStepType.RequestingDatamartRefresh,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ImportingData),
                step: UpdateStepType.ImportingData,
                progress: UpdateStepProgressType.NotStarted
            }, {
                id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                step: UpdateStepType.WrappingUp,
                progress: UpdateStepProgressType.NotStarted
            } ];
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.setAll(datamartSteps, state.updatingDatamartStepsProgress),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        updatingDatamartStepsProgressIds: datamartSteps.map(function(step) {
                            return step.id;
                        })
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(trackingDatamartRefresh, function(state, _a) {
            var batchId = _a.batchId, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.updateOne({
                    id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ImportingData),
                    changes: {
                        progress: UpdateStepProgressType.InProgress
                    }
                }, state.updatingDatamartStepsProgress),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        refreshingDatamartBatchId: batchId
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(startingUpdateStep, function(state, _a) {
            var step = _a.step, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.updateOne({
                    id: getDatamartUpdateProgressKey(datamartObjectId, step),
                    changes: {
                        progress: UpdateStepProgressType.InProgress
                    }
                }, state.updatingDatamartStepsProgress)
            });
        }), (0, ngrx_store.on)(completedUpdateStep, function(state, _a) {
            var step = _a.step, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.updateOne({
                    id: getDatamartUpdateProgressKey(datamartObjectId, step),
                    changes: {
                        progress: UpdateStepProgressType.Complete
                    }
                }, state.updatingDatamartStepsProgress)
            });
        }), (0, ngrx_store.on)(pollImportDatawarehouseProgressSuccess, function(state, _a) {
            var response = _a.response, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, operationInfo = _.find(response.operationInformation, isImportOperationProgressDetail);
            if (!operationInfo || !operationInfo.progressDetail) return state;
            var totalObjectsForImport = operationInfo.progressDetail.totalDatabaseObjectsForImport, objectsImported = operationInfo.progressDetail.databaseObjectsImportedSuccessfully;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        isWarehouseImporting: !0,
                        importingWarehouseBatchId: response.batchId
                    }
                }, state.datamarts),
                updatingLoadingStepsProgress: updatingLoadingProgressStepsAdapter.updateMany([ {
                    id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.BuildingObjects),
                    changes: {
                        progress: objectsImported === totalObjectsForImport ? UpdateStepProgressType.Complete : UpdateStepProgressType.InProgress
                    }
                }, {
                    id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.PublishingSchema),
                    changes: {
                        progress: operationInfo.progressDetail.schemasPublished ? UpdateStepProgressType.Complete : objectsImported === totalObjectsForImport ? UpdateStepProgressType.InProgress : UpdateStepProgressType.NotStarted
                    }
                }, {
                    id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ImportingUserQueries),
                    changes: {
                        progress: operationInfo.progressDetail.userQueriesImported ? UpdateStepProgressType.Complete : operationInfo.progressDetail.schemasPublished ? UpdateStepProgressType.InProgress : UpdateStepProgressType.NotStarted
                    }
                }, {
                    id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                    changes: {
                        progress: objectsImported === totalObjectsForImport && operationInfo.progressDetail.schemasPublished && operationInfo.progressDetail.userQueriesImported ? UpdateStepProgressType.Complete : UpdateStepProgressType.NotStarted
                    }
                } ], state.updatingLoadingStepsProgress)
            });
        }), (0, ngrx_store.on)(pollLoadSampleProgressSuccess, function(state, _a) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, operationInfo = _.find(_a.response.operationInformation, isExecuteSqlProgressDetail);
            if (operationInfo && operationInfo.progressDetail.results) {
                var completedResults = _.filter(operationInfo.progressDetail.results, function(result) {
                    return "operationMessage" === result.resultType;
                });
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    updatingLoadingStepsProgress: updatingLoadingProgressStepsAdapter.updateMany([ {
                        id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.CreatingSampleTables),
                        changes: {
                            progress: completedResults.length > 1 ? UpdateStepProgressType.Complete : UpdateStepProgressType.InProgress
                        }
                    }, {
                        id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.CopyingSampleData),
                        changes: {
                            progress: completedResults.length > 2 ? UpdateStepProgressType.Complete : 2 === completedResults.length ? UpdateStepProgressType.InProgress : UpdateStepProgressType.NotStarted
                        }
                    }, {
                        id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.CreatingSampleViewsSprocs),
                        changes: {
                            progress: completedResults.length > 3 ? UpdateStepProgressType.Complete : 3 === completedResults.length ? UpdateStepProgressType.InProgress : UpdateStepProgressType.NotStarted
                        }
                    }, {
                        id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                        changes: {
                            progress: completedResults.length > 4 ? UpdateStepProgressType.Complete : 4 === completedResults.length ? UpdateStepProgressType.InProgress : UpdateStepProgressType.NotStarted
                        }
                    } ], state.updatingLoadingStepsProgress)
                });
            }
            return state;
        }), (0, ngrx_store.on)(pollDatamartRefreshSuccess, function(state, _a) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, operationInformation = _.find(_a.batchResponse.operationInformation, isRefreshDatamartOperationInfo);
            if (!operationInformation || !operationInformation.progressDetail) return state;
            var refreshedEntities = function(datamartObjectId, refreshDatamartProgressDetail) {
                var _a, refreshedEntities = null !== (_a = refreshDatamartProgressDetail.refreshedEntities) && void 0 !== _a ? _a : [];
                return refreshedEntities.forEach(function(entity) {
                    return entity.id = function(datamartObjectId, refreshedEntity) {
                        return datamartObjectId + "/" + refreshedEntity.entityName;
                    }(datamartObjectId, entity);
                }), refreshedEntities;
            }(datamartObjectId, operationInformation.progressDetail), isImportingData = null == refreshedEntities ? void 0 : refreshedEntities.find(function(entity) {
                return "notStarted" === entity.progressState || "inProgress" === entity.progressState;
            });
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                refreshedEntities: refreshedEntityAdapter.setAll(refreshedEntities, state.refreshedEntities),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        refreshedEntityIds: refreshedEntities.map(function(entity) {
                            return entity.id;
                        })
                    }
                }, state.datamarts),
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.updateMany([ {
                    id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.ImportingData),
                    changes: {
                        progress: isImportingData ? UpdateStepProgressType.InProgress : UpdateStepProgressType.Complete
                    }
                }, {
                    id: getDatamartUpdateProgressKey(datamartObjectId, UpdateStepType.WrappingUp),
                    changes: {
                        progress: isImportingData ? UpdateStepProgressType.NotStarted : UpdateStepProgressType.InProgress
                    }
                } ], state.updatingDatamartStepsProgress)
            });
        }), (0, ngrx_store.on)(saveDatamartSuccess, function(state, _a) {
            var schema = _a.schema, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.datamarts.entities[datamartObjectId].warehouseMetadata), {
                datamartVersion: schema.datamartVersion
            }), state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService)), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.getInitialState(),
                refreshedEntities: refreshedEntityAdapter.getInitialState()
            }), mergedState = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, datamartObjectId, schema));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        refreshedEntityIds: [],
                        updatingDatamartStepsProgressIds: [],
                        refreshingDatamartBatchId: void 0
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(saveDatamartError, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.getInitialState(),
                refreshedEntities: refreshedEntityAdapter.getInitialState(),
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        refreshedEntityIds: [],
                        updatingDatamartStepsProgressIds: [],
                        refreshingDatamartBatchId: void 0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(cancelDatamartRefreshSuccess, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.getInitialState(),
                refreshedEntities: refreshedEntityAdapter.getInitialState(),
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        refreshedEntityIds: [],
                        updatingDatamartStepsProgressIds: [],
                        refreshingDatamartBatchId: void 0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onImportWarehouseSuccess, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingLoadingStepsProgresss: updatingLoadingProgressStepsAdapter.getInitialState(),
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        updatingLoadingStepsProgressIds: [],
                        importingWarehouseBatchId: void 0,
                        isWarehouseImporting: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(cancelImportDatawarehouseSuccess, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingLoadingStepsProgresss: updatingLoadingProgressStepsAdapter.getInitialState(),
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        updatingLoadingStepsProgressIds: [],
                        importingWarehouseBatchId: void 0,
                        isWarehouseImporting: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(cancelDatamartRefreshError, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                updatingDatamartStepsProgress: updatingDatamartProgressStepsAdapter.getInitialState(),
                refreshedEntities: refreshedEntityAdapter.getInitialState(),
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        refreshedEntityIds: [],
                        updatingDatamartStepsProgressIds: [],
                        refreshingDatamartBatchId: void 0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(unhideAllItems, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                tables: tablesAdapter.updateMany(unhideAllTables(state), state.tables),
                columns: columnsAdapter.updateMany(unhideAllColumns(state), state.columns),
                measures: measuresAdapter.updateMany(unhideAllMeasures(state), state.measures)
            });
        }), (0, ngrx_store.on)(datamart_model_actions_setIsHidden, function(state, _a) {
            var target = function(state, urn, hidden) {
                return {
                    type: reducer_utils_findByUrn(state, urn).type,
                    update: {
                        id: urn,
                        changes: {
                            isHidden: hidden
                        }
                    }
                };
            }(state, _a.urn, _a.hidden);
            switch (target.type) {
              case "Table":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    tables: tablesAdapter.updateOne(target.update, state.tables)
                });

              case "Column":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    columns: columnsAdapter.updateOne(target.update, state.columns)
                });

              case "Measure":
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    measures: measuresAdapter.updateOne(target.update, state.measures)
                });
            }
        }), (0, ngrx_store.on)(setCopilotCapability, function(state, _a) {
            var isEnabled = _a.isCopilotEnabled;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                isCopilotEnabled: isEnabled
            });
        }), (0, ngrx_store.on)(getLeaseSuccess, function(state, _a) {
            var leaseExpiration = _a.leaseExpiration;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        leaseExpiration
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(extendLease, function(state, _a) {
            var extendTo = _a.extendTo;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        leaseExpiration: extendTo
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(exitDatamart, function(state) {
            var _a, _b;
            if (state.tridentMultitaskingDatamarts) {
                var selectedQuery = getQueryById(state.queries, null === (_a = state.editors.entities[state.activeEditorId]) || void 0 === _a ? void 0 : _a.selected.queryId), primaryDatamartObjectId = null === (_b = state.editors.entities[state.activeEditorId]) || void 0 === _b ? void 0 : _b.primaryDatamartObjectId;
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                    queries: selectedQuery ? queriesAdapter.updateOne({
                        id: selectedQuery.urn,
                        changes: {
                            isQueryExecuting: !1,
                            isResultGridVisible: !1
                        }
                    }, state.queries) : state.queries,
                    activeEditorId: void 0,
                    actionError: void 0,
                    datamarts: primaryDatamartObjectId ? datamartsAdapter.updateOne({
                        id: primaryDatamartObjectId,
                        changes: {
                            modelingServiceInitialized: !1
                        }
                    }, state.datamarts) : state.datamarts
                });
            }
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, initialState), {
                lakehouseModeling: state.lakehouseModeling,
                datamartModeling: state.datamartModeling,
                warehouseCrossDbQueries: state.warehouseCrossDbQueries,
                telemetryService: state.telemetryService,
                executeSqlAsyncFeatureSwitch: state.executeSqlAsyncFeatureSwitch,
                datamartAutoRefresh: state.datamartAutoRefresh,
                tridentMultitaskingDatamarts: state.tridentMultitaskingDatamarts
            });
        }), (0, ngrx_store.on)(saveViewAsRoles, function(state, _a) {
            var roles = _a.roles;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: state.editors.entities[state.activeEditorId].primaryDatamartObjectId,
                    changes: {
                        viewAsRoles: roles
                    }
                }, state.datamarts),
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        mwcTokenResponsePayload: void 0
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(createQuerySuccess, function(state, _a) {
            var queryInfo = _a.query, urn = urn_builder.X6.getQueryUrn(queryInfo.clientUniqueId), existingQuery = state.queries.entities[urn], datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.upsertOne((0, tslib_es6.__assign)({}, mapDatmartQueryInfo(datamartObjectId, queryInfo.clientUniqueId, queryInfo, existingQuery)), state.queries)
            });
        }), (0, ngrx_store.on)(updateQuery, function(state, _a) {
            var update = {
                id: urn_builder.X6.getQueryUrn(_a.query.clientUniqueId),
                changes: {
                    state: 1
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(updateQuerySuccess, function(state, _a) {
            var query = _a.query, update = {
                id: urn_builder.X6.getQueryUrn(query.clientUniqueId),
                changes: {
                    mExpression: query.mExpression,
                    sqlExpression: query.sqlExpression,
                    updatedAt: query.updatedAt,
                    state: 3,
                    isSaving: !1,
                    badge: 0
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(updateQuerySharedStatusSuccess, function(state, _a) {
            var query = _a.query, urn = urn_builder.X6.getQueryUrn(query.clientUniqueId);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: urn,
                    changes: {
                        isShared: query.isShared,
                        badge: 0,
                        updatedAt: query.updatedAt
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(renameQueryOnClientSide, function(state, _a) {
            var query = _a.query, urn = urn_builder.X6.getQueryUrn(query.clientUniqueId);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: urn,
                    changes: {
                        name: query.name
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(renameQuerySuccess, function(state, _a) {
            var query = _a.query, urn = urn_builder.X6.getQueryUrn(query.clientUniqueId);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: urn,
                    changes: {
                        name: query.queryName,
                        badge: 0,
                        updatedAt: query.updatedAt
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(renameQuery, function(state, _a) {
            var urn = urn_builder.X6.getQueryUrn(_a.query.clientUniqueId);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: urn,
                    changes: {
                        badge: 1
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(deleteQuerySuccess, function(state, _a) {
            var query = _a.query, _b = closeTab(state.activeEditorId, state, query.clientUniqueId), newSelectedId = _b.newSelectedId, tabs = _b.tabs;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, getSelectedItemChanges(newSelectedId)), {
                        tabs
                    })
                }, state.editors),
                queries: queriesAdapter.removeOne(urn_builder.X6.getQueryUrn(query.clientUniqueId), state.queries)
            });
        }), (0, ngrx_store.on)(getQueriesSuccess, function(state, _a) {
            var queriesInfo = _.map(_a.response, function(newQuery) {
                var oldQuery = _.find(state.queries.entities, function(query) {
                    return query.queryId === newQuery.queryId.toString();
                });
                return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, newQuery), {
                    clientUniqueId: _.isEmpty(oldQuery) ? generateClientUniqueId() : oldQuery.clientUniqueId,
                    isResultGridVisible: null == oldQuery ? void 0 : oldQuery.isResultGridVisible,
                    isQueryCanceled: null == oldQuery ? void 0 : oldQuery.isQueryCanceled,
                    isQueryExecuting: null == oldQuery ? void 0 : oldQuery.isQueryExecuting,
                    clientExecutionStartTime: null == oldQuery ? void 0 : oldQuery.clientExecutionStartTime,
                    startLineNumber: null == oldQuery ? void 0 : oldQuery.startLineNumber
                });
            }), newQueries = _.filter(state.queries.entities, function(query) {
                return 0 === query.state;
            }), datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, queries = queriesInfo.map(function(query) {
                return mapDatmartQueryInfo(datamartObjectId, query.clientUniqueId, query);
            }).concat(newQueries);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.setAll(queries, state.queries)
            });
        }), (0, ngrx_store.on)(queryViewInitialized, function(state) {
            if (!_.isEmpty(state.editors.entities[state.activeEditorId].tabs)) return state;
            var query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), 0);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: [ query.clientUniqueId ]
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(onAsyncQueryFinishedExecution, function(state, _a) {
            var query = state.queries.entities[urn_builder.X6.getQueryUrn(_a.queryId)];
            if (!query) return state;
            var updateSelectedQuery = {
                id: query.urn,
                changes: {
                    isQueryExecuting: !1
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(updateSelectedQuery, state.queries)
            });
        }), (0, ngrx_store.on)(onEditorRunQuerySuccess, function(state, _a) {
            var sqlResponse = _a.sqlResponse, queryId = _a.queryId, asyncExecution = _a.asyncExecution, query = state.queries.entities[urn_builder.X6.getQueryUrn(queryId)];
            if (!query) return state;
            var gridResults = [], messagePosition = 0, resultPosition = 0, messages = [];
            sqlResponse.sqlResults.forEach(function(queryResult) {
                var messageId = "".concat(queryId).concat(messagePosition);
                switch (queryResult.resultType) {
                  case "query":
                    gridResults.push({
                        id: queryId + resultPosition,
                        displayName: ++resultPosition,
                        queryResult
                    });
                    break;

                  case "statementCompletedMessage":
                    messages.push({
                        id: "".concat(messageId, "-0"),
                        recordsAffected: queryResult.recordsAffected
                    }), messagePosition++;
                    break;

                  case "queryDurationMessage":
                    query.sqlExecutionDuration = moment.utc(queryResult.durationMilliseconds).format("HH:mm:ss.SSS");
                    break;

                  case "errorMessage":
                    var errors;
                    errors = queryResult.sqlErrors ? queryResult.sqlErrors.map(function(msg, index) {
                        return {
                            id: "".concat(messageId, "-").concat(index),
                            message: msg
                        };
                    }) : [ {
                        id: messageId,
                        message: {
                            messageType: ExecuteSqlMessageType.error,
                            messageText: queryResult.exceptionMessage
                        }
                    } ], messages = (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], messages, !0), errors, !0), 
                    messagePosition++;
                    break;

                  case "infoMessage":
                    queryResult.sqlWarnings.forEach(function(message, i) {
                        messages.push({
                            id: "".concat(messageId, "-").concat(i),
                            message
                        });
                    }), messagePosition++;
                }
            });
            var clientExecutionStartTime = query.clientExecutionStartTime, clientExecutionEndTime = moment(), clientRunTime = moment.utc(clientExecutionEndTime.diff(moment(clientExecutionStartTime))).format("HH:mm:ss.SSS"), hasError = _.some(messages, function(msg) {
                var _a;
                return (null === (_a = msg.message) || void 0 === _a ? void 0 : _a.messageType) === ExecuteSqlMessageType.error;
            }), updateSelectedQuery = {
                id: query.urn,
                changes: {
                    hasResultError: hasError,
                    isQueryExecuting: asyncExecution,
                    selectedSqlGridResultId: gridResults.length ? queryId + "0" : void 0,
                    clientExecutionEndTime: clientExecutionEndTime.format(),
                    clientRunTime,
                    sqlExecutionDuration: query.sqlExecutionDuration,
                    sqlGridResultIds: gridResults.map(function(res) {
                        return res.id;
                    }),
                    sqlResultPaneSelectedView: hasError || !gridResults.length ? "messages" : "results",
                    sqlResultsPaneMessageIds: messages.map(function(msg) {
                        return msg.id;
                    }),
                    state: 0 === query.state ? 2 : query.state
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(updateSelectedQuery, state.queries),
                sqlGridResults: sqlGridResultAdapter.upsertMany(gridResults, state.sqlGridResults),
                sqlMessages: messagesAdapter.setMany(messages, state.sqlMessages)
            });
        }), (0, ngrx_store.on)(datamart_tabs_actions_onQueryTabAdded, onQueryTabAdded, function(state, _a) {
            var queryType = _a.queryType, shared = _a.shared, selectedQuery = null, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            state.editors.entities[state.activeEditorId].selected.queryId && 0 === (selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId)).type && selectedQuery.editorContext.saveViewState(), 
            void 0 === queryType && (queryType = selectedQuery ? selectedQuery.type : 1 === state.datamarts.entities[datamartObjectId].warehouseMetadata.datamartType ? 1 : 0);
            var query = createNewQuery(datamartObjectId, unique_name_generator_UniqueNameGenerator.getUniqueName(0 === queryType ? "SQL query 1" : "Visual query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), queryType, shared);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(onSavedQueryOpened, saveVisualQueryTransformation, function(state, _a) {
            var id = _a.queryId, query = getQueryById(state.queries, id), existingTab = state.editors.entities[state.activeEditorId].tabs.indexOf(id) >= 0;
            return state.editors.entities[state.activeEditorId].selected.queryId && 0 === getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).type ? state.queries.entities[urn_builder.X6.getQueryUrn(state.editors.entities[state.activeEditorId].selected.queryId)].editorContext.saveViewState() : query.editingMExpression = query.mExpression, 
            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: existingTab ? state.editors.entities[state.activeEditorId].tabs : (0, tslib_es6.__spreadArray)((0, 
                        tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ id ], !1)
                    }, getSelectedItemChanges(id))
                }, state.editors),
                queries: queriesAdapter.upsertOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(saveVisualQueryTransformation, function(state, _a) {
            var schema = _a.queryInfo.schema, columns = _.map(null == schema ? void 0 : schema.columns, function(column) {
                return {
                    name: column.name,
                    dataType: column.type
                };
            });
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                    changes: {
                        isQueryExecuting: !1,
                        columns: _.isEmpty(schema) ? void 0 : columns
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onPreviewData, function(state, _a) {
            var editorId = _a.editorId, sql = _a.sql, stateChanges = {
                isExecuting: !0,
                clientExecutionStartTime: moment().format(),
                sql
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: editorId,
                    changes: {
                        dataExplorer: stateChanges
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(onPreviewDataSuccess, function(state, _a) {
            var editorId = _a.editorId, sqlResult = _a.queryResult, clientExecutionStartTime = state.editors.entities[editorId].dataExplorer.clientExecutionStartTime, clientExecutionEndTime = moment(), clientRunTime = moment.utc(clientExecutionEndTime.diff(moment(clientExecutionStartTime))).format("HH:mm:ss.SSS");
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: editorId,
                    changes: {
                        dataExplorer: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.editors.entities[editorId].dataExplorer), {
                            isExecuting: !1,
                            clientExecutionStartTime,
                            clientExecutionEndTime: clientExecutionEndTime.format(),
                            clientRunTime,
                            sqlGridResult: sqlResult
                        })
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(selectTopRows, function(state, _a) {
            var columns, item, urn = _a.urn, name = _a.name, itemType = _a.itemType, query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), 0);
            return "Table" === itemType ? item = state.tables.entities[urn] : "View" === itemType && (item = state.views.entities[urn]), 
            columns = item && _.map(Array.from(item.columns.values()), function(columnId) {
                return state.columns.entities[columnId].name;
            }), query.sqlExpression = function(warehouseName, schemaName, name, datamartType, columns, limit) {
                return void 0 === limit && (limit = 100), ((null == columns ? void 0 : columns.length) ? columns.reduce(function(pre, curr, curIndex) {
                    return 0 === curIndex ? pre + " [".concat(curr, "]") : "".concat(pre, "\n            ,[").concat(curr, "]");
                }, "SELECT TOP (".concat(limit, ")")) : "SELECT TOP (".concat(limit, ") *")) + (1 === datamartType ? "\nFROM [".concat(constants_getEncodedName(schemaName), "].[").concat(constants_getEncodedName(name), "]") : "\nFROM [".concat(constants_getEncodedName(warehouseName), "].[").concat(constants_getEncodedName(schemaName), "].[").concat(constants_getEncodedName(name), "]"));
            }(item.warehouseName, item.schemaName, name, state.datamarts.entities[item.warehouseId].warehouseMetadata.datamartType, columns), 
            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(createDefaultTable, onCreateDefaultTableTemplate, function(state, _a) {
            var schemaObjectContainer = _a.schemaObjectContainer, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, query = createNewQuery(datamartObjectId, unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), 0), tableName = unique_name_generator_UniqueNameGenerator.getUniqueName("table1", _.map(state.tables.entities, function(t) {
                return t.name;
            }));
            return query.sqlExpression = function(warehouseName, schemaName, tableName) {
                return "CREATE TABLE [".concat(warehouseName, "].[").concat(schemaName, "].[").concat(tableName, "]\n") + "(\n   col1 int NOT NULL\n)\nGO";
            }(schemaObjectContainer ? schemaObjectContainer.warehouseMetadata.name : state.datamarts.entities[datamartObjectId].warehouseMetadata.name, schemaObjectContainer ? schemaObjectContainer.schemaName : "dbo", tableName), 
            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(createDefaultView, onCreateDefaultViewTemplate, function(state, _a) {
            var schemaObjectContainer = _a.schemaObjectContainer, query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), 0), viewName = unique_name_generator_UniqueNameGenerator.getUniqueName("view1", _.map(state.views.entities, function(v) {
                return v.name;
            }));
            return query.sqlExpression = function(schemaName, viewName) {
                return "CREATE VIEW [".concat(schemaName, "].[").concat(viewName, "]\n") + "AS SELECT *\nFROM [SomeTableOrView]\n";
            }(schemaObjectContainer ? schemaObjectContainer.schemaName : "dbo", viewName), (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(createDefaultStoredProc, onCreateDefaultStoredProcedureTemplate, function(state, _a) {
            var schemaObjectContainer = _a.schemaObjectContainer, query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), 0), storedProcName = unique_name_generator_UniqueNameGenerator.getUniqueName("storedproc1", _.map(state.storedProcedures.entities, function(s) {
                return s.name;
            }));
            return query.sqlExpression = function(schemaName, storedProcName) {
                return "CREATE PROC [".concat(schemaName, "].[").concat(storedProcName, "]\n") + "@param1 int,\n@param2 int\nAS\nBEGIN\nSELECT @param1, @param2\nEND\n";
            }(schemaObjectContainer ? schemaObjectContainer.schemaName : "dbo", storedProcName), 
            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(createDefaultFunction, function(state, _a) {
            var schemaObjectContainer = _a.schemaObjectContainer, query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), 0), functionName = unique_name_generator_UniqueNameGenerator.getUniqueName("function1", _.map(state.userDefinedFunctions.entities, function(f) {
                return f.name;
            }));
            return query.sqlExpression = function(schemaName, functionName) {
                return "CREATE FUNCTION [".concat(schemaName, "].[").concat(functionName, "] (@param1 int)\n") + "RETURNS int\nAS\nBEGIN\n\tDECLARE @MyValueOut int;\n\tSET @MyValueOut = @param1\n\tRETURN(@MyValueOut)\nEND\nGO\n";
            }(schemaObjectContainer ? schemaObjectContainer.schemaName : "dbo", functionName), 
            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(createDefaultSchema, onCreateDefaultSchemaTemplate, function(state) {
            var queryName = unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, queryName, 0), schemaName = unique_name_generator_UniqueNameGenerator.getUniqueName("schema1", _.map(state.schemas.entities, function(s) {
                return s.name;
            }));
            return query.sqlExpression = function(schemaName) {
                return "CREATE SCHEMA [".concat(schemaName, "]\n") + "GO";
            }(schemaName), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(onCtasTable, function(state, _a) {
            var table = _a.table, queryName = unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, queryName, 0), newTableName = unique_name_generator_UniqueNameGenerator.getUniqueName("table1", _.map(state.tables.entities, function(t) {
                return t.name;
            }));
            return query.sqlExpression = "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\n" + function(warehouseName, schemaName, newTableName, tableName) {
                return "CREATE TABLE [".concat(warehouseName, "].[").concat(schemaName, "].[").concat(newTableName, "]\n") + "AS\nSELECT *\n" + "FROM [".concat(warehouseName, "].[").concat(schemaName, "].[").concat(tableName, "]\n") + "GO\n";
            }(table.warehouseName, table.schemaName, newTableName, table.name), (0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(newSqlScript, function(state, _a) {
            var sqlStatement = _a.sqlStatement, datamartModelObject = _a.datamartModelObject, queryName = unique_name_generator_UniqueNameGenerator.getUniqueName("SQL query 1", _.map(state.queries.entities, function(q) {
                return q.name;
            })), query = createNewQuery(state.editors.entities[state.activeEditorId].primaryDatamartObjectId, queryName, 0);
            return query.sqlExpression = sqlStatement, (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, updateGeneratingSqlScriptStatus(state, datamartModelObject, !1)), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].tabs, !0), [ query.clientUniqueId ], !1)
                    }, getSelectedItemChanges(query.clientUniqueId))
                }, state.editors),
                queries: queriesAdapter.addOne(query, state.queries)
            });
        }), (0, ngrx_store.on)(onSavedQueryOpenRefreshed, function(state, _a) {
            var savedQueryId = _a.savedQueryId, query = _.find(state.queries.entities, function(query) {
                return query.queryId === savedQueryId.toString();
            }), newQuery = _.clone(query);
            newQuery.clientUniqueId = generateClientUniqueId(), newQuery.urn = urn_builder.X6.getQueryUrn(newQuery.clientUniqueId);
            var newQueryState = queriesAdapter.removeOne(query.urn, state.queries), tabs = state.editors.entities[state.activeEditorId].tabs;
            tabs.splice(state.editors.entities[state.activeEditorId].tabs.indexOf(query.clientUniqueId), 1, newQuery.clientUniqueId);
            var queries = queriesAdapter.addOne(newQuery, newQueryState);
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs
                    }, getSelectedItemChanges(newQuery.clientUniqueId, (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                        queries
                    })))
                }, state.editors),
                queries
            });
        }), (0, ngrx_store.on)(onQueryTabClosed, function(state, _a) {
            var featureSwitches = _a.featureSwitches, query = getQueryById(state.queries, _a.queryId), _b = closeTab(state.activeEditorId, state, query.clientUniqueId), newSelectedId = _b.newSelectedId, tabs = _b.tabs;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({
                        tabs
                    }, getSelectedItemChanges(newSelectedId))
                }, state.editors),
                queries: 0 === (null == query ? void 0 : query.state) ? queriesAdapter.removeOne(query.urn, state.queries) : featureSwitches.datamartSql ? state.queries : queriesAdapter.updateOne({
                    id: query.urn,
                    changes: {
                        isResultGridVisible: !1,
                        isQueryExecuting: !1
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onSelectedTabChanged, function(state, _a) {
            var _b, _c, queryChanges, queryId = _a.queryId, newSelectedQuery = getQueryById(state.queries, queryId), selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId);
            return queryId !== state.editors.entities[state.activeEditorId].selected.queryId && 0 === selectedQuery.type && (null === (_b = selectedQuery.editorContext) || void 0 === _b || _b.saveViewState(), 
            queryChanges = {
                isResultGridVisible: newSelectedQuery.isQueryCanceled ? null !== (_c = state.executeSqlAsyncFeatureSwitch) && void 0 !== _c && _c : newSelectedQuery.isResultGridVisible
            }), (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: newSelectedQuery.urn,
                    changes: queryChanges
                }, state.queries),
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: (0, tslib_es6.__assign)({}, getSelectedItemChanges(queryId))
                }, state.editors)
            });
        }), (0, ngrx_store.on)(selectedSqlQueryTabEditorActivated, function(state, _a) {
            var newContext = _a.selectedContext, update = {
                id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                changes: {
                    editorContext: newContext
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(selectedSqlQueryTabPaneHeightChanged, function(state, _a) {
            var newPaneHeight = _a.selectedPaneHeight, update = {
                id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                changes: {
                    resultGridHeight: newPaneHeight
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(selectedSqlQueryTabPaneMaximized, function(state, _a) {
            var isBottomPaneMaximized = _a.isBottomPaneMaximized, update = {
                id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                changes: {
                    isBottomPaneMaximized
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(selectedSqlQueryResultPaneTabViewChanged, function(state, _a) {
            var view = _a.view;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                    changes: {
                        sqlResultPaneSelectedView: view
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(runSqlScript, function(state, _a) {
            var sql = _a.sql, startLineNumber = _a.startLineNumber, lastRunId = state.editors.entities[state.activeEditorId].selected.queryId + "_" + state.editors.entities[state.activeEditorId].sqlRunId, incrementRunId = ++state.editors.entities[state.activeEditorId].sqlRunId, selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId), stateChanges = {
                lastSqlRunId: lastRunId,
                isResultGridVisible: !0,
                lastSql: sql,
                clientExecutionStartTime: moment().format(),
                isQueryExecuting: !0,
                isQueryCanceled: !1,
                sqlResultPaneSelectedView: "messages",
                startLineNumber
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                sqlMessages: messagesAdapter.removeMany(selectedQuery.sqlResultsPaneMessageIds, state.sqlMessages),
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        sqlRunId: incrementRunId
                    }
                }, state.editors),
                sqlGridResults: sqlGridResultAdapter.removeMany(selectedQuery.sqlGridResultIds, state.sqlGridResults),
                queries: queriesAdapter.updateOne({
                    id: selectedQuery.urn,
                    changes: stateChanges
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onSqlResultSelected, function(state, _a) {
            var id = _a.id, selectedQuery = state.editors.entities[state.activeEditorId].selected.queryId && state.queries.entities[urn_builder.X6.getQueryUrn(state.editors.entities[state.activeEditorId].selected.queryId)];
            return _.isEmpty(selectedQuery) ? state : (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                    changes: {
                        selectedSqlGridResultId: id
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(sqlQueryMashupEvaluationStarted, function(state) {
            var selectedQuery = state.editors.entities[state.activeEditorId].selected.queryId && state.queries.entities[urn_builder.X6.getQueryUrn(state.editors.entities[state.activeEditorId].selected.queryId)];
            return _.isEmpty(selectedQuery) || 1 === selectedQuery.type || !selectedQuery.isResultGridVisible ? state : (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                    changes: {
                        isQueryExecuting: !0,
                        isQueryCanceled: !1
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(sqlQueryMashupEvaluationEnded, function(state, _a) {
            var queryInfo = _a.queryInfo, selectedQuery = state.editors.entities[state.activeEditorId].selected.queryId && state.queries.entities[urn_builder.X6.getQueryUrn(state.editors.entities[state.activeEditorId].selected.queryId)], schema = queryInfo.schema;
            if (_.isEmpty(selectedQuery) || 1 === selectedQuery.type || !selectedQuery.isResultGridVisible) return state;
            var columns = _.map(null == schema ? void 0 : schema.columns, function(column) {
                return {
                    name: column.name,
                    dataType: column.type
                };
            });
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId).urn,
                    changes: {
                        isQueryExecuting: !1,
                        columns: _.isEmpty(schema) ? void 0 : columns
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onEditorRunQueryError, function(state, _a) {
            var query = state.queries.entities[urn_builder.X6.getQueryUrn(_a.queryId)];
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                sqlMessages: messagesAdapter.removeAll(state.sqlMessages),
                queries: queriesAdapter.updateOne({
                    id: query.urn,
                    changes: {
                        hasResultError: !0,
                        isQueryExecuting: !1,
                        clientRunTime: moment.utc(moment().diff(moment(query.clientExecutionStartTime))).format("HH:mm:ss.SSS"),
                        isQueryCanceled: !1
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onPreviewDataQueryError, onPreviewDataError, function(state, _a) {
            var editorId = _a.editorId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: editorId,
                    changes: {
                        dataExplorer: {
                            isExecuting: !1,
                            hasResultError: !0
                        }
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(onQueryCanceled, onCancelQueryError, function(state, _a) {
            var queryId = _a.queryId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                sqlMessages: messagesAdapter.removeAll(state.sqlMessages),
                queries: queriesAdapter.updateOne({
                    id: getQueryById(state.queries, queryId).urn,
                    changes: {
                        isQueryExecuting: !1,
                        isQueryCanceled: !0,
                        sqlResultPaneSelectedView: "messages"
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(onQueryBatchDispatched, function(state, _a) {
            var batchId = _a.batchId, queryId = _a.queryId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: getQueryById(state.queries, queryId).urn,
                    changes: {
                        batchId
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(selectedVisualQueryTabContentChanged, saveVisualQueryTransformation, function(state, _a) {
            var mExpression = _a.mExpression, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            if (_.isEmpty(_.trim(mExpression)) || state.datamarts.entities[datamartObjectId].isReadonly) return state;
            var selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId), queryState = getMashupDocument(selectedQuery.mExpression) === getMashupDocument(mExpression) ? selectedQuery.state : 2, update = {
                id: selectedQuery.urn,
                changes: {
                    state: queryState,
                    editingMExpression: mExpression,
                    badge: 2 === queryState ? 1 : 0
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(selectedSqlQueryTabContentChanged, function(state, _a) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            if (_.isEmpty(_a.model) || state.datamarts.entities[datamartObjectId].isReadonly) return state;
            var selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId), sqlExpression = selectedQuery.editorContext.getContent();
            if (_.isEmpty(_.trim(sqlExpression)) || sqlExpression === selectedQuery.sqlExpression) return state;
            var update = {
                id: selectedQuery.urn,
                changes: {
                    state: 2,
                    badge: 1
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(queryMashupValidated, function(state, _a) {
            var queryInfo = _a.queryInfo, selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId), schema = queryInfo.schema;
            if (_.isEmpty(schema)) return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: selectedQuery.urn,
                    changes: {
                        columns: void 0
                    }
                }, state.queries)
            });
            var columns = _.map(schema.columns, function(column) {
                return {
                    name: column.name,
                    dataType: column.type
                };
            }), update = {
                id: selectedQuery.urn,
                changes: {
                    columns
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(onQueryHttpCall, function(state, _a) {
            var query = _a.query;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne({
                    id: urn_builder.X6.getQueryUrn(query.clientUniqueId),
                    changes: {
                        isSaving: !0,
                        badge: 1
                    }
                }, state.queries)
            });
        }), (0, ngrx_store.on)(pqoTableDragAndDrop, function(state, _a) {
            var tableName = _a.tableName, selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId);
            if (!selectedQuery || selectedQuery.mExpression) return state;
            var update = {
                id: urn_builder.X6.getQueryUrn(state.editors.entities[state.activeEditorId].selected.queryId),
                changes: {
                    firstTable: tableName
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(tableDragAndDrop, function(state, _a) {
            var _b, _c, urn = _a.urn, selectedQuery = getQueryById(state.queries, state.editors.entities[state.activeEditorId].selected.queryId);
            if (!selectedQuery || selectedQuery.mExpression) return state;
            var firstTableOrView = null !== (_c = null === (_b = state.tables.entities[urn]) || void 0 === _b ? void 0 : _b.name) && void 0 !== _c ? _c : state.views.entities[urn].name, update = {
                id: urn_builder.X6.getQueryUrn(state.editors.entities[state.activeEditorId].selected.queryId),
                changes: {
                    firstTable: firstTableOrView
                }
            };
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queries: queriesAdapter.updateOne(update, state.queries)
            });
        }), (0, ngrx_store.on)(datamartEffectsLoaded, function(state, _a) {
            var featureSwitches = _a.featureSwitches, telemetryService = _a.telemetryService;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                lakehouseModeling: featureSwitches.lakehouseModeling && commonGlobals.isTrident,
                tridentMultitaskingDatamarts: featureSwitches.tridentMultitaskingDatamarts && featureSwitches.tridentMultitasking,
                datamartModeling: featureSwitches.datamartModeling,
                warehouseCrossDbQueries: featureSwitches.warehouseCrossDbQueries,
                executeSqlAsyncFeatureSwitch: featureSwitches.executeSqlAsync,
                datamartAutoRefresh: featureSwitches.datamartAutoRefresh,
                telemetryService
            });
        }), (0, ngrx_store.on)(openDatahubSidepane, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId, editor = state.editors.entities[datamartObjectId];
            editor || (editor = createEditor(datamartObjectId));
            var datamart = state.datamarts.entities[datamartObjectId];
            return datamart || (datamart = createWarehouse(datamartObjectId)), datamart.fromDatahub = !0, 
            (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.upsertOne(datamart, state.datamarts),
                editors: editorAdapter.upsertOne(editor, state.editors),
                activeEditorId: datamartObjectId
            });
        }), (0, ngrx_store.on)(addWarehouseToFieldListSuccess, function(state, _a) {
            var editorId = _a.editorId, schema = _a.schema, warehouseMetadata = _a.warehouseMetadata, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, warehouseMetadata, !1, state.telemetryService)), {
                editors: editorAdapter.updateOne({
                    id: editorId,
                    changes: {
                        loadingWarehousesIds: state.editors.entities[state.activeEditorId].loadingWarehousesIds.filter(function(warehouseId) {
                            return warehouseId !== warehouseMetadata.datamartObjectId;
                        }),
                        loadedWarehouseIds: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.editors.entities[state.activeEditorId].loadedWarehouseIds, !0), [ warehouseMetadata.datamartObjectId ], !1)
                    }
                }, state.editors)
            }), mergedState = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, warehouseMetadata.datamartObjectId, schema));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: warehouseMetadata.datamartObjectId,
                    changes: {
                        name: warehouseMetadata.name,
                        urn: warehouseMetadata.name,
                        warehouseMetadata,
                        infoLoadState: "LOADED",
                        schemaLoadState: "LOADED",
                        hasLockTimeoutException: !1
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(getSchemaForSearch, function(state, _a) {
            var warehouse = _a.warehouse;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: warehouse.objectId,
                    changes: {
                        loadingForSearch: !0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(getSchemaForSearchSuccess, function(state, _a) {
            var schema = _a.schema, datamartObjectId = _a.datamartObjectId, containersToLoad = _a.containersToLoad, filterCommand = _a.filterCommand, updatedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), getStateFromModelNoQueries(schema, state, (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.datamarts.entities[datamartObjectId].warehouseMetadata), {
                datamartVersion: schema.datamartVersion
            }), state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService, filterCommand, containersToLoad)), mergedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, updatedState), updateEtlXmlState(updatedState, datamartObjectId, schema));
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        loadingForSearch: !1,
                        schemaLoadState: "LOADED",
                        hasLockTimeoutException: !1
                    }
                }, mergedState.datamarts)
            });
        }), (0, ngrx_store.on)(getSchemaForSearchError, function(state, _a) {
            var datamartObjectId = _a.datamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        loadingForSearch: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onTryToLoadIncrementally, function(state, _a) {
            var datamartModelObject = _a.datamartModelObject, schemaObjectContainers = isSchemaObjectContainer(datamartModelObject) ? schemaObjectContainersAdapter.updateOne({
                id: datamartModelObject.urn,
                changes: {
                    loadingForIncrementalLoad: !0
                }
            }, state.schemaObjectContainers) : state.schemaObjectContainers, databaseRoleContainers = isDatabaseRoleContainer(datamartModelObject) ? databaseRoleContainersAdapter.updateOne({
                id: datamartModelObject.urn,
                changes: {
                    loadingForIncrementalLoad: !0
                }
            }, state.databaseRoleContainers) : state.databaseRoleContainers;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                schemaObjectContainers,
                databaseRoleContainers
            });
        }), (0, ngrx_store.on)(onObjectRefresh, function(state, _a) {
            return updateStateWithObjectContainerRefreshingStatus(state, _a.datamartModelObject, !0);
        }), (0, ngrx_store.on)(onObjectRefreshError, function(state, _a) {
            return updateStateWithObjectContainerRefreshingStatus(state, _a.datamartModelObject, !1);
        }), (0, ngrx_store.on)(onLoadSchemaSuccess, function(state, _a) {
            var datamartModelObject = _a.datamartModelObject, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId, updatedState = updateStateWithIncrementalLoad(_a.schema, state, datamartModelObject, state.datamarts.entities[datamartObjectId].fromDatahub, state.telemetryService, _a.filterCommand), mergedState = (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), updatedState), schemaObjectContainers = isSchemaObjectContainer(datamartModelObject) ? schemaObjectContainersAdapter.updateOne({
                id: datamartModelObject.urn,
                changes: {
                    loadingForIncrementalLoad: !1
                }
            }, mergedState.schemaObjectContainers) : mergedState.schemaObjectContainers, databaseRoleContainers = isDatabaseRoleContainer(datamartModelObject) ? databaseRoleContainersAdapter.updateOne({
                id: datamartModelObject.urn,
                changes: {
                    loadingForIncrementalLoad: !1
                }
            }, mergedState.databaseRoleContainers) : mergedState.databaseRoleContainers;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, mergedState), {
                schemaObjectContainers,
                databaseRoleContainers,
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        schemaLoadState: "LOADED",
                        hasLockTimeoutException: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onObjectRefreshSuccess, function(state, _a) {
            var schema = _a.schema, datamartModelObject = _a.datamartModelObject, filterCommand = _a.filterCommand, fromDatahub = state.datamarts.entities[datamartModelObject.warehouseMetadata.datamartObjectId].fromDatahub, updatedState = isSchemaObjectContainer(datamartModelObject) ? updateStateWithIncrementalLoad(schema, state, datamartModelObject, fromDatahub, state.telemetryService, filterCommand) : getStateFromModelNoQueries(schema, state, (0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, datamartModelObject.warehouseMetadata), {
                datamartVersion: schema.datamartVersion
            }), state.datamarts.entities[datamartModelObject.warehouseMetadata.datamartObjectId].fromDatahub, state.telemetryService, filterCommand);
            return updateStateWithObjectContainerRefreshingStatus((0, tslib_es6.__assign)((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), updatedState), updateEtlXmlState((0, 
            tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), updatedState), datamartModelObject.warehouseMetadata.datamartObjectId, schema)), datamartModelObject, !1);
        }), (0, ngrx_store.on)(onLoadSchemaError, function(state, _a) {
            var datamartModelObject = _a.datamartModelObject, schemaObjectContainers = isSchemaObjectContainer(datamartModelObject) ? schemaObjectContainersAdapter.updateOne({
                id: datamartModelObject.urn,
                changes: {
                    loadingForIncrementalLoad: !1
                }
            }, state.schemaObjectContainers) : state.schemaObjectContainers, databaseRoleContainers = isDatabaseRoleContainer(datamartModelObject) ? databaseRoleContainersAdapter.updateOne({
                id: datamartModelObject.urn,
                changes: {
                    loadingForIncrementalLoad: !1
                }
            }, state.databaseRoleContainers) : state.databaseRoleContainers;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                schemaObjectContainers,
                databaseRoleContainers
            });
        }), (0, ngrx_store.on)(datamart_model_actions_select, function(state, _a) {
            var item = _a.item, clearPreviousSelection = _a.clearPreviousSelection;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        selected: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.editors.entities[state.activeEditorId].selected), {
                            items: datamart_model_reducers_selectAll(state.activeEditorId, [ item ], clearPreviousSelection, state)
                        })
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(selectAll, function(state, _a) {
            var items = _a.items, clearPreviousSelection = _a.clearPreviousSelection;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        selected: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.editors.entities[state.activeEditorId].selected), {
                            items: datamart_model_reducers_selectAll(state.activeEditorId, items, clearPreviousSelection, state)
                        })
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(deselect, function(state, _a) {
            var item = _a.item;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        selected: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.editors.entities[state.activeEditorId].selected), {
                            items: datamart_model_reducers_deselect(state.activeEditorId, item, state)
                        })
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(suspendNotification, function(state) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        notificationSuspended: !0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(resumeNotification, function(state) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        notificationSuspended: !1
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(clearSelections, function(state) {
            var datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        selected: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.editors.entities[state.activeEditorId].selected), {
                            items: new Set
                        })
                    }
                }, state.editors),
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        notificationSuspended: void 0
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(setReadOnlyMode, function(state, _a) {
            var isReadonly = _a.isReadonly, datamartObjectId = state.editors.entities[state.activeEditorId].primaryDatamartObjectId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                datamarts: datamartsAdapter.updateOne({
                    id: datamartObjectId,
                    changes: {
                        isReadonly
                    }
                }, state.datamarts)
            });
        }), (0, ngrx_store.on)(onActionError, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                actionError: !0
            });
        }), (0, ngrx_store.on)(onSqlCreateScript, onSqlDropCreateScript, onSqlAlterScript, function(state, _a) {
            return updateGeneratingSqlScriptStatus(state, _a.item, !0);
        }), (0, ngrx_store.on)(onGenerateSqlScriptError, function(state, _a) {
            return updateGeneratingSqlScriptStatus(state, _a.datamartModelObject, !1);
        }), (0, ngrx_store.on)(onOneLakeFilepathSuccess, function(state, _a) {
            var oneLakeUrl = _a.oneLakeUrl;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        oneLakeUrl
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(onObjectFilterToggle, function(state, _a) {
            var _b, objectType = _a.objectType;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        fieldListFilters: (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state.editors.entities[state.activeEditorId].fieldListFilters), (_b = {}, 
                        _b[objectType] = !state.editors.entities[state.activeEditorId].fieldListFilters[objectType], 
                        _b))
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(onObjectFilterClearAll, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        fieldListFilters: void 0
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(fetchMwcTokenSuccess, function(state, _a) {
            var mwcTokenResponsePayload = _a.mwcTokenResponsePayload;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        mwcTokenResponsePayload
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(requestWithTokenReturnedWith404, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                editors: editorAdapter.updateOne({
                    id: state.activeEditorId,
                    changes: {
                        mwcTokenResponsePayload: void 0
                    }
                }, state.editors)
            });
        }), (0, ngrx_store.on)(activateCopilot, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                isCopilotActive: !0
            });
        }), (0, ngrx_store.on)(deactivateCopilot, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                isCopilotActive: !1
            });
        }), (0, ngrx_store.on)(toggleCopilot, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                isCopilotActive: !state.isCopilotActive
            });
        }));
        var datamart_mashup_editor_reducers_commonGlobals = window;
        (0, ngrx_store.Lq)({
            visible: !1,
            mashupEditorDialog: void 0,
            locale: void 0,
            accessToken: datamart_mashup_editor_reducers_commonGlobals.powerBIAccessToken,
            blockEditorInteraction: !1
        }, (0, ngrx_store.on)(hideMashupDialog, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                visible: !1
            });
        }), (0, ngrx_store.on)(setMashupEditorDialog, setVisualQueryMashupEditorDialog, function(state, _a) {
            var mashupEditorDialog = _a.mashupEditorDialog;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                mashupEditorDialog
            });
        }), (0, ngrx_store.on)(effectsInitialized, function(state, _a) {
            var locale = _a.locale;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                locale
            });
        }), (0, ngrx_store.on)(accessTokenAboutToExpire, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                accessToken: datamart_mashup_editor_reducers_commonGlobals.powerBIAccessToken
            });
        }), (0, ngrx_store.on)(noViewAsRolesAreSelected, function(state, _a) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                mwcToken: void 0
            });
        }), (0, ngrx_store.on)(viewSqlFromVisualQuery, transformDataFromVisualDesigner, pqoTableDragAndDrop, tableDragAndDrop, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                blockEditorInteraction: !0
            });
        }), (0, ngrx_store.on)(setVisualQueryMashupEditorDialog, addQueryCompleted, leaveDesignContentSqlView, mashupEditorReady, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                blockEditorInteraction: !1
            });
        }));
        var QueryStatus = function(QueryStatus) {
            return QueryStatus[QueryStatus.None = 0] = "None", QueryStatus[QueryStatus.Unsaved = 1] = "Unsaved", 
            QueryStatus[QueryStatus.Saved = 2] = "Saved", QueryStatus;
        }({}), datamart_query_editor_reducers_initialState = {
            queryName: void 0,
            sourceTable: void 0,
            status: QueryStatus.None,
            queryScript: void 0,
            transientModelMap: void 0,
            persistedModels: [],
            autoCompletionRequestInFlight: !1
        };
        (0, ngrx_store.Lq)(datamart_query_editor_reducers_initialState, (0, ngrx_store.on)(initQuery, function(state, _a) {
            var tableName = _a.tableName;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queryName: "Query_".concat(tableName),
                sourceTable: tableName,
                status: QueryStatus.Unsaved
            });
        }), (0, ngrx_store.on)(setName, function(state, _a) {
            var name = _a.name;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queryName: name
            });
        }), (0, ngrx_store.on)(save, function(state, _a) {
            var queryScript = _a.queryScript;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                queryScript
            });
        }), (0, ngrx_store.on)(querySaved, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                status: QueryStatus.Saved
            });
        }), (0, ngrx_store.on)(discard, function() {
            return datamart_query_editor_reducers_initialState;
        }), (0, ngrx_store.on)(generatedTransientModel, function(state, _a) {
            var transientModels = _a.transientModels;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                transientModelMap: transientModels
            });
        }), (0, ngrx_store.on)(saveReportSuccess, function(state, _a) {
            var modelObjectId = _a.modelObjectId;
            return state.persistedModels.find(function(m) {
                return m === modelObjectId;
            }) ? (0, tslib_es6.__assign)({}, state) : (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                persistedModels: (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], state.persistedModels, !0), [ modelObjectId ], !1)
            });
        }), (0, ngrx_store.on)(onBeginAutoCompletion, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                autoCompletionRequestInFlight: !0
            });
        }), (0, ngrx_store.on)(onEndAutoCompletion, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                autoCompletionRequestInFlight: !1
            });
        })), (0, ngrx_store.Lq)({
            addRemoveFromBIBatchId: void 0
        }, (0, ngrx_store.on)(addRemoveOperationInProgress, function(state, _a) {
            var addRemoveFromBIBatchId = _a.addRemoveFromBIBatchId;
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                addRemoveFromBIBatchId
            });
        }), (0, ngrx_store.on)(addOrRemoveTableInBISuccess, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                addRemoveFromBIBatchId: void 0
            });
        }), (0, ngrx_store.on)(onAddRemoveTablesToBIFromManageDatasetFailed, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                addRemoveFromBIBatchId: void 0
            });
        }), (0, ngrx_store.on)(onAddRemoveTablesToBIFromAutoUpdateDatasetFailed, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                addRemoveFromBIBatchId: void 0
            });
        }), (0, ngrx_store.on)(addOrRemoveTableInBIFailed, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                addRemoveFromBIBatchId: void 0
            });
        }), (0, ngrx_store.on)(onAddRemoveTablesToBIFromAutoUpdateDatasetSuccess, function(state) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, state), {
                addRemoveFromBIBatchId: void 0
            });
        }));
        var adapter = (0, ngrx_entity.H)(), datamart_session_queries_reducers_initialState = adapter.getInitialState({});
        (0, ngrx_store.Lq)(datamart_session_queries_reducers_initialState, (0, ngrx_store.on)(addOrUpdateQuery, function(state, _a) {
            return adapter.upsertOne({
                id: _a.queryName,
                script: _a.queryScript
            }, state);
        })), adapter.getSelectors();
        var node_sort_strategy_a, getDatamartRootState = (0, ngrx_store.ZF)("datamartRootState"), datamarts_selector_getDatamartModelState = ((0, 
        ngrx_store.P1)(getDatamartRootState, function(state) {
            return state.mashupEditor;
        }), (0, ngrx_store.P1)(getDatamartRootState, function(state) {
            return null == state ? void 0 : state.datamartModel;
        })), getDatamartObjectId = ((0, ngrx_store.P1)(getDatamartRootState, function(state) {
            return state.ribbonState;
        }), (0, ngrx_store.P1)(getDatamartRootState, function(state) {
            return state && state.queryEditor;
        }), (0, ngrx_store.P1)(getDatamartRootState, function(state) {
            return state && state.sessionQueries;
        }), (0, ngrx_store.P1)(WebRouter.C, function(state) {
            return state && state.params.groupid;
        }), (0, ngrx_store.P1)(WebRouter.C, function(state) {
            return state && state.params.datamartId;
        })), getDatamartMetadata = ((0, ngrx_store.P1)(WebRouter.C, function(state) {
            return state && state.params.queryId;
        }), (0, ngrx_store.P1)(datamart_metadata_selector.WZ, getDatamartObjectId, function(entities, datamartId) {
            return entities && entities[datamartId];
        })), getDatamartType = ((0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.tdsEndpoint;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.datamartType;
        })), getState = ((0, ngrx_store.P1)(getDatamartType, function(datamartType) {
            return 2 === datamartType;
        }), (0, ngrx_store.P1)(getDatamartType, function(datamartType) {
            return 2 === datamartType || 5 === datamartType;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.dataflowObjectId;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.ownerArtifactObjectId;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.gatewayObjectId;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.name;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.datasetObjectId;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.status;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.state;
        })), datamartsAdapterSelector = ((0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && (0, utils.kK)(metadata.datamartType);
        }), datamartsAdapter.getSelectors()), datamartEditorsAdapterSelector = editorAdapter.getSelectors(), getWarehouseEntitiesState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.datamarts;
        }), getDatamartEditorEntitiesState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.editors;
        }), getWarehousesEntities = (0, ngrx_store.P1)(getWarehouseEntitiesState, datamartsAdapterSelector.selectEntities), getDatamartEditorEntities = (0, 
        ngrx_store.P1)(getDatamartEditorEntitiesState, datamartEditorsAdapterSelector.selectEntities), getWarehouses = ((0, 
        ngrx_store.P1)(getDatamartEditorEntitiesState, datamartEditorsAdapterSelector.selectAll), 
        (0, ngrx_store.P1)(getWarehouseEntitiesState, datamartsAdapterSelector.selectIds), 
        (0, ngrx_store.P1)(getWarehouseEntitiesState, datamartsAdapterSelector.selectAll)), getActiveDatamartEditor = ((0, 
        ngrx_store.P1)(getWarehouses, getDatamartObjectId, datamart_metadata_selector.WZ, function(warehouses, datamartObjectId, datamartMetadata) {
            return warehouses.length > 0 ? warehouses.map(function(warehouse) {
                return (0, tslib_es6.__assign)({}, datamartMetadata[warehouse.objectId]);
            }) : [ (0, tslib_es6.__assign)({}, datamartMetadata[datamartObjectId]) ];
        }), (0, ngrx_store.P1)(getDatamartEditorEntities, getDatamartObjectId, function(datamartEditors, datamartObjectId) {
            return datamartEditors && datamartObjectId && datamartEditors[datamartObjectId];
        })), getPrimaryDatamartObjectId = (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor && activeEditor.primaryDatamartObjectId;
        }), getPrimaryDatamart = ((0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.activeEditorId;
        }), (0, ngrx_store.P1)(getWarehousesEntities, getPrimaryDatamartObjectId, function(warehouses, primaryDatamartObjectId) {
            return warehouses && primaryDatamartObjectId && warehouses[primaryDatamartObjectId];
        })), getPrimaryDatamartMetadata = ((0, ngrx_store.P1)(getPrimaryDatamart, function(primaryDatamart) {
            return primaryDatamart && primaryDatamart.name;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(primaryDatamart) {
            return primaryDatamart && primaryDatamart.warehouseMetadata;
        })), isDatamartPrimary = ((0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor.loadingError;
        }), function(datamartObjectId) {
            return (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
                return activeEditor && activeEditor.primaryDatamartObjectId === datamartObjectId;
            });
        }), getDatamartVersion = (0, ngrx_store.P1)(getPrimaryDatamartMetadata, function(datamartMetadata) {
            return datamartMetadata && datamartMetadata.datamartVersion;
        }), getEtlModel = ((0, ngrx_store.P1)(getPrimaryDatamartMetadata, function(datamartMetadata) {
            return datamartMetadata && datamartMetadata.datamartVersion;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.etlModel;
        })), getDatamartInfoLoadState = ((0, ngrx_store.P1)(getEtlModel, function(etlModel) {
            return etlModel && etlModel.entities;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.datasetInfo;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.databaseDefinition;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            var _a;
            return datamart && (null === (_a = datamart.databaseDefinition) || void 0 === _a ? void 0 : _a.tables);
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            var _a;
            return datamart && (null === (_a = datamart.databaseDefinition) || void 0 === _a ? void 0 : _a.views);
        }), (0, ngrx_store.P1)(getEtlModel, function(state) {
            var _a;
            return null !== (_a = state && state["pbi:mashup"].queriesMetadata) && void 0 !== _a ? _a : {};
        }), (0, ngrx_store.P1)(getEtlModel, function(state) {
            return state && state.culture;
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor && activeEditor.leaseExpiration;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.infoLoadState;
        })), getDatamartInfoIsLoaded = ((0, ngrx_store.P1)(getDatamartInfoLoadState, function(loadState) {
            return "LOADED" !== loadState;
        }), (0, ngrx_store.P1)(getDatamartInfoLoadState, function(loadState) {
            return "LOADED" === loadState;
        })), getDatamartQueriesLoadState = (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.queriesLoadState;
        }), getDatamartIsCreating = ((0, ngrx_store.P1)(getDatamartQueriesLoadState, function(loadState) {
            return "LOADED" !== loadState;
        }), (0, ngrx_store.P1)(getDatamartQueriesLoadState, function(loadState) {
            return "LOADED" === loadState;
        }), (0, ngrx_store.P1)(getState, function(state) {
            return 0 === state;
        })), getSchemaLoadState = (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.schemaLoadState;
        }), getSchemaIsLoading = (0, ngrx_store.P1)(getSchemaLoadState, function(loadState) {
            return "LOADING" === loadState;
        }), getSchemaIsLoaded = (0, ngrx_store.P1)(getSchemaLoadState, function(loadState) {
            return "LOADED" === loadState;
        }), getSampleIsLoading = ((0, ngrx_store.P1)(getSchemaLoadState, function(loadState) {
            return "ERROR" === loadState;
        }), (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.lakehouseModeling;
        }), (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.datamartModeling;
        }), (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.isCopilotActive;
        }), (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.isCopilotEnabled;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && null != metadata.sampleName && "" !== metadata.sampleName;
        })), getWarehouseIsImporting = (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.isWarehouseImporting;
        }), getUpdatingDatamartStepsProgressAdapterSelector = ((0, ngrx_store.P1)(getSchemaIsLoaded, getSampleIsLoading, function(schemaIsLoaded, isSampleLoading) {
            return schemaIsLoaded && !isSampleLoading;
        }), (0, ngrx_store.P1)(getSchemaIsLoading, getSampleIsLoading, getWarehouseIsImporting, function(schemaIsLoading, sampleIsLoading, warehouseIsImporting) {
            return schemaIsLoading || sampleIsLoading || warehouseIsImporting;
        }), (0, ngrx_store.P1)(getDatamartInfoIsLoaded, getDatamartIsCreating, getWarehouseIsImporting, function(infoIsLoaded, datamartIsCreating, warehouseIsImporting) {
            return infoIsLoaded && !datamartIsCreating && !warehouseIsImporting;
        }), (0, ngrx_store.P1)(getSchemaIsLoading, getSampleIsLoading, getWarehouseIsImporting, function(schemaIsLoading, sampleIsLoading, warehouseIsImporting) {
            return (sampleIsLoading || warehouseIsImporting) && !schemaIsLoading;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.modelingServiceInitialized;
        }), updatingDatamartProgressStepsAdapter.getSelectors()), getUpdatingDatamartStepsProgressEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.updatingDatamartStepsProgress;
        }), getUpdatingDatamartStepsProgress = ((0, ngrx_store.P1)(getUpdatingDatamartStepsProgressEntityState, getUpdatingDatamartStepsProgressAdapterSelector.selectEntities), 
        (0, ngrx_store.P1)(getUpdatingDatamartStepsProgressEntityState, getPrimaryDatamart, function(stepsProgressEntityState, datamart) {
            return datamart && datamart.updatingDatamartStepsProgressIds.map(function(stepProgressId) {
                return stepsProgressEntityState.entities[stepProgressId];
            });
        })), getUpdatingLoadingStepsProgressAdapterSelector = ((0, ngrx_store.P1)(getUpdatingDatamartStepsProgress, function(stepsProgress) {
            var importStep = _.find(stepsProgress, function(step) {
                return step.step === UpdateStepType.ImportingData;
            });
            return !!importStep && importStep.progress !== UpdateStepProgressType.NotStarted;
        }), updatingLoadingProgressStepsAdapter.getSelectors()), getUpdatingLoadingStepsProgressEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.updatingLoadingStepsProgress;
        }), getRefreshingDatamartEntityState = ((0, ngrx_store.P1)(getUpdatingLoadingStepsProgressEntityState, getUpdatingLoadingStepsProgressAdapterSelector.selectEntities), 
        (0, ngrx_store.P1)(getUpdatingLoadingStepsProgressEntityState, getPrimaryDatamart, function(stepsProgressEntityState, datamart) {
            return datamart && datamart.updatingLoadingStepsProgressIds.map(function(stepProgressId) {
                return stepsProgressEntityState.entities[stepProgressId];
            });
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.importingWarehouseBatchId;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.refreshingDatamartBatchId;
        }), refreshedEntityAdapter.getSelectors(), (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state.refreshedEntities;
        })), getRefreshingDatamartEntities = (0, ngrx_store.P1)(getRefreshingDatamartEntityState, getPrimaryDatamart, function(refreshingEntitiesState, datamart) {
            return datamart && datamart.refreshedEntityIds.map(function(refreshedEntityId) {
                return refreshingEntitiesState.entities[refreshedEntityId];
            });
        }), schemasAdapterSelector = ((0, ngrx_store.P1)(getRefreshingDatamartEntities, function(entities) {
            return !_.isEmpty(entities);
        }), (0, ngrx_store.P1)(getRefreshingDatamartEntities, function(entities) {
            return entities.filter(function(entity) {
                return "failure" === entity.progressState || "invalid" === entity.progressState;
            });
        }), (0, ngrx_store.P1)(getRefreshingDatamartEntities, function(entities) {
            return entities.filter(function(entity) {
                return "notStarted" === entity.progressState || "inProgress" === entity.progressState;
            });
        }), (0, ngrx_store.P1)(getRefreshingDatamartEntities, function(entities) {
            return entities.filter(function(entity) {
                return "success" === entity.progressState;
            });
        }), schemasAdapter.getSelectors()), getSchemaEntitiesState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.schemas;
        }), getSchemasEntities = (0, ngrx_store.P1)(getSchemaEntitiesState, schemasAdapterSelector.selectEntities), getSchemaIds = (0, 
        ngrx_store.P1)(getSchemaEntitiesState, schemasAdapterSelector.selectIds), getSchemas = (0, 
        ngrx_store.P1)(getSchemaEntitiesState, schemasAdapterSelector.selectAll), schemaObjectContainersAdapterSelector = ((0, 
        ngrx_store.P1)(getSchemasEntities, getSchemaIds, function(schemas, schemaIds) {
            return schemas && schemaIds && schemas[schemaIds[0]];
        }), (0, ngrx_store.P1)(getSchemas, getPrimaryDatamartMetadata, function(schemas, datamartMetadata) {
            return schemas && datamartMetadata && _.filter(schemas, function(schema) {
                return schema.warehouseMetadata.datamartObjectId === datamartMetadata.datamartObjectId;
            });
        }), schemaObjectContainersAdapter.getSelectors()), getSchemaObjectContainerEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.schemaObjectContainers;
        }), getSchemaObjectContainerEntities = (0, ngrx_store.P1)(getSchemaObjectContainerEntityState, schemaObjectContainersAdapterSelector.selectEntities), getSchemaObjectContainers = ((0, 
        ngrx_store.P1)(getSchemaObjectContainerEntityState, schemaObjectContainersAdapterSelector.selectIds), 
        (0, ngrx_store.P1)(getSchemaObjectContainerEntityState, schemaObjectContainersAdapterSelector.selectAll)), getAllLoadedSchemaObjectContainers = (0, 
        ngrx_store.P1)(getSchemaObjectContainers, function(containers) {
            return containers && _.filter(containers, function(container) {
                return container.isLoaded;
            });
        }), getAllUnloadedSchemaObjectContainers = (0, ngrx_store.P1)(getSchemaObjectContainers, function(containers) {
            return containers && _.filter(containers, function(container) {
                return !container.isLoaded;
            });
        }), databaseRoleContainerAdapaterSelector = databaseRoleContainersAdapter.getSelectors(), getDatabaseRoleContainerEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state.databaseRoleContainers;
        }), getDatabaseRoleContainerEntities = (0, ngrx_store.P1)(getDatabaseRoleContainerEntityState, databaseRoleContainerAdapaterSelector.selectEntities), getDatabaseRoleContainers = (0, 
        ngrx_store.P1)(getDatabaseRoleContainerEntityState, databaseRoleContainerAdapaterSelector.selectAll), getAllLoadedDatabaseRoleContainers = (0, 
        ngrx_store.P1)(getDatabaseRoleContainers, function(containers) {
            return containers && _.filter(containers, function(container) {
                return container.isLoaded;
            });
        }), getAllUnloadedDatabaseRoleContainers = (0, ngrx_store.P1)(getDatabaseRoleContainers, function(containers) {
            return containers && _.filter(containers, function(container) {
                return !container.isLoaded;
            });
        }), categoriesAdapterSelector = ((0, ngrx_store.P1)(getDatabaseRoleContainerEntityState, databaseRoleContainerAdapaterSelector.selectIds), 
        (0, ngrx_store.P1)(getAllLoadedSchemaObjectContainers, getAllLoadedDatabaseRoleContainers, function(schemaObjectContainers, databaseRoleContainers) {
            return {
                schemaObjectContainers,
                databaseRoleContainers
            };
        }), (0, ngrx_store.P1)(getAllUnloadedSchemaObjectContainers, getAllUnloadedDatabaseRoleContainers, function(schemaObjectContainers, databaseRoleContainers) {
            return {
                schemaObjectContainers,
                databaseRoleContainers
            };
        }), categoriesAdapter.getSelectors()), getCategoryEntityState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.categories;
        }), getCategoryEntities = (0, ngrx_store.P1)(getCategoryEntityState, categoriesAdapterSelector.selectEntities), getCategories = ((0, 
        ngrx_store.P1)(getCategoryEntityState, categoriesAdapterSelector.selectIds), (0, 
        ngrx_store.P1)(getCategoryEntityState, categoriesAdapterSelector.selectAll)), storedProceduresAdapterSelector = ((0, 
        ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            var _a;
            return datamart && datamart.etlModel && (null === (_a = datamart.etlModel["pbi:mashup"]) || void 0 === _a ? void 0 : _a.connectionOverrides);
        }), storedProceduresAdapter.getSelectors()), getStoredProcedureEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.storedProcedures;
        }), getStoredProcedureEntities = (0, ngrx_store.P1)(getStoredProcedureEntityState, storedProceduresAdapterSelector.selectEntities), getActiveStoredProceduresEntities = ((0, 
        ngrx_store.P1)(getStoredProcedureEntityState, storedProceduresAdapterSelector.selectIds), 
        (0, ngrx_store.P1)(getStoredProcedureEntities, getActiveDatamartEditor, function(storedProdecures, activeEditor) {
            if (storedProdecures && activeEditor) return Object.entries(storedProdecures).reduce(function(acc, _a) {
                var key = _a[0], storedProdecure = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, storedProdecure.warehouseId) && (acc[key] = storedProdecure), 
                acc;
            }, {});
        })), getHiddenStoredProcedures = (0, ngrx_store.P1)(getActiveStoredProceduresEntities, function(storedProcedures) {
            return _.filter(storedProcedures, function(storedProcedure) {
                return storedProcedure.isHidden;
            });
        }), userDefinedFunctionsAdapterSelector = userDefinedFunctionsAdapter.getSelectors(), getUserDefinedFunctionEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.userDefinedFunctions;
        }), getUserDefinedFunctionEntities = (0, ngrx_store.P1)(getUserDefinedFunctionEntityState, userDefinedFunctionsAdapterSelector.selectEntities), getActiveUserDefinedFunctionsEntities = ((0, 
        ngrx_store.P1)(getUserDefinedFunctionEntityState, userDefinedFunctionsAdapterSelector.selectIds), 
        (0, ngrx_store.P1)(getUserDefinedFunctionEntities, getActiveDatamartEditor, function(userDefinedFunctions, activeEditor) {
            if (userDefinedFunctions && activeEditor) return Object.entries(userDefinedFunctions).reduce(function(acc, _a) {
                var key = _a[0], userDefinedFunction = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, userDefinedFunction.warehouseId) && (acc[key] = userDefinedFunction), 
                acc;
            }, {});
        })), getHiddenUserDefinedFunctions = (0, ngrx_store.P1)(getActiveUserDefinedFunctionsEntities, function(userDefinedFunctions) {
            return _.filter(userDefinedFunctions, function(func) {
                return func.isHidden;
            });
        }), databaseRoleAdapterSelector = databaseRolesAdapter.getSelectors(), getDatabaseRoleEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.databaseRoles;
        }), getDatabaseRoleEntities = (0, ngrx_store.P1)(getDatabaseRoleEntityState, databaseRoleAdapterSelector.selectEntities), tablesAdapterSelector = ((0, 
        ngrx_store.P1)(getDatabaseRoleEntityState, databaseRoleAdapterSelector.selectIds), 
        (0, ngrx_store.P1)(getDatabaseRoleEntityState, databaseRoleAdapterSelector.selectAll), 
        tablesAdapter.getSelectors()), getTableEntityState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.tables;
        }), getTableEntities = (0, ngrx_store.P1)(getTableEntityState, tablesAdapterSelector.selectEntities), getTables = (0, 
        ngrx_store.P1)(getTableEntityState, tablesAdapterSelector.selectAll), getTableIds = (0, 
        ngrx_store.P1)(getTableEntityState, tablesAdapterSelector.selectIds), getActiveTablesEntities = (0, 
        ngrx_store.P1)(getTableEntities, getActiveDatamartEditor, function(tables, activeEditor) {
            if (tables && activeEditor) return Object.entries(tables).reduce(function(acc, _a) {
                var key = _a[0], table = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, table.warehouseId) && (acc[key] = table), 
                acc;
            }, {});
        }), getHiddenTables = (0, ngrx_store.P1)(getActiveTablesEntities, function(tables) {
            return _.filter(tables, function(table) {
                return table.isHidden;
            });
        }), getDefaultTable = (0, ngrx_store.P1)(getActiveTablesEntities, getTableIds, function(tables, tableIds) {
            return tables && tableIds && tables[tableIds[0]];
        }), getTablesFromPrimaryWarehouse = (0, ngrx_store.P1)(getTables, getPrimaryDatamartMetadata, function(tables, datamartMetadata) {
            return tables && datamartMetadata && _.filter(tables, function(table) {
                return table.warehouseId === datamartMetadata.datamartObjectId;
            });
        }), viewsAdapterSelector = ((0, ngrx_store.P1)(getTablesFromPrimaryWarehouse, function(tables) {
            return _.filter(tables, function(table) {
                return table.isBiObject;
            });
        }), viewsAdapter.getSelectors()), getViewEntityState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.views;
        }), getViewEntities = (0, ngrx_store.P1)(getViewEntityState, viewsAdapterSelector.selectEntities), getViews = (0, 
        ngrx_store.P1)(getViewEntityState, viewsAdapterSelector.selectAll), getViewIds = (0, 
        ngrx_store.P1)(getViewEntityState, viewsAdapterSelector.selectIds), getActiveViewsEntities = (0, 
        ngrx_store.P1)(getViewEntities, getActiveDatamartEditor, function(views, activeEditor) {
            if (views && activeEditor) return Object.entries(views).reduce(function(acc, _a) {
                var key = _a[0], view = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, view.warehouseId) && (acc[key] = view), 
                acc;
            }, {});
        }), getHiddenViews = (0, ngrx_store.P1)(getActiveViewsEntities, function(views) {
            return _.filter(views, function(view) {
                return view.isHidden;
            });
        }), getDefaultView = (0, ngrx_store.P1)(getActiveViewsEntities, getViewIds, function(views, viewIds) {
            return views && viewIds && views[viewIds[0]];
        }), getViewsFromPrimaryWarehouse = (0, ngrx_store.P1)(getViews, getPrimaryDatamartMetadata, function(views, datamartMetadata) {
            return views && datamartMetadata && _.filter(views, function(view) {
                return view.warehouseId === datamartMetadata.datamartObjectId;
            });
        }), columnAdapterSelector = ((0, ngrx_store.P1)(getDefaultTable, getDefaultView, function(defaultTable, defaultView) {
            return null != defaultTable ? defaultTable : defaultView;
        }), (0, ngrx_store.P1)(getViewsFromPrimaryWarehouse, function(views) {
            return _.filter(views, function(view) {
                return view.isBiObject;
            });
        }), columnsAdapter.getSelectors()), getColumnEntityState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.columns;
        }), getColumnEntities = (0, ngrx_store.P1)(getColumnEntityState, columnAdapterSelector.selectEntities), getActiveColumnsEntities = ((0, 
        ngrx_store.P1)(getColumnEntityState, columnAdapterSelector.selectIds), (0, ngrx_store.P1)(getColumnEntities, getActiveDatamartEditor, function(columns, activeEditor) {
            if (columns && activeEditor) return Object.entries(columns).reduce(function(acc, _a) {
                var key = _a[0], column = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, column.warehouseId) && (acc[key] = column), 
                acc;
            }, {});
        })), getHiddenColumns = (0, ngrx_store.P1)(getActiveColumnsEntities, function(columns) {
            return _.filter(columns, function(column) {
                return column.isHidden;
            });
        }), measureAdapterSelector = measuresAdapter.getSelectors(), getMeasureEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.measures;
        }), getMeasureEntities = (0, ngrx_store.P1)(getMeasureEntityState, measureAdapterSelector.selectEntities), getActiveMeasuresEntities = ((0, 
        ngrx_store.P1)(getMeasureEntityState, measureAdapterSelector.selectIds), (0, ngrx_store.P1)(getMeasureEntities, getActiveDatamartEditor, function(measures, activeEditor) {
            if (measures && activeEditor) return Object.entries(measures).reduce(function(acc, _a) {
                var key = _a[0], measure = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, measure.warehouseId) && (acc[key] = measure), 
                acc;
            }, {});
        })), getHiddenMeasures = (0, ngrx_store.P1)(getActiveMeasuresEntities, function(measures) {
            return _.filter(measures, function(measure) {
                return measure.isHidden;
            });
        }), getSelectedQueryId = ((0, ngrx_store.P1)(getActiveColumnsEntities, getActiveMeasuresEntities, function(columns, measures) {
            return {
                columns,
                measures
            };
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor && activeEditor.selected.queryId;
        })), queriesAdapterSelector = queriesAdapter.getSelectors(), getQueriesEntityState = (0, 
        ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.queries;
        }), getQueriesEntities = (0, ngrx_store.P1)(getQueriesEntityState, queriesAdapterSelector.selectEntities), datamart_model_selector_getQueries = (0, 
        ngrx_store.P1)(getQueriesEntityState, queriesAdapterSelector.selectAll), getActiveQueriesEntities = (0, 
        ngrx_store.P1)(getQueriesEntities, getActiveDatamartEditor, function(queries, activeEditor) {
            if (queries && activeEditor) return Object.entries(queries).reduce(function(acc, _a) {
                var key = _a[0], query = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, query.warehouseId) && (acc[key] = query), 
                acc;
            }, {});
        }), getSelectedQuery = ((0, ngrx_store.P1)(getActiveQueriesEntities, function(queries) {
            return _.map(queries, function(query) {
                return query.name;
            });
        }), (0, ngrx_store.P1)(getQueriesEntities, WebRouter.C, function(queries, state) {
            return _.find(queries, function(q) {
                var _a;
                return q.queryId === (null === (_a = null == state ? void 0 : state.params) || void 0 === _a ? void 0 : _a.queryId);
            });
        }), (0, ngrx_store.P1)(getSelectedQueryId, datamarts_selector_getDatamartModelState, getActiveDatamartEditor, function(id, state, activeEditor) {
            return _.isEmpty(state) || _.isEmpty(activeEditor) || _.isEmpty(_.trim(id)) ? void 0 : state.queries.entities[urn_builder.X6.getQueryUrn(id)];
        })), getQuerySqlGridResultIds = ((0, ngrx_store.P1)(getSelectedQueryId, getQueriesEntities, function(id, queries) {
            var _a;
            return null === (_a = queries[urn_builder.X6.getQueryUrn(id)]) || void 0 === _a ? void 0 : _a.firstTable;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return null == query ? void 0 : query.sqlGridResultIds;
        })), getSelectedMessageIds = (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return null == query ? void 0 : query.sqlResultsPaneMessageIds;
        }), getDataExplorer = ((0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return 0 === (null == query ? void 0 : query.type);
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor && activeEditor.dataExplorer;
        })), sqlResultAdapterSelector = ((0, ngrx_store.P1)(getDataExplorer, function(dataExplorer) {
            return null == dataExplorer ? void 0 : dataExplorer.sqlGridResult;
        }), (0, ngrx_store.P1)(getDataExplorer, function(dataExplorer) {
            return null == dataExplorer ? void 0 : dataExplorer.sql;
        }), sqlGridResultAdapter.getSelectors()), getSqlResultEntityState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state && state.sqlGridResults;
        }), getSqlGridResultEntities = (0, ngrx_store.P1)(getSqlResultEntityState, sqlResultAdapterSelector.selectEntities), getSelectedSqlGridResultId = (0, 
        ngrx_store.P1)(getSelectedQuery, function(query) {
            return null == query ? void 0 : query.selectedSqlGridResultId;
        }), messageAdapterSelector = ((0, ngrx_store.P1)(getSqlGridResultEntities, getQuerySqlGridResultIds, function(entities, ids) {
            return null == ids ? void 0 : ids.reduce(function(acc, id) {
                return entities[id] ? (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], acc, !0), [ entities[id] ], !1) : acc;
            }, []);
        }), (0, ngrx_store.P1)(getSelectedSqlGridResultId, datamarts_selector_getDatamartModelState, function(id, state) {
            return _.isEmpty(state) ? void 0 : state.sqlGridResults.entities[id];
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return null == query ? void 0 : query.sqlResultPaneSelectedView;
        }), messagesAdapter.getSelectors()), getMessageEntityState = (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return null == state ? void 0 : state.sqlMessages;
        }), getMessageEntities = (0, ngrx_store.P1)(getMessageEntityState, messageAdapterSelector.selectEntities), getSelectedSqlQueryMashupEvalRunning = ((0, 
        ngrx_store.P1)(getMessageEntities, getSelectedMessageIds, function(entities, ids) {
            return ids ? ids.reduce(function(acc, id) {
                return entities[id] ? (0, tslib_es6.__spreadArray)((0, tslib_es6.__spreadArray)([], acc, !0), [ entities[id] ], !1) : acc;
            }, []) : [];
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, datamarts_selector_getDatamartModelState, function(activeEditor, state) {
            return activeEditor && activeEditor.tabs.map(function(queryId) {
                return state.queries.entities[urn_builder.X6.getQueryUrn(queryId)];
            });
        }), (0, ngrx_store.P1)(getQueriesEntities, getSelectedQueryId, function(entities, selectedQueryId) {
            var _a;
            return null === (_a = entities[urn_builder.X6.getQueryUrn(selectedQueryId)]) || void 0 === _a ? void 0 : _a.type;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.editorContext;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.isResultGridVisible;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.resultGridHeight;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.lastSqlRunId;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.lastSql;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.isQueryExecuting;
        })), getActiveWarehousesEntities = ((0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.isQueryCanceled;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.isBottomPaneMaximized;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.isExplainQueryRunning;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return query && query.isFixRunning;
        }), (0, ngrx_store.P1)(getSchemaIsLoaded, getActiveTablesEntities, getActiveViewsEntities, function(schemaIsLoaded, tables, views) {
            return schemaIsLoaded && (!_.isEmpty(tables) || !_.isEmpty(views));
        }), (0, ngrx_store.P1)(datamart_model_selector_getQueries, function(queries) {
            return queries.reduce(function(lastSqlRuns, query) {
                return _.isEmpty(query.lastSqlRunId) || lastSqlRuns.push({
                    runId: query.lastSqlRunId,
                    sql: query.lastSql
                }), lastSqlRuns;
            }, []);
        }), (0, ngrx_store.P1)(getActiveQueriesEntities, function(queries) {
            return _.some(queries, function(q) {
                return 1 === q.state || 2 === q.state;
            });
        }), (0, ngrx_store.P1)(getTables, datamart_model_selector_getQueries, function(tables, queries) {
            return {
                tables,
                queries
            };
        }), (0, ngrx_store.P1)(getHiddenTables, getHiddenViews, getHiddenStoredProcedures, getHiddenUserDefinedFunctions, getHiddenColumns, getHiddenMeasures, function(tables, views, storedProcedures, userDefinedFunctions, columns, measures) {
            return {
                tables,
                views,
                storedProcedures,
                userDefinedFunctions,
                columns,
                measures
            };
        }), (0, ngrx_store.P1)(getWarehousesEntities, getActiveDatamartEditor, function(warehouses, activeEditor) {
            if (warehouses && activeEditor) return Object.entries(warehouses).reduce(function(acc, _a) {
                var key = _a[0], warehouse = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, warehouse.objectId) && (acc[key] = warehouse), 
                acc;
            }, {});
        })), getActiveSchemasEntities = (0, ngrx_store.P1)(getSchemasEntities, getActiveDatamartEditor, function(schemas, activeEditor) {
            if (schemas && activeEditor) return Object.entries(schemas).reduce(function(acc, _a) {
                var key = _a[0], schema = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, schema.warehouseMetadata.datamartObjectId) && (acc[key] = schema), 
                acc;
            }, {});
        }), getActiveSchemasObjectContainersEntities = (0, ngrx_store.P1)(getSchemaObjectContainerEntities, getActiveDatamartEditor, function(schemasObjectContainers, activeEditor) {
            if (schemasObjectContainers && activeEditor) return Object.entries(schemasObjectContainers).reduce(function(acc, _a) {
                var key = _a[0], schemasObjectContainer = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, schemasObjectContainer.warehouseMetadata.datamartObjectId) && (acc[key] = schemasObjectContainer), 
                acc;
            }, {});
        }), getActiveCategoriesEntities = (0, ngrx_store.P1)(getCategoryEntities, getActiveDatamartEditor, function(categories, activeEditor) {
            if (categories && activeEditor) return Object.entries(categories).reduce(function(acc, _a) {
                var key = _a[0], category = _a[1];
                return ("Queries" === category.name || _.includes(activeEditor.loadedWarehouseIds, category.warehouseMetadata.datamartObjectId)) && (acc[key] = category), 
                acc;
            }, {});
        }), getActiveDatabaseRoleContainerEntities = (0, ngrx_store.P1)(getDatabaseRoleContainerEntities, getActiveDatamartEditor, function(databaseRoleContainers, activeEditor) {
            if (databaseRoleContainers && activeEditor) return Object.entries(databaseRoleContainers).reduce(function(acc, _a) {
                var key = _a[0], databaseRoleContainer = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, databaseRoleContainer.warehouseMetadata.datamartObjectId) && (acc[key] = databaseRoleContainer), 
                acc;
            }, {});
        }), getActiveDatabaseRolesEntities = (0, ngrx_store.P1)(getDatabaseRoleEntities, getActiveDatamartEditor, function(databaseRoles, activeEditor) {
            if (databaseRoles && activeEditor) return Object.entries(databaseRoles).reduce(function(acc, _a) {
                var key = _a[0], databaseRole = _a[1];
                return _.includes(activeEditor.loadedWarehouseIds, databaseRole.warehouseId) && (acc[key] = databaseRole), 
                acc;
            }, {});
        }), getFieldListModelContainers = (0, ngrx_store.P1)(getActiveWarehousesEntities, getActiveSchemasEntities, getActiveSchemasObjectContainersEntities, getActiveCategoriesEntities, getActiveDatabaseRoleContainerEntities, getActiveDatabaseRolesEntities, function(warehouses, schemas, schemaObjectContainers, categories, databaseRoleContainers, databaseRoles) {
            return {
                warehouses,
                schemas,
                schemaObjectContainers,
                categories,
                databaseRoleContainers,
                databaseRoles
            };
        }), getFieldListModelObjects = (0, ngrx_store.P1)(getActiveTablesEntities, getActiveViewsEntities, getActiveStoredProceduresEntities, getActiveUserDefinedFunctionsEntities, getActiveColumnsEntities, getActiveMeasuresEntities, getActiveQueriesEntities, function(tables, views, storedProcedures, userDefinedFunctions, columns, measures, queries) {
            return {
                tables,
                views,
                storedProcedures,
                userDefinedFunctions,
                columns,
                measures,
                queries
            };
        }), getDefaultDatasetFieldListModels = ((0, ngrx_store.P1)(getFieldListModelContainers, getFieldListModelObjects, function(fieldListModelContainers, fieldListModelObjects) {
            return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, fieldListModelContainers), fieldListModelObjects);
        }), (0, ngrx_store.P1)(getWarehousesEntities, getSchemasEntities, getSchemaObjectContainerEntities, getTableEntities, getViewEntities, getCategoryEntities, function(warehouses, schemas, schemaObjectContainers, tables, views, categories) {
            return {
                warehouses,
                schemas,
                schemaObjectContainers,
                tables,
                views,
                categories
            };
        })), getQueryWithinSizeLimit = ((0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.viewAsRoles;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.viewAsRoles.filter(function(roles) {
                return roles.checked;
            });
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor && activeEditor.mwcTokenResponsePayload;
        }), (0, ngrx_store.P1)(getSelectedQuery, function(query) {
            return (new TextEncoder).encode(null == query ? void 0 : query.sqlExpression).length / 1024 < 512;
        })), pbi_tree_contracts = ((0, ngrx_store.P1)(getSelectedSqlQueryMashupEvalRunning, getQueryWithinSizeLimit, function(isRunning, getQueryWithinSizeLimit) {
            return !isRunning && getQueryWithinSizeLimit;
        }), (0, ngrx_store.P1)(getWarehouses, function(warehouses) {
            return warehouses && warehouses.flatMap(function(warehouse) {
                var _a;
                return null !== (_a = warehouse.failedToLoadTableSyncErrors) && void 0 !== _a ? _a : [];
            });
        }), (0, ngrx_store.P1)(getActiveTablesEntities, getActiveViewsEntities, function(tables, views) {
            return _.isEmpty(tables) && _.isEmpty(views);
        }), (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            var activeEditor = state.editors.entities[state.activeEditorId];
            if (state && activeEditor && activeEditor.selected) {
                for (var selectedItemsData = [], _i = 0, _a = Array.from(activeEditor.selected.items.values()); _i < _a.length; _i++) {
                    var matchedItem = reducer_utils_findByUrn(state, _a[_i]);
                    matchedItem && selectedItemsData.push(matchedItem.value);
                }
                return selectedItemsData;
            }
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor.loadingWarehousesIds;
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor.loadedWarehouseIds;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.isReadonly;
        }), (0, ngrx_store.P1)(datamarts_selector_getDatamartModelState, function(state) {
            return state.actionError;
        }), (0, ngrx_store.P1)(getActiveDatamartEditor, function(activeEditor) {
            return activeEditor.oneLakeUrl;
        }), (0, ngrx_store.P1)(getPrimaryDatamart, function(datamart) {
            return datamart && datamart.modelingServiceIgnoreModelChanged;
        }), (0, ngrx_store.P1)(getDatamartMetadata, function(metadata) {
            return metadata && metadata.sampleName;
        }), (0, ngrx_store.P1)(getWarehouses, getSchemaObjectContainers, getCategories, function(warehouses, schemaObjectContainers, categories) {
            if (warehouses) for (var _i = 0, warehouses_1 = warehouses; _i < warehouses_1.length; _i++) {
                var warehouse = warehouses_1[_i];
                if (warehouse.isSyncRunning || warehouse.autoRefreshingFromQueryExecution || warehouse.isObjectContainerRefreshing) return !0;
            }
            if (categories) for (var _a = 0, categories_1 = categories; _a < categories_1.length; _a++) if (categories_1[_a].isObjectContainerRefreshing) return !0;
            if (schemaObjectContainers) for (var _b = 0, schemaObjectContainers_1 = schemaObjectContainers; _b < schemaObjectContainers_1.length; _b++) if (schemaObjectContainers_1[_b].isObjectContainerRefreshing) return !0;
            return !1;
        }), (0, ngrx_store.P1)(getActiveWarehousesEntities, getActiveCategoriesEntities, getActiveSchemasEntities, getActiveSchemasObjectContainersEntities, getActiveTablesEntities, getActiveViewsEntities, getActiveColumnsEntities, function(datamarts, categories, schemas, schemaObjectContainers, tables, views, columns) {
            return {
                datamarts,
                categories,
                schemas,
                schemaObjectContainers,
                tables,
                views,
                columns
            };
        }), (0, ngrx_store.P1)(getDatamartType, getActiveDatamartEditor, function(datamartType, activeEditor) {
            if (datamartType && 1 !== datamartType && activeEditor) return activeEditor.fieldListFilters;
        }), __webpack_require__(46015)), pbi_tree_node_factory = __webpack_require__(82842), icons = __webpack_require__(82332), dateFormatter = __webpack_require__(69637), schemaObjectContainersSortOrder = ((node_sort_strategy_a = {}).Table = 0, 
        node_sort_strategy_a.View = 1, node_sort_strategy_a.UserDefinedFunction = 2, node_sort_strategy_a.StoredProcedure = 3, 
        node_sort_strategy_a), core = __webpack_require__(50423), localization_service = __webpack_require__(65181), feature_switch_service = __webpack_require__(9380), ModelToPbiTreeConverter = function() {
            function ModelToPbiTreeConverter(localizationService, featureSwitch, store) {
                this.localizationService = localizationService, this.featureSwitch = featureSwitch, 
                this.store = store, this.iconsAriaLabels = {}, this.getIconsAriaLabels();
            }
            return ModelToPbiTreeConverter.prototype.convertModelToPbiTree = function(models, fromDatahub, primaryDatamartObjectId, fromManageDefaultDataset, skipStore, datamartType, isFromPrimaryWarehouse) {
                var _this = this;
                debug.fF.assertValue(models, "models must be defined"), skipStore ? this.datamartType = datamartType : this.store.select(getDatamartType).pipe((0, 
                take.q)(1)).subscribe(function(type) {
                    _this.datamartType = type;
                }), this.models = models, this.fromDatahub = fromDatahub, this.fromManageDefaultDataset = fromManageDefaultDataset;
                var nodes = [], parent = {
                    data: null,
                    displayName: "root",
                    draggable: !1,
                    id: "model_root"
                };
                parent.children = nodes;
                var result = {
                    nodes,
                    parent
                };
                if (_.isEmpty(models.categories) && !skipStore) return result;
                var queryCategoryNode_1, primaryWarehouse = primaryDatamartObjectId && models.warehouses[primaryDatamartObjectId], queriesAreLoaded = primaryWarehouse && "LOADED" === primaryWarehouse.queriesLoadState;
                if (1 === this.datamartType || this.fromDatahub) _.forEach(models.categories, function(category) {
                    if ("Queries" !== category.name) {
                        var categoryNode = _this.convertCategoryToPbiTreeNode(parent, category, queriesAreLoaded);
                        nodes.push(categoryNode);
                    } else queryCategoryNode_1 = _this.convertQueryCategoryToPbiTreeNode(parent, queriesAreLoaded);
                }), _.isEmpty(queryCategoryNode_1) || nodes.push(queryCategoryNode_1); else if (this.fromManageDefaultDataset) _.forEach(models.schemas, function(schema) {
                    var isWarehousePrimary = !1;
                    if (skipStore ? isWarehousePrimary = isFromPrimaryWarehouse : _this.store.select(isDatamartPrimary(schema.warehouseMetadata.datamartObjectId)).pipe((0, 
                    take.q)(1)).subscribe(function(isPrimary) {
                        isWarehousePrimary = isPrimary;
                    }), schema.name !== dataModelSchemas._.informationSchema && schema.name !== dataModelSchemas._.sysSchema && isWarehousePrimary) {
                        var schemaNode = _this.convertSchemaToPbiTreeNode(parent, schema, isWarehousePrimary);
                        nodes.push(schemaNode);
                    }
                }); else {
                    _.forEach(models.warehouses, function(warehouse) {
                        var warehouseNode = _this.convertWarehouseToPbiTreeNode(parent, warehouse);
                        nodes.push(warehouseNode);
                    });
                    var queryCategoryNode = this.convertQueryCategoryToPbiTreeNode(parent, queriesAreLoaded);
                    nodes.push(queryCategoryNode);
                }
                return this.sortNodes(nodes), result;
            }, ModelToPbiTreeConverter.prototype.convertWarehouseToPbiTreeNode = function(parentNode, warehouse) {
                var _this = this;
                debug.fF.assertValue(warehouse, "warehouse must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined");
                var isWarehousePrimary = !0;
                this.store.select(isDatamartPrimary(warehouse.objectId)).pipe((0, take.q)(1)).subscribe(function(isPrimary) {
                    isWarehousePrimary = isPrimary;
                });
                var icon = {
                    type: 0,
                    glyph: ""
                }, node = {
                    data: warehouse,
                    displayName: warehouse.name,
                    icon,
                    checkable: !1,
                    draggable: !1,
                    id: "warehouse_".concat(warehouse.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !1,
                    menu: 1 !== this.datamartType && (this.featureSwitch.featureSwitches.warehouseCrossDbQueries && !isWarehousePrimary || this.featureSwitch.featureSwitches.datamartObjectContainerRefresh),
                    ariaLabel: "".concat(this.iconsAriaLabels[icon.glyph], " ").concat(warehouse.name),
                    expanded: isWarehousePrimary,
                    children: [],
                    inlineItems: this.getWarehouseInlineItems(warehouse),
                    alwaysShowInlineItems: !0
                };
                return warehouse.categoryUrns.forEach(function(urn) {
                    var categoryNode = _this.convertCategoryToPbiTreeNode(node, _this.models.categories[urn], isWarehousePrimary);
                    node.children.push(categoryNode);
                }), node;
            }, ModelToPbiTreeConverter.prototype.getWarehouseInlineItems = function(warehouse) {
                var _a, _b;
                if (warehouse.autoRefreshing || warehouse.autoRefreshingFromQueryExecution || warehouse.loadingForSearch || warehouse.isSyncRunning || warehouse.isObjectContainerRefreshing || "LOADING" === warehouse.schemaLoadState) return [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ];
                if ("LOADED" === warehouse.schemaLoadState && (null === (_b = null === (_a = warehouse.databaseDefinition) || void 0 === _a ? void 0 : _a.databaseDefinitionProperties) || void 0 === _b ? void 0 : _b.isStale)) {
                    var lastUpdatedAt = warehouse.databaseDefinition.databaseDefinitionProperties.lastUpdatedAt;
                    return [ {
                        type: pbi_tree_contracts.Q_.Spinner,
                        label: lastUpdatedAt ? this.localizationService.format("Datamart_StaleSchemaWithCache", (0, 
                        dateFormatter.Wh)(new Date(lastUpdatedAt).toLocaleString(), this.localizationService)) : this.getLocalizedString("Datamart_StaleSchemaWithoutCache")
                    } ];
                }
                return "ERROR" === warehouse.schemaLoadState && warehouse.hasLockTimeoutException ? [ {
                    type: pbi_tree_contracts.Q_.Spinner,
                    label: this.getLocalizedString("Datamart_StaleSchemaWithoutCache")
                } ] : [];
            }, ModelToPbiTreeConverter.prototype.convertQueryCategoryToPbiTreeNode = function(parentNode, queriesAreLoaded) {
                var category = _.find(this.models.categories, function(cat) {
                    return "Queries" === cat.name;
                });
                debug.fF.assertValue(category, "category must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined");
                var icon = {
                    type: 0,
                    glyph: ""
                }, node = {
                    data: category,
                    displayName: category.name,
                    icon,
                    checkable: !1,
                    draggable: !1,
                    id: "category_".concat(category.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !1,
                    menu: !1,
                    ariaLabel: "".concat(this.iconsAriaLabels[icon.glyph], " ").concat(category.name),
                    expanded: !0,
                    children: []
                };
                return this.convertQueries(node, queriesAreLoaded), node;
            }, ModelToPbiTreeConverter.prototype.convertCategoryToPbiTreeNode = function(parentNode, category, queriesAreLoaded, isFromPrimary) {
                var _this = this;
                debug.fF.assertValue(category, "category must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined");
                var node = {
                    data: category,
                    displayName: category.name,
                    icon: this.getTridentIcon(category),
                    checkable: !1,
                    draggable: !1,
                    id: "category_".concat(category.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !1,
                    menu: !(!this.featureSwitch.featureSwitches.datamartObjectContainerRefresh || 1 === this.datamartType),
                    ariaLabel: "".concat(this.iconsAriaLabels[this.getDefaultIcon(category)], " ").concat(category.name),
                    expanded: !1,
                    children: [],
                    inlineItems: this.getCategoryInlineItems(category),
                    alwaysShowInlineItems: !0
                };
                switch (category.name) {
                  case "Tables":
                    return category.childrenUrns.forEach(function(urn) {
                        var result = _this.convertTableToPbiTreeNode(node, _this.models.tables[urn]);
                        node.children.push(result);
                    }), node;

                  case "Schemas":
                    return this.featureSwitch.featureSwitches.sqlQueryTemplates && 4 === this.datamartType && isFromPrimary && (node.menu = !0), 
                    category.childrenUrns.forEach(function(urn) {
                        var schemaNode = _this.convertSchemaToPbiTreeNode(node, _this.models.schemas[urn], isFromPrimary);
                        node.children.push(schemaNode);
                    }), node;

                  case "Queries":
                    return this.convertQueries(node, queriesAreLoaded), node;

                  case "Security":
                    return category.childrenUrns.forEach(function(urn) {
                        var databaseRoleContainerNode = _this.convertDatabaseRoleContainerToPbiTreeNode(node, _this.models.databaseRoleContainers[urn]);
                        node.children.push(databaseRoleContainerNode);
                    }), node;

                  default:
                    return node;
                }
            }, ModelToPbiTreeConverter.prototype.getCategoryInlineItems = function(category) {
                return category.isObjectContainerRefreshing ? [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ] : [];
            }, ModelToPbiTreeConverter.prototype.convertDatabaseRoleContainerToPbiTreeNode = function(parentNode, databaseRoleContainer) {
                var _this = this;
                debug.fF.assertValue(databaseRoleContainer, "databaseRoleContainer must be defined"), 
                debug.fF.assertValue(parentNode, "parentNode must be defined");
                var node = {
                    data: databaseRoleContainer,
                    displayName: databaseRoleContainer.childrenRoleType,
                    icon: this.getTridentIcon(databaseRoleContainer),
                    checkable: !1,
                    draggable: !1,
                    id: "databaseRoleContainer_".concat(databaseRoleContainer.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !1,
                    menu: !1,
                    ariaLabel: "".concat(this.iconsAriaLabels[this.getDefaultIcon(databaseRoleContainer)], " ").concat(databaseRoleContainer.name),
                    expanded: !1,
                    children: [],
                    inlineItems: this.getDatabaseRoleContainerInlineItems(databaseRoleContainer),
                    forceExpandable: !0
                };
                return databaseRoleContainer.databaseRoleUrns.forEach(function(urn) {
                    var result = _this.convertDatabaseRoleToPbiTreeNode(node, _this.models.databaseRoles[urn]);
                    node.children.push(result);
                }), node;
            }, ModelToPbiTreeConverter.prototype.getDatabaseRoleContainerInlineItems = function(container) {
                return container.loadingForIncrementalLoad ? [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ] : [];
            }, ModelToPbiTreeConverter.prototype.convertQueries = function(node, queriesAreLoaded) {
                var _this = this;
                if (this.featureSwitch.featureSwitches.sharedQueries) {
                    var isSharedQueriesNode_1 = this.convertQueryToSubQueries("SharedQueries", this.getLocalizedString("SharedQueries"), "SharedQuery", node, queriesAreLoaded), myQueriesNode_1 = this.convertQueryToSubQueries("MyQueries", this.getLocalizedString("MyQueries"), "MyQuery", node, queriesAreLoaded);
                    _.forEach(this.models.queries, function(query) {
                        var queryNode = _this.convertQueryToPbiTreeNode(query);
                        queryNode.parent = query.isShared ? isSharedQueriesNode_1 : myQueriesNode_1, queryNode.parent.children.push(queryNode);
                    }), node.children.push(myQueriesNode_1), node.children.push(isSharedQueriesNode_1);
                } else _.forEach(this.models.queries, function(query) {
                    var queryNode = _this.convertQueryToPbiTreeNode(query);
                    queryNode.parent = node, node.children.push(queryNode);
                });
            }, ModelToPbiTreeConverter.prototype.convertDatabaseRoleToPbiTreeNode = function(parentNode, databaseRole) {
                return debug.fF.assertValue(databaseRole, "databaseRole must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined"), 
                this.convertLeafObjectsToPbiTreeNode(parentNode, databaseRole, "databaseRole", this.getTridentIcon(databaseRole), !1);
            }, ModelToPbiTreeConverter.prototype.convertQueryToSubQueries = function(urn, name, objectType, parentNode, queriesAreLoaded) {
                var tridentIcon = {
                    type: 1,
                    sheet: "icons",
                    symbolId: "tridentFolderRegularIcon"
                }, data = {
                    objectType,
                    name,
                    urn
                };
                return {
                    data,
                    displayName: data.name,
                    icon: tridentIcon,
                    checkable: !1,
                    draggable: !1,
                    id: "category_".concat(urn),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !1,
                    menu: !0,
                    ariaLabel: "".concat(this.iconsAriaLabels[tridentIcon.symbolId], " ").concat(data.name),
                    expanded: !0,
                    inlineItems: queriesAreLoaded ? void 0 : [ {
                        type: pbi_tree_contracts.Q_.Spinner
                    } ],
                    children: []
                };
            }, ModelToPbiTreeConverter.prototype.convertSchemaToPbiTreeNode = function(parentNode, schema, isFromPrimary) {
                var _this = this;
                debug.fF.assertValue(schema, "schema must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined");
                var icon_glyph = this.getDefaultIcon(schema), node = {
                    data: schema,
                    displayName: schema.name,
                    icon: this.getTridentIcon(schema),
                    checkable: this.fromManageDefaultDataset,
                    draggable: !1,
                    id: "schema_".concat(schema.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !1,
                    menu: !(!this.featureSwitch.featureSwitches.sqlQueryTemplates || 4 !== this.datamartType || !isFromPrimary || this.fromManageDefaultDataset),
                    ariaLabel: "".concat(this.iconsAriaLabels[icon_glyph], " ").concat(schema.name),
                    expanded: !1,
                    children: [],
                    forceExpandable: !0
                };
                return schema.schemaObjectContainersUrns.forEach(function(urn) {
                    if (_this.fromManageDefaultDataset && "StoredProcedure" !== _this.models.schemaObjectContainers[urn].childrenType && "UserDefinedFunction" !== _this.models.schemaObjectContainers[urn].childrenType || !_this.fromManageDefaultDataset) {
                        var result = _this.convertSchemaObjectContainerToPbiTreeNode(node, _this.models.schemaObjectContainers[urn], isFromPrimary);
                        node.children.push(result);
                    }
                    _this.updateTreeNodeState(node);
                }), node;
            }, ModelToPbiTreeConverter.prototype.convertSchemaObjectContainerToPbiTreeNode = function(parentNode, schemaObjectContainer, isFromPrimary) {
                var _this = this;
                debug.fF.assertValue(schemaObjectContainer, "schemaObjectContainer must be defined"), 
                debug.fF.assertValue(parentNode, "parentNode must be defined");
                var node = {
                    data: schemaObjectContainer,
                    displayName: schemaObjectContainer.name,
                    icon: this.getTridentIcon(schemaObjectContainer),
                    checkable: this.fromManageDefaultDataset,
                    draggable: !1,
                    id: "schemaObjectContainer_".concat(schemaObjectContainer.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !1,
                    menu: this.getSchemaObjectContainerMenu(schemaObjectContainer, isFromPrimary) && !this.fromManageDefaultDataset,
                    ariaLabel: "".concat(this.iconsAriaLabels[this.getDefaultIcon(schemaObjectContainer)], " ").concat(schemaObjectContainer.name),
                    expanded: !1,
                    children: [],
                    forceExpandable: !0,
                    inlineItems: this.getSchemaObjectContainerInlineItems(schemaObjectContainer),
                    alwaysShowInlineItems: !0
                };
                switch (schemaObjectContainer.childrenType) {
                  case "Table":
                    return schemaObjectContainer.childrenUrns.forEach(function(urn) {
                        var result = _this.convertTableToPbiTreeNode(node, _this.models.tables[urn]);
                        node.children.push(result);
                    }), this.updateTreeNodeState(node), node;

                  case "View":
                    return this.featureSwitch.featureSwitches.sqlQueryTemplates && 2 === this.datamartType && (node.menu = !0), 
                    schemaObjectContainer.childrenUrns.forEach(function(urn) {
                        var result = _this.convertViewToPbiTreeNode(node, _this.models.views[urn]);
                        node.children.push(result);
                    }), this.updateTreeNodeState(node), node;

                  case "StoredProcedure":
                    return this.featureSwitch.featureSwitches.sqlQueryTemplates && 2 === this.datamartType && (node.menu = !0), 
                    schemaObjectContainer.childrenUrns.forEach(function(urn) {
                        var result = _this.convertStoredProcedureToPbiTreeNode(node, _this.models.storedProcedures[urn]);
                        node.children.push(result);
                    }), node;

                  case "UserDefinedFunction":
                    return schemaObjectContainer.childrenUrns.forEach(function(urn) {
                        var result = _this.convertUserDefinedFunctionToPbiTreeNode(node, _this.models.userDefinedFunctions[urn]);
                        node.children.push(result);
                    }), node;

                  default:
                    return node;
                }
            }, ModelToPbiTreeConverter.prototype.getSchemaObjectContainerMenu = function(container, isFromPrimary) {
                return !container.loadingForIncrementalLoad && !!(this.featureSwitch.featureSwitches.sqlQueryTemplates && 4 === this.datamartType && isFromPrimary || this.featureSwitch.featureSwitches.datamartObjectContainerRefresh && 1 !== this.datamartType);
            }, ModelToPbiTreeConverter.prototype.getSchemaObjectContainerInlineItems = function(container) {
                return container.loadingForIncrementalLoad || container.isObjectContainerRefreshing ? [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ] : [];
            }, ModelToPbiTreeConverter.prototype.convertTableToPbiTreeNode = function(parentNode, table) {
                var _this = this;
                debug.fF.assertValue(table, "table must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined");
                var node = pbi_tree_node_factory._.createBuilder(this.localizationService).createDefaultPbiTreeNode(table.name, table, this.getTridentIcon(table)).extendPbiTreeNode({
                    draggable: !this.fromDatahub,
                    id: "table_".concat(table.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !this.fromManageDefaultDataset && table.canEdit,
                    checkable: this.fromManageDefaultDataset,
                    checked: table.isBiObject,
                    disabled: !!this.fromManageDefaultDataset && !_.isEmpty(table.measures),
                    children: [],
                    alwaysShowInlineItems: !0,
                    inlineItems: this.getTableInlineItems(table),
                    menu: !this.fromDatahub && !this.fromManageDefaultDataset,
                    expanded: !1
                }).getPbiTreeNode();
                return this.fromManageDefaultDataset || (table.columns.forEach(function(colUrn) {
                    var result = _this.convertColumnToPbiTreeNode(node, _this.models.columns[colUrn]);
                    node.children.push(result);
                }), table.measures.forEach(function(measureUrn) {
                    var result = _this.convertMeasureToPbiTreeNode(node, _this.models.measures[measureUrn]);
                    node.children.push(result);
                })), node;
            }, ModelToPbiTreeConverter.prototype.getTableInlineItems = function(table) {
                var errorInlineItem = [ {
                    type: pbi_tree_contracts.Q_.Button,
                    id: "table_sync_error",
                    icon: {
                        type: 1,
                        sheet: "fluentui-icons",
                        symbolId: "dismiss_circle_20_filled"
                    },
                    label: this.getLocalizedString("SyncError")
                } ], warningInlineItem = [ {
                    type: pbi_tree_contracts.Q_.Icon,
                    id: "table_sync_warning",
                    icon: {
                        type: 1,
                        sheet: "fluentui-icons",
                        symbolId: "warning_20_filled"
                    },
                    label: this.getLocalizedString("SyncWarning")
                } ];
                return table.generatingSqlScript ? [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ] : _.isEmpty(table.syncWarnings) ? _.isEmpty(table.syncErrors) ? [] : errorInlineItem : warningInlineItem;
            }, ModelToPbiTreeConverter.prototype.convertQueryToPbiTreeNode = function(query) {
                return debug.fF.assertValue(query, "query must be defined"), pbi_tree_node_factory._.createBuilder(this.localizationService).createDefaultPbiTreeNode(query.name, _.clone(query), this.getTridentIcon(query)).extendPbiTreeNode({
                    draggable: !1,
                    id: "query_".concat(query.urn),
                    tooltip: !0,
                    editable: !0,
                    children: [],
                    menu: !0
                }).getPbiTreeNode();
            }, ModelToPbiTreeConverter.prototype.convertViewToPbiTreeNode = function(parentNode, view) {
                var _this = this;
                debug.fF.assertValue(view, "view must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined");
                var node = pbi_tree_node_factory._.createBuilder(this.localizationService).createDefaultPbiTreeNode(view.name, view, this.getTridentIcon(view)).extendPbiTreeNode({
                    draggable: !this.fromDatahub,
                    id: "view_".concat(view.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: !this.fromManageDefaultDataset && view.canEdit,
                    checkable: this.fromManageDefaultDataset,
                    checked: view.isBiObject,
                    disabled: !!this.fromManageDefaultDataset && !_.isEmpty(view.measures),
                    children: [],
                    menu: !this.fromDatahub && !this.fromManageDefaultDataset,
                    alwaysShowInlineItems: !0,
                    inlineItems: this.getViewInlineItems(view)
                }).getPbiTreeNode();
                return this.fromManageDefaultDataset || (view.columns.forEach(function(colUrn) {
                    var result = _this.convertColumnToPbiTreeNode(node, _this.models.columns[colUrn]);
                    node.children.push(result);
                }), view.measures.forEach(function(measureUrn) {
                    var result = _this.convertMeasureToPbiTreeNode(node, _this.models.measures[measureUrn]);
                    node.children.push(result);
                })), node;
            }, ModelToPbiTreeConverter.prototype.getViewInlineItems = function(view) {
                return view.generatingSqlScript ? [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ] : [];
            }, ModelToPbiTreeConverter.prototype.convertColumnToPbiTreeNode = function(parentNode, column) {
                return debug.fF.assertValue(column, "column must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined"), 
                this.convertLeafObjectsToPbiTreeNode(parentNode, column, "column", this.getColumnDataTypeTridentIcon(column), !this.fromDatahub);
            }, ModelToPbiTreeConverter.prototype.convertMeasureToPbiTreeNode = function(parentNode, measure) {
                return debug.fF.assertValue(measure, "measure must be defined"), debug.fF.assertValue(parentNode, "parentNode must be defined"), 
                this.convertLeafObjectsToPbiTreeNode(parentNode, measure, "measure", this.getTridentIcon(measure), !this.fromDatahub);
            }, ModelToPbiTreeConverter.prototype.convertStoredProcedureToPbiTreeNode = function(parentNode, storedProcedure) {
                return debug.fF.assertValue(storedProcedure, "storedProcedure must be defined"), 
                debug.fF.assertValue(parentNode, "parentNode must be defined"), pbi_tree_node_factory._.createBuilder(this.localizationService).createDefaultPbiTreeNode(storedProcedure.name, storedProcedure, this.getTridentIcon(storedProcedure)).extendPbiTreeNode({
                    draggable: !1,
                    id: "storedProcedure_".concat(storedProcedure.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: storedProcedure.canEdit,
                    children: [],
                    menu: !this.fromDatahub,
                    alwaysShowInlineItems: !0,
                    inlineItems: this.getstoredProcedureInlineItems(storedProcedure)
                }).getPbiTreeNode();
            }, ModelToPbiTreeConverter.prototype.getstoredProcedureInlineItems = function(storedProcedure) {
                return storedProcedure.generatingSqlScript ? [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ] : [];
            }, ModelToPbiTreeConverter.prototype.convertUserDefinedFunctionToPbiTreeNode = function(parentNode, userDefinedFunction) {
                debug.fF.assertValue(userDefinedFunction, "userDefinedFunction must be defined"), 
                debug.fF.assertValue(parentNode, "parentNode must be defined");
                var icon = {
                    type: 0,
                    glyph: this.getDefaultIcon(userDefinedFunction)
                };
                return pbi_tree_node_factory._.createBuilder(this.localizationService).createDefaultPbiTreeNode(userDefinedFunction.name, userDefinedFunction, icon).extendPbiTreeNode({
                    draggable: !1,
                    id: "userDefinedFunction_".concat(userDefinedFunction.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: userDefinedFunction.canEdit,
                    children: [],
                    menu: !1,
                    alwaysShowInlineItems: !0,
                    inlineItems: this.getUserDefinedFunctionInlineItems(userDefinedFunction)
                }).getPbiTreeNode();
            }, ModelToPbiTreeConverter.prototype.getUserDefinedFunctionInlineItems = function(userDefinedFunction) {
                return userDefinedFunction.generatingSqlScript ? [ {
                    type: pbi_tree_contracts.Q_.Spinner
                } ] : [];
            }, ModelToPbiTreeConverter.prototype.convertLeafObjectsToPbiTreeNode = function(parentNode, target, typeName, icon, draggable) {
                return void 0 === draggable && (draggable = !0), debug.fF.assertValue(target, "target must be defined"), 
                debug.fF.assertValue(parentNode, "parentNode must be defined"), pbi_tree_node_factory._.createBuilder(this.localizationService).createDefaultPbiTreeNode(target.name, target, icon).extendPbiTreeNode({
                    draggable,
                    id: "".concat(typeName, "_").concat(target.name),
                    tooltip: !0,
                    parent: parentNode,
                    editable: target.canEdit,
                    children: [],
                    menu: !this.fromDatahub
                }).getPbiTreeNode();
            }, ModelToPbiTreeConverter.prototype.sortNodes = function(nodes, parent) {
                if (!_.isEmpty(nodes) && nodes) {
                    !function(nodes, parent) {
                        _.isEmpty(nodes) || null != parent && "model_root" !== parent.id && (isSchema(parent.data) ? nodes.sort(function(_a, _b) {
                            var aData = _a.data, bData = _b.data;
                            return isSchemaObjectContainer(aData) && isSchemaObjectContainer(bData) ? schemaObjectContainersSortOrder[aData.childrenType] - schemaObjectContainersSortOrder[bData.childrenType] : 0;
                        }) : isTable(nodes[0].data) ? function(nodes) {
                            var measureGroups = [], tables = [];
                            (function(nodes, measureGroups, tables) {
                                if (void 0 === measureGroups && (measureGroups = []), void 0 === tables && (tables = []), 
                                !_.isEmpty(nodes)) for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                                    var node = nodes_1[_i];
                                    isTable(node.data) ? node.data.isMeasureGroup ? measureGroups.push(node) : tables.push(node) : debug.fF.assertFail("node data should be table type");
                                }
                            })(nodes, measureGroups, tables), measureGroups.sort(function(a, b) {
                                return a.data.name.localeCompare(b.data.name);
                            }), tables.sort(function(a, b) {
                                return a.data.name.localeCompare(b.data.name);
                            });
                            for (var i = 0; i < measureGroups.length; i++) nodes[i] = measureGroups[i];
                            for (i = 0; i < tables.length; i++) nodes[measureGroups.length + i] = tables[i];
                        }(nodes) : isColumn(nodes[0].data) ? nodes.sort(function(_a, _b) {
                            var aData = _a.data, bData = _b.data;
                            return isColumn(aData) && isColumn(bData) ? aData.index - bData.index : 0;
                        }) : nodes.sort(function(a, b) {
                            return a.data.name.localeCompare(b.data.name);
                        }));
                    }(nodes, parent);
                    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                        var node = nodes_1[_i];
                        this.sortNodes(null == node ? void 0 : node.children, node);
                    }
                }
            }, ModelToPbiTreeConverter.prototype.getDefaultIcon = function(target) {
                return isMeasure(target) ? target.isChangeDetection ? icons.I9 : icons.ou : isTable(target) ? icons.b$ : isColumn(target) ? this.getDefaultColumnIcon(target) : isView(target) ? icons.qV : isSchema(target) || isSchemaObjectContainer(target) || isDatabaseRoleContainer(target) || isCategory(target) ? icons.TC : isStoredProcedure(target) || (obj = target) && "UserDefinedFunction" === obj.objectType ? icons.O9 : "";
                var obj;
            }, ModelToPbiTreeConverter.prototype.getTridentIcon = function(target) {
                var obj, symbolId = "";
                return isTable(target) && (symbolId = "tridentTableRegularIcon"), isColumn(target) && (symbolId = "tridentColumnRegularIcon"), 
                isMeasure(target) && (symbolId = "tridentMeasureRegularIcon"), isSchema(target) && (symbolId = "tridentSchemaRegularIcon"), 
                (isSchemaObjectContainer(target) || isDatabaseRoleContainer(target) || isCategory(target)) && (symbolId = "tridentFolderRegularIcon"), 
                isView(target) && (symbolId = "tridentViewRegularIcon"), isStoredProcedure(target) && (symbolId = "tridentStoredProcedureRegularIcon"), 
                (obj = target) && "Query" === obj.objectType && (symbolId = 0 === target.type ? "tridentSQLQueryRegularIcon" : "tridentVisualQueryRegularIcon"), 
                function(obj) {
                    return obj && "DatabaseRole" === obj.objectType;
                }(target) && (symbolId = "tridentPersonLockIcon"), {
                    type: 1,
                    sheet: "icons",
                    symbolId
                };
            }, ModelToPbiTreeConverter.prototype.getDefaultColumnIcon = function(target) {
                return target.isGrouping ? icons.ur : (column = target) && "Calculated" === column.columnType ? isNumericColumn(target) ? icons.Nc : icons.O9 : target.isDateTime ? icons.G3 : target.isDefaultLabel || target.isKey ? icons.WE : isNumericColumn(target) && "None" !== target.summarizeBy ? icons.dz : icons.aI;
                var column;
            }, ModelToPbiTreeConverter.prototype.getColumnDataTypeTridentIcon = function(column) {
                var symbolId = "tridentColumnRegularIcon";
                switch (column.sqlDataType) {
                  case 4:
                    symbolId = "tridentCalendar";
                    break;

                  case 5:
                    symbolId = "tridentClock";
                    break;

                  case 6:
                    symbolId = "tridentCalendarClock";
                    break;

                  case 19:
                    symbolId = "tridentMathExponent";
                    break;

                  case 3:
                    symbolId = "tridentUniqueIdentifier";
                    break;

                  case 10:
                  case 20:
                    symbolId = "tridentInteger";
                    break;

                  case 9:
                    symbolId = "tridentShortNumber";
                    break;

                  case 12:
                    symbolId = "tridentRealNumber";
                    break;

                  case 15:
                    symbolId = "tridentFloat";
                    break;

                  case 18:
                    symbolId = "tridentBit";
                    break;

                  case 22:
                    symbolId = "tridentLong";
                    break;

                  case 23:
                    symbolId = "tridentBinary";
                    break;

                  case 26:
                  case 24:
                    symbolId = "tridentString";
                }
                return {
                    type: 1,
                    sheet: "icons",
                    symbolId
                };
            }, ModelToPbiTreeConverter.prototype.getIconsAriaLabels = function() {
                this.iconsAriaLabels[icons.ou] = this.getLocalizedString("Icon_AriaLabel_MeasureField"), 
                this.iconsAriaLabels[icons.zF] = this.getLocalizedString("kpi_Tooltip"), this.iconsAriaLabels[icons.EF] = this.getLocalizedString("Icon_AriaLabel_HierarchyField"), 
                this.iconsAriaLabels[icons.tV] = this.getLocalizedString("Icon_AriaLabel_CalculatedTable"), 
                this.iconsAriaLabels[icons.vc] = this.getLocalizedString("Icon_AriaLabel_MeasureGroupTable"), 
                this.iconsAriaLabels[icons.b$] = this.getLocalizedString("Table_ToolTip"), this.iconsAriaLabels[icons.ur] = this.getLocalizedString("Icon_AriaLabel_GroupField"), 
                this.iconsAriaLabels[icons.O9] = this.getLocalizedString("Icon_AriaLabel_NonNumericCalculatedField"), 
                this.iconsAriaLabels[icons.Nc] = this.getLocalizedString("Icon_AriaLabel_NumericCalculatedField"), 
                this.iconsAriaLabels[icons.dz] = this.getLocalizedString("Icon_AriaLabel_NumericField"), 
                this.iconsAriaLabels[icons.Yq] = this.getLocalizedString("Icon_AriaLabel_GeoField"), 
                this.iconsAriaLabels[icons.G3] = this.getLocalizedString("Icon_AriaLabel_CalendarField"), 
                this.iconsAriaLabels[icons.WE] = this.getLocalizedString("Icon_AriaLabel_IdentifyField"), 
                this.iconsAriaLabels[icons.LG] = this.getLocalizedString("Icon_AriaLabel_Parameter"), 
                this.iconsAriaLabels[icons.aI] = this.getLocalizedString("Icon_AriaLabel_TableColumn"), 
                this.iconsAriaLabels[icons.TC] = this.getLocalizedString("Display_Folder");
            }, ModelToPbiTreeConverter.prototype.getLocalizedString = function(str) {
                return "".concat(this.localizationService.get(str));
            }, ModelToPbiTreeConverter.prototype.updateTreeNodeState = function(node) {
                var nonDisabledNodes = node.children.filter(function(node) {
                    return !node.disabled;
                }), everyNodeChecked = node.children.length > 0 && node.children.every(function(node) {
                    return node.checked;
                });
                node.checked = everyNodeChecked, node.isIndeterminate = node.children.some(function(child) {
                    return child.checked || child.isIndeterminate;
                }) && !everyNodeChecked, node.disabled = !!this.fromManageDefaultDataset && 0 === nonDisabledNodes.length;
            }, ModelToPbiTreeConverter.\u0275fac = function(t) {
                return new (t || ModelToPbiTreeConverter)(core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](ngrx_store.yh));
            }, ModelToPbiTreeConverter.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ModelToPbiTreeConverter,
                factory: ModelToPbiTreeConverter.\u0275fac,
                providedIn: "root"
            }), ModelToPbiTreeConverter;
        }(), pbi_tree_options = __webpack_require__(16789), SearchStrategy = function() {
            function SearchStrategy(defaultSearchStrategy) {
                this.defaultSearchStrategy = defaultSearchStrategy;
            }
            return SearchStrategy.prototype.applySearchState = function(_a) {
                var _b, tree = _a.tree, term = _a.term;
                term && term.length || _a.filter ? this.noSearchState || (this.noSearchState = tree.treeControl.expansionModel.selected, 
                tree.virtualScroll.scrollToIndex(0), tree.expandAll(!0, !1)) : this.noSearchState && (tree.collapseAll(!0, !1), 
                (_b = tree.treeControl.expansionModel).select.apply(_b, this.noSearchState || []), 
                tree.virtualScroll.scrollToIndex(0), this.noSearchState = null);
            }, SearchStrategy.prototype.search = function(_a) {
                return this.defaultSearchStrategy.search({
                    flatNodes: _a.flatNodes,
                    search: _a.search
                });
            }, SearchStrategy.prototype.filter = function(flatNodes, filter) {
                var _a;
                if (!filter) return flatNodes;
                for (var filteredNodes = [], nodeContext = [], i = 0; i < flatNodes.length; i++) {
                    var flatNode = flatNodes[i];
                    if (flatNode.expandable) {
                        for (;nodeContext.length && flatNode.level <= nodeContext[nodeContext.length - 1].level; ) nodeContext.pop();
                        nodeContext.push(flatNode);
                    }
                    var objectType = flatNode.node.data.objectType;
                    if (this.isKeyOfFieldListFilters(objectType, filter) && this.shouldIncludeNode(filter, objectType, flatNode.node.data)) {
                        if (nodeContext.length) {
                            for (;!flatNode.expandable && nodeContext.length && flatNode.level <= nodeContext[nodeContext.length - 1].level; ) nodeContext.pop();
                            filteredNodes.push.apply(filteredNodes, nodeContext || []), nodeContext = [];
                        }
                        if (flatNode.expandable) {
                            for (i++; i < flatNodes.length && flatNode.level < flatNodes[i].level; ) (null === (_a = filter.Schema) || void 0 === _a ? void 0 : _a.length) > 0 && (filter.Table || filter.View) ? this.shouldInlcudeNodeWithSchemaFilter(filter, flatNodes[i].node.data) && filteredNodes.push(flatNodes[i]) : filteredNodes.push(flatNodes[i]), 
                            i++;
                            i = i >= flatNodes.length ? i : i - 1;
                        } else filteredNodes.push(flatNode);
                    }
                }
                return filteredNodes;
            }, SearchStrategy.prototype.isKeyOfFieldListFilters = function(key, filters) {
                return key in filters;
            }, SearchStrategy.prototype.shouldInlcudeNodeWithSchemaFilter = function(filter, data) {
                return "SchemaObjectContainer" !== data.objectType ? this.shouldIncludeNode(filter, data.objectType, data) : this.isKeyOfFieldListFilters(data.childrenType, filter) ? filter[data.childrenType] : void 0;
            }, SearchStrategy.prototype.shouldIncludeNode = function(filter, objectType, data) {
                var _a;
                if (this.isKeyOfFieldListFilters(objectType, filter)) {
                    var hasSchemaAndOtherFilters = (null === (_a = filter.Schema) || void 0 === _a ? void 0 : _a.length) > 0 && (filter.Table || filter.View);
                    return "Schema" === objectType ? this.hasSchemaFilter(filter, data.name) : hasSchemaAndOtherFilters ? this.hasSchemaFilter(filter, data.schemaName) && filter[objectType] : filter[objectType];
                }
            }, SearchStrategy.prototype.hasSchemaFilter = function(filter, schemaName) {
                var schemaFilters = filter.Schema;
                return null == schemaFilters ? void 0 : schemaFilters.includes(schemaName);
            }, SearchStrategy.\u0275fac = function(t) {
                return new (t || SearchStrategy)(core["\u0275\u0275inject"](pbi_tree_options.XI));
            }, SearchStrategy.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: SearchStrategy,
                factory: SearchStrategy.\u0275fac,
                providedIn: "root"
            }), SearchStrategy;
        }(), DirectLakePbiTreeConverterModule = function() {
            function DirectLakePbiTreeConverterModule() {}
            return DirectLakePbiTreeConverterModule.\u0275fac = function(t) {
                return new (t || DirectLakePbiTreeConverterModule);
            }, DirectLakePbiTreeConverterModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: DirectLakePbiTreeConverterModule
            }), DirectLakePbiTreeConverterModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ ModelToPbiTreeConverter, SearchStrategy ],
                imports: [ common.CommonModule, localization_module.v, UILibrary_module.g ]
            }), DirectLakePbiTreeConverterModule;
        }(), tri_dropdown = __webpack_require__(44913), tri_workspace_icon = __webpack_require__(22645), WorkspacePickerModule = function() {
            function WorkspacePickerModule() {}
            return WorkspacePickerModule.\u0275fac = function(t) {
                return new (t || WorkspacePickerModule);
            }, WorkspacePickerModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: WorkspacePickerModule
            }), WorkspacePickerModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, localization_module.v, tri_dropdown.lK, tri_workspace_icon.V ]
            }), WorkspacePickerModule;
        }(), tri_checkbox = __webpack_require__(14977), tri_link = __webpack_require__(16149), tri_list_filter = __webpack_require__(30435), tri_search_box = __webpack_require__(46303), tri_spinner_module = __webpack_require__(5915), tri_svg_icon = __webpack_require__(17177), ManageDatasetServiceInjectionToken = new core.InjectionToken("ManageDatasetServiceInjectionToken"), template_dialog_payload_service = __webpack_require__(67489), ngrx_effects = __webpack_require__(60756), map = __webpack_require__(14172), mergeMap = __webpack_require__(42195), catchError = __webpack_require__(59822), errorDetailsHelper = __webpack_require__(94853), SeeThroughModelingEditTablesConfirmButtonClick = telemetryHelpers.cx["PBI.SeeThroughModeling.EditTables.ConfirmButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughModeling.EditTables.ConfirmButton.Click"), SeeThroughModelingEditTablesCancelButtonClick = telemetryHelpers.cx["PBI.SeeThroughModeling.EditTables.CancelButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughModeling.EditTables.CancelButton.Click"), SeeThroughModelingOnRefreshSchema = telemetryHelpers.cx["PBI.SeeThroughModeling.OnRefreshSchema"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughModeling.OnRefreshSchema"), SeeThroughDatasetGetDatamartVersion = telemetryHelpers.cx["PBI.SeeThroughDataset.GetDatamartVersion"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughDataset.GetDatamartVersion"), SeeThroughDatasetLockDatamart = telemetryHelpers.cx["PBI.SeeThroughDataset.LockDatamart"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughDataset.LockDatamart"), SeeThroughDatasetGetDatamartPermission = telemetryHelpers.cx["PBI.SeeThroughDataset.GetDatamartPermission"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughDataset.GetDatamartPermission"), SeeThroughDatasetOnAddOrRemoveTableInBI = telemetryHelpers.cx["PBI.SeeThroughDataset.OnAddOrRemoveTableInBI"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughDataset.OnAddOrRemoveTableInBI"), SeeThroughDatasetOnGetDatamartSchema = telemetryHelpers.cx["PBI.SeeThroughDataset.OnGetDatamartSchema"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughDataset.OnGetDatamartSchema"), SeeThroughDatasetOnCreateSeeThroughModel = telemetryHelpers.cx["PBI.SeeThroughDataset.OnCreateSeeThroughModel"] = (0, 
        telemetryHelpers.b1)("PBI.SeeThroughDataset.OnCreateSeeThroughModel"), DatamartOnAddOrRemoveTableInBI = telemetryHelpers.cx["PBI.Datamart.OnAddOrRemoveTableInBI"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.OnAddOrRemoveTableInBI"), DatamartRibbonNewReportManageDefaultDatasetClick = telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.ManageDefaultDataset.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.ManageDefaultDataset.Click"), DatamartRibbonAutoUpdateDefaultDatasetOnAddOrRemoveTableInBI = telemetryHelpers.cx["PBI.Datamart.Ribbon.AutoUpdateDefaultDataset.OnAddOrRemoveTableInBI."] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.AutoUpdateDefaultDataset.OnAddOrRemoveTableInBI."), DatamartRibbonNewReportConfirmButtonClick = telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.ConfirmButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.ConfirmButton.Click"), DatamartRibbonUpdateDefaultDatasetCancelButtonClick = telemetryHelpers.cx["PBI.Datamart.Ribbon.UpdateDefaultDataset.CancelButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.UpdateDefaultDataset.CancelButton.Click"), telemetry_service = __webpack_require__(96608), Telemetry = __webpack_require__(21617), constants = __webpack_require__(2142), throwError = __webpack_require__(60225), of = __webpack_require__(11547), empty = __webpack_require__(37272), timer = __webpack_require__(40133), retry = __webpack_require__(19828), timeout = __webpack_require__(24753), expand = __webpack_require__(96038), tap = __webpack_require__(17653), filter = __webpack_require__(59973), takeUntil = __webpack_require__(83317), DatamartQueryPollBatch = (telemetryHelpers.cx["PBI.Datamart.MashupEditor.NewClient"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.MashupEditor.NewClient"), telemetryHelpers.cx["PBI.Datamart.MashupEditor.Exception"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.MashupEditor.Exception"), telemetryHelpers.cx["PBI.Datamart.MashupEditor.Cancel"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.MashupEditor.Cancel"), telemetryHelpers.cx["PBI.Datamart.Measure.New"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Measure.New"), telemetryHelpers.cx["PBI.Datamart.DataExplorer.Preview"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.DataExplorer.Preview"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.AutocompletionAccepted"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.AutocompletionAccepted"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.Autocompletion.Cancelled"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.Autocompletion.Cancelled"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.Autocompletion.Accepted"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.Autocompletion.Accepted"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.Autocompletion.Feedback"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.Autocompletion.Feedback"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.Autocompletion.Generated"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.Autocompletion.Generated"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.Autocompletion.NoResponse"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.Autocompletion.NoResponse"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.ExplainQuery.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.ExplainQuery.Click"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.ExplainQuery"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.ExplainQuery"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.ExplainQuery.fragments"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.ExplainQuery.fragments"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.ExplainQuery.PromptException"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.ExplainQuery.PromptException"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.FixQuery"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.FixQuery"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.FixQuery.click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.FixQuery.click"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.FixQuery.Fragments"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.FixQuery.Fragments"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.FixQuery.FragmentException"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.FixQuery.FragmentException"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.Sql"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.Sql"), telemetryHelpers.cx.PBI_Datamart_SqlEditor_Run = (0, 
        telemetryHelpers.b1)("PBI_Datamart_SqlEditor_Run"), telemetryHelpers.cx.PBI_Datamart_SqlEditor_Save = (0, 
        telemetryHelpers.b1)("PBI_Datamart_SqlEditor_Save"), telemetryHelpers.cx.PBI_Datamart_SqlEditor_Cancel = (0, 
        telemetryHelpers.b1)("PBI_Datamart_SqlEditor_Cancel"), telemetryHelpers.cx["PBI.Datamart.SqlEditor.OpenInExcel"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SqlEditor.OpenInExcel"), telemetryHelpers.cx["PBI.Datamart.MashupEditor.OpenInExcel"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.MashupEditor.OpenInExcel"), telemetryHelpers.cx["PBI.Datamart.MashupEditor.VisualizeResults"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.MashupEditor.VisualizeResults"), telemetryHelpers.cx["PBI.Datamart.Copilot.Exception"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Copilot.Exception"), telemetryHelpers.cx["PBI.Datamart.Copilot.GenerateSql"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Copilot.GenerateSql"), telemetryHelpers.cx["PBI.Datamart.Copilot.Ask.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Copilot.Ask.Click"), telemetryHelpers.cx["PBI.Datamart.Copilot.HelpPane.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Copilot.HelpPane.Click"), telemetryHelpers.cx["PBI.Datamart.Copilot.Suggestion.Edit.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Copilot.Suggestion.Edit.Click"), telemetryHelpers.cx["PBI.Datamart.Copilot.Toggle.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Copilot.Toggle.Click"), telemetryHelpers.cx["PBI.Datamart.Create"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Create"), telemetryHelpers.cx["PBI.Datamart.Save"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Save"), telemetryHelpers.cx["PBI.Datamart.Open"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Open"), telemetryHelpers.cx["PBI.Datamart.ModellingChange.Apply"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.ModellingChange.Apply"), telemetryHelpers.cx["PBI.Datamart.ModelView.Load"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.ModelView.Load"), telemetryHelpers.cx["PBI.Datamart.Editor.InReadonlyMode"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Editor.InReadonlyMode"), telemetryHelpers.cx["PBI.Datamart.IncrementalRefreshSetting"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.IncrementalRefreshSetting"), telemetryHelpers.cx["PBI.Datamart.PromoBanner.Dismiss"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.PromoBanner.Dismiss"), telemetryHelpers.cx["PBI.Datamart.PromoBanner.CreateDatamart"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.PromoBanner.CreateDatamart"), telemetryHelpers.cx["PBI.Datamart.Ribbon.RLS.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.RLS.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.ViewAsRole.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.ViewAsRole.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.GetData.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.GetData.Click"), telemetryHelpers.cx.PBI_Datamart_Create_PowerPlatformDataflows_Click = (0, 
        telemetryHelpers.b1)("PBI_Datamart_Create_PowerPlatformDataflows_Click"), telemetryHelpers.cx.PBI_Datamart_Ribbon_GetDataNewPipeline_Click = (0, 
        telemetryHelpers.b1)("PBI_Datamart_Ribbon_GetDataNewPipeline_Click"), telemetryHelpers.cx.PBI_Datamart_Ribbon_GetDataNewDataflowGen2_Click = (0, 
        telemetryHelpers.b1)("PBI_Datamart_Ribbon_GetDataNewDataflowGen2_Click"), telemetryHelpers.cx.PBI_Datamart_Ribbon_TransformData_Click = (0, 
        telemetryHelpers.b1)("PBI_Datamart_Ribbon_TransformData_Click"), telemetryHelpers.cx.PBI_Datamart_Ribbon_EnterData_Click = (0, 
        telemetryHelpers.b1)("PBI_Datamart_Ribbon_EnterData_Click"), telemetryHelpers.cx.PBI_Datamart_Ribbon_Settings_Click = (0, 
        telemetryHelpers.b1)("PBI_Datamart_Ribbon_Settings_Click"), telemetryHelpers.cx.PBI_Datamart_Ribbon_NewQuery_Click = (0, 
        telemetryHelpers.b1)("PBI_Datamart_Ribbon_NewQuery_Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.NewQuery.Click.InReadonlyMode"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewQuery.Click.InReadonlyMode"), telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.Click.InReadonlyMode"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.Click.InReadonlyMode"), telemetryHelpers.cx["PBI.Datamart.Ribbon.NewDataset.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewDataset.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.ManageDefaultDataset.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.ManageDefaultDataset.Click"), telemetryHelpers.cx["PBI.Datamart.InfoMessageBar.ManuallyUpdateDataset.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.InfoMessageBar.ManuallyUpdateDataset.Click"), 
        telemetryHelpers.cx["PBI.Datamart.InfoMessageBar.Dismiss"] = (0, telemetryHelpers.b1)("PBI.Datamart.InfoMessageBar.Dismiss"), 
        telemetryHelpers.cx["PBI.Datamart.Readonly.InfoMessageBar.Dismiss"] = (0, telemetryHelpers.b1)("PBI.Datamart.Readonly.InfoMessageBar.Dismiss"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.AutoUpdateDefaultDataset.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.AutoUpdateDefaultDataset.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.ManageDefaultDataset.ConfirmButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.ManageDefaultDataset.ConfirmButton.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.ManageDefaultDataset.CancelButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.ManageDefaultDataset.CancelButton.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.AutoUpdateDefaultDataset.OnAddOrRemoveTableInBI."] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.AutoUpdateDefaultDataset.OnAddOrRemoveTableInBI."), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.ConfirmButton.Click"] = (0, telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.ConfirmButton.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.UpdateDefaultDataset.CancelButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.UpdateDefaultDataset.CancelButton.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.UpdateDefaultDataset.ManageDefaultDataset.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.UpdateDefaultDataset.ManageDefaultDataset.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.ContinueButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.ContinueButton.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.CancelButton.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.CancelButton.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.NewReport.ManageDefaultDataset.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.NewReport.ManageDefaultDataset.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.OpenInADS.Click"] = (0, telemetryHelpers.b1)("PBI.Datamart.Ribbon.OpenInADS.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Ribbon.OpenInADS.Exception"] = (0, telemetryHelpers.b1)("PBI.Datamart.Ribbon.OpenInADS.Exception"), 
        telemetryHelpers.cx["PBI.Datamart.OnAddOrRemoveTableInBI"] = (0, telemetryHelpers.b1)("PBI.Datamart.OnAddOrRemoveTableInBI"), 
        telemetryHelpers.cx["PBI.Datamart.OnAutoUpdateDataset"] = (0, telemetryHelpers.b1)("PBI.Datamart.OnAutoUpdateDataset"), 
        telemetryHelpers.cx["PBI.Datamart.DesignerView.Tab.Click"] = (0, telemetryHelpers.b1)("PBI.Datamart.DesignerView.Tab.Click"), 
        telemetryHelpers.cx["PBI.Datamart.Query.Exception"] = (0, telemetryHelpers.b1)("PBI.Datamart.Query.Exception"), 
        telemetryHelpers.cx["PBI.Datamart.SqlEditor.CancelQueryEvaluation"] = (0, telemetryHelpers.b1)("PBI.Datamart.SqlEditor.CancelQueryEvaluation"), 
        telemetryHelpers.cx["PBI.Datamart.SqlEditor.QueryEvaluationTime"] = (0, telemetryHelpers.b1)("PBI.Datamart.SqlEditor.QueryEvaluationTime"), 
        telemetryHelpers.cx["PBI.Datamart.DesignerView.QueryEvaluationTime"] = (0, telemetryHelpers.b1)("PBI.Datamart.DesignerView.QueryEvaluationTime"), 
        telemetryHelpers.cx["PBI.Datamart.Query.Create"] = (0, telemetryHelpers.b1)("PBI.Datamart.Query.Create"), 
        telemetryHelpers.cx["PBI.Datamart.Query.Update"] = (0, telemetryHelpers.b1)("PBI.Datamart.Query.Update"), 
        telemetryHelpers.cx.PBI_Datamart_Query_Delete = (0, telemetryHelpers.b1)("PBI_Datamart_Query_Delete"), 
        telemetryHelpers.cx.PBI_Datamart_Query_Rename = (0, telemetryHelpers.b1)("PBI_Datamart_Query_Rename"), 
        telemetryHelpers.cx.PBI_Datamart_Query_MoveToMyQuery = (0, telemetryHelpers.b1)("PBI_Datamart_Query_MoveToMyQuery"), 
        telemetryHelpers.cx.PBI_Datamart_Query_MoveToSharedQuery = (0, telemetryHelpers.b1)("PBI_Datamart_Query_MoveToSharedQuery"), 
        telemetryHelpers.cx.PBI_Datamart_Query_DuplicateQuery = (0, telemetryHelpers.b1)("PBI_Datamart_Query_DuplicateQuery"), 
        telemetryHelpers.cx["PBI.Datamart.Query.PollBatch"] = (0, telemetryHelpers.b1)("PBI.Datamart.Query.PollBatch")), DatamartDatamartCreate = (telemetryHelpers.cx["PBI.Datamart.Query.ExecuteSql"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.ExecuteSql"), telemetryHelpers.cx["PBI.Datamart.Query.Cancel.User.Operations.Batch"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Cancel.User.Operations.Batch"), telemetryHelpers.cx["PBI.Datamart.Query.Fetch.User.Operations.Batch"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Fetch.User.Operations.Batch"), telemetryHelpers.cx["PBI.Datamart.ExecuteSql.Exception"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.ExecuteSql.Exception"), telemetryHelpers.cx["PBI.Datamart.Query.FetchMwcToken"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.FetchMwcToken"), telemetryHelpers.cx["PBI.Datamart.Query.Open.Sql"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Open.Sql"), telemetryHelpers.cx["PBI.Datamart.Query.Open.Visual"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Open.Visual"), telemetryHelpers.cx["PBI.Datamart.Query.Open.Link.Sql"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Open.Link.Sql"), telemetryHelpers.cx["PBI.Datamart.Query.Open.Link.Visual"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Open.Link.Visual"), telemetryHelpers.cx["PBI.Datamart.Query.VisualizeReportInitialization"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.VisualizeReportInitialization"), telemetryHelpers.cx["PBI.Datamart.Query.PersistReport"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.PersistReport"), telemetryHelpers.cx["PBI.Datamart.RefreshMetadata"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.RefreshMetadata"), telemetryHelpers.cx["PBI.Datamart.DiscoverDatasourcesByDSR"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.DiscoverDatasourcesByDSR"), telemetryHelpers.cx["PBI.Datamart.FabricChat"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.FabricChat"), telemetryHelpers.cx["PBI.Datamart.FabricChat.FetchMwcToken"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.FabricChat.FetchMwcToken"), telemetryHelpers.cx["PBI.Datamart.FabricChat.TokenUseage"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.FabricChat.TokenUseage"), telemetryHelpers.cx["PBI.Datamart.GetImpactAnalysis"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.GetImpactAnalysis"), telemetryHelpers.cx["PBI.Datamart.ShowedCredentialManagementDialog"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.ShowedCredentialManagementDialog"), telemetryHelpers.cx["PBI.Datamart.Query.Visuals"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Visuals"), telemetryHelpers.cx["PBI.Datamart.Query.Open.VisualizeResult.Sql"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Open.VisualizeResult.Sql"), telemetryHelpers.cx["PBI.Datamart.Query.Open.VisualizeResult.Visual"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.Open.VisualizeResult.Visual"), telemetryHelpers.cx["PBI.Datamart.Query.GenerateModel"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Query.GenerateModel"), telemetryHelpers.cx["PBI.Datamart.LaunchDataPipeline"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.LaunchDataPipeline"), telemetryHelpers.cx["PBI.Datamart.LaunchDataflowGen2"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.LaunchDataflowGen2"), telemetryHelpers.cx["PBI.Datamart.LoadSample"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.LoadSample"), telemetryHelpers.cx["PBI.Datamart.LoadSampleOnCreate"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.LoadSampleOnCreate"), telemetryHelpers.cx["PBI.Datamart.ResumeLoadSample"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.ResumeLoadSample"), telemetryHelpers.cx["PBI.Datamart.ObjectContainerRefresh"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.ObjectContainerRefresh"), telemetryHelpers.cx["PBI.Datamart.OpenFilepathProperties"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.OpenFilepathProperties"), telemetryHelpers.cx["PBI.Datamart.CopyUrl"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.CopyUrl"), telemetryHelpers.cx["PBI.Datamart.SyncErrorDetails"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.SyncErrorDetails"), telemetryHelpers.cx["PBI.Datamart.Ribbon.QueryActivity.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.QueryActivity.Click"), telemetryHelpers.cx["PBI.Datamart.Ribbon.Export.Click"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.Ribbon.Export.Click"), telemetryHelpers.cx.PBI_Datamart_CloneTable_RibbonButtonClick = (0, 
        telemetryHelpers.b1)("PBI_Datamart_CloneTable_RibbonButtonClick"), telemetryHelpers.cx.PBI_Datamart_CloneTable_ContextMenuClick = (0, 
        telemetryHelpers.b1)("PBI_Datamart_CloneTable_ContextMenuClick"), telemetryHelpers.cx.PBI_Datamart_CloneTable_Submit = (0, 
        telemetryHelpers.b1)("PBI_Datamart_CloneTable_Submit"), telemetryHelpers.cx.PBI_Datamart_CloneTable_Errors = (0, 
        telemetryHelpers.b1)("PBI_Datamart_CloneTable_Errors"), telemetryHelpers.cx.BaseDatamartTopLevelCustomerAction = (0, 
        telemetryHelpers.b1)("BaseDatamartTopLevelCustomerAction"), telemetryHelpers.cx["PBI.Datamart.DatamartCreate"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.DatamartCreate")), DatamartDatamartDelete = telemetryHelpers.cx["PBI.Datamart.DatamartDelete"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.DatamartDelete"), DatamartDatamartUpdate = telemetryHelpers.cx["PBI.Datamart.DatamartUpdate"] = (0, 
        telemetryHelpers.b1)("PBI.Datamart.DatamartUpdate"), http_service = __webpack_require__(73875), upload_service = __webpack_require__(98624), datamart_http_service_commonGlobals = window, defaultFilterCommand = {
            $type: "GetDatabaseCommand",
            databaseDefinitionIncludeFilters: [ {
                schemaName: void 0,
                databaseObjectTypes: [ "table", "view" ]
            } ],
            databaseDefinitionExcludeFilters: [ {
                schemaName: void 0,
                databaseObjectTypes: [ "function", "storedProcedure" ]
            }, {
                schemaName: dataModelSchemas._.informationSchema,
                databaseObjectTypes: [ "function", "storedProcedure", "view", "table" ]
            }, {
                schemaName: dataModelSchemas._.sysSchema,
                databaseObjectTypes: [ "function", "storedProcedure", "view", "table" ]
            }, {
                schemaName: dataModelSchemas._.queryInsightsSchema,
                databaseObjectTypes: [ "function", "storedProcedure", "view", "table" ]
            } ]
        }, DatamartHttpService = function() {
            function DatamartHttpService(httpService, featureSwitchService, upload, telemetryService) {
                this.httpService = httpService, this.featureSwitchService = featureSwitchService, 
                this.upload = upload, this.telemetryService = telemetryService;
            }
            return DatamartHttpService.prototype.createDatamartQuery = function(datamartGuid, body, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/queries"), options = this.getOptions("queries", parentEvent);
                return delete body.clientUniqueId, delete body.isResultGridVisible, this.httpService.post(url, body, options).pipe((0, 
                map.U)(function(response) {
                    return body.queryId = parseInt(response.data.queryId, 10), body.updatedAt = response.data.updatedAt, 
                    body;
                }));
            }, DatamartHttpService.prototype.saveDatamartQueryAsView = function(groupGuid, datamartGuid, body, parentEvent) {
                var url = "v1.0/myorg/groups/".concat(groupGuid, "/datamarts/").concat(datamartGuid, "/queryAsView"), options = this.getOptions("queryAsView", parentEvent);
                return this.httpService.post(url, body, options);
            }, DatamartHttpService.prototype.updateDatamartQuery = function(datamartGuid, body, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/queries"), options = this.getOptions("queries", parentEvent);
                return delete body.clientUniqueId, delete body.isResultGridVisible, this.httpService.put(url, body, options).pipe((0, 
                map.U)(function(response) {
                    return body.queryId = parseInt(response.data.queryId, 10), body.updatedAt = response.data.updatedAt, 
                    body;
                }));
            }, DatamartHttpService.prototype.deleteDatamartQuery = function(datamartGuid, body, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/queries"), options = this.getOptions("queries", parentEvent);
                return delete body.clientUniqueId, delete body.isResultGridVisible, this.httpService.delete(url, options, body).pipe((0, 
                map.U)(function(_) {
                    return body;
                }));
            }, DatamartHttpService.prototype.getDatamartQueries = function(datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/queries"), options = this.getOptions("queries", parentEvent);
                return this.httpService.get(url, options).pipe((0, map.U)(function(response) {
                    return response.data.value;
                }));
            }, DatamartHttpService.prototype.createDatamart = function(name, groupGuid, type, sensitivityLabelId, parentEvent, subfolderObjectId) {
                var url = "".concat("me" === groupGuid ? this.buildBaseURL(type).concat(subfolderObjectId ? "?subFolderObjectId=".concat(subfolderObjectId) : "") : this.buildCreateBaseURL(groupGuid, type, subfolderObjectId)), options = this.getOptions("createDatamart", parentEvent);
                this.telemetryService.logEvent(DatamartDatamartCreate, {
                    datamartType: type
                });
                var requestBody = {
                    name
                };
                return sensitivityLabelId && (requestBody.sensitivityLabelId = sensitivityLabelId), 
                this.httpService.post(url, requestBody, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.updateDatamart = function(body, datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid), options = this.getOptions("updateDatamart", parentEvent);
                return this.telemetryService.logEvent(DatamartDatamartUpdate, {
                    datamartObjectId: datamartGuid,
                    datamartType: type
                }), this.httpService.post(url, body, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.refreshMetadata = function(datamartGuid, version, datamartType, isExternal, parentEvent) {
                void 0 === isExternal && (isExternal = !1);
                var url = "".concat(this.buildBaseURL(datamartType), "/").concat(datamartGuid), request = {
                    datamartVersion: null != version ? version : 1,
                    commands: [ {
                        $type: isExternal ? "MetadataRefreshExternalCommand" : "MetadataRefreshCommand"
                    } ]
                }, options = this.getOptions("refreshMetadata", parentEvent);
                return this.httpService.post(url, request, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.importDatawarehouse = function(datamartGuid, version, datamartType, archive, parentEvent) {
                var url = "".concat(this.buildBaseURL(datamartType), "/").concat(datamartGuid), request = {
                    datamartVersion: null != version ? version : 1,
                    executionMode: "Full",
                    commands: [ {
                        $type: "ImportCommand",
                        mediaType: "zip",
                        archive
                    } ]
                }, options = this.getOptions("importDatawarehouse", parentEvent);
                return this.httpService.post(url, request, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.deleteDatamart = function(datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid), options = this.getOptions("deleteDatamart", parentEvent);
                return this.telemetryService.logEvent(DatamartDatamartDelete, {
                    datamartObjectId: datamartGuid,
                    datamartType: type
                }), this.httpService.delete(url, options);
            }, DatamartHttpService.prototype.exportDatawarehouse = function(datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/export"), options = this.getOptions("exportDatawarehouse", parentEvent);
                return this.httpService.get(url, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.getDatamartPermissions = function(body, datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/permissions"), options = this.getOptions("datamartPermissions", parentEvent);
                return this.httpService.post(url, body, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.getDatamartHistory = function(datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/batches"), options = this.getOptions("datamartHistory", parentEvent);
                return this.httpService.get(url, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.getDatamartVersion = function(datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/version"), options = this.getOptions("datamartVersion", parentEvent);
                return this.httpService.get(url, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.getDatamartBatch = function(datamartGuid, batchId, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/batches/").concat(batchId), options = this.getOptions("datamartBatches", parentEvent);
                return this.httpService.get(url, options).pipe((0, retry.X)(3), (0, mergeMap.zg)(function(response) {
                    if ("failure" === response.data.progressState) {
                        if (response.data.errorData.error.code === DmsErrorCodes.DmsImportDatabaseException) return (0, 
                        throwError._)({
                            data: response.data.operationInformation[0].progressDetail.errors,
                            error: response.data.errorData.error
                        });
                        var error = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, response), {
                            status: 500,
                            data: response.data.errorData,
                            error: response.data.errorData.error,
                            headers: void 0
                        });
                        return (0, throwError._)(error);
                    }
                    return (0, of.of)(response.data);
                }));
            }, DatamartHttpService.prototype.cancelDatamartBatch = function(datamartGuid, batchId, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/batches/").concat(batchId, "/cancel"), options = this.getOptions("datamartBatches", parentEvent);
                return this.httpService.post(url, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.resumeSuspendedDatamartBatch = function(datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/resumeSuspendedBatches"), options = this.getOptions("datamartBatches", parentEvent);
                return this.httpService.post(url, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.refreshDatamart = function(datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/refresh"), options = this.getOptions("refreshDatamart", parentEvent);
                return this.httpService.post(url, null, options);
            }, DatamartHttpService.prototype.getDatamartInformation = function(datamartGuid, type, parentEvent) {
                var url = "v1.0/myorg/".concat((0, utils.wZ)(type), "/").concat(datamartGuid, "/information"), options = this.getOptions("information", parentEvent);
                return this.httpService.get(url, options).pipe((0, map.U)(function(response) {
                    var datamartType;
                    switch (response.data.datamartType) {
                      case "Sql":
                        datamartType = 1;
                        break;

                      case "Lakewarehouse":
                        datamartType = 2;
                        break;

                      case "Datawarehouse":
                        datamartType = 4;
                        break;

                      case "MountedWarehouse":
                        datamartType = 5;
                        break;

                      default:
                        debug.fF.assertFail("invalid DatamartType");
                    }
                    return (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, response.data), {
                        datamartType,
                        statusCode: response.status,
                        responseRequestId: response.responseRequestId,
                        clientRequestId: options.headers.RequestId
                    });
                }));
            }, DatamartHttpService.prototype.getUnfilteredDatamartSchema = function(datamartObjectId, datamartType, select, datasetGuid, parentEvent) {
                select || (select = 1 === datamartType ? "etl,xmla,views" : "xmla,views");
                var url = "".concat(this.buildBaseURL(datamartType), "/").concat(datamartObjectId, "?$select=").concat(select);
                datasetGuid && (url = "".concat(url, "&customDatasetId=").concat(datasetGuid));
                var options = this.getOptions("getDatamartVersion", parentEvent);
                return this.httpService.get(url, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.getDatamartSchema = function(datamartObjectId, datamartType, filterCommand, select, datasetGuid, parentEvent) {
                var _this = this;
                if (this.featureSwitchService.featureSwitches.datamartIncrementalLoad) {
                    select || (select = 1 === datamartType ? "etl,xmla" : "xmla");
                    var url = "".concat(this.buildBaseURL(datamartType), "/").concat(datamartObjectId, "?$select=").concat(select);
                    datasetGuid && (url = "".concat(url, "&customDatasetId=").concat(datasetGuid));
                    var options = this.getOptions("getDatamartVersion", parentEvent);
                    return this.httpService.get(url, options).pipe((0, timeout.V)(24e4), (0, mergeMap.zg)(function(schemaResponse) {
                        return _this.requestFilteredDatabaseDefinition(filterCommand = null != filterCommand ? filterCommand : defaultFilterCommand, schemaResponse.data.datamartVersion, datamartType, datamartObjectId).pipe((0, 
                        map.U)(function(filteredDbDefResponse) {
                            return schemaResponse.data.operationInformation.push(filteredDbDefResponse.operationInformation[0]), 
                            schemaResponse.data;
                        }));
                    }));
                }
                return this.getUnfilteredDatamartSchema(datamartObjectId, datamartType, select, datasetGuid, parentEvent);
            }, DatamartHttpService.prototype.requestFilteredDatabaseDefinition = function(filterCommand, version, datamartType, datamartObjectId, parentEvent) {
                var body = {
                    datamartVersion: null != version ? version : 1,
                    executionMode: "Full",
                    commands: [ filterCommand ]
                }, url = "".concat(this.buildBaseURL(datamartType), "/").concat(datamartObjectId), options = this.getOptions("getFilteredDatabaseDefinition", parentEvent);
                return this.httpService.post(url, body, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.executeSql = function(workspaceObjectId, datamartObjectId, sqlScript, mwcTokenResponsePayload, async, parentEvent, schemaOnly) {
                var _a, _this = this, executeSqlApiUrl = this.buildExecuteSqlUrl(mwcTokenResponsePayload.mwcTokenTargetUriHost, mwcTokenResponsePayload.capacityObjectId, datamartObjectId), executeSqlRequestBody = {
                    SqlScript: sqlScript,
                    Timeout: async ? "0.00:00:00" : "01:00:00",
                    SchemaOnly: schemaOnly
                }, executeSqlRequestOptions = this.getOptions("execute", parentEvent);
                return executeSqlRequestOptions.onRequestIdGenerated = function(_a) {
                    executeSqlRequestOptions.headers["x-ms-parent-activity-id"] = _a.requestId;
                }, executeSqlRequestOptions.retryCount = 0, this.httpService.setWorkloadResourceMonikerHeader(null !== (_a = mwcTokenResponsePayload.workspaceObjectId) && void 0 !== _a ? _a : workspaceObjectId, executeSqlRequestOptions), 
                this.httpService.setMwcAuthorizationHeader(mwcTokenResponsePayload.mwcToken, executeSqlRequestOptions), 
                executeSqlRequestOptions.excludeBackendUri = !0, this.httpService.post(executeSqlApiUrl, executeSqlRequestBody, executeSqlRequestOptions).pipe((0, 
                map.U)(function(response) {
                    var _a;
                    return {
                        userOperationsBatchResponse: response.data,
                        sqlResults: _this.parseSqlResult(null === (_a = response.data.operationInformation[0]) || void 0 === _a ? void 0 : _a.progressDetail.results)
                    };
                }));
            }, DatamartHttpService.prototype.getUserOperationsBatch = function(workspaceObjectId, batchId, mwcTokenResponsePayload, canceledBatch, parentEvent) {
                var _a, userOperationsBatchApiUrl = this.buildUserOperationsBatchUrl(mwcTokenResponsePayload.mwcTokenTargetUriHost, mwcTokenResponsePayload.capacityObjectId, batchId), userOperationsBatchRequestOptions = this.getOptions("userOperationsBatchProgress", parentEvent);
                return userOperationsBatchRequestOptions.onRequestIdGenerated = function(_a) {
                    userOperationsBatchRequestOptions.headers["x-ms-parent-activity-id"] = _a.requestId;
                }, userOperationsBatchRequestOptions.retryCount = 3, this.httpService.setWorkloadResourceMonikerHeader(null !== (_a = mwcTokenResponsePayload.workspaceObjectId) && void 0 !== _a ? _a : workspaceObjectId, userOperationsBatchRequestOptions), 
                this.httpService.setMwcAuthorizationHeader(mwcTokenResponsePayload.mwcToken, userOperationsBatchRequestOptions), 
                userOperationsBatchRequestOptions.excludeBackendUri = !0, this.httpService.get(userOperationsBatchApiUrl, userOperationsBatchRequestOptions).pipe((0, 
                mergeMap.zg)(function(response) {
                    return "failure" !== response.data.state || canceledBatch ? (0, of.of)(response.data) : (0, 
                    throwError._)(response.data.exceptionData);
                }));
            }, DatamartHttpService.prototype.cancelUserOperationsBatch = function(workspaceObjectId, mwcTokenResponsePayload, batchId, parentEvent) {
                var _a, cancelUserOperationsBatchUrl = "".concat(this.buildUserOperationsBatchUrl(mwcTokenResponsePayload.mwcTokenTargetUriHost, mwcTokenResponsePayload.capacityObjectId, batchId), "/cancel"), cancelUserOperationsBatchOptions = this.getOptions("cancelUserOperationsBatch", parentEvent);
                return cancelUserOperationsBatchOptions.onRequestIdGenerated = function(_a) {
                    cancelUserOperationsBatchOptions.headers["x-ms-parent-activity-id"] = _a.requestId;
                }, cancelUserOperationsBatchOptions.retryCount = 0, this.httpService.setWorkloadResourceMonikerHeader(null !== (_a = mwcTokenResponsePayload.workspaceObjectId) && void 0 !== _a ? _a : workspaceObjectId, cancelUserOperationsBatchOptions), 
                this.httpService.setMwcAuthorizationHeader(mwcTokenResponsePayload.mwcToken, cancelUserOperationsBatchOptions), 
                cancelUserOperationsBatchOptions.excludeBackendUri = !0, this.httpService.post(cancelUserOperationsBatchUrl, null, cancelUserOperationsBatchOptions).pipe((0, 
                map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.saveWarehouseQueryAsView = function(groupGuid, datamartGuid, body, datamartType, datamartVersion, parentEvent) {
                var _this = this, request = {
                    executionMode: "Full",
                    PrepareTimeout: "01:00:00",
                    datamartVersion: null != datamartVersion ? datamartVersion : 1,
                    commands: [ {
                        $type: "ExecuteSaveQueryAsViewCommand",
                        targetSchemaName: body.schemaName,
                        viewName: body.viewName,
                        query: body.script
                    } ]
                };
                return this.generateNewMwcToken(datamartGuid, {
                    roles: [ "" ]
                }, datamartType).pipe((0, map.U)(function(mwcTokenResponse) {
                    return mwcTokenResponse;
                }), (0, catchError.K)(function(error) {
                    return (0, throwError._)(error);
                })).pipe((0, mergeMap.zg)(function(mwcTokenResponse) {
                    var url = _this.buildExecuteUserCommandUrl(mwcTokenResponse.mwcTokenTargetUriHost, mwcTokenResponse.capacityObjectId, datamartGuid), requestOptions = _this.getOptions("batches", parentEvent);
                    return requestOptions.onRequestIdGenerated = function(_a) {
                        requestOptions.headers["x-ms-parent-activity-id"] = _a.requestId;
                    }, requestOptions.retryCount = 0, _this.httpService.setWorkloadResourceMonikerHeader(groupGuid, requestOptions), 
                    _this.httpService.setMwcAuthorizationHeader(mwcTokenResponse.mwcToken, requestOptions), 
                    requestOptions.excludeBackendUri = !0, _this.httpService.post(url, request, requestOptions).pipe((0, 
                    map.U)(function(response) {
                        var _a;
                        return {
                            userOperationsBatchResponse: response.data,
                            sqlResults: _this.parseSqlResult(null === (_a = response.data.operationInformation[0]) || void 0 === _a ? void 0 : _a.progressDetail.results)
                        };
                    }));
                }));
            }, DatamartHttpService.prototype.saveAsTable = function(workspaceObjectId, datamartObjectId, datamartType, body, datamartVersion, parentEvent) {
                var _this = this, saveAsTableRequestBody = {
                    executionMode: "Full",
                    PrepareTimeout: "01:00:00",
                    datamartVersion: null != datamartVersion ? datamartVersion : 1,
                    commands: [ {
                        $type: "ExecuteCtasCommand",
                        targetDbName: body.databaseName,
                        targetSchemaName: body.schemaName,
                        targetTableName: body.tableName,
                        selectStatement: body.script
                    } ]
                };
                return this.generateNewMwcToken(datamartObjectId, {
                    roles: [ "" ]
                }, datamartType).pipe((0, mergeMap.zg)(function(mwcTokenResponse) {
                    var saveAsTableApiUrl = _this.buildExecuteUserCommandUrl(mwcTokenResponse.mwcTokenTargetUriHost, mwcTokenResponse.capacityObjectId, datamartObjectId), saveAsTableRequestOptions = _this.getOptions("execute", parentEvent);
                    return saveAsTableRequestOptions.onRequestIdGenerated = function(_a) {
                        saveAsTableRequestOptions.headers["x-ms-parent-activity-id"] = _a.requestId;
                    }, saveAsTableRequestOptions.retryCount = 0, _this.httpService.setWorkloadResourceMonikerHeader(workspaceObjectId, saveAsTableRequestOptions), 
                    _this.httpService.setMwcAuthorizationHeader(mwcTokenResponse.mwcToken, saveAsTableRequestOptions), 
                    saveAsTableRequestOptions.excludeBackendUri = !0, _this.httpService.post(saveAsTableApiUrl, saveAsTableRequestBody, saveAsTableRequestOptions);
                }));
            }, DatamartHttpService.prototype.loadDatamartSample = function(workspaceObjectId, datamartObjectId, datamartType, sampleName, datamartVersion, parentEvent) {
                var _this = this, loadSampleRequestBody = {
                    executionMode: "Full",
                    prepareTimeout: "01:00:00",
                    datamartVersion: null != datamartVersion ? datamartVersion : 1,
                    commands: [ {
                        $type: "LoadSampleCommand",
                        sampleName
                    } ]
                };
                return this.generateNewMwcToken(datamartObjectId, {
                    roles: [ "" ]
                }, datamartType).pipe((0, mergeMap.zg)(function(mwcTokenResponse) {
                    var loadSampleApiUrl = _this.buildExecuteUserCommandUrl(mwcTokenResponse.mwcTokenTargetUriHost, mwcTokenResponse.capacityObjectId, datamartObjectId), loadSampleRequestOptions = _this.getOptions("execute", parentEvent);
                    return loadSampleRequestOptions.onRequestIdGenerated = function(_a) {
                        loadSampleRequestOptions.headers["x-ms-parent-activity-id"] = _a.requestId;
                    }, loadSampleRequestOptions.retryCount = 0, _this.httpService.setWorkloadResourceMonikerHeader(workspaceObjectId, loadSampleRequestOptions), 
                    _this.httpService.setMwcAuthorizationHeader(mwcTokenResponse.mwcToken, loadSampleRequestOptions), 
                    loadSampleRequestOptions.excludeBackendUri = !0, _this.httpService.post(loadSampleApiUrl, loadSampleRequestBody, loadSampleRequestOptions);
                }));
            }, DatamartHttpService.prototype.getLoadSampleBatchId = function(workspaceObjectId, datamartObjectId, datamartType, parentEvent) {
                var _this = this;
                return this.generateNewMwcToken(datamartObjectId, {
                    roles: [ "" ]
                }, datamartType).pipe((0, mergeMap.zg)(function(mwcTokenResponse) {
                    var _a, loadSampleApiUrl = _this.buildLoadSampleBatchIdUrl(mwcTokenResponse.mwcTokenTargetUriHost, mwcTokenResponse.capacityObjectId, datamartObjectId), loadSampleRequestOptions = _this.getOptions("sample", parentEvent);
                    return loadSampleRequestOptions.onRequestIdGenerated = function(_a) {
                        loadSampleRequestOptions.headers["x-ms-parent-activity-id"] = _a.requestId;
                    }, loadSampleRequestOptions.retryCount = 0, _this.httpService.setWorkloadResourceMonikerHeader(null !== (_a = mwcTokenResponse.workspaceObjectId) && void 0 !== _a ? _a : workspaceObjectId, loadSampleRequestOptions), 
                    _this.httpService.setMwcAuthorizationHeader(mwcTokenResponse.mwcToken, loadSampleRequestOptions), 
                    loadSampleRequestOptions.excludeBackendUri = !0, _this.httpService.get(loadSampleApiUrl, loadSampleRequestOptions);
                }));
            }, DatamartHttpService.prototype.updateDatamartProperties = function(datamartGuid, body, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/information"), options = this.getOptions("information", parentEvent);
                return this.httpService.post(url, body, options);
            }, DatamartHttpService.prototype.validateDatamartMashup = function(body, parentEvent) {
                var options = this.getOptions("validateDatamartMashup", parentEvent);
                return this.httpService.post("metadata/mashup/validate", body, options).pipe((0, 
                map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.buildDataflow = function(body, parentEvent) {
                var options = this.getOptions("buildDataflow", parentEvent);
                return this.httpService.post("metadata/dataflows/build", body, options).pipe((0, 
                map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.updateDataflow = function(body, parentEvent) {
                var options = this.getOptions("updateDataflow", parentEvent);
                return this.httpService.post("metadata/dataflows/build/update", body, options).pipe((0, 
                map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.buildModelRelationships = function(body, dataflowObjectId, parentEvent) {
                var uri = "metadata/dataflows/build/".concat(dataflowObjectId, "/relationships"), options = this.getOptions("buildModelRelationships", parentEvent);
                return this.httpService.post(uri, body, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.acquireDatamartLease = function(datamartGuid, type, version, parentEvent) {
                var request = {
                    datamartVersion: null != version ? version : 1,
                    commands: [ {
                        $type: "DelayBackgroundProcessingCommand"
                    } ]
                }, url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid), options = this.getOptions("acquireBackgroundLease", parentEvent);
                return this.httpService.post(url, request, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.generateTransientModel = function(body, _parentEvent) {
                return this.httpService.post("modeling/generateModel", body).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.generateNewMwcToken = function(datamartGuid, body, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid, "/token"), options = this.getOptions("generateMwcToken", parentEvent);
                return this.httpService.post(url, body, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.getModel = function(modelId, _parentEvent) {
                var uri = "metadata/models/".concat(modelId);
                return this.httpService.get(uri).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.addRemoveTablesFromBI = function(body, datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid), options = this.getOptions("addRemoveTablesFromBIModel", parentEvent);
                return this.httpService.post(url, body, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.addTablesToBiModelImpactAnalysis = function(body, datamartGuid, type, parentEvent) {
                var url = "".concat(this.buildBaseURL(type), "/").concat(datamartGuid), options = this.getOptions("addTablesToBiModelImpactAnalysis", parentEvent);
                return this.httpService.post(url, body, options).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatamartHttpService.prototype.waitForBatchProcessToComplete = function(datamartObjectId, batchResponse, type, options) {
                var _a, _b, _this = this, delayTime = 1e3, executeOnPoll = null == options ? void 0 : options.executeOnPoll, pollingInterval = null == options ? void 0 : options.pollingInterval, stopCondition = null !== (_a = null == options ? void 0 : options.stopCondition) && void 0 !== _a ? _a : empty.E, completionCondition = null !== (_b = null == options ? void 0 : options.completionCondition) && void 0 !== _b ? _b : function(batchResponse) {
                    return "inProgress" !== batchResponse.progressState;
                };
                return (0, of.of)(batchResponse).pipe((0, expand.jn)(function(datamartBatchResponse) {
                    return completionCondition(datamartBatchResponse) ? (0, of.of)(datamartBatchResponse) : (0, 
                    timer.H)(delayTime).pipe((0, tap.b)(function() {
                        delayTime = void 0 !== pollingInterval ? pollingInterval : Math.min(1.3 * delayTime, 15e3);
                    }), (0, mergeMap.zg)(function() {
                        return _this.getDatamartBatch(datamartObjectId, batchResponse.batchId, type);
                    }));
                }), (0, tap.b)(function(batchResponse) {
                    return null == executeOnPoll ? void 0 : executeOnPoll(batchResponse);
                }), (0, filter.h)(function(datamartBatchResponse) {
                    return completionCondition(datamartBatchResponse);
                }), (0, take.q)(1), (0, takeUntil.R)(stopCondition));
            }, DatamartHttpService.prototype.waitForUserOperationBatchProcessToComplete = function(datamartObjectId, workspaceObjectId, batchResponse, datamartType, roles, options) {
                var _a, _b, pollQueryBatchTelemetryEvent, _this = this, delayTime = 1e3, executeOnPoll = null == options ? void 0 : options.executeOnPoll, pollingInterval = null == options ? void 0 : options.pollingInterval, stopCondition = null !== (_a = null == options ? void 0 : options.stopCondition) && void 0 !== _a ? _a : empty.E, completionCondition = null !== (_b = null == options ? void 0 : options.completionCondition) && void 0 !== _b ? _b : function(batchResponse) {
                    return "inProgress" !== batchResponse.state;
                };
                return (0, of.of)(batchResponse).pipe((0, expand.jn)(function(userOperationBatchResponse) {
                    return completionCondition(userOperationBatchResponse) ? (0, of.of)(userOperationBatchResponse) : (0, 
                    timer.H)(delayTime).pipe((0, tap.b)(function() {
                        delayTime = void 0 !== pollingInterval ? pollingInterval : Math.min(1.3 * delayTime, 15e3);
                    }), (0, mergeMap.zg)(function() {
                        return _this.fetchMWCTokenWithRoles(datamartObjectId, datamartType, roles).pipe((0, 
                        mergeMap.zg)(function(mwcToken) {
                            return pollQueryBatchTelemetryEvent = _this.telemetryService.startActivity(null, DatamartQueryPollBatch), 
                            _this.getUserOperationsBatch(workspaceObjectId, batchResponse.batchId, mwcToken).pipe((0, 
                            map.U)(function(userOperationsBatchResponse) {
                                return pollQueryBatchTelemetryEvent.resolve(), userOperationsBatchResponse;
                            }), (0, catchError.K)(function(error) {
                                return pollQueryBatchTelemetryEvent.reject(), (0, throwError._)(error);
                            }));
                        }));
                    }));
                }), (0, tap.b)(function(batchResponse) {
                    return null == executeOnPoll ? void 0 : executeOnPoll(batchResponse);
                }), (0, filter.h)(function(userOperationBatchResponse) {
                    return completionCondition(userOperationBatchResponse);
                }), (0, take.q)(1), (0, takeUntil.R)(stopCondition));
            }, DatamartHttpService.prototype.fetchMWCTokenWithRoles = function(datamartObjectId, datamartType, roles) {
                debug.fF.assert(function() {
                    return !!roles;
                }, "roles undefined");
                var checkedRoles = roles.filter(function(role) {
                    return role.checked;
                }), body = {
                    roles: _.map(checkedRoles, function(viewAsRole) {
                        return viewAsRole.roleName;
                    }),
                    UtilizationType: "Interactive"
                };
                return this.generateNewMwcToken(datamartObjectId, body, datamartType);
            }, DatamartHttpService.prototype.getOneLakeFilepathProperties = function(_groupId, _parentEvent) {
                var feUrl = datamart_http_service_commonGlobals.feUrl;
                switch (!0) {
                  case feUrl.indexOf("edog") > -1:
                  case feUrl.indexOf("df") > -1:
                  case feUrl.indexOf("int3") > -1:
                  case feUrl.indexOf("int") > -1:
                    return (0, of.of)("https://onelake-int-edog.dfs.pbidedicated.windows-int.net");

                  case feUrl.indexOf("daily") > -1:
                    return (0, of.of)("https://daily-onelake.dfs.fabric.microsoft.com");

                  case feUrl.indexOf("dxt") > -1:
                    return (0, of.of)("https://dxt-onelake.dfs.fabric.microsoft.com");

                  case feUrl.indexOf("msit") > -1:
                    return (0, of.of)("https://msit-onelake.dfs.fabric.microsoft.com");

                  default:
                    return (0, of.of)("https://onelake.dfs.fabric.microsoft.com");
                }
            }, DatamartHttpService.prototype.parseSqlResult = function(results) {
                if (!results) return null;
                var registeredResultTypes = [ "errorMessage", "infoMessage", "query", "statementCompletedMessage", "queryDurationMessage" ];
                return results.filter(function(result) {
                    return registeredResultTypes.includes(result.resultType);
                });
            }, DatamartHttpService.prototype.getAutoAddToDefaultDatasetValue = function(datamartGuid, datamartType) {
                var url = "".concat(this.buildBaseURL(datamartType), "/").concat(datamartGuid, "/parameters?name=AutoAddToDefaultDataset");
                return this.httpService.get(url).pipe((0, map.U)(function(response) {
                    return "true" === response.data.parameters[0].value.toLowerCase();
                }));
            }, DatamartHttpService.prototype.updateAutoAddToDefaultDatasetValue = function(datamartGuid, datamartType, autoAddToDefaultDataset) {
                var url = "".concat(this.buildBaseURL(datamartType), "/").concat(datamartGuid, "/parameters"), body = {
                    parameters: [ {
                        name: "AutoAddToDefaultDataset",
                        value: String(autoAddToDefaultDataset)
                    } ]
                };
                return this.httpService.patch(url, body).pipe((0, map.U)(function(response) {
                    return "true" === response.data.parameters[0].value.toLowerCase();
                }));
            }, DatamartHttpService.prototype.setLabelOnFile = function(datamartId, inputStream, fileType, parentEvent) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var uri, options;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return uri = "metadata/informationProtection/labelStream/datamart/".concat(datamartId, "/type/").concat(fileType), 
                            (options = this.httpService.powerbiRequestOptions(parentEvent, "SetLabelOnStream")).retryCount = 0, 
                            options.headers[constants.Pg6] = inputStream.size.toString(), options.responseType = "blob", 
                            [ 4, this.upload.post(uri, [ inputStream ], options) ];

                          case 1:
                            return [ 2, _a.sent().data ];
                        }
                    });
                });
            }, DatamartHttpService.prototype.getOptions = function(operationName, parentEvent) {
                return this.httpService.powerbiRequestOptions(parentEvent, operationName);
            }, DatamartHttpService.prototype.buildCreateBaseURL = function(groupGuid, datamartType, subfolderObjectId) {
                var url = "v1.0/myorg/groups/".concat(groupGuid, "/").concat((0, utils.wZ)(datamartType));
                return subfolderObjectId ? url.concat("?subFolderObjectId=", subfolderObjectId) : url;
            }, DatamartHttpService.prototype.buildBaseURL = function(datamartType) {
                return "v1.0/myorg/".concat((0, utils.wZ)(datamartType));
            }, DatamartHttpService.prototype.buildUserOperationsEndpointUrl = function(targetUriHost, capacityObjectId) {
                return "https://".concat(targetUriHost, "/webapi/capacities/").concat(capacityObjectId, "/workloads/DMS/DmsService/automatic");
            }, DatamartHttpService.prototype.buildUserOperationsBatchUrl = function(targetUriHost, capacityObjectId, batchId) {
                return "".concat(this.buildUserOperationsEndpointUrl(targetUriHost, capacityObjectId), "/batches/").concat(batchId);
            }, DatamartHttpService.prototype.buildExecuteSqlUrl = function(targetUriHost, capacityObjectId, datamartObjectId) {
                return "".concat(this.buildUserOperationsEndpointUrl(targetUriHost, capacityObjectId), "/datamarts/").concat(datamartObjectId, "/execute");
            }, DatamartHttpService.prototype.buildExecuteUserCommandUrl = function(targetUriHost, capacityObjectId, datamartObjectId) {
                return "".concat(this.buildUserOperationsEndpointUrl(targetUriHost, capacityObjectId), "/datamarts/").concat(datamartObjectId, "/batches");
            }, DatamartHttpService.prototype.buildLoadSampleBatchIdUrl = function(targetUriHost, capacityObjectId, datamartObjectId) {
                return "".concat(this.buildUserOperationsEndpointUrl(targetUriHost, capacityObjectId), "/datamarts/").concat(datamartObjectId, "/sample");
            }, DatamartHttpService.\u0275fac = function(t) {
                return new (t || DatamartHttpService)(core["\u0275\u0275inject"](http_service.O), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](upload_service.g), core["\u0275\u0275inject"](Telemetry.y0));
            }, DatamartHttpService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DatamartHttpService,
                factory: DatamartHttpService.\u0275fac,
                providedIn: "root"
            }), DatamartHttpService;
        }(), DatamartManageDatasetService = function() {
            function DatamartManageDatasetService(store, actions$, telemetryService, datamartHttpService) {
                this.store = store, this.actions$ = actions$, this.telemetryService = telemetryService, 
                this.datamartHttpService = datamartHttpService;
            }
            return DatamartManageDatasetService.prototype.initialize = function(tablesAndViews) {
                this.tablesAndViews = tablesAndViews;
            }, Object.defineProperty(DatamartManageDatasetService.prototype, "datamartObjectId", {
                get: function() {
                    return this.tablesAndViews.datamart.objectId;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DatamartManageDatasetService.prototype, "settings", {
                get: function() {
                    return this.tablesAndViews.settings;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(DatamartManageDatasetService.prototype, "source", {
                get: function() {
                    switch (this.tablesAndViews.datamartType) {
                      case 2:
                        return "Lakehouse";

                      case 4:
                        return "Warehouse";

                      case 1:
                        return "Datamart";
                    }
                },
                enumerable: !1,
                configurable: !0
            }), DatamartManageDatasetService.prototype.updateTables = function(objectsToAdd, objectsToRemove) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var action, error;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.tablesAndViews.skipStore ? [ 4, this.addOrRemoveTablesFromBI(objectsToAdd, objectsToRemove, this.tablesAndViews.datamartVersion, this.tablesAndViews.datamartObjectId, this.tablesAndViews.datamartType) ] : [ 3, 2 ];

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return this.store.dispatch(onAddRemoveTablesToBIFromManageDataset({
                                tableNamesToAdd: objectsToAdd,
                                tableNamesToRemove: objectsToRemove
                            })), this.actions$ ? [ 4, this.actions$.pipe((0, ngrx_effects.l4)(onAddRemoveTablesToBIFromManageDatasetFailed, schemaUpdatedAfterAddRemoveObject, getDatamartSchemaError), (0, 
                            take.q)(1)).toPromise() ] : [ 3, 4 ];

                          case 3:
                            if ((action = _a.sent()).type === schemaUpdatedAfterAddRemoveObject.type) this.createReportIfNeeded(); else if (action.type === onAddRemoveTablesToBIFromManageDatasetFailed.type) throw debug.fF.assertValue((error = action.error).error, "error.error has to be defined"), 
                            500 === error.status && this.store.dispatch(onAddRemoveTablesToBIFromManageDatasetFailedWithInternalError({
                                error
                            })), error;
                            _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, DatamartManageDatasetService.prototype.getTables = function(refresh, useSchemaView) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var models, type, tables, views, _a, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return !refresh && this.tablesAndViews ? [ 2, this.tablesAndViews ] : useSchemaView ? (models = void 0, 
                            this.tablesAndViews.skipStore ? (models = this.tablesAndViews.models, [ 3, 3 ]) : [ 3, 1 ]) : [ 3, 4 ];

                          case 1:
                            return [ 4, this.store.select(getDefaultDatasetFieldListModels).pipe((0, take.q)(1), (0, 
                            map.U)(function(models) {
                                return models;
                            })).toPromise() ];

                          case 2:
                            models = _b.sent(), _b.label = 3;

                          case 3:
                            return this.tablesAndViews = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.tablesAndViews), {
                                models
                            }), [ 2, this.tablesAndViews ];

                          case 4:
                            return this.store.dispatch(onRefreshFromManageDataset()), [ 4, this.actions$.pipe((0, 
                            ngrx_effects.l4)(getDatamartSchemaSuccess, getDatamartSchemaError), (0, take.q)(1), (0, 
                            ngrx_effects.IC)(function() {
                                return [ _this.store.select(getTables), _this.store.select(getViews) ];
                            })).toPromise() ];

                          case 5:
                            if (_a = _b.sent(), tables = _a[1], views = _a[2], (type = _a[0]).type === getDatamartSchemaSuccess.type) return this.tablesAndViews = (0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.tablesAndViews), {
                                tables,
                                views
                            }), [ 2, this.tablesAndViews ];
                            throw type.error;
                        }
                    });
                });
            }, DatamartManageDatasetService.prototype.createDataset = function(_datasetName, _workspaceObjectId, _objectsToAdd) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, "" ];
                    });
                });
            }, DatamartManageDatasetService.prototype.refreshSchema = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2 ];
                    });
                });
            }, DatamartManageDatasetService.prototype.getDatamartUserPermissions = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2 ];
                    });
                });
            }, DatamartManageDatasetService.prototype.createReportIfNeeded = function() {
                this.tablesAndViews.isFromNewReport && !this.tablesAndViews.skipStore && this.store.dispatch(createReport({
                    datamart: this.tablesAndViews.datamart
                }));
            }, DatamartManageDatasetService.prototype.addOrRemoveTablesFromBI = function(tableNamesToAdd, tableNamesToRemove, version, datamartObjectId, datamartType) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var addOrRemoveTablesFromBITelemetry, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return addOrRemoveTablesFromBITelemetry = this.telemetryService.startActivity(null, DatamartOnAddOrRemoveTableInBI), 
                            [ 4, this.datamartHttpService.addRemoveTablesFromBI({
                                datamartVersion: null != version ? version : 1,
                                executionMode: "Full",
                                commands: [ {
                                    $type: "AddRemoveTablesToBiModelCommand",
                                    tableNamesToAdd,
                                    tableNamesToRemove: null != tableNamesToRemove ? tableNamesToRemove : []
                                } ]
                            }, datamartObjectId, datamartType).pipe((0, mergeMap.zg)(function(batchResponse) {
                                return _this.datamartHttpService.waitForBatchProcessToComplete(datamartObjectId, batchResponse, datamartType).pipe((0, 
                                map.U)(function() {
                                    addOrRemoveTablesFromBITelemetry.resolve();
                                }));
                            }), (0, catchError.K)(function(error) {
                                throw addOrRemoveTablesFromBITelemetry.reject((0, errorDetailsHelper.GB)(error.error, error.status)), 
                                debug.fF.assertValue(error.error, "error.error has to be defined"), error;
                            })).toPromise() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, DatamartManageDatasetService.\u0275fac = function(t) {
                return new (t || DatamartManageDatasetService)(core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](telemetry_service.y0), core["\u0275\u0275inject"](DatamartHttpService));
            }, DatamartManageDatasetService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DatamartManageDatasetService,
                factory: DatamartManageDatasetService.\u0275fac
            }), DatamartManageDatasetService;
        }(), combineLatest = __webpack_require__(59017), startWith = __webpack_require__(22318), rx_component = __webpack_require__(73221), pbi_menu_contracts = __webpack_require__(64560), token = __webpack_require__(40543), standardizedEventsService = __webpack_require__(16601), TriInformationProtectionMandatoryLabelDialogServiceInjectionToken = new core.InjectionToken("TriInformationProtectionMandatoryLabelDialogService"), src = __webpack_require__(69388), ManageDatasetHelper = function() {
            function ManageDatasetHelper() {}
            return ManageDatasetHelper.convertTableViewsToFieldListModels = function(tablesAndViews, datasetDetails, datamartVersion, config) {
                var schemaToTableViewsLookup = this.getSchemaToTableViewsMap(tablesAndViews), models = {
                    schemas: {},
                    schemaObjectContainers: {},
                    tables: {},
                    views: {},
                    warehouses: {}
                }, warehouseMetadata = {
                    datamartType: datasetDetails.datamartType,
                    name: datasetDetails.datamartName,
                    datamartObjectId: datasetDetails.datamartId,
                    datamartVersion
                };
                models.warehouses[datasetDetails.datamartId] = {
                    canEdit: !1,
                    objectId: datasetDetails.datamartId,
                    categoryUrns: new Set,
                    warehouseMetadata,
                    isHidden: !1,
                    objectType: "Warehouse"
                };
                for (var _i = 0, _a = Array.from(schemaToTableViewsLookup.entries()); _i < _a.length; _i++) {
                    var _b = _a[_i], schemaName = _b[0], tableViews = _b[1], schemaPrefixUrn = "".concat(warehouseMetadata.datamartObjectId, "/").concat(schemaName), tablesPrefixUrn = "".concat(schemaPrefixUrn, "/Tables"), viewsPrefixUrn = "".concat(schemaPrefixUrn, "/Views"), tableUrns = new Set, viewUrns = new Set;
                    models.schemas[schemaPrefixUrn] = {
                        canEdit: !1,
                        warehouseMetadata,
                        schemaObjectContainersUrns: new Set([ tablesPrefixUrn, viewsPrefixUrn ]),
                        name: schemaName,
                        urn: schemaPrefixUrn,
                        isHidden: !1,
                        objectType: "Schema"
                    };
                    for (var _c = 0, _d = tableViews.tables; _c < _d.length; _c++) {
                        var table = _d[_c], tableUrn = "".concat(schemaPrefixUrn, "/").concat(table.name);
                        tableUrns.add(tableUrn), models.tables[tableUrn] = {
                            objectType: table.objectType,
                            columns: table.columns,
                            measures: table.measures,
                            isBiObject: table.isBiObject,
                            name: table.name,
                            uniqueName: table.uniqueName,
                            schemaName: table.schemaName,
                            id: table.id,
                            isHidden: !1,
                            canEdit: !0,
                            isManaged: !1,
                            syncErrors: [],
                            syncWarnings: [],
                            modelUrn: "",
                            urn: tableUrn,
                            fullyQualifiedName: "[".concat(warehouseMetadata.name, "].[").concat(schemaName, "].[").concat(table.name, "]"),
                            twoPartName: "[".concat(schemaName, "].[").concat(table.name, "]"),
                            warehouseName: warehouseMetadata.name,
                            warehouseId: warehouseMetadata.datamartObjectId
                        };
                    }
                    for (var _e = 0, _f = tableViews.views; _e < _f.length; _e++) {
                        var view = _f[_e], viewUrn = "".concat(schemaPrefixUrn, "/").concat(view.name);
                        viewUrns.add(viewUrn), models.views[viewUrn] = {
                            objectType: view.objectType,
                            columns: view.columns,
                            measures: view.measures,
                            isBiObject: view.isBiObject,
                            name: view.name,
                            uniqueName: view.uniqueName,
                            schemaName: view.schemaName,
                            isHidden: !1,
                            canEdit: !0,
                            isManaged: !1,
                            modelUrn: "",
                            urn: viewUrn,
                            fullyQualifiedName: "[".concat(warehouseMetadata.name, "].[").concat(schemaName, "].[").concat(view.name, "]"),
                            twoPartName: "[".concat(schemaName, "].[").concat(view.name, "]"),
                            warehouseName: warehouseMetadata.name,
                            warehouseId: warehouseMetadata.datamartObjectId
                        };
                    }
                    models.schemaObjectContainers[tablesPrefixUrn] = {
                        canEdit: !1,
                        childrenType: "Table",
                        childrenUrns: tableUrns,
                        isHidden: !1,
                        isLoaded: !0,
                        name: config.tablesTitle,
                        schemaName,
                        urn: tablesPrefixUrn,
                        warehouseMetadata,
                        objectType: "SchemaObjectContainer"
                    }, models.schemaObjectContainers[viewsPrefixUrn] = {
                        canEdit: !1,
                        childrenType: "View",
                        childrenUrns: viewUrns,
                        isHidden: !1,
                        isLoaded: !0,
                        name: config.viewsTitle,
                        schemaName,
                        urn: viewsPrefixUrn,
                        warehouseMetadata,
                        objectType: "SchemaObjectContainer"
                    };
                }
                return models;
            }, ManageDatasetHelper.updateTreeNodeState = function(node) {
                var everyNodeChecked = node.children.length > 0 && node.children.every(function(child) {
                    return child.checked;
                });
                node.checked = everyNodeChecked, node.isIndeterminate = node.children.some(function(child) {
                    return child.checked || child.isIndeterminate;
                }) && !everyNodeChecked, node.disabled = !(node.children.length > 0) || node.children.every(function(child) {
                    return child.disabled;
                });
            }, ManageDatasetHelper.getSchemaToTableViewsMap = function(tablesAndViews) {
                for (var schemaToTableViews = new Map, _i = 0, _a = tablesAndViews.tables; _i < _a.length; _i++) {
                    var table = _a[_i];
                    void 0 === (tableViews = schemaToTableViews.get(table.schemaName)) ? schemaToTableViews.set(table.schemaName, tableViews = {
                        tables: [ table ],
                        views: []
                    }) : tableViews.tables.push(table);
                }
                for (var _b = 0, _c = tablesAndViews.views; _b < _c.length; _b++) {
                    var tableViews, view = _c[_b];
                    void 0 === (tableViews = schemaToTableViews.get(view.schemaName)) ? schemaToTableViews.set(view.schemaName, tableViews = {
                        tables: [],
                        views: [ view ]
                    }) : tableViews.views.push(view);
                }
                return schemaToTableViews;
            }, ManageDatasetHelper.parseDatabaseTables = function(databaseDefinition, dataModel, command) {
                var tables = _.map(databaseDefinition.tables, function(table) {
                    var isBiObject = "Create" !== command && table.isBiObject;
                    return {
                        objectType: "Table",
                        columns: new Set,
                        measures: new Set,
                        isBiObject,
                        name: table.name,
                        uniqueName: table.uniqueName,
                        schemaName: table.schemaName
                    };
                });
                return this.filterTables(tables);
            }, ManageDatasetHelper.parseDatabaseViews = function(databaseDefinition, dataModel, command) {
                var views = _.map(databaseDefinition.views, function(view) {
                    var isBiObject = "Create" !== command && view.isBiObject;
                    return {
                        objectType: "View",
                        name: view.name,
                        columns: new Set,
                        measures: new Set,
                        isBiObject,
                        uniqueName: view.uniqueName,
                        schemaName: view.schemaName
                    };
                });
                return this.filterViews(views);
            }, ManageDatasetHelper.filterTables = function(tables) {
                return _.filter(tables, function(table) {
                    return "queryinsights" !== table.schemaName;
                });
            }, ManageDatasetHelper.filterViews = function(views) {
                return _.filter(views, function(view) {
                    return "queryinsights" !== view.schemaName;
                });
            }, ManageDatasetHelper;
        }(), pbi_menu_service = __webpack_require__(5467), template_dialog_component = __webpack_require__(96777), localize_directive = __webpack_require__(59968), message_banner_component = __webpack_require__(44641), pbi_checkbox_component = __webpack_require__(56011), pbi_office_icon_component = __webpack_require__(69437), tri_tooltip_directive = __webpack_require__(55490), tri_link_component = __webpack_require__(65e3), tri_search_box_component = __webpack_require__(89237), tri_spinner_component = __webpack_require__(54729), tri_svg_icon_component = __webpack_require__(74913), tri_checkbox_component = __webpack_require__(10965), group_selector = __webpack_require__(74076), contracts = __webpack_require__(7600), StandaloneUtility3 = __webpack_require__(43286), getEditableFoldersWithMyWorkspace = (0, 
        ngrx_store.P1)(group_selector.Hf, group_selector.iF, function(groups, myFolderObjectId) {
            var folders;
            return folders = _.isEmpty(myFolderObjectId) ? _.filter(groups, function(g) {
                return void 0 !== g.folderId && (!g.type || g.type !== contracts.Sr.AdminFolder) || g.isMyWorkspace;
            }) : _.filter(groups, function(g) {
                return void 0 !== g.folderId && g.objectId !== myFolderObjectId && (null == g ? void 0 : g.type) !== contracts.Sr.AdminFolder || g.isMyWorkspace;
            }), _.filter(folders, function(folder) {
                return (0, StandaloneUtility3.yE)(folder.permissions, 8) || folder.isMyWorkspace;
            });
        }), withLatestFrom = __webpack_require__(23558), group_store_service = __webpack_require__(19178), tri_dropdown_component = __webpack_require__(20551), tri_dropdown_item_component = __webpack_require__(64716), tri_dropdown_item_menu_directive = __webpack_require__(85721), tri_workspace_icon_component = __webpack_require__(22743), localize_pipe = __webpack_require__(85102);
        function WorkspacePickerComponent_div_0_tri_workspace_icon_3_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "tri-workspace-icon", 5), 2 & rf) {
                var ctx_r3 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("workspace", ctx_r3.currentSelection)("iconSizePx", 20);
            }
        }
        function WorkspacePickerComponent_div_0_tri_dropdown_item_6_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "tri-dropdown-item", 6), core["\u0275\u0275element"](1, "tri-workspace-icon", 5), 
            core["\u0275\u0275elementStart"](2, "div"), core["\u0275\u0275text"](3), core["\u0275\u0275elementEnd"]()()), 
            2 & rf) {
                var folder_r5 = ctx.$implicit;
                core["\u0275\u0275property"]("value", folder_r5), core["\u0275\u0275advance"](1), 
                core["\u0275\u0275property"]("workspace", folder_r5)("iconSizePx", 20), core["\u0275\u0275advance"](2), 
                core["\u0275\u0275textInterpolate"](folder_r5.displayName);
            }
        }
        function WorkspacePickerComponent_div_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r7 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div")(1, "tri-dropdown", 2), core["\u0275\u0275listener"]("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r6 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r6.currentSelection = $event);
                })("valueChange", function($event) {
                    core["\u0275\u0275restoreView"](_r7);
                    var ctx_r8 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r8.onWorkspaceSelected($event));
                }), core["\u0275\u0275elementStart"](2, "tri-dropdown-trigger"), core["\u0275\u0275template"](3, WorkspacePickerComponent_div_0_tri_workspace_icon_3_Template, 1, 2, "tri-workspace-icon", 3), 
                core["\u0275\u0275elementStart"](4, "div"), core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"]()(), 
                core["\u0275\u0275template"](6, WorkspacePickerComponent_div_0_tri_dropdown_item_6_Template, 4, 4, "tri-dropdown-item", 4), 
                core["\u0275\u0275pipe"](7, "async"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("value", ctx_r0.currentSelection)("isDisabled", ctx_r0.disabled)("options", ctx_r0.triDropdownOptions), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", null == ctx_r0.currentSelection ? null : ctx_r0.currentSelection.displayName), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](null == ctx_r0.currentSelection ? null : ctx_r0.currentSelection.displayName), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngForOf", core["\u0275\u0275pipeBind1"](7, 6, ctx_r0.folders$));
            }
        }
        function WorkspacePickerComponent_ng_template_1_span_0_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 8), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r9 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 1, ctx_r9.createWorkspaceKey), " ");
            }
        }
        function WorkspacePickerComponent_ng_template_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275template"](0, WorkspacePickerComponent_ng_template_1_span_0_Template, 3, 3, "span", 7), 
            2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngIf", ctx_r2.noWorkspaceFound);
            }
        }
        var WorkspacePickerComponent = function() {
            function WorkspacePickerComponent(featureSwitches, changeDetector, store, groupStore) {
                this.featureSwitches = featureSwitches, this.changeDetector = changeDetector, this.store = store, 
                this.groupStore = groupStore, this.noWorkspaceFound = !1, this.workspaceSelected = new core.EventEmitter, 
                this.foundWorkspaces = new core.EventEmitter;
            }
            return WorkspacePickerComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.createWorkspaceKey = this.featureSwitches.featureSwitches.goalsAllowedOnShared && !this.forceDisableSharedWorkspace ? "Create_Scorecard_Warning_No_Workspace_found" : "Create_Scorecard_Warning_No_Premium_workspace_found", 
                this.groupStore.ensureWorkspacesLoaded().then(function() {
                    _this.folders$ = _this.store.select(getEditableFoldersWithMyWorkspace).pipe((0, 
                    map.U)(function(folders) {
                        return _this.featureSwitches.featureSwitches.goalsAllowedOnShared && !_this.forceDisableSharedWorkspace || (folders = folders.filter(function(folder) {
                            return void 0 !== folder.capacitySkuTier;
                        })), _this.featureSwitches.featureSwitches.scorecardsInMyWorkspace && !_this.forceDisableMyWorkspace || (folders = folders.filter(function(folder) {
                            return !folder.isMyWorkspace;
                        })), void 0 !== _this.permissionFilter && (folders = folders.filter(function(folder) {
                            return (0, StandaloneUtility3.yE)(folder.permissions, _this.permissionFilter);
                        })), _.isEmpty(_this.capacityFilter) || (folders = folders.filter(function(folder) {
                            return _this.capacityFilter.includes(folder.capacitySkuTier);
                        })), _this.foundWorkspaces.emit(!_.isEmpty(folders)), _.isEmpty(folders) && (_this.noWorkspaceFound = !0), 
                        _.sortBy(folders, function(f) {
                            return f.displayName.toLocaleLowerCase();
                        });
                    })), _this.folders$.pipe((0, withLatestFrom.M)(_this.store.select(group_selector.S6)), (0, 
                    take.q)(1)).subscribe(function(_a) {
                        var currentSelection, folders = _a[0], currentGroup = _a[1];
                        _this.disabled || (currentSelection = (null == currentGroup ? void 0 : currentGroup.folderId) ? _.find(folders, function(folder) {
                            return folder.folderId === currentGroup.folderId;
                        }) : (null == currentGroup ? void 0 : currentGroup.isMyWorkspace) && !_this.forceDisableMyWorkspace ? _.find(folders, function(folder) {
                            return folder.isMyWorkspace;
                        }) : _.first(folders)) && _this.onWorkspaceSelected(currentSelection);
                        _this.changeDetector.detectChanges();
                    });
                });
            }, WorkspacePickerComponent.prototype.ngOnChanges = function(changes) {
                var _this = this;
                changes.currentWorkspaceObjectId && this.folders$ && this.folders$.pipe((0, take.q)(1)).subscribe(function(folders) {
                    _this.currentSelection = void 0;
                    for (var _i = 0, folders_1 = folders; _i < folders_1.length; _i++) {
                        var folder = folders_1[_i];
                        if (folder.objectId === _this.currentWorkspaceObjectId) {
                            _this.onWorkspaceSelected(folder);
                            break;
                        }
                    }
                });
            }, WorkspacePickerComponent.prototype.onWorkspaceSelected = function(folder) {
                this.currentSelection = folder, this.workspaceSelected.emit(folder);
            }, WorkspacePickerComponent.\u0275fac = function(t) {
                return new (t || WorkspacePickerComponent)(core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](ngrx_store.yh), core["\u0275\u0275directiveInject"](group_store_service.Y));
            }, WorkspacePickerComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: WorkspacePickerComponent,
                selectors: [ [ "workspace-picker" ] ],
                inputs: {
                    currentWorkspaceObjectId: "currentWorkspaceObjectId",
                    disabled: "disabled",
                    forceDisableSharedWorkspace: "forceDisableSharedWorkspace",
                    forceDisableMyWorkspace: "forceDisableMyWorkspace",
                    permissionFilter: "permissionFilter",
                    capacityFilter: "capacityFilter",
                    triDropdownOptions: "triDropdownOptions"
                },
                outputs: {
                    workspaceSelected: "workspaceSelected",
                    foundWorkspaces: "foundWorkspaces"
                },
                features: [ core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 3,
                vars: 2,
                consts: [ [ 4, "ngIf", "ngIfElse" ], [ "noFound", "" ], [ 1, "workspace-select", 3, "value", "isDisabled", "options", "valueChange" ], [ "class", "workspace-icon tri-mr-1", 3, "workspace", "iconSizePx", 4, "ngIf" ], [ 3, "value", 4, "ngFor", "ngForOf" ], [ 1, "workspace-icon", "tri-mr-1", 3, "workspace", "iconSizePx" ], [ 3, "value" ], [ "class", "warning", 4, "ngIf" ], [ 1, "warning" ] ],
                template: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275template"](0, WorkspacePickerComponent_div_0_Template, 8, 8, "div", 0), 
                    core["\u0275\u0275template"](1, WorkspacePickerComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, core["\u0275\u0275templateRefExtractor"])), 
                    2 & rf) {
                        var _r1 = core["\u0275\u0275reference"](2);
                        core["\u0275\u0275property"]("ngIf", !ctx.noWorkspaceFound)("ngIfElse", _r1);
                    }
                },
                dependencies: [ common.NgForOf, common.NgIf, tri_dropdown_component.M3, tri_dropdown_item_component.l, tri_dropdown_item_menu_directive.q, tri_dropdown_component.ii, tri_workspace_icon_component.y, common.AsyncPipe, localize_pipe.F ],
                styles: [ "tri-dropdown[_ngcontent-%COMP%]{flex:1;white-space:nowrap;text-align:left;width:100%;display:flex;align-items:center}tri-dropdown[_ngcontent-%COMP%]     .popout-button{border-radius:4px;border:1px solid var(--colorNeutralBackground2Pressed)}tri-dropdown-item[_ngcontent-%COMP%]     .item{height:28px}tri-dropdown-item[_ngcontent-%COMP%]     span{display:flex;flex-direction:row;flex-wrap:nowrap}tri-dropdown-item[_ngcontent-%COMP%]     img{height:20px;width:20px}tri-dropdown-trigger[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:nowrap}tri-dropdown-trigger[_ngcontent-%COMP%]     img{height:20px;width:20px}tri-dropdown-trigger[_ngcontent-%COMP%], tri-dropdown-item[_ngcontent-%COMP%], .workspace-select[_ngcontent-%COMP%]{font-weight:var(--fontWeightRegular);font-size:var(--fontSizeBase300);line-height:var(--lineHeightBase300)}.workspace-select[_ngcontent-%COMP%]{color:var(--colorNeutralForeground4)}" ],
                changeDetection: 0
            }), WorkspacePickerComponent;
        }(), tri_filter_menu_component = __webpack_require__(48242), pbi_tree_component = __webpack_require__(37196), _c0 = [ "datasetNameField" ];
        function ManageDatasetComponent_div_1_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementStart"](0, "div", 3)(1, "tri-spinner", 4), core["\u0275\u0275element"](2, "label", 5), 
            core["\u0275\u0275elementEnd"]()());
        }
        function ManageDatasetComponent_ng_template_3_form_0_message_banner_1_Template(rf, ctx) {
            if (1 & rf) {
                var _r17 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "message-banner", 19), core["\u0275\u0275listener"]("hideBanner", function() {
                    core["\u0275\u0275restoreView"](_r17);
                    var ctx_r16 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r16.closeBanner());
                })("buttonClicked", function() {
                    core["\u0275\u0275restoreView"](_r17);
                    var ctx_r18 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r18.errorButtonClicked());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r6 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("viewModel", ctx_r6.messageBannerModel);
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_div_2_div_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 23), core["\u0275\u0275element"](1, "label", 24)(2, "input", 25, 26), 
            core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275pipe"](5, "localize"), 
            core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r19 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("placeholder", core["\u0275\u0275pipeBind1"](4, 4, "SemanticModel_EnterName"))("maxlength", ctx_r19.datasetNameMaxCharacterLimit), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](5, 6, "Name"))("disabled", !!core["\u0275\u0275pipeBind1"](6, 8, ctx_r19.isButtonLevelSpinnerDisplayed$) || null);
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_div_2_div_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r24 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 27)(1, "div", 28), core["\u0275\u0275element"](2, "label", 29)(3, "tri-svg-icon", 30), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](4, "workspace-picker", 31, 32), 
                core["\u0275\u0275listener"]("workspaceSelected", function($event) {
                    core["\u0275\u0275restoreView"](_r24);
                    var ctx_r23 = core["\u0275\u0275nextContext"](4);
                    return core["\u0275\u0275resetView"](ctx_r23.onWorkspaceSelected($event));
                }), core["\u0275\u0275pipe"](6, "async"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r20 = core["\u0275\u0275nextContext"](4), _r3 = core["\u0275\u0275reference"](6);
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("triTooltip", _r3), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("disabled", core["\u0275\u0275pipeBind1"](6, 6, ctx_r20.isButtonLevelSpinnerDisplayed$))("currentWorkspaceObjectId", ctx_r20.selectedWorkspaceId)("forceDisableMyWorkspace", ctx_r20.forceDisableMyWorkspace)("capacityFilter", ctx_r20.workspaceCapacityFilter)("infoIconData", ctx_r20.infoIconData);
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_div_2_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 20), core["\u0275\u0275template"](1, ManageDatasetComponent_ng_template_3_form_0_div_2_div_1_Template, 7, 10, "div", 21), 
            core["\u0275\u0275template"](2, ManageDatasetComponent_ng_template_3_form_0_div_2_div_2_Template, 7, 8, "div", 22), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var ctx_r7 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r7.hideDatasetNameField), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r7.hideWorkspacePicker);
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_ng_container_13_Template(rf, ctx) {
            if (1 & rf) {
                var _r27 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275elementStart"](1, "button", 33, 34), 
                core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r27);
                    var _r25 = core["\u0275\u0275reference"](2), ctx_r26 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r26.openMenu(_r25));
                }), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275pipe"](4, "async"), 
                core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275pipe"](6, "localize"), 
                core["\u0275\u0275element"](7, "pbi-office-icon", 35), core["\u0275\u0275elementEnd"](), 
                core["\u0275\u0275elementContainerEnd"]();
            }
            if (2 & rf) {
                var ctx_r9 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("disabled", core["\u0275\u0275pipeBind1"](3, 4, ctx_r9.isButtonLevelSpinnerDisplayed$))("triTooltipDisabled", core["\u0275\u0275pipeBind1"](4, 6, ctx_r9.isButtonLevelSpinnerDisplayed$))("triTooltip", core["\u0275\u0275pipeBind1"](5, 8, "Datamart_Manage_Default_Dataset_Filter_Button")), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](6, 10, "Datamart_Manage_Default_Dataset_Filter_Button"));
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_ng_template_14_Template(rf, ctx) {
            if (1 & rf) {
                var _r30 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 36), core["\u0275\u0275listener"]("click", function($event) {
                    return $event.stopPropagation();
                }), core["\u0275\u0275elementStart"](1, "tri-filter-menu", 37), core["\u0275\u0275listener"]("filterChange", function($event) {
                    core["\u0275\u0275restoreView"](_r30);
                    var ctx_r29 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r29.onFilterChange($event));
                }), core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275pipe"](4, "localize"), core["\u0275\u0275pipe"](5, "localize"), 
                core["\u0275\u0275pipe"](6, "localize"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r11 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("isDisabled", core["\u0275\u0275pipeBind1"](2, 8, ctx_r11.isButtonLevelSpinnerDisplayed$))("triTooltipDisabled", core["\u0275\u0275pipeBind1"](3, 10, ctx_r11.isButtonLevelSpinnerDisplayed$))("triTooltip", core["\u0275\u0275pipeBind1"](4, 12, "Datamart_Manage_Default_Dataset_Filter_Button"))("filters", ctx_r11.schemaViewFilters)("useTridentUIStyle", !0)("includeIconOnly", !0)("ariaLabel", core["\u0275\u0275pipeBind1"](6, 16, "Filter")), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](5, 14, "Datamart_Manage_Default_Dataset_Filter_Button"));
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_button_16_Template(rf, ctx) {
            if (1 & rf) {
                var _r32 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "button", 38), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r32);
                    var ctx_r31 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r31.refresh());
                }), core["\u0275\u0275pipe"](1, "async"), core["\u0275\u0275pipe"](2, "async"), 
                core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275pipe"](4, "localize"), 
                core["\u0275\u0275element"](5, "tri-svg-icon", 39), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r12 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275property"]("disabled", core["\u0275\u0275pipeBind1"](1, 4, ctx_r12.isButtonLevelSpinnerDisplayed$))("triTooltipDisabled", core["\u0275\u0275pipeBind1"](2, 6, ctx_r12.isButtonLevelSpinnerDisplayed$))("triTooltip", core["\u0275\u0275pipeBind1"](3, 8, "Reload")), 
                core["\u0275\u0275attribute"]("aria-label", core["\u0275\u0275pipeBind1"](4, 10, "Reload"));
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_ng_container_17_span_7_div_1_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 47), core["\u0275\u0275element"](1, "pbi-checkbox", 48), 
            core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275element"](3, "tri-svg-icon", 49), 
            core["\u0275\u0275elementStart"](4, "label"), core["\u0275\u0275text"](5), core["\u0275\u0275elementEnd"]()()), 
            2 & rf) {
                var ctx_r37 = core["\u0275\u0275nextContext"](), checkbox_r34 = ctx_r37.$implicit, i_r35 = ctx_r37.index, ctx_r36 = core["\u0275\u0275nextContext"](4);
                core["\u0275\u0275property"]("triTooltipDisabled", !checkbox_r34.isDisabled)("triTooltip", checkbox_r34.toolTip), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("formControlName", i_r35)("disabled", core["\u0275\u0275pipeBind1"](2, 8, ctx_r36.isButtonLevelSpinnerDisplayed$))("ariaLabel", checkbox_r34.item.uniqueName), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("name", checkbox_r34.iconProperties.iconName)("sprite", checkbox_r34.iconProperties.sprite), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](checkbox_r34.item.uniqueName);
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_ng_container_17_span_7_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 45), core["\u0275\u0275template"](1, ManageDatasetComponent_ng_template_3_form_0_ng_container_17_span_7_div_1_Template, 6, 10, "div", 46), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var checkbox_r34 = ctx.$implicit;
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", checkbox_r34.isVisible);
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_ng_container_17_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275element"](1, "pbi-checkbox", 40), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "async"), core["\u0275\u0275element"](4, "hr", 41), 
            core["\u0275\u0275elementStart"](5, "div", 42)(6, "div", 43), core["\u0275\u0275template"](7, ManageDatasetComponent_ng_template_3_form_0_ng_container_17_span_7_Template, 2, 1, "span", 44), 
            core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementContainerEnd"]()), 
            2 & rf) {
                var ctx_r13 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275propertyInterpolate"]("label", core["\u0275\u0275pipeBind1"](2, 3, "SelectAll")), 
                core["\u0275\u0275property"]("disabled", core["\u0275\u0275pipeBind1"](3, 5, ctx_r13.isButtonLevelSpinnerDisplayed$)), 
                core["\u0275\u0275advance"](6), core["\u0275\u0275property"]("ngForOf", ctx_r13.allCheckboxes);
            }
        }
        function ManageDatasetComponent_ng_template_3_form_0_ng_template_18_Template(rf, ctx) {
            if (1 & rf) {
                var _r39 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 50)(1, "tri-checkbox", 51), core["\u0275\u0275listener"]("onChange", function() {
                    core["\u0275\u0275restoreView"](_r39);
                    var ctx_r38 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r38.schemaViewSelectAll());
                }), core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275pipe"](3, "async"), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275element"](4, "hr", 41), core["\u0275\u0275elementStart"](5, "pbi-tree", 52), 
                core["\u0275\u0275listener"]("onNodeCheck", function($event) {
                    core["\u0275\u0275restoreView"](_r39);
                    var ctx_r40 = core["\u0275\u0275nextContext"](3);
                    return core["\u0275\u0275resetView"](ctx_r40.onNodeCheck($event));
                }), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r15 = core["\u0275\u0275nextContext"](3);
                core["\u0275\u0275advance"](1), core["\u0275\u0275propertyInterpolate"]("label", core["\u0275\u0275pipeBind1"](2, 9, "SelectAll")), 
                core["\u0275\u0275property"]("checked", null == ctx_r15.schemaViewSelectAllState ? null : ctx_r15.schemaViewSelectAllState.checked)("indeterminate", null == ctx_r15.schemaViewSelectAllState ? null : ctx_r15.schemaViewSelectAllState.isIndeterminate)("disabled", core["\u0275\u0275pipeBind1"](3, 11, ctx_r15.isButtonLevelSpinnerDisplayed$)), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("tree", ctx_r15.treeModel)("search", ctx_r15.schemaViewSearchText)("checkMode", ctx_r15.checkMode)("filter", ctx_r15.schemaViewFieldListFilters)("options", ctx_r15.fieldListOptions);
            }
        }
        var _c1 = function(a0) {
            return {
                "overflow-y": a0
            };
        };
        function ManageDatasetComponent_ng_template_3_form_0_Template(rf, ctx) {
            if (1 & rf) {
                var _r42 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "form", 7), core["\u0275\u0275template"](1, ManageDatasetComponent_ng_template_3_form_0_message_banner_1_Template, 1, 1, "message-banner", 8), 
                core["\u0275\u0275template"](2, ManageDatasetComponent_ng_template_3_form_0_div_2_Template, 3, 2, "div", 9), 
                core["\u0275\u0275elementStart"](3, "p", 10), core["\u0275\u0275text"](4), core["\u0275\u0275elementStart"](5, "tri-link", 11), 
                core["\u0275\u0275text"](6), core["\u0275\u0275pipe"](7, "localize"), core["\u0275\u0275elementEnd"]()(), 
                core["\u0275\u0275elementStart"](8, "div", 12)(9, "tri-search-box", 13, 14), core["\u0275\u0275listener"]("value", function($event) {
                    core["\u0275\u0275restoreView"](_r42);
                    var ctx_r41 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r41.onSearchTextChange($event));
                }), core["\u0275\u0275pipe"](11, "localize"), core["\u0275\u0275pipe"](12, "async"), 
                core["\u0275\u0275template"](13, ManageDatasetComponent_ng_template_3_form_0_ng_container_13_Template, 8, 12, "ng-container", 15), 
                core["\u0275\u0275template"](14, ManageDatasetComponent_ng_template_3_form_0_ng_template_14_Template, 7, 18, "ng-template", null, 16, core["\u0275\u0275templateRefExtractor"]), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](16, ManageDatasetComponent_ng_template_3_form_0_button_16_Template, 6, 12, "button", 17), 
                core["\u0275\u0275elementEnd"](), core["\u0275\u0275template"](17, ManageDatasetComponent_ng_template_3_form_0_ng_container_17_Template, 8, 7, "ng-container", 15), 
                core["\u0275\u0275template"](18, ManageDatasetComponent_ng_template_3_form_0_ng_template_18_Template, 6, 13, "ng-template", null, 18, core["\u0275\u0275templateRefExtractor"]), 
                core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var _r10 = core["\u0275\u0275reference"](15), _r14 = core["\u0275\u0275reference"](19), ctx_r5 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275property"]("formGroup", ctx_r5.manageDatasetGroup)("ngStyle", core["\u0275\u0275pureFunction1"](22, _c1, ctx_r5.useSchemaView ? "hidden" : "auto")), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx_r5.messageBannerModel), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r5.hideDatasetNameField || !ctx_r5.hideWorkspacePicker), 
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"]("", ctx_r5.dialogDescription, " "), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("href", "Datamart" === ctx_r5.manageDatasetService.source ? "https://go.microsoft.com/fwlink/?linkid=2236525" : "https://go.microsoft.com/fwlink/?linkid=2275520")("external", !0), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](7, 16, "LearnMore"), " "), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("placeholderText", core["\u0275\u0275pipeBind1"](11, 18, "SearchBox_Text"))("isDisabled", core["\u0275\u0275pipeBind1"](12, 20, ctx_r5.isButtonLevelSpinnerDisplayed$))("autocomplete", "off"), 
                core["\u0275\u0275advance"](4), core["\u0275\u0275property"]("ngIf", !ctx_r5.useSchemaView)("ngIfElse", _r10), 
                core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", !ctx_r5.isDefaultDataset && !ctx_r5.isRemoteModeling), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", !ctx_r5.useSchemaView)("ngIfElse", _r14);
            }
        }
        function ManageDatasetComponent_ng_template_3_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275template"](0, ManageDatasetComponent_ng_template_3_form_0_Template, 20, 24, "form", 6), 
            2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("ngIf", ctx_r2.manageDatasetGroup);
            }
        }
        function ManageDatasetComponent_ng_template_5_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementStart"](0, "span"), core["\u0275\u0275text"](1), 
            core["\u0275\u0275pipe"](2, "localize"), core["\u0275\u0275elementStart"](3, "tri-link", 53), 
            core["\u0275\u0275text"](4), core["\u0275\u0275pipe"](5, "localize"), core["\u0275\u0275elementEnd"]()()), 
            2 & rf && (core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](2, 3, "SeeThrough_Workspace_Tooltip"), " "), 
            core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("external", !0), core["\u0275\u0275advance"](1), 
            core["\u0275\u0275textInterpolate1"](" ", core["\u0275\u0275pipeBind1"](5, 5, "LearnMore"), " "));
        }
        var nullInformationProtectionProvider = {
            isInformationProtectionSupportedForTridentEnabled: function() {
                return debug.fF.assertFail("ManageDatasetComponent: InformationProtectionService is not provided, isInformationProtectionSupportedForTridentEnabled will always be false."), 
                !1;
            },
            getOrLoadArtifactInformationProtection: function() {
                return debug.fF.assertFail("ManageDatasetComponent: InformationProtectionService is not provided, getOrLoadArtifactInformationProtection will always be null."), 
                (0, of.of)(null);
            },
            isMandatoryLabelEnabled: function() {
                return debug.fF.assertFail("ManageDatasetComponent: InformationProtectionService is not provided, isMandatoryLabelEnabled will always be false."), 
                (0, of.of)(!1);
            },
            getDefaultLabelId: function() {
                return debug.fF.assertFail("ManageDatasetComponent: InformationProtectionService is not provided, getDefaultLabelId will always be null."), 
                (0, of.of)(null);
            }
        }, nullInformationProtectionDialogProvider = {
            open: function() {
                return debug.fF.assertFail("ManageDatasetComponent: TriInformationProtectionMandatoryLabelDialogService is not provided, open will always do nothing and return undefined."), 
                Promise.resolve(void 0);
            }
        }, ManageDatasetComponent = function(_super) {
            function ManageDatasetComponent(templateDialogPayload, formBuilder, telemetryService, pbiMenuService, featureSwitchService, localizationService, pbiTreeConverter, ref, searchStrategy, manageDatasetService, standardizedEventsService, informationProtectionService, sensitivityDialogService, featureSwitchValuesLoader) {
                var _this = _super.call(this) || this;
                return _this.templateDialogPayload = templateDialogPayload, _this.formBuilder = formBuilder, 
                _this.telemetryService = telemetryService, _this.pbiMenuService = pbiMenuService, 
                _this.featureSwitchService = featureSwitchService, _this.localizationService = localizationService, 
                _this.pbiTreeConverter = pbiTreeConverter, _this.ref = ref, _this.searchStrategy = searchStrategy, 
                _this.manageDatasetService = manageDatasetService, _this.standardizedEventsService = standardizedEventsService, 
                _this.informationProtectionService = informationProtectionService, _this.sensitivityDialogService = sensitivityDialogService, 
                _this.featureSwitchValuesLoader = featureSwitchValuesLoader, _this.workspaceCapacityFilter = [ 1, 7, 8, 9 ], 
                _this.forceDisableMyWorkspace = !0, _this.datasetNameMaxCharacterLimit = 250, _this.allCheckboxes = [], 
                _this.validDatasetName$ = new BehaviorSubject.X(!1), _this.validWorkspaceSelected$ = new BehaviorSubject.X(!1), 
                _this.validCheckboxSelections$ = new BehaviorSubject.X(!1), _this.isButtonLevelSpinnerDisplayed$ = new BehaviorSubject.X(!1), 
                _this.isDialogLevelSpinnerDisplayed$ = new BehaviorSubject.X(!1), _this.hasSelectedViews = !1, 
                _this.didShowViewsDisclaimer = !1, _this.didFocusOnNameField = !1, _this.selectedOptions = new Map, 
                _this.selectedViewUrns = new Set, _this.originallyDisabledNodes = new Set, _this.schemaViewFieldListFilters = void 0, 
                _this.foundItem = !1, _this.allTreeCheckboxes = {
                    objectsToAdd: [],
                    objectsToRemove: []
                }, _this.useSchemaView = !1, _this.checkMode = pbi_tree_contracts.kH.Multi, _this.fieldListOptions = {
                    search: _this.searchStrategy
                }, informationProtectionService || (_this.informationProtectionService = nullInformationProtectionProvider), 
                sensitivityDialogService || (_this.sensitivityDialogService = nullInformationProtectionDialogProvider), 
                _this;
            }
            return (0, tslib_es6.__extends)(ManageDatasetComponent, _super), Object.defineProperty(ManageDatasetComponent.prototype, "isErrorBannerShown", {
                get: function() {
                    return this.messageBannerModel && 1 === this.messageBannerModel.bannerType;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "isCreateCommand", {
                get: function() {
                    return "Create" === this.manageDatasetService.settings.command;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "isEditCommand", {
                get: function() {
                    return "Edit" === this.manageDatasetService.settings.command;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "isWarehouseOrDatamart", {
                get: function() {
                    return "Warehouse" === this.manageDatasetService.source || "Datamart" === this.manageDatasetService.source;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "isDefaultDataset", {
                get: function() {
                    return this.manageDatasetService.settings.isFromManageDefaultDataset;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "isRemoteModeling", {
                get: function() {
                    return this.manageDatasetService.settings.returnTableResults;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "hideDatasetNameField", {
                get: function() {
                    return this.manageDatasetService.settings.hideDatasetNameField || this.isEditCommand;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "hideWorkspacePicker", {
                get: function() {
                    return this.manageDatasetService.settings.hideWorkspacePicker || this.isEditCommand;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetComponent.prototype, "featureName", {
                get: function() {
                    return this.isDefaultDataset ? "ManageDefaultDataset" : "SeeThroughModeling";
                },
                enumerable: !1,
                configurable: !0
            }), ManageDatasetComponent.prototype.hasDatamartWritePermission = function(datamartGroupPermission) {
                return "Contributor" === datamartGroupPermission || "Member" === datamartGroupPermission || "Admin" === datamartGroupPermission;
            }, ManageDatasetComponent.prototype.onWorkspaceSelected = function(value) {
                value ? (this.selectedWorkspaceId = value.objectId, this.validWorkspaceSelected$.next(!0)) : (this.selectedWorkspaceId = void 0, 
                this.validWorkspaceSelected$.next(!1));
            }, ManageDatasetComponent.prototype.ngOnInit = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.featureSwitchValuesLoader ? [ 4, this.featureSwitchValuesLoader.ensureDynamicFeatureSwitchesLoaded() ] : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return this.dialogDescription = this.localizationService.get("Update_SemanticModel_Objects"), 
                            this.useSchemaView = "Warehouse" === this.manageDatasetService.source && (this.isEditCommand && this.isDefaultDataset || this.isCreateCommand) || this.featureSwitchService.featureSwitches.SchemaPickerLHSqlEndpointEditTables, 
                            this.allValid$ = (0, combineLatest.aj)([ this.validDatasetName$, this.validWorkspaceSelected$, this.validCheckboxSelections$, this.isButtonLevelSpinnerDisplayed$, this.isDialogLevelSpinnerDisplayed$ ]).pipe((0, 
                            map.U)(function(_a) {
                                return (_a[0] || _this.hideDatasetNameField) && (_a[1] || _this.hideWorkspacePicker) && _a[2] && !_a[3] && !_a[4];
                            })), this.allValid$.subscribe(function(allValid) {
                                _this.templateDialogPayload.setOkButtonState(!allValid);
                            }), this.templateDialogPayload.onOkButtonClick = function() {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        return [ 2, this.onOk() ];
                                    });
                                });
                            }, this.templateDialogPayload.onCancelButtonClick = function() {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        return [ 2, this.onCancel() ];
                                    });
                                });
                            }, this.templateDialogPayload.spinnerDisplay$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(isSpinnerDisplayed) {
                                isSpinnerDisplayed && _this.isErrorBannerShown && _this.closeBanner(), _this.isButtonLevelSpinnerDisplayed$.next(isSpinnerDisplayed);
                            }), this.isDialogLevelSpinnerDisplayed$.next(!0), this.useSchemaView ? [ 4, this.setUpSchemaView() ] : [ 3, 4 ];

                          case 3:
                            return _a.sent(), [ 3, 6 ];

                          case 4:
                            return [ 4, this.populateFlatListCheckboxes(!1) ];

                          case 5:
                            _a.sent(), _a.label = 6;

                          case 6:
                            return this.isDialogLevelSpinnerDisplayed$.next(!1), [ 2 ];
                        }
                    });
                });
            }, ManageDatasetComponent.prototype.setInitialFilters = function() {
                var isTableFilterChecked = !this.isWarehouseOrDatamart, isViewFilterChecked = this.hasSelectedViews && !this.isWarehouseOrDatamart;
                this.filterMenu = {
                    styles: {
                        "border-radius": "5px",
                        width: "225px"
                    },
                    items: [ {
                        id: FilterOptions.ShowOnlyTables,
                        type: pbi_menu_contracts.iB.Button,
                        text: this.localizationService.get("Show_Tables"),
                        checkable: !0,
                        checked: isTableFilterChecked
                    }, {
                        id: FilterOptions.ShowOnlyViews,
                        type: pbi_menu_contracts.iB.Button,
                        text: this.localizationService.get("Datamart_Show_Views"),
                        checkable: !0,
                        checked: isViewFilterChecked
                    } ]
                }, this.selectedOptions.set(FilterOptions.ShowOnlyTables, isTableFilterChecked), 
                this.selectedOptions.set(FilterOptions.ShowOnlyViews, isViewFilterChecked);
            }, ManageDatasetComponent.prototype.ngAfterViewChecked = function() {
                this.datasetNameFieldRef && !this.didFocusOnNameField && this.isCreateCommand && (this.datasetNameFieldRef.nativeElement.focus(), 
                this.didFocusOnNameField = !0);
            }, ManageDatasetComponent.prototype.onSearchTextChange = function(value) {
                this.useSchemaView ? this.schemaViewSearchText = value : (this.allCheckboxes.forEach(function(checkbox) {
                    return checkbox.isVisible = checkbox.item.uniqueName.includes(value);
                }), this.handleSelectAllCheckbox());
            }, ManageDatasetComponent.prototype.onOk = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var finalSelectedObjects, manageDatasetOnOkEvent, sensitivityLabelId, informationProtection, _b, datasetUrl, finalSelectionLookup, tableViewsToInclude, _i, _c, table, _d, _e, view, tableResults, dialogResult, error_1;
                    return (0, tslib_es6.__generator)(this, function(_f) {
                        switch (_f.label) {
                          case 0:
                            return this.templateDialogPayload.setSpinnerDisplay(!0), finalSelectedObjects = this.getFinalSelectedObjects(), 
                            this.useSchemaView && this.schemaViewSelectAll(!0), manageDatasetOnOkEvent = this.telemetryService.logEvent(SeeThroughModelingEditTablesConfirmButtonClick, {
                                source: this.manageDatasetService.source,
                                command: this.manageDatasetService.settings.command,
                                objectsToAdd: finalSelectedObjects.objectsToAdd,
                                objectsToRemove: finalSelectedObjects.objectsToRemove
                            }), this.logStandardizedEvent(manageDatasetOnOkEvent), _.isEmpty(finalSelectedObjects.objectsToAdd) && _.isEmpty(finalSelectedObjects.objectsToRemove) ? (this.tablesAndViews.skipStore ? this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Cancelled",
                                isFromNewReport: this.tablesAndViews.isFromNewReport
                            }) : (this.manageDatasetService.createReportIfNeeded(), this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Cancelled"
                            })), [ 3, 18 ]) : [ 3, 1 ];

                          case 1:
                            this.templateDialogPayload.toggleCancelButton(!0), _f.label = 2;

                          case 2:
                            switch (_f.trys.push([ 2, 17, , 18 ]), this.manageDatasetService.settings.command) {
                              case "Create":
                                return [ 3, 3 ];

                              case "Edit":
                                return [ 3, 11 ];
                            }
                            return [ 3, 15 ];

                          case 3:
                            return sensitivityLabelId = void 0, this.informationProtectionService.isInformationProtectionSupportedForTridentEnabled() ? (sensitivityLabelId = this.manageDatasetService.settings.parentSensitivityLabelId) ? [ 3, 5 ] : [ 4, this.informationProtectionService.getOrLoadArtifactInformationProtection(src.Bz.Datamart, null, this.manageDatasetService.datamartObjectId, !0).toPromise() ] : [ 3, 9 ];

                          case 4:
                            informationProtection = _f.sent(), sensitivityLabelId = null == informationProtection ? void 0 : informationProtection.labelId, 
                            _f.label = 5;

                          case 5:
                            return (_b = !sensitivityLabelId) ? [ 4, this.shouldShowSensitivityLabelPicker() ] : [ 3, 7 ];

                          case 6:
                            _b = _f.sent(), _f.label = 7;

                          case 7:
                            return _b ? [ 4, this.sensitivityDialogService.open({
                                artifactTypeName: "dataset"
                            }) ] : [ 3, 9 ];

                          case 8:
                            if (!(sensitivityLabelId = _f.sent())) return this.templateDialogPayload.toggleCancelButton(!1), 
                            this.templateDialogPayload.setSpinnerDisplay(!1), [ 2 ];
                            _f.label = 9;

                          case 9:
                            return [ 4, this.manageDatasetService.createDataset(this.datasetName, this.selectedWorkspaceId, finalSelectedObjects.objectsToAdd, sensitivityLabelId) ];

                          case 10:
                            return datasetUrl = _f.sent(), this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Succeeded",
                                datasetUrl
                            }), [ 3, 16 ];

                          case 11:
                            if (!this.isRemoteModeling) return [ 3, 12 ];
                            for (finalSelectionLookup = new Set(finalSelectedObjects.objectsToAdd), tableViewsToInclude = [], 
                            _i = 0, _c = this.tablesAndViews.tables; _i < _c.length; _i++) tableViewsToInclude.push((0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, table = _c[_i]), {
                                isBiObject: finalSelectionLookup.has(table.uniqueName)
                            }));
                            for (_d = 0, _e = this.tablesAndViews.views; _d < _e.length; _d++) tableViewsToInclude.push((0, 
                            tslib_es6.__assign)((0, tslib_es6.__assign)({}, view = _e[_d]), {
                                isBiObject: finalSelectionLookup.has(view.uniqueName)
                            }));
                            return tableResults = _.map(tableViewsToInclude, function(tableOrView) {
                                return {
                                    sourceName: tableOrView.name,
                                    sourceLineageTag: tableOrView.sourceLineageTag,
                                    checked: tableOrView.isBiObject
                                };
                            }).filter(function(result) {
                                return !!result.sourceName;
                            }), this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Succeeded",
                                tableResults
                            }), [ 3, 14 ];

                          case 12:
                            return [ 4, this.manageDatasetService.updateTables(finalSelectedObjects.objectsToAdd, finalSelectedObjects.objectsToRemove) ];

                          case 13:
                            _f.sent(), dialogResult = {
                                status: "Succeeded"
                            }, this.tablesAndViews.skipStore && (dialogResult = (0, tslib_es6.__assign)((0, 
                            tslib_es6.__assign)({}, dialogResult), {
                                isFromNewReport: this.tablesAndViews.isFromNewReport,
                                diagramLayoutChange: {
                                    initialTablesState: this.getAllBiTablesAndViews(),
                                    modelObjectsToAdd: finalSelectedObjects.objectsToAdd,
                                    modelObjectsToRemove: finalSelectedObjects.objectsToRemove
                                }
                            })), this.templateDialogPayload.closeDialogFromConsumer(dialogResult), _f.label = 14;

                          case 14:
                            return [ 3, 16 ];

                          case 15:
                            return debug.fF.assertFail("Unknown command"), [ 3, 16 ];

                          case 16:
                            return [ 3, 18 ];

                          case 17:
                            return 500 !== (error_1 = _f.sent()).status ? (this.showErrorMessageBanner(error_1), 
                            this.useSchemaView && this.schemaViewSelectAll(!1), this.templateDialogPayload.toggleCancelButton(!1), 
                            this.templateDialogPayload.setSpinnerDisplay(!1), [ 2 ]) : (this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Failed",
                                error: error_1
                            }), [ 3, 18 ]);

                          case 18:
                            return [ 2 ];
                        }
                    });
                });
            }, ManageDatasetComponent.prototype.onCancel = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var isCancelButtonHidden, manageDatasetOnCancelEvent;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return isCancelButtonHidden = !1, this.templateDialogPayload.hideCancelButton$.pipe((0, 
                        take.q)(1)).subscribe(function(hideCancelButton) {
                            isCancelButtonHidden = hideCancelButton;
                        }), isCancelButtonHidden || (manageDatasetOnCancelEvent = this.telemetryService.logEvent(SeeThroughModelingEditTablesCancelButtonClick, {
                            source: this.manageDatasetService.source,
                            command: this.manageDatasetService.settings.command
                        }), this.logStandardizedEvent(manageDatasetOnCancelEvent), this.templateDialogPayload.closeDialogFromConsumer({
                            status: "Cancelled"
                        })), [ 2 ];
                    });
                });
            }, ManageDatasetComponent.prototype.refresh = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var tryToRefresh, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.isRemoteModeling ? [ 2 ] : (this.isErrorBannerShown && this.closeBanner(), 
                            this.isDialogLevelSpinnerDisplayed$.next(!0), tryToRefresh = function() {
                                return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                                    var datamartUserPermissions, error_2;
                                    return (0, tslib_es6.__generator)(this, function(_a) {
                                        switch (_a.label) {
                                          case 0:
                                            return _a.trys.push([ 0, 4, , 5 ]), [ 4, this.manageDatasetService.getDatamartUserPermissions() ];

                                          case 1:
                                            return datamartUserPermissions = _a.sent(), this.hasDatamartWritePermission(datamartUserPermissions.groupAccessRight) ? [ 4, this.manageDatasetService.refreshSchema() ] : [ 3, 3 ];

                                          case 2:
                                            _a.sent(), _a.label = 3;

                                          case 3:
                                            return [ 3, 5 ];

                                          case 4:
                                            return error_2 = _a.sent(), this.showErrorMessageBanner(error_2), [ 3, 5 ];

                                          case 5:
                                            return [ 2 ];
                                        }
                                    });
                                });
                            }, this.useSchemaView ? (this.schemaViewFieldListFilters = void 0, [ 4, tryToRefresh() ]) : [ 3, 3 ]);

                          case 1:
                            return _a.sent(), [ 4, this.setUpSchemaView(!0) ];

                          case 2:
                            return _a.sent(), [ 3, 6 ];

                          case 3:
                            return [ 4, tryToRefresh() ];

                          case 4:
                            return _a.sent(), [ 4, this.populateFlatListCheckboxes(!0) ];

                          case 5:
                            _a.sent(), _a.label = 6;

                          case 6:
                            return this.isDialogLevelSpinnerDisplayed$.next(!1), [ 2 ];
                        }
                    });
                });
            }, ManageDatasetComponent.prototype.closeBanner = function() {
                this.messageBannerModel = void 0;
            }, ManageDatasetComponent.prototype.onFilterChange = function(filterChange) {
                var _a, _b;
                if (0 === filterChange.selected.length) this.schemaViewFieldListFilters = void 0; else if ("Object" === filterChange.changed[0].item.groupId) this.schemaViewFieldListFilters = (0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.schemaViewFieldListFilters), ((_a = {})[filterChange.changed[0].item.id] = filterChange.changed[0].checked, 
                _a)); else if ("Schema" === filterChange.changed[0].item.groupId) {
                    var results = filterChange.selected.reduce(function(acc, item) {
                        return "Schema" === item.groupId && acc.push(item.id), acc;
                    }, []);
                    this.schemaViewFieldListFilters = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.schemaViewFieldListFilters), ((_b = {})[filterChange.changed[0].item.groupId] = results, 
                    _b));
                }
                this.ref.markForCheck();
            }, ManageDatasetComponent.prototype.shouldShowSensitivityLabelPicker = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, (0, combineLatest.aj)([ this.informationProtectionService.isMandatoryLabelEnabled(src.Bz.Model, !0), this.informationProtectionService.getDefaultLabelId(!0) ]).pipe((0, 
                            map.U)(function(_a) {
                                return _a[0] && !_a[1];
                            })).toPromise() ];

                          case 1:
                            return [ 2, _a.sent() ];
                        }
                    });
                });
            }, ManageDatasetComponent.prototype.onNodeCheck = function(updatedNode) {
                var _this = this;
                this.treeModel.nodes = this.treeModel.nodes.map(function(schema) {
                    return _this.foundItem ? schema : schema.data.urn === updatedNode.node.data.urn ? (schema.isIndeterminate ? (schema.checked = !1, 
                    schema.isIndeterminate = !1) : schema.checked = !schema.checked, schema = _this.updateAllChildNodes(schema), 
                    _this.foundItem = !0, schema) : schema = _this.updateTreeCheckboxes(schema, updatedNode.node.data.urn);
                }), this.foundItem = !1, this.updateSelectAllTreeState(), this.validateCheckboxSelections();
            }, ManageDatasetComponent.prototype.schemaViewSelectAll = function(disableAll) {
                var _this = this;
                this.schemaViewSelectAllState = null == disableAll ? {
                    isIndeterminate: !1,
                    checked: !this.schemaViewSelectAllState.checked,
                    disabled: this.schemaViewSelectAllState.disabled
                } : (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.schemaViewSelectAllState), {
                    disabled: disableAll
                }), this.treeModel.nodes = this.treeModel.nodes.map(function(node) {
                    if (disableAll) node.disabled = !0; else {
                        if (node.disabled) return _this.originallyDisabledNodes.has(node.data.urn) || (node.disabled = !1), 
                        _this.updateAllChildNodes(node);
                        node.checked = _this.schemaViewSelectAllState.checked, node.isIndeterminate = !1;
                    }
                    return _this.updateAllChildNodes(node, disableAll);
                }), this.treeModel = {
                    nodes: this.treeModel.nodes,
                    parent: this.treeModel.parent
                }, this.ref.markForCheck(), this.validateCheckboxSelections();
            }, ManageDatasetComponent.prototype.setUpSchemaView = function(refresh) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, error_3, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            this.manageDatasetGroup = this.formBuilder.group({
                                datasetNameField: []
                            }), this.setupForm(), this.templateDialogPayload.setSpinnerDisplay(refresh && !this.isDialogLevelSpinnerDisplayed$.value), 
                            _b.label = 1;

                          case 1:
                            return _b.trys.push([ 1, 3, , 4 ]), _a = this, [ 4, this.manageDatasetService.getTables(refresh, !0) ];

                          case 2:
                            return _a.tablesAndViews = _b.sent(), [ 3, 4 ];

                          case 3:
                            return error_3 = _b.sent(), this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Failed",
                                error: error_3
                            }), [ 2 ];

                          case 4:
                            return this.treeModel = this.pbiTreeConverter.convertModelToPbiTree(this.tablesAndViews.models, !1, void 0, !0, this.tablesAndViews.skipStore, this.tablesAndViews.datamartType, this.tablesAndViews.isWarehousePrimary), 
                            this.treeModel.nodes.forEach(function(schema) {
                                schema.disabled && _this.originallyDisabledNodes.add(schema.data.urn), _this.checkSchemaCheckboxsInitialState(schema);
                            }), this.updateSelectAllTreeState(), this.schemaViewFilters = this.buildFilterGroups(), 
                            [ 2 ];
                        }
                    });
                });
            }, ManageDatasetComponent.prototype.checkSchemaCheckboxsInitialState = function(parentNode) {
                var _this = this;
                return this.updateSelectedViewUrns(parentNode), 0 !== parentNode.children.length ? (parentNode.children.forEach(function(child) {
                    child.disabled && _this.originallyDisabledNodes.add(child.data.urn), _this.checkSchemaCheckboxsInitialState(child);
                }), parentNode) : parentNode;
            }, ManageDatasetComponent.prototype.updateSelectedViewUrns = function(node) {
                "View" === node.data.objectType && (node.checked || node.isIndeterminate ? this.selectedViewUrns.add(node.data.urn) : this.selectedViewUrns.delete(node.data.urn));
            }, ManageDatasetComponent.prototype.updateAllChildNodes = function(parentNode, disableAll) {
                var _this = this;
                return this.updateSelectedViewUrns(parentNode), 0 !== parentNode.children.length ? (parentNode.children = parentNode.children.map(function(child) {
                    return disableAll ? child.disabled = disableAll : child.disabled ? _this.originallyDisabledNodes.has(child.data.urn) || (child.disabled = !1) : (child.checked = parentNode.checked, 
                    child.isIndeterminate = parentNode.isIndeterminate, child.disabled = parentNode.disabled), 
                    _this.updateAllChildNodes(child, disableAll);
                }), parentNode) : parentNode;
            }, ManageDatasetComponent.prototype.setupForm = function() {
                var _this = this;
                this.manageDatasetGroup.controls.datasetNameField.valueChanges.pipe((0, startWith.O)(this.manageDatasetGroup.controls.datasetNameField.value), (0, 
                takeUntil.R)(this.onDestroy$)).subscribe(function(value) {
                    _this.datasetName = _.trim(value), _this.validDatasetName$.next(!_.isEmpty(_this.datasetName));
                });
            }, ManageDatasetComponent.prototype.getAllCurrentUpdatedCheckboxes = function(nodes) {
                var _this = this, endResult = {
                    objectsToAdd: [],
                    objectsToRemove: []
                };
                return nodes.forEach(function(node) {
                    if (node.children.length > 0) {
                        var results = _this.getAllCurrentUpdatedCheckboxes(node.children);
                        results.objectsToAdd.length > 0 && (_this.allTreeCheckboxes.objectsToAdd = _this.allTreeCheckboxes.objectsToAdd.concat(results.objectsToAdd)), 
                        results.objectsToRemove.length > 0 && (_this.allTreeCheckboxes.objectsToRemove = _this.allTreeCheckboxes.objectsToRemove.concat(results.objectsToRemove));
                    } else "Table" !== node.data.objectType && "View" !== node.data.objectType || void 0 !== node.data.name && (_this.isDefaultDataset ? (node.checked && !node.data.isBiObject && endResult.objectsToAdd.push(node.data.uniqueName), 
                    !node.checked && node.data.isBiObject && endResult.objectsToRemove.push(node.data.uniqueName)) : node.checked && endResult.objectsToAdd.push(node.data.uniqueName));
                }), endResult;
            }, ManageDatasetComponent.prototype.getFinalSelectedObjects = function() {
                var finalObjects = {
                    objectsToAdd: [],
                    objectsToRemove: []
                };
                if (this.useSchemaView) this.getAllCurrentUpdatedCheckboxes(this.treeModel.nodes), 
                finalObjects = this.allTreeCheckboxes; else if (this.isDefaultDataset) {
                    var finalSelections_2 = this.getCurrentSelections();
                    finalObjects.objectsToAdd = _.map(this.allCheckboxes, function(checkBox, index) {
                        if (!checkBox.isDisabled && !checkBox.item.isBiObject && finalSelections_2[index]) return checkBox.item.uniqueName;
                    }).filter(function(name) {
                        return void 0 !== name;
                    }), finalObjects.objectsToRemove = _.map(this.allCheckboxes, function(checkBox, index) {
                        if (!checkBox.isDisabled && checkBox.item.isBiObject && !finalSelections_2[index]) return checkBox.item.uniqueName;
                    }).filter(function(name) {
                        return void 0 !== name;
                    });
                } else {
                    var finalSelections_1 = this.getCurrentSelections();
                    finalObjects.objectsToAdd = _.map(this.allCheckboxes, function(checkBox, index) {
                        if (finalSelections_1[index]) return checkBox.item.uniqueName;
                    }).filter(function(name) {
                        return void 0 !== name;
                    });
                }
                return finalObjects;
            }, ManageDatasetComponent.prototype.updateTreeCheckboxes = function(node, updatedUrn) {
                var foundItemIndex, _this = this;
                return 0 === node.children.length ? node : node.children.find(function(item, index) {
                    return foundItemIndex = index, item.data.urn === updatedUrn;
                }) ? (this.foundItem = !0, node.children[foundItemIndex].isIndeterminate ? (node.children[foundItemIndex].checked = !1, 
                node.children[foundItemIndex].isIndeterminate = !1) : node.children[foundItemIndex].checked = !node.children[foundItemIndex].checked, 
                node.children[foundItemIndex] = this.updateAllChildNodes(node.children[foundItemIndex]), 
                ManageDatasetHelper.updateTreeNodeState(node), node) : 0 !== node.children.length ? (node.children = node.children.map(function(child) {
                    return _this.foundItem || 0 === child.children.length ? child : _this.updateTreeCheckboxes(child, updatedUrn);
                }), ManageDatasetHelper.updateTreeNodeState(node), node) : node;
            }, ManageDatasetComponent.prototype.buildFilterGroups = function() {
                return [ {
                    displayName: "Schema",
                    id: "Schema",
                    items: this.buildSchemaFilterItems()
                }, {
                    displayName: "Object",
                    id: "Object",
                    items: [ {
                        displayName: "Tables",
                        id: "Table",
                        icon: {
                            name: "table_20_regular"
                        },
                        activeIcon: {
                            name: "table_20_filled"
                        }
                    }, {
                        displayName: "Views",
                        id: "View",
                        icon: {
                            name: "square_multiple_overlap_line_20_regular",
                            sprite: "warehouse-icons"
                        },
                        activeIcon: {
                            name: "square_multiple_overlap_line_20_filled",
                            sprite: "warehouse-icons"
                        }
                    } ]
                } ];
            }, ManageDatasetComponent.prototype.buildSchemaFilterItems = function() {
                var results = [];
                return this.treeModel.nodes.forEach(function(node) {
                    results.push({
                        displayName: node.displayName,
                        id: node.data.name,
                        icon: {
                            name: "schema_20_regular",
                            sprite: "warehouse-icons"
                        },
                        activeIcon: {
                            name: "schema_20_filled",
                            sprite: "warehouse-icons"
                        }
                    });
                }), results;
            }, ManageDatasetComponent.prototype.updateSelectAllTreeState = function() {
                var nonDisabledNodes = this.treeModel.nodes.filter(function(node) {
                    return !node.disabled;
                }), everyItemChecked = this.treeModel.nodes.length > 0 && this.treeModel.nodes.every(function(node) {
                    return node.checked;
                });
                this.schemaViewSelectAllState = {
                    isIndeterminate: this.treeModel.nodes.some(function(node) {
                        return node.isIndeterminate || node.checked;
                    }) && !everyItemChecked,
                    checked: everyItemChecked,
                    disabled: 0 === nonDisabledNodes.length
                }, this.validateCheckboxSelections();
            }, ManageDatasetComponent.prototype.getToolTip = function(hasMeasures) {
                return hasMeasures ? this.localizationService.get("Datamart_Manage_Default_Dataset_Object_Has_Measure_Tooltip") : "";
            }, ManageDatasetComponent.prototype.setUpTableView = function(refresh) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a, error_4, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            this.validCheckboxSelections$.next(!1), this.templateDialogPayload.setSpinnerDisplay(refresh && !this.isDialogLevelSpinnerDisplayed$.value), 
                            _b.label = 1;

                          case 1:
                            return _b.trys.push([ 1, 3, , 4 ]), _a = this, [ 4, this.manageDatasetService.getTables(refresh) ];

                          case 2:
                            return _a.tablesAndViews = _b.sent(), [ 3, 4 ];

                          case 3:
                            return error_4 = _b.sent(), this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Failed",
                                error: error_4
                            }), [ 2 ];

                          case 4:
                            return this.hasSelectedViews = !!_.find(this.tablesAndViews.views, function(view) {
                                return view.isBiObject;
                            }), this.hasSelectedViews && !this.didShowViewsDisclaimer && this.showDQFallbackDisclaimer(!0), 
                            this.allCheckboxes = this.tablesAndViews.tables.map(function(table) {
                                return {
                                    item: table,
                                    isVisible: !0,
                                    iconProperties: {
                                        iconName: "Lakehouse" === _this.manageDatasetService.source ? "table_triangle_20_regular" : "table_20_regular",
                                        sprite: "Lakehouse" === _this.manageDatasetService.source ? "visual-calc-icons" : null
                                    },
                                    isDisabled: !_.isEmpty(table.measures),
                                    toolTip: _this.getToolTip(!_.isEmpty(table.measures))
                                };
                            }).concat(this.tablesAndViews.views.map(function(view) {
                                return {
                                    item: view,
                                    isVisible: _this.isWarehouseOrDatamart || _this.hasSelectedViews,
                                    iconProperties: {
                                        iconName: "square_multiple_overlap_line_20_regular",
                                        sprite: "warehouse-icons"
                                    },
                                    isDisabled: !_.isEmpty(view.measures),
                                    toolTip: _this.getToolTip(!_.isEmpty(view.measures))
                                };
                            })), this.manageDatasetGroup = this.formBuilder.group({
                                selectAll: new fesm2022_forms.p4(!1),
                                checkboxes: this.formBuilder.array(this.allCheckboxes.map(function(checkbox) {
                                    return new fesm2022_forms.p4({
                                        value: checkbox.item.isBiObject,
                                        disabled: checkbox.isDisabled
                                    });
                                })),
                                datasetNameField: []
                            }), this.manageDatasetGroup.controls.datasetNameField.valueChanges.pipe((0, startWith.O)(this.manageDatasetGroup.controls.datasetNameField.value), (0, 
                            takeUntil.R)(this.onDestroy$)).subscribe(function(value) {
                                _this.datasetName = _.trim(value), _this.validDatasetName$.next(!_.isEmpty(_this.datasetName));
                            }), this.manageDatasetGroup.controls.checkboxes.valueChanges.pipe((0, startWith.O)(this.manageDatasetGroup.controls.checkboxes.value), (0, 
                            takeUntil.R)(this.onDestroy$)).subscribe(function() {
                                _this.validateCheckboxSelections(), _this.handleSelectAllCheckbox();
                            }), this.manageDatasetGroup.controls.selectAll.valueChanges.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(value) {
                                var currentSelections = _this.getCurrentSelections();
                                _this.manageDatasetGroup.controls.checkboxes.setValue(_this.allCheckboxes.map(function(checkbox, index) {
                                    return checkbox.isVisible && !checkbox.isDisabled ? value : currentSelections[index];
                                }), {
                                    emitEvent: !1
                                }), _this.validateCheckboxSelections();
                            }), this.validateCheckboxSelections(), this.templateDialogPayload.setSpinnerDisplay(!1), 
                            [ 2 ];
                        }
                    });
                });
            }, ManageDatasetComponent.prototype.validateCheckboxSelections = function() {
                var _this = this;
                this.useSchemaView && (this.selectedViewUrns.size > 0 ? this.showDQFallbackDisclaimer(!1) : this.isErrorBannerShown || this.closeBanner());
                var allUnchecked = this.useSchemaView ? this.treeModel.nodes.every(function(schema) {
                    return _this.isAllTreeNodesUnchecked(schema);
                }) : this.getCurrentSelections().every(function(value) {
                    return !value;
                });
                this.validCheckboxSelections$.next(!(allUnchecked && !this.manageDatasetService.settings.allowRemovalOfAllTables));
            }, ManageDatasetComponent.prototype.isAllTreeNodesUnchecked = function(node) {
                var _this = this;
                return node.children && 0 !== node.children.length ? node.children.map(function(child) {
                    return _this.isAllTreeNodesUnchecked(child);
                }).every(function(state) {
                    return state;
                }) : !node.checked;
            }, ManageDatasetComponent.prototype.showErrorMessageBanner = function(error) {
                var _a, _b, _c, _d, _e, _f, _g, errorMessage, buttonText;
                switch (debug.fF.assertValue(error.error, "error.error has to be defined"), null === (_a = error.error) || void 0 === _a ? void 0 : _a.code) {
                  case "DatamartVersionMismatch":
                    errorMessage = this.localizationService.get("Datamart_Manage_Default_Dataset_DatamartVersionMismatchVersion"), 
                    buttonText = this.localizationService.get("Refresh"), this.setButtonToRefresh();
                    break;

                  case "TablesMissingInDatamartDatasetException":
                    errorMessage = this.localizationService.get("Datamart_Manage_Default_Dataset_TablesMissingInDatamartDatasetException"), 
                    buttonText = this.localizationService.get("Refresh"), this.setButtonToRefresh();
                    break;

                  case "ColumnCountExceedsMaxLimitException":
                    var errorText = null === (_d = null === (_c = null === (_b = error.error) || void 0 === _b ? void 0 : _b["pbi.error"]) || void 0 === _c ? void 0 : _c.parameters) || void 0 === _d ? void 0 : _d.ErrorMessage;
                    errorMessage = this.localizationService.format("Datamart_Manage_Default_Dataset_ColumnCountExceedsMaxLimitException", errorText.substring(errorText.indexOf("table name") + 11, errorText.indexOf(",")));
                    break;

                  case "OverallColumnCountExceedsMaxLimitException":
                    errorMessage = this.localizationService.get("Datamart_Manage_Default_Dataset_OverallColumnCountExceedsMaxLimitException");
                    break;

                  default:
                    errorMessage = null === (_g = null === (_f = null === (_e = error.error) || void 0 === _e ? void 0 : _e["pbi.error"]) || void 0 === _f ? void 0 : _f.parameters) || void 0 === _g ? void 0 : _g.ErrorMessage;
                }
                this.messageBannerModel = {
                    bannerType: 1,
                    iconName: "pbi-glyph-error",
                    message: errorMessage,
                    buttonText,
                    closeButtonTooltip: "Storytelling_Close_Banner"
                };
            }, ManageDatasetComponent.prototype.openMenu = function(originElement) {
                var _this = this, menuRef = this.pbiMenuService.open({
                    menu: this.filterMenu,
                    closeOnButtonClick: !1,
                    origin: {
                        element: originElement,
                        x: originElement.getBoundingClientRect().right - 225,
                        y: originElement.getBoundingClientRect().bottom
                    }
                });
                menuRef.onClose$.pipe((0, take.q)(1)).subscribe(function() {
                    _this.pbiMenuService.closeAll();
                }), menuRef.onButtonClick$.pipe((0, takeUntil.R)(menuRef.onClose$)).subscribe(function(menuItem) {
                    menuItem.checked = !menuItem.checked, _this.onFilterOptionsChanged(Number(menuItem.id));
                });
            }, ManageDatasetComponent.prototype.onFilterOptionsChanged = function(value) {
                this.selectedOptions.set(value, !this.selectedOptions.get(value) || !1), this.allCheckboxes.forEach(function(checkbox) {
                    return checkbox.isVisible = !1;
                }), this.selectedOptions.get(FilterOptions.ShowOnlyTables) && this.selectedOptions.get(FilterOptions.ShowOnlyViews) ? this.allCheckboxes.forEach(function(checkbox) {
                    return checkbox.isVisible = !0;
                }) : this.selectedOptions.get(FilterOptions.ShowOnlyTables) ? this.allCheckboxes.forEach(function(checkbox) {
                    return checkbox.isVisible = "Table" === checkbox.item.objectType;
                }) : this.selectedOptions.get(FilterOptions.ShowOnlyViews) ? this.allCheckboxes.forEach(function(checkbox) {
                    return checkbox.isVisible = "View" === checkbox.item.objectType;
                }) : this.isWarehouseOrDatamart && this.allCheckboxes.forEach(function(checkbox) {
                    return checkbox.isVisible = !0;
                }), this.didShowViewsDisclaimer || !this.selectedOptions.get(FilterOptions.ShowOnlyViews) || this.isWarehouseOrDatamart || this.showDQFallbackDisclaimer(!0), 
                this.handleSelectAllCheckbox(), this.ref.markForCheck();
            }, ManageDatasetComponent.prototype.handleSelectAllCheckbox = function() {
                if (this.allCheckboxes.every(function(checkbox) {
                    return checkbox.isDisabled || !checkbox.isVisible;
                })) this.manageDatasetGroup.controls.selectAll.setValue(!1, {
                    emitEvent: !1
                }), this.manageDatasetGroup.controls.selectAll.disable({
                    emitEvent: !1
                }); else {
                    var currentSelections_1 = this.getCurrentSelections(), shouldShowSelectAll = this.allCheckboxes.every(function(checkbox, index) {
                        return !0 === currentSelections_1[index] || !checkbox.isVisible || checkbox.isDisabled;
                    });
                    this.manageDatasetGroup.controls.selectAll.enable({
                        emitEvent: !1
                    }), this.manageDatasetGroup.controls.selectAll.setValue(shouldShowSelectAll, {
                        emitEvent: !1
                    });
                }
            }, ManageDatasetComponent.prototype.getCurrentSelections = function() {
                if (_.isNil(this.manageDatasetGroup)) return [];
                var currentSelections = this.manageDatasetGroup.controls.checkboxes.value, indexOfCurrentSelection = 0;
                return this.allCheckboxes.map(function(checkbox) {
                    return checkbox.isDisabled ? checkbox.item.isBiObject : currentSelections[indexOfCurrentSelection++];
                });
            }, ManageDatasetComponent.prototype.setButtonToRefresh = function() {
                var _this = this;
                this.errorButtonClicked = function() {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return this.closeBanner(), this.useSchemaView ? [ 4, this.setUpSchemaView(!0) ] : [ 3, 2 ];

                              case 1:
                                return _a.sent(), [ 3, 4 ];

                              case 2:
                                return [ 4, this.populateFlatListCheckboxes(!0) ];

                              case 3:
                                _a.sent(), _a.label = 4;

                              case 4:
                                return [ 2 ];
                            }
                        });
                    });
                };
            }, ManageDatasetComponent.prototype.logStandardizedEvent = function(telemetryEvent) {
                this.standardizedEventsService && this.standardizedEventsService.logEvent(telemetryEvent, [ this.featureName ], !0, telemetryEvent.info);
            }, ManageDatasetComponent.prototype.populateFlatListCheckboxes = function(refresh) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.setUpTableView(refresh) ];

                          case 1:
                            return _a.sent(), this.setInitialFilters(), [ 2 ];
                        }
                    });
                });
            }, ManageDatasetComponent.prototype.showDQFallbackDisclaimer = function(allowDismiss) {
                this.isErrorBannerShown || (this.messageBannerModel = {
                    bannerType: 0,
                    iconName: "pbi-glyph-info",
                    message: this.localizationService.get("DirectQueryFallback_PerformanceDisclaimer"),
                    allowDismiss,
                    closeButtonTooltip: "Storytelling_Close_Banner"
                }, this.didShowViewsDisclaimer = !0);
            }, ManageDatasetComponent.prototype.getAllBiTablesAndViews = function() {
                var result = [];
                return this.tablesAndViews.tables.forEach(function(table) {
                    table.isBiObject && result.push(table.name);
                }), this.tablesAndViews.views.forEach(function(view) {
                    view.isBiObject && result.push(view.name);
                }), result;
            }, ManageDatasetComponent.\u0275fac = function(t) {
                return new (t || ManageDatasetComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](fesm2022_forms.QS), core["\u0275\u0275directiveInject"](telemetry_service.y0), core["\u0275\u0275directiveInject"](pbi_menu_service.o), core["\u0275\u0275directiveInject"](feature_switch_service.vZ), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](ModelToPbiTreeConverter), core["\u0275\u0275directiveInject"](core.ChangeDetectorRef), core["\u0275\u0275directiveInject"](SearchStrategy), core["\u0275\u0275directiveInject"](ManageDatasetServiceInjectionToken), core["\u0275\u0275directiveInject"](standardizedEventsService.S, 8), core["\u0275\u0275directiveInject"](src.Gb, 8), core["\u0275\u0275directiveInject"](TriInformationProtectionMandatoryLabelDialogServiceInjectionToken, 8), core["\u0275\u0275directiveInject"](token.U, 8));
            }, ManageDatasetComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ManageDatasetComponent,
                selectors: [ [ "manage-dataset" ] ],
                viewQuery: function(rf, ctx) {
                    var _t;
                    1 & rf && core["\u0275\u0275viewQuery"](_c0, 5), 2 & rf && core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.datasetNameFieldRef = _t.first);
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ SearchStrategy, pbi_tree_options.XI ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 7,
                vars: 4,
                consts: [ [ "class", "loading", 4, "ngIf", "ngIfElse" ], [ "formComponent", "" ], [ "workspaceInfo", "" ], [ 1, "loading" ], [ "size", "extra-large", "labelPosition", "below" ], [ "localize", "Loading_Schema" ], [ "class", "manage-dataset-form", 3, "formGroup", "ngStyle", 4, "ngIf" ], [ 1, "manage-dataset-form", 3, "formGroup", "ngStyle" ], [ "class", "message-banner", 3, "viewModel", "hideBanner", "buttonClicked", 4, "ngIf" ], [ "class", "creation-details", 4, "ngIf" ], [ 1, "manage-dataset-message" ], [ "target", "_blank", 3, "href", "external" ], [ 1, "search-box" ], [ 1, "pbi-focus-outline", 3, "placeholderText", "isDisabled", "currentInputValue", "autocomplete", "value" ], [ "searchBox", "" ], [ 4, "ngIf", "ngIfElse" ], [ "schemaFilterMenu", "" ], [ "data-test-id", "manage-dataset-refresh-button", "tri-button", "", "appearance", "subtle", "class", "icon-button", 3, "disabled", "triTooltipDisabled", "triTooltip", "click", 4, "ngIf" ], [ "schemaView", "" ], [ 1, "message-banner", 3, "viewModel", "hideBanner", "buttonClicked" ], [ 1, "creation-details" ], [ "tri-textfield", "", "class", "creation-input-container", 4, "ngIf" ], [ "class", "creation-input-container", 4, "ngIf" ], [ "tri-textfield", "", 1, "creation-input-container" ], [ "localize", "DirectLake_SemanticModel_NameTitle", 1, "title" ], [ "required", "", "formControlName", "datasetNameField", 1, "name-input", 3, "placeholder", "maxlength" ], [ "datasetNameField", "" ], [ 1, "creation-input-container" ], [ 1, "workspace-picker-header" ], [ "localize", "Workspace", 1, "title" ], [ "name", "info_20_regular", 1, "info-icon", 3, "triTooltip" ], [ 3, "disabled", "currentWorkspaceObjectId", "forceDisableMyWorkspace", "capacityFilter", "infoIconData", "workspaceSelected" ], [ "workspacePicker", "" ], [ "tri-button", "", "appearance", "subtle", 1, "icon-button", 3, "disabled", "triTooltipDisabled", "triTooltip", "click" ], [ "originElement", "" ], [ "name", "SearchFilter_20", 1, "filterIcon" ], [ 1, "filter-menu", 3, "click" ], [ 3, "isDisabled", "triTooltipDisabled", "triTooltip", "filters", "useTridentUIStyle", "includeIconOnly", "ariaLabel", "filterChange" ], [ "data-test-id", "manage-dataset-refresh-button", "tri-button", "", "appearance", "subtle", 1, "icon-button", 3, "disabled", "triTooltipDisabled", "triTooltip", "click" ], [ "name", "arrow_sync_20_regular" ], [ "formControlName", "selectAll", 1, "select-all", 3, "label", "disabled" ], [ 1, "line-divider" ], [ "formArrayName", "checkboxes" ], [ 1, "list" ], [ "class", "item", 4, "ngFor", "ngForOf" ], [ 1, "item" ], [ "class", "checkbox", "triTooltipPosition", "after", 3, "triTooltipDisabled", "triTooltip", 4, "ngIf" ], [ "triTooltipPosition", "after", 1, "checkbox", 3, "triTooltipDisabled", "triTooltip" ], [ 3, "formControlName", "disabled", "ariaLabel" ], [ 1, "checkboxIcon", 3, "name", "sprite" ], [ 1, "schema-view" ], [ 1, "select-all", 3, "label", "checked", "indeterminate", "disabled", "onChange" ], [ 1, "schema-tree", 3, "tree", "search", "checkMode", "filter", "options", "onNodeCheck" ], [ "target", "_blank", "href", "https://go.microsoft.com/fwlink/?linkid=2159767", 3, "external" ] ],
                template: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog"), core["\u0275\u0275template"](1, ManageDatasetComponent_div_1_Template, 3, 0, "div", 0), 
                    core["\u0275\u0275pipe"](2, "async"), core["\u0275\u0275template"](3, ManageDatasetComponent_ng_template_3_Template, 1, 1, "ng-template", null, 1, core["\u0275\u0275templateRefExtractor"]), 
                    core["\u0275\u0275template"](5, ManageDatasetComponent_ng_template_5_Template, 6, 7, "ng-template", null, 2, core["\u0275\u0275templateRefExtractor"]), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf) {
                        var _r1 = core["\u0275\u0275reference"](4);
                        core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", core["\u0275\u0275pipeBind1"](2, 2, ctx.isDialogLevelSpinnerDisplayed$))("ngIfElse", _r1);
                    }
                },
                dependencies: [ common.NgForOf, common.NgIf, common.NgStyle, template_dialog_component.J, localize_directive.X, message_banner_component.A, pbi_checkbox_component.v, pbi_office_icon_component.m, fesm2022_forms._Y, fesm2022_forms.Fj, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.Q7, fesm2022_forms.nD, fesm2022_forms.sg, fesm2022_forms.u, fesm2022_forms.CE, tri_tooltip_directive.Z, tri_link_component.v, tri_search_box_component.U, tri_spinner_component.D, tri_svg_icon_component.M, tri_checkbox_component.r, WorkspacePickerComponent, tri_filter_menu_component.d, pbi_tree_component.u, common.AsyncPipe, localize_pipe.F ],
                styles: [ '[_nghost-%COMP%]{--fieldHeight: 28px;--iconSize: 20px;--iconMargin: 8px}[_nghost-%COMP%]     .pbi-dialog-body{height:100%}[_nghost-%COMP%]     .glyph-mini{font-size:20px}[_nghost-%COMP%]   .schema-view[_ngcontent-%COMP%]{height:100%}[_nghost-%COMP%]   tri-filter-menu[_ngcontent-%COMP%]{display:flex}[_nghost-%COMP%]   tri-filter-menu[_ngcontent-%COMP%]     .tri-filter-menu-trigger-button{border:0;padding:0;margin:0;height:20px}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]{height:100%}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]     .cdk-virtual-scroll-viewport{contain:content}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]     cdk-tree{padding:0 0 68px;height:100%;overflow:auto}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]     cdk-tree cdk-tree-node{height:40px;max-width:400px}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]     cdk-tree cdk-tree-node pbi-tree-node{--colorForegroundDisabled: var(--colorNeutralForegroundDisabled);line-height:40px;height:40px}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]     cdk-tree cdk-tree-node pbi-tree-node pbi-checkbox{padding:0 4px;margin-right:8px}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]     cdk-tree cdk-tree-node pbi-tree-node pbi-checkbox .pbi-checkbox label .pbi-checkbox-checkbox{height:16px;width:16px}[_nghost-%COMP%]   .schema-tree[_ngcontent-%COMP%]     cdk-tree cdk-tree-node pbi-tree-node pbi-highlight{font-size:var(--md-font-size, 14px);overflow:inherit}[_nghost-%COMP%]   .loading[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:100%}[_nghost-%COMP%]   .title[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);color:var(--fluent-theme-neutral-primary-hover-color, #232322);margin-bottom:4px}[_nghost-%COMP%]   .manage-dataset-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:inherit;overflow-x:hidden}[_nghost-%COMP%]   .creation-details[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin-bottom:20px}[_nghost-%COMP%]   .creation-details[_ngcontent-%COMP%]   .creation-input-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}[_nghost-%COMP%]   .creation-details[_ngcontent-%COMP%]   .creation-input-container[_ngcontent-%COMP%]   .name-input[_ngcontent-%COMP%]{width:100%}[_nghost-%COMP%]   .creation-details[_ngcontent-%COMP%]   .workspace-picker-header[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:flex-end;margin-top:14px}[_nghost-%COMP%]   .creation-details[_ngcontent-%COMP%]   .workspace-picker-header[_ngcontent-%COMP%]   .info-icon[_ngcontent-%COMP%]{margin-left:5px;margin-bottom:5px;width:16px;height:16px}[_nghost-%COMP%]   .creation-details[_ngcontent-%COMP%]   pbi-form-field[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{height:var(--fieldHeight)}[_nghost-%COMP%]   .manage-dataset-message[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);display:inline;margin-right:4px;margin-bottom:13px;margin-top:0}[_nghost-%COMP%]   .search-box[_ngcontent-%COMP%]{display:flex;flex-direction:row}[_nghost-%COMP%]   tri-search-box[_ngcontent-%COMP%]{flex:1}[_nghost-%COMP%]   tri-search-box[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{height:var(--fieldHeight)}[_nghost-%COMP%]   .action-button[_ngcontent-%COMP%]{padding:0;border:none;background-color:transparent}[_nghost-%COMP%]   .icon-button[_ngcontent-%COMP%]{padding:0 4px;margin-left:var(--iconMargin)}[_nghost-%COMP%]   .action-button[_ngcontent-%COMP%]:focus{padding:0;border:none}[_nghost-%COMP%]   .select-all[_ngcontent-%COMP%]{margin-top:17px;margin-left:1em}[_nghost-%COMP%]   .line-divider[_ngcontent-%COMP%]{width:100%}[_nghost-%COMP%]   .list[_ngcontent-%COMP%]{overflow-y:scroll;margin-left:1em;margin-bottom:20px}[_nghost-%COMP%]   .item[_ngcontent-%COMP%]{display:flex;align-items:center}[_nghost-%COMP%]   .checkbox[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;margin-bottom:16px}[_nghost-%COMP%]   .filterIcon[_ngcontent-%COMP%], [_nghost-%COMP%]   .checkboxIcon[_ngcontent-%COMP%]{height:var(--iconSize);width:var(--iconSize)}[_nghost-%COMP%]   .checkboxIcon[_ngcontent-%COMP%]{margin-left:var(--iconMargin);margin-right:var(--iconMargin)}[_nghost-%COMP%]   pbi-checkbox[_ngcontent-%COMP%]{margin-bottom:0}[_nghost-%COMP%]   message-banner[_ngcontent-%COMP%]{display:block;font-size:12px;margin-bottom:10px;overflow:visible}[_nghost-%COMP%]   message-banner[_ngcontent-%COMP%]     .message-banner-text-container{width:100%}[_nghost-%COMP%]   message-banner[_ngcontent-%COMP%]     .message-banner-text-container .message-banner-text{display:inline-block}[_nghost-%COMP%]   message-banner[_ngcontent-%COMP%]     .message-banner-text-container button{background-color:var(--fluent-theme-white-color, #FFF);margin-top:8px;height:24px;float:right}[_nghost-%COMP%]   message-banner[_ngcontent-%COMP%]     .pbi-glyph-exit{flex:0 0 auto;display:flex;background-color:transparent;border:none;outline:none;color:var(--gray-140, #484644);padding:0}[_nghost-%COMP%]   message-banner[_ngcontent-%COMP%]     .pbi-glyph-exit:hover{background:none}[_nghost-%COMP%]   message-banner[_ngcontent-%COMP%]     .pbi-glyph-exit:focus{outline:none}' ],
                changeDetection: 0
            }), ManageDatasetComponent;
        }(rx_component.w), FilterOptions = function(FilterOptions) {
            return FilterOptions[FilterOptions.ShowOnlyTables = 1] = "ShowOnlyTables", FilterOptions[FilterOptions.ShowOnlyViews = 2] = "ShowOnlyViews", 
            FilterOptions;
        }({}), DatamartManageDatasetHostComponent = function() {
            function DatamartManageDatasetHostComponent(templateDialogPayload, datamartManageDatasetService) {
                this.templateDialogPayload = templateDialogPayload, this.datamartManageDatasetService = datamartManageDatasetService;
            }
            return DatamartManageDatasetHostComponent.prototype.ngOnInit = function() {
                this.datamartManageDatasetService.initialize(this.templateDialogPayload.input);
            }, DatamartManageDatasetHostComponent.\u0275fac = function(t) {
                return new (t || DatamartManageDatasetHostComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](DatamartManageDatasetService));
            }, DatamartManageDatasetHostComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: DatamartManageDatasetHostComponent,
                selectors: [ [ "datamart-manage-dataset-host" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x, {
                    provide: DatamartManageDatasetService,
                    useClass: DatamartManageDatasetService
                }, {
                    provide: ManageDatasetServiceInjectionToken,
                    useExisting: DatamartManageDatasetService
                } ]) ],
                decls: 1,
                vars: 0,
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275element"](0, "manage-dataset");
                },
                dependencies: [ ManageDatasetComponent ],
                encapsulation: 2
            }), DatamartManageDatasetHostComponent;
        }(), data_model_service_token = __webpack_require__(68082), eventAggregationService = __webpack_require__(8898), user_info_service = __webpack_require__(79226), DatabaseHttpService = function() {
            function DatabaseHttpService(httpService) {
                this.httpService = httpService, this.baseUrl = "powerbi/databases/v201606";
            }
            return DatabaseHttpService.prototype.createSeeThroughModel = function(body) {
                var url = "".concat(this.baseUrl, "/createSeeThroughModel");
                return this.httpService.post(url, body).pipe((0, map.U)(function(response) {
                    return response.data;
                }));
            }, DatabaseHttpService.prototype.deleteDataset = function(datasetId, groupId) {
                var url;
                return url = groupId ? "v1.0/myorg/groups/".concat(groupId, "/datasets/").concat(datasetId) : "v1.0/myorg/datasets/".concat(datasetId), 
                this.httpService.delete(url);
            }, DatabaseHttpService.\u0275fac = function(t) {
                return new (t || DatabaseHttpService)(core["\u0275\u0275inject"](http_service.O));
            }, DatabaseHttpService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: DatabaseHttpService,
                factory: DatabaseHttpService.\u0275fac,
                providedIn: "root"
            }), DatabaseHttpService;
        }(), error_service = __webpack_require__(81213), ManageDatasetService = function() {
            function ManageDatasetService(datamartHttpService, databaseHttpService, errorService, localizationService, telemetryService, store, actions$, dataModelService, eventAggregationService, userInfo, standardizedEventsService) {
                this.datamartHttpService = datamartHttpService, this.databaseHttpService = databaseHttpService, 
                this.errorService = errorService, this.localizationService = localizationService, 
                this.telemetryService = telemetryService, this.store = store, this.actions$ = actions$, 
                this.dataModelService = dataModelService, this.eventAggregationService = eventAggregationService, 
                this.userInfo = userInfo, this.standardizedEventsService = standardizedEventsService, 
                this.featureName = "SeeThroughModeling", this.select = "views", this.didAutoRetryUpdateTables = !1;
            }
            return ManageDatasetService.prototype.initialize = function(datasetDetails) {
                this.datasetDetails = datasetDetails;
            }, Object.defineProperty(ManageDatasetService.prototype, "settings", {
                get: function() {
                    return this.datasetDetails.settings;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetService.prototype, "datamartObjectId", {
                get: function() {
                    return this.datasetDetails.datamartId;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetService.prototype, "command", {
                get: function() {
                    return this.datasetDetails.settings.command;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetService.prototype, "source", {
                get: function() {
                    switch (this.datasetDetails.datamartType) {
                      case 2:
                        return "Lakehouse";

                      case 4:
                        return "Warehouse";

                      case 1:
                        return "Datamart";
                    }
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetService.prototype, "datamartTypeName", {
                get: function() {
                    switch (this.datasetDetails.datamartType) {
                      case 2:
                        return this.localizationService.get("ArtifactKind_Lakehouse");

                      case 4:
                        return this.localizationService.get("ArtifactKind_Warehouse");

                      case 1:
                        return this.localizationService.get("ArtifactKind_Datamart");
                    }
                },
                enumerable: !1,
                configurable: !0
            }), ManageDatasetService.prototype.getDatamartUserPermissions = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var getDatamartPermissionTelemetry, datamartUserPermission, error_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            getDatamartPermissionTelemetry = this.telemetryService.startEvent(SeeThroughDatasetGetDatamartPermission, {
                                source: this.source,
                                command: this.command,
                                workspaceObjectId: this.datasetDetails.groupId,
                                datamartObjectId: this.datasetDetails.datamartId
                            }), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 3, , 4 ]), [ 4, this.datamartHttpService.getDatamartPermissions({
                                userObjectId: this.userInfo.uoid
                            }, this.datasetDetails.datamartId, this.datasetDetails.datamartType).toPromise() ];

                          case 2:
                            return datamartUserPermission = _a.sent(), this.resolveEvent(getDatamartPermissionTelemetry), 
                            [ 2, datamartUserPermission ];

                          case 3:
                            return error_1 = _a.sent(), debug.fF.assertValue(error_1, "error has to be defined"), 
                            this.rejectEvent(error_1, getDatamartPermissionTelemetry), [ 3, 4 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, ManageDatasetService.prototype.updateTables = function(objectsToAdd, objectsToRemove) {
                var _a, _b, _c;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var body, addOrRemoveTablesFromBITelemetry, datamartBatchResponse, error_2, typedError, tablesAndViews, title;
                    return (0, tslib_es6.__generator)(this, function(_d) {
                        switch (_d.label) {
                          case 0:
                            return [ 4, this.updateDatamartVersion() ];

                          case 1:
                            return _d.sent(), [ 4, this.lockDatamart() ];

                          case 2:
                            _d.sent(), body = {
                                datamartVersion: null !== (_a = this.datamartVersion) && void 0 !== _a ? _a : 1,
                                executionMode: "Full",
                                commands: [ {
                                    $type: "AddRemoveTablesToBiModelCommand",
                                    tableNamesToAdd: objectsToAdd,
                                    tableNamesToRemove: objectsToRemove,
                                    datasetId: this.datasetDetails.datasetId
                                } ]
                            }, addOrRemoveTablesFromBITelemetry = this.telemetryService.startEvent(SeeThroughDatasetOnAddOrRemoveTableInBI, {
                                source: this.source,
                                command: this.command,
                                didAutoRetry: this.didAutoRetryUpdateTables,
                                workspaceObjectId: this.datasetDetails.groupId,
                                datasetObjectId: this.datasetDetails.datasetId,
                                datamartObjectId: this.datasetDetails.datamartId
                            }), _d.label = 3;

                          case 3:
                            return _d.trys.push([ 3, 6, , 11 ]), [ 4, this.datamartHttpService.addRemoveTablesFromBI(body, this.datasetDetails.datamartId, this.datasetDetails.datamartType).toPromise() ];

                          case 4:
                            return datamartBatchResponse = _d.sent(), [ 4, this.datamartHttpService.waitForBatchProcessToComplete(this.datasetDetails.datamartId, datamartBatchResponse, this.datasetDetails.datamartType).toPromise() ];

                          case 5:
                            return _d.sent(), [ 3, 11 ];

                          case 6:
                            return error_2 = _d.sent(), debug.fF.assertValue(error_2, "error has to be defined"), 
                            "DatamartVersionMismatch" !== (null === (_b = null == (typedError = error_2) ? void 0 : typedError.error) || void 0 === _b ? void 0 : _b.code) || this.didAutoRetryUpdateTables ? [ 3, 8 ] : (addOrRemoveTablesFromBITelemetry.cancel(!0), 
                            this.didAutoRetryUpdateTables = !0, [ 4, this.updateTables(objectsToAdd, objectsToRemove) ]);

                          case 7:
                            return _d.sent(), this.didAutoRetryUpdateTables = !1, [ 2 ];

                          case 8:
                            return "OperationCanceled" !== (null === (_c = null == typedError ? void 0 : typedError.error) || void 0 === _c ? void 0 : _c.code) ? [ 3, 10 ] : [ 4, this.getTables(!0, !1, !0) ];

                          case 9:
                            if ((tablesAndViews = _d.sent()) && (!_.isEmpty(tablesAndViews.tables) || !_.isEmpty(tablesAndViews.views))) return addOrRemoveTablesFromBITelemetry.cancel(!0), 
                            [ 2 ];
                            _d.label = 10;

                          case 10:
                            throw this.rejectEvent(typedError, addOrRemoveTablesFromBITelemetry), 500 === (null == typedError ? void 0 : typedError.status) && (title = this.localizationService.get("AddRemoveTables_Error"), 
                            this.showErrorDialog(typedError, "AddRemoveTablesFromBIError", title)), error_2;

                          case 11:
                            return this.resolveEvent(addOrRemoveTablesFromBITelemetry), "Edit" === this.command && this.eventAggregationService.publish("LoadClientDataModelEvent", {
                                refreshModel: !0
                            }), [ 2 ];
                        }
                    });
                });
            }, ManageDatasetService.prototype.getTables = function(refresh, useSchemaView, isCreateDatasetValidation) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var getDatamartSchemaTelemetry, datamartBatchResponse, error_3, typedError, title, operationInfo, databaseDefinition, dataModel, schemaPickerConfig, _p, _q, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_r) {
                        switch (_r.label) {
                          case 0:
                            if (!refresh && this.tablesAndViews) return useSchemaView && 4 === this.datasetDetails.datamartType && (this.tablesAndViews.models ? this.parseModels(this.tablesAndViews.models) : (null === (_a = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _a ? void 0 : _a.skipStore) && (this.parseModels(null === (_b = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _b ? void 0 : _b.models), 
                            this.tablesAndViews = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.tablesAndViews), {
                                datamartType: this.datasetDetails.datamartType,
                                isWarehousePrimary: null === (_c = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _c ? void 0 : _c.isWarehousePrimary,
                                skipStore: null === (_d = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _d ? void 0 : _d.skipStore
                            }))), [ 2, this.tablesAndViews ];
                            if (!(refresh && (null === (_e = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _e ? void 0 : _e.skipStore) || 4 !== this.datasetDetails.datamartType)) return [ 3, 9 ];
                            getDatamartSchemaTelemetry = this.telemetryService.startEvent(SeeThroughDatasetOnGetDatamartSchema, {
                                source: this.source,
                                command: this.command,
                                workspaceObjectId: this.datasetDetails.groupId,
                                datasetObjectId: this.datasetDetails.datasetId,
                                datamartObjectId: this.datasetDetails.datamartId
                            }), datamartBatchResponse = void 0, _r.label = 1;

                          case 1:
                            return _r.trys.push([ 1, 7, , 8 ]), "Edit" === this.command || isCreateDatasetValidation ? [ 4, this.datamartHttpService.getDatamartSchema(this.datasetDetails.datamartId, this.datasetDetails.datamartType, void 0, this.select, this.datasetDetails.datasetId).toPromise() ] : [ 3, 3 ];

                          case 2:
                            return datamartBatchResponse = _r.sent(), [ 3, 5 ];

                          case 3:
                            return [ 4, this.datamartHttpService.getDatamartSchema(this.datasetDetails.datamartId, this.datasetDetails.datamartType, void 0, this.select).toPromise() ];

                          case 4:
                            datamartBatchResponse = _r.sent(), _r.label = 5;

                          case 5:
                            return [ 4, this.datamartHttpService.waitForBatchProcessToComplete(this.datasetDetails.datamartId, datamartBatchResponse, this.datasetDetails.datamartType).toPromise() ];

                          case 6:
                            return datamartBatchResponse = _r.sent(), [ 3, 8 ];

                          case 7:
                            throw error_3 = _r.sent(), debug.fF.assertValue(error_3, "error has to be defined"), 
                            this.rejectEvent(typedError = error_3, getDatamartSchemaTelemetry), title = this.localizationService.format("DirectLake_GetSchema_Error", this.datamartTypeName), 
                            this.showErrorDialog(typedError, "GetTablesFromDatamartSchemaError", title), error_3;

                          case 8:
                            return this.resolveEvent(getDatamartSchemaTelemetry), this.datamartVersion = datamartBatchResponse.datamartVersion, 
                            operationInfo = _.first(datamartBatchResponse.operationInformation), debug.fF.assertValue(operationInfo, "operationInfo has to be defined"), 
                            databaseDefinition = operationInfo.progressDetail.databaseDefinition, dataModel = this.dataModelService.getDataModel(), 
                            this.tablesAndViews = {
                                tables: ManageDatasetHelper.parseDatabaseTables(databaseDefinition, dataModel, this.command),
                                views: ManageDatasetHelper.parseDatabaseViews(databaseDefinition, dataModel, this.command),
                                isWarehousePrimary: !0,
                                skipStore: !0
                            }, useSchemaView && (schemaPickerConfig = {
                                tablesTitle: this.localizationService.get("Tables"),
                                viewsTitle: this.localizationService.get("Views_Title")
                            }, this.tablesAndViews.models = ManageDatasetHelper.convertTableViewsToFieldListModels(this.tablesAndViews, this.datasetDetails, this.datamartVersion, schemaPickerConfig)), 
                            [ 2, this.tablesAndViews ];

                          case 9:
                            return useSchemaView && 4 === this.datasetDetails.datamartType ? refresh || !(null === (_f = this.tablesAndViews) || void 0 === _f ? void 0 : _f.models) ? [ 3, 10 ] : (this.parseModels(this.tablesAndViews.models), 
                            [ 3, 13 ]) : [ 3, 17 ];

                          case 10:
                            return (null === (_g = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _g ? void 0 : _g.skipStore) ? [ 3, 12 ] : [ 4, this.store.select(getDefaultDatasetFieldListModels).pipe((0, 
                            take.q)(1), (0, map.U)(function(models) {
                                return _this.parseModels(models);
                            })).toPromise() ];

                          case 11:
                            return _r.sent(), [ 3, 13 ];

                          case 12:
                            !refresh && (null === (_h = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _h ? void 0 : _h.skipStore) && (this.parseModels(null === (_j = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _j ? void 0 : _j.models), 
                            this.tablesAndViews = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.tablesAndViews), {
                                datamartType: this.datasetDetails.datamartType,
                                isWarehousePrimary: null === (_k = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _k ? void 0 : _k.isWarehousePrimary,
                                skipStore: null === (_l = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _l ? void 0 : _l.skipStore
                            })), _r.label = 13;

                          case 13:
                            return _p = this, (null === (_m = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _m ? void 0 : _m.skipStore) ? (_q = null === (_o = this.datasetDetails.warehouseSchemaDefinition) || void 0 === _o ? void 0 : _o.datamartVersion, 
                            [ 3, 16 ]) : [ 3, 14 ];

                          case 14:
                            return [ 4, this.store.select(getDatamartVersion).pipe((0, take.q)(1), (0, map.U)(function(datamartVersion) {
                                return datamartVersion;
                            })).toPromise() ];

                          case 15:
                            _q = _r.sent(), _r.label = 16;

                          case 16:
                            return _p.datamartVersion = _q, [ 2, this.tablesAndViews ];

                          case 17:
                            return [ 2 ];
                        }
                    });
                });
            }, ManageDatasetService.prototype.createReportIfNeeded = function() {}, ManageDatasetService.prototype.createDataset = function(datasetName, workspaceObjectId, objectsToAdd, sensitivityLabelId) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var body, createSeeThroughModelTelemetry, createSeeThroughModelResponse, error_4, typedError, title, parts, error_5;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            body = {
                                datamartId: this.datasetDetails.datamartId,
                                datasetName,
                                folderObjectId: workspaceObjectId,
                                sensitivityLabelId
                            }, createSeeThroughModelTelemetry = this.telemetryService.startEvent(SeeThroughDatasetOnCreateSeeThroughModel, {
                                source: this.source,
                                command: this.command,
                                workspaceObjectId,
                                datamartObjectId: this.datasetDetails.datamartId,
                                datasetName
                            }), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 3, , 4 ]), [ 4, this.databaseHttpService.createSeeThroughModel(body).toPromise() ];

                          case 2:
                            return createSeeThroughModelResponse = _a.sent(), [ 3, 4 ];

                          case 3:
                            throw error_4 = _a.sent(), debug.fF.assertValue(error_4, "error has to be defined"), 
                            typedError = error_4, title = this.localizationService.get("Create_DirectLakeModel_Failed"), 
                            this.showErrorDialog(typedError, "CreateSeeThroughModelError", title), error_4;

                          case 4:
                            this.resolveEvent(createSeeThroughModelTelemetry), parts = createSeeThroughModelResponse.datasetUrl.split("/"), 
                            this.datasetDetails.datasetId = parts[parts.length - 2], _a.label = 5;

                          case 5:
                            return _a.trys.push([ 5, 7, , 9 ]), [ 4, this.updateTables(objectsToAdd, []) ];

                          case 6:
                            return _a.sent(), [ 3, 9 ];

                          case 7:
                            return error_5 = _a.sent(), [ 4, this.databaseHttpService.deleteDataset(this.datasetDetails.datasetId, workspaceObjectId).toPromise() ];

                          case 8:
                            throw _a.sent(), error_5;

                          case 9:
                            return [ 2, createSeeThroughModelResponse.datasetUrl ];
                        }
                    });
                });
            }, ManageDatasetService.prototype.refreshSchema = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var refreshDatamartSchemaTelemetry, datamartBatchResponse, error_6, typedError, title, onAutoRefreshSchemaSuccessResponse;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            refreshDatamartSchemaTelemetry = this.telemetryService.startEvent(SeeThroughModelingOnRefreshSchema, {
                                source: this.source,
                                command: this.command,
                                workspaceObjectId: this.datasetDetails.groupId,
                                datamartObjectId: this.datasetDetails.datamartId
                            }), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 4, , 5 ]), [ 4, this.datamartHttpService.refreshMetadata(this.datasetDetails.datamartId, this.datamartVersion, this.datasetDetails.datamartType, !0).toPromise() ];

                          case 2:
                            return datamartBatchResponse = _a.sent(), [ 4, this.datamartHttpService.waitForBatchProcessToComplete(this.datasetDetails.datamartId, datamartBatchResponse, this.datasetDetails.datamartType).toPromise() ];

                          case 3:
                            return datamartBatchResponse = _a.sent(), [ 3, 5 ];

                          case 4:
                            throw error_6 = _a.sent(), debug.fF.assertValue(error_6, "error has to be defined"), 
                            this.rejectEvent(typedError = error_6, refreshDatamartSchemaTelemetry), title = this.localizationService.format("DirectLake_RefreshSchema_Error", this.datamartTypeName), 
                            this.showErrorDialog(typedError, "RefreshSchemaError", title), error_6;

                          case 5:
                            return this.resolveEvent(refreshDatamartSchemaTelemetry), this.datamartVersion = datamartBatchResponse.datamartVersion, 
                            !this.actions$ || 4 !== this.datasetDetails.datamartType || this.datasetDetails.warehouseSchemaDefinition.skipStore ? [ 3, 7 ] : [ 4, this.actions$.pipe((0, 
                            ngrx_effects.l4)(onAutoRefreshSchemaSuccess), (0, take.q)(1), (0, map.U)(function(response) {
                                return response;
                            })).toPromise() ];

                          case 6:
                            onAutoRefreshSchemaSuccessResponse = _a.sent(), this.datamartVersion = onAutoRefreshSchemaSuccessResponse.schema.datamartVersion, 
                            _a.label = 7;

                          case 7:
                            return [ 2 ];
                        }
                    });
                });
            }, ManageDatasetService.prototype.updateDatamartVersion = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var getDatamartVersionTelemetry, datamartVersionResponse, error_7;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            getDatamartVersionTelemetry = this.telemetryService.startEvent(SeeThroughDatasetGetDatamartVersion, {
                                source: this.source,
                                command: this.command,
                                workspaceObjectId: this.datasetDetails.groupId,
                                datamartObjectId: this.datasetDetails.datamartId
                            }), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 3, , 4 ]), [ 4, this.datamartHttpService.getDatamartVersion(this.datasetDetails.datamartId, this.datasetDetails.datamartType).toPromise() ];

                          case 2:
                            return datamartVersionResponse = _a.sent(), [ 3, 4 ];

                          case 3:
                            return error_7 = _a.sent(), debug.fF.assertValue(error_7, "error has to be defined"), 
                            this.rejectEvent(error_7, getDatamartVersionTelemetry), [ 2 ];

                          case 4:
                            return this.resolveEvent(getDatamartVersionTelemetry), this.datamartVersion = Number(datamartVersionResponse.value), 
                            [ 2 ];
                        }
                    });
                });
            }, ManageDatasetService.prototype.lockDatamart = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var lockDatamartTelemetry, datamartBatchResponse, error_8;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            lockDatamartTelemetry = this.telemetryService.startEvent(SeeThroughDatasetLockDatamart, {
                                source: this.source,
                                command: this.command,
                                workspaceObjectId: this.datasetDetails.groupId,
                                datamartObjectId: this.datasetDetails.datamartId
                            }), _a.label = 1;

                          case 1:
                            return _a.trys.push([ 1, 4, , 5 ]), [ 4, this.datamartHttpService.acquireDatamartLease(this.datasetDetails.datamartId, this.datasetDetails.datamartType, this.datamartVersion).toPromise() ];

                          case 2:
                            return datamartBatchResponse = _a.sent(), [ 4, this.datamartHttpService.waitForBatchProcessToComplete(this.datasetDetails.datamartId, datamartBatchResponse, this.datasetDetails.datamartType).toPromise() ];

                          case 3:
                            return _a.sent(), [ 3, 5 ];

                          case 4:
                            return error_8 = _a.sent(), debug.fF.assertValue(error_8, "error has to be defined"), 
                            this.rejectEvent(error_8, lockDatamartTelemetry), [ 2 ];

                          case 5:
                            return this.resolveEvent(lockDatamartTelemetry), [ 2 ];
                        }
                    });
                });
            }, ManageDatasetService.prototype.overrideMissingTablesErrorMessage = function(error) {
                var _a, _b, _c, _d, errorCode = null === (_a = error.error) || void 0 === _a ? void 0 : _a.code;
                debug.fF.assert(function() {
                    return "TablesMissingInDatamartDatasetException" === errorCode;
                }, "error code has to be TablesMissingInDatamartDatasetException");
                var errorMessage = null === (_d = null === (_c = null === (_b = error.error) || void 0 === _b ? void 0 : _b["pbi.error"]) || void 0 === _c ? void 0 : _c.parameters) || void 0 === _d ? void 0 : _d.ErrorMessage;
                if (!errorMessage) return "";
                var matches = errorMessage.matchAll(/<ccon>(\w[\w\s]*)<\/ccon>/g), missingTables = Array.from(matches, function(match) {
                    return match[1];
                }).join(", ");
                return missingTables ? this.localizationService.format("MissingSpecificTables_ErrorMessage", missingTables) : this.localizationService.get("SemanticModel_TablePathNotFound_Error");
            }, ManageDatasetService.prototype.showErrorDialog = function(error, errorType, title) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, message;
                switch (null === (_a = error.error) || void 0 === _a ? void 0 : _a.code) {
                  case "PathNotFound":
                    message = this.localizationService.get("SemanticModel_TablePathNotFound_Error");
                    break;

                  case "TablesMissingInDatamartDatasetException":
                    message = this.overrideMissingTablesErrorMessage(error);
                    break;

                  default:
                    var missingTablesPartialErrorMessage = this.localizationService.get("DirectLake_Invalid_DataSource_Reference");
                    (message = null === (_d = null === (_c = null === (_b = error.error) || void 0 === _b ? void 0 : _b["pbi.error"]) || void 0 === _c ? void 0 : _c.parameters) || void 0 === _d ? void 0 : _d.ErrorMessage) ? message.includes(missingTablesPartialErrorMessage) && (message = this.localizationService.get("DirectLake_MultipleDataSource_Error")) : message = null === (_j = null === (_h = null === (_g = null === (_f = null === (_e = error.error) || void 0 === _e ? void 0 : _e["pbi.error"]) || void 0 === _f ? void 0 : _f.details) || void 0 === _g ? void 0 : _g[0]) || void 0 === _h ? void 0 : _h.detail) || void 0 === _j ? void 0 : _j.value;
                }
                this.errorService.error(message, errorType, {
                    title,
                    requestId: error.responseRequestId,
                    statusCode: error.status.toString(),
                    errorDetails: null === (_k = error.error) || void 0 === _k ? void 0 : _k.message
                });
            }, ManageDatasetService.prototype.parseModels = function(feildListModels) {
                var _this = this, models = _.cloneDeep(feildListModels);
                Object.entries(models.tables).forEach(function(entry) {
                    models.tables[entry[0]] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, entry[1]), {
                        isBiObject: "Create" !== _this.command && entry[1].isBiObject
                    });
                }), Object.entries(models.views).forEach(function(entry) {
                    models.views[entry[0]] = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, entry[1]), {
                        isBiObject: "Create" !== _this.command && entry[1].isBiObject
                    });
                }), this.tablesAndViews = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, this.tablesAndViews), {
                    models
                });
            }, ManageDatasetService.prototype.resolveEvent = function(telemetryEvent) {
                telemetryEvent.resolve(), this.logStandardizedEvent(telemetryEvent.event);
            }, ManageDatasetService.prototype.rejectEvent = function(error, telemetryEvent) {
                var _a;
                "DatamartVersionMismatch" === (null === (_a = error.error) || void 0 === _a ? void 0 : _a.code) && error.error["pbi.error"] && (error.error["pbi.error"].exceptionCulprit = 1);
                var errorDetails = (0, errorDetailsHelper.GB)(error.error, error.status);
                telemetryEvent.reject(errorDetails), this.logStandardizedEvent(telemetryEvent.event);
            }, ManageDatasetService.prototype.logStandardizedEvent = function(telemetryEvent) {
                this.standardizedEventsService && this.standardizedEventsService.logEvent(telemetryEvent, [ this.featureName ], !0, telemetryEvent.info);
            }, ManageDatasetService.\u0275fac = function(t) {
                return new (t || ManageDatasetService)(core["\u0275\u0275inject"](DatamartHttpService), core["\u0275\u0275inject"](DatabaseHttpService), core["\u0275\u0275inject"](error_service.T), core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](telemetry_service.y0), core["\u0275\u0275inject"](ngrx_store.yh), core["\u0275\u0275inject"](ngrx_effects.eX), core["\u0275\u0275inject"](data_model_service_token.n), core["\u0275\u0275inject"](eventAggregationService.x), core["\u0275\u0275inject"](user_info_service.M), core["\u0275\u0275inject"](standardizedEventsService.S, 8));
            }, ManageDatasetService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ManageDatasetService,
                factory: ManageDatasetService.\u0275fac
            }), ManageDatasetService;
        }(), ManageDatasetHostComponent = function() {
            function ManageDatasetHostComponent(templateDialogPayload, manageDatasetService) {
                this.templateDialogPayload = templateDialogPayload, this.manageDatasetService = manageDatasetService;
            }
            return ManageDatasetHostComponent.prototype.ngOnInit = function() {
                this.manageDatasetService.initialize(this.templateDialogPayload.input);
            }, ManageDatasetHostComponent.\u0275fac = function(t) {
                return new (t || ManageDatasetHostComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](ManageDatasetService));
            }, ManageDatasetHostComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ManageDatasetHostComponent,
                selectors: [ [ "manage-dataset-host" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x, {
                    provide: ManageDatasetService,
                    useClass: ManageDatasetService
                }, {
                    provide: ManageDatasetServiceInjectionToken,
                    useExisting: ManageDatasetService
                } ]) ],
                decls: 1,
                vars: 0,
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275element"](0, "manage-dataset");
                },
                dependencies: [ ManageDatasetComponent ],
                encapsulation: 2
            }), ManageDatasetHostComponent;
        }(), dialog_service = __webpack_require__(58938), ManageDatasetDialogService = function() {
            function ManageDatasetDialogService(dialogService, featureSwitchService, localizationService) {
                this.dialogService = dialogService, this.featureSwitchService = featureSwitchService, 
                this.localizationService = localizationService, document.manageDatasetDialogService = this;
            }
            return ManageDatasetDialogService.prototype.showManageDatasetDialog = function(definition) {
                var componentId = "DatamartManageDatasetComponentId", height = "60vh", tablesAndViews = (0, 
                tslib_es6.__assign)((0, tslib_es6.__assign)({}, definition), {
                    settings: {
                        command: "Edit",
                        allowRemovalOfAllTables: !0,
                        isFromManageDefaultDataset: !0
                    }
                });
                this.featureSwitchService.featureSwitches.newManageDatasetForDatamartUI && (componentId = "DatamartManageDatasetHostComponentId", 
                height = "60vh");
                var customBindings = {
                    title: this.localizationService.get("Datamart_Manage_Default_Semantic_Model_Title"),
                    okButtonText: this.localizationService.get("Confirm"),
                    dontCloseOnDefaultActions: !0,
                    cancelButtonText: this.localizationService.get("Cancel_ButtonText"),
                    spinnerText: "DialogFooter_OKActionWorkingOnIt",
                    input: tablesAndViews,
                    hideClose: !0
                };
                this.dialogService.showTemplateDialog(componentId, customBindings, {
                    width: "60vh",
                    maxWidth: "60vh",
                    maxHeight: "60vh",
                    height
                });
            }, ManageDatasetDialogService.\u0275fac = function(t) {
                return new (t || ManageDatasetDialogService)(core["\u0275\u0275inject"](dialog_service.x), core["\u0275\u0275inject"](feature_switch_service.vZ), core["\u0275\u0275inject"](localization_service.o));
            }, ManageDatasetDialogService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ManageDatasetDialogService,
                factory: ManageDatasetDialogService.\u0275fac
            }), ManageDatasetDialogService;
        }(), AutoUpdateDatasetService = function() {
            function AutoUpdateDatasetService(telemetryService, datamartHttpService) {
                this.telemetryService = telemetryService, this.datamartHttpService = datamartHttpService;
            }
            return AutoUpdateDatasetService.prototype.initialize = function(tablesAndViews) {
                this.tablesAndViews = tablesAndViews;
            }, AutoUpdateDatasetService.prototype.updateTables = function(objectsToAdd, objectsToRemove) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.addOrRemoveTablesFromBI(objectsToAdd, objectsToRemove, this.tablesAndViews.datamartVersion, this.tablesAndViews.datamartObjectId, this.tablesAndViews.datamartType) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, AutoUpdateDatasetService.prototype.cancelDatamartBatch = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, this.datamartHttpService.cancelDatamartBatch(this.tablesAndViews.datamartObjectId, this.batchId, this.tablesAndViews.datamartType).pipe((0, 
                        map.U)(function(response) {
                            return response.state;
                        })).toPromise() ];
                    });
                });
            }, AutoUpdateDatasetService.prototype.addOrRemoveTablesFromBI = function(tableNamesToAdd, tableNamesToRemove, version, datamartObjectId, datamartType) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var addOrRemoveTablesFromBITelemetry, _this = this;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return addOrRemoveTablesFromBITelemetry = this.telemetryService.startActivity(null, DatamartOnAddOrRemoveTableInBI), 
                            [ 4, this.datamartHttpService.addRemoveTablesFromBI({
                                datamartVersion: null != version ? version : 1,
                                executionMode: "Full",
                                commands: [ {
                                    $type: "AddRemoveTablesToBiModelCommand",
                                    tableNamesToAdd,
                                    tableNamesToRemove: null != tableNamesToRemove ? tableNamesToRemove : []
                                } ]
                            }, datamartObjectId, datamartType).pipe((0, mergeMap.zg)(function(batchResponse) {
                                return _this.batchId = batchResponse.batchId, _this.datamartHttpService.waitForBatchProcessToComplete(datamartObjectId, batchResponse, datamartType).pipe((0, 
                                map.U)(function() {
                                    addOrRemoveTablesFromBITelemetry.resolve();
                                }));
                            }), (0, catchError.K)(function(error) {
                                throw addOrRemoveTablesFromBITelemetry.reject((0, errorDetailsHelper.GB)(error.error, error.status)), 
                                debug.fF.assertValue(error.error, "error.error has to be defined"), error;
                            })).toPromise() ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, AutoUpdateDatasetService.\u0275fac = function(t) {
                return new (t || AutoUpdateDatasetService)(core["\u0275\u0275inject"](telemetry_service.y0), core["\u0275\u0275inject"](DatamartHttpService));
            }, AutoUpdateDatasetService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: AutoUpdateDatasetService,
                factory: AutoUpdateDatasetService.\u0275fac
            }), AutoUpdateDatasetService;
        }(), pbi_spinner_component = __webpack_require__(24326);
        function AutoUpdateDatasetComponent_message_banner_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r6 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "message-banner", 9), core["\u0275\u0275listener"]("hideBanner", function() {
                    core["\u0275\u0275restoreView"](_r6);
                    var ctx_r5 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r5.closeBanner());
                }), core["\u0275\u0275elementEnd"]();
            }
            if (2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("viewModel", ctx_r0.errorMessageBannerModel);
            }
        }
        function AutoUpdateDatasetComponent_pbi_spinner_4_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "pbi-spinner", 10);
        }
        function AutoUpdateDatasetComponent_span_9_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 11), core["\u0275\u0275element"](1, "pbi-office-icon", 12), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var table_r7 = ctx.$implicit;
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](table_r7.name);
            }
        }
        function AutoUpdateDatasetComponent_span_11_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 11), core["\u0275\u0275element"](1, "pbi-office-icon", 13), 
            core["\u0275\u0275text"](2), core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var view_r8 = ctx.$implicit;
                core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate"](view_r8.name);
            }
        }
        function AutoUpdateDatasetComponent_div_12_Template(rf, ctx) {
            if (1 & rf) {
                var _r10 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "div", 14)(1, "button", 15), core["\u0275\u0275listener"]("click", function() {
                    core["\u0275\u0275restoreView"](_r10);
                    var ctx_r9 = core["\u0275\u0275nextContext"]();
                    return core["\u0275\u0275resetView"](ctx_r9.onManageDefaultDataset());
                }), core["\u0275\u0275text"](2), core["\u0275\u0275pipe"](3, "localize"), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var ctx_r4 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("disabled", ctx_r4.isManageDatasetButtonDisabled), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate"](core["\u0275\u0275pipeBind1"](3, 2, "Datamart_Manage_Default_Power_BI_Semantic_Model_Title"));
            }
        }
        var AutoUpdateDatasetComponent = function(_super) {
            function AutoUpdateDatasetComponent(templateDialogPayload, localizationService, telemetryService, autoUpdateDatasetService) {
                var _this = _super.call(this) || this;
                return _this.templateDialogPayload = templateDialogPayload, _this.localizationService = localizationService, 
                _this.telemetryService = telemetryService, _this.autoUpdateDatasetService = autoUpdateDatasetService, 
                _this.tables = [], _this.views = [], _this.isCloseActive = !1, _this.isFromNewReport = !1, 
                _this.isManageDatasetButtonDisabled = !1, _this.objectsToAdd = [], _this;
            }
            return (0, tslib_es6.__extends)(AutoUpdateDatasetComponent, _super), AutoUpdateDatasetComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.templateDialogPayload.onOkButtonClick = function() {
                    return _this.onOk();
                }, this.templateDialogPayload.onCancelButtonClick = function() {
                    return (0, tslib_es6.__awaiter)(_this, void 0, void 0, function() {
                        return (0, tslib_es6.__generator)(this, function(_a) {
                            return [ 2, this.onCancel() ];
                        });
                    });
                }, this.autoUpdateDatasetService.initialize(this.templateDialogPayload.input), this.tables = this.templateDialogPayload.input.tables, 
                this.views = this.templateDialogPayload.input.views, this.isFromNewReport = this.templateDialogPayload.input.isFromNewReport, 
                this.templateDialogPayload.input.tables.concat(this.templateDialogPayload.input.views).forEach(function(object) {
                    object.isBiObject || _this.objectsToAdd.push(object.uniqueName);
                }), this.isFromNewReport || this.autoAddTables(), this.dialogContextText = this.getDialogContentText(), 
                this.templateDialogPayload.spinnerDisplay$.pipe((0, takeUntil.R)(this.onDestroy$)).subscribe(function(isSpinnerDisplayed) {
                    isSpinnerDisplayed && (_this.errorMessageBannerModel = void 0), _this.templateDialogPayload.setOkButtonState(isSpinnerDisplayed);
                });
            }, AutoUpdateDatasetComponent.prototype.getDialogContentText = function() {
                var secondTextParam = [];
                return 0 === this.tables.length + this.views.length ? (secondTextParam.push(this.localizationService.get("Tables")), 
                secondTextParam.push(this.localizationService.get("Views"))) : (this.tables.length && secondTextParam.push(this.localizationService.get("Tables")), 
                this.views.length && secondTextParam.push(this.localizationService.get("Views"))), 
                this.localizationService.format(this.isFromNewReport ? "Datamart_New_Report_Use_All_Data_Semantic_Model" : "Datamart_Auto_Update_Dataset_Info", [ this.tables.length + this.views.length, secondTextParam.join(secondTextParam.length > 1 ? " " + this.localizationService.get("ConditionalFormattingDialog_RuleBased_ConditionSeparator") + " " : "") ]);
            }, AutoUpdateDatasetComponent.prototype.onOk = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var _a;
                    return (0, tslib_es6.__generator)(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            return this.isCloseActive ? (this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Cancelled"
                            }), [ 2 ]) : this.isFromNewReport ? (this.templateDialogPayload.setSpinnerDisplay(!0), 
                            this.autoAddTables(), this.isManageDatasetButtonDisabled = !0, this.templateDialogPayload.toggleCancelButton(!0), 
                            [ 3, 3 ]) : [ 3, 1 ];

                          case 1:
                            return this.templateDialogPayload.setSpinnerDisplay(!0), this.telemetryService.logEvent(DatamartRibbonUpdateDefaultDatasetCancelButtonClick), 
                            _a = this, [ 4, this.autoUpdateDatasetService.cancelDatamartBatch() ];

                          case 2:
                            _a.batchCancellationState = _b.sent(), _b.label = 3;

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, AutoUpdateDatasetComponent.prototype.onCancel = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.templateDialogPayload.hideCancelButton$.pipe((0, take.q)(1)).toPromise() ];

                          case 1:
                            return _a.sent() || this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Cancelled"
                            }), [ 2 ];
                        }
                    });
                });
            }, AutoUpdateDatasetComponent.prototype.closeBanner = function() {
                this.errorMessageBannerModel = void 0;
            }, AutoUpdateDatasetComponent.prototype.onManageDefaultDataset = function() {
                this.telemetryService.logEvent(DatamartRibbonNewReportManageDefaultDatasetClick), 
                this.templateDialogPayload.closeDialogFromConsumer({
                    status: "Cancelled",
                    openManageDataset: !0
                });
            }, AutoUpdateDatasetComponent.prototype.autoAddTables = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var dialogResult, error_1;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _a.trys.push([ 0, 2, , 3 ]), [ 4, this.autoUpdateDatasetService.updateTables(this.objectsToAdd, []) ];

                          case 1:
                            return _a.sent(), dialogResult = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, dialogResult = {
                                status: "Succeeded"
                            }), {
                                diagramLayoutChange: {
                                    initialTablesState: [],
                                    modelObjectsToAdd: this.objectsToAdd,
                                    modelObjectsToRemove: []
                                },
                                toastNotification: "AlreadyConcluded" === this.batchCancellationState || "NotFound" === this.batchCancellationState || "NotCancellable" === this.batchCancellationState ? "AutoUpdateCancelErrorToast" : "AutoUpdateSuccessToast"
                            }), this.templateDialogPayload.closeDialogFromConsumer(dialogResult), [ 3, 3 ];

                          case 2:
                            return error_1 = _a.sent(), "SuccessfullyMarked" === this.batchCancellationState && "OperationCanceled" === error_1.error.code ? (this.templateDialogPayload.setSpinnerDisplay(!1), 
                            this.templateDialogPayload.closeDialogFromConsumer({
                                status: "Failed",
                                error: error_1,
                                toastNotification: "AutoUpdateCancelSuccessToast"
                            })) : (this.isCloseActive = !0, this.isManageDatasetButtonDisabled = !1, this.showErrorMessageBanner(error_1)), 
                            [ 3, 3 ];

                          case 3:
                            return this.telemetryService.logEvent(this.isFromNewReport ? DatamartRibbonNewReportConfirmButtonClick : DatamartRibbonAutoUpdateDefaultDatasetOnAddOrRemoveTableInBI, {
                                objectsToAdd: this.objectsToAdd
                            }), [ 2 ];
                        }
                    });
                });
            }, AutoUpdateDatasetComponent.prototype.showErrorMessageBanner = function(error) {
                var _a, _b, _c, _d, _e, _f, _g;
                this.templateDialogPayload.setSpinnerDisplay(!1), this.templateDialogPayload.setOkButtonText(this.localizationService.get("Close")), 
                debug.fF.assertValue(error.error, "error.error has to be defined");
                var errorMessage = "";
                switch (null === (_a = error.error) || void 0 === _a ? void 0 : _a.code) {
                  case "DatamartVersionMismatch":
                    errorMessage = this.localizationService.get("Datamart_Manage_Default_Dataset_TablesMissingInDatamartDatasetException");
                    break;

                  case "ColumnCountExceedsMaxLimitException":
                    errorMessage = this.localizationService.format("Datamart_Auto_Update_Dataset_ColumnCountExceedsMaxLimitException", "<Customer><Stores><Inventory>");
                    break;

                  case "OverallColumnCountExceedsMaxLimitException":
                    errorMessage = this.localizationService.get("Datamart_Auto_Update_Dataset_OverallColumnCountExceedsMaxLimitException");
                    break;

                  default:
                    (null === (_d = null === (_c = null === (_b = error.error) || void 0 === _b ? void 0 : _b["pbi.error"]) || void 0 === _c ? void 0 : _c.parameters) || void 0 === _d ? void 0 : _d.HttpStatusCode) === 500..toString() ? this.templateDialogPayload.closeDialogFromConsumer({
                        status: "Failed",
                        error
                    }) : errorMessage = null === (_g = null === (_f = null === (_e = error.error) || void 0 === _e ? void 0 : _e["pbi.error"]) || void 0 === _f ? void 0 : _f.parameters) || void 0 === _g ? void 0 : _g.ErrorMessage;
                }
                this.errorMessageBannerModel = {
                    bannerType: 1,
                    iconName: "pbi-glyph-error",
                    message: errorMessage,
                    allowDismiss: !0
                };
            }, AutoUpdateDatasetComponent.\u0275fac = function(t) {
                return new (t || AutoUpdateDatasetComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](telemetry_service.y0), core["\u0275\u0275directiveInject"](AutoUpdateDatasetService));
            }, AutoUpdateDatasetComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: AutoUpdateDatasetComponent,
                selectors: [ [ "auto-update-dataset" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]), core["\u0275\u0275InheritDefinitionFeature"] ],
                decls: 13,
                vars: 6,
                consts: [ [ 1, "container" ], [ "class", "message-banner", 3, "viewModel", "hideBanner", 4, "ngIf" ], [ 1, "sub-header" ], [ "class", "pbi-spinner-small", 4, "ngIf" ], [ "tabindex", "0", 1, "tableViews" ], [ 1, "tables" ], [ "class", "item", 4, "ngFor", "ngForOf" ], [ 1, "views" ], [ "footer-left-content", "", 4, "ngIf" ], [ 1, "message-banner", 3, "viewModel", "hideBanner" ], [ 1, "pbi-spinner-small" ], [ 1, "item" ], [ "name", "DatamartTable_16" ], [ "name", "DatamartView_16" ], [ "footer-left-content", "" ], [ 1, "pbi-link-button", 3, "disabled", "click" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "div", 0), 
                    core["\u0275\u0275template"](2, AutoUpdateDatasetComponent_message_banner_2_Template, 1, 1, "message-banner", 1), 
                    core["\u0275\u0275elementStart"](3, "span", 2), core["\u0275\u0275template"](4, AutoUpdateDatasetComponent_pbi_spinner_4_Template, 1, 0, "pbi-spinner", 3), 
                    core["\u0275\u0275elementStart"](5, "span"), core["\u0275\u0275text"](6), core["\u0275\u0275elementEnd"]()(), 
                    core["\u0275\u0275elementStart"](7, "div", 4)(8, "div", 5), core["\u0275\u0275template"](9, AutoUpdateDatasetComponent_span_9_Template, 3, 1, "span", 6), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](10, "div", 7), 
                    core["\u0275\u0275template"](11, AutoUpdateDatasetComponent_span_11_Template, 3, 1, "span", 6), 
                    core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275template"](12, AutoUpdateDatasetComponent_div_12_Template, 4, 4, "div", 8), 
                    core["\u0275\u0275elementEnd"]()), 2 & rf && (core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.errorMessageBannerModel), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", !ctx.isCloseActive && !ctx.isFromNewReport), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275textInterpolate1"](" ", ctx.dialogContextText, " "), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngForOf", ctx.tables), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", ctx.views), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.isFromNewReport));
                },
                dependencies: [ common.NgForOf, common.NgIf, template_dialog_component.J, message_banner_component.A, pbi_office_icon_component.m, pbi_spinner_component.k, localize_pipe.F ],
                styles: [ "dialog-body[_ngcontent-%COMP%]{display:flex}.item[_ngcontent-%COMP%]{margin-bottom:8px}pbi-office-icon[_ngcontent-%COMP%]{height:16px;width:16px;vertical-align:middle;margin-right:8px;margin-left:8px}pbi-spinner[_ngcontent-%COMP%]{padding-right:10px;padding-top:5px}.container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:36vh;overflow:hidden}.tableViews[_ngcontent-%COMP%]{overflow:auto}.tables[_ngcontent-%COMP%], .views[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin-left:1em;margin-right:1em}.sub-header[_ngcontent-%COMP%]{display:flex;align-items:center;margin-bottom:1em}" ],
                changeDetection: 0
            }), AutoUpdateDatasetComponent;
        }(rx_component.w), pbi_office_icon_provider_service = __webpack_require__(54485), nonLazyDialogManifests = [ {
            componentIdentifier: "ManageDatasetHostComponentId",
            componentType: ManageDatasetHostComponent
        }, {
            componentIdentifier: "DatamartManageDatasetHostComponentId",
            componentType: DatamartManageDatasetHostComponent
        }, {
            componentIdentifier: "AutoUpdateDatasetComponentId",
            componentType: AutoUpdateDatasetComponent
        } ], SeeThroughModelingModule = function() {
            function SeeThroughModelingModule(iconProvider) {
                __webpack_require__.e("datamart").then(__webpack_require__.bind(__webpack_require__, 76291)).then(function(module) {
                    iconProvider.registerIcons(module.iconSpriteSheet.sprite);
                });
            }
            return SeeThroughModelingModule.\u0275fac = function(t) {
                return new (t || SeeThroughModelingModule)(core["\u0275\u0275inject"](pbi_office_icon_provider_service.u));
            }, SeeThroughModelingModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: SeeThroughModelingModule
            }), SeeThroughModelingModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ ManageDatasetService, ManageDatasetDialogService, AutoUpdateDatasetService ],
                imports: [ common.CommonModule, dialogs_module.c.withManifest(nonLazyDialogManifests), localization_module.v, message_banner_module.x, pbi_checkbox_module.V, pbi_office_icon_module.m, pbi_menu_module.b, fesm2022_forms.UX, template_dialog_module.e, UILibrary_module.g, tri_tooltip.w, tri_link.m, tri_search_box.b, tri_spinner_module.d, tri_svg_icon.T6, tri_checkbox.B, WorkspacePickerModule, tri_list_filter.nU, pbi_tree_module.J, DirectLakePbiTreeConverterModule ]
            }), SeeThroughModelingModule;
        }(), desktop_manage_dataset_dialog_identifier_component = __webpack_require__(40228), host_interop_registry_service = __webpack_require__(39119), TablePickerService = function() {
            function TablePickerService(hostInteropRegistry) {
                this.hostService = hostInteropRegistry.getHostService("tablePickerDesktopHostService");
            }
            return TablePickerService.prototype.getDirectLakeTablesAsync = function(runtimeId) {
                return this.hostService.getDirectLakeTables(runtimeId);
            }, TablePickerService.\u0275fac = function(t) {
                return new (t || TablePickerService)(core["\u0275\u0275inject"](host_interop_registry_service.j));
            }, TablePickerService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: TablePickerService,
                factory: TablePickerService.\u0275fac,
                providedIn: "root"
            }), TablePickerService;
        }(), ManageDatasetDesktopService = function() {
            function ManageDatasetDesktopService(localizationService, tablePickerService) {
                this.localizationService = localizationService, this.tablePickerService = tablePickerService;
            }
            return Object.defineProperty(ManageDatasetDesktopService.prototype, "datamartObjectId", {
                get: function() {
                    return this.datasetDetails.datamartId;
                },
                enumerable: !1,
                configurable: !0
            }), ManageDatasetDesktopService.prototype.initialize = function(datasetDetails) {
                this.datasetDetails = datasetDetails;
            }, Object.defineProperty(ManageDatasetDesktopService.prototype, "settings", {
                get: function() {
                    return this.datasetDetails.settings;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(ManageDatasetDesktopService.prototype, "source", {
                get: function() {
                    switch (this.datasetDetails.datamartType) {
                      case 2:
                        return "Lakehouse";

                      case 4:
                        return "Warehouse";

                      case 1:
                        return "Datamart";
                    }
                },
                enumerable: !1,
                configurable: !0
            }), ManageDatasetDesktopService.prototype.getTables = function(refresh, useSchemaView) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    var tablesAndViews, schemaPickerConfig;
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.tablePickerService.getDirectLakeTablesAsync(this.datasetDetails.datamartId) ];

                          case 1:
                            return (tablesAndViews = _a.sent()).tables = ManageDatasetHelper.filterTables(tablesAndViews.tables), 
                            tablesAndViews.views = ManageDatasetHelper.filterViews(tablesAndViews.views), useSchemaView && (schemaPickerConfig = {
                                tablesTitle: this.localizationService.get("Tables"),
                                viewsTitle: this.localizationService.get("Views_Title")
                            }, tablesAndViews = (0, tslib_es6.__assign)((0, tslib_es6.__assign)({}, tablesAndViews), {
                                isWarehousePrimary: !0,
                                skipStore: !0,
                                models: ManageDatasetHelper.convertTableViewsToFieldListModels(tablesAndViews, this.datasetDetails, tablesAndViews.datamartVersion, schemaPickerConfig)
                            })), [ 2, tablesAndViews ];
                        }
                    });
                });
            }, ManageDatasetDesktopService.prototype.updateTables = function(objectsToAdd, objectsToRemove) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2 ];
                    });
                });
            }, ManageDatasetDesktopService.prototype.createReportIfNeeded = function() {}, ManageDatasetDesktopService.prototype.createDataset = function(datasetName, workspaceObjectId, objectsToAdd) {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2, "" ];
                    });
                });
            }, ManageDatasetDesktopService.prototype.refreshSchema = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2 ];
                    });
                });
            }, ManageDatasetDesktopService.prototype.getDatamartUserPermissions = function() {
                return (0, tslib_es6.__awaiter)(this, void 0, void 0, function() {
                    return (0, tslib_es6.__generator)(this, function(_a) {
                        return [ 2 ];
                    });
                });
            }, ManageDatasetDesktopService.\u0275fac = function(t) {
                return new (t || ManageDatasetDesktopService)(core["\u0275\u0275inject"](localization_service.o), core["\u0275\u0275inject"](TablePickerService));
            }, ManageDatasetDesktopService.\u0275prov = core["\u0275\u0275defineInjectable"]({
                token: ManageDatasetDesktopService,
                factory: ManageDatasetDesktopService.\u0275fac
            }), ManageDatasetDesktopService;
        }(), DesktopManageDatasetDialogComponent = function() {
            function DesktopManageDatasetDialogComponent(templateDialogPayload, manageDatasetService) {
                this.templateDialogPayload = templateDialogPayload, this.manageDatasetService = manageDatasetService;
            }
            return DesktopManageDatasetDialogComponent.prototype.ngOnInit = function() {
                this.manageDatasetService.initialize(this.templateDialogPayload.input);
            }, DesktopManageDatasetDialogComponent.\u0275fac = function(t) {
                return new (t || DesktopManageDatasetDialogComponent)(core["\u0275\u0275directiveInject"](template_dialog_payload_service.x), core["\u0275\u0275directiveInject"](ManageDatasetService));
            }, DesktopManageDatasetDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: DesktopManageDatasetDialogComponent,
                selectors: [ [ "desktop-manage-dataset-dialog" ] ],
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x, {
                    provide: ManageDatasetService,
                    useClass: ManageDatasetDesktopService
                }, {
                    provide: ManageDatasetServiceInjectionToken,
                    useExisting: ManageDatasetService
                } ]) ],
                decls: 1,
                vars: 0,
                template: function(rf, ctx) {
                    1 & rf && core["\u0275\u0275element"](0, "manage-dataset");
                },
                dependencies: [ ManageDatasetComponent ],
                encapsulation: 2
            }), DesktopManageDatasetDialogComponent;
        }(), DesktopManageDatasetDialogModule = function() {
            function DesktopManageDatasetDialogModule() {}
            return DesktopManageDatasetDialogModule.\u0275fac = function(t) {
                return new (t || DesktopManageDatasetDialogModule);
            }, DesktopManageDatasetDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: DesktopManageDatasetDialogModule
            }), DesktopManageDatasetDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                providers: [ template_dialog_payload_service.x ],
                imports: [ common.CommonModule, fesm2022_forms.u5, fesm2022_forms.UX, SeeThroughModelingModule, dialogs_module.c.withManifest([ {
                    componentIdentifier: desktop_manage_dataset_dialog_identifier_component.V,
                    componentType: DesktopManageDatasetDialogComponent
                } ]), localization_module.v ]
            }), DesktopManageDatasetDialogModule;
        }();
    },
    19533: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            C: function() {
                return getRouterStateSnapshot;
            }
        });
        var getRouterStateSnapshot = (0, __webpack_require__(85732).P1)(function(state) {
            return state.router;
        }, function(s) {
            return s && s.state;
        });
    },
    22743: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            y: function() {
                return TriWorkspaceIconComponent;
            }
        });
        var trident_env = __webpack_require__(63271), core = __webpack_require__(50423), common = __webpack_require__(77476), tri_svg_icon_component = __webpack_require__(74913);
        function TriWorkspaceIconComponent_img_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "img", 3), 2 & rf) {
                var ctx_r0 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275property"]("src", null == ctx_r0.workspace ? null : ctx_r0.workspace.icon, core["\u0275\u0275sanitizeUrl"]), 
                core["\u0275\u0275attribute"]("data-testid", "workspace-header-logo-img");
            }
        }
        function TriWorkspaceIconComponent_ng_container_2_tri_svg_icon_1_Template(rf, ctx) {
            if (1 & rf && core["\u0275\u0275element"](0, "tri-svg-icon", 5), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275styleProp"]("height", ctx_r2.actualIconSizePx, "px")("width", ctx_r2.actualIconSizePx, "px"), 
                core["\u0275\u0275property"]("sprite", ctx_r2.icon.sprite)("name", ctx_r2.icon.name), 
                core["\u0275\u0275attribute"]("data-testid", "workspace-header-logo-default");
            }
        }
        function TriWorkspaceIconComponent_ng_container_2_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275elementContainerStart"](0), core["\u0275\u0275template"](1, TriWorkspaceIconComponent_ng_container_2_tri_svg_icon_1_Template, 1, 7, "tri-svg-icon", 4), 
            core["\u0275\u0275elementContainerEnd"]()), 2 & rf && (core["\u0275\u0275advance"](1), 
            core["\u0275\u0275property"]("ngSwitchCase", !1));
        }
        var colorIconSizeToMonochromeIconSize = {
            20: 16,
            24: 20,
            32: 28,
            64: 48
        }, TriWorkspaceIconComponent = function() {
            function TriWorkspaceIconComponent(isTrident) {
                this.isTrident = isTrident, this.iconSizePx = 20, this.hasBackground = !1, this.actualIconSizePx = null, 
                this.icon = null;
            }
            return TriWorkspaceIconComponent.prototype.ngOnChanges = function() {
                var _a, workspace, size;
                this.isTrident ? (this.hasBackground = !1, this.actualIconSizePx = this.iconSizePx, 
                this.icon = {
                    sprite: "artifact-colored-icons",
                    name: (workspace = this.workspace, size = this.actualIconSizePx, void 0 === size && (size = 24), 
                    (null == workspace ? void 0 : workspace.isMyWorkspace) ? "c_my_workspace_".concat(size) : "c_group_workspace_".concat(size))
                }) : (this.hasBackground = !0, this.actualIconSizePx = colorIconSizeToMonochromeIconSize[this.iconSizePx], 
                this.icon = (null === (_a = this.workspace) || void 0 === _a ? void 0 : _a.isMyWorkspace) ? {
                    name: "person_".concat(this.actualIconSizePx, "_regular")
                } : {
                    name: "people_community_".concat(this.actualIconSizePx, "_regular")
                });
            }, TriWorkspaceIconComponent.\u0275fac = function(t) {
                return new (t || TriWorkspaceIconComponent)(core["\u0275\u0275directiveInject"](trident_env.Y, 8));
            }, TriWorkspaceIconComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: TriWorkspaceIconComponent,
                selectors: [ [ "tri-workspace-icon" ] ],
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && core["\u0275\u0275classProp"]("icon-background", ctx.hasBackground);
                },
                inputs: {
                    workspace: "workspace",
                    iconSizePx: "iconSizePx"
                },
                features: [ core["\u0275\u0275NgOnChangesFeature"] ],
                decls: 3,
                vars: 3,
                consts: [ [ 3, "ngSwitch" ], [ "class", "tri-h-full tri-w-full", "alt", "", 3, "src", 4, "ngSwitchCase" ], [ 4, "ngIf" ], [ "alt", "", 1, "tri-h-full", "tri-w-full", 3, "src" ], [ 3, "height", "width", "sprite", "name", 4, "ngSwitchCase" ], [ 3, "sprite", "name" ] ],
                template: function(rf, ctx) {
                    1 & rf && (core["\u0275\u0275elementContainerStart"](0, 0), core["\u0275\u0275template"](1, TriWorkspaceIconComponent_img_1_Template, 1, 2, "img", 1), 
                    core["\u0275\u0275template"](2, TriWorkspaceIconComponent_ng_container_2_Template, 2, 1, "ng-container", 2), 
                    core["\u0275\u0275elementContainerEnd"]()), 2 & rf && (core["\u0275\u0275property"]("ngSwitch", !(null == ctx.workspace || !ctx.workspace.icon)), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngSwitchCase", !0), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", ctx.icon && ctx.actualIconSizePx));
                },
                dependencies: [ common.NgIf, common.NgSwitch, common.NgSwitchCase, tri_svg_icon_component.M ],
                styles: [ "[_nghost-%COMP%]{border-radius:var(--borderRadiusCircular);color:var(--colorNeutralForeground3);fill:var(--colorNeutralForeground3);align-items:center;display:flex;justify-content:center;flex:0 0 auto}.icon-background[_nghost-%COMP%]{background-color:var(--colorNeutralBackground6)}[_nghost-%COMP%]   img[_ngcontent-%COMP%]{border-radius:var(--borderRadiusCircular);object-fit:cover}" ],
                changeDetection: 0
            }), TriWorkspaceIconComponent;
        }();
    }
} ]);