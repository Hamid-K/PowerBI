"use strict";

(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([ [ "clustering-dialog" ], {
    24875: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
            ClusteringDialogModule: function() {
                return ClusteringDialogModule;
            }
        });
        var clustering_dialog_identifier_component = __webpack_require__(61571), fesm2022_forms = __webpack_require__(17174), debug = __webpack_require__(62458), template_dialog_payload_service = __webpack_require__(67489), core = __webpack_require__(50423), localization_service = __webpack_require__(65181), common = __webpack_require__(77476), template_dialog_component = __webpack_require__(96777), localize_directive = __webpack_require__(59968), pbi_form_field_component = __webpack_require__(45074), editable_label_component = __webpack_require__(37534), localize_pipe = __webpack_require__(85102), _c0 = [ "groupingColumnNameInput" ], _c1 = [ "clusterNumberInput" ];
        function ClusteringDialogComponent_label_8_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "label", 24);
        }
        var _c2 = function(a0, a1, a2) {
            return {
                editDisabled: a0,
                isNameInvalid: a1,
                "role-selected": a2
            };
        }, _c3 = function(a0) {
            return {
                disabled: a0
            };
        };
        function ClusteringDialogComponent_div_17_li_2_Template(rf, ctx) {
            if (1 & rf) {
                var _r11 = core["\u0275\u0275getCurrentView"]();
                core["\u0275\u0275elementStart"](0, "li", 28), core["\u0275\u0275listener"]("keydown", function($event) {
                    var partition_r9 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r10 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r10.onKeyDown(partition_r9, $event));
                })("click", function($event) {
                    var partition_r9 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r12 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r12.onNodeClick(partition_r9, $event));
                }), core["\u0275\u0275elementStart"](1, "editable-label", 29), core["\u0275\u0275listener"]("cancel", function() {
                    var partition_r9 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r13 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r13.cancelEditName(partition_r9));
                })("dblclick", function($event) {
                    var partition_r9 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r14 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r14.startEditName(partition_r9, $event));
                })("onBlur", function($event) {
                    var partition_r9 = core["\u0275\u0275restoreView"](_r11).$implicit, ctx_r15 = core["\u0275\u0275nextContext"](2);
                    return core["\u0275\u0275resetView"](ctx_r15.rename(partition_r9, $event.newName));
                }), core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](2, "span", 30), 
                core["\u0275\u0275text"](3), core["\u0275\u0275elementEnd"]()();
            }
            if (2 & rf) {
                var partition_r9 = ctx.$implicit, ctx_r8 = core["\u0275\u0275nextContext"](2);
                core["\u0275\u0275propertyInterpolate1"]("id", "partition", partition_r9.uniqueId, ""), 
                core["\u0275\u0275propertyInterpolate"]("aria-selected", partition_r9.isSelected), 
                core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction3"](11, _c2, !partition_r9.isNameEditable, partition_r9.hasNameCollision, partition_r9.isSelected)), 
                core["\u0275\u0275attribute"]("aria-label", partition_r9.displayName + " " + partition_r9.numberOfItems + " " + ctx_r8.editOnEnterLocalizeString), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("displayName", partition_r9.displayName)("editable", !!partition_r9.isNameEditable && !!partition_r9.isEditingName)("disableClick", !0)("inputMatchLabelWidth", !1)("customTooltip", !1), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](15, _c3, !partition_r9.isNameEditable)), 
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" (", partition_r9.numberOfItems, ") ");
            }
        }
        function ClusteringDialogComponent_div_17_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "div", 25)(1, "ul", 26), core["\u0275\u0275template"](2, ClusteringDialogComponent_div_17_li_2_Template, 4, 17, "li", 27), 
            core["\u0275\u0275elementEnd"]()()), 2 & rf) {
                var ctx_r2 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngForOf", ctx_r2.clusteringDialogFormGroup.get("partitions").value);
            }
        }
        function ClusteringDialogComponent_label_21_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "label", 31);
        }
        function ClusteringDialogComponent_label_25_Template(rf, ctx) {
            1 & rf && core["\u0275\u0275element"](0, "label", 32);
        }
        function ClusteringDialogComponent_span_27_Template(rf, ctx) {
            1 & rf && (core["\u0275\u0275element"](0, "span", 33), core["\u0275\u0275pipe"](1, "localize")), 
            2 & rf && core["\u0275\u0275propertyInterpolate"]("aria-label", core["\u0275\u0275pipeBind1"](1, 1, "ClusteringDialog_DuplicateNames"));
        }
        function ClusteringDialogComponent_span_28_Template(rf, ctx) {
            if (1 & rf && (core["\u0275\u0275elementStart"](0, "span", 34), core["\u0275\u0275text"](1), 
            core["\u0275\u0275elementEnd"]()), 2 & rf) {
                var tmp_0_0, ctx_r7 = core["\u0275\u0275nextContext"]();
                core["\u0275\u0275advance"](1), core["\u0275\u0275textInterpolate1"](" ", null == (tmp_0_0 = ctx_r7.clusteringDialogFormGroup.get("errorMessage")) ? null : tmp_0_0.value, " ");
            }
        }
        var _c4 = function(a0) {
            return {
                formItem: a0
            };
        }, _c5 = function(a0) {
            return {
                inputHasError: a0
            };
        }, ClusteringDialogComponent = function() {
            function ClusteringDialogComponent(localizationService, templateDialogPayload) {
                this.localizationService = localizationService, this.templateDialogPayload = templateDialogPayload, 
                this.editOnEnterLocalizeString = this.localizationService.get("VisualContainer_VisualsEnterHint_OnEdit");
            }
            return ClusteringDialogComponent.prototype.ngOnInit = function() {
                var _this = this;
                this.input = this.templateDialogPayload.input;
                var isBlankPartition = function(partition) {
                    return 1 === partition.clusterIds.length && !_.isNumber(partition.clusterIds[0]);
                }, partititions = this.input.partitions;
                partititions && (this.partitionsExtended = _.map(partititions, function(partition, index) {
                    return {
                        uniqueId: index,
                        isBlank: isBlankPartition(partition),
                        name: partition.name,
                        clusterIds: partition.clusterIds,
                        numberOfItems: partition.numberOfItems
                    };
                }));
                var formValue = this.createFormModel(this.partitionsExtended);
                this.clusteringDialogFormGroup = new fesm2022_forms.nJ({
                    groupingColumnName: new fesm2022_forms.p4(formValue.groupingColumnName, [ fesm2022_forms.kI.required ]),
                    sourcePropertyName: new fesm2022_forms.p4(formValue.sourcePropertyName),
                    partitions: new fesm2022_forms.p4(formValue.partitions),
                    description: new fesm2022_forms.p4(formValue.description),
                    numberOfClusters: new fesm2022_forms.p4(formValue.numberOfClusters, [ fesm2022_forms.kI.min(1), fesm2022_forms.kI.max(25) ]),
                    hasDuplicatePartitionNames: new fesm2022_forms.p4(!1),
                    errorMessage: new fesm2022_forms.p4(formValue.errorMessage)
                }), this.clusteringDialogFormGroup.valueChanges.subscribe(function(_) {
                    var _a;
                    _this.templateDialogPayload.setOkButtonState(_this.clusteringDialogFormGroup.invalid || (null === (_a = _this.clusteringDialogFormGroup.get("hasDuplicatePartitionNames")) || void 0 === _a ? void 0 : _a.value));
                }), this.templateDialogPayload.onOkButtonClick = function() {
                    var result = _this.getClusteringResult();
                    return result && _this.templateDialogPayload.closeDialogFromConsumer(result), Promise.resolve(result);
                };
            }, ClusteringDialogComponent.prototype.startEditName = function(node, event) {
                node.isEditingName = !0, event.stopPropagation();
            }, ClusteringDialogComponent.prototype.rename = function(node, newName) {
                var _a, _this = this, newValue = null !== (_a = null == newName ? void 0 : newName.trim()) && void 0 !== _a ? _a : "";
                if (_.isEmpty(newValue)) this.abandonRename(node); else {
                    node.displayName = newValue;
                    var otherNameCollisionNodes = _.filter(this.clusteringDialogFormGroup.get("partitions").value, function(partition) {
                        return partition !== node && partition.hasNameCollision;
                    });
                    [ node ].concat(otherNameCollisionNodes).forEach(function(nodeToCheck) {
                        debug.fF.assert(function() {
                            return nodeToCheck === node || nodeToCheck.isEditingName;
                        }, "node.hasNameCollision is true before, expecting it in editingName mode.");
                        var hasNameCollision = _this.isNameExisting(nodeToCheck, nodeToCheck.displayName);
                        nodeToCheck.hasNameCollision = hasNameCollision, nodeToCheck.isEditingName = hasNameCollision;
                    }), this.setPartitionNameDuplicationStatus();
                }
            }, ClusteringDialogComponent.prototype.setPartitionNameDuplicationStatus = function() {
                var _a;
                this.clusteringDialogFormGroup.patchValue({
                    hasDuplicatePartitionNames: _.some(this.clusteringDialogFormGroup.get("partitions").value, function(partition) {
                        return partition.hasNameCollision;
                    })
                }), (null === (_a = this.clusteringDialogFormGroup.get("hasDuplicatePartitionNames")) || void 0 === _a ? void 0 : _a.value) && this.templateDialogPayload.setOkButtonState(!0);
            }, ClusteringDialogComponent.prototype.abandonRename = function(node) {
                debug.fF.assert(function() {
                    return node.isEditingName;
                }, "Expect the node is in editing name mode when this method is called.");
                var originalDisplayNameHasCollision = this.isNameExisting(node, node.displayName);
                node.hasNameCollision = originalDisplayNameHasCollision, this.setPartitionNameDuplicationStatus(), 
                node.isEditingName = !1, originalDisplayNameHasCollision && setTimeout(function() {
                    node.isEditingName = !0;
                });
            }, ClusteringDialogComponent.prototype.isNameExisting = function(skipNode, name) {
                return _.some(this.clusteringDialogFormGroup.get("partitions").value, function(partition) {
                    return partition !== skipNode && partition.displayName === name;
                });
            }, ClusteringDialogComponent.prototype.cancelEditName = function(node) {
                this.abandonRename(node);
            }, ClusteringDialogComponent.prototype.onNodeClick = function(node, event) {
                var partitions = this.clusteringDialogFormGroup.get("partitions").value.map(function(partition) {
                    return partition.isSelected = partition.uniqueId === node.uniqueId, partition;
                });
                this.clusteringDialogFormGroup.patchValue({
                    partitions
                }), event.stopPropagation();
            }, ClusteringDialogComponent.prototype.getSelectedId = function() {
                return this.clusteringDialogFormGroup.get("partitions").value.findIndex(function(partition) {
                    return null == partition ? void 0 : partition.isSelected;
                });
            }, ClusteringDialogComponent.prototype.onKeyDown = function(node, event) {
                var isEnter = "Enter" === event.key, isEscape = "Escape" === event.key, isArrowDown = "ArrowDown" === event.key, isArrowUp = "ArrowUp" === event.key, partitionNodeElement = document.getElementsByClassName("partitionNode");
                node && isEnter ? node.isEditingName ? $(event.target).find("input").focus() : this.startEditName(node, event) : node && node.isEditingName && isEscape && this.cancelEditName(node), 
                isArrowDown && (document.activeElement.nextElementSibling ? document.activeElement.nextElementSibling.focus() : partitionNodeElement[0].focus()), 
                isArrowUp && (document.activeElement.previousElementSibling ? document.activeElement.previousElementSibling.focus() : partitionNodeElement[partitionNodeElement.length - 1].focus());
            }, ClusteringDialogComponent.prototype.canCommit = function() {
                var _a;
                for (var i in this.clusteringDialogFormGroup.controls) this.clusteringDialogFormGroup.controls[i].updateValueAndValidity();
                return this.clusteringDialogFormGroup.valid && !(null === (_a = this.clusteringDialogFormGroup.get("hasDuplicatePartitionNames")) || void 0 === _a ? void 0 : _a.value);
            }, ClusteringDialogComponent.prototype.getClusteringResult = function() {
                var _a, _b;
                if (this.canCommit()) {
                    var groupingColumnName = this.clusteringDialogFormGroup.get("groupingColumnName").value.trim(), description = this.clusteringDialogFormGroup.get("description").value, partitions = this.clusteringDialogFormGroup.get("partitions").value, numberOfClusters = Number(this.clusteringDialogFormGroup.get("numberOfClusters").value);
                    return {
                        groupingColumnName,
                        partitions: this.convertToPartitionsInfo(partitions),
                        numberOfClusters,
                        description
                    };
                }
                this.clusteringDialogFormGroup.get("groupingColumnName").valid ? this.clusteringDialogFormGroup.get("numberOfClusters").valid || null === (_b = this.clusterNumberInput) || void 0 === _b || _b.nativeElement.focus() : null === (_a = this.groupingColumnNameInput) || void 0 === _a || _a.nativeElement.focus();
            }, ClusteringDialogComponent.prototype.createFormModel = function(partitions) {
                var _this = this;
                return debug.fF.assert(function() {
                    return !!_this.input.partitions == !!partitions;
                }, "!!args.partitions should equal !!partitions"), {
                    groupingColumnName: this.input.groupingColumnName,
                    sourcePropertyName: this.input.sourcePropertyName,
                    description: this.input.description,
                    partitions: this.convertToPartitionNodes(partitions),
                    numberOfClusters: this.input.numberOfClusters || void 0,
                    errorMessage: this.input.errorMessage
                };
            }, ClusteringDialogComponent.prototype.convertToPartitionNodes = function(partitionsInfo) {
                var _this = this;
                if (partitionsInfo) {
                    var toPartitionNode = function(partition) {
                        return {
                            uniqueId: partition.uniqueId,
                            displayName: partition.isBlank ? _this.localizationService.get("NullValue") : partition.name,
                            numberOfItems: _this.localizationService.format("NumberOfItems", [ partition.numberOfItems ]),
                            isEditingName: !1,
                            isNameEditable: !partition.isBlank
                        };
                    }, sortedPartitions = _.chain(partitionsInfo).filter(function(partition) {
                        return !partition.isBlank;
                    }).sortBy(function(partition) {
                        return _.min(partition.clusterIds);
                    }).map(toPartitionNode), blankPartition = _.find(partitionsInfo, function(partition) {
                        return partition.isBlank;
                    });
                    return blankPartition && (sortedPartitions = sortedPartitions.concat(toPartitionNode(blankPartition))), 
                    sortedPartitions.value();
                }
            }, ClusteringDialogComponent.prototype.convertToPartitionsInfo = function(partitionNodes) {
                var _this = this;
                if (partitionNodes) return partitionNodes.map(function(partitionNode) {
                    var matchingPartitionInfo = _this.partitionsExtended.find(function(partition) {
                        return partition.uniqueId === partitionNode.uniqueId;
                    });
                    return debug.fF.assertValue(matchingPartitionInfo, "this.partitionsExtended should contain a partition with the same uniqueId " + partitionNode.uniqueId), 
                    {
                        name: matchingPartitionInfo.isBlank ? null : partitionNode.displayName,
                        clusterIds: matchingPartitionInfo.clusterIds
                    };
                });
            }, ClusteringDialogComponent.\u0275fac = function(t) {
                return new (t || ClusteringDialogComponent)(core["\u0275\u0275directiveInject"](localization_service.o), core["\u0275\u0275directiveInject"](template_dialog_payload_service.x));
            }, ClusteringDialogComponent.\u0275cmp = core["\u0275\u0275defineComponent"]({
                type: ClusteringDialogComponent,
                selectors: [ [ "clustering-dialog" ] ],
                viewQuery: function(rf, ctx) {
                    if (1 & rf && (core["\u0275\u0275viewQuery"](_c0, 5), core["\u0275\u0275viewQuery"](_c1, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.groupingColumnNameInput = _t.first), 
                        core["\u0275\u0275queryRefresh"](_t = core["\u0275\u0275loadQuery"]()) && (ctx.clusterNumberInput = _t.first);
                    }
                },
                features: [ core["\u0275\u0275ProvidersFeature"]([ template_dialog_payload_service.x ]) ],
                decls: 29,
                vars: 16,
                consts: [ [ 1, "clusteringDialogContent" ], [ 3, "formGroup" ], [ 1, "row" ], [ 1, "formItem", "firstItemInRow" ], [ "id", "groupingColumnNameLabel", "pbiLabel", "", "localize", "Name" ], [ "pbiInput", "", "type", "text", "cdkFocusInitial", "", "formControlName", "groupingColumnName", "required", "", "aria-labelledby", "groupingColumnNameLabel" ], [ "groupingColumnNameInput", "" ], [ "pbiInputError", "", "localize", "ClusteringDialog_ClusteringColumnNameCannotBeEmpty", 4, "ngIf" ], [ 1, "formItem" ], [ "id", "sourcePropertyNameLabel", "pbiLabel", "", "localize", "Field" ], [ "pbiInput", "", "type", "text", "readonly", "", "formControlName", "sourcePropertyName", "aria-labelledby", "sourcePropertyNameLabel" ], [ "id", "descriptionLabel", "pbiLabel", "", "localize", "Description" ], [ "pbiInput", "", "type", "text", "formControlName", "description", "aria-label", "descriptionLabel" ], [ 1, "row", "partitionContainer" ], [ "class", "formItem firstItemInRow scrollableContainer", 4, "ngIf" ], [ 1, "numberOfClusterContainer", 3, "ngClass" ], [ "pbiLabel", "", "id", "numberOfClustersLabel", "localize", "ClusteringDialog_NumberOfClusters", 1, "numberOfClustersLabel" ], [ "pbiInputError", "", "id", "clustersUpdateWarningLabel", "class", "clustersUpdateWarningLabel", "localize", "ClusteringDialog_DiscardNames", 4, "ngIf" ], [ "pbiInput", "", "id", "clusterNumberInput", "type", "number", "min", "1", "max", "25", "aria-labelledby", "numberOfClustersLabel clustersUpdateWarningLabel", "formControlName", "numberOfClusters", 1, "pbi-text-input", "numberOfClustersInput", 3, "ngClass", "placeholder" ], [ "clusterNumberInput", "" ], [ "pbiInputError", "", "class", "warning", "localize", "ClusteringDialog_NumberClustersOutOfRange", 4, "ngIf" ], [ 1, "row", "warning" ], [ "role", "alert", "localize", "ClusteringDialog_DuplicateNames", 3, "aria-label", 4, "ngIf" ], [ "role", "alert", 4, "ngIf" ], [ "pbiInputError", "", "localize", "ClusteringDialog_ClusteringColumnNameCannotBeEmpty" ], [ 1, "formItem", "firstItemInRow", "scrollableContainer" ], [ "role", "list", 1, "partitionsList" ], [ "tabindex", "0", "class", "partitionNode", "role", "listitem", 3, "id", "ngClass", "aria-selected", "keydown", "click", 4, "ngFor", "ngForOf" ], [ "tabindex", "0", "role", "listitem", 1, "partitionNode", 3, "id", "ngClass", "aria-selected", "keydown", "click" ], [ 1, "unselectable", 3, "displayName", "editable", "disableClick", "inputMatchLabelWidth", "customTooltip", "cancel", "dblclick", "onBlur" ], [ 3, "ngClass" ], [ "pbiInputError", "", "id", "clustersUpdateWarningLabel", "localize", "ClusteringDialog_DiscardNames", 1, "clustersUpdateWarningLabel" ], [ "pbiInputError", "", "localize", "ClusteringDialog_NumberClustersOutOfRange", 1, "warning" ], [ "role", "alert", "localize", "ClusteringDialog_DuplicateNames", 3, "aria-label" ], [ "role", "alert" ] ],
                template: function(rf, ctx) {
                    var tmp_9_0;
                    1 & rf && (core["\u0275\u0275elementStart"](0, "template-dialog")(1, "div", 0)(2, "form", 1)(3, "div", 2)(4, "pbi-form-field", 3), 
                    core["\u0275\u0275element"](5, "label", 4)(6, "input", 5, 6), core["\u0275\u0275template"](8, ClusteringDialogComponent_label_8_Template, 1, 0, "label", 7), 
                    core["\u0275\u0275elementEnd"](), core["\u0275\u0275elementStart"](9, "pbi-form-field", 8), 
                    core["\u0275\u0275element"](10, "label", 9)(11, "input", 10), core["\u0275\u0275elementEnd"]()(), 
                    core["\u0275\u0275elementStart"](12, "div", 2)(13, "pbi-form-field", 8), core["\u0275\u0275element"](14, "label", 11)(15, "input", 12), 
                    core["\u0275\u0275elementEnd"]()(), core["\u0275\u0275elementStart"](16, "div", 13), 
                    core["\u0275\u0275template"](17, ClusteringDialogComponent_div_17_Template, 3, 1, "div", 14), 
                    core["\u0275\u0275elementStart"](18, "div", 15)(19, "pbi-form-field"), core["\u0275\u0275element"](20, "label", 16), 
                    core["\u0275\u0275template"](21, ClusteringDialogComponent_label_21_Template, 1, 0, "label", 17), 
                    core["\u0275\u0275element"](22, "input", 18, 19), core["\u0275\u0275pipe"](24, "localize"), 
                    core["\u0275\u0275template"](25, ClusteringDialogComponent_label_25_Template, 1, 0, "label", 20), 
                    core["\u0275\u0275elementEnd"]()()(), core["\u0275\u0275elementStart"](26, "div", 21), 
                    core["\u0275\u0275template"](27, ClusteringDialogComponent_span_27_Template, 2, 3, "span", 22), 
                    core["\u0275\u0275template"](28, ClusteringDialogComponent_span_28_Template, 2, 1, "span", 23), 
                    core["\u0275\u0275elementEnd"]()()()()), 2 & rf && (core["\u0275\u0275advance"](2), 
                    core["\u0275\u0275property"]("formGroup", ctx.clusteringDialogFormGroup), core["\u0275\u0275advance"](6), 
                    core["\u0275\u0275property"]("ngIf", ctx.clusteringDialogFormGroup.get("groupingColumnName").hasError("required")), 
                    core["\u0275\u0275advance"](9), core["\u0275\u0275property"]("ngIf", (null == ctx.clusteringDialogFormGroup.get("partitions").value ? null : ctx.clusteringDialogFormGroup.get("partitions").value.length) > 0), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](12, _c4, (null == ctx.clusteringDialogFormGroup.get("partitions").value ? null : ctx.clusteringDialogFormGroup.get("partitions").value.length) > 0)), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", (null == ctx.clusteringDialogFormGroup.get("partitions").value ? null : ctx.clusteringDialogFormGroup.get("partitions").value.length) > 0), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngClass", core["\u0275\u0275pureFunction1"](14, _c5, ctx.clusteringDialogFormGroup.get("numberOfClusters").hasError("min") || ctx.clusteringDialogFormGroup.get("numberOfClusters").hasError("max")))("placeholder", core["\u0275\u0275pipeBind1"](24, 10, "ClusteringDialog_NumberOfClustersAutoPlaceholder")), 
                    core["\u0275\u0275advance"](3), core["\u0275\u0275property"]("ngIf", ctx.clusteringDialogFormGroup.get("numberOfClusters").hasError("min") || ctx.clusteringDialogFormGroup.get("numberOfClusters").hasError("max")), 
                    core["\u0275\u0275advance"](2), core["\u0275\u0275property"]("ngIf", ctx.clusteringDialogFormGroup.get("hasDuplicatePartitionNames").value), 
                    core["\u0275\u0275advance"](1), core["\u0275\u0275property"]("ngIf", null == (tmp_9_0 = ctx.clusteringDialogFormGroup.get("errorMessage")) ? null : tmp_9_0.value));
                },
                dependencies: [ common.NgClass, common.NgForOf, common.NgIf, fesm2022_forms._Y, fesm2022_forms.Fj, fesm2022_forms.wV, fesm2022_forms.JJ, fesm2022_forms.JL, fesm2022_forms.Q7, fesm2022_forms.qQ, fesm2022_forms.Fd, fesm2022_forms.sg, fesm2022_forms.u, template_dialog_component.J, localize_directive.X, pbi_form_field_component.bP, pbi_form_field_component.ug, pbi_form_field_component.nm, pbi_form_field_component.uC, editable_label_component.V, localize_pipe.F ],
                styles: [ '.clusteringDialogContent[_ngcontent-%COMP%]{font-size:var(--md-font-size, 14px);height:450px;width:690px;max-width:690px}.clusteringDialogContent[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:inherit}.clusteringDialogContent[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   input[readonly][_ngcontent-%COMP%]{background-color:var(--fluent-theme-neutral-light-color, #EDEBE9)}.clusteringDialogContent[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{display:flex;margin-bottom:12px}.clusteringDialogContent[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .formItem[_ngcontent-%COMP%]{flex:1}html:not([dir="rtl"])[_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .firstItemInRow[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .firstItemInRow[_ngcontent-%COMP%]{margin-right:12px}html[dir="rtl"][_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .firstItemInRow[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .firstItemInRow[_ngcontent-%COMP%]{margin-left:12px}.clusteringDialogContent[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]   .clustersUpdateWarningLabel[_ngcontent-%COMP%]{font-weight:400;line-height:normal}.clusteringDialogContent[_ngcontent-%COMP%]   .numberOfClusterContainer[_ngcontent-%COMP%]{display:flex;flex-direction:column;flex:.5}.clusteringDialogContent[_ngcontent-%COMP%]   .numberOfClusterContainer[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{margin:0 0 4px}.clusteringDialogContent[_ngcontent-%COMP%]   .numberOfClustersLabel[_ngcontent-%COMP%]{font-weight:var(--font-weight-semi-bold, 600)}.clusteringDialogContent[_ngcontent-%COMP%]   .numberOfClustersInput[_ngcontent-%COMP%]:focus{outline-style:none;border:1px solid var(--fluent-theme-black-color, #000)}.clusteringDialogContent[_ngcontent-%COMP%]   .numberOfClustersInput.inputHasError[_ngcontent-%COMP%]{border:1px solid var(--fluent-theme-error-dark-color, #A80000)}.clusteringDialogContent[_ngcontent-%COMP%]   .partitionContainer[_ngcontent-%COMP%]{height:100%}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]{overflow:auto;border:solid 1px #8A8886;box-sizing:border-box;margin-top:6px}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   .partitionsList[_ngcontent-%COMP%]{margin:5px 0;padding:0;height:0}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]{list-style:none;display:block;cursor:default;padding:0 5px}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode.role-selected[_ngcontent-%COMP%]{outline:var(--focus-two-tone-outline-definition, auto 1px);outline-color:var(--focus-two-tone-outline-color, -webkit-focus-ring-color);outline-offset:-1px}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]:hover:not(.role-selected){background-color:var(--fluent-theme-neutral-lighter-color, #F3F2F1)}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode.editDisabled[_ngcontent-%COMP%]{color:var(--fluent-theme-neutral-tertia-color, #A19F9D)}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   .editable[_ngcontent-%COMP%]:not(.editDisabled){cursor:pointer}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   .disabled[_ngcontent-%COMP%]{color:var(--fluent-theme-neutral-tertiary-alt-color, #C8C6C4)}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%]{display:inline-block;vertical-align:text-bottom}html:not([dir="rtl"])[_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%], html:not([dir="rtl"])   [_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%]{margin-right:3px}html[dir="rtl"][_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%], html[dir="rtl"]   [_nghost-%COMP%]   .clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%]{margin-left:3px}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%]   .textLabel[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis;word-wrap:no-wrap}.clusteringDialogContent[_ngcontent-%COMP%]   .scrollableContainer[_ngcontent-%COMP%]   li.partitionNode[_ngcontent-%COMP%]   editable-label[_ngcontent-%COMP%]   input.textInput[_ngcontent-%COMP%]{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);transform:translate(-2px,1px);min-width:0;width:200px;box-sizing:border-box}.warning[_ngcontent-%COMP%]{font-size:12px;font-weight:400;margin:4px 0 0;color:var(--fluent-theme-error-dark-color, #A80000)}' ],
                changeDetection: 0
            }), ClusteringDialogComponent;
        }(), localization_module = __webpack_require__(79061), dialogs_module = __webpack_require__(76966), editable_label_module = __webpack_require__(16987), pbi_form_field_module = __webpack_require__(14525), ClusteringDialogModule = function() {
            function ClusteringDialogModule() {}
            return ClusteringDialogModule.\u0275fac = function(t) {
                return new (t || ClusteringDialogModule);
            }, ClusteringDialogModule.\u0275mod = core["\u0275\u0275defineNgModule"]({
                type: ClusteringDialogModule
            }), ClusteringDialogModule.\u0275inj = core["\u0275\u0275defineInjector"]({
                imports: [ common.CommonModule, fesm2022_forms.u5, fesm2022_forms.UX, dialogs_module.c.withManifest([ {
                    componentIdentifier: clustering_dialog_identifier_component.z,
                    componentType: ClusteringDialogComponent
                } ]), localization_module.v, pbi_form_field_module.g, editable_label_module.w ]
            }), ClusteringDialogModule;
        }();
    },
    45074: function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            bP: function() {
                return PbiFormFieldComponent;
            },
            nm: function() {
                return PbiInputLabelDirective;
            },
            uC: function() {
                return PbiInputErrorDirective;
            },
            ug: function() {
                return PbiInputDirective;
            }
        });
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4437), _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50423), _c0 = [ [ [ "", "pbiLabel", "" ] ], [ [ "", "pbiInput", "" ] ], [ [ "", "pbiInputButton", "" ] ], [ [ "", "pbiInputError", "" ] ] ], _c1 = [ "[pbiLabel]", "[pbiInput]", "[pbiInputButton]", "[pbiInputError]" ], pbiInputIdCounter = 0, PbiInputDirective = function() {
            function PbiInputDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputDirective.\u0275fac = function(t) {
                return new (t || PbiInputDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputDirective,
                selectors: [ [ "", "pbiInput", "" ] ],
                hostAttrs: [ "autocomplete", "off" ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("aria-required", ctx.required || null)("aria-describedby", null == ctx.formField.error ? null : ctx.formField.error.id)("aria-invalid", ctx.formField.error ? "true" : "false");
                },
                inputs: {
                    required: "required"
                }
            }), PbiInputDirective;
        }(), PbiInputLabelDirective = function() {
            function PbiInputLabelDirective(elementRef, formField) {
                this.elementRef = elementRef, this.formField = formField;
            }
            return PbiInputLabelDirective.\u0275fac = function(t) {
                return new (t || PbiInputLabelDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"]((0, 
                _angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function() {
                    return PbiFormFieldComponent;
                })));
            }, PbiInputLabelDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputLabelDirective,
                selectors: [ [ "", "pbiLabel", "" ] ],
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-label-required", null != ctx.formField.input.required);
                }
            }), PbiInputLabelDirective;
        }(), PbiInputErrorDirective = function() {
            function PbiInputErrorDirective() {
                this.id = "pbi-input-error-id-".concat(pbiInputIdCounter++);
            }
            return PbiInputErrorDirective.\u0275fac = function(t) {
                return new (t || PbiInputErrorDirective);
            }, PbiInputErrorDirective.\u0275dir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineDirective"]({
                type: PbiInputErrorDirective,
                selectors: [ [ "", "pbiInputError", "" ] ],
                hostVars: 3,
                hostBindings: function(rf, ctx) {
                    2 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275attribute"]("id", ctx.id), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-input-error", !0));
                }
            }), PbiInputErrorDirective;
        }(), PbiFormFieldComponent = function() {
            function PbiFormFieldComponent(renderer) {
                this.renderer = renderer, this._compact = !1;
            }
            return Object.defineProperty(PbiFormFieldComponent.prototype, "compact", {
                get: function() {
                    return this._compact;
                },
                set: function(value) {
                    this._compact = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.Ig)(value);
                },
                enumerable: !1,
                configurable: !0
            }), PbiFormFieldComponent.prototype.ngAfterContentInit = function() {
                if (this.input && this.label) {
                    var id = "pbi-input-id-".concat(pbiInputIdCounter++);
                    this.renderer.setAttribute(this.input.elementRef.nativeElement, "id", id), this.renderer.setAttribute(this.label.elementRef.nativeElement, "for", id);
                }
            }, PbiFormFieldComponent.\u0275fac = function(t) {
                return new (t || PbiFormFieldComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275directiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2));
            }, PbiFormFieldComponent.\u0275cmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275defineComponent"]({
                type: PbiFormFieldComponent,
                selectors: [ [ "pbi-form-field" ] ],
                contentQueries: function(rf, ctx, dirIndex) {
                    if (1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputLabelDirective, 5), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275contentQuery"](dirIndex, PbiInputErrorDirective, 5)), 
                    2 & rf) {
                        var _t = void 0;
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.input = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.label = _t.first), 
                        _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275queryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275loadQuery"]()) && (ctx.error = _t.first);
                    }
                },
                hostVars: 2,
                hostBindings: function(rf, ctx) {
                    2 & rf && _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275classProp"]("pbi-compact-form-field", ctx.compact);
                },
                inputs: {
                    compact: "compact"
                },
                ngContentSelectors: _c1,
                decls: 5,
                vars: 0,
                consts: [ [ 1, "controls" ] ],
                template: function(rf, ctx) {
                    1 & rf && (_angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projectionDef"](_c0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](0), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementStart"](1, "div", 0), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](2, 1), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](3, 2), 
                    _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275elementEnd"](), _angular_core__WEBPACK_IMPORTED_MODULE_0__["\u0275\u0275projection"](4, 3));
                },
                styles: [ '[_nghost-%COMP%]{display:flex;flex-direction:column;--input-border-color: var(--gray-110);--input-foreground: var(--gray-140);--disabled-input-background: var(--gray-20);--disabled-input-border-color: var(--gray-60);--disabled-input-foreground: var(--gray-90);--focused-input-border-color: var(--gray-130);--focused-input-foreground: var(--gray-180);--error-color: var(--fluent-theme-error-dark-color)}[data-legacy-theming=false]   [_nghost-%COMP%]{--input-border-color: var(--colorNeutralStroke1);--input-foreground: var(--colorNeutralForeground1);--disabled-input-background: var(--colorNeutralBackgroundDisabled);--disabled-input-border-color: var(--colorNeutralStrokeDisabled);--disabled-input-foreground: var(--colorNeutralForegroundDisabled);--focused-input-border-color: var(--colorNeutralStrokeFocus2);--focused-input-foreground: var(--colorNeutralForeground1);--error-color: var(--fluent-theme-error-dark-color)}.pbi-form-field-inline[_nghost-%COMP%] {flex-direction:row;align-items:center;justify-content:space-between}.pbi-form-field-inline[_nghost-%COMP%]  label{margin:0 8px 0 0}.pbi-form-field-inline[_nghost-%COMP%]  .controls{flex-grow:1;justify-content:flex-end}.pbi-compact-form-field[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400)}.pbi-compact-form-field[_nghost-%COMP%]  input{height:28px;padding:4px 6px}.pbi-compact-form-field[_nghost-%COMP%]  textarea{padding:4px 6px}[_nghost-%COMP%]  *{box-sizing:border-box}[_nghost-%COMP%]  label{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-semi-bold, 600);margin:0 0 4px}[_nghost-%COMP%]  label.pbi-label-required:after{content:"*";margin-left:4px;color:var(--error-color)}[_nghost-%COMP%]  .controls{display:flex}[_nghost-%COMP%]  .controls>*:not(:last-child){margin-right:8px}[_nghost-%COMP%]  input{height:32px}[_nghost-%COMP%]  textarea{resize:none}[_nghost-%COMP%]  input, [_nghost-%COMP%]  textarea{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--md-font-size, 14px);font-weight:var(--font-weight-regular, 400);width:100%;border-radius:2px;border:1px solid var(--input-border-color);color:var(--input-foreground);outline:none;padding:8px 6px}[_nghost-%COMP%]  input[disabled], [_nghost-%COMP%]  textarea[disabled], [_nghost-%COMP%]  input[aria-disabled=true], [_nghost-%COMP%]  textarea[aria-disabled=true]{background-color:var(--disabled-input-background);border-color:var(--disabled-input-border-color);color:var(--disabled-input-foreground)}[_nghost-%COMP%]  input:focus, [_nghost-%COMP%]  textarea:focus{border-color:var(--focused-input-border-color);color:var(--focused-input-foreground)}[_nghost-%COMP%]  [pbiInput][aria-invalid=true]{border-color:var(--error-color)}[_nghost-%COMP%]  .pbi-input-error{font-family:var(--fluent-font-family, "Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif);font-size:var(--sm-font-size, 12px);font-weight:var(--font-weight-regular, 400);margin:4px 0 0;color:var(--error-color)}' ],
                changeDetection: 0
            }), PbiFormFieldComponent;
        }();
    }
} ]);